LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 6AB8721B7C8A3BBD5BBA94B8DEA527A8DB5F340918DFB5A5121045D71289F4E0
LOAD:0000000000000000 ; Input MD5    : 3868E3546F4F665B2A8CFC5B2457BA38
LOAD:0000000000000000 ; Input CRC32  : DD14CDD8
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/sync
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'sync.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 235C0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6520h                ; Size in file image
LOAD:00000000000000D8                 dq 6520h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B50h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B50h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 530h                 ; Size in file image
LOAD:0000000000000110                 dq 6D0h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C58h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 57F0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 57F0h                ; Physical address
LOAD:00000000000001B0                 dq 244h                 ; Size in file image
LOAD:00000000000001B8                 dq 244h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B50h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B50h              ; Physical address
LOAD:0000000000000220                 dq 4B0h                 ; Size in file image
LOAD:0000000000000228                 dq 4B0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 9Eh, 0B7h, 79h, 4Fh, 61h, 18h, 6Dh, 78h, 0DEh, 0A7h ; Desc
LOAD:0000000000000284                 db 0B1h, 50h, 1Eh, 0D4h, 5Fh, 0D5h, 7Fh, 0F2h, 21h, 97h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 34h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 34h, 35h, 3Ah
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aFree - offset byte_860, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F0                            0>
LOAD:0000000000000308                 Elf64_Sym <offset aAbort - offset byte_860, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aErrnoLocation - offset byte_860, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aFdatasync - offset byte_860, 12h, 0, 0, \ ; "fdatasync"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aStrncmp - offset byte_860, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aItmDeregistert - offset byte_860, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aExit - offset byte_860, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000380                            0>
LOAD:0000000000000398                 Elf64_Sym <offset aFpending - offset byte_860, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aFcntl - offset byte_860, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003B0                            0>
LOAD:00000000000003C8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_860, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aFclose - offset byte_860, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aBindtextdomain - offset byte_860, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aDcgettext - offset byte_860, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_860, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aStrlen - offset byte_860, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aSyncfs - offset byte_860, 12h, 0, 0, \ ; "syncfs"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aStackChkFail - offset byte_860, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aGetoptLong - offset byte_860, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aMbrtowc - offset byte_860, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aStrrchr - offset byte_860, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aLseek - offset byte_860, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D0                            0>
LOAD:00000000000004E8                 Elf64_Sym <offset aMemset - offset byte_860, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aFclose+1 - offset byte_860, 12h, 0, 0, \ ; "close"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aLibcStartMain - offset byte_860, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aMemcmp - offset byte_860, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aFputsUnlocked - offset byte_860, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aCalloc - offset byte_860, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aGmonStart - offset byte_860, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aMemcpy - offset byte_860, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aFileno - offset byte_860, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aFdatasync+5 - offset byte_860, 12h, 0, 0, \ ; "sync"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aMalloc - offset byte_860, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aFflush - offset byte_860, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aNlLanginfo - offset byte_860, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aFreading - offset byte_860, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aRealloc - offset byte_860, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aSetlocale - offset byte_860, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aPrintfChk - offset byte_860, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aError - offset byte_860, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000680                            0>
LOAD:0000000000000698                 Elf64_Sym <offset aFsync - offset byte_860, 12h, 0, 0, offset dword_0,\ ; "fsync"
LOAD:0000000000000698                            0>
LOAD:00000000000006B0                 Elf64_Sym <offset aOpen - offset byte_860, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:00000000000006B0                            0>
LOAD:00000000000006C8                 Elf64_Sym <offset aFseeko - offset byte_860, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aCxaAtexit - offset byte_860, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aExit+1 - offset byte_860, 12h, 0, 0, \ ; "exit"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aFwrite - offset byte_860, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aFprintfChk - offset byte_860, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aItmRegistertmc - offset byte_860, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aMbsinit - offset byte_860, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aIswprint - offset byte_860, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aCxaFinalize - offset byte_860, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aCtypeBLoc - offset byte_860, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aStdout - offset byte_860, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007B8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000007D0                 Elf64_Sym <offset aProgname - offset byte_860, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000007D0                            offset __bss_start, 8>
LOAD:00000000000007E8                 Elf64_Sym <offset aProgramInvocat - offset byte_860, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000007E8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000800                 Elf64_Sym <offset aPrognameFull - offset byte_860, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000800                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000818                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_860, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000818                            offset __bss_start, 8>
LOAD:0000000000000830                 Elf64_Sym <offset aStderr - offset byte_860, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000830                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000848                 Elf64_Sym <offset aOptind - offset byte_860, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000848                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000860 ; ELF String Table
LOAD:0000000000000860 byte_860        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000860                                         ; LOAD:0000000000000308↑o ...
LOAD:0000000000000861 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B70↓o
LOAD:000000000000086B aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000872 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000668↑o
LOAD:000000000000087F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000889 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:0000000000000891 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000899 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000848↑o
LOAD:00000000000008A0 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:00000000000008A8 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000410↑o
LOAD:00000000000008B2 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000680↑o
LOAD:00000000000008B8 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000470↑o
LOAD:00000000000008C9 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000770↑o
LOAD:00000000000008D2 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000638↑o
LOAD:00000000000008DA aFsync          db 'fsync',0            ; DATA XREF: LOAD:0000000000000698↑o
LOAD:00000000000008E0 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000308↑o
LOAD:00000000000008E6 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000380↑o
LOAD:00000000000008E6                                         ; LOAD:00000000000006F8↑o
LOAD:00000000000008EC aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000008EC                                         ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:0000000000000904 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000904                                         ; DATA XREF: LOAD:0000000000000428↑o
LOAD:000000000000091B aFdatasync      db 'fdatasync',0        ; DATA XREF: LOAD:0000000000000338↑o
LOAD:000000000000091B                                         ; LOAD:00000000000005C0↑o
LOAD:0000000000000925 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:000000000000092C aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000933 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:000000000000093A aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000320↑o
LOAD:000000000000094B aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000952 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000728↑o
LOAD:0000000000000960 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000967 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:000000000000096D aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000974 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000974                                         ; LOAD:0000000000000500↑o
LOAD:000000000000097B aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000982 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000758↑o
LOAD:000000000000098A aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000608↑o
LOAD:0000000000000996 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:00000000000009A4 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000620↑o
LOAD:00000000000009AF aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000830↑o
LOAD:00000000000009B6 aSyncfs         db 'syncfs',0           ; DATA XREF: LOAD:0000000000000458↑o
LOAD:00000000000009BD aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000488↑o
LOAD:00000000000009C9 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:00000000000009D0 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000710↑o
LOAD:00000000000009D7 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000398↑o
LOAD:00000000000009E2 aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:00000000000009E7 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000009E7                                         ; DATA XREF: LOAD:0000000000000818↑o
LOAD:0000000000000A05 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000788↑o
LOAD:0000000000000A14 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000A1A aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:0000000000000A1A                                         ; LOAD:00000000000003C8↑o
LOAD:0000000000000A29 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A29                                         ; DATA XREF: LOAD:0000000000000518↑o
LOAD:0000000000000A3B aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000A42 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000A51 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000A56 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:0000000000000A61 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000A71 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000A7E aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000B80↓o
LOAD:0000000000000A88 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B90↓o
LOAD:0000000000000A94 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000BA0↓o
LOAD:0000000000000A9E aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000BB0↓o
LOAD:0000000000000AA9 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000BC0↓o
LOAD:0000000000000AB5 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000AB5                                         ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000AD1 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000AE0 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000AE0                                         ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000AFA ; ELF GNU Symbol Version Table
LOAD:0000000000000AFA                 dw 0
LOAD:0000000000000AFC                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000AFE                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B00                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B02                 dw 2                    ; fdatasync@@GLIBC_2.2.5
LOAD:0000000000000B04                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B06                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B08                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B0A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B0C                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000B0E                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B10                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B12                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B14                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B16                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B18                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B1A                 dw 3                    ; syncfs@@GLIBC_2.14
LOAD:0000000000000B1C                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B1E                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B20                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B22                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B24                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B26                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B28                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000B2A                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B2C                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B2E                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B30                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B32                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B34                 dw 3                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B36                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B38                 dw 2                    ; sync@@GLIBC_2.2.5
LOAD:0000000000000B3A                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000B3C                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000B3E                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000B40                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000B42                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000B44                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000B46                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000B48                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000B4A                 dw 2                    ; fsync@@GLIBC_2.2.5
LOAD:0000000000000B4C                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000B4E                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000B50                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000B52                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000B54                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000B56                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B58                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000B5A                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000B5C                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000B5E                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000B60                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000B62                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000B64                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000B68                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000B70 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B70                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_860, 10h, 0> ; "libc.so.6"
LOAD:0000000000000B80                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_860, \ ; "GLIBC_2.3"
LOAD:0000000000000B80                                10h>
LOAD:0000000000000B90                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_860, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B90                                10h>
LOAD:0000000000000BA0                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_860, \ ; "GLIBC_2.4"
LOAD:0000000000000BA0                                10h>
LOAD:0000000000000BB0                 Elf64_Vernaux <6969194h, 0, 3, offset aGlibc214 - offset byte_860, \ ; "GLIBC_2.14"
LOAD:0000000000000BB0                                10h>
LOAD:0000000000000BC0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_860, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000BD0 ; ELF RELA Relocation Table
LOAD:0000000000000BD0                 Elf64_Rela <206B50h, 8, 1AC0h> ; R_X86_64_RELATIVE +1AC0h
LOAD:0000000000000BE8                 Elf64_Rela <206B58h, 8, 1A80h> ; R_X86_64_RELATIVE +1A80h
LOAD:0000000000000C00                 Elf64_Rela <206B60h, 8, 4C39h> ; R_X86_64_RELATIVE +4C39h
LOAD:0000000000000C18                 Elf64_Rela <206B80h, 8, 4C3Eh> ; R_X86_64_RELATIVE +4C3Eh
LOAD:0000000000000C30                 Elf64_Rela <206BA0h, 8, 4C4Ah> ; R_X86_64_RELATIVE +4C4Ah
LOAD:0000000000000C48                 Elf64_Rela <206BC0h, 8, 4C4Fh> ; R_X86_64_RELATIVE +4C4Fh
LOAD:0000000000000C60                 Elf64_Rela <206C00h, 8, 4FA1h> ; R_X86_64_RELATIVE +4FA1h
LOAD:0000000000000C78                 Elf64_Rela <206C08h, 8, 4FA9h> ; R_X86_64_RELATIVE +4FA9h
LOAD:0000000000000C90                 Elf64_Rela <206C10h, 8, 4FAFh> ; R_X86_64_RELATIVE +4FAFh
LOAD:0000000000000CA8                 Elf64_Rela <206C18h, 8, 4FBCh> ; R_X86_64_RELATIVE +4FBCh
LOAD:0000000000000CC0                 Elf64_Rela <206C20h, 8, 4FC9h> ; R_X86_64_RELATIVE +4FC9h
LOAD:0000000000000CD8                 Elf64_Rela <206C28h, 8, 4B07h> ; R_X86_64_RELATIVE +4B07h
LOAD:0000000000000CF0                 Elf64_Rela <206C30h, 8, 4FDDh> ; R_X86_64_RELATIVE +4FDDh
LOAD:0000000000000D08                 Elf64_Rela <206C38h, 8, 4FC2h> ; R_X86_64_RELATIVE +4FC2h
LOAD:0000000000000D20                 Elf64_Rela <206C40h, 8, 4BDBh> ; R_X86_64_RELATIVE +4BDBh
LOAD:0000000000000D38                 Elf64_Rela <206C48h, 8, 4FE5h> ; R_X86_64_RELATIVE +4FE5h
LOAD:0000000000000D50                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000D68                 Elf64_Rela <207010h, 8, 4F2Ch> ; R_X86_64_RELATIVE +4F2Ch
LOAD:0000000000000D80                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000D98                 Elf64_Rela <207078h, 8, 2070E0h> ; R_X86_64_RELATIVE +2070E0h
LOAD:0000000000000DB0                 Elf64_Rela <206FD0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000DC8                 Elf64_Rela <206FD8h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000DE0                 Elf64_Rela <206FE0h, 1C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000DF8                 Elf64_Rela <206FE8h, 2F00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000E10                 Elf64_Rela <206FF0h, 3200000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E28                 Elf64_Rela <207080h, 3500000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000E40                 Elf64_Rela <207088h, 3400000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000E58                 Elf64_Rela <207090h, 3A00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000E70                 Elf64_Rela <207098h, 3700000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E88                 Elf64_Rela <2070A0h, 3900000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000EA0 ; ELF JMPREL Relocation Table
LOAD:0000000000000EA0                 Elf64_Rela <206E60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000EB8                 Elf64_Rela <206E68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000ED0                 Elf64_Rela <206E70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000EE8                 Elf64_Rela <206E78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT fdatasync
LOAD:0000000000000F00                 Elf64_Rela <206E80h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000F18                 Elf64_Rela <206E88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000F30                 Elf64_Rela <206E90h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000F48                 Elf64_Rela <206E98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000000F60                 Elf64_Rela <206EA0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F78                 Elf64_Rela <206EA8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F90                 Elf64_Rela <206EB0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000FA8                 Elf64_Rela <206EB8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000FC0                 Elf64_Rela <206EC0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000FD8                 Elf64_Rela <206EC8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000FF0                 Elf64_Rela <206ED0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT syncfs
LOAD:0000000000001008                 Elf64_Rela <206ED8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001020                 Elf64_Rela <206EE0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001038                 Elf64_Rela <206EE8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001050                 Elf64_Rela <206EF0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001068                 Elf64_Rela <206EF8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001080                 Elf64_Rela <206F00h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001098                 Elf64_Rela <206F08h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000010B0                 Elf64_Rela <206F10h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000010C8                 Elf64_Rela <206F18h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000010E0                 Elf64_Rela <206F20h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000010F8                 Elf64_Rela <206F28h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001110                 Elf64_Rela <206F30h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001128                 Elf64_Rela <206F38h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT sync
LOAD:0000000000001140                 Elf64_Rela <206F40h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001158                 Elf64_Rela <206F48h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001170                 Elf64_Rela <206F50h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001188                 Elf64_Rela <206F58h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000011A0                 Elf64_Rela <206F60h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000011B8                 Elf64_Rela <206F68h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000011D0                 Elf64_Rela <206F70h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000011E8                 Elf64_Rela <206F78h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001200                 Elf64_Rela <206F80h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fsync
LOAD:0000000000001218                 Elf64_Rela <206F88h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001230                 Elf64_Rela <206F90h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001248                 Elf64_Rela <206F98h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001260                 Elf64_Rela <206FA0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001278                 Elf64_Rela <206FA8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001290                 Elf64_Rela <206FB0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000012A8                 Elf64_Rela <206FB8h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000012C0                 Elf64_Rela <206FC0h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000012D8                 Elf64_Rela <206FC8h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000012D8 LOAD            ends
LOAD:00000000000012D8
.init:00000000000012F0 ; ===========================================================================
.init:00000000000012F0
.init:00000000000012F0 ; Segment type: Pure code
.init:00000000000012F0 ; Segment permissions: Read/Execute
.init:00000000000012F0 _init           segment dword public 'CODE' use64
.init:00000000000012F0                 assume cs:_init
.init:00000000000012F0                 ;org 12F0h
.init:00000000000012F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000012F0
.init:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.init:00000000000012F0
.init:00000000000012F0
.init:00000000000012F0                 public _init_proc
.init:00000000000012F0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000012F0                 sub     rsp, 8          ; _init
.init:00000000000012F4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000012FB                 test    rax, rax
.init:00000000000012FE                 jz      short loc_1302
.init:0000000000001300                 call    rax ; __gmon_start__
.init:0000000000001302
.init:0000000000001302 loc_1302:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001302                 add     rsp, 8
.init:0000000000001306                 retn
.init:0000000000001306 _init_proc      endp
.init:0000000000001306
.init:0000000000001306 _init           ends
.init:0000000000001306
LOAD:0000000000001307 ; ===========================================================================
LOAD:0000000000001307
LOAD:0000000000001307 ; Segment type: Pure code
LOAD:0000000000001307 ; Segment permissions: Read/Execute
LOAD:0000000000001307 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001307                 assume cs:LOAD
LOAD:0000000000001307                 ;org 1307h
LOAD:0000000000001307                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001307                 align 10h
LOAD:0000000000001307 LOAD            ends
LOAD:0000000000001307
.plt:0000000000001310 ; ===========================================================================
.plt:0000000000001310
.plt:0000000000001310 ; Segment type: Pure code
.plt:0000000000001310 ; Segment permissions: Read/Execute
.plt:0000000000001310 _plt            segment para public 'CODE' use64
.plt:0000000000001310                 assume cs:_plt
.plt:0000000000001310                 ;org 1310h
.plt:0000000000001310                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310
.plt:0000000000001310 sub_1310        proc near               ; CODE XREF: .plt:000000000000132B↓j
.plt:0000000000001310                                         ; .plt:000000000000133B↓j ...
.plt:0000000000001310 ; __unwind {
.plt:0000000000001310                 push    cs:qword_206E50
.plt:0000000000001316                 jmp     cs:qword_206E58
.plt:0000000000001316 sub_1310        endp
.plt:0000000000001316
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:000000000000131C                 align 20h
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; void free(void *ptr)
.plt:0000000000001320 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001320                                         ; quotearg_free+37↓p ...
.plt:0000000000001320                 jmp     cs:free_ptr
.plt:0000000000001320 _free           endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    0
.plt:000000000000132B                 jmp     sub_1310
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: noreturn thunk
.plt:0000000000001330
.plt:0000000000001330 ; void __noreturn abort(void)
.plt:0000000000001330 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001330                                         ; quotearg_buffer_restyled:def_2151↓p ...
.plt:0000000000001330                 jmp     cs:abort_ptr
.plt:0000000000001330 _abort          endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    1
.plt:000000000000133B                 jmp     sub_1310
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; int *__errno_location(void)
.plt:0000000000001340 ___errno_location proc near             ; CODE XREF: main+1E9↓p
.plt:0000000000001340                                         ; main+26F↓p ...
.plt:0000000000001340                 jmp     cs:__errno_location_ptr
.plt:0000000000001340 ___errno_location endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    2
.plt:000000000000134B                 jmp     sub_1310
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; int fdatasync(int fildes)
.plt:0000000000001350 _fdatasync      proc near               ; CODE XREF: main+33C↓p
.plt:0000000000001350                 jmp     cs:fdatasync_ptr
.plt:0000000000001350 _fdatasync      endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    3
.plt:000000000000135B                 jmp     sub_1310
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001360 _strncmp        proc near               ; CODE XREF: usage+24C↓p
.plt:0000000000001360                                         ; usage+30D↓p
.plt:0000000000001360                 jmp     cs:strncmp_ptr
.plt:0000000000001360 _strncmp        endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    4
.plt:000000000000136B                 jmp     sub_1310
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: noreturn thunk
.plt:0000000000001370
.plt:0000000000001370 ; void __noreturn _exit(int status)
.plt:0000000000001370 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001370                 jmp     cs:_exit_ptr
.plt:0000000000001370 __exit          endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    5
.plt:000000000000137B                 jmp     sub_1310
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; size_t __fpending(FILE *fp)
.plt:0000000000001380 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001380                 jmp     cs:__fpending_ptr
.plt:0000000000001380 ___fpending     endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    6
.plt:000000000000138B                 jmp     sub_1310
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001390 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001390                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001390                 jmp     cs:fcntl_ptr
.plt:0000000000001390 _fcntl          endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    7
.plt:000000000000139B                 jmp     sub_1310
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; char *textdomain(const char *domainname)
.plt:00000000000013A0 _textdomain     proc near               ; CODE XREF: main+4C↓p
.plt:00000000000013A0                 jmp     cs:textdomain_ptr
.plt:00000000000013A0 _textdomain     endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    8
.plt:00000000000013AB                 jmp     sub_1310
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; int fclose(FILE *stream)
.plt:00000000000013B0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000013B0                                         ; rpl_fclose+6B↓j
.plt:00000000000013B0                 jmp     cs:fclose_ptr
.plt:00000000000013B0 _fclose         endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    9
.plt:00000000000013BB                 jmp     sub_1310
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000013C0 _bindtextdomain proc near               ; CODE XREF: main+40↓p
.plt:00000000000013C0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000013C0 _bindtextdomain endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    0Ah
.plt:00000000000013CB                 jmp     sub_1310
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000013D0 _dcgettext      proc near               ; CODE XREF: main+229↓p
.plt:00000000000013D0                                         ; main+267↓p ...
.plt:00000000000013D0                 jmp     cs:dcgettext_ptr
.plt:00000000000013D0 _dcgettext      endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    0Bh
.plt:00000000000013DB                 jmp     sub_1310
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000013E0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000013E0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000013E0 ___ctype_get_mb_cur_max endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    0Ch
.plt:00000000000013EB                 jmp     sub_1310
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; size_t strlen(const char *s)
.plt:00000000000013F0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000013F0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000013F0                 jmp     cs:strlen_ptr
.plt:00000000000013F0 _strlen         endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    0Dh
.plt:00000000000013FB                 jmp     sub_1310
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; int syncfs(int fd)
.plt:0000000000001400 _syncfs         proc near               ; CODE XREF: main+18F↓p
.plt:0000000000001400                 jmp     cs:syncfs_ptr
.plt:0000000000001400 _syncfs         endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    0Eh
.plt:000000000000140B                 jmp     sub_1310
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: noreturn thunk
.plt:0000000000001410
.plt:0000000000001410 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_32B3↓p
.plt:0000000000001410                                         ; quotearg_n_style:loc_38D9↓p ...
.plt:0000000000001410                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001410 ___stack_chk_fail endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    0Fh
.plt:000000000000141B                 jmp     sub_1310
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001420 _getopt_long    proc near               ; CODE XREF: main+73↓p
.plt:0000000000001420                 jmp     cs:getopt_long_ptr
.plt:0000000000001420 _getopt_long    endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    10h
.plt:000000000000142B                 jmp     sub_1310
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001430 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001430                 jmp     cs:mbrtowc_ptr
.plt:0000000000001430 _mbrtowc        endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    11h
.plt:000000000000143B                 jmp     sub_1310
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; char *strrchr(const char *s, int c)
.plt:0000000000001440 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001440                 jmp     cs:strrchr_ptr
.plt:0000000000001440 _strrchr        endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    12h
.plt:000000000000144B                 jmp     sub_1310
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001450 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001450                                         ; rpl_fseeko+3B↓p
.plt:0000000000001450                 jmp     cs:lseek_ptr
.plt:0000000000001450 _lseek          endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    13h
.plt:000000000000145B                 jmp     sub_1310
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001460 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001460                                         ; xzalloc+12↓j
.plt:0000000000001460                 jmp     cs:memset_ptr
.plt:0000000000001460 _memset         endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    14h
.plt:000000000000146B                 jmp     sub_1310
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int close(int fd)
.plt:0000000000001470 _close          proc near               ; CODE XREF: main+1A5↓p
.plt:0000000000001470                                         ; rpl_fcntl+1FE↓p
.plt:0000000000001470                 jmp     cs:close_ptr
.plt:0000000000001470 _close          endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    15h
.plt:000000000000147B                 jmp     sub_1310
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001480 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001480                 jmp     cs:memcmp_ptr
.plt:0000000000001480 _memcmp         endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    16h
.plt:000000000000148B                 jmp     sub_1310
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001490 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001490                                         ; usage+C2↓p ...
.plt:0000000000001490                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001490 _fputs_unlocked endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    17h
.plt:000000000000149B                 jmp     sub_1310
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000014A0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000014A0                 jmp     cs:calloc_ptr
.plt:00000000000014A0 _calloc         endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    18h
.plt:00000000000014AB                 jmp     sub_1310
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000014B0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000014B0                 jmp     cs:memcpy_ptr
.plt:00000000000014B0 _memcpy         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    19h
.plt:00000000000014BB                 jmp     sub_1310
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; int fileno(FILE *stream)
.plt:00000000000014C0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000014C0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000014C0                 jmp     cs:fileno_ptr
.plt:00000000000014C0 _fileno         endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    1Ah
.plt:00000000000014CB                 jmp     sub_1310
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; void sync(void)
.plt:00000000000014D0 _sync           proc near               ; CODE XREF: main+294↓p
.plt:00000000000014D0                 jmp     cs:sync_ptr
.plt:00000000000014D0 _sync           endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    1Bh
.plt:00000000000014DB                 jmp     sub_1310
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; void *malloc(size_t size)
.plt:00000000000014E0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000014E0                 jmp     cs:malloc_ptr
.plt:00000000000014E0 _malloc         endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    1Ch
.plt:00000000000014EB                 jmp     sub_1310
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int fflush(FILE *stream)
.plt:00000000000014F0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000014F0                                         ; rpl_fflush+3B↓j
.plt:00000000000014F0                 jmp     cs:fflush_ptr
.plt:00000000000014F0 _fflush         endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    1Dh
.plt:00000000000014FB                 jmp     sub_1310
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; char *nl_langinfo(nl_item item)
.plt:0000000000001500 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001500                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001500 _nl_langinfo    endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    1Eh
.plt:000000000000150B                 jmp     sub_1310
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; int __freading(FILE *fp)
.plt:0000000000001510 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001510                                         ; rpl_fflush+9↓p
.plt:0000000000001510                 jmp     cs:__freading_ptr
.plt:0000000000001510 ___freading     endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    1Fh
.plt:000000000000151B                 jmp     sub_1310
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001520 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001520                 jmp     cs:realloc_ptr
.plt:0000000000001520 _realloc        endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    20h ; ' '
.plt:000000000000152B                 jmp     sub_1310
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; char *setlocale(int category, const char *locale)
.plt:0000000000001530 _setlocale      proc near               ; CODE XREF: main+2D↓p
.plt:0000000000001530                                         ; usage+233↓p ...
.plt:0000000000001530                 jmp     cs:setlocale_ptr
.plt:0000000000001530 _setlocale      endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    21h ; '!'
.plt:000000000000153B                 jmp     sub_1310
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001540                                         ; usage+227↓p ...
.plt:0000000000001540                 jmp     cs:__printf_chk_ptr
.plt:0000000000001540 ___printf_chk   endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    22h ; '"'
.plt:000000000000154B                 jmp     sub_1310
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001550 _error          proc near               ; CODE XREF: main+23E↓p
.plt:0000000000001550                                         ; main+284↓p ...
.plt:0000000000001550                 jmp     cs:error_ptr
.plt:0000000000001550 _error          endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    23h ; '#'
.plt:000000000000155B                 jmp     sub_1310
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int fsync(int fd)
.plt:0000000000001560 _fsync          proc near               ; CODE XREF: main+349↓p
.plt:0000000000001560                 jmp     cs:fsync_ptr
.plt:0000000000001560 _fsync          endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    24h ; '$'
.plt:000000000000156B                 jmp     sub_1310
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int open(const char *file, int oflag, ...)
.plt:0000000000001570 _open           proc near               ; CODE XREF: main+1D9↓p
.plt:0000000000001570                                         ; main+1FB↓p
.plt:0000000000001570                 jmp     cs:open_ptr
.plt:0000000000001570 _open           endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    25h ; '%'
.plt:000000000000157B                 jmp     sub_1310
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001580 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4A0A↓j
.plt:0000000000001580                 jmp     cs:fseeko_ptr
.plt:0000000000001580 _fseeko         endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    26h ; '&'
.plt:000000000000158B                 jmp     sub_1310
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001590 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001590                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001590 ___cxa_atexit   endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    27h ; '''
.plt:000000000000159B                 jmp     sub_1310
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: noreturn thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void __noreturn exit(int status)
.plt:00000000000015A0 _exit           proc near               ; CODE XREF: main+E4↓p
.plt:00000000000015A0                                         ; usage+58↓p
.plt:00000000000015A0                 jmp     cs:exit_ptr
.plt:00000000000015A0 _exit           endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    28h ; '('
.plt:00000000000015AB                 jmp     sub_1310
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000015B0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000015B0                 jmp     cs:fwrite_ptr
.plt:00000000000015B0 _fwrite         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    29h ; ')'
.plt:00000000000015BB                 jmp     sub_1310
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000015C0                                         ; version_etc_arn+37↓p ...
.plt:00000000000015C0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000015C0 ___fprintf_chk  endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    2Ah ; '*'
.plt:00000000000015CB                 jmp     sub_1310
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000015D0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000015D0                 jmp     cs:mbsinit_ptr
.plt:00000000000015D0 _mbsinit        endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    2Bh ; '+'
.plt:00000000000015DB                 jmp     sub_1310
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int iswprint(wint_t wc)
.plt:00000000000015E0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000015E0                 jmp     cs:iswprint_ptr
.plt:00000000000015E0 _iswprint       endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    2Ch ; ','
.plt:00000000000015EB                 jmp     sub_1310
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000015F0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000015F0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000015F0 ___ctype_b_loc  endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    2Dh ; '-'
.plt:00000000000015FB                 jmp     sub_1310
.plt:00000000000015FB ; } // starts at 1310
.plt:00000000000015FB _plt            ends
.plt:00000000000015FB
.plt.got:0000000000001600 ; ===========================================================================
.plt.got:0000000000001600
.plt.got:0000000000001600 ; Segment type: Pure code
.plt.got:0000000000001600 ; Segment permissions: Read/Execute
.plt.got:0000000000001600 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001600                 assume cs:_plt_got
.plt.got:0000000000001600                 ;org 1600h
.plt.got:0000000000001600                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001600
.plt.got:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001600
.plt.got:0000000000001600 ; Attributes: thunk
.plt.got:0000000000001600
.plt.got:0000000000001600 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001600 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001600 ; __unwind {
.plt.got:0000000000001600                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001600 __cxa_finalize  endp
.plt.got:0000000000001600
.plt.got:0000000000001600 ; ---------------------------------------------------------------------------
.plt.got:0000000000001606                 align 8
.plt.got:0000000000001606 ; } // starts at 1600
.plt.got:0000000000001606 _plt_got        ends
.plt.got:0000000000001606
LOAD:0000000000001608 ; ===========================================================================
LOAD:0000000000001608
LOAD:0000000000001608 ; Segment type: Pure code
LOAD:0000000000001608 ; Segment permissions: Read/Execute
LOAD:0000000000001608 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001608                 assume cs:LOAD
LOAD:0000000000001608                 ;org 1608h
LOAD:0000000000001608                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001608                 align 10h
LOAD:0000000000001608 LOAD            ends
LOAD:0000000000001608
.text:0000000000001610 ; ===========================================================================
.text:0000000000001610
.text:0000000000001610 ; Segment type: Pure code
.text:0000000000001610 ; Segment permissions: Read/Execute
.text:0000000000001610 _text           segment para public 'CODE' use64
.text:0000000000001610                 assume cs:_text
.text:0000000000001610                 ;org 1610h
.text:0000000000001610                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001610
.text:0000000000001610 ; =============== S U B R O U T I N E =======================================
.text:0000000000001610
.text:0000000000001610
.text:0000000000001610 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001610                 public main
.text:0000000000001610 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001610
.text:0000000000001610 var_48          = qword ptr -48h
.text:0000000000001610 var_3C          = dword ptr -3Ch
.text:0000000000001610
.text:0000000000001610 ; __unwind {
.text:0000000000001610                 push    r15
.text:0000000000001612                 push    r14
.text:0000000000001614                 push    r13
.text:0000000000001616                 push    r12
.text:0000000000001618                 xor     r13d, r13d
.text:000000000000161B                 push    rbp
.text:000000000000161C                 push    rbx
.text:000000000000161D                 mov     ebp, edi
.text:000000000000161F                 mov     rbx, rsi
.text:0000000000001622                 xor     r12d, r12d
.text:0000000000001625                 sub     rsp, 18h
.text:0000000000001629                 mov     rdi, [rsi]
.text:000000000000162C                 call    set_program_name
.text:0000000000001631                 lea     rsi, aUsageSOptionFi+1Dh ; locale
.text:0000000000001638                 mov     edi, 6          ; category
.text:000000000000163D                 call    _setlocale
.text:0000000000001642                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001649                 lea     rdi, domainname ; "coreutils"
.text:0000000000001650                 call    _bindtextdomain
.text:0000000000001655                 lea     rdi, domainname ; "coreutils"
.text:000000000000165C                 call    _textdomain
.text:0000000000001661                 lea     rdi, close_stdout
.text:0000000000001668                 call    atexit
.text:000000000000166D
.text:000000000000166D loc_166D:                               ; CODE XREF: main+9E↓j
.text:000000000000166D                                         ; main+F6↓j
.text:000000000000166D                 lea     rcx, long_options ; longopts
.text:0000000000001674                 lea     rdx, shortopts  ; "df"
.text:000000000000167B                 xor     r8d, r8d        ; longind
.text:000000000000167E                 mov     rsi, rbx        ; argv
.text:0000000000001681                 mov     edi, ebp        ; argc
.text:0000000000001683                 call    _getopt_long
.text:0000000000001688                 cmp     eax, 0FFFFFFFFh
.text:000000000000168B                 jz      short loc_170B
.text:000000000000168D                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001692                 jz      loc_1963
.text:0000000000001698                 jle     short loc_16B0
.text:000000000000169A                 cmp     eax, 64h ; 'd'
.text:000000000000169D                 jz      short loc_1700
.text:000000000000169F                 cmp     eax, 66h ; 'f'
.text:00000000000016A2                 jnz     loc_196A
.text:00000000000016A8                 mov     r13d, 1
.text:00000000000016AE                 jmp     short loc_166D
.text:00000000000016B0 ; ---------------------------------------------------------------------------
.text:00000000000016B0
.text:00000000000016B0 loc_16B0:                               ; CODE XREF: main+88↑j
.text:00000000000016B0                 cmp     eax, 0FFFFFF7Dh
.text:00000000000016B5                 jnz     loc_196A
.text:00000000000016BB                 sub     rsp, 8
.text:00000000000016BF                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000016C6                 mov     rcx, cs:Version
.text:00000000000016CD                 push    0
.text:00000000000016CF                 lea     r9, aGiuseppeScriva ; "Giuseppe Scrivano"
.text:00000000000016D6                 lea     r8, aJimMeyering ; "Jim Meyering"
.text:00000000000016DD                 lea     rdx, unk_4B9D
.text:00000000000016E4                 lea     rsi, aSync      ; "sync"
.text:00000000000016EB                 xor     eax, eax
.text:00000000000016ED                 call    version_etc
.text:00000000000016F2                 xor     edi, edi        ; status
.text:00000000000016F4                 call    _exit
.text:00000000000016F4 ; ---------------------------------------------------------------------------
.text:00000000000016F9                 align 20h
.text:0000000000001700
.text:0000000000001700 loc_1700:                               ; CODE XREF: main+8D↑j
.text:0000000000001700                 mov     r12d, 1
.text:0000000000001706                 jmp     loc_166D
.text:000000000000170B ; ---------------------------------------------------------------------------
.text:000000000000170B
.text:000000000000170B loc_170B:                               ; CODE XREF: main+7B↑j
.text:000000000000170B                 test    r12b, r12b
.text:000000000000170E                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001715                 jz      short loc_1720
.text:0000000000001717                 test    r13b, r13b
.text:000000000000171A                 jnz     loc_1998
.text:0000000000001720
.text:0000000000001720 loc_1720:                               ; CODE XREF: main+105↑j
.text:0000000000001720                 cmp     eax, ebp
.text:0000000000001722                 setnl   dl
.text:0000000000001725                 test    dl, r12b
.text:0000000000001728                 jnz     loc_1974
.text:000000000000172E                 cmp     eax, ebp
.text:0000000000001730                 jge     loc_189E
.text:0000000000001736                 test    r13b, r13b
.text:0000000000001739                 mov     [rsp+48h+var_3C], 2
.text:0000000000001741                 jz      loc_193C
.text:0000000000001747
.text:0000000000001747 loc_1747:                               ; CODE XREF: main+334↓j
.text:0000000000001747                 mov     r13d, 1
.text:000000000000174D                 jmp     loc_17D3
.text:0000000000001752 ; ---------------------------------------------------------------------------
.text:0000000000001752
.text:0000000000001752 loc_1752:                               ; CODE XREF: main+1E3↓j
.text:0000000000001752                                         ; main+205↓j
.text:0000000000001752                 xor     eax, eax
.text:0000000000001754                 mov     esi, 3
.text:0000000000001759                 mov     edi, r12d       ; fd
.text:000000000000175C                 call    rpl_fcntl
.text:0000000000001761                 cmp     eax, 0FFFFFFFFh
.text:0000000000001764                 jz      loc_1858
.text:000000000000176A                 and     ah, 0F7h
.text:000000000000176D                 mov     esi, 4
.text:0000000000001772                 mov     edi, r12d       ; fd
.text:0000000000001775                 mov     edx, eax
.text:0000000000001777                 xor     eax, eax
.text:0000000000001779                 call    rpl_fcntl
.text:000000000000177E                 test    eax, eax
.text:0000000000001780                 js      loc_1858
.text:0000000000001786                 mov     eax, [rsp+48h+var_3C]
.text:000000000000178A                 cmp     eax, 1
.text:000000000000178D                 jz      loc_1949
.text:0000000000001793                 cmp     eax, 2
.text:0000000000001796                 jnz     loc_1956
.text:000000000000179C                 mov     edi, r12d       ; fd
.text:000000000000179F                 call    _syncfs
.text:00000000000017A4
.text:00000000000017A4 loc_17A4:                               ; CODE XREF: main+341↓j
.text:00000000000017A4                                         ; main+34E↓j
.text:00000000000017A4                 test    eax, eax
.text:00000000000017A6                 mov     r15d, 1
.text:00000000000017AC                 js      loc_1904
.text:00000000000017B2
.text:00000000000017B2 loc_17B2:                               ; CODE XREF: main+289↓j
.text:00000000000017B2                 mov     edi, r12d       ; fd
.text:00000000000017B5                 call    _close
.text:00000000000017BA                 test    eax, eax
.text:00000000000017BC                 js      loc_18C0
.text:00000000000017C2
.text:00000000000017C2 loc_17C2:                               ; CODE XREF: main+243↓j
.text:00000000000017C2                                         ; main+2EF↓j
.text:00000000000017C2                 add     cs:optind@@GLIBC_2_2_5, 1
.text:00000000000017C9                 and     r13d, r15d
.text:00000000000017CC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000017D3
.text:00000000000017D3 loc_17D3:                               ; CODE XREF: main+13D↑j
.text:00000000000017D3                 cmp     eax, ebp
.text:00000000000017D5                 jge     loc_18A9
.text:00000000000017DB                 mov     r14, [rbx+rax*8]
.text:00000000000017DF                 mov     esi, 800h       ; oflag
.text:00000000000017E4                 xor     eax, eax
.text:00000000000017E6                 mov     rdi, r14        ; file
.text:00000000000017E9                 call    _open
.text:00000000000017EE                 test    eax, eax
.text:00000000000017F0                 mov     r12d, eax
.text:00000000000017F3                 jns     loc_1752
.text:00000000000017F9                 call    ___errno_location
.text:00000000000017FE                 mov     esi, 801h       ; oflag
.text:0000000000001803                 mov     r15d, [rax]
.text:0000000000001806                 mov     rdi, r14        ; file
.text:0000000000001809                 xor     eax, eax
.text:000000000000180B                 call    _open
.text:0000000000001810                 test    eax, eax
.text:0000000000001812                 mov     r12d, eax
.text:0000000000001815                 jns     loc_1752
.text:000000000000181B                 mov     rsi, r14
.text:000000000000181E                 mov     edi, 4
.text:0000000000001823                 call    quotearg_style
.text:0000000000001828                 lea     rsi, msgid      ; "error opening %s"
.text:000000000000182F                 mov     r12, rax
.text:0000000000001832                 mov     edx, 5          ; category
.text:0000000000001837                 xor     edi, edi        ; domainname
.text:0000000000001839                 call    _dcgettext
.text:000000000000183E                 mov     esi, r15d       ; errnum
.text:0000000000001841                 mov     rdx, rax        ; format
.text:0000000000001844                 mov     rcx, r12
.text:0000000000001847                 xor     edi, edi        ; status
.text:0000000000001849                 xor     eax, eax
.text:000000000000184B                 xor     r15d, r15d
.text:000000000000184E                 call    _error
.text:0000000000001853                 jmp     loc_17C2
.text:0000000000001858 ; ---------------------------------------------------------------------------
.text:0000000000001858
.text:0000000000001858 loc_1858:                               ; CODE XREF: main+154↑j
.text:0000000000001858                                         ; main+170↑j
.text:0000000000001858                 mov     rsi, r14
.text:000000000000185B                 mov     edi, 4
.text:0000000000001860                 call    quotearg_style
.text:0000000000001865                 lea     rsi, aCouldnTResetNo ; "couldn't reset non-blocking mode %s"
.text:000000000000186C                 mov     edx, 5          ; category
.text:0000000000001871                 xor     edi, edi        ; domainname
.text:0000000000001873                 mov     [rsp+48h+var_48], rax
.text:0000000000001877                 call    _dcgettext
.text:000000000000187C                 mov     r15, rax
.text:000000000000187F                 call    ___errno_location
.text:0000000000001884                 mov     rcx, [rsp+48h+var_48]
.text:0000000000001888                 mov     rdx, r15        ; format
.text:000000000000188B
.text:000000000000188B loc_188B:                               ; CODE XREF: main+327↓j
.text:000000000000188B                 mov     esi, [rax]      ; errnum
.text:000000000000188D                 xor     edi, edi        ; status
.text:000000000000188F                 xor     eax, eax
.text:0000000000001891                 xor     r15d, r15d
.text:0000000000001894                 call    _error
.text:0000000000001899                 jmp     loc_17B2
.text:000000000000189E ; ---------------------------------------------------------------------------
.text:000000000000189E
.text:000000000000189E loc_189E:                               ; CODE XREF: main+120↑j
.text:000000000000189E                 mov     r13d, 1
.text:00000000000018A4                 call    _sync
.text:00000000000018A9
.text:00000000000018A9 loc_18A9:                               ; CODE XREF: main+1C5↑j
.text:00000000000018A9                 add     rsp, 18h
.text:00000000000018AD                 xor     r13d, 1
.text:00000000000018B1                 pop     rbx
.text:00000000000018B2                 movzx   eax, r13b
.text:00000000000018B6                 pop     rbp
.text:00000000000018B7                 pop     r12
.text:00000000000018B9                 pop     r13
.text:00000000000018BB                 pop     r14
.text:00000000000018BD                 pop     r15
.text:00000000000018BF                 retn
.text:00000000000018C0 ; ---------------------------------------------------------------------------
.text:00000000000018C0
.text:00000000000018C0 loc_18C0:                               ; CODE XREF: main+1AC↑j
.text:00000000000018C0                 mov     rsi, r14
.text:00000000000018C3                 mov     edi, 4
.text:00000000000018C8                 xor     r15d, r15d
.text:00000000000018CB                 call    quotearg_style
.text:00000000000018D0                 lea     rsi, aFailedToCloseS ; "failed to close %s"
.text:00000000000018D7                 mov     edx, 5          ; category
.text:00000000000018DC                 xor     edi, edi        ; domainname
.text:00000000000018DE                 mov     r14, rax
.text:00000000000018E1                 call    _dcgettext
.text:00000000000018E6                 mov     r12, rax
.text:00000000000018E9                 call    ___errno_location
.text:00000000000018EE                 mov     esi, [rax]      ; errnum
.text:00000000000018F0                 mov     rcx, r14
.text:00000000000018F3                 mov     rdx, r12        ; format
.text:00000000000018F6                 xor     edi, edi        ; status
.text:00000000000018F8                 xor     eax, eax
.text:00000000000018FA                 call    _error
.text:00000000000018FF                 jmp     loc_17C2
.text:0000000000001904 ; ---------------------------------------------------------------------------
.text:0000000000001904
.text:0000000000001904 loc_1904:                               ; CODE XREF: main+19C↑j
.text:0000000000001904                 mov     rsi, r14
.text:0000000000001907                 mov     edi, 4
.text:000000000000190C                 call    quotearg_style
.text:0000000000001911                 lea     rsi, aErrorSyncingS ; "error syncing %s"
.text:0000000000001918                 mov     edx, 5          ; category
.text:000000000000191D                 mov     r15, rax
.text:0000000000001920                 xor     edi, edi        ; domainname
.text:0000000000001922                 call    _dcgettext
.text:0000000000001927                 mov     [rsp+48h+var_48], rax
.text:000000000000192B                 call    ___errno_location
.text:0000000000001930                 mov     rcx, r15
.text:0000000000001933                 mov     rdx, [rsp+48h+var_48]
.text:0000000000001937                 jmp     loc_188B
.text:000000000000193C ; ---------------------------------------------------------------------------
.text:000000000000193C
.text:000000000000193C loc_193C:                               ; CODE XREF: main+131↑j
.text:000000000000193C                 movzx   ecx, r12b
.text:0000000000001940                 mov     [rsp+48h+var_3C], ecx
.text:0000000000001944                 jmp     loc_1747
.text:0000000000001949 ; ---------------------------------------------------------------------------
.text:0000000000001949
.text:0000000000001949 loc_1949:                               ; CODE XREF: main+17D↑j
.text:0000000000001949                 mov     edi, r12d       ; fildes
.text:000000000000194C                 call    _fdatasync
.text:0000000000001951                 jmp     loc_17A4
.text:0000000000001956 ; ---------------------------------------------------------------------------
.text:0000000000001956
.text:0000000000001956 loc_1956:                               ; CODE XREF: main+186↑j
.text:0000000000001956                 mov     edi, r12d       ; fd
.text:0000000000001959                 call    _fsync
.text:000000000000195E                 jmp     loc_17A4
.text:0000000000001963 ; ---------------------------------------------------------------------------
.text:0000000000001963
.text:0000000000001963 loc_1963:                               ; CODE XREF: main+82↑j
.text:0000000000001963                 xor     edi, edi        ; status
.text:0000000000001965                 call    usage
.text:000000000000196A ; ---------------------------------------------------------------------------
.text:000000000000196A
.text:000000000000196A loc_196A:                               ; CODE XREF: main+92↑j
.text:000000000000196A                                         ; main+A5↑j
.text:000000000000196A                 mov     edi, 1          ; status
.text:000000000000196F                 call    usage
.text:0000000000001974 ; ---------------------------------------------------------------------------
.text:0000000000001974
.text:0000000000001974 loc_1974:                               ; CODE XREF: main+118↑j
.text:0000000000001974                 lea     rsi, aDataNeedsAtLea ; "--data needs at least one argument"
.text:000000000000197B                 mov     edx, 5          ; category
.text:0000000000001980                 xor     edi, edi        ; domainname
.text:0000000000001982                 call    _dcgettext
.text:0000000000001987                 xor     esi, esi        ; errnum
.text:0000000000001989                 mov     rdx, rax        ; format
.text:000000000000198C                 mov     edi, 1          ; status
.text:0000000000001991                 xor     eax, eax
.text:0000000000001993                 call    _error
.text:0000000000001998
.text:0000000000001998 loc_1998:                               ; CODE XREF: main+10A↑j
.text:0000000000001998                 lea     rsi, aCannotSpecifyB ; "cannot specify both --data and --file-s"...
.text:000000000000199F                 mov     edx, 5          ; category
.text:00000000000019A4                 xor     edi, edi        ; domainname
.text:00000000000019A6                 call    _dcgettext
.text:00000000000019AB                 xor     esi, esi        ; errnum
.text:00000000000019AD                 mov     rdx, rax        ; format
.text:00000000000019B0                 mov     edi, 1          ; status
.text:00000000000019B5                 xor     eax, eax
.text:00000000000019B7                 call    _error
.text:00000000000019B7 ; } // starts at 1610
.text:00000000000019BC                 nop     dword ptr [rax+00h]
.text:00000000000019BC main            endp ; sp-analysis failed
.text:00000000000019BC
.text:00000000000019C0
.text:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019C0
.text:00000000000019C0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000019C0
.text:00000000000019C0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000019C0                 public start
.text:00000000000019C0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000019C0 ; __unwind {
.text:00000000000019C0                 xor     ebp, ebp
.text:00000000000019C2                 mov     r9, rdx         ; rtld_fini
.text:00000000000019C5                 pop     rsi             ; argc
.text:00000000000019C6                 mov     rdx, rsp        ; ubp_av
.text:00000000000019C9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000019CD                 push    rax
.text:00000000000019CE                 push    rsp             ; stack_end
.text:00000000000019CF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000019D6                 lea     rcx, __libc_csu_init ; init
.text:00000000000019DD                 lea     rdi, main       ; main
.text:00000000000019E4                 call    cs:__libc_start_main_ptr
.text:00000000000019EA                 hlt
.text:00000000000019EA ; } // starts at 19C0
.text:00000000000019EA start           endp
.text:00000000000019EA
.text:00000000000019EA ; ---------------------------------------------------------------------------
.text:00000000000019EB                 align 10h
.text:00000000000019F0
.text:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019F0
.text:00000000000019F0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000019F0
.text:00000000000019F0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1AA3↓p
.text:00000000000019F0                 lea     rdi, __bss_start
.text:00000000000019F7                 push    rbp
.text:00000000000019F8                 lea     rax, __bss_start
.text:00000000000019FF                 cmp     rax, rdi
.text:0000000000001A02                 mov     rbp, rsp
.text:0000000000001A05                 jz      short loc_1A20
.text:0000000000001A07                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001A0E                 test    rax, rax
.text:0000000000001A11                 jz      short loc_1A20
.text:0000000000001A13                 pop     rbp
.text:0000000000001A14                 jmp     rax
.text:0000000000001A14 ; ---------------------------------------------------------------------------
.text:0000000000001A16                 align 20h
.text:0000000000001A20
.text:0000000000001A20 loc_1A20:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001A20                                         ; deregister_tm_clones+21↑j
.text:0000000000001A20                 pop     rbp
.text:0000000000001A21                 retn
.text:0000000000001A21 deregister_tm_clones endp
.text:0000000000001A21
.text:0000000000001A21 ; ---------------------------------------------------------------------------
.text:0000000000001A22                 align 10h
.text:0000000000001A30
.text:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A30
.text:0000000000001A30 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A30
.text:0000000000001A30 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001A30                 lea     rdi, __bss_start
.text:0000000000001A37                 lea     rsi, __bss_start
.text:0000000000001A3E                 push    rbp
.text:0000000000001A3F                 sub     rsi, rdi
.text:0000000000001A42                 mov     rbp, rsp
.text:0000000000001A45                 sar     rsi, 3
.text:0000000000001A49                 mov     rax, rsi
.text:0000000000001A4C                 shr     rax, 3Fh
.text:0000000000001A50                 add     rsi, rax
.text:0000000000001A53                 sar     rsi, 1
.text:0000000000001A56                 jz      short loc_1A70
.text:0000000000001A58                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001A5F                 test    rax, rax
.text:0000000000001A62                 jz      short loc_1A70
.text:0000000000001A64                 pop     rbp
.text:0000000000001A65                 jmp     rax
.text:0000000000001A65 ; ---------------------------------------------------------------------------
.text:0000000000001A67                 align 10h
.text:0000000000001A70
.text:0000000000001A70 loc_1A70:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001A70                                         ; register_tm_clones+32↑j
.text:0000000000001A70                 pop     rbp
.text:0000000000001A71                 retn
.text:0000000000001A71 register_tm_clones endp
.text:0000000000001A71
.text:0000000000001A71 ; ---------------------------------------------------------------------------
.text:0000000000001A72                 align 20h
.text:0000000000001A80
.text:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A80
.text:0000000000001A80 ; Attributes: info_from_lumina
.text:0000000000001A80
.text:0000000000001A80 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001A80                 cmp     cs:completed_7697, 0
.text:0000000000001A87                 jnz     short locret_1AB8
.text:0000000000001A89                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001A91                 push    rbp
.text:0000000000001A92                 mov     rbp, rsp
.text:0000000000001A95                 jz      short loc_1AA3
.text:0000000000001A97                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001A9E                 call    __cxa_finalize
.text:0000000000001AA3
.text:0000000000001AA3 loc_1AA3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001AA3                 call    deregister_tm_clones
.text:0000000000001AA8                 mov     cs:completed_7697, 1
.text:0000000000001AAF                 pop     rbp
.text:0000000000001AB0                 retn
.text:0000000000001AB0 ; ---------------------------------------------------------------------------
.text:0000000000001AB1                 align 8
.text:0000000000001AB8
.text:0000000000001AB8 locret_1AB8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001AB8                 rep retn
.text:0000000000001AB8 __do_global_dtors_aux endp
.text:0000000000001AB8
.text:0000000000001AB8 ; ---------------------------------------------------------------------------
.text:0000000000001ABA                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AC0
.text:0000000000001AC0 ; Attributes: bp-based frame
.text:0000000000001AC0
.text:0000000000001AC0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001AC0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001AC0                 push    rbp
.text:0000000000001AC1                 mov     rbp, rsp
.text:0000000000001AC4                 pop     rbp
.text:0000000000001AC5                 jmp     register_tm_clones
.text:0000000000001AC5 frame_dummy     endp
.text:0000000000001AC5
.text:0000000000001AC5 ; ---------------------------------------------------------------------------
.text:0000000000001ACA                 align 10h
.text:0000000000001AD0
.text:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AD0
.text:0000000000001AD0 ; Attributes: noreturn
.text:0000000000001AD0
.text:0000000000001AD0 ; void __fastcall __noreturn usage(int status)
.text:0000000000001AD0                 public usage
.text:0000000000001AD0 usage           proc near               ; CODE XREF: main+355↑p
.text:0000000000001AD0                                         ; main+35F↑p
.text:0000000000001AD0
.text:0000000000001AD0 var_A8          = qword ptr -0A8h
.text:0000000000001AD0 var_A0          = qword ptr -0A0h
.text:0000000000001AD0 var_98          = qword ptr -98h
.text:0000000000001AD0 var_90          = qword ptr -90h
.text:0000000000001AD0 var_88          = qword ptr -88h
.text:0000000000001AD0 var_80          = qword ptr -80h
.text:0000000000001AD0 var_78          = qword ptr -78h
.text:0000000000001AD0 var_70          = qword ptr -70h
.text:0000000000001AD0 var_68          = qword ptr -68h
.text:0000000000001AD0 var_60          = qword ptr -60h
.text:0000000000001AD0 var_58          = qword ptr -58h
.text:0000000000001AD0 var_50          = qword ptr -50h
.text:0000000000001AD0 var_48          = qword ptr -48h
.text:0000000000001AD0 var_40          = qword ptr -40h
.text:0000000000001AD0 var_30          = qword ptr -30h
.text:0000000000001AD0
.text:0000000000001AD0 ; __unwind {
.text:0000000000001AD0                 push    r13
.text:0000000000001AD2                 push    r12
.text:0000000000001AD4                 mov     edx, 5          ; category
.text:0000000000001AD9                 push    rbp
.text:0000000000001ADA                 push    rbx
.text:0000000000001ADB                 mov     ebp, edi
.text:0000000000001ADD                 sub     rsp, 88h
.text:0000000000001AE4                 mov     rbx, cs:program_name
.text:0000000000001AEB                 mov     rax, fs:28h
.text:0000000000001AF4                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001AF9                 xor     eax, eax
.text:0000000000001AFB                 test    edi, edi
.text:0000000000001AFD                 jz      short loc_1B2D
.text:0000000000001AFF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001B06                 xor     edi, edi        ; domainname
.text:0000000000001B08                 call    _dcgettext
.text:0000000000001B0D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001B14                 mov     rdx, rax
.text:0000000000001B17                 mov     rcx, rbx
.text:0000000000001B1A                 mov     esi, 1
.text:0000000000001B1F                 xor     eax, eax
.text:0000000000001B21                 call    ___fprintf_chk
.text:0000000000001B26
.text:0000000000001B26 loc_1B26:                               ; CODE XREF: usage+2C6↓j
.text:0000000000001B26                 mov     edi, ebp        ; status
.text:0000000000001B28                 call    _exit
.text:0000000000001B2D ; ---------------------------------------------------------------------------
.text:0000000000001B2D
.text:0000000000001B2D loc_1B2D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001B2D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION] [FILE]...\n"
.text:0000000000001B34                 xor     edi, edi        ; domainname
.text:0000000000001B36                 call    _dcgettext
.text:0000000000001B3B                 mov     rdx, rbx
.text:0000000000001B3E                 mov     rsi, rax
.text:0000000000001B41                 mov     edi, 1
.text:0000000000001B46                 xor     eax, eax
.text:0000000000001B48                 call    ___printf_chk
.text:0000000000001B4D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B54                 lea     rsi, aSynchronizeCac ; "Synchronize cached writes to persistent"...
.text:0000000000001B5B                 mov     edx, 5          ; category
.text:0000000000001B60                 xor     edi, edi        ; domainname
.text:0000000000001B62                 call    _dcgettext
.text:0000000000001B67                 mov     rsi, rbx        ; stream
.text:0000000000001B6A                 mov     rdi, rax        ; s
.text:0000000000001B6D                 call    _fputs_unlocked
.text:0000000000001B72                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B79                 lea     rsi, aDDataSyncOnlyF ; "  -d, --data             sync only file"...
.text:0000000000001B80                 mov     edx, 5          ; category
.text:0000000000001B85                 xor     edi, edi        ; domainname
.text:0000000000001B87                 call    _dcgettext
.text:0000000000001B8C                 mov     rsi, rbx        ; stream
.text:0000000000001B8F                 mov     rdi, rax        ; s
.text:0000000000001B92                 call    _fputs_unlocked
.text:0000000000001B97                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B9E                 lea     rsi, aFFileSystemSyn ; "  -f, --file-system      sync the file "...
.text:0000000000001BA5                 mov     edx, 5          ; category
.text:0000000000001BAA                 xor     edi, edi        ; domainname
.text:0000000000001BAC                 call    _dcgettext
.text:0000000000001BB1                 mov     rsi, rbx        ; stream
.text:0000000000001BB4                 mov     rdi, rax        ; s
.text:0000000000001BB7                 call    _fputs_unlocked
.text:0000000000001BBC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BC3                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001BCA                 mov     edx, 5          ; category
.text:0000000000001BCF                 xor     edi, edi        ; domainname
.text:0000000000001BD1                 call    _dcgettext
.text:0000000000001BD6                 mov     rsi, rbx        ; stream
.text:0000000000001BD9                 mov     rdi, rax        ; s
.text:0000000000001BDC                 call    _fputs_unlocked
.text:0000000000001BE1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BE8                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001BEF                 mov     edx, 5          ; category
.text:0000000000001BF4                 xor     edi, edi        ; domainname
.text:0000000000001BF6                 call    _dcgettext
.text:0000000000001BFB                 mov     rsi, rbx        ; stream
.text:0000000000001BFE                 mov     rdi, rax        ; s
.text:0000000000001C01                 lea     rbx, aSync      ; "sync"
.text:0000000000001C08                 call    _fputs_unlocked
.text:0000000000001C0D                 lea     rax, asc_4B27   ; "["
.text:0000000000001C14                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001C1B                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001C24                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001C2D                 mov     rdx, rsp
.text:0000000000001C30                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001C34                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001C3B                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001C40                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001C47                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001C4C                 lea     rax, domainname ; "coreutils"
.text:0000000000001C53                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001C58                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001C5F                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001C64                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001C6B                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001C70                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001C75                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001C7C                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001C81                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001C88                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001C8D                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001C92                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001C97                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001C9C                 nop     dword ptr [rax+00h]
.text:0000000000001CA0
.text:0000000000001CA0 loc_1CA0:                               ; CODE XREF: usage+1ED↓j
.text:0000000000001CA0                 add     rdx, 10h
.text:0000000000001CA4                 mov     rdi, [rdx]
.text:0000000000001CA7                 test    rdi, rdi
.text:0000000000001CAA                 jz      short loc_1CBF
.text:0000000000001CAC                 mov     ecx, 5
.text:0000000000001CB1                 mov     rsi, rbx
.text:0000000000001CB4                 repe cmpsb
.text:0000000000001CB6                 setnbe  al
.text:0000000000001CB9                 sbb     al, 0
.text:0000000000001CBB                 test    al, al
.text:0000000000001CBD                 jnz     short loc_1CA0
.text:0000000000001CBF
.text:0000000000001CBF loc_1CBF:                               ; CODE XREF: usage+1DA↑j
.text:0000000000001CBF                 mov     r12, [rdx+8]
.text:0000000000001CC3                 xor     edi, edi        ; domainname
.text:0000000000001CC5                 mov     edx, 5          ; category
.text:0000000000001CCA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001CD1                 test    r12, r12
.text:0000000000001CD4                 jz      loc_1D9B
.text:0000000000001CDA                 call    _dcgettext
.text:0000000000001CDF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001CE6                 lea     rdx, unk_4B9D
.text:0000000000001CED                 mov     rsi, rax
.text:0000000000001CF0                 mov     edi, 1
.text:0000000000001CF5                 xor     eax, eax
.text:0000000000001CF7                 call    ___printf_chk
.text:0000000000001CFC                 xor     esi, esi        ; locale
.text:0000000000001CFE                 mov     edi, 5          ; category
.text:0000000000001D03                 call    _setlocale
.text:0000000000001D08                 test    rax, rax
.text:0000000000001D0B                 jz      short loc_1D29
.text:0000000000001D0D                 lea     rsi, s2         ; "en_"
.text:0000000000001D14                 mov     edx, 3          ; n
.text:0000000000001D19                 mov     rdi, rax        ; s1
.text:0000000000001D1C                 call    _strncmp
.text:0000000000001D21                 test    eax, eax
.text:0000000000001D23                 jnz     loc_1E30
.text:0000000000001D29
.text:0000000000001D29 loc_1D29:                               ; CODE XREF: usage+23B↑j
.text:0000000000001D29                                         ; usage+385↓j
.text:0000000000001D29                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001D30                 xor     edi, edi        ; domainname
.text:0000000000001D32                 mov     edx, 5          ; category
.text:0000000000001D37                 call    _dcgettext
.text:0000000000001D3C                 lea     rcx, aSync      ; "sync"
.text:0000000000001D43                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001D4A                 mov     rsi, rax
.text:0000000000001D4D                 mov     edi, 1
.text:0000000000001D52                 xor     eax, eax
.text:0000000000001D54                 call    ___printf_chk
.text:0000000000001D59                 cmp     r12, rbx
.text:0000000000001D5C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001D63                 lea     rbx, aUsageSOptionFi+1Dh ; ""
.text:0000000000001D6A                 cmovz   rbx, rcx
.text:0000000000001D6E
.text:0000000000001D6E loc_1D6E:                               ; CODE XREF: usage+354↓j
.text:0000000000001D6E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001D75                 xor     edi, edi        ; domainname
.text:0000000000001D77                 mov     edx, 5          ; category
.text:0000000000001D7C                 call    _dcgettext
.text:0000000000001D81                 mov     rcx, rbx
.text:0000000000001D84                 mov     rsi, rax
.text:0000000000001D87                 mov     rdx, r12
.text:0000000000001D8A                 mov     edi, 1
.text:0000000000001D8F                 xor     eax, eax
.text:0000000000001D91                 call    ___printf_chk
.text:0000000000001D96                 jmp     loc_1B26
.text:0000000000001D9B ; ---------------------------------------------------------------------------
.text:0000000000001D9B
.text:0000000000001D9B loc_1D9B:                               ; CODE XREF: usage+204↑j
.text:0000000000001D9B                 call    _dcgettext
.text:0000000000001DA0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001DA7                 lea     rdx, unk_4B9D
.text:0000000000001DAE                 mov     rsi, rax
.text:0000000000001DB1                 mov     edi, 1
.text:0000000000001DB6                 xor     eax, eax
.text:0000000000001DB8                 call    ___printf_chk
.text:0000000000001DBD                 xor     esi, esi        ; locale
.text:0000000000001DBF                 mov     edi, 5          ; category
.text:0000000000001DC4                 call    _setlocale
.text:0000000000001DC9                 test    rax, rax
.text:0000000000001DCC                 jz      short loc_1DE6
.text:0000000000001DCE                 lea     rsi, s2         ; "en_"
.text:0000000000001DD5                 mov     edx, 3          ; n
.text:0000000000001DDA                 mov     rdi, rax        ; s1
.text:0000000000001DDD                 call    _strncmp
.text:0000000000001DE2                 test    eax, eax
.text:0000000000001DE4                 jnz     short loc_1E29
.text:0000000000001DE6
.text:0000000000001DE6 loc_1DE6:                               ; CODE XREF: usage+2FC↑j
.text:0000000000001DE6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001DED                 mov     edx, 5          ; category
.text:0000000000001DF2                 xor     edi, edi        ; domainname
.text:0000000000001DF4                 lea     r12, aSync      ; "sync"
.text:0000000000001DFB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001E02                 call    _dcgettext
.text:0000000000001E07                 lea     rcx, aSync      ; "sync"
.text:0000000000001E0E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001E15                 mov     rsi, rax
.text:0000000000001E18                 mov     edi, 1
.text:0000000000001E1D                 xor     eax, eax
.text:0000000000001E1F                 call    ___printf_chk
.text:0000000000001E24                 jmp     loc_1D6E
.text:0000000000001E29 ; ---------------------------------------------------------------------------
.text:0000000000001E29
.text:0000000000001E29 loc_1E29:                               ; CODE XREF: usage+314↑j
.text:0000000000001E29                 lea     r12, aSync      ; "sync"
.text:0000000000001E30
.text:0000000000001E30 loc_1E30:                               ; CODE XREF: usage+253↑j
.text:0000000000001E30                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E37                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001E3E                 xor     edi, edi        ; domainname
.text:0000000000001E40                 mov     edx, 5          ; category
.text:0000000000001E45                 call    _dcgettext
.text:0000000000001E4A                 mov     rsi, r13        ; stream
.text:0000000000001E4D                 mov     rdi, rax        ; s
.text:0000000000001E50                 call    _fputs_unlocked
.text:0000000000001E55                 jmp     loc_1D29
.text:0000000000001E55 ; } // starts at 1AD0
.text:0000000000001E55 usage           endp
.text:0000000000001E55
.text:0000000000001E55 ; ---------------------------------------------------------------------------
.text:0000000000001E5A                 align 20h
.text:0000000000001E60
.text:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E60
.text:0000000000001E60
.text:0000000000001E60                 public close_stdout_set_file_name
.text:0000000000001E60 close_stdout_set_file_name proc near
.text:0000000000001E60 ; __unwind {
.text:0000000000001E60                 mov     cs:file_name, rdi
.text:0000000000001E67                 retn
.text:0000000000001E67 ; } // starts at 1E60
.text:0000000000001E67 close_stdout_set_file_name endp
.text:0000000000001E67
.text:0000000000001E67 ; ---------------------------------------------------------------------------
.text:0000000000001E68                 align 10h
.text:0000000000001E70
.text:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E70
.text:0000000000001E70
.text:0000000000001E70                 public close_stdout_set_ignore_EPIPE
.text:0000000000001E70 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001E70 ; __unwind {
.text:0000000000001E70                 mov     cs:ignore_EPIPE, dil
.text:0000000000001E77                 retn
.text:0000000000001E77 ; } // starts at 1E70
.text:0000000000001E77 close_stdout_set_ignore_EPIPE endp
.text:0000000000001E77
.text:0000000000001E77 ; ---------------------------------------------------------------------------
.text:0000000000001E78                 align 20h
.text:0000000000001E80
.text:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E80
.text:0000000000001E80 ; Attributes: info_from_lumina
.text:0000000000001E80
.text:0000000000001E80 ; void __cdecl close_stdout()
.text:0000000000001E80                 public close_stdout
.text:0000000000001E80 close_stdout    proc near               ; DATA XREF: main+51↑o
.text:0000000000001E80 ; __unwind {
.text:0000000000001E80                 push    rbp
.text:0000000000001E81                 push    rbx
.text:0000000000001E82                 sub     rsp, 8
.text:0000000000001E86                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001E8D                 call    close_stream
.text:0000000000001E92                 test    eax, eax
.text:0000000000001E94                 jz      short loc_1EAC
.text:0000000000001E96                 call    ___errno_location
.text:0000000000001E9B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001EA2                 mov     rbx, rax
.text:0000000000001EA5                 jz      short loc_1EC3
.text:0000000000001EA7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001EAA                 jnz     short loc_1EC3
.text:0000000000001EAC
.text:0000000000001EAC loc_1EAC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001EAC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001EB3                 call    close_stream
.text:0000000000001EB8                 test    eax, eax
.text:0000000000001EBA                 jnz     short loc_1F02
.text:0000000000001EBC                 add     rsp, 8
.text:0000000000001EC0                 pop     rbx
.text:0000000000001EC1                 pop     rbp
.text:0000000000001EC2                 retn
.text:0000000000001EC3 ; ---------------------------------------------------------------------------
.text:0000000000001EC3
.text:0000000000001EC3 loc_1EC3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001EC3                                         ; close_stdout+2A↑j
.text:0000000000001EC3                 lea     rsi, aWriteError ; "write error"
.text:0000000000001ECA                 xor     edi, edi        ; domainname
.text:0000000000001ECC                 mov     edx, 5          ; category
.text:0000000000001ED1                 call    _dcgettext
.text:0000000000001ED6                 mov     rdi, cs:file_name
.text:0000000000001EDD                 mov     rbp, rax
.text:0000000000001EE0                 test    rdi, rdi
.text:0000000000001EE3                 jz      short loc_1F0D
.text:0000000000001EE5                 call    quotearg_colon
.text:0000000000001EEA                 mov     esi, [rbx]      ; errnum
.text:0000000000001EEC                 lea     rdx, format     ; "%s: %s"
.text:0000000000001EF3                 mov     rcx, rax
.text:0000000000001EF6                 mov     r8, rbp
.text:0000000000001EF9                 xor     edi, edi        ; status
.text:0000000000001EFB                 xor     eax, eax
.text:0000000000001EFD                 call    _error
.text:0000000000001F02
.text:0000000000001F02 loc_1F02:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001F02                                         ; close_stdout+A2↓j
.text:0000000000001F02                 mov     edi, cs:exit_failure ; status
.text:0000000000001F08                 call    __exit
.text:0000000000001F0D ; ---------------------------------------------------------------------------
.text:0000000000001F0D
.text:0000000000001F0D loc_1F0D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001F0D                 mov     esi, [rbx]      ; errnum
.text:0000000000001F0F                 lea     rdx, format+4   ; format
.text:0000000000001F16                 mov     rcx, rax
.text:0000000000001F19                 xor     edi, edi        ; status
.text:0000000000001F1B                 xor     eax, eax
.text:0000000000001F1D                 call    _error
.text:0000000000001F22                 jmp     short loc_1F02
.text:0000000000001F22 ; } // starts at 1E80
.text:0000000000001F22 close_stdout    endp
.text:0000000000001F22
.text:0000000000001F22 ; ---------------------------------------------------------------------------
.text:0000000000001F24                 align 10h
.text:0000000000001F30
.text:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F30
.text:0000000000001F30
.text:0000000000001F30                 public set_program_name
.text:0000000000001F30 set_program_name proc near              ; CODE XREF: main+1C↑p
.text:0000000000001F30 ; __unwind {
.text:0000000000001F30                 test    rdi, rdi
.text:0000000000001F33                 push    rbx
.text:0000000000001F34                 jz      short loc_1FAD
.text:0000000000001F36                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001F3B                 mov     rbx, rdi
.text:0000000000001F3E                 call    _strrchr
.text:0000000000001F43                 test    rax, rax
.text:0000000000001F46                 jz      short loc_1F9D
.text:0000000000001F48                 lea     r8, [rax+1]
.text:0000000000001F4C                 mov     rdx, r8
.text:0000000000001F4F                 sub     rdx, rbx
.text:0000000000001F52                 cmp     rdx, 6
.text:0000000000001F56                 jle     short loc_1F9D
.text:0000000000001F58                 lea     rsi, [rax-6]
.text:0000000000001F5C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001F63                 mov     ecx, 7
.text:0000000000001F68                 repe cmpsb
.text:0000000000001F6A                 setnbe  dl
.text:0000000000001F6D                 sbb     dl, 0
.text:0000000000001F70                 test    dl, dl
.text:0000000000001F72                 jnz     short loc_1F9D
.text:0000000000001F74                 lea     rdi, aLt        ; "lt-"
.text:0000000000001F7B                 mov     ecx, 3
.text:0000000000001F80                 mov     rsi, r8
.text:0000000000001F83                 mov     rbx, r8
.text:0000000000001F86                 repe cmpsb
.text:0000000000001F88                 setnbe  dl
.text:0000000000001F8B                 sbb     dl, 0
.text:0000000000001F8E                 test    dl, dl
.text:0000000000001F90                 jnz     short loc_1F9D
.text:0000000000001F92                 lea     rbx, [rax+4]
.text:0000000000001F96                 mov     cs:__bss_start, rbx
.text:0000000000001F9D
.text:0000000000001F9D loc_1F9D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001F9D                                         ; set_program_name+26↑j ...
.text:0000000000001F9D                 mov     cs:program_name, rbx
.text:0000000000001FA4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001FAB                 pop     rbx
.text:0000000000001FAC                 retn
.text:0000000000001FAD ; ---------------------------------------------------------------------------
.text:0000000000001FAD
.text:0000000000001FAD loc_1FAD:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001FAD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001FB4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001FBB                 mov     edx, 37h ; '7'  ; n
.text:0000000000001FC0                 mov     esi, 1          ; size
.text:0000000000001FC5                 call    _fwrite
.text:0000000000001FCA                 call    _abort
.text:0000000000001FCA ; } // starts at 1F30
.text:0000000000001FCA set_program_name endp
.text:0000000000001FCA
.text:0000000000001FCA ; ---------------------------------------------------------------------------
.text:0000000000001FCF                 align 10h
.text:0000000000001FD0
.text:0000000000001FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FD0
.text:0000000000001FD0 ; Attributes: info_from_lumina
.text:0000000000001FD0
.text:0000000000001FD0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001FD0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001FD0                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001FD0 ; __unwind {
.text:0000000000001FD0                 push    rbp
.text:0000000000001FD1                 push    rbx
.text:0000000000001FD2                 mov     rbp, rdi
.text:0000000000001FD5                 mov     ebx, esi
.text:0000000000001FD7                 sub     rsp, 8
.text:0000000000001FDB                 call    locale_charset
.text:0000000000001FE0                 movzx   edx, byte ptr [rax]
.text:0000000000001FE3                 and     edx, 0FFFFFFDFh
.text:0000000000001FE6                 cmp     dl, 55h ; 'U'
.text:0000000000001FE9                 jz      short loc_2060
.text:0000000000001FEB                 cmp     dl, 47h ; 'G'
.text:0000000000001FEE                 jz      short loc_2010
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001FF0                                         ; gettext_quote+50↓j ...
.text:0000000000001FF0                 lea     rax, unk_4F9B
.text:0000000000001FF7                 lea     rdx, asc_4F9D   ; "'"
.text:0000000000001FFE                 cmp     ebx, 9
.text:0000000000002001                 cmovnz  rax, rdx
.text:0000000000002005                 add     rsp, 8
.text:0000000000002009                 pop     rbx
.text:000000000000200A                 pop     rbp
.text:000000000000200B                 retn
.text:000000000000200B ; ---------------------------------------------------------------------------
.text:000000000000200C                 align 10h
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002010                 movzx   edx, byte ptr [rax+1]
.text:0000000000002014                 and     edx, 0FFFFFFDFh
.text:0000000000002017                 cmp     dl, 42h ; 'B'
.text:000000000000201A                 jnz     short loc_1FF0
.text:000000000000201C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002020                 jnz     short loc_1FF0
.text:0000000000002022                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002026                 jnz     short loc_1FF0
.text:0000000000002028                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000202C                 jnz     short loc_1FF0
.text:000000000000202E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002032                 jnz     short loc_1FF0
.text:0000000000002034                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002038                 jnz     short loc_1FF0
.text:000000000000203A                 cmp     byte ptr [rax+7], 0
.text:000000000000203E                 jnz     short loc_1FF0
.text:0000000000002040                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002044                 lea     rax, unk_4F94
.text:000000000000204B                 lea     rdx, unk_4F98
.text:0000000000002052                 cmovnz  rax, rdx
.text:0000000000002056                 add     rsp, 8
.text:000000000000205A                 pop     rbx
.text:000000000000205B                 pop     rbp
.text:000000000000205C                 retn
.text:000000000000205C ; ---------------------------------------------------------------------------
.text:000000000000205D                 align 20h
.text:0000000000002060
.text:0000000000002060 loc_2060:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002060                 movzx   edx, byte ptr [rax+1]
.text:0000000000002064                 and     edx, 0FFFFFFDFh
.text:0000000000002067                 cmp     dl, 54h ; 'T'
.text:000000000000206A                 jnz     short loc_1FF0
.text:000000000000206C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002070                 and     edx, 0FFFFFFDFh
.text:0000000000002073                 cmp     dl, 46h ; 'F'
.text:0000000000002076                 jnz     loc_1FF0
.text:000000000000207C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002080                 jnz     loc_1FF0
.text:0000000000002086                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000208A                 jnz     loc_1FF0
.text:0000000000002090                 cmp     byte ptr [rax+5], 0
.text:0000000000002094                 jnz     loc_1FF0
.text:000000000000209A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000209E                 lea     rax, unk_4F8C
.text:00000000000020A5                 lea     rdx, unk_4F90
.text:00000000000020AC                 cmovnz  rax, rdx
.text:00000000000020B0                 add     rsp, 8
.text:00000000000020B4                 pop     rbx
.text:00000000000020B5                 pop     rbp
.text:00000000000020B6                 retn
.text:00000000000020B6 ; } // starts at 1FD0
.text:00000000000020B6 gettext_quote   endp
.text:00000000000020B6
.text:00000000000020B6 ; ---------------------------------------------------------------------------
.text:00000000000020B7                 align 20h
.text:00000000000020C0
.text:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020C0
.text:00000000000020C0 ; Attributes: info_from_lumina
.text:00000000000020C0
.text:00000000000020C0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000020C0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000020C0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000020C0
.text:00000000000020C0 var_E0          = dword ptr -0E0h
.text:00000000000020C0 var_DB          = byte ptr -0DBh
.text:00000000000020C0 var_DA          = byte ptr -0DAh
.text:00000000000020C0 var_D9          = byte ptr -0D9h
.text:00000000000020C0 s               = qword ptr -0D8h
.text:00000000000020C0 n               = qword ptr -0D0h
.text:00000000000020C0 var_C8          = qword ptr -0C8h
.text:00000000000020C0 ps              = qword ptr -0C0h
.text:00000000000020C0 var_B8          = qword ptr -0B8h
.text:00000000000020C0 var_B0          = qword ptr -0B0h
.text:00000000000020C0 var_A8          = qword ptr -0A8h
.text:00000000000020C0 s2              = qword ptr -0A0h
.text:00000000000020C0 var_98          = qword ptr -98h
.text:00000000000020C0 var_90          = qword ptr -90h
.text:00000000000020C0 var_88          = qword ptr -88h
.text:00000000000020C0 var_80          = qword ptr -80h
.text:00000000000020C0 var_78          = qword ptr -78h
.text:00000000000020C0 var_70          = dword ptr -70h
.text:00000000000020C0 var_6C          = byte ptr -6Ch
.text:00000000000020C0 var_6B          = byte ptr -6Bh
.text:00000000000020C0 var_6A          = byte ptr -6Ah
.text:00000000000020C0 var_69          = byte ptr -69h
.text:00000000000020C0 var_68          = qword ptr -68h
.text:00000000000020C0 var_60          = qword ptr -60h
.text:00000000000020C0 wc              = dword ptr -4Ch
.text:00000000000020C0 var_48          = qword ptr -48h
.text:00000000000020C0 var_40          = qword ptr -40h
.text:00000000000020C0 arg_0           = qword ptr  8
.text:00000000000020C0 arg_8           = qword ptr  10h
.text:00000000000020C0 arg_10          = qword ptr  18h
.text:00000000000020C0
.text:00000000000020C0 ; __unwind {
.text:00000000000020C0                 push    r15
.text:00000000000020C2                 push    r14
.text:00000000000020C4                 mov     r15d, r8d
.text:00000000000020C7                 push    r13
.text:00000000000020C9                 push    r12
.text:00000000000020CB                 mov     r14, rdi
.text:00000000000020CE                 push    rbp
.text:00000000000020CF                 push    rbx
.text:00000000000020D0                 mov     ebx, r9d
.text:00000000000020D3                 mov     r13, rsi
.text:00000000000020D6                 mov     rbp, rcx
.text:00000000000020D9                 and     ebx, 2
.text:00000000000020DC                 sub     rsp, 0B8h
.text:00000000000020E3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000020EB                 mov     [rsp+0E8h+s], rdx
.text:00000000000020F0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000020F5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000020FA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000020FF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002107                 mov     [rsp+0E8h+var_80], rax
.text:000000000000210C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002114                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002119                 mov     rax, fs:28h
.text:0000000000002122                 mov     [rsp+0E8h+var_40], rax
.text:000000000000212A                 xor     eax, eax
.text:000000000000212C                 call    ___ctype_get_mb_cur_max
.text:0000000000002131                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002135                 mov     [rsp+0E8h+var_90], rax
.text:000000000000213A                 ja      def_2151        ; jumptable 00000000000121F1 default case
.text:0000000000002140                 lea     rcx, jpt_2151
.text:0000000000002147                 mov     edx, r15d
.text:000000000000214A                 movsxd  rax, ds:(jpt_2151 - 5000h)[rcx+rdx*4]
.text:000000000000214E                 add     rax, rcx
.text:0000000000002151                 jmp     rax             ; switch jump
.text:0000000000002153 ; ---------------------------------------------------------------------------
.text:0000000000002153
.text:0000000000002153 loc_2153:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002153                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002153                                         ; DATA XREF: ...
.text:0000000000002153                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002158                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000215D                 xor     r12d, r12d
.text:0000000000002160                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002169                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000216E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002173
.text:0000000000002173 loc_2173:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002173                 lea     rax, asc_4F9D   ; "'"
.text:000000000000217A                 mov     [rsp+0E8h+n], 1
.text:0000000000002183                 xor     r15d, r15d
.text:0000000000002186                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000218E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002193
.text:0000000000002193 loc_2193:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002193                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002193                 xor     r11d, r11d
.text:0000000000002196                 mov     rax, rbp
.text:0000000000002199                 mov     r8d, r12d
.text:000000000000219C                 mov     rbp, r11
.text:000000000000219F                 mov     r11, rax
.text:00000000000021A2                 nop     word ptr [rax+rax+00h]
.text:00000000000021A8
.text:00000000000021A8 loc_21A8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000021A8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000021A8                 cmp     r11, rbp
.text:00000000000021AB                 setnz   r12b
.text:00000000000021AF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000021B3                 jnz     short loc_21C2
.text:00000000000021B5                 mov     rax, [rsp+0E8h+s]
.text:00000000000021BA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000021BE                 setnz   r12b
.text:00000000000021C2
.text:00000000000021C2 loc_21C2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000021C2                 test    r12b, r12b
.text:00000000000021C5                 jz      loc_2820
.text:00000000000021CB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000021D0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000021D5                 lea     r9, [rdi+rbp]
.text:00000000000021D9                 setnz   al
.text:00000000000021DC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000021E0                 mov     r10d, eax
.text:00000000000021E3                 jz      loc_2290
.text:00000000000021E9                 mov     rax, [rsp+0E8h+n]
.text:00000000000021EE                 test    rax, rax
.text:00000000000021F1                 jz      loc_2620
.text:00000000000021F7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000021FB                 lea     rbx, [rbp+rax+0]
.text:0000000000002200                 jnz     short loc_2230
.text:0000000000002202                 cmp     rax, 1
.text:0000000000002206                 jbe     short loc_2230
.text:0000000000002208                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000220D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002212                 mov     [rsp+0E8h+ps], r9
.text:0000000000002217                 call    _strlen
.text:000000000000221C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002222                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002228                 mov     r11, rax
.text:000000000000222B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002230
.text:0000000000002230 loc_2230:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002230                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002230                 cmp     rbx, r11
.text:0000000000002233                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002238                 ja      loc_27F0
.text:000000000000223E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002243                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002248                 mov     rdi, r9         ; s1
.text:000000000000224B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002250                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002255                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000225A                 call    _memcmp
.text:000000000000225F                 test    eax, eax
.text:0000000000002261                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002266                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000226C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002271                 jnz     loc_27F0
.text:0000000000002277                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000227C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002282                 jnz     loc_3205
.text:0000000000002288                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002290
.text:0000000000002290 loc_2290:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002290                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002290                 movzx   ebx, byte ptr [r9]
.text:0000000000002294                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002297                 ja      def_22AE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000229D                 lea     rcx, jpt_22AE
.text:00000000000022A4                 movzx   edx, bl
.text:00000000000022A7                 movsxd  rax, ds:(jpt_22AE - 502Ch)[rcx+rdx*4]
.text:00000000000022AB                 add     rax, rcx
.text:00000000000022AE                 jmp     rax             ; switch jump
.text:00000000000022B0 ; ---------------------------------------------------------------------------
.text:00000000000022B0
.text:00000000000022B0 loc_22B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000022B0                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:00000000000022B0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000022B3
.text:00000000000022B3 loc_22B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022B3                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:00000000000022B3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000022B7                 setnz   al
.text:00000000000022BA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000022BE                 jnz     short loc_22CC
.text:00000000000022C0                 mov     rax, [rsp+0E8h+s]
.text:00000000000022C5                 cmp     byte ptr [rax+1], 0
.text:00000000000022C9                 setnz   al
.text:00000000000022CC
.text:00000000000022CC loc_22CC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000022CC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000022D1                 setz    dl
.text:00000000000022D4                 test    al, al
.text:00000000000022D6                 jz      loc_2528
.text:00000000000022DC
.text:00000000000022DC loc_22DC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000022DC                 xor     r12d, r12d
.text:00000000000022DF                 xor     eax, eax
.text:00000000000022E1                 nop     dword ptr [rax+00000000h]
.text:00000000000022E8
.text:00000000000022E8 loc_22E8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000022E8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000022E8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000022ED                 jnz     loc_2402
.text:00000000000022F3                 test    dl, dl
.text:00000000000022F5                 jnz     loc_2402
.text:00000000000022FB
.text:00000000000022FB loc_22FB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000022FB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002300                 test    rsi, rsi
.text:0000000000002303                 jz      short loc_2319
.text:0000000000002305                 mov     edx, ebx
.text:0000000000002307                 shr     dl, 5
.text:000000000000230A                 movzx   edx, dl
.text:000000000000230D                 mov     edx, [rsi+rdx*4]
.text:0000000000002310                 bt      edx, ebx
.text:0000000000002313                 jb      loc_2463
.text:0000000000002319
.text:0000000000002319 loc_2319:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002319                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002319                 test    r10b, r10b
.text:000000000000231C                 jnz     loc_2463
.text:0000000000002322                 xor     eax, 1
.text:0000000000002325                 add     rbp, 1
.text:0000000000002329                 and     eax, r8d
.text:000000000000232C
.text:000000000000232C loc_232C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000232C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000232C                 test    al, al
.text:000000000000232E                 jz      short loc_2350
.text:0000000000002330                 cmp     r13, r15
.text:0000000000002333                 jbe     short loc_233A
.text:0000000000002335                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000233A
.text:000000000000233A loc_233A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000233A                 lea     rax, [r15+1]
.text:000000000000233E                 cmp     r13, rax
.text:0000000000002341                 jbe     short loc_2349
.text:0000000000002343                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002349
.text:0000000000002349 loc_2349:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002349                 add     r15, 2
.text:000000000000234D                 xor     r8d, r8d
.text:0000000000002350
.text:0000000000002350 loc_2350:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002350                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002350                 cmp     r15, r13
.text:0000000000002353                 jnb     short loc_2359
.text:0000000000002355                 mov     [r14+r15], bl
.text:0000000000002359
.text:0000000000002359 loc_2359:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002359                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000235E                 add     r15, 1
.text:0000000000002362                 mov     eax, 0
.text:0000000000002367                 test    r12b, r12b
.text:000000000000236A                 cmovz   edi, eax
.text:000000000000236D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002372                 jmp     loc_21A8
.text:0000000000002372 ; ---------------------------------------------------------------------------
.text:0000000000002377                 align 20h
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002380                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:0000000000002380                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002383
.text:0000000000002383 loc_2383:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002383                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:0000000000002383                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002387                 cmp     eax, 2
.text:000000000000238A                 jz      loc_2948
.text:0000000000002390                 cmp     eax, 5
.text:0000000000002393                 jz      loc_2908
.text:0000000000002399                 cmp     eax, 2
.text:000000000000239C                 mov     ebx, 3Fh ; '?'
.text:00000000000023A1                 setz    dl
.text:00000000000023A4                 xor     r12d, r12d
.text:00000000000023A7                 xor     eax, eax
.text:00000000000023A9                 jmp     loc_22E8
.text:00000000000023A9 ; ---------------------------------------------------------------------------
.text:00000000000023AE                 align 10h
.text:00000000000023B0
.text:00000000000023B0 loc_23B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000023B0                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:00000000000023B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000023B3
.text:00000000000023B3 loc_23B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023B3                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:00000000000023B3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000023B8                 jz      loc_28C0
.text:00000000000023BE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000023C3                 xor     edx, edx
.text:00000000000023C5                 xor     eax, eax
.text:00000000000023C7                 mov     ebx, 27h ; '''
.text:00000000000023CC                 jmp     loc_22E8
.text:00000000000023CC ; ---------------------------------------------------------------------------
.text:00000000000023D1                 align 8
.text:00000000000023D8
.text:00000000000023D8 loc_23D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023D8                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:00000000000023D8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000023DD                 mov     ebx, 74h ; 't'
.text:00000000000023E2
.text:00000000000023E2 loc_23E2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000023E2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000023E2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000023E7                 setz    al
.text:00000000000023EA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000023EE                 jnz     loc_253E
.text:00000000000023F4
.text:00000000000023F4 loc_23F4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000023F4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000023F4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000023F9                 jnz     short loc_2460
.text:00000000000023FB
.text:00000000000023FB loc_23FB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000023FB                 mov     ebx, edx
.text:00000000000023FD                 xor     r12d, r12d
.text:0000000000002400                 xor     eax, eax
.text:0000000000002402
.text:0000000000002402 loc_2402:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002402                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002402                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002407                 jnz     loc_22FB
.text:000000000000240D                 jmp     loc_2319
.text:000000000000240D ; ---------------------------------------------------------------------------
.text:0000000000002412                 align 8
.text:0000000000002418
.text:0000000000002418 loc_2418:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002418                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:0000000000002418                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000241D                 mov     ebx, 62h ; 'b'
.text:0000000000002422                 jmp     short loc_23F4
.text:0000000000002422 ; ---------------------------------------------------------------------------
.text:0000000000002424                 align 8
.text:0000000000002428
.text:0000000000002428 loc_2428:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002428                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:0000000000002428                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000242D                 jz      loc_2800
.text:0000000000002433                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002438                 jz      loc_2650
.text:000000000000243E
.text:000000000000243E loc_243E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000243E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002443                 jz      loc_2650
.text:0000000000002449                 cmp     [rsp+0E8h+n], 0
.text:000000000000244F                 jnz     loc_280B
.text:0000000000002455                 mov     ebx, 5Ch ; '\'
.text:000000000000245A                 nop     word ptr [rax+rax+00h]
.text:0000000000002460
.text:0000000000002460 loc_2460:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002460                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002460                 xor     r12d, r12d
.text:0000000000002463
.text:0000000000002463 loc_2463:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002463                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002463                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002468                 setz    dl
.text:000000000000246B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002470                 mov     eax, edx
.text:0000000000002472                 jnz     loc_2CC8
.text:0000000000002478                 mov     eax, r8d
.text:000000000000247B                 xor     eax, 1
.text:000000000000247E                 and     al, dl
.text:0000000000002480                 jz      short loc_24B1
.text:0000000000002482                 cmp     r13, r15
.text:0000000000002485                 jbe     short loc_248C
.text:0000000000002487                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000248C
.text:000000000000248C loc_248C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000248C                 lea     rdx, [r15+1]
.text:0000000000002490                 cmp     r13, rdx
.text:0000000000002493                 jbe     short loc_249B
.text:0000000000002495                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000249B
.text:000000000000249B loc_249B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000249B                 lea     rdx, [r15+2]
.text:000000000000249F                 cmp     r13, rdx
.text:00000000000024A2                 jbe     short loc_24AA
.text:00000000000024A4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000024AA
.text:00000000000024AA loc_24AA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000024AA                 add     r15, 3
.text:00000000000024AE                 mov     r8d, eax
.text:00000000000024B1
.text:00000000000024B1 loc_24B1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000024B1                 cmp     r13, r15
.text:00000000000024B4                 jbe     short loc_24BB
.text:00000000000024B6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000024BB
.text:00000000000024BB loc_24BB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000024BB                 add     r15, 1
.text:00000000000024BF                 add     rbp, 1
.text:00000000000024C3                 jmp     loc_2350
.text:00000000000024C3 ; ---------------------------------------------------------------------------
.text:00000000000024C8                 align 10h
.text:00000000000024D0
.text:00000000000024D0 loc_24D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024D0                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:00000000000024D0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000024D5                 jnz     loc_26A3
.text:00000000000024DB                 xor     edx, edx
.text:00000000000024DD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000024E2                 jz      loc_23FB
.text:00000000000024E8                 add     rbp, 1
.text:00000000000024EC                 jmp     loc_21A8
.text:00000000000024EC ; ---------------------------------------------------------------------------
.text:00000000000024F1                 align 8
.text:00000000000024F8
.text:00000000000024F8 loc_24F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000024F8                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:00000000000024F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000024FD                 setz    dl
.text:0000000000002500                 xor     eax, eax
.text:0000000000002502                 jmp     loc_22E8
.text:0000000000002502 ; ---------------------------------------------------------------------------
.text:0000000000002507                 align 10h
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002510                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:0000000000002510                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002515                 mov     ebx, 61h ; 'a'
.text:000000000000251A                 jmp     loc_23F4
.text:000000000000251A ; ---------------------------------------------------------------------------
.text:000000000000251F                 align 20h
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002520                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:0000000000002520                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002525                 setz    dl
.text:0000000000002528
.text:0000000000002528 loc_2528:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002528                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002528                 test    rbp, rbp
.text:000000000000252B                 jnz     loc_22DC
.text:0000000000002531
.text:0000000000002531 loc_2531:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002531                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002531                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002536                 and     al, dl
.text:0000000000002538                 jz      loc_22E8
.text:000000000000253E
.text:000000000000253E loc_253E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000253E                 mov     rbp, r11
.text:0000000000002541                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002549                 jmp     loc_2C49
.text:0000000000002549 ; ---------------------------------------------------------------------------
.text:000000000000254E                 align 10h
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002550                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:0000000000002550                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002555                 setz    dl
.text:0000000000002558                 xor     r12d, r12d
.text:000000000000255B                 jmp     short loc_2531
.text:000000000000255B ; ---------------------------------------------------------------------------
.text:000000000000255D                 align 20h
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002560                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:0000000000002560                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002565                 mov     ebx, 20h ; ' '
.text:000000000000256A                 setz    dl
.text:000000000000256D                 jmp     short loc_2531
.text:000000000000256D ; ---------------------------------------------------------------------------
.text:000000000000256F                 align 10h
.text:0000000000002570
.text:0000000000002570 loc_2570:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002570                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:0000000000002570                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002575                 mov     ebx, 72h ; 'r'
.text:000000000000257A                 jmp     loc_23E2
.text:000000000000257A ; ---------------------------------------------------------------------------
.text:000000000000257F                 align 20h
.text:0000000000002580
.text:0000000000002580 loc_2580:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002580                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:0000000000002580                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002585                 mov     ebx, 66h ; 'f'
.text:000000000000258A                 jmp     loc_23F4
.text:000000000000258A ; ---------------------------------------------------------------------------
.text:000000000000258F                 align 10h
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002590                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:0000000000002590                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002595                 mov     ebx, 76h ; 'v'
.text:000000000000259A                 jmp     loc_23F4
.text:000000000000259A ; ---------------------------------------------------------------------------
.text:000000000000259F                 align 20h
.text:00000000000025A0
.text:00000000000025A0 loc_25A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025A0                                         ; DATA XREF: .rodata:jpt_22AE↓o
.text:00000000000025A0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000025A5                 mov     ebx, 6Eh ; 'n'
.text:00000000000025AA                 jmp     loc_23E2
.text:00000000000025AA ; ---------------------------------------------------------------------------
.text:00000000000025AF                 align 10h
.text:00000000000025B0
.text:00000000000025B0 def_263A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000025B0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000025B0                                         ; DATA XREF: ...
.text:00000000000025B0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000025B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000025B8
.text:00000000000025B8 def_22AE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000025B8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000025B8                                         ; DATA XREF: ...
.text:00000000000025B8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000025BE                 jnz     loc_2968
.text:00000000000025C4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000025C9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000025CE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000025D3                 call    ___ctype_b_loc
.text:00000000000025D8                 mov     rcx, [rax]
.text:00000000000025DB                 movzx   edx, bl
.text:00000000000025DE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000025E4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000025EA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000025EF                 mov     edi, 1
.text:00000000000025F4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000025F8                 and     ax, 4000h
.text:00000000000025FC                 setnz   r12b
.text:0000000000002600                 setz    al
.text:0000000000002603                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002607
.text:0000000000002607 loc_2607:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002607                 test    al, al
.text:0000000000002609                 jnz     loc_2FA1
.text:000000000000260F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002614                 setz    dl
.text:0000000000002617                 jmp     loc_22E8
.text:0000000000002617 ; ---------------------------------------------------------------------------
.text:000000000000261C                 align 20h
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002620                 movzx   ebx, byte ptr [r9]
.text:0000000000002624                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002627                 ja      short def_263A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002629                 lea     rcx, jpt_263A
.text:0000000000002630                 movzx   edx, bl
.text:0000000000002633                 movsxd  rax, ds:(jpt_263A - 5228h)[rcx+rdx*4]
.text:0000000000002637                 add     rax, rcx
.text:000000000000263A                 jmp     rax             ; switch jump
.text:000000000000263A ; ---------------------------------------------------------------------------
.text:000000000000263C                 align 20h
.text:0000000000002640
.text:0000000000002640 loc_2640:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002640                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:0000000000002640                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002643                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002648                 jnz     loc_243E
.text:000000000000264E                 xchg    ax, ax
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002650                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002650                 mov     edx, 5Ch ; '\'
.text:0000000000002655                 mov     ebx, 5Ch ; '\'
.text:000000000000265A                 jmp     loc_23F4
.text:000000000000265A ; ---------------------------------------------------------------------------
.text:000000000000265F                 align 20h
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002660                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:0000000000002660                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002665                 xor     r10d, r10d
.text:0000000000002668                 mov     ebx, 66h ; 'f'
.text:000000000000266D                 jmp     loc_23F4
.text:000000000000266D ; ---------------------------------------------------------------------------
.text:0000000000002672                 align 8
.text:0000000000002678
.text:0000000000002678 loc_2678:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002678                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:0000000000002678                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000267D                 xor     r10d, r10d
.text:0000000000002680                 mov     ebx, 6Eh ; 'n'
.text:0000000000002685                 jmp     loc_23E2
.text:0000000000002685 ; ---------------------------------------------------------------------------
.text:000000000000268A                 align 10h
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002690                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:0000000000002690                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002695                 jmp     loc_2460
.text:0000000000002695 ; ---------------------------------------------------------------------------
.text:000000000000269A                 align 20h
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026A0                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:00000000000026A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000026A3
.text:00000000000026A3 loc_26A3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000026A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026A8                 setz    dl
.text:00000000000026AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026B0                 jnz     loc_324A
.text:00000000000026B6                 mov     eax, r8d
.text:00000000000026B9                 mov     rcx, r15
.text:00000000000026BC                 xor     eax, 1
.text:00000000000026BF                 and     al, dl
.text:00000000000026C1                 jz      short loc_26F0
.text:00000000000026C3                 cmp     r13, r15
.text:00000000000026C6                 jbe     short loc_26CD
.text:00000000000026C8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000026CD
.text:00000000000026CD loc_26CD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000026CD                 lea     rcx, [r15+1]
.text:00000000000026D1                 cmp     r13, rcx
.text:00000000000026D4                 jbe     short loc_26DC
.text:00000000000026D6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000026DC
.text:00000000000026DC loc_26DC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000026DC                 lea     rcx, [r15+2]
.text:00000000000026E0                 cmp     r13, rcx
.text:00000000000026E3                 ja      loc_2D19
.text:00000000000026E9
.text:00000000000026E9 loc_26E9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000026E9                 lea     rcx, [r15+3]
.text:00000000000026ED                 mov     r8d, eax
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000026F0                 cmp     r13, rcx
.text:00000000000026F3                 jbe     short loc_26FA
.text:00000000000026F5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000026FA
.text:00000000000026FA loc_26FA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000026FA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026FF                 lea     r15, [rcx+1]
.text:0000000000002703                 jz      loc_2D09
.text:0000000000002709                 lea     rax, [rbp+1]
.text:000000000000270D                 cmp     rax, r11
.text:0000000000002710                 jnb     short loc_272B
.text:0000000000002712                 mov     rax, [rsp+0E8h+s]
.text:0000000000002717                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000271C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002720                 sub     eax, 30h ; '0'
.text:0000000000002723                 cmp     al, 9
.text:0000000000002725                 jbe     loc_2F59
.text:000000000000272B
.text:000000000000272B loc_272B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000272B                 mov     eax, r12d
.text:000000000000272E                 mov     ebx, 30h ; '0'
.text:0000000000002733                 xor     r12d, r12d
.text:0000000000002736                 jmp     loc_22E8
.text:0000000000002736 ; ---------------------------------------------------------------------------
.text:000000000000273B                 align 20h
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002740                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:0000000000002740                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002745                 mov     r12d, r10d
.text:0000000000002748                 setz    dl
.text:000000000000274B                 xor     r10d, r10d
.text:000000000000274E                 xor     eax, eax
.text:0000000000002750                 jmp     loc_22E8
.text:0000000000002750 ; ---------------------------------------------------------------------------
.text:0000000000002755                 align 8
.text:0000000000002758
.text:0000000000002758 loc_2758:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002758                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:0000000000002758                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000275D                 setz    dl
.text:0000000000002760                 xor     r10d, r10d
.text:0000000000002763                 jmp     loc_2528
.text:0000000000002763 ; ---------------------------------------------------------------------------
.text:0000000000002768                 align 10h
.text:0000000000002770
.text:0000000000002770 loc_2770:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002770                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:0000000000002770                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002775                 setz    dl
.text:0000000000002778                 xor     r10d, r10d
.text:000000000000277B                 xor     r12d, r12d
.text:000000000000277E                 jmp     loc_2531
.text:000000000000277E ; ---------------------------------------------------------------------------
.text:0000000000002783                 align 8
.text:0000000000002788
.text:0000000000002788 loc_2788:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002788                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:0000000000002788                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000278D                 mov     r12d, r10d
.text:0000000000002790                 mov     ebx, 20h ; ' '
.text:0000000000002795                 setz    dl
.text:0000000000002798                 xor     r10d, r10d
.text:000000000000279B                 jmp     loc_2531
.text:00000000000027A0 ; ---------------------------------------------------------------------------
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027A0                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:00000000000027A0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000027A5                 xor     r10d, r10d
.text:00000000000027A8                 mov     ebx, 72h ; 'r'
.text:00000000000027AD                 jmp     loc_23E2
.text:00000000000027AD ; ---------------------------------------------------------------------------
.text:00000000000027B2                 align 8
.text:00000000000027B8
.text:00000000000027B8 loc_27B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027B8                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:00000000000027B8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000027BD                 jmp     loc_2460
.text:00000000000027BD ; ---------------------------------------------------------------------------
.text:00000000000027C2                 align 8
.text:00000000000027C8
.text:00000000000027C8 loc_27C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027C8                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:00000000000027C8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000027CD                 xor     r10d, r10d
.text:00000000000027D0                 mov     ebx, 74h ; 't'
.text:00000000000027D5                 jmp     loc_23E2
.text:00000000000027D5 ; ---------------------------------------------------------------------------
.text:00000000000027DA                 align 20h
.text:00000000000027E0
.text:00000000000027E0 loc_27E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027E0                                         ; DATA XREF: .rodata:jpt_263A↓o
.text:00000000000027E0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000027E5                 jmp     loc_2460
.text:00000000000027E5 ; ---------------------------------------------------------------------------
.text:00000000000027EA                 align 10h
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000027F0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000027F0                 xor     r10d, r10d
.text:00000000000027F3                 jmp     loc_2290
.text:00000000000027F3 ; ---------------------------------------------------------------------------
.text:00000000000027F8                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002800                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002805                 jnz     loc_3170
.text:000000000000280B
.text:000000000000280B loc_280B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000280B                 add     rbp, 1
.text:000000000000280F                 mov     eax, r8d
.text:0000000000002812                 xor     r12d, r12d
.text:0000000000002815                 mov     ebx, 5Ch ; '\'
.text:000000000000281A                 jmp     loc_232C
.text:000000000000281A ; ---------------------------------------------------------------------------
.text:000000000000281F                 align 20h
.text:0000000000002820
.text:0000000000002820 loc_2820:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002820                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002825                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000282A                 mov     r12d, r8d
.text:000000000000282D                 mov     rbp, r11
.text:0000000000002830                 setz    dl
.text:0000000000002833                 mov     eax, ebx
.text:0000000000002835                 test    r15, r15
.text:0000000000002838                 setz    cl
.text:000000000000283B                 and     eax, edx
.text:000000000000283D                 and     al, cl
.text:000000000000283F                 jnz     loc_32A6
.text:0000000000002845                 mov     eax, ebx
.text:0000000000002847                 xor     eax, 1
.text:000000000000284A                 and     dl, al
.text:000000000000284C                 jz      loc_31BC
.text:0000000000002852                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002857                 jz      loc_31BA
.text:000000000000285D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002862                 jnz     loc_325D
.text:0000000000002868                 test    r13, r13
.text:000000000000286B                 setz    al
.text:000000000000286E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002874                 setnz   dl
.text:0000000000002877                 and     al, dl
.text:0000000000002879                 jz      loc_329C
.text:000000000000287F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002884
.text:0000000000002884 loc_2884:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002884                 lea     rbx, asc_4F9D   ; "'"
.text:000000000000288B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000288F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002897                 mov     r15d, 1
.text:000000000000289D                 mov     [rsp+0E8h+n], 1
.text:00000000000028A6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000028AB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000028B0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000028B4                 jmp     loc_2193
.text:00000000000028B4 ; ---------------------------------------------------------------------------
.text:00000000000028B9                 align 20h
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000028C0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000028C5                 jnz     loc_3170
.text:00000000000028CB                 test    r13, r13
.text:00000000000028CE                 jz      loc_2CD0
.text:00000000000028D4                 xor     edx, edx
.text:00000000000028D6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000028DC                 jnz     loc_2CD0
.text:00000000000028E2
.text:00000000000028E2 loc_28E2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000028E2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000028E2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000028E7                 add     r15, 3
.text:00000000000028EB                 xor     eax, eax
.text:00000000000028ED                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000028F2                 xor     r8d, r8d
.text:00000000000028F5                 mov     r13, rdx
.text:00000000000028F8                 mov     ebx, 27h ; '''
.text:00000000000028FD                 jmp     loc_2319
.text:00000000000028FD ; ---------------------------------------------------------------------------
.text:0000000000002902                 align 8
.text:0000000000002908
.text:0000000000002908 loc_2908:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002908                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000290D                 jz      short loc_2930
.text:000000000000290F                 lea     rcx, [rbp+2]
.text:0000000000002913                 cmp     rcx, r11
.text:0000000000002916                 jnb     short loc_2930
.text:0000000000002918                 mov     rax, [rsp+0E8h+s]
.text:000000000000291D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002922                 jz      loc_30B2
.text:0000000000002928                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002930
.text:0000000000002930 loc_2930:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002930                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002930                 xor     edx, edx
.text:0000000000002932                 xor     r12d, r12d
.text:0000000000002935                 xor     eax, eax
.text:0000000000002937                 mov     ebx, 3Fh ; '?'
.text:000000000000293C                 jmp     loc_22E8
.text:000000000000293C ; ---------------------------------------------------------------------------
.text:0000000000002941                 align 8
.text:0000000000002948
.text:0000000000002948 loc_2948:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002948                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000294D                 jnz     loc_3170
.text:0000000000002953                 xor     r12d, r12d
.text:0000000000002956                 xor     eax, eax
.text:0000000000002958                 mov     ebx, 3Fh ; '?'
.text:000000000000295D                 jmp     loc_2319
.text:000000000000295D ; ---------------------------------------------------------------------------
.text:0000000000002962                 align 8
.text:0000000000002968
.text:0000000000002968 loc_2968:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002968                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002970                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002974                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002980                 mov     [rsp+0E8h+ps], rax
.text:0000000000002985                 jnz     short loc_29B4
.text:0000000000002987                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000298C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002991                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002996                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000299B                 call    _strlen
.text:00000000000029A0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000029A6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000029AC                 mov     r11, rax
.text:00000000000029AF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000029B4
.text:00000000000029B4 loc_29B4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000029B4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000029BC                 xor     ecx, ecx
.text:00000000000029BE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000029C2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000029C7                 mov     rbx, rcx
.text:00000000000029CA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000029D2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000029D7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000029DC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000029E4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000029E9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000029EE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000029F3
.text:00000000000029F3 loc_29F3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000029F3                 mov     rax, [rsp+0E8h+s]
.text:00000000000029F8                 lea     r14, [rbp+rbx+0]
.text:00000000000029FD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002A02                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002A07                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002A0C                 lea     r13, [rax+r14]
.text:0000000000002A10                 sub     rdx, r14
.text:0000000000002A13                 mov     rsi, r13
.text:0000000000002A16                 call    rpl_mbrtowc
.text:0000000000002A1B                 test    rax, rax
.text:0000000000002A1E                 mov     r15, rax
.text:0000000000002A21                 jz      short loc_2A71
.text:0000000000002A23                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A27                 jz      loc_3045
.text:0000000000002A2D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002A31                 jz      loc_2FD1
.text:0000000000002A37                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A3C                 setz    al
.text:0000000000002A3F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002A43                 jnz     loc_2BE0
.text:0000000000002A49
.text:0000000000002A49 loc_2A49:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002A49                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002A49                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002A50                 call    _iswprint
.text:0000000000002A55                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002A5A                 test    eax, eax
.text:0000000000002A5C                 mov     eax, 0
.text:0000000000002A61                 cmovz   r12d, eax
.text:0000000000002A65                 add     rbx, r15
.text:0000000000002A68                 call    _mbsinit
.text:0000000000002A6D                 test    eax, eax
.text:0000000000002A6F                 jz      short loc_29F3
.text:0000000000002A71
.text:0000000000002A71 loc_2A71:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002A71                 mov     edx, r12d
.text:0000000000002A74                 mov     rdi, rbx
.text:0000000000002A77                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002A7D                 xor     edx, 1
.text:0000000000002A80                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002A85                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002A8B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002A8F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002A97                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002A9C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002AA1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002AA6
.text:0000000000002AA6 loc_2AA6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002AA6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002AA6                 cmp     rdi, 1
.text:0000000000002AAA                 jbe     loc_30AB
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002AB0                 mov     rcx, rdi
.text:0000000000002AB3                 xor     esi, esi
.text:0000000000002AB5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002ABB                 add     rcx, rbp
.text:0000000000002ABE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002AC3                 jmp     loc_2B7E
.text:0000000000002AC3 ; ---------------------------------------------------------------------------
.text:0000000000002AC8                 align 10h
.text:0000000000002AD0
.text:0000000000002AD0 loc_2AD0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002AD0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002AD5                 setz    al
.text:0000000000002AD8                 test    r9b, r9b
.text:0000000000002ADB                 jnz     loc_2F90
.text:0000000000002AE1                 mov     esi, r8d
.text:0000000000002AE4                 xor     esi, 1
.text:0000000000002AE7                 and     al, sil
.text:0000000000002AEA                 jz      short loc_2B1B
.text:0000000000002AEC                 cmp     r13, r15
.text:0000000000002AEF                 jbe     short loc_2AF6
.text:0000000000002AF1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002AF6
.text:0000000000002AF6 loc_2AF6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002AF6                 lea     rsi, [r15+1]
.text:0000000000002AFA                 cmp     r13, rsi
.text:0000000000002AFD                 jbe     short loc_2B05
.text:0000000000002AFF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002B05
.text:0000000000002B05 loc_2B05:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002B05                 lea     rsi, [r15+2]
.text:0000000000002B09                 cmp     r13, rsi
.text:0000000000002B0C                 jbe     short loc_2B14
.text:0000000000002B0E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002B14
.text:0000000000002B14 loc_2B14:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002B14                 add     r15, 3
.text:0000000000002B18                 mov     r8d, eax
.text:0000000000002B1B
.text:0000000000002B1B loc_2B1B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002B1B                 cmp     r13, r15
.text:0000000000002B1E                 jbe     short loc_2B25
.text:0000000000002B20                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002B25
.text:0000000000002B25 loc_2B25:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002B25                 lea     rax, [r15+1]
.text:0000000000002B29                 cmp     r13, rax
.text:0000000000002B2C                 jbe     short loc_2B3B
.text:0000000000002B2E                 mov     eax, ebx
.text:0000000000002B30                 shr     al, 6
.text:0000000000002B33                 add     eax, 30h ; '0'
.text:0000000000002B36                 mov     [r14+r15+1], al
.text:0000000000002B3B
.text:0000000000002B3B loc_2B3B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002B3B                 lea     rax, [r15+2]
.text:0000000000002B3F                 cmp     r13, rax
.text:0000000000002B42                 jbe     short loc_2B54
.text:0000000000002B44                 mov     eax, ebx
.text:0000000000002B46                 shr     al, 3
.text:0000000000002B49                 and     eax, 7
.text:0000000000002B4C                 add     eax, 30h ; '0'
.text:0000000000002B4F                 mov     [r14+r15+2], al
.text:0000000000002B54
.text:0000000000002B54 loc_2B54:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002B54                 and     ebx, 7
.text:0000000000002B57                 add     rbp, 1
.text:0000000000002B5B                 add     r15, 3
.text:0000000000002B5F                 add     ebx, 30h ; '0'
.text:0000000000002B62                 cmp     rbp, rcx
.text:0000000000002B65                 jnb     loc_2350
.text:0000000000002B6B                 mov     esi, edx
.text:0000000000002B6D
.text:0000000000002B6D loc_2B6D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002B6D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002B6D                 cmp     r13, r15
.text:0000000000002B70                 jbe     short loc_2B76
.text:0000000000002B72                 mov     [r14+r15], bl
.text:0000000000002B76
.text:0000000000002B76 loc_2B76:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002B76                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002B7A                 add     r15, 1
.text:0000000000002B7E
.text:0000000000002B7E loc_2B7E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002B7E                 test    dl, dl
.text:0000000000002B80                 jnz     loc_2AD0
.text:0000000000002B86                 mov     eax, esi
.text:0000000000002B88                 xor     eax, 1
.text:0000000000002B8B                 and     eax, r8d
.text:0000000000002B8E                 test    r10b, r10b
.text:0000000000002B91                 jz      short loc_2BA1
.text:0000000000002B93                 cmp     r13, r15
.text:0000000000002B96                 jbe     short loc_2B9D
.text:0000000000002B98                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002B9D
.text:0000000000002B9D loc_2B9D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002B9D                 add     r15, 1
.text:0000000000002BA1
.text:0000000000002BA1 loc_2BA1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002BA1                 add     rbp, 1
.text:0000000000002BA5                 cmp     rbp, rcx
.text:0000000000002BA8                 jnb     loc_232C
.text:0000000000002BAE                 test    al, al
.text:0000000000002BB0                 jz      loc_2FAE
.text:0000000000002BB6                 cmp     r13, r15
.text:0000000000002BB9                 jbe     short loc_2BC0
.text:0000000000002BBB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002BC0                 lea     rax, [r15+1]
.text:0000000000002BC4                 cmp     r13, rax
.text:0000000000002BC7                 jbe     short loc_2BCF
.text:0000000000002BC9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002BCF
.text:0000000000002BCF loc_2BCF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002BCF                 add     r15, 2
.text:0000000000002BD3                 xor     r10d, r10d
.text:0000000000002BD6                 xor     r8d, r8d
.text:0000000000002BD9                 jmp     short loc_2B6D
.text:0000000000002BD9 ; ---------------------------------------------------------------------------
.text:0000000000002BDB                 align 20h
.text:0000000000002BE0
.text:0000000000002BE0 loc_2BE0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002BE0                 cmp     r15, 1
.text:0000000000002BE4                 jz      loc_2A49
.text:0000000000002BEA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002BEF                 lea     rcx, [rdi+r15]
.text:0000000000002BF3                 lea     rdx, [rdi+r14+1]
.text:0000000000002BF8                 lea     r8, [rcx+r14]
.text:0000000000002BFC                 jmp     short loc_2C0D
.text:0000000000002BFC ; ---------------------------------------------------------------------------
.text:0000000000002BFE                 align 20h
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002C00                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002C00                 add     rdx, 1
.text:0000000000002C04                 cmp     r8, rdx
.text:0000000000002C07                 jz      loc_2A49
.text:0000000000002C0D
.text:0000000000002C0D loc_2C0D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002C0D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002C10                 sub     ecx, 5Bh ; '['
.text:0000000000002C13                 cmp     cl, 21h ; '!'
.text:0000000000002C16                 ja      short loc_2C00
.text:0000000000002C18                 mov     esi, 1
.text:0000000000002C1D                 shl     rsi, cl
.text:0000000000002C20                 mov     rcx, rsi
.text:0000000000002C23                 mov     rsi, 20000002Bh
.text:0000000000002C2D                 test    rcx, rsi
.text:0000000000002C30                 jz      short loc_2C00
.text:0000000000002C32                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002C37                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002C3C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002C41                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002C49
.text:0000000000002C49 loc_2C49:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002C49                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002C49                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002C4E                 jz      short loc_2C60
.text:0000000000002C50                 test    al, al
.text:0000000000002C52                 mov     eax, 4
.text:0000000000002C57                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002C5C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002C60                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002C60                 sub     rsp, 8
.text:0000000000002C64                 mov     rcx, rbp
.text:0000000000002C67                 mov     rsi, r13
.text:0000000000002C6A                 push    [rsp+0F0h+var_88]
.text:0000000000002C6E                 push    [rsp+0F8h+var_80]
.text:0000000000002C72                 mov     rdi, r14
.text:0000000000002C75                 push    0
.text:0000000000002C77                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002C7F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002C84                 mov     rdx, [rsp+108h+s]
.text:0000000000002C89                 and     r9d, 0FFFFFFFDh
.text:0000000000002C8D                 call    quotearg_buffer_restyled
.text:0000000000002C92                 add     rsp, 20h
.text:0000000000002C96                 mov     r15, rax
.text:0000000000002C99
.text:0000000000002C99 loc_2C99:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002C99                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002C99                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002CA1                 xor     rbx, fs:28h
.text:0000000000002CAA                 mov     rax, r15
.text:0000000000002CAD                 jnz     loc_32B3
.text:0000000000002CB3                 add     rsp, 0B8h
.text:0000000000002CBA                 pop     rbx
.text:0000000000002CBB                 pop     rbp
.text:0000000000002CBC                 pop     r12
.text:0000000000002CBE                 pop     r13
.text:0000000000002CC0                 pop     r14
.text:0000000000002CC2                 pop     r15
.text:0000000000002CC4                 retn
.text:0000000000002CC4 ; ---------------------------------------------------------------------------
.text:0000000000002CC5                 align 8
.text:0000000000002CC8
.text:0000000000002CC8 loc_2CC8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002CC8                 mov     rbp, r11
.text:0000000000002CCB                 jmp     loc_2C49
.text:0000000000002CD0 ; ---------------------------------------------------------------------------
.text:0000000000002CD0
.text:0000000000002CD0 loc_2CD0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002CD0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002CD0                 cmp     r13, r15
.text:0000000000002CD3                 jbe     short loc_2CDA
.text:0000000000002CD5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002CDA
.text:0000000000002CDA loc_2CDA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002CDA                 lea     rax, [r15+1]
.text:0000000000002CDE                 cmp     r13, rax
.text:0000000000002CE1                 jbe     short loc_2CE9
.text:0000000000002CE3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002CE9
.text:0000000000002CE9 loc_2CE9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002CE9                 lea     rax, [r15+2]
.text:0000000000002CED                 cmp     r13, rax
.text:0000000000002CF0                 jbe     loc_32E2
.text:0000000000002CF6                 mov     rdx, r13
.text:0000000000002CF9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002CFF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002D04                 jmp     loc_28E2
.text:0000000000002D09 ; ---------------------------------------------------------------------------
.text:0000000000002D09
.text:0000000000002D09 loc_2D09:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002D09                 mov     eax, r12d
.text:0000000000002D0C                 mov     ebx, 30h ; '0'
.text:0000000000002D11                 xor     r12d, r12d
.text:0000000000002D14                 jmp     loc_2319
.text:0000000000002D19 ; ---------------------------------------------------------------------------
.text:0000000000002D19
.text:0000000000002D19 loc_2D19:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002D19                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002D1F                 jmp     loc_26E9
.text:0000000000002D24 ; ---------------------------------------------------------------------------
.text:0000000000002D24
.text:0000000000002D24 loc_2D24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D24                                         ; DATA XREF: .rodata:jpt_2151↓o
.text:0000000000002D24                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002D26                 jnz     loc_2153        ; jumptable 00000000000121F1 case 1
.text:0000000000002D2C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D31
.text:0000000000002D31 loc_2D31:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002D31                 test    r13, r13
.text:0000000000002D34                 jnz     loc_32CA
.text:0000000000002D3A                 lea     rax, asc_4F9D   ; "'"
.text:0000000000002D41                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D4A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D4F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D54                 xor     r12d, r12d
.text:0000000000002D57                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D5C                 mov     [rsp+0E8h+n], 1
.text:0000000000002D65                 mov     [rsp+0E8h+s2], rax
.text:0000000000002D6A                 mov     r15d, 1
.text:0000000000002D70                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002D78                 jmp     loc_2193
.text:0000000000002D78 ; ---------------------------------------------------------------------------
.text:0000000000002D7D                 align 20h
.text:0000000000002D80
.text:0000000000002D80 loc_2D80:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D80                                         ; DATA XREF: .rodata:jpt_2151↓o
.text:0000000000002D80                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002D82                 jnz     loc_317D
.text:0000000000002D88                 test    r13, r13
.text:0000000000002D8B                 jz      loc_2FB6
.text:0000000000002D91                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002D95                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D9A                 xor     r12d, r12d
.text:0000000000002D9D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DA2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DAB
.text:0000000000002DAB loc_2DAB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002DAB                 lea     rax, unk_4F9B
.text:0000000000002DB2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002DB7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DBC                 mov     [rsp+0E8h+n], 1
.text:0000000000002DC5                 mov     r15d, 1
.text:0000000000002DCB                 mov     [rsp+0E8h+s2], rax
.text:0000000000002DD0                 jmp     loc_2193
.text:0000000000002DD5 ; ---------------------------------------------------------------------------
.text:0000000000002DD5
.text:0000000000002DD5 loc_2DD5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DD5                                         ; DATA XREF: .rodata:jpt_2151↓o
.text:0000000000002DD5                 lea     rax, unk_4F9B   ; jumptable 00000000000121F1 case 6
.text:0000000000002DDC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002DE1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DE6                 xor     r12d, r12d
.text:0000000000002DE9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DF2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002DF7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DFC                 mov     [rsp+0E8h+n], 1
.text:0000000000002E05                 xor     r15d, r15d
.text:0000000000002E08                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E0D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002E15                 jmp     loc_2193
.text:0000000000002E1A ; ---------------------------------------------------------------------------
.text:0000000000002E1A
.text:0000000000002E1A loc_2E1A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E1A                                         ; DATA XREF: .rodata:jpt_2151↓o
.text:0000000000002E1A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002E1F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E24                 xor     r12d, r12d
.text:0000000000002E27                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E30                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002E35                 xor     r15d, r15d
.text:0000000000002E38                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E3D                 mov     [rsp+0E8h+n], 0
.text:0000000000002E46                 mov     [rsp+0E8h+s2], 0
.text:0000000000002E4F                 jmp     loc_2193
.text:0000000000002E54 ; ---------------------------------------------------------------------------
.text:0000000000002E54
.text:0000000000002E54 loc_2E54:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E54                                         ; DATA XREF: .rodata:jpt_2151↓o
.text:0000000000002E54                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002E59                 jz      short loc_2EB1
.text:0000000000002E5B                 lea     rsi, asc_4F9F   ; "`"
.text:0000000000002E62                 xor     edi, edi        ; domainname
.text:0000000000002E64                 mov     edx, 5          ; category
.text:0000000000002E69                 call    _dcgettext
.text:0000000000002E6E                 mov     rcx, rax
.text:0000000000002E71                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002E76                 lea     rax, asc_4F9F   ; "`"
.text:0000000000002E7D                 cmp     rcx, rax
.text:0000000000002E80                 jz      loc_321E
.text:0000000000002E86
.text:0000000000002E86 loc_2E86:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002E86                 lea     rsi, asc_4F9D   ; "'"
.text:0000000000002E8D                 xor     edi, edi        ; domainname
.text:0000000000002E8F                 mov     edx, 5          ; category
.text:0000000000002E94                 call    _dcgettext
.text:0000000000002E99                 mov     rcx, rax
.text:0000000000002E9C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002EA1                 lea     rax, asc_4F9D   ; "'"
.text:0000000000002EA8                 cmp     rcx, rax
.text:0000000000002EAB                 jz      loc_3234
.text:0000000000002EB1
.text:0000000000002EB1 loc_2EB1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002EB1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002EB1                 xor     r15d, r15d
.text:0000000000002EB4                 test    ebx, ebx
.text:0000000000002EB6                 jz      loc_307D
.text:0000000000002EBC
.text:0000000000002EBC loc_2EBC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002EBC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002EBC                 test    ebx, ebx
.text:0000000000002EBE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002EC3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002EC8                 xor     r12d, r12d
.text:0000000000002ECB                 mov     rdi, rbx        ; s
.text:0000000000002ECE                 call    _strlen
.text:0000000000002ED3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002ED8                 mov     [rsp+0E8h+n], rax
.text:0000000000002EDD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002EE2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002EE7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002EF0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002EF5                 jmp     loc_2193
.text:0000000000002EFA ; ---------------------------------------------------------------------------
.text:0000000000002EFA
.text:0000000000002EFA loc_2EFA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002EFA                                         ; DATA XREF: .rodata:jpt_2151↓o
.text:0000000000002EFA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002EFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F04                 xor     r12d, r12d
.text:0000000000002F07                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F10                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002F15                 xor     r15d, r15d
.text:0000000000002F18                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002F1D                 mov     [rsp+0E8h+n], 0
.text:0000000000002F26                 mov     [rsp+0E8h+s2], 0
.text:0000000000002F2F                 jmp     loc_2193
.text:0000000000002F34 ; ---------------------------------------------------------------------------
.text:0000000000002F34
.text:0000000000002F34 loc_2F34:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F34                                         ; DATA XREF: .rodata:jpt_2151↓o
.text:0000000000002F34                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002F39                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F3E                 xor     r12d, r12d
.text:0000000000002F41                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F4A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002F4F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F54                 jmp     loc_2173
.text:0000000000002F59 ; ---------------------------------------------------------------------------
.text:0000000000002F59
.text:0000000000002F59 loc_2F59:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002F59                 cmp     r13, r15
.text:0000000000002F5C                 jbe     short loc_2F63
.text:0000000000002F5E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002F63
.text:0000000000002F63 loc_2F63:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002F63                 lea     rax, [rcx+2]
.text:0000000000002F67                 cmp     r13, rax
.text:0000000000002F6A                 jbe     short loc_2F72
.text:0000000000002F6C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002F72
.text:0000000000002F72 loc_2F72:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002F72                 mov     eax, r12d
.text:0000000000002F75                 lea     r15, [rcx+3]
.text:0000000000002F79                 xor     r12d, r12d
.text:0000000000002F7C                 mov     ebx, 30h ; '0'
.text:0000000000002F81                 jmp     loc_22E8
.text:0000000000002F81 ; ---------------------------------------------------------------------------
.text:0000000000002F86                 align 10h
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002F90                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002F95                 mov     rbp, r11
.text:0000000000002F98                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002F9C                 jmp     loc_2C49
.text:0000000000002FA1 ; ---------------------------------------------------------------------------
.text:0000000000002FA1
.text:0000000000002FA1 loc_2FA1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002FA1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002FA6                 xor     r12d, r12d
.text:0000000000002FA9                 jmp     loc_2AB0
.text:0000000000002FAE ; ---------------------------------------------------------------------------
.text:0000000000002FAE
.text:0000000000002FAE loc_2FAE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002FAE                 xor     r10d, r10d
.text:0000000000002FB1                 jmp     loc_2B6D
.text:0000000000002FB6 ; ---------------------------------------------------------------------------
.text:0000000000002FB6
.text:0000000000002FB6 loc_2FB6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002FB6                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FBF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FC4                 xor     r12d, r12d
.text:0000000000002FC7                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FCC                 jmp     loc_2DAB
.text:0000000000002FD1 ; ---------------------------------------------------------------------------
.text:0000000000002FD1
.text:0000000000002FD1 loc_2FD1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002FD1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002FD6                 mov     rsi, r14
.text:0000000000002FD9                 mov     rcx, r13
.text:0000000000002FDC                 mov     rax, rbx
.text:0000000000002FDF                 mov     rdi, rbx
.text:0000000000002FE2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002FE8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002FED                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002FF5                 cmp     rsi, r11
.text:0000000000002FF8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002FFE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003006                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000300B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003010                 jnb     short loc_3038
.text:0000000000003012                 cmp     byte ptr [rcx], 0
.text:0000000000003015                 jnz     short loc_3027
.text:0000000000003017                 jmp     short loc_3038
.text:0000000000003017 ; ---------------------------------------------------------------------------
.text:0000000000003019                 align 20h
.text:0000000000003020
.text:0000000000003020 loc_3020:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003020                 cmp     byte ptr [r9+rax], 0
.text:0000000000003025                 jz      short loc_3035
.text:0000000000003027
.text:0000000000003027 loc_3027:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003027                 add     rax, 1
.text:000000000000302B                 lea     rdx, [rbp+rax+0]
.text:0000000000003030                 cmp     r11, rdx
.text:0000000000003033                 ja      short loc_3020
.text:0000000000003035
.text:0000000000003035 loc_3035:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003035                 mov     rdi, rax
.text:0000000000003038
.text:0000000000003038 loc_3038:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003038                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003038                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000303D                 xor     r12d, r12d
.text:0000000000003040                 jmp     loc_2AA6
.text:0000000000003045 ; ---------------------------------------------------------------------------
.text:0000000000003045
.text:0000000000003045 loc_3045:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003045                 mov     rdi, rbx
.text:0000000000003048                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000304E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003053                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003059                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003061                 xor     r12d, r12d
.text:0000000000003064                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003069                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000306E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003073                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003078                 jmp     loc_2AA6
.text:000000000000307D ; ---------------------------------------------------------------------------
.text:000000000000307D
.text:000000000000307D loc_307D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000307D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003082                 movzx   eax, byte ptr [rdx]
.text:0000000000003085                 test    al, al
.text:0000000000003087                 jz      loc_2EBC
.text:000000000000308D                 nop     dword ptr [rax]
.text:0000000000003090
.text:0000000000003090 loc_3090:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003090                 cmp     r13, r15
.text:0000000000003093                 jbe     short loc_3099
.text:0000000000003095                 mov     [r14+r15], al
.text:0000000000003099
.text:0000000000003099 loc_3099:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003099                 add     r15, 1
.text:000000000000309D                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000030A2                 test    al, al
.text:00000000000030A4                 jnz     short loc_3090
.text:00000000000030A6                 jmp     loc_2EBC
.text:00000000000030AB ; ---------------------------------------------------------------------------
.text:00000000000030AB
.text:00000000000030AB loc_30AB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000030AB                 mov     eax, edx
.text:00000000000030AD                 jmp     loc_2607
.text:00000000000030B2 ; ---------------------------------------------------------------------------
.text:00000000000030B2
.text:00000000000030B2 loc_30B2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000030B2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000030B6                 cmp     bl, 3Eh ; '>'
.text:00000000000030B9                 ja      loc_2930
.text:00000000000030BF                 mov     rax, 7000A38200000000h
.text:00000000000030C9                 bt      rax, rbx
.text:00000000000030CD                 jnb     loc_2930
.text:00000000000030D3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000030D8                 jnz     loc_32C2
.text:00000000000030DE                 cmp     r13, r15
.text:00000000000030E1                 jbe     short loc_30E8
.text:00000000000030E3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000030E8
.text:00000000000030E8 loc_30E8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000030E8                 lea     rax, [r15+1]
.text:00000000000030EC                 cmp     r13, rax
.text:00000000000030EF                 jbe     short loc_30F7
.text:00000000000030F1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000030F7
.text:00000000000030F7 loc_30F7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000030F7                 lea     rax, [r15+2]
.text:00000000000030FB                 cmp     r13, rax
.text:00000000000030FE                 jbe     short loc_3106
.text:0000000000003100                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003106
.text:0000000000003106 loc_3106:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003106                 lea     rax, [r15+3]
.text:000000000000310A                 cmp     r13, rax
.text:000000000000310D                 jbe     short loc_3115
.text:000000000000310F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003115
.text:0000000000003115 loc_3115:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003115                 add     r15, 4
.text:0000000000003119                 xor     edx, edx
.text:000000000000311B                 xor     r12d, r12d
.text:000000000000311E                 xor     eax, eax
.text:0000000000003120                 mov     rbp, rcx
.text:0000000000003123                 jmp     loc_22E8
.text:0000000000003128 ; ---------------------------------------------------------------------------
.text:0000000000003128
.text:0000000000003128 loc_3128:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003128                                         ; DATA XREF: .rodata:jpt_2151↓o
.text:0000000000003128                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000312A                 jz      loc_32B8
.text:0000000000003130                 lea     rax, asc_4F9D   ; "'"
.text:0000000000003137                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000313C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003141                 xor     r12d, r12d
.text:0000000000003144                 mov     [rsp+0E8h+var_98], 0
.text:000000000000314D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003152                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003157                 mov     [rsp+0E8h+n], 1
.text:0000000000003160                 xor     r15d, r15d
.text:0000000000003163                 mov     [rsp+0E8h+s2], rax
.text:0000000000003168                 jmp     loc_2193
.text:0000000000003168 ; ---------------------------------------------------------------------------
.text:000000000000316D                 align 10h
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003170                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003170                 mov     rbp, r11
.text:0000000000003173                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003178                 jmp     loc_2C49
.text:000000000000317D ; ---------------------------------------------------------------------------
.text:000000000000317D
.text:000000000000317D loc_317D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000317D                 lea     rax, unk_4F9B
.text:0000000000003184                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003189                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000318E                 xor     r12d, r12d
.text:0000000000003191                 mov     [rsp+0E8h+var_98], 0
.text:000000000000319A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000319F                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000031A4                 mov     [rsp+0E8h+n], 1
.text:00000000000031AD                 xor     r15d, r15d
.text:00000000000031B0                 mov     [rsp+0E8h+s2], rax
.text:00000000000031B5                 jmp     loc_2193
.text:00000000000031BA ; ---------------------------------------------------------------------------
.text:00000000000031BA
.text:00000000000031BA loc_31BA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000031BA                 mov     eax, edx
.text:00000000000031BC
.text:00000000000031BC loc_31BC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000031BC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000031BC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000031C1                 test    rbx, rbx
.text:00000000000031C4                 jz      short loc_31F2
.text:00000000000031C6                 test    al, al
.text:00000000000031C8                 jz      short loc_31F2
.text:00000000000031CA                 movzx   ecx, byte ptr [rbx]
.text:00000000000031CD                 mov     rax, rbx
.text:00000000000031D0                 test    cl, cl
.text:00000000000031D2                 jz      short loc_31F2
.text:00000000000031D4                 mov     rdx, r15
.text:00000000000031D7                 sub     rax, r15
.text:00000000000031DA
.text:00000000000031DA loc_31DA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000031DA                 cmp     r13, rdx
.text:00000000000031DD                 jbe     short loc_31E3
.text:00000000000031DF                 mov     [r14+rdx], cl
.text:00000000000031E3
.text:00000000000031E3 loc_31E3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000031E3                 add     rdx, 1
.text:00000000000031E7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000031EB                 test    cl, cl
.text:00000000000031ED                 jnz     short loc_31DA
.text:00000000000031EF                 mov     r15, rdx
.text:00000000000031F2
.text:00000000000031F2 loc_31F2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000031F2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000031F2                 cmp     r13, r15
.text:00000000000031F5                 jbe     loc_2C99
.text:00000000000031FB                 mov     byte ptr [r14+r15], 0
.text:0000000000003200                 jmp     loc_2C99
.text:0000000000003205 ; ---------------------------------------------------------------------------
.text:0000000000003205
.text:0000000000003205 loc_3205:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003205                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000320A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000320F                 mov     rbp, r11
.text:0000000000003212                 setz    al
.text:0000000000003215                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003219                 jmp     loc_2C49
.text:000000000000321E ; ---------------------------------------------------------------------------
.text:000000000000321E
.text:000000000000321E loc_321E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000321E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003222                 mov     rdi, rcx
.text:0000000000003225                 call    gettext_quote
.text:000000000000322A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000322F                 jmp     loc_2E86
.text:0000000000003234 ; ---------------------------------------------------------------------------
.text:0000000000003234
.text:0000000000003234 loc_3234:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003234                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003238                 mov     rdi, rcx
.text:000000000000323B                 call    gettext_quote
.text:0000000000003240                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003245                 jmp     loc_2EB1
.text:000000000000324A ; ---------------------------------------------------------------------------
.text:000000000000324A
.text:000000000000324A loc_324A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000324A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000324F                 mov     rbp, r11
.text:0000000000003252                 mov     eax, edx
.text:0000000000003254                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003258                 jmp     loc_2C49
.text:000000000000325D ; ---------------------------------------------------------------------------
.text:000000000000325D
.text:000000000000325D loc_325D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000325D                 sub     rsp, 8
.text:0000000000003261                 mov     r8d, 5
.text:0000000000003267                 mov     rcx, r11
.text:000000000000326A                 push    [rsp+0F0h+var_88]
.text:000000000000326E                 push    [rsp+0F8h+var_80]
.text:0000000000003272                 mov     rdi, r14
.text:0000000000003275                 push    [rsp+100h+var_C8]
.text:0000000000003279                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003281                 mov     rdx, [rsp+108h+s]
.text:0000000000003286                 mov     rsi, [rsp+108h+var_98]
.text:000000000000328B                 call    quotearg_buffer_restyled
.text:0000000000003290                 add     rsp, 20h
.text:0000000000003294                 mov     r15, rax
.text:0000000000003297                 jmp     loc_2C99
.text:000000000000329C ; ---------------------------------------------------------------------------
.text:000000000000329C
.text:000000000000329C loc_329C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000329C                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000032A1                 jmp     loc_31BC
.text:00000000000032A6 ; ---------------------------------------------------------------------------
.text:00000000000032A6
.text:00000000000032A6 loc_32A6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000032A6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000032AE                 jmp     loc_2C49
.text:00000000000032B3 ; ---------------------------------------------------------------------------
.text:00000000000032B3
.text:00000000000032B3 loc_32B3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000032B3                 call    ___stack_chk_fail
.text:00000000000032B8 ; ---------------------------------------------------------------------------
.text:00000000000032B8
.text:00000000000032B8 loc_32B8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000032B8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000032BD                 jmp     loc_2D31
.text:00000000000032C2 ; ---------------------------------------------------------------------------
.text:00000000000032C2
.text:00000000000032C2 loc_32C2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000032C2                 mov     rbp, r11
.text:00000000000032C5                 jmp     loc_2C60
.text:00000000000032CA ; ---------------------------------------------------------------------------
.text:00000000000032CA
.text:00000000000032CA loc_32CA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000032CA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000032CF                 xor     eax, eax
.text:00000000000032D1                 xor     r12d, r12d
.text:00000000000032D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000032DD                 jmp     loc_2884
.text:00000000000032E2 ; ---------------------------------------------------------------------------
.text:00000000000032E2
.text:00000000000032E2 loc_32E2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000032E2                 mov     rdx, r13
.text:00000000000032E5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000032EA                 jmp     loc_28E2
.text:00000000000032EF ; ---------------------------------------------------------------------------
.text:00000000000032EF
.text:00000000000032EF def_2151:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000032EF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000032EF ; } // starts at 20C0
.text:00000000000032EF quotearg_buffer_restyled endp
.text:00000000000032EF
.text:00000000000032EF ; ---------------------------------------------------------------------------
.text:00000000000032F4                 align 20h
.text:0000000000003300
.text:0000000000003300 ; =============== S U B R O U T I N E =======================================
.text:0000000000003300
.text:0000000000003300
.text:0000000000003300 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003300                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003300
.text:0000000000003300 var_50          = qword ptr -50h
.text:0000000000003300 var_48          = qword ptr -48h
.text:0000000000003300 var_40          = dword ptr -40h
.text:0000000000003300 var_3C          = dword ptr -3Ch
.text:0000000000003300
.text:0000000000003300 ; __unwind {
.text:0000000000003300                 push    r15
.text:0000000000003302                 push    r14
.text:0000000000003304                 movsxd  r15, edi
.text:0000000000003307                 push    r13
.text:0000000000003309                 push    r12
.text:000000000000330B                 mov     r14, rdx
.text:000000000000330E                 push    rbp
.text:000000000000330F                 push    rbx
.text:0000000000003310                 mov     rbp, rcx
.text:0000000000003313                 sub     rsp, 28h
.text:0000000000003317                 mov     [rsp+58h+var_50], rsi
.text:000000000000331C                 call    ___errno_location
.text:0000000000003321                 mov     r13, rax
.text:0000000000003324                 mov     eax, [rax]
.text:0000000000003326                 test    r15d, r15d
.text:0000000000003329                 mov     rbx, cs:slotvec
.text:0000000000003330                 mov     [rsp+58h+var_40], eax
.text:0000000000003334                 js      loc_34A1
.text:000000000000333A                 cmp     cs:nslots, r15d
.text:0000000000003341                 jg      short loc_33A5
.text:0000000000003343                 cmp     r15d, 7FFFFFFFh
.text:000000000000334A                 jz      loc_34A6
.text:0000000000003350                 lea     r12d, [r15+1]
.text:0000000000003354                 lea     rax, slotvec0
.text:000000000000335B                 movsxd  rsi, r12d
.text:000000000000335E                 shl     rsi, 4
.text:0000000000003362                 cmp     rbx, rax
.text:0000000000003365                 jz      loc_3480
.text:000000000000336B                 mov     rdi, rbx
.text:000000000000336E                 call    xrealloc
.text:0000000000003373                 mov     rbx, rax
.text:0000000000003376                 mov     cs:slotvec, rax
.text:000000000000337D
.text:000000000000337D loc_337D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000337D                 movsxd  rdi, cs:nslots
.text:0000000000003384                 mov     edx, r12d
.text:0000000000003387                 xor     esi, esi        ; c
.text:0000000000003389                 sub     edx, edi
.text:000000000000338B                 shl     rdi, 4
.text:000000000000338F                 movsxd  rdx, edx
.text:0000000000003392                 add     rdi, rbx        ; s
.text:0000000000003395                 shl     rdx, 4          ; n
.text:0000000000003399                 call    _memset
.text:000000000000339E                 mov     cs:nslots, r12d
.text:00000000000033A5
.text:00000000000033A5 loc_33A5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000033A5                 mov     eax, [rbp+4]
.text:00000000000033A8                 shl     r15, 4
.text:00000000000033AC                 sub     rsp, 8
.text:00000000000033B0                 add     rbx, r15
.text:00000000000033B3                 lea     r15, [rbp+8]
.text:00000000000033B7                 mov     r8d, [rbp+0]
.text:00000000000033BB                 mov     r11, [rbx]
.text:00000000000033BE                 mov     r12, [rbx+8]
.text:00000000000033C2                 mov     rcx, r14
.text:00000000000033C5                 or      eax, 1
.text:00000000000033C8                 mov     [rsp+60h+var_3C], eax
.text:00000000000033CC                 push    qword ptr [rbp+30h]
.text:00000000000033CF                 mov     r9d, eax
.text:00000000000033D2                 push    qword ptr [rbp+28h]
.text:00000000000033D5                 push    r15
.text:00000000000033D7                 mov     rsi, r11
.text:00000000000033DA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000033DF                 mov     rdi, r12
.text:00000000000033E2                 mov     [rsp+78h+var_48], r11
.text:00000000000033E7                 call    quotearg_buffer_restyled
.text:00000000000033EC                 add     rsp, 20h
.text:00000000000033F0                 mov     r11, [rsp+58h+var_48]
.text:00000000000033F5                 cmp     r11, rax
.text:00000000000033F8                 ja      short loc_3461
.text:00000000000033FA                 lea     rsi, [rax+1]
.text:00000000000033FE                 lea     rax, slot0
.text:0000000000003405                 cmp     r12, rax
.text:0000000000003408                 mov     [rbx], rsi
.text:000000000000340B                 jz      short loc_341F
.text:000000000000340D                 mov     rdi, r12        ; ptr
.text:0000000000003410                 mov     [rsp+58h+var_48], rsi
.text:0000000000003415                 call    _free
.text:000000000000341A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000341F
.text:000000000000341F loc_341F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000341F                 mov     rdi, rsi
.text:0000000000003422                 mov     [rsp+58h+var_48], rsi
.text:0000000000003427                 call    xmalloc
.text:000000000000342C                 sub     rsp, 8
.text:0000000000003430                 mov     [rbx+8], rax
.text:0000000000003434                 mov     r8d, [rbp+0]
.text:0000000000003438                 push    qword ptr [rbp+30h]
.text:000000000000343B                 push    qword ptr [rbp+28h]
.text:000000000000343E                 mov     rcx, r14
.text:0000000000003441                 push    r15
.text:0000000000003443                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003448                 mov     rdi, rax
.text:000000000000344B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003450                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003455                 mov     r12, rax
.text:0000000000003458                 call    quotearg_buffer_restyled
.text:000000000000345D                 add     rsp, 20h
.text:0000000000003461
.text:0000000000003461 loc_3461:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003461                 mov     eax, [rsp+58h+var_40]
.text:0000000000003465                 mov     [r13+0], eax
.text:0000000000003469                 add     rsp, 28h
.text:000000000000346D                 mov     rax, r12
.text:0000000000003470                 pop     rbx
.text:0000000000003471                 pop     rbp
.text:0000000000003472                 pop     r12
.text:0000000000003474                 pop     r13
.text:0000000000003476                 pop     r14
.text:0000000000003478                 pop     r15
.text:000000000000347A                 retn
.text:000000000000347A ; ---------------------------------------------------------------------------
.text:000000000000347B                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003480                 xor     edi, edi
.text:0000000000003482                 call    xrealloc
.text:0000000000003487                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000348F                 mov     rbx, rax
.text:0000000000003492                 mov     cs:slotvec, rax
.text:0000000000003499                 movups  xmmword ptr [rax], xmm0
.text:000000000000349C                 jmp     loc_337D
.text:00000000000034A1 ; ---------------------------------------------------------------------------
.text:00000000000034A1
.text:00000000000034A1 loc_34A1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000034A1                 call    _abort
.text:00000000000034A6 ; ---------------------------------------------------------------------------
.text:00000000000034A6
.text:00000000000034A6 loc_34A6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000034A6                 call    xalloc_die
.text:00000000000034A6 ; } // starts at 3300
.text:00000000000034A6 quotearg_n_options endp
.text:00000000000034A6
.text:00000000000034A6 ; ---------------------------------------------------------------------------
.text:00000000000034AB                 align 10h
.text:00000000000034B0
.text:00000000000034B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034B0
.text:00000000000034B0 ; Attributes: info_from_lumina
.text:00000000000034B0
.text:00000000000034B0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000034B0                 public clone_quoting_options
.text:00000000000034B0 clone_quoting_options proc near
.text:00000000000034B0 ; __unwind {
.text:00000000000034B0                 push    r12
.text:00000000000034B2                 push    rbp
.text:00000000000034B3                 push    rbx
.text:00000000000034B4                 mov     rbx, rdi
.text:00000000000034B7                 call    ___errno_location
.text:00000000000034BC                 mov     r12d, [rax]
.text:00000000000034BF                 mov     rbp, rax
.text:00000000000034C2                 lea     rax, default_quoting_options
.text:00000000000034C9                 test    rbx, rbx
.text:00000000000034CC                 mov     esi, 38h ; '8'  ; n
.text:00000000000034D1                 cmovz   rbx, rax
.text:00000000000034D5                 mov     rdi, rbx        ; src
.text:00000000000034D8                 call    xmemdup
.text:00000000000034DD                 mov     [rbp+0], r12d
.text:00000000000034E1                 pop     rbx
.text:00000000000034E2                 pop     rbp
.text:00000000000034E3                 pop     r12
.text:00000000000034E5                 retn
.text:00000000000034E5 ; } // starts at 34B0
.text:00000000000034E5 clone_quoting_options endp
.text:00000000000034E5
.text:00000000000034E5 ; ---------------------------------------------------------------------------
.text:00000000000034E6                 align 10h
.text:00000000000034F0
.text:00000000000034F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034F0
.text:00000000000034F0
.text:00000000000034F0                 public get_quoting_style
.text:00000000000034F0 get_quoting_style proc near
.text:00000000000034F0 ; __unwind {
.text:00000000000034F0                 lea     rax, default_quoting_options
.text:00000000000034F7                 test    rdi, rdi
.text:00000000000034FA                 cmovz   rdi, rax
.text:00000000000034FE                 mov     eax, [rdi]
.text:0000000000003500                 retn
.text:0000000000003500 ; } // starts at 34F0
.text:0000000000003500 get_quoting_style endp
.text:0000000000003500
.text:0000000000003500 ; ---------------------------------------------------------------------------
.text:0000000000003501                 align 10h
.text:0000000000003510
.text:0000000000003510 ; =============== S U B R O U T I N E =======================================
.text:0000000000003510
.text:0000000000003510
.text:0000000000003510                 public set_quoting_style
.text:0000000000003510 set_quoting_style proc near
.text:0000000000003510 ; __unwind {
.text:0000000000003510                 lea     rax, default_quoting_options
.text:0000000000003517                 test    rdi, rdi
.text:000000000000351A                 cmovz   rdi, rax
.text:000000000000351E                 mov     [rdi], esi
.text:0000000000003520                 retn
.text:0000000000003520 ; } // starts at 3510
.text:0000000000003520 set_quoting_style endp
.text:0000000000003520
.text:0000000000003520 ; ---------------------------------------------------------------------------
.text:0000000000003521                 align 10h
.text:0000000000003530
.text:0000000000003530 ; =============== S U B R O U T I N E =======================================
.text:0000000000003530
.text:0000000000003530 ; Attributes: info_from_lumina
.text:0000000000003530
.text:0000000000003530 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003530                 public set_char_quoting
.text:0000000000003530 set_char_quoting proc near
.text:0000000000003530 ; __unwind {
.text:0000000000003530                 lea     rax, default_quoting_options
.text:0000000000003537                 test    rdi, rdi
.text:000000000000353A                 mov     ecx, esi
.text:000000000000353C                 cmovz   rdi, rax
.text:0000000000003540                 mov     eax, esi
.text:0000000000003542                 and     ecx, 1Fh
.text:0000000000003545                 shr     al, 5
.text:0000000000003548                 movzx   eax, al
.text:000000000000354B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003550                 mov     esi, [rdi]
.text:0000000000003552                 mov     eax, esi
.text:0000000000003554                 shr     eax, cl
.text:0000000000003556                 xor     edx, eax
.text:0000000000003558                 and     eax, 1
.text:000000000000355B                 and     edx, 1
.text:000000000000355E                 shl     edx, cl
.text:0000000000003560                 xor     edx, esi
.text:0000000000003562                 mov     [rdi], edx
.text:0000000000003564                 retn
.text:0000000000003564 ; } // starts at 3530
.text:0000000000003564 set_char_quoting endp
.text:0000000000003564
.text:0000000000003564 ; ---------------------------------------------------------------------------
.text:0000000000003565                 align 10h
.text:0000000000003570
.text:0000000000003570 ; =============== S U B R O U T I N E =======================================
.text:0000000000003570
.text:0000000000003570
.text:0000000000003570                 public set_quoting_flags
.text:0000000000003570 set_quoting_flags proc near
.text:0000000000003570 ; __unwind {
.text:0000000000003570                 lea     rax, default_quoting_options
.text:0000000000003577                 test    rdi, rdi
.text:000000000000357A                 cmovz   rdi, rax
.text:000000000000357E                 mov     eax, [rdi+4]
.text:0000000000003581                 mov     [rdi+4], esi
.text:0000000000003584                 retn
.text:0000000000003584 ; } // starts at 3570
.text:0000000000003584 set_quoting_flags endp
.text:0000000000003584
.text:0000000000003584 ; ---------------------------------------------------------------------------
.text:0000000000003585                 align 10h
.text:0000000000003590
.text:0000000000003590 ; =============== S U B R O U T I N E =======================================
.text:0000000000003590
.text:0000000000003590 ; Attributes: info_from_lumina
.text:0000000000003590
.text:0000000000003590 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003590                 public set_custom_quoting
.text:0000000000003590 set_custom_quoting proc near
.text:0000000000003590 ; __unwind {
.text:0000000000003590                 lea     rax, default_quoting_options
.text:0000000000003597                 test    rdi, rdi
.text:000000000000359A                 cmovz   rdi, rax
.text:000000000000359E                 test    rsi, rsi
.text:00000000000035A1                 mov     dword ptr [rdi], 0Ah
.text:00000000000035A7                 jz      short loc_35B7
.text:00000000000035A9                 test    rdx, rdx
.text:00000000000035AC                 jz      short loc_35B7
.text:00000000000035AE                 mov     [rdi+28h], rsi
.text:00000000000035B2                 mov     [rdi+30h], rdx
.text:00000000000035B6                 retn
.text:00000000000035B7 ; ---------------------------------------------------------------------------
.text:00000000000035B7
.text:00000000000035B7 loc_35B7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000035B7                                         ; set_custom_quoting+1C↑j
.text:00000000000035B7                 sub     rsp, 8
.text:00000000000035BB                 call    _abort
.text:00000000000035BB ; } // starts at 3590
.text:00000000000035BB set_custom_quoting endp
.text:00000000000035BB
.text:00000000000035C0
.text:00000000000035C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035C0
.text:00000000000035C0 ; Attributes: info_from_lumina
.text:00000000000035C0
.text:00000000000035C0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000035C0                 public quotearg_buffer
.text:00000000000035C0 quotearg_buffer proc near
.text:00000000000035C0
.text:00000000000035C0 var_40          = qword ptr -40h
.text:00000000000035C0
.text:00000000000035C0 ; __unwind {
.text:00000000000035C0                 push    r15
.text:00000000000035C2                 push    r14
.text:00000000000035C4                 lea     rax, default_quoting_options
.text:00000000000035CB                 push    r13
.text:00000000000035CD                 push    r12
.text:00000000000035CF                 mov     r13, rdi
.text:00000000000035D2                 push    rbp
.text:00000000000035D3                 push    rbx
.text:00000000000035D4                 mov     rbx, r8
.text:00000000000035D7                 mov     r14, rsi
.text:00000000000035DA                 mov     r15, rdx
.text:00000000000035DD                 sub     rsp, 18h
.text:00000000000035E1                 test    r8, r8
.text:00000000000035E4                 cmovz   rbx, rax
.text:00000000000035E8                 mov     [rsp+48h+var_40], rcx
.text:00000000000035ED                 call    ___errno_location
.text:00000000000035F2                 mov     r12d, [rax]
.text:00000000000035F5                 mov     rbp, rax
.text:00000000000035F8                 lea     rax, [rbx+8]
.text:00000000000035FC                 sub     rsp, 8
.text:0000000000003600                 mov     r9d, [rbx+4]
.text:0000000000003604                 push    qword ptr [rbx+30h]
.text:0000000000003607                 mov     r8d, [rbx]
.text:000000000000360A                 push    qword ptr [rbx+28h]
.text:000000000000360D                 mov     rdx, r15
.text:0000000000003610                 push    rax
.text:0000000000003611                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003616                 mov     rsi, r14
.text:0000000000003619                 mov     rdi, r13
.text:000000000000361C                 call    quotearg_buffer_restyled
.text:0000000000003621                 mov     [rbp+0], r12d
.text:0000000000003625                 add     rsp, 38h
.text:0000000000003629                 pop     rbx
.text:000000000000362A                 pop     rbp
.text:000000000000362B                 pop     r12
.text:000000000000362D                 pop     r13
.text:000000000000362F                 pop     r14
.text:0000000000003631                 pop     r15
.text:0000000000003633                 retn
.text:0000000000003633 ; } // starts at 35C0
.text:0000000000003633 quotearg_buffer endp
.text:0000000000003633
.text:0000000000003633 ; ---------------------------------------------------------------------------
.text:0000000000003634                 align 20h
.text:0000000000003640
.text:0000000000003640 ; =============== S U B R O U T I N E =======================================
.text:0000000000003640
.text:0000000000003640 ; Attributes: info_from_lumina
.text:0000000000003640
.text:0000000000003640 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003640                 public quotearg_alloc_mem
.text:0000000000003640 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003640
.text:0000000000003640 var_5C          = dword ptr -5Ch
.text:0000000000003640 var_58          = qword ptr -58h
.text:0000000000003640 var_50          = qword ptr -50h
.text:0000000000003640 var_48          = qword ptr -48h
.text:0000000000003640 var_40          = qword ptr -40h
.text:0000000000003640
.text:0000000000003640 ; __unwind {
.text:0000000000003640                 push    r15
.text:0000000000003642                 push    r14
.text:0000000000003644                 lea     rax, default_quoting_options
.text:000000000000364B                 push    r13
.text:000000000000364D                 push    r12
.text:000000000000364F                 mov     r12, rdx
.text:0000000000003652                 push    rbp
.text:0000000000003653                 push    rbx
.text:0000000000003654                 mov     rbx, rcx
.text:0000000000003657                 mov     r14, rdi
.text:000000000000365A                 mov     r15, rsi
.text:000000000000365D                 sub     rsp, 38h
.text:0000000000003661                 test    rcx, rcx
.text:0000000000003664                 cmovz   rbx, rax
.text:0000000000003668                 xor     ebp, ebp
.text:000000000000366A                 call    ___errno_location
.text:000000000000366F                 test    r12, r12
.text:0000000000003672                 mov     r13, rax
.text:0000000000003675                 mov     eax, [rax]
.text:0000000000003677                 setz    bpl
.text:000000000000367B                 or      ebp, [rbx+4]
.text:000000000000367E                 lea     r10, [rbx+8]
.text:0000000000003682                 sub     rsp, 8
.text:0000000000003686                 mov     r8d, [rbx]
.text:0000000000003689                 mov     rcx, r15
.text:000000000000368C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003690                 push    qword ptr [rbx+30h]
.text:0000000000003693                 mov     rdx, r14
.text:0000000000003696                 push    qword ptr [rbx+28h]
.text:0000000000003699                 push    r10
.text:000000000000369B                 xor     esi, esi
.text:000000000000369D                 mov     r9d, ebp
.text:00000000000036A0                 xor     edi, edi
.text:00000000000036A2                 mov     [rsp+88h+var_48], r10
.text:00000000000036A7                 call    quotearg_buffer_restyled
.text:00000000000036AC                 lea     rsi, [rax+1]
.text:00000000000036B0                 mov     [rsp+88h+var_40], rax
.text:00000000000036B5                 add     rsp, 20h
.text:00000000000036B9                 mov     rdi, rsi
.text:00000000000036BC                 mov     [rsp+68h+var_50], rsi
.text:00000000000036C1                 call    xmalloc
.text:00000000000036C6                 mov     [rsp+68h+var_58], rax
.text:00000000000036CB                 sub     rsp, 8
.text:00000000000036CF                 push    qword ptr [rbx+30h]
.text:00000000000036D2                 push    qword ptr [rbx+28h]
.text:00000000000036D5                 mov     r10, [rsp+80h+var_48]
.text:00000000000036DA                 mov     r9d, ebp
.text:00000000000036DD                 mov     r8d, [rbx]
.text:00000000000036E0                 mov     rcx, r15
.text:00000000000036E3                 mov     rdx, r14
.text:00000000000036E6                 mov     rdi, rax
.text:00000000000036E9                 push    r10
.text:00000000000036EB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000036F0                 call    quotearg_buffer_restyled
.text:00000000000036F5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000036F9                 add     rsp, 20h
.text:00000000000036FD                 test    r12, r12
.text:0000000000003700                 mov     [r13+0], eax
.text:0000000000003704                 jz      short loc_370F
.text:0000000000003706                 mov     r11, [rsp+68h+var_40]
.text:000000000000370B                 mov     [r12], r11
.text:000000000000370F
.text:000000000000370F loc_370F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000370F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003714                 add     rsp, 38h
.text:0000000000003718                 pop     rbx
.text:0000000000003719                 pop     rbp
.text:000000000000371A                 pop     r12
.text:000000000000371C                 pop     r13
.text:000000000000371E                 pop     r14
.text:0000000000003720                 pop     r15
.text:0000000000003722                 retn
.text:0000000000003722 ; } // starts at 3640
.text:0000000000003722 quotearg_alloc_mem endp
.text:0000000000003722
.text:0000000000003722 ; ---------------------------------------------------------------------------
.text:0000000000003723                 align 10h
.text:0000000000003730
.text:0000000000003730 ; =============== S U B R O U T I N E =======================================
.text:0000000000003730
.text:0000000000003730
.text:0000000000003730                 public quotearg_alloc
.text:0000000000003730 quotearg_alloc  proc near
.text:0000000000003730 ; __unwind {
.text:0000000000003730                 mov     rcx, rdx
.text:0000000000003733                 xor     edx, edx
.text:0000000000003735                 jmp     quotearg_alloc_mem
.text:0000000000003735 ; } // starts at 3730
.text:0000000000003735 quotearg_alloc  endp
.text:0000000000003735
.text:0000000000003735 ; ---------------------------------------------------------------------------
.text:000000000000373A                 align 20h
.text:0000000000003740
.text:0000000000003740 ; =============== S U B R O U T I N E =======================================
.text:0000000000003740
.text:0000000000003740 ; Attributes: info_from_lumina
.text:0000000000003740
.text:0000000000003740 ; void __cdecl quotearg_free()
.text:0000000000003740                 public quotearg_free
.text:0000000000003740 quotearg_free   proc near
.text:0000000000003740 ; __unwind {
.text:0000000000003740                 mov     eax, cs:nslots
.text:0000000000003746                 push    r12
.text:0000000000003748                 mov     r12, cs:slotvec
.text:000000000000374F                 push    rbp
.text:0000000000003750                 push    rbx
.text:0000000000003751                 cmp     eax, 1
.text:0000000000003754                 jle     short loc_3781
.text:0000000000003756                 sub     eax, 2
.text:0000000000003759                 lea     rbx, [r12+18h]
.text:000000000000375E                 shl     rax, 4
.text:0000000000003762                 lea     rbp, [r12+rax+28h]
.text:0000000000003767                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003770
.text:0000000000003770 loc_3770:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003770                 mov     rdi, [rbx]      ; ptr
.text:0000000000003773                 add     rbx, 10h
.text:0000000000003777                 call    _free
.text:000000000000377C                 cmp     rbx, rbp
.text:000000000000377F                 jnz     short loc_3770
.text:0000000000003781
.text:0000000000003781 loc_3781:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003781                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003786                 lea     rbx, slot0
.text:000000000000378D                 cmp     rdi, rbx
.text:0000000000003790                 jz      short loc_37A9
.text:0000000000003792                 call    _free
.text:0000000000003797                 mov     cs:slotvec0, 100h
.text:00000000000037A2                 mov     cs:off_207078, rbx
.text:00000000000037A9
.text:00000000000037A9 loc_37A9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000037A9                 lea     rbx, slotvec0
.text:00000000000037B0                 cmp     r12, rbx
.text:00000000000037B3                 jz      short loc_37C4
.text:00000000000037B5                 mov     rdi, r12        ; ptr
.text:00000000000037B8                 call    _free
.text:00000000000037BD                 mov     cs:slotvec, rbx
.text:00000000000037C4
.text:00000000000037C4 loc_37C4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000037C4                 pop     rbx
.text:00000000000037C5                 mov     cs:nslots, 1
.text:00000000000037CF                 pop     rbp
.text:00000000000037D0                 pop     r12
.text:00000000000037D2                 retn
.text:00000000000037D2 ; } // starts at 3740
.text:00000000000037D2 quotearg_free   endp
.text:00000000000037D2
.text:00000000000037D2 ; ---------------------------------------------------------------------------
.text:00000000000037D3                 align 20h
.text:00000000000037E0
.text:00000000000037E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037E0
.text:00000000000037E0
.text:00000000000037E0                 public quotearg_n
.text:00000000000037E0 quotearg_n      proc near
.text:00000000000037E0 ; __unwind {
.text:00000000000037E0                 lea     rcx, default_quoting_options
.text:00000000000037E7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000037EE                 jmp     quotearg_n_options
.text:00000000000037EE ; } // starts at 37E0
.text:00000000000037EE quotearg_n      endp
.text:00000000000037EE
.text:00000000000037EE ; ---------------------------------------------------------------------------
.text:00000000000037F3                 align 20h
.text:0000000000003800
.text:0000000000003800 ; =============== S U B R O U T I N E =======================================
.text:0000000000003800
.text:0000000000003800
.text:0000000000003800                 public quotearg_n_mem
.text:0000000000003800 quotearg_n_mem  proc near
.text:0000000000003800 ; __unwind {
.text:0000000000003800                 lea     rcx, default_quoting_options
.text:0000000000003807                 jmp     quotearg_n_options
.text:0000000000003807 ; } // starts at 3800
.text:0000000000003807 quotearg_n_mem  endp
.text:0000000000003807
.text:0000000000003807 ; ---------------------------------------------------------------------------
.text:000000000000380C                 align 10h
.text:0000000000003810
.text:0000000000003810 ; =============== S U B R O U T I N E =======================================
.text:0000000000003810
.text:0000000000003810
.text:0000000000003810                 public quotearg
.text:0000000000003810 quotearg        proc near
.text:0000000000003810 ; __unwind {
.text:0000000000003810                 lea     rcx, default_quoting_options
.text:0000000000003817                 mov     rsi, rdi
.text:000000000000381A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003821                 xor     edi, edi
.text:0000000000003823                 jmp     quotearg_n_options
.text:0000000000003823 ; } // starts at 3810
.text:0000000000003823 quotearg        endp
.text:0000000000003823
.text:0000000000003823 ; ---------------------------------------------------------------------------
.text:0000000000003828                 align 10h
.text:0000000000003830
.text:0000000000003830 ; =============== S U B R O U T I N E =======================================
.text:0000000000003830
.text:0000000000003830
.text:0000000000003830                 public quotearg_mem
.text:0000000000003830 quotearg_mem    proc near
.text:0000000000003830 ; __unwind {
.text:0000000000003830                 lea     rcx, default_quoting_options
.text:0000000000003837                 mov     rdx, rsi
.text:000000000000383A                 mov     rsi, rdi
.text:000000000000383D                 xor     edi, edi
.text:000000000000383F                 jmp     quotearg_n_options
.text:000000000000383F ; } // starts at 3830
.text:000000000000383F quotearg_mem    endp
.text:000000000000383F
.text:000000000000383F ; ---------------------------------------------------------------------------
.text:0000000000003844                 align 10h
.text:0000000000003850
.text:0000000000003850 ; =============== S U B R O U T I N E =======================================
.text:0000000000003850
.text:0000000000003850 ; Attributes: info_from_lumina
.text:0000000000003850
.text:0000000000003850 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003850                 public quotearg_n_style
.text:0000000000003850 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003850
.text:0000000000003850 var_48          = dword ptr -48h
.text:0000000000003850 var_44          = qword ptr -44h
.text:0000000000003850 var_3C          = qword ptr -3Ch
.text:0000000000003850 var_34          = qword ptr -34h
.text:0000000000003850 var_2C          = qword ptr -2Ch
.text:0000000000003850 var_24          = qword ptr -24h
.text:0000000000003850 var_1C          = qword ptr -1Ch
.text:0000000000003850 var_14          = dword ptr -14h
.text:0000000000003850 var_10          = qword ptr -10h
.text:0000000000003850
.text:0000000000003850 ; __unwind {
.text:0000000000003850                 sub     rsp, 48h
.text:0000000000003854                 mov     rax, rdx
.text:0000000000003857                 mov     rdx, fs:28h
.text:0000000000003860                 mov     [rsp+48h+var_10], rdx
.text:0000000000003865                 xor     edx, edx
.text:0000000000003867                 cmp     esi, 0Ah
.text:000000000000386A                 jz      short loc_38D4
.text:000000000000386C                 mov     [rsp+48h+var_48], esi
.text:000000000000386F                 mov     rcx, rsp
.text:0000000000003872                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003879                 mov     rsi, rax
.text:000000000000387C                 mov     [rsp+48h+var_44], 0
.text:0000000000003885                 mov     [rsp+48h+var_3C], 0
.text:000000000000388E                 mov     [rsp+48h+var_34], 0
.text:0000000000003897                 mov     [rsp+48h+var_2C], 0
.text:00000000000038A0                 mov     [rsp+48h+var_24], 0
.text:00000000000038A9                 mov     [rsp+48h+var_1C], 0
.text:00000000000038B2                 mov     [rsp+48h+var_14], 0
.text:00000000000038BA                 call    quotearg_n_options
.text:00000000000038BF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000038C4                 xor     rcx, fs:28h
.text:00000000000038CD                 jnz     short loc_38D9
.text:00000000000038CF                 add     rsp, 48h
.text:00000000000038D3                 retn
.text:00000000000038D4 ; ---------------------------------------------------------------------------
.text:00000000000038D4
.text:00000000000038D4 loc_38D4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000038D4                 call    _abort
.text:00000000000038D9 ; ---------------------------------------------------------------------------
.text:00000000000038D9
.text:00000000000038D9 loc_38D9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000038D9                 call    ___stack_chk_fail
.text:00000000000038D9 ; } // starts at 3850
.text:00000000000038D9 quotearg_n_style endp
.text:00000000000038D9
.text:00000000000038D9 ; ---------------------------------------------------------------------------
.text:00000000000038DE                 align 20h
.text:00000000000038E0
.text:00000000000038E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038E0
.text:00000000000038E0 ; Attributes: info_from_lumina
.text:00000000000038E0
.text:00000000000038E0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000038E0                 public quotearg_n_style_mem
.text:00000000000038E0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000038E0
.text:00000000000038E0 var_48          = dword ptr -48h
.text:00000000000038E0 var_44          = qword ptr -44h
.text:00000000000038E0 var_3C          = qword ptr -3Ch
.text:00000000000038E0 var_34          = qword ptr -34h
.text:00000000000038E0 var_2C          = qword ptr -2Ch
.text:00000000000038E0 var_24          = qword ptr -24h
.text:00000000000038E0 var_1C          = qword ptr -1Ch
.text:00000000000038E0 var_14          = dword ptr -14h
.text:00000000000038E0 var_10          = qword ptr -10h
.text:00000000000038E0
.text:00000000000038E0 ; __unwind {
.text:00000000000038E0                 sub     rsp, 48h
.text:00000000000038E4                 mov     rax, rdx
.text:00000000000038E7                 mov     rdx, rcx
.text:00000000000038EA                 mov     rcx, fs:28h
.text:00000000000038F3                 mov     [rsp+48h+var_10], rcx
.text:00000000000038F8                 xor     ecx, ecx
.text:00000000000038FA                 cmp     esi, 0Ah
.text:00000000000038FD                 jz      short loc_3960
.text:00000000000038FF                 mov     [rsp+48h+var_48], esi
.text:0000000000003902                 mov     rcx, rsp
.text:0000000000003905                 mov     rsi, rax
.text:0000000000003908                 mov     [rsp+48h+var_44], 0
.text:0000000000003911                 mov     [rsp+48h+var_3C], 0
.text:000000000000391A                 mov     [rsp+48h+var_34], 0
.text:0000000000003923                 mov     [rsp+48h+var_2C], 0
.text:000000000000392C                 mov     [rsp+48h+var_24], 0
.text:0000000000003935                 mov     [rsp+48h+var_1C], 0
.text:000000000000393E                 mov     [rsp+48h+var_14], 0
.text:0000000000003946                 call    quotearg_n_options
.text:000000000000394B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003950                 xor     rdx, fs:28h
.text:0000000000003959                 jnz     short loc_3965
.text:000000000000395B                 add     rsp, 48h
.text:000000000000395F                 retn
.text:0000000000003960 ; ---------------------------------------------------------------------------
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003960                 call    _abort
.text:0000000000003965 ; ---------------------------------------------------------------------------
.text:0000000000003965
.text:0000000000003965 loc_3965:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003965                 call    ___stack_chk_fail
.text:0000000000003965 ; } // starts at 38E0
.text:0000000000003965 quotearg_n_style_mem endp
.text:0000000000003965
.text:0000000000003965 ; ---------------------------------------------------------------------------
.text:000000000000396A                 align 10h
.text:0000000000003970
.text:0000000000003970 ; =============== S U B R O U T I N E =======================================
.text:0000000000003970
.text:0000000000003970
.text:0000000000003970                 public quotearg_style
.text:0000000000003970 quotearg_style  proc near               ; CODE XREF: main+213↑p
.text:0000000000003970                                         ; main+250↑p ...
.text:0000000000003970 ; __unwind {
.text:0000000000003970                 mov     rdx, rsi
.text:0000000000003973                 mov     esi, edi
.text:0000000000003975                 xor     edi, edi
.text:0000000000003977                 jmp     quotearg_n_style
.text:0000000000003977 ; } // starts at 3970
.text:0000000000003977 quotearg_style  endp
.text:0000000000003977
.text:0000000000003977 ; ---------------------------------------------------------------------------
.text:000000000000397C                 align 20h
.text:0000000000003980
.text:0000000000003980 ; =============== S U B R O U T I N E =======================================
.text:0000000000003980
.text:0000000000003980
.text:0000000000003980                 public quotearg_style_mem
.text:0000000000003980 quotearg_style_mem proc near
.text:0000000000003980 ; __unwind {
.text:0000000000003980                 mov     rcx, rdx
.text:0000000000003983                 mov     rdx, rsi
.text:0000000000003986                 mov     esi, edi
.text:0000000000003988                 xor     edi, edi
.text:000000000000398A                 jmp     quotearg_n_style_mem
.text:000000000000398A ; } // starts at 3980
.text:000000000000398A quotearg_style_mem endp
.text:000000000000398A
.text:000000000000398A ; ---------------------------------------------------------------------------
.text:000000000000398F                 align 10h
.text:0000000000003990
.text:0000000000003990 ; =============== S U B R O U T I N E =======================================
.text:0000000000003990
.text:0000000000003990 ; Attributes: info_from_lumina
.text:0000000000003990
.text:0000000000003990 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003990                 public quotearg_char_mem
.text:0000000000003990 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003990                                         ; quotearg_colon+C↓j ...
.text:0000000000003990
.text:0000000000003990 var_48          = xmmword ptr -48h
.text:0000000000003990 var_38          = xmmword ptr -38h
.text:0000000000003990 var_28          = xmmword ptr -28h
.text:0000000000003990 var_18          = qword ptr -18h
.text:0000000000003990 var_10          = qword ptr -10h
.text:0000000000003990
.text:0000000000003990 ; __unwind {
.text:0000000000003990                 sub     rsp, 48h
.text:0000000000003994                 mov     ecx, edx
.text:0000000000003996                 mov     rax, fs:28h
.text:000000000000399F                 mov     [rsp+48h+var_10], rax
.text:00000000000039A4                 xor     eax, eax
.text:00000000000039A6                 mov     rax, cs:qword_207210
.text:00000000000039AD                 mov     r8, rsp
.text:00000000000039B0                 and     ecx, 1Fh
.text:00000000000039B3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000039BB                 mov     [rsp+48h+var_18], rax
.text:00000000000039C0                 mov     eax, edx
.text:00000000000039C2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000039C6                 shr     al, 5
.text:00000000000039C9                 movzx   eax, al
.text:00000000000039CC                 lea     r9, [r8+rax*4+8]
.text:00000000000039D1                 movdqa  xmm0, cs:xmmword_2071F0
.text:00000000000039D9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000039DE                 movdqa  xmm0, cs:xmmword_207200
.text:00000000000039E6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000039EB                 mov     edx, [r9]
.text:00000000000039EE                 mov     eax, edx
.text:00000000000039F0                 shr     eax, cl
.text:00000000000039F2                 not     eax
.text:00000000000039F4                 and     eax, 1
.text:00000000000039F7                 shl     eax, cl
.text:00000000000039F9                 mov     rcx, r8
.text:00000000000039FC                 xor     eax, edx
.text:00000000000039FE                 mov     rdx, rsi
.text:0000000000003A01                 mov     rsi, rdi
.text:0000000000003A04                 mov     [r9], eax
.text:0000000000003A07                 xor     edi, edi
.text:0000000000003A09                 call    quotearg_n_options
.text:0000000000003A0E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003A13                 xor     rsi, fs:28h
.text:0000000000003A1C                 jnz     short loc_3A23
.text:0000000000003A1E                 add     rsp, 48h
.text:0000000000003A22                 retn
.text:0000000000003A23 ; ---------------------------------------------------------------------------
.text:0000000000003A23
.text:0000000000003A23 loc_3A23:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003A23                 call    ___stack_chk_fail
.text:0000000000003A23 ; } // starts at 3990
.text:0000000000003A23 quotearg_char_mem endp
.text:0000000000003A23
.text:0000000000003A23 ; ---------------------------------------------------------------------------
.text:0000000000003A28                 align 10h
.text:0000000000003A30
.text:0000000000003A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A30
.text:0000000000003A30
.text:0000000000003A30                 public quotearg_char
.text:0000000000003A30 quotearg_char   proc near
.text:0000000000003A30 ; __unwind {
.text:0000000000003A30                 movsx   edx, sil
.text:0000000000003A34                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A3B                 jmp     quotearg_char_mem
.text:0000000000003A3B ; } // starts at 3A30
.text:0000000000003A3B quotearg_char   endp
.text:0000000000003A3B
.text:0000000000003A40
.text:0000000000003A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A40
.text:0000000000003A40
.text:0000000000003A40                 public quotearg_colon
.text:0000000000003A40 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003A40 ; __unwind {
.text:0000000000003A40                 mov     edx, 3Ah ; ':'
.text:0000000000003A45                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A4C                 jmp     quotearg_char_mem
.text:0000000000003A4C ; } // starts at 3A40
.text:0000000000003A4C quotearg_colon  endp
.text:0000000000003A4C
.text:0000000000003A4C ; ---------------------------------------------------------------------------
.text:0000000000003A51                 align 20h
.text:0000000000003A60
.text:0000000000003A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A60
.text:0000000000003A60
.text:0000000000003A60                 public quotearg_colon_mem
.text:0000000000003A60 quotearg_colon_mem proc near
.text:0000000000003A60 ; __unwind {
.text:0000000000003A60                 mov     edx, 3Ah ; ':'
.text:0000000000003A65                 jmp     quotearg_char_mem
.text:0000000000003A65 ; } // starts at 3A60
.text:0000000000003A65 quotearg_colon_mem endp
.text:0000000000003A65
.text:0000000000003A65 ; ---------------------------------------------------------------------------
.text:0000000000003A6A                 align 10h
.text:0000000000003A70
.text:0000000000003A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A70
.text:0000000000003A70 ; Attributes: info_from_lumina
.text:0000000000003A70
.text:0000000000003A70 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003A70                 public quotearg_n_style_colon
.text:0000000000003A70 quotearg_n_style_colon proc near
.text:0000000000003A70
.text:0000000000003A70 var_48          = dword ptr -48h
.text:0000000000003A70 var_44          = qword ptr -44h
.text:0000000000003A70 var_3C          = qword ptr -3Ch
.text:0000000000003A70 var_34          = qword ptr -34h
.text:0000000000003A70 var_2C          = qword ptr -2Ch
.text:0000000000003A70 var_24          = qword ptr -24h
.text:0000000000003A70 var_1C          = qword ptr -1Ch
.text:0000000000003A70 var_14          = dword ptr -14h
.text:0000000000003A70 var_10          = qword ptr -10h
.text:0000000000003A70
.text:0000000000003A70 ; __unwind {
.text:0000000000003A70                 sub     rsp, 48h
.text:0000000000003A74                 mov     rax, rdx
.text:0000000000003A77                 mov     rdx, fs:28h
.text:0000000000003A80                 mov     [rsp+48h+var_10], rdx
.text:0000000000003A85                 xor     edx, edx
.text:0000000000003A87                 cmp     esi, 0Ah
.text:0000000000003A8A                 jz      short loc_3AF4
.text:0000000000003A8C                 mov     [rsp+48h+var_48], esi
.text:0000000000003A8F                 mov     rcx, rsp
.text:0000000000003A92                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A99                 mov     rsi, rax
.text:0000000000003A9C                 mov     [rsp+48h+var_44], 0
.text:0000000000003AA5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003AAE                 mov     [rsp+48h+var_34], 0
.text:0000000000003AB7                 mov     [rsp+48h+var_2C], 0
.text:0000000000003AC0                 mov     [rsp+48h+var_24], 0
.text:0000000000003AC9                 mov     [rsp+48h+var_1C], 0
.text:0000000000003AD2                 mov     [rsp+48h+var_14], 0
.text:0000000000003ADA                 call    quotearg_n_options
.text:0000000000003ADF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003AE4                 xor     rcx, fs:28h
.text:0000000000003AED                 jnz     short loc_3AF9
.text:0000000000003AEF                 add     rsp, 48h
.text:0000000000003AF3                 retn
.text:0000000000003AF4 ; ---------------------------------------------------------------------------
.text:0000000000003AF4
.text:0000000000003AF4 loc_3AF4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003AF4                 call    _abort
.text:0000000000003AF9 ; ---------------------------------------------------------------------------
.text:0000000000003AF9
.text:0000000000003AF9 loc_3AF9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003AF9                 call    ___stack_chk_fail
.text:0000000000003AF9 ; } // starts at 3A70
.text:0000000000003AF9 quotearg_n_style_colon endp
.text:0000000000003AF9
.text:0000000000003AF9 ; ---------------------------------------------------------------------------
.text:0000000000003AFE                 align 20h
.text:0000000000003B00
.text:0000000000003B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B00
.text:0000000000003B00 ; Attributes: info_from_lumina
.text:0000000000003B00
.text:0000000000003B00 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003B00                 public quotearg_n_custom_mem
.text:0000000000003B00 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003B00                                         ; quotearg_custom+12↓j ...
.text:0000000000003B00
.text:0000000000003B00 var_48          = xmmword ptr -48h
.text:0000000000003B00 var_38          = xmmword ptr -38h
.text:0000000000003B00 var_28          = xmmword ptr -28h
.text:0000000000003B00 var_18          = qword ptr -18h
.text:0000000000003B00 var_10          = qword ptr -10h
.text:0000000000003B00
.text:0000000000003B00 ; __unwind {
.text:0000000000003B00                 sub     rsp, 48h
.text:0000000000003B04                 mov     r9, rcx
.text:0000000000003B07                 mov     rcx, cs:qword_207210
.text:0000000000003B0E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003B16                 mov     rax, fs:28h
.text:0000000000003B1F                 mov     [rsp+48h+var_10], rax
.text:0000000000003B24                 xor     eax, eax
.text:0000000000003B26                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003B2A                 test    rsi, rsi
.text:0000000000003B2D                 mov     [rsp+48h+var_18], rcx
.text:0000000000003B32                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003B39                 movdqa  xmm0, cs:xmmword_2071F0
.text:0000000000003B41                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003B46                 movdqa  xmm0, cs:xmmword_207200
.text:0000000000003B4E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003B53                 jz      short loc_3B87
.text:0000000000003B55                 test    rdx, rdx
.text:0000000000003B58                 jz      short loc_3B87
.text:0000000000003B5A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003B5F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003B64                 mov     rcx, rsp
.text:0000000000003B67                 mov     rdx, r8
.text:0000000000003B6A                 mov     rsi, r9
.text:0000000000003B6D                 call    quotearg_n_options
.text:0000000000003B72                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003B77                 xor     rdi, fs:28h
.text:0000000000003B80                 jnz     short loc_3B8C
.text:0000000000003B82                 add     rsp, 48h
.text:0000000000003B86                 retn
.text:0000000000003B87 ; ---------------------------------------------------------------------------
.text:0000000000003B87
.text:0000000000003B87 loc_3B87:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003B87                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003B87                 call    _abort
.text:0000000000003B8C ; ---------------------------------------------------------------------------
.text:0000000000003B8C
.text:0000000000003B8C loc_3B8C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003B8C                 call    ___stack_chk_fail
.text:0000000000003B8C ; } // starts at 3B00
.text:0000000000003B8C quotearg_n_custom_mem endp
.text:0000000000003B8C
.text:0000000000003B8C ; ---------------------------------------------------------------------------
.text:0000000000003B91                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BA0
.text:0000000000003BA0
.text:0000000000003BA0                 public quotearg_n_custom
.text:0000000000003BA0 quotearg_n_custom proc near
.text:0000000000003BA0 ; __unwind {
.text:0000000000003BA0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BA7                 jmp     quotearg_n_custom_mem
.text:0000000000003BA7 ; } // starts at 3BA0
.text:0000000000003BA7 quotearg_n_custom endp
.text:0000000000003BA7
.text:0000000000003BA7 ; ---------------------------------------------------------------------------
.text:0000000000003BAC                 align 10h
.text:0000000000003BB0
.text:0000000000003BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BB0
.text:0000000000003BB0
.text:0000000000003BB0                 public quotearg_custom
.text:0000000000003BB0 quotearg_custom proc near
.text:0000000000003BB0 ; __unwind {
.text:0000000000003BB0                 mov     rcx, rdx
.text:0000000000003BB3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BBA                 mov     rdx, rsi
.text:0000000000003BBD                 mov     rsi, rdi
.text:0000000000003BC0                 xor     edi, edi
.text:0000000000003BC2                 jmp     quotearg_n_custom_mem
.text:0000000000003BC2 ; } // starts at 3BB0
.text:0000000000003BC2 quotearg_custom endp
.text:0000000000003BC2
.text:0000000000003BC2 ; ---------------------------------------------------------------------------
.text:0000000000003BC7                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BD0
.text:0000000000003BD0
.text:0000000000003BD0                 public quotearg_custom_mem
.text:0000000000003BD0 quotearg_custom_mem proc near
.text:0000000000003BD0 ; __unwind {
.text:0000000000003BD0                 mov     r8, rcx
.text:0000000000003BD3                 mov     rcx, rdx
.text:0000000000003BD6                 mov     rdx, rsi
.text:0000000000003BD9                 mov     rsi, rdi
.text:0000000000003BDC                 xor     edi, edi
.text:0000000000003BDE                 jmp     quotearg_n_custom_mem
.text:0000000000003BDE ; } // starts at 3BD0
.text:0000000000003BDE quotearg_custom_mem endp
.text:0000000000003BDE
.text:0000000000003BDE ; ---------------------------------------------------------------------------
.text:0000000000003BE3                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BF0
.text:0000000000003BF0
.text:0000000000003BF0                 public quote_n_mem
.text:0000000000003BF0 quote_n_mem     proc near
.text:0000000000003BF0 ; __unwind {
.text:0000000000003BF0                 lea     rcx, quote_quoting_options
.text:0000000000003BF7                 jmp     quotearg_n_options
.text:0000000000003BF7 ; } // starts at 3BF0
.text:0000000000003BF7 quote_n_mem     endp
.text:0000000000003BF7
.text:0000000000003BF7 ; ---------------------------------------------------------------------------
.text:0000000000003BFC                 align 20h
.text:0000000000003C00
.text:0000000000003C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C00
.text:0000000000003C00
.text:0000000000003C00                 public quote_mem
.text:0000000000003C00 quote_mem       proc near
.text:0000000000003C00 ; __unwind {
.text:0000000000003C00                 lea     rcx, quote_quoting_options
.text:0000000000003C07                 mov     rdx, rsi
.text:0000000000003C0A                 mov     rsi, rdi
.text:0000000000003C0D                 xor     edi, edi
.text:0000000000003C0F                 jmp     quotearg_n_options
.text:0000000000003C0F ; } // starts at 3C00
.text:0000000000003C0F quote_mem       endp
.text:0000000000003C0F
.text:0000000000003C0F ; ---------------------------------------------------------------------------
.text:0000000000003C14                 align 20h
.text:0000000000003C20
.text:0000000000003C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C20
.text:0000000000003C20
.text:0000000000003C20                 public quote_n
.text:0000000000003C20 quote_n         proc near
.text:0000000000003C20 ; __unwind {
.text:0000000000003C20                 lea     rcx, quote_quoting_options
.text:0000000000003C27                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C2E                 jmp     quotearg_n_options
.text:0000000000003C2E ; } // starts at 3C20
.text:0000000000003C2E quote_n         endp
.text:0000000000003C2E
.text:0000000000003C2E ; ---------------------------------------------------------------------------
.text:0000000000003C33                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40
.text:0000000000003C40                 public quote
.text:0000000000003C40 quote           proc near
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 lea     rcx, quote_quoting_options
.text:0000000000003C47                 mov     rsi, rdi
.text:0000000000003C4A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C51                 xor     edi, edi
.text:0000000000003C53                 jmp     quotearg_n_options
.text:0000000000003C53 ; } // starts at 3C40
.text:0000000000003C53 quote           endp
.text:0000000000003C53
.text:0000000000003C53 ; ---------------------------------------------------------------------------
.text:0000000000003C58                 align 20h
.text:0000000000003C60
.text:0000000000003C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C60
.text:0000000000003C60
.text:0000000000003C60 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003C60                 public version_etc_arn
.text:0000000000003C60 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_409B↓j
.text:0000000000003C60                                         ; version_etc_va:loc_40EB↓p ...
.text:0000000000003C60
.text:0000000000003C60 var_58          = qword ptr -58h
.text:0000000000003C60 var_50          = qword ptr -50h
.text:0000000000003C60 var_48          = qword ptr -48h
.text:0000000000003C60 var_40          = qword ptr -40h
.text:0000000000003C60
.text:0000000000003C60 ; __unwind {
.text:0000000000003C60                 push    r15
.text:0000000000003C62                 push    r14
.text:0000000000003C64                 push    r13
.text:0000000000003C66                 push    r12
.text:0000000000003C68                 mov     r12, r9
.text:0000000000003C6B                 push    rbp
.text:0000000000003C6C                 push    rbx
.text:0000000000003C6D                 mov     rbp, rdi
.text:0000000000003C70                 mov     rbx, r8
.text:0000000000003C73                 sub     rsp, 28h
.text:0000000000003C77                 test    rsi, rsi
.text:0000000000003C7A                 jz      loc_3D98
.text:0000000000003C80                 mov     r8, rdx
.text:0000000000003C83                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003C8A                 mov     r9, rcx
.text:0000000000003C8D                 xor     eax, eax
.text:0000000000003C8F                 mov     rcx, rsi
.text:0000000000003C92                 mov     esi, 1
.text:0000000000003C97                 call    ___fprintf_chk
.text:0000000000003C9C
.text:0000000000003C9C loc_3C9C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003C9C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003CA3                 xor     edi, edi        ; domainname
.text:0000000000003CA5                 mov     edx, 5          ; category
.text:0000000000003CAA                 call    _dcgettext
.text:0000000000003CAF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003CB6                 mov     rcx, rax
.text:0000000000003CB9                 mov     r8d, 7E3h
.text:0000000000003CBF                 mov     esi, 1
.text:0000000000003CC4                 mov     rdi, rbp
.text:0000000000003CC7                 xor     eax, eax
.text:0000000000003CC9                 call    ___fprintf_chk
.text:0000000000003CCE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003CD5                 xor     edi, edi        ; domainname
.text:0000000000003CD7                 mov     edx, 5          ; category
.text:0000000000003CDC                 call    _dcgettext
.text:0000000000003CE1                 mov     rsi, rbp        ; stream
.text:0000000000003CE4                 mov     rdi, rax        ; s
.text:0000000000003CE7                 call    _fputs_unlocked
.text:0000000000003CEC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003CF0                 ja      def_3D04        ; jumptable 0000000000003D04 default case
.text:0000000000003CF6                 lea     rdx, jpt_3D04
.text:0000000000003CFD                 movsxd  rax, ds:(jpt_3D04 - 5768h)[rdx+r12*4]
.text:0000000000003D01                 add     rax, rdx
.text:0000000000003D04                 jmp     rax             ; switch jump
.text:0000000000003D04 ; ---------------------------------------------------------------------------
.text:0000000000003D06                 align 10h
.text:0000000000003D10
.text:0000000000003D10 loc_3D10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D10                                         ; DATA XREF: .rodata:jpt_3D04↓o
.text:0000000000003D10                 mov     r9, [rbx+38h]   ; jumptable 0000000000003D04 case 8
.text:0000000000003D14                 mov     rax, [rbx+10h]
.text:0000000000003D18                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003D1F                 mov     r8, [rbx+8]
.text:0000000000003D23                 mov     edx, 5          ; category
.text:0000000000003D28                 xor     edi, edi        ; domainname
.text:0000000000003D2A                 mov     r13, [rbx+30h]
.text:0000000000003D2E                 mov     r12, [rbx+28h]
.text:0000000000003D32                 mov     [rsp+58h+var_48], r9
.text:0000000000003D37                 mov     r15, [rbx+20h]
.text:0000000000003D3B                 mov     r14, [rbx+18h]
.text:0000000000003D3F                 mov     [rsp+58h+var_58], rax
.text:0000000000003D43                 mov     [rsp+58h+var_50], r8
.text:0000000000003D48                 mov     rbx, [rbx]
.text:0000000000003D4B                 call    _dcgettext
.text:0000000000003D50                 sub     rsp, 8
.text:0000000000003D54
.text:0000000000003D54 loc_3D54:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003D54                 mov     r9, [rsp+60h+var_48]
.text:0000000000003D59                 mov     rdx, rax
.text:0000000000003D5C                 mov     rcx, rbx
.text:0000000000003D5F                 mov     esi, 1
.text:0000000000003D64                 mov     rdi, rbp
.text:0000000000003D67                 xor     eax, eax
.text:0000000000003D69                 push    r9
.text:0000000000003D6B                 push    r13
.text:0000000000003D6D                 push    r12
.text:0000000000003D6F                 push    r15
.text:0000000000003D71                 push    r14
.text:0000000000003D73                 mov     r9, [rsp+88h+var_58]
.text:0000000000003D78                 mov     r8, [rsp+88h+var_50]
.text:0000000000003D7D                 call    ___fprintf_chk
.text:0000000000003D82                 add     rsp, 30h
.text:0000000000003D86
.text:0000000000003D86 loc_3D86:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D86                                         ; DATA XREF: .rodata:jpt_3D04↓o
.text:0000000000003D86                 add     rsp, 28h        ; jumptable 0000000000003D04 case 0
.text:0000000000003D8A                 pop     rbx
.text:0000000000003D8B                 pop     rbp
.text:0000000000003D8C                 pop     r12
.text:0000000000003D8E                 pop     r13
.text:0000000000003D90                 pop     r14
.text:0000000000003D92                 pop     r15
.text:0000000000003D94                 retn
.text:0000000000003D94 ; ---------------------------------------------------------------------------
.text:0000000000003D95                 align 8
.text:0000000000003D98
.text:0000000000003D98 loc_3D98:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003D98                 mov     r8, rcx
.text:0000000000003D9B                 mov     rcx, rdx
.text:0000000000003D9E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003DA5                 mov     esi, 1
.text:0000000000003DAA                 xor     eax, eax
.text:0000000000003DAC                 call    ___fprintf_chk
.text:0000000000003DB1                 jmp     loc_3C9C
.text:0000000000003DB1 ; ---------------------------------------------------------------------------
.text:0000000000003DB6                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DC0                                         ; DATA XREF: .rodata:jpt_3D04↓o
.text:0000000000003DC0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003D04 case 9
.text:0000000000003DC4                 mov     r9, [rbx+38h]
.text:0000000000003DC8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003DCF                 mov     rax, [rbx+10h]
.text:0000000000003DD3                 mov     r8, [rbx+8]
.text:0000000000003DD7                 mov     edx, 5          ; category
.text:0000000000003DDC                 mov     r13, [rbx+30h]
.text:0000000000003DE0                 mov     r12, [rbx+28h]
.text:0000000000003DE4                 mov     r15, [rbx+20h]
.text:0000000000003DE8                 mov     r14, [rbx+18h]
.text:0000000000003DEC                 mov     rbx, [rbx]
.text:0000000000003DEF                 mov     [rsp+58h+var_40], r10
.text:0000000000003DF4                 mov     [rsp+58h+var_48], r9
.text:0000000000003DF9                 mov     [rsp+58h+var_58], rax
.text:0000000000003DFD                 mov     [rsp+58h+var_50], r8
.text:0000000000003E02
.text:0000000000003E02 loc_3E02:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003E02                 xor     edi, edi        ; domainname
.text:0000000000003E04                 call    _dcgettext
.text:0000000000003E09                 mov     r10, [rsp+58h+var_40]
.text:0000000000003E0E                 push    r10
.text:0000000000003E10                 jmp     loc_3D54
.text:0000000000003E10 ; ---------------------------------------------------------------------------
.text:0000000000003E15                 align 8
.text:0000000000003E18
.text:0000000000003E18 loc_3E18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E18                                         ; DATA XREF: .rodata:jpt_3D04↓o
.text:0000000000003E18                 mov     rbx, [rbx]      ; jumptable 0000000000003D04 case 1
.text:0000000000003E1B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003E22                 mov     edx, 5          ; category
.text:0000000000003E27                 xor     edi, edi        ; domainname
.text:0000000000003E29                 call    _dcgettext
.text:0000000000003E2E                 add     rsp, 28h
.text:0000000000003E32                 mov     rcx, rbx
.text:0000000000003E35                 mov     rdi, rbp
.text:0000000000003E38                 pop     rbx
.text:0000000000003E39                 pop     rbp
.text:0000000000003E3A                 pop     r12
.text:0000000000003E3C                 pop     r13
.text:0000000000003E3E                 pop     r14
.text:0000000000003E40                 pop     r15
.text:0000000000003E42                 mov     rdx, rax
.text:0000000000003E45                 mov     esi, 1
.text:0000000000003E4A                 xor     eax, eax
.text:0000000000003E4C                 jmp     ___fprintf_chk
.text:0000000000003E4C ; ---------------------------------------------------------------------------
.text:0000000000003E51                 align 8
.text:0000000000003E58
.text:0000000000003E58 loc_3E58:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E58                                         ; DATA XREF: .rodata:jpt_3D04↓o
.text:0000000000003E58                 mov     r12, [rbx+8]    ; jumptable 0000000000003D04 case 2
.text:0000000000003E5C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003E63                 mov     rbx, [rbx]
.text:0000000000003E66                 mov     edx, 5          ; category
.text:0000000000003E6B                 xor     edi, edi        ; domainname
.text:0000000000003E6D                 call    _dcgettext
.text:0000000000003E72                 add     rsp, 28h
.text:0000000000003E76                 mov     r8, r12
.text:0000000000003E79                 mov     rcx, rbx
.text:0000000000003E7C                 mov     rdi, rbp
.text:0000000000003E7F                 mov     rdx, rax
.text:0000000000003E82                 mov     esi, 1
.text:0000000000003E87                 pop     rbx
.text:0000000000003E88                 pop     rbp
.text:0000000000003E89                 pop     r12
.text:0000000000003E8B                 pop     r13
.text:0000000000003E8D                 pop     r14
.text:0000000000003E8F                 pop     r15
.text:0000000000003E91                 xor     eax, eax
.text:0000000000003E93                 jmp     ___fprintf_chk
.text:0000000000003E93 ; ---------------------------------------------------------------------------
.text:0000000000003E98                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 loc_3EA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003EA0                                         ; DATA XREF: .rodata:jpt_3D04↓o
.text:0000000000003EA0                 mov     r13, [rbx+10h]  ; jumptable 0000000000003D04 case 3
.text:0000000000003EA4                 mov     r12, [rbx+8]
.text:0000000000003EA8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003EAF                 mov     rbx, [rbx]
.text:0000000000003EB2                 mov     edx, 5          ; category
.text:0000000000003EB7                 xor     edi, edi        ; domainname
.text:0000000000003EB9                 call    _dcgettext
.text:0000000000003EBE                 add     rsp, 28h
.text:0000000000003EC2                 mov     r9, r13
.text:0000000000003EC5                 mov     r8, r12
.text:0000000000003EC8                 mov     rcx, rbx
.text:0000000000003ECB                 mov     rdi, rbp
.text:0000000000003ECE                 mov     rdx, rax
.text:0000000000003ED1                 pop     rbx
.text:0000000000003ED2                 pop     rbp
.text:0000000000003ED3                 pop     r12
.text:0000000000003ED5                 pop     r13
.text:0000000000003ED7                 pop     r14
.text:0000000000003ED9                 pop     r15
.text:0000000000003EDB                 mov     esi, 1
.text:0000000000003EE0                 xor     eax, eax
.text:0000000000003EE2                 jmp     ___fprintf_chk
.text:0000000000003EE2 ; ---------------------------------------------------------------------------
.text:0000000000003EE7                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003EF0                                         ; DATA XREF: .rodata:jpt_3D04↓o
.text:0000000000003EF0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003D04 case 4
.text:0000000000003EF7                 mov     edx, 5          ; category
.text:0000000000003EFC                 xor     edi, edi        ; domainname
.text:0000000000003EFE                 mov     r14, [rbx+18h]
.text:0000000000003F02                 mov     r13, [rbx+10h]
.text:0000000000003F06                 mov     r12, [rbx+8]
.text:0000000000003F0A                 mov     rbx, [rbx]
.text:0000000000003F0D                 call    _dcgettext
.text:0000000000003F12                 sub     rsp, 8
.text:0000000000003F16
.text:0000000000003F16 loc_3F16:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003F16                 push    r14
.text:0000000000003F18                 mov     rdx, rax
.text:0000000000003F1B                 mov     r9, r13
.text:0000000000003F1E                 mov     r8, r12
.text:0000000000003F21                 mov     rcx, rbx
.text:0000000000003F24                 mov     rdi, rbp
.text:0000000000003F27                 mov     esi, 1
.text:0000000000003F2C                 xor     eax, eax
.text:0000000000003F2E                 call    ___fprintf_chk
.text:0000000000003F33                 pop     rax
.text:0000000000003F34                 pop     rdx
.text:0000000000003F35                 add     rsp, 28h
.text:0000000000003F39                 pop     rbx
.text:0000000000003F3A                 pop     rbp
.text:0000000000003F3B                 pop     r12
.text:0000000000003F3D                 pop     r13
.text:0000000000003F3F                 pop     r14
.text:0000000000003F41                 pop     r15
.text:0000000000003F43                 retn
.text:0000000000003F43 ; ---------------------------------------------------------------------------
.text:0000000000003F44                 align 8
.text:0000000000003F48
.text:0000000000003F48 loc_3F48:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F48                                         ; DATA XREF: .rodata:jpt_3D04↓o
.text:0000000000003F48                 mov     r15, [rbx+20h]  ; jumptable 0000000000003D04 case 5
.text:0000000000003F4C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003F53                 mov     edx, 5          ; category
.text:0000000000003F58                 xor     edi, edi        ; domainname
.text:0000000000003F5A                 mov     r14, [rbx+18h]
.text:0000000000003F5E                 mov     r13, [rbx+10h]
.text:0000000000003F62                 mov     r12, [rbx+8]
.text:0000000000003F66                 mov     rbx, [rbx]
.text:0000000000003F69                 call    _dcgettext
.text:0000000000003F6E                 push    r15
.text:0000000000003F70                 jmp     short loc_3F16
.text:0000000000003F70 ; ---------------------------------------------------------------------------
.text:0000000000003F72                 align 8
.text:0000000000003F78
.text:0000000000003F78 loc_3F78:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F78                                         ; DATA XREF: .rodata:jpt_3D04↓o
.text:0000000000003F78                 mov     r8, [rbx+8]     ; jumptable 0000000000003D04 case 6
.text:0000000000003F7C                 mov     r12, [rbx+28h]
.text:0000000000003F80                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003F87                 mov     r15, [rbx+20h]
.text:0000000000003F8B                 mov     r14, [rbx+18h]
.text:0000000000003F8F                 mov     edx, 5          ; category
.text:0000000000003F94                 mov     r13, [rbx+10h]
.text:0000000000003F98                 xor     edi, edi        ; domainname
.text:0000000000003F9A                 mov     rbx, [rbx]
.text:0000000000003F9D                 mov     [rsp+58h+var_58], r8
.text:0000000000003FA1                 call    _dcgettext
.text:0000000000003FA6                 sub     rsp, 8
.text:0000000000003FAA                 mov     r9, r13
.text:0000000000003FAD                 push    r12
.text:0000000000003FAF                 push    r15
.text:0000000000003FB1                 push    r14
.text:0000000000003FB3
.text:0000000000003FB3 loc_3FB3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003FB3                 mov     r8, [rsp+78h+var_58]
.text:0000000000003FB8                 mov     rcx, rbx
.text:0000000000003FBB                 mov     rdx, rax
.text:0000000000003FBE                 mov     rdi, rbp
.text:0000000000003FC1                 mov     esi, 1
.text:0000000000003FC6                 xor     eax, eax
.text:0000000000003FC8                 call    ___fprintf_chk
.text:0000000000003FCD                 add     rsp, 20h
.text:0000000000003FD1                 add     rsp, 28h
.text:0000000000003FD5                 pop     rbx
.text:0000000000003FD6                 pop     rbp
.text:0000000000003FD7                 pop     r12
.text:0000000000003FD9                 pop     r13
.text:0000000000003FDB                 pop     r14
.text:0000000000003FDD                 pop     r15
.text:0000000000003FDF                 retn
.text:0000000000003FE0 ; ---------------------------------------------------------------------------
.text:0000000000003FE0
.text:0000000000003FE0 loc_3FE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FE0                                         ; DATA XREF: .rodata:jpt_3D04↓o
.text:0000000000003FE0                 mov     r9, [rbx+10h]   ; jumptable 0000000000003D04 case 7
.text:0000000000003FE4                 mov     r13, [rbx+30h]
.text:0000000000003FE8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003FEF                 mov     r12, [rbx+28h]
.text:0000000000003FF3                 mov     r15, [rbx+20h]
.text:0000000000003FF7                 mov     edx, 5          ; category
.text:0000000000003FFC                 mov     r14, [rbx+18h]
.text:0000000000004000                 mov     r8, [rbx+8]
.text:0000000000004004                 xor     edi, edi        ; domainname
.text:0000000000004006                 mov     [rsp+58h+var_50], r9
.text:000000000000400B                 mov     rbx, [rbx]
.text:000000000000400E                 mov     [rsp+58h+var_58], r8
.text:0000000000004012                 call    _dcgettext
.text:0000000000004017                 push    r13
.text:0000000000004019                 push    r12
.text:000000000000401B                 push    r15
.text:000000000000401D                 push    r14
.text:000000000000401F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004024                 jmp     short loc_3FB3
.text:0000000000004024 ; ---------------------------------------------------------------------------
.text:0000000000004026                 align 10h
.text:0000000000004030
.text:0000000000004030 def_3D04:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004030                 mov     r10, [rbx+40h]  ; jumptable 0000000000003D04 default case
.text:0000000000004034                 mov     r9, [rbx+38h]
.text:0000000000004038                 mov     edx, 5
.text:000000000000403D                 mov     rax, [rbx+10h]
.text:0000000000004041                 mov     r8, [rbx+8]
.text:0000000000004045                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000404C                 mov     r13, [rbx+30h]
.text:0000000000004050                 mov     r12, [rbx+28h]
.text:0000000000004054                 mov     r15, [rbx+20h]
.text:0000000000004058                 mov     r14, [rbx+18h]
.text:000000000000405C                 mov     [rsp+58h+var_40], r10
.text:0000000000004061                 mov     [rsp+58h+var_48], r9
.text:0000000000004066                 mov     [rsp+58h+var_58], rax
.text:000000000000406A                 mov     [rsp+58h+var_50], r8
.text:000000000000406F                 mov     rbx, [rbx]
.text:0000000000004072                 jmp     loc_3E02
.text:0000000000004072 ; } // starts at 3C60
.text:0000000000004072 version_etc_arn endp
.text:0000000000004072
.text:0000000000004072 ; ---------------------------------------------------------------------------
.text:0000000000004077                 align 20h
.text:0000000000004080
.text:0000000000004080 ; =============== S U B R O U T I N E =======================================
.text:0000000000004080
.text:0000000000004080 ; Attributes: info_from_lumina
.text:0000000000004080
.text:0000000000004080 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004080                 public version_etc_ar
.text:0000000000004080 version_etc_ar  proc near
.text:0000000000004080 ; __unwind {
.text:0000000000004080                 xor     r9d, r9d
.text:0000000000004083                 cmp     qword ptr [r8], 0
.text:0000000000004087                 jz      short loc_409B
.text:0000000000004089                 nop     dword ptr [rax+00000000h]
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004090                 add     r9, 1
.text:0000000000004094                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004099                 jnz     short loc_4090
.text:000000000000409B
.text:000000000000409B loc_409B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000409B                 jmp     version_etc_arn
.text:000000000000409B ; } // starts at 4080
.text:000000000000409B version_etc_ar  endp
.text:000000000000409B
.text:00000000000040A0
.text:00000000000040A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040A0
.text:00000000000040A0 ; Attributes: info_from_lumina
.text:00000000000040A0
.text:00000000000040A0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000040A0                 public version_etc_va
.text:00000000000040A0 version_etc_va  proc near
.text:00000000000040A0
.text:00000000000040A0 authtab         = qword ptr -68h
.text:00000000000040A0 var_10          = qword ptr -10h
.text:00000000000040A0
.text:00000000000040A0 ; __unwind {
.text:00000000000040A0                 sub     rsp, 68h
.text:00000000000040A4                 mov     r10, r8
.text:00000000000040A7                 xor     r9d, r9d
.text:00000000000040AA                 mov     rax, fs:28h
.text:00000000000040B3                 mov     [rsp+68h+var_10], rax
.text:00000000000040B8                 xor     eax, eax
.text:00000000000040BA                 mov     r8, rsp
.text:00000000000040BD                 nop     dword ptr [rax]
.text:00000000000040C0
.text:00000000000040C0 loc_40C0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000040C0                 mov     eax, [r10]
.text:00000000000040C3                 cmp     eax, 2Fh ; '/'
.text:00000000000040C6                 ja      short loc_410A
.text:00000000000040C8                 mov     r11d, eax
.text:00000000000040CB                 add     r11, [r10+10h]
.text:00000000000040CF                 add     eax, 8
.text:00000000000040D2                 mov     [r10], eax
.text:00000000000040D5
.text:00000000000040D5 loc_40D5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000040D5                 mov     rax, [r11]
.text:00000000000040D8                 test    rax, rax
.text:00000000000040DB                 mov     [r8+r9*8], rax
.text:00000000000040DF                 jz      short loc_40EB
.text:00000000000040E1                 add     r9, 1
.text:00000000000040E5                 cmp     r9, 0Ah
.text:00000000000040E9                 jnz     short loc_40C0
.text:00000000000040EB
.text:00000000000040EB loc_40EB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000040EB                 call    version_etc_arn
.text:00000000000040F0                 mov     rax, [rsp+68h+var_10]
.text:00000000000040F5                 xor     rax, fs:28h
.text:00000000000040FE                 jnz     short loc_4105
.text:0000000000004100                 add     rsp, 68h
.text:0000000000004104                 retn
.text:0000000000004105 ; ---------------------------------------------------------------------------
.text:0000000000004105
.text:0000000000004105 loc_4105:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004105                 call    ___stack_chk_fail
.text:000000000000410A ; ---------------------------------------------------------------------------
.text:000000000000410A
.text:000000000000410A loc_410A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000410A                 mov     r11, [r10+8]
.text:000000000000410E                 lea     rax, [r11+8]
.text:0000000000004112                 mov     [r10+8], rax
.text:0000000000004116                 jmp     short loc_40D5
.text:0000000000004116 ; } // starts at 40A0
.text:0000000000004116 version_etc_va  endp
.text:0000000000004116
.text:0000000000004116 ; ---------------------------------------------------------------------------
.text:0000000000004118                 align 20h
.text:0000000000004120
.text:0000000000004120 ; =============== S U B R O U T I N E =======================================
.text:0000000000004120
.text:0000000000004120 ; Attributes: info_from_lumina
.text:0000000000004120
.text:0000000000004120 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004120                 public version_etc
.text:0000000000004120 version_etc     proc near               ; CODE XREF: main+DD↑p
.text:0000000000004120
.text:0000000000004120 var_C0          = dword ptr -0C0h
.text:0000000000004120 var_B8          = qword ptr -0B8h
.text:0000000000004120 var_B0          = qword ptr -0B0h
.text:0000000000004120 var_A8          = byte ptr -0A8h
.text:0000000000004120 var_50          = qword ptr -50h
.text:0000000000004120 var_48          = byte ptr -48h
.text:0000000000004120 var_28          = qword ptr -28h
.text:0000000000004120 var_20          = qword ptr -20h
.text:0000000000004120 arg_0           = byte ptr  8
.text:0000000000004120
.text:0000000000004120 ; __unwind {
.text:0000000000004120                 push    rbp
.text:0000000000004121                 push    rbx
.text:0000000000004122                 mov     r10d, 20h ; ' '
.text:0000000000004128                 xor     r11d, r11d
.text:000000000000412B                 sub     rsp, 0B8h
.text:0000000000004132                 mov     rax, fs:28h
.text:000000000000413B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004140                 xor     eax, eax
.text:0000000000004142                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000414A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004152                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000415A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000415F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004167                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000416F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004174                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000417C                 xor     r9d, r9d
.text:000000000000417F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004184                 mov     rbp, rax
.text:0000000000004187                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004190
.text:0000000000004190 loc_4190:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004190                 cmp     r10d, 2Fh ; '/'
.text:0000000000004194                 ja      short loc_41EC
.text:0000000000004196                 mov     eax, r10d
.text:0000000000004199                 mov     r11d, 1
.text:000000000000419F                 add     r10d, 8
.text:00000000000041A3                 add     rax, rbp
.text:00000000000041A6
.text:00000000000041A6 loc_41A6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000041A6                 mov     rax, [rax]
.text:00000000000041A9                 test    rax, rax
.text:00000000000041AC                 mov     [r8+r9*8], rax
.text:00000000000041B0                 jz      short loc_41BC
.text:00000000000041B2                 add     r9, 1
.text:00000000000041B6                 cmp     r9, 0Ah
.text:00000000000041BA                 jnz     short loc_4190
.text:00000000000041BC
.text:00000000000041BC loc_41BC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000041BC                 test    r11b, r11b
.text:00000000000041BF                 jnz     short loc_41E5
.text:00000000000041C1
.text:00000000000041C1 loc_41C1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000041C1                 call    version_etc_arn
.text:00000000000041C6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000041CB                 xor     rax, fs:28h
.text:00000000000041D4                 jnz     short loc_41E0
.text:00000000000041D6                 add     rsp, 0B8h
.text:00000000000041DD                 pop     rbx
.text:00000000000041DE                 pop     rbp
.text:00000000000041DF                 retn
.text:00000000000041E0 ; ---------------------------------------------------------------------------
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000041E0                 call    ___stack_chk_fail
.text:00000000000041E5 ; ---------------------------------------------------------------------------
.text:00000000000041E5
.text:00000000000041E5 loc_41E5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000041E5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000041EA                 jmp     short loc_41C1
.text:00000000000041EC ; ---------------------------------------------------------------------------
.text:00000000000041EC
.text:00000000000041EC loc_41EC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000041EC                 mov     rax, rbx
.text:00000000000041EF                 add     rbx, 8
.text:00000000000041F3                 jmp     short loc_41A6
.text:00000000000041F3 ; } // starts at 4120
.text:00000000000041F3 version_etc     endp
.text:00000000000041F3
.text:00000000000041F3 ; ---------------------------------------------------------------------------
.text:00000000000041F5                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200 ; Attributes: info_from_lumina
.text:0000000000004200
.text:0000000000004200 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004200                 public emit_bug_reporting_address
.text:0000000000004200 emit_bug_reporting_address proc near
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 push    rbx
.text:0000000000004201                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004208                 mov     edx, 5          ; category
.text:000000000000420D                 xor     edi, edi        ; domainname
.text:000000000000420F                 call    _dcgettext
.text:0000000000004214                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000421B                 mov     rsi, rax
.text:000000000000421E                 mov     edi, 1
.text:0000000000004223                 xor     eax, eax
.text:0000000000004225                 call    ___printf_chk
.text:000000000000422A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004231                 mov     edx, 5          ; category
.text:0000000000004236                 xor     edi, edi        ; domainname
.text:0000000000004238                 call    _dcgettext
.text:000000000000423D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004244                 lea     rdx, unk_4B9D
.text:000000000000424B                 mov     rsi, rax
.text:000000000000424E                 mov     edi, 1
.text:0000000000004253                 xor     eax, eax
.text:0000000000004255                 call    ___printf_chk
.text:000000000000425A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004261                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004268                 xor     edi, edi        ; domainname
.text:000000000000426A                 mov     edx, 5          ; category
.text:000000000000426F                 call    _dcgettext
.text:0000000000004274                 mov     rsi, rbx        ; stream
.text:0000000000004277                 mov     rdi, rax        ; s
.text:000000000000427A                 pop     rbx
.text:000000000000427B                 jmp     _fputs_unlocked
.text:000000000000427B ; } // starts at 4200
.text:000000000000427B emit_bug_reporting_address endp
.text:000000000000427B
.text:0000000000004280
.text:0000000000004280 ; =============== S U B R O U T I N E =======================================
.text:0000000000004280
.text:0000000000004280
.text:0000000000004280                 public xmalloc
.text:0000000000004280 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004280                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004280 ; __unwind {
.text:0000000000004280                 push    rbx
.text:0000000000004281                 mov     rbx, rdi
.text:0000000000004284                 call    _malloc
.text:0000000000004289                 test    rax, rax
.text:000000000000428C                 jnz     short loc_4293
.text:000000000000428E                 test    rbx, rbx
.text:0000000000004291                 jnz     short loc_4295
.text:0000000000004293
.text:0000000000004293 loc_4293:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004293                 pop     rbx
.text:0000000000004294                 retn
.text:0000000000004295 ; ---------------------------------------------------------------------------
.text:0000000000004295
.text:0000000000004295 loc_4295:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004295                 call    xalloc_die
.text:0000000000004295 ; } // starts at 4280
.text:0000000000004295 xmalloc         endp
.text:0000000000004295
.text:0000000000004295 ; ---------------------------------------------------------------------------
.text:000000000000429A                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0 ; Attributes: info_from_lumina
.text:00000000000042A0
.text:00000000000042A0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000042A0                 public xnmalloc
.text:00000000000042A0 xnmalloc        proc near
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 mov     rax, rdi
.text:00000000000042A3                 mul     rsi
.text:00000000000042A6                 mov     rdi, rax
.text:00000000000042A9                 seto    al
.text:00000000000042AC                 test    rdi, rdi
.text:00000000000042AF                 js      short loc_42BB
.text:00000000000042B1                 movzx   eax, al
.text:00000000000042B4                 test    rax, rax
.text:00000000000042B7                 jnz     short loc_42BB
.text:00000000000042B9                 jmp     short xmalloc
.text:00000000000042BB ; ---------------------------------------------------------------------------
.text:00000000000042BB
.text:00000000000042BB loc_42BB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000042BB                                         ; xnmalloc+17↑j
.text:00000000000042BB                 sub     rsp, 8
.text:00000000000042BF                 call    xalloc_die
.text:00000000000042BF ; } // starts at 42A0
.text:00000000000042BF xnmalloc        endp
.text:00000000000042BF
.text:00000000000042BF ; ---------------------------------------------------------------------------
.text:00000000000042C4                 align 10h
.text:00000000000042D0
.text:00000000000042D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042D0
.text:00000000000042D0
.text:00000000000042D0                 public xcharalloc
.text:00000000000042D0 xcharalloc      proc near
.text:00000000000042D0 ; __unwind {
.text:00000000000042D0                 jmp     short xmalloc
.text:00000000000042D0 ; } // starts at 42D0
.text:00000000000042D0 xcharalloc      endp
.text:00000000000042D0
.text:00000000000042D0 ; ---------------------------------------------------------------------------
.text:00000000000042D2                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0 ; Attributes: info_from_lumina
.text:00000000000042E0
.text:00000000000042E0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000042E0                 public xrealloc
.text:00000000000042E0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000042E0                                         ; quotearg_n_options+182↑p ...
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 test    rsi, rsi
.text:00000000000042E3                 push    rbx
.text:00000000000042E4                 mov     rbx, rsi
.text:00000000000042E7                 jnz     short loc_42EE
.text:00000000000042E9                 test    rdi, rdi
.text:00000000000042EC                 jnz     short loc_4308
.text:00000000000042EE
.text:00000000000042EE loc_42EE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000042EE                 mov     rsi, rbx        ; size
.text:00000000000042F1                 call    _realloc
.text:00000000000042F6                 test    rax, rax
.text:00000000000042F9                 jnz     short loc_4300
.text:00000000000042FB                 test    rbx, rbx
.text:00000000000042FE                 jnz     short loc_4311
.text:0000000000004300
.text:0000000000004300 loc_4300:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004300                 pop     rbx
.text:0000000000004301                 retn
.text:0000000000004301 ; ---------------------------------------------------------------------------
.text:0000000000004302                 align 8
.text:0000000000004308
.text:0000000000004308 loc_4308:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004308                 call    _free
.text:000000000000430D                 xor     eax, eax
.text:000000000000430F                 pop     rbx
.text:0000000000004310                 retn
.text:0000000000004311 ; ---------------------------------------------------------------------------
.text:0000000000004311
.text:0000000000004311 loc_4311:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004311                 call    xalloc_die
.text:0000000000004311 ; } // starts at 42E0
.text:0000000000004311 xrealloc        endp
.text:0000000000004311
.text:0000000000004311 ; ---------------------------------------------------------------------------
.text:0000000000004316                 align 20h
.text:0000000000004320
.text:0000000000004320 ; =============== S U B R O U T I N E =======================================
.text:0000000000004320
.text:0000000000004320 ; Attributes: info_from_lumina
.text:0000000000004320
.text:0000000000004320 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004320                 public xnrealloc
.text:0000000000004320 xnrealloc       proc near
.text:0000000000004320 ; __unwind {
.text:0000000000004320                 mov     rax, rsi
.text:0000000000004323                 mul     rdx
.text:0000000000004326                 mov     rsi, rax
.text:0000000000004329                 seto    al
.text:000000000000432C                 test    rsi, rsi
.text:000000000000432F                 js      short loc_433B
.text:0000000000004331                 movzx   eax, al
.text:0000000000004334                 test    rax, rax
.text:0000000000004337                 jnz     short loc_433B
.text:0000000000004339                 jmp     short xrealloc
.text:000000000000433B ; ---------------------------------------------------------------------------
.text:000000000000433B
.text:000000000000433B loc_433B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000433B                                         ; xnrealloc+17↑j
.text:000000000000433B                 sub     rsp, 8
.text:000000000000433F                 call    xalloc_die
.text:000000000000433F ; } // starts at 4320
.text:000000000000433F xnrealloc       endp
.text:000000000000433F
.text:000000000000433F ; ---------------------------------------------------------------------------
.text:0000000000004344                 align 10h
.text:0000000000004350
.text:0000000000004350 ; =============== S U B R O U T I N E =======================================
.text:0000000000004350
.text:0000000000004350 ; Attributes: info_from_lumina
.text:0000000000004350
.text:0000000000004350 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004350                 public x2nrealloc
.text:0000000000004350 x2nrealloc      proc near
.text:0000000000004350 ; __unwind {
.text:0000000000004350                 test    rdi, rdi
.text:0000000000004353                 mov     r9, rdx
.text:0000000000004356                 mov     rcx, [rsi]
.text:0000000000004359                 jz      short loc_4390
.text:000000000000435B                 xor     edx, edx
.text:000000000000435D                 mov     rax, 5555555555555554h
.text:0000000000004367                 div     r9
.text:000000000000436A                 cmp     rax, rcx
.text:000000000000436D                 jbe     short loc_43AB
.text:000000000000436F                 mov     rax, rcx
.text:0000000000004372                 shr     rax, 1
.text:0000000000004375                 lea     rcx, [rax+rcx+1]
.text:000000000000437A
.text:000000000000437A loc_437A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000437A                 mov     [rsi], rcx
.text:000000000000437D                 imul    rcx, r9
.text:0000000000004381                 mov     rsi, rcx
.text:0000000000004384                 jmp     xrealloc
.text:0000000000004384 ; ---------------------------------------------------------------------------
.text:0000000000004389                 align 10h
.text:0000000000004390
.text:0000000000004390 loc_4390:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004390                 test    rcx, rcx
.text:0000000000004393                 jz      short loc_43B8
.text:0000000000004395
.text:0000000000004395 loc_4395:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004395                 mov     rax, rcx
.text:0000000000004398                 mul     r9
.text:000000000000439B                 seto    dl
.text:000000000000439E                 test    rax, rax
.text:00000000000043A1                 movzx   edx, dl
.text:00000000000043A4                 js      short loc_43AB
.text:00000000000043A6                 test    rdx, rdx
.text:00000000000043A9                 jz      short loc_437A
.text:00000000000043AB
.text:00000000000043AB loc_43AB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000043AB                                         ; x2nrealloc+54↑j
.text:00000000000043AB                 sub     rsp, 8
.text:00000000000043AF                 call    xalloc_die
.text:00000000000043AF ; ---------------------------------------------------------------------------
.text:00000000000043B4                 align 8
.text:00000000000043B8
.text:00000000000043B8 loc_43B8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000043B8                 xor     edx, edx
.text:00000000000043BA                 mov     eax, 80h
.text:00000000000043BF                 xor     r8d, r8d
.text:00000000000043C2                 div     r9
.text:00000000000043C5                 test    rax, rax
.text:00000000000043C8                 setz    r8b
.text:00000000000043CC                 lea     rcx, [r8+rax]
.text:00000000000043D0                 jmp     short loc_4395
.text:00000000000043D0 ; } // starts at 4350
.text:00000000000043D0 x2nrealloc      endp
.text:00000000000043D0
.text:00000000000043D0 ; ---------------------------------------------------------------------------
.text:00000000000043D2                 align 20h
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0 ; Attributes: info_from_lumina
.text:00000000000043E0
.text:00000000000043E0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000043E0                 public x2realloc
.text:00000000000043E0 x2realloc       proc near
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 test    rdi, rdi
.text:00000000000043E3                 mov     rax, [rsi]
.text:00000000000043E6                 jz      short loc_4410
.text:00000000000043E8                 mov     rdx, 5555555555555553h
.text:00000000000043F2                 cmp     rax, rdx
.text:00000000000043F5                 ja      short loc_4421
.text:00000000000043F7                 mov     rdx, rax
.text:00000000000043FA                 shr     rdx, 1
.text:00000000000043FD                 lea     rax, [rdx+rax+1]
.text:0000000000004402
.text:0000000000004402 loc_4402:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004402                 mov     [rsi], rax
.text:0000000000004405                 mov     rsi, rax
.text:0000000000004408                 jmp     xrealloc
.text:0000000000004408 ; ---------------------------------------------------------------------------
.text:000000000000440D                 align 10h
.text:0000000000004410
.text:0000000000004410 loc_4410:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004410                 test    rax, rax
.text:0000000000004413                 mov     edx, 80h
.text:0000000000004418                 cmovz   rax, rdx
.text:000000000000441C                 test    rax, rax
.text:000000000000441F                 jns     short loc_4402
.text:0000000000004421
.text:0000000000004421 loc_4421:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004421                 sub     rsp, 8
.text:0000000000004425                 call    xalloc_die
.text:0000000000004425 ; } // starts at 43E0
.text:0000000000004425 x2realloc       endp
.text:0000000000004425
.text:0000000000004425 ; ---------------------------------------------------------------------------
.text:000000000000442A                 align 10h
.text:0000000000004430
.text:0000000000004430 ; =============== S U B R O U T I N E =======================================
.text:0000000000004430
.text:0000000000004430
.text:0000000000004430 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004430                 public xzalloc
.text:0000000000004430 xzalloc         proc near
.text:0000000000004430 ; __unwind {
.text:0000000000004430                 push    rbx
.text:0000000000004431                 mov     rbx, rdi
.text:0000000000004434                 call    xmalloc
.text:0000000000004439                 mov     rdx, rbx        ; n
.text:000000000000443C                 xor     esi, esi        ; c
.text:000000000000443E                 mov     rdi, rax        ; s
.text:0000000000004441                 pop     rbx
.text:0000000000004442                 jmp     _memset
.text:0000000000004442 ; } // starts at 4430
.text:0000000000004442 xzalloc         endp
.text:0000000000004442
.text:0000000000004442 ; ---------------------------------------------------------------------------
.text:0000000000004447                 align 10h
.text:0000000000004450
.text:0000000000004450 ; =============== S U B R O U T I N E =======================================
.text:0000000000004450
.text:0000000000004450 ; Attributes: info_from_lumina
.text:0000000000004450
.text:0000000000004450 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004450                 public xcalloc
.text:0000000000004450 xcalloc         proc near
.text:0000000000004450 ; __unwind {
.text:0000000000004450                 mov     rax, rdi
.text:0000000000004453                 sub     rsp, 8
.text:0000000000004457                 mul     rsi
.text:000000000000445A                 seto    dl
.text:000000000000445D                 test    rax, rax
.text:0000000000004460                 js      short loc_4479
.text:0000000000004462                 movzx   edx, dl
.text:0000000000004465                 test    rdx, rdx
.text:0000000000004468                 jnz     short loc_4479
.text:000000000000446A                 call    _calloc
.text:000000000000446F                 test    rax, rax
.text:0000000000004472                 jz      short loc_4479
.text:0000000000004474                 add     rsp, 8
.text:0000000000004478                 retn
.text:0000000000004479 ; ---------------------------------------------------------------------------
.text:0000000000004479
.text:0000000000004479 loc_4479:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004479                                         ; xcalloc+18↑j ...
.text:0000000000004479                 call    xalloc_die
.text:0000000000004479 ; } // starts at 4450
.text:0000000000004479 xcalloc         endp
.text:0000000000004479
.text:0000000000004479 ; ---------------------------------------------------------------------------
.text:000000000000447E                 align 20h
.text:0000000000004480
.text:0000000000004480 ; =============== S U B R O U T I N E =======================================
.text:0000000000004480
.text:0000000000004480 ; Attributes: info_from_lumina
.text:0000000000004480
.text:0000000000004480 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004480                 public xmemdup
.text:0000000000004480 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004480                                         ; xstrdup+11↓j
.text:0000000000004480 ; __unwind {
.text:0000000000004480                 push    rbp
.text:0000000000004481                 push    rbx
.text:0000000000004482                 mov     rbp, rdi
.text:0000000000004485                 mov     rdi, rsi
.text:0000000000004488                 mov     rbx, rsi
.text:000000000000448B                 sub     rsp, 8
.text:000000000000448F                 call    xmalloc
.text:0000000000004494                 add     rsp, 8
.text:0000000000004498                 mov     rdx, rbx        ; n
.text:000000000000449B                 mov     rsi, rbp        ; src
.text:000000000000449E                 pop     rbx
.text:000000000000449F                 pop     rbp
.text:00000000000044A0                 mov     rdi, rax        ; dest
.text:00000000000044A3                 jmp     _memcpy
.text:00000000000044A3 ; } // starts at 4480
.text:00000000000044A3 xmemdup         endp
.text:00000000000044A3
.text:00000000000044A3 ; ---------------------------------------------------------------------------
.text:00000000000044A8                 align 10h
.text:00000000000044B0
.text:00000000000044B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044B0
.text:00000000000044B0
.text:00000000000044B0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000044B0                 public xstrdup
.text:00000000000044B0 xstrdup         proc near
.text:00000000000044B0 ; __unwind {
.text:00000000000044B0                 push    rbx
.text:00000000000044B1                 mov     rbx, rdi
.text:00000000000044B4                 call    _strlen
.text:00000000000044B9                 mov     rdi, rbx        ; src
.text:00000000000044BC                 lea     rsi, [rax+1]    ; n
.text:00000000000044C0                 pop     rbx
.text:00000000000044C1                 jmp     short xmemdup
.text:00000000000044C1 ; } // starts at 44B0
.text:00000000000044C1 xstrdup         endp
.text:00000000000044C1
.text:00000000000044C1 ; ---------------------------------------------------------------------------
.text:00000000000044C3                 align 10h
.text:00000000000044D0
.text:00000000000044D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044D0
.text:00000000000044D0 ; Attributes: noreturn info_from_lumina
.text:00000000000044D0
.text:00000000000044D0 ; void __cdecl xalloc_die()
.text:00000000000044D0                 public xalloc_die
.text:00000000000044D0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_34A6↑p
.text:00000000000044D0                                         ; xmalloc:loc_4295↑p ...
.text:00000000000044D0 ; __unwind {
.text:00000000000044D0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000044D7                 sub     rsp, 8
.text:00000000000044DB                 mov     edx, 5          ; category
.text:00000000000044E0                 xor     edi, edi        ; domainname
.text:00000000000044E2                 call    _dcgettext
.text:00000000000044E7                 mov     edi, cs:exit_failure ; status
.text:00000000000044ED                 lea     rdx, format+4   ; format
.text:00000000000044F4                 mov     rcx, rax
.text:00000000000044F7                 xor     esi, esi        ; errnum
.text:00000000000044F9                 xor     eax, eax
.text:00000000000044FB                 call    _error
.text:0000000000004500                 call    _abort
.text:0000000000004500 ; } // starts at 44D0
.text:0000000000004500 xalloc_die      endp
.text:0000000000004500
.text:0000000000004500 ; ---------------------------------------------------------------------------
.text:0000000000004505                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510
.text:0000000000004510 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000004510                 public rpl_fcntl
.text:0000000000004510 rpl_fcntl       proc near               ; CODE XREF: main+14C↑p
.text:0000000000004510                                         ; main+169↑p
.text:0000000000004510
.text:0000000000004510 var_68          = dword ptr -68h
.text:0000000000004510 var_60          = qword ptr -60h
.text:0000000000004510 var_58          = qword ptr -58h
.text:0000000000004510 var_50          = qword ptr -50h
.text:0000000000004510 var_48          = byte ptr -48h
.text:0000000000004510 var_38          = qword ptr -38h
.text:0000000000004510 var_30          = qword ptr -30h
.text:0000000000004510 var_28          = qword ptr -28h
.text:0000000000004510 var_20          = qword ptr -20h
.text:0000000000004510 arg_0           = byte ptr  8
.text:0000000000004510
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 push    r12
.text:0000000000004512                 push    rbp
.text:0000000000004513                 mov     ebp, edi
.text:0000000000004515                 push    rbx
.text:0000000000004516                 sub     rsp, 50h
.text:000000000000451A                 mov     rax, fs:28h
.text:0000000000004523                 mov     [rsp+68h+var_50], rax
.text:0000000000004528                 xor     eax, eax
.text:000000000000452A                 lea     rax, [rsp+68h+arg_0]
.text:000000000000452F                 test    esi, esi
.text:0000000000004531                 mov     [rsp+68h+var_38], rdx
.text:0000000000004536                 mov     [rsp+68h+var_30], rcx
.text:000000000000453B                 mov     [rsp+68h+var_28], r8
.text:0000000000004540                 mov     [rsp+68h+var_60], rax
.text:0000000000004545                 lea     rax, [rsp+68h+var_48]
.text:000000000000454A                 mov     [rsp+68h+var_20], r9
.text:000000000000454F                 mov     [rsp+68h+var_68], 10h
.text:0000000000004556                 mov     [rsp+68h+var_58], rax
.text:000000000000455B                 jz      loc_4762
.text:0000000000004561                 cmp     esi, 406h
.text:0000000000004567                 jnz     short loc_45B0
.text:0000000000004569                 mov     rax, [rsp+68h+var_58]
.text:000000000000456E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000004575                 mov     [rsp+68h+var_68], 18h
.text:000000000000457C                 mov     r12d, [rax+10h]
.text:0000000000004580                 mov     edx, r12d
.text:0000000000004583                 js      loc_46B3
.text:0000000000004589                 xor     eax, eax
.text:000000000000458B                 mov     esi, 406h       ; cmd
.text:0000000000004590                 call    _fcntl
.text:0000000000004595                 test    eax, eax
.text:0000000000004597                 mov     ebx, eax
.text:0000000000004599                 js      loc_4728
.text:000000000000459F
.text:000000000000459F loc_459F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000459F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:00000000000045A9                 jmp     short loc_45F0
.text:00000000000045A9 ; ---------------------------------------------------------------------------
.text:00000000000045AB                 align 10h
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: rpl_fcntl+57↑j
.text:00000000000045B0                 cmp     esi, 0Bh
.text:00000000000045B3                 jz      short loc_45E0
.text:00000000000045B5                 jg      short loc_4610
.text:00000000000045B7                 cmp     esi, 4
.text:00000000000045BA                 jz      loc_4690
.text:00000000000045C0                 jg      loc_4680
.text:00000000000045C6                 cmp     esi, 2
.text:00000000000045C9                 jz      loc_4690
.text:00000000000045CF                 jg      short loc_45E0
.text:00000000000045D1                 cmp     esi, 1
.text:00000000000045D4                 jnz     short loc_4638
.text:00000000000045D6                 db      2Eh
.text:00000000000045D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000045E0
.text:00000000000045E0 loc_45E0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:00000000000045E0                                         ; rpl_fcntl+BF↑j ...
.text:00000000000045E0                 mov     edi, ebp        ; fd
.text:00000000000045E2                 xor     eax, eax
.text:00000000000045E4                 call    _fcntl
.text:00000000000045E9                 mov     ebx, eax
.text:00000000000045EB                 nop     dword ptr [rax+rax+00h]
.text:00000000000045F0
.text:00000000000045F0 loc_45F0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:00000000000045F0                                         ; rpl_fcntl+147↓j ...
.text:00000000000045F0                 mov     rcx, [rsp+68h+var_50]
.text:00000000000045F5                 xor     rcx, fs:28h
.text:00000000000045FE                 mov     eax, ebx
.text:0000000000004600                 jnz     loc_475D
.text:0000000000004606                 add     rsp, 50h
.text:000000000000460A                 pop     rbx
.text:000000000000460B                 pop     rbp
.text:000000000000460C                 pop     r12
.text:000000000000460E                 retn
.text:000000000000460E ; ---------------------------------------------------------------------------
.text:000000000000460F                 align 10h
.text:0000000000004610
.text:0000000000004610 loc_4610:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000004610                 cmp     esi, 407h
.text:0000000000004616                 jg      short loc_4660
.text:0000000000004618                 cmp     esi, 406h
.text:000000000000461E                 jge     short loc_4690
.text:0000000000004620                 cmp     esi, 401h
.text:0000000000004626                 jz      short loc_45E0
.text:0000000000004628                 cmp     esi, 402h
.text:000000000000462E                 jz      short loc_4690
.text:0000000000004630                 cmp     esi, 400h
.text:0000000000004636                 jz      short loc_4690
.text:0000000000004638
.text:0000000000004638 loc_4638:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000004638                                         ; rpl_fcntl+164↓j ...
.text:0000000000004638                 mov     eax, [rsp+68h+var_68]
.text:000000000000463B                 cmp     eax, 2Fh ; '/'
.text:000000000000463E                 ja      loc_477A
.text:0000000000004644                 add     rax, [rsp+68h+var_58]
.text:0000000000004649
.text:0000000000004649 loc_4649:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000004649                 mov     rdx, [rax]
.text:000000000000464C                 mov     edi, ebp        ; fd
.text:000000000000464E                 xor     eax, eax
.text:0000000000004650                 call    _fcntl
.text:0000000000004655                 mov     ebx, eax
.text:0000000000004657                 jmp     short loc_45F0
.text:0000000000004657 ; ---------------------------------------------------------------------------
.text:0000000000004659                 align 20h
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000004660                 cmp     esi, 409h
.text:0000000000004666                 jz      short loc_4690
.text:0000000000004668                 jl      loc_45E0
.text:000000000000466E                 cmp     esi, 40Ah
.text:0000000000004674                 jnz     short loc_4638
.text:0000000000004676                 jmp     loc_45E0
.text:0000000000004676 ; ---------------------------------------------------------------------------
.text:000000000000467B                 align 20h
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000004680                 cmp     esi, 9
.text:0000000000004683                 jz      loc_45E0
.text:0000000000004689                 jg      short loc_4690
.text:000000000000468B                 cmp     esi, 8
.text:000000000000468E                 jnz     short loc_4638
.text:0000000000004690
.text:0000000000004690 loc_4690:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000004690                                         ; rpl_fcntl+B9↑j ...
.text:0000000000004690                 mov     eax, [rsp+68h+var_68]
.text:0000000000004693                 cmp     eax, 2Fh ; '/'
.text:0000000000004696                 ja      loc_4784
.text:000000000000469C                 add     rax, [rsp+68h+var_58]
.text:00000000000046A1
.text:00000000000046A1 loc_46A1:                               ; CODE XREF: rpl_fcntl+279↓j
.text:00000000000046A1                 mov     edx, [rax]
.text:00000000000046A3                 mov     edi, ebp        ; fd
.text:00000000000046A5                 xor     eax, eax
.text:00000000000046A7                 call    _fcntl
.text:00000000000046AC                 mov     ebx, eax
.text:00000000000046AE                 jmp     loc_45F0
.text:00000000000046B3 ; ---------------------------------------------------------------------------
.text:00000000000046B3
.text:00000000000046B3 loc_46B3:                               ; CODE XREF: rpl_fcntl+73↑j
.text:00000000000046B3                 xor     esi, esi        ; cmd
.text:00000000000046B5                 xor     eax, eax
.text:00000000000046B7                 call    _fcntl
.text:00000000000046BC                 test    eax, eax
.text:00000000000046BE                 mov     ebx, eax
.text:00000000000046C0                 js      loc_45F0
.text:00000000000046C6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:00000000000046CD                 jnz     loc_45F0
.text:00000000000046D3
.text:00000000000046D3 loc_46D3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:00000000000046D3                 xor     eax, eax
.text:00000000000046D5                 mov     esi, 1          ; cmd
.text:00000000000046DA                 mov     edi, ebx        ; fd
.text:00000000000046DC                 call    _fcntl
.text:00000000000046E1                 test    eax, eax
.text:00000000000046E3                 js      short loc_4701
.text:00000000000046E5                 or      eax, 1
.text:00000000000046E8                 mov     esi, 2          ; cmd
.text:00000000000046ED                 mov     edi, ebx        ; fd
.text:00000000000046EF                 mov     edx, eax
.text:00000000000046F1                 xor     eax, eax
.text:00000000000046F3                 call    _fcntl
.text:00000000000046F8                 cmp     eax, 0FFFFFFFFh
.text:00000000000046FB                 jnz     loc_45F0
.text:0000000000004701
.text:0000000000004701 loc_4701:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000004701                 call    ___errno_location
.text:0000000000004706                 mov     r12d, [rax]
.text:0000000000004709                 mov     rbp, rax
.text:000000000000470C                 mov     edi, ebx        ; fd
.text:000000000000470E                 call    _close
.text:0000000000004713                 mov     ebx, 0FFFFFFFFh
.text:0000000000004718                 mov     [rbp+0], r12d
.text:000000000000471C                 jmp     loc_45F0
.text:000000000000471C ; ---------------------------------------------------------------------------
.text:0000000000004721                 align 8
.text:0000000000004728
.text:0000000000004728 loc_4728:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000004728                 call    ___errno_location
.text:000000000000472D                 cmp     dword ptr [rax], 16h
.text:0000000000004730                 jnz     loc_459F
.text:0000000000004736                 xor     esi, esi        ; cmd
.text:0000000000004738                 xor     eax, eax
.text:000000000000473A                 mov     edx, r12d
.text:000000000000473D                 mov     edi, ebp        ; fd
.text:000000000000473F                 call    _fcntl
.text:0000000000004744                 test    eax, eax
.text:0000000000004746                 mov     ebx, eax
.text:0000000000004748                 js      loc_45F0
.text:000000000000474E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000004758                 jmp     loc_46D3
.text:000000000000475D ; ---------------------------------------------------------------------------
.text:000000000000475D
.text:000000000000475D loc_475D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000475D                 call    ___stack_chk_fail
.text:0000000000004762 ; ---------------------------------------------------------------------------
.text:0000000000004762
.text:0000000000004762 loc_4762:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000004762                 mov     rax, [rsp+68h+var_58]
.text:0000000000004767                 xor     esi, esi        ; cmd
.text:0000000000004769                 mov     edx, [rax+10h]
.text:000000000000476C                 xor     eax, eax
.text:000000000000476E                 call    _fcntl
.text:0000000000004773                 mov     ebx, eax
.text:0000000000004775                 jmp     loc_45F0
.text:000000000000477A ; ---------------------------------------------------------------------------
.text:000000000000477A
.text:000000000000477A loc_477A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000477A                 mov     rax, [rsp+68h+var_60]
.text:000000000000477F                 jmp     loc_4649
.text:0000000000004784 ; ---------------------------------------------------------------------------
.text:0000000000004784
.text:0000000000004784 loc_4784:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000004784                 mov     rax, [rsp+68h+var_60]
.text:0000000000004789                 jmp     loc_46A1
.text:0000000000004789 ; } // starts at 4510
.text:0000000000004789 rpl_fcntl       endp
.text:0000000000004789
.text:0000000000004789 ; ---------------------------------------------------------------------------
.text:000000000000478E                 align 10h
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790 ; Attributes: info_from_lumina
.text:0000000000004790
.text:0000000000004790 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004790                 public rpl_mbrtowc
.text:0000000000004790 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004790
.text:0000000000004790 pwc             = dword ptr -34h
.text:0000000000004790 var_30          = qword ptr -30h
.text:0000000000004790
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 push    r13
.text:0000000000004792                 push    r12
.text:0000000000004794                 mov     r13, rsi
.text:0000000000004797                 push    rbp
.text:0000000000004798                 push    rbx
.text:0000000000004799                 mov     rbx, rdi
.text:000000000000479C                 mov     r12, rdx
.text:000000000000479F                 sub     rsp, 18h
.text:00000000000047A3                 mov     rax, fs:28h
.text:00000000000047AC                 mov     [rsp+38h+var_30], rax
.text:00000000000047B1                 xor     eax, eax
.text:00000000000047B3                 lea     rax, [rsp+38h+pwc]
.text:00000000000047B8                 test    rdi, rdi
.text:00000000000047BB                 cmovz   rbx, rax
.text:00000000000047BF                 mov     rdi, rbx        ; pwc
.text:00000000000047C2                 call    _mbrtowc
.text:00000000000047C7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000047CB                 mov     rbp, rax
.text:00000000000047CE                 jbe     short loc_47F0
.text:00000000000047D0                 test    r12, r12
.text:00000000000047D3                 jz      short loc_47F0
.text:00000000000047D5                 xor     edi, edi
.text:00000000000047D7                 call    hard_locale
.text:00000000000047DC                 test    al, al
.text:00000000000047DE                 jnz     short loc_47F0
.text:00000000000047E0                 movzx   eax, byte ptr [r13+0]
.text:00000000000047E5                 mov     ebp, 1
.text:00000000000047EA                 mov     [rbx], eax
.text:00000000000047EC                 nop     dword ptr [rax+00h]
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000047F0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000047F0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000047F5                 xor     rdx, fs:28h
.text:00000000000047FE                 mov     rax, rbp
.text:0000000000004801                 jnz     short loc_480E
.text:0000000000004803                 add     rsp, 18h
.text:0000000000004807                 pop     rbx
.text:0000000000004808                 pop     rbp
.text:0000000000004809                 pop     r12
.text:000000000000480B                 pop     r13
.text:000000000000480D                 retn
.text:000000000000480E ; ---------------------------------------------------------------------------
.text:000000000000480E
.text:000000000000480E loc_480E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000480E                 call    ___stack_chk_fail
.text:000000000000480E ; } // starts at 4790
.text:000000000000480E rpl_mbrtowc     endp
.text:000000000000480E
.text:000000000000480E ; ---------------------------------------------------------------------------
.text:0000000000004813                 align 20h
.text:0000000000004820
.text:0000000000004820 ; =============== S U B R O U T I N E =======================================
.text:0000000000004820
.text:0000000000004820 ; Attributes: info_from_lumina
.text:0000000000004820
.text:0000000000004820 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004820                 public close_stream
.text:0000000000004820 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004820                                         ; close_stdout+33↑p
.text:0000000000004820 ; __unwind {
.text:0000000000004820                 push    r12
.text:0000000000004822                 push    rbp
.text:0000000000004823                 mov     rbp, rdi
.text:0000000000004826                 push    rbx
.text:0000000000004827                 call    ___fpending
.text:000000000000482C                 mov     ebx, [rbp+0]
.text:000000000000482F                 mov     rdi, rbp        ; stream
.text:0000000000004832                 mov     r12, rax
.text:0000000000004835                 call    rpl_fclose
.text:000000000000483A                 and     ebx, 20h
.text:000000000000483D                 test    ebx, ebx
.text:000000000000483F                 jnz     short loc_4858
.text:0000000000004841                 test    eax, eax
.text:0000000000004843                 jz      short loc_484F
.text:0000000000004845                 test    r12, r12
.text:0000000000004848                 mov     eax, 0FFFFFFFFh
.text:000000000000484D                 jz      short loc_4888
.text:000000000000484F
.text:000000000000484F loc_484F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000484F                 pop     rbx
.text:0000000000004850                 pop     rbp
.text:0000000000004851                 pop     r12
.text:0000000000004853                 retn
.text:0000000000004853 ; ---------------------------------------------------------------------------
.text:0000000000004854                 align 8
.text:0000000000004858
.text:0000000000004858 loc_4858:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004858                 test    eax, eax
.text:000000000000485A                 jnz     short loc_4878
.text:000000000000485C                 call    ___errno_location
.text:0000000000004861                 mov     dword ptr [rax], 0
.text:0000000000004867                 mov     eax, 0FFFFFFFFh
.text:000000000000486C                 pop     rbx
.text:000000000000486D                 pop     rbp
.text:000000000000486E                 pop     r12
.text:0000000000004870                 retn
.text:0000000000004870 ; ---------------------------------------------------------------------------
.text:0000000000004871                 align 8
.text:0000000000004878
.text:0000000000004878 loc_4878:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004878                 pop     rbx
.text:0000000000004879                 mov     eax, 0FFFFFFFFh
.text:000000000000487E                 pop     rbp
.text:000000000000487F                 pop     r12
.text:0000000000004881                 retn
.text:0000000000004881 ; ---------------------------------------------------------------------------
.text:0000000000004882                 align 8
.text:0000000000004888
.text:0000000000004888 loc_4888:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004888                 call    ___errno_location
.text:000000000000488D                 cmp     dword ptr [rax], 9
.text:0000000000004890                 pop     rbx
.text:0000000000004891                 pop     rbp
.text:0000000000004892                 pop     r12
.text:0000000000004894                 setnz   al
.text:0000000000004897                 movzx   eax, al
.text:000000000000489A                 neg     eax
.text:000000000000489C                 retn
.text:000000000000489C ; } // starts at 4820
.text:000000000000489C close_stream    endp
.text:000000000000489C
.text:000000000000489C ; ---------------------------------------------------------------------------
.text:000000000000489D                 align 20h
.text:00000000000048A0
.text:00000000000048A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048A0
.text:00000000000048A0
.text:00000000000048A0                 public hard_locale
.text:00000000000048A0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000048A0 ; __unwind {
.text:00000000000048A0                 sub     rsp, 8
.text:00000000000048A4                 xor     esi, esi        ; locale
.text:00000000000048A6                 call    _setlocale
.text:00000000000048AB                 mov     rdx, rax
.text:00000000000048AE                 mov     eax, 1
.text:00000000000048B3                 test    rdx, rdx
.text:00000000000048B6                 jz      short loc_48D5
.text:00000000000048B8                 lea     rdi, aC         ; "C"
.text:00000000000048BF                 mov     ecx, 2
.text:00000000000048C4                 mov     rsi, rdx
.text:00000000000048C7                 repe cmpsb
.text:00000000000048C9                 setnbe  cl
.text:00000000000048CC                 sbb     cl, 0
.text:00000000000048CF                 xor     eax, eax
.text:00000000000048D1                 test    cl, cl
.text:00000000000048D3                 jnz     short loc_48E0
.text:00000000000048D5
.text:00000000000048D5 loc_48D5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000048D5                 add     rsp, 8
.text:00000000000048D9                 retn
.text:00000000000048D9 ; ---------------------------------------------------------------------------
.text:00000000000048DA                 align 20h
.text:00000000000048E0
.text:00000000000048E0 loc_48E0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000048E0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000048E7                 mov     ecx, 6
.text:00000000000048EC                 mov     rsi, rdx
.text:00000000000048EF                 repe cmpsb
.text:00000000000048F1                 setnbe  al
.text:00000000000048F4                 sbb     al, 0
.text:00000000000048F6                 test    al, al
.text:00000000000048F8                 setnz   al
.text:00000000000048FB                 add     rsp, 8
.text:00000000000048FF                 retn
.text:00000000000048FF ; } // starts at 48A0
.text:00000000000048FF hard_locale     endp
.text:00000000000048FF
.text:0000000000004900
.text:0000000000004900 ; =============== S U B R O U T I N E =======================================
.text:0000000000004900
.text:0000000000004900
.text:0000000000004900                 public locale_charset
.text:0000000000004900 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004900 ; __unwind {
.text:0000000000004900                 sub     rsp, 8
.text:0000000000004904                 mov     edi, 0Eh        ; item
.text:0000000000004909                 call    _nl_langinfo
.text:000000000000490E                 test    rax, rax
.text:0000000000004911                 jz      short loc_4930
.text:0000000000004913                 cmp     byte ptr [rax], 0
.text:0000000000004916                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000491D                 cmovz   rax, rdx
.text:0000000000004921                 add     rsp, 8
.text:0000000000004925                 retn
.text:0000000000004925 ; ---------------------------------------------------------------------------
.text:0000000000004926                 align 10h
.text:0000000000004930
.text:0000000000004930 loc_4930:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004930                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004937                 add     rsp, 8
.text:000000000000493B                 retn
.text:000000000000493B ; } // starts at 4900
.text:000000000000493B locale_charset  endp
.text:000000000000493B
.text:000000000000493B ; ---------------------------------------------------------------------------
.text:000000000000493C                 align 20h
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940 ; Attributes: info_from_lumina
.text:0000000000004940
.text:0000000000004940 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004940                 public rpl_fclose
.text:0000000000004940 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004940 ; __unwind {
.text:0000000000004940                 push    r12
.text:0000000000004942                 push    rbp
.text:0000000000004943                 push    rbx
.text:0000000000004944                 mov     rbx, rdi
.text:0000000000004947                 call    _fileno
.text:000000000000494C                 test    eax, eax
.text:000000000000494E                 mov     rdi, rbx        ; fp
.text:0000000000004951                 js      short loc_49A7
.text:0000000000004953                 call    ___freading
.text:0000000000004958                 test    eax, eax
.text:000000000000495A                 jnz     short loc_4988
.text:000000000000495C
.text:000000000000495C loc_495C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000495C                 mov     rdi, rbx        ; stream
.text:000000000000495F                 call    rpl_fflush
.text:0000000000004964                 test    eax, eax
.text:0000000000004966                 jz      short loc_49A4
.text:0000000000004968                 call    ___errno_location
.text:000000000000496D                 mov     r12d, [rax]
.text:0000000000004970                 mov     rdi, rbx        ; stream
.text:0000000000004973                 mov     rbp, rax
.text:0000000000004976                 call    _fclose
.text:000000000000497B                 test    r12d, r12d
.text:000000000000497E                 jnz     short loc_49B0
.text:0000000000004980
.text:0000000000004980 loc_4980:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004980                 pop     rbx
.text:0000000000004981                 pop     rbp
.text:0000000000004982                 pop     r12
.text:0000000000004984                 retn
.text:0000000000004984 ; ---------------------------------------------------------------------------
.text:0000000000004985                 align 8
.text:0000000000004988
.text:0000000000004988 loc_4988:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004988                 mov     rdi, rbx        ; stream
.text:000000000000498B                 call    _fileno
.text:0000000000004990                 xor     esi, esi        ; offset
.text:0000000000004992                 mov     edx, 1          ; whence
.text:0000000000004997                 mov     edi, eax        ; fd
.text:0000000000004999                 call    _lseek
.text:000000000000499E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000049A2                 jnz     short loc_495C
.text:00000000000049A4
.text:00000000000049A4 loc_49A4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000049A4                 mov     rdi, rbx        ; stream
.text:00000000000049A7
.text:00000000000049A7 loc_49A7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000049A7                 pop     rbx
.text:00000000000049A8                 pop     rbp
.text:00000000000049A9                 pop     r12
.text:00000000000049AB                 jmp     _fclose
.text:00000000000049B0 ; ---------------------------------------------------------------------------
.text:00000000000049B0
.text:00000000000049B0 loc_49B0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000049B0                 mov     [rbp+0], r12d
.text:00000000000049B4                 mov     eax, 0FFFFFFFFh
.text:00000000000049B9                 jmp     short loc_4980
.text:00000000000049B9 ; } // starts at 4940
.text:00000000000049B9 rpl_fclose      endp
.text:00000000000049B9
.text:00000000000049B9 ; ---------------------------------------------------------------------------
.text:00000000000049BB                 align 20h
.text:00000000000049C0
.text:00000000000049C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049C0
.text:00000000000049C0 ; Attributes: info_from_lumina
.text:00000000000049C0
.text:00000000000049C0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000049C0                 public rpl_fflush
.text:00000000000049C0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000049C0 ; __unwind {
.text:00000000000049C0                 test    rdi, rdi
.text:00000000000049C3                 push    rbx
.text:00000000000049C4                 mov     rbx, rdi
.text:00000000000049C7                 jz      short loc_49DA
.text:00000000000049C9                 call    ___freading
.text:00000000000049CE                 test    eax, eax
.text:00000000000049D0                 jz      short loc_49DA
.text:00000000000049D2                 test    dword ptr [rbx], 100h
.text:00000000000049D8                 jnz     short loc_49E8
.text:00000000000049DA
.text:00000000000049DA loc_49DA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000049DA                                         ; rpl_fflush+10↑j
.text:00000000000049DA                 mov     rdi, rbx        ; stream
.text:00000000000049DD                 pop     rbx
.text:00000000000049DE                 jmp     _fflush
.text:00000000000049DE ; ---------------------------------------------------------------------------
.text:00000000000049E3                 align 8
.text:00000000000049E8
.text:00000000000049E8 loc_49E8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000049E8                 mov     rdi, rbx
.text:00000000000049EB                 mov     edx, 1
.text:00000000000049F0                 xor     esi, esi
.text:00000000000049F2                 call    rpl_fseeko
.text:00000000000049F7                 mov     rdi, rbx        ; stream
.text:00000000000049FA                 pop     rbx
.text:00000000000049FB                 jmp     _fflush
.text:00000000000049FB ; } // starts at 49C0
.text:00000000000049FB rpl_fflush      endp
.text:00000000000049FB
.text:0000000000004A00
.text:0000000000004A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A00
.text:0000000000004A00 ; Attributes: info_from_lumina
.text:0000000000004A00
.text:0000000000004A00 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004A00                 public rpl_fseeko
.text:0000000000004A00 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004A00 ; __unwind {
.text:0000000000004A00                 mov     rax, [rdi+8]
.text:0000000000004A04                 cmp     [rdi+10h], rax
.text:0000000000004A08                 jz      short loc_4A10
.text:0000000000004A0A
.text:0000000000004A0A loc_4A0A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004A0A                                         ; rpl_fseeko+1F↓j
.text:0000000000004A0A                 jmp     _fseeko
.text:0000000000004A0A ; ---------------------------------------------------------------------------
.text:0000000000004A0F                 align 10h
.text:0000000000004A10
.text:0000000000004A10 loc_4A10:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004A10                 mov     rax, [rdi+20h]
.text:0000000000004A14                 cmp     [rdi+28h], rax
.text:0000000000004A18                 jnz     short loc_4A0A
.text:0000000000004A1A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004A1F                 jnz     short loc_4A0A
.text:0000000000004A21                 push    r12
.text:0000000000004A23                 push    rbp
.text:0000000000004A24                 mov     r12d, edx
.text:0000000000004A27                 push    rbx
.text:0000000000004A28                 mov     rbp, rsi
.text:0000000000004A2B                 mov     rbx, rdi
.text:0000000000004A2E                 call    _fileno
.text:0000000000004A33                 mov     edx, r12d       ; whence
.text:0000000000004A36                 mov     rsi, rbp        ; offset
.text:0000000000004A39                 mov     edi, eax        ; fd
.text:0000000000004A3B                 call    _lseek
.text:0000000000004A40                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A44                 jz      short loc_4A52
.text:0000000000004A46                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004A49                 mov     [rbx+90h], rax
.text:0000000000004A50                 xor     eax, eax
.text:0000000000004A52
.text:0000000000004A52 loc_4A52:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004A52                 pop     rbx
.text:0000000000004A53                 pop     rbp
.text:0000000000004A54                 pop     r12
.text:0000000000004A56                 retn
.text:0000000000004A56 ; } // starts at 4A00
.text:0000000000004A56 rpl_fseeko      endp
.text:0000000000004A56
.text:0000000000004A56 ; ---------------------------------------------------------------------------
.text:0000000000004A57                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60 ; Attributes: info_from_lumina
.text:0000000000004A60
.text:0000000000004A60 ; void _libc_csu_init(void)
.text:0000000000004A60                 public __libc_csu_init
.text:0000000000004A60 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 push    r15
.text:0000000000004A62                 push    r14
.text:0000000000004A64                 mov     r15, rdx
.text:0000000000004A67                 push    r13
.text:0000000000004A69                 push    r12
.text:0000000000004A6B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004A72                 push    rbp
.text:0000000000004A73                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000004A7A                 push    rbx
.text:0000000000004A7B                 mov     r13d, edi
.text:0000000000004A7E                 mov     r14, rsi
.text:0000000000004A81                 sub     rbp, r12
.text:0000000000004A84                 sub     rsp, 8
.text:0000000000004A88                 sar     rbp, 3
.text:0000000000004A8C                 call    _init_proc
.text:0000000000004A91                 test    rbp, rbp
.text:0000000000004A94                 jz      short loc_4AB6
.text:0000000000004A96                 xor     ebx, ebx
.text:0000000000004A98                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004AA0
.text:0000000000004AA0 loc_4AA0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004AA0                 mov     rdx, r15
.text:0000000000004AA3                 mov     rsi, r14
.text:0000000000004AA6                 mov     edi, r13d
.text:0000000000004AA9                 call    ds:(__frame_dummy_init_array_entry - 206B50h)[r12+rbx*8]
.text:0000000000004AAD                 add     rbx, 1
.text:0000000000004AB1                 cmp     rbp, rbx
.text:0000000000004AB4                 jnz     short loc_4AA0
.text:0000000000004AB6
.text:0000000000004AB6 loc_4AB6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004AB6                 add     rsp, 8
.text:0000000000004ABA                 pop     rbx
.text:0000000000004ABB                 pop     rbp
.text:0000000000004ABC                 pop     r12
.text:0000000000004ABE                 pop     r13
.text:0000000000004AC0                 pop     r14
.text:0000000000004AC2                 pop     r15
.text:0000000000004AC4                 retn
.text:0000000000004AC4 ; } // starts at 4A60
.text:0000000000004AC4 __libc_csu_init endp
.text:0000000000004AC4
.text:0000000000004AC4 ; ---------------------------------------------------------------------------
.text:0000000000004AC5                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0 ; void _libc_csu_fini(void)
.text:0000000000004AD0                 public __libc_csu_fini
.text:0000000000004AD0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 rep retn
.text:0000000000004AD0 ; } // starts at 4AD0
.text:0000000000004AD0 __libc_csu_fini endp
.text:0000000000004AD0
.text:0000000000004AD0 ; ---------------------------------------------------------------------------
.text:0000000000004AD2                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AE0
.text:0000000000004AE0
.text:0000000000004AE0 atexit          proc near               ; CODE XREF: main+58↑p
.text:0000000000004AE0 ; __unwind {
.text:0000000000004AE0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004AE7                 xor     esi, esi        ; obj
.text:0000000000004AE9                 jmp     ___cxa_atexit
.text:0000000000004AE9 ; } // starts at 4AE0
.text:0000000000004AE9 atexit          endp
.text:0000000000004AE9
.text:0000000000004AE9 _text           ends
.text:0000000000004AE9
LOAD:0000000000004AEE ; ===========================================================================
LOAD:0000000000004AEE
LOAD:0000000000004AEE ; Segment type: Pure code
LOAD:0000000000004AEE ; Segment permissions: Read/Execute
LOAD:0000000000004AEE LOAD            segment byte public 'CODE' use64
LOAD:0000000000004AEE                 assume cs:LOAD
LOAD:0000000000004AEE                 ;org 4AEEh
LOAD:0000000000004AEE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004AEE                 align 10h
LOAD:0000000000004AEE LOAD            ends
LOAD:0000000000004AEE
.fini:0000000000004AF0 ; ===========================================================================
.fini:0000000000004AF0
.fini:0000000000004AF0 ; Segment type: Pure code
.fini:0000000000004AF0 ; Segment permissions: Read/Execute
.fini:0000000000004AF0 _fini           segment dword public 'CODE' use64
.fini:0000000000004AF0                 assume cs:_fini
.fini:0000000000004AF0                 ;org 4AF0h
.fini:0000000000004AF0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004AF0
.fini:0000000000004AF0 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004AF0
.fini:0000000000004AF0
.fini:0000000000004AF0                 public _term_proc
.fini:0000000000004AF0 _term_proc      proc near
.fini:0000000000004AF0                 sub     rsp, 8          ; _fini
.fini:0000000000004AF4                 add     rsp, 8
.fini:0000000000004AF8                 retn
.fini:0000000000004AF8 _term_proc      endp
.fini:0000000000004AF8
.fini:0000000000004AF8 _fini           ends
.fini:0000000000004AF8
LOAD:0000000000004AF9 ; ===========================================================================
LOAD:0000000000004AF9
LOAD:0000000000004AF9 ; Segment type: Pure code
LOAD:0000000000004AF9 ; Segment permissions: Read/Execute
LOAD:0000000000004AF9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004AF9                 assume cs:LOAD
LOAD:0000000000004AF9                 ;org 4AF9h
LOAD:0000000000004AF9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004AF9                 align 20h
LOAD:0000000000004AF9 LOAD            ends
LOAD:0000000000004AF9
.rodata:0000000000004B00 ; ===========================================================================
.rodata:0000000000004B00
.rodata:0000000000004B00 ; Segment type: Pure data
.rodata:0000000000004B00 ; Segment permissions: Read
.rodata:0000000000004B00 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004B00                 assume cs:_rodata
.rodata:0000000000004B00                 ;org 4B00h
.rodata:0000000000004B00                 public _IO_stdin_used
.rodata:0000000000004B00 _IO_stdin_used  db    1
.rodata:0000000000004B01                 db    0
.rodata:0000000000004B02                 db    2
.rodata:0000000000004B03                 db    0
.rodata:0000000000004B04 aSync           db 'sync',0             ; DATA XREF: main+D4↑o
.rodata:0000000000004B04                                         ; usage+131↑o ...
.rodata:0000000000004B09 ; const char aUsageSOptionFi[]
.rodata:0000000000004B09 aUsageSOptionFi db 'Usage: %s [OPTION] [FILE]...',0Ah,0
.rodata:0000000000004B09                                         ; DATA XREF: usage:loc_1B2D↑o
.rodata:0000000000004B27 asc_4B27        db '[',0                ; DATA XREF: usage+13D↑o
.rodata:0000000000004B29 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+164↑o
.rodata:0000000000004B39 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004B39                                         ; DATA XREF: usage+194↑o
.rodata:0000000000004B39                                         ; usage+28C↑o ...
.rodata:0000000000004B4F aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1A5↑o
.rodata:0000000000004B59 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1B1↑o
.rodata:0000000000004B68 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+144↑o
.rodata:0000000000004B72 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+170↑o
.rodata:0000000000004B7C aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+188↑o
.rodata:0000000000004B86 ; const char aSOnlineHelpS[]
.rodata:0000000000004B86 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1FA↑o
.rodata:0000000000004B86                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004B9D unk_4B9D        db  47h ; G             ; DATA XREF: main+CD↑o
.rodata:0000000000004B9D                                         ; usage+216↑o ...
.rodata:0000000000004B9E                 db  4Eh ; N
.rodata:0000000000004B9F                 db  55h ; U
.rodata:0000000000004BA0                 db  20h
.rodata:0000000000004BA1 ; const char domainname[]
.rodata:0000000000004BA1 domainname      db 'coreutils',0        ; DATA XREF: main+39↑o
.rodata:0000000000004BA1                                         ; main+45↑o ...
.rodata:0000000000004BAB ; const char s2[]
.rodata:0000000000004BAB s2              db 'en_',0              ; DATA XREF: usage+23D↑o
.rodata:0000000000004BAB                                         ; usage+2FE↑o
.rodata:0000000000004BAF ; const char aFullDocumentat[]
.rodata:0000000000004BAF aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004BAF                                         ; DATA XREF: usage:loc_1D29↑o
.rodata:0000000000004BAF                                         ; usage:loc_1DE6↑o
.rodata:0000000000004BCA ; const char dirname[]
.rodata:0000000000004BCA dirname         db '/usr/local/share/locale',0
.rodata:0000000000004BCA                                         ; DATA XREF: main+32↑o
.rodata:0000000000004BE2 aGiuseppeScriva db 'Giuseppe Scrivano',0
.rodata:0000000000004BE2                                         ; DATA XREF: main+BF↑o
.rodata:0000000000004BF4 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+C6↑o
.rodata:0000000000004C01 ; const char shortopts[]
.rodata:0000000000004C01 shortopts       db 'df',0               ; DATA XREF: main+64↑o
.rodata:0000000000004C04 ; const char msgid[]
.rodata:0000000000004C04 msgid           db 'error opening %s',0 ; DATA XREF: main+218↑o
.rodata:0000000000004C15 ; const char aErrorSyncingS[]
.rodata:0000000000004C15 aErrorSyncingS  db 'error syncing %s',0 ; DATA XREF: main+301↑o
.rodata:0000000000004C26 ; const char aFailedToCloseS[]
.rodata:0000000000004C26 aFailedToCloseS db 'failed to close %s',0
.rodata:0000000000004C26                                         ; DATA XREF: main+2C0↑o
.rodata:0000000000004C39 aData           db 'data',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000004C3E aFileSystem     db 'file-system',0      ; DATA XREF: .data.rel.ro:0000000000206B80↓o
.rodata:0000000000004C4A aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000206BA0↓o
.rodata:0000000000004C4F aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BC0↓o
.rodata:0000000000004C57                 align 8
.rodata:0000000000004C58 ; const char aTrySHelpForMor[]
.rodata:0000000000004C58 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004C58                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004C7F                 align 20h
.rodata:0000000000004C80 ; const char aSynchronizeCac[]
.rodata:0000000000004C80 aSynchronizeCac db 'Synchronize cached writes to persistent storage',0Ah
.rodata:0000000000004C80                                         ; DATA XREF: usage+84↑o
.rodata:0000000000004C80                 db 0Ah
.rodata:0000000000004C80                 db 'If one or more files are specified, sync only them,',0Ah
.rodata:0000000000004C80                 db 'or their containing file systems.',0Ah
.rodata:0000000000004C80                 db 0Ah,0
.rodata:0000000000004D09                 align 10h
.rodata:0000000000004D10 ; const char aDDataSyncOnlyF[]
.rodata:0000000000004D10 aDDataSyncOnlyF db '  -d, --data             sync only file data, no unneeded metadat'
.rodata:0000000000004D10                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000004D10                 db 'a',0Ah,0
.rodata:0000000000004D54                 align 8
.rodata:0000000000004D58 ; const char aFFileSystemSyn[]
.rodata:0000000000004D58 aFFileSystemSyn db '  -f, --file-system      sync the file systems that contain the f'
.rodata:0000000000004D58                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000004D58                 db 'iles',0Ah,0
.rodata:0000000000004D9F                 align 20h
.rodata:0000000000004DA0 ; const char aHelpDisplayThi[]
.rodata:0000000000004DA0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004DA0                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000004DCD                 align 10h
.rodata:0000000000004DD0 ; const char aVersionOutputV[]
.rodata:0000000000004DD0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004DD0                                         ; DATA XREF: usage+118↑o
.rodata:0000000000004E06                 align 8
.rodata:0000000000004E08 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004E08                                         ; DATA XREF: usage+20F↑o
.rodata:0000000000004E08                                         ; usage+273↑o ...
.rodata:0000000000004E30 ; const char aReportAnyTrans[]
.rodata:0000000000004E30 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004E30                                         ; DATA XREF: usage+367↑o
.rodata:0000000000004E30                 db 'am/>',0Ah,0
.rodata:0000000000004E77                 align 8
.rodata:0000000000004E78 ; const char aOrAvailableLoc[]
.rodata:0000000000004E78 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000004E78                                         ; DATA XREF: usage:loc_1D6E↑o
.rodata:0000000000004EAB                 align 10h
.rodata:0000000000004EB0 ; const char aCannotSpecifyB[]
.rodata:0000000000004EB0 aCannotSpecifyB db 'cannot specify both --data and --file-system',0
.rodata:0000000000004EB0                                         ; DATA XREF: main:loc_1998↑o
.rodata:0000000000004EDD                 align 20h
.rodata:0000000000004EE0 ; const char aDataNeedsAtLea[]
.rodata:0000000000004EE0 aDataNeedsAtLea db '--data needs at least one argument',0
.rodata:0000000000004EE0                                         ; DATA XREF: main:loc_1974↑o
.rodata:0000000000004F03                 align 8
.rodata:0000000000004F08 ; const char aCouldnTResetNo[]
.rodata:0000000000004F08 aCouldnTResetNo db 'couldn',27h,'t reset non-blocking mode %s',0
.rodata:0000000000004F08                                         ; DATA XREF: main+255↑o
.rodata:0000000000004F2C a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004F31 ; const char aWriteError[]
.rodata:0000000000004F31 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1EC3↑o
.rodata:0000000000004F3D ; const char format[]
.rodata:0000000000004F3D format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004F3D                                         ; close_stdout+8F↑o ...
.rodata:0000000000004F44                 align 8
.rodata:0000000000004F48 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004F48                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004F80 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004F88 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004F8C unk_4F8C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004F8D                 db  80h
.rodata:0000000000004F8E                 db  98h
.rodata:0000000000004F8F                 db    0
.rodata:0000000000004F90 unk_4F90        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004F91                 db  80h
.rodata:0000000000004F92                 db  99h
.rodata:0000000000004F93                 db    0
.rodata:0000000000004F94 unk_4F94        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000004F95                 db    7
.rodata:0000000000004F96                 db  65h ; e
.rodata:0000000000004F97                 db    0
.rodata:0000000000004F98 unk_4F98        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004F99                 db 0AFh
.rodata:0000000000004F9A                 db    0
.rodata:0000000000004F9B unk_4F9B        db  22h ; "             ; DATA XREF: gettext_quote:loc_1FF0↑o
.rodata:0000000000004F9B                                         ; quotearg_buffer_restyled:loc_2DAB↑o ...
.rodata:0000000000004F9C                 db    0
.rodata:0000000000004F9D ; const char asc_4F9D[2]
.rodata:0000000000004F9D asc_4F9D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004F9D                                         ; quotearg_buffer_restyled:loc_2173↑o ...
.rodata:0000000000004F9F ; const char asc_4F9F[2]
.rodata:0000000000004F9F asc_4F9F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004F9F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004FA1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004FA9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C08↓o
.rodata:0000000000004FAF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C10↓o
.rodata:0000000000004FBC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C18↓o
.rodata:0000000000004FBC                                         ; .data.rel.ro:0000000000206C38↓o
.rodata:0000000000004FC9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004FC9                                         ; DATA XREF: .data.rel.ro:0000000000206C20↓o
.rodata:0000000000004FDD aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:0000000000004FE5 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:0000000000004FED                 align 20h
.rodata:0000000000005000 jpt_2151        dd offset loc_2EFA - 5000h
.rodata:0000000000005000                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005000                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005000                 dd offset loc_2153 - 5000h ; jump table for switch statement
.rodata:0000000000005000                 dd offset loc_3128 - 5000h
.rodata:0000000000005000                 dd offset loc_2F34 - 5000h
.rodata:0000000000005000                 dd offset loc_2D24 - 5000h
.rodata:0000000000005000                 dd offset loc_2D80 - 5000h
.rodata:0000000000005000                 dd offset loc_2DD5 - 5000h
.rodata:0000000000005000                 dd offset loc_2E1A - 5000h
.rodata:0000000000005000                 dd offset loc_2E54 - 5000h
.rodata:0000000000005000                 dd offset loc_2E54 - 5000h
.rodata:0000000000005000                 dd offset loc_2E54 - 5000h
.rodata:000000000000502C jpt_22AE        dd offset loc_24D0 - 502Ch, offset def_22AE - 502Ch, offset def_22AE - 502Ch
.rodata:000000000000502C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000502C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000502C                 dd offset def_22AE - 502Ch, offset def_22AE - 502Ch, offset def_22AE - 502Ch ; jump table for switch statement
.rodata:000000000000502C                 dd offset def_22AE - 502Ch, offset loc_2510 - 502Ch, offset loc_2418 - 502Ch
.rodata:000000000000502C                 dd offset loc_23D8 - 502Ch, offset loc_25A0 - 502Ch, offset loc_2590 - 502Ch
.rodata:000000000000502C                 dd offset loc_2580 - 502Ch, offset loc_2570 - 502Ch, offset def_22AE - 502Ch
.rodata:000000000000502C                 dd offset def_22AE - 502Ch, offset def_22AE - 502Ch, offset def_22AE - 502Ch
.rodata:000000000000502C                 dd offset def_22AE - 502Ch, offset def_22AE - 502Ch, offset def_22AE - 502Ch
.rodata:000000000000502C                 dd offset def_22AE - 502Ch, offset def_22AE - 502Ch, offset def_22AE - 502Ch
.rodata:000000000000502C                 dd offset def_22AE - 502Ch, offset def_22AE - 502Ch, offset def_22AE - 502Ch
.rodata:000000000000502C                 dd offset def_22AE - 502Ch, offset def_22AE - 502Ch, offset def_22AE - 502Ch
.rodata:000000000000502C                 dd offset def_22AE - 502Ch, offset def_22AE - 502Ch, offset loc_2560 - 502Ch
.rodata:000000000000502C                 dd offset loc_2550 - 502Ch, offset loc_2550 - 502Ch, offset loc_2520 - 502Ch
.rodata:000000000000502C                 dd offset loc_2550 - 502Ch, offset loc_24F8 - 502Ch, offset loc_2550 - 502Ch
.rodata:000000000000502C                 dd offset loc_23B3 - 502Ch, offset loc_2550 - 502Ch, offset loc_2550 - 502Ch
.rodata:000000000000502C                 dd offset loc_2550 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_2550 - 502Ch
.rodata:000000000000502C                 dd offset loc_2550 - 502Ch, offset loc_2550 - 502Ch, offset loc_2550 - 502Ch
.rodata:000000000000502C                 dd offset loc_2383 - 502Ch, offset def_22AE - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_2550 - 502Ch, offset loc_2428 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_2550 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_2550 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch, offset loc_24F8 - 502Ch
.rodata:000000000000502C                 dd offset loc_22B3 - 502Ch, offset loc_2550 - 502Ch, offset loc_22B3 - 502Ch
.rodata:000000000000502C                 dd offset loc_2520 - 502Ch
.rodata:0000000000005228 jpt_263A        dd offset loc_26A0 - 5228h, offset def_263A - 5228h, offset def_263A - 5228h
.rodata:0000000000005228                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005228                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005228                 dd offset def_263A - 5228h, offset def_263A - 5228h, offset def_263A - 5228h ; jump table for switch statement
.rodata:0000000000005228                 dd offset def_263A - 5228h, offset loc_2690 - 5228h, offset loc_27E0 - 5228h
.rodata:0000000000005228                 dd offset loc_27C8 - 5228h, offset loc_2678 - 5228h, offset loc_27B8 - 5228h
.rodata:0000000000005228                 dd offset loc_2660 - 5228h, offset loc_27A0 - 5228h, offset def_263A - 5228h
.rodata:0000000000005228                 dd offset def_263A - 5228h, offset def_263A - 5228h, offset def_263A - 5228h
.rodata:0000000000005228                 dd offset def_263A - 5228h, offset def_263A - 5228h, offset def_263A - 5228h
.rodata:0000000000005228                 dd offset def_263A - 5228h, offset def_263A - 5228h, offset def_263A - 5228h
.rodata:0000000000005228                 dd offset def_263A - 5228h, offset def_263A - 5228h, offset def_263A - 5228h
.rodata:0000000000005228                 dd offset def_263A - 5228h, offset def_263A - 5228h, offset def_263A - 5228h
.rodata:0000000000005228                 dd offset def_263A - 5228h, offset def_263A - 5228h, offset loc_2788 - 5228h
.rodata:0000000000005228                 dd offset loc_2770 - 5228h, offset loc_2770 - 5228h, offset loc_2758 - 5228h
.rodata:0000000000005228                 dd offset loc_2770 - 5228h, offset loc_2740 - 5228h, offset loc_2770 - 5228h
.rodata:0000000000005228                 dd offset loc_23B0 - 5228h, offset loc_2770 - 5228h, offset loc_2770 - 5228h
.rodata:0000000000005228                 dd offset loc_2770 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2770 - 5228h
.rodata:0000000000005228                 dd offset loc_2770 - 5228h, offset loc_2770 - 5228h, offset loc_2770 - 5228h
.rodata:0000000000005228                 dd offset loc_2380 - 5228h, offset def_263A - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2770 - 5228h, offset loc_2640 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2770 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2770 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_2740 - 5228h, offset loc_2740 - 5228h, offset loc_2740 - 5228h
.rodata:0000000000005228                 dd offset loc_22B0 - 5228h, offset loc_2770 - 5228h, offset loc_22B0 - 5228h
.rodata:0000000000005228                 dd offset loc_2758 - 5228h
.rodata:0000000000005424                 align 20h
.rodata:0000000000005440                 public quoting_style_vals
.rodata:0000000000005440 quoting_style_vals db    0
.rodata:0000000000005441                 db    0
.rodata:0000000000005442                 db    0
.rodata:0000000000005443                 db    0
.rodata:0000000000005444                 db    1
.rodata:0000000000005445                 db    0
.rodata:0000000000005446                 db    0
.rodata:0000000000005447                 db    0
.rodata:0000000000005448                 db    2
.rodata:0000000000005449                 db    0
.rodata:000000000000544A                 db    0
.rodata:000000000000544B                 db    0
.rodata:000000000000544C                 db    3
.rodata:000000000000544D                 db    0
.rodata:000000000000544E                 db    0
.rodata:000000000000544F                 db    0
.rodata:0000000000005450                 db    4
.rodata:0000000000005451                 db    0
.rodata:0000000000005452                 db    0
.rodata:0000000000005453                 db    0
.rodata:0000000000005454                 db    5
.rodata:0000000000005455                 db    0
.rodata:0000000000005456                 db    0
.rodata:0000000000005457                 db    0
.rodata:0000000000005458                 db    6
.rodata:0000000000005459                 db    0
.rodata:000000000000545A                 db    0
.rodata:000000000000545B                 db    0
.rodata:000000000000545C                 db    7
.rodata:000000000000545D                 db    0
.rodata:000000000000545E                 db    0
.rodata:000000000000545F                 db    0
.rodata:0000000000005460                 db    8
.rodata:0000000000005461                 db    0
.rodata:0000000000005462                 db    0
.rodata:0000000000005463                 db    0
.rodata:0000000000005464                 db    9
.rodata:0000000000005465                 db    0
.rodata:0000000000005466                 db    0
.rodata:0000000000005467                 db    0
.rodata:0000000000005468 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005474 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000547B ; const char aC_0[]
.rodata:000000000000547B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3C9C↑o
.rodata:000000000000547F ; const char aWrittenByS[]
.rodata:000000000000547F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000547F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000548F ; const char aWrittenBySAndS[]
.rodata:000000000000548F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000548F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000054A6 ; const char aWrittenBySSAnd[]
.rodata:00000000000054A6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000054A6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000054C2 ; const char aReportBugsToS[]
.rodata:00000000000054C2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000054C2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000054D7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000054D7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000054ED ; const char aSHomePageS[]
.rodata:00000000000054ED aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000054ED                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005501                 align 8
.rodata:0000000000005508 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005508 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005508                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005508                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005508                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005508                 db '.',0Ah
.rodata:0000000000005508                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005508                 db 0Ah,0
.rodata:00000000000055D4                 align 8
.rodata:00000000000055D8 ; const char aWrittenBySSSAn[]
.rodata:00000000000055D8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000055D8                                         ; DATA XREF: version_etc_arn:loc_3EF0↑o
.rodata:00000000000055D8                 db 'and %s.',0Ah,0
.rodata:00000000000055F8 ; const char aWrittenBySSSSA[]
.rodata:00000000000055F8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000055F8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000055F8                 db '%s, and %s.',0Ah,0
.rodata:000000000000561C                 align 20h
.rodata:0000000000005620 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005620 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005620                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005620                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005648 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005648 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005648                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005648                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005674                 align 8
.rodata:0000000000005678 ; const char aWrittenBySSSSS[]
.rodata:0000000000005678 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005678                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005678                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005678                 db 'and %s.',0Ah,0
.rodata:00000000000056A8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000056A8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000056A8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000056A8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000056A8                 db '%s, and %s.',0Ah,0
.rodata:00000000000056DC                 align 20h
.rodata:00000000000056E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000056E0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000056E0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000056E0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000571C                 align 20h
.rodata:0000000000005720 ; const char aGeneralHelpUsi[]
.rodata:0000000000005720 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005720                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005720                 db 0
.rodata:0000000000005761                 align 8
.rodata:0000000000005768 jpt_3D04        dd offset loc_3D86 - 5768h
.rodata:0000000000005768                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005768                                         ; version_etc_arn+9D↑r
.rodata:0000000000005768                 dd offset loc_3E18 - 5768h ; jump table for switch statement
.rodata:0000000000005768                 dd offset loc_3E58 - 5768h
.rodata:0000000000005768                 dd offset loc_3EA0 - 5768h
.rodata:0000000000005768                 dd offset loc_3EF0 - 5768h
.rodata:0000000000005768                 dd offset loc_3F48 - 5768h
.rodata:0000000000005768                 dd offset loc_3F78 - 5768h
.rodata:0000000000005768                 dd offset loc_3FE0 - 5768h
.rodata:0000000000005768                 dd offset loc_3D10 - 5768h
.rodata:0000000000005768                 dd offset loc_3DC0 - 5768h
.rodata:0000000000005790                 align 20h
.rodata:00000000000057A0                 public version_etc_copyright
.rodata:00000000000057A0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000057A0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000057CF ; const char aMemoryExhauste[]
.rodata:00000000000057CF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000057E0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000057E2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_48E0↑o
.rodata:00000000000057E8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000057E8                                         ; locale_charset:loc_4930↑o
.rodata:00000000000057E8 _rodata         ends
.rodata:00000000000057E8
LOAD:00000000000057EE ; ===========================================================================
LOAD:00000000000057EE
LOAD:00000000000057EE ; Segment type: Pure code
LOAD:00000000000057EE ; Segment permissions: Read/Execute
LOAD:00000000000057EE LOAD            segment byte public 'CODE' use64
LOAD:00000000000057EE                 assume cs:LOAD
LOAD:00000000000057EE                 ;org 57EEh
LOAD:00000000000057EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000057EE                 align 10h
LOAD:00000000000057EE LOAD            ends
LOAD:00000000000057EE
.eh_frame_hdr:00000000000057F0 ; ===========================================================================
.eh_frame_hdr:00000000000057F0
.eh_frame_hdr:00000000000057F0 ; Segment type: Pure data
.eh_frame_hdr:00000000000057F0 ; Segment permissions: Read
.eh_frame_hdr:00000000000057F0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000057F0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000057F0                 ;org 57F0h
.eh_frame_hdr:00000000000057F0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000057F1                 db  1Bh
.eh_frame_hdr:00000000000057F2                 db    3
.eh_frame_hdr:00000000000057F3                 db  3Bh ; ;
.eh_frame_hdr:00000000000057F4                 db  44h ; D
.eh_frame_hdr:00000000000057F5                 db    2
.eh_frame_hdr:00000000000057F6                 db    0
.eh_frame_hdr:00000000000057F7                 db    0
.eh_frame_hdr:00000000000057F8                 db  47h ; G
.eh_frame_hdr:00000000000057F9                 db    0
.eh_frame_hdr:00000000000057FA                 db    0
.eh_frame_hdr:00000000000057FB                 db    0
.eh_frame_hdr:00000000000057FC                 db  20h
.eh_frame_hdr:00000000000057FD                 db 0BBh
.eh_frame_hdr:00000000000057FE                 db 0FFh
.eh_frame_hdr:00000000000057FF                 db 0FFh
.eh_frame_hdr:0000000000005800                 db  90h
.eh_frame_hdr:0000000000005801                 db    2
.eh_frame_hdr:0000000000005802                 db    0
.eh_frame_hdr:0000000000005803                 db    0
.eh_frame_hdr:0000000000005804                 db  10h
.eh_frame_hdr:0000000000005805                 db 0BEh
.eh_frame_hdr:0000000000005806                 db 0FFh
.eh_frame_hdr:0000000000005807                 db 0FFh
.eh_frame_hdr:0000000000005808                 db 0B8h
.eh_frame_hdr:0000000000005809                 db    2
.eh_frame_hdr:000000000000580A                 db    0
.eh_frame_hdr:000000000000580B                 db    0
.eh_frame_hdr:000000000000580C                 db  20h
.eh_frame_hdr:000000000000580D                 db 0BEh
.eh_frame_hdr:000000000000580E                 db 0FFh
.eh_frame_hdr:000000000000580F                 db 0FFh
.eh_frame_hdr:0000000000005810                 db 0FCh
.eh_frame_hdr:0000000000005811                 db    2
.eh_frame_hdr:0000000000005812                 db    0
.eh_frame_hdr:0000000000005813                 db    0
.eh_frame_hdr:0000000000005814                 db 0D0h
.eh_frame_hdr:0000000000005815                 db 0C1h
.eh_frame_hdr:0000000000005816                 db 0FFh
.eh_frame_hdr:0000000000005817                 db 0FFh
.eh_frame_hdr:0000000000005818                 db  60h ; `
.eh_frame_hdr:0000000000005819                 db    2
.eh_frame_hdr:000000000000581A                 db    0
.eh_frame_hdr:000000000000581B                 db    0
.eh_frame_hdr:000000000000581C                 db 0E0h
.eh_frame_hdr:000000000000581D                 db 0C2h
.eh_frame_hdr:000000000000581E                 db 0FFh
.eh_frame_hdr:000000000000581F                 db 0FFh
.eh_frame_hdr:0000000000005820                 db 0D0h
.eh_frame_hdr:0000000000005821                 db    2
.eh_frame_hdr:0000000000005822                 db    0
.eh_frame_hdr:0000000000005823                 db    0
.eh_frame_hdr:0000000000005824                 db  70h ; p
.eh_frame_hdr:0000000000005825                 db 0C6h
.eh_frame_hdr:0000000000005826                 db 0FFh
.eh_frame_hdr:0000000000005827                 db 0FFh
.eh_frame_hdr:0000000000005828                 db  58h ; X
.eh_frame_hdr:0000000000005829                 db    3
.eh_frame_hdr:000000000000582A                 db    0
.eh_frame_hdr:000000000000582B                 db    0
.eh_frame_hdr:000000000000582C                 db  80h
.eh_frame_hdr:000000000000582D                 db 0C6h
.eh_frame_hdr:000000000000582E                 db 0FFh
.eh_frame_hdr:000000000000582F                 db 0FFh
.eh_frame_hdr:0000000000005830                 db  6Ch ; l
.eh_frame_hdr:0000000000005831                 db    3
.eh_frame_hdr:0000000000005832                 db    0
.eh_frame_hdr:0000000000005833                 db    0
.eh_frame_hdr:0000000000005834                 db  90h
.eh_frame_hdr:0000000000005835                 db 0C6h
.eh_frame_hdr:0000000000005836                 db 0FFh
.eh_frame_hdr:0000000000005837                 db 0FFh
.eh_frame_hdr:0000000000005838                 db  80h
.eh_frame_hdr:0000000000005839                 db    3
.eh_frame_hdr:000000000000583A                 db    0
.eh_frame_hdr:000000000000583B                 db    0
.eh_frame_hdr:000000000000583C                 db  40h ; @
.eh_frame_hdr:000000000000583D                 db 0C7h
.eh_frame_hdr:000000000000583E                 db 0FFh
.eh_frame_hdr:000000000000583F                 db 0FFh
.eh_frame_hdr:0000000000005840                 db 0B0h
.eh_frame_hdr:0000000000005841                 db    3
.eh_frame_hdr:0000000000005842                 db    0
.eh_frame_hdr:0000000000005843                 db    0
.eh_frame_hdr:0000000000005844                 db 0E0h
.eh_frame_hdr:0000000000005845                 db 0C7h
.eh_frame_hdr:0000000000005846                 db 0FFh
.eh_frame_hdr:0000000000005847                 db 0FFh
.eh_frame_hdr:0000000000005848                 db 0D0h
.eh_frame_hdr:0000000000005849                 db    3
.eh_frame_hdr:000000000000584A                 db    0
.eh_frame_hdr:000000000000584B                 db    0
.eh_frame_hdr:000000000000584C                 db 0D0h
.eh_frame_hdr:000000000000584D                 db 0C8h
.eh_frame_hdr:000000000000584E                 db 0FFh
.eh_frame_hdr:000000000000584F                 db 0FFh
.eh_frame_hdr:0000000000005850                 db  14h
.eh_frame_hdr:0000000000005851                 db    4
.eh_frame_hdr:0000000000005852                 db    0
.eh_frame_hdr:0000000000005853                 db    0
.eh_frame_hdr:0000000000005854                 db  10h
.eh_frame_hdr:0000000000005855                 db 0DBh
.eh_frame_hdr:0000000000005856                 db 0FFh
.eh_frame_hdr:0000000000005857                 db 0FFh
.eh_frame_hdr:0000000000005858                 db  8Ch
.eh_frame_hdr:0000000000005859                 db    4
.eh_frame_hdr:000000000000585A                 db    0
.eh_frame_hdr:000000000000585B                 db    0
.eh_frame_hdr:000000000000585C                 db 0C0h
.eh_frame_hdr:000000000000585D                 db 0DCh
.eh_frame_hdr:000000000000585E                 db 0FFh
.eh_frame_hdr:000000000000585F                 db 0FFh
.eh_frame_hdr:0000000000005860                 db 0F8h
.eh_frame_hdr:0000000000005861                 db    4
.eh_frame_hdr:0000000000005862                 db    0
.eh_frame_hdr:0000000000005863                 db    0
.eh_frame_hdr:0000000000005864                 db    0
.eh_frame_hdr:0000000000005865                 db 0DDh
.eh_frame_hdr:0000000000005866                 db 0FFh
.eh_frame_hdr:0000000000005867                 db 0FFh
.eh_frame_hdr:0000000000005868                 db  24h ; $
.eh_frame_hdr:0000000000005869                 db    5
.eh_frame_hdr:000000000000586A                 db    0
.eh_frame_hdr:000000000000586B                 db    0
.eh_frame_hdr:000000000000586C                 db  20h
.eh_frame_hdr:000000000000586D                 db 0DDh
.eh_frame_hdr:000000000000586E                 db 0FFh
.eh_frame_hdr:000000000000586F                 db 0FFh
.eh_frame_hdr:0000000000005870                 db  38h ; 8
.eh_frame_hdr:0000000000005871                 db    5
.eh_frame_hdr:0000000000005872                 db    0
.eh_frame_hdr:0000000000005873                 db    0
.eh_frame_hdr:0000000000005874                 db  40h ; @
.eh_frame_hdr:0000000000005875                 db 0DDh
.eh_frame_hdr:0000000000005876                 db 0FFh
.eh_frame_hdr:0000000000005877                 db 0FFh
.eh_frame_hdr:0000000000005878                 db  4Ch ; L
.eh_frame_hdr:0000000000005879                 db    5
.eh_frame_hdr:000000000000587A                 db    0
.eh_frame_hdr:000000000000587B                 db    0
.eh_frame_hdr:000000000000587C                 db  80h
.eh_frame_hdr:000000000000587D                 db 0DDh
.eh_frame_hdr:000000000000587E                 db 0FFh
.eh_frame_hdr:000000000000587F                 db 0FFh
.eh_frame_hdr:0000000000005880                 db  60h ; `
.eh_frame_hdr:0000000000005881                 db    5
.eh_frame_hdr:0000000000005882                 db    0
.eh_frame_hdr:0000000000005883                 db    0
.eh_frame_hdr:0000000000005884                 db 0A0h
.eh_frame_hdr:0000000000005885                 db 0DDh
.eh_frame_hdr:0000000000005886                 db 0FFh
.eh_frame_hdr:0000000000005887                 db 0FFh
.eh_frame_hdr:0000000000005888                 db  74h ; t
.eh_frame_hdr:0000000000005889                 db    5
.eh_frame_hdr:000000000000588A                 db    0
.eh_frame_hdr:000000000000588B                 db    0
.eh_frame_hdr:000000000000588C                 db 0D0h
.eh_frame_hdr:000000000000588D                 db 0DDh
.eh_frame_hdr:000000000000588E                 db 0FFh
.eh_frame_hdr:000000000000588F                 db 0FFh
.eh_frame_hdr:0000000000005890                 db  88h
.eh_frame_hdr:0000000000005891                 db    5
.eh_frame_hdr:0000000000005892                 db    0
.eh_frame_hdr:0000000000005893                 db    0
.eh_frame_hdr:0000000000005894                 db  50h ; P
.eh_frame_hdr:0000000000005895                 db 0DEh
.eh_frame_hdr:0000000000005896                 db 0FFh
.eh_frame_hdr:0000000000005897                 db 0FFh
.eh_frame_hdr:0000000000005898                 db 0DCh
.eh_frame_hdr:0000000000005899                 db    5
.eh_frame_hdr:000000000000589A                 db    0
.eh_frame_hdr:000000000000589B                 db    0
.eh_frame_hdr:000000000000589C                 db  40h ; @
.eh_frame_hdr:000000000000589D                 db 0DFh
.eh_frame_hdr:000000000000589E                 db 0FFh
.eh_frame_hdr:000000000000589F                 db 0FFh
.eh_frame_hdr:00000000000058A0                 db  48h ; H
.eh_frame_hdr:00000000000058A1                 db    6
.eh_frame_hdr:00000000000058A2                 db    0
.eh_frame_hdr:00000000000058A3                 db    0
.eh_frame_hdr:00000000000058A4                 db  50h ; P
.eh_frame_hdr:00000000000058A5                 db 0DFh
.eh_frame_hdr:00000000000058A6                 db 0FFh
.eh_frame_hdr:00000000000058A7                 db 0FFh
.eh_frame_hdr:00000000000058A8                 db  5Ch ; \
.eh_frame_hdr:00000000000058A9                 db    6
.eh_frame_hdr:00000000000058AA                 db    0
.eh_frame_hdr:00000000000058AB                 db    0
.eh_frame_hdr:00000000000058AC                 db 0F0h
.eh_frame_hdr:00000000000058AD                 db 0DFh
.eh_frame_hdr:00000000000058AE                 db 0FFh
.eh_frame_hdr:00000000000058AF                 db 0FFh
.eh_frame_hdr:00000000000058B0                 db  88h
.eh_frame_hdr:00000000000058B1                 db    6
.eh_frame_hdr:00000000000058B2                 db    0
.eh_frame_hdr:00000000000058B3                 db    0
.eh_frame_hdr:00000000000058B4                 db  10h
.eh_frame_hdr:00000000000058B5                 db 0E0h
.eh_frame_hdr:00000000000058B6                 db 0FFh
.eh_frame_hdr:00000000000058B7                 db 0FFh
.eh_frame_hdr:00000000000058B8                 db  9Ch
.eh_frame_hdr:00000000000058B9                 db    6
.eh_frame_hdr:00000000000058BA                 db    0
.eh_frame_hdr:00000000000058BB                 db    0
.eh_frame_hdr:00000000000058BC                 db  20h
.eh_frame_hdr:00000000000058BD                 db 0E0h
.eh_frame_hdr:00000000000058BE                 db 0FFh
.eh_frame_hdr:00000000000058BF                 db 0FFh
.eh_frame_hdr:00000000000058C0                 db 0B0h
.eh_frame_hdr:00000000000058C1                 db    6
.eh_frame_hdr:00000000000058C2                 db    0
.eh_frame_hdr:00000000000058C3                 db    0
.eh_frame_hdr:00000000000058C4                 db  40h ; @
.eh_frame_hdr:00000000000058C5                 db 0E0h
.eh_frame_hdr:00000000000058C6                 db 0FFh
.eh_frame_hdr:00000000000058C7                 db 0FFh
.eh_frame_hdr:00000000000058C8                 db 0C4h
.eh_frame_hdr:00000000000058C9                 db    6
.eh_frame_hdr:00000000000058CA                 db    0
.eh_frame_hdr:00000000000058CB                 db    0
.eh_frame_hdr:00000000000058CC                 db  60h ; `
.eh_frame_hdr:00000000000058CD                 db 0E0h
.eh_frame_hdr:00000000000058CE                 db 0FFh
.eh_frame_hdr:00000000000058CF                 db 0FFh
.eh_frame_hdr:00000000000058D0                 db 0D8h
.eh_frame_hdr:00000000000058D1                 db    6
.eh_frame_hdr:00000000000058D2                 db    0
.eh_frame_hdr:00000000000058D3                 db    0
.eh_frame_hdr:00000000000058D4                 db 0F0h
.eh_frame_hdr:00000000000058D5                 db 0E0h
.eh_frame_hdr:00000000000058D6                 db 0FFh
.eh_frame_hdr:00000000000058D7                 db 0FFh
.eh_frame_hdr:00000000000058D8                 db 0F4h
.eh_frame_hdr:00000000000058D9                 db    6
.eh_frame_hdr:00000000000058DA                 db    0
.eh_frame_hdr:00000000000058DB                 db    0
.eh_frame_hdr:00000000000058DC                 db  80h
.eh_frame_hdr:00000000000058DD                 db 0E1h
.eh_frame_hdr:00000000000058DE                 db 0FFh
.eh_frame_hdr:00000000000058DF                 db 0FFh
.eh_frame_hdr:00000000000058E0                 db  10h
.eh_frame_hdr:00000000000058E1                 db    7
.eh_frame_hdr:00000000000058E2                 db    0
.eh_frame_hdr:00000000000058E3                 db    0
.eh_frame_hdr:00000000000058E4                 db  90h
.eh_frame_hdr:00000000000058E5                 db 0E1h
.eh_frame_hdr:00000000000058E6                 db 0FFh
.eh_frame_hdr:00000000000058E7                 db 0FFh
.eh_frame_hdr:00000000000058E8                 db  24h ; $
.eh_frame_hdr:00000000000058E9                 db    7
.eh_frame_hdr:00000000000058EA                 db    0
.eh_frame_hdr:00000000000058EB                 db    0
.eh_frame_hdr:00000000000058EC                 db 0A0h
.eh_frame_hdr:00000000000058ED                 db 0E1h
.eh_frame_hdr:00000000000058EE                 db 0FFh
.eh_frame_hdr:00000000000058EF                 db 0FFh
.eh_frame_hdr:00000000000058F0                 db  38h ; 8
.eh_frame_hdr:00000000000058F1                 db    7
.eh_frame_hdr:00000000000058F2                 db    0
.eh_frame_hdr:00000000000058F3                 db    0
.eh_frame_hdr:00000000000058F4                 db  40h ; @
.eh_frame_hdr:00000000000058F5                 db 0E2h
.eh_frame_hdr:00000000000058F6                 db 0FFh
.eh_frame_hdr:00000000000058F7                 db 0FFh
.eh_frame_hdr:00000000000058F8                 db  54h ; T
.eh_frame_hdr:00000000000058F9                 db    7
.eh_frame_hdr:00000000000058FA                 db    0
.eh_frame_hdr:00000000000058FB                 db    0
.eh_frame_hdr:00000000000058FC                 db  50h ; P
.eh_frame_hdr:00000000000058FD                 db 0E2h
.eh_frame_hdr:00000000000058FE                 db 0FFh
.eh_frame_hdr:00000000000058FF                 db 0FFh
.eh_frame_hdr:0000000000005900                 db  68h ; h
.eh_frame_hdr:0000000000005901                 db    7
.eh_frame_hdr:0000000000005902                 db    0
.eh_frame_hdr:0000000000005903                 db    0
.eh_frame_hdr:0000000000005904                 db  70h ; p
.eh_frame_hdr:0000000000005905                 db 0E2h
.eh_frame_hdr:0000000000005906                 db 0FFh
.eh_frame_hdr:0000000000005907                 db 0FFh
.eh_frame_hdr:0000000000005908                 db  7Ch ; |
.eh_frame_hdr:0000000000005909                 db    7
.eh_frame_hdr:000000000000590A                 db    0
.eh_frame_hdr:000000000000590B                 db    0
.eh_frame_hdr:000000000000590C                 db  80h
.eh_frame_hdr:000000000000590D                 db 0E2h
.eh_frame_hdr:000000000000590E                 db 0FFh
.eh_frame_hdr:000000000000590F                 db 0FFh
.eh_frame_hdr:0000000000005910                 db  90h
.eh_frame_hdr:0000000000005911                 db    7
.eh_frame_hdr:0000000000005912                 db    0
.eh_frame_hdr:0000000000005913                 db    0
.eh_frame_hdr:0000000000005914                 db  10h
.eh_frame_hdr:0000000000005915                 db 0E3h
.eh_frame_hdr:0000000000005916                 db 0FFh
.eh_frame_hdr:0000000000005917                 db 0FFh
.eh_frame_hdr:0000000000005918                 db 0ACh
.eh_frame_hdr:0000000000005919                 db    7
.eh_frame_hdr:000000000000591A                 db    0
.eh_frame_hdr:000000000000591B                 db    0
.eh_frame_hdr:000000000000591C                 db 0B0h
.eh_frame_hdr:000000000000591D                 db 0E3h
.eh_frame_hdr:000000000000591E                 db 0FFh
.eh_frame_hdr:000000000000591F                 db 0FFh
.eh_frame_hdr:0000000000005920                 db 0C8h
.eh_frame_hdr:0000000000005921                 db    7
.eh_frame_hdr:0000000000005922                 db    0
.eh_frame_hdr:0000000000005923                 db    0
.eh_frame_hdr:0000000000005924                 db 0C0h
.eh_frame_hdr:0000000000005925                 db 0E3h
.eh_frame_hdr:0000000000005926                 db 0FFh
.eh_frame_hdr:0000000000005927                 db 0FFh
.eh_frame_hdr:0000000000005928                 db 0DCh
.eh_frame_hdr:0000000000005929                 db    7
.eh_frame_hdr:000000000000592A                 db    0
.eh_frame_hdr:000000000000592B                 db    0
.eh_frame_hdr:000000000000592C                 db 0E0h
.eh_frame_hdr:000000000000592D                 db 0E3h
.eh_frame_hdr:000000000000592E                 db 0FFh
.eh_frame_hdr:000000000000592F                 db 0FFh
.eh_frame_hdr:0000000000005930                 db 0F0h
.eh_frame_hdr:0000000000005931                 db    7
.eh_frame_hdr:0000000000005932                 db    0
.eh_frame_hdr:0000000000005933                 db    0
.eh_frame_hdr:0000000000005934                 db    0
.eh_frame_hdr:0000000000005935                 db 0E4h
.eh_frame_hdr:0000000000005936                 db 0FFh
.eh_frame_hdr:0000000000005937                 db 0FFh
.eh_frame_hdr:0000000000005938                 db    4
.eh_frame_hdr:0000000000005939                 db    8
.eh_frame_hdr:000000000000593A                 db    0
.eh_frame_hdr:000000000000593B                 db    0
.eh_frame_hdr:000000000000593C                 db  10h
.eh_frame_hdr:000000000000593D                 db 0E4h
.eh_frame_hdr:000000000000593E                 db 0FFh
.eh_frame_hdr:000000000000593F                 db 0FFh
.eh_frame_hdr:0000000000005940                 db  18h
.eh_frame_hdr:0000000000005941                 db    8
.eh_frame_hdr:0000000000005942                 db    0
.eh_frame_hdr:0000000000005943                 db    0
.eh_frame_hdr:0000000000005944                 db  30h ; 0
.eh_frame_hdr:0000000000005945                 db 0E4h
.eh_frame_hdr:0000000000005946                 db 0FFh
.eh_frame_hdr:0000000000005947                 db 0FFh
.eh_frame_hdr:0000000000005948                 db  2Ch ; ,
.eh_frame_hdr:0000000000005949                 db    8
.eh_frame_hdr:000000000000594A                 db    0
.eh_frame_hdr:000000000000594B                 db    0
.eh_frame_hdr:000000000000594C                 db  50h ; P
.eh_frame_hdr:000000000000594D                 db 0E4h
.eh_frame_hdr:000000000000594E                 db 0FFh
.eh_frame_hdr:000000000000594F                 db 0FFh
.eh_frame_hdr:0000000000005950                 db  40h ; @
.eh_frame_hdr:0000000000005951                 db    8
.eh_frame_hdr:0000000000005952                 db    0
.eh_frame_hdr:0000000000005953                 db    0
.eh_frame_hdr:0000000000005954                 db  70h ; p
.eh_frame_hdr:0000000000005955                 db 0E4h
.eh_frame_hdr:0000000000005956                 db 0FFh
.eh_frame_hdr:0000000000005957                 db 0FFh
.eh_frame_hdr:0000000000005958                 db  58h ; X
.eh_frame_hdr:0000000000005959                 db    8
.eh_frame_hdr:000000000000595A                 db    0
.eh_frame_hdr:000000000000595B                 db    0
.eh_frame_hdr:000000000000595C                 db  90h
.eh_frame_hdr:000000000000595D                 db 0E8h
.eh_frame_hdr:000000000000595E                 db 0FFh
.eh_frame_hdr:000000000000595F                 db 0FFh
.eh_frame_hdr:0000000000005960                 db  6Ch ; l
.eh_frame_hdr:0000000000005961                 db    9
.eh_frame_hdr:0000000000005962                 db    0
.eh_frame_hdr:0000000000005963                 db    0
.eh_frame_hdr:0000000000005964                 db 0B0h
.eh_frame_hdr:0000000000005965                 db 0E8h
.eh_frame_hdr:0000000000005966                 db 0FFh
.eh_frame_hdr:0000000000005967                 db 0FFh
.eh_frame_hdr:0000000000005968                 db  80h
.eh_frame_hdr:0000000000005969                 db    9
.eh_frame_hdr:000000000000596A                 db    0
.eh_frame_hdr:000000000000596B                 db    0
.eh_frame_hdr:000000000000596C                 db  30h ; 0
.eh_frame_hdr:000000000000596D                 db 0E9h
.eh_frame_hdr:000000000000596E                 db 0FFh
.eh_frame_hdr:000000000000596F                 db 0FFh
.eh_frame_hdr:0000000000005970                 db  9Ch
.eh_frame_hdr:0000000000005971                 db    9
.eh_frame_hdr:0000000000005972                 db    0
.eh_frame_hdr:0000000000005973                 db    0
.eh_frame_hdr:0000000000005974                 db  10h
.eh_frame_hdr:0000000000005975                 db 0EAh
.eh_frame_hdr:0000000000005976                 db 0FFh
.eh_frame_hdr:0000000000005977                 db 0FFh
.eh_frame_hdr:0000000000005978                 db 0C8h
.eh_frame_hdr:0000000000005979                 db    9
.eh_frame_hdr:000000000000597A                 db    0
.eh_frame_hdr:000000000000597B                 db    0
.eh_frame_hdr:000000000000597C                 db  90h
.eh_frame_hdr:000000000000597D                 db 0EAh
.eh_frame_hdr:000000000000597E                 db 0FFh
.eh_frame_hdr:000000000000597F                 db 0FFh
.eh_frame_hdr:0000000000005980                 db 0E8h
.eh_frame_hdr:0000000000005981                 db    9
.eh_frame_hdr:0000000000005982                 db    0
.eh_frame_hdr:0000000000005983                 db    0
.eh_frame_hdr:0000000000005984                 db 0B0h
.eh_frame_hdr:0000000000005985                 db 0EAh
.eh_frame_hdr:0000000000005986                 db 0FFh
.eh_frame_hdr:0000000000005987                 db 0FFh
.eh_frame_hdr:0000000000005988                 db    4
.eh_frame_hdr:0000000000005989                 db  0Ah
.eh_frame_hdr:000000000000598A                 db    0
.eh_frame_hdr:000000000000598B                 db    0
.eh_frame_hdr:000000000000598C                 db 0E0h
.eh_frame_hdr:000000000000598D                 db 0EAh
.eh_frame_hdr:000000000000598E                 db 0FFh
.eh_frame_hdr:000000000000598F                 db 0FFh
.eh_frame_hdr:0000000000005990                 db  18h
.eh_frame_hdr:0000000000005991                 db  0Ah
.eh_frame_hdr:0000000000005992                 db    0
.eh_frame_hdr:0000000000005993                 db    0
.eh_frame_hdr:0000000000005994                 db 0F0h
.eh_frame_hdr:0000000000005995                 db 0EAh
.eh_frame_hdr:0000000000005996                 db 0FFh
.eh_frame_hdr:0000000000005997                 db 0FFh
.eh_frame_hdr:0000000000005998                 db  2Ch ; ,
.eh_frame_hdr:0000000000005999                 db  0Ah
.eh_frame_hdr:000000000000599A                 db    0
.eh_frame_hdr:000000000000599B                 db    0
.eh_frame_hdr:000000000000599C                 db  30h ; 0
.eh_frame_hdr:000000000000599D                 db 0EBh
.eh_frame_hdr:000000000000599E                 db 0FFh
.eh_frame_hdr:000000000000599F                 db 0FFh
.eh_frame_hdr:00000000000059A0                 db  50h ; P
.eh_frame_hdr:00000000000059A1                 db  0Ah
.eh_frame_hdr:00000000000059A2                 db    0
.eh_frame_hdr:00000000000059A3                 db    0
.eh_frame_hdr:00000000000059A4                 db  60h ; `
.eh_frame_hdr:00000000000059A5                 db 0EBh
.eh_frame_hdr:00000000000059A6                 db 0FFh
.eh_frame_hdr:00000000000059A7                 db 0FFh
.eh_frame_hdr:00000000000059A8                 db  64h ; d
.eh_frame_hdr:00000000000059A9                 db  0Ah
.eh_frame_hdr:00000000000059AA                 db    0
.eh_frame_hdr:00000000000059AB                 db    0
.eh_frame_hdr:00000000000059AC                 db 0F0h
.eh_frame_hdr:00000000000059AD                 db 0EBh
.eh_frame_hdr:00000000000059AE                 db 0FFh
.eh_frame_hdr:00000000000059AF                 db 0FFh
.eh_frame_hdr:00000000000059B0                 db  7Ch ; |
.eh_frame_hdr:00000000000059B1                 db  0Ah
.eh_frame_hdr:00000000000059B2                 db    0
.eh_frame_hdr:00000000000059B3                 db    0
.eh_frame_hdr:00000000000059B4                 db  40h ; @
.eh_frame_hdr:00000000000059B5                 db 0ECh
.eh_frame_hdr:00000000000059B6                 db 0FFh
.eh_frame_hdr:00000000000059B7                 db 0FFh
.eh_frame_hdr:00000000000059B8                 db  94h
.eh_frame_hdr:00000000000059B9                 db  0Ah
.eh_frame_hdr:00000000000059BA                 db    0
.eh_frame_hdr:00000000000059BB                 db    0
.eh_frame_hdr:00000000000059BC                 db  60h ; `
.eh_frame_hdr:00000000000059BD                 db 0ECh
.eh_frame_hdr:00000000000059BE                 db 0FFh
.eh_frame_hdr:00000000000059BF                 db 0FFh
.eh_frame_hdr:00000000000059C0                 db 0B0h
.eh_frame_hdr:00000000000059C1                 db  0Ah
.eh_frame_hdr:00000000000059C2                 db    0
.eh_frame_hdr:00000000000059C3                 db    0
.eh_frame_hdr:00000000000059C4                 db  90h
.eh_frame_hdr:00000000000059C5                 db 0ECh
.eh_frame_hdr:00000000000059C6                 db 0FFh
.eh_frame_hdr:00000000000059C7                 db 0FFh
.eh_frame_hdr:00000000000059C8                 db 0CCh
.eh_frame_hdr:00000000000059C9                 db  0Ah
.eh_frame_hdr:00000000000059CA                 db    0
.eh_frame_hdr:00000000000059CB                 db    0
.eh_frame_hdr:00000000000059CC                 db 0C0h
.eh_frame_hdr:00000000000059CD                 db 0ECh
.eh_frame_hdr:00000000000059CE                 db 0FFh
.eh_frame_hdr:00000000000059CF                 db 0FFh
.eh_frame_hdr:00000000000059D0                 db 0F4h
.eh_frame_hdr:00000000000059D1                 db  0Ah
.eh_frame_hdr:00000000000059D2                 db    0
.eh_frame_hdr:00000000000059D3                 db    0
.eh_frame_hdr:00000000000059D4                 db 0E0h
.eh_frame_hdr:00000000000059D5                 db 0ECh
.eh_frame_hdr:00000000000059D6                 db 0FFh
.eh_frame_hdr:00000000000059D7                 db 0FFh
.eh_frame_hdr:00000000000059D8                 db  10h
.eh_frame_hdr:00000000000059D9                 db  0Bh
.eh_frame_hdr:00000000000059DA                 db    0
.eh_frame_hdr:00000000000059DB                 db    0
.eh_frame_hdr:00000000000059DC                 db  20h
.eh_frame_hdr:00000000000059DD                 db 0EDh
.eh_frame_hdr:00000000000059DE                 db 0FFh
.eh_frame_hdr:00000000000059DF                 db 0FFh
.eh_frame_hdr:00000000000059E0                 db  28h ; (
.eh_frame_hdr:00000000000059E1                 db  0Bh
.eh_frame_hdr:00000000000059E2                 db    0
.eh_frame_hdr:00000000000059E3                 db    0
.eh_frame_hdr:00000000000059E4                 db 0A0h
.eh_frame_hdr:00000000000059E5                 db 0EFh
.eh_frame_hdr:00000000000059E6                 db 0FFh
.eh_frame_hdr:00000000000059E7                 db 0FFh
.eh_frame_hdr:00000000000059E8                 db  60h ; `
.eh_frame_hdr:00000000000059E9                 db  0Bh
.eh_frame_hdr:00000000000059EA                 db    0
.eh_frame_hdr:00000000000059EB                 db    0
.eh_frame_hdr:00000000000059EC                 db  30h ; 0
.eh_frame_hdr:00000000000059ED                 db 0F0h
.eh_frame_hdr:00000000000059EE                 db 0FFh
.eh_frame_hdr:00000000000059EF                 db 0FFh
.eh_frame_hdr:00000000000059F0                 db 0A0h
.eh_frame_hdr:00000000000059F1                 db  0Bh
.eh_frame_hdr:00000000000059F2                 db    0
.eh_frame_hdr:00000000000059F3                 db    0
.eh_frame_hdr:00000000000059F4                 db 0B0h
.eh_frame_hdr:00000000000059F5                 db 0F0h
.eh_frame_hdr:00000000000059F6                 db 0FFh
.eh_frame_hdr:00000000000059F7                 db 0FFh
.eh_frame_hdr:00000000000059F8                 db 0F0h
.eh_frame_hdr:00000000000059F9                 db  0Bh
.eh_frame_hdr:00000000000059FA                 db    0
.eh_frame_hdr:00000000000059FB                 db    0
.eh_frame_hdr:00000000000059FC                 db  10h
.eh_frame_hdr:00000000000059FD                 db 0F1h
.eh_frame_hdr:00000000000059FE                 db 0FFh
.eh_frame_hdr:00000000000059FF                 db 0FFh
.eh_frame_hdr:0000000000005A00                 db  10h
.eh_frame_hdr:0000000000005A01                 db  0Ch
.eh_frame_hdr:0000000000005A02                 db    0
.eh_frame_hdr:0000000000005A03                 db    0
.eh_frame_hdr:0000000000005A04                 db  50h ; P
.eh_frame_hdr:0000000000005A05                 db 0F1h
.eh_frame_hdr:0000000000005A06                 db 0FFh
.eh_frame_hdr:0000000000005A07                 db 0FFh
.eh_frame_hdr:0000000000005A08                 db  30h ; 0
.eh_frame_hdr:0000000000005A09                 db  0Ch
.eh_frame_hdr:0000000000005A0A                 db    0
.eh_frame_hdr:0000000000005A0B                 db    0
.eh_frame_hdr:0000000000005A0C                 db 0D0h
.eh_frame_hdr:0000000000005A0D                 db 0F1h
.eh_frame_hdr:0000000000005A0E                 db 0FFh
.eh_frame_hdr:0000000000005A0F                 db 0FFh
.eh_frame_hdr:0000000000005A10                 db  68h ; h
.eh_frame_hdr:0000000000005A11                 db  0Ch
.eh_frame_hdr:0000000000005A12                 db    0
.eh_frame_hdr:0000000000005A13                 db    0
.eh_frame_hdr:0000000000005A14                 db  10h
.eh_frame_hdr:0000000000005A15                 db 0F2h
.eh_frame_hdr:0000000000005A16                 db 0FFh
.eh_frame_hdr:0000000000005A17                 db 0FFh
.eh_frame_hdr:0000000000005A18                 db  88h
.eh_frame_hdr:0000000000005A19                 db  0Ch
.eh_frame_hdr:0000000000005A1A                 db    0
.eh_frame_hdr:0000000000005A1B                 db    0
.eh_frame_hdr:0000000000005A1C                 db  70h ; p
.eh_frame_hdr:0000000000005A1D                 db 0F2h
.eh_frame_hdr:0000000000005A1E                 db 0FFh
.eh_frame_hdr:0000000000005A1F                 db 0FFh
.eh_frame_hdr:0000000000005A20                 db 0B8h
.eh_frame_hdr:0000000000005A21                 db  0Ch
.eh_frame_hdr:0000000000005A22                 db    0
.eh_frame_hdr:0000000000005A23                 db    0
.eh_frame_hdr:0000000000005A24                 db 0E0h
.eh_frame_hdr:0000000000005A25                 db 0F2h
.eh_frame_hdr:0000000000005A26                 db 0FFh
.eh_frame_hdr:0000000000005A27                 db 0FFh
.eh_frame_hdr:0000000000005A28                 db    0
.eh_frame_hdr:0000000000005A29                 db  0Dh
.eh_frame_hdr:0000000000005A2A                 db    0
.eh_frame_hdr:0000000000005A2B                 db    0
.eh_frame_hdr:0000000000005A2C                 db 0F0h
.eh_frame_hdr:0000000000005A2D                 db 0F2h
.eh_frame_hdr:0000000000005A2E                 db 0FFh
.eh_frame_hdr:0000000000005A2F                 db 0FFh
.eh_frame_hdr:0000000000005A30                 db  18h
.eh_frame_hdr:0000000000005A31                 db  0Dh
.eh_frame_hdr:0000000000005A32                 db    0
.eh_frame_hdr:0000000000005A33                 db    0
.eh_frame_hdr:0000000000005A33 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000005A33
LOAD:0000000000005A34 ; ===========================================================================
LOAD:0000000000005A34
LOAD:0000000000005A34 ; Segment type: Pure code
LOAD:0000000000005A34 ; Segment permissions: Read/Execute
LOAD:0000000000005A34 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005A34                 assume cs:LOAD
LOAD:0000000000005A34                 ;org 5A34h
LOAD:0000000000005A34                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005A34                 align 8
LOAD:0000000000005A34 LOAD            ends
LOAD:0000000000005A34
.eh_frame:0000000000005A38 ; ===========================================================================
.eh_frame:0000000000005A38
.eh_frame:0000000000005A38 ; Segment type: Pure data
.eh_frame:0000000000005A38 ; Segment permissions: Read
.eh_frame:0000000000005A38 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005A38                 assume cs:_eh_frame
.eh_frame:0000000000005A38                 ;org 5A38h
.eh_frame:0000000000005A38                 db  14h
.eh_frame:0000000000005A39                 db    0
.eh_frame:0000000000005A3A                 db    0
.eh_frame:0000000000005A3B                 db    0
.eh_frame:0000000000005A3C                 db    0
.eh_frame:0000000000005A3D                 db    0
.eh_frame:0000000000005A3E                 db    0
.eh_frame:0000000000005A3F                 db    0
.eh_frame:0000000000005A40                 db    1
.eh_frame:0000000000005A41                 db  7Ah ; z
.eh_frame:0000000000005A42                 db  52h ; R
.eh_frame:0000000000005A43                 db    0
.eh_frame:0000000000005A44                 db    1
.eh_frame:0000000000005A45                 db  78h ; x
.eh_frame:0000000000005A46                 db  10h
.eh_frame:0000000000005A47                 db    1
.eh_frame:0000000000005A48                 db  1Bh
.eh_frame:0000000000005A49                 db  0Ch
.eh_frame:0000000000005A4A                 db    7
.eh_frame:0000000000005A4B                 db    8
.eh_frame:0000000000005A4C                 db  90h
.eh_frame:0000000000005A4D                 db    1
.eh_frame:0000000000005A4E                 db    7
.eh_frame:0000000000005A4F                 db  10h
.eh_frame:0000000000005A50                 db  14h
.eh_frame:0000000000005A51                 db    0
.eh_frame:0000000000005A52                 db    0
.eh_frame:0000000000005A53                 db    0
.eh_frame:0000000000005A54                 db  1Ch
.eh_frame:0000000000005A55                 db    0
.eh_frame:0000000000005A56                 db    0
.eh_frame:0000000000005A57                 db    0
.eh_frame:0000000000005A58                 db  68h ; h
.eh_frame:0000000000005A59                 db 0BFh
.eh_frame:0000000000005A5A                 db 0FFh
.eh_frame:0000000000005A5B                 db 0FFh
.eh_frame:0000000000005A5C                 db  2Bh ; +
.eh_frame:0000000000005A5D                 db    0
.eh_frame:0000000000005A5E                 db    0
.eh_frame:0000000000005A5F                 db    0
.eh_frame:0000000000005A60                 db    0
.eh_frame:0000000000005A61                 db    0
.eh_frame:0000000000005A62                 db    0
.eh_frame:0000000000005A63                 db    0
.eh_frame:0000000000005A64                 db    0
.eh_frame:0000000000005A65                 db    0
.eh_frame:0000000000005A66                 db    0
.eh_frame:0000000000005A67                 db    0
.eh_frame:0000000000005A68                 db  14h
.eh_frame:0000000000005A69                 db    0
.eh_frame:0000000000005A6A                 db    0
.eh_frame:0000000000005A6B                 db    0
.eh_frame:0000000000005A6C                 db    0
.eh_frame:0000000000005A6D                 db    0
.eh_frame:0000000000005A6E                 db    0
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db    1
.eh_frame:0000000000005A71                 db  7Ah ; z
.eh_frame:0000000000005A72                 db  52h ; R
.eh_frame:0000000000005A73                 db    0
.eh_frame:0000000000005A74                 db    1
.eh_frame:0000000000005A75                 db  78h ; x
.eh_frame:0000000000005A76                 db  10h
.eh_frame:0000000000005A77                 db    1
.eh_frame:0000000000005A78                 db  1Bh
.eh_frame:0000000000005A79                 db  0Ch
.eh_frame:0000000000005A7A                 db    7
.eh_frame:0000000000005A7B                 db    8
.eh_frame:0000000000005A7C                 db  90h
.eh_frame:0000000000005A7D                 db    1
.eh_frame:0000000000005A7E                 db    0
.eh_frame:0000000000005A7F                 db    0
.eh_frame:0000000000005A80                 db  24h ; $
.eh_frame:0000000000005A81                 db    0
.eh_frame:0000000000005A82                 db    0
.eh_frame:0000000000005A83                 db    0
.eh_frame:0000000000005A84                 db  1Ch
.eh_frame:0000000000005A85                 db    0
.eh_frame:0000000000005A86                 db    0
.eh_frame:0000000000005A87                 db    0
.eh_frame:0000000000005A88                 db  88h
.eh_frame:0000000000005A89                 db 0B8h
.eh_frame:0000000000005A8A                 db 0FFh
.eh_frame:0000000000005A8B                 db 0FFh
.eh_frame:0000000000005A8C                 db 0F0h
.eh_frame:0000000000005A8D                 db    2
.eh_frame:0000000000005A8E                 db    0
.eh_frame:0000000000005A8F                 db    0
.eh_frame:0000000000005A90                 db    0
.eh_frame:0000000000005A91                 db  0Eh
.eh_frame:0000000000005A92                 db  10h
.eh_frame:0000000000005A93                 db  46h ; F
.eh_frame:0000000000005A94                 db  0Eh
.eh_frame:0000000000005A95                 db  18h
.eh_frame:0000000000005A96                 db  4Ah ; J
.eh_frame:0000000000005A97                 db  0Fh
.eh_frame:0000000000005A98                 db  0Bh
.eh_frame:0000000000005A99                 db  77h ; w
.eh_frame:0000000000005A9A                 db    8
.eh_frame:0000000000005A9B                 db  80h
.eh_frame:0000000000005A9C                 db    0
.eh_frame:0000000000005A9D                 db  3Fh ; ?
.eh_frame:0000000000005A9E                 db  1Ah
.eh_frame:0000000000005A9F                 db  3Bh ; ;
.eh_frame:0000000000005AA0                 db  2Ah ; *
.eh_frame:0000000000005AA1                 db  33h ; 3
.eh_frame:0000000000005AA2                 db  24h ; $
.eh_frame:0000000000005AA3                 db  22h ; "
.eh_frame:0000000000005AA4                 db    0
.eh_frame:0000000000005AA5                 db    0
.eh_frame:0000000000005AA6                 db    0
.eh_frame:0000000000005AA7                 db    0
.eh_frame:0000000000005AA8                 db  14h
.eh_frame:0000000000005AA9                 db    0
.eh_frame:0000000000005AAA                 db    0
.eh_frame:0000000000005AAB                 db    0
.eh_frame:0000000000005AAC                 db  44h ; D
.eh_frame:0000000000005AAD                 db    0
.eh_frame:0000000000005AAE                 db    0
.eh_frame:0000000000005AAF                 db    0
.eh_frame:0000000000005AB0                 db  50h ; P
.eh_frame:0000000000005AB1                 db 0BBh
.eh_frame:0000000000005AB2                 db 0FFh
.eh_frame:0000000000005AB3                 db 0FFh
.eh_frame:0000000000005AB4                 db    8
.eh_frame:0000000000005AB5                 db    0
.eh_frame:0000000000005AB6                 db    0
.eh_frame:0000000000005AB7                 db    0
.eh_frame:0000000000005AB8                 db    0
.eh_frame:0000000000005AB9                 db    0
.eh_frame:0000000000005ABA                 db    0
.eh_frame:0000000000005ABB                 db    0
.eh_frame:0000000000005ABC                 db    0
.eh_frame:0000000000005ABD                 db    0
.eh_frame:0000000000005ABE                 db    0
.eh_frame:0000000000005ABF                 db    0
.eh_frame:0000000000005AC0                 db  28h ; (
.eh_frame:0000000000005AC1                 db    0
.eh_frame:0000000000005AC2                 db    0
.eh_frame:0000000000005AC3                 db    0
.eh_frame:0000000000005AC4                 db  5Ch ; \
.eh_frame:0000000000005AC5                 db    0
.eh_frame:0000000000005AC6                 db    0
.eh_frame:0000000000005AC7                 db    0
.eh_frame:0000000000005AC8                 db    8
.eh_frame:0000000000005AC9                 db 0C0h
.eh_frame:0000000000005ACA                 db 0FFh
.eh_frame:0000000000005ACB                 db 0FFh
.eh_frame:0000000000005ACC                 db  8Ah
.eh_frame:0000000000005ACD                 db    3
.eh_frame:0000000000005ACE                 db    0
.eh_frame:0000000000005ACF                 db    0
.eh_frame:0000000000005AD0                 db    0
.eh_frame:0000000000005AD1                 db  42h ; B
.eh_frame:0000000000005AD2                 db  0Eh
.eh_frame:0000000000005AD3                 db  10h
.eh_frame:0000000000005AD4                 db  8Dh
.eh_frame:0000000000005AD5                 db    2
.eh_frame:0000000000005AD6                 db  42h ; B
.eh_frame:0000000000005AD7                 db  0Eh
.eh_frame:0000000000005AD8                 db  18h
.eh_frame:0000000000005AD9                 db  8Ch
.eh_frame:0000000000005ADA                 db    3
.eh_frame:0000000000005ADB                 db  46h ; F
.eh_frame:0000000000005ADC                 db  0Eh
.eh_frame:0000000000005ADD                 db  20h
.eh_frame:0000000000005ADE                 db  86h
.eh_frame:0000000000005ADF                 db    4
.eh_frame:0000000000005AE0                 db  41h ; A
.eh_frame:0000000000005AE1                 db  0Eh
.eh_frame:0000000000005AE2                 db  28h ; (
.eh_frame:0000000000005AE3                 db  83h
.eh_frame:0000000000005AE4                 db    5
.eh_frame:0000000000005AE5                 db  49h ; I
.eh_frame:0000000000005AE6                 db  0Eh
.eh_frame:0000000000005AE7                 db 0B0h
.eh_frame:0000000000005AE8                 db    1
.eh_frame:0000000000005AE9                 db    0
.eh_frame:0000000000005AEA                 db    0
.eh_frame:0000000000005AEB                 db    0
.eh_frame:0000000000005AEC                 db  58h ; X
.eh_frame:0000000000005AED                 db    0
.eh_frame:0000000000005AEE                 db    0
.eh_frame:0000000000005AEF                 db    0
.eh_frame:0000000000005AF0                 db  88h
.eh_frame:0000000000005AF1                 db    0
.eh_frame:0000000000005AF2                 db    0
.eh_frame:0000000000005AF3                 db    0
.eh_frame:0000000000005AF4                 db  1Ch
.eh_frame:0000000000005AF5                 db 0BBh
.eh_frame:0000000000005AF6                 db 0FFh
.eh_frame:0000000000005AF7                 db 0FFh
.eh_frame:0000000000005AF8                 db 0ACh
.eh_frame:0000000000005AF9                 db    3
.eh_frame:0000000000005AFA                 db    0
.eh_frame:0000000000005AFB                 db    0
.eh_frame:0000000000005AFC                 db    0
.eh_frame:0000000000005AFD                 db  42h ; B
.eh_frame:0000000000005AFE                 db  0Eh
.eh_frame:0000000000005AFF                 db  10h
.eh_frame:0000000000005B00                 db  8Fh
.eh_frame:0000000000005B01                 db    2
.eh_frame:0000000000005B02                 db  42h ; B
.eh_frame:0000000000005B03                 db  0Eh
.eh_frame:0000000000005B04                 db  18h
.eh_frame:0000000000005B05                 db  8Eh
.eh_frame:0000000000005B06                 db    3
.eh_frame:0000000000005B07                 db  42h ; B
.eh_frame:0000000000005B08                 db  0Eh
.eh_frame:0000000000005B09                 db  20h
.eh_frame:0000000000005B0A                 db  8Dh
.eh_frame:0000000000005B0B                 db    4
.eh_frame:0000000000005B0C                 db  42h ; B
.eh_frame:0000000000005B0D                 db  0Eh
.eh_frame:0000000000005B0E                 db  28h ; (
.eh_frame:0000000000005B0F                 db  8Ch
.eh_frame:0000000000005B10                 db    5
.eh_frame:0000000000005B11                 db  44h ; D
.eh_frame:0000000000005B12                 db  0Eh
.eh_frame:0000000000005B13                 db  30h ; 0
.eh_frame:0000000000005B14                 db  86h
.eh_frame:0000000000005B15                 db    6
.eh_frame:0000000000005B16                 db  41h ; A
.eh_frame:0000000000005B17                 db  0Eh
.eh_frame:0000000000005B18                 db  38h ; 8
.eh_frame:0000000000005B19                 db  83h
.eh_frame:0000000000005B1A                 db    7
.eh_frame:0000000000005B1B                 db  4Ch ; L
.eh_frame:0000000000005B1C                 db  0Eh
.eh_frame:0000000000005B1D                 db  50h ; P
.eh_frame:0000000000005B1E                 db    2
.eh_frame:0000000000005B1F                 db  96h
.eh_frame:0000000000005B20                 db  0Ah
.eh_frame:0000000000005B21                 db  0Eh
.eh_frame:0000000000005B22                 db  58h ; X
.eh_frame:0000000000005B23                 db  50h ; P
.eh_frame:0000000000005B24                 db  0Eh
.eh_frame:0000000000005B25                 db  60h ; `
.eh_frame:0000000000005B26                 db  71h ; q
.eh_frame:0000000000005B27                 db  0Bh
.eh_frame:0000000000005B28                 db    3
.eh_frame:0000000000005B29                 db 0ADh
.eh_frame:0000000000005B2A                 db    1
.eh_frame:0000000000005B2B                 db  0Ah
.eh_frame:0000000000005B2C                 db  0Eh
.eh_frame:0000000000005B2D                 db  38h ; 8
.eh_frame:0000000000005B2E                 db  45h ; E
.eh_frame:0000000000005B2F                 db  0Eh
.eh_frame:0000000000005B30                 db  30h ; 0
.eh_frame:0000000000005B31                 db  45h ; E
.eh_frame:0000000000005B32                 db  0Eh
.eh_frame:0000000000005B33                 db  28h ; (
.eh_frame:0000000000005B34                 db  42h ; B
.eh_frame:0000000000005B35                 db  0Eh
.eh_frame:0000000000005B36                 db  20h
.eh_frame:0000000000005B37                 db  42h ; B
.eh_frame:0000000000005B38                 db  0Eh
.eh_frame:0000000000005B39                 db  18h
.eh_frame:0000000000005B3A                 db  42h ; B
.eh_frame:0000000000005B3B                 db  0Eh
.eh_frame:0000000000005B3C                 db  10h
.eh_frame:0000000000005B3D                 db  42h ; B
.eh_frame:0000000000005B3E                 db  0Eh
.eh_frame:0000000000005B3F                 db    8
.eh_frame:0000000000005B40                 db  41h ; A
.eh_frame:0000000000005B41                 db  0Bh
.eh_frame:0000000000005B42                 db    0
.eh_frame:0000000000005B43                 db    0
.eh_frame:0000000000005B44                 db    0
.eh_frame:0000000000005B45                 db    0
.eh_frame:0000000000005B46                 db    0
.eh_frame:0000000000005B47                 db    0
.eh_frame:0000000000005B48                 db  10h
.eh_frame:0000000000005B49                 db    0
.eh_frame:0000000000005B4A                 db    0
.eh_frame:0000000000005B4B                 db    0
.eh_frame:0000000000005B4C                 db 0E4h
.eh_frame:0000000000005B4D                 db    0
.eh_frame:0000000000005B4E                 db    0
.eh_frame:0000000000005B4F                 db    0
.eh_frame:0000000000005B50                 db  10h
.eh_frame:0000000000005B51                 db 0C3h
.eh_frame:0000000000005B52                 db 0FFh
.eh_frame:0000000000005B53                 db 0FFh
.eh_frame:0000000000005B54                 db    8
.eh_frame:0000000000005B55                 db    0
.eh_frame:0000000000005B56                 db    0
.eh_frame:0000000000005B57                 db    0
.eh_frame:0000000000005B58                 db    0
.eh_frame:0000000000005B59                 db    0
.eh_frame:0000000000005B5A                 db    0
.eh_frame:0000000000005B5B                 db    0
.eh_frame:0000000000005B5C                 db  10h
.eh_frame:0000000000005B5D                 db    0
.eh_frame:0000000000005B5E                 db    0
.eh_frame:0000000000005B5F                 db    0
.eh_frame:0000000000005B60                 db 0F8h
.eh_frame:0000000000005B61                 db    0
.eh_frame:0000000000005B62                 db    0
.eh_frame:0000000000005B63                 db    0
.eh_frame:0000000000005B64                 db  0Ch
.eh_frame:0000000000005B65                 db 0C3h
.eh_frame:0000000000005B66                 db 0FFh
.eh_frame:0000000000005B67                 db 0FFh
.eh_frame:0000000000005B68                 db    8
.eh_frame:0000000000005B69                 db    0
.eh_frame:0000000000005B6A                 db    0
.eh_frame:0000000000005B6B                 db    0
.eh_frame:0000000000005B6C                 db    0
.eh_frame:0000000000005B6D                 db    0
.eh_frame:0000000000005B6E                 db    0
.eh_frame:0000000000005B6F                 db    0
.eh_frame:0000000000005B70                 db  2Ch ; ,
.eh_frame:0000000000005B71                 db    0
.eh_frame:0000000000005B72                 db    0
.eh_frame:0000000000005B73                 db    0
.eh_frame:0000000000005B74                 db  0Ch
.eh_frame:0000000000005B75                 db    1
.eh_frame:0000000000005B76                 db    0
.eh_frame:0000000000005B77                 db    0
.eh_frame:0000000000005B78                 db    8
.eh_frame:0000000000005B79                 db 0C3h
.eh_frame:0000000000005B7A                 db 0FFh
.eh_frame:0000000000005B7B                 db 0FFh
.eh_frame:0000000000005B7C                 db 0A4h
.eh_frame:0000000000005B7D                 db    0
.eh_frame:0000000000005B7E                 db    0
.eh_frame:0000000000005B7F                 db    0
.eh_frame:0000000000005B80                 db    0
.eh_frame:0000000000005B81                 db  41h ; A
.eh_frame:0000000000005B82                 db  0Eh
.eh_frame:0000000000005B83                 db  10h
.eh_frame:0000000000005B84                 db  86h
.eh_frame:0000000000005B85                 db    2
.eh_frame:0000000000005B86                 db  41h ; A
.eh_frame:0000000000005B87                 db  0Eh
.eh_frame:0000000000005B88                 db  18h
.eh_frame:0000000000005B89                 db  83h
.eh_frame:0000000000005B8A                 db    3
.eh_frame:0000000000005B8B                 db  44h ; D
.eh_frame:0000000000005B8C                 db  0Eh
.eh_frame:0000000000005B8D                 db  20h
.eh_frame:0000000000005B8E                 db  7Ah ; z
.eh_frame:0000000000005B8F                 db  0Ah
.eh_frame:0000000000005B90                 db  0Eh
.eh_frame:0000000000005B91                 db  18h
.eh_frame:0000000000005B92                 db  41h ; A
.eh_frame:0000000000005B93                 db  0Eh
.eh_frame:0000000000005B94                 db  10h
.eh_frame:0000000000005B95                 db  41h ; A
.eh_frame:0000000000005B96                 db  0Eh
.eh_frame:0000000000005B97                 db    8
.eh_frame:0000000000005B98                 db  41h ; A
.eh_frame:0000000000005B99                 db  0Bh
.eh_frame:0000000000005B9A                 db    0
.eh_frame:0000000000005B9B                 db    0
.eh_frame:0000000000005B9C                 db    0
.eh_frame:0000000000005B9D                 db    0
.eh_frame:0000000000005B9E                 db    0
.eh_frame:0000000000005B9F                 db    0
.eh_frame:0000000000005BA0                 db  1Ch
.eh_frame:0000000000005BA1                 db    0
.eh_frame:0000000000005BA2                 db    0
.eh_frame:0000000000005BA3                 db    0
.eh_frame:0000000000005BA4                 db  3Ch ; <
.eh_frame:0000000000005BA5                 db    1
.eh_frame:0000000000005BA6                 db    0
.eh_frame:0000000000005BA7                 db    0
.eh_frame:0000000000005BA8                 db  88h
.eh_frame:0000000000005BA9                 db 0C3h
.eh_frame:0000000000005BAA                 db 0FFh
.eh_frame:0000000000005BAB                 db 0FFh
.eh_frame:0000000000005BAC                 db  9Fh
.eh_frame:0000000000005BAD                 db    0
.eh_frame:0000000000005BAE                 db    0
.eh_frame:0000000000005BAF                 db    0
.eh_frame:0000000000005BB0                 db    0
.eh_frame:0000000000005BB1                 db  44h ; D
.eh_frame:0000000000005BB2                 db  0Eh
.eh_frame:0000000000005BB3                 db  10h
.eh_frame:0000000000005BB4                 db  83h
.eh_frame:0000000000005BB5                 db    2
.eh_frame:0000000000005BB6                 db    2
.eh_frame:0000000000005BB7                 db  78h ; x
.eh_frame:0000000000005BB8                 db  0Ah
.eh_frame:0000000000005BB9                 db  0Eh
.eh_frame:0000000000005BBA                 db    8
.eh_frame:0000000000005BBB                 db  41h ; A
.eh_frame:0000000000005BBC                 db  0Bh
.eh_frame:0000000000005BBD                 db    0
.eh_frame:0000000000005BBE                 db    0
.eh_frame:0000000000005BBF                 db    0
.eh_frame:0000000000005BC0                 db  40h ; @
.eh_frame:0000000000005BC1                 db    0
.eh_frame:0000000000005BC2                 db    0
.eh_frame:0000000000005BC3                 db    0
.eh_frame:0000000000005BC4                 db  5Ch ; \
.eh_frame:0000000000005BC5                 db    1
.eh_frame:0000000000005BC6                 db    0
.eh_frame:0000000000005BC7                 db    0
.eh_frame:0000000000005BC8                 db    8
.eh_frame:0000000000005BC9                 db 0C4h
.eh_frame:0000000000005BCA                 db 0FFh
.eh_frame:0000000000005BCB                 db 0FFh
.eh_frame:0000000000005BCC                 db 0E7h
.eh_frame:0000000000005BCD                 db    0
.eh_frame:0000000000005BCE                 db    0
.eh_frame:0000000000005BCF                 db    0
.eh_frame:0000000000005BD0                 db    0
.eh_frame:0000000000005BD1                 db  41h ; A
.eh_frame:0000000000005BD2                 db  0Eh
.eh_frame:0000000000005BD3                 db  10h
.eh_frame:0000000000005BD4                 db  86h
.eh_frame:0000000000005BD5                 db    2
.eh_frame:0000000000005BD6                 db  41h ; A
.eh_frame:0000000000005BD7                 db  0Eh
.eh_frame:0000000000005BD8                 db  18h
.eh_frame:0000000000005BD9                 db  83h
.eh_frame:0000000000005BDA                 db    3
.eh_frame:0000000000005BDB                 db  49h ; I
.eh_frame:0000000000005BDC                 db  0Eh
.eh_frame:0000000000005BDD                 db  20h
.eh_frame:0000000000005BDE                 db  6Eh ; n
.eh_frame:0000000000005BDF                 db  0Ah
.eh_frame:0000000000005BE0                 db  0Eh
.eh_frame:0000000000005BE1                 db  18h
.eh_frame:0000000000005BE2                 db  41h ; A
.eh_frame:0000000000005BE3                 db  0Eh
.eh_frame:0000000000005BE4                 db  10h
.eh_frame:0000000000005BE5                 db  41h ; A
.eh_frame:0000000000005BE6                 db  0Eh
.eh_frame:0000000000005BE7                 db    8
.eh_frame:0000000000005BE8                 db  45h ; E
.eh_frame:0000000000005BE9                 db  0Bh
.eh_frame:0000000000005BEA                 db    2
.eh_frame:0000000000005BEB                 db  4Ah ; J
.eh_frame:0000000000005BEC                 db  0Ah
.eh_frame:0000000000005BED                 db  0Eh
.eh_frame:0000000000005BEE                 db  18h
.eh_frame:0000000000005BEF                 db  41h ; A
.eh_frame:0000000000005BF0                 db  0Eh
.eh_frame:0000000000005BF1                 db  10h
.eh_frame:0000000000005BF2                 db  41h ; A
.eh_frame:0000000000005BF3                 db  0Eh
.eh_frame:0000000000005BF4                 db    8
.eh_frame:0000000000005BF5                 db  44h ; D
.eh_frame:0000000000005BF6                 db  0Bh
.eh_frame:0000000000005BF7                 db    2
.eh_frame:0000000000005BF8                 db  54h ; T
.eh_frame:0000000000005BF9                 db  0Eh
.eh_frame:0000000000005BFA                 db  18h
.eh_frame:0000000000005BFB                 db  41h ; A
.eh_frame:0000000000005BFC                 db  0Eh
.eh_frame:0000000000005BFD                 db  10h
.eh_frame:0000000000005BFE                 db  41h ; A
.eh_frame:0000000000005BFF                 db  0Eh
.eh_frame:0000000000005C00                 db    8
.eh_frame:0000000000005C01                 db    0
.eh_frame:0000000000005C02                 db    0
.eh_frame:0000000000005C03                 db    0
.eh_frame:0000000000005C04                 db  74h ; t
.eh_frame:0000000000005C05                 db    0
.eh_frame:0000000000005C06                 db    0
.eh_frame:0000000000005C07                 db    0
.eh_frame:0000000000005C08                 db 0A0h
.eh_frame:0000000000005C09                 db    1
.eh_frame:0000000000005C0A                 db    0
.eh_frame:0000000000005C0B                 db    0
.eh_frame:0000000000005C0C                 db 0B4h
.eh_frame:0000000000005C0D                 db 0C4h
.eh_frame:0000000000005C0E                 db 0FFh
.eh_frame:0000000000005C0F                 db 0FFh
.eh_frame:0000000000005C10                 db  34h ; 4
.eh_frame:0000000000005C11                 db  12h
.eh_frame:0000000000005C12                 db    0
.eh_frame:0000000000005C13                 db    0
.eh_frame:0000000000005C14                 db    0
.eh_frame:0000000000005C15                 db  42h ; B
.eh_frame:0000000000005C16                 db  0Eh
.eh_frame:0000000000005C17                 db  10h
.eh_frame:0000000000005C18                 db  8Fh
.eh_frame:0000000000005C19                 db    2
.eh_frame:0000000000005C1A                 db  42h ; B
.eh_frame:0000000000005C1B                 db  0Eh
.eh_frame:0000000000005C1C                 db  18h
.eh_frame:0000000000005C1D                 db  8Eh
.eh_frame:0000000000005C1E                 db    3
.eh_frame:0000000000005C1F                 db  45h ; E
.eh_frame:0000000000005C20                 db  0Eh
.eh_frame:0000000000005C21                 db  20h
.eh_frame:0000000000005C22                 db  8Dh
.eh_frame:0000000000005C23                 db    4
.eh_frame:0000000000005C24                 db  42h ; B
.eh_frame:0000000000005C25                 db  0Eh
.eh_frame:0000000000005C26                 db  28h ; (
.eh_frame:0000000000005C27                 db  8Ch
.eh_frame:0000000000005C28                 db    5
.eh_frame:0000000000005C29                 db  44h ; D
.eh_frame:0000000000005C2A                 db  0Eh
.eh_frame:0000000000005C2B                 db  30h ; 0
.eh_frame:0000000000005C2C                 db  86h
.eh_frame:0000000000005C2D                 db    6
.eh_frame:0000000000005C2E                 db  41h ; A
.eh_frame:0000000000005C2F                 db  0Eh
.eh_frame:0000000000005C30                 db  38h ; 8
.eh_frame:0000000000005C31                 db  83h
.eh_frame:0000000000005C32                 db    7
.eh_frame:0000000000005C33                 db  53h ; S
.eh_frame:0000000000005C34                 db  0Eh
.eh_frame:0000000000005C35                 db 0F0h
.eh_frame:0000000000005C36                 db    1
.eh_frame:0000000000005C37                 db    3
.eh_frame:0000000000005C38                 db  81h
.eh_frame:0000000000005C39                 db  0Bh
.eh_frame:0000000000005C3A                 db  0Eh
.eh_frame:0000000000005C3B                 db 0F8h
.eh_frame:0000000000005C3C                 db    1
.eh_frame:0000000000005C3D                 db  4Ah ; J
.eh_frame:0000000000005C3E                 db  0Eh
.eh_frame:0000000000005C3F                 db  80h
.eh_frame:0000000000005C40                 db    2
.eh_frame:0000000000005C41                 db  44h ; D
.eh_frame:0000000000005C42                 db  0Eh
.eh_frame:0000000000005C43                 db  88h
.eh_frame:0000000000005C44                 db    2
.eh_frame:0000000000005C45                 db  45h ; E
.eh_frame:0000000000005C46                 db  0Eh
.eh_frame:0000000000005C47                 db  90h
.eh_frame:0000000000005C48                 db    2
.eh_frame:0000000000005C49                 db  5Fh ; _
.eh_frame:0000000000005C4A                 db  0Eh
.eh_frame:0000000000005C4B                 db 0F0h
.eh_frame:0000000000005C4C                 db    1
.eh_frame:0000000000005C4D                 db  64h ; d
.eh_frame:0000000000005C4E                 db  0Ah
.eh_frame:0000000000005C4F                 db  0Eh
.eh_frame:0000000000005C50                 db  38h ; 8
.eh_frame:0000000000005C51                 db  41h ; A
.eh_frame:0000000000005C52                 db  0Eh
.eh_frame:0000000000005C53                 db  30h ; 0
.eh_frame:0000000000005C54                 db  41h ; A
.eh_frame:0000000000005C55                 db  0Eh
.eh_frame:0000000000005C56                 db  28h ; (
.eh_frame:0000000000005C57                 db  42h ; B
.eh_frame:0000000000005C58                 db  0Eh
.eh_frame:0000000000005C59                 db  20h
.eh_frame:0000000000005C5A                 db  42h ; B
.eh_frame:0000000000005C5B                 db  0Eh
.eh_frame:0000000000005C5C                 db  18h
.eh_frame:0000000000005C5D                 db  42h ; B
.eh_frame:0000000000005C5E                 db  0Eh
.eh_frame:0000000000005C5F                 db  10h
.eh_frame:0000000000005C60                 db  42h ; B
.eh_frame:0000000000005C61                 db  0Eh
.eh_frame:0000000000005C62                 db    8
.eh_frame:0000000000005C63                 db  44h ; D
.eh_frame:0000000000005C64                 db  0Bh
.eh_frame:0000000000005C65                 db    3
.eh_frame:0000000000005C66                 db  99h
.eh_frame:0000000000005C67                 db    5
.eh_frame:0000000000005C68                 db  0Eh
.eh_frame:0000000000005C69                 db 0F8h
.eh_frame:0000000000005C6A                 db    1
.eh_frame:0000000000005C6B                 db  4Dh ; M
.eh_frame:0000000000005C6C                 db  0Eh
.eh_frame:0000000000005C6D                 db  80h
.eh_frame:0000000000005C6E                 db    2
.eh_frame:0000000000005C6F                 db  44h ; D
.eh_frame:0000000000005C70                 db  0Eh
.eh_frame:0000000000005C71                 db  88h
.eh_frame:0000000000005C72                 db    2
.eh_frame:0000000000005C73                 db  47h ; G
.eh_frame:0000000000005C74                 db  0Eh
.eh_frame:0000000000005C75                 db  90h
.eh_frame:0000000000005C76                 db    2
.eh_frame:0000000000005C77                 db  5Bh ; [
.eh_frame:0000000000005C78                 db  0Eh
.eh_frame:0000000000005C79                 db 0F0h
.eh_frame:0000000000005C7A                 db    1
.eh_frame:0000000000005C7B                 db    0
.eh_frame:0000000000005C7C                 db  68h ; h
.eh_frame:0000000000005C7D                 db    0
.eh_frame:0000000000005C7E                 db    0
.eh_frame:0000000000005C7F                 db    0
.eh_frame:0000000000005C80                 db  18h
.eh_frame:0000000000005C81                 db    2
.eh_frame:0000000000005C82                 db    0
.eh_frame:0000000000005C83                 db    0
.eh_frame:0000000000005C84                 db  7Ch ; |
.eh_frame:0000000000005C85                 db 0D6h
.eh_frame:0000000000005C86                 db 0FFh
.eh_frame:0000000000005C87                 db 0FFh
.eh_frame:0000000000005C88                 db 0ABh
.eh_frame:0000000000005C89                 db    1
.eh_frame:0000000000005C8A                 db    0
.eh_frame:0000000000005C8B                 db    0
.eh_frame:0000000000005C8C                 db    0
.eh_frame:0000000000005C8D                 db  42h ; B
.eh_frame:0000000000005C8E                 db  0Eh
.eh_frame:0000000000005C8F                 db  10h
.eh_frame:0000000000005C90                 db  8Fh
.eh_frame:0000000000005C91                 db    2
.eh_frame:0000000000005C92                 db  42h ; B
.eh_frame:0000000000005C93                 db  0Eh
.eh_frame:0000000000005C94                 db  18h
.eh_frame:0000000000005C95                 db  8Eh
.eh_frame:0000000000005C96                 db    3
.eh_frame:0000000000005C97                 db  45h ; E
.eh_frame:0000000000005C98                 db  0Eh
.eh_frame:0000000000005C99                 db  20h
.eh_frame:0000000000005C9A                 db  8Dh
.eh_frame:0000000000005C9B                 db    4
.eh_frame:0000000000005C9C                 db  42h ; B
.eh_frame:0000000000005C9D                 db  0Eh
.eh_frame:0000000000005C9E                 db  28h ; (
.eh_frame:0000000000005C9F                 db  8Ch
.eh_frame:0000000000005CA0                 db    5
.eh_frame:0000000000005CA1                 db  44h ; D
.eh_frame:0000000000005CA2                 db  0Eh
.eh_frame:0000000000005CA3                 db  30h ; 0
.eh_frame:0000000000005CA4                 db  86h
.eh_frame:0000000000005CA5                 db    6
.eh_frame:0000000000005CA6                 db  41h ; A
.eh_frame:0000000000005CA7                 db  0Eh
.eh_frame:0000000000005CA8                 db  38h ; 8
.eh_frame:0000000000005CA9                 db  83h
.eh_frame:0000000000005CAA                 db    7
.eh_frame:0000000000005CAB                 db  47h ; G
.eh_frame:0000000000005CAC                 db  0Eh
.eh_frame:0000000000005CAD                 db  60h ; `
.eh_frame:0000000000005CAE                 db    2
.eh_frame:0000000000005CAF                 db  99h
.eh_frame:0000000000005CB0                 db  0Eh
.eh_frame:0000000000005CB1                 db  68h ; h
.eh_frame:0000000000005CB2                 db  5Fh ; _
.eh_frame:0000000000005CB3                 db  0Eh
.eh_frame:0000000000005CB4                 db  70h ; p
.eh_frame:0000000000005CB5                 db  46h ; F
.eh_frame:0000000000005CB6                 db  0Eh
.eh_frame:0000000000005CB7                 db  78h ; x
.eh_frame:0000000000005CB8                 db  42h ; B
.eh_frame:0000000000005CB9                 db  0Eh
.eh_frame:0000000000005CBA                 db  80h
.eh_frame:0000000000005CBB                 db    1
.eh_frame:0000000000005CBC                 db  59h ; Y
.eh_frame:0000000000005CBD                 db  0Eh
.eh_frame:0000000000005CBE                 db  60h ; `
.eh_frame:0000000000005CBF                 db    2
.eh_frame:0000000000005CC0                 db  40h ; @
.eh_frame:0000000000005CC1                 db  0Eh
.eh_frame:0000000000005CC2                 db  68h ; h
.eh_frame:0000000000005CC3                 db  4Bh ; K
.eh_frame:0000000000005CC4                 db  0Eh
.eh_frame:0000000000005CC5                 db  70h ; p
.eh_frame:0000000000005CC6                 db  43h ; C
.eh_frame:0000000000005CC7                 db  0Eh
.eh_frame:0000000000005CC8                 db  78h ; x
.eh_frame:0000000000005CC9                 db  45h ; E
.eh_frame:0000000000005CCA                 db  0Eh
.eh_frame:0000000000005CCB                 db  80h
.eh_frame:0000000000005CCC                 db    1
.eh_frame:0000000000005CCD                 db  5Eh ; ^
.eh_frame:0000000000005CCE                 db  0Eh
.eh_frame:0000000000005CCF                 db  60h ; `
.eh_frame:0000000000005CD0                 db  4Ch ; L
.eh_frame:0000000000005CD1                 db  0Ah
.eh_frame:0000000000005CD2                 db  0Eh
.eh_frame:0000000000005CD3                 db  38h ; 8
.eh_frame:0000000000005CD4                 db  44h ; D
.eh_frame:0000000000005CD5                 db  0Eh
.eh_frame:0000000000005CD6                 db  30h ; 0
.eh_frame:0000000000005CD7                 db  41h ; A
.eh_frame:0000000000005CD8                 db  0Eh
.eh_frame:0000000000005CD9                 db  28h ; (
.eh_frame:0000000000005CDA                 db  42h ; B
.eh_frame:0000000000005CDB                 db  0Eh
.eh_frame:0000000000005CDC                 db  20h
.eh_frame:0000000000005CDD                 db  42h ; B
.eh_frame:0000000000005CDE                 db  0Eh
.eh_frame:0000000000005CDF                 db  18h
.eh_frame:0000000000005CE0                 db  42h ; B
.eh_frame:0000000000005CE1                 db  0Eh
.eh_frame:0000000000005CE2                 db  10h
.eh_frame:0000000000005CE3                 db  42h ; B
.eh_frame:0000000000005CE4                 db  0Eh
.eh_frame:0000000000005CE5                 db    8
.eh_frame:0000000000005CE6                 db  46h ; F
.eh_frame:0000000000005CE7                 db  0Bh
.eh_frame:0000000000005CE8                 db  28h ; (
.eh_frame:0000000000005CE9                 db    0
.eh_frame:0000000000005CEA                 db    0
.eh_frame:0000000000005CEB                 db    0
.eh_frame:0000000000005CEC                 db  84h
.eh_frame:0000000000005CED                 db    2
.eh_frame:0000000000005CEE                 db    0
.eh_frame:0000000000005CEF                 db    0
.eh_frame:0000000000005CF0                 db 0C0h
.eh_frame:0000000000005CF1                 db 0D7h
.eh_frame:0000000000005CF2                 db 0FFh
.eh_frame:0000000000005CF3                 db 0FFh
.eh_frame:0000000000005CF4                 db  36h ; 6
.eh_frame:0000000000005CF5                 db    0
.eh_frame:0000000000005CF6                 db    0
.eh_frame:0000000000005CF7                 db    0
.eh_frame:0000000000005CF8                 db    0
.eh_frame:0000000000005CF9                 db  42h ; B
.eh_frame:0000000000005CFA                 db  0Eh
.eh_frame:0000000000005CFB                 db  10h
.eh_frame:0000000000005CFC                 db  8Ch
.eh_frame:0000000000005CFD                 db    2
.eh_frame:0000000000005CFE                 db  41h ; A
.eh_frame:0000000000005CFF                 db  0Eh
.eh_frame:0000000000005D00                 db  18h
.eh_frame:0000000000005D01                 db  86h
.eh_frame:0000000000005D02                 db    3
.eh_frame:0000000000005D03                 db  41h ; A
.eh_frame:0000000000005D04                 db  0Eh
.eh_frame:0000000000005D05                 db  20h
.eh_frame:0000000000005D06                 db  83h
.eh_frame:0000000000005D07                 db    4
.eh_frame:0000000000005D08                 db  6Eh ; n
.eh_frame:0000000000005D09                 db  0Eh
.eh_frame:0000000000005D0A                 db  18h
.eh_frame:0000000000005D0B                 db  41h ; A
.eh_frame:0000000000005D0C                 db  0Eh
.eh_frame:0000000000005D0D                 db  10h
.eh_frame:0000000000005D0E                 db  42h ; B
.eh_frame:0000000000005D0F                 db  0Eh
.eh_frame:0000000000005D10                 db    8
.eh_frame:0000000000005D11                 db    0
.eh_frame:0000000000005D12                 db    0
.eh_frame:0000000000005D13                 db    0
.eh_frame:0000000000005D14                 db  10h
.eh_frame:0000000000005D15                 db    0
.eh_frame:0000000000005D16                 db    0
.eh_frame:0000000000005D17                 db    0
.eh_frame:0000000000005D18                 db 0B0h
.eh_frame:0000000000005D19                 db    2
.eh_frame:0000000000005D1A                 db    0
.eh_frame:0000000000005D1B                 db    0
.eh_frame:0000000000005D1C                 db 0D4h
.eh_frame:0000000000005D1D                 db 0D7h
.eh_frame:0000000000005D1E                 db 0FFh
.eh_frame:0000000000005D1F                 db 0FFh
.eh_frame:0000000000005D20                 db  11h
.eh_frame:0000000000005D21                 db    0
.eh_frame:0000000000005D22                 db    0
.eh_frame:0000000000005D23                 db    0
.eh_frame:0000000000005D24                 db    0
.eh_frame:0000000000005D25                 db    0
.eh_frame:0000000000005D26                 db    0
.eh_frame:0000000000005D27                 db    0
.eh_frame:0000000000005D28                 db  10h
.eh_frame:0000000000005D29                 db    0
.eh_frame:0000000000005D2A                 db    0
.eh_frame:0000000000005D2B                 db    0
.eh_frame:0000000000005D2C                 db 0C4h
.eh_frame:0000000000005D2D                 db    2
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db 0E0h
.eh_frame:0000000000005D31                 db 0D7h
.eh_frame:0000000000005D32                 db 0FFh
.eh_frame:0000000000005D33                 db 0FFh
.eh_frame:0000000000005D34                 db  11h
.eh_frame:0000000000005D35                 db    0
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db    0
.eh_frame:0000000000005D39                 db    0
.eh_frame:0000000000005D3A                 db    0
.eh_frame:0000000000005D3B                 db    0
.eh_frame:0000000000005D3C                 db  10h
.eh_frame:0000000000005D3D                 db    0
.eh_frame:0000000000005D3E                 db    0
.eh_frame:0000000000005D3F                 db    0
.eh_frame:0000000000005D40                 db 0D8h
.eh_frame:0000000000005D41                 db    2
.eh_frame:0000000000005D42                 db    0
.eh_frame:0000000000005D43                 db    0
.eh_frame:0000000000005D44                 db 0ECh
.eh_frame:0000000000005D45                 db 0D7h
.eh_frame:0000000000005D46                 db 0FFh
.eh_frame:0000000000005D47                 db 0FFh
.eh_frame:0000000000005D48                 db  35h ; 5
.eh_frame:0000000000005D49                 db    0
.eh_frame:0000000000005D4A                 db    0
.eh_frame:0000000000005D4B                 db    0
.eh_frame:0000000000005D4C                 db    0
.eh_frame:0000000000005D4D                 db    0
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db  10h
.eh_frame:0000000000005D51                 db    0
.eh_frame:0000000000005D52                 db    0
.eh_frame:0000000000005D53                 db    0
.eh_frame:0000000000005D54                 db 0ECh
.eh_frame:0000000000005D55                 db    2
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db  18h
.eh_frame:0000000000005D59                 db 0D8h
.eh_frame:0000000000005D5A                 db 0FFh
.eh_frame:0000000000005D5B                 db 0FFh
.eh_frame:0000000000005D5C                 db  15h
.eh_frame:0000000000005D5D                 db    0
.eh_frame:0000000000005D5E                 db    0
.eh_frame:0000000000005D5F                 db    0
.eh_frame:0000000000005D60                 db    0
.eh_frame:0000000000005D61                 db    0
.eh_frame:0000000000005D62                 db    0
.eh_frame:0000000000005D63                 db    0
.eh_frame:0000000000005D64                 db  10h
.eh_frame:0000000000005D65                 db    0
.eh_frame:0000000000005D66                 db    0
.eh_frame:0000000000005D67                 db    0
.eh_frame:0000000000005D68                 db    0
.eh_frame:0000000000005D69                 db    3
.eh_frame:0000000000005D6A                 db    0
.eh_frame:0000000000005D6B                 db    0
.eh_frame:0000000000005D6C                 db  24h ; $
.eh_frame:0000000000005D6D                 db 0D8h
.eh_frame:0000000000005D6E                 db 0FFh
.eh_frame:0000000000005D6F                 db 0FFh
.eh_frame:0000000000005D70                 db  30h ; 0
.eh_frame:0000000000005D71                 db    0
.eh_frame:0000000000005D72                 db    0
.eh_frame:0000000000005D73                 db    0
.eh_frame:0000000000005D74                 db    0
.eh_frame:0000000000005D75                 db  6Bh ; k
.eh_frame:0000000000005D76                 db  0Eh
.eh_frame:0000000000005D77                 db  10h
.eh_frame:0000000000005D78                 db  50h ; P
.eh_frame:0000000000005D79                 db    0
.eh_frame:0000000000005D7A                 db    0
.eh_frame:0000000000005D7B                 db    0
.eh_frame:0000000000005D7C                 db  14h
.eh_frame:0000000000005D7D                 db    3
.eh_frame:0000000000005D7E                 db    0
.eh_frame:0000000000005D7F                 db    0
.eh_frame:0000000000005D80                 db  40h ; @
.eh_frame:0000000000005D81                 db 0D8h
.eh_frame:0000000000005D82                 db 0FFh
.eh_frame:0000000000005D83                 db 0FFh
.eh_frame:0000000000005D84                 db  74h ; t
.eh_frame:0000000000005D85                 db    0
.eh_frame:0000000000005D86                 db    0
.eh_frame:0000000000005D87                 db    0
.eh_frame:0000000000005D88                 db    0
.eh_frame:0000000000005D89                 db  42h ; B
.eh_frame:0000000000005D8A                 db  0Eh
.eh_frame:0000000000005D8B                 db  10h
.eh_frame:0000000000005D8C                 db  8Fh
.eh_frame:0000000000005D8D                 db    2
.eh_frame:0000000000005D8E                 db  42h ; B
.eh_frame:0000000000005D8F                 db  0Eh
.eh_frame:0000000000005D90                 db  18h
.eh_frame:0000000000005D91                 db  8Eh
.eh_frame:0000000000005D92                 db    3
.eh_frame:0000000000005D93                 db  49h ; I
.eh_frame:0000000000005D94                 db  0Eh
.eh_frame:0000000000005D95                 db  20h
.eh_frame:0000000000005D96                 db  8Dh
.eh_frame:0000000000005D97                 db    4
.eh_frame:0000000000005D98                 db  42h ; B
.eh_frame:0000000000005D99                 db  0Eh
.eh_frame:0000000000005D9A                 db  28h ; (
.eh_frame:0000000000005D9B                 db  8Ch
.eh_frame:0000000000005D9C                 db    5
.eh_frame:0000000000005D9D                 db  44h ; D
.eh_frame:0000000000005D9E                 db  0Eh
.eh_frame:0000000000005D9F                 db  30h ; 0
.eh_frame:0000000000005DA0                 db  86h
.eh_frame:0000000000005DA1                 db    6
.eh_frame:0000000000005DA2                 db  41h ; A
.eh_frame:0000000000005DA3                 db  0Eh
.eh_frame:0000000000005DA4                 db  38h ; 8
.eh_frame:0000000000005DA5                 db  83h
.eh_frame:0000000000005DA6                 db    7
.eh_frame:0000000000005DA7                 db  4Dh ; M
.eh_frame:0000000000005DA8                 db  0Eh
.eh_frame:0000000000005DA9                 db  50h ; P
.eh_frame:0000000000005DAA                 db  5Fh ; _
.eh_frame:0000000000005DAB                 db  0Eh
.eh_frame:0000000000005DAC                 db  58h ; X
.eh_frame:0000000000005DAD                 db  47h ; G
.eh_frame:0000000000005DAE                 db  0Eh
.eh_frame:0000000000005DAF                 db  60h ; `
.eh_frame:0000000000005DB0                 db  46h ; F
.eh_frame:0000000000005DB1                 db  0Eh
.eh_frame:0000000000005DB2                 db  68h ; h
.eh_frame:0000000000005DB3                 db  44h ; D
.eh_frame:0000000000005DB4                 db  0Eh
.eh_frame:0000000000005DB5                 db  70h ; p
.eh_frame:0000000000005DB6                 db  58h ; X
.eh_frame:0000000000005DB7                 db  0Eh
.eh_frame:0000000000005DB8                 db  38h ; 8
.eh_frame:0000000000005DB9                 db  41h ; A
.eh_frame:0000000000005DBA                 db  0Eh
.eh_frame:0000000000005DBB                 db  30h ; 0
.eh_frame:0000000000005DBC                 db  41h ; A
.eh_frame:0000000000005DBD                 db  0Eh
.eh_frame:0000000000005DBE                 db  28h ; (
.eh_frame:0000000000005DBF                 db  42h ; B
.eh_frame:0000000000005DC0                 db  0Eh
.eh_frame:0000000000005DC1                 db  20h
.eh_frame:0000000000005DC2                 db  42h ; B
.eh_frame:0000000000005DC3                 db  0Eh
.eh_frame:0000000000005DC4                 db  18h
.eh_frame:0000000000005DC5                 db  42h ; B
.eh_frame:0000000000005DC6                 db  0Eh
.eh_frame:0000000000005DC7                 db  10h
.eh_frame:0000000000005DC8                 db  42h ; B
.eh_frame:0000000000005DC9                 db  0Eh
.eh_frame:0000000000005DCA                 db    8
.eh_frame:0000000000005DCB                 db    0
.eh_frame:0000000000005DCC                 db  68h ; h
.eh_frame:0000000000005DCD                 db    0
.eh_frame:0000000000005DCE                 db    0
.eh_frame:0000000000005DCF                 db    0
.eh_frame:0000000000005DD0                 db  68h ; h
.eh_frame:0000000000005DD1                 db    3
.eh_frame:0000000000005DD2                 db    0
.eh_frame:0000000000005DD3                 db    0
.eh_frame:0000000000005DD4                 db  6Ch ; l
.eh_frame:0000000000005DD5                 db 0D8h
.eh_frame:0000000000005DD6                 db 0FFh
.eh_frame:0000000000005DD7                 db 0FFh
.eh_frame:0000000000005DD8                 db 0E3h
.eh_frame:0000000000005DD9                 db    0
.eh_frame:0000000000005DDA                 db    0
.eh_frame:0000000000005DDB                 db    0
.eh_frame:0000000000005DDC                 db    0
.eh_frame:0000000000005DDD                 db  42h ; B
.eh_frame:0000000000005DDE                 db  0Eh
.eh_frame:0000000000005DDF                 db  10h
.eh_frame:0000000000005DE0                 db  8Fh
.eh_frame:0000000000005DE1                 db    2
.eh_frame:0000000000005DE2                 db  42h ; B
.eh_frame:0000000000005DE3                 db  0Eh
.eh_frame:0000000000005DE4                 db  18h
.eh_frame:0000000000005DE5                 db  8Eh
.eh_frame:0000000000005DE6                 db    3
.eh_frame:0000000000005DE7                 db  49h ; I
.eh_frame:0000000000005DE8                 db  0Eh
.eh_frame:0000000000005DE9                 db  20h
.eh_frame:0000000000005DEA                 db  8Dh
.eh_frame:0000000000005DEB                 db    4
.eh_frame:0000000000005DEC                 db  42h ; B
.eh_frame:0000000000005DED                 db  0Eh
.eh_frame:0000000000005DEE                 db  28h ; (
.eh_frame:0000000000005DEF                 db  8Ch
.eh_frame:0000000000005DF0                 db    5
.eh_frame:0000000000005DF1                 db  44h ; D
.eh_frame:0000000000005DF2                 db  0Eh
.eh_frame:0000000000005DF3                 db  30h ; 0
.eh_frame:0000000000005DF4                 db  86h
.eh_frame:0000000000005DF5                 db    6
.eh_frame:0000000000005DF6                 db  41h ; A
.eh_frame:0000000000005DF7                 db  0Eh
.eh_frame:0000000000005DF8                 db  38h ; 8
.eh_frame:0000000000005DF9                 db  83h
.eh_frame:0000000000005DFA                 db    7
.eh_frame:0000000000005DFB                 db  4Dh ; M
.eh_frame:0000000000005DFC                 db  0Eh
.eh_frame:0000000000005DFD                 db  70h ; p
.eh_frame:0000000000005DFE                 db  65h ; e
.eh_frame:0000000000005DFF                 db  0Eh
.eh_frame:0000000000005E00                 db  78h ; x
.eh_frame:0000000000005E01                 db  4Dh ; M
.eh_frame:0000000000005E02                 db  0Eh
.eh_frame:0000000000005E03                 db  80h
.eh_frame:0000000000005E04                 db    1
.eh_frame:0000000000005E05                 db  46h ; F
.eh_frame:0000000000005E06                 db  0Eh
.eh_frame:0000000000005E07                 db  88h
.eh_frame:0000000000005E08                 db    1
.eh_frame:0000000000005E09                 db  42h ; B
.eh_frame:0000000000005E0A                 db  0Eh
.eh_frame:0000000000005E0B                 db  90h
.eh_frame:0000000000005E0C                 db    1
.eh_frame:0000000000005E0D                 db  5Eh ; ^
.eh_frame:0000000000005E0E                 db  0Eh
.eh_frame:0000000000005E0F                 db  70h ; p
.eh_frame:0000000000005E10                 db  56h ; V
.eh_frame:0000000000005E11                 db  0Eh
.eh_frame:0000000000005E12                 db  78h ; x
.eh_frame:0000000000005E13                 db  43h ; C
.eh_frame:0000000000005E14                 db  0Eh
.eh_frame:0000000000005E15                 db  80h
.eh_frame:0000000000005E16                 db    1
.eh_frame:0000000000005E17                 db  43h ; C
.eh_frame:0000000000005E18                 db  0Eh
.eh_frame:0000000000005E19                 db  88h
.eh_frame:0000000000005E1A                 db    1
.eh_frame:0000000000005E1B                 db  56h ; V
.eh_frame:0000000000005E1C                 db  0Eh
.eh_frame:0000000000005E1D                 db  90h
.eh_frame:0000000000005E1E                 db    1
.eh_frame:0000000000005E1F                 db  52h ; R
.eh_frame:0000000000005E20                 db  0Eh
.eh_frame:0000000000005E21                 db  70h ; p
.eh_frame:0000000000005E22                 db  5Bh ; [
.eh_frame:0000000000005E23                 db  0Eh
.eh_frame:0000000000005E24                 db  38h ; 8
.eh_frame:0000000000005E25                 db  41h ; A
.eh_frame:0000000000005E26                 db  0Eh
.eh_frame:0000000000005E27                 db  30h ; 0
.eh_frame:0000000000005E28                 db  41h ; A
.eh_frame:0000000000005E29                 db  0Eh
.eh_frame:0000000000005E2A                 db  28h ; (
.eh_frame:0000000000005E2B                 db  42h ; B
.eh_frame:0000000000005E2C                 db  0Eh
.eh_frame:0000000000005E2D                 db  20h
.eh_frame:0000000000005E2E                 db  42h ; B
.eh_frame:0000000000005E2F                 db  0Eh
.eh_frame:0000000000005E30                 db  18h
.eh_frame:0000000000005E31                 db  42h ; B
.eh_frame:0000000000005E32                 db  0Eh
.eh_frame:0000000000005E33                 db  10h
.eh_frame:0000000000005E34                 db  42h ; B
.eh_frame:0000000000005E35                 db  0Eh
.eh_frame:0000000000005E36                 db    8
.eh_frame:0000000000005E37                 db    0
.eh_frame:0000000000005E38                 db  10h
.eh_frame:0000000000005E39                 db    0
.eh_frame:0000000000005E3A                 db    0
.eh_frame:0000000000005E3B                 db    0
.eh_frame:0000000000005E3C                 db 0D4h
.eh_frame:0000000000005E3D                 db    3
.eh_frame:0000000000005E3E                 db    0
.eh_frame:0000000000005E3F                 db    0
.eh_frame:0000000000005E40                 db 0F0h
.eh_frame:0000000000005E41                 db 0D8h
.eh_frame:0000000000005E42                 db 0FFh
.eh_frame:0000000000005E43                 db 0FFh
.eh_frame:0000000000005E44                 db  0Ah
.eh_frame:0000000000005E45                 db    0
.eh_frame:0000000000005E46                 db    0
.eh_frame:0000000000005E47                 db    0
.eh_frame:0000000000005E48                 db    0
.eh_frame:0000000000005E49                 db    0
.eh_frame:0000000000005E4A                 db    0
.eh_frame:0000000000005E4B                 db    0
.eh_frame:0000000000005E4C                 db  28h ; (
.eh_frame:0000000000005E4D                 db    0
.eh_frame:0000000000005E4E                 db    0
.eh_frame:0000000000005E4F                 db    0
.eh_frame:0000000000005E50                 db 0E8h
.eh_frame:0000000000005E51                 db    3
.eh_frame:0000000000005E52                 db    0
.eh_frame:0000000000005E53                 db    0
.eh_frame:0000000000005E54                 db 0ECh
.eh_frame:0000000000005E55                 db 0D8h
.eh_frame:0000000000005E56                 db 0FFh
.eh_frame:0000000000005E57                 db 0FFh
.eh_frame:0000000000005E58                 db  93h
.eh_frame:0000000000005E59                 db    0
.eh_frame:0000000000005E5A                 db    0
.eh_frame:0000000000005E5B                 db    0
.eh_frame:0000000000005E5C                 db    0
.eh_frame:0000000000005E5D                 db  48h ; H
.eh_frame:0000000000005E5E                 db  0Eh
.eh_frame:0000000000005E5F                 db  10h
.eh_frame:0000000000005E60                 db  8Ch
.eh_frame:0000000000005E61                 db    2
.eh_frame:0000000000005E62                 db  48h ; H
.eh_frame:0000000000005E63                 db  0Eh
.eh_frame:0000000000005E64                 db  18h
.eh_frame:0000000000005E65                 db  86h
.eh_frame:0000000000005E66                 db    3
.eh_frame:0000000000005E67                 db  41h ; A
.eh_frame:0000000000005E68                 db  0Eh
.eh_frame:0000000000005E69                 db  20h
.eh_frame:0000000000005E6A                 db  83h
.eh_frame:0000000000005E6B                 db    4
.eh_frame:0000000000005E6C                 db    2
.eh_frame:0000000000005E6D                 db  74h ; t
.eh_frame:0000000000005E6E                 db  0Eh
.eh_frame:0000000000005E6F                 db  18h
.eh_frame:0000000000005E70                 db  4Bh ; K
.eh_frame:0000000000005E71                 db  0Eh
.eh_frame:0000000000005E72                 db  10h
.eh_frame:0000000000005E73                 db  42h ; B
.eh_frame:0000000000005E74                 db  0Eh
.eh_frame:0000000000005E75                 db    8
.eh_frame:0000000000005E76                 db    0
.eh_frame:0000000000005E77                 db    0
.eh_frame:0000000000005E78                 db  10h
.eh_frame:0000000000005E79                 db    0
.eh_frame:0000000000005E7A                 db    0
.eh_frame:0000000000005E7B                 db    0
.eh_frame:0000000000005E7C                 db  14h
.eh_frame:0000000000005E7D                 db    4
.eh_frame:0000000000005E7E                 db    0
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db  60h ; `
.eh_frame:0000000000005E81                 db 0D9h
.eh_frame:0000000000005E82                 db 0FFh
.eh_frame:0000000000005E83                 db 0FFh
.eh_frame:0000000000005E84                 db  13h
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db    0
.eh_frame:0000000000005E89                 db    0
.eh_frame:0000000000005E8A                 db    0
.eh_frame:0000000000005E8B                 db    0
.eh_frame:0000000000005E8C                 db  10h
.eh_frame:0000000000005E8D                 db    0
.eh_frame:0000000000005E8E                 db    0
.eh_frame:0000000000005E8F                 db    0
.eh_frame:0000000000005E90                 db  28h ; (
.eh_frame:0000000000005E91                 db    4
.eh_frame:0000000000005E92                 db    0
.eh_frame:0000000000005E93                 db    0
.eh_frame:0000000000005E94                 db  6Ch ; l
.eh_frame:0000000000005E95                 db 0D9h
.eh_frame:0000000000005E96                 db 0FFh
.eh_frame:0000000000005E97                 db 0FFh
.eh_frame:0000000000005E98                 db  0Ch
.eh_frame:0000000000005E99                 db    0
.eh_frame:0000000000005E9A                 db    0
.eh_frame:0000000000005E9B                 db    0
.eh_frame:0000000000005E9C                 db    0
.eh_frame:0000000000005E9D                 db    0
.eh_frame:0000000000005E9E                 db    0
.eh_frame:0000000000005E9F                 db    0
.eh_frame:0000000000005EA0                 db  10h
.eh_frame:0000000000005EA1                 db    0
.eh_frame:0000000000005EA2                 db    0
.eh_frame:0000000000005EA3                 db    0
.eh_frame:0000000000005EA4                 db  3Ch ; <
.eh_frame:0000000000005EA5                 db    4
.eh_frame:0000000000005EA6                 db    0
.eh_frame:0000000000005EA7                 db    0
.eh_frame:0000000000005EA8                 db  68h ; h
.eh_frame:0000000000005EA9                 db 0D9h
.eh_frame:0000000000005EAA                 db 0FFh
.eh_frame:0000000000005EAB                 db 0FFh
.eh_frame:0000000000005EAC                 db  18h
.eh_frame:0000000000005EAD                 db    0
.eh_frame:0000000000005EAE                 db    0
.eh_frame:0000000000005EAF                 db    0
.eh_frame:0000000000005EB0                 db    0
.eh_frame:0000000000005EB1                 db    0
.eh_frame:0000000000005EB2                 db    0
.eh_frame:0000000000005EB3                 db    0
.eh_frame:0000000000005EB4                 db  10h
.eh_frame:0000000000005EB5                 db    0
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db  50h ; P
.eh_frame:0000000000005EB9                 db    4
.eh_frame:0000000000005EBA                 db    0
.eh_frame:0000000000005EBB                 db    0
.eh_frame:0000000000005EBC                 db  74h ; t
.eh_frame:0000000000005EBD                 db 0D9h
.eh_frame:0000000000005EBE                 db 0FFh
.eh_frame:0000000000005EBF                 db 0FFh
.eh_frame:0000000000005EC0                 db  14h
.eh_frame:0000000000005EC1                 db    0
.eh_frame:0000000000005EC2                 db    0
.eh_frame:0000000000005EC3                 db    0
.eh_frame:0000000000005EC4                 db    0
.eh_frame:0000000000005EC5                 db    0
.eh_frame:0000000000005EC6                 db    0
.eh_frame:0000000000005EC7                 db    0
.eh_frame:0000000000005EC8                 db  18h
.eh_frame:0000000000005EC9                 db    0
.eh_frame:0000000000005ECA                 db    0
.eh_frame:0000000000005ECB                 db    0
.eh_frame:0000000000005ECC                 db  64h ; d
.eh_frame:0000000000005ECD                 db    4
.eh_frame:0000000000005ECE                 db    0
.eh_frame:0000000000005ECF                 db    0
.eh_frame:0000000000005ED0                 db  80h
.eh_frame:0000000000005ED1                 db 0D9h
.eh_frame:0000000000005ED2                 db 0FFh
.eh_frame:0000000000005ED3                 db 0FFh
.eh_frame:0000000000005ED4                 db  8Eh
.eh_frame:0000000000005ED5                 db    0
.eh_frame:0000000000005ED6                 db    0
.eh_frame:0000000000005ED7                 db    0
.eh_frame:0000000000005ED8                 db    0
.eh_frame:0000000000005ED9                 db  44h ; D
.eh_frame:0000000000005EDA                 db  0Eh
.eh_frame:0000000000005EDB                 db  50h ; P
.eh_frame:0000000000005EDC                 db    2
.eh_frame:0000000000005EDD                 db  7Fh ; 
.eh_frame:0000000000005EDE                 db  0Ah
.eh_frame:0000000000005EDF                 db  0Eh
.eh_frame:0000000000005EE0                 db    8
.eh_frame:0000000000005EE1                 db  41h ; A
.eh_frame:0000000000005EE2                 db  0Bh
.eh_frame:0000000000005EE3                 db    0
.eh_frame:0000000000005EE4                 db  18h
.eh_frame:0000000000005EE5                 db    0
.eh_frame:0000000000005EE6                 db    0
.eh_frame:0000000000005EE7                 db    0
.eh_frame:0000000000005EE8                 db  80h
.eh_frame:0000000000005EE9                 db    4
.eh_frame:0000000000005EEA                 db    0
.eh_frame:0000000000005EEB                 db    0
.eh_frame:0000000000005EEC                 db 0F4h
.eh_frame:0000000000005EED                 db 0D9h
.eh_frame:0000000000005EEE                 db 0FFh
.eh_frame:0000000000005EEF                 db 0FFh
.eh_frame:0000000000005EF0                 db  8Ah
.eh_frame:0000000000005EF1                 db    0
.eh_frame:0000000000005EF2                 db    0
.eh_frame:0000000000005EF3                 db    0
.eh_frame:0000000000005EF4                 db    0
.eh_frame:0000000000005EF5                 db  44h ; D
.eh_frame:0000000000005EF6                 db  0Eh
.eh_frame:0000000000005EF7                 db  50h ; P
.eh_frame:0000000000005EF8                 db    2
.eh_frame:0000000000005EF9                 db  7Bh ; {
.eh_frame:0000000000005EFA                 db  0Ah
.eh_frame:0000000000005EFB                 db  0Eh
.eh_frame:0000000000005EFC                 db    8
.eh_frame:0000000000005EFD                 db  41h ; A
.eh_frame:0000000000005EFE                 db  0Bh
.eh_frame:0000000000005EFF                 db    0
.eh_frame:0000000000005F00                 db  10h
.eh_frame:0000000000005F01                 db    0
.eh_frame:0000000000005F02                 db    0
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db  9Ch
.eh_frame:0000000000005F05                 db    4
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db  68h ; h
.eh_frame:0000000000005F09                 db 0DAh
.eh_frame:0000000000005F0A                 db 0FFh
.eh_frame:0000000000005F0B                 db 0FFh
.eh_frame:0000000000005F0C                 db  0Ch
.eh_frame:0000000000005F0D                 db    0
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db    0
.eh_frame:0000000000005F11                 db    0
.eh_frame:0000000000005F12                 db    0
.eh_frame:0000000000005F13                 db    0
.eh_frame:0000000000005F14                 db  10h
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db 0B0h
.eh_frame:0000000000005F19                 db    4
.eh_frame:0000000000005F1A                 db    0
.eh_frame:0000000000005F1B                 db    0
.eh_frame:0000000000005F1C                 db  64h ; d
.eh_frame:0000000000005F1D                 db 0DAh
.eh_frame:0000000000005F1E                 db 0FFh
.eh_frame:0000000000005F1F                 db 0FFh
.eh_frame:0000000000005F20                 db  0Fh
.eh_frame:0000000000005F21                 db    0
.eh_frame:0000000000005F22                 db    0
.eh_frame:0000000000005F23                 db    0
.eh_frame:0000000000005F24                 db    0
.eh_frame:0000000000005F25                 db    0
.eh_frame:0000000000005F26                 db    0
.eh_frame:0000000000005F27                 db    0
.eh_frame:0000000000005F28                 db  18h
.eh_frame:0000000000005F29                 db    0
.eh_frame:0000000000005F2A                 db    0
.eh_frame:0000000000005F2B                 db    0
.eh_frame:0000000000005F2C                 db 0C4h
.eh_frame:0000000000005F2D                 db    4
.eh_frame:0000000000005F2E                 db    0
.eh_frame:0000000000005F2F                 db    0
.eh_frame:0000000000005F30                 db  60h ; `
.eh_frame:0000000000005F31                 db 0DAh
.eh_frame:0000000000005F32                 db 0FFh
.eh_frame:0000000000005F33                 db 0FFh
.eh_frame:0000000000005F34                 db  98h
.eh_frame:0000000000005F35                 db    0
.eh_frame:0000000000005F36                 db    0
.eh_frame:0000000000005F37                 db    0
.eh_frame:0000000000005F38                 db    0
.eh_frame:0000000000005F39                 db  44h ; D
.eh_frame:0000000000005F3A                 db  0Eh
.eh_frame:0000000000005F3B                 db  50h ; P
.eh_frame:0000000000005F3C                 db    2
.eh_frame:0000000000005F3D                 db  8Eh
.eh_frame:0000000000005F3E                 db  0Ah
.eh_frame:0000000000005F3F                 db  0Eh
.eh_frame:0000000000005F40                 db    8
.eh_frame:0000000000005F41                 db  41h ; A
.eh_frame:0000000000005F42                 db  0Bh
.eh_frame:0000000000005F43                 db    0
.eh_frame:0000000000005F44                 db  10h
.eh_frame:0000000000005F45                 db    0
.eh_frame:0000000000005F46                 db    0
.eh_frame:0000000000005F47                 db    0
.eh_frame:0000000000005F48                 db 0E0h
.eh_frame:0000000000005F49                 db    4
.eh_frame:0000000000005F4A                 db    0
.eh_frame:0000000000005F4B                 db    0
.eh_frame:0000000000005F4C                 db 0E4h
.eh_frame:0000000000005F4D                 db 0DAh
.eh_frame:0000000000005F4E                 db 0FFh
.eh_frame:0000000000005F4F                 db 0FFh
.eh_frame:0000000000005F50                 db  10h
.eh_frame:0000000000005F51                 db    0
.eh_frame:0000000000005F52                 db    0
.eh_frame:0000000000005F53                 db    0
.eh_frame:0000000000005F54                 db    0
.eh_frame:0000000000005F55                 db    0
.eh_frame:0000000000005F56                 db    0
.eh_frame:0000000000005F57                 db    0
.eh_frame:0000000000005F58                 db  10h
.eh_frame:0000000000005F59                 db    0
.eh_frame:0000000000005F5A                 db    0
.eh_frame:0000000000005F5B                 db    0
.eh_frame:0000000000005F5C                 db 0F4h
.eh_frame:0000000000005F5D                 db    4
.eh_frame:0000000000005F5E                 db    0
.eh_frame:0000000000005F5F                 db    0
.eh_frame:0000000000005F60                 db 0E0h
.eh_frame:0000000000005F61                 db 0DAh
.eh_frame:0000000000005F62                 db 0FFh
.eh_frame:0000000000005F63                 db 0FFh
.eh_frame:0000000000005F64                 db  11h
.eh_frame:0000000000005F65                 db    0
.eh_frame:0000000000005F66                 db    0
.eh_frame:0000000000005F67                 db    0
.eh_frame:0000000000005F68                 db    0
.eh_frame:0000000000005F69                 db    0
.eh_frame:0000000000005F6A                 db    0
.eh_frame:0000000000005F6B                 db    0
.eh_frame:0000000000005F6C                 db  10h
.eh_frame:0000000000005F6D                 db    0
.eh_frame:0000000000005F6E                 db    0
.eh_frame:0000000000005F6F                 db    0
.eh_frame:0000000000005F70                 db    8
.eh_frame:0000000000005F71                 db    5
.eh_frame:0000000000005F72                 db    0
.eh_frame:0000000000005F73                 db    0
.eh_frame:0000000000005F74                 db 0ECh
.eh_frame:0000000000005F75                 db 0DAh
.eh_frame:0000000000005F76                 db 0FFh
.eh_frame:0000000000005F77                 db 0FFh
.eh_frame:0000000000005F78                 db  0Ah
.eh_frame:0000000000005F79                 db    0
.eh_frame:0000000000005F7A                 db    0
.eh_frame:0000000000005F7B                 db    0
.eh_frame:0000000000005F7C                 db    0
.eh_frame:0000000000005F7D                 db    0
.eh_frame:0000000000005F7E                 db    0
.eh_frame:0000000000005F7F                 db    0
.eh_frame:0000000000005F80                 db  18h
.eh_frame:0000000000005F81                 db    0
.eh_frame:0000000000005F82                 db    0
.eh_frame:0000000000005F83                 db    0
.eh_frame:0000000000005F84                 db  1Ch
.eh_frame:0000000000005F85                 db    5
.eh_frame:0000000000005F86                 db    0
.eh_frame:0000000000005F87                 db    0
.eh_frame:0000000000005F88                 db 0E8h
.eh_frame:0000000000005F89                 db 0DAh
.eh_frame:0000000000005F8A                 db 0FFh
.eh_frame:0000000000005F8B                 db 0FFh
.eh_frame:0000000000005F8C                 db  8Eh
.eh_frame:0000000000005F8D                 db    0
.eh_frame:0000000000005F8E                 db    0
.eh_frame:0000000000005F8F                 db    0
.eh_frame:0000000000005F90                 db    0
.eh_frame:0000000000005F91                 db  44h ; D
.eh_frame:0000000000005F92                 db  0Eh
.eh_frame:0000000000005F93                 db  50h ; P
.eh_frame:0000000000005F94                 db    2
.eh_frame:0000000000005F95                 db  7Fh ; 
.eh_frame:0000000000005F96                 db  0Ah
.eh_frame:0000000000005F97                 db  0Eh
.eh_frame:0000000000005F98                 db    8
.eh_frame:0000000000005F99                 db  41h ; A
.eh_frame:0000000000005F9A                 db  0Bh
.eh_frame:0000000000005F9B                 db    0
.eh_frame:0000000000005F9C                 db  18h
.eh_frame:0000000000005F9D                 db    0
.eh_frame:0000000000005F9E                 db    0
.eh_frame:0000000000005F9F                 db    0
.eh_frame:0000000000005FA0                 db  38h ; 8
.eh_frame:0000000000005FA1                 db    5
.eh_frame:0000000000005FA2                 db    0
.eh_frame:0000000000005FA3                 db    0
.eh_frame:0000000000005FA4                 db  5Ch ; \
.eh_frame:0000000000005FA5                 db 0DBh
.eh_frame:0000000000005FA6                 db 0FFh
.eh_frame:0000000000005FA7                 db 0FFh
.eh_frame:0000000000005FA8                 db  91h
.eh_frame:0000000000005FA9                 db    0
.eh_frame:0000000000005FAA                 db    0
.eh_frame:0000000000005FAB                 db    0
.eh_frame:0000000000005FAC                 db    0
.eh_frame:0000000000005FAD                 db  44h ; D
.eh_frame:0000000000005FAE                 db  0Eh
.eh_frame:0000000000005FAF                 db  50h ; P
.eh_frame:0000000000005FB0                 db    2
.eh_frame:0000000000005FB1                 db  82h
.eh_frame:0000000000005FB2                 db  0Ah
.eh_frame:0000000000005FB3                 db  0Eh
.eh_frame:0000000000005FB4                 db    8
.eh_frame:0000000000005FB5                 db  41h ; A
.eh_frame:0000000000005FB6                 db  0Bh
.eh_frame:0000000000005FB7                 db    0
.eh_frame:0000000000005FB8                 db  10h
.eh_frame:0000000000005FB9                 db    0
.eh_frame:0000000000005FBA                 db    0
.eh_frame:0000000000005FBB                 db    0
.eh_frame:0000000000005FBC                 db  54h ; T
.eh_frame:0000000000005FBD                 db    5
.eh_frame:0000000000005FBE                 db    0
.eh_frame:0000000000005FBF                 db    0
.eh_frame:0000000000005FC0                 db 0E0h
.eh_frame:0000000000005FC1                 db 0DBh
.eh_frame:0000000000005FC2                 db 0FFh
.eh_frame:0000000000005FC3                 db 0FFh
.eh_frame:0000000000005FC4                 db  0Ch
.eh_frame:0000000000005FC5                 db    0
.eh_frame:0000000000005FC6                 db    0
.eh_frame:0000000000005FC7                 db    0
.eh_frame:0000000000005FC8                 db    0
.eh_frame:0000000000005FC9                 db    0
.eh_frame:0000000000005FCA                 db    0
.eh_frame:0000000000005FCB                 db    0
.eh_frame:0000000000005FCC                 db  10h
.eh_frame:0000000000005FCD                 db    0
.eh_frame:0000000000005FCE                 db    0
.eh_frame:0000000000005FCF                 db    0
.eh_frame:0000000000005FD0                 db  68h ; h
.eh_frame:0000000000005FD1                 db    5
.eh_frame:0000000000005FD2                 db    0
.eh_frame:0000000000005FD3                 db    0
.eh_frame:0000000000005FD4                 db 0DCh
.eh_frame:0000000000005FD5                 db 0DBh
.eh_frame:0000000000005FD6                 db 0FFh
.eh_frame:0000000000005FD7                 db 0FFh
.eh_frame:0000000000005FD8                 db  17h
.eh_frame:0000000000005FD9                 db    0
.eh_frame:0000000000005FDA                 db    0
.eh_frame:0000000000005FDB                 db    0
.eh_frame:0000000000005FDC                 db    0
.eh_frame:0000000000005FDD                 db    0
.eh_frame:0000000000005FDE                 db    0
.eh_frame:0000000000005FDF                 db    0
.eh_frame:0000000000005FE0                 db  10h
.eh_frame:0000000000005FE1                 db    0
.eh_frame:0000000000005FE2                 db    0
.eh_frame:0000000000005FE3                 db    0
.eh_frame:0000000000005FE4                 db  7Ch ; |
.eh_frame:0000000000005FE5                 db    5
.eh_frame:0000000000005FE6                 db    0
.eh_frame:0000000000005FE7                 db    0
.eh_frame:0000000000005FE8                 db 0E8h
.eh_frame:0000000000005FE9                 db 0DBh
.eh_frame:0000000000005FEA                 db 0FFh
.eh_frame:0000000000005FEB                 db 0FFh
.eh_frame:0000000000005FEC                 db  13h
.eh_frame:0000000000005FED                 db    0
.eh_frame:0000000000005FEE                 db    0
.eh_frame:0000000000005FEF                 db    0
.eh_frame:0000000000005FF0                 db    0
.eh_frame:0000000000005FF1                 db    0
.eh_frame:0000000000005FF2                 db    0
.eh_frame:0000000000005FF3                 db    0
.eh_frame:0000000000005FF4                 db  10h
.eh_frame:0000000000005FF5                 db    0
.eh_frame:0000000000005FF6                 db    0
.eh_frame:0000000000005FF7                 db    0
.eh_frame:0000000000005FF8                 db  90h
.eh_frame:0000000000005FF9                 db    5
.eh_frame:0000000000005FFA                 db    0
.eh_frame:0000000000005FFB                 db    0
.eh_frame:0000000000005FFC                 db 0F4h
.eh_frame:0000000000005FFD                 db 0DBh
.eh_frame:0000000000005FFE                 db 0FFh
.eh_frame:0000000000005FFF                 db 0FFh
.eh_frame:0000000000006000                 db  0Ch
.eh_frame:0000000000006001                 db    0
.eh_frame:0000000000006002                 db    0
.eh_frame:0000000000006003                 db    0
.eh_frame:0000000000006004                 db    0
.eh_frame:0000000000006005                 db    0
.eh_frame:0000000000006006                 db    0
.eh_frame:0000000000006007                 db    0
.eh_frame:0000000000006008                 db  10h
.eh_frame:0000000000006009                 db    0
.eh_frame:000000000000600A                 db    0
.eh_frame:000000000000600B                 db    0
.eh_frame:000000000000600C                 db 0A4h
.eh_frame:000000000000600D                 db    5
.eh_frame:000000000000600E                 db    0
.eh_frame:000000000000600F                 db    0
.eh_frame:0000000000006010                 db 0F0h
.eh_frame:0000000000006011                 db 0DBh
.eh_frame:0000000000006012                 db 0FFh
.eh_frame:0000000000006013                 db 0FFh
.eh_frame:0000000000006014                 db  14h
.eh_frame:0000000000006015                 db    0
.eh_frame:0000000000006016                 db    0
.eh_frame:0000000000006017                 db    0
.eh_frame:0000000000006018                 db    0
.eh_frame:0000000000006019                 db    0
.eh_frame:000000000000601A                 db    0
.eh_frame:000000000000601B                 db    0
.eh_frame:000000000000601C                 db  10h
.eh_frame:000000000000601D                 db    0
.eh_frame:000000000000601E                 db    0
.eh_frame:000000000000601F                 db    0
.eh_frame:0000000000006020                 db 0B8h
.eh_frame:0000000000006021                 db    5
.eh_frame:0000000000006022                 db    0
.eh_frame:0000000000006023                 db    0
.eh_frame:0000000000006024                 db 0FCh
.eh_frame:0000000000006025                 db 0DBh
.eh_frame:0000000000006026                 db 0FFh
.eh_frame:0000000000006027                 db 0FFh
.eh_frame:0000000000006028                 db  13h
.eh_frame:0000000000006029                 db    0
.eh_frame:000000000000602A                 db    0
.eh_frame:000000000000602B                 db    0
.eh_frame:000000000000602C                 db    0
.eh_frame:000000000000602D                 db    0
.eh_frame:000000000000602E                 db    0
.eh_frame:000000000000602F                 db    0
.eh_frame:0000000000006030                 db  14h
.eh_frame:0000000000006031                 db    0
.eh_frame:0000000000006032                 db    0
.eh_frame:0000000000006033                 db    0
.eh_frame:0000000000006034                 db 0CCh
.eh_frame:0000000000006035                 db    5
.eh_frame:0000000000006036                 db    0
.eh_frame:0000000000006037                 db    0
.eh_frame:0000000000006038                 db    8
.eh_frame:0000000000006039                 db 0DCh
.eh_frame:000000000000603A                 db 0FFh
.eh_frame:000000000000603B                 db 0FFh
.eh_frame:000000000000603C                 db  18h
.eh_frame:000000000000603D                 db    0
.eh_frame:000000000000603E                 db    0
.eh_frame:000000000000603F                 db    0
.eh_frame:0000000000006040                 db    0
.eh_frame:0000000000006041                 db    0
.eh_frame:0000000000006042                 db    0
.eh_frame:0000000000006043                 db    0
.eh_frame:0000000000006044                 db    0
.eh_frame:0000000000006045                 db    0
.eh_frame:0000000000006046                 db    0
.eh_frame:0000000000006047                 db    0
.eh_frame:0000000000006048                 db  10h
.eh_frame:0000000000006049                 db    1
.eh_frame:000000000000604A                 db    0
.eh_frame:000000000000604B                 db    0
.eh_frame:000000000000604C                 db 0E4h
.eh_frame:000000000000604D                 db    5
.eh_frame:000000000000604E                 db    0
.eh_frame:000000000000604F                 db    0
.eh_frame:0000000000006050                 db  10h
.eh_frame:0000000000006051                 db 0DCh
.eh_frame:0000000000006052                 db 0FFh
.eh_frame:0000000000006053                 db 0FFh
.eh_frame:0000000000006054                 db  17h
.eh_frame:0000000000006055                 db    4
.eh_frame:0000000000006056                 db    0
.eh_frame:0000000000006057                 db    0
.eh_frame:0000000000006058                 db    0
.eh_frame:0000000000006059                 db  42h ; B
.eh_frame:000000000000605A                 db  0Eh
.eh_frame:000000000000605B                 db  10h
.eh_frame:000000000000605C                 db  8Fh
.eh_frame:000000000000605D                 db    2
.eh_frame:000000000000605E                 db  42h ; B
.eh_frame:000000000000605F                 db  0Eh
.eh_frame:0000000000006060                 db  18h
.eh_frame:0000000000006061                 db  8Eh
.eh_frame:0000000000006062                 db    3
.eh_frame:0000000000006063                 db  42h ; B
.eh_frame:0000000000006064                 db  0Eh
.eh_frame:0000000000006065                 db  20h
.eh_frame:0000000000006066                 db  8Dh
.eh_frame:0000000000006067                 db    4
.eh_frame:0000000000006068                 db  42h ; B
.eh_frame:0000000000006069                 db  0Eh
.eh_frame:000000000000606A                 db  28h ; (
.eh_frame:000000000000606B                 db  8Ch
.eh_frame:000000000000606C                 db    5
.eh_frame:000000000000606D                 db  44h ; D
.eh_frame:000000000000606E                 db  0Eh
.eh_frame:000000000000606F                 db  30h ; 0
.eh_frame:0000000000006070                 db  86h
.eh_frame:0000000000006071                 db    6
.eh_frame:0000000000006072                 db  41h ; A
.eh_frame:0000000000006073                 db  0Eh
.eh_frame:0000000000006074                 db  38h ; 8
.eh_frame:0000000000006075                 db  83h
.eh_frame:0000000000006076                 db    7
.eh_frame:0000000000006077                 db  4Ah ; J
.eh_frame:0000000000006078                 db  0Eh
.eh_frame:0000000000006079                 db  60h ; `
.eh_frame:000000000000607A                 db    2
.eh_frame:000000000000607B                 db 0DDh
.eh_frame:000000000000607C                 db  0Eh
.eh_frame:000000000000607D                 db  68h ; h
.eh_frame:000000000000607E                 db  57h ; W
.eh_frame:000000000000607F                 db  0Eh
.eh_frame:0000000000006080                 db  70h ; p
.eh_frame:0000000000006081                 db  42h ; B
.eh_frame:0000000000006082                 db  0Eh
.eh_frame:0000000000006083                 db  78h ; x
.eh_frame:0000000000006084                 db  42h ; B
.eh_frame:0000000000006085                 db  0Eh
.eh_frame:0000000000006086                 db  80h
.eh_frame:0000000000006087                 db    1
.eh_frame:0000000000006088                 db  42h ; B
.eh_frame:0000000000006089                 db  0Eh
.eh_frame:000000000000608A                 db  88h
.eh_frame:000000000000608B                 db    1
.eh_frame:000000000000608C                 db  42h ; B
.eh_frame:000000000000608D                 db  0Eh
.eh_frame:000000000000608E                 db  90h
.eh_frame:000000000000608F                 db    1
.eh_frame:0000000000006090                 db  53h ; S
.eh_frame:0000000000006091                 db  0Eh
.eh_frame:0000000000006092                 db  60h ; `
.eh_frame:0000000000006093                 db  44h ; D
.eh_frame:0000000000006094                 db  0Ah
.eh_frame:0000000000006095                 db  0Eh
.eh_frame:0000000000006096                 db  38h ; 8
.eh_frame:0000000000006097                 db  41h ; A
.eh_frame:0000000000006098                 db  0Eh
.eh_frame:0000000000006099                 db  30h ; 0
.eh_frame:000000000000609A                 db  41h ; A
.eh_frame:000000000000609B                 db  0Eh
.eh_frame:000000000000609C                 db  28h ; (
.eh_frame:000000000000609D                 db  42h ; B
.eh_frame:000000000000609E                 db  0Eh
.eh_frame:000000000000609F                 db  20h
.eh_frame:00000000000060A0                 db  42h ; B
.eh_frame:00000000000060A1                 db  0Eh
.eh_frame:00000000000060A2                 db  18h
.eh_frame:00000000000060A3                 db  42h ; B
.eh_frame:00000000000060A4                 db  0Eh
.eh_frame:00000000000060A5                 db  10h
.eh_frame:00000000000060A6                 db  42h ; B
.eh_frame:00000000000060A7                 db  0Eh
.eh_frame:00000000000060A8                 db    8
.eh_frame:00000000000060A9                 db  44h ; D
.eh_frame:00000000000060AA                 db  0Bh
.eh_frame:00000000000060AB                 db    2
.eh_frame:00000000000060AC                 db  78h ; x
.eh_frame:00000000000060AD                 db  0Ah
.eh_frame:00000000000060AE                 db  0Eh
.eh_frame:00000000000060AF                 db  68h ; h
.eh_frame:00000000000060B0                 db  48h ; H
.eh_frame:00000000000060B1                 db  0Bh
.eh_frame:00000000000060B2                 db  5Ah ; Z
.eh_frame:00000000000060B3                 db  0Ah
.eh_frame:00000000000060B4                 db  0Eh
.eh_frame:00000000000060B5                 db  38h ; 8
.eh_frame:00000000000060B6                 db  47h ; G
.eh_frame:00000000000060B7                 db  0Eh
.eh_frame:00000000000060B8                 db  30h ; 0
.eh_frame:00000000000060B9                 db  41h ; A
.eh_frame:00000000000060BA                 db  0Eh
.eh_frame:00000000000060BB                 db  28h ; (
.eh_frame:00000000000060BC                 db  42h ; B
.eh_frame:00000000000060BD                 db  0Eh
.eh_frame:00000000000060BE                 db  20h
.eh_frame:00000000000060BF                 db  42h ; B
.eh_frame:00000000000060C0                 db  0Eh
.eh_frame:00000000000060C1                 db  18h
.eh_frame:00000000000060C2                 db  42h ; B
.eh_frame:00000000000060C3                 db  0Eh
.eh_frame:00000000000060C4                 db  10h
.eh_frame:00000000000060C5                 db  42h ; B
.eh_frame:00000000000060C6                 db  0Eh
.eh_frame:00000000000060C7                 db    8
.eh_frame:00000000000060C8                 db  56h ; V
.eh_frame:00000000000060C9                 db  0Bh
.eh_frame:00000000000060CA                 db  5Eh ; ^
.eh_frame:00000000000060CB                 db  0Ah
.eh_frame:00000000000060CC                 db  0Eh
.eh_frame:00000000000060CD                 db  38h ; 8
.eh_frame:00000000000060CE                 db  52h ; R
.eh_frame:00000000000060CF                 db  0Eh
.eh_frame:00000000000060D0                 db  30h ; 0
.eh_frame:00000000000060D1                 db  41h ; A
.eh_frame:00000000000060D2                 db  0Eh
.eh_frame:00000000000060D3                 db  28h ; (
.eh_frame:00000000000060D4                 db  42h ; B
.eh_frame:00000000000060D5                 db  0Eh
.eh_frame:00000000000060D6                 db  20h
.eh_frame:00000000000060D7                 db  42h ; B
.eh_frame:00000000000060D8                 db  0Eh
.eh_frame:00000000000060D9                 db  18h
.eh_frame:00000000000060DA                 db  42h ; B
.eh_frame:00000000000060DB                 db  0Eh
.eh_frame:00000000000060DC                 db  10h
.eh_frame:00000000000060DD                 db  42h ; B
.eh_frame:00000000000060DE                 db  0Eh
.eh_frame:00000000000060DF                 db    8
.eh_frame:00000000000060E0                 db  4Fh ; O
.eh_frame:00000000000060E1                 db  0Bh
.eh_frame:00000000000060E2                 db  62h ; b
.eh_frame:00000000000060E3                 db  0Ah
.eh_frame:00000000000060E4                 db  0Eh
.eh_frame:00000000000060E5                 db  38h ; 8
.eh_frame:00000000000060E6                 db  50h ; P
.eh_frame:00000000000060E7                 db  0Eh
.eh_frame:00000000000060E8                 db  30h ; 0
.eh_frame:00000000000060E9                 db  41h ; A
.eh_frame:00000000000060EA                 db  0Eh
.eh_frame:00000000000060EB                 db  28h ; (
.eh_frame:00000000000060EC                 db  42h ; B
.eh_frame:00000000000060ED                 db  0Eh
.eh_frame:00000000000060EE                 db  20h
.eh_frame:00000000000060EF                 db  42h ; B
.eh_frame:00000000000060F0                 db  0Eh
.eh_frame:00000000000060F1                 db  18h
.eh_frame:00000000000060F2                 db  42h ; B
.eh_frame:00000000000060F3                 db  0Eh
.eh_frame:00000000000060F4                 db  10h
.eh_frame:00000000000060F5                 db  42h ; B
.eh_frame:00000000000060F6                 db  0Eh
.eh_frame:00000000000060F7                 db    8
.eh_frame:00000000000060F8                 db  55h ; U
.eh_frame:00000000000060F9                 db  0Bh
.eh_frame:00000000000060FA                 db  66h ; f
.eh_frame:00000000000060FB                 db  0Eh
.eh_frame:00000000000060FC                 db  68h ; h
.eh_frame:00000000000060FD                 db  42h ; B
.eh_frame:00000000000060FE                 db  0Eh
.eh_frame:00000000000060FF                 db  70h ; p
.eh_frame:0000000000006100                 db  5Ch ; \
.eh_frame:0000000000006101                 db  0Eh
.eh_frame:0000000000006102                 db  68h ; h
.eh_frame:0000000000006103                 db  41h ; A
.eh_frame:0000000000006104                 db  0Eh
.eh_frame:0000000000006105                 db  60h ; `
.eh_frame:0000000000006106                 db  44h ; D
.eh_frame:0000000000006107                 db  0Ah
.eh_frame:0000000000006108                 db  0Eh
.eh_frame:0000000000006109                 db  38h ; 8
.eh_frame:000000000000610A                 db  41h ; A
.eh_frame:000000000000610B                 db  0Eh
.eh_frame:000000000000610C                 db  30h ; 0
.eh_frame:000000000000610D                 db  41h ; A
.eh_frame:000000000000610E                 db  0Eh
.eh_frame:000000000000610F                 db  28h ; (
.eh_frame:0000000000006110                 db  42h ; B
.eh_frame:0000000000006111                 db  0Eh
.eh_frame:0000000000006112                 db  20h
.eh_frame:0000000000006113                 db  42h ; B
.eh_frame:0000000000006114                 db  0Eh
.eh_frame:0000000000006115                 db  18h
.eh_frame:0000000000006116                 db  42h ; B
.eh_frame:0000000000006117                 db  0Eh
.eh_frame:0000000000006118                 db  10h
.eh_frame:0000000000006119                 db  42h ; B
.eh_frame:000000000000611A                 db  0Eh
.eh_frame:000000000000611B                 db    8
.eh_frame:000000000000611C                 db  45h ; E
.eh_frame:000000000000611D                 db  0Bh
.eh_frame:000000000000611E                 db  68h ; h
.eh_frame:000000000000611F                 db  0Ah
.eh_frame:0000000000006120                 db  0Eh
.eh_frame:0000000000006121                 db  68h ; h
.eh_frame:0000000000006122                 db  48h ; H
.eh_frame:0000000000006123                 db  0Bh
.eh_frame:0000000000006124                 db  72h ; r
.eh_frame:0000000000006125                 db  0Eh
.eh_frame:0000000000006126                 db  68h ; h
.eh_frame:0000000000006127                 db  45h ; E
.eh_frame:0000000000006128                 db  0Eh
.eh_frame:0000000000006129                 db  70h ; p
.eh_frame:000000000000612A                 db  42h ; B
.eh_frame:000000000000612B                 db  0Eh
.eh_frame:000000000000612C                 db  78h ; x
.eh_frame:000000000000612D                 db  42h ; B
.eh_frame:000000000000612E                 db  0Eh
.eh_frame:000000000000612F                 db  80h
.eh_frame:0000000000006130                 db    1
.eh_frame:0000000000006131                 db  5Eh ; ^
.eh_frame:0000000000006132                 db  0Eh
.eh_frame:0000000000006133                 db  60h ; `
.eh_frame:0000000000006134                 db  44h ; D
.eh_frame:0000000000006135                 db  0Ah
.eh_frame:0000000000006136                 db  0Eh
.eh_frame:0000000000006137                 db  38h ; 8
.eh_frame:0000000000006138                 db  41h ; A
.eh_frame:0000000000006139                 db  0Eh
.eh_frame:000000000000613A                 db  30h ; 0
.eh_frame:000000000000613B                 db  41h ; A
.eh_frame:000000000000613C                 db  0Eh
.eh_frame:000000000000613D                 db  28h ; (
.eh_frame:000000000000613E                 db  42h ; B
.eh_frame:000000000000613F                 db  0Eh
.eh_frame:0000000000006140                 db  20h
.eh_frame:0000000000006141                 db  42h ; B
.eh_frame:0000000000006142                 db  0Eh
.eh_frame:0000000000006143                 db  18h
.eh_frame:0000000000006144                 db  42h ; B
.eh_frame:0000000000006145                 db  0Eh
.eh_frame:0000000000006146                 db  10h
.eh_frame:0000000000006147                 db  42h ; B
.eh_frame:0000000000006148                 db  0Eh
.eh_frame:0000000000006149                 db    8
.eh_frame:000000000000614A                 db  41h ; A
.eh_frame:000000000000614B                 db  0Bh
.eh_frame:000000000000614C                 db  79h ; y
.eh_frame:000000000000614D                 db  0Ah
.eh_frame:000000000000614E                 db  0Eh
.eh_frame:000000000000614F                 db  68h ; h
.eh_frame:0000000000006150                 db  42h ; B
.eh_frame:0000000000006151                 db  0Eh
.eh_frame:0000000000006152                 db  70h ; p
.eh_frame:0000000000006153                 db  42h ; B
.eh_frame:0000000000006154                 db  0Eh
.eh_frame:0000000000006155                 db  78h ; x
.eh_frame:0000000000006156                 db  42h ; B
.eh_frame:0000000000006157                 db  0Eh
.eh_frame:0000000000006158                 db  80h
.eh_frame:0000000000006159                 db    1
.eh_frame:000000000000615A                 db  51h ; Q
.eh_frame:000000000000615B                 db  0Bh
.eh_frame:000000000000615C                 db  10h
.eh_frame:000000000000615D                 db    0
.eh_frame:000000000000615E                 db    0
.eh_frame:000000000000615F                 db    0
.eh_frame:0000000000006160                 db 0F8h
.eh_frame:0000000000006161                 db    6
.eh_frame:0000000000006162                 db    0
.eh_frame:0000000000006163                 db    0
.eh_frame:0000000000006164                 db  1Ch
.eh_frame:0000000000006165                 db 0DFh
.eh_frame:0000000000006166                 db 0FFh
.eh_frame:0000000000006167                 db 0FFh
.eh_frame:0000000000006168                 db  20h
.eh_frame:0000000000006169                 db    0
.eh_frame:000000000000616A                 db    0
.eh_frame:000000000000616B                 db    0
.eh_frame:000000000000616C                 db    0
.eh_frame:000000000000616D                 db    0
.eh_frame:000000000000616E                 db    0
.eh_frame:000000000000616F                 db    0
.eh_frame:0000000000006170                 db  18h
.eh_frame:0000000000006171                 db    0
.eh_frame:0000000000006172                 db    0
.eh_frame:0000000000006173                 db    0
.eh_frame:0000000000006174                 db  0Ch
.eh_frame:0000000000006175                 db    7
.eh_frame:0000000000006176                 db    0
.eh_frame:0000000000006177                 db    0
.eh_frame:0000000000006178                 db  28h ; (
.eh_frame:0000000000006179                 db 0DFh
.eh_frame:000000000000617A                 db 0FFh
.eh_frame:000000000000617B                 db 0FFh
.eh_frame:000000000000617C                 db  78h ; x
.eh_frame:000000000000617D                 db    0
.eh_frame:000000000000617E                 db    0
.eh_frame:000000000000617F                 db    0
.eh_frame:0000000000006180                 db    0
.eh_frame:0000000000006181                 db  44h ; D
.eh_frame:0000000000006182                 db  0Eh
.eh_frame:0000000000006183                 db  70h ; p
.eh_frame:0000000000006184                 db    2
.eh_frame:0000000000006185                 db  60h ; `
.eh_frame:0000000000006186                 db  0Ah
.eh_frame:0000000000006187                 db  0Eh
.eh_frame:0000000000006188                 db    8
.eh_frame:0000000000006189                 db  41h ; A
.eh_frame:000000000000618A                 db  0Bh
.eh_frame:000000000000618B                 db    0
.eh_frame:000000000000618C                 db  28h ; (
.eh_frame:000000000000618D                 db    0
.eh_frame:000000000000618E                 db    0
.eh_frame:000000000000618F                 db    0
.eh_frame:0000000000006190                 db  28h ; (
.eh_frame:0000000000006191                 db    7
.eh_frame:0000000000006192                 db    0
.eh_frame:0000000000006193                 db    0
.eh_frame:0000000000006194                 db  8Ch
.eh_frame:0000000000006195                 db 0DFh
.eh_frame:0000000000006196                 db 0FFh
.eh_frame:0000000000006197                 db 0FFh
.eh_frame:0000000000006198                 db 0D5h
.eh_frame:0000000000006199                 db    0
.eh_frame:000000000000619A                 db    0
.eh_frame:000000000000619B                 db    0
.eh_frame:000000000000619C                 db    0
.eh_frame:000000000000619D                 db  41h ; A
.eh_frame:000000000000619E                 db  0Eh
.eh_frame:000000000000619F                 db  10h
.eh_frame:00000000000061A0                 db  86h
.eh_frame:00000000000061A1                 db    2
.eh_frame:00000000000061A2                 db  41h ; A
.eh_frame:00000000000061A3                 db  0Eh
.eh_frame:00000000000061A4                 db  18h
.eh_frame:00000000000061A5                 db  83h
.eh_frame:00000000000061A6                 db    3
.eh_frame:00000000000061A7                 db  50h ; P
.eh_frame:00000000000061A8                 db  0Eh
.eh_frame:00000000000061A9                 db 0D0h
.eh_frame:00000000000061AA                 db    1
.eh_frame:00000000000061AB                 db    2
.eh_frame:00000000000061AC                 db 0ABh
.eh_frame:00000000000061AD                 db  0Ah
.eh_frame:00000000000061AE                 db  0Eh
.eh_frame:00000000000061AF                 db  18h
.eh_frame:00000000000061B0                 db  41h ; A
.eh_frame:00000000000061B1                 db  0Eh
.eh_frame:00000000000061B2                 db  10h
.eh_frame:00000000000061B3                 db  41h ; A
.eh_frame:00000000000061B4                 db  0Eh
.eh_frame:00000000000061B5                 db    8
.eh_frame:00000000000061B6                 db  41h ; A
.eh_frame:00000000000061B7                 db  0Bh
.eh_frame:00000000000061B8                 db  1Ch
.eh_frame:00000000000061B9                 db    0
.eh_frame:00000000000061BA                 db    0
.eh_frame:00000000000061BB                 db    0
.eh_frame:00000000000061BC                 db  54h ; T
.eh_frame:00000000000061BD                 db    7
.eh_frame:00000000000061BE                 db    0
.eh_frame:00000000000061BF                 db    0
.eh_frame:00000000000061C0                 db  40h ; @
.eh_frame:00000000000061C1                 db 0E0h
.eh_frame:00000000000061C2                 db 0FFh
.eh_frame:00000000000061C3                 db 0FFh
.eh_frame:00000000000061C4                 db  80h
.eh_frame:00000000000061C5                 db    0
.eh_frame:00000000000061C6                 db    0
.eh_frame:00000000000061C7                 db    0
.eh_frame:00000000000061C8                 db    0
.eh_frame:00000000000061C9                 db  41h ; A
.eh_frame:00000000000061CA                 db  0Eh
.eh_frame:00000000000061CB                 db  10h
.eh_frame:00000000000061CC                 db  83h
.eh_frame:00000000000061CD                 db    2
.eh_frame:00000000000061CE                 db    2
.eh_frame:00000000000061CF                 db  7Ah ; z
.eh_frame:00000000000061D0                 db  0Eh
.eh_frame:00000000000061D1                 db    8
.eh_frame:00000000000061D2                 db    0
.eh_frame:00000000000061D3                 db    0
.eh_frame:00000000000061D4                 db    0
.eh_frame:00000000000061D5                 db    0
.eh_frame:00000000000061D6                 db    0
.eh_frame:00000000000061D7                 db    0
.eh_frame:00000000000061D8                 db  18h
.eh_frame:00000000000061D9                 db    0
.eh_frame:00000000000061DA                 db    0
.eh_frame:00000000000061DB                 db    0
.eh_frame:00000000000061DC                 db  74h ; t
.eh_frame:00000000000061DD                 db    7
.eh_frame:00000000000061DE                 db    0
.eh_frame:00000000000061DF                 db    0
.eh_frame:00000000000061E0                 db 0A0h
.eh_frame:00000000000061E1                 db 0E0h
.eh_frame:00000000000061E2                 db 0FFh
.eh_frame:00000000000061E3                 db 0FFh
.eh_frame:00000000000061E4                 db  1Ah
.eh_frame:00000000000061E5                 db    0
.eh_frame:00000000000061E6                 db    0
.eh_frame:00000000000061E7                 db    0
.eh_frame:00000000000061E8                 db    0
.eh_frame:00000000000061E9                 db  41h ; A
.eh_frame:00000000000061EA                 db  0Eh
.eh_frame:00000000000061EB                 db  10h
.eh_frame:00000000000061EC                 db  83h
.eh_frame:00000000000061ED                 db    2
.eh_frame:00000000000061EE                 db  53h ; S
.eh_frame:00000000000061EF                 db  0Ah
.eh_frame:00000000000061F0                 db  0Eh
.eh_frame:00000000000061F1                 db    8
.eh_frame:00000000000061F2                 db  41h ; A
.eh_frame:00000000000061F3                 db  0Bh
.eh_frame:00000000000061F4                 db  10h
.eh_frame:00000000000061F5                 db    0
.eh_frame:00000000000061F6                 db    0
.eh_frame:00000000000061F7                 db    0
.eh_frame:00000000000061F8                 db  90h
.eh_frame:00000000000061F9                 db    7
.eh_frame:00000000000061FA                 db    0
.eh_frame:00000000000061FB                 db    0
.eh_frame:00000000000061FC                 db 0A4h
.eh_frame:00000000000061FD                 db 0E0h
.eh_frame:00000000000061FE                 db 0FFh
.eh_frame:00000000000061FF                 db 0FFh
.eh_frame:0000000000006200                 db  24h ; $
.eh_frame:0000000000006201                 db    0
.eh_frame:0000000000006202                 db    0
.eh_frame:0000000000006203                 db    0
.eh_frame:0000000000006204                 db    0
.eh_frame:0000000000006205                 db  5Fh ; _
.eh_frame:0000000000006206                 db  0Eh
.eh_frame:0000000000006207                 db  10h
.eh_frame:0000000000006208                 db  10h
.eh_frame:0000000000006209                 db    0
.eh_frame:000000000000620A                 db    0
.eh_frame:000000000000620B                 db    0
.eh_frame:000000000000620C                 db 0A4h
.eh_frame:000000000000620D                 db    7
.eh_frame:000000000000620E                 db    0
.eh_frame:000000000000620F                 db    0
.eh_frame:0000000000006210                 db 0C0h
.eh_frame:0000000000006211                 db 0E0h
.eh_frame:0000000000006212                 db 0FFh
.eh_frame:0000000000006213                 db 0FFh
.eh_frame:0000000000006214                 db    2
.eh_frame:0000000000006215                 db    0
.eh_frame:0000000000006216                 db    0
.eh_frame:0000000000006217                 db    0
.eh_frame:0000000000006218                 db    0
.eh_frame:0000000000006219                 db    0
.eh_frame:000000000000621A                 db    0
.eh_frame:000000000000621B                 db    0
.eh_frame:000000000000621C                 db  20h
.eh_frame:000000000000621D                 db    0
.eh_frame:000000000000621E                 db    0
.eh_frame:000000000000621F                 db    0
.eh_frame:0000000000006220                 db 0B8h
.eh_frame:0000000000006221                 db    7
.eh_frame:0000000000006222                 db    0
.eh_frame:0000000000006223                 db    0
.eh_frame:0000000000006224                 db 0BCh
.eh_frame:0000000000006225                 db 0E0h
.eh_frame:0000000000006226                 db 0FFh
.eh_frame:0000000000006227                 db 0FFh
.eh_frame:0000000000006228                 db  36h ; 6
.eh_frame:0000000000006229                 db    0
.eh_frame:000000000000622A                 db    0
.eh_frame:000000000000622B                 db    0
.eh_frame:000000000000622C                 db    0
.eh_frame:000000000000622D                 db  44h ; D
.eh_frame:000000000000622E                 db  0Eh
.eh_frame:000000000000622F                 db  10h
.eh_frame:0000000000006230                 db  83h
.eh_frame:0000000000006231                 db    2
.eh_frame:0000000000006232                 db  5Dh ; ]
.eh_frame:0000000000006233                 db  0Ah
.eh_frame:0000000000006234                 db  0Eh
.eh_frame:0000000000006235                 db    8
.eh_frame:0000000000006236                 db  47h ; G
.eh_frame:0000000000006237                 db  0Bh
.eh_frame:0000000000006238                 db  48h ; H
.eh_frame:0000000000006239                 db  0Ah
.eh_frame:000000000000623A                 db  0Eh
.eh_frame:000000000000623B                 db    8
.eh_frame:000000000000623C                 db  41h ; A
.eh_frame:000000000000623D                 db  0Bh
.eh_frame:000000000000623E                 db    0
.eh_frame:000000000000623F                 db    0
.eh_frame:0000000000006240                 db  10h
.eh_frame:0000000000006241                 db    0
.eh_frame:0000000000006242                 db    0
.eh_frame:0000000000006243                 db    0
.eh_frame:0000000000006244                 db 0DCh
.eh_frame:0000000000006245                 db    7
.eh_frame:0000000000006246                 db    0
.eh_frame:0000000000006247                 db    0
.eh_frame:0000000000006248                 db 0D8h
.eh_frame:0000000000006249                 db 0E0h
.eh_frame:000000000000624A                 db 0FFh
.eh_frame:000000000000624B                 db 0FFh
.eh_frame:000000000000624C                 db  24h ; $
.eh_frame:000000000000624D                 db    0
.eh_frame:000000000000624E                 db    0
.eh_frame:000000000000624F                 db    0
.eh_frame:0000000000006250                 db    0
.eh_frame:0000000000006251                 db  5Fh ; _
.eh_frame:0000000000006252                 db  0Eh
.eh_frame:0000000000006253                 db  10h
.eh_frame:0000000000006254                 db  14h
.eh_frame:0000000000006255                 db    0
.eh_frame:0000000000006256                 db    0
.eh_frame:0000000000006257                 db    0
.eh_frame:0000000000006258                 db 0F0h
.eh_frame:0000000000006259                 db    7
.eh_frame:000000000000625A                 db    0
.eh_frame:000000000000625B                 db    0
.eh_frame:000000000000625C                 db 0F4h
.eh_frame:000000000000625D                 db 0E0h
.eh_frame:000000000000625E                 db 0FFh
.eh_frame:000000000000625F                 db 0FFh
.eh_frame:0000000000006260                 db  82h
.eh_frame:0000000000006261                 db    0
.eh_frame:0000000000006262                 db    0
.eh_frame:0000000000006263                 db    0
.eh_frame:0000000000006264                 db    0
.eh_frame:0000000000006265                 db    2
.eh_frame:0000000000006266                 db  5Fh ; _
.eh_frame:0000000000006267                 db  0Eh
.eh_frame:0000000000006268                 db  10h
.eh_frame:0000000000006269                 db  49h ; I
.eh_frame:000000000000626A                 db  0Eh
.eh_frame:000000000000626B                 db    8
.eh_frame:000000000000626C                 db  14h
.eh_frame:000000000000626D                 db    0
.eh_frame:000000000000626E                 db    0
.eh_frame:000000000000626F                 db    0
.eh_frame:0000000000006270                 db    8
.eh_frame:0000000000006271                 db    8
.eh_frame:0000000000006272                 db    0
.eh_frame:0000000000006273                 db    0
.eh_frame:0000000000006274                 db  6Ch ; l
.eh_frame:0000000000006275                 db 0E1h
.eh_frame:0000000000006276                 db 0FFh
.eh_frame:0000000000006277                 db 0FFh
.eh_frame:0000000000006278                 db  4Ah ; J
.eh_frame:0000000000006279                 db    0
.eh_frame:000000000000627A                 db    0
.eh_frame:000000000000627B                 db    0
.eh_frame:000000000000627C                 db    0
.eh_frame:000000000000627D                 db    2
.eh_frame:000000000000627E                 db  45h ; E
.eh_frame:000000000000627F                 db  0Eh
.eh_frame:0000000000006280                 db  10h
.eh_frame:0000000000006281                 db    0
.eh_frame:0000000000006282                 db    0
.eh_frame:0000000000006283                 db    0
.eh_frame:0000000000006284                 db  18h
.eh_frame:0000000000006285                 db    0
.eh_frame:0000000000006286                 db    0
.eh_frame:0000000000006287                 db    0
.eh_frame:0000000000006288                 db  20h
.eh_frame:0000000000006289                 db    8
.eh_frame:000000000000628A                 db    0
.eh_frame:000000000000628B                 db    0
.eh_frame:000000000000628C                 db 0A4h
.eh_frame:000000000000628D                 db 0E1h
.eh_frame:000000000000628E                 db 0FFh
.eh_frame:000000000000628F                 db 0FFh
.eh_frame:0000000000006290                 db  17h
.eh_frame:0000000000006291                 db    0
.eh_frame:0000000000006292                 db    0
.eh_frame:0000000000006293                 db    0
.eh_frame:0000000000006294                 db    0
.eh_frame:0000000000006295                 db  41h ; A
.eh_frame:0000000000006296                 db  0Eh
.eh_frame:0000000000006297                 db  10h
.eh_frame:0000000000006298                 db  83h
.eh_frame:0000000000006299                 db    2
.eh_frame:000000000000629A                 db  51h ; Q
.eh_frame:000000000000629B                 db  0Eh
.eh_frame:000000000000629C                 db    8
.eh_frame:000000000000629D                 db    0
.eh_frame:000000000000629E                 db    0
.eh_frame:000000000000629F                 db    0
.eh_frame:00000000000062A0                 db  18h
.eh_frame:00000000000062A1                 db    0
.eh_frame:00000000000062A2                 db    0
.eh_frame:00000000000062A3                 db    0
.eh_frame:00000000000062A4                 db  3Ch ; <
.eh_frame:00000000000062A5                 db    8
.eh_frame:00000000000062A6                 db    0
.eh_frame:00000000000062A7                 db    0
.eh_frame:00000000000062A8                 db 0A8h
.eh_frame:00000000000062A9                 db 0E1h
.eh_frame:00000000000062AA                 db 0FFh
.eh_frame:00000000000062AB                 db 0FFh
.eh_frame:00000000000062AC                 db  2Eh ; .
.eh_frame:00000000000062AD                 db    0
.eh_frame:00000000000062AE                 db    0
.eh_frame:00000000000062AF                 db    0
.eh_frame:00000000000062B0                 db    0
.eh_frame:00000000000062B1                 db  47h ; G
.eh_frame:00000000000062B2                 db  0Eh
.eh_frame:00000000000062B3                 db  10h
.eh_frame:00000000000062B4                 db  61h ; a
.eh_frame:00000000000062B5                 db  0Ah
.eh_frame:00000000000062B6                 db  0Eh
.eh_frame:00000000000062B7                 db    8
.eh_frame:00000000000062B8                 db  41h ; A
.eh_frame:00000000000062B9                 db  0Bh
.eh_frame:00000000000062BA                 db    0
.eh_frame:00000000000062BB                 db    0
.eh_frame:00000000000062BC                 db  24h ; $
.eh_frame:00000000000062BD                 db    0
.eh_frame:00000000000062BE                 db    0
.eh_frame:00000000000062BF                 db    0
.eh_frame:00000000000062C0                 db  58h ; X
.eh_frame:00000000000062C1                 db    8
.eh_frame:00000000000062C2                 db    0
.eh_frame:00000000000062C3                 db    0
.eh_frame:00000000000062C4                 db 0BCh
.eh_frame:00000000000062C5                 db 0E1h
.eh_frame:00000000000062C6                 db 0FFh
.eh_frame:00000000000062C7                 db 0FFh
.eh_frame:00000000000062C8                 db  28h ; (
.eh_frame:00000000000062C9                 db    0
.eh_frame:00000000000062CA                 db    0
.eh_frame:00000000000062CB                 db    0
.eh_frame:00000000000062CC                 db    0
.eh_frame:00000000000062CD                 db  41h ; A
.eh_frame:00000000000062CE                 db  0Eh
.eh_frame:00000000000062CF                 db  10h
.eh_frame:00000000000062D0                 db  86h
.eh_frame:00000000000062D1                 db    2
.eh_frame:00000000000062D2                 db  41h ; A
.eh_frame:00000000000062D3                 db  0Eh
.eh_frame:00000000000062D4                 db  18h
.eh_frame:00000000000062D5                 db  83h
.eh_frame:00000000000062D6                 db    3
.eh_frame:00000000000062D7                 db  4Dh ; M
.eh_frame:00000000000062D8                 db  0Eh
.eh_frame:00000000000062D9                 db  20h
.eh_frame:00000000000062DA                 db  49h ; I
.eh_frame:00000000000062DB                 db  0Eh
.eh_frame:00000000000062DC                 db  18h
.eh_frame:00000000000062DD                 db  47h ; G
.eh_frame:00000000000062DE                 db  0Eh
.eh_frame:00000000000062DF                 db  10h
.eh_frame:00000000000062E0                 db  41h ; A
.eh_frame:00000000000062E1                 db  0Eh
.eh_frame:00000000000062E2                 db    8
.eh_frame:00000000000062E3                 db    0
.eh_frame:00000000000062E4                 db  18h
.eh_frame:00000000000062E5                 db    0
.eh_frame:00000000000062E6                 db    0
.eh_frame:00000000000062E7                 db    0
.eh_frame:00000000000062E8                 db  80h
.eh_frame:00000000000062E9                 db    8
.eh_frame:00000000000062EA                 db    0
.eh_frame:00000000000062EB                 db    0
.eh_frame:00000000000062EC                 db 0C4h
.eh_frame:00000000000062ED                 db 0E1h
.eh_frame:00000000000062EE                 db 0FFh
.eh_frame:00000000000062EF                 db 0FFh
.eh_frame:00000000000062F0                 db  13h
.eh_frame:00000000000062F1                 db    0
.eh_frame:00000000000062F2                 db    0
.eh_frame:00000000000062F3                 db    0
.eh_frame:00000000000062F4                 db    0
.eh_frame:00000000000062F5                 db  41h ; A
.eh_frame:00000000000062F6                 db  0Eh
.eh_frame:00000000000062F7                 db  10h
.eh_frame:00000000000062F8                 db  83h
.eh_frame:00000000000062F9                 db    2
.eh_frame:00000000000062FA                 db  50h ; P
.eh_frame:00000000000062FB                 db  0Eh
.eh_frame:00000000000062FC                 db    8
.eh_frame:00000000000062FD                 db    0
.eh_frame:00000000000062FE                 db    0
.eh_frame:00000000000062FF                 db    0
.eh_frame:0000000000006300                 db  14h
.eh_frame:0000000000006301                 db    0
.eh_frame:0000000000006302                 db    0
.eh_frame:0000000000006303                 db    0
.eh_frame:0000000000006304                 db  9Ch
.eh_frame:0000000000006305                 db    8
.eh_frame:0000000000006306                 db    0
.eh_frame:0000000000006307                 db    0
.eh_frame:0000000000006308                 db 0C8h
.eh_frame:0000000000006309                 db 0E1h
.eh_frame:000000000000630A                 db 0FFh
.eh_frame:000000000000630B                 db 0FFh
.eh_frame:000000000000630C                 db  35h ; 5
.eh_frame:000000000000630D                 db    0
.eh_frame:000000000000630E                 db    0
.eh_frame:000000000000630F                 db    0
.eh_frame:0000000000006310                 db    0
.eh_frame:0000000000006311                 db  4Bh ; K
.eh_frame:0000000000006312                 db  0Eh
.eh_frame:0000000000006313                 db  10h
.eh_frame:0000000000006314                 db    0
.eh_frame:0000000000006315                 db    0
.eh_frame:0000000000006316                 db    0
.eh_frame:0000000000006317                 db    0
.eh_frame:0000000000006318                 db  34h ; 4
.eh_frame:0000000000006319                 db    0
.eh_frame:000000000000631A                 db    0
.eh_frame:000000000000631B                 db    0
.eh_frame:000000000000631C                 db 0B4h
.eh_frame:000000000000631D                 db    8
.eh_frame:000000000000631E                 db    0
.eh_frame:000000000000631F                 db    0
.eh_frame:0000000000006320                 db 0F0h
.eh_frame:0000000000006321                 db 0E1h
.eh_frame:0000000000006322                 db 0FFh
.eh_frame:0000000000006323                 db 0FFh
.eh_frame:0000000000006324                 db  7Eh ; ~
.eh_frame:0000000000006325                 db    2
.eh_frame:0000000000006326                 db    0
.eh_frame:0000000000006327                 db    0
.eh_frame:0000000000006328                 db    0
.eh_frame:0000000000006329                 db  42h ; B
.eh_frame:000000000000632A                 db  0Eh
.eh_frame:000000000000632B                 db  10h
.eh_frame:000000000000632C                 db  8Ch
.eh_frame:000000000000632D                 db    2
.eh_frame:000000000000632E                 db  41h ; A
.eh_frame:000000000000632F                 db  0Eh
.eh_frame:0000000000006330                 db  18h
.eh_frame:0000000000006331                 db  86h
.eh_frame:0000000000006332                 db    3
.eh_frame:0000000000006333                 db  43h ; C
.eh_frame:0000000000006334                 db  0Eh
.eh_frame:0000000000006335                 db  20h
.eh_frame:0000000000006336                 db  83h
.eh_frame:0000000000006337                 db    4
.eh_frame:0000000000006338                 db  44h ; D
.eh_frame:0000000000006339                 db  0Eh
.eh_frame:000000000000633A                 db  70h ; p
.eh_frame:000000000000633B                 db    2
.eh_frame:000000000000633C                 db 0F0h
.eh_frame:000000000000633D                 db  0Ah
.eh_frame:000000000000633E                 db  0Eh
.eh_frame:000000000000633F                 db  20h
.eh_frame:0000000000006340                 db  41h ; A
.eh_frame:0000000000006341                 db  0Eh
.eh_frame:0000000000006342                 db  18h
.eh_frame:0000000000006343                 db  41h ; A
.eh_frame:0000000000006344                 db  0Eh
.eh_frame:0000000000006345                 db  10h
.eh_frame:0000000000006346                 db  42h ; B
.eh_frame:0000000000006347                 db  0Eh
.eh_frame:0000000000006348                 db    8
.eh_frame:0000000000006349                 db  42h ; B
.eh_frame:000000000000634A                 db  0Bh
.eh_frame:000000000000634B                 db    0
.eh_frame:000000000000634C                 db    0
.eh_frame:000000000000634D                 db    0
.eh_frame:000000000000634E                 db    0
.eh_frame:000000000000634F                 db    0
.eh_frame:0000000000006350                 db  3Ch ; <
.eh_frame:0000000000006351                 db    0
.eh_frame:0000000000006352                 db    0
.eh_frame:0000000000006353                 db    0
.eh_frame:0000000000006354                 db 0ECh
.eh_frame:0000000000006355                 db    8
.eh_frame:0000000000006356                 db    0
.eh_frame:0000000000006357                 db    0
.eh_frame:0000000000006358                 db  38h ; 8
.eh_frame:0000000000006359                 db 0E4h
.eh_frame:000000000000635A                 db 0FFh
.eh_frame:000000000000635B                 db 0FFh
.eh_frame:000000000000635C                 db  83h
.eh_frame:000000000000635D                 db    0
.eh_frame:000000000000635E                 db    0
.eh_frame:000000000000635F                 db    0
.eh_frame:0000000000006360                 db    0
.eh_frame:0000000000006361                 db  42h ; B
.eh_frame:0000000000006362                 db  0Eh
.eh_frame:0000000000006363                 db  10h
.eh_frame:0000000000006364                 db  8Dh
.eh_frame:0000000000006365                 db    2
.eh_frame:0000000000006366                 db  42h ; B
.eh_frame:0000000000006367                 db  0Eh
.eh_frame:0000000000006368                 db  18h
.eh_frame:0000000000006369                 db  8Ch
.eh_frame:000000000000636A                 db    3
.eh_frame:000000000000636B                 db  44h ; D
.eh_frame:000000000000636C                 db  0Eh
.eh_frame:000000000000636D                 db  20h
.eh_frame:000000000000636E                 db  86h
.eh_frame:000000000000636F                 db    4
.eh_frame:0000000000006370                 db  41h ; A
.eh_frame:0000000000006371                 db  0Eh
.eh_frame:0000000000006372                 db  28h ; (
.eh_frame:0000000000006373                 db  83h
.eh_frame:0000000000006374                 db    5
.eh_frame:0000000000006375                 db  4Ah ; J
.eh_frame:0000000000006376                 db  0Eh
.eh_frame:0000000000006377                 db  40h ; @
.eh_frame:0000000000006378                 db    2
.eh_frame:0000000000006379                 db  64h ; d
.eh_frame:000000000000637A                 db  0Ah
.eh_frame:000000000000637B                 db  0Eh
.eh_frame:000000000000637C                 db  28h ; (
.eh_frame:000000000000637D                 db  41h ; A
.eh_frame:000000000000637E                 db  0Eh
.eh_frame:000000000000637F                 db  20h
.eh_frame:0000000000006380                 db  41h ; A
.eh_frame:0000000000006381                 db  0Eh
.eh_frame:0000000000006382                 db  18h
.eh_frame:0000000000006383                 db  42h ; B
.eh_frame:0000000000006384                 db  0Eh
.eh_frame:0000000000006385                 db  10h
.eh_frame:0000000000006386                 db  42h ; B
.eh_frame:0000000000006387                 db  0Eh
.eh_frame:0000000000006388                 db    8
.eh_frame:0000000000006389                 db  41h ; A
.eh_frame:000000000000638A                 db  0Bh
.eh_frame:000000000000638B                 db    0
.eh_frame:000000000000638C                 db    0
.eh_frame:000000000000638D                 db    0
.eh_frame:000000000000638E                 db    0
.eh_frame:000000000000638F                 db    0
.eh_frame:0000000000006390                 db  4Ch ; L
.eh_frame:0000000000006391                 db    0
.eh_frame:0000000000006392                 db    0
.eh_frame:0000000000006393                 db    0
.eh_frame:0000000000006394                 db  2Ch ; ,
.eh_frame:0000000000006395                 db    9
.eh_frame:0000000000006396                 db    0
.eh_frame:0000000000006397                 db    0
.eh_frame:0000000000006398                 db  88h
.eh_frame:0000000000006399                 db 0E4h
.eh_frame:000000000000639A                 db 0FFh
.eh_frame:000000000000639B                 db 0FFh
.eh_frame:000000000000639C                 db  7Dh ; }
.eh_frame:000000000000639D                 db    0
.eh_frame:000000000000639E                 db    0
.eh_frame:000000000000639F                 db    0
.eh_frame:00000000000063A0                 db    0
.eh_frame:00000000000063A1                 db  42h ; B
.eh_frame:00000000000063A2                 db  0Eh
.eh_frame:00000000000063A3                 db  10h
.eh_frame:00000000000063A4                 db  8Ch
.eh_frame:00000000000063A5                 db    2
.eh_frame:00000000000063A6                 db  41h ; A
.eh_frame:00000000000063A7                 db  0Eh
.eh_frame:00000000000063A8                 db  18h
.eh_frame:00000000000063A9                 db  86h
.eh_frame:00000000000063AA                 db    3
.eh_frame:00000000000063AB                 db  44h ; D
.eh_frame:00000000000063AC                 db  0Eh
.eh_frame:00000000000063AD                 db  20h
.eh_frame:00000000000063AE                 db  83h
.eh_frame:00000000000063AF                 db    4
.eh_frame:00000000000063B0                 db  69h ; i
.eh_frame:00000000000063B1                 db  0Ah
.eh_frame:00000000000063B2                 db  0Eh
.eh_frame:00000000000063B3                 db  18h
.eh_frame:00000000000063B4                 db  41h ; A
.eh_frame:00000000000063B5                 db  0Eh
.eh_frame:00000000000063B6                 db  10h
.eh_frame:00000000000063B7                 db  42h ; B
.eh_frame:00000000000063B8                 db  0Eh
.eh_frame:00000000000063B9                 db    8
.eh_frame:00000000000063BA                 db  45h ; E
.eh_frame:00000000000063BB                 db  0Bh
.eh_frame:00000000000063BC                 db  55h ; U
.eh_frame:00000000000063BD                 db  0Ah
.eh_frame:00000000000063BE                 db  0Eh
.eh_frame:00000000000063BF                 db  18h
.eh_frame:00000000000063C0                 db  41h ; A
.eh_frame:00000000000063C1                 db  0Eh
.eh_frame:00000000000063C2                 db  10h
.eh_frame:00000000000063C3                 db  42h ; B
.eh_frame:00000000000063C4                 db  0Eh
.eh_frame:00000000000063C5                 db    8
.eh_frame:00000000000063C6                 db  48h ; H
.eh_frame:00000000000063C7                 db  0Bh
.eh_frame:00000000000063C8                 db  41h ; A
.eh_frame:00000000000063C9                 db  0Ah
.eh_frame:00000000000063CA                 db  0Eh
.eh_frame:00000000000063CB                 db  18h
.eh_frame:00000000000063CC                 db  46h ; F
.eh_frame:00000000000063CD                 db  0Eh
.eh_frame:00000000000063CE                 db  10h
.eh_frame:00000000000063CF                 db  42h ; B
.eh_frame:00000000000063D0                 db  0Eh
.eh_frame:00000000000063D1                 db    8
.eh_frame:00000000000063D2                 db  47h ; G
.eh_frame:00000000000063D3                 db  0Bh
.eh_frame:00000000000063D4                 db  49h ; I
.eh_frame:00000000000063D5                 db  0Eh
.eh_frame:00000000000063D6                 db  18h
.eh_frame:00000000000063D7                 db  41h ; A
.eh_frame:00000000000063D8                 db  0Eh
.eh_frame:00000000000063D9                 db  10h
.eh_frame:00000000000063DA                 db  42h ; B
.eh_frame:00000000000063DB                 db  0Eh
.eh_frame:00000000000063DC                 db    8
.eh_frame:00000000000063DD                 db    0
.eh_frame:00000000000063DE                 db    0
.eh_frame:00000000000063DF                 db    0
.eh_frame:00000000000063E0                 db  1Ch
.eh_frame:00000000000063E1                 db    0
.eh_frame:00000000000063E2                 db    0
.eh_frame:00000000000063E3                 db    0
.eh_frame:00000000000063E4                 db  7Ch ; |
.eh_frame:00000000000063E5                 db    9
.eh_frame:00000000000063E6                 db    0
.eh_frame:00000000000063E7                 db    0
.eh_frame:00000000000063E8                 db 0B8h
.eh_frame:00000000000063E9                 db 0E4h
.eh_frame:00000000000063EA                 db 0FFh
.eh_frame:00000000000063EB                 db 0FFh
.eh_frame:00000000000063EC                 db  60h ; `
.eh_frame:00000000000063ED                 db    0
.eh_frame:00000000000063EE                 db    0
.eh_frame:00000000000063EF                 db    0
.eh_frame:00000000000063F0                 db    0
.eh_frame:00000000000063F1                 db  44h ; D
.eh_frame:00000000000063F2                 db  0Eh
.eh_frame:00000000000063F3                 db  10h
.eh_frame:00000000000063F4                 db  75h ; u
.eh_frame:00000000000063F5                 db  0Ah
.eh_frame:00000000000063F6                 db  0Eh
.eh_frame:00000000000063F7                 db    8
.eh_frame:00000000000063F8                 db  47h ; G
.eh_frame:00000000000063F9                 db  0Bh
.eh_frame:00000000000063FA                 db  5Fh ; _
.eh_frame:00000000000063FB                 db  0Eh
.eh_frame:00000000000063FC                 db    8
.eh_frame:00000000000063FD                 db    0
.eh_frame:00000000000063FE                 db    0
.eh_frame:00000000000063FF                 db    0
.eh_frame:0000000000006400                 db  1Ch
.eh_frame:0000000000006401                 db    0
.eh_frame:0000000000006402                 db    0
.eh_frame:0000000000006403                 db    0
.eh_frame:0000000000006404                 db  9Ch
.eh_frame:0000000000006405                 db    9
.eh_frame:0000000000006406                 db    0
.eh_frame:0000000000006407                 db    0
.eh_frame:0000000000006408                 db 0F8h
.eh_frame:0000000000006409                 db 0E4h
.eh_frame:000000000000640A                 db 0FFh
.eh_frame:000000000000640B                 db 0FFh
.eh_frame:000000000000640C                 db  3Ch ; <
.eh_frame:000000000000640D                 db    0
.eh_frame:000000000000640E                 db    0
.eh_frame:000000000000640F                 db    0
.eh_frame:0000000000006410                 db    0
.eh_frame:0000000000006411                 db  44h ; D
.eh_frame:0000000000006412                 db  0Eh
.eh_frame:0000000000006413                 db  10h
.eh_frame:0000000000006414                 db  61h ; a
.eh_frame:0000000000006415                 db  0Ah
.eh_frame:0000000000006416                 db  0Eh
.eh_frame:0000000000006417                 db    8
.eh_frame:0000000000006418                 db  4Bh ; K
.eh_frame:0000000000006419                 db  0Bh
.eh_frame:000000000000641A                 db  4Bh ; K
.eh_frame:000000000000641B                 db  0Eh
.eh_frame:000000000000641C                 db    8
.eh_frame:000000000000641D                 db    0
.eh_frame:000000000000641E                 db    0
.eh_frame:000000000000641F                 db    0
.eh_frame:0000000000006420                 db  34h ; 4
.eh_frame:0000000000006421                 db    0
.eh_frame:0000000000006422                 db    0
.eh_frame:0000000000006423                 db    0
.eh_frame:0000000000006424                 db 0BCh
.eh_frame:0000000000006425                 db    9
.eh_frame:0000000000006426                 db    0
.eh_frame:0000000000006427                 db    0
.eh_frame:0000000000006428                 db  18h
.eh_frame:0000000000006429                 db 0E5h
.eh_frame:000000000000642A                 db 0FFh
.eh_frame:000000000000642B                 db 0FFh
.eh_frame:000000000000642C                 db  7Bh ; {
.eh_frame:000000000000642D                 db    0
.eh_frame:000000000000642E                 db    0
.eh_frame:000000000000642F                 db    0
.eh_frame:0000000000006430                 db    0
.eh_frame:0000000000006431                 db  42h ; B
.eh_frame:0000000000006432                 db  0Eh
.eh_frame:0000000000006433                 db  10h
.eh_frame:0000000000006434                 db  8Ch
.eh_frame:0000000000006435                 db    2
.eh_frame:0000000000006436                 db  41h ; A
.eh_frame:0000000000006437                 db  0Eh
.eh_frame:0000000000006438                 db  18h
.eh_frame:0000000000006439                 db  86h
.eh_frame:000000000000643A                 db    3
.eh_frame:000000000000643B                 db  41h ; A
.eh_frame:000000000000643C                 db  0Eh
.eh_frame:000000000000643D                 db  20h
.eh_frame:000000000000643E                 db  83h
.eh_frame:000000000000643F                 db    4
.eh_frame:0000000000006440                 db  7Dh ; }
.eh_frame:0000000000006441                 db  0Ah
.eh_frame:0000000000006442                 db  0Eh
.eh_frame:0000000000006443                 db  18h
.eh_frame:0000000000006444                 db  41h ; A
.eh_frame:0000000000006445                 db  0Eh
.eh_frame:0000000000006446                 db  10h
.eh_frame:0000000000006447                 db  42h ; B
.eh_frame:0000000000006448                 db  0Eh
.eh_frame:0000000000006449                 db    8
.eh_frame:000000000000644A                 db  44h ; D
.eh_frame:000000000000644B                 db  0Bh
.eh_frame:000000000000644C                 db  60h ; `
.eh_frame:000000000000644D                 db  0Ah
.eh_frame:000000000000644E                 db  0Eh
.eh_frame:000000000000644F                 db  18h
.eh_frame:0000000000006450                 db  41h ; A
.eh_frame:0000000000006451                 db  0Eh
.eh_frame:0000000000006452                 db  10h
.eh_frame:0000000000006453                 db  42h ; B
.eh_frame:0000000000006454                 db  0Eh
.eh_frame:0000000000006455                 db    8
.eh_frame:0000000000006456                 db  45h ; E
.eh_frame:0000000000006457                 db  0Bh
.eh_frame:0000000000006458                 db  1Ch
.eh_frame:0000000000006459                 db    0
.eh_frame:000000000000645A                 db    0
.eh_frame:000000000000645B                 db    0
.eh_frame:000000000000645C                 db 0F4h
.eh_frame:000000000000645D                 db    9
.eh_frame:000000000000645E                 db    0
.eh_frame:000000000000645F                 db    0
.eh_frame:0000000000006460                 db  60h ; `
.eh_frame:0000000000006461                 db 0E5h
.eh_frame:0000000000006462                 db 0FFh
.eh_frame:0000000000006463                 db 0FFh
.eh_frame:0000000000006464                 db  40h ; @
.eh_frame:0000000000006465                 db    0
.eh_frame:0000000000006466                 db    0
.eh_frame:0000000000006467                 db    0
.eh_frame:0000000000006468                 db    0
.eh_frame:0000000000006469                 db  44h ; D
.eh_frame:000000000000646A                 db  0Eh
.eh_frame:000000000000646B                 db  10h
.eh_frame:000000000000646C                 db  83h
.eh_frame:000000000000646D                 db    2
.eh_frame:000000000000646E                 db  5Ah ; Z
.eh_frame:000000000000646F                 db  0Ah
.eh_frame:0000000000006470                 db  0Eh
.eh_frame:0000000000006471                 db    8
.eh_frame:0000000000006472                 db  4Ah ; J
.eh_frame:0000000000006473                 db  0Bh
.eh_frame:0000000000006474                 db  53h ; S
.eh_frame:0000000000006475                 db  0Eh
.eh_frame:0000000000006476                 db    8
.eh_frame:0000000000006477                 db    0
.eh_frame:0000000000006478                 db  2Ch ; ,
.eh_frame:0000000000006479                 db    0
.eh_frame:000000000000647A                 db    0
.eh_frame:000000000000647B                 db    0
.eh_frame:000000000000647C                 db  14h
.eh_frame:000000000000647D                 db  0Ah
.eh_frame:000000000000647E                 db    0
.eh_frame:000000000000647F                 db    0
.eh_frame:0000000000006480                 db  80h
.eh_frame:0000000000006481                 db 0E5h
.eh_frame:0000000000006482                 db 0FFh
.eh_frame:0000000000006483                 db 0FFh
.eh_frame:0000000000006484                 db  57h ; W
.eh_frame:0000000000006485                 db    0
.eh_frame:0000000000006486                 db    0
.eh_frame:0000000000006487                 db    0
.eh_frame:0000000000006488                 db    0
.eh_frame:0000000000006489                 db  63h ; c
.eh_frame:000000000000648A                 db  0Eh
.eh_frame:000000000000648B                 db  10h
.eh_frame:000000000000648C                 db  8Ch
.eh_frame:000000000000648D                 db    2
.eh_frame:000000000000648E                 db  41h ; A
.eh_frame:000000000000648F                 db  0Eh
.eh_frame:0000000000006490                 db  18h
.eh_frame:0000000000006491                 db  86h
.eh_frame:0000000000006492                 db    3
.eh_frame:0000000000006493                 db  44h ; D
.eh_frame:0000000000006494                 db  0Eh
.eh_frame:0000000000006495                 db  20h
.eh_frame:0000000000006496                 db  83h
.eh_frame:0000000000006497                 db    4
.eh_frame:0000000000006498                 db  6Bh ; k
.eh_frame:0000000000006499                 db  0Eh
.eh_frame:000000000000649A                 db  18h
.eh_frame:000000000000649B                 db  41h ; A
.eh_frame:000000000000649C                 db  0Eh
.eh_frame:000000000000649D                 db  10h
.eh_frame:000000000000649E                 db  42h ; B
.eh_frame:000000000000649F                 db  0Eh
.eh_frame:00000000000064A0                 db    8
.eh_frame:00000000000064A1                 db    0
.eh_frame:00000000000064A2                 db    0
.eh_frame:00000000000064A3                 db    0
.eh_frame:00000000000064A4                 db    0
.eh_frame:00000000000064A5                 db    0
.eh_frame:00000000000064A6                 db    0
.eh_frame:00000000000064A7                 db    0
.eh_frame:00000000000064A8                 db  44h ; D
.eh_frame:00000000000064A9                 db    0
.eh_frame:00000000000064AA                 db    0
.eh_frame:00000000000064AB                 db    0
.eh_frame:00000000000064AC                 db  44h ; D
.eh_frame:00000000000064AD                 db  0Ah
.eh_frame:00000000000064AE                 db    0
.eh_frame:00000000000064AF                 db    0
.eh_frame:00000000000064B0                 db 0B0h
.eh_frame:00000000000064B1                 db 0E5h
.eh_frame:00000000000064B2                 db 0FFh
.eh_frame:00000000000064B3                 db 0FFh
.eh_frame:00000000000064B4                 db  65h ; e
.eh_frame:00000000000064B5                 db    0
.eh_frame:00000000000064B6                 db    0
.eh_frame:00000000000064B7                 db    0
.eh_frame:00000000000064B8                 db    0
.eh_frame:00000000000064B9                 db  42h ; B
.eh_frame:00000000000064BA                 db  0Eh
.eh_frame:00000000000064BB                 db  10h
.eh_frame:00000000000064BC                 db  8Fh
.eh_frame:00000000000064BD                 db    2
.eh_frame:00000000000064BE                 db  42h ; B
.eh_frame:00000000000064BF                 db  0Eh
.eh_frame:00000000000064C0                 db  18h
.eh_frame:00000000000064C1                 db  8Eh
.eh_frame:00000000000064C2                 db    3
.eh_frame:00000000000064C3                 db  45h ; E
.eh_frame:00000000000064C4                 db  0Eh
.eh_frame:00000000000064C5                 db  20h
.eh_frame:00000000000064C6                 db  8Dh
.eh_frame:00000000000064C7                 db    4
.eh_frame:00000000000064C8                 db  42h ; B
.eh_frame:00000000000064C9                 db  0Eh
.eh_frame:00000000000064CA                 db  28h ; (
.eh_frame:00000000000064CB                 db  8Ch
.eh_frame:00000000000064CC                 db    5
.eh_frame:00000000000064CD                 db  48h ; H
.eh_frame:00000000000064CE                 db  0Eh
.eh_frame:00000000000064CF                 db  30h ; 0
.eh_frame:00000000000064D0                 db  86h
.eh_frame:00000000000064D1                 db    6
.eh_frame:00000000000064D2                 db  48h ; H
.eh_frame:00000000000064D3                 db  0Eh
.eh_frame:00000000000064D4                 db  38h ; 8
.eh_frame:00000000000064D5                 db  83h
.eh_frame:00000000000064D6                 db    7
.eh_frame:00000000000064D7                 db  4Dh ; M
.eh_frame:00000000000064D8                 db  0Eh
.eh_frame:00000000000064D9                 db  40h ; @
.eh_frame:00000000000064DA                 db  72h ; r
.eh_frame:00000000000064DB                 db  0Eh
.eh_frame:00000000000064DC                 db  38h ; 8
.eh_frame:00000000000064DD                 db  41h ; A
.eh_frame:00000000000064DE                 db  0Eh
.eh_frame:00000000000064DF                 db  30h ; 0
.eh_frame:00000000000064E0                 db  41h ; A
.eh_frame:00000000000064E1                 db  0Eh
.eh_frame:00000000000064E2                 db  28h ; (
.eh_frame:00000000000064E3                 db  42h ; B
.eh_frame:00000000000064E4                 db  0Eh
.eh_frame:00000000000064E5                 db  20h
.eh_frame:00000000000064E6                 db  42h ; B
.eh_frame:00000000000064E7                 db  0Eh
.eh_frame:00000000000064E8                 db  18h
.eh_frame:00000000000064E9                 db  42h ; B
.eh_frame:00000000000064EA                 db  0Eh
.eh_frame:00000000000064EB                 db  10h
.eh_frame:00000000000064EC                 db  42h ; B
.eh_frame:00000000000064ED                 db  0Eh
.eh_frame:00000000000064EE                 db    8
.eh_frame:00000000000064EF                 db    0
.eh_frame:00000000000064F0                 db  14h
.eh_frame:00000000000064F1                 db    0
.eh_frame:00000000000064F2                 db    0
.eh_frame:00000000000064F3                 db    0
.eh_frame:00000000000064F4                 db  8Ch
.eh_frame:00000000000064F5                 db  0Ah
.eh_frame:00000000000064F6                 db    0
.eh_frame:00000000000064F7                 db    0
.eh_frame:00000000000064F8                 db 0D8h
.eh_frame:00000000000064F9                 db 0E5h
.eh_frame:00000000000064FA                 db 0FFh
.eh_frame:00000000000064FB                 db 0FFh
.eh_frame:00000000000064FC                 db    2
.eh_frame:00000000000064FD                 db    0
.eh_frame:00000000000064FE                 db    0
.eh_frame:00000000000064FF                 db    0
.eh_frame:0000000000006500                 db    0
.eh_frame:0000000000006501                 db    0
.eh_frame:0000000000006502                 db    0
.eh_frame:0000000000006503                 db    0
.eh_frame:0000000000006504                 db    0
.eh_frame:0000000000006505                 db    0
.eh_frame:0000000000006506                 db    0
.eh_frame:0000000000006507                 db    0
.eh_frame:0000000000006508                 db  10h
.eh_frame:0000000000006509                 db    0
.eh_frame:000000000000650A                 db    0
.eh_frame:000000000000650B                 db    0
.eh_frame:000000000000650C                 db 0A4h
.eh_frame:000000000000650D                 db  0Ah
.eh_frame:000000000000650E                 db    0
.eh_frame:000000000000650F                 db    0
.eh_frame:0000000000006510                 db 0D0h
.eh_frame:0000000000006511                 db 0E5h
.eh_frame:0000000000006512                 db 0FFh
.eh_frame:0000000000006513                 db 0FFh
.eh_frame:0000000000006514                 db  0Eh
.eh_frame:0000000000006515                 db    0
.eh_frame:0000000000006516                 db    0
.eh_frame:0000000000006517                 db    0
.eh_frame:0000000000006518                 db    0
.eh_frame:0000000000006519                 db    0
.eh_frame:000000000000651A                 db    0
.eh_frame:000000000000651B                 db    0
.eh_frame:000000000000651C __FRAME_END__   db    0
.eh_frame:000000000000651D                 db    0
.eh_frame:000000000000651E                 db    0
.eh_frame:000000000000651F                 db    0
.eh_frame:000000000000651F _eh_frame       ends
.eh_frame:000000000000651F
.init_array:0000000000206B50 ; ELF Initialization Function Table
.init_array:0000000000206B50 ; ===========================================================================
.init_array:0000000000206B50
.init_array:0000000000206B50 ; Segment type: Pure data
.init_array:0000000000206B50 ; Segment permissions: Read/Write
.init_array:0000000000206B50 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B50                 assume cs:_init_array
.init_array:0000000000206B50                 ;org 206B50h
.init_array:0000000000206B50 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B50                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B50                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B50 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B50
.fini_array:0000000000206B58 ; ELF Termination Function Table
.fini_array:0000000000206B58 ; ===========================================================================
.fini_array:0000000000206B58
.fini_array:0000000000206B58 ; Segment type: Pure data
.fini_array:0000000000206B58 ; Segment permissions: Read/Write
.fini_array:0000000000206B58 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B58                 assume cs:_fini_array
.fini_array:0000000000206B58                 ;org 206B58h
.fini_array:0000000000206B58 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B58                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B58 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B58
.data.rel.ro:0000000000206B60 ; ===========================================================================
.data.rel.ro:0000000000206B60
.data.rel.ro:0000000000206B60 ; Segment type: Pure data
.data.rel.ro:0000000000206B60 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206B60 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206B60                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206B60                 ;org 206B60h
.data.rel.ro:0000000000206B60 ; struct option long_options
.data.rel.ro:0000000000206B60 long_options    dq offset aData         ; name
.data.rel.ro:0000000000206B60                                         ; DATA XREF: main:loc_166D↑o
.data.rel.ro:0000000000206B60                 dd 0                    ; has_arg ; "data"
.data.rel.ro:0000000000206B60                 db 4 dup(0)
.data.rel.ro:0000000000206B60                 dq 0                    ; flag
.data.rel.ro:0000000000206B60                 dd 64h                  ; val
.data.rel.ro:0000000000206B60                 db 4 dup(0)
.data.rel.ro:0000000000206B80                 dq offset aFileSystem   ; "file-system"
.data.rel.ro:0000000000206B88                 db    0
.data.rel.ro:0000000000206B89                 db    0
.data.rel.ro:0000000000206B8A                 db    0
.data.rel.ro:0000000000206B8B                 db    0
.data.rel.ro:0000000000206B8C                 db    0
.data.rel.ro:0000000000206B8D                 db    0
.data.rel.ro:0000000000206B8E                 db    0
.data.rel.ro:0000000000206B8F                 db    0
.data.rel.ro:0000000000206B90                 db    0
.data.rel.ro:0000000000206B91                 db    0
.data.rel.ro:0000000000206B92                 db    0
.data.rel.ro:0000000000206B93                 db    0
.data.rel.ro:0000000000206B94                 db    0
.data.rel.ro:0000000000206B95                 db    0
.data.rel.ro:0000000000206B96                 db    0
.data.rel.ro:0000000000206B97                 db    0
.data.rel.ro:0000000000206B98                 db  66h ; f
.data.rel.ro:0000000000206B99                 db    0
.data.rel.ro:0000000000206B9A                 db    0
.data.rel.ro:0000000000206B9B                 db    0
.data.rel.ro:0000000000206B9C                 db    0
.data.rel.ro:0000000000206B9D                 db    0
.data.rel.ro:0000000000206B9E                 db    0
.data.rel.ro:0000000000206B9F                 db    0
.data.rel.ro:0000000000206BA0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000206BA8                 db    0
.data.rel.ro:0000000000206BA9                 db    0
.data.rel.ro:0000000000206BAA                 db    0
.data.rel.ro:0000000000206BAB                 db    0
.data.rel.ro:0000000000206BAC                 db    0
.data.rel.ro:0000000000206BAD                 db    0
.data.rel.ro:0000000000206BAE                 db    0
.data.rel.ro:0000000000206BAF                 db    0
.data.rel.ro:0000000000206BB0                 db    0
.data.rel.ro:0000000000206BB1                 db    0
.data.rel.ro:0000000000206BB2                 db    0
.data.rel.ro:0000000000206BB3                 db    0
.data.rel.ro:0000000000206BB4                 db    0
.data.rel.ro:0000000000206BB5                 db    0
.data.rel.ro:0000000000206BB6                 db    0
.data.rel.ro:0000000000206BB7                 db    0
.data.rel.ro:0000000000206BB8                 db  7Eh ; ~
.data.rel.ro:0000000000206BB9                 db 0FFh
.data.rel.ro:0000000000206BBA                 db 0FFh
.data.rel.ro:0000000000206BBB                 db 0FFh
.data.rel.ro:0000000000206BBC                 db    0
.data.rel.ro:0000000000206BBD                 db    0
.data.rel.ro:0000000000206BBE                 db    0
.data.rel.ro:0000000000206BBF                 db    0
.data.rel.ro:0000000000206BC0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db  7Dh ; }
.data.rel.ro:0000000000206BD9                 db 0FFh
.data.rel.ro:0000000000206BDA                 db 0FFh
.data.rel.ro:0000000000206BDB                 db 0FFh
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 db    0
.data.rel.ro:0000000000206BE1                 db    0
.data.rel.ro:0000000000206BE2                 db    0
.data.rel.ro:0000000000206BE3                 db    0
.data.rel.ro:0000000000206BE4                 db    0
.data.rel.ro:0000000000206BE5                 db    0
.data.rel.ro:0000000000206BE6                 db    0
.data.rel.ro:0000000000206BE7                 db    0
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db    0
.data.rel.ro:0000000000206BF9                 db    0
.data.rel.ro:0000000000206BFA                 db    0
.data.rel.ro:0000000000206BFB                 db    0
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 public quoting_style_args
.data.rel.ro:0000000000206C00 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C08                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C10                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C18                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C20                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C28                 dq offset aSync+3       ; "c"
.data.rel.ro:0000000000206C30                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C40                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C48                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C50                 db    0
.data.rel.ro:0000000000206C51                 db    0
.data.rel.ro:0000000000206C52                 db    0
.data.rel.ro:0000000000206C53                 db    0
.data.rel.ro:0000000000206C54                 db    0
.data.rel.ro:0000000000206C55                 db    0
.data.rel.ro:0000000000206C56                 db    0
.data.rel.ro:0000000000206C57                 db    0
.data.rel.ro:0000000000206C57 _data_rel_ro    ends
.data.rel.ro:0000000000206C57
LOAD:0000000000206C58 ; ELF Dynamic Information
LOAD:0000000000206C58 ; ===========================================================================
LOAD:0000000000206C58
LOAD:0000000000206C58 ; Segment type: Pure data
LOAD:0000000000206C58 ; Segment permissions: Read/Write
LOAD:0000000000206C58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C58                 assume cs:LOAD
LOAD:0000000000206C58                 ;org 206C58h
LOAD:0000000000206C58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C68                 Elf64_Dyn <0Ch, 12F0h>  ; DT_INIT
LOAD:0000000000206C78                 Elf64_Dyn <0Dh, 4AF0h>  ; DT_FINI
LOAD:0000000000206C88                 Elf64_Dyn <19h, 206B50h> ; DT_INIT_ARRAY
LOAD:0000000000206C98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CA8                 Elf64_Dyn <1Ah, 206B58h> ; DT_FINI_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CD8                 Elf64_Dyn <5, 860h>     ; DT_STRTAB
LOAD:0000000000206CE8                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000206CF8                 Elf64_Dyn <0Ah, 29Ah>   ; DT_STRSZ
LOAD:0000000000206D08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D28                 Elf64_Dyn <3, 206E48h>  ; DT_PLTGOT
LOAD:0000000000206D38                 Elf64_Dyn <2, 450h>     ; DT_PLTRELSZ
LOAD:0000000000206D48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D58                 Elf64_Dyn <17h, 0EA0h>  ; DT_JMPREL
LOAD:0000000000206D68                 Elf64_Dyn <7, 0BD0h>    ; DT_RELA
LOAD:0000000000206D78                 Elf64_Dyn <8, 2D0h>     ; DT_RELASZ
LOAD:0000000000206D88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206D98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DB8                 Elf64_Dyn <6FFFFFFEh, 0B70h> ; DT_VERNEED
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFF0h, 0AFAh> ; DT_VERSYM
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFF9h, 14h> ; DT_RELACOUNT
LOAD:0000000000206DF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E08                 db    0
LOAD:0000000000206E09                 db    0
LOAD:0000000000206E0A                 db    0
LOAD:0000000000206E0B                 db    0
LOAD:0000000000206E0C                 db    0
LOAD:0000000000206E0D                 db    0
LOAD:0000000000206E0E                 db    0
LOAD:0000000000206E0F                 db    0
LOAD:0000000000206E10                 db    0
LOAD:0000000000206E11                 db    0
LOAD:0000000000206E12                 db    0
LOAD:0000000000206E13                 db    0
LOAD:0000000000206E14                 db    0
LOAD:0000000000206E15                 db    0
LOAD:0000000000206E16                 db    0
LOAD:0000000000206E17                 db    0
LOAD:0000000000206E18                 db    0
LOAD:0000000000206E19                 db    0
LOAD:0000000000206E1A                 db    0
LOAD:0000000000206E1B                 db    0
LOAD:0000000000206E1C                 db    0
LOAD:0000000000206E1D                 db    0
LOAD:0000000000206E1E                 db    0
LOAD:0000000000206E1F                 db    0
LOAD:0000000000206E20                 db    0
LOAD:0000000000206E21                 db    0
LOAD:0000000000206E22                 db    0
LOAD:0000000000206E23                 db    0
LOAD:0000000000206E24                 db    0
LOAD:0000000000206E25                 db    0
LOAD:0000000000206E26                 db    0
LOAD:0000000000206E27                 db    0
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E47 LOAD            ends
LOAD:0000000000206E47
.got:0000000000206E48 ; ===========================================================================
.got:0000000000206E48
.got:0000000000206E48 ; Segment type: Pure data
.got:0000000000206E48 ; Segment permissions: Read/Write
.got:0000000000206E48 _got            segment qword public 'DATA' use64
.got:0000000000206E48                 assume cs:_got
.got:0000000000206E48                 ;org 206E48h
.got:0000000000206E48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E50 qword_206E50    dq 0                    ; DATA XREF: sub_1310↑r
.got:0000000000206E58 qword_206E58    dq 0                    ; DATA XREF: sub_1310+6↑r
.got:0000000000206E60 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E68 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E70 __errno_location_ptr dq offset __errno_location
.got:0000000000206E70                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E78 fdatasync_ptr   dq offset fdatasync     ; DATA XREF: _fdatasync↑r
.got:0000000000206E80 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206E88 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206E90 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206E98 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000206EA0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EA8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EB0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EB0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206EB8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206EC0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206EC0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EC8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206ED0 syncfs_ptr      dq offset syncfs        ; DATA XREF: _syncfs↑r
.got:0000000000206ED8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206ED8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EE0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EE8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206EF0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206EF8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F00 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F08 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000206F10 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F18 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F18                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F20 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F38 sync_ptr        dq offset sync          ; DATA XREF: _sync↑r
.got:0000000000206F40 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F48 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F50 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F58 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F80 fsync_ptr       dq offset fsync         ; DATA XREF: _fsync↑r
.got:0000000000206F88 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000206F90 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206FA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FD8                                         ; DATA XREF: start+24↑r
.got:0000000000206FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FF0 _got            ends
.got:0000000000206FF0
LOAD:0000000000206FF8 ; ===========================================================================
LOAD:0000000000206FF8
LOAD:0000000000206FF8 ; Segment type: Pure data
LOAD:0000000000206FF8 ; Segment permissions: Read/Write
LOAD:0000000000206FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FF8                 assume cs:LOAD
LOAD:0000000000206FF8                 ;org 206FF8h
LOAD:0000000000206FF8                 align 20h
LOAD:0000000000206FF8 LOAD            ends
LOAD:0000000000206FF8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+B6↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1F02↑r
.data:0000000000207018                                         ; xalloc_die+17↑r
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_337D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000007D0↑o
.bss:0000000000207080                                         ; LOAD:0000000000000818↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007B8↑o
.bss:0000000000207088                                         ; main+AF↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000848↑o
.bss:0000000000207090                                         ; main+FE↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:00000000000007E8↑o
.bss:0000000000207098                                         ; LOAD:0000000000000800↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070A0 ; FILE *stderr
.bss:00000000002070A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000830↑o
.bss:00000000002070A0                                         ; usage+3D↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'stderr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070A8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070A9                 align 10h
.bss:00000000002070B0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070B0                                         ; close_stdout+1B↑r
.bss:00000000002070B1                 align 8
.bss:00000000002070B8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070B8                                         ; close_stdout+56↑r
.bss:00000000002070C0                 public program_name
.bss:00000000002070C0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070C0                                         ; set_program_name:loc_1F9D↑w
.bss:00000000002070C8                 align 20h
.bss:00000000002070E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002070E0                                         ; quotearg_free+46↑o ...
.bss:00000000002070E1                 db    ? ;
.bss:00000000002070E2                 db    ? ;
.bss:00000000002070E3                 db    ? ;
.bss:00000000002070E4                 db    ? ;
.bss:00000000002070E5                 db    ? ;
.bss:00000000002070E6                 db    ? ;
.bss:00000000002070E7                 db    ? ;
.bss:00000000002070E8                 db    ? ;
.bss:00000000002070E9                 db    ? ;
.bss:00000000002070EA                 db    ? ;
.bss:00000000002070EB                 db    ? ;
.bss:00000000002070EC                 db    ? ;
.bss:00000000002070ED                 db    ? ;
.bss:00000000002070EE                 db    ? ;
.bss:00000000002070EF                 db    ? ;
.bss:00000000002070F0                 db    ? ;
.bss:00000000002070F1                 db    ? ;
.bss:00000000002070F2                 db    ? ;
.bss:00000000002070F3                 db    ? ;
.bss:00000000002070F4                 db    ? ;
.bss:00000000002070F5                 db    ? ;
.bss:00000000002070F6                 db    ? ;
.bss:00000000002070F7                 db    ? ;
.bss:00000000002070F8                 db    ? ;
.bss:00000000002070F9                 db    ? ;
.bss:00000000002070FA                 db    ? ;
.bss:00000000002070FB                 db    ? ;
.bss:00000000002070FC                 db    ? ;
.bss:00000000002070FD                 db    ? ;
.bss:00000000002070FE                 db    ? ;
.bss:00000000002070FF                 db    ? ;
.bss:0000000000207100                 db    ? ;
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002071E0                                         ; get_quoting_style↑o ...
.bss:00000000002071F0 xmmword_2071F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002071F0                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207200 xmmword_207200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207200                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207210 qword_207210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207218 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:0000000000207218                                         ; rpl_fcntl:loc_459F↑w ...
.bss:000000000020721C                 align 20h
.bss:000000000020721C _bss            ends
.bss:000000000020721C
.prgend:0000000000207220 ; ===========================================================================
.prgend:0000000000207220
.prgend:0000000000207220 ; Segment type: Zero-length
.prgend:0000000000207220 _prgend         segment byte public '' use64
.prgend:0000000000207220 _end            label byte
.prgend:0000000000207220 _prgend         ends
.prgend:0000000000207220
extern:0000000000207228 ; ===========================================================================
extern:0000000000207228
extern:0000000000207228 ; Segment type: Externs
extern:0000000000207228 ; extern
extern:0000000000207228 ; void free(void *ptr)
extern:0000000000207228                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207228                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207230 ; void __noreturn abort(void)
extern:0000000000207230                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207230                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207238 ; int *_errno_location(void)
extern:0000000000207238                 extrn __errno_location:near
extern:0000000000207238                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207238                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207240 ; int fdatasync(int fildes)
extern:0000000000207240                 extrn fdatasync:near    ; CODE XREF: _fdatasync↑j
extern:0000000000207240                                         ; DATA XREF: .got:fdatasync_ptr↑o
extern:0000000000207248 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207248                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207248                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207250 ; void __noreturn exit(int status)
extern:0000000000207250                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207250                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207258 ; size_t _fpending(FILE *fp)
extern:0000000000207258                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207258                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207260 ; int fcntl(int fd, int cmd, ...)
extern:0000000000207260                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:0000000000207260                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:0000000000207268 ; char *textdomain(const char *domainname)
extern:0000000000207268                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207268                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207270 ; int fclose(FILE *stream)
extern:0000000000207270                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207270                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207278 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207278                 extrn bindtextdomain:near
extern:0000000000207278                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207278                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207280 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207280                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207280                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207288 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207288                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207288                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207288                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207290 ; size_t strlen(const char *s)
extern:0000000000207290                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207290                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000207298 ; int syncfs(int fd)
extern:0000000000207298                 extrn syncfs:near       ; CODE XREF: _syncfs↑j
extern:0000000000207298                                         ; DATA XREF: .got:syncfs_ptr↑o
extern:00000000002072A0                 extrn __stack_chk_fail:near
extern:00000000002072A0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072A0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072A8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072A8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072A8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072B0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072B0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072B8 ; char *strrchr(const char *s, int c)
extern:00000000002072B8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072B8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072C8 ; void *memset(void *s, int c, size_t n)
extern:00000000002072C8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072C8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D0 ; int close(int fd)
extern:00000000002072D0                 extrn close:near        ; CODE XREF: _close↑j
extern:00000000002072D0                                         ; DATA XREF: .got:close_ptr↑o
extern:00000000002072D8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072D8                 extrn __libc_start_main:near
extern:00000000002072D8                                         ; CODE XREF: start+24↑p
extern:00000000002072D8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072E0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072E0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072E0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072E8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072E8                 extrn fputs_unlocked:near
extern:00000000002072E8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072E8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072F0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072F0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072F0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072F8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072F8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072F8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207300 ; int fileno(FILE *stream)
extern:0000000000207300                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207300                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207308 ; void sync(void)
extern:0000000000207308                 extrn sync:near         ; CODE XREF: _sync↑j
extern:0000000000207308                                         ; DATA XREF: .got:sync_ptr↑o
extern:0000000000207310 ; void *malloc(size_t size)
extern:0000000000207310                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207310                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207318 ; int fflush(FILE *stream)
extern:0000000000207318                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207318                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207320 ; char *nl_langinfo(nl_item item)
extern:0000000000207320                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207320                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207328 ; int _freading(FILE *fp)
extern:0000000000207328                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207328                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207330 ; void *realloc(void *ptr, size_t size)
extern:0000000000207330                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207330                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207338 ; char *setlocale(int category, const char *locale)
extern:0000000000207338                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207338                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207340                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207340                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207348 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207348                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207348                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207350 ; int fsync(int fd)
extern:0000000000207350                 extrn fsync:near        ; CODE XREF: _fsync↑j
extern:0000000000207350                                         ; DATA XREF: .got:fsync_ptr↑o
extern:0000000000207358 ; int open(const char *file, int oflag, ...)
extern:0000000000207358                 extrn open:near         ; CODE XREF: _open↑j
extern:0000000000207358                                         ; DATA XREF: .got:open_ptr↑o
extern:0000000000207360 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207360                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207360                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207368 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207368                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207368                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207370 ; void __noreturn exit(int status)
extern:0000000000207370                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207370                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207378 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207378                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207378                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207380                 extrn __fprintf_chk:near
extern:0000000000207380                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207380                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207388 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207388                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207388                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207390 ; int iswprint(wint_t wc)
extern:0000000000207390                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207390                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207398 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207398                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207398                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207398                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002073A0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002073A0                 extrn __ctype_b_loc:near
extern:00000000002073A0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002073A0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002073A8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002073A8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002073B0                 extrn __gmon_start__:near ; weak
extern:00000000002073B0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002073B0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073B8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073B8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073B8
extern:00000000002073B8
extern:00000000002073B8                 end start
