LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 4AC072FCDD77715EA5E588CBEF27ADC5AF46583B75F8F7F6863B2AA4D6204077
LOAD:0000000000000000 ; Input MD5    : B38FCCC7A4304D4B006FF14CD97B7128
LOAD:0000000000000000 ; Input CRC32  : 07D77928
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/printf
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'printf.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'cl-strtold.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'unicodeio.c'
LOAD:0000000000000000 ; Source File : 'u8-uctomb-aux.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xprintf.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vfprintf.c'
LOAD:0000000000000000 ; Source File : 'vprintf.c'
LOAD:0000000000000000 ; Source File : 'c-strtold.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'fseterr.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 39B90h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0ABF8h               ; Size in file image
LOAD:00000000000000D8                 dq 0ABF8h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0BBB0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20BBB0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4D0h                 ; Size in file image
LOAD:0000000000000110                 dq 680h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0BC18h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20BC18h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 9A7Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 9A7Ch                ; Physical address
LOAD:00000000000001B0                 dq 2E4h                 ; Size in file image
LOAD:00000000000001B8                 dq 2E4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0BBB0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20BBB0h              ; Physical address
LOAD:0000000000000220                 dq 450h                 ; Size in file image
LOAD:0000000000000228                 dq 450h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 2Dh, 8Ah, 38h, 29h, 0D1h, 0E2h, 40h, 8Bh, 5, 3Eh, 0CDh ; Desc
LOAD:0000000000000284                 db 39h, 10h, 0B6h, 96h, 0B4h, 73h, 0D4h, 25h, 0D5h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 3Ah
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000404904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 3Ah, 3Bh, 0
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 0
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aGetenv - offset byte_8D8, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F0                            offset dword_0, 0>
LOAD:0000000000000308                 Elf64_Sym <offset aSnprintfChk - offset byte_8D8, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000308                            offset dword_0, 0>
LOAD:0000000000000320                 Elf64_Sym <offset aFree - offset byte_8D8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000320                            0>
LOAD:0000000000000338                 Elf64_Sym <offset aAbort - offset byte_8D8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000338                            0>
LOAD:0000000000000350                 Elf64_Sym <offset aErrnoLocation - offset byte_8D8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aStrncmp - offset byte_8D8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aItmDeregistert - offset byte_8D8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aExit - offset byte_8D8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000398                            0>
LOAD:00000000000003B0                 Elf64_Sym <offset aFpending - offset byte_8D8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aIconv - offset byte_8D8, 12h, 0, 0, offset dword_0,\ ; "iconv"
LOAD:00000000000003C8                            0>
LOAD:00000000000003E0                 Elf64_Sym <offset aFerror - offset byte_8D8, 12h, 0, 0, \ ; "ferror"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8D8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aStrtolInternal - offset byte_8D8, 12h, 0, 0, \ ; "__strtol_internal"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aFclose - offset byte_8D8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aBindtextdomain - offset byte_8D8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aDcgettext - offset byte_8D8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8D8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aStrlen - offset byte_8D8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aStackChkFail - offset byte_8D8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aMbrtowc - offset byte_8D8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aStrchr - offset byte_8D8, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aNewlocale - offset byte_8D8, 12h, 0, 0, \ ; "newlocale"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aOverflow - offset byte_8D8, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aStrrchr - offset byte_8D8, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aLseek - offset byte_8D8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000530                            0>
LOAD:0000000000000548                 Elf64_Sym <offset aStrtoulInterna - offset byte_8D8, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aMemset - offset byte_8D8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aLibcStartMain - offset byte_8D8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aMemcmp - offset byte_8D8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aFputsUnlocked - offset byte_8D8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aCalloc - offset byte_8D8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aStrcmp - offset byte_8D8, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aGmonStart - offset byte_8D8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aMemcpy - offset byte_8D8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aFileno - offset byte_8D8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aUselocale - offset byte_8D8, 12h, 0, 0, \ ; "uselocale"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aMalloc - offset byte_8D8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aFflush - offset byte_8D8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aNlLanginfo - offset byte_8D8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aFreading - offset byte_8D8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aRealloc - offset byte_8D8, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aSetlocale - offset byte_8D8, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aPrintfChk - offset byte_8D8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aMempcpy - offset byte_8D8, 12h, 0, 0, \ ; "mempcpy"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aStrtold - offset byte_8D8, 12h, 0, 0, \ ; "strtold"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aFerror+1 - offset byte_8D8, 12h, 0, 0, \ ; "error"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aFseeko - offset byte_8D8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aCxaAtexit - offset byte_8D8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aExit+1 - offset byte_8D8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aFwrite - offset byte_8D8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aFprintfChk - offset byte_8D8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aItmRegistertmc - offset byte_8D8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aMbsinit - offset byte_8D8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aIswprint - offset byte_8D8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007E8                            offset dword_0, 0>
LOAD:0000000000000800                 Elf64_Sym <offset aCxaFinalize - offset byte_8D8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000800                            offset dword_0, 0>
LOAD:0000000000000818                 Elf64_Sym <offset aCtypeBLoc - offset byte_8D8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000818                            offset dword_0, 0>
LOAD:0000000000000830                 Elf64_Sym <offset aIconvOpen - offset byte_8D8, 12h, 0, 0, \ ; "iconv_open"
LOAD:0000000000000830                            offset dword_0, 0>
LOAD:0000000000000848                 Elf64_Sym <offset aStdout - offset byte_8D8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000848                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000860                 Elf64_Sym <offset aProgname - offset byte_8D8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000860                            offset __bss_start, 8>
LOAD:0000000000000878                 Elf64_Sym <offset aProgramInvocat - offset byte_8D8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000878                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000890                 Elf64_Sym <offset aPrognameFull - offset byte_8D8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000890                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008A8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8D8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000008A8                            offset __bss_start, 8>
LOAD:00000000000008C0                 Elf64_Sym <offset aStderr - offset byte_8D8, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000008C0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008D8 ; ELF String Table
LOAD:00000000000008D8 byte_8D8        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000008D8                                         ; LOAD:0000000000000308↑o ...
LOAD:00000000000008D9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C48↓o
LOAD:00000000000008E3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000668↑o
LOAD:00000000000008EA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:00000000000008F7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000901 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000909 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000911 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000518↑o
LOAD:0000000000000919 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000923 aUselocale      db 'uselocale',0        ; DATA XREF: LOAD:0000000000000638↑o
LOAD:000000000000092D aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:000000000000093E aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:0000000000000947 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:000000000000094F aStrtold        db 'strtold',0          ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000957 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000338↑o
LOAD:000000000000095D aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000398↑o
LOAD:000000000000095D                                         ; LOAD:0000000000000770↑o
LOAD:0000000000000963 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000963                                         ; DATA XREF: LOAD:0000000000000878↑o
LOAD:000000000000097B aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000097B                                         ; DATA XREF: LOAD:0000000000000470↑o
LOAD:0000000000000992 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000999 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000488↑o
LOAD:00000000000009A0 aNewlocale      db 'newlocale',0        ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:00000000000009AA aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:00000000000009B1 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000350↑o
LOAD:00000000000009C2 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:00000000000009C9 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:00000000000009D1 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:00000000000009DF aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000848↑o
LOAD:00000000000009E6 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000530↑o
LOAD:00000000000009EC aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000608↑o
LOAD:00000000000009F3 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000428↑o
LOAD:00000000000009FA aStrtolInternal db '__strtol_internal',0
LOAD:00000000000009FA                                         ; DATA XREF: LOAD:0000000000000410↑o
LOAD:0000000000000A0C aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000A13 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:0000000000000A1B aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000680↑o
LOAD:0000000000000A27 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000818↑o
LOAD:0000000000000A35 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000A3C aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000698↑o
LOAD:0000000000000A47 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000008C0↑o
LOAD:0000000000000A4E aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000A5D aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000A64 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000788↑o
LOAD:0000000000000A6B aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000A76 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000A7D aIconv          db 'iconv',0            ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:0000000000000A83 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A83                                         ; DATA XREF: LOAD:00000000000008A8↑o
LOAD:0000000000000AA1 aIconvOpen      db 'iconv_open',0       ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000AAC aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000ABB aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000ABB                                         ; LOAD:00000000000003F8↑o
LOAD:0000000000000ACA aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000AD1 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000AD1                                         ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000AE3 aFerror         db 'ferror',0           ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000AE3                                         ; LOAD:0000000000000728↑o
LOAD:0000000000000AEA aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000AF1 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000500↑o
LOAD:0000000000000AFC aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000AFC                                         ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000B0F aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000B1E aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000B23 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000860↑o
LOAD:0000000000000B2E aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000890↑o
LOAD:0000000000000B3E aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000B4B aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C58↓o
LOAD:0000000000000B56 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C68↓o
LOAD:0000000000000B60 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C78↓o
LOAD:0000000000000B6A aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C88↓o
LOAD:0000000000000B76 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C98↓o
LOAD:0000000000000B82 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B82                                         ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000B9E aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000BAD aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000BAD                                         ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000BC7                 align 8
LOAD:0000000000000BC8 ; ELF GNU Symbol Version Table
LOAD:0000000000000BC8                 dw 0
LOAD:0000000000000BCA                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BCE                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000BD8                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 2                    ; iconv@@GLIBC_2.2.5
LOAD:0000000000000BDE                 dw 2                    ; ferror@@GLIBC_2.2.5
LOAD:0000000000000BE0                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; __strtol_internal@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BEC                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BF0                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 5                    ; newlocale@@GLIBC_2.3
LOAD:0000000000000BF6                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C06                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C08                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C0C                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C0E                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 5                    ; uselocale@@GLIBC_2.3
LOAD:0000000000000C12                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000C16                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000C18                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000C1A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C1E                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C20                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000000C22                 dw 2                    ; strtold@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C30                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C32                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C34                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C36                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C38                 dw 5                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C3A                 dw 2                    ; iconv_open@@GLIBC_2.2.5
LOAD:0000000000000C3C                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C3E                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C40                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C42                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C44                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C46                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C48 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C48                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8D8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C58                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset byte_8D8, \ ; "GLIBC_2.14"
LOAD:0000000000000C58                                10h>
LOAD:0000000000000C68                 Elf64_Vernaux <0D696913h, 0, 5, offset aGlibc23 - offset byte_8D8, \ ; "GLIBC_2.3"
LOAD:0000000000000C68                                10h>
LOAD:0000000000000C78                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_8D8, \ ; "GLIBC_2.4"
LOAD:0000000000000C78                                10h>
LOAD:0000000000000C88                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_8D8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C88                                10h>
LOAD:0000000000000C98                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8D8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000CA8 ; ELF RELA Relocation Table
LOAD:0000000000000CA8                 Elf64_Rela <20BBB0h, 8, 2610h> ; R_X86_64_RELATIVE +2610h
LOAD:0000000000000CC0                 Elf64_Rela <20BBB8h, 8, 25D0h> ; R_X86_64_RELATIVE +25D0h
LOAD:0000000000000CD8                 Elf64_Rela <20BBC0h, 8, 8F39h> ; R_X86_64_RELATIVE +8F39h
LOAD:0000000000000CF0                 Elf64_Rela <20BBC8h, 8, 8F41h> ; R_X86_64_RELATIVE +8F41h
LOAD:0000000000000D08                 Elf64_Rela <20BBD0h, 8, 8F47h> ; R_X86_64_RELATIVE +8F47h
LOAD:0000000000000D20                 Elf64_Rela <20BBD8h, 8, 8F54h> ; R_X86_64_RELATIVE +8F54h
LOAD:0000000000000D38                 Elf64_Rela <20BBE0h, 8, 8F61h> ; R_X86_64_RELATIVE +8F61h
LOAD:0000000000000D50                 Elf64_Rela <20BBE8h, 8, 8F75h> ; R_X86_64_RELATIVE +8F75h
LOAD:0000000000000D68                 Elf64_Rela <20BBF0h, 8, 8F77h> ; R_X86_64_RELATIVE +8F77h
LOAD:0000000000000D80                 Elf64_Rela <20BBF8h, 8, 8F5Ah> ; R_X86_64_RELATIVE +8F5Ah
LOAD:0000000000000D98                 Elf64_Rela <20BC00h, 8, 8C6Eh> ; R_X86_64_RELATIVE +8C6Eh
LOAD:0000000000000DB0                 Elf64_Rela <20BC08h, 8, 8F7Fh> ; R_X86_64_RELATIVE +8F7Fh
LOAD:0000000000000DC8                 Elf64_Rela <20C008h, 8, 20C008h> ; R_X86_64_RELATIVE +20C008h
LOAD:0000000000000DE0                 Elf64_Rela <20C010h, 8, 8EC8h> ; R_X86_64_RELATIVE +8EC8h
LOAD:0000000000000DF8                 Elf64_Rela <20C060h, 8, 20C070h> ; R_X86_64_RELATIVE +20C070h
LOAD:0000000000000E10                 Elf64_Rela <20C078h, 8, 20C0E0h> ; R_X86_64_RELATIVE +20C0E0h
LOAD:0000000000000E28                 Elf64_Rela <20BFC0h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E40                 Elf64_Rela <20BFC8h, 1C00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E58                 Elf64_Rela <20BFD0h, 2100000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E70                 Elf64_Rela <20BFD8h, 3400000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000E88                 Elf64_Rela <20BFE0h, 3700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000EA0                 Elf64_Rela <20C080h, 3B00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000EB8                 Elf64_Rela <20C088h, 3A00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000ED0                 Elf64_Rela <20C090h, 3D00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000EE8                 Elf64_Rela <20C0A0h, 3F00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F00 ; ELF JMPREL Relocation Table
LOAD:0000000000000F00                 Elf64_Rela <20BE20h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000000F18                 Elf64_Rela <20BE28h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000000F30                 Elf64_Rela <20BE30h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000F48                 Elf64_Rela <20BE38h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000F60                 Elf64_Rela <20BE40h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000F78                 Elf64_Rela <20BE48h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000F90                 Elf64_Rela <20BE50h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000FA8                 Elf64_Rela <20BE58h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000FC0                 Elf64_Rela <20BE60h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT iconv
LOAD:0000000000000FD8                 Elf64_Rela <20BE68h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT ferror
LOAD:0000000000000FF0                 Elf64_Rela <20BE70h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001008                 Elf64_Rela <20BE78h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __strtol_internal
LOAD:0000000000001020                 Elf64_Rela <20BE80h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001038                 Elf64_Rela <20BE88h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001050                 Elf64_Rela <20BE90h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001068                 Elf64_Rela <20BE98h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001080                 Elf64_Rela <20BEA0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001098                 Elf64_Rela <20BEA8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000010B0                 Elf64_Rela <20BEB0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000010C8                 Elf64_Rela <20BEB8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000010E0                 Elf64_Rela <20BEC0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT newlocale
LOAD:00000000000010F8                 Elf64_Rela <20BEC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001110                 Elf64_Rela <20BED0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001128                 Elf64_Rela <20BED8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001140                 Elf64_Rela <20BEE0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001158                 Elf64_Rela <20BEE8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001170                 Elf64_Rela <20BEF0h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001188                 Elf64_Rela <20BEF8h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000011A0                 Elf64_Rela <20BF00h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000011B8                 Elf64_Rela <20BF08h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000011D0                 Elf64_Rela <20BF10h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000011E8                 Elf64_Rela <20BF18h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001200                 Elf64_Rela <20BF20h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT uselocale
LOAD:0000000000001218                 Elf64_Rela <20BF28h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001230                 Elf64_Rela <20BF30h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001248                 Elf64_Rela <20BF38h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001260                 Elf64_Rela <20BF40h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001278                 Elf64_Rela <20BF48h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001290                 Elf64_Rela <20BF50h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000012A8                 Elf64_Rela <20BF58h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000012C0                 Elf64_Rela <20BF60h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:00000000000012D8                 Elf64_Rela <20BF68h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT strtold
LOAD:00000000000012F0                 Elf64_Rela <20BF70h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001308                 Elf64_Rela <20BF78h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001320                 Elf64_Rela <20BF80h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001338                 Elf64_Rela <20BF88h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001350                 Elf64_Rela <20BF90h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001368                 Elf64_Rela <20BF98h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001380                 Elf64_Rela <20BFA0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001398                 Elf64_Rela <20BFA8h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000013B0                 Elf64_Rela <20BFB0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000013C8                 Elf64_Rela <20BFB8h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT iconv_open
LOAD:00000000000013C8 LOAD            ends
LOAD:00000000000013C8
.init:00000000000013E0 ; ===========================================================================
.init:00000000000013E0
.init:00000000000013E0 ; Segment type: Pure code
.init:00000000000013E0 ; Segment permissions: Read/Execute
.init:00000000000013E0 _init           segment dword public 'CODE' use64
.init:00000000000013E0                 assume cs:_init
.init:00000000000013E0                 ;org 13E0h
.init:00000000000013E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000013E0
.init:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.init:00000000000013E0
.init:00000000000013E0
.init:00000000000013E0                 public _init_proc
.init:00000000000013E0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000013E0                 sub     rsp, 8          ; _init
.init:00000000000013E4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000013EB                 test    rax, rax
.init:00000000000013EE                 jz      short loc_13F2
.init:00000000000013F0                 call    rax ; __gmon_start__
.init:00000000000013F2
.init:00000000000013F2 loc_13F2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000013F2                 add     rsp, 8
.init:00000000000013F6                 retn
.init:00000000000013F6 _init_proc      endp
.init:00000000000013F6
.init:00000000000013F6 _init           ends
.init:00000000000013F6
LOAD:00000000000013F7 ; ===========================================================================
LOAD:00000000000013F7
LOAD:00000000000013F7 ; Segment type: Pure code
LOAD:00000000000013F7 ; Segment permissions: Read/Execute
LOAD:00000000000013F7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000013F7                 assume cs:LOAD
LOAD:00000000000013F7                 ;org 13F7h
LOAD:00000000000013F7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000013F7                 align 20h
LOAD:00000000000013F7 LOAD            ends
LOAD:00000000000013F7
.plt:0000000000001400 ; ===========================================================================
.plt:0000000000001400
.plt:0000000000001400 ; Segment type: Pure code
.plt:0000000000001400 ; Segment permissions: Read/Execute
.plt:0000000000001400 _plt            segment para public 'CODE' use64
.plt:0000000000001400                 assume cs:_plt
.plt:0000000000001400                 ;org 1400h
.plt:0000000000001400                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400
.plt:0000000000001400 sub_1400        proc near               ; CODE XREF: .plt:000000000000141B↓j
.plt:0000000000001400                                         ; .plt:000000000000142B↓j ...
.plt:0000000000001400 ; __unwind {
.plt:0000000000001400                 push    cs:qword_20BE10
.plt:0000000000001406                 jmp     cs:qword_20BE18
.plt:0000000000001406 sub_1400        endp
.plt:0000000000001406
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:000000000000140C                 align 10h
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; char *getenv(const char *name)
.plt:0000000000001410 _getenv         proc near               ; CODE XREF: main+7E↓p
.plt:0000000000001410                 jmp     cs:getenv_ptr
.plt:0000000000001410 _getenv         endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    0
.plt:000000000000141B                 jmp     sub_1400
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000001420                                         ; vasnprintf+6F0↓p ...
.plt:0000000000001420                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001420 ___snprintf_chk endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    1
.plt:000000000000142B                 jmp     sub_1400
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; void free(void *ptr)
.plt:0000000000001430 _free           proc near               ; CODE XREF: main+81B↓p
.plt:0000000000001430                                         ; quotearg_n_options+115↓p ...
.plt:0000000000001430                 jmp     cs:free_ptr
.plt:0000000000001430 _free           endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    2
.plt:000000000000143B                 jmp     sub_1400
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: noreturn thunk
.plt:0000000000001440
.plt:0000000000001440 ; void __noreturn abort(void)
.plt:0000000000001440 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001440                                         ; quotearg_buffer_restyled:def_3451↓p ...
.plt:0000000000001440                 jmp     cs:abort_ptr
.plt:0000000000001440 _abort          endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    3
.plt:000000000000144B                 jmp     sub_1400
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; int *__errno_location(void)
.plt:0000000000001450 ___errno_location proc near             ; CODE XREF: main:loc_2228↓p
.plt:0000000000001450                                         ; main:loc_2285↓p ...
.plt:0000000000001450                 jmp     cs:__errno_location_ptr
.plt:0000000000001450 ___errno_location endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    4
.plt:000000000000145B                 jmp     sub_1400
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001460 _strncmp        proc near               ; CODE XREF: usage+2C4↓p
.plt:0000000000001460                                         ; usage+385↓p
.plt:0000000000001460                 jmp     cs:strncmp_ptr
.plt:0000000000001460 _strncmp        endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    5
.plt:000000000000146B                 jmp     sub_1400
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: noreturn thunk
.plt:0000000000001470
.plt:0000000000001470 ; void __noreturn _exit(int status)
.plt:0000000000001470 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001470                 jmp     cs:_exit_ptr
.plt:0000000000001470 __exit          endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    6
.plt:000000000000147B                 jmp     sub_1400
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; size_t __fpending(FILE *fp)
.plt:0000000000001480 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001480                 jmp     cs:__fpending_ptr
.plt:0000000000001480 ___fpending     endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    7
.plt:000000000000148B                 jmp     sub_1400
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; size_t iconv(iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)
.plt:0000000000001490 _iconv          proc near               ; CODE XREF: unicode_to_mb+193↓p
.plt:0000000000001490                                         ; unicode_to_mb+1E6↓p
.plt:0000000000001490                 jmp     cs:iconv_ptr
.plt:0000000000001490 _iconv          endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    8
.plt:000000000000149B                 jmp     sub_1400
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int ferror(FILE *stream)
.plt:00000000000014A0 _ferror         proc near               ; CODE XREF: xvprintf+27↓p
.plt:00000000000014A0                                         ; xvfprintf+23↓p
.plt:00000000000014A0                 jmp     cs:ferror_ptr
.plt:00000000000014A0 _ferror         endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    9
.plt:00000000000014AB                 jmp     sub_1400
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; char *textdomain(const char *domainname)
.plt:00000000000014B0 _textdomain     proc near               ; CODE XREF: main+5C↓p
.plt:00000000000014B0                 jmp     cs:textdomain_ptr
.plt:00000000000014B0 _textdomain     endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    0Ah
.plt:00000000000014BB                 jmp     sub_1400
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; __int64 __strtol_internal(const char *nptr, char **endptr, int base, int group)
.plt:00000000000014C0 ___strtol_internal proc near            ; CODE XREF: vstrtoimax+42↓p
.plt:00000000000014C0                 jmp     cs:__strtol_internal_ptr
.plt:00000000000014C0 ___strtol_internal endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    0Bh
.plt:00000000000014CB                 jmp     sub_1400
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int fclose(FILE *stream)
.plt:00000000000014D0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000014D0                                         ; rpl_fclose+6B↓j
.plt:00000000000014D0                 jmp     cs:fclose_ptr
.plt:00000000000014D0 _fclose         endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    0Ch
.plt:00000000000014DB                 jmp     sub_1400
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000014E0 _bindtextdomain proc near               ; CODE XREF: main+50↓p
.plt:00000000000014E0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000014E0 _bindtextdomain endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    0Dh
.plt:00000000000014EB                 jmp     sub_1400
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000014F0 _dcgettext      proc near               ; CODE XREF: main+1C1↓p
.plt:00000000000014F0                                         ; main+74B↓p ...
.plt:00000000000014F0                 jmp     cs:dcgettext_ptr
.plt:00000000000014F0 _dcgettext      endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    0Eh
.plt:00000000000014FB                 jmp     sub_1400
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001500 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001500                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001500 ___ctype_get_mb_cur_max endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    0Fh
.plt:000000000000150B                 jmp     sub_1400
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; size_t strlen(const char *s)
.plt:0000000000001510 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001510                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001510                 jmp     cs:strlen_ptr
.plt:0000000000001510 _strlen         endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    10h
.plt:000000000000151B                 jmp     sub_1400
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: noreturn thunk
.plt:0000000000001520
.plt:0000000000001520 ___stack_chk_fail proc near             ; CODE XREF: main:loc_24F5↓p
.plt:0000000000001520                                         ; vstrtoimax:loc_2C96↓p ...
.plt:0000000000001520                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001520 ___stack_chk_fail endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    11h
.plt:000000000000152B                 jmp     sub_1400
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001530 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001530                 jmp     cs:mbrtowc_ptr
.plt:0000000000001530 _mbrtowc        endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    12h
.plt:000000000000153B                 jmp     sub_1400
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; char *strchr(const char *s, int c)
.plt:0000000000001540 _strchr         proc near               ; CODE XREF: print_esc+185↓p
.plt:0000000000001540                 jmp     cs:strchr_ptr
.plt:0000000000001540 _strchr         endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    13h
.plt:000000000000154B                 jmp     sub_1400
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
.plt:0000000000001550 _newlocale      proc near               ; CODE XREF: c_strtold+9E↓p
.plt:0000000000001550                 jmp     cs:newlocale_ptr
.plt:0000000000001550 _newlocale      endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    14h
.plt:000000000000155B                 jmp     sub_1400
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001560 ___overflow     proc near               ; CODE XREF: main+6C9↓p
.plt:0000000000001560                                         ; main+6D6↓p ...
.plt:0000000000001560                 jmp     cs:__overflow_ptr
.plt:0000000000001560 ___overflow     endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    15h
.plt:000000000000156B                 jmp     sub_1400
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; char *strrchr(const char *s, int c)
.plt:0000000000001570 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001570                 jmp     cs:strrchr_ptr
.plt:0000000000001570 _strrchr        endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    16h
.plt:000000000000157B                 jmp     sub_1400
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001580 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001580                                         ; rpl_fseeko+3B↓p
.plt:0000000000001580                 jmp     cs:lseek_ptr
.plt:0000000000001580 _lseek          endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    17h
.plt:000000000000158B                 jmp     sub_1400
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001590 ___strtoul_internal proc near           ; CODE XREF: main+AE4↓p
.plt:0000000000001590                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001590 ___strtoul_internal endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    18h
.plt:000000000000159B                 jmp     sub_1400
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000015A0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000015A0                                         ; xzalloc+12↓j
.plt:00000000000015A0                 jmp     cs:memset_ptr
.plt:00000000000015A0 _memset         endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    19h
.plt:00000000000015AB                 jmp     sub_1400
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000015B0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000015B0                 jmp     cs:memcmp_ptr
.plt:00000000000015B0 _memcmp         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    1Ah
.plt:00000000000015BB                 jmp     sub_1400
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000015C0 _fputs_unlocked proc near               ; CODE XREF: main+266↓p
.plt:00000000000015C0                                         ; usage+A0↓p ...
.plt:00000000000015C0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000015C0 _fputs_unlocked endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    1Bh
.plt:00000000000015CB                 jmp     sub_1400
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000015D0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000015D0                 jmp     cs:calloc_ptr
.plt:00000000000015D0 _calloc         endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    1Ch
.plt:00000000000015DB                 jmp     sub_1400
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int strcmp(const char *s1, const char *s2)
.plt:00000000000015E0 _strcmp         proc near               ; CODE XREF: main+AA↓p
.plt:00000000000015E0                                         ; main+703↓p ...
.plt:00000000000015E0                 jmp     cs:strcmp_ptr
.plt:00000000000015E0 _strcmp         endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    1Dh
.plt:00000000000015EB                 jmp     sub_1400
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000015F0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000015F0                                         ; vasnprintf+2AE↓p ...
.plt:00000000000015F0                 jmp     cs:memcpy_ptr
.plt:00000000000015F0 _memcpy         endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    1Eh
.plt:00000000000015FB                 jmp     sub_1400
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int fileno(FILE *stream)
.plt:0000000000001600 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001600                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001600                 jmp     cs:fileno_ptr
.plt:0000000000001600 _fileno         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    1Fh
.plt:000000000000160B                 jmp     sub_1400
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; __locale_t uselocale(__locale_t dataset)
.plt:0000000000001610 _uselocale      proc near               ; CODE XREF: c_strtold+26↓p
.plt:0000000000001610                                         ; c_strtold+4E↓p
.plt:0000000000001610                 jmp     cs:uselocale_ptr
.plt:0000000000001610 _uselocale      endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    20h ; ' '
.plt:000000000000161B                 jmp     sub_1400
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; void *malloc(size_t size)
.plt:0000000000001620 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001620                                         ; vasnprintf+D2↓p ...
.plt:0000000000001620                 jmp     cs:malloc_ptr
.plt:0000000000001620 _malloc         endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    21h ; '!'
.plt:000000000000162B                 jmp     sub_1400
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; int fflush(FILE *stream)
.plt:0000000000001630 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001630                                         ; rpl_fflush+3B↓j
.plt:0000000000001630                 jmp     cs:fflush_ptr
.plt:0000000000001630 _fflush         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    22h ; '"'
.plt:000000000000163B                 jmp     sub_1400
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; char *nl_langinfo(nl_item item)
.plt:0000000000001640 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001640                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001640 _nl_langinfo    endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    23h ; '#'
.plt:000000000000164B                 jmp     sub_1400
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; int __freading(FILE *fp)
.plt:0000000000001650 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001650                                         ; rpl_fflush+9↓p
.plt:0000000000001650                 jmp     cs:__freading_ptr
.plt:0000000000001650 ___freading     endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    24h ; '$'
.plt:000000000000165B                 jmp     sub_1400
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001660 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001660                                         ; vasnprintf+285↓p ...
.plt:0000000000001660                 jmp     cs:realloc_ptr
.plt:0000000000001660 _realloc        endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    25h ; '%'
.plt:000000000000166B                 jmp     sub_1400
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; char *setlocale(int category, const char *locale)
.plt:0000000000001670 _setlocale      proc near               ; CODE XREF: main+3D↓p
.plt:0000000000001670                                         ; usage+2AB↓p ...
.plt:0000000000001670                 jmp     cs:setlocale_ptr
.plt:0000000000001670 _setlocale      endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    26h ; '&'
.plt:000000000000167B                 jmp     sub_1400
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000001680                                         ; usage+1AE↓p ...
.plt:0000000000001680                 jmp     cs:__printf_chk_ptr
.plt:0000000000001680 ___printf_chk   endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    27h ; '''
.plt:000000000000168B                 jmp     sub_1400
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000001690 _mempcpy        proc near               ; CODE XREF: main+67D↓p
.plt:0000000000001690                                         ; main+692↓p
.plt:0000000000001690                 jmp     cs:mempcpy_ptr
.plt:0000000000001690 _mempcpy        endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    28h ; '('
.plt:000000000000169B                 jmp     sub_1400
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; long double strtold(const char *nptr, char **endptr)
.plt:00000000000016A0 _strtold        proc near               ; CODE XREF: cl_strtold+25↓p
.plt:00000000000016A0                                         ; c_strtold+39↓p
.plt:00000000000016A0                 jmp     cs:strtold_ptr
.plt:00000000000016A0 _strtold        endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    29h ; ')'
.plt:00000000000016AB                 jmp     sub_1400
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000016B0 _error          proc near               ; CODE XREF: main+1D2↓p
.plt:00000000000016B0                                         ; main+759↓p ...
.plt:00000000000016B0                 jmp     cs:error_ptr
.plt:00000000000016B0 _error          endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    2Ah ; '*'
.plt:00000000000016BB                 jmp     sub_1400
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000016C0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_629A↓j
.plt:00000000000016C0                 jmp     cs:fseeko_ptr
.plt:00000000000016C0 _fseeko         endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    2Bh ; '+'
.plt:00000000000016CB                 jmp     sub_1400
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000016D0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000016D0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000016D0 ___cxa_atexit   endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    2Ch ; ','
.plt:00000000000016DB                 jmp     sub_1400
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: noreturn thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; void __noreturn exit(int status)
.plt:00000000000016E0 _exit           proc near               ; CODE XREF: print_esc+378↓p
.plt:00000000000016E0                                         ; usage+58↓p
.plt:00000000000016E0                 jmp     cs:exit_ptr
.plt:00000000000016E0 _exit           endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    2Dh ; '-'
.plt:00000000000016EB                 jmp     sub_1400
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000016F0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000016F0                                         ; fwrite_success_callback+F↓p ...
.plt:00000000000016F0                 jmp     cs:fwrite_ptr
.plt:00000000000016F0 _fwrite         endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    2Eh ; '.'
.plt:00000000000016FB                 jmp     sub_1400
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001700                                         ; fallback_failure_callback+1F↓p ...
.plt:0000000000001700                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001700 ___fprintf_chk  endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    2Fh ; '/'
.plt:000000000000170B                 jmp     sub_1400
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001710 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001710                 jmp     cs:mbsinit_ptr
.plt:0000000000001710 _mbsinit        endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    30h ; '0'
.plt:000000000000171B                 jmp     sub_1400
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int iswprint(wint_t wc)
.plt:0000000000001720 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001720                 jmp     cs:iswprint_ptr
.plt:0000000000001720 _iswprint       endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    31h ; '1'
.plt:000000000000172B                 jmp     sub_1400
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001730 ___ctype_b_loc  proc near               ; CODE XREF: print_esc+F9↓p
.plt:0000000000001730                                         ; print_esc+1DF↓p ...
.plt:0000000000001730                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001730 ___ctype_b_loc  endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    32h ; '2'
.plt:000000000000173B                 jmp     sub_1400
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; iconv_t iconv_open(const char *tocode, const char *fromcode)
.plt:0000000000001740 _iconv_open     proc near               ; CODE XREF: unicode_to_mb+136↓p
.plt:0000000000001740                                         ; unicode_to_mb+1C2↓p
.plt:0000000000001740                 jmp     cs:iconv_open_ptr
.plt:0000000000001740 _iconv_open     endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    33h ; '3'
.plt:000000000000174B                 jmp     sub_1400
.plt:000000000000174B ; } // starts at 1400
.plt:000000000000174B _plt            ends
.plt:000000000000174B
.plt.got:0000000000001750 ; ===========================================================================
.plt.got:0000000000001750
.plt.got:0000000000001750 ; Segment type: Pure code
.plt.got:0000000000001750 ; Segment permissions: Read/Execute
.plt.got:0000000000001750 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001750                 assume cs:_plt_got
.plt.got:0000000000001750                 ;org 1750h
.plt.got:0000000000001750                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001750
.plt.got:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001750
.plt.got:0000000000001750 ; Attributes: thunk
.plt.got:0000000000001750
.plt.got:0000000000001750 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001750 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001750 ; __unwind {
.plt.got:0000000000001750                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001750 __cxa_finalize  endp
.plt.got:0000000000001750
.plt.got:0000000000001750 ; ---------------------------------------------------------------------------
.plt.got:0000000000001756                 align 8
.plt.got:0000000000001756 ; } // starts at 1750
.plt.got:0000000000001756 _plt_got        ends
.plt.got:0000000000001756
LOAD:0000000000001758 ; ===========================================================================
LOAD:0000000000001758
LOAD:0000000000001758 ; Segment type: Pure code
LOAD:0000000000001758 ; Segment permissions: Read/Execute
LOAD:0000000000001758 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001758                 assume cs:LOAD
LOAD:0000000000001758                 ;org 1758h
LOAD:0000000000001758                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001758                 align 20h
LOAD:0000000000001758 LOAD            ends
LOAD:0000000000001758
.text:0000000000001760 ; ===========================================================================
.text:0000000000001760
.text:0000000000001760 ; Segment type: Pure code
.text:0000000000001760 ; Segment permissions: Read/Execute
.text:0000000000001760 _text           segment para public 'CODE' use64
.text:0000000000001760                 assume cs:_text
.text:0000000000001760                 ;org 1760h
.text:0000000000001760                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001760
.text:0000000000001760 ; =============== S U B R O U T I N E =======================================
.text:0000000000001760
.text:0000000000001760
.text:0000000000001760 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001760                 public main
.text:0000000000001760 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001760
.text:0000000000001760 var_1C8         = tbyte ptr -1C8h
.text:0000000000001760 var_1B8         = qword ptr -1B8h
.text:0000000000001760 var_1B0         = qword ptr -1B0h
.text:0000000000001760 var_1A8         = tbyte ptr -1A8h
.text:0000000000001760 var_198         = tbyte ptr -198h
.text:0000000000001760 var_188         = qword ptr -188h
.text:0000000000001760 n               = qword ptr -180h
.text:0000000000001760 var_178         = qword ptr -178h
.text:0000000000001760 var_170         = dword ptr -170h
.text:0000000000001760 var_16C         = dword ptr -16Ch
.text:0000000000001760 var_168         = dword ptr -168h
.text:0000000000001760 var_162         = byte ptr -162h
.text:0000000000001760 var_161         = byte ptr -161h
.text:0000000000001760 src             = qword ptr -160h
.text:0000000000001760 endptr          = qword ptr -150h
.text:0000000000001760 var_148         = byte ptr -148h
.text:0000000000001760 var_107         = byte ptr -107h
.text:0000000000001760 var_103         = word ptr -103h
.text:0000000000001760 var_101         = byte ptr -101h
.text:0000000000001760 var_F0          = byte ptr -0F0h
.text:0000000000001760 var_E7          = byte ptr -0E7h
.text:0000000000001760 var_E5          = dword ptr -0E5h
.text:0000000000001760 var_E1          = byte ptr -0E1h
.text:0000000000001760 var_DF          = byte ptr -0DFh
.text:0000000000001760 var_D9          = byte ptr -0D9h
.text:0000000000001760 var_D5          = byte ptr -0D5h
.text:0000000000001760 var_D3          = byte ptr -0D3h
.text:0000000000001760 var_D0          = byte ptr -0D0h
.text:0000000000001760 var_40          = qword ptr -40h
.text:0000000000001760
.text:0000000000001760 ; __unwind {
.text:0000000000001760                 push    r15
.text:0000000000001762                 push    r14
.text:0000000000001764                 push    r13
.text:0000000000001766                 push    r12
.text:0000000000001768                 push    rbp
.text:0000000000001769                 push    rbx
.text:000000000000176A                 mov     ebp, edi
.text:000000000000176C                 mov     rbx, rsi
.text:000000000000176F                 sub     rsp, 188h
.text:0000000000001776                 mov     rdi, [rsi]
.text:0000000000001779                 mov     rax, fs:28h
.text:0000000000001782                 mov     [rsp+1B8h+var_40], rax
.text:000000000000178A                 xor     eax, eax
.text:000000000000178C                 call    set_program_name
.text:0000000000001791                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001798                 mov     edi, 6          ; category
.text:000000000000179D                 call    _setlocale
.text:00000000000017A2                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000017A9                 lea     rdi, domainname ; "coreutils"
.text:00000000000017B0                 call    _bindtextdomain
.text:00000000000017B5                 lea     rdi, domainname ; "coreutils"
.text:00000000000017BC                 call    _textdomain
.text:00000000000017C1                 lea     rdi, close_stdout
.text:00000000000017C8                 call    atexit
.text:00000000000017CD                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:00000000000017D4                 mov     cs:exit_status, 0
.text:00000000000017DE                 call    _getenv
.text:00000000000017E3                 test    rax, rax
.text:00000000000017E6                 setnz   cs:posixly_correct
.text:00000000000017ED                 cmp     ebp, 2
.text:00000000000017F0                 jz      loc_1E55
.text:00000000000017F6                 cmp     ebp, 1
.text:00000000000017F9                 jle     loc_1E9D
.text:00000000000017FF                 mov     rdi, [rbx+8]    ; s1
.text:0000000000001803                 lea     rsi, s2         ; "--"
.text:000000000000180A                 call    _strcmp
.text:000000000000180F                 test    eax, eax
.text:0000000000001811                 jnz     short loc_181A
.text:0000000000001813                 sub     ebp, 1
.text:0000000000001816                 add     rbx, 8
.text:000000000000181A
.text:000000000000181A loc_181A:                               ; CODE XREF: main+B1↑j
.text:000000000000181A                                         ; main+737↓j
.text:000000000000181A                 mov     rax, [rbx+8]
.text:000000000000181E                 mov     r13, 410150000001h
.text:0000000000001828                 mov     [rsp+1B8h+src], rax
.text:000000000000182D                 lea     eax, [rbp-2]
.text:0000000000001830                 mov     [rsp+1B8h+var_170], eax
.text:0000000000001834                 lea     rax, [rbx+10h]
.text:0000000000001838                 mov     [rsp+1B8h+var_188], rax
.text:000000000000183D                 nop     dword ptr [rax]
.text:0000000000001840
.text:0000000000001840 loc_1840:                               ; CODE XREF: main+195↓j
.text:0000000000001840                 mov     r14, [rsp+1B8h+src]
.text:0000000000001845                 movzx   eax, byte ptr [r14]
.text:0000000000001849                 test    al, al
.text:000000000000184B                 jz      loc_1EC8
.text:0000000000001851                 mov     rsi, [rsp+1B8h+var_188]
.text:0000000000001856                 mov     r15d, [rsp+1B8h+var_170]
.text:000000000000185B                 mov     [rsp+1B8h+var_168], 0
.text:0000000000001863                 mov     [rsp+1B8h+var_16C], 0
.text:000000000000186B                 mov     [rsp+1B8h+var_1B8], rsi
.text:000000000000186F                 jmp     short loc_1894
.text:000000000000186F ; ---------------------------------------------------------------------------
.text:0000000000001871                 align 8
.text:0000000000001878
.text:0000000000001878 loc_1878:                               ; CODE XREF: main+13E↓j
.text:0000000000001878                 mov     rdi, r14
.text:000000000000187B                 xor     esi, esi
.text:000000000000187D                 call    print_esc
.text:0000000000001882                 movsxd  rbx, eax
.text:0000000000001885                 add     rbx, r14
.text:0000000000001888                 lea     r14, [rbx+1]
.text:000000000000188C
.text:000000000000188C loc_188C:                               ; CODE XREF: main+239↓j
.text:000000000000188C                                         ; main+26F↓j ...
.text:000000000000188C                 movzx   eax, byte ptr [rbx+1]
.text:0000000000001890                 test    al, al
.text:0000000000001892                 jz      short loc_18D1
.text:0000000000001894
.text:0000000000001894 loc_1894:                               ; CODE XREF: main+10F↑j
.text:0000000000001894                                         ; main+16F↓j
.text:0000000000001894                 cmp     al, 25h ; '%'
.text:0000000000001896                 jz      loc_1970
.text:000000000000189C                 cmp     al, 5Ch ; '\'
.text:000000000000189E                 jz      short loc_1878
.text:00000000000018A0                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000018A7                 lea     rbp, [r14+1]
.text:00000000000018AB                 mov     rdx, [rdi+28h]
.text:00000000000018AF                 cmp     rdx, [rdi+30h]
.text:00000000000018B3                 jnb     loc_1E20
.text:00000000000018B9                 lea     rcx, [rdx+1]
.text:00000000000018BD                 mov     rbx, r14
.text:00000000000018C0                 mov     r14, rbp
.text:00000000000018C3                 mov     [rdi+28h], rcx
.text:00000000000018C7                 mov     [rdx], al
.text:00000000000018C9                 movzx   eax, byte ptr [rbx+1]
.text:00000000000018CD                 test    al, al
.text:00000000000018CF                 jnz     short loc_1894
.text:00000000000018D1
.text:00000000000018D1 loc_18D1:                               ; CODE XREF: main+132↑j
.text:00000000000018D1                 mov     eax, [rsp+1B8h+var_170]
.text:00000000000018D5                 mov     rsi, [rsp+1B8h+var_188]
.text:00000000000018DA                 mov     [rsp+1B8h+var_170], r15d
.text:00000000000018DF                 sub     eax, r15d
.text:00000000000018E2                 movsxd  rdx, eax
.text:00000000000018E5                 test    eax, eax
.text:00000000000018E7                 lea     rsi, [rsi+rdx*8]
.text:00000000000018EB                 mov     [rsp+1B8h+var_188], rsi
.text:00000000000018F0                 jle     short loc_18FB
.text:00000000000018F2                 test    r15d, r15d
.text:00000000000018F5                 jg      loc_1840
.text:00000000000018FB
.text:00000000000018FB loc_18FB:                               ; CODE XREF: main+190↑j
.text:00000000000018FB                 mov     r14d, r15d
.text:00000000000018FE
.text:00000000000018FE loc_18FE:                               ; CODE XREF: main+76D↓j
.text:00000000000018FE                 test    r14d, r14d
.text:0000000000001901                 jz      short loc_1937
.text:0000000000001903                 mov     rax, [rsp+1B8h+var_188]
.text:0000000000001908                 mov     rdi, [rax]
.text:000000000000190B                 call    quote
.text:0000000000001910                 lea     rsi, msgid      ; "warning: ignoring excess arguments, sta"...
.text:0000000000001917                 mov     rbx, rax
.text:000000000000191A                 mov     edx, 5          ; category
.text:000000000000191F                 xor     edi, edi        ; domainname
.text:0000000000001921                 call    _dcgettext
.text:0000000000001926                 mov     rcx, rbx
.text:0000000000001929                 mov     rdx, rax        ; format
.text:000000000000192C                 xor     esi, esi        ; errnum
.text:000000000000192E                 xor     edi, edi        ; status
.text:0000000000001930                 xor     eax, eax
.text:0000000000001932                 call    _error
.text:0000000000001937
.text:0000000000001937 loc_1937:                               ; CODE XREF: main+1A1↑j
.text:0000000000001937                 mov     r12d, cs:exit_status
.text:000000000000193E
.text:000000000000193E loc_193E:                               ; CODE XREF: main+79F↓j
.text:000000000000193E                 mov     rsi, [rsp+1B8h+var_40]
.text:0000000000001946                 xor     rsi, fs:28h
.text:000000000000194F                 mov     eax, r12d
.text:0000000000001952                 jnz     loc_24F5
.text:0000000000001958                 add     rsp, 188h
.text:000000000000195F                 pop     rbx
.text:0000000000001960                 pop     rbp
.text:0000000000001961                 pop     r12
.text:0000000000001963                 pop     r13
.text:0000000000001965                 pop     r14
.text:0000000000001967                 pop     r15
.text:0000000000001969                 retn
.text:0000000000001969 ; ---------------------------------------------------------------------------
.text:000000000000196A                 align 10h
.text:0000000000001970
.text:0000000000001970 loc_1970:                               ; CODE XREF: main+136↑j
.text:0000000000001970                 movzx   r12d, byte ptr [r14+1]
.text:0000000000001975                 lea     rbx, [r14+1]
.text:0000000000001979                 lea     rbp, [r14+2]
.text:000000000000197D                 cmp     r12b, 25h ; '%'
.text:0000000000001981                 jz      short loc_19D8
.text:0000000000001983                 cmp     r12b, 62h ; 'b'
.text:0000000000001987                 jz      short loc_1A00
.text:0000000000001989                 cmp     r12b, 71h ; 'q'
.text:000000000000198D                 jnz     loc_1A88
.text:0000000000001993                 test    r15d, r15d
.text:0000000000001996                 mov     r14, rbp
.text:0000000000001999                 jz      loc_188C
.text:000000000000199F                 mov     r12, [rsp+1B8h+var_1B8]
.text:00000000000019A3                 mov     rbp, cs:stdout@@GLIBC_2_2_5
.text:00000000000019AA                 mov     edi, 3
.text:00000000000019AF                 sub     r15d, 1
.text:00000000000019B3                 mov     rsi, [r12]
.text:00000000000019B7                 add     r12, 8
.text:00000000000019BB                 call    quotearg_style
.text:00000000000019C0                 mov     rsi, rbp        ; stream
.text:00000000000019C3                 mov     rdi, rax        ; s
.text:00000000000019C6                 call    _fputs_unlocked
.text:00000000000019CB                 mov     [rsp+1B8h+var_1B8], r12
.text:00000000000019CF                 jmp     loc_188C
.text:00000000000019CF ; ---------------------------------------------------------------------------
.text:00000000000019D4                 align 8
.text:00000000000019D8
.text:00000000000019D8 loc_19D8:                               ; CODE XREF: main+221↑j
.text:00000000000019D8                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000019DF                 mov     rax, [rdi+28h]
.text:00000000000019E3                 cmp     rax, [rdi+30h]
.text:00000000000019E7                 jnb     loc_1E43
.text:00000000000019ED                 lea     rdx, [rax+1]
.text:00000000000019F1                 mov     r14, rbp
.text:00000000000019F4                 mov     [rdi+28h], rdx
.text:00000000000019F8                 mov     byte ptr [rax], 25h ; '%'
.text:00000000000019FB                 jmp     loc_188C
.text:0000000000001A00 ; ---------------------------------------------------------------------------
.text:0000000000001A00
.text:0000000000001A00 loc_1A00:                               ; CODE XREF: main+227↑j
.text:0000000000001A00                 test    r15d, r15d
.text:0000000000001A03                 mov     r14, rbp
.text:0000000000001A06                 jz      loc_188C
.text:0000000000001A0C                 mov     rax, [rsp+1B8h+var_1B8]
.text:0000000000001A10                 mov     r12, [rax]
.text:0000000000001A13                 movzx   eax, byte ptr [r12]
.text:0000000000001A18                 test    al, al
.text:0000000000001A1A                 jnz     short loc_1A4E
.text:0000000000001A1C                 jmp     short loc_1A70
.text:0000000000001A1C ; ---------------------------------------------------------------------------
.text:0000000000001A1E                 align 20h
.text:0000000000001A20
.text:0000000000001A20 loc_1A20:                               ; CODE XREF: main+2F0↓j
.text:0000000000001A20                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001A27                 mov     rdx, [rdi+28h]
.text:0000000000001A2B                 cmp     rdx, [rdi+30h]
.text:0000000000001A2F                 jnb     loc_1E33
.text:0000000000001A35                 lea     rcx, [rdx+1]
.text:0000000000001A39                 mov     [rdi+28h], rcx
.text:0000000000001A3D                 mov     [rdx], al
.text:0000000000001A3F                 mov     rax, r12
.text:0000000000001A42
.text:0000000000001A42 loc_1A42:                               ; CODE XREF: main+6DE↓j
.text:0000000000001A42                 lea     r12, [rax+1]
.text:0000000000001A46                 movzx   eax, byte ptr [rax+1]
.text:0000000000001A4A                 test    al, al
.text:0000000000001A4C                 jz      short loc_1A70
.text:0000000000001A4E
.text:0000000000001A4E loc_1A4E:                               ; CODE XREF: main+2BA↑j
.text:0000000000001A4E                                         ; main+30E↓j
.text:0000000000001A4E                 cmp     al, 5Ch ; '\'
.text:0000000000001A50                 jnz     short loc_1A20
.text:0000000000001A52                 mov     rdi, r12
.text:0000000000001A55                 mov     esi, 1
.text:0000000000001A5A                 call    print_esc
.text:0000000000001A5F                 cdqe
.text:0000000000001A61                 add     rax, r12
.text:0000000000001A64                 lea     r12, [rax+1]
.text:0000000000001A68                 movzx   eax, byte ptr [rax+1]
.text:0000000000001A6C                 test    al, al
.text:0000000000001A6E                 jnz     short loc_1A4E
.text:0000000000001A70
.text:0000000000001A70 loc_1A70:                               ; CODE XREF: main+2BC↑j
.text:0000000000001A70                                         ; main+2EC↑j
.text:0000000000001A70                 add     [rsp+1B8h+var_1B8], 8
.text:0000000000001A75                 sub     r15d, 1
.text:0000000000001A79                 mov     r14, rbp
.text:0000000000001A7C                 jmp     loc_188C
.text:0000000000001A7C ; ---------------------------------------------------------------------------
.text:0000000000001A81                 align 8
.text:0000000000001A88
.text:0000000000001A88 loc_1A88:                               ; CODE XREF: main+22D↑j
.text:0000000000001A88                 lea     rdx, [rsp+1B8h+var_148]
.text:0000000000001A8D                 mov     r11d, 101h
.text:0000000000001A93                 mov     ecx, 20h ; ' '
.text:0000000000001A98                 xor     eax, eax
.text:0000000000001A9A                 xor     r8d, r8d
.text:0000000000001A9D                 mov     byte ptr [rsp+1B8h+var_1B0], 0
.text:0000000000001AA2                 mov     rdi, rdx
.text:0000000000001AA5                 mov     byte ptr [rsp+1B8h+var_1A8], 0
.text:0000000000001AAA                 mov     ebp, 1
.text:0000000000001AAF                 rep stosq
.text:0000000000001AB2                 xor     r9d, r9d
.text:0000000000001AB5                 mov     [rsp+1B8h+var_103], r11w
.text:0000000000001ABE                 mov     [rsp+1B8h+var_F0], 1
.text:0000000000001AC6                 mov     [rsp+1B8h+var_D0], 1
.text:0000000000001ACE                 mov     [rsp+1B8h+var_D3], 1
.text:0000000000001AD6                 xor     edx, edx
.text:0000000000001AD8                 mov     [rsp+1B8h+var_D5], 1
.text:0000000000001AE0                 mov     [rsp+1B8h+var_D9], 1
.text:0000000000001AE8                 mov     edi, 1
.text:0000000000001AED                 mov     [rsp+1B8h+var_DF], 1
.text:0000000000001AF5                 mov     [rsp+1B8h+var_101], 1
.text:0000000000001AFD                 xor     r10d, r10d
.text:0000000000001B00                 mov     [rsp+1B8h+var_E5], 1010101h
.text:0000000000001B0B                 mov     [rsp+1B8h+var_E1], 1
.text:0000000000001B13                 mov     r11d, 1
.text:0000000000001B19                 mov     [rsp+1B8h+var_107], 1
.text:0000000000001B21                 mov     [rsp+1B8h+var_E7], 1
.text:0000000000001B29                 mov     dword ptr [rsp+1B8h+var_198], r15d
.text:0000000000001B2E
.text:0000000000001B2E loc_1B2E:                               ; CODE XREF: main+41E↓j
.text:0000000000001B2E                                         ; main+447↓j ...
.text:0000000000001B2E                 lea     eax, [r12-20h]  ; switch 42 cases
.text:0000000000001B33                 mov     rcx, rbx
.text:0000000000001B36                 mov     rsi, rbx
.text:0000000000001B39                 sub     rcx, r14
.text:0000000000001B3C                 cmp     al, 29h
.text:0000000000001B3E                 ja      def_1B55        ; jumptable 0000000000001B55 default case, cases 33,34,36-38,40-42,44,46,47,49-72
.text:0000000000001B44                 lea     r15, jpt_1B55
.text:0000000000001B4B                 movzx   eax, al
.text:0000000000001B4E                 movsxd  rax, ds:(jpt_1B55 - 8D40h)[r15+rax*4]
.text:0000000000001B52                 add     rax, r15
.text:0000000000001B55                 jmp     rax             ; switch jump
.text:0000000000001B55 ; ---------------------------------------------------------------------------
.text:0000000000001B57                 align 20h
.text:0000000000001B60
.text:0000000000001B60 loc_1B60:                               ; CODE XREF: main+3F5↑j
.text:0000000000001B60                                         ; DATA XREF: .rodata:jpt_1B55↓o
.text:0000000000001B60                 mov     r9d, 1          ; jumptable 0000000000001B55 cases 39,73
.text:0000000000001B66                 mov     edx, 1
.text:0000000000001B6B                 xor     edi, edi
.text:0000000000001B6D                 mov     r10d, 1
.text:0000000000001B73                 xor     r11d, r11d
.text:0000000000001B76
.text:0000000000001B76 loc_1B76:                               ; CODE XREF: main+3F5↑j
.text:0000000000001B76                                         ; DATA XREF: .rodata:jpt_1B55↓o
.text:0000000000001B76                 add     rbx, 1          ; jumptable 0000000000001B55 cases 32,43,45
.text:0000000000001B7A                 movzx   r12d, byte ptr [rbx]
.text:0000000000001B7E                 jmp     short loc_1B2E
.text:0000000000001B80 ; ---------------------------------------------------------------------------
.text:0000000000001B80
.text:0000000000001B80 loc_1B80:                               ; CODE XREF: main+3F5↑j
.text:0000000000001B80                                         ; DATA XREF: .rodata:jpt_1B55↓o
.text:0000000000001B80                 add     rbx, 1          ; jumptable 0000000000001B55 case 35
.text:0000000000001B84                 mov     r8d, 1
.text:0000000000001B8A                 mov     byte ptr [rsp+1B8h+var_1B0], 1
.text:0000000000001B8F                 mov     byte ptr [rsp+1B8h+var_1A8], 1
.text:0000000000001B94                 xor     ebp, ebp
.text:0000000000001B96                 mov     r9d, 1
.text:0000000000001B9C                 mov     edx, 1
.text:0000000000001BA1                 xor     edi, edi
.text:0000000000001BA3                 movzx   r12d, byte ptr [rbx]
.text:0000000000001BA7                 jmp     short loc_1B2E
.text:0000000000001BA7 ; ---------------------------------------------------------------------------
.text:0000000000001BA9                 align 10h
.text:0000000000001BB0
.text:0000000000001BB0 loc_1BB0:                               ; CODE XREF: main+3F5↑j
.text:0000000000001BB0                                         ; DATA XREF: .rodata:jpt_1B55↓o
.text:0000000000001BB0                 add     rbx, 1          ; jumptable 0000000000001B55 case 48
.text:0000000000001BB4                 mov     r9d, 1
.text:0000000000001BBA                 mov     edx, 1
.text:0000000000001BBF                 xor     edi, edi
.text:0000000000001BC1                 movzx   r12d, byte ptr [rbx]
.text:0000000000001BC5                 jmp     loc_1B2E
.text:0000000000001BC5 ; ---------------------------------------------------------------------------
.text:0000000000001BCA                 align 10h
.text:0000000000001BD0
.text:0000000000001BD0 def_1B55:                               ; CODE XREF: main+3DE↑j
.text:0000000000001BD0                                         ; main+3F5↑j
.text:0000000000001BD0                                         ; DATA XREF: ...
.text:0000000000001BD0                 test    r10b, r10b      ; jumptable 0000000000001B55 default case, cases 33,34,36-38,40-42,44,46,47,49-72
.text:0000000000001BD3                 mov     r15d, dword ptr [rsp+1B8h+var_198]
.text:0000000000001BD8                 jnz     loc_1F04
.text:0000000000001BDE                 test    dl, dl
.text:0000000000001BE0                 jnz     loc_1F35
.text:0000000000001BE6
.text:0000000000001BE6 loc_1BE6:                               ; CODE XREF: main+7D0↓j
.text:0000000000001BE6                                         ; main+7E0↓j
.text:0000000000001BE6                 test    r9b, r9b
.text:0000000000001BE9                 jnz     loc_247C
.text:0000000000001BEF
.text:0000000000001BEF loc_1BEF:                               ; CODE XREF: main+D24↓j
.text:0000000000001BEF                 test    r10b, r10b
.text:0000000000001BF2                 jz      short loc_1C04
.text:0000000000001BF4                 mov     [rsp+1B8h+var_107], r11b
.text:0000000000001BFC                 mov     [rsp+1B8h+var_E7], r11b
.text:0000000000001C04
.text:0000000000001C04 loc_1C04:                               ; CODE XREF: main+492↑j
.text:0000000000001C04                 cmp     byte ptr [rsp+1B8h+var_1A8], 0
.text:0000000000001C09                 jz      short loc_1C13
.text:0000000000001C0B                 mov     [rsp+1B8h+var_D3], bpl
.text:0000000000001C13
.text:0000000000001C13 loc_1C13:                               ; CODE XREF: main+4A9↑j
.text:0000000000001C13                 cmp     byte ptr [rsp+1B8h+var_1B0], 0
.text:0000000000001C18                 jz      short loc_1C22
.text:0000000000001C1A                 mov     [rsp+1B8h+var_DF], bpl
.text:0000000000001C22
.text:0000000000001C22 loc_1C22:                               ; CODE XREF: main+4B8↑j
.text:0000000000001C22                 test    r8b, r8b
.text:0000000000001C25                 jz      short loc_1C2F
.text:0000000000001C27                 mov     byte ptr [rsp+1B8h+var_E5+1], bpl
.text:0000000000001C2F
.text:0000000000001C2F loc_1C2F:                               ; CODE XREF: main+4C5↑j
.text:0000000000001C2F                 cmp     r12b, 2Ah ; '*'
.text:0000000000001C33                 lea     rbp, [rbx+1]
.text:0000000000001C37                 jz      loc_2130
.text:0000000000001C3D                 movsx   eax, r12b
.text:0000000000001C41                 sub     eax, 30h ; '0'
.text:0000000000001C44                 cmp     eax, 9
.text:0000000000001C47                 jbe     short loc_1C57
.text:0000000000001C49                 jmp     loc_2367
.text:0000000000001C49 ; ---------------------------------------------------------------------------
.text:0000000000001C4E                 align 10h
.text:0000000000001C50
.text:0000000000001C50 loc_1C50:                               ; CODE XREF: main+50C↓j
.text:0000000000001C50                 mov     rbx, rbp
.text:0000000000001C53                 add     rbp, 1
.text:0000000000001C57
.text:0000000000001C57 loc_1C57:                               ; CODE XREF: main+4E7↑j
.text:0000000000001C57                 movsx   eax, byte ptr [rbp+0]
.text:0000000000001C5B                 lea     rdx, [rbp+rcx+0]
.text:0000000000001C60                 sub     rdx, rsi
.text:0000000000001C63                 mov     r12d, eax
.text:0000000000001C66                 sub     eax, 30h ; '0'
.text:0000000000001C69                 cmp     eax, 9
.text:0000000000001C6C                 jbe     short loc_1C50
.text:0000000000001C6E                 lea     rax, [rbx+2]
.text:0000000000001C72                 mov     [rsp+1B8h+var_162], 0
.text:0000000000001C77                 mov     rbx, rbp
.text:0000000000001C7A                 mov     [rsp+1B8h+var_1B0], rax
.text:0000000000001C7F
.text:0000000000001C7F loc_1C7F:                               ; CODE XREF: main+9FB↓j
.text:0000000000001C7F                                         ; main+AC3↓j ...
.text:0000000000001C7F                 cmp     r12b, 2Eh ; '.'
.text:0000000000001C83                 jnz     loc_2120
.text:0000000000001C89                 movzx   r12d, byte ptr [rbx+1]
.text:0000000000001C8E                 mov     byte ptr [rsp+1B8h+var_E5], 0
.text:0000000000001C96                 cmp     r12b, 2Ah ; '*'
.text:0000000000001C9A                 jz      loc_216C
.text:0000000000001CA0                 movsx   eax, r12b
.text:0000000000001CA4                 add     rdx, 1
.text:0000000000001CA8                 mov     r9, [rsp+1B8h+var_1B0]
.text:0000000000001CAD                 sub     eax, 30h ; '0'
.text:0000000000001CB0                 cmp     eax, 9
.text:0000000000001CB3                 jbe     short loc_1CC3
.text:0000000000001CB5                 jmp     loc_242F
.text:0000000000001CB5 ; ---------------------------------------------------------------------------
.text:0000000000001CBA                 align 20h
.text:0000000000001CC0
.text:0000000000001CC0 loc_1CC0:                               ; CODE XREF: main+579↓j
.text:0000000000001CC0                 mov     r9, rbx
.text:0000000000001CC3
.text:0000000000001CC3 loc_1CC3:                               ; CODE XREF: main+553↑j
.text:0000000000001CC3                 movsx   eax, byte ptr [r9+1]
.text:0000000000001CC8                 add     rdx, 1
.text:0000000000001CCC                 lea     rbx, [r9+1]
.text:0000000000001CD0                 mov     r12d, eax
.text:0000000000001CD3                 sub     eax, 30h ; '0'
.text:0000000000001CD6                 cmp     eax, 9
.text:0000000000001CD9                 jbe     short loc_1CC0
.text:0000000000001CDB                 mov     rax, r9
.text:0000000000001CDE                 mov     [rsp+1B8h+var_161], 0
.text:0000000000001CE3                 add     rax, 2
.text:0000000000001CE7                 mov     [rsp+1B8h+var_1B0], rax
.text:0000000000001CEC
.text:0000000000001CEC loc_1CEC:                               ; CODE XREF: main+9C5↓j
.text:0000000000001CEC                                         ; main+A6B↓j ...
.text:0000000000001CEC                 lea     eax, [r12-4Ch]
.text:0000000000001CF1                 cmp     al, 2Eh ; '.'
.text:0000000000001CF3                 ja      short loc_1D22
.text:0000000000001CF5                 bt      r13, rax
.text:0000000000001CF9                 jnb     short loc_1D22
.text:0000000000001CFB                 nop     dword ptr [rax+rax+00h]
.text:0000000000001D00
.text:0000000000001D00 loc_1D00:                               ; CODE XREF: main+9B5↓j
.text:0000000000001D00                 movzx   r12d, byte ptr [rbx+1]
.text:0000000000001D05                 lea     rcx, [rbx+1]
.text:0000000000001D09                 lea     eax, [r12-4Ch]
.text:0000000000001D0E                 cmp     al, 2Eh ; '.'
.text:0000000000001D10                 jbe     loc_2108
.text:0000000000001D16
.text:0000000000001D16 loc_1D16:                               ; CODE XREF: main+9AC↓j
.text:0000000000001D16                 lea     rax, [rbx+2]
.text:0000000000001D1A                 mov     rbx, rcx
.text:0000000000001D1D                 mov     [rsp+1B8h+var_1B0], rax
.text:0000000000001D22
.text:0000000000001D22 loc_1D22:                               ; CODE XREF: main+593↑j
.text:0000000000001D22                                         ; main+599↑j
.text:0000000000001D22                 movzx   eax, r12b
.text:0000000000001D26                 cmp     [rsp+rax+1B8h+var_148], 0
.text:0000000000001D2B                 jz      loc_244A
.text:0000000000001D31                 lea     rax, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001D38                 test    r15d, r15d
.text:0000000000001D3B                 mov     qword ptr [rsp+1B8h+var_1A8], rax
.text:0000000000001D40                 jz      short loc_1D5A
.text:0000000000001D42                 mov     rax, [rsp+1B8h+var_1B8]
.text:0000000000001D46                 sub     r15d, 1
.text:0000000000001D4A                 mov     rsi, [rax]
.text:0000000000001D4D                 add     rax, 8
.text:0000000000001D51                 mov     [rsp+1B8h+var_1B8], rax
.text:0000000000001D55                 mov     qword ptr [rsp+1B8h+var_1A8], rsi
.text:0000000000001D5A
.text:0000000000001D5A loc_1D5A:                               ; CODE XREF: main+5E0↑j
.text:0000000000001D5A                 lea     ecx, [r12-41h]
.text:0000000000001D5F                 cmp     cl, 37h ; '7'
.text:0000000000001D62                 ja      loc_2160
.text:0000000000001D68                 lea     rsi, aLd        ; "ld"
.text:0000000000001D6F                 mov     eax, 1
.text:0000000000001D74                 shl     rax, cl
.text:0000000000001D77                 mov     ecx, 1
.text:0000000000001D7C                 mov     qword ptr [rsp+1B8h+var_198], rsi
.text:0000000000001D81                 mov     rsi, 90410800800000h
.text:0000000000001D8B                 test    rax, rsi
.text:0000000000001D8E                 jnz     short loc_1DBB
.text:0000000000001D90                 mov     rcx, 7100000071h
.text:0000000000001D9A                 and     rax, rcx
.text:0000000000001D9D                 cmp     rax, 1
.text:0000000000001DA1                 sbb     rcx, rcx
.text:0000000000001DA4                 add     rcx, 1
.text:0000000000001DA8                 test    rax, rax
.text:0000000000001DAB                 lea     rax, asc_8C5B   ; "L"
.text:0000000000001DB2                 cmovz   rax, r14
.text:0000000000001DB6                 mov     qword ptr [rsp+1B8h+var_198], rax
.text:0000000000001DBB
.text:0000000000001DBB loc_1DBB:                               ; CODE XREF: main+62E↑j
.text:0000000000001DBB                                         ; main+A07↓j
.text:0000000000001DBB                 lea     rdi, [rdx+rcx+2]
.text:0000000000001DC0                 mov     [rsp+1B8h+var_178], rcx
.text:0000000000001DC5                 mov     [rsp+1B8h+n], rdx
.text:0000000000001DCA                 call    xmalloc
.text:0000000000001DCF                 mov     rdx, [rsp+1B8h+n] ; n
.text:0000000000001DD4                 mov     rsi, r14        ; src
.text:0000000000001DD7                 mov     rdi, rax        ; dest
.text:0000000000001DDA                 mov     rbp, rax
.text:0000000000001DDD                 call    _mempcpy
.text:0000000000001DE2                 mov     rcx, [rsp+1B8h+var_178]
.text:0000000000001DE7                 mov     rsi, qword ptr [rsp+1B8h+var_198] ; src
.text:0000000000001DEC                 mov     rdi, rax        ; dest
.text:0000000000001DEF                 mov     rdx, rcx        ; n
.text:0000000000001DF2                 call    _mempcpy
.text:0000000000001DF7                 mov     [rax], r12b
.text:0000000000001DFA                 sub     r12d, 41h ; 'A' ; switch 56 cases
.text:0000000000001DFE                 mov     byte ptr [rax+1], 0
.text:0000000000001E02                 cmp     r12b, 37h
.text:0000000000001E06                 ja      def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:0000000000001E0C                 lea     rdx, jpt_1E1E
.text:0000000000001E13                 movzx   r12d, r12b
.text:0000000000001E17                 movsxd  rax, ds:(jpt_1E1E - 8DE8h)[rdx+r12*4]
.text:0000000000001E1B                 add     rax, rdx
.text:0000000000001E1E                 jmp     rax             ; switch jump
.text:0000000000001E20 ; ---------------------------------------------------------------------------
.text:0000000000001E20
.text:0000000000001E20 loc_1E20:                               ; CODE XREF: main+153↑j
.text:0000000000001E20                 movzx   esi, al         ; int
.text:0000000000001E23                 mov     rbx, r14
.text:0000000000001E26                 mov     r14, rbp
.text:0000000000001E29                 call    ___overflow
.text:0000000000001E2E                 jmp     loc_188C
.text:0000000000001E33 ; ---------------------------------------------------------------------------
.text:0000000000001E33
.text:0000000000001E33 loc_1E33:                               ; CODE XREF: main+2CF↑j
.text:0000000000001E33                 movzx   esi, al         ; int
.text:0000000000001E36                 call    ___overflow
.text:0000000000001E3B                 mov     rax, r12
.text:0000000000001E3E                 jmp     loc_1A42
.text:0000000000001E43 ; ---------------------------------------------------------------------------
.text:0000000000001E43
.text:0000000000001E43 loc_1E43:                               ; CODE XREF: main+287↑j
.text:0000000000001E43                 mov     esi, 25h ; '%'  ; int
.text:0000000000001E48                 mov     r14, rbp
.text:0000000000001E4B                 call    ___overflow
.text:0000000000001E50                 jmp     loc_188C
.text:0000000000001E55 ; ---------------------------------------------------------------------------
.text:0000000000001E55
.text:0000000000001E55 loc_1E55:                               ; CODE XREF: main+90↑j
.text:0000000000001E55                 mov     r13, [rbx+8]
.text:0000000000001E59                 lea     rsi, aHelp      ; "--help"
.text:0000000000001E60                 mov     rdi, r13        ; s1
.text:0000000000001E63                 call    _strcmp
.text:0000000000001E68                 test    eax, eax
.text:0000000000001E6A                 jz      loc_24FA
.text:0000000000001E70                 lea     rsi, aVersion   ; "--version"
.text:0000000000001E77                 mov     rdi, r13        ; s1
.text:0000000000001E7A                 call    _strcmp
.text:0000000000001E7F                 test    eax, eax
.text:0000000000001E81                 mov     r12d, eax
.text:0000000000001E84                 jz      short loc_1ED2
.text:0000000000001E86                 lea     rsi, s2         ; "--"
.text:0000000000001E8D                 mov     rdi, r13        ; s1
.text:0000000000001E90                 call    _strcmp
.text:0000000000001E95                 test    eax, eax
.text:0000000000001E97                 jnz     loc_181A
.text:0000000000001E9D
.text:0000000000001E9D loc_1E9D:                               ; CODE XREF: main+99↑j
.text:0000000000001E9D                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000001EA4                 mov     edx, 5          ; category
.text:0000000000001EA9                 xor     edi, edi        ; domainname
.text:0000000000001EAB                 call    _dcgettext
.text:0000000000001EB0                 xor     edi, edi        ; status
.text:0000000000001EB2                 mov     rdx, rax        ; format
.text:0000000000001EB5                 xor     esi, esi        ; errnum
.text:0000000000001EB7                 xor     eax, eax
.text:0000000000001EB9                 call    _error
.text:0000000000001EBE                 mov     edi, 1          ; status
.text:0000000000001EC3                 call    usage
.text:0000000000001EC8 ; ---------------------------------------------------------------------------
.text:0000000000001EC8
.text:0000000000001EC8 loc_1EC8:                               ; CODE XREF: main+EB↑j
.text:0000000000001EC8                 mov     r14d, [rsp+1B8h+var_170]
.text:0000000000001ECD                 jmp     loc_18FE
.text:0000000000001ED2 ; ---------------------------------------------------------------------------
.text:0000000000001ED2
.text:0000000000001ED2 loc_1ED2:                               ; CODE XREF: main+724↑j
.text:0000000000001ED2                 mov     rcx, cs:Version
.text:0000000000001ED9                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001EE0                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001EE7                 lea     rdx, unk_8C2B
.text:0000000000001EEE                 lea     rsi, aPrintf    ; "printf"
.text:0000000000001EF5                 xor     r9d, r9d
.text:0000000000001EF8                 xor     eax, eax
.text:0000000000001EFA                 call    version_etc
.text:0000000000001EFF                 jmp     loc_193E
.text:0000000000001F04 ; ---------------------------------------------------------------------------
.text:0000000000001F04
.text:0000000000001F04 loc_1F04:                               ; CODE XREF: main+478↑j
.text:0000000000001F04                 test    dl, dl
.text:0000000000001F06                 mov     [rsp+1B8h+var_F0], r11b
.text:0000000000001F0E                 mov     [rsp+1B8h+var_D0], r11b
.text:0000000000001F16                 jnz     short loc_1F35
.text:0000000000001F18
.text:0000000000001F18 loc_1F18:                               ; CODE XREF: main+7E6↓j
.text:0000000000001F18                 mov     [rsp+1B8h+var_D9], r11b
.text:0000000000001F20                 mov     byte ptr [rsp+1B8h+var_103], r11b
.text:0000000000001F28                 mov     byte ptr [rsp+1B8h+var_E5+2], r11b
.text:0000000000001F30                 jmp     loc_1BE6
.text:0000000000001F35 ; ---------------------------------------------------------------------------
.text:0000000000001F35
.text:0000000000001F35 loc_1F35:                               ; CODE XREF: main+480↑j
.text:0000000000001F35                                         ; main+7B6↑j
.text:0000000000001F35                 test    r10b, r10b
.text:0000000000001F38                 mov     [rsp+1B8h+var_D5], dil
.text:0000000000001F40                 jz      loc_1BE6
.text:0000000000001F46                 jmp     short loc_1F18
.text:0000000000001F46 ; ---------------------------------------------------------------------------
.text:0000000000001F48                 align 10h
.text:0000000000001F50
.text:0000000000001F50 loc_1F50:                               ; CODE XREF: main+6BE↑j
.text:0000000000001F50                                         ; DATA XREF: .rodata:jpt_1E1E↓o
.text:0000000000001F50                 cmp     [rsp+1B8h+var_162], 0 ; jumptable 0000000000001E1E case 115
.text:0000000000001F55                 jnz     loc_231F
.text:0000000000001F5B                 cmp     [rsp+1B8h+var_161], 0
.text:0000000000001F60                 jnz     loc_2386
.text:0000000000001F66                 mov     rsi, qword ptr [rsp+1B8h+var_1A8]
.text:0000000000001F6B                 mov     rdi, rbp
.text:0000000000001F6E                 xor     eax, eax
.text:0000000000001F70                 call    xasprintf
.text:0000000000001F75                 nop     dword ptr [rax]
.text:0000000000001F78
.text:0000000000001F78 def_1E1E:                               ; CODE XREF: main+6A6↑j
.text:0000000000001F78                                         ; main+6BE↑j ...
.text:0000000000001F78                 mov     rdi, rbp        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:0000000000001F7B                 call    _free
.text:0000000000001F80                 mov     r14, [rsp+1B8h+var_1B0]
.text:0000000000001F85                 jmp     loc_188C
.text:0000000000001F8A ; ---------------------------------------------------------------------------
.text:0000000000001F8A
.text:0000000000001F8A loc_1F8A:                               ; CODE XREF: main+6BE↑j
.text:0000000000001F8A                                         ; DATA XREF: .rodata:jpt_1E1E↓o
.text:0000000000001F8A                 mov     rdi, qword ptr [rsp+1B8h+var_1A8] ; jumptable 0000000000001E1E cases 100,105
.text:0000000000001F8F                 call    vstrtoimax
.text:0000000000001F94                 cmp     [rsp+1B8h+var_162], 0
.text:0000000000001F99                 jnz     loc_2346
.text:0000000000001F9F                 cmp     [rsp+1B8h+var_161], 0
.text:0000000000001FA4                 jnz     loc_239E
.text:0000000000001FAA                 mov     rsi, rax
.text:0000000000001FAD                 mov     rdi, rbp
.text:0000000000001FB0                 xor     eax, eax
.text:0000000000001FB2                 call    xasprintf
.text:0000000000001FB7                 jmp     short def_1E1E  ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:0000000000001FB9 ; ---------------------------------------------------------------------------
.text:0000000000001FB9
.text:0000000000001FB9 loc_1FB9:                               ; CODE XREF: main+6BE↑j
.text:0000000000001FB9                                         ; DATA XREF: .rodata:jpt_1E1E↓o
.text:0000000000001FB9                 cmp     [rsp+1B8h+var_162], 0 ; jumptable 0000000000001E1E case 99
.text:0000000000001FBE                 mov     rax, qword ptr [rsp+1B8h+var_1A8]
.text:0000000000001FC3                 movsx   edx, byte ptr [rax]
.text:0000000000001FC6                 jnz     loc_230C
.text:0000000000001FCC                 mov     esi, edx
.text:0000000000001FCE                 mov     rdi, rbp
.text:0000000000001FD1                 xor     eax, eax
.text:0000000000001FD3                 call    xasprintf
.text:0000000000001FD8                 jmp     short def_1E1E  ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:0000000000001FDA ; ---------------------------------------------------------------------------
.text:0000000000001FDA
.text:0000000000001FDA loc_1FDA:                               ; CODE XREF: main+6BE↑j
.text:0000000000001FDA                                         ; DATA XREF: .rodata:jpt_1E1E↓o
.text:0000000000001FDA                 mov     rax, qword ptr [rsp+1B8h+var_1A8] ; jumptable 0000000000001E1E cases 88,111,117,120
.text:0000000000001FDF                 movzx   eax, byte ptr [rax]
.text:0000000000001FE2                 cmp     al, 22h ; '"'
.text:0000000000001FE4                 jz      short loc_1FEE
.text:0000000000001FE6                 cmp     al, 27h ; '''
.text:0000000000001FE8                 jnz     loc_2228
.text:0000000000001FEE
.text:0000000000001FEE loc_1FEE:                               ; CODE XREF: main+884↑j
.text:0000000000001FEE                 mov     rax, qword ptr [rsp+1B8h+var_1A8]
.text:0000000000001FF3                 movzx   r12d, byte ptr [rax+1]
.text:0000000000001FF8                 test    r12b, r12b
.text:0000000000001FFB                 jz      loc_2228
.text:0000000000002001                 cmp     byte ptr [rax+2], 0
.text:0000000000002005                 jz      short loc_203A
.text:0000000000002007                 cmp     cs:posixly_correct, 0
.text:000000000000200E                 jnz     short loc_203A
.text:0000000000002010                 lea     rsi, aWarningSCharac ; "warning: %s: character(s) following cha"...
.text:0000000000002017                 mov     edx, 5          ; category
.text:000000000000201C                 xor     edi, edi        ; domainname
.text:000000000000201E                 call    _dcgettext
.text:0000000000002023                 mov     rcx, qword ptr [rsp+1B8h+var_1A8]
.text:0000000000002028                 mov     rdx, rax        ; format
.text:000000000000202B                 xor     esi, esi        ; errnum
.text:000000000000202D                 xor     edi, edi        ; status
.text:000000000000202F                 xor     eax, eax
.text:0000000000002031                 add     rcx, 2
.text:0000000000002035                 call    _error
.text:000000000000203A
.text:000000000000203A loc_203A:                               ; CODE XREF: main+8A5↑j
.text:000000000000203A                                         ; main+8AE↑j
.text:000000000000203A                 cmp     [rsp+1B8h+var_162], 0
.text:000000000000203F                 jnz     loc_2264
.text:0000000000002045
.text:0000000000002045 loc_2045:                               ; CODE XREF: main+AFE↓j
.text:0000000000002045                 cmp     [rsp+1B8h+var_161], 0
.text:000000000000204A                 jnz     loc_23B4
.text:0000000000002050                 mov     rsi, r12
.text:0000000000002053                 mov     rdi, rbp
.text:0000000000002056                 xor     eax, eax
.text:0000000000002058                 call    xasprintf
.text:000000000000205D                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:0000000000002062 ; ---------------------------------------------------------------------------
.text:0000000000002062
.text:0000000000002062 loc_2062:                               ; CODE XREF: main+6BE↑j
.text:0000000000002062                                         ; DATA XREF: .rodata:jpt_1E1E↓o
.text:0000000000002062                 mov     rax, qword ptr [rsp+1B8h+var_1A8] ; jumptable 0000000000001E1E cases 65,69-71,97,101-103
.text:0000000000002067                 movzx   eax, byte ptr [rax]
.text:000000000000206A                 cmp     al, 22h ; '"'
.text:000000000000206C                 jz      short loc_2076
.text:000000000000206E                 cmp     al, 27h ; '''
.text:0000000000002070                 jnz     loc_2285
.text:0000000000002076
.text:0000000000002076 loc_2076:                               ; CODE XREF: main+90C↑j
.text:0000000000002076                 mov     rsi, qword ptr [rsp+1B8h+var_1A8]
.text:000000000000207B                 movzx   eax, byte ptr [rsi+1]
.text:000000000000207F                 test    al, al
.text:0000000000002081                 jz      loc_2285
.text:0000000000002087                 cmp     byte ptr [rsi+2], 0
.text:000000000000208B                 mov     word ptr [rsp+1B8h+var_198], ax
.text:0000000000002090                 fild    word ptr [rsp+1B8h+var_198]
.text:0000000000002094                 jz      short loc_20D1
.text:0000000000002096                 cmp     cs:posixly_correct, 0
.text:000000000000209D                 jnz     short loc_20D1
.text:000000000000209F                 fstp    [rsp+1B8h+var_198]
.text:00000000000020A3                 lea     rsi, aWarningSCharac ; "warning: %s: character(s) following cha"...
.text:00000000000020AA                 mov     edx, 5          ; category
.text:00000000000020AF                 xor     edi, edi        ; domainname
.text:00000000000020B1                 call    _dcgettext
.text:00000000000020B6                 mov     rcx, qword ptr [rsp+1B8h+var_1A8]
.text:00000000000020BB                 mov     rdx, rax        ; format
.text:00000000000020BE                 xor     esi, esi        ; errnum
.text:00000000000020C0                 xor     edi, edi        ; status
.text:00000000000020C2                 xor     eax, eax
.text:00000000000020C4                 add     rcx, 2
.text:00000000000020C8                 call    _error
.text:00000000000020CD                 fld     [rsp+1B8h+var_198]
.text:00000000000020D1
.text:00000000000020D1 loc_20D1:                               ; CODE XREF: main+934↑j
.text:00000000000020D1                                         ; main+93D↑j
.text:00000000000020D1                 cmp     [rsp+1B8h+var_162], 0
.text:00000000000020D6                 jnz     loc_22C2
.text:00000000000020DC
.text:00000000000020DC loc_20DC:                               ; CODE XREF: main+B5C↓j
.text:00000000000020DC                 cmp     [rsp+1B8h+var_161], 0
.text:00000000000020E1                 jnz     loc_23EA
.text:00000000000020E7                 sub     rsp, 10h
.text:00000000000020EB                 mov     rdi, rbp
.text:00000000000020EE                 xor     eax, eax
.text:00000000000020F0                 fstp    [rsp+1C8h+var_1C8]
.text:00000000000020F3                 call    xasprintf
.text:00000000000020F8                 pop     r9
.text:00000000000020FA                 pop     r10
.text:00000000000020FC                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00000000000020FC ; ---------------------------------------------------------------------------
.text:0000000000002101                 align 8
.text:0000000000002108
.text:0000000000002108 loc_2108:                               ; CODE XREF: main+5B0↑j
.text:0000000000002108                 bt      r13, rax
.text:000000000000210C                 jnb     loc_1D16
.text:0000000000002112                 mov     rbx, rcx
.text:0000000000002115                 jmp     loc_1D00
.text:0000000000002115 ; ---------------------------------------------------------------------------
.text:000000000000211A                 align 20h
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: main+523↑j
.text:0000000000002120                 mov     [rsp+1B8h+var_161], 0
.text:0000000000002125                 jmp     loc_1CEC
.text:0000000000002125 ; ---------------------------------------------------------------------------
.text:000000000000212A                 align 10h
.text:0000000000002130
.text:0000000000002130 loc_2130:                               ; CODE XREF: main+4D7↑j
.text:0000000000002130                 test    r15d, r15d
.text:0000000000002133                 lea     rdx, [rcx+1]
.text:0000000000002137                 jnz     loc_21D0
.text:000000000000213D                 lea     rax, [rbx+2]
.text:0000000000002141                 movzx   r12d, byte ptr [rbx+1]
.text:0000000000002146                 mov     [rsp+1B8h+var_16C], 0
.text:000000000000214E                 mov     rbx, rbp
.text:0000000000002151                 mov     [rsp+1B8h+var_162], 1
.text:0000000000002156                 mov     [rsp+1B8h+var_1B0], rax
.text:000000000000215B                 jmp     loc_1C7F
.text:0000000000002160 ; ---------------------------------------------------------------------------
.text:0000000000002160
.text:0000000000002160 loc_2160:                               ; CODE XREF: main+602↑j
.text:0000000000002160                 mov     qword ptr [rsp+1B8h+var_198], r14
.text:0000000000002165                 xor     ecx, ecx
.text:0000000000002167                 jmp     loc_1DBB
.text:000000000000216C ; ---------------------------------------------------------------------------
.text:000000000000216C
.text:000000000000216C loc_216C:                               ; CODE XREF: main+53A↑j
.text:000000000000216C                 add     rdx, 2
.text:0000000000002170                 test    r15d, r15d
.text:0000000000002173                 lea     rbp, [rbx+2]
.text:0000000000002177                 jz      loc_22E9
.text:000000000000217D                 mov     rax, [rsp+1B8h+var_1B8]
.text:0000000000002181                 mov     [rsp+1B8h+var_1B0], rdx
.text:0000000000002186                 mov     rdi, [rax]      ; nptr
.text:0000000000002189                 call    vstrtoimax
.text:000000000000218E                 test    rax, rax
.text:0000000000002191                 mov     rdx, [rsp+1B8h+var_1B0]
.text:0000000000002196                 js      loc_2379
.text:000000000000219C                 cmp     rax, 7FFFFFFFh
.text:00000000000021A2                 jg      loc_2489
.text:00000000000021A8                 mov     [rsp+1B8h+var_168], eax
.text:00000000000021AC
.text:00000000000021AC loc_21AC:                               ; CODE XREF: main+C21↓j
.text:00000000000021AC                 lea     rax, [rbx+3]
.text:00000000000021B0                 movzx   r12d, byte ptr [rbx+2]
.text:00000000000021B5                 add     [rsp+1B8h+var_1B8], 8
.text:00000000000021BA                 sub     r15d, 1
.text:00000000000021BE                 mov     rbx, rbp
.text:00000000000021C1                 mov     [rsp+1B8h+var_161], 1
.text:00000000000021C6                 mov     [rsp+1B8h+var_1B0], rax
.text:00000000000021CB                 jmp     loc_1CEC
.text:00000000000021D0 ; ---------------------------------------------------------------------------
.text:00000000000021D0
.text:00000000000021D0 loc_21D0:                               ; CODE XREF: main+9D7↑j
.text:00000000000021D0                 mov     r12, [rsp+1B8h+var_1B8]
.text:00000000000021D4                 mov     qword ptr [rsp+1B8h+var_1A8], rdx
.text:00000000000021D9                 mov     rdi, [r12]      ; nptr
.text:00000000000021DD                 call    vstrtoimax
.text:00000000000021E2                 mov     ecx, 80000000h
.text:00000000000021E7                 mov     esi, 0FFFFFFFFh
.text:00000000000021EC                 add     rcx, rax
.text:00000000000021EF                 cmp     rcx, rsi
.text:00000000000021F2                 ja      loc_24BF
.text:00000000000021F8                 mov     [rsp+1B8h+var_16C], eax
.text:00000000000021FC                 lea     rax, [rbx+2]
.text:0000000000002200                 add     r12, 8
.text:0000000000002204                 mov     [rsp+1B8h+var_1B8], r12
.text:0000000000002208                 sub     r15d, 1
.text:000000000000220C                 movzx   r12d, byte ptr [rbx+1]
.text:0000000000002211                 mov     [rsp+1B8h+var_1B0], rax
.text:0000000000002216                 mov     rbx, rbp
.text:0000000000002219                 mov     [rsp+1B8h+var_162], 1
.text:000000000000221E                 mov     rdx, qword ptr [rsp+1B8h+var_1A8]
.text:0000000000002223                 jmp     loc_1C7F
.text:0000000000002228 ; ---------------------------------------------------------------------------
.text:0000000000002228
.text:0000000000002228 loc_2228:                               ; CODE XREF: main+888↑j
.text:0000000000002228                                         ; main+89B↑j
.text:0000000000002228                 call    ___errno_location
.text:000000000000222D                 mov     r14, qword ptr [rsp+1B8h+var_1A8]
.text:0000000000002232                 lea     rsi, [rsp+1B8h+endptr] ; endptr
.text:0000000000002237                 xor     ecx, ecx        ; group
.text:0000000000002239                 xor     edx, edx        ; base
.text:000000000000223B                 mov     dword ptr [rax], 0
.text:0000000000002241                 mov     rdi, r14        ; nptr
.text:0000000000002244                 call    ___strtoul_internal
.text:0000000000002249                 mov     rsi, [rsp+1B8h+endptr]
.text:000000000000224E                 mov     rdi, r14
.text:0000000000002251                 mov     r12, rax
.text:0000000000002254                 call    verify_numeric
.text:0000000000002259                 cmp     [rsp+1B8h+var_162], 0
.text:000000000000225E                 jz      loc_2045
.text:0000000000002264
.text:0000000000002264 loc_2264:                               ; CODE XREF: main+8DF↑j
.text:0000000000002264                 cmp     [rsp+1B8h+var_161], 0
.text:0000000000002269                 jnz     loc_240F
.text:000000000000226F                 mov     esi, [rsp+1B8h+var_16C]
.text:0000000000002273                 mov     rdx, r12
.text:0000000000002276                 mov     rdi, rbp
.text:0000000000002279                 xor     eax, eax
.text:000000000000227B                 call    xasprintf
.text:0000000000002280                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:0000000000002285 ; ---------------------------------------------------------------------------
.text:0000000000002285
.text:0000000000002285 loc_2285:                               ; CODE XREF: main+910↑j
.text:0000000000002285                                         ; main+921↑j
.text:0000000000002285                 call    ___errno_location
.text:000000000000228A                 mov     r14, qword ptr [rsp+1B8h+var_1A8]
.text:000000000000228F                 lea     rsi, [rsp+1B8h+endptr]
.text:0000000000002294                 mov     dword ptr [rax], 0
.text:000000000000229A                 mov     rdi, r14        ; nptr
.text:000000000000229D                 call    cl_strtold
.text:00000000000022A2                 fstp    [rsp+1B8h+var_1A8]
.text:00000000000022A6                 mov     rsi, [rsp+1B8h+endptr]
.text:00000000000022AB                 mov     rdi, r14
.text:00000000000022AE                 call    verify_numeric
.text:00000000000022B3                 cmp     [rsp+1B8h+var_162], 0
.text:00000000000022B8                 fld     [rsp+1B8h+var_1A8]
.text:00000000000022BC                 jz      loc_20DC
.text:00000000000022C2
.text:00000000000022C2 loc_22C2:                               ; CODE XREF: main+976↑j
.text:00000000000022C2                 cmp     [rsp+1B8h+var_161], 0
.text:00000000000022C7                 jnz     loc_23CA
.text:00000000000022CD                 sub     rsp, 10h
.text:00000000000022D1                 mov     rdi, rbp
.text:00000000000022D4                 xor     eax, eax
.text:00000000000022D6                 mov     esi, [rsp+1C8h+var_16C]
.text:00000000000022DA                 fstp    [rsp+1C8h+var_1C8]
.text:00000000000022DD                 call    xasprintf
.text:00000000000022E2                 pop     rcx
.text:00000000000022E3                 pop     rsi
.text:00000000000022E4                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00000000000022E9 ; ---------------------------------------------------------------------------
.text:00000000000022E9
.text:00000000000022E9 loc_22E9:                               ; CODE XREF: main+A17↑j
.text:00000000000022E9                 lea     rax, [rbx+3]
.text:00000000000022ED                 movzx   r12d, byte ptr [rbx+2]
.text:00000000000022F2                 mov     [rsp+1B8h+var_168], 0
.text:00000000000022FA                 mov     rbx, rbp
.text:00000000000022FD                 mov     [rsp+1B8h+var_161], 1
.text:0000000000002302                 mov     [rsp+1B8h+var_1B0], rax
.text:0000000000002307                 jmp     loc_1CEC
.text:000000000000230C ; ---------------------------------------------------------------------------
.text:000000000000230C
.text:000000000000230C loc_230C:                               ; CODE XREF: main+866↑j
.text:000000000000230C                 mov     esi, [rsp+1B8h+var_16C]
.text:0000000000002310                 mov     rdi, rbp
.text:0000000000002313                 xor     eax, eax
.text:0000000000002315                 call    xasprintf
.text:000000000000231A                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:000000000000231F ; ---------------------------------------------------------------------------
.text:000000000000231F
.text:000000000000231F loc_231F:                               ; CODE XREF: main+7F5↑j
.text:000000000000231F                 cmp     [rsp+1B8h+var_161], 0
.text:0000000000002324                 jz      loc_2417
.text:000000000000232A                 mov     rcx, qword ptr [rsp+1B8h+var_1A8]
.text:000000000000232F
.text:000000000000232F loc_232F:                               ; CODE XREF: main+CAA↓j
.text:000000000000232F                                         ; main+CB2↓j
.text:000000000000232F                 mov     edx, [rsp+1B8h+var_168]
.text:0000000000002333                 mov     esi, [rsp+1B8h+var_16C]
.text:0000000000002337                 mov     rdi, rbp
.text:000000000000233A                 xor     eax, eax
.text:000000000000233C                 call    xasprintf
.text:0000000000002341                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:0000000000002346 ; ---------------------------------------------------------------------------
.text:0000000000002346
.text:0000000000002346 loc_2346:                               ; CODE XREF: main+839↑j
.text:0000000000002346                 cmp     [rsp+1B8h+var_161], 0
.text:000000000000234B                 jnz     loc_2407
.text:0000000000002351                 mov     esi, [rsp+1B8h+var_16C]
.text:0000000000002355                 mov     rdx, rax
.text:0000000000002358                 mov     rdi, rbp
.text:000000000000235B                 xor     eax, eax
.text:000000000000235D                 call    xasprintf
.text:0000000000002362                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:0000000000002367 ; ---------------------------------------------------------------------------
.text:0000000000002367
.text:0000000000002367 loc_2367:                               ; CODE XREF: main+4E9↑j
.text:0000000000002367                 mov     [rsp+1B8h+var_1B0], rbp
.text:000000000000236C                 mov     rdx, rcx
.text:000000000000236F                 mov     [rsp+1B8h+var_162], 0
.text:0000000000002374                 jmp     loc_1C7F
.text:0000000000002379 ; ---------------------------------------------------------------------------
.text:0000000000002379
.text:0000000000002379 loc_2379:                               ; CODE XREF: main+A36↑j
.text:0000000000002379                 mov     [rsp+1B8h+var_168], 0FFFFFFFFh
.text:0000000000002381                 jmp     loc_21AC
.text:0000000000002386 ; ---------------------------------------------------------------------------
.text:0000000000002386
.text:0000000000002386 loc_2386:                               ; CODE XREF: main+800↑j
.text:0000000000002386                 mov     rdx, qword ptr [rsp+1B8h+var_1A8]
.text:000000000000238B                 mov     esi, [rsp+1B8h+var_168]
.text:000000000000238F                 mov     rdi, rbp
.text:0000000000002392                 xor     eax, eax
.text:0000000000002394                 call    xasprintf
.text:0000000000002399                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:000000000000239E ; ---------------------------------------------------------------------------
.text:000000000000239E
.text:000000000000239E loc_239E:                               ; CODE XREF: main+844↑j
.text:000000000000239E                 mov     esi, [rsp+1B8h+var_168]
.text:00000000000023A2                 mov     rdx, rax
.text:00000000000023A5                 mov     rdi, rbp
.text:00000000000023A8                 xor     eax, eax
.text:00000000000023AA                 call    xasprintf
.text:00000000000023AF                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00000000000023B4 ; ---------------------------------------------------------------------------
.text:00000000000023B4
.text:00000000000023B4 loc_23B4:                               ; CODE XREF: main+8EA↑j
.text:00000000000023B4                 mov     esi, [rsp+1B8h+var_168]
.text:00000000000023B8                 mov     rdx, r12
.text:00000000000023BB                 mov     rdi, rbp
.text:00000000000023BE                 xor     eax, eax
.text:00000000000023C0                 call    xasprintf
.text:00000000000023C5                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00000000000023CA ; ---------------------------------------------------------------------------
.text:00000000000023CA
.text:00000000000023CA loc_23CA:                               ; CODE XREF: main+B67↑j
.text:00000000000023CA                 sub     rsp, 10h
.text:00000000000023CE                 mov     rdi, rbp
.text:00000000000023D1                 xor     eax, eax
.text:00000000000023D3                 mov     edx, [rsp+1C8h+var_168]
.text:00000000000023D7                 mov     esi, [rsp+1C8h+var_16C]
.text:00000000000023DB                 fstp    [rsp+1C8h+var_1C8]
.text:00000000000023DE                 call    xasprintf
.text:00000000000023E3                 pop     rax
.text:00000000000023E4                 pop     rdx
.text:00000000000023E5                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:00000000000023EA ; ---------------------------------------------------------------------------
.text:00000000000023EA
.text:00000000000023EA loc_23EA:                               ; CODE XREF: main+981↑j
.text:00000000000023EA                 sub     rsp, 10h
.text:00000000000023EE                 mov     rdi, rbp
.text:00000000000023F1                 xor     eax, eax
.text:00000000000023F3                 mov     esi, [rsp+1C8h+var_168]
.text:00000000000023F7                 fstp    [rsp+1C8h+var_1C8]
.text:00000000000023FA                 call    xasprintf
.text:00000000000023FF                 pop     rdi
.text:0000000000002400                 pop     r8
.text:0000000000002402                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:0000000000002407 ; ---------------------------------------------------------------------------
.text:0000000000002407
.text:0000000000002407 loc_2407:                               ; CODE XREF: main+BEB↑j
.text:0000000000002407                 mov     rcx, rax
.text:000000000000240A                 jmp     loc_232F
.text:000000000000240F ; ---------------------------------------------------------------------------
.text:000000000000240F
.text:000000000000240F loc_240F:                               ; CODE XREF: main+B09↑j
.text:000000000000240F                 mov     rcx, r12
.text:0000000000002412                 jmp     loc_232F
.text:0000000000002417 ; ---------------------------------------------------------------------------
.text:0000000000002417
.text:0000000000002417 loc_2417:                               ; CODE XREF: main+BC4↑j
.text:0000000000002417                 mov     rdx, qword ptr [rsp+1B8h+var_1A8]
.text:000000000000241C                 mov     esi, [rsp+1B8h+var_16C]
.text:0000000000002420                 mov     rdi, rbp
.text:0000000000002423                 xor     eax, eax
.text:0000000000002425                 call    xasprintf
.text:000000000000242A                 jmp     def_1E1E        ; jumptable 0000000000001E1E default case, cases 66-68,72-87,89-96,98,104,106-110,112-114,116,118,119
.text:000000000000242F ; ---------------------------------------------------------------------------
.text:000000000000242F
.text:000000000000242F loc_242F:                               ; CODE XREF: main+555↑j
.text:000000000000242F                 mov     rax, [rsp+1B8h+var_1B0]
.text:0000000000002434                 mov     [rsp+1B8h+var_161], 0
.text:0000000000002439                 mov     rbx, rax
.text:000000000000243C                 add     rax, 1
.text:0000000000002440                 mov     [rsp+1B8h+var_1B0], rax
.text:0000000000002445                 jmp     loc_1CEC
.text:000000000000244A ; ---------------------------------------------------------------------------
.text:000000000000244A
.text:000000000000244A loc_244A:                               ; CODE XREF: main+5CB↑j
.text:000000000000244A                 mov     r12, [rsp+1B8h+var_1B0]
.text:000000000000244F                 lea     rsi, aSInvalidConver ; "%.*s: invalid conversion specification"
.text:0000000000002456                 mov     edx, 5          ; category
.text:000000000000245B                 xor     edi, edi        ; domainname
.text:000000000000245D                 call    _dcgettext
.text:0000000000002462                 mov     rcx, r12
.text:0000000000002465                 mov     rdx, rax        ; format
.text:0000000000002468                 mov     r8, r14
.text:000000000000246B                 sub     rcx, r14
.text:000000000000246E                 xor     esi, esi        ; errnum
.text:0000000000002470                 mov     edi, 1          ; status
.text:0000000000002475                 xor     eax, eax
.text:0000000000002477                 call    _error
.text:000000000000247C
.text:000000000000247C loc_247C:                               ; CODE XREF: main+489↑j
.text:000000000000247C                 mov     byte ptr [rsp+1B8h+var_E5], dil
.text:0000000000002484                 jmp     loc_1BEF
.text:0000000000002489 ; ---------------------------------------------------------------------------
.text:0000000000002489
.text:0000000000002489 loc_2489:                               ; CODE XREF: main+A42↑j
.text:0000000000002489                 mov     rax, [rsp+1B8h+var_1B8]
.text:000000000000248D                 mov     rdi, [rax]
.text:0000000000002490                 call    quote
.text:0000000000002495                 lea     rsi, aInvalidPrecisi ; "invalid precision: %s"
.text:000000000000249C                 mov     rbx, rax
.text:000000000000249F                 mov     edx, 5          ; category
.text:00000000000024A4                 xor     edi, edi        ; domainname
.text:00000000000024A6                 call    _dcgettext
.text:00000000000024AB                 mov     rcx, rbx
.text:00000000000024AE                 mov     rdx, rax        ; format
.text:00000000000024B1                 xor     esi, esi        ; errnum
.text:00000000000024B3                 mov     edi, 1          ; status
.text:00000000000024B8                 xor     eax, eax
.text:00000000000024BA                 call    _error
.text:00000000000024BF
.text:00000000000024BF loc_24BF:                               ; CODE XREF: main+A92↑j
.text:00000000000024BF                 mov     rax, [rsp+1B8h+var_1B8]
.text:00000000000024C3                 mov     rdi, [rax]
.text:00000000000024C6                 call    quote
.text:00000000000024CB                 lea     rsi, aInvalidFieldWi ; "invalid field width: %s"
.text:00000000000024D2                 mov     rbx, rax
.text:00000000000024D5                 mov     edx, 5          ; category
.text:00000000000024DA                 xor     edi, edi        ; domainname
.text:00000000000024DC                 call    _dcgettext
.text:00000000000024E1                 mov     rcx, rbx
.text:00000000000024E4                 mov     rdx, rax        ; format
.text:00000000000024E7                 xor     esi, esi        ; errnum
.text:00000000000024E9                 mov     edi, 1          ; status
.text:00000000000024EE                 xor     eax, eax
.text:00000000000024F0                 call    _error
.text:00000000000024F5
.text:00000000000024F5 loc_24F5:                               ; CODE XREF: main+1F2↑j
.text:00000000000024F5                 call    ___stack_chk_fail
.text:00000000000024FA ; ---------------------------------------------------------------------------
.text:00000000000024FA
.text:00000000000024FA loc_24FA:                               ; CODE XREF: main+70A↑j
.text:00000000000024FA                 xor     edi, edi        ; status
.text:00000000000024FC                 call    usage
.text:00000000000024FC ; } // starts at 1760
.text:00000000000024FC main            endp
.text:00000000000024FC
.text:00000000000024FC ; ---------------------------------------------------------------------------
.text:0000000000002501                 align 10h
.text:0000000000002510
.text:0000000000002510 ; =============== S U B R O U T I N E =======================================
.text:0000000000002510
.text:0000000000002510 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002510
.text:0000000000002510 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002510                 public start
.text:0000000000002510 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002510 ; __unwind {
.text:0000000000002510                 xor     ebp, ebp
.text:0000000000002512                 mov     r9, rdx         ; rtld_fini
.text:0000000000002515                 pop     rsi             ; argc
.text:0000000000002516                 mov     rdx, rsp        ; ubp_av
.text:0000000000002519                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000251D                 push    rax
.text:000000000000251E                 push    rsp             ; stack_end
.text:000000000000251F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002526                 lea     rcx, __libc_csu_init ; init
.text:000000000000252D                 lea     rdi, main       ; main
.text:0000000000002534                 call    cs:__libc_start_main_ptr
.text:000000000000253A                 hlt
.text:000000000000253A ; } // starts at 2510
.text:000000000000253A start           endp
.text:000000000000253A
.text:000000000000253A ; ---------------------------------------------------------------------------
.text:000000000000253B                 align 20h
.text:0000000000002540
.text:0000000000002540 ; =============== S U B R O U T I N E =======================================
.text:0000000000002540
.text:0000000000002540 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002540
.text:0000000000002540 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_25F3↓p
.text:0000000000002540                 lea     rdi, __bss_start
.text:0000000000002547                 push    rbp
.text:0000000000002548                 lea     rax, __bss_start
.text:000000000000254F                 cmp     rax, rdi
.text:0000000000002552                 mov     rbp, rsp
.text:0000000000002555                 jz      short loc_2570
.text:0000000000002557                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000255E                 test    rax, rax
.text:0000000000002561                 jz      short loc_2570
.text:0000000000002563                 pop     rbp
.text:0000000000002564                 jmp     rax
.text:0000000000002564 ; ---------------------------------------------------------------------------
.text:0000000000002566                 align 10h
.text:0000000000002570
.text:0000000000002570 loc_2570:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002570                                         ; deregister_tm_clones+21↑j
.text:0000000000002570                 pop     rbp
.text:0000000000002571                 retn
.text:0000000000002571 deregister_tm_clones endp
.text:0000000000002571
.text:0000000000002571 ; ---------------------------------------------------------------------------
.text:0000000000002572                 align 20h
.text:0000000000002580
.text:0000000000002580 ; =============== S U B R O U T I N E =======================================
.text:0000000000002580
.text:0000000000002580 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002580
.text:0000000000002580 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002580                 lea     rdi, __bss_start
.text:0000000000002587                 lea     rsi, __bss_start
.text:000000000000258E                 push    rbp
.text:000000000000258F                 sub     rsi, rdi
.text:0000000000002592                 mov     rbp, rsp
.text:0000000000002595                 sar     rsi, 3
.text:0000000000002599                 mov     rax, rsi
.text:000000000000259C                 shr     rax, 3Fh
.text:00000000000025A0                 add     rsi, rax
.text:00000000000025A3                 sar     rsi, 1
.text:00000000000025A6                 jz      short loc_25C0
.text:00000000000025A8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000025AF                 test    rax, rax
.text:00000000000025B2                 jz      short loc_25C0
.text:00000000000025B4                 pop     rbp
.text:00000000000025B5                 jmp     rax
.text:00000000000025B5 ; ---------------------------------------------------------------------------
.text:00000000000025B7                 align 20h
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000025C0                                         ; register_tm_clones+32↑j
.text:00000000000025C0                 pop     rbp
.text:00000000000025C1                 retn
.text:00000000000025C1 register_tm_clones endp
.text:00000000000025C1
.text:00000000000025C1 ; ---------------------------------------------------------------------------
.text:00000000000025C2                 align 10h
.text:00000000000025D0
.text:00000000000025D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025D0
.text:00000000000025D0 ; Attributes: info_from_lumina
.text:00000000000025D0
.text:00000000000025D0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000025D0                 cmp     cs:completed_7697, 0
.text:00000000000025D7                 jnz     short locret_2608
.text:00000000000025D9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000025E1                 push    rbp
.text:00000000000025E2                 mov     rbp, rsp
.text:00000000000025E5                 jz      short loc_25F3
.text:00000000000025E7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000025EE                 call    __cxa_finalize
.text:00000000000025F3
.text:00000000000025F3 loc_25F3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000025F3                 call    deregister_tm_clones
.text:00000000000025F8                 mov     cs:completed_7697, 1
.text:00000000000025FF                 pop     rbp
.text:0000000000002600                 retn
.text:0000000000002600 ; ---------------------------------------------------------------------------
.text:0000000000002601                 align 8
.text:0000000000002608
.text:0000000000002608 locret_2608:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002608                 rep retn
.text:0000000000002608 __do_global_dtors_aux endp
.text:0000000000002608
.text:0000000000002608 ; ---------------------------------------------------------------------------
.text:000000000000260A                 align 10h
.text:0000000000002610
.text:0000000000002610 ; =============== S U B R O U T I N E =======================================
.text:0000000000002610
.text:0000000000002610 ; Attributes: bp-based frame
.text:0000000000002610
.text:0000000000002610 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002610                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002610                 push    rbp
.text:0000000000002611                 mov     rbp, rsp
.text:0000000000002614                 pop     rbp
.text:0000000000002615                 jmp     register_tm_clones
.text:0000000000002615 frame_dummy     endp
.text:0000000000002615
.text:0000000000002615 ; ---------------------------------------------------------------------------
.text:000000000000261A                 align 20h
.text:0000000000002620
.text:0000000000002620 ; =============== S U B R O U T I N E =======================================
.text:0000000000002620
.text:0000000000002620
.text:0000000000002620 print_esc       proc near               ; CODE XREF: main+11D↑p
.text:0000000000002620                                         ; main+2FA↑p
.text:0000000000002620
.text:0000000000002620 var_2C          = dword ptr -2Ch
.text:0000000000002620
.text:0000000000002620 ; __unwind {
.text:0000000000002620                 push    r13
.text:0000000000002622                 push    r12
.text:0000000000002624                 mov     r12, rdi
.text:0000000000002627                 push    rbp
.text:0000000000002628                 push    rbx
.text:0000000000002629                 sub     rsp, 18h
.text:000000000000262D                 movzx   r13d, byte ptr [rdi+1]
.text:0000000000002632                 cmp     r13b, 78h ; 'x'
.text:0000000000002636                 jz      loc_2710
.text:000000000000263C                 lea     eax, [r13-30h]
.text:0000000000002640                 lea     rbx, [rdi+1]
.text:0000000000002644                 cmp     al, 7
.text:0000000000002646                 ja      short loc_26B0
.text:0000000000002648                 xor     eax, eax
.text:000000000000264A                 cmp     r13b, 30h ; '0'
.text:000000000000264E                 setz    al
.text:0000000000002651                 xor     edx, edx
.text:0000000000002653                 and     rsi, rax
.text:0000000000002656                 add     rsi, rbx
.text:0000000000002659                 lea     rbx, [rsi+3]
.text:000000000000265D
.text:000000000000265D loc_265D:                               ; CODE XREF: print_esc+57↓j
.text:000000000000265D                 movsx   eax, byte ptr [rsi]
.text:0000000000002660                 lea     ecx, [rax-30h]
.text:0000000000002663                 cmp     cl, 7
.text:0000000000002666                 ja      loc_28B0
.text:000000000000266C                 add     rsi, 1
.text:0000000000002670                 lea     edx, [rax+rdx*8-30h]
.text:0000000000002674                 cmp     rsi, rbx
.text:0000000000002677                 jnz     short loc_265D
.text:0000000000002679
.text:0000000000002679 loc_2679:                               ; CODE XREF: print_esc+293↓j
.text:0000000000002679                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002680                 mov     rax, [rdi+28h]
.text:0000000000002684                 cmp     rax, [rdi+30h]
.text:0000000000002688                 jnb     loc_2A30
.text:000000000000268E                 lea     rcx, [rax+1]
.text:0000000000002692                 mov     [rdi+28h], rcx
.text:0000000000002696                 mov     [rax], dl
.text:0000000000002698
.text:0000000000002698 loc_2698:                               ; CODE XREF: print_esc+C1↓j
.text:0000000000002698                                         ; print_esc+E7↓j ...
.text:0000000000002698                 add     rsp, 18h
.text:000000000000269C                 sub     rbx, r12
.text:000000000000269F                 lea     eax, [rbx-1]
.text:00000000000026A2                 pop     rbx
.text:00000000000026A3                 pop     rbp
.text:00000000000026A4                 pop     r12
.text:00000000000026A6                 pop     r13
.text:00000000000026A8                 retn
.text:00000000000026A8 ; ---------------------------------------------------------------------------
.text:00000000000026A9                 align 10h
.text:00000000000026B0
.text:00000000000026B0 loc_26B0:                               ; CODE XREF: print_esc+26↑j
.text:00000000000026B0                 test    r13b, r13b
.text:00000000000026B3                 jnz     loc_2798
.text:00000000000026B9
.text:00000000000026B9 loc_26B9:                               ; CODE XREF: print_esc+1C0↓j
.text:00000000000026B9                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000026C0                 mov     rax, [rdi+28h]
.text:00000000000026C4                 cmp     rax, [rdi+30h]
.text:00000000000026C8                 jnb     loc_2A3D
.text:00000000000026CE                 lea     rdx, [rax+1]
.text:00000000000026D2                 mov     [rdi+28h], rdx
.text:00000000000026D6                 mov     byte ptr [rax], 5Ch ; '\'
.text:00000000000026D9
.text:00000000000026D9 loc_26D9:                               ; CODE XREF: print_esc+427↓j
.text:00000000000026D9                 movzx   eax, byte ptr [r12+1]
.text:00000000000026DF                 test    al, al
.text:00000000000026E1                 jz      short loc_2698
.text:00000000000026E3                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000026EA                 mov     rdx, [rdi+28h]
.text:00000000000026EE                 cmp     rdx, [rdi+30h]
.text:00000000000026F2                 jnb     loc_2A4C
.text:00000000000026F8                 lea     rcx, [rdx+1]
.text:00000000000026FC                 mov     [rdi+28h], rcx
.text:0000000000002700                 mov     [rdx], al
.text:0000000000002702
.text:0000000000002702 loc_2702:                               ; CODE XREF: print_esc+434↓j
.text:0000000000002702                 lea     rbx, [r12+2]
.text:0000000000002707                 jmp     short loc_2698
.text:0000000000002707 ; ---------------------------------------------------------------------------
.text:0000000000002709                 align 10h
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: print_esc+16↑j
.text:0000000000002710                 lea     rbp, [rdi+2]
.text:0000000000002714                 lea     rbx, [r12+4]
.text:0000000000002719                 call    ___ctype_b_loc
.text:000000000000271E                 mov     r8, [rax]
.text:0000000000002721                 mov     rdi, rbp
.text:0000000000002724                 xor     esi, esi
.text:0000000000002726                 mov     r10d, ebp
.text:0000000000002729
.text:0000000000002729 loc_2729:                               ; CODE XREF: print_esc+134↓j
.text:0000000000002729                 movsx   edx, byte ptr [rdi]
.text:000000000000272C                 movzx   ecx, dl
.text:000000000000272F                 mov     eax, edx
.text:0000000000002731                 test    byte ptr [r8+rcx*2+1], 10h
.text:0000000000002737                 jz      loc_2A10
.text:000000000000273D                 lea     ecx, [rax-61h]
.text:0000000000002740                 shl     esi, 4
.text:0000000000002743                 cmp     cl, 5
.text:0000000000002746                 ja      short loc_2780
.text:0000000000002748                 sub     edx, 57h ; 'W'
.text:000000000000274B
.text:000000000000274B loc_274B:                               ; CODE XREF: print_esc+172↓j
.text:000000000000274B                 add     rdi, 1
.text:000000000000274F                 add     esi, edx
.text:0000000000002751                 cmp     rdi, rbx
.text:0000000000002754                 jnz     short loc_2729
.text:0000000000002756
.text:0000000000002756 loc_2756:                               ; CODE XREF: print_esc+3F8↓j
.text:0000000000002756                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000275D                 mov     rax, [rdi+28h]
.text:0000000000002761                 cmp     rax, [rdi+30h]
.text:0000000000002765                 jnb     loc_2A20
.text:000000000000276B                 lea     rdx, [rax+1]
.text:000000000000276F                 mov     [rdi+28h], rdx
.text:0000000000002773                 mov     [rax], sil
.text:0000000000002776                 jmp     loc_2698
.text:0000000000002776 ; ---------------------------------------------------------------------------
.text:000000000000277B                 align 20h
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: print_esc+126↑j
.text:0000000000002780                 lea     r9d, [rdx-37h]
.text:0000000000002784                 lea     ecx, [rdx-30h]
.text:0000000000002787                 sub     eax, 41h ; 'A'
.text:000000000000278A                 cmp     al, 5
.text:000000000000278C                 mov     edx, r9d
.text:000000000000278F                 cmova   edx, ecx
.text:0000000000002792                 jmp     short loc_274B
.text:0000000000002792 ; ---------------------------------------------------------------------------
.text:0000000000002794                 align 8
.text:0000000000002798
.text:0000000000002798 loc_2798:                               ; CODE XREF: print_esc+93↑j
.text:0000000000002798                 movsx   ebp, r13b
.text:000000000000279C                 lea     rdi, s          ; "\"\\abcefnrtv"
.text:00000000000027A3                 mov     esi, ebp        ; c
.text:00000000000027A5                 call    _strchr
.text:00000000000027AA                 test    rax, rax
.text:00000000000027AD                 jz      short loc_27D8
.text:00000000000027AF                 lea     eax, [r13-61h]  ; switch 22 cases
.text:00000000000027B3                 lea     rbx, [r12+2]
.text:00000000000027B8                 cmp     al, 15h
.text:00000000000027BA                 ja      def_27D1        ; jumptable 00000000000027D1 default case, cases 100,103-109,111-113,115,117
.text:00000000000027C0                 lea     rdx, jpt_27D1
.text:00000000000027C7                 movzx   eax, al
.text:00000000000027CA                 movsxd  rax, ds:(jpt_27D1 - 8CE8h)[rdx+rax*4]
.text:00000000000027CE                 add     rax, rdx
.text:00000000000027D1                 jmp     rax             ; switch jump
.text:00000000000027D1 ; ---------------------------------------------------------------------------
.text:00000000000027D3                 align 8
.text:00000000000027D8
.text:00000000000027D8 loc_27D8:                               ; CODE XREF: print_esc+18D↑j
.text:00000000000027D8                 mov     eax, r13d
.text:00000000000027DB                 and     eax, 0FFFFFFDFh
.text:00000000000027DE                 cmp     al, 55h ; 'U'
.text:00000000000027E0                 jnz     loc_26B9
.text:00000000000027E6                 cmp     r13b, 75h ; 'u'
.text:00000000000027EA                 lea     rbx, [r12+2]
.text:00000000000027EF                 setnz   r13b
.text:00000000000027F3                 movzx   r13d, r13b
.text:00000000000027F7                 lea     r13d, ds:4[r13*4]
.text:00000000000027FF                 call    ___ctype_b_loc
.text:0000000000002804                 mov     rsi, [rax]
.text:0000000000002807                 lea     eax, [r13-1]
.text:000000000000280B                 xor     r9d, r9d
.text:000000000000280E                 lea     rdi, [rbx+rax+1]
.text:0000000000002813                 jmp     short loc_2827
.text:0000000000002813 ; ---------------------------------------------------------------------------
.text:0000000000002815                 align 8
.text:0000000000002818
.text:0000000000002818 loc_2818:                               ; CODE XREF: print_esc+224↓j
.text:0000000000002818                 sub     edx, 57h ; 'W'
.text:000000000000281B                 add     rbx, 1
.text:000000000000281F                 add     r9d, edx
.text:0000000000002822                 cmp     rbx, rdi
.text:0000000000002825                 jz      short loc_2864
.text:0000000000002827
.text:0000000000002827 loc_2827:                               ; CODE XREF: print_esc+1F3↑j
.text:0000000000002827                                         ; print_esc+242↓j
.text:0000000000002827                 movsx   edx, byte ptr [rbx]
.text:000000000000282A                 movzx   ecx, dl
.text:000000000000282D                 mov     eax, edx
.text:000000000000282F                 test    byte ptr [rsi+rcx*2+1], 10h
.text:0000000000002834                 jz      loc_2A68
.text:000000000000283A                 lea     ecx, [rdx-61h]
.text:000000000000283D                 shl     r9d, 4
.text:0000000000002841                 cmp     cl, 5
.text:0000000000002844                 jbe     short loc_2818
.text:0000000000002846                 lea     r8d, [rdx-37h]
.text:000000000000284A                 lea     ecx, [rdx-30h]
.text:000000000000284D                 sub     eax, 41h ; 'A'
.text:0000000000002850                 cmp     al, 5
.text:0000000000002852                 mov     edx, r8d
.text:0000000000002855                 cmova   edx, ecx
.text:0000000000002858                 add     rbx, 1
.text:000000000000285C                 add     r9d, edx
.text:000000000000285F                 cmp     rbx, rdi
.text:0000000000002862                 jnz     short loc_2827
.text:0000000000002864
.text:0000000000002864 loc_2864:                               ; CODE XREF: print_esc+205↑j
.text:0000000000002864                 cmp     r9d, 9Fh
.text:000000000000286B                 ja      short loc_2882
.text:000000000000286D                 cmp     r9d, 24h ; '$'
.text:0000000000002871                 jz      short loc_2882
.text:0000000000002873                 mov     eax, r9d
.text:0000000000002876                 and     eax, 0FFFFFFDFh
.text:0000000000002879                 cmp     eax, 40h ; '@'
.text:000000000000287C                 jnz     loc_2B03
.text:0000000000002882
.text:0000000000002882 loc_2882:                               ; CODE XREF: print_esc+24B↑j
.text:0000000000002882                                         ; print_esc+251↑j
.text:0000000000002882                 lea     eax, [r9-0D800h]
.text:0000000000002889                 cmp     eax, 7FFh
.text:000000000000288E                 jbe     loc_2B03
.text:0000000000002894                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000289B                 xor     edx, edx
.text:000000000000289D                 mov     esi, r9d
.text:00000000000028A0                 call    print_unicode_char
.text:00000000000028A5                 jmp     loc_2698
.text:00000000000028A5 ; ---------------------------------------------------------------------------
.text:00000000000028AA                 align 10h
.text:00000000000028B0
.text:00000000000028B0 loc_28B0:                               ; CODE XREF: print_esc+46↑j
.text:00000000000028B0                 mov     rbx, rsi
.text:00000000000028B3                 jmp     loc_2679
.text:00000000000028B8 ; ---------------------------------------------------------------------------
.text:00000000000028B8
.text:00000000000028B8 loc_28B8:                               ; CODE XREF: print_esc+1B1↑j
.text:00000000000028B8                                         ; DATA XREF: .rodata:jpt_27D1↓o
.text:00000000000028B8                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 00000000000027D1 case 118
.text:00000000000028BF                 mov     rax, [rdi+28h]
.text:00000000000028C3                 cmp     rax, [rdi+30h]
.text:00000000000028C7                 jnb     loc_2AC8
.text:00000000000028CD                 lea     rdx, [rax+1]
.text:00000000000028D1                 mov     [rdi+28h], rdx
.text:00000000000028D5                 mov     byte ptr [rax], 0Bh
.text:00000000000028D8                 jmp     loc_2698
.text:00000000000028DD ; ---------------------------------------------------------------------------
.text:00000000000028DD
.text:00000000000028DD loc_28DD:                               ; CODE XREF: print_esc+1B1↑j
.text:00000000000028DD                                         ; DATA XREF: .rodata:jpt_27D1↓o
.text:00000000000028DD                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 00000000000027D1 case 116
.text:00000000000028E4                 mov     rax, [rdi+28h]
.text:00000000000028E8                 cmp     rax, [rdi+30h]
.text:00000000000028EC                 jnb     loc_2A8C
.text:00000000000028F2                 lea     rdx, [rax+1]
.text:00000000000028F6                 mov     [rdi+28h], rdx
.text:00000000000028FA                 mov     byte ptr [rax], 9
.text:00000000000028FD                 jmp     loc_2698
.text:0000000000002902 ; ---------------------------------------------------------------------------
.text:0000000000002902
.text:0000000000002902 loc_2902:                               ; CODE XREF: print_esc+1B1↑j
.text:0000000000002902                                         ; DATA XREF: .rodata:jpt_27D1↓o
.text:0000000000002902                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 00000000000027D1 case 101
.text:0000000000002909                 mov     rax, [rdi+28h]
.text:000000000000290D                 cmp     rax, [rdi+30h]
.text:0000000000002911                 jnb     loc_2AE6
.text:0000000000002917                 lea     rdx, [rax+1]
.text:000000000000291B                 mov     [rdi+28h], rdx
.text:000000000000291F                 mov     byte ptr [rax], 1Bh
.text:0000000000002922                 jmp     loc_2698
.text:0000000000002927 ; ---------------------------------------------------------------------------
.text:0000000000002927
.text:0000000000002927 loc_2927:                               ; CODE XREF: print_esc+1B1↑j
.text:0000000000002927                                         ; DATA XREF: .rodata:jpt_27D1↓o
.text:0000000000002927                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 00000000000027D1 case 110
.text:000000000000292E                 mov     rax, [rdi+28h]
.text:0000000000002932                 cmp     rax, [rdi+30h]
.text:0000000000002936                 jnb     loc_2AAA
.text:000000000000293C                 lea     rdx, [rax+1]
.text:0000000000002940                 mov     [rdi+28h], rdx
.text:0000000000002944                 mov     byte ptr [rax], 0Ah
.text:0000000000002947                 jmp     loc_2698
.text:000000000000294C ; ---------------------------------------------------------------------------
.text:000000000000294C
.text:000000000000294C loc_294C:                               ; CODE XREF: print_esc+1B1↑j
.text:000000000000294C                                         ; DATA XREF: .rodata:jpt_27D1↓o
.text:000000000000294C                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 00000000000027D1 case 98
.text:0000000000002953                 mov     rax, [rdi+28h]
.text:0000000000002957                 cmp     rax, [rdi+30h]
.text:000000000000295B                 jnb     loc_2AD7
.text:0000000000002961                 lea     rdx, [rax+1]
.text:0000000000002965                 mov     [rdi+28h], rdx
.text:0000000000002969                 mov     byte ptr [rax], 8
.text:000000000000296C                 jmp     loc_2698
.text:0000000000002971 ; ---------------------------------------------------------------------------
.text:0000000000002971
.text:0000000000002971 loc_2971:                               ; CODE XREF: print_esc+1B1↑j
.text:0000000000002971                                         ; DATA XREF: .rodata:jpt_27D1↓o
.text:0000000000002971                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 00000000000027D1 case 114
.text:0000000000002978                 mov     rax, [rdi+28h]
.text:000000000000297C                 cmp     rax, [rdi+30h]
.text:0000000000002980                 jnb     loc_2A9B
.text:0000000000002986                 lea     rdx, [rax+1]
.text:000000000000298A                 mov     [rdi+28h], rdx
.text:000000000000298E                 mov     byte ptr [rax], 0Dh
.text:0000000000002991                 jmp     loc_2698
.text:0000000000002996 ; ---------------------------------------------------------------------------
.text:0000000000002996
.text:0000000000002996 loc_2996:                               ; CODE XREF: print_esc+1B1↑j
.text:0000000000002996                                         ; DATA XREF: .rodata:jpt_27D1↓o
.text:0000000000002996                 xor     edi, edi        ; jumptable 00000000000027D1 case 99
.text:0000000000002998                 call    _exit
.text:000000000000299D ; ---------------------------------------------------------------------------
.text:000000000000299D
.text:000000000000299D loc_299D:                               ; CODE XREF: print_esc+1B1↑j
.text:000000000000299D                                         ; DATA XREF: .rodata:jpt_27D1↓o
.text:000000000000299D                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 00000000000027D1 case 102
.text:00000000000029A4                 mov     rax, [rdi+28h]
.text:00000000000029A8                 cmp     rax, [rdi+30h]
.text:00000000000029AC                 jnb     loc_2AB9
.text:00000000000029B2                 lea     rdx, [rax+1]
.text:00000000000029B6                 mov     [rdi+28h], rdx
.text:00000000000029BA                 mov     byte ptr [rax], 0Ch
.text:00000000000029BD                 jmp     loc_2698
.text:00000000000029C2 ; ---------------------------------------------------------------------------
.text:00000000000029C2
.text:00000000000029C2 loc_29C2:                               ; CODE XREF: print_esc+1B1↑j
.text:00000000000029C2                                         ; DATA XREF: .rodata:jpt_27D1↓o
.text:00000000000029C2                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 00000000000027D1 case 97
.text:00000000000029C9                 mov     rax, [rdi+28h]
.text:00000000000029CD                 cmp     rax, [rdi+30h]
.text:00000000000029D1                 jnb     loc_2A59
.text:00000000000029D7                 lea     rdx, [rax+1]
.text:00000000000029DB                 mov     [rdi+28h], rdx
.text:00000000000029DF                 mov     byte ptr [rax], 7
.text:00000000000029E2                 jmp     loc_2698
.text:00000000000029E7 ; ---------------------------------------------------------------------------
.text:00000000000029E7
.text:00000000000029E7 def_27D1:                               ; CODE XREF: print_esc+19A↑j
.text:00000000000029E7                                         ; print_esc+1B1↑j
.text:00000000000029E7                                         ; DATA XREF: ...
.text:00000000000029E7                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; jumptable 00000000000027D1 default case, cases 100,103-109,111-113,115,117
.text:00000000000029EE                 mov     rax, [rdi+28h]
.text:00000000000029F2                 cmp     rax, [rdi+30h]
.text:00000000000029F6                 jnb     loc_2AF5
.text:00000000000029FC                 lea     rdx, [rax+1]
.text:0000000000002A00                 mov     [rdi+28h], rdx
.text:0000000000002A04                 mov     [rax], r13b
.text:0000000000002A07                 jmp     loc_2698
.text:0000000000002A07 ; ---------------------------------------------------------------------------
.text:0000000000002A0C                 align 10h
.text:0000000000002A10
.text:0000000000002A10 loc_2A10:                               ; CODE XREF: print_esc+117↑j
.text:0000000000002A10                 cmp     r10d, edi
.text:0000000000002A13                 jz      short loc_2A68
.text:0000000000002A15                 mov     rbx, rdi
.text:0000000000002A18                 jmp     loc_2756
.text:0000000000002A18 ; ---------------------------------------------------------------------------
.text:0000000000002A1D                 align 20h
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: print_esc+145↑j
.text:0000000000002A20                 movzx   esi, sil        ; int
.text:0000000000002A24                 call    ___overflow
.text:0000000000002A29                 jmp     loc_2698
.text:0000000000002A29 ; ---------------------------------------------------------------------------
.text:0000000000002A2E                 align 10h
.text:0000000000002A30
.text:0000000000002A30 loc_2A30:                               ; CODE XREF: print_esc+68↑j
.text:0000000000002A30                 movzx   esi, dl         ; int
.text:0000000000002A33                 call    ___overflow
.text:0000000000002A38                 jmp     loc_2698
.text:0000000000002A3D ; ---------------------------------------------------------------------------
.text:0000000000002A3D
.text:0000000000002A3D loc_2A3D:                               ; CODE XREF: print_esc+A8↑j
.text:0000000000002A3D                 mov     esi, 5Ch ; '\'  ; int
.text:0000000000002A42                 call    ___overflow
.text:0000000000002A47                 jmp     loc_26D9
.text:0000000000002A4C ; ---------------------------------------------------------------------------
.text:0000000000002A4C
.text:0000000000002A4C loc_2A4C:                               ; CODE XREF: print_esc+D2↑j
.text:0000000000002A4C                 movzx   esi, al         ; int
.text:0000000000002A4F                 call    ___overflow
.text:0000000000002A54                 jmp     loc_2702
.text:0000000000002A59 ; ---------------------------------------------------------------------------
.text:0000000000002A59
.text:0000000000002A59 loc_2A59:                               ; CODE XREF: print_esc+3B1↑j
.text:0000000000002A59                 mov     esi, 7          ; int
.text:0000000000002A5E                 call    ___overflow
.text:0000000000002A63                 jmp     loc_2698
.text:0000000000002A68 ; ---------------------------------------------------------------------------
.text:0000000000002A68
.text:0000000000002A68 loc_2A68:                               ; CODE XREF: print_esc+214↑j
.text:0000000000002A68                                         ; print_esc+3F3↑j
.text:0000000000002A68                 lea     rsi, aMissingHexadec ; "missing hexadecimal number in escape"
.text:0000000000002A6F                 mov     edx, 5          ; category
.text:0000000000002A74                 xor     edi, edi        ; domainname
.text:0000000000002A76                 call    _dcgettext
.text:0000000000002A7B                 xor     esi, esi        ; errnum
.text:0000000000002A7D                 mov     rdx, rax        ; format
.text:0000000000002A80                 mov     edi, (offset dword_0+1) ; _IO_FILE *
.text:0000000000002A85                 xor     eax, eax
.text:0000000000002A87                 call    _error
.text:0000000000002A8C
.text:0000000000002A8C loc_2A8C:                               ; CODE XREF: print_esc+2CC↑j
.text:0000000000002A8C                 mov     esi, 9          ; int
.text:0000000000002A91                 call    ___overflow
.text:0000000000002A96                 jmp     loc_2698
.text:0000000000002A9B ; ---------------------------------------------------------------------------
.text:0000000000002A9B
.text:0000000000002A9B loc_2A9B:                               ; CODE XREF: print_esc+360↑j
.text:0000000000002A9B                 mov     esi, 0Dh        ; int
.text:0000000000002AA0                 call    ___overflow
.text:0000000000002AA5                 jmp     loc_2698
.text:0000000000002AAA ; ---------------------------------------------------------------------------
.text:0000000000002AAA
.text:0000000000002AAA loc_2AAA:                               ; CODE XREF: print_esc+316↑j
.text:0000000000002AAA                 mov     esi, 0Ah        ; int
.text:0000000000002AAF                 call    ___overflow
.text:0000000000002AB4                 jmp     loc_2698
.text:0000000000002AB9 ; ---------------------------------------------------------------------------
.text:0000000000002AB9
.text:0000000000002AB9 loc_2AB9:                               ; CODE XREF: print_esc+38C↑j
.text:0000000000002AB9                 mov     esi, 0Ch        ; int
.text:0000000000002ABE                 call    ___overflow
.text:0000000000002AC3                 jmp     loc_2698
.text:0000000000002AC8 ; ---------------------------------------------------------------------------
.text:0000000000002AC8
.text:0000000000002AC8 loc_2AC8:                               ; CODE XREF: print_esc+2A7↑j
.text:0000000000002AC8                 mov     esi, 0Bh        ; int
.text:0000000000002ACD                 call    ___overflow
.text:0000000000002AD2                 jmp     loc_2698
.text:0000000000002AD7 ; ---------------------------------------------------------------------------
.text:0000000000002AD7
.text:0000000000002AD7 loc_2AD7:                               ; CODE XREF: print_esc+33B↑j
.text:0000000000002AD7                 mov     esi, 8          ; int
.text:0000000000002ADC                 call    ___overflow
.text:0000000000002AE1                 jmp     loc_2698
.text:0000000000002AE6 ; ---------------------------------------------------------------------------
.text:0000000000002AE6
.text:0000000000002AE6 loc_2AE6:                               ; CODE XREF: print_esc+2F1↑j
.text:0000000000002AE6                 mov     esi, 1Bh        ; int
.text:0000000000002AEB                 call    ___overflow
.text:0000000000002AF0                 jmp     loc_2698
.text:0000000000002AF5 ; ---------------------------------------------------------------------------
.text:0000000000002AF5
.text:0000000000002AF5 loc_2AF5:                               ; CODE XREF: print_esc+3D6↑j
.text:0000000000002AF5                 movzx   esi, r13b       ; int
.text:0000000000002AF9                 call    ___overflow
.text:0000000000002AFE                 jmp     loc_2698
.text:0000000000002B03 ; ---------------------------------------------------------------------------
.text:0000000000002B03
.text:0000000000002B03 loc_2B03:                               ; CODE XREF: print_esc+25C↑j
.text:0000000000002B03                                         ; print_esc+26E↑j
.text:0000000000002B03                 lea     rsi, aInvalidUnivers ; "invalid universal character name \\%c%0"...
.text:0000000000002B0A                 mov     edx, 5          ; category
.text:0000000000002B0F                 xor     edi, edi        ; domainname
.text:0000000000002B11                 mov     [rsp+38h+var_2C], r9d
.text:0000000000002B16                 call    _dcgettext
.text:0000000000002B1B                 mov     r9d, [rsp+38h+var_2C]
.text:0000000000002B20                 mov     rdx, rax        ; format
.text:0000000000002B23                 mov     r8d, r13d
.text:0000000000002B26                 mov     ecx, ebp
.text:0000000000002B28                 xor     esi, esi        ; errnum
.text:0000000000002B2A                 mov     edi, 1          ; status
.text:0000000000002B2F                 xor     eax, eax
.text:0000000000002B31                 call    _error
.text:0000000000002B31 ; } // starts at 2620
.text:0000000000002B36                 db      2Eh
.text:0000000000002B36                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002B36 print_esc       endp ; sp-analysis failed
.text:0000000000002B36
.text:0000000000002B40
.text:0000000000002B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B40
.text:0000000000002B40
.text:0000000000002B40 verify_numeric  proc near               ; CODE XREF: main+AF4↑p
.text:0000000000002B40                                         ; main+B4E↑p ...
.text:0000000000002B40 ; __unwind {
.text:0000000000002B40                 push    r12
.text:0000000000002B42                 push    rbp
.text:0000000000002B43                 mov     r12, rdi
.text:0000000000002B46                 push    rbx
.text:0000000000002B47                 mov     rbp, rsi
.text:0000000000002B4A                 call    ___errno_location
.text:0000000000002B4F                 mov     edx, [rax]
.text:0000000000002B51                 test    edx, edx
.text:0000000000002B53                 jnz     short loc_2BA0
.text:0000000000002B55                 cmp     byte ptr [rbp+0], 0
.text:0000000000002B59                 jz      short loc_2B99
.text:0000000000002B5B                 cmp     rbp, r12
.text:0000000000002B5E                 jz      short loc_2BD0
.text:0000000000002B60                 mov     rdi, r12
.text:0000000000002B63                 call    quote
.text:0000000000002B68                 lea     rsi, aSValueNotCompl ; "%s: value not completely converted"
.text:0000000000002B6F                 mov     rbx, rax
.text:0000000000002B72                 mov     edx, 5          ; category
.text:0000000000002B77
.text:0000000000002B77 loc_2B77:                               ; CODE XREF: verify_numeric+A7↓j
.text:0000000000002B77                 xor     edi, edi        ; domainname
.text:0000000000002B79                 call    _dcgettext
.text:0000000000002B7E                 mov     rcx, rbx
.text:0000000000002B81                 mov     rdx, rax        ; format
.text:0000000000002B84                 xor     esi, esi        ; errnum
.text:0000000000002B86                 xor     edi, edi        ; status
.text:0000000000002B88                 xor     eax, eax
.text:0000000000002B8A                 call    _error
.text:0000000000002B8F                 mov     cs:exit_status, 1
.text:0000000000002B99
.text:0000000000002B99 loc_2B99:                               ; CODE XREF: verify_numeric+19↑j
.text:0000000000002B99                 pop     rbx
.text:0000000000002B9A                 pop     rbp
.text:0000000000002B9B                 pop     r12
.text:0000000000002B9D                 retn
.text:0000000000002B9D ; ---------------------------------------------------------------------------
.text:0000000000002B9E                 align 20h
.text:0000000000002BA0
.text:0000000000002BA0 loc_2BA0:                               ; CODE XREF: verify_numeric+13↑j
.text:0000000000002BA0                 mov     rbx, rax
.text:0000000000002BA3                 mov     rdi, r12
.text:0000000000002BA6                 call    quote
.text:0000000000002BAB                 mov     esi, [rbx]      ; errnum
.text:0000000000002BAD                 lea     rdx, aInvalidFieldWi+15h ; format
.text:0000000000002BB4                 mov     rcx, rax
.text:0000000000002BB7                 xor     edi, edi        ; status
.text:0000000000002BB9                 xor     eax, eax
.text:0000000000002BBB                 call    _error
.text:0000000000002BC0                 pop     rbx
.text:0000000000002BC1                 mov     cs:exit_status, 1
.text:0000000000002BCB                 pop     rbp
.text:0000000000002BCC                 pop     r12
.text:0000000000002BCE                 retn
.text:0000000000002BCE ; ---------------------------------------------------------------------------
.text:0000000000002BCF                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: verify_numeric+1E↑j
.text:0000000000002BD0                 mov     rdi, rbp
.text:0000000000002BD3                 call    quote
.text:0000000000002BD8                 mov     edx, 5
.text:0000000000002BDD                 mov     rbx, rax
.text:0000000000002BE0                 lea     rsi, aSExpectedANume ; "%s: expected a numeric value"
.text:0000000000002BE7                 jmp     short loc_2B77
.text:0000000000002BE7 ; } // starts at 2B40
.text:0000000000002BE7 verify_numeric  endp
.text:0000000000002BE7
.text:0000000000002BE7 ; ---------------------------------------------------------------------------
.text:0000000000002BE9                 align 10h
.text:0000000000002BF0
.text:0000000000002BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BF0
.text:0000000000002BF0
.text:0000000000002BF0 ; __int64 __fastcall vstrtoimax(char *nptr)
.text:0000000000002BF0 vstrtoimax      proc near               ; CODE XREF: main+82F↑p
.text:0000000000002BF0                                         ; main+A29↑p ...
.text:0000000000002BF0
.text:0000000000002BF0 var_28          = qword ptr -28h
.text:0000000000002BF0 var_20          = qword ptr -20h
.text:0000000000002BF0
.text:0000000000002BF0 ; __unwind {
.text:0000000000002BF0                 push    rbp
.text:0000000000002BF1                 push    rbx
.text:0000000000002BF2                 mov     rbx, rdi
.text:0000000000002BF5                 sub     rsp, 18h
.text:0000000000002BF9                 mov     rax, fs:28h
.text:0000000000002C02                 mov     [rsp+28h+var_20], rax
.text:0000000000002C07                 xor     eax, eax
.text:0000000000002C09                 movzx   eax, byte ptr [rdi]
.text:0000000000002C0C                 cmp     al, 22h ; '"'
.text:0000000000002C0E                 jz      short loc_2C14
.text:0000000000002C10                 cmp     al, 27h ; '''
.text:0000000000002C12                 jnz     short loc_2C1D
.text:0000000000002C14
.text:0000000000002C14 loc_2C14:                               ; CODE XREF: vstrtoimax+1E↑j
.text:0000000000002C14                 movzx   ebp, byte ptr [rbx+1]
.text:0000000000002C18                 test    bpl, bpl
.text:0000000000002C1B                 jnz     short loc_2C60
.text:0000000000002C1D
.text:0000000000002C1D loc_2C1D:                               ; CODE XREF: vstrtoimax+22↑j
.text:0000000000002C1D                 call    ___errno_location
.text:0000000000002C22                 mov     rsi, rsp        ; endptr
.text:0000000000002C25                 mov     rdi, rbx        ; nptr
.text:0000000000002C28                 mov     dword ptr [rax], 0
.text:0000000000002C2E                 xor     ecx, ecx        ; group
.text:0000000000002C30                 xor     edx, edx        ; base
.text:0000000000002C32                 call    ___strtol_internal
.text:0000000000002C37                 mov     rsi, [rsp+28h+var_28]
.text:0000000000002C3B                 mov     rdi, rbx
.text:0000000000002C3E                 mov     rbp, rax
.text:0000000000002C41                 call    verify_numeric
.text:0000000000002C46
.text:0000000000002C46 loc_2C46:                               ; CODE XREF: vstrtoimax+74↓j
.text:0000000000002C46                                         ; vstrtoimax+7D↓j ...
.text:0000000000002C46                 mov     rdx, [rsp+28h+var_20]
.text:0000000000002C4B                 xor     rdx, fs:28h
.text:0000000000002C54                 mov     rax, rbp
.text:0000000000002C57                 jnz     short loc_2C96
.text:0000000000002C59                 add     rsp, 18h
.text:0000000000002C5D                 pop     rbx
.text:0000000000002C5E                 pop     rbp
.text:0000000000002C5F                 retn
.text:0000000000002C60 ; ---------------------------------------------------------------------------
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: vstrtoimax+2B↑j
.text:0000000000002C60                 cmp     byte ptr [rbx+2], 0
.text:0000000000002C64                 jz      short loc_2C46
.text:0000000000002C66                 cmp     cs:posixly_correct, 0
.text:0000000000002C6D                 jnz     short loc_2C46
.text:0000000000002C6F                 lea     rsi, aWarningSCharac ; "warning: %s: character(s) following cha"...
.text:0000000000002C76                 xor     edi, edi        ; domainname
.text:0000000000002C78                 mov     edx, 5          ; category
.text:0000000000002C7D                 call    _dcgettext
.text:0000000000002C82                 lea     rcx, [rbx+2]
.text:0000000000002C86                 mov     rdx, rax        ; format
.text:0000000000002C89                 xor     esi, esi        ; errnum
.text:0000000000002C8B                 xor     edi, edi        ; status
.text:0000000000002C8D                 xor     eax, eax
.text:0000000000002C8F                 call    _error
.text:0000000000002C94                 jmp     short loc_2C46
.text:0000000000002C96 ; ---------------------------------------------------------------------------
.text:0000000000002C96
.text:0000000000002C96 loc_2C96:                               ; CODE XREF: vstrtoimax+67↑j
.text:0000000000002C96                 call    ___stack_chk_fail
.text:0000000000002C96 ; } // starts at 2BF0
.text:0000000000002C96 vstrtoimax      endp
.text:0000000000002C96
.text:0000000000002C96 ; ---------------------------------------------------------------------------
.text:0000000000002C9B                 align 20h
.text:0000000000002CA0
.text:0000000000002CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CA0
.text:0000000000002CA0 ; Attributes: noreturn
.text:0000000000002CA0
.text:0000000000002CA0 ; void __fastcall __noreturn usage(int status)
.text:0000000000002CA0                 public usage
.text:0000000000002CA0 usage           proc near               ; CODE XREF: main+763↑p
.text:0000000000002CA0                                         ; main+D9C↑p
.text:0000000000002CA0
.text:0000000000002CA0 var_A8          = qword ptr -0A8h
.text:0000000000002CA0 var_A0          = qword ptr -0A0h
.text:0000000000002CA0 var_98          = qword ptr -98h
.text:0000000000002CA0 var_90          = qword ptr -90h
.text:0000000000002CA0 var_88          = qword ptr -88h
.text:0000000000002CA0 var_80          = qword ptr -80h
.text:0000000000002CA0 var_78          = qword ptr -78h
.text:0000000000002CA0 var_70          = qword ptr -70h
.text:0000000000002CA0 var_68          = qword ptr -68h
.text:0000000000002CA0 var_60          = qword ptr -60h
.text:0000000000002CA0 var_58          = qword ptr -58h
.text:0000000000002CA0 var_50          = qword ptr -50h
.text:0000000000002CA0 var_48          = qword ptr -48h
.text:0000000000002CA0 var_40          = qword ptr -40h
.text:0000000000002CA0 var_30          = qword ptr -30h
.text:0000000000002CA0
.text:0000000000002CA0 ; __unwind {
.text:0000000000002CA0                 push    r13
.text:0000000000002CA2                 push    r12
.text:0000000000002CA4                 mov     edx, 5          ; category
.text:0000000000002CA9                 push    rbp
.text:0000000000002CAA                 push    rbx
.text:0000000000002CAB                 mov     ebp, edi
.text:0000000000002CAD                 sub     rsp, 88h
.text:0000000000002CB4                 mov     rbx, cs:program_name
.text:0000000000002CBB                 mov     rax, fs:28h
.text:0000000000002CC4                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002CC9                 xor     eax, eax
.text:0000000000002CCB                 test    edi, edi
.text:0000000000002CCD                 jz      short loc_2CFD
.text:0000000000002CCF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002CD6                 xor     edi, edi        ; domainname
.text:0000000000002CD8                 call    _dcgettext
.text:0000000000002CDD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002CE4                 mov     rdx, rax
.text:0000000000002CE7                 mov     rcx, rbx
.text:0000000000002CEA                 mov     esi, 1
.text:0000000000002CEF                 xor     eax, eax
.text:0000000000002CF1                 call    ___fprintf_chk
.text:0000000000002CF6
.text:0000000000002CF6 loc_2CF6:                               ; CODE XREF: usage+33E↓j
.text:0000000000002CF6                 mov     edi, ebp        ; status
.text:0000000000002CF8                 call    _exit
.text:0000000000002CFD ; ---------------------------------------------------------------------------
.text:0000000000002CFD
.text:0000000000002CFD loc_2CFD:                               ; CODE XREF: usage+2D↑j
.text:0000000000002CFD                 lea     rsi, aUsageSFormatAr ; "Usage: %s FORMAT [ARGUMENT]...\n  or:  "...
.text:0000000000002D04                 xor     edi, edi        ; domainname
.text:0000000000002D06                 call    _dcgettext
.text:0000000000002D0B                 mov     rcx, rbx
.text:0000000000002D0E                 mov     rdx, rbx
.text:0000000000002D11                 mov     rsi, rax
.text:0000000000002D14                 mov     edi, 1
.text:0000000000002D19                 xor     eax, eax
.text:0000000000002D1B                 call    ___printf_chk
.text:0000000000002D20                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002D27                 lea     rsi, aPrintArgumentS ; "Print ARGUMENT(s) according to FORMAT, "...
.text:0000000000002D2E                 mov     edx, 5          ; category
.text:0000000000002D33                 xor     edi, edi        ; domainname
.text:0000000000002D35                 call    _dcgettext
.text:0000000000002D3A                 mov     rsi, rbx        ; stream
.text:0000000000002D3D                 mov     rdi, rax        ; s
.text:0000000000002D40                 call    _fputs_unlocked
.text:0000000000002D45                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002D4C                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002D53                 mov     edx, 5          ; category
.text:0000000000002D58                 xor     edi, edi        ; domainname
.text:0000000000002D5A                 call    _dcgettext
.text:0000000000002D5F                 mov     rsi, rbx        ; stream
.text:0000000000002D62                 mov     rdi, rax        ; s
.text:0000000000002D65                 call    _fputs_unlocked
.text:0000000000002D6A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002D71                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002D78                 mov     edx, 5          ; category
.text:0000000000002D7D                 xor     edi, edi        ; domainname
.text:0000000000002D7F                 call    _dcgettext
.text:0000000000002D84                 mov     rsi, rbx        ; stream
.text:0000000000002D87                 mov     rdi, rax        ; s
.text:0000000000002D8A                 call    _fputs_unlocked
.text:0000000000002D8F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002D96                 lea     rsi, aFormatControls ; "\nFORMAT controls the output as in C pr"...
.text:0000000000002D9D                 mov     edx, 5          ; category
.text:0000000000002DA2                 xor     edi, edi        ; domainname
.text:0000000000002DA4                 call    _dcgettext
.text:0000000000002DA9                 mov     rsi, rbx        ; stream
.text:0000000000002DAC                 mov     rdi, rax        ; s
.text:0000000000002DAF                 call    _fputs_unlocked
.text:0000000000002DB4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002DBB                 lea     rsi, aBackslashAAler ; "  \\\\      backslash\n  \\a      alert"...
.text:0000000000002DC2                 mov     edx, 5          ; category
.text:0000000000002DC7                 xor     edi, edi        ; domainname
.text:0000000000002DC9                 call    _dcgettext
.text:0000000000002DCE                 mov     rsi, rbx        ; stream
.text:0000000000002DD1                 mov     rdi, rax        ; s
.text:0000000000002DD4                 call    _fputs_unlocked
.text:0000000000002DD9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002DE0                 lea     rsi, aNnnByteWithOct ; "  \\NNN    byte with octal value NNN (1"...
.text:0000000000002DE7                 mov     edx, 5          ; category
.text:0000000000002DEC                 xor     edi, edi        ; domainname
.text:0000000000002DEE                 call    _dcgettext
.text:0000000000002DF3                 mov     rsi, rbx        ; stream
.text:0000000000002DF6                 mov     rdi, rax        ; s
.text:0000000000002DF9                 call    _fputs_unlocked
.text:0000000000002DFE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E05                 lea     rsi, aASingleBArgume ; "  %%      a single %\n  %b      ARGUMEN"...
.text:0000000000002E0C                 mov     edx, 5          ; category
.text:0000000000002E11                 xor     edi, edi        ; domainname
.text:0000000000002E13                 call    _dcgettext
.text:0000000000002E18                 mov     rsi, rbx        ; stream
.text:0000000000002E1B                 mov     rdi, rax        ; s
.text:0000000000002E1E                 lea     rbx, aPrintf    ; "printf"
.text:0000000000002E25                 call    _fputs_unlocked
.text:0000000000002E2A                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:0000000000002E31                 mov     edx, 5          ; category
.text:0000000000002E36                 xor     edi, edi        ; domainname
.text:0000000000002E38                 call    _dcgettext
.text:0000000000002E3D                 lea     rdx, aPrintf    ; "printf"
.text:0000000000002E44                 mov     rsi, rax
.text:0000000000002E47                 mov     edi, 1
.text:0000000000002E4C                 xor     eax, eax
.text:0000000000002E4E                 call    ___printf_chk
.text:0000000000002E53                 lea     rax, asc_8BB5   ; "["
.text:0000000000002E5A                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002E61                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002E6A                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002E73                 mov     rdx, rsp
.text:0000000000002E76                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002E7A                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002E81                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002E86                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002E8D                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002E92                 lea     rax, domainname ; "coreutils"
.text:0000000000002E99                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002E9E                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002EA5                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002EAA                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002EB1                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002EB6                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002EBB                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002EC2                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002EC7                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002ECE                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002ED3                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002ED8                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002EDD                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002EE2                 nop     word ptr [rax+rax+00h]
.text:0000000000002EE8
.text:0000000000002EE8 loc_2EE8:                               ; CODE XREF: usage+265↓j
.text:0000000000002EE8                 add     rdx, 10h
.text:0000000000002EEC                 mov     rdi, [rdx]
.text:0000000000002EEF                 test    rdi, rdi
.text:0000000000002EF2                 jz      short loc_2F07
.text:0000000000002EF4                 mov     ecx, 7
.text:0000000000002EF9                 mov     rsi, rbx
.text:0000000000002EFC                 repe cmpsb
.text:0000000000002EFE                 setnbe  al
.text:0000000000002F01                 sbb     al, 0
.text:0000000000002F03                 test    al, al
.text:0000000000002F05                 jnz     short loc_2EE8
.text:0000000000002F07
.text:0000000000002F07 loc_2F07:                               ; CODE XREF: usage+252↑j
.text:0000000000002F07                 mov     r12, [rdx+8]
.text:0000000000002F0B                 xor     edi, edi        ; domainname
.text:0000000000002F0D                 mov     edx, 5          ; category
.text:0000000000002F12                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002F19                 test    r12, r12
.text:0000000000002F1C                 jz      loc_2FE3
.text:0000000000002F22                 call    _dcgettext
.text:0000000000002F27                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002F2E                 lea     rdx, unk_8C2B
.text:0000000000002F35                 mov     rsi, rax
.text:0000000000002F38                 mov     edi, 1
.text:0000000000002F3D                 xor     eax, eax
.text:0000000000002F3F                 call    ___printf_chk
.text:0000000000002F44                 xor     esi, esi        ; locale
.text:0000000000002F46                 mov     edi, 5          ; category
.text:0000000000002F4B                 call    _setlocale
.text:0000000000002F50                 test    rax, rax
.text:0000000000002F53                 jz      short loc_2F71
.text:0000000000002F55                 lea     rsi, aEn        ; "en_"
.text:0000000000002F5C                 mov     edx, 3          ; n
.text:0000000000002F61                 mov     rdi, rax        ; s1
.text:0000000000002F64                 call    _strncmp
.text:0000000000002F69                 test    eax, eax
.text:0000000000002F6B                 jnz     loc_3078
.text:0000000000002F71
.text:0000000000002F71 loc_2F71:                               ; CODE XREF: usage+2B3↑j
.text:0000000000002F71                                         ; usage+3FD↓j
.text:0000000000002F71                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002F78                 xor     edi, edi        ; domainname
.text:0000000000002F7A                 mov     edx, 5          ; category
.text:0000000000002F7F                 call    _dcgettext
.text:0000000000002F84                 lea     rcx, aPrintf    ; "printf"
.text:0000000000002F8B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002F92                 mov     rsi, rax
.text:0000000000002F95                 mov     edi, 1
.text:0000000000002F9A                 xor     eax, eax
.text:0000000000002F9C                 call    ___printf_chk
.text:0000000000002FA1                 cmp     r12, rbx
.text:0000000000002FA4                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002FAB                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002FB2                 cmovz   rbx, rcx
.text:0000000000002FB6
.text:0000000000002FB6 loc_2FB6:                               ; CODE XREF: usage+3CC↓j
.text:0000000000002FB6                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002FBD                 xor     edi, edi        ; domainname
.text:0000000000002FBF                 mov     edx, 5          ; category
.text:0000000000002FC4                 call    _dcgettext
.text:0000000000002FC9                 mov     rcx, rbx
.text:0000000000002FCC                 mov     rsi, rax
.text:0000000000002FCF                 mov     rdx, r12
.text:0000000000002FD2                 mov     edi, 1
.text:0000000000002FD7                 xor     eax, eax
.text:0000000000002FD9                 call    ___printf_chk
.text:0000000000002FDE                 jmp     loc_2CF6
.text:0000000000002FE3 ; ---------------------------------------------------------------------------
.text:0000000000002FE3
.text:0000000000002FE3 loc_2FE3:                               ; CODE XREF: usage+27C↑j
.text:0000000000002FE3                 call    _dcgettext
.text:0000000000002FE8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002FEF                 lea     rdx, unk_8C2B
.text:0000000000002FF6                 mov     rsi, rax
.text:0000000000002FF9                 mov     edi, 1
.text:0000000000002FFE                 xor     eax, eax
.text:0000000000003000                 call    ___printf_chk
.text:0000000000003005                 xor     esi, esi        ; locale
.text:0000000000003007                 mov     edi, 5          ; category
.text:000000000000300C                 call    _setlocale
.text:0000000000003011                 test    rax, rax
.text:0000000000003014                 jz      short loc_302E
.text:0000000000003016                 lea     rsi, aEn        ; "en_"
.text:000000000000301D                 mov     edx, 3          ; n
.text:0000000000003022                 mov     rdi, rax        ; s1
.text:0000000000003025                 call    _strncmp
.text:000000000000302A                 test    eax, eax
.text:000000000000302C                 jnz     short loc_3071
.text:000000000000302E
.text:000000000000302E loc_302E:                               ; CODE XREF: usage+374↑j
.text:000000000000302E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003035                 mov     edx, 5          ; category
.text:000000000000303A                 xor     edi, edi        ; domainname
.text:000000000000303C                 lea     r12, aPrintf    ; "printf"
.text:0000000000003043                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000304A                 call    _dcgettext
.text:000000000000304F                 lea     rcx, aPrintf    ; "printf"
.text:0000000000003056                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000305D                 mov     rsi, rax
.text:0000000000003060                 mov     edi, 1
.text:0000000000003065                 xor     eax, eax
.text:0000000000003067                 call    ___printf_chk
.text:000000000000306C                 jmp     loc_2FB6
.text:0000000000003071 ; ---------------------------------------------------------------------------
.text:0000000000003071
.text:0000000000003071 loc_3071:                               ; CODE XREF: usage+38C↑j
.text:0000000000003071                 lea     r12, aPrintf    ; "printf"
.text:0000000000003078
.text:0000000000003078 loc_3078:                               ; CODE XREF: usage+2CB↑j
.text:0000000000003078                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000307F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000003086                 xor     edi, edi        ; domainname
.text:0000000000003088                 mov     edx, 5          ; category
.text:000000000000308D                 call    _dcgettext
.text:0000000000003092                 mov     rsi, r13        ; stream
.text:0000000000003095                 mov     rdi, rax        ; s
.text:0000000000003098                 call    _fputs_unlocked
.text:000000000000309D                 jmp     loc_2F71
.text:000000000000309D ; } // starts at 2CA0
.text:000000000000309D usage           endp
.text:000000000000309D
.text:000000000000309D ; ---------------------------------------------------------------------------
.text:00000000000030A2                 align 10h
.text:00000000000030B0
.text:00000000000030B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030B0
.text:00000000000030B0
.text:00000000000030B0 ; __int64 __fastcall cl_strtold(char *nptr)
.text:00000000000030B0                 public cl_strtold
.text:00000000000030B0 cl_strtold      proc near               ; CODE XREF: main+B3D↑p
.text:00000000000030B0
.text:00000000000030B0 var_58          = tbyte ptr -58h
.text:00000000000030B0 endptr          = qword ptr -40h
.text:00000000000030B0 var_38          = qword ptr -38h
.text:00000000000030B0 var_30          = qword ptr -30h
.text:00000000000030B0
.text:00000000000030B0 ; __unwind {
.text:00000000000030B0                 push    r13
.text:00000000000030B2                 push    r12
.text:00000000000030B4                 push    rbp
.text:00000000000030B5                 push    rbx
.text:00000000000030B6                 mov     rbx, rsi
.text:00000000000030B9                 mov     rbp, rdi
.text:00000000000030BC                 sub     rsp, 38h
.text:00000000000030C0                 lea     rsi, [rsp+58h+endptr] ; endptr
.text:00000000000030C5                 mov     rax, fs:28h
.text:00000000000030CE                 mov     [rsp+58h+var_30], rax
.text:00000000000030D3                 xor     eax, eax
.text:00000000000030D5                 call    _strtold
.text:00000000000030DA                 mov     rax, [rsp+58h+endptr]
.text:00000000000030DF                 fld     st
.text:00000000000030E1                 cmp     byte ptr [rax], 0
.text:00000000000030E4                 jnz     short loc_3110
.text:00000000000030E6                 fstp    st(1)
.text:00000000000030E8
.text:00000000000030E8 loc_30E8:                               ; CODE XREF: cl_strtold+93↓j
.text:00000000000030E8                                         ; cl_strtold+9E↓j
.text:00000000000030E8                 test    rbx, rbx
.text:00000000000030EB                 jz      short loc_30F5
.text:00000000000030ED                 mov     rax, [rsp+58h+endptr]
.text:00000000000030F2                 mov     [rbx], rax
.text:00000000000030F5
.text:00000000000030F5 loc_30F5:                               ; CODE XREF: cl_strtold+3B↑j
.text:00000000000030F5                 mov     rax, [rsp+58h+var_30]
.text:00000000000030FA                 xor     rax, fs:28h
.text:0000000000003103                 jnz     short loc_3150
.text:0000000000003105                 add     rsp, 38h
.text:0000000000003109                 pop     rbx
.text:000000000000310A                 pop     rbp
.text:000000000000310B                 pop     r12
.text:000000000000310D                 pop     r13
.text:000000000000310F                 retn
.text:0000000000003110 ; ---------------------------------------------------------------------------
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: cl_strtold+34↑j
.text:0000000000003110                 fstp    st
.text:0000000000003112                 fstp    [rsp+58h+var_58]
.text:0000000000003115                 call    ___errno_location
.text:000000000000311A                 lea     rsi, [rsp+58h+var_38] ; endptr
.text:000000000000311F                 mov     rdi, rbp        ; nptr
.text:0000000000003122                 mov     r12, rax
.text:0000000000003125                 mov     r13d, [rax]
.text:0000000000003128                 call    c_strtold
.text:000000000000312D                 mov     rax, [rsp+58h+var_38]
.text:0000000000003132                 cmp     [rsp+58h+endptr], rax
.text:0000000000003137                 fld     [rsp+58h+var_58]
.text:000000000000313A                 jnb     short loc_3148
.text:000000000000313C                 fstp    st
.text:000000000000313E                 mov     [rsp+58h+endptr], rax
.text:0000000000003143                 jmp     short loc_30E8
.text:0000000000003143 ; ---------------------------------------------------------------------------
.text:0000000000003145                 align 8
.text:0000000000003148
.text:0000000000003148 loc_3148:                               ; CODE XREF: cl_strtold+8A↑j
.text:0000000000003148                 fstp    st(1)
.text:000000000000314A                 mov     [r12], r13d
.text:000000000000314E                 jmp     short loc_30E8
.text:0000000000003150 ; ---------------------------------------------------------------------------
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: cl_strtold+53↑j
.text:0000000000003150                 fstp    st
.text:0000000000003152                 call    ___stack_chk_fail
.text:0000000000003152 ; } // starts at 30B0
.text:0000000000003152 cl_strtold      endp
.text:0000000000003152
.text:0000000000003152 ; ---------------------------------------------------------------------------
.text:0000000000003157                 align 20h
.text:0000000000003160
.text:0000000000003160 ; =============== S U B R O U T I N E =======================================
.text:0000000000003160
.text:0000000000003160
.text:0000000000003160                 public close_stdout_set_file_name
.text:0000000000003160 close_stdout_set_file_name proc near
.text:0000000000003160 ; __unwind {
.text:0000000000003160                 mov     cs:file_name, rdi
.text:0000000000003167                 retn
.text:0000000000003167 ; } // starts at 3160
.text:0000000000003167 close_stdout_set_file_name endp
.text:0000000000003167
.text:0000000000003167 ; ---------------------------------------------------------------------------
.text:0000000000003168                 align 10h
.text:0000000000003170
.text:0000000000003170 ; =============== S U B R O U T I N E =======================================
.text:0000000000003170
.text:0000000000003170
.text:0000000000003170                 public close_stdout_set_ignore_EPIPE
.text:0000000000003170 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003170 ; __unwind {
.text:0000000000003170                 mov     cs:ignore_EPIPE, dil
.text:0000000000003177                 retn
.text:0000000000003177 ; } // starts at 3170
.text:0000000000003177 close_stdout_set_ignore_EPIPE endp
.text:0000000000003177
.text:0000000000003177 ; ---------------------------------------------------------------------------
.text:0000000000003178                 align 20h
.text:0000000000003180
.text:0000000000003180 ; =============== S U B R O U T I N E =======================================
.text:0000000000003180
.text:0000000000003180 ; Attributes: info_from_lumina
.text:0000000000003180
.text:0000000000003180 ; void __cdecl close_stdout()
.text:0000000000003180                 public close_stdout
.text:0000000000003180 close_stdout    proc near               ; DATA XREF: main+61↑o
.text:0000000000003180 ; __unwind {
.text:0000000000003180                 push    rbp
.text:0000000000003181                 push    rbx
.text:0000000000003182                 sub     rsp, 8
.text:0000000000003186                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000318D                 call    close_stream
.text:0000000000003192                 test    eax, eax
.text:0000000000003194                 jz      short loc_31AC
.text:0000000000003196                 call    ___errno_location
.text:000000000000319B                 cmp     cs:ignore_EPIPE, 0
.text:00000000000031A2                 mov     rbx, rax
.text:00000000000031A5                 jz      short loc_31C3
.text:00000000000031A7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000031AA                 jnz     short loc_31C3
.text:00000000000031AC
.text:00000000000031AC loc_31AC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000031AC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000031B3                 call    close_stream
.text:00000000000031B8                 test    eax, eax
.text:00000000000031BA                 jnz     short loc_3202
.text:00000000000031BC                 add     rsp, 8
.text:00000000000031C0                 pop     rbx
.text:00000000000031C1                 pop     rbp
.text:00000000000031C2                 retn
.text:00000000000031C3 ; ---------------------------------------------------------------------------
.text:00000000000031C3
.text:00000000000031C3 loc_31C3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000031C3                                         ; close_stdout+2A↑j
.text:00000000000031C3                 lea     rsi, aWriteError ; "write error"
.text:00000000000031CA                 xor     edi, edi        ; domainname
.text:00000000000031CC                 mov     edx, 5          ; category
.text:00000000000031D1                 call    _dcgettext
.text:00000000000031D6                 mov     rdi, cs:file_name
.text:00000000000031DD                 mov     rbp, rax
.text:00000000000031E0                 test    rdi, rdi
.text:00000000000031E3                 jz      short loc_320D
.text:00000000000031E5                 call    quotearg_colon
.text:00000000000031EA                 mov     esi, [rbx]      ; errnum
.text:00000000000031EC                 lea     rdx, format     ; "%s: %s"
.text:00000000000031F3                 mov     rcx, rax
.text:00000000000031F6                 mov     r8, rbp
.text:00000000000031F9                 xor     edi, edi        ; status
.text:00000000000031FB                 xor     eax, eax
.text:00000000000031FD                 call    _error
.text:0000000000003202
.text:0000000000003202 loc_3202:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003202                                         ; close_stdout+A2↓j
.text:0000000000003202                 mov     edi, cs:exit_failure ; status
.text:0000000000003208                 call    __exit
.text:000000000000320D ; ---------------------------------------------------------------------------
.text:000000000000320D
.text:000000000000320D loc_320D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000320D                 mov     esi, [rbx]      ; errnum
.text:000000000000320F                 lea     rdx, aInvalidFieldWi+15h ; format
.text:0000000000003216                 mov     rcx, rax
.text:0000000000003219                 xor     edi, edi        ; status
.text:000000000000321B                 xor     eax, eax
.text:000000000000321D                 call    _error
.text:0000000000003222                 jmp     short loc_3202
.text:0000000000003222 ; } // starts at 3180
.text:0000000000003222 close_stdout    endp
.text:0000000000003222
.text:0000000000003222 ; ---------------------------------------------------------------------------
.text:0000000000003224                 align 10h
.text:0000000000003230
.text:0000000000003230 ; =============== S U B R O U T I N E =======================================
.text:0000000000003230
.text:0000000000003230
.text:0000000000003230                 public set_program_name
.text:0000000000003230 set_program_name proc near              ; CODE XREF: main+2C↑p
.text:0000000000003230 ; __unwind {
.text:0000000000003230                 test    rdi, rdi
.text:0000000000003233                 push    rbx
.text:0000000000003234                 jz      short loc_32AD
.text:0000000000003236                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000323B                 mov     rbx, rdi
.text:000000000000323E                 call    _strrchr
.text:0000000000003243                 test    rax, rax
.text:0000000000003246                 jz      short loc_329D
.text:0000000000003248                 lea     r8, [rax+1]
.text:000000000000324C                 mov     rdx, r8
.text:000000000000324F                 sub     rdx, rbx
.text:0000000000003252                 cmp     rdx, 6
.text:0000000000003256                 jle     short loc_329D
.text:0000000000003258                 lea     rsi, [rax-6]
.text:000000000000325C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003263                 mov     ecx, 7
.text:0000000000003268                 repe cmpsb
.text:000000000000326A                 setnbe  dl
.text:000000000000326D                 sbb     dl, 0
.text:0000000000003270                 test    dl, dl
.text:0000000000003272                 jnz     short loc_329D
.text:0000000000003274                 lea     rdi, aLt        ; "lt-"
.text:000000000000327B                 mov     ecx, 3
.text:0000000000003280                 mov     rsi, r8
.text:0000000000003283                 mov     rbx, r8
.text:0000000000003286                 repe cmpsb
.text:0000000000003288                 setnbe  dl
.text:000000000000328B                 sbb     dl, 0
.text:000000000000328E                 test    dl, dl
.text:0000000000003290                 jnz     short loc_329D
.text:0000000000003292                 lea     rbx, [rax+4]
.text:0000000000003296                 mov     cs:__bss_start, rbx
.text:000000000000329D
.text:000000000000329D loc_329D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000329D                                         ; set_program_name+26↑j ...
.text:000000000000329D                 mov     cs:program_name, rbx
.text:00000000000032A4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000032AB                 pop     rbx
.text:00000000000032AC                 retn
.text:00000000000032AD ; ---------------------------------------------------------------------------
.text:00000000000032AD
.text:00000000000032AD loc_32AD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000032AD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000032B4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000032BB                 mov     edx, 37h ; '7'  ; n
.text:00000000000032C0                 mov     esi, 1          ; size
.text:00000000000032C5                 call    _fwrite
.text:00000000000032CA                 call    _abort
.text:00000000000032CA ; } // starts at 3230
.text:00000000000032CA set_program_name endp
.text:00000000000032CA
.text:00000000000032CA ; ---------------------------------------------------------------------------
.text:00000000000032CF                 align 10h
.text:00000000000032D0
.text:00000000000032D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032D0
.text:00000000000032D0 ; Attributes: info_from_lumina
.text:00000000000032D0
.text:00000000000032D0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000032D0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000032D0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000032D0 ; __unwind {
.text:00000000000032D0                 push    rbp
.text:00000000000032D1                 push    rbx
.text:00000000000032D2                 mov     rbp, rdi
.text:00000000000032D5                 mov     ebx, esi
.text:00000000000032D7                 sub     rsp, 8
.text:00000000000032DB                 call    locale_charset
.text:00000000000032E0                 movzx   edx, byte ptr [rax]
.text:00000000000032E3                 and     edx, 0FFFFFFDFh
.text:00000000000032E6                 cmp     dl, 55h ; 'U'
.text:00000000000032E9                 jz      short loc_3360
.text:00000000000032EB                 cmp     dl, 47h ; 'G'
.text:00000000000032EE                 jz      short loc_3310
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000032F0                                         ; gettext_quote+50↓j ...
.text:00000000000032F0                 lea     rax, unk_8F33
.text:00000000000032F7                 lea     rdx, asc_8F35   ; "'"
.text:00000000000032FE                 cmp     ebx, 9
.text:0000000000003301                 cmovnz  rax, rdx
.text:0000000000003305                 add     rsp, 8
.text:0000000000003309                 pop     rbx
.text:000000000000330A                 pop     rbp
.text:000000000000330B                 retn
.text:000000000000330B ; ---------------------------------------------------------------------------
.text:000000000000330C                 align 10h
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003310                 movzx   edx, byte ptr [rax+1]
.text:0000000000003314                 and     edx, 0FFFFFFDFh
.text:0000000000003317                 cmp     dl, 42h ; 'B'
.text:000000000000331A                 jnz     short loc_32F0
.text:000000000000331C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003320                 jnz     short loc_32F0
.text:0000000000003322                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003326                 jnz     short loc_32F0
.text:0000000000003328                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000332C                 jnz     short loc_32F0
.text:000000000000332E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003332                 jnz     short loc_32F0
.text:0000000000003334                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003338                 jnz     short loc_32F0
.text:000000000000333A                 cmp     byte ptr [rax+7], 0
.text:000000000000333E                 jnz     short loc_32F0
.text:0000000000003340                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003344                 lea     rax, unk_8F2C
.text:000000000000334B                 lea     rdx, unk_8F30
.text:0000000000003352                 cmovnz  rax, rdx
.text:0000000000003356                 add     rsp, 8
.text:000000000000335A                 pop     rbx
.text:000000000000335B                 pop     rbp
.text:000000000000335C                 retn
.text:000000000000335C ; ---------------------------------------------------------------------------
.text:000000000000335D                 align 20h
.text:0000000000003360
.text:0000000000003360 loc_3360:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003360                 movzx   edx, byte ptr [rax+1]
.text:0000000000003364                 and     edx, 0FFFFFFDFh
.text:0000000000003367                 cmp     dl, 54h ; 'T'
.text:000000000000336A                 jnz     short loc_32F0
.text:000000000000336C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003370                 and     edx, 0FFFFFFDFh
.text:0000000000003373                 cmp     dl, 46h ; 'F'
.text:0000000000003376                 jnz     loc_32F0
.text:000000000000337C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003380                 jnz     loc_32F0
.text:0000000000003386                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000338A                 jnz     loc_32F0
.text:0000000000003390                 cmp     byte ptr [rax+5], 0
.text:0000000000003394                 jnz     loc_32F0
.text:000000000000339A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000339E                 lea     rax, unk_8F24
.text:00000000000033A5                 lea     rdx, unk_8F28
.text:00000000000033AC                 cmovnz  rax, rdx
.text:00000000000033B0                 add     rsp, 8
.text:00000000000033B4                 pop     rbx
.text:00000000000033B5                 pop     rbp
.text:00000000000033B6                 retn
.text:00000000000033B6 ; } // starts at 32D0
.text:00000000000033B6 gettext_quote   endp
.text:00000000000033B6
.text:00000000000033B6 ; ---------------------------------------------------------------------------
.text:00000000000033B7                 align 20h
.text:00000000000033C0
.text:00000000000033C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033C0
.text:00000000000033C0 ; Attributes: info_from_lumina
.text:00000000000033C0
.text:00000000000033C0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000033C0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000033C0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000033C0
.text:00000000000033C0 var_E0          = dword ptr -0E0h
.text:00000000000033C0 var_DB          = byte ptr -0DBh
.text:00000000000033C0 var_DA          = byte ptr -0DAh
.text:00000000000033C0 var_D9          = byte ptr -0D9h
.text:00000000000033C0 s               = qword ptr -0D8h
.text:00000000000033C0 n               = qword ptr -0D0h
.text:00000000000033C0 var_C8          = qword ptr -0C8h
.text:00000000000033C0 ps              = qword ptr -0C0h
.text:00000000000033C0 var_B8          = qword ptr -0B8h
.text:00000000000033C0 var_B0          = qword ptr -0B0h
.text:00000000000033C0 var_A8          = qword ptr -0A8h
.text:00000000000033C0 s2              = qword ptr -0A0h
.text:00000000000033C0 var_98          = qword ptr -98h
.text:00000000000033C0 var_90          = qword ptr -90h
.text:00000000000033C0 var_88          = qword ptr -88h
.text:00000000000033C0 var_80          = qword ptr -80h
.text:00000000000033C0 var_78          = qword ptr -78h
.text:00000000000033C0 var_70          = dword ptr -70h
.text:00000000000033C0 var_6C          = byte ptr -6Ch
.text:00000000000033C0 var_6B          = byte ptr -6Bh
.text:00000000000033C0 var_6A          = byte ptr -6Ah
.text:00000000000033C0 var_69          = byte ptr -69h
.text:00000000000033C0 var_68          = qword ptr -68h
.text:00000000000033C0 var_60          = qword ptr -60h
.text:00000000000033C0 wc              = dword ptr -4Ch
.text:00000000000033C0 var_48          = qword ptr -48h
.text:00000000000033C0 var_40          = qword ptr -40h
.text:00000000000033C0 arg_0           = qword ptr  8
.text:00000000000033C0 arg_8           = qword ptr  10h
.text:00000000000033C0 arg_10          = qword ptr  18h
.text:00000000000033C0
.text:00000000000033C0 ; __unwind {
.text:00000000000033C0                 push    r15
.text:00000000000033C2                 push    r14
.text:00000000000033C4                 mov     r15d, r8d
.text:00000000000033C7                 push    r13
.text:00000000000033C9                 push    r12
.text:00000000000033CB                 mov     r14, rdi
.text:00000000000033CE                 push    rbp
.text:00000000000033CF                 push    rbx
.text:00000000000033D0                 mov     ebx, r9d
.text:00000000000033D3                 mov     r13, rsi
.text:00000000000033D6                 mov     rbp, rcx
.text:00000000000033D9                 and     ebx, 2
.text:00000000000033DC                 sub     rsp, 0B8h
.text:00000000000033E3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000033EB                 mov     [rsp+0E8h+s], rdx
.text:00000000000033F0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000033F5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000033FA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000033FF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003407                 mov     [rsp+0E8h+var_80], rax
.text:000000000000340C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003414                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003419                 mov     rax, fs:28h
.text:0000000000003422                 mov     [rsp+0E8h+var_40], rax
.text:000000000000342A                 xor     eax, eax
.text:000000000000342C                 call    ___ctype_get_mb_cur_max
.text:0000000000003431                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003435                 mov     [rsp+0E8h+var_90], rax
.text:000000000000343A                 ja      def_3451        ; jumptable 00000000000121F1 default case
.text:0000000000003440                 lea     rcx, jpt_3451
.text:0000000000003447                 mov     edx, r15d
.text:000000000000344A                 movsxd  rax, ds:(jpt_3451 - 8FA0h)[rcx+rdx*4]
.text:000000000000344E                 add     rax, rcx
.text:0000000000003451                 jmp     rax             ; switch jump
.text:0000000000003453 ; ---------------------------------------------------------------------------
.text:0000000000003453
.text:0000000000003453 loc_3453:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003453                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003453                                         ; DATA XREF: ...
.text:0000000000003453                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003458                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000345D                 xor     r12d, r12d
.text:0000000000003460                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003469                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000346E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003473
.text:0000000000003473 loc_3473:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003473                 lea     rax, asc_8F35   ; "'"
.text:000000000000347A                 mov     [rsp+0E8h+n], 1
.text:0000000000003483                 xor     r15d, r15d
.text:0000000000003486                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000348E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003493
.text:0000000000003493 loc_3493:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003493                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003493                 xor     r11d, r11d
.text:0000000000003496                 mov     rax, rbp
.text:0000000000003499                 mov     r8d, r12d
.text:000000000000349C                 mov     rbp, r11
.text:000000000000349F                 mov     r11, rax
.text:00000000000034A2                 nop     word ptr [rax+rax+00h]
.text:00000000000034A8
.text:00000000000034A8 loc_34A8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000034A8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000034A8                 cmp     r11, rbp
.text:00000000000034AB                 setnz   r12b
.text:00000000000034AF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000034B3                 jnz     short loc_34C2
.text:00000000000034B5                 mov     rax, [rsp+0E8h+s]
.text:00000000000034BA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000034BE                 setnz   r12b
.text:00000000000034C2
.text:00000000000034C2 loc_34C2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000034C2                 test    r12b, r12b
.text:00000000000034C5                 jz      loc_3B20
.text:00000000000034CB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034D0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000034D5                 lea     r9, [rdi+rbp]
.text:00000000000034D9                 setnz   al
.text:00000000000034DC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000034E0                 mov     r10d, eax
.text:00000000000034E3                 jz      loc_3590
.text:00000000000034E9                 mov     rax, [rsp+0E8h+n]
.text:00000000000034EE                 test    rax, rax
.text:00000000000034F1                 jz      loc_3920
.text:00000000000034F7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000034FB                 lea     rbx, [rbp+rax+0]
.text:0000000000003500                 jnz     short loc_3530
.text:0000000000003502                 cmp     rax, 1
.text:0000000000003506                 jbe     short loc_3530
.text:0000000000003508                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000350D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003512                 mov     [rsp+0E8h+ps], r9
.text:0000000000003517                 call    _strlen
.text:000000000000351C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003522                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003528                 mov     r11, rax
.text:000000000000352B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003530
.text:0000000000003530 loc_3530:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003530                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003530                 cmp     rbx, r11
.text:0000000000003533                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003538                 ja      loc_3AF0
.text:000000000000353E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003543                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003548                 mov     rdi, r9         ; s1
.text:000000000000354B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003550                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003555                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000355A                 call    _memcmp
.text:000000000000355F                 test    eax, eax
.text:0000000000003561                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003566                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000356C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003571                 jnz     loc_3AF0
.text:0000000000003577                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000357C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003582                 jnz     loc_4505
.text:0000000000003588                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003590
.text:0000000000003590 loc_3590:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003590                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003590                 movzx   ebx, byte ptr [r9]
.text:0000000000003594                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003597                 ja      def_35AE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000359D                 lea     rcx, jpt_35AE
.text:00000000000035A4                 movzx   edx, bl
.text:00000000000035A7                 movsxd  rax, ds:(jpt_35AE - 8FCCh)[rcx+rdx*4]
.text:00000000000035AB                 add     rax, rcx
.text:00000000000035AE                 jmp     rax             ; switch jump
.text:00000000000035B0 ; ---------------------------------------------------------------------------
.text:00000000000035B0
.text:00000000000035B0 loc_35B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000035B0                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:00000000000035B0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000035B3
.text:00000000000035B3 loc_35B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035B3                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:00000000000035B3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000035B7                 setnz   al
.text:00000000000035BA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000035BE                 jnz     short loc_35CC
.text:00000000000035C0                 mov     rax, [rsp+0E8h+s]
.text:00000000000035C5                 cmp     byte ptr [rax+1], 0
.text:00000000000035C9                 setnz   al
.text:00000000000035CC
.text:00000000000035CC loc_35CC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000035CC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000035D1                 setz    dl
.text:00000000000035D4                 test    al, al
.text:00000000000035D6                 jz      loc_3828
.text:00000000000035DC
.text:00000000000035DC loc_35DC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000035DC                 xor     r12d, r12d
.text:00000000000035DF                 xor     eax, eax
.text:00000000000035E1                 nop     dword ptr [rax+00000000h]
.text:00000000000035E8
.text:00000000000035E8 loc_35E8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000035E8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000035E8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000035ED                 jnz     loc_3702
.text:00000000000035F3                 test    dl, dl
.text:00000000000035F5                 jnz     loc_3702
.text:00000000000035FB
.text:00000000000035FB loc_35FB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000035FB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003600                 test    rsi, rsi
.text:0000000000003603                 jz      short loc_3619
.text:0000000000003605                 mov     edx, ebx
.text:0000000000003607                 shr     dl, 5
.text:000000000000360A                 movzx   edx, dl
.text:000000000000360D                 mov     edx, [rsi+rdx*4]
.text:0000000000003610                 bt      edx, ebx
.text:0000000000003613                 jb      loc_3763
.text:0000000000003619
.text:0000000000003619 loc_3619:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003619                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003619                 test    r10b, r10b
.text:000000000000361C                 jnz     loc_3763
.text:0000000000003622                 xor     eax, 1
.text:0000000000003625                 add     rbp, 1
.text:0000000000003629                 and     eax, r8d
.text:000000000000362C
.text:000000000000362C loc_362C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000362C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000362C                 test    al, al
.text:000000000000362E                 jz      short loc_3650
.text:0000000000003630                 cmp     r13, r15
.text:0000000000003633                 jbe     short loc_363A
.text:0000000000003635                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000363A
.text:000000000000363A loc_363A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000363A                 lea     rax, [r15+1]
.text:000000000000363E                 cmp     r13, rax
.text:0000000000003641                 jbe     short loc_3649
.text:0000000000003643                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003649
.text:0000000000003649 loc_3649:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003649                 add     r15, 2
.text:000000000000364D                 xor     r8d, r8d
.text:0000000000003650
.text:0000000000003650 loc_3650:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003650                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003650                 cmp     r15, r13
.text:0000000000003653                 jnb     short loc_3659
.text:0000000000003655                 mov     [r14+r15], bl
.text:0000000000003659
.text:0000000000003659 loc_3659:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003659                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000365E                 add     r15, 1
.text:0000000000003662                 mov     eax, 0
.text:0000000000003667                 test    r12b, r12b
.text:000000000000366A                 cmovz   edi, eax
.text:000000000000366D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003672                 jmp     loc_34A8
.text:0000000000003672 ; ---------------------------------------------------------------------------
.text:0000000000003677                 align 20h
.text:0000000000003680
.text:0000000000003680 loc_3680:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003680                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003680                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003683
.text:0000000000003683 loc_3683:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003683                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:0000000000003683                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003687                 cmp     eax, 2
.text:000000000000368A                 jz      loc_3C48
.text:0000000000003690                 cmp     eax, 5
.text:0000000000003693                 jz      loc_3C08
.text:0000000000003699                 cmp     eax, 2
.text:000000000000369C                 mov     ebx, 3Fh ; '?'
.text:00000000000036A1                 setz    dl
.text:00000000000036A4                 xor     r12d, r12d
.text:00000000000036A7                 xor     eax, eax
.text:00000000000036A9                 jmp     loc_35E8
.text:00000000000036A9 ; ---------------------------------------------------------------------------
.text:00000000000036AE                 align 10h
.text:00000000000036B0
.text:00000000000036B0 loc_36B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000036B0                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:00000000000036B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000036B3
.text:00000000000036B3 loc_36B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000036B3                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:00000000000036B3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000036B8                 jz      loc_3BC0
.text:00000000000036BE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000036C3                 xor     edx, edx
.text:00000000000036C5                 xor     eax, eax
.text:00000000000036C7                 mov     ebx, 27h ; '''
.text:00000000000036CC                 jmp     loc_35E8
.text:00000000000036CC ; ---------------------------------------------------------------------------
.text:00000000000036D1                 align 8
.text:00000000000036D8
.text:00000000000036D8 loc_36D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000036D8                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:00000000000036D8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000036DD                 mov     ebx, 74h ; 't'
.text:00000000000036E2
.text:00000000000036E2 loc_36E2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000036E2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000036E2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000036E7                 setz    al
.text:00000000000036EA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000036EE                 jnz     loc_383E
.text:00000000000036F4
.text:00000000000036F4 loc_36F4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000036F4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000036F4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000036F9                 jnz     short loc_3760
.text:00000000000036FB
.text:00000000000036FB loc_36FB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000036FB                 mov     ebx, edx
.text:00000000000036FD                 xor     r12d, r12d
.text:0000000000003700                 xor     eax, eax
.text:0000000000003702
.text:0000000000003702 loc_3702:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003702                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003702                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003707                 jnz     loc_35FB
.text:000000000000370D                 jmp     loc_3619
.text:000000000000370D ; ---------------------------------------------------------------------------
.text:0000000000003712                 align 8
.text:0000000000003718
.text:0000000000003718 loc_3718:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003718                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:0000000000003718                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000371D                 mov     ebx, 62h ; 'b'
.text:0000000000003722                 jmp     short loc_36F4
.text:0000000000003722 ; ---------------------------------------------------------------------------
.text:0000000000003724                 align 8
.text:0000000000003728
.text:0000000000003728 loc_3728:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003728                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:0000000000003728                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000372D                 jz      loc_3B00
.text:0000000000003733                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003738                 jz      loc_3950
.text:000000000000373E
.text:000000000000373E loc_373E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000373E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003743                 jz      loc_3950
.text:0000000000003749                 cmp     [rsp+0E8h+n], 0
.text:000000000000374F                 jnz     loc_3B0B
.text:0000000000003755                 mov     ebx, 5Ch ; '\'
.text:000000000000375A                 nop     word ptr [rax+rax+00h]
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003760                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003760                 xor     r12d, r12d
.text:0000000000003763
.text:0000000000003763 loc_3763:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003763                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003763                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003768                 setz    dl
.text:000000000000376B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003770                 mov     eax, edx
.text:0000000000003772                 jnz     loc_3FC8
.text:0000000000003778                 mov     eax, r8d
.text:000000000000377B                 xor     eax, 1
.text:000000000000377E                 and     al, dl
.text:0000000000003780                 jz      short loc_37B1
.text:0000000000003782                 cmp     r13, r15
.text:0000000000003785                 jbe     short loc_378C
.text:0000000000003787                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000378C
.text:000000000000378C loc_378C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000378C                 lea     rdx, [r15+1]
.text:0000000000003790                 cmp     r13, rdx
.text:0000000000003793                 jbe     short loc_379B
.text:0000000000003795                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000379B
.text:000000000000379B loc_379B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000379B                 lea     rdx, [r15+2]
.text:000000000000379F                 cmp     r13, rdx
.text:00000000000037A2                 jbe     short loc_37AA
.text:00000000000037A4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000037AA
.text:00000000000037AA loc_37AA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000037AA                 add     r15, 3
.text:00000000000037AE                 mov     r8d, eax
.text:00000000000037B1
.text:00000000000037B1 loc_37B1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000037B1                 cmp     r13, r15
.text:00000000000037B4                 jbe     short loc_37BB
.text:00000000000037B6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000037BB
.text:00000000000037BB loc_37BB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000037BB                 add     r15, 1
.text:00000000000037BF                 add     rbp, 1
.text:00000000000037C3                 jmp     loc_3650
.text:00000000000037C3 ; ---------------------------------------------------------------------------
.text:00000000000037C8                 align 10h
.text:00000000000037D0
.text:00000000000037D0 loc_37D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037D0                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:00000000000037D0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000037D5                 jnz     loc_39A3
.text:00000000000037DB                 xor     edx, edx
.text:00000000000037DD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000037E2                 jz      loc_36FB
.text:00000000000037E8                 add     rbp, 1
.text:00000000000037EC                 jmp     loc_34A8
.text:00000000000037EC ; ---------------------------------------------------------------------------
.text:00000000000037F1                 align 8
.text:00000000000037F8
.text:00000000000037F8 loc_37F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037F8                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:00000000000037F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000037FD                 setz    dl
.text:0000000000003800                 xor     eax, eax
.text:0000000000003802                 jmp     loc_35E8
.text:0000000000003802 ; ---------------------------------------------------------------------------
.text:0000000000003807                 align 10h
.text:0000000000003810
.text:0000000000003810 loc_3810:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003810                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:0000000000003810                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003815                 mov     ebx, 61h ; 'a'
.text:000000000000381A                 jmp     loc_36F4
.text:000000000000381A ; ---------------------------------------------------------------------------
.text:000000000000381F                 align 20h
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003820                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:0000000000003820                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003825                 setz    dl
.text:0000000000003828
.text:0000000000003828 loc_3828:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003828                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003828                 test    rbp, rbp
.text:000000000000382B                 jnz     loc_35DC
.text:0000000000003831
.text:0000000000003831 loc_3831:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003831                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003831                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003836                 and     al, dl
.text:0000000000003838                 jz      loc_35E8
.text:000000000000383E
.text:000000000000383E loc_383E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000383E                 mov     rbp, r11
.text:0000000000003841                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003849                 jmp     loc_3F49
.text:0000000000003849 ; ---------------------------------------------------------------------------
.text:000000000000384E                 align 10h
.text:0000000000003850
.text:0000000000003850 loc_3850:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003850                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:0000000000003850                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003855                 setz    dl
.text:0000000000003858                 xor     r12d, r12d
.text:000000000000385B                 jmp     short loc_3831
.text:000000000000385B ; ---------------------------------------------------------------------------
.text:000000000000385D                 align 20h
.text:0000000000003860
.text:0000000000003860 loc_3860:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003860                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:0000000000003860                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003865                 mov     ebx, 20h ; ' '
.text:000000000000386A                 setz    dl
.text:000000000000386D                 jmp     short loc_3831
.text:000000000000386D ; ---------------------------------------------------------------------------
.text:000000000000386F                 align 10h
.text:0000000000003870
.text:0000000000003870 loc_3870:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003870                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:0000000000003870                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003875                 mov     ebx, 72h ; 'r'
.text:000000000000387A                 jmp     loc_36E2
.text:000000000000387A ; ---------------------------------------------------------------------------
.text:000000000000387F                 align 20h
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003880                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:0000000000003880                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003885                 mov     ebx, 66h ; 'f'
.text:000000000000388A                 jmp     loc_36F4
.text:000000000000388A ; ---------------------------------------------------------------------------
.text:000000000000388F                 align 10h
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003890                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:0000000000003890                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003895                 mov     ebx, 76h ; 'v'
.text:000000000000389A                 jmp     loc_36F4
.text:000000000000389A ; ---------------------------------------------------------------------------
.text:000000000000389F                 align 20h
.text:00000000000038A0
.text:00000000000038A0 loc_38A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000038A0                                         ; DATA XREF: .rodata:jpt_35AE↓o
.text:00000000000038A0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000038A5                 mov     ebx, 6Eh ; 'n'
.text:00000000000038AA                 jmp     loc_36E2
.text:00000000000038AA ; ---------------------------------------------------------------------------
.text:00000000000038AF                 align 10h
.text:00000000000038B0
.text:00000000000038B0 def_393A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000038B0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000038B0                                         ; DATA XREF: ...
.text:00000000000038B0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000038B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000038B8
.text:00000000000038B8 def_35AE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000038B8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000038B8                                         ; DATA XREF: ...
.text:00000000000038B8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000038BE                 jnz     loc_3C68
.text:00000000000038C4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000038C9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000038CE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000038D3                 call    ___ctype_b_loc
.text:00000000000038D8                 mov     rcx, [rax]
.text:00000000000038DB                 movzx   edx, bl
.text:00000000000038DE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000038E4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000038EA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000038EF                 mov     edi, 1
.text:00000000000038F4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000038F8                 and     ax, 4000h
.text:00000000000038FC                 setnz   r12b
.text:0000000000003900                 setz    al
.text:0000000000003903                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003907
.text:0000000000003907 loc_3907:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003907                 test    al, al
.text:0000000000003909                 jnz     loc_42A1
.text:000000000000390F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003914                 setz    dl
.text:0000000000003917                 jmp     loc_35E8
.text:0000000000003917 ; ---------------------------------------------------------------------------
.text:000000000000391C                 align 20h
.text:0000000000003920
.text:0000000000003920 loc_3920:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003920                 movzx   ebx, byte ptr [r9]
.text:0000000000003924                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003927                 ja      short def_393A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003929                 lea     rcx, jpt_393A
.text:0000000000003930                 movzx   edx, bl
.text:0000000000003933                 movsxd  rax, ds:(jpt_393A - 91C8h)[rcx+rdx*4]
.text:0000000000003937                 add     rax, rcx
.text:000000000000393A                 jmp     rax             ; switch jump
.text:000000000000393A ; ---------------------------------------------------------------------------
.text:000000000000393C                 align 20h
.text:0000000000003940
.text:0000000000003940 loc_3940:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003940                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003940                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003943                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003948                 jnz     loc_373E
.text:000000000000394E                 xchg    ax, ax
.text:0000000000003950
.text:0000000000003950 loc_3950:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003950                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003950                 mov     edx, 5Ch ; '\'
.text:0000000000003955                 mov     ebx, 5Ch ; '\'
.text:000000000000395A                 jmp     loc_36F4
.text:000000000000395A ; ---------------------------------------------------------------------------
.text:000000000000395F                 align 20h
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003960                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003960                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003965                 xor     r10d, r10d
.text:0000000000003968                 mov     ebx, 66h ; 'f'
.text:000000000000396D                 jmp     loc_36F4
.text:000000000000396D ; ---------------------------------------------------------------------------
.text:0000000000003972                 align 8
.text:0000000000003978
.text:0000000000003978 loc_3978:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003978                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003978                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000397D                 xor     r10d, r10d
.text:0000000000003980                 mov     ebx, 6Eh ; 'n'
.text:0000000000003985                 jmp     loc_36E2
.text:0000000000003985 ; ---------------------------------------------------------------------------
.text:000000000000398A                 align 10h
.text:0000000000003990
.text:0000000000003990 loc_3990:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003990                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003990                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003995                 jmp     loc_3760
.text:0000000000003995 ; ---------------------------------------------------------------------------
.text:000000000000399A                 align 20h
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039A0                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:00000000000039A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000039A3
.text:00000000000039A3 loc_39A3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000039A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000039A8                 setz    dl
.text:00000000000039AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000039B0                 jnz     loc_454A
.text:00000000000039B6                 mov     eax, r8d
.text:00000000000039B9                 mov     rcx, r15
.text:00000000000039BC                 xor     eax, 1
.text:00000000000039BF                 and     al, dl
.text:00000000000039C1                 jz      short loc_39F0
.text:00000000000039C3                 cmp     r13, r15
.text:00000000000039C6                 jbe     short loc_39CD
.text:00000000000039C8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000039CD
.text:00000000000039CD loc_39CD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000039CD                 lea     rcx, [r15+1]
.text:00000000000039D1                 cmp     r13, rcx
.text:00000000000039D4                 jbe     short loc_39DC
.text:00000000000039D6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000039DC
.text:00000000000039DC loc_39DC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000039DC                 lea     rcx, [r15+2]
.text:00000000000039E0                 cmp     r13, rcx
.text:00000000000039E3                 ja      loc_4019
.text:00000000000039E9
.text:00000000000039E9 loc_39E9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000039E9                 lea     rcx, [r15+3]
.text:00000000000039ED                 mov     r8d, eax
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000039F0                 cmp     r13, rcx
.text:00000000000039F3                 jbe     short loc_39FA
.text:00000000000039F5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000039FA
.text:00000000000039FA loc_39FA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000039FA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000039FF                 lea     r15, [rcx+1]
.text:0000000000003A03                 jz      loc_4009
.text:0000000000003A09                 lea     rax, [rbp+1]
.text:0000000000003A0D                 cmp     rax, r11
.text:0000000000003A10                 jnb     short loc_3A2B
.text:0000000000003A12                 mov     rax, [rsp+0E8h+s]
.text:0000000000003A17                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000003A1C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003A20                 sub     eax, 30h ; '0'
.text:0000000000003A23                 cmp     al, 9
.text:0000000000003A25                 jbe     loc_4259
.text:0000000000003A2B
.text:0000000000003A2B loc_3A2B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000003A2B                 mov     eax, r12d
.text:0000000000003A2E                 mov     ebx, 30h ; '0'
.text:0000000000003A33                 xor     r12d, r12d
.text:0000000000003A36                 jmp     loc_35E8
.text:0000000000003A36 ; ---------------------------------------------------------------------------
.text:0000000000003A3B                 align 20h
.text:0000000000003A40
.text:0000000000003A40 loc_3A40:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A40                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003A40                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003A45                 mov     r12d, r10d
.text:0000000000003A48                 setz    dl
.text:0000000000003A4B                 xor     r10d, r10d
.text:0000000000003A4E                 xor     eax, eax
.text:0000000000003A50                 jmp     loc_35E8
.text:0000000000003A50 ; ---------------------------------------------------------------------------
.text:0000000000003A55                 align 8
.text:0000000000003A58
.text:0000000000003A58 loc_3A58:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A58                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003A58                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000003A5D                 setz    dl
.text:0000000000003A60                 xor     r10d, r10d
.text:0000000000003A63                 jmp     loc_3828
.text:0000000000003A63 ; ---------------------------------------------------------------------------
.text:0000000000003A68                 align 10h
.text:0000000000003A70
.text:0000000000003A70 loc_3A70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A70                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003A70                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003A75                 setz    dl
.text:0000000000003A78                 xor     r10d, r10d
.text:0000000000003A7B                 xor     r12d, r12d
.text:0000000000003A7E                 jmp     loc_3831
.text:0000000000003A7E ; ---------------------------------------------------------------------------
.text:0000000000003A83                 align 8
.text:0000000000003A88
.text:0000000000003A88 loc_3A88:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A88                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003A88                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000003A8D                 mov     r12d, r10d
.text:0000000000003A90                 mov     ebx, 20h ; ' '
.text:0000000000003A95                 setz    dl
.text:0000000000003A98                 xor     r10d, r10d
.text:0000000000003A9B                 jmp     loc_3831
.text:0000000000003AA0 ; ---------------------------------------------------------------------------
.text:0000000000003AA0
.text:0000000000003AA0 loc_3AA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AA0                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003AA0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003AA5                 xor     r10d, r10d
.text:0000000000003AA8                 mov     ebx, 72h ; 'r'
.text:0000000000003AAD                 jmp     loc_36E2
.text:0000000000003AAD ; ---------------------------------------------------------------------------
.text:0000000000003AB2                 align 8
.text:0000000000003AB8
.text:0000000000003AB8 loc_3AB8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AB8                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003AB8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000003ABD                 jmp     loc_3760
.text:0000000000003ABD ; ---------------------------------------------------------------------------
.text:0000000000003AC2                 align 8
.text:0000000000003AC8
.text:0000000000003AC8 loc_3AC8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AC8                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003AC8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003ACD                 xor     r10d, r10d
.text:0000000000003AD0                 mov     ebx, 74h ; 't'
.text:0000000000003AD5                 jmp     loc_36E2
.text:0000000000003AD5 ; ---------------------------------------------------------------------------
.text:0000000000003ADA                 align 20h
.text:0000000000003AE0
.text:0000000000003AE0 loc_3AE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AE0                                         ; DATA XREF: .rodata:jpt_393A↓o
.text:0000000000003AE0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003AE5                 jmp     loc_3760
.text:0000000000003AE5 ; ---------------------------------------------------------------------------
.text:0000000000003AEA                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003AF0                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003AF0                 xor     r10d, r10d
.text:0000000000003AF3                 jmp     loc_3590
.text:0000000000003AF3 ; ---------------------------------------------------------------------------
.text:0000000000003AF8                 align 20h
.text:0000000000003B00
.text:0000000000003B00 loc_3B00:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003B00                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003B05                 jnz     loc_4470
.text:0000000000003B0B
.text:0000000000003B0B loc_3B0B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003B0B                 add     rbp, 1
.text:0000000000003B0F                 mov     eax, r8d
.text:0000000000003B12                 xor     r12d, r12d
.text:0000000000003B15                 mov     ebx, 5Ch ; '\'
.text:0000000000003B1A                 jmp     loc_362C
.text:0000000000003B1A ; ---------------------------------------------------------------------------
.text:0000000000003B1F                 align 20h
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003B20                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B25                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003B2A                 mov     r12d, r8d
.text:0000000000003B2D                 mov     rbp, r11
.text:0000000000003B30                 setz    dl
.text:0000000000003B33                 mov     eax, ebx
.text:0000000000003B35                 test    r15, r15
.text:0000000000003B38                 setz    cl
.text:0000000000003B3B                 and     eax, edx
.text:0000000000003B3D                 and     al, cl
.text:0000000000003B3F                 jnz     loc_45A6
.text:0000000000003B45                 mov     eax, ebx
.text:0000000000003B47                 xor     eax, 1
.text:0000000000003B4A                 and     dl, al
.text:0000000000003B4C                 jz      loc_44BC
.text:0000000000003B52                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003B57                 jz      loc_44BA
.text:0000000000003B5D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003B62                 jnz     loc_455D
.text:0000000000003B68                 test    r13, r13
.text:0000000000003B6B                 setz    al
.text:0000000000003B6E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003B74                 setnz   dl
.text:0000000000003B77                 and     al, dl
.text:0000000000003B79                 jz      loc_459C
.text:0000000000003B7F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003B84
.text:0000000000003B84 loc_3B84:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003B84                 lea     rbx, asc_8F35   ; "'"
.text:0000000000003B8B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003B8F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B97                 mov     r15d, 1
.text:0000000000003B9D                 mov     [rsp+0E8h+n], 1
.text:0000000000003BA6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003BAB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003BB0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003BB4                 jmp     loc_3493
.text:0000000000003BB4 ; ---------------------------------------------------------------------------
.text:0000000000003BB9                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 loc_3BC0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003BC0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003BC5                 jnz     loc_4470
.text:0000000000003BCB                 test    r13, r13
.text:0000000000003BCE                 jz      loc_3FD0
.text:0000000000003BD4                 xor     edx, edx
.text:0000000000003BD6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003BDC                 jnz     loc_3FD0
.text:0000000000003BE2
.text:0000000000003BE2 loc_3BE2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003BE2                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003BE2                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003BE7                 add     r15, 3
.text:0000000000003BEB                 xor     eax, eax
.text:0000000000003BED                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003BF2                 xor     r8d, r8d
.text:0000000000003BF5                 mov     r13, rdx
.text:0000000000003BF8                 mov     ebx, 27h ; '''
.text:0000000000003BFD                 jmp     loc_3619
.text:0000000000003BFD ; ---------------------------------------------------------------------------
.text:0000000000003C02                 align 8
.text:0000000000003C08
.text:0000000000003C08 loc_3C08:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003C08                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003C0D                 jz      short loc_3C30
.text:0000000000003C0F                 lea     rcx, [rbp+2]
.text:0000000000003C13                 cmp     rcx, r11
.text:0000000000003C16                 jnb     short loc_3C30
.text:0000000000003C18                 mov     rax, [rsp+0E8h+s]
.text:0000000000003C1D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003C22                 jz      loc_43B2
.text:0000000000003C28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003C30                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003C30                 xor     edx, edx
.text:0000000000003C32                 xor     r12d, r12d
.text:0000000000003C35                 xor     eax, eax
.text:0000000000003C37                 mov     ebx, 3Fh ; '?'
.text:0000000000003C3C                 jmp     loc_35E8
.text:0000000000003C3C ; ---------------------------------------------------------------------------
.text:0000000000003C41                 align 8
.text:0000000000003C48
.text:0000000000003C48 loc_3C48:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003C48                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C4D                 jnz     loc_4470
.text:0000000000003C53                 xor     r12d, r12d
.text:0000000000003C56                 xor     eax, eax
.text:0000000000003C58                 mov     ebx, 3Fh ; '?'
.text:0000000000003C5D                 jmp     loc_3619
.text:0000000000003C5D ; ---------------------------------------------------------------------------
.text:0000000000003C62                 align 8
.text:0000000000003C68
.text:0000000000003C68 loc_3C68:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003C68                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003C70                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C74                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003C80                 mov     [rsp+0E8h+ps], rax
.text:0000000000003C85                 jnz     short loc_3CB4
.text:0000000000003C87                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003C8C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003C91                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003C96                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003C9B                 call    _strlen
.text:0000000000003CA0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003CA6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003CAC                 mov     r11, rax
.text:0000000000003CAF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003CB4
.text:0000000000003CB4 loc_3CB4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003CB4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003CBC                 xor     ecx, ecx
.text:0000000000003CBE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003CC2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003CC7                 mov     rbx, rcx
.text:0000000000003CCA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003CD2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003CD7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003CDC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003CE4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003CE9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003CEE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003CF3
.text:0000000000003CF3 loc_3CF3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003CF3                 mov     rax, [rsp+0E8h+s]
.text:0000000000003CF8                 lea     r14, [rbp+rbx+0]
.text:0000000000003CFD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003D02                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003D07                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003D0C                 lea     r13, [rax+r14]
.text:0000000000003D10                 sub     rdx, r14
.text:0000000000003D13                 mov     rsi, r13
.text:0000000000003D16                 call    rpl_mbrtowc
.text:0000000000003D1B                 test    rax, rax
.text:0000000000003D1E                 mov     r15, rax
.text:0000000000003D21                 jz      short loc_3D71
.text:0000000000003D23                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D27                 jz      loc_4345
.text:0000000000003D2D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003D31                 jz      loc_42D1
.text:0000000000003D37                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D3C                 setz    al
.text:0000000000003D3F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003D43                 jnz     loc_3EE0
.text:0000000000003D49
.text:0000000000003D49 loc_3D49:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003D49                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003D49                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003D50                 call    _iswprint
.text:0000000000003D55                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000003D5A                 test    eax, eax
.text:0000000000003D5C                 mov     eax, 0
.text:0000000000003D61                 cmovz   r12d, eax
.text:0000000000003D65                 add     rbx, r15
.text:0000000000003D68                 call    _mbsinit
.text:0000000000003D6D                 test    eax, eax
.text:0000000000003D6F                 jz      short loc_3CF3
.text:0000000000003D71
.text:0000000000003D71 loc_3D71:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003D71                 mov     edx, r12d
.text:0000000000003D74                 mov     rdi, rbx
.text:0000000000003D77                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003D7D                 xor     edx, 1
.text:0000000000003D80                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003D85                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003D8B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000003D8F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003D97                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003D9C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003DA1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003DA6
.text:0000000000003DA6 loc_3DA6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003DA6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003DA6                 cmp     rdi, 1
.text:0000000000003DAA                 jbe     loc_43AB
.text:0000000000003DB0
.text:0000000000003DB0 loc_3DB0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003DB0                 mov     rcx, rdi
.text:0000000000003DB3                 xor     esi, esi
.text:0000000000003DB5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000003DBB                 add     rcx, rbp
.text:0000000000003DBE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003DC3                 jmp     loc_3E7E
.text:0000000000003DC3 ; ---------------------------------------------------------------------------
.text:0000000000003DC8                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003DD0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003DD5                 setz    al
.text:0000000000003DD8                 test    r9b, r9b
.text:0000000000003DDB                 jnz     loc_4290
.text:0000000000003DE1                 mov     esi, r8d
.text:0000000000003DE4                 xor     esi, 1
.text:0000000000003DE7                 and     al, sil
.text:0000000000003DEA                 jz      short loc_3E1B
.text:0000000000003DEC                 cmp     r13, r15
.text:0000000000003DEF                 jbe     short loc_3DF6
.text:0000000000003DF1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003DF6
.text:0000000000003DF6 loc_3DF6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003DF6                 lea     rsi, [r15+1]
.text:0000000000003DFA                 cmp     r13, rsi
.text:0000000000003DFD                 jbe     short loc_3E05
.text:0000000000003DFF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003E05
.text:0000000000003E05 loc_3E05:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003E05                 lea     rsi, [r15+2]
.text:0000000000003E09                 cmp     r13, rsi
.text:0000000000003E0C                 jbe     short loc_3E14
.text:0000000000003E0E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003E14
.text:0000000000003E14 loc_3E14:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003E14                 add     r15, 3
.text:0000000000003E18                 mov     r8d, eax
.text:0000000000003E1B
.text:0000000000003E1B loc_3E1B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000003E1B                 cmp     r13, r15
.text:0000000000003E1E                 jbe     short loc_3E25
.text:0000000000003E20                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003E25
.text:0000000000003E25 loc_3E25:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003E25                 lea     rax, [r15+1]
.text:0000000000003E29                 cmp     r13, rax
.text:0000000000003E2C                 jbe     short loc_3E3B
.text:0000000000003E2E                 mov     eax, ebx
.text:0000000000003E30                 shr     al, 6
.text:0000000000003E33                 add     eax, 30h ; '0'
.text:0000000000003E36                 mov     [r14+r15+1], al
.text:0000000000003E3B
.text:0000000000003E3B loc_3E3B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000003E3B                 lea     rax, [r15+2]
.text:0000000000003E3F                 cmp     r13, rax
.text:0000000000003E42                 jbe     short loc_3E54
.text:0000000000003E44                 mov     eax, ebx
.text:0000000000003E46                 shr     al, 3
.text:0000000000003E49                 and     eax, 7
.text:0000000000003E4C                 add     eax, 30h ; '0'
.text:0000000000003E4F                 mov     [r14+r15+2], al
.text:0000000000003E54
.text:0000000000003E54 loc_3E54:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003E54                 and     ebx, 7
.text:0000000000003E57                 add     rbp, 1
.text:0000000000003E5B                 add     r15, 3
.text:0000000000003E5F                 add     ebx, 30h ; '0'
.text:0000000000003E62                 cmp     rbp, rcx
.text:0000000000003E65                 jnb     loc_3650
.text:0000000000003E6B                 mov     esi, edx
.text:0000000000003E6D
.text:0000000000003E6D loc_3E6D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003E6D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003E6D                 cmp     r13, r15
.text:0000000000003E70                 jbe     short loc_3E76
.text:0000000000003E72                 mov     [r14+r15], bl
.text:0000000000003E76
.text:0000000000003E76 loc_3E76:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003E76                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003E7A                 add     r15, 1
.text:0000000000003E7E
.text:0000000000003E7E loc_3E7E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003E7E                 test    dl, dl
.text:0000000000003E80                 jnz     loc_3DD0
.text:0000000000003E86                 mov     eax, esi
.text:0000000000003E88                 xor     eax, 1
.text:0000000000003E8B                 and     eax, r8d
.text:0000000000003E8E                 test    r10b, r10b
.text:0000000000003E91                 jz      short loc_3EA1
.text:0000000000003E93                 cmp     r13, r15
.text:0000000000003E96                 jbe     short loc_3E9D
.text:0000000000003E98                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003E9D
.text:0000000000003E9D loc_3E9D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003E9D                 add     r15, 1
.text:0000000000003EA1
.text:0000000000003EA1 loc_3EA1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003EA1                 add     rbp, 1
.text:0000000000003EA5                 cmp     rbp, rcx
.text:0000000000003EA8                 jnb     loc_362C
.text:0000000000003EAE                 test    al, al
.text:0000000000003EB0                 jz      loc_42AE
.text:0000000000003EB6                 cmp     r13, r15
.text:0000000000003EB9                 jbe     short loc_3EC0
.text:0000000000003EBB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003EC0
.text:0000000000003EC0 loc_3EC0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003EC0                 lea     rax, [r15+1]
.text:0000000000003EC4                 cmp     r13, rax
.text:0000000000003EC7                 jbe     short loc_3ECF
.text:0000000000003EC9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003ECF
.text:0000000000003ECF loc_3ECF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003ECF                 add     r15, 2
.text:0000000000003ED3                 xor     r10d, r10d
.text:0000000000003ED6                 xor     r8d, r8d
.text:0000000000003ED9                 jmp     short loc_3E6D
.text:0000000000003ED9 ; ---------------------------------------------------------------------------
.text:0000000000003EDB                 align 20h
.text:0000000000003EE0
.text:0000000000003EE0 loc_3EE0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003EE0                 cmp     r15, 1
.text:0000000000003EE4                 jz      loc_3D49
.text:0000000000003EEA                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003EEF                 lea     rcx, [rdi+r15]
.text:0000000000003EF3                 lea     rdx, [rdi+r14+1]
.text:0000000000003EF8                 lea     r8, [rcx+r14]
.text:0000000000003EFC                 jmp     short loc_3F0D
.text:0000000000003EFC ; ---------------------------------------------------------------------------
.text:0000000000003EFE                 align 20h
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003F00                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003F00                 add     rdx, 1
.text:0000000000003F04                 cmp     r8, rdx
.text:0000000000003F07                 jz      loc_3D49
.text:0000000000003F0D
.text:0000000000003F0D loc_3F0D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003F0D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003F10                 sub     ecx, 5Bh ; '['
.text:0000000000003F13                 cmp     cl, 21h ; '!'
.text:0000000000003F16                 ja      short loc_3F00
.text:0000000000003F18                 mov     esi, 1
.text:0000000000003F1D                 shl     rsi, cl
.text:0000000000003F20                 mov     rcx, rsi
.text:0000000000003F23                 mov     rsi, 20000002Bh
.text:0000000000003F2D                 test    rcx, rsi
.text:0000000000003F30                 jz      short loc_3F00
.text:0000000000003F32                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003F37                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003F3C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003F41                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003F49
.text:0000000000003F49 loc_3F49:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003F49                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003F49                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003F4E                 jz      short loc_3F60
.text:0000000000003F50                 test    al, al
.text:0000000000003F52                 mov     eax, 4
.text:0000000000003F57                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003F5C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003F60
.text:0000000000003F60 loc_3F60:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003F60                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003F60                 sub     rsp, 8
.text:0000000000003F64                 mov     rcx, rbp
.text:0000000000003F67                 mov     rsi, r13
.text:0000000000003F6A                 push    [rsp+0F0h+var_88]
.text:0000000000003F6E                 push    [rsp+0F8h+var_80]
.text:0000000000003F72                 mov     rdi, r14
.text:0000000000003F75                 push    0
.text:0000000000003F77                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003F7F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003F84                 mov     rdx, [rsp+108h+s]
.text:0000000000003F89                 and     r9d, 0FFFFFFFDh
.text:0000000000003F8D                 call    quotearg_buffer_restyled
.text:0000000000003F92                 add     rsp, 20h
.text:0000000000003F96                 mov     r15, rax
.text:0000000000003F99
.text:0000000000003F99 loc_3F99:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003F99                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003F99                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003FA1                 xor     rbx, fs:28h
.text:0000000000003FAA                 mov     rax, r15
.text:0000000000003FAD                 jnz     loc_45B3
.text:0000000000003FB3                 add     rsp, 0B8h
.text:0000000000003FBA                 pop     rbx
.text:0000000000003FBB                 pop     rbp
.text:0000000000003FBC                 pop     r12
.text:0000000000003FBE                 pop     r13
.text:0000000000003FC0                 pop     r14
.text:0000000000003FC2                 pop     r15
.text:0000000000003FC4                 retn
.text:0000000000003FC4 ; ---------------------------------------------------------------------------
.text:0000000000003FC5                 align 8
.text:0000000000003FC8
.text:0000000000003FC8 loc_3FC8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003FC8                 mov     rbp, r11
.text:0000000000003FCB                 jmp     loc_3F49
.text:0000000000003FD0 ; ---------------------------------------------------------------------------
.text:0000000000003FD0
.text:0000000000003FD0 loc_3FD0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003FD0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003FD0                 cmp     r13, r15
.text:0000000000003FD3                 jbe     short loc_3FDA
.text:0000000000003FD5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003FDA
.text:0000000000003FDA loc_3FDA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003FDA                 lea     rax, [r15+1]
.text:0000000000003FDE                 cmp     r13, rax
.text:0000000000003FE1                 jbe     short loc_3FE9
.text:0000000000003FE3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003FE9
.text:0000000000003FE9 loc_3FE9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003FE9                 lea     rax, [r15+2]
.text:0000000000003FED                 cmp     r13, rax
.text:0000000000003FF0                 jbe     loc_45E2
.text:0000000000003FF6                 mov     rdx, r13
.text:0000000000003FF9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003FFF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004004                 jmp     loc_3BE2
.text:0000000000004009 ; ---------------------------------------------------------------------------
.text:0000000000004009
.text:0000000000004009 loc_4009:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004009                 mov     eax, r12d
.text:000000000000400C                 mov     ebx, 30h ; '0'
.text:0000000000004011                 xor     r12d, r12d
.text:0000000000004014                 jmp     loc_3619
.text:0000000000004019 ; ---------------------------------------------------------------------------
.text:0000000000004019
.text:0000000000004019 loc_4019:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004019                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000401F                 jmp     loc_39E9
.text:0000000000004024 ; ---------------------------------------------------------------------------
.text:0000000000004024
.text:0000000000004024 loc_4024:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004024                                         ; DATA XREF: .rodata:jpt_3451↓o
.text:0000000000004024                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004026                 jnz     loc_3453        ; jumptable 00000000000121F1 case 1
.text:000000000000402C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004031
.text:0000000000004031 loc_4031:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004031                 test    r13, r13
.text:0000000000004034                 jnz     loc_45CA
.text:000000000000403A                 lea     rax, asc_8F35   ; "'"
.text:0000000000004041                 mov     [rsp+0E8h+var_98], 0
.text:000000000000404A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000404F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004054                 xor     r12d, r12d
.text:0000000000004057                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000405C                 mov     [rsp+0E8h+n], 1
.text:0000000000004065                 mov     [rsp+0E8h+s2], rax
.text:000000000000406A                 mov     r15d, 1
.text:0000000000004070                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004078                 jmp     loc_3493
.text:0000000000004078 ; ---------------------------------------------------------------------------
.text:000000000000407D                 align 20h
.text:0000000000004080
.text:0000000000004080 loc_4080:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004080                                         ; DATA XREF: .rodata:jpt_3451↓o
.text:0000000000004080                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004082                 jnz     loc_447D
.text:0000000000004088                 test    r13, r13
.text:000000000000408B                 jz      loc_42B6
.text:0000000000004091                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004095                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000409A                 xor     r12d, r12d
.text:000000000000409D                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000040A2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000040AB
.text:00000000000040AB loc_40AB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000040AB                 lea     rax, unk_8F33
.text:00000000000040B2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000040B7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000040BC                 mov     [rsp+0E8h+n], 1
.text:00000000000040C5                 mov     r15d, 1
.text:00000000000040CB                 mov     [rsp+0E8h+s2], rax
.text:00000000000040D0                 jmp     loc_3493
.text:00000000000040D5 ; ---------------------------------------------------------------------------
.text:00000000000040D5
.text:00000000000040D5 loc_40D5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000040D5                                         ; DATA XREF: .rodata:jpt_3451↓o
.text:00000000000040D5                 lea     rax, unk_8F33   ; jumptable 00000000000121F1 case 6
.text:00000000000040DC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000040E1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000040E6                 xor     r12d, r12d
.text:00000000000040E9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000040F2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000040F7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000040FC                 mov     [rsp+0E8h+n], 1
.text:0000000000004105                 xor     r15d, r15d
.text:0000000000004108                 mov     [rsp+0E8h+s2], rax
.text:000000000000410D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004115                 jmp     loc_3493
.text:000000000000411A ; ---------------------------------------------------------------------------
.text:000000000000411A
.text:000000000000411A loc_411A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000411A                                         ; DATA XREF: .rodata:jpt_3451↓o
.text:000000000000411A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000411F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004124                 xor     r12d, r12d
.text:0000000000004127                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004130                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004135                 xor     r15d, r15d
.text:0000000000004138                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000413D                 mov     [rsp+0E8h+n], 0
.text:0000000000004146                 mov     [rsp+0E8h+s2], 0
.text:000000000000414F                 jmp     loc_3493
.text:0000000000004154 ; ---------------------------------------------------------------------------
.text:0000000000004154
.text:0000000000004154 loc_4154:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004154                                         ; DATA XREF: .rodata:jpt_3451↓o
.text:0000000000004154                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004159                 jz      short loc_41B1
.text:000000000000415B                 lea     rsi, asc_8F37   ; "`"
.text:0000000000004162                 xor     edi, edi        ; domainname
.text:0000000000004164                 mov     edx, 5          ; category
.text:0000000000004169                 call    _dcgettext
.text:000000000000416E                 mov     rcx, rax
.text:0000000000004171                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004176                 lea     rax, asc_8F37   ; "`"
.text:000000000000417D                 cmp     rcx, rax
.text:0000000000004180                 jz      loc_451E
.text:0000000000004186
.text:0000000000004186 loc_4186:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004186                 lea     rsi, asc_8F35   ; "'"
.text:000000000000418D                 xor     edi, edi        ; domainname
.text:000000000000418F                 mov     edx, 5          ; category
.text:0000000000004194                 call    _dcgettext
.text:0000000000004199                 mov     rcx, rax
.text:000000000000419C                 mov     [rsp+0E8h+var_88], rax
.text:00000000000041A1                 lea     rax, asc_8F35   ; "'"
.text:00000000000041A8                 cmp     rcx, rax
.text:00000000000041AB                 jz      loc_4534
.text:00000000000041B1
.text:00000000000041B1 loc_41B1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000041B1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000041B1                 xor     r15d, r15d
.text:00000000000041B4                 test    ebx, ebx
.text:00000000000041B6                 jz      loc_437D
.text:00000000000041BC
.text:00000000000041BC loc_41BC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000041BC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000041BC                 test    ebx, ebx
.text:00000000000041BE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000041C3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000041C8                 xor     r12d, r12d
.text:00000000000041CB                 mov     rdi, rbx        ; s
.text:00000000000041CE                 call    _strlen
.text:00000000000041D3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000041D8                 mov     [rsp+0E8h+n], rax
.text:00000000000041DD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000041E2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000041E7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000041F0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000041F5                 jmp     loc_3493
.text:00000000000041FA ; ---------------------------------------------------------------------------
.text:00000000000041FA
.text:00000000000041FA loc_41FA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000041FA                                         ; DATA XREF: .rodata:jpt_3451↓o
.text:00000000000041FA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000041FF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004204                 xor     r12d, r12d
.text:0000000000004207                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004210                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004215                 xor     r15d, r15d
.text:0000000000004218                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000421D                 mov     [rsp+0E8h+n], 0
.text:0000000000004226                 mov     [rsp+0E8h+s2], 0
.text:000000000000422F                 jmp     loc_3493
.text:0000000000004234 ; ---------------------------------------------------------------------------
.text:0000000000004234
.text:0000000000004234 loc_4234:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004234                                         ; DATA XREF: .rodata:jpt_3451↓o
.text:0000000000004234                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004239                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000423E                 xor     r12d, r12d
.text:0000000000004241                 mov     [rsp+0E8h+var_98], 0
.text:000000000000424A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000424F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004254                 jmp     loc_3473
.text:0000000000004259 ; ---------------------------------------------------------------------------
.text:0000000000004259
.text:0000000000004259 loc_4259:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004259                 cmp     r13, r15
.text:000000000000425C                 jbe     short loc_4263
.text:000000000000425E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004263
.text:0000000000004263 loc_4263:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004263                 lea     rax, [rcx+2]
.text:0000000000004267                 cmp     r13, rax
.text:000000000000426A                 jbe     short loc_4272
.text:000000000000426C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004272
.text:0000000000004272 loc_4272:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004272                 mov     eax, r12d
.text:0000000000004275                 lea     r15, [rcx+3]
.text:0000000000004279                 xor     r12d, r12d
.text:000000000000427C                 mov     ebx, 30h ; '0'
.text:0000000000004281                 jmp     loc_35E8
.text:0000000000004281 ; ---------------------------------------------------------------------------
.text:0000000000004286                 align 10h
.text:0000000000004290
.text:0000000000004290 loc_4290:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004290                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004295                 mov     rbp, r11
.text:0000000000004298                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000429C                 jmp     loc_3F49
.text:00000000000042A1 ; ---------------------------------------------------------------------------
.text:00000000000042A1
.text:00000000000042A1 loc_42A1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000042A1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000042A6                 xor     r12d, r12d
.text:00000000000042A9                 jmp     loc_3DB0
.text:00000000000042AE ; ---------------------------------------------------------------------------
.text:00000000000042AE
.text:00000000000042AE loc_42AE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000042AE                 xor     r10d, r10d
.text:00000000000042B1                 jmp     loc_3E6D
.text:00000000000042B6 ; ---------------------------------------------------------------------------
.text:00000000000042B6
.text:00000000000042B6 loc_42B6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000042B6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000042BF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000042C4                 xor     r12d, r12d
.text:00000000000042C7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000042CC                 jmp     loc_40AB
.text:00000000000042D1 ; ---------------------------------------------------------------------------
.text:00000000000042D1
.text:00000000000042D1 loc_42D1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000042D1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000042D6                 mov     rsi, r14
.text:00000000000042D9                 mov     rcx, r13
.text:00000000000042DC                 mov     rax, rbx
.text:00000000000042DF                 mov     rdi, rbx
.text:00000000000042E2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000042E8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000042ED                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000042F5                 cmp     rsi, r11
.text:00000000000042F8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000042FE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004306                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000430B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004310                 jnb     short loc_4338
.text:0000000000004312                 cmp     byte ptr [rcx], 0
.text:0000000000004315                 jnz     short loc_4327
.text:0000000000004317                 jmp     short loc_4338
.text:0000000000004317 ; ---------------------------------------------------------------------------
.text:0000000000004319                 align 20h
.text:0000000000004320
.text:0000000000004320 loc_4320:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004320                 cmp     byte ptr [r9+rax], 0
.text:0000000000004325                 jz      short loc_4335
.text:0000000000004327
.text:0000000000004327 loc_4327:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004327                 add     rax, 1
.text:000000000000432B                 lea     rdx, [rbp+rax+0]
.text:0000000000004330                 cmp     r11, rdx
.text:0000000000004333                 ja      short loc_4320
.text:0000000000004335
.text:0000000000004335 loc_4335:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004335                 mov     rdi, rax
.text:0000000000004338
.text:0000000000004338 loc_4338:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004338                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004338                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000433D                 xor     r12d, r12d
.text:0000000000004340                 jmp     loc_3DA6
.text:0000000000004345 ; ---------------------------------------------------------------------------
.text:0000000000004345
.text:0000000000004345 loc_4345:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004345                 mov     rdi, rbx
.text:0000000000004348                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000434E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004353                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004359                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004361                 xor     r12d, r12d
.text:0000000000004364                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004369                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000436E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004373                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004378                 jmp     loc_3DA6
.text:000000000000437D ; ---------------------------------------------------------------------------
.text:000000000000437D
.text:000000000000437D loc_437D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000437D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004382                 movzx   eax, byte ptr [rdx]
.text:0000000000004385                 test    al, al
.text:0000000000004387                 jz      loc_41BC
.text:000000000000438D                 nop     dword ptr [rax]
.text:0000000000004390
.text:0000000000004390 loc_4390:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004390                 cmp     r13, r15
.text:0000000000004393                 jbe     short loc_4399
.text:0000000000004395                 mov     [r14+r15], al
.text:0000000000004399
.text:0000000000004399 loc_4399:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004399                 add     r15, 1
.text:000000000000439D                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000043A2                 test    al, al
.text:00000000000043A4                 jnz     short loc_4390
.text:00000000000043A6                 jmp     loc_41BC
.text:00000000000043AB ; ---------------------------------------------------------------------------
.text:00000000000043AB
.text:00000000000043AB loc_43AB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000043AB                 mov     eax, edx
.text:00000000000043AD                 jmp     loc_3907
.text:00000000000043B2 ; ---------------------------------------------------------------------------
.text:00000000000043B2
.text:00000000000043B2 loc_43B2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000043B2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000043B6                 cmp     bl, 3Eh ; '>'
.text:00000000000043B9                 ja      loc_3C30
.text:00000000000043BF                 mov     rax, 7000A38200000000h
.text:00000000000043C9                 bt      rax, rbx
.text:00000000000043CD                 jnb     loc_3C30
.text:00000000000043D3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000043D8                 jnz     loc_45C2
.text:00000000000043DE                 cmp     r13, r15
.text:00000000000043E1                 jbe     short loc_43E8
.text:00000000000043E3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000043E8
.text:00000000000043E8 loc_43E8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000043E8                 lea     rax, [r15+1]
.text:00000000000043EC                 cmp     r13, rax
.text:00000000000043EF                 jbe     short loc_43F7
.text:00000000000043F1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000043F7
.text:00000000000043F7 loc_43F7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000043F7                 lea     rax, [r15+2]
.text:00000000000043FB                 cmp     r13, rax
.text:00000000000043FE                 jbe     short loc_4406
.text:0000000000004400                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004406
.text:0000000000004406 loc_4406:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004406                 lea     rax, [r15+3]
.text:000000000000440A                 cmp     r13, rax
.text:000000000000440D                 jbe     short loc_4415
.text:000000000000440F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004415
.text:0000000000004415 loc_4415:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004415                 add     r15, 4
.text:0000000000004419                 xor     edx, edx
.text:000000000000441B                 xor     r12d, r12d
.text:000000000000441E                 xor     eax, eax
.text:0000000000004420                 mov     rbp, rcx
.text:0000000000004423                 jmp     loc_35E8
.text:0000000000004428 ; ---------------------------------------------------------------------------
.text:0000000000004428
.text:0000000000004428 loc_4428:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004428                                         ; DATA XREF: .rodata:jpt_3451↓o
.text:0000000000004428                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000442A                 jz      loc_45B8
.text:0000000000004430                 lea     rax, asc_8F35   ; "'"
.text:0000000000004437                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000443C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004441                 xor     r12d, r12d
.text:0000000000004444                 mov     [rsp+0E8h+var_98], 0
.text:000000000000444D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004452                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004457                 mov     [rsp+0E8h+n], 1
.text:0000000000004460                 xor     r15d, r15d
.text:0000000000004463                 mov     [rsp+0E8h+s2], rax
.text:0000000000004468                 jmp     loc_3493
.text:0000000000004468 ; ---------------------------------------------------------------------------
.text:000000000000446D                 align 10h
.text:0000000000004470
.text:0000000000004470 loc_4470:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004470                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004470                 mov     rbp, r11
.text:0000000000004473                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004478                 jmp     loc_3F49
.text:000000000000447D ; ---------------------------------------------------------------------------
.text:000000000000447D
.text:000000000000447D loc_447D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000447D                 lea     rax, unk_8F33
.text:0000000000004484                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004489                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000448E                 xor     r12d, r12d
.text:0000000000004491                 mov     [rsp+0E8h+var_98], 0
.text:000000000000449A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000449F                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000044A4                 mov     [rsp+0E8h+n], 1
.text:00000000000044AD                 xor     r15d, r15d
.text:00000000000044B0                 mov     [rsp+0E8h+s2], rax
.text:00000000000044B5                 jmp     loc_3493
.text:00000000000044BA ; ---------------------------------------------------------------------------
.text:00000000000044BA
.text:00000000000044BA loc_44BA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000044BA                 mov     eax, edx
.text:00000000000044BC
.text:00000000000044BC loc_44BC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000044BC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000044BC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000044C1                 test    rbx, rbx
.text:00000000000044C4                 jz      short loc_44F2
.text:00000000000044C6                 test    al, al
.text:00000000000044C8                 jz      short loc_44F2
.text:00000000000044CA                 movzx   ecx, byte ptr [rbx]
.text:00000000000044CD                 mov     rax, rbx
.text:00000000000044D0                 test    cl, cl
.text:00000000000044D2                 jz      short loc_44F2
.text:00000000000044D4                 mov     rdx, r15
.text:00000000000044D7                 sub     rax, r15
.text:00000000000044DA
.text:00000000000044DA loc_44DA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000044DA                 cmp     r13, rdx
.text:00000000000044DD                 jbe     short loc_44E3
.text:00000000000044DF                 mov     [r14+rdx], cl
.text:00000000000044E3
.text:00000000000044E3 loc_44E3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000044E3                 add     rdx, 1
.text:00000000000044E7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000044EB                 test    cl, cl
.text:00000000000044ED                 jnz     short loc_44DA
.text:00000000000044EF                 mov     r15, rdx
.text:00000000000044F2
.text:00000000000044F2 loc_44F2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000044F2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000044F2                 cmp     r13, r15
.text:00000000000044F5                 jbe     loc_3F99
.text:00000000000044FB                 mov     byte ptr [r14+r15], 0
.text:0000000000004500                 jmp     loc_3F99
.text:0000000000004505 ; ---------------------------------------------------------------------------
.text:0000000000004505
.text:0000000000004505 loc_4505:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004505                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000450A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000450F                 mov     rbp, r11
.text:0000000000004512                 setz    al
.text:0000000000004515                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004519                 jmp     loc_3F49
.text:000000000000451E ; ---------------------------------------------------------------------------
.text:000000000000451E
.text:000000000000451E loc_451E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000451E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004522                 mov     rdi, rcx
.text:0000000000004525                 call    gettext_quote
.text:000000000000452A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000452F                 jmp     loc_4186
.text:0000000000004534 ; ---------------------------------------------------------------------------
.text:0000000000004534
.text:0000000000004534 loc_4534:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004534                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004538                 mov     rdi, rcx
.text:000000000000453B                 call    gettext_quote
.text:0000000000004540                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004545                 jmp     loc_41B1
.text:000000000000454A ; ---------------------------------------------------------------------------
.text:000000000000454A
.text:000000000000454A loc_454A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000454A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000454F                 mov     rbp, r11
.text:0000000000004552                 mov     eax, edx
.text:0000000000004554                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004558                 jmp     loc_3F49
.text:000000000000455D ; ---------------------------------------------------------------------------
.text:000000000000455D
.text:000000000000455D loc_455D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000455D                 sub     rsp, 8
.text:0000000000004561                 mov     r8d, 5
.text:0000000000004567                 mov     rcx, r11
.text:000000000000456A                 push    [rsp+0F0h+var_88]
.text:000000000000456E                 push    [rsp+0F8h+var_80]
.text:0000000000004572                 mov     rdi, r14
.text:0000000000004575                 push    [rsp+100h+var_C8]
.text:0000000000004579                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004581                 mov     rdx, [rsp+108h+s]
.text:0000000000004586                 mov     rsi, [rsp+108h+var_98]
.text:000000000000458B                 call    quotearg_buffer_restyled
.text:0000000000004590                 add     rsp, 20h
.text:0000000000004594                 mov     r15, rax
.text:0000000000004597                 jmp     loc_3F99
.text:000000000000459C ; ---------------------------------------------------------------------------
.text:000000000000459C
.text:000000000000459C loc_459C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000459C                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000045A1                 jmp     loc_44BC
.text:00000000000045A6 ; ---------------------------------------------------------------------------
.text:00000000000045A6
.text:00000000000045A6 loc_45A6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000045A6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000045AE                 jmp     loc_3F49
.text:00000000000045B3 ; ---------------------------------------------------------------------------
.text:00000000000045B3
.text:00000000000045B3 loc_45B3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000045B3                 call    ___stack_chk_fail
.text:00000000000045B8 ; ---------------------------------------------------------------------------
.text:00000000000045B8
.text:00000000000045B8 loc_45B8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000045B8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000045BD                 jmp     loc_4031
.text:00000000000045C2 ; ---------------------------------------------------------------------------
.text:00000000000045C2
.text:00000000000045C2 loc_45C2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000045C2                 mov     rbp, r11
.text:00000000000045C5                 jmp     loc_3F60
.text:00000000000045CA ; ---------------------------------------------------------------------------
.text:00000000000045CA
.text:00000000000045CA loc_45CA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000045CA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000045CF                 xor     eax, eax
.text:00000000000045D1                 xor     r12d, r12d
.text:00000000000045D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000045DD                 jmp     loc_3B84
.text:00000000000045E2 ; ---------------------------------------------------------------------------
.text:00000000000045E2
.text:00000000000045E2 loc_45E2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000045E2                 mov     rdx, r13
.text:00000000000045E5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000045EA                 jmp     loc_3BE2
.text:00000000000045EF ; ---------------------------------------------------------------------------
.text:00000000000045EF
.text:00000000000045EF def_3451:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000045EF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000045EF ; } // starts at 33C0
.text:00000000000045EF quotearg_buffer_restyled endp
.text:00000000000045EF
.text:00000000000045EF ; ---------------------------------------------------------------------------
.text:00000000000045F4                 align 20h
.text:0000000000004600
.text:0000000000004600 ; =============== S U B R O U T I N E =======================================
.text:0000000000004600
.text:0000000000004600
.text:0000000000004600 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004600                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004600
.text:0000000000004600 var_50          = qword ptr -50h
.text:0000000000004600 var_48          = qword ptr -48h
.text:0000000000004600 var_40          = dword ptr -40h
.text:0000000000004600 var_3C          = dword ptr -3Ch
.text:0000000000004600
.text:0000000000004600 ; __unwind {
.text:0000000000004600                 push    r15
.text:0000000000004602                 push    r14
.text:0000000000004604                 movsxd  r15, edi
.text:0000000000004607                 push    r13
.text:0000000000004609                 push    r12
.text:000000000000460B                 mov     r14, rdx
.text:000000000000460E                 push    rbp
.text:000000000000460F                 push    rbx
.text:0000000000004610                 mov     rbp, rcx
.text:0000000000004613                 sub     rsp, 28h
.text:0000000000004617                 mov     [rsp+58h+var_50], rsi
.text:000000000000461C                 call    ___errno_location
.text:0000000000004621                 mov     r13, rax
.text:0000000000004624                 mov     eax, [rax]
.text:0000000000004626                 test    r15d, r15d
.text:0000000000004629                 mov     rbx, cs:slotvec
.text:0000000000004630                 mov     [rsp+58h+var_40], eax
.text:0000000000004634                 js      loc_47A1
.text:000000000000463A                 cmp     cs:nslots, r15d
.text:0000000000004641                 jg      short loc_46A5
.text:0000000000004643                 cmp     r15d, 7FFFFFFFh
.text:000000000000464A                 jz      loc_47A6
.text:0000000000004650                 lea     r12d, [r15+1]
.text:0000000000004654                 lea     rax, slotvec0
.text:000000000000465B                 movsxd  rsi, r12d
.text:000000000000465E                 shl     rsi, 4
.text:0000000000004662                 cmp     rbx, rax
.text:0000000000004665                 jz      loc_4780
.text:000000000000466B                 mov     rdi, rbx
.text:000000000000466E                 call    xrealloc
.text:0000000000004673                 mov     rbx, rax
.text:0000000000004676                 mov     cs:slotvec, rax
.text:000000000000467D
.text:000000000000467D loc_467D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000467D                 movsxd  rdi, cs:nslots
.text:0000000000004684                 mov     edx, r12d
.text:0000000000004687                 xor     esi, esi        ; c
.text:0000000000004689                 sub     edx, edi
.text:000000000000468B                 shl     rdi, 4
.text:000000000000468F                 movsxd  rdx, edx
.text:0000000000004692                 add     rdi, rbx        ; s
.text:0000000000004695                 shl     rdx, 4          ; n
.text:0000000000004699                 call    _memset
.text:000000000000469E                 mov     cs:nslots, r12d
.text:00000000000046A5
.text:00000000000046A5 loc_46A5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000046A5                 mov     eax, [rbp+4]
.text:00000000000046A8                 shl     r15, 4
.text:00000000000046AC                 sub     rsp, 8
.text:00000000000046B0                 add     rbx, r15
.text:00000000000046B3                 lea     r15, [rbp+8]
.text:00000000000046B7                 mov     r8d, [rbp+0]
.text:00000000000046BB                 mov     r11, [rbx]
.text:00000000000046BE                 mov     r12, [rbx+8]
.text:00000000000046C2                 mov     rcx, r14
.text:00000000000046C5                 or      eax, 1
.text:00000000000046C8                 mov     [rsp+60h+var_3C], eax
.text:00000000000046CC                 push    qword ptr [rbp+30h]
.text:00000000000046CF                 mov     r9d, eax
.text:00000000000046D2                 push    qword ptr [rbp+28h]
.text:00000000000046D5                 push    r15
.text:00000000000046D7                 mov     rsi, r11
.text:00000000000046DA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000046DF                 mov     rdi, r12
.text:00000000000046E2                 mov     [rsp+78h+var_48], r11
.text:00000000000046E7                 call    quotearg_buffer_restyled
.text:00000000000046EC                 add     rsp, 20h
.text:00000000000046F0                 mov     r11, [rsp+58h+var_48]
.text:00000000000046F5                 cmp     r11, rax
.text:00000000000046F8                 ja      short loc_4761
.text:00000000000046FA                 lea     rsi, [rax+1]
.text:00000000000046FE                 lea     rax, slot0
.text:0000000000004705                 cmp     r12, rax
.text:0000000000004708                 mov     [rbx], rsi
.text:000000000000470B                 jz      short loc_471F
.text:000000000000470D                 mov     rdi, r12        ; ptr
.text:0000000000004710                 mov     [rsp+58h+var_48], rsi
.text:0000000000004715                 call    _free
.text:000000000000471A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000471F
.text:000000000000471F loc_471F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000471F                 mov     rdi, rsi
.text:0000000000004722                 mov     [rsp+58h+var_48], rsi
.text:0000000000004727                 call    xmalloc
.text:000000000000472C                 sub     rsp, 8
.text:0000000000004730                 mov     [rbx+8], rax
.text:0000000000004734                 mov     r8d, [rbp+0]
.text:0000000000004738                 push    qword ptr [rbp+30h]
.text:000000000000473B                 push    qword ptr [rbp+28h]
.text:000000000000473E                 mov     rcx, r14
.text:0000000000004741                 push    r15
.text:0000000000004743                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004748                 mov     rdi, rax
.text:000000000000474B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004750                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004755                 mov     r12, rax
.text:0000000000004758                 call    quotearg_buffer_restyled
.text:000000000000475D                 add     rsp, 20h
.text:0000000000004761
.text:0000000000004761 loc_4761:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004761                 mov     eax, [rsp+58h+var_40]
.text:0000000000004765                 mov     [r13+0], eax
.text:0000000000004769                 add     rsp, 28h
.text:000000000000476D                 mov     rax, r12
.text:0000000000004770                 pop     rbx
.text:0000000000004771                 pop     rbp
.text:0000000000004772                 pop     r12
.text:0000000000004774                 pop     r13
.text:0000000000004776                 pop     r14
.text:0000000000004778                 pop     r15
.text:000000000000477A                 retn
.text:000000000000477A ; ---------------------------------------------------------------------------
.text:000000000000477B                 align 20h
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004780                 xor     edi, edi
.text:0000000000004782                 call    xrealloc
.text:0000000000004787                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000478F                 mov     rbx, rax
.text:0000000000004792                 mov     cs:slotvec, rax
.text:0000000000004799                 movups  xmmword ptr [rax], xmm0
.text:000000000000479C                 jmp     loc_467D
.text:00000000000047A1 ; ---------------------------------------------------------------------------
.text:00000000000047A1
.text:00000000000047A1 loc_47A1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000047A1                 call    _abort
.text:00000000000047A6 ; ---------------------------------------------------------------------------
.text:00000000000047A6
.text:00000000000047A6 loc_47A6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000047A6                 call    xalloc_die
.text:00000000000047A6 ; } // starts at 4600
.text:00000000000047A6 quotearg_n_options endp
.text:00000000000047A6
.text:00000000000047A6 ; ---------------------------------------------------------------------------
.text:00000000000047AB                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0 ; Attributes: info_from_lumina
.text:00000000000047B0
.text:00000000000047B0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000047B0                 public clone_quoting_options
.text:00000000000047B0 clone_quoting_options proc near
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 push    r12
.text:00000000000047B2                 push    rbp
.text:00000000000047B3                 push    rbx
.text:00000000000047B4                 mov     rbx, rdi
.text:00000000000047B7                 call    ___errno_location
.text:00000000000047BC                 mov     r12d, [rax]
.text:00000000000047BF                 mov     rbp, rax
.text:00000000000047C2                 lea     rax, default_quoting_options
.text:00000000000047C9                 test    rbx, rbx
.text:00000000000047CC                 mov     esi, 38h ; '8'  ; n
.text:00000000000047D1                 cmovz   rbx, rax
.text:00000000000047D5                 mov     rdi, rbx        ; src
.text:00000000000047D8                 call    xmemdup
.text:00000000000047DD                 mov     [rbp+0], r12d
.text:00000000000047E1                 pop     rbx
.text:00000000000047E2                 pop     rbp
.text:00000000000047E3                 pop     r12
.text:00000000000047E5                 retn
.text:00000000000047E5 ; } // starts at 47B0
.text:00000000000047E5 clone_quoting_options endp
.text:00000000000047E5
.text:00000000000047E5 ; ---------------------------------------------------------------------------
.text:00000000000047E6                 align 10h
.text:00000000000047F0
.text:00000000000047F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047F0
.text:00000000000047F0
.text:00000000000047F0                 public get_quoting_style
.text:00000000000047F0 get_quoting_style proc near
.text:00000000000047F0 ; __unwind {
.text:00000000000047F0                 lea     rax, default_quoting_options
.text:00000000000047F7                 test    rdi, rdi
.text:00000000000047FA                 cmovz   rdi, rax
.text:00000000000047FE                 mov     eax, [rdi]
.text:0000000000004800                 retn
.text:0000000000004800 ; } // starts at 47F0
.text:0000000000004800 get_quoting_style endp
.text:0000000000004800
.text:0000000000004800 ; ---------------------------------------------------------------------------
.text:0000000000004801                 align 10h
.text:0000000000004810
.text:0000000000004810 ; =============== S U B R O U T I N E =======================================
.text:0000000000004810
.text:0000000000004810
.text:0000000000004810                 public set_quoting_style
.text:0000000000004810 set_quoting_style proc near
.text:0000000000004810 ; __unwind {
.text:0000000000004810                 lea     rax, default_quoting_options
.text:0000000000004817                 test    rdi, rdi
.text:000000000000481A                 cmovz   rdi, rax
.text:000000000000481E                 mov     [rdi], esi
.text:0000000000004820                 retn
.text:0000000000004820 ; } // starts at 4810
.text:0000000000004820 set_quoting_style endp
.text:0000000000004820
.text:0000000000004820 ; ---------------------------------------------------------------------------
.text:0000000000004821                 align 10h
.text:0000000000004830
.text:0000000000004830 ; =============== S U B R O U T I N E =======================================
.text:0000000000004830
.text:0000000000004830 ; Attributes: info_from_lumina
.text:0000000000004830
.text:0000000000004830 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004830                 public set_char_quoting
.text:0000000000004830 set_char_quoting proc near
.text:0000000000004830 ; __unwind {
.text:0000000000004830                 lea     rax, default_quoting_options
.text:0000000000004837                 test    rdi, rdi
.text:000000000000483A                 mov     ecx, esi
.text:000000000000483C                 cmovz   rdi, rax
.text:0000000000004840                 mov     eax, esi
.text:0000000000004842                 and     ecx, 1Fh
.text:0000000000004845                 shr     al, 5
.text:0000000000004848                 movzx   eax, al
.text:000000000000484B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004850                 mov     esi, [rdi]
.text:0000000000004852                 mov     eax, esi
.text:0000000000004854                 shr     eax, cl
.text:0000000000004856                 xor     edx, eax
.text:0000000000004858                 and     eax, 1
.text:000000000000485B                 and     edx, 1
.text:000000000000485E                 shl     edx, cl
.text:0000000000004860                 xor     edx, esi
.text:0000000000004862                 mov     [rdi], edx
.text:0000000000004864                 retn
.text:0000000000004864 ; } // starts at 4830
.text:0000000000004864 set_char_quoting endp
.text:0000000000004864
.text:0000000000004864 ; ---------------------------------------------------------------------------
.text:0000000000004865                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870
.text:0000000000004870                 public set_quoting_flags
.text:0000000000004870 set_quoting_flags proc near
.text:0000000000004870 ; __unwind {
.text:0000000000004870                 lea     rax, default_quoting_options
.text:0000000000004877                 test    rdi, rdi
.text:000000000000487A                 cmovz   rdi, rax
.text:000000000000487E                 mov     eax, [rdi+4]
.text:0000000000004881                 mov     [rdi+4], esi
.text:0000000000004884                 retn
.text:0000000000004884 ; } // starts at 4870
.text:0000000000004884 set_quoting_flags endp
.text:0000000000004884
.text:0000000000004884 ; ---------------------------------------------------------------------------
.text:0000000000004885                 align 10h
.text:0000000000004890
.text:0000000000004890 ; =============== S U B R O U T I N E =======================================
.text:0000000000004890
.text:0000000000004890 ; Attributes: info_from_lumina
.text:0000000000004890
.text:0000000000004890 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004890                 public set_custom_quoting
.text:0000000000004890 set_custom_quoting proc near
.text:0000000000004890 ; __unwind {
.text:0000000000004890                 lea     rax, default_quoting_options
.text:0000000000004897                 test    rdi, rdi
.text:000000000000489A                 cmovz   rdi, rax
.text:000000000000489E                 test    rsi, rsi
.text:00000000000048A1                 mov     dword ptr [rdi], 0Ah
.text:00000000000048A7                 jz      short loc_48B7
.text:00000000000048A9                 test    rdx, rdx
.text:00000000000048AC                 jz      short loc_48B7
.text:00000000000048AE                 mov     [rdi+28h], rsi
.text:00000000000048B2                 mov     [rdi+30h], rdx
.text:00000000000048B6                 retn
.text:00000000000048B7 ; ---------------------------------------------------------------------------
.text:00000000000048B7
.text:00000000000048B7 loc_48B7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000048B7                                         ; set_custom_quoting+1C↑j
.text:00000000000048B7                 sub     rsp, 8
.text:00000000000048BB                 call    _abort
.text:00000000000048BB ; } // starts at 4890
.text:00000000000048BB set_custom_quoting endp
.text:00000000000048BB
.text:00000000000048C0
.text:00000000000048C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048C0
.text:00000000000048C0 ; Attributes: info_from_lumina
.text:00000000000048C0
.text:00000000000048C0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000048C0                 public quotearg_buffer
.text:00000000000048C0 quotearg_buffer proc near
.text:00000000000048C0
.text:00000000000048C0 var_40          = qword ptr -40h
.text:00000000000048C0
.text:00000000000048C0 ; __unwind {
.text:00000000000048C0                 push    r15
.text:00000000000048C2                 push    r14
.text:00000000000048C4                 lea     rax, default_quoting_options
.text:00000000000048CB                 push    r13
.text:00000000000048CD                 push    r12
.text:00000000000048CF                 mov     r13, rdi
.text:00000000000048D2                 push    rbp
.text:00000000000048D3                 push    rbx
.text:00000000000048D4                 mov     rbx, r8
.text:00000000000048D7                 mov     r14, rsi
.text:00000000000048DA                 mov     r15, rdx
.text:00000000000048DD                 sub     rsp, 18h
.text:00000000000048E1                 test    r8, r8
.text:00000000000048E4                 cmovz   rbx, rax
.text:00000000000048E8                 mov     [rsp+48h+var_40], rcx
.text:00000000000048ED                 call    ___errno_location
.text:00000000000048F2                 mov     r12d, [rax]
.text:00000000000048F5                 mov     rbp, rax
.text:00000000000048F8                 lea     rax, [rbx+8]
.text:00000000000048FC                 sub     rsp, 8
.text:0000000000004900                 mov     r9d, [rbx+4]
.text:0000000000004904                 push    qword ptr [rbx+30h]
.text:0000000000004907                 mov     r8d, [rbx]
.text:000000000000490A                 push    qword ptr [rbx+28h]
.text:000000000000490D                 mov     rdx, r15
.text:0000000000004910                 push    rax
.text:0000000000004911                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004916                 mov     rsi, r14
.text:0000000000004919                 mov     rdi, r13
.text:000000000000491C                 call    quotearg_buffer_restyled
.text:0000000000004921                 mov     [rbp+0], r12d
.text:0000000000004925                 add     rsp, 38h
.text:0000000000004929                 pop     rbx
.text:000000000000492A                 pop     rbp
.text:000000000000492B                 pop     r12
.text:000000000000492D                 pop     r13
.text:000000000000492F                 pop     r14
.text:0000000000004931                 pop     r15
.text:0000000000004933                 retn
.text:0000000000004933 ; } // starts at 48C0
.text:0000000000004933 quotearg_buffer endp
.text:0000000000004933
.text:0000000000004933 ; ---------------------------------------------------------------------------
.text:0000000000004934                 align 20h
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940 ; Attributes: info_from_lumina
.text:0000000000004940
.text:0000000000004940 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004940                 public quotearg_alloc_mem
.text:0000000000004940 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004940
.text:0000000000004940 var_5C          = dword ptr -5Ch
.text:0000000000004940 var_58          = qword ptr -58h
.text:0000000000004940 var_50          = qword ptr -50h
.text:0000000000004940 var_48          = qword ptr -48h
.text:0000000000004940 var_40          = qword ptr -40h
.text:0000000000004940
.text:0000000000004940 ; __unwind {
.text:0000000000004940                 push    r15
.text:0000000000004942                 push    r14
.text:0000000000004944                 lea     rax, default_quoting_options
.text:000000000000494B                 push    r13
.text:000000000000494D                 push    r12
.text:000000000000494F                 mov     r12, rdx
.text:0000000000004952                 push    rbp
.text:0000000000004953                 push    rbx
.text:0000000000004954                 mov     rbx, rcx
.text:0000000000004957                 mov     r14, rdi
.text:000000000000495A                 mov     r15, rsi
.text:000000000000495D                 sub     rsp, 38h
.text:0000000000004961                 test    rcx, rcx
.text:0000000000004964                 cmovz   rbx, rax
.text:0000000000004968                 xor     ebp, ebp
.text:000000000000496A                 call    ___errno_location
.text:000000000000496F                 test    r12, r12
.text:0000000000004972                 mov     r13, rax
.text:0000000000004975                 mov     eax, [rax]
.text:0000000000004977                 setz    bpl
.text:000000000000497B                 or      ebp, [rbx+4]
.text:000000000000497E                 lea     r10, [rbx+8]
.text:0000000000004982                 sub     rsp, 8
.text:0000000000004986                 mov     r8d, [rbx]
.text:0000000000004989                 mov     rcx, r15
.text:000000000000498C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004990                 push    qword ptr [rbx+30h]
.text:0000000000004993                 mov     rdx, r14
.text:0000000000004996                 push    qword ptr [rbx+28h]
.text:0000000000004999                 push    r10
.text:000000000000499B                 xor     esi, esi
.text:000000000000499D                 mov     r9d, ebp
.text:00000000000049A0                 xor     edi, edi
.text:00000000000049A2                 mov     [rsp+88h+var_48], r10
.text:00000000000049A7                 call    quotearg_buffer_restyled
.text:00000000000049AC                 lea     rsi, [rax+1]
.text:00000000000049B0                 mov     [rsp+88h+var_40], rax
.text:00000000000049B5                 add     rsp, 20h
.text:00000000000049B9                 mov     rdi, rsi
.text:00000000000049BC                 mov     [rsp+68h+var_50], rsi
.text:00000000000049C1                 call    xmalloc
.text:00000000000049C6                 mov     [rsp+68h+var_58], rax
.text:00000000000049CB                 sub     rsp, 8
.text:00000000000049CF                 push    qword ptr [rbx+30h]
.text:00000000000049D2                 push    qword ptr [rbx+28h]
.text:00000000000049D5                 mov     r10, [rsp+80h+var_48]
.text:00000000000049DA                 mov     r9d, ebp
.text:00000000000049DD                 mov     r8d, [rbx]
.text:00000000000049E0                 mov     rcx, r15
.text:00000000000049E3                 mov     rdx, r14
.text:00000000000049E6                 mov     rdi, rax
.text:00000000000049E9                 push    r10
.text:00000000000049EB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000049F0                 call    quotearg_buffer_restyled
.text:00000000000049F5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000049F9                 add     rsp, 20h
.text:00000000000049FD                 test    r12, r12
.text:0000000000004A00                 mov     [r13+0], eax
.text:0000000000004A04                 jz      short loc_4A0F
.text:0000000000004A06                 mov     r11, [rsp+68h+var_40]
.text:0000000000004A0B                 mov     [r12], r11
.text:0000000000004A0F
.text:0000000000004A0F loc_4A0F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000004A0F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004A14                 add     rsp, 38h
.text:0000000000004A18                 pop     rbx
.text:0000000000004A19                 pop     rbp
.text:0000000000004A1A                 pop     r12
.text:0000000000004A1C                 pop     r13
.text:0000000000004A1E                 pop     r14
.text:0000000000004A20                 pop     r15
.text:0000000000004A22                 retn
.text:0000000000004A22 ; } // starts at 4940
.text:0000000000004A22 quotearg_alloc_mem endp
.text:0000000000004A22
.text:0000000000004A22 ; ---------------------------------------------------------------------------
.text:0000000000004A23                 align 10h
.text:0000000000004A30
.text:0000000000004A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A30
.text:0000000000004A30
.text:0000000000004A30                 public quotearg_alloc
.text:0000000000004A30 quotearg_alloc  proc near
.text:0000000000004A30 ; __unwind {
.text:0000000000004A30                 mov     rcx, rdx
.text:0000000000004A33                 xor     edx, edx
.text:0000000000004A35                 jmp     quotearg_alloc_mem
.text:0000000000004A35 ; } // starts at 4A30
.text:0000000000004A35 quotearg_alloc  endp
.text:0000000000004A35
.text:0000000000004A35 ; ---------------------------------------------------------------------------
.text:0000000000004A3A                 align 20h
.text:0000000000004A40
.text:0000000000004A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A40
.text:0000000000004A40 ; Attributes: info_from_lumina
.text:0000000000004A40
.text:0000000000004A40 ; void __cdecl quotearg_free()
.text:0000000000004A40                 public quotearg_free
.text:0000000000004A40 quotearg_free   proc near
.text:0000000000004A40 ; __unwind {
.text:0000000000004A40                 mov     eax, cs:nslots
.text:0000000000004A46                 push    r12
.text:0000000000004A48                 mov     r12, cs:slotvec
.text:0000000000004A4F                 push    rbp
.text:0000000000004A50                 push    rbx
.text:0000000000004A51                 cmp     eax, 1
.text:0000000000004A54                 jle     short loc_4A81
.text:0000000000004A56                 sub     eax, 2
.text:0000000000004A59                 lea     rbx, [r12+18h]
.text:0000000000004A5E                 shl     rax, 4
.text:0000000000004A62                 lea     rbp, [r12+rax+28h]
.text:0000000000004A67                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004A70
.text:0000000000004A70 loc_4A70:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004A70                 mov     rdi, [rbx]      ; ptr
.text:0000000000004A73                 add     rbx, 10h
.text:0000000000004A77                 call    _free
.text:0000000000004A7C                 cmp     rbx, rbp
.text:0000000000004A7F                 jnz     short loc_4A70
.text:0000000000004A81
.text:0000000000004A81 loc_4A81:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004A81                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004A86                 lea     rbx, slot0
.text:0000000000004A8D                 cmp     rdi, rbx
.text:0000000000004A90                 jz      short loc_4AA9
.text:0000000000004A92                 call    _free
.text:0000000000004A97                 mov     cs:slotvec0, 100h
.text:0000000000004AA2                 mov     cs:off_20C078, rbx
.text:0000000000004AA9
.text:0000000000004AA9 loc_4AA9:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004AA9                 lea     rbx, slotvec0
.text:0000000000004AB0                 cmp     r12, rbx
.text:0000000000004AB3                 jz      short loc_4AC4
.text:0000000000004AB5                 mov     rdi, r12        ; ptr
.text:0000000000004AB8                 call    _free
.text:0000000000004ABD                 mov     cs:slotvec, rbx
.text:0000000000004AC4
.text:0000000000004AC4 loc_4AC4:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004AC4                 pop     rbx
.text:0000000000004AC5                 mov     cs:nslots, 1
.text:0000000000004ACF                 pop     rbp
.text:0000000000004AD0                 pop     r12
.text:0000000000004AD2                 retn
.text:0000000000004AD2 ; } // starts at 4A40
.text:0000000000004AD2 quotearg_free   endp
.text:0000000000004AD2
.text:0000000000004AD2 ; ---------------------------------------------------------------------------
.text:0000000000004AD3                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AE0
.text:0000000000004AE0
.text:0000000000004AE0                 public quotearg_n
.text:0000000000004AE0 quotearg_n      proc near
.text:0000000000004AE0 ; __unwind {
.text:0000000000004AE0                 lea     rcx, default_quoting_options
.text:0000000000004AE7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004AEE                 jmp     quotearg_n_options
.text:0000000000004AEE ; } // starts at 4AE0
.text:0000000000004AEE quotearg_n      endp
.text:0000000000004AEE
.text:0000000000004AEE ; ---------------------------------------------------------------------------
.text:0000000000004AF3                 align 20h
.text:0000000000004B00
.text:0000000000004B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B00
.text:0000000000004B00
.text:0000000000004B00                 public quotearg_n_mem
.text:0000000000004B00 quotearg_n_mem  proc near
.text:0000000000004B00 ; __unwind {
.text:0000000000004B00                 lea     rcx, default_quoting_options
.text:0000000000004B07                 jmp     quotearg_n_options
.text:0000000000004B07 ; } // starts at 4B00
.text:0000000000004B07 quotearg_n_mem  endp
.text:0000000000004B07
.text:0000000000004B07 ; ---------------------------------------------------------------------------
.text:0000000000004B0C                 align 10h
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10
.text:0000000000004B10                 public quotearg
.text:0000000000004B10 quotearg        proc near
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 lea     rcx, default_quoting_options
.text:0000000000004B17                 mov     rsi, rdi
.text:0000000000004B1A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B21                 xor     edi, edi
.text:0000000000004B23                 jmp     quotearg_n_options
.text:0000000000004B23 ; } // starts at 4B10
.text:0000000000004B23 quotearg        endp
.text:0000000000004B23
.text:0000000000004B23 ; ---------------------------------------------------------------------------
.text:0000000000004B28                 align 10h
.text:0000000000004B30
.text:0000000000004B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B30
.text:0000000000004B30
.text:0000000000004B30                 public quotearg_mem
.text:0000000000004B30 quotearg_mem    proc near
.text:0000000000004B30 ; __unwind {
.text:0000000000004B30                 lea     rcx, default_quoting_options
.text:0000000000004B37                 mov     rdx, rsi
.text:0000000000004B3A                 mov     rsi, rdi
.text:0000000000004B3D                 xor     edi, edi
.text:0000000000004B3F                 jmp     quotearg_n_options
.text:0000000000004B3F ; } // starts at 4B30
.text:0000000000004B3F quotearg_mem    endp
.text:0000000000004B3F
.text:0000000000004B3F ; ---------------------------------------------------------------------------
.text:0000000000004B44                 align 10h
.text:0000000000004B50
.text:0000000000004B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B50
.text:0000000000004B50 ; Attributes: info_from_lumina
.text:0000000000004B50
.text:0000000000004B50 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004B50                 public quotearg_n_style
.text:0000000000004B50 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004B50
.text:0000000000004B50 var_48          = dword ptr -48h
.text:0000000000004B50 var_44          = qword ptr -44h
.text:0000000000004B50 var_3C          = qword ptr -3Ch
.text:0000000000004B50 var_34          = qword ptr -34h
.text:0000000000004B50 var_2C          = qword ptr -2Ch
.text:0000000000004B50 var_24          = qword ptr -24h
.text:0000000000004B50 var_1C          = qword ptr -1Ch
.text:0000000000004B50 var_14          = dword ptr -14h
.text:0000000000004B50 var_10          = qword ptr -10h
.text:0000000000004B50
.text:0000000000004B50 ; __unwind {
.text:0000000000004B50                 sub     rsp, 48h
.text:0000000000004B54                 mov     rax, rdx
.text:0000000000004B57                 mov     rdx, fs:28h
.text:0000000000004B60                 mov     [rsp+48h+var_10], rdx
.text:0000000000004B65                 xor     edx, edx
.text:0000000000004B67                 cmp     esi, 0Ah
.text:0000000000004B6A                 jz      short loc_4BD4
.text:0000000000004B6C                 mov     [rsp+48h+var_48], esi
.text:0000000000004B6F                 mov     rcx, rsp
.text:0000000000004B72                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B79                 mov     rsi, rax
.text:0000000000004B7C                 mov     [rsp+48h+var_44], 0
.text:0000000000004B85                 mov     [rsp+48h+var_3C], 0
.text:0000000000004B8E                 mov     [rsp+48h+var_34], 0
.text:0000000000004B97                 mov     [rsp+48h+var_2C], 0
.text:0000000000004BA0                 mov     [rsp+48h+var_24], 0
.text:0000000000004BA9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004BB2                 mov     [rsp+48h+var_14], 0
.text:0000000000004BBA                 call    quotearg_n_options
.text:0000000000004BBF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004BC4                 xor     rcx, fs:28h
.text:0000000000004BCD                 jnz     short loc_4BD9
.text:0000000000004BCF                 add     rsp, 48h
.text:0000000000004BD3                 retn
.text:0000000000004BD4 ; ---------------------------------------------------------------------------
.text:0000000000004BD4
.text:0000000000004BD4 loc_4BD4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004BD4                 call    _abort
.text:0000000000004BD9 ; ---------------------------------------------------------------------------
.text:0000000000004BD9
.text:0000000000004BD9 loc_4BD9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004BD9                 call    ___stack_chk_fail
.text:0000000000004BD9 ; } // starts at 4B50
.text:0000000000004BD9 quotearg_n_style endp
.text:0000000000004BD9
.text:0000000000004BD9 ; ---------------------------------------------------------------------------
.text:0000000000004BDE                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BE0
.text:0000000000004BE0 ; Attributes: info_from_lumina
.text:0000000000004BE0
.text:0000000000004BE0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004BE0                 public quotearg_n_style_mem
.text:0000000000004BE0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004BE0
.text:0000000000004BE0 var_48          = dword ptr -48h
.text:0000000000004BE0 var_44          = qword ptr -44h
.text:0000000000004BE0 var_3C          = qword ptr -3Ch
.text:0000000000004BE0 var_34          = qword ptr -34h
.text:0000000000004BE0 var_2C          = qword ptr -2Ch
.text:0000000000004BE0 var_24          = qword ptr -24h
.text:0000000000004BE0 var_1C          = qword ptr -1Ch
.text:0000000000004BE0 var_14          = dword ptr -14h
.text:0000000000004BE0 var_10          = qword ptr -10h
.text:0000000000004BE0
.text:0000000000004BE0 ; __unwind {
.text:0000000000004BE0                 sub     rsp, 48h
.text:0000000000004BE4                 mov     rax, rdx
.text:0000000000004BE7                 mov     rdx, rcx
.text:0000000000004BEA                 mov     rcx, fs:28h
.text:0000000000004BF3                 mov     [rsp+48h+var_10], rcx
.text:0000000000004BF8                 xor     ecx, ecx
.text:0000000000004BFA                 cmp     esi, 0Ah
.text:0000000000004BFD                 jz      short loc_4C60
.text:0000000000004BFF                 mov     [rsp+48h+var_48], esi
.text:0000000000004C02                 mov     rcx, rsp
.text:0000000000004C05                 mov     rsi, rax
.text:0000000000004C08                 mov     [rsp+48h+var_44], 0
.text:0000000000004C11                 mov     [rsp+48h+var_3C], 0
.text:0000000000004C1A                 mov     [rsp+48h+var_34], 0
.text:0000000000004C23                 mov     [rsp+48h+var_2C], 0
.text:0000000000004C2C                 mov     [rsp+48h+var_24], 0
.text:0000000000004C35                 mov     [rsp+48h+var_1C], 0
.text:0000000000004C3E                 mov     [rsp+48h+var_14], 0
.text:0000000000004C46                 call    quotearg_n_options
.text:0000000000004C4B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004C50                 xor     rdx, fs:28h
.text:0000000000004C59                 jnz     short loc_4C65
.text:0000000000004C5B                 add     rsp, 48h
.text:0000000000004C5F                 retn
.text:0000000000004C60 ; ---------------------------------------------------------------------------
.text:0000000000004C60
.text:0000000000004C60 loc_4C60:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004C60                 call    _abort
.text:0000000000004C65 ; ---------------------------------------------------------------------------
.text:0000000000004C65
.text:0000000000004C65 loc_4C65:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004C65                 call    ___stack_chk_fail
.text:0000000000004C65 ; } // starts at 4BE0
.text:0000000000004C65 quotearg_n_style_mem endp
.text:0000000000004C65
.text:0000000000004C65 ; ---------------------------------------------------------------------------
.text:0000000000004C6A                 align 10h
.text:0000000000004C70
.text:0000000000004C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C70
.text:0000000000004C70
.text:0000000000004C70                 public quotearg_style
.text:0000000000004C70 quotearg_style  proc near               ; CODE XREF: main+25B↑p
.text:0000000000004C70 ; __unwind {
.text:0000000000004C70                 mov     rdx, rsi
.text:0000000000004C73                 mov     esi, edi
.text:0000000000004C75                 xor     edi, edi
.text:0000000000004C77                 jmp     quotearg_n_style
.text:0000000000004C77 ; } // starts at 4C70
.text:0000000000004C77 quotearg_style  endp
.text:0000000000004C77
.text:0000000000004C77 ; ---------------------------------------------------------------------------
.text:0000000000004C7C                 align 20h
.text:0000000000004C80
.text:0000000000004C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C80
.text:0000000000004C80
.text:0000000000004C80                 public quotearg_style_mem
.text:0000000000004C80 quotearg_style_mem proc near
.text:0000000000004C80 ; __unwind {
.text:0000000000004C80                 mov     rcx, rdx
.text:0000000000004C83                 mov     rdx, rsi
.text:0000000000004C86                 mov     esi, edi
.text:0000000000004C88                 xor     edi, edi
.text:0000000000004C8A                 jmp     quotearg_n_style_mem
.text:0000000000004C8A ; } // starts at 4C80
.text:0000000000004C8A quotearg_style_mem endp
.text:0000000000004C8A
.text:0000000000004C8A ; ---------------------------------------------------------------------------
.text:0000000000004C8F                 align 10h
.text:0000000000004C90
.text:0000000000004C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C90
.text:0000000000004C90 ; Attributes: info_from_lumina
.text:0000000000004C90
.text:0000000000004C90 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004C90                 public quotearg_char_mem
.text:0000000000004C90 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004C90                                         ; quotearg_colon+C↓j ...
.text:0000000000004C90
.text:0000000000004C90 var_48          = xmmword ptr -48h
.text:0000000000004C90 var_38          = xmmword ptr -38h
.text:0000000000004C90 var_28          = xmmword ptr -28h
.text:0000000000004C90 var_18          = qword ptr -18h
.text:0000000000004C90 var_10          = qword ptr -10h
.text:0000000000004C90
.text:0000000000004C90 ; __unwind {
.text:0000000000004C90                 sub     rsp, 48h
.text:0000000000004C94                 mov     ecx, edx
.text:0000000000004C96                 mov     rax, fs:28h
.text:0000000000004C9F                 mov     [rsp+48h+var_10], rax
.text:0000000000004CA4                 xor     eax, eax
.text:0000000000004CA6                 mov     rax, cs:qword_20C210
.text:0000000000004CAD                 mov     r8, rsp
.text:0000000000004CB0                 and     ecx, 1Fh
.text:0000000000004CB3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004CBB                 mov     [rsp+48h+var_18], rax
.text:0000000000004CC0                 mov     eax, edx
.text:0000000000004CC2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004CC6                 shr     al, 5
.text:0000000000004CC9                 movzx   eax, al
.text:0000000000004CCC                 lea     r9, [r8+rax*4+8]
.text:0000000000004CD1                 movdqa  xmm0, cs:xmmword_20C1F0
.text:0000000000004CD9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004CDE                 movdqa  xmm0, cs:xmmword_20C200
.text:0000000000004CE6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004CEB                 mov     edx, [r9]
.text:0000000000004CEE                 mov     eax, edx
.text:0000000000004CF0                 shr     eax, cl
.text:0000000000004CF2                 not     eax
.text:0000000000004CF4                 and     eax, 1
.text:0000000000004CF7                 shl     eax, cl
.text:0000000000004CF9                 mov     rcx, r8
.text:0000000000004CFC                 xor     eax, edx
.text:0000000000004CFE                 mov     rdx, rsi
.text:0000000000004D01                 mov     rsi, rdi
.text:0000000000004D04                 mov     [r9], eax
.text:0000000000004D07                 xor     edi, edi
.text:0000000000004D09                 call    quotearg_n_options
.text:0000000000004D0E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004D13                 xor     rsi, fs:28h
.text:0000000000004D1C                 jnz     short loc_4D23
.text:0000000000004D1E                 add     rsp, 48h
.text:0000000000004D22                 retn
.text:0000000000004D23 ; ---------------------------------------------------------------------------
.text:0000000000004D23
.text:0000000000004D23 loc_4D23:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004D23                 call    ___stack_chk_fail
.text:0000000000004D23 ; } // starts at 4C90
.text:0000000000004D23 quotearg_char_mem endp
.text:0000000000004D23
.text:0000000000004D23 ; ---------------------------------------------------------------------------
.text:0000000000004D28                 align 10h
.text:0000000000004D30
.text:0000000000004D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D30
.text:0000000000004D30
.text:0000000000004D30                 public quotearg_char
.text:0000000000004D30 quotearg_char   proc near
.text:0000000000004D30 ; __unwind {
.text:0000000000004D30                 movsx   edx, sil
.text:0000000000004D34                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D3B                 jmp     quotearg_char_mem
.text:0000000000004D3B ; } // starts at 4D30
.text:0000000000004D3B quotearg_char   endp
.text:0000000000004D3B
.text:0000000000004D40
.text:0000000000004D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D40
.text:0000000000004D40
.text:0000000000004D40                 public quotearg_colon
.text:0000000000004D40 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004D40 ; __unwind {
.text:0000000000004D40                 mov     edx, 3Ah ; ':'
.text:0000000000004D45                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D4C                 jmp     quotearg_char_mem
.text:0000000000004D4C ; } // starts at 4D40
.text:0000000000004D4C quotearg_colon  endp
.text:0000000000004D4C
.text:0000000000004D4C ; ---------------------------------------------------------------------------
.text:0000000000004D51                 align 20h
.text:0000000000004D60
.text:0000000000004D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D60
.text:0000000000004D60
.text:0000000000004D60                 public quotearg_colon_mem
.text:0000000000004D60 quotearg_colon_mem proc near
.text:0000000000004D60 ; __unwind {
.text:0000000000004D60                 mov     edx, 3Ah ; ':'
.text:0000000000004D65                 jmp     quotearg_char_mem
.text:0000000000004D65 ; } // starts at 4D60
.text:0000000000004D65 quotearg_colon_mem endp
.text:0000000000004D65
.text:0000000000004D65 ; ---------------------------------------------------------------------------
.text:0000000000004D6A                 align 10h
.text:0000000000004D70
.text:0000000000004D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D70
.text:0000000000004D70 ; Attributes: info_from_lumina
.text:0000000000004D70
.text:0000000000004D70 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004D70                 public quotearg_n_style_colon
.text:0000000000004D70 quotearg_n_style_colon proc near
.text:0000000000004D70
.text:0000000000004D70 var_48          = dword ptr -48h
.text:0000000000004D70 var_44          = qword ptr -44h
.text:0000000000004D70 var_3C          = qword ptr -3Ch
.text:0000000000004D70 var_34          = qword ptr -34h
.text:0000000000004D70 var_2C          = qword ptr -2Ch
.text:0000000000004D70 var_24          = qword ptr -24h
.text:0000000000004D70 var_1C          = qword ptr -1Ch
.text:0000000000004D70 var_14          = dword ptr -14h
.text:0000000000004D70 var_10          = qword ptr -10h
.text:0000000000004D70
.text:0000000000004D70 ; __unwind {
.text:0000000000004D70                 sub     rsp, 48h
.text:0000000000004D74                 mov     rax, rdx
.text:0000000000004D77                 mov     rdx, fs:28h
.text:0000000000004D80                 mov     [rsp+48h+var_10], rdx
.text:0000000000004D85                 xor     edx, edx
.text:0000000000004D87                 cmp     esi, 0Ah
.text:0000000000004D8A                 jz      short loc_4DF4
.text:0000000000004D8C                 mov     [rsp+48h+var_48], esi
.text:0000000000004D8F                 mov     rcx, rsp
.text:0000000000004D92                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D99                 mov     rsi, rax
.text:0000000000004D9C                 mov     [rsp+48h+var_44], 0
.text:0000000000004DA5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000004DAE                 mov     [rsp+48h+var_34], 0
.text:0000000000004DB7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004DC0                 mov     [rsp+48h+var_24], 0
.text:0000000000004DC9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004DD2                 mov     [rsp+48h+var_14], 0
.text:0000000000004DDA                 call    quotearg_n_options
.text:0000000000004DDF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004DE4                 xor     rcx, fs:28h
.text:0000000000004DED                 jnz     short loc_4DF9
.text:0000000000004DEF                 add     rsp, 48h
.text:0000000000004DF3                 retn
.text:0000000000004DF4 ; ---------------------------------------------------------------------------
.text:0000000000004DF4
.text:0000000000004DF4 loc_4DF4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004DF4                 call    _abort
.text:0000000000004DF9 ; ---------------------------------------------------------------------------
.text:0000000000004DF9
.text:0000000000004DF9 loc_4DF9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004DF9                 call    ___stack_chk_fail
.text:0000000000004DF9 ; } // starts at 4D70
.text:0000000000004DF9 quotearg_n_style_colon endp
.text:0000000000004DF9
.text:0000000000004DF9 ; ---------------------------------------------------------------------------
.text:0000000000004DFE                 align 20h
.text:0000000000004E00
.text:0000000000004E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E00
.text:0000000000004E00 ; Attributes: info_from_lumina
.text:0000000000004E00
.text:0000000000004E00 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004E00                 public quotearg_n_custom_mem
.text:0000000000004E00 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004E00                                         ; quotearg_custom+12↓j ...
.text:0000000000004E00
.text:0000000000004E00 var_48          = xmmword ptr -48h
.text:0000000000004E00 var_38          = xmmword ptr -38h
.text:0000000000004E00 var_28          = xmmword ptr -28h
.text:0000000000004E00 var_18          = qword ptr -18h
.text:0000000000004E00 var_10          = qword ptr -10h
.text:0000000000004E00
.text:0000000000004E00 ; __unwind {
.text:0000000000004E00                 sub     rsp, 48h
.text:0000000000004E04                 mov     r9, rcx
.text:0000000000004E07                 mov     rcx, cs:qword_20C210
.text:0000000000004E0E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004E16                 mov     rax, fs:28h
.text:0000000000004E1F                 mov     [rsp+48h+var_10], rax
.text:0000000000004E24                 xor     eax, eax
.text:0000000000004E26                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004E2A                 test    rsi, rsi
.text:0000000000004E2D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004E32                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004E39                 movdqa  xmm0, cs:xmmword_20C1F0
.text:0000000000004E41                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004E46                 movdqa  xmm0, cs:xmmword_20C200
.text:0000000000004E4E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004E53                 jz      short loc_4E87
.text:0000000000004E55                 test    rdx, rdx
.text:0000000000004E58                 jz      short loc_4E87
.text:0000000000004E5A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004E5F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004E64                 mov     rcx, rsp
.text:0000000000004E67                 mov     rdx, r8
.text:0000000000004E6A                 mov     rsi, r9
.text:0000000000004E6D                 call    quotearg_n_options
.text:0000000000004E72                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004E77                 xor     rdi, fs:28h
.text:0000000000004E80                 jnz     short loc_4E8C
.text:0000000000004E82                 add     rsp, 48h
.text:0000000000004E86                 retn
.text:0000000000004E87 ; ---------------------------------------------------------------------------
.text:0000000000004E87
.text:0000000000004E87 loc_4E87:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004E87                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004E87                 call    _abort
.text:0000000000004E8C ; ---------------------------------------------------------------------------
.text:0000000000004E8C
.text:0000000000004E8C loc_4E8C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004E8C                 call    ___stack_chk_fail
.text:0000000000004E8C ; } // starts at 4E00
.text:0000000000004E8C quotearg_n_custom_mem endp
.text:0000000000004E8C
.text:0000000000004E8C ; ---------------------------------------------------------------------------
.text:0000000000004E91                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA0
.text:0000000000004EA0
.text:0000000000004EA0                 public quotearg_n_custom
.text:0000000000004EA0 quotearg_n_custom proc near
.text:0000000000004EA0 ; __unwind {
.text:0000000000004EA0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EA7                 jmp     quotearg_n_custom_mem
.text:0000000000004EA7 ; } // starts at 4EA0
.text:0000000000004EA7 quotearg_n_custom endp
.text:0000000000004EA7
.text:0000000000004EA7 ; ---------------------------------------------------------------------------
.text:0000000000004EAC                 align 10h
.text:0000000000004EB0
.text:0000000000004EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EB0
.text:0000000000004EB0
.text:0000000000004EB0                 public quotearg_custom
.text:0000000000004EB0 quotearg_custom proc near
.text:0000000000004EB0 ; __unwind {
.text:0000000000004EB0                 mov     rcx, rdx
.text:0000000000004EB3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EBA                 mov     rdx, rsi
.text:0000000000004EBD                 mov     rsi, rdi
.text:0000000000004EC0                 xor     edi, edi
.text:0000000000004EC2                 jmp     quotearg_n_custom_mem
.text:0000000000004EC2 ; } // starts at 4EB0
.text:0000000000004EC2 quotearg_custom endp
.text:0000000000004EC2
.text:0000000000004EC2 ; ---------------------------------------------------------------------------
.text:0000000000004EC7                 align 10h
.text:0000000000004ED0
.text:0000000000004ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004ED0
.text:0000000000004ED0
.text:0000000000004ED0                 public quotearg_custom_mem
.text:0000000000004ED0 quotearg_custom_mem proc near
.text:0000000000004ED0 ; __unwind {
.text:0000000000004ED0                 mov     r8, rcx
.text:0000000000004ED3                 mov     rcx, rdx
.text:0000000000004ED6                 mov     rdx, rsi
.text:0000000000004ED9                 mov     rsi, rdi
.text:0000000000004EDC                 xor     edi, edi
.text:0000000000004EDE                 jmp     quotearg_n_custom_mem
.text:0000000000004EDE ; } // starts at 4ED0
.text:0000000000004EDE quotearg_custom_mem endp
.text:0000000000004EDE
.text:0000000000004EDE ; ---------------------------------------------------------------------------
.text:0000000000004EE3                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0
.text:0000000000004EF0                 public quote_n_mem
.text:0000000000004EF0 quote_n_mem     proc near
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 lea     rcx, quote_quoting_options
.text:0000000000004EF7                 jmp     quotearg_n_options
.text:0000000000004EF7 ; } // starts at 4EF0
.text:0000000000004EF7 quote_n_mem     endp
.text:0000000000004EF7
.text:0000000000004EF7 ; ---------------------------------------------------------------------------
.text:0000000000004EFC                 align 20h
.text:0000000000004F00
.text:0000000000004F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F00
.text:0000000000004F00
.text:0000000000004F00                 public quote_mem
.text:0000000000004F00 quote_mem       proc near
.text:0000000000004F00 ; __unwind {
.text:0000000000004F00                 lea     rcx, quote_quoting_options
.text:0000000000004F07                 mov     rdx, rsi
.text:0000000000004F0A                 mov     rsi, rdi
.text:0000000000004F0D                 xor     edi, edi
.text:0000000000004F0F                 jmp     quotearg_n_options
.text:0000000000004F0F ; } // starts at 4F00
.text:0000000000004F0F quote_mem       endp
.text:0000000000004F0F
.text:0000000000004F0F ; ---------------------------------------------------------------------------
.text:0000000000004F14                 align 20h
.text:0000000000004F20
.text:0000000000004F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F20
.text:0000000000004F20
.text:0000000000004F20                 public quote_n
.text:0000000000004F20 quote_n         proc near
.text:0000000000004F20 ; __unwind {
.text:0000000000004F20                 lea     rcx, quote_quoting_options
.text:0000000000004F27                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F2E                 jmp     quotearg_n_options
.text:0000000000004F2E ; } // starts at 4F20
.text:0000000000004F2E quote_n         endp
.text:0000000000004F2E
.text:0000000000004F2E ; ---------------------------------------------------------------------------
.text:0000000000004F33                 align 20h
.text:0000000000004F40
.text:0000000000004F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F40
.text:0000000000004F40
.text:0000000000004F40                 public quote
.text:0000000000004F40 quote           proc near               ; CODE XREF: main+1AB↑p
.text:0000000000004F40                                         ; main+D30↑p ...
.text:0000000000004F40 ; __unwind {
.text:0000000000004F40                 lea     rcx, quote_quoting_options
.text:0000000000004F47                 mov     rsi, rdi
.text:0000000000004F4A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F51                 xor     edi, edi
.text:0000000000004F53                 jmp     quotearg_n_options
.text:0000000000004F53 ; } // starts at 4F40
.text:0000000000004F53 quote           endp
.text:0000000000004F53
.text:0000000000004F53 ; ---------------------------------------------------------------------------
.text:0000000000004F58                 align 20h
.text:0000000000004F60
.text:0000000000004F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F60
.text:0000000000004F60
.text:0000000000004F60                 public fwrite_success_callback
.text:0000000000004F60 fwrite_success_callback proc near       ; DATA XREF: print_unicode_char+15↓o
.text:0000000000004F60 ; __unwind {
.text:0000000000004F60                 sub     rsp, 8
.text:0000000000004F64                 mov     rcx, rdx        ; s
.text:0000000000004F67                 mov     rdx, rsi        ; n
.text:0000000000004F6A                 mov     esi, 1          ; size
.text:0000000000004F6F                 call    _fwrite
.text:0000000000004F74                 xor     eax, eax
.text:0000000000004F76                 add     rsp, 8
.text:0000000000004F7A                 retn
.text:0000000000004F7A ; } // starts at 4F60
.text:0000000000004F7A fwrite_success_callback endp
.text:0000000000004F7A
.text:0000000000004F7A ; ---------------------------------------------------------------------------
.text:0000000000004F7B                 align 20h
.text:0000000000004F80
.text:0000000000004F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F80
.text:0000000000004F80
.text:0000000000004F80 fallback_failure_callback proc near     ; DATA XREF: print_unicode_char+2↓o
.text:0000000000004F80 ; __unwind {
.text:0000000000004F80                 mov     ecx, edi
.text:0000000000004F82                 sub     rsp, 8
.text:0000000000004F86                 mov     rdi, rdx
.text:0000000000004F89                 cmp     ecx, 0FFFFh
.text:0000000000004F8F                 jbe     short loc_4FB0
.text:0000000000004F91                 lea     rdx, aU08x      ; "\\U%08X"
.text:0000000000004F98                 mov     esi, 1
.text:0000000000004F9D                 xor     eax, eax
.text:0000000000004F9F                 call    ___fprintf_chk
.text:0000000000004FA4                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004FAB                 add     rsp, 8
.text:0000000000004FAF                 retn
.text:0000000000004FB0 ; ---------------------------------------------------------------------------
.text:0000000000004FB0
.text:0000000000004FB0 loc_4FB0:                               ; CODE XREF: fallback_failure_callback+F↑j
.text:0000000000004FB0                 lea     rdx, aU04x      ; "\\u%04X"
.text:0000000000004FB7                 mov     esi, 1
.text:0000000000004FBC                 xor     eax, eax
.text:0000000000004FBE                 call    ___fprintf_chk
.text:0000000000004FC3                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004FCA                 add     rsp, 8
.text:0000000000004FCE                 retn
.text:0000000000004FCE ; } // starts at 4F80
.text:0000000000004FCE fallback_failure_callback endp
.text:0000000000004FCE
.text:0000000000004FCE ; ---------------------------------------------------------------------------
.text:0000000000004FCF                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FD0
.text:0000000000004FD0
.text:0000000000004FD0 exit_failure_callback proc near         ; DATA XREF: print_unicode_char+9↓o
.text:0000000000004FD0 ; __unwind {
.text:0000000000004FD0                 push    rbp
.text:0000000000004FD1                 push    rbx
.text:0000000000004FD2                 mov     edx, 5          ; category
.text:0000000000004FD7                 mov     ebx, edi
.text:0000000000004FD9                 sub     rsp, 8
.text:0000000000004FDD                 test    rsi, rsi
.text:0000000000004FE0                 jz      short loc_5028
.text:0000000000004FE2                 xor     edi, edi        ; domainname
.text:0000000000004FE4                 call    _dcgettext
.text:0000000000004FE9                 lea     rsi, aCannotConvertU ; "cannot convert U+%04X to local characte"...
.text:0000000000004FF0                 mov     rbp, rax
.text:0000000000004FF3                 mov     edx, 5          ; category
.text:0000000000004FF8                 xor     edi, edi        ; domainname
.text:0000000000004FFA                 call    _dcgettext
.text:0000000000004FFF                 mov     r8, rbp
.text:0000000000005002                 mov     ecx, ebx
.text:0000000000005004                 mov     rdx, rax        ; format
.text:0000000000005007                 xor     esi, esi        ; errnum
.text:0000000000005009                 xor     eax, eax
.text:000000000000500B                 mov     edi, 1          ; status
.text:0000000000005010                 call    _error
.text:0000000000005015                 add     rsp, 8
.text:0000000000005019                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005020                 pop     rbx
.text:0000000000005021                 pop     rbp
.text:0000000000005022                 retn
.text:0000000000005022 ; ---------------------------------------------------------------------------
.text:0000000000005023                 align 8
.text:0000000000005028
.text:0000000000005028 loc_5028:                               ; CODE XREF: exit_failure_callback+10↑j
.text:0000000000005028                 lea     rsi, aCannotConvertU_0 ; "cannot convert U+%04X to local characte"...
.text:000000000000502F                 xor     edi, edi        ; domainname
.text:0000000000005031                 call    _dcgettext
.text:0000000000005036                 mov     ecx, ebx
.text:0000000000005038                 mov     rdx, rax        ; format
.text:000000000000503B                 xor     esi, esi        ; errnum
.text:000000000000503D                 xor     eax, eax
.text:000000000000503F                 mov     edi, 1          ; status
.text:0000000000005044                 call    _error
.text:0000000000005049                 add     rsp, 8
.text:000000000000504D                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005054                 pop     rbx
.text:0000000000005055                 pop     rbp
.text:0000000000005056                 retn
.text:0000000000005056 ; } // starts at 4FD0
.text:0000000000005056 exit_failure_callback endp
.text:0000000000005056
.text:0000000000005056 ; ---------------------------------------------------------------------------
.text:0000000000005057                 align 20h
.text:0000000000005060
.text:0000000000005060 ; =============== S U B R O U T I N E =======================================
.text:0000000000005060
.text:0000000000005060
.text:0000000000005060                 public unicode_to_mb
.text:0000000000005060 unicode_to_mb   proc near               ; CODE XREF: print_unicode_char+20↓j
.text:0000000000005060
.text:0000000000005060 var_A0          = qword ptr -0A0h
.text:0000000000005060 inbuf           = qword ptr -90h
.text:0000000000005060 inbytesleft     = qword ptr -88h
.text:0000000000005060 outbuf          = qword ptr -80h
.text:0000000000005060 outbytesleft    = qword ptr -78h
.text:0000000000005060 var_6E          = byte ptr -6Eh
.text:0000000000005060 var_68          = byte ptr -68h
.text:0000000000005060 var_40          = qword ptr -40h
.text:0000000000005060
.text:0000000000005060 ; __unwind {
.text:0000000000005060                 push    r15
.text:0000000000005062                 push    r14
.text:0000000000005064                 mov     r14, rsi
.text:0000000000005067                 push    r13
.text:0000000000005069                 push    r12
.text:000000000000506B                 mov     r12, rdx
.text:000000000000506E                 push    rbp
.text:000000000000506F                 push    rbx
.text:0000000000005070                 mov     rbp, rcx
.text:0000000000005073                 mov     ebx, edi
.text:0000000000005075                 sub     rsp, 78h
.text:0000000000005079                 mov     rax, fs:28h
.text:0000000000005082                 mov     [rsp+0A8h+var_40], rax
.text:0000000000005087                 xor     eax, eax
.text:0000000000005089                 mov     eax, cs:initialized_4445
.text:000000000000508F                 test    eax, eax
.text:0000000000005091                 jz      loc_5140
.text:0000000000005097                 mov     edx, cs:is_utf8_4446
.text:000000000000509D
.text:000000000000509D loc_509D:                               ; CODE XREF: unicode_to_mb+11B↓j
.text:000000000000509D                 test    edx, edx
.text:000000000000509F                 jnz     short loc_50C0
.text:00000000000050A1                 cmp     cs:utf8_to_local_4447, 0FFFFFFFFFFFFFFFFh
.text:00000000000050A9                 jnz     short loc_50C0
.text:00000000000050AB                 mov     rdx, rbp
.text:00000000000050AE                 lea     rsi, aIconvFunctionN ; "iconv function not usable"
.text:00000000000050B5                 mov     edi, ebx
.text:00000000000050B7                 call    r12
.text:00000000000050BA                 jmp     short loc_50E4
.text:00000000000050BA ; ---------------------------------------------------------------------------
.text:00000000000050BC                 align 20h
.text:00000000000050C0
.text:00000000000050C0 loc_50C0:                               ; CODE XREF: unicode_to_mb+3F↑j
.text:00000000000050C0                                         ; unicode_to_mb+49↑j
.text:00000000000050C0                 cmp     ebx, 7Fh
.text:00000000000050C3                 ja      short loc_5110
.text:00000000000050C5                 lea     r13, [rsp+0A8h+var_6E]
.text:00000000000050CA                 mov     [rsp+0A8h+var_6E], bl
.text:00000000000050CE                 mov     esi, 1
.text:00000000000050D3
.text:00000000000050D3 loc_50D3:                               ; CODE XREF: unicode_to_mb+129↓j
.text:00000000000050D3                 test    edx, edx
.text:00000000000050D5                 jz      loc_51B0
.text:00000000000050DB                 mov     rdx, rbp
.text:00000000000050DE                 mov     rdi, r13
.text:00000000000050E1                 call    r14
.text:00000000000050E4
.text:00000000000050E4 loc_50E4:                               ; CODE XREF: unicode_to_mb+5A↑j
.text:00000000000050E4                                         ; unicode_to_mb+D7↓j ...
.text:00000000000050E4                 mov     rbx, [rsp+0A8h+var_40]
.text:00000000000050E9                 xor     rbx, fs:28h
.text:00000000000050F2                 jnz     loc_5267
.text:00000000000050F8                 add     rsp, 78h
.text:00000000000050FC                 pop     rbx
.text:00000000000050FD                 pop     rbp
.text:00000000000050FE                 pop     r12
.text:0000000000005100                 pop     r13
.text:0000000000005102                 pop     r14
.text:0000000000005104                 pop     r15
.text:0000000000005106                 retn
.text:0000000000005106 ; ---------------------------------------------------------------------------
.text:0000000000005107                 align 10h
.text:0000000000005110
.text:0000000000005110 loc_5110:                               ; CODE XREF: unicode_to_mb+63↑j
.text:0000000000005110                 lea     r13, [rsp+0A8h+var_6E]
.text:0000000000005115                 mov     edx, 6
.text:000000000000511A                 mov     esi, ebx
.text:000000000000511C                 mov     rdi, r13
.text:000000000000511F                 call    u8_uctomb_aux
.text:0000000000005124                 test    eax, eax
.text:0000000000005126                 jns     short loc_5180
.text:0000000000005128                 mov     rdx, rbp
.text:000000000000512B                 lea     rsi, aCharacterOutOf ; "character out of range"
.text:0000000000005132                 mov     edi, ebx
.text:0000000000005134                 call    r12
.text:0000000000005137                 jmp     short loc_50E4
.text:0000000000005137 ; ---------------------------------------------------------------------------
.text:0000000000005139                 align 20h
.text:0000000000005140
.text:0000000000005140 loc_5140:                               ; CODE XREF: unicode_to_mb+31↑j
.text:0000000000005140                 lea     r13, fromcode   ; "UTF-8"
.text:0000000000005147                 call    locale_charset
.text:000000000000514C                 mov     ecx, 6
.text:0000000000005151                 mov     rsi, rax
.text:0000000000005154                 mov     rdi, r13
.text:0000000000005157                 repe cmpsb
.text:0000000000005159                 setnbe  cl
.text:000000000000515C                 sbb     cl, 0
.text:000000000000515F                 xor     edx, edx
.text:0000000000005161                 movsx   ecx, cl
.text:0000000000005164                 test    ecx, ecx
.text:0000000000005166                 setz    dl
.text:0000000000005169                 mov     cs:is_utf8_4446, edx
.text:000000000000516F                 jnz     short loc_5190
.text:0000000000005171
.text:0000000000005171 loc_5171:                               ; CODE XREF: unicode_to_mb+14E↓j
.text:0000000000005171                 mov     cs:initialized_4445, 1
.text:000000000000517B                 jmp     loc_509D
.text:0000000000005180 ; ---------------------------------------------------------------------------
.text:0000000000005180
.text:0000000000005180 loc_5180:                               ; CODE XREF: unicode_to_mb+C6↑j
.text:0000000000005180                 mov     edx, cs:is_utf8_4446
.text:0000000000005186                 movsxd  rsi, eax
.text:0000000000005189                 jmp     loc_50D3
.text:0000000000005189 ; ---------------------------------------------------------------------------
.text:000000000000518E                 align 10h
.text:0000000000005190
.text:0000000000005190 loc_5190:                               ; CODE XREF: unicode_to_mb+10F↑j
.text:0000000000005190                 mov     rsi, r13        ; fromcode
.text:0000000000005193                 mov     rdi, rax        ; tocode
.text:0000000000005196                 call    _iconv_open
.text:000000000000519B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000519F                 mov     cs:utf8_to_local_4447, rax
.text:00000000000051A6                 jz      short loc_5218
.text:00000000000051A8
.text:00000000000051A8 loc_51A8:                               ; CODE XREF: unicode_to_mb+1CE↓j
.text:00000000000051A8                 mov     edx, cs:is_utf8_4446
.text:00000000000051AE                 jmp     short loc_5171
.text:00000000000051B0 ; ---------------------------------------------------------------------------
.text:00000000000051B0
.text:00000000000051B0 loc_51B0:                               ; CODE XREF: unicode_to_mb+75↑j
.text:00000000000051B0                 lea     rax, [rsp+0A8h+outbuf]
.text:00000000000051B5                 lea     r15, [rsp+0A8h+outbytesleft]
.text:00000000000051BA                 mov     rdi, cs:utf8_to_local_4447 ; cd
.text:00000000000051C1                 mov     [rsp+0A8h+inbuf], r13
.text:00000000000051C6                 mov     [rsp+0A8h+inbytesleft], rsi
.text:00000000000051CB                 lea     r13, [rsp+0A8h+var_68]
.text:00000000000051D0                 lea     rdx, [rsp+0A8h+inbytesleft] ; inbytesleft
.text:00000000000051D5                 lea     rsi, [rsp+0A8h+inbuf] ; inbuf
.text:00000000000051DA                 mov     r8, r15         ; outbytesleft
.text:00000000000051DD                 mov     rcx, rax        ; outbuf
.text:00000000000051E0                 mov     [rsp+0A8h+outbuf], r13
.text:00000000000051E5                 mov     [rsp+0A8h+outbytesleft], 19h
.text:00000000000051EE                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000051F3                 call    _iconv
.text:00000000000051F8                 cmp     [rsp+0A8h+inbytesleft], 0
.text:00000000000051FE                 jnz     short loc_5206
.text:0000000000005200                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005204                 jnz     short loc_5233
.text:0000000000005206
.text:0000000000005206 loc_5206:                               ; CODE XREF: unicode_to_mb+19E↑j
.text:0000000000005206                                         ; unicode_to_mb+1EF↓j
.text:0000000000005206                 mov     rdx, rbp
.text:0000000000005209                 xor     esi, esi
.text:000000000000520B                 mov     edi, ebx
.text:000000000000520D                 call    r12
.text:0000000000005210                 jmp     loc_50E4
.text:0000000000005210 ; ---------------------------------------------------------------------------
.text:0000000000005215                 align 8
.text:0000000000005218
.text:0000000000005218 loc_5218:                               ; CODE XREF: unicode_to_mb+146↑j
.text:0000000000005218                 lea     rdi, tocode     ; "ASCII"
.text:000000000000521F                 mov     rsi, r13        ; fromcode
.text:0000000000005222                 call    _iconv_open
.text:0000000000005227                 mov     cs:utf8_to_local_4447, rax
.text:000000000000522E                 jmp     loc_51A8
.text:0000000000005233 ; ---------------------------------------------------------------------------
.text:0000000000005233
.text:0000000000005233 loc_5233:                               ; CODE XREF: unicode_to_mb+1A4↑j
.text:0000000000005233                 mov     rcx, [rsp+0A8h+var_A0] ; outbuf
.text:0000000000005238                 mov     rdi, cs:utf8_to_local_4447 ; cd
.text:000000000000523F                 xor     edx, edx        ; inbytesleft
.text:0000000000005241                 xor     esi, esi        ; inbuf
.text:0000000000005243                 mov     r8, r15         ; outbytesleft
.text:0000000000005246                 call    _iconv
.text:000000000000524B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000524F                 jz      short loc_5206
.text:0000000000005251                 mov     rsi, [rsp+0A8h+outbuf]
.text:0000000000005256                 mov     rdx, rbp
.text:0000000000005259                 mov     rdi, r13
.text:000000000000525C                 sub     rsi, r13
.text:000000000000525F                 call    r14
.text:0000000000005262                 jmp     loc_50E4
.text:0000000000005267 ; ---------------------------------------------------------------------------
.text:0000000000005267
.text:0000000000005267 loc_5267:                               ; CODE XREF: unicode_to_mb+92↑j
.text:0000000000005267                 call    ___stack_chk_fail
.text:0000000000005267 ; } // starts at 5060
.text:0000000000005267 unicode_to_mb   endp
.text:0000000000005267
.text:0000000000005267 ; ---------------------------------------------------------------------------
.text:000000000000526C                 align 10h
.text:0000000000005270
.text:0000000000005270 ; =============== S U B R O U T I N E =======================================
.text:0000000000005270
.text:0000000000005270
.text:0000000000005270                 public print_unicode_char
.text:0000000000005270 print_unicode_char proc near            ; CODE XREF: print_esc+280↑p
.text:0000000000005270 ; __unwind {
.text:0000000000005270                 test    edx, edx
.text:0000000000005272                 lea     rax, fallback_failure_callback
.text:0000000000005279                 lea     rdx, exit_failure_callback
.text:0000000000005280                 mov     rcx, rdi
.text:0000000000005283                 mov     edi, esi
.text:0000000000005285                 lea     rsi, fwrite_success_callback
.text:000000000000528C                 cmovz   rdx, rax
.text:0000000000005290                 jmp     unicode_to_mb
.text:0000000000005290 ; } // starts at 5270
.text:0000000000005290 print_unicode_char endp
.text:0000000000005290
.text:0000000000005290 ; ---------------------------------------------------------------------------
.text:0000000000005295                 align 20h
.text:00000000000052A0
.text:00000000000052A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052A0
.text:00000000000052A0
.text:00000000000052A0                 public u8_uctomb_aux
.text:00000000000052A0 u8_uctomb_aux   proc near               ; CODE XREF: unicode_to_mb+BF↑p
.text:00000000000052A0 ; __unwind {
.text:00000000000052A0                 cmp     esi, 7Fh
.text:00000000000052A3                 jbe     loc_5340
.text:00000000000052A9                 cmp     esi, 7FFh
.text:00000000000052AF                 jbe     short loc_5300
.text:00000000000052B1                 cmp     esi, 0FFFFh
.text:00000000000052B7                 ja      short loc_5310
.text:00000000000052B9                 lea     eax, [rsi-0D800h]
.text:00000000000052BF                 cmp     eax, 7FFh
.text:00000000000052C4                 jbe     loc_5346
.text:00000000000052CA                 cmp     edx, 2
.text:00000000000052CD                 jle     short loc_5340
.text:00000000000052CF                 mov     eax, 3
.text:00000000000052D4
.text:00000000000052D4 loc_52D4:                               ; CODE XREF: u8_uctomb_aux+96↓j
.text:00000000000052D4                 mov     edx, esi
.text:00000000000052D6                 shr     esi, 6
.text:00000000000052D9                 and     edx, 3Fh
.text:00000000000052DC                 or      esi, 800h
.text:00000000000052E2                 or      edx, 0FFFFFF80h
.text:00000000000052E5                 mov     [rdi+2], dl
.text:00000000000052E8
.text:00000000000052E8 loc_52E8:                               ; CODE XREF: u8_uctomb_aux+6A↓j
.text:00000000000052E8                 mov     edx, esi
.text:00000000000052EA                 shr     esi, 6
.text:00000000000052ED                 and     edx, 3Fh
.text:00000000000052F0                 or      sil, 0C0h
.text:00000000000052F4                 or      edx, 0FFFFFF80h
.text:00000000000052F7                 mov     [rdi], sil
.text:00000000000052FA                 mov     [rdi+1], dl
.text:00000000000052FD                 retn
.text:00000000000052FD ; ---------------------------------------------------------------------------
.text:00000000000052FE                 align 20h
.text:0000000000005300
.text:0000000000005300 loc_5300:                               ; CODE XREF: u8_uctomb_aux+F↑j
.text:0000000000005300                 cmp     edx, 1
.text:0000000000005303                 jle     short loc_5340
.text:0000000000005305                 mov     eax, 2
.text:000000000000530A                 jmp     short loc_52E8
.text:000000000000530A ; ---------------------------------------------------------------------------
.text:000000000000530C                 align 10h
.text:0000000000005310
.text:0000000000005310 loc_5310:                               ; CODE XREF: u8_uctomb_aux+17↑j
.text:0000000000005310                 cmp     esi, 10FFFFh
.text:0000000000005316                 ja      short loc_5346
.text:0000000000005318                 cmp     edx, 3
.text:000000000000531B                 jle     short loc_5340
.text:000000000000531D                 mov     eax, esi
.text:000000000000531F                 shr     esi, 6
.text:0000000000005322                 and     eax, 3Fh
.text:0000000000005325                 or      esi, 10000h
.text:000000000000532B                 or      eax, 0FFFFFF80h
.text:000000000000532E                 mov     [rdi+3], al
.text:0000000000005331                 mov     eax, 4
.text:0000000000005336                 jmp     short loc_52D4
.text:0000000000005336 ; ---------------------------------------------------------------------------
.text:0000000000005338                 align 20h
.text:0000000000005340
.text:0000000000005340 loc_5340:                               ; CODE XREF: u8_uctomb_aux+3↑j
.text:0000000000005340                                         ; u8_uctomb_aux+2D↑j ...
.text:0000000000005340                 mov     eax, 0FFFFFFFEh
.text:0000000000005345                 retn
.text:0000000000005346 ; ---------------------------------------------------------------------------
.text:0000000000005346
.text:0000000000005346 loc_5346:                               ; CODE XREF: u8_uctomb_aux+24↑j
.text:0000000000005346                                         ; u8_uctomb_aux+76↑j
.text:0000000000005346                 mov     eax, 0FFFFFFFFh
.text:000000000000534B                 retn
.text:000000000000534B ; } // starts at 52A0
.text:000000000000534B u8_uctomb_aux   endp
.text:000000000000534B
.text:000000000000534B ; ---------------------------------------------------------------------------
.text:000000000000534C                 align 10h
.text:0000000000005350
.text:0000000000005350 ; =============== S U B R O U T I N E =======================================
.text:0000000000005350
.text:0000000000005350
.text:0000000000005350 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005350                 public version_etc_arn
.text:0000000000005350 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_578B↓j
.text:0000000000005350                                         ; version_etc_va:loc_57DB↓p ...
.text:0000000000005350
.text:0000000000005350 var_58          = qword ptr -58h
.text:0000000000005350 var_50          = qword ptr -50h
.text:0000000000005350 var_48          = qword ptr -48h
.text:0000000000005350 var_40          = qword ptr -40h
.text:0000000000005350
.text:0000000000005350 ; __unwind {
.text:0000000000005350                 push    r15
.text:0000000000005352                 push    r14
.text:0000000000005354                 push    r13
.text:0000000000005356                 push    r12
.text:0000000000005358                 mov     r12, r9
.text:000000000000535B                 push    rbp
.text:000000000000535C                 push    rbx
.text:000000000000535D                 mov     rbp, rdi
.text:0000000000005360                 mov     rbx, r8
.text:0000000000005363                 sub     rsp, 28h
.text:0000000000005367                 test    rsi, rsi
.text:000000000000536A                 jz      loc_5488
.text:0000000000005370                 mov     r8, rdx
.text:0000000000005373                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000537A                 mov     r9, rcx
.text:000000000000537D                 xor     eax, eax
.text:000000000000537F                 mov     rcx, rsi
.text:0000000000005382                 mov     esi, 1
.text:0000000000005387                 call    ___fprintf_chk
.text:000000000000538C
.text:000000000000538C loc_538C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000538C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005393                 xor     edi, edi        ; domainname
.text:0000000000005395                 mov     edx, 5          ; category
.text:000000000000539A                 call    _dcgettext
.text:000000000000539F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000053A6                 mov     rcx, rax
.text:00000000000053A9                 mov     r8d, 7E3h
.text:00000000000053AF                 mov     esi, 1
.text:00000000000053B4                 mov     rdi, rbp
.text:00000000000053B7                 xor     eax, eax
.text:00000000000053B9                 call    ___fprintf_chk
.text:00000000000053BE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000053C5                 xor     edi, edi        ; domainname
.text:00000000000053C7                 mov     edx, 5          ; category
.text:00000000000053CC                 call    _dcgettext
.text:00000000000053D1                 mov     rsi, rbp        ; stream
.text:00000000000053D4                 mov     rdi, rax        ; s
.text:00000000000053D7                 call    _fputs_unlocked
.text:00000000000053DC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000053E0                 ja      def_53F4        ; jumptable 00000000000053F4 default case
.text:00000000000053E6                 lea     rdx, jpt_53F4
.text:00000000000053ED                 movsxd  rax, ds:(jpt_53F4 - 97B4h)[rdx+r12*4]
.text:00000000000053F1                 add     rax, rdx
.text:00000000000053F4                 jmp     rax             ; switch jump
.text:00000000000053F4 ; ---------------------------------------------------------------------------
.text:00000000000053F6                 align 20h
.text:0000000000005400
.text:0000000000005400 loc_5400:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005400                                         ; DATA XREF: .rodata:jpt_53F4↓o
.text:0000000000005400                 mov     r9, [rbx+38h]   ; jumptable 00000000000053F4 case 8
.text:0000000000005404                 mov     rax, [rbx+10h]
.text:0000000000005408                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000540F                 mov     r8, [rbx+8]
.text:0000000000005413                 mov     edx, 5          ; category
.text:0000000000005418                 xor     edi, edi        ; domainname
.text:000000000000541A                 mov     r13, [rbx+30h]
.text:000000000000541E                 mov     r12, [rbx+28h]
.text:0000000000005422                 mov     [rsp+58h+var_48], r9
.text:0000000000005427                 mov     r15, [rbx+20h]
.text:000000000000542B                 mov     r14, [rbx+18h]
.text:000000000000542F                 mov     [rsp+58h+var_58], rax
.text:0000000000005433                 mov     [rsp+58h+var_50], r8
.text:0000000000005438                 mov     rbx, [rbx]
.text:000000000000543B                 call    _dcgettext
.text:0000000000005440                 sub     rsp, 8
.text:0000000000005444
.text:0000000000005444 loc_5444:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005444                 mov     r9, [rsp+60h+var_48]
.text:0000000000005449                 mov     rdx, rax
.text:000000000000544C                 mov     rcx, rbx
.text:000000000000544F                 mov     esi, 1
.text:0000000000005454                 mov     rdi, rbp
.text:0000000000005457                 xor     eax, eax
.text:0000000000005459                 push    r9
.text:000000000000545B                 push    r13
.text:000000000000545D                 push    r12
.text:000000000000545F                 push    r15
.text:0000000000005461                 push    r14
.text:0000000000005463                 mov     r9, [rsp+88h+var_58]
.text:0000000000005468                 mov     r8, [rsp+88h+var_50]
.text:000000000000546D                 call    ___fprintf_chk
.text:0000000000005472                 add     rsp, 30h
.text:0000000000005476
.text:0000000000005476 loc_5476:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005476                                         ; DATA XREF: .rodata:jpt_53F4↓o
.text:0000000000005476                 add     rsp, 28h        ; jumptable 00000000000053F4 case 0
.text:000000000000547A                 pop     rbx
.text:000000000000547B                 pop     rbp
.text:000000000000547C                 pop     r12
.text:000000000000547E                 pop     r13
.text:0000000000005480                 pop     r14
.text:0000000000005482                 pop     r15
.text:0000000000005484                 retn
.text:0000000000005484 ; ---------------------------------------------------------------------------
.text:0000000000005485                 align 8
.text:0000000000005488
.text:0000000000005488 loc_5488:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005488                 mov     r8, rcx
.text:000000000000548B                 mov     rcx, rdx
.text:000000000000548E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005495                 mov     esi, 1
.text:000000000000549A                 xor     eax, eax
.text:000000000000549C                 call    ___fprintf_chk
.text:00000000000054A1                 jmp     loc_538C
.text:00000000000054A1 ; ---------------------------------------------------------------------------
.text:00000000000054A6                 align 10h
.text:00000000000054B0
.text:00000000000054B0 loc_54B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000054B0                                         ; DATA XREF: .rodata:jpt_53F4↓o
.text:00000000000054B0                 mov     r10, [rbx+40h]  ; jumptable 00000000000053F4 case 9
.text:00000000000054B4                 mov     r9, [rbx+38h]
.text:00000000000054B8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000054BF                 mov     rax, [rbx+10h]
.text:00000000000054C3                 mov     r8, [rbx+8]
.text:00000000000054C7                 mov     edx, 5          ; category
.text:00000000000054CC                 mov     r13, [rbx+30h]
.text:00000000000054D0                 mov     r12, [rbx+28h]
.text:00000000000054D4                 mov     r15, [rbx+20h]
.text:00000000000054D8                 mov     r14, [rbx+18h]
.text:00000000000054DC                 mov     rbx, [rbx]
.text:00000000000054DF                 mov     [rsp+58h+var_40], r10
.text:00000000000054E4                 mov     [rsp+58h+var_48], r9
.text:00000000000054E9                 mov     [rsp+58h+var_58], rax
.text:00000000000054ED                 mov     [rsp+58h+var_50], r8
.text:00000000000054F2
.text:00000000000054F2 loc_54F2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000054F2                 xor     edi, edi        ; domainname
.text:00000000000054F4                 call    _dcgettext
.text:00000000000054F9                 mov     r10, [rsp+58h+var_40]
.text:00000000000054FE                 push    r10
.text:0000000000005500                 jmp     loc_5444
.text:0000000000005500 ; ---------------------------------------------------------------------------
.text:0000000000005505                 align 8
.text:0000000000005508
.text:0000000000005508 loc_5508:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005508                                         ; DATA XREF: .rodata:jpt_53F4↓o
.text:0000000000005508                 mov     rbx, [rbx]      ; jumptable 00000000000053F4 case 1
.text:000000000000550B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005512                 mov     edx, 5          ; category
.text:0000000000005517                 xor     edi, edi        ; domainname
.text:0000000000005519                 call    _dcgettext
.text:000000000000551E                 add     rsp, 28h
.text:0000000000005522                 mov     rcx, rbx
.text:0000000000005525                 mov     rdi, rbp
.text:0000000000005528                 pop     rbx
.text:0000000000005529                 pop     rbp
.text:000000000000552A                 pop     r12
.text:000000000000552C                 pop     r13
.text:000000000000552E                 pop     r14
.text:0000000000005530                 pop     r15
.text:0000000000005532                 mov     rdx, rax
.text:0000000000005535                 mov     esi, 1
.text:000000000000553A                 xor     eax, eax
.text:000000000000553C                 jmp     ___fprintf_chk
.text:000000000000553C ; ---------------------------------------------------------------------------
.text:0000000000005541                 align 8
.text:0000000000005548
.text:0000000000005548 loc_5548:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005548                                         ; DATA XREF: .rodata:jpt_53F4↓o
.text:0000000000005548                 mov     r12, [rbx+8]    ; jumptable 00000000000053F4 case 2
.text:000000000000554C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005553                 mov     rbx, [rbx]
.text:0000000000005556                 mov     edx, 5          ; category
.text:000000000000555B                 xor     edi, edi        ; domainname
.text:000000000000555D                 call    _dcgettext
.text:0000000000005562                 add     rsp, 28h
.text:0000000000005566                 mov     r8, r12
.text:0000000000005569                 mov     rcx, rbx
.text:000000000000556C                 mov     rdi, rbp
.text:000000000000556F                 mov     rdx, rax
.text:0000000000005572                 mov     esi, 1
.text:0000000000005577                 pop     rbx
.text:0000000000005578                 pop     rbp
.text:0000000000005579                 pop     r12
.text:000000000000557B                 pop     r13
.text:000000000000557D                 pop     r14
.text:000000000000557F                 pop     r15
.text:0000000000005581                 xor     eax, eax
.text:0000000000005583                 jmp     ___fprintf_chk
.text:0000000000005583 ; ---------------------------------------------------------------------------
.text:0000000000005588                 align 10h
.text:0000000000005590
.text:0000000000005590 loc_5590:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005590                                         ; DATA XREF: .rodata:jpt_53F4↓o
.text:0000000000005590                 mov     r13, [rbx+10h]  ; jumptable 00000000000053F4 case 3
.text:0000000000005594                 mov     r12, [rbx+8]
.text:0000000000005598                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000559F                 mov     rbx, [rbx]
.text:00000000000055A2                 mov     edx, 5          ; category
.text:00000000000055A7                 xor     edi, edi        ; domainname
.text:00000000000055A9                 call    _dcgettext
.text:00000000000055AE                 add     rsp, 28h
.text:00000000000055B2                 mov     r9, r13
.text:00000000000055B5                 mov     r8, r12
.text:00000000000055B8                 mov     rcx, rbx
.text:00000000000055BB                 mov     rdi, rbp
.text:00000000000055BE                 mov     rdx, rax
.text:00000000000055C1                 pop     rbx
.text:00000000000055C2                 pop     rbp
.text:00000000000055C3                 pop     r12
.text:00000000000055C5                 pop     r13
.text:00000000000055C7                 pop     r14
.text:00000000000055C9                 pop     r15
.text:00000000000055CB                 mov     esi, 1
.text:00000000000055D0                 xor     eax, eax
.text:00000000000055D2                 jmp     ___fprintf_chk
.text:00000000000055D2 ; ---------------------------------------------------------------------------
.text:00000000000055D7                 align 20h
.text:00000000000055E0
.text:00000000000055E0 loc_55E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000055E0                                         ; DATA XREF: .rodata:jpt_53F4↓o
.text:00000000000055E0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000053F4 case 4
.text:00000000000055E7                 mov     edx, 5          ; category
.text:00000000000055EC                 xor     edi, edi        ; domainname
.text:00000000000055EE                 mov     r14, [rbx+18h]
.text:00000000000055F2                 mov     r13, [rbx+10h]
.text:00000000000055F6                 mov     r12, [rbx+8]
.text:00000000000055FA                 mov     rbx, [rbx]
.text:00000000000055FD                 call    _dcgettext
.text:0000000000005602                 sub     rsp, 8
.text:0000000000005606
.text:0000000000005606 loc_5606:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005606                 push    r14
.text:0000000000005608                 mov     rdx, rax
.text:000000000000560B                 mov     r9, r13
.text:000000000000560E                 mov     r8, r12
.text:0000000000005611                 mov     rcx, rbx
.text:0000000000005614                 mov     rdi, rbp
.text:0000000000005617                 mov     esi, 1
.text:000000000000561C                 xor     eax, eax
.text:000000000000561E                 call    ___fprintf_chk
.text:0000000000005623                 pop     rax
.text:0000000000005624                 pop     rdx
.text:0000000000005625                 add     rsp, 28h
.text:0000000000005629                 pop     rbx
.text:000000000000562A                 pop     rbp
.text:000000000000562B                 pop     r12
.text:000000000000562D                 pop     r13
.text:000000000000562F                 pop     r14
.text:0000000000005631                 pop     r15
.text:0000000000005633                 retn
.text:0000000000005633 ; ---------------------------------------------------------------------------
.text:0000000000005634                 align 8
.text:0000000000005638
.text:0000000000005638 loc_5638:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005638                                         ; DATA XREF: .rodata:jpt_53F4↓o
.text:0000000000005638                 mov     r15, [rbx+20h]  ; jumptable 00000000000053F4 case 5
.text:000000000000563C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005643                 mov     edx, 5          ; category
.text:0000000000005648                 xor     edi, edi        ; domainname
.text:000000000000564A                 mov     r14, [rbx+18h]
.text:000000000000564E                 mov     r13, [rbx+10h]
.text:0000000000005652                 mov     r12, [rbx+8]
.text:0000000000005656                 mov     rbx, [rbx]
.text:0000000000005659                 call    _dcgettext
.text:000000000000565E                 push    r15
.text:0000000000005660                 jmp     short loc_5606
.text:0000000000005660 ; ---------------------------------------------------------------------------
.text:0000000000005662                 align 8
.text:0000000000005668
.text:0000000000005668 loc_5668:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005668                                         ; DATA XREF: .rodata:jpt_53F4↓o
.text:0000000000005668                 mov     r8, [rbx+8]     ; jumptable 00000000000053F4 case 6
.text:000000000000566C                 mov     r12, [rbx+28h]
.text:0000000000005670                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005677                 mov     r15, [rbx+20h]
.text:000000000000567B                 mov     r14, [rbx+18h]
.text:000000000000567F                 mov     edx, 5          ; category
.text:0000000000005684                 mov     r13, [rbx+10h]
.text:0000000000005688                 xor     edi, edi        ; domainname
.text:000000000000568A                 mov     rbx, [rbx]
.text:000000000000568D                 mov     [rsp+58h+var_58], r8
.text:0000000000005691                 call    _dcgettext
.text:0000000000005696                 sub     rsp, 8
.text:000000000000569A                 mov     r9, r13
.text:000000000000569D                 push    r12
.text:000000000000569F                 push    r15
.text:00000000000056A1                 push    r14
.text:00000000000056A3
.text:00000000000056A3 loc_56A3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000056A3                 mov     r8, [rsp+78h+var_58]
.text:00000000000056A8                 mov     rcx, rbx
.text:00000000000056AB                 mov     rdx, rax
.text:00000000000056AE                 mov     rdi, rbp
.text:00000000000056B1                 mov     esi, 1
.text:00000000000056B6                 xor     eax, eax
.text:00000000000056B8                 call    ___fprintf_chk
.text:00000000000056BD                 add     rsp, 20h
.text:00000000000056C1                 add     rsp, 28h
.text:00000000000056C5                 pop     rbx
.text:00000000000056C6                 pop     rbp
.text:00000000000056C7                 pop     r12
.text:00000000000056C9                 pop     r13
.text:00000000000056CB                 pop     r14
.text:00000000000056CD                 pop     r15
.text:00000000000056CF                 retn
.text:00000000000056D0 ; ---------------------------------------------------------------------------
.text:00000000000056D0
.text:00000000000056D0 loc_56D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000056D0                                         ; DATA XREF: .rodata:jpt_53F4↓o
.text:00000000000056D0                 mov     r9, [rbx+10h]   ; jumptable 00000000000053F4 case 7
.text:00000000000056D4                 mov     r13, [rbx+30h]
.text:00000000000056D8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000056DF                 mov     r12, [rbx+28h]
.text:00000000000056E3                 mov     r15, [rbx+20h]
.text:00000000000056E7                 mov     edx, 5          ; category
.text:00000000000056EC                 mov     r14, [rbx+18h]
.text:00000000000056F0                 mov     r8, [rbx+8]
.text:00000000000056F4                 xor     edi, edi        ; domainname
.text:00000000000056F6                 mov     [rsp+58h+var_50], r9
.text:00000000000056FB                 mov     rbx, [rbx]
.text:00000000000056FE                 mov     [rsp+58h+var_58], r8
.text:0000000000005702                 call    _dcgettext
.text:0000000000005707                 push    r13
.text:0000000000005709                 push    r12
.text:000000000000570B                 push    r15
.text:000000000000570D                 push    r14
.text:000000000000570F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005714                 jmp     short loc_56A3
.text:0000000000005714 ; ---------------------------------------------------------------------------
.text:0000000000005716                 align 20h
.text:0000000000005720
.text:0000000000005720 def_53F4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005720                 mov     r10, [rbx+40h]  ; jumptable 00000000000053F4 default case
.text:0000000000005724                 mov     r9, [rbx+38h]
.text:0000000000005728                 mov     edx, 5
.text:000000000000572D                 mov     rax, [rbx+10h]
.text:0000000000005731                 mov     r8, [rbx+8]
.text:0000000000005735                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000573C                 mov     r13, [rbx+30h]
.text:0000000000005740                 mov     r12, [rbx+28h]
.text:0000000000005744                 mov     r15, [rbx+20h]
.text:0000000000005748                 mov     r14, [rbx+18h]
.text:000000000000574C                 mov     [rsp+58h+var_40], r10
.text:0000000000005751                 mov     [rsp+58h+var_48], r9
.text:0000000000005756                 mov     [rsp+58h+var_58], rax
.text:000000000000575A                 mov     [rsp+58h+var_50], r8
.text:000000000000575F                 mov     rbx, [rbx]
.text:0000000000005762                 jmp     loc_54F2
.text:0000000000005762 ; } // starts at 5350
.text:0000000000005762 version_etc_arn endp
.text:0000000000005762
.text:0000000000005762 ; ---------------------------------------------------------------------------
.text:0000000000005767                 align 10h
.text:0000000000005770
.text:0000000000005770 ; =============== S U B R O U T I N E =======================================
.text:0000000000005770
.text:0000000000005770 ; Attributes: info_from_lumina
.text:0000000000005770
.text:0000000000005770 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005770                 public version_etc_ar
.text:0000000000005770 version_etc_ar  proc near
.text:0000000000005770 ; __unwind {
.text:0000000000005770                 xor     r9d, r9d
.text:0000000000005773                 cmp     qword ptr [r8], 0
.text:0000000000005777                 jz      short loc_578B
.text:0000000000005779                 nop     dword ptr [rax+00000000h]
.text:0000000000005780
.text:0000000000005780 loc_5780:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005780                 add     r9, 1
.text:0000000000005784                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005789                 jnz     short loc_5780
.text:000000000000578B
.text:000000000000578B loc_578B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000578B                 jmp     version_etc_arn
.text:000000000000578B ; } // starts at 5770
.text:000000000000578B version_etc_ar  endp
.text:000000000000578B
.text:0000000000005790
.text:0000000000005790 ; =============== S U B R O U T I N E =======================================
.text:0000000000005790
.text:0000000000005790 ; Attributes: info_from_lumina
.text:0000000000005790
.text:0000000000005790 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005790                 public version_etc_va
.text:0000000000005790 version_etc_va  proc near
.text:0000000000005790
.text:0000000000005790 authtab         = qword ptr -68h
.text:0000000000005790 var_10          = qword ptr -10h
.text:0000000000005790
.text:0000000000005790 ; __unwind {
.text:0000000000005790                 sub     rsp, 68h
.text:0000000000005794                 mov     r10, r8
.text:0000000000005797                 xor     r9d, r9d
.text:000000000000579A                 mov     rax, fs:28h
.text:00000000000057A3                 mov     [rsp+68h+var_10], rax
.text:00000000000057A8                 xor     eax, eax
.text:00000000000057AA                 mov     r8, rsp
.text:00000000000057AD                 nop     dword ptr [rax]
.text:00000000000057B0
.text:00000000000057B0 loc_57B0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000057B0                 mov     eax, [r10]
.text:00000000000057B3                 cmp     eax, 2Fh ; '/'
.text:00000000000057B6                 ja      short loc_57FA
.text:00000000000057B8                 mov     r11d, eax
.text:00000000000057BB                 add     r11, [r10+10h]
.text:00000000000057BF                 add     eax, 8
.text:00000000000057C2                 mov     [r10], eax
.text:00000000000057C5
.text:00000000000057C5 loc_57C5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000057C5                 mov     rax, [r11]
.text:00000000000057C8                 test    rax, rax
.text:00000000000057CB                 mov     [r8+r9*8], rax
.text:00000000000057CF                 jz      short loc_57DB
.text:00000000000057D1                 add     r9, 1
.text:00000000000057D5                 cmp     r9, 0Ah
.text:00000000000057D9                 jnz     short loc_57B0
.text:00000000000057DB
.text:00000000000057DB loc_57DB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000057DB                 call    version_etc_arn
.text:00000000000057E0                 mov     rax, [rsp+68h+var_10]
.text:00000000000057E5                 xor     rax, fs:28h
.text:00000000000057EE                 jnz     short loc_57F5
.text:00000000000057F0                 add     rsp, 68h
.text:00000000000057F4                 retn
.text:00000000000057F5 ; ---------------------------------------------------------------------------
.text:00000000000057F5
.text:00000000000057F5 loc_57F5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000057F5                 call    ___stack_chk_fail
.text:00000000000057FA ; ---------------------------------------------------------------------------
.text:00000000000057FA
.text:00000000000057FA loc_57FA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000057FA                 mov     r11, [r10+8]
.text:00000000000057FE                 lea     rax, [r11+8]
.text:0000000000005802                 mov     [r10+8], rax
.text:0000000000005806                 jmp     short loc_57C5
.text:0000000000005806 ; } // starts at 5790
.text:0000000000005806 version_etc_va  endp
.text:0000000000005806
.text:0000000000005806 ; ---------------------------------------------------------------------------
.text:0000000000005808                 align 10h
.text:0000000000005810
.text:0000000000005810 ; =============== S U B R O U T I N E =======================================
.text:0000000000005810
.text:0000000000005810 ; Attributes: info_from_lumina
.text:0000000000005810
.text:0000000000005810 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005810                 public version_etc
.text:0000000000005810 version_etc     proc near               ; CODE XREF: main+79A↑p
.text:0000000000005810
.text:0000000000005810 var_C0          = dword ptr -0C0h
.text:0000000000005810 var_B8          = qword ptr -0B8h
.text:0000000000005810 var_B0          = qword ptr -0B0h
.text:0000000000005810 var_A8          = byte ptr -0A8h
.text:0000000000005810 var_50          = qword ptr -50h
.text:0000000000005810 var_48          = byte ptr -48h
.text:0000000000005810 var_28          = qword ptr -28h
.text:0000000000005810 var_20          = qword ptr -20h
.text:0000000000005810 arg_0           = byte ptr  8
.text:0000000000005810
.text:0000000000005810 ; __unwind {
.text:0000000000005810                 push    rbp
.text:0000000000005811                 push    rbx
.text:0000000000005812                 mov     r10d, 20h ; ' '
.text:0000000000005818                 xor     r11d, r11d
.text:000000000000581B                 sub     rsp, 0B8h
.text:0000000000005822                 mov     rax, fs:28h
.text:000000000000582B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005830                 xor     eax, eax
.text:0000000000005832                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000583A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005842                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000584A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000584F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005857                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000585F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005864                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000586C                 xor     r9d, r9d
.text:000000000000586F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005874                 mov     rbp, rax
.text:0000000000005877                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005880
.text:0000000000005880 loc_5880:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005880                 cmp     r10d, 2Fh ; '/'
.text:0000000000005884                 ja      short loc_58DC
.text:0000000000005886                 mov     eax, r10d
.text:0000000000005889                 mov     r11d, 1
.text:000000000000588F                 add     r10d, 8
.text:0000000000005893                 add     rax, rbp
.text:0000000000005896
.text:0000000000005896 loc_5896:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005896                 mov     rax, [rax]
.text:0000000000005899                 test    rax, rax
.text:000000000000589C                 mov     [r8+r9*8], rax
.text:00000000000058A0                 jz      short loc_58AC
.text:00000000000058A2                 add     r9, 1
.text:00000000000058A6                 cmp     r9, 0Ah
.text:00000000000058AA                 jnz     short loc_5880
.text:00000000000058AC
.text:00000000000058AC loc_58AC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000058AC                 test    r11b, r11b
.text:00000000000058AF                 jnz     short loc_58D5
.text:00000000000058B1
.text:00000000000058B1 loc_58B1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000058B1                 call    version_etc_arn
.text:00000000000058B6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000058BB                 xor     rax, fs:28h
.text:00000000000058C4                 jnz     short loc_58D0
.text:00000000000058C6                 add     rsp, 0B8h
.text:00000000000058CD                 pop     rbx
.text:00000000000058CE                 pop     rbp
.text:00000000000058CF                 retn
.text:00000000000058D0 ; ---------------------------------------------------------------------------
.text:00000000000058D0
.text:00000000000058D0 loc_58D0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000058D0                 call    ___stack_chk_fail
.text:00000000000058D5 ; ---------------------------------------------------------------------------
.text:00000000000058D5
.text:00000000000058D5 loc_58D5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000058D5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000058DA                 jmp     short loc_58B1
.text:00000000000058DC ; ---------------------------------------------------------------------------
.text:00000000000058DC
.text:00000000000058DC loc_58DC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000058DC                 mov     rax, rbx
.text:00000000000058DF                 add     rbx, 8
.text:00000000000058E3                 jmp     short loc_5896
.text:00000000000058E3 ; } // starts at 5810
.text:00000000000058E3 version_etc     endp
.text:00000000000058E3
.text:00000000000058E3 ; ---------------------------------------------------------------------------
.text:00000000000058E5                 align 10h
.text:00000000000058F0
.text:00000000000058F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058F0
.text:00000000000058F0 ; Attributes: info_from_lumina
.text:00000000000058F0
.text:00000000000058F0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000058F0                 public emit_bug_reporting_address
.text:00000000000058F0 emit_bug_reporting_address proc near
.text:00000000000058F0 ; __unwind {
.text:00000000000058F0                 push    rbx
.text:00000000000058F1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000058F8                 mov     edx, 5          ; category
.text:00000000000058FD                 xor     edi, edi        ; domainname
.text:00000000000058FF                 call    _dcgettext
.text:0000000000005904                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000590B                 mov     rsi, rax
.text:000000000000590E                 mov     edi, 1
.text:0000000000005913                 xor     eax, eax
.text:0000000000005915                 call    ___printf_chk
.text:000000000000591A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005921                 mov     edx, 5          ; category
.text:0000000000005926                 xor     edi, edi        ; domainname
.text:0000000000005928                 call    _dcgettext
.text:000000000000592D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005934                 lea     rdx, unk_8C2B
.text:000000000000593B                 mov     rsi, rax
.text:000000000000593E                 mov     edi, 1
.text:0000000000005943                 xor     eax, eax
.text:0000000000005945                 call    ___printf_chk
.text:000000000000594A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005951                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005958                 xor     edi, edi        ; domainname
.text:000000000000595A                 mov     edx, 5          ; category
.text:000000000000595F                 call    _dcgettext
.text:0000000000005964                 mov     rsi, rbx        ; stream
.text:0000000000005967                 mov     rdi, rax        ; s
.text:000000000000596A                 pop     rbx
.text:000000000000596B                 jmp     _fputs_unlocked
.text:000000000000596B ; } // starts at 58F0
.text:000000000000596B emit_bug_reporting_address endp
.text:000000000000596B
.text:0000000000005970
.text:0000000000005970 ; =============== S U B R O U T I N E =======================================
.text:0000000000005970
.text:0000000000005970
.text:0000000000005970                 public xmalloc
.text:0000000000005970 xmalloc         proc near               ; CODE XREF: main+66A↑p
.text:0000000000005970                                         ; quotearg_n_options+127↑p ...
.text:0000000000005970 ; __unwind {
.text:0000000000005970                 push    rbx
.text:0000000000005971                 mov     rbx, rdi
.text:0000000000005974                 call    _malloc
.text:0000000000005979                 test    rax, rax
.text:000000000000597C                 jnz     short loc_5983
.text:000000000000597E                 test    rbx, rbx
.text:0000000000005981                 jnz     short loc_5985
.text:0000000000005983
.text:0000000000005983 loc_5983:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005983                 pop     rbx
.text:0000000000005984                 retn
.text:0000000000005985 ; ---------------------------------------------------------------------------
.text:0000000000005985
.text:0000000000005985 loc_5985:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005985                 call    xalloc_die
.text:0000000000005985 ; } // starts at 5970
.text:0000000000005985 xmalloc         endp
.text:0000000000005985
.text:0000000000005985 ; ---------------------------------------------------------------------------
.text:000000000000598A                 align 10h
.text:0000000000005990
.text:0000000000005990 ; =============== S U B R O U T I N E =======================================
.text:0000000000005990
.text:0000000000005990 ; Attributes: info_from_lumina
.text:0000000000005990
.text:0000000000005990 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005990                 public xnmalloc
.text:0000000000005990 xnmalloc        proc near
.text:0000000000005990 ; __unwind {
.text:0000000000005990                 mov     rax, rdi
.text:0000000000005993                 mul     rsi
.text:0000000000005996                 mov     rdi, rax
.text:0000000000005999                 seto    al
.text:000000000000599C                 test    rdi, rdi
.text:000000000000599F                 js      short loc_59AB
.text:00000000000059A1                 movzx   eax, al
.text:00000000000059A4                 test    rax, rax
.text:00000000000059A7                 jnz     short loc_59AB
.text:00000000000059A9                 jmp     short xmalloc
.text:00000000000059AB ; ---------------------------------------------------------------------------
.text:00000000000059AB
.text:00000000000059AB loc_59AB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000059AB                                         ; xnmalloc+17↑j
.text:00000000000059AB                 sub     rsp, 8
.text:00000000000059AF                 call    xalloc_die
.text:00000000000059AF ; } // starts at 5990
.text:00000000000059AF xnmalloc        endp
.text:00000000000059AF
.text:00000000000059AF ; ---------------------------------------------------------------------------
.text:00000000000059B4                 align 20h
.text:00000000000059C0
.text:00000000000059C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059C0
.text:00000000000059C0
.text:00000000000059C0                 public xcharalloc
.text:00000000000059C0 xcharalloc      proc near
.text:00000000000059C0 ; __unwind {
.text:00000000000059C0                 jmp     short xmalloc
.text:00000000000059C0 ; } // starts at 59C0
.text:00000000000059C0 xcharalloc      endp
.text:00000000000059C0
.text:00000000000059C0 ; ---------------------------------------------------------------------------
.text:00000000000059C2                 align 10h
.text:00000000000059D0
.text:00000000000059D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059D0
.text:00000000000059D0 ; Attributes: info_from_lumina
.text:00000000000059D0
.text:00000000000059D0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000059D0                 public xrealloc
.text:00000000000059D0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000059D0                                         ; quotearg_n_options+182↑p ...
.text:00000000000059D0 ; __unwind {
.text:00000000000059D0                 test    rsi, rsi
.text:00000000000059D3                 push    rbx
.text:00000000000059D4                 mov     rbx, rsi
.text:00000000000059D7                 jnz     short loc_59DE
.text:00000000000059D9                 test    rdi, rdi
.text:00000000000059DC                 jnz     short loc_59F8
.text:00000000000059DE
.text:00000000000059DE loc_59DE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000059DE                 mov     rsi, rbx        ; size
.text:00000000000059E1                 call    _realloc
.text:00000000000059E6                 test    rax, rax
.text:00000000000059E9                 jnz     short loc_59F0
.text:00000000000059EB                 test    rbx, rbx
.text:00000000000059EE                 jnz     short loc_5A01
.text:00000000000059F0
.text:00000000000059F0 loc_59F0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000059F0                 pop     rbx
.text:00000000000059F1                 retn
.text:00000000000059F1 ; ---------------------------------------------------------------------------
.text:00000000000059F2                 align 8
.text:00000000000059F8
.text:00000000000059F8 loc_59F8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000059F8                 call    _free
.text:00000000000059FD                 xor     eax, eax
.text:00000000000059FF                 pop     rbx
.text:0000000000005A00                 retn
.text:0000000000005A01 ; ---------------------------------------------------------------------------
.text:0000000000005A01
.text:0000000000005A01 loc_5A01:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005A01                 call    xalloc_die
.text:0000000000005A01 ; } // starts at 59D0
.text:0000000000005A01 xrealloc        endp
.text:0000000000005A01
.text:0000000000005A01 ; ---------------------------------------------------------------------------
.text:0000000000005A06                 align 10h
.text:0000000000005A10
.text:0000000000005A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A10
.text:0000000000005A10 ; Attributes: info_from_lumina
.text:0000000000005A10
.text:0000000000005A10 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005A10                 public xnrealloc
.text:0000000000005A10 xnrealloc       proc near
.text:0000000000005A10 ; __unwind {
.text:0000000000005A10                 mov     rax, rsi
.text:0000000000005A13                 mul     rdx
.text:0000000000005A16                 mov     rsi, rax
.text:0000000000005A19                 seto    al
.text:0000000000005A1C                 test    rsi, rsi
.text:0000000000005A1F                 js      short loc_5A2B
.text:0000000000005A21                 movzx   eax, al
.text:0000000000005A24                 test    rax, rax
.text:0000000000005A27                 jnz     short loc_5A2B
.text:0000000000005A29                 jmp     short xrealloc
.text:0000000000005A2B ; ---------------------------------------------------------------------------
.text:0000000000005A2B
.text:0000000000005A2B loc_5A2B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000005A2B                                         ; xnrealloc+17↑j
.text:0000000000005A2B                 sub     rsp, 8
.text:0000000000005A2F                 call    xalloc_die
.text:0000000000005A2F ; } // starts at 5A10
.text:0000000000005A2F xnrealloc       endp
.text:0000000000005A2F
.text:0000000000005A2F ; ---------------------------------------------------------------------------
.text:0000000000005A34                 align 20h
.text:0000000000005A40
.text:0000000000005A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A40
.text:0000000000005A40 ; Attributes: info_from_lumina
.text:0000000000005A40
.text:0000000000005A40 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005A40                 public x2nrealloc
.text:0000000000005A40 x2nrealloc      proc near
.text:0000000000005A40 ; __unwind {
.text:0000000000005A40                 test    rdi, rdi
.text:0000000000005A43                 mov     r9, rdx
.text:0000000000005A46                 mov     rcx, [rsi]
.text:0000000000005A49                 jz      short loc_5A80
.text:0000000000005A4B                 xor     edx, edx
.text:0000000000005A4D                 mov     rax, 5555555555555554h
.text:0000000000005A57                 div     r9
.text:0000000000005A5A                 cmp     rax, rcx
.text:0000000000005A5D                 jbe     short loc_5A9B
.text:0000000000005A5F                 mov     rax, rcx
.text:0000000000005A62                 shr     rax, 1
.text:0000000000005A65                 lea     rcx, [rax+rcx+1]
.text:0000000000005A6A
.text:0000000000005A6A loc_5A6A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000005A6A                 mov     [rsi], rcx
.text:0000000000005A6D                 imul    rcx, r9
.text:0000000000005A71                 mov     rsi, rcx
.text:0000000000005A74                 jmp     xrealloc
.text:0000000000005A74 ; ---------------------------------------------------------------------------
.text:0000000000005A79                 align 20h
.text:0000000000005A80
.text:0000000000005A80 loc_5A80:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005A80                 test    rcx, rcx
.text:0000000000005A83                 jz      short loc_5AA8
.text:0000000000005A85
.text:0000000000005A85 loc_5A85:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005A85                 mov     rax, rcx
.text:0000000000005A88                 mul     r9
.text:0000000000005A8B                 seto    dl
.text:0000000000005A8E                 test    rax, rax
.text:0000000000005A91                 movzx   edx, dl
.text:0000000000005A94                 js      short loc_5A9B
.text:0000000000005A96                 test    rdx, rdx
.text:0000000000005A99                 jz      short loc_5A6A
.text:0000000000005A9B
.text:0000000000005A9B loc_5A9B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000005A9B                                         ; x2nrealloc+54↑j
.text:0000000000005A9B                 sub     rsp, 8
.text:0000000000005A9F                 call    xalloc_die
.text:0000000000005A9F ; ---------------------------------------------------------------------------
.text:0000000000005AA4                 align 8
.text:0000000000005AA8
.text:0000000000005AA8 loc_5AA8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005AA8                 xor     edx, edx
.text:0000000000005AAA                 mov     eax, 80h
.text:0000000000005AAF                 xor     r8d, r8d
.text:0000000000005AB2                 div     r9
.text:0000000000005AB5                 test    rax, rax
.text:0000000000005AB8                 setz    r8b
.text:0000000000005ABC                 lea     rcx, [r8+rax]
.text:0000000000005AC0                 jmp     short loc_5A85
.text:0000000000005AC0 ; } // starts at 5A40
.text:0000000000005AC0 x2nrealloc      endp
.text:0000000000005AC0
.text:0000000000005AC0 ; ---------------------------------------------------------------------------
.text:0000000000005AC2                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AD0
.text:0000000000005AD0 ; Attributes: info_from_lumina
.text:0000000000005AD0
.text:0000000000005AD0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005AD0                 public x2realloc
.text:0000000000005AD0 x2realloc       proc near
.text:0000000000005AD0 ; __unwind {
.text:0000000000005AD0                 test    rdi, rdi
.text:0000000000005AD3                 mov     rax, [rsi]
.text:0000000000005AD6                 jz      short loc_5B00
.text:0000000000005AD8                 mov     rdx, 5555555555555553h
.text:0000000000005AE2                 cmp     rax, rdx
.text:0000000000005AE5                 ja      short loc_5B11
.text:0000000000005AE7                 mov     rdx, rax
.text:0000000000005AEA                 shr     rdx, 1
.text:0000000000005AED                 lea     rax, [rdx+rax+1]
.text:0000000000005AF2
.text:0000000000005AF2 loc_5AF2:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005AF2                 mov     [rsi], rax
.text:0000000000005AF5                 mov     rsi, rax
.text:0000000000005AF8                 jmp     xrealloc
.text:0000000000005AF8 ; ---------------------------------------------------------------------------
.text:0000000000005AFD                 align 20h
.text:0000000000005B00
.text:0000000000005B00 loc_5B00:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005B00                 test    rax, rax
.text:0000000000005B03                 mov     edx, 80h
.text:0000000000005B08                 cmovz   rax, rdx
.text:0000000000005B0C                 test    rax, rax
.text:0000000000005B0F                 jns     short loc_5AF2
.text:0000000000005B11
.text:0000000000005B11 loc_5B11:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005B11                 sub     rsp, 8
.text:0000000000005B15                 call    xalloc_die
.text:0000000000005B15 ; } // starts at 5AD0
.text:0000000000005B15 x2realloc       endp
.text:0000000000005B15
.text:0000000000005B15 ; ---------------------------------------------------------------------------
.text:0000000000005B1A                 align 20h
.text:0000000000005B20
.text:0000000000005B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B20
.text:0000000000005B20
.text:0000000000005B20 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005B20                 public xzalloc
.text:0000000000005B20 xzalloc         proc near
.text:0000000000005B20 ; __unwind {
.text:0000000000005B20                 push    rbx
.text:0000000000005B21                 mov     rbx, rdi
.text:0000000000005B24                 call    xmalloc
.text:0000000000005B29                 mov     rdx, rbx        ; n
.text:0000000000005B2C                 xor     esi, esi        ; c
.text:0000000000005B2E                 mov     rdi, rax        ; s
.text:0000000000005B31                 pop     rbx
.text:0000000000005B32                 jmp     _memset
.text:0000000000005B32 ; } // starts at 5B20
.text:0000000000005B32 xzalloc         endp
.text:0000000000005B32
.text:0000000000005B32 ; ---------------------------------------------------------------------------
.text:0000000000005B37                 align 20h
.text:0000000000005B40
.text:0000000000005B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B40
.text:0000000000005B40 ; Attributes: info_from_lumina
.text:0000000000005B40
.text:0000000000005B40 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005B40                 public xcalloc
.text:0000000000005B40 xcalloc         proc near
.text:0000000000005B40 ; __unwind {
.text:0000000000005B40                 mov     rax, rdi
.text:0000000000005B43                 sub     rsp, 8
.text:0000000000005B47                 mul     rsi
.text:0000000000005B4A                 seto    dl
.text:0000000000005B4D                 test    rax, rax
.text:0000000000005B50                 js      short loc_5B69
.text:0000000000005B52                 movzx   edx, dl
.text:0000000000005B55                 test    rdx, rdx
.text:0000000000005B58                 jnz     short loc_5B69
.text:0000000000005B5A                 call    _calloc
.text:0000000000005B5F                 test    rax, rax
.text:0000000000005B62                 jz      short loc_5B69
.text:0000000000005B64                 add     rsp, 8
.text:0000000000005B68                 retn
.text:0000000000005B69 ; ---------------------------------------------------------------------------
.text:0000000000005B69
.text:0000000000005B69 loc_5B69:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005B69                                         ; xcalloc+18↑j ...
.text:0000000000005B69                 call    xalloc_die
.text:0000000000005B69 ; } // starts at 5B40
.text:0000000000005B69 xcalloc         endp
.text:0000000000005B69
.text:0000000000005B69 ; ---------------------------------------------------------------------------
.text:0000000000005B6E                 align 10h
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70 ; Attributes: info_from_lumina
.text:0000000000005B70
.text:0000000000005B70 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005B70                 public xmemdup
.text:0000000000005B70 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005B70                                         ; xstrdup+11↓j
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 push    rbp
.text:0000000000005B71                 push    rbx
.text:0000000000005B72                 mov     rbp, rdi
.text:0000000000005B75                 mov     rdi, rsi
.text:0000000000005B78                 mov     rbx, rsi
.text:0000000000005B7B                 sub     rsp, 8
.text:0000000000005B7F                 call    xmalloc
.text:0000000000005B84                 add     rsp, 8
.text:0000000000005B88                 mov     rdx, rbx        ; n
.text:0000000000005B8B                 mov     rsi, rbp        ; src
.text:0000000000005B8E                 pop     rbx
.text:0000000000005B8F                 pop     rbp
.text:0000000000005B90                 mov     rdi, rax        ; dest
.text:0000000000005B93                 jmp     _memcpy
.text:0000000000005B93 ; } // starts at 5B70
.text:0000000000005B93 xmemdup         endp
.text:0000000000005B93
.text:0000000000005B93 ; ---------------------------------------------------------------------------
.text:0000000000005B98                 align 20h
.text:0000000000005BA0
.text:0000000000005BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BA0
.text:0000000000005BA0
.text:0000000000005BA0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005BA0                 public xstrdup
.text:0000000000005BA0 xstrdup         proc near
.text:0000000000005BA0 ; __unwind {
.text:0000000000005BA0                 push    rbx
.text:0000000000005BA1                 mov     rbx, rdi
.text:0000000000005BA4                 call    _strlen
.text:0000000000005BA9                 mov     rdi, rbx        ; src
.text:0000000000005BAC                 lea     rsi, [rax+1]    ; n
.text:0000000000005BB0                 pop     rbx
.text:0000000000005BB1                 jmp     short xmemdup
.text:0000000000005BB1 ; } // starts at 5BA0
.text:0000000000005BB1 xstrdup         endp
.text:0000000000005BB1
.text:0000000000005BB1 ; ---------------------------------------------------------------------------
.text:0000000000005BB3                 align 20h
.text:0000000000005BC0
.text:0000000000005BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BC0
.text:0000000000005BC0 ; Attributes: noreturn info_from_lumina
.text:0000000000005BC0
.text:0000000000005BC0 ; void __cdecl xalloc_die()
.text:0000000000005BC0                 public xalloc_die
.text:0000000000005BC0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_47A6↑p
.text:0000000000005BC0                                         ; xmalloc:loc_5985↑p ...
.text:0000000000005BC0 ; __unwind {
.text:0000000000005BC0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005BC7                 sub     rsp, 8
.text:0000000000005BCB                 mov     edx, 5          ; category
.text:0000000000005BD0                 xor     edi, edi        ; domainname
.text:0000000000005BD2                 call    _dcgettext
.text:0000000000005BD7                 mov     edi, cs:exit_failure ; status
.text:0000000000005BDD                 lea     rdx, aInvalidFieldWi+15h ; format
.text:0000000000005BE4                 mov     rcx, rax
.text:0000000000005BE7                 xor     esi, esi        ; errnum
.text:0000000000005BE9                 xor     eax, eax
.text:0000000000005BEB                 call    _error
.text:0000000000005BF0                 call    _abort
.text:0000000000005BF0 ; } // starts at 5BC0
.text:0000000000005BF0 xalloc_die      endp
.text:0000000000005BF0
.text:0000000000005BF0 ; ---------------------------------------------------------------------------
.text:0000000000005BF5                 align 20h
.text:0000000000005C00
.text:0000000000005C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C00
.text:0000000000005C00
.text:0000000000005C00                 public xvprintf
.text:0000000000005C00 xvprintf        proc near               ; CODE XREF: xasprintf+94↓p
.text:0000000000005C00 ; __unwind {
.text:0000000000005C00                 push    rbp
.text:0000000000005C01                 push    rbx
.text:0000000000005C02                 sub     rsp, 8
.text:0000000000005C06                 call    rpl_vprintf
.text:0000000000005C0B                 test    eax, eax
.text:0000000000005C0D                 mov     ebx, eax
.text:0000000000005C0F                 js      short loc_5C20
.text:0000000000005C11
.text:0000000000005C11 loc_5C11:                               ; CODE XREF: xvprintf+2E↓j
.text:0000000000005C11                                         ; xvprintf+5D↓j
.text:0000000000005C11                 add     rsp, 8
.text:0000000000005C15                 mov     eax, ebx
.text:0000000000005C17                 pop     rbx
.text:0000000000005C18                 pop     rbp
.text:0000000000005C19                 retn
.text:0000000000005C19 ; ---------------------------------------------------------------------------
.text:0000000000005C1A                 align 20h
.text:0000000000005C20
.text:0000000000005C20 loc_5C20:                               ; CODE XREF: xvprintf+F↑j
.text:0000000000005C20                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000005C27                 call    _ferror
.text:0000000000005C2C                 test    eax, eax
.text:0000000000005C2E                 jnz     short loc_5C11
.text:0000000000005C30                 lea     rsi, aCannotPerformF ; "cannot perform formatted output"
.text:0000000000005C37                 xor     edi, edi        ; domainname
.text:0000000000005C39                 mov     edx, 5          ; category
.text:0000000000005C3E                 call    _dcgettext
.text:0000000000005C43                 mov     rbp, rax
.text:0000000000005C46                 call    ___errno_location
.text:0000000000005C4B                 mov     edi, cs:exit_failure ; status
.text:0000000000005C51                 mov     esi, [rax]      ; errnum
.text:0000000000005C53                 mov     rdx, rbp        ; format
.text:0000000000005C56                 xor     eax, eax
.text:0000000000005C58                 call    _error
.text:0000000000005C5D                 jmp     short loc_5C11
.text:0000000000005C5D ; } // starts at 5C00
.text:0000000000005C5D xvprintf        endp
.text:0000000000005C5D
.text:0000000000005C5D ; ---------------------------------------------------------------------------
.text:0000000000005C5F                 align 20h
.text:0000000000005C60
.text:0000000000005C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C60
.text:0000000000005C60 ; Attributes: info_from_lumina
.text:0000000000005C60
.text:0000000000005C60 ; char *xasprintf(const char *fmt, ...)
.text:0000000000005C60                 public xasprintf
.text:0000000000005C60 xasprintf       proc near               ; CODE XREF: main+810↑p
.text:0000000000005C60                                         ; main+852↑p ...
.text:0000000000005C60
.text:0000000000005C60 var_D8          = dword ptr -0D8h
.text:0000000000005C60 var_D4          = dword ptr -0D4h
.text:0000000000005C60 var_D0          = qword ptr -0D0h
.text:0000000000005C60 var_C8          = qword ptr -0C8h
.text:0000000000005C60 var_C0          = qword ptr -0C0h
.text:0000000000005C60 var_B8          = byte ptr -0B8h
.text:0000000000005C60 var_B0          = qword ptr -0B0h
.text:0000000000005C60 var_A8          = qword ptr -0A8h
.text:0000000000005C60 var_A0          = qword ptr -0A0h
.text:0000000000005C60 var_98          = qword ptr -98h
.text:0000000000005C60 var_90          = qword ptr -90h
.text:0000000000005C60 var_88          = xmmword ptr -88h
.text:0000000000005C60 var_78          = xmmword ptr -78h
.text:0000000000005C60 var_68          = xmmword ptr -68h
.text:0000000000005C60 var_58          = xmmword ptr -58h
.text:0000000000005C60 var_48          = xmmword ptr -48h
.text:0000000000005C60 var_38          = xmmword ptr -38h
.text:0000000000005C60 var_28          = xmmword ptr -28h
.text:0000000000005C60 var_18          = xmmword ptr -18h
.text:0000000000005C60 arg_0           = byte ptr  8
.text:0000000000005C60
.text:0000000000005C60 ; __unwind {
.text:0000000000005C60                 sub     rsp, 0D8h
.text:0000000000005C67                 test    al, al
.text:0000000000005C69                 mov     [rsp+0D8h+var_B0], rsi
.text:0000000000005C6E                 mov     [rsp+0D8h+var_A8], rdx
.text:0000000000005C73                 mov     [rsp+0D8h+var_A0], rcx
.text:0000000000005C78                 mov     [rsp+0D8h+var_98], r8
.text:0000000000005C7D                 mov     [rsp+0D8h+var_90], r9
.text:0000000000005C82                 jz      short loc_5CBB
.text:0000000000005C84                 movaps  [rsp+0D8h+var_88], xmm0
.text:0000000000005C89                 movaps  [rsp+0D8h+var_78], xmm1
.text:0000000000005C8E                 movaps  [rsp+0D8h+var_68], xmm2
.text:0000000000005C93                 movaps  [rsp+0D8h+var_58], xmm3
.text:0000000000005C9B                 movaps  [rsp+0D8h+var_48], xmm4
.text:0000000000005CA3                 movaps  [rsp+0D8h+var_38], xmm5
.text:0000000000005CAB                 movaps  [rsp+0D8h+var_28], xmm6
.text:0000000000005CB3                 movaps  [rsp+0D8h+var_18], xmm7
.text:0000000000005CBB
.text:0000000000005CBB loc_5CBB:                               ; CODE XREF: xasprintf+22↑j
.text:0000000000005CBB                 mov     rax, fs:28h
.text:0000000000005CC4                 mov     [rsp+0D8h+var_C0], rax
.text:0000000000005CC9                 xor     eax, eax
.text:0000000000005CCB                 lea     rax, [rsp+0D8h+arg_0]
.text:0000000000005CD3                 mov     rsi, rsp
.text:0000000000005CD6                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000005CDB                 lea     rax, [rsp+0D8h+var_B8]
.text:0000000000005CE0                 mov     [rsp+0D8h+var_D8], 8
.text:0000000000005CE7                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:0000000000005CEF                 mov     [rsp+0D8h+var_C8], rax
.text:0000000000005CF4                 call    xvprintf
.text:0000000000005CF9                 mov     rdx, [rsp+0D8h+var_C0]
.text:0000000000005CFE                 xor     rdx, fs:28h
.text:0000000000005D07                 jnz     short loc_5D11
.text:0000000000005D09                 add     rsp, 0D8h
.text:0000000000005D10                 retn
.text:0000000000005D11 ; ---------------------------------------------------------------------------
.text:0000000000005D11
.text:0000000000005D11 loc_5D11:                               ; CODE XREF: xasprintf+A7↑j
.text:0000000000005D11                 call    ___stack_chk_fail
.text:0000000000005D11 ; } // starts at 5C60
.text:0000000000005D11 xasprintf       endp
.text:0000000000005D11
.text:0000000000005D11 ; ---------------------------------------------------------------------------
.text:0000000000005D16                 align 20h
.text:0000000000005D20
.text:0000000000005D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D20
.text:0000000000005D20
.text:0000000000005D20 ; __int64 __fastcall xvfprintf(FILE *stream)
.text:0000000000005D20                 public xvfprintf
.text:0000000000005D20 xvfprintf       proc near               ; CODE XREF: gzprintf+8F↓p
.text:0000000000005D20 ; __unwind {
.text:0000000000005D20                 push    rbp
.text:0000000000005D21                 push    rbx
.text:0000000000005D22                 mov     rbp, rdi
.text:0000000000005D25                 sub     rsp, 8
.text:0000000000005D29                 call    rpl_vfprintf
.text:0000000000005D2E                 test    eax, eax
.text:0000000000005D30                 mov     ebx, eax
.text:0000000000005D32                 js      short loc_5D40
.text:0000000000005D34
.text:0000000000005D34 loc_5D34:                               ; CODE XREF: xvfprintf+2A↓j
.text:0000000000005D34                                         ; xvfprintf+59↓j
.text:0000000000005D34                 add     rsp, 8
.text:0000000000005D38                 mov     eax, ebx
.text:0000000000005D3A                 pop     rbx
.text:0000000000005D3B                 pop     rbp
.text:0000000000005D3C                 retn
.text:0000000000005D3C ; ---------------------------------------------------------------------------
.text:0000000000005D3D                 align 20h
.text:0000000000005D40
.text:0000000000005D40 loc_5D40:                               ; CODE XREF: xvfprintf+12↑j
.text:0000000000005D40                 mov     rdi, rbp        ; stream
.text:0000000000005D43                 call    _ferror
.text:0000000000005D48                 test    eax, eax
.text:0000000000005D4A                 jnz     short loc_5D34
.text:0000000000005D4C                 lea     rsi, aCannotPerformF ; "cannot perform formatted output"
.text:0000000000005D53                 xor     edi, edi        ; domainname
.text:0000000000005D55                 mov     edx, 5          ; category
.text:0000000000005D5A                 call    _dcgettext
.text:0000000000005D5F                 mov     rbp, rax
.text:0000000000005D62                 call    ___errno_location
.text:0000000000005D67                 mov     edi, cs:exit_failure ; status
.text:0000000000005D6D                 mov     esi, [rax]      ; errnum
.text:0000000000005D6F                 mov     rdx, rbp        ; format
.text:0000000000005D72                 xor     eax, eax
.text:0000000000005D74                 call    _error
.text:0000000000005D79                 jmp     short loc_5D34
.text:0000000000005D79 ; } // starts at 5D20
.text:0000000000005D79 xvfprintf       endp
.text:0000000000005D79
.text:0000000000005D79 ; ---------------------------------------------------------------------------
.text:0000000000005D7B                 align 20h
.text:0000000000005D80
.text:0000000000005D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D80
.text:0000000000005D80 ; Attributes: info_from_lumina
.text:0000000000005D80
.text:0000000000005D80 ; int gzprintf(gzFile_0 file, const char *format, ...)
.text:0000000000005D80                 public gzprintf
.text:0000000000005D80 gzprintf        proc near
.text:0000000000005D80
.text:0000000000005D80 var_D8          = dword ptr -0D8h
.text:0000000000005D80 var_D4          = dword ptr -0D4h
.text:0000000000005D80 var_D0          = qword ptr -0D0h
.text:0000000000005D80 var_C8          = qword ptr -0C8h
.text:0000000000005D80 var_C0          = qword ptr -0C0h
.text:0000000000005D80 var_B8          = byte ptr -0B8h
.text:0000000000005D80 var_A8          = qword ptr -0A8h
.text:0000000000005D80 var_A0          = qword ptr -0A0h
.text:0000000000005D80 var_98          = qword ptr -98h
.text:0000000000005D80 var_90          = qword ptr -90h
.text:0000000000005D80 var_88          = xmmword ptr -88h
.text:0000000000005D80 var_78          = xmmword ptr -78h
.text:0000000000005D80 var_68          = xmmword ptr -68h
.text:0000000000005D80 var_58          = xmmword ptr -58h
.text:0000000000005D80 var_48          = xmmword ptr -48h
.text:0000000000005D80 var_38          = xmmword ptr -38h
.text:0000000000005D80 var_28          = xmmword ptr -28h
.text:0000000000005D80 var_18          = xmmword ptr -18h
.text:0000000000005D80 arg_0           = byte ptr  8
.text:0000000000005D80
.text:0000000000005D80 ; __unwind {
.text:0000000000005D80                 sub     rsp, 0D8h
.text:0000000000005D87                 test    al, al
.text:0000000000005D89                 mov     [rsp+0D8h+var_A8], rdx
.text:0000000000005D8E                 mov     [rsp+0D8h+var_A0], rcx
.text:0000000000005D93                 mov     [rsp+0D8h+var_98], r8
.text:0000000000005D98                 mov     [rsp+0D8h+var_90], r9
.text:0000000000005D9D                 jz      short loc_5DD6
.text:0000000000005D9F                 movaps  [rsp+0D8h+var_88], xmm0
.text:0000000000005DA4                 movaps  [rsp+0D8h+var_78], xmm1
.text:0000000000005DA9                 movaps  [rsp+0D8h+var_68], xmm2
.text:0000000000005DAE                 movaps  [rsp+0D8h+var_58], xmm3
.text:0000000000005DB6                 movaps  [rsp+0D8h+var_48], xmm4
.text:0000000000005DBE                 movaps  [rsp+0D8h+var_38], xmm5
.text:0000000000005DC6                 movaps  [rsp+0D8h+var_28], xmm6
.text:0000000000005DCE                 movaps  [rsp+0D8h+var_18], xmm7
.text:0000000000005DD6
.text:0000000000005DD6 loc_5DD6:                               ; CODE XREF: gzprintf+1D↑j
.text:0000000000005DD6                 mov     rax, fs:28h
.text:0000000000005DDF                 mov     [rsp+0D8h+var_C0], rax
.text:0000000000005DE4                 xor     eax, eax
.text:0000000000005DE6                 lea     rax, [rsp+0D8h+arg_0]
.text:0000000000005DEE                 mov     rdx, rsp
.text:0000000000005DF1                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000005DF6                 lea     rax, [rsp+0D8h+var_B8]
.text:0000000000005DFB                 mov     [rsp+0D8h+var_D8], 10h
.text:0000000000005E02                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:0000000000005E0A                 mov     [rsp+0D8h+var_C8], rax
.text:0000000000005E0F                 call    xvfprintf
.text:0000000000005E14                 mov     rcx, [rsp+0D8h+var_C0]
.text:0000000000005E19                 xor     rcx, fs:28h
.text:0000000000005E22                 jnz     short loc_5E2C
.text:0000000000005E24                 add     rsp, 0D8h
.text:0000000000005E2B                 retn
.text:0000000000005E2C ; ---------------------------------------------------------------------------
.text:0000000000005E2C
.text:0000000000005E2C loc_5E2C:                               ; CODE XREF: gzprintf+A2↑j
.text:0000000000005E2C                 call    ___stack_chk_fail
.text:0000000000005E2C ; } // starts at 5D80
.text:0000000000005E2C gzprintf        endp
.text:0000000000005E2C
.text:0000000000005E2C ; ---------------------------------------------------------------------------
.text:0000000000005E31                 align 20h
.text:0000000000005E40
.text:0000000000005E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E40
.text:0000000000005E40 ; Attributes: info_from_lumina
.text:0000000000005E40
.text:0000000000005E40 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005E40                 public rpl_mbrtowc
.text:0000000000005E40 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005E40
.text:0000000000005E40 pwc             = dword ptr -34h
.text:0000000000005E40 var_30          = qword ptr -30h
.text:0000000000005E40
.text:0000000000005E40 ; __unwind {
.text:0000000000005E40                 push    r13
.text:0000000000005E42                 push    r12
.text:0000000000005E44                 mov     r13, rsi
.text:0000000000005E47                 push    rbp
.text:0000000000005E48                 push    rbx
.text:0000000000005E49                 mov     rbx, rdi
.text:0000000000005E4C                 mov     r12, rdx
.text:0000000000005E4F                 sub     rsp, 18h
.text:0000000000005E53                 mov     rax, fs:28h
.text:0000000000005E5C                 mov     [rsp+38h+var_30], rax
.text:0000000000005E61                 xor     eax, eax
.text:0000000000005E63                 lea     rax, [rsp+38h+pwc]
.text:0000000000005E68                 test    rdi, rdi
.text:0000000000005E6B                 cmovz   rbx, rax
.text:0000000000005E6F                 mov     rdi, rbx        ; pwc
.text:0000000000005E72                 call    _mbrtowc
.text:0000000000005E77                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000005E7B                 mov     rbp, rax
.text:0000000000005E7E                 jbe     short loc_5EA0
.text:0000000000005E80                 test    r12, r12
.text:0000000000005E83                 jz      short loc_5EA0
.text:0000000000005E85                 xor     edi, edi
.text:0000000000005E87                 call    hard_locale
.text:0000000000005E8C                 test    al, al
.text:0000000000005E8E                 jnz     short loc_5EA0
.text:0000000000005E90                 movzx   eax, byte ptr [r13+0]
.text:0000000000005E95                 mov     ebp, 1
.text:0000000000005E9A                 mov     [rbx], eax
.text:0000000000005E9C                 nop     dword ptr [rax+00h]
.text:0000000000005EA0
.text:0000000000005EA0 loc_5EA0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005EA0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005EA0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005EA5                 xor     rdx, fs:28h
.text:0000000000005EAE                 mov     rax, rbp
.text:0000000000005EB1                 jnz     short loc_5EBE
.text:0000000000005EB3                 add     rsp, 18h
.text:0000000000005EB7                 pop     rbx
.text:0000000000005EB8                 pop     rbp
.text:0000000000005EB9                 pop     r12
.text:0000000000005EBB                 pop     r13
.text:0000000000005EBD                 retn
.text:0000000000005EBE ; ---------------------------------------------------------------------------
.text:0000000000005EBE
.text:0000000000005EBE loc_5EBE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000005EBE                 call    ___stack_chk_fail
.text:0000000000005EBE ; } // starts at 5E40
.text:0000000000005EBE rpl_mbrtowc     endp
.text:0000000000005EBE
.text:0000000000005EBE ; ---------------------------------------------------------------------------
.text:0000000000005EC3                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005ED0
.text:0000000000005ED0
.text:0000000000005ED0 ; __int64 __fastcall rpl_vfprintf(FILE *s)
.text:0000000000005ED0                 public rpl_vfprintf
.text:0000000000005ED0 rpl_vfprintf    proc near               ; CODE XREF: xvfprintf+9↑p
.text:0000000000005ED0                                         ; rpl_vprintf+D↓j
.text:0000000000005ED0
.text:0000000000005ED0 n               = qword ptr -810h
.text:0000000000005ED0 var_808         = byte ptr -808h
.text:0000000000005ED0 var_30          = qword ptr -30h
.text:0000000000005ED0
.text:0000000000005ED0 ; __unwind {
.text:0000000000005ED0                 push    r13
.text:0000000000005ED2                 push    r12
.text:0000000000005ED4                 mov     rax, rsi
.text:0000000000005ED7                 push    rbp
.text:0000000000005ED8                 push    rbx
.text:0000000000005ED9                 mov     r13, rdi
.text:0000000000005EDC                 sub     rsp, 7F8h
.text:0000000000005EE3                 lea     r12, [rsp+818h+var_808]
.text:0000000000005EE8                 lea     rsi, [rsp+818h+n]
.text:0000000000005EED                 mov     [rsp+818h+n], 7D0h
.text:0000000000005EF6                 mov     rcx, fs:28h
.text:0000000000005EFF                 mov     [rsp+818h+var_30], rcx
.text:0000000000005F07                 xor     ecx, ecx
.text:0000000000005F09                 mov     rdi, r12
.text:0000000000005F0C                 mov     rcx, rdx
.text:0000000000005F0F                 mov     rdx, rax
.text:0000000000005F12                 call    vasnprintf
.text:0000000000005F17                 test    rax, rax
.text:0000000000005F1A                 mov     rbx, [rsp+818h+n]
.text:0000000000005F1F                 jz      loc_5FAE
.text:0000000000005F25                 mov     rcx, r13        ; s
.text:0000000000005F28                 mov     rdx, rbx        ; n
.text:0000000000005F2B                 mov     esi, 1          ; size
.text:0000000000005F30                 mov     rdi, rax        ; ptr
.text:0000000000005F33                 mov     rbp, rax
.text:0000000000005F36                 call    _fwrite
.text:0000000000005F3B                 cmp     rax, rbx
.text:0000000000005F3E                 jb      short loc_5F80
.text:0000000000005F40                 cmp     rbp, r12
.text:0000000000005F43                 jz      short loc_5F4D
.text:0000000000005F45                 mov     rdi, rbp        ; ptr
.text:0000000000005F48                 call    _free
.text:0000000000005F4D
.text:0000000000005F4D loc_5F4D:                               ; CODE XREF: rpl_vfprintf+73↑j
.text:0000000000005F4D                 cmp     rbx, 7FFFFFFFh
.text:0000000000005F54                 ja      short loc_5FA3
.text:0000000000005F56
.text:0000000000005F56 loc_5F56:                               ; CODE XREF: rpl_vfprintf+B8↓j
.text:0000000000005F56                                         ; rpl_vfprintf+D1↓j ...
.text:0000000000005F56                 mov     rcx, [rsp+818h+var_30]
.text:0000000000005F5E                 xor     rcx, fs:28h
.text:0000000000005F67                 mov     eax, ebx
.text:0000000000005F69                 jnz     short loc_5FBD
.text:0000000000005F6B                 add     rsp, 7F8h
.text:0000000000005F72                 pop     rbx
.text:0000000000005F73                 pop     rbp
.text:0000000000005F74                 pop     r12
.text:0000000000005F76                 pop     r13
.text:0000000000005F78                 retn
.text:0000000000005F78 ; ---------------------------------------------------------------------------
.text:0000000000005F79                 align 20h
.text:0000000000005F80
.text:0000000000005F80 loc_5F80:                               ; CODE XREF: rpl_vfprintf+6E↑j
.text:0000000000005F80                 cmp     rbp, r12
.text:0000000000005F83                 mov     ebx, 0FFFFFFFFh
.text:0000000000005F88                 jz      short loc_5F56
.text:0000000000005F8A                 call    ___errno_location
.text:0000000000005F8F                 mov     r13d, [rax]
.text:0000000000005F92                 mov     r12, rax
.text:0000000000005F95                 mov     rdi, rbp        ; ptr
.text:0000000000005F98                 call    _free
.text:0000000000005F9D                 mov     [r12], r13d
.text:0000000000005FA1                 jmp     short loc_5F56
.text:0000000000005FA3 ; ---------------------------------------------------------------------------
.text:0000000000005FA3
.text:0000000000005FA3 loc_5FA3:                               ; CODE XREF: rpl_vfprintf+84↑j
.text:0000000000005FA3                 call    ___errno_location
.text:0000000000005FA8                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000005FAE
.text:0000000000005FAE loc_5FAE:                               ; CODE XREF: rpl_vfprintf+4F↑j
.text:0000000000005FAE                 mov     rdi, r13
.text:0000000000005FB1                 mov     ebx, 0FFFFFFFFh
.text:0000000000005FB6                 call    fseterr
.text:0000000000005FBB                 jmp     short loc_5F56
.text:0000000000005FBD ; ---------------------------------------------------------------------------
.text:0000000000005FBD
.text:0000000000005FBD loc_5FBD:                               ; CODE XREF: rpl_vfprintf+99↑j
.text:0000000000005FBD                 call    ___stack_chk_fail
.text:0000000000005FBD ; } // starts at 5ED0
.text:0000000000005FBD rpl_vfprintf    endp
.text:0000000000005FBD
.text:0000000000005FBD ; ---------------------------------------------------------------------------
.text:0000000000005FC2                 align 10h
.text:0000000000005FD0
.text:0000000000005FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FD0
.text:0000000000005FD0
.text:0000000000005FD0                 public rpl_vprintf
.text:0000000000005FD0 rpl_vprintf     proc near               ; CODE XREF: xvprintf+6↑p
.text:0000000000005FD0 ; __unwind {
.text:0000000000005FD0                 mov     rdx, rsi
.text:0000000000005FD3                 mov     rsi, rdi
.text:0000000000005FD6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; s
.text:0000000000005FDD                 jmp     rpl_vfprintf
.text:0000000000005FDD ; } // starts at 5FD0
.text:0000000000005FDD rpl_vprintf     endp
.text:0000000000005FDD
.text:0000000000005FDD ; ---------------------------------------------------------------------------
.text:0000000000005FE2                 align 10h
.text:0000000000005FF0
.text:0000000000005FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FF0
.text:0000000000005FF0
.text:0000000000005FF0 ; __int64 __fastcall c_strtold(char *nptr, char **endptr)
.text:0000000000005FF0                 public c_strtold
.text:0000000000005FF0 c_strtold       proc near               ; CODE XREF: cl_strtold+78↑p
.text:0000000000005FF0
.text:0000000000005FF0 var_28          = tbyte ptr -28h
.text:0000000000005FF0
.text:0000000000005FF0 ; __unwind {
.text:0000000000005FF0                 push    r12
.text:0000000000005FF2                 push    rbp
.text:0000000000005FF3                 mov     rbp, rdi
.text:0000000000005FF6                 push    rbx
.text:0000000000005FF7                 mov     rbx, rsi
.text:0000000000005FFA                 sub     rsp, 10h
.text:0000000000005FFE                 mov     rax, cs:c_locale_cache
.text:0000000000006005                 test    rax, rax
.text:0000000000006008                 jz      short loc_6080
.text:000000000000600A
.text:000000000000600A loc_600A:                               ; CODE XREF: c_strtold+AA↓j
.text:000000000000600A                 mov     rdi, cs:c_locale_cache ; dataset
.text:0000000000006011                 test    rdi, rdi
.text:0000000000006014                 jz      short loc_6060
.text:0000000000006016                 call    _uselocale
.text:000000000000601B                 test    rax, rax
.text:000000000000601E                 mov     r12, rax
.text:0000000000006021                 jz      short loc_6060
.text:0000000000006023                 mov     rsi, rbx        ; endptr
.text:0000000000006026                 mov     rdi, rbp        ; nptr
.text:0000000000006029                 call    _strtold
.text:000000000000602E                 fstp    [rsp+28h+var_28]
.text:0000000000006031                 call    ___errno_location
.text:0000000000006036                 mov     rdi, r12        ; dataset
.text:0000000000006039                 mov     rbx, rax
.text:000000000000603C                 mov     ebp, [rax]
.text:000000000000603E                 call    _uselocale
.text:0000000000006043                 test    rax, rax
.text:0000000000006046                 fld     [rsp+28h+var_28]
.text:0000000000006049                 jz      short loc_609F
.text:000000000000604B                 mov     [rbx], ebp
.text:000000000000604D                 add     rsp, 10h
.text:0000000000006051                 pop     rbx
.text:0000000000006052                 pop     rbp
.text:0000000000006053                 pop     r12
.text:0000000000006055                 retn
.text:0000000000006055 ; ---------------------------------------------------------------------------
.text:0000000000006056                 align 20h
.text:0000000000006060
.text:0000000000006060 loc_6060:                               ; CODE XREF: c_strtold+24↑j
.text:0000000000006060                                         ; c_strtold+31↑j
.text:0000000000006060                 test    rbx, rbx
.text:0000000000006063                 jnz     short loc_6070
.text:0000000000006065                 add     rsp, 10h
.text:0000000000006069                 fldz
.text:000000000000606B                 pop     rbx
.text:000000000000606C                 pop     rbp
.text:000000000000606D                 pop     r12
.text:000000000000606F                 retn
.text:0000000000006070 ; ---------------------------------------------------------------------------
.text:0000000000006070
.text:0000000000006070 loc_6070:                               ; CODE XREF: c_strtold+73↑j
.text:0000000000006070                 mov     [rbx], rbp
.text:0000000000006073                 add     rsp, 10h
.text:0000000000006077                 fldz
.text:0000000000006079                 pop     rbx
.text:000000000000607A                 pop     rbp
.text:000000000000607B                 pop     r12
.text:000000000000607D                 retn
.text:000000000000607D ; ---------------------------------------------------------------------------
.text:000000000000607E                 align 20h
.text:0000000000006080
.text:0000000000006080 loc_6080:                               ; CODE XREF: c_strtold+18↑j
.text:0000000000006080                 lea     rsi, locale     ; "C"
.text:0000000000006087                 xor     edx, edx        ; base
.text:0000000000006089                 mov     edi, 1FBFh      ; category_mask
.text:000000000000608E                 call    _newlocale
.text:0000000000006093                 mov     cs:c_locale_cache, rax
.text:000000000000609A                 jmp     loc_600A
.text:000000000000609F ; ---------------------------------------------------------------------------
.text:000000000000609F
.text:000000000000609F loc_609F:                               ; CODE XREF: c_strtold+59↑j
.text:000000000000609F                 fstp    st
.text:00000000000060A1                 call    _abort
.text:00000000000060A1 ; } // starts at 5FF0
.text:00000000000060A1 c_strtold       endp
.text:00000000000060A1
.text:00000000000060A1 ; ---------------------------------------------------------------------------
.text:00000000000060A6                 align 10h
.text:00000000000060B0
.text:00000000000060B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060B0
.text:00000000000060B0 ; Attributes: info_from_lumina
.text:00000000000060B0
.text:00000000000060B0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000060B0                 public close_stream
.text:00000000000060B0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000060B0                                         ; close_stdout+33↑p
.text:00000000000060B0 ; __unwind {
.text:00000000000060B0                 push    r12
.text:00000000000060B2                 push    rbp
.text:00000000000060B3                 mov     rbp, rdi
.text:00000000000060B6                 push    rbx
.text:00000000000060B7                 call    ___fpending
.text:00000000000060BC                 mov     ebx, [rbp+0]
.text:00000000000060BF                 mov     rdi, rbp        ; stream
.text:00000000000060C2                 mov     r12, rax
.text:00000000000060C5                 call    rpl_fclose
.text:00000000000060CA                 and     ebx, 20h
.text:00000000000060CD                 test    ebx, ebx
.text:00000000000060CF                 jnz     short loc_60E8
.text:00000000000060D1                 test    eax, eax
.text:00000000000060D3                 jz      short loc_60DF
.text:00000000000060D5                 test    r12, r12
.text:00000000000060D8                 mov     eax, 0FFFFFFFFh
.text:00000000000060DD                 jz      short loc_6118
.text:00000000000060DF
.text:00000000000060DF loc_60DF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000060DF                 pop     rbx
.text:00000000000060E0                 pop     rbp
.text:00000000000060E1                 pop     r12
.text:00000000000060E3                 retn
.text:00000000000060E3 ; ---------------------------------------------------------------------------
.text:00000000000060E4                 align 8
.text:00000000000060E8
.text:00000000000060E8 loc_60E8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000060E8                 test    eax, eax
.text:00000000000060EA                 jnz     short loc_6108
.text:00000000000060EC                 call    ___errno_location
.text:00000000000060F1                 mov     dword ptr [rax], 0
.text:00000000000060F7                 mov     eax, 0FFFFFFFFh
.text:00000000000060FC                 pop     rbx
.text:00000000000060FD                 pop     rbp
.text:00000000000060FE                 pop     r12
.text:0000000000006100                 retn
.text:0000000000006100 ; ---------------------------------------------------------------------------
.text:0000000000006101                 align 8
.text:0000000000006108
.text:0000000000006108 loc_6108:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006108                 pop     rbx
.text:0000000000006109                 mov     eax, 0FFFFFFFFh
.text:000000000000610E                 pop     rbp
.text:000000000000610F                 pop     r12
.text:0000000000006111                 retn
.text:0000000000006111 ; ---------------------------------------------------------------------------
.text:0000000000006112                 align 8
.text:0000000000006118
.text:0000000000006118 loc_6118:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006118                 call    ___errno_location
.text:000000000000611D                 cmp     dword ptr [rax], 9
.text:0000000000006120                 pop     rbx
.text:0000000000006121                 pop     rbp
.text:0000000000006122                 pop     r12
.text:0000000000006124                 setnz   al
.text:0000000000006127                 movzx   eax, al
.text:000000000000612A                 neg     eax
.text:000000000000612C                 retn
.text:000000000000612C ; } // starts at 60B0
.text:000000000000612C close_stream    endp
.text:000000000000612C
.text:000000000000612C ; ---------------------------------------------------------------------------
.text:000000000000612D                 align 10h
.text:0000000000006130
.text:0000000000006130 ; =============== S U B R O U T I N E =======================================
.text:0000000000006130
.text:0000000000006130
.text:0000000000006130                 public hard_locale
.text:0000000000006130 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000006130 ; __unwind {
.text:0000000000006130                 sub     rsp, 8
.text:0000000000006134                 xor     esi, esi        ; locale
.text:0000000000006136                 call    _setlocale
.text:000000000000613B                 mov     rdx, rax
.text:000000000000613E                 mov     eax, 1
.text:0000000000006143                 test    rdx, rdx
.text:0000000000006146                 jz      short loc_6165
.text:0000000000006148                 lea     rdi, locale     ; "C"
.text:000000000000614F                 mov     ecx, 2
.text:0000000000006154                 mov     rsi, rdx
.text:0000000000006157                 repe cmpsb
.text:0000000000006159                 setnbe  cl
.text:000000000000615C                 sbb     cl, 0
.text:000000000000615F                 xor     eax, eax
.text:0000000000006161                 test    cl, cl
.text:0000000000006163                 jnz     short loc_6170
.text:0000000000006165
.text:0000000000006165 loc_6165:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000006165                 add     rsp, 8
.text:0000000000006169                 retn
.text:0000000000006169 ; ---------------------------------------------------------------------------
.text:000000000000616A                 align 10h
.text:0000000000006170
.text:0000000000006170 loc_6170:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000006170                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000006177                 mov     ecx, 6
.text:000000000000617C                 mov     rsi, rdx
.text:000000000000617F                 repe cmpsb
.text:0000000000006181                 setnbe  al
.text:0000000000006184                 sbb     al, 0
.text:0000000000006186                 test    al, al
.text:0000000000006188                 setnz   al
.text:000000000000618B                 add     rsp, 8
.text:000000000000618F                 retn
.text:000000000000618F ; } // starts at 6130
.text:000000000000618F hard_locale     endp
.text:000000000000618F
.text:0000000000006190
.text:0000000000006190 ; =============== S U B R O U T I N E =======================================
.text:0000000000006190
.text:0000000000006190
.text:0000000000006190                 public locale_charset
.text:0000000000006190 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000006190                                         ; unicode_to_mb+E7↑p
.text:0000000000006190 ; __unwind {
.text:0000000000006190                 sub     rsp, 8
.text:0000000000006194                 mov     edi, 0Eh        ; item
.text:0000000000006199                 call    _nl_langinfo
.text:000000000000619E                 test    rax, rax
.text:00000000000061A1                 jz      short loc_61C0
.text:00000000000061A3                 cmp     byte ptr [rax], 0
.text:00000000000061A6                 lea     rdx, tocode     ; "ASCII"
.text:00000000000061AD                 cmovz   rax, rdx
.text:00000000000061B1                 add     rsp, 8
.text:00000000000061B5                 retn
.text:00000000000061B5 ; ---------------------------------------------------------------------------
.text:00000000000061B6                 align 20h
.text:00000000000061C0
.text:00000000000061C0 loc_61C0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000061C0                 lea     rax, tocode     ; "ASCII"
.text:00000000000061C7                 add     rsp, 8
.text:00000000000061CB                 retn
.text:00000000000061CB ; } // starts at 6190
.text:00000000000061CB locale_charset  endp
.text:00000000000061CB
.text:00000000000061CB ; ---------------------------------------------------------------------------
.text:00000000000061CC                 align 10h
.text:00000000000061D0
.text:00000000000061D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061D0
.text:00000000000061D0 ; Attributes: info_from_lumina
.text:00000000000061D0
.text:00000000000061D0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000061D0                 public rpl_fclose
.text:00000000000061D0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000061D0 ; __unwind {
.text:00000000000061D0                 push    r12
.text:00000000000061D2                 push    rbp
.text:00000000000061D3                 push    rbx
.text:00000000000061D4                 mov     rbx, rdi
.text:00000000000061D7                 call    _fileno
.text:00000000000061DC                 test    eax, eax
.text:00000000000061DE                 mov     rdi, rbx        ; fp
.text:00000000000061E1                 js      short loc_6237
.text:00000000000061E3                 call    ___freading
.text:00000000000061E8                 test    eax, eax
.text:00000000000061EA                 jnz     short loc_6218
.text:00000000000061EC
.text:00000000000061EC loc_61EC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000061EC                 mov     rdi, rbx        ; stream
.text:00000000000061EF                 call    rpl_fflush
.text:00000000000061F4                 test    eax, eax
.text:00000000000061F6                 jz      short loc_6234
.text:00000000000061F8                 call    ___errno_location
.text:00000000000061FD                 mov     r12d, [rax]
.text:0000000000006200                 mov     rdi, rbx        ; stream
.text:0000000000006203                 mov     rbp, rax
.text:0000000000006206                 call    _fclose
.text:000000000000620B                 test    r12d, r12d
.text:000000000000620E                 jnz     short loc_6240
.text:0000000000006210
.text:0000000000006210 loc_6210:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006210                 pop     rbx
.text:0000000000006211                 pop     rbp
.text:0000000000006212                 pop     r12
.text:0000000000006214                 retn
.text:0000000000006214 ; ---------------------------------------------------------------------------
.text:0000000000006215                 align 8
.text:0000000000006218
.text:0000000000006218 loc_6218:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006218                 mov     rdi, rbx        ; stream
.text:000000000000621B                 call    _fileno
.text:0000000000006220                 xor     esi, esi        ; offset
.text:0000000000006222                 mov     edx, 1          ; whence
.text:0000000000006227                 mov     edi, eax        ; fd
.text:0000000000006229                 call    _lseek
.text:000000000000622E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006232                 jnz     short loc_61EC
.text:0000000000006234
.text:0000000000006234 loc_6234:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000006234                 mov     rdi, rbx        ; stream
.text:0000000000006237
.text:0000000000006237 loc_6237:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000006237                 pop     rbx
.text:0000000000006238                 pop     rbp
.text:0000000000006239                 pop     r12
.text:000000000000623B                 jmp     _fclose
.text:0000000000006240 ; ---------------------------------------------------------------------------
.text:0000000000006240
.text:0000000000006240 loc_6240:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000006240                 mov     [rbp+0], r12d
.text:0000000000006244                 mov     eax, 0FFFFFFFFh
.text:0000000000006249                 jmp     short loc_6210
.text:0000000000006249 ; } // starts at 61D0
.text:0000000000006249 rpl_fclose      endp
.text:0000000000006249
.text:0000000000006249 ; ---------------------------------------------------------------------------
.text:000000000000624B                 align 10h
.text:0000000000006250
.text:0000000000006250 ; =============== S U B R O U T I N E =======================================
.text:0000000000006250
.text:0000000000006250 ; Attributes: info_from_lumina
.text:0000000000006250
.text:0000000000006250 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000006250                 public rpl_fflush
.text:0000000000006250 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000006250 ; __unwind {
.text:0000000000006250                 test    rdi, rdi
.text:0000000000006253                 push    rbx
.text:0000000000006254                 mov     rbx, rdi
.text:0000000000006257                 jz      short loc_626A
.text:0000000000006259                 call    ___freading
.text:000000000000625E                 test    eax, eax
.text:0000000000006260                 jz      short loc_626A
.text:0000000000006262                 test    dword ptr [rbx], 100h
.text:0000000000006268                 jnz     short loc_6278
.text:000000000000626A
.text:000000000000626A loc_626A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000626A                                         ; rpl_fflush+10↑j
.text:000000000000626A                 mov     rdi, rbx        ; stream
.text:000000000000626D                 pop     rbx
.text:000000000000626E                 jmp     _fflush
.text:000000000000626E ; ---------------------------------------------------------------------------
.text:0000000000006273                 align 8
.text:0000000000006278
.text:0000000000006278 loc_6278:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006278                 mov     rdi, rbx
.text:000000000000627B                 mov     edx, 1
.text:0000000000006280                 xor     esi, esi
.text:0000000000006282                 call    rpl_fseeko
.text:0000000000006287                 mov     rdi, rbx        ; stream
.text:000000000000628A                 pop     rbx
.text:000000000000628B                 jmp     _fflush
.text:000000000000628B ; } // starts at 6250
.text:000000000000628B rpl_fflush      endp
.text:000000000000628B
.text:0000000000006290
.text:0000000000006290 ; =============== S U B R O U T I N E =======================================
.text:0000000000006290
.text:0000000000006290 ; Attributes: info_from_lumina
.text:0000000000006290
.text:0000000000006290 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006290                 public rpl_fseeko
.text:0000000000006290 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006290 ; __unwind {
.text:0000000000006290                 mov     rax, [rdi+8]
.text:0000000000006294                 cmp     [rdi+10h], rax
.text:0000000000006298                 jz      short loc_62A0
.text:000000000000629A
.text:000000000000629A loc_629A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000629A                                         ; rpl_fseeko+1F↓j
.text:000000000000629A                 jmp     _fseeko
.text:000000000000629A ; ---------------------------------------------------------------------------
.text:000000000000629F                 align 20h
.text:00000000000062A0
.text:00000000000062A0 loc_62A0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000062A0                 mov     rax, [rdi+20h]
.text:00000000000062A4                 cmp     [rdi+28h], rax
.text:00000000000062A8                 jnz     short loc_629A
.text:00000000000062AA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000062AF                 jnz     short loc_629A
.text:00000000000062B1                 push    r12
.text:00000000000062B3                 push    rbp
.text:00000000000062B4                 mov     r12d, edx
.text:00000000000062B7                 push    rbx
.text:00000000000062B8                 mov     rbp, rsi
.text:00000000000062BB                 mov     rbx, rdi
.text:00000000000062BE                 call    _fileno
.text:00000000000062C3                 mov     edx, r12d       ; whence
.text:00000000000062C6                 mov     rsi, rbp        ; offset
.text:00000000000062C9                 mov     edi, eax        ; fd
.text:00000000000062CB                 call    _lseek
.text:00000000000062D0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000062D4                 jz      short loc_62E2
.text:00000000000062D6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000062D9                 mov     [rbx+90h], rax
.text:00000000000062E0                 xor     eax, eax
.text:00000000000062E2
.text:00000000000062E2 loc_62E2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000062E2                 pop     rbx
.text:00000000000062E3                 pop     rbp
.text:00000000000062E4                 pop     r12
.text:00000000000062E6                 retn
.text:00000000000062E6 ; } // starts at 6290
.text:00000000000062E6 rpl_fseeko      endp
.text:00000000000062E6
.text:00000000000062E6 ; ---------------------------------------------------------------------------
.text:00000000000062E7                 align 10h
.text:00000000000062F0
.text:00000000000062F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062F0
.text:00000000000062F0
.text:00000000000062F0                 public fseterr
.text:00000000000062F0 fseterr         proc near               ; CODE XREF: rpl_vfprintf+E6↑p
.text:00000000000062F0 ; __unwind {
.text:00000000000062F0                 or      dword ptr [rdi], 20h
.text:00000000000062F3                 retn
.text:00000000000062F3 ; } // starts at 62F0
.text:00000000000062F3 fseterr         endp
.text:00000000000062F3
.text:00000000000062F3 ; ---------------------------------------------------------------------------
.text:00000000000062F4                 align 20h
.text:0000000000006300
.text:0000000000006300 ; =============== S U B R O U T I N E =======================================
.text:0000000000006300
.text:0000000000006300 ; Attributes: bp-based frame
.text:0000000000006300
.text:0000000000006300                 public vasnprintf
.text:0000000000006300 vasnprintf      proc near               ; CODE XREF: rpl_vfprintf+42↑p
.text:0000000000006300
.text:0000000000006300 var_450         = tbyte ptr -450h
.text:0000000000006300 var_440         = tbyte ptr -440h
.text:0000000000006300 var_430         = qword ptr -430h
.text:0000000000006300 var_421         = byte ptr -421h
.text:0000000000006300 ptr             = qword ptr -420h
.text:0000000000006300 var_418         = qword ptr -418h
.text:0000000000006300 var_410         = qword ptr -410h
.text:0000000000006300 var_408         = qword ptr -408h
.text:0000000000006300 var_400         = qword ptr -400h
.text:0000000000006300 var_3F8         = qword ptr -3F8h
.text:0000000000006300 var_3F0         = qword ptr -3F0h
.text:0000000000006300 src             = qword ptr -3E8h
.text:0000000000006300 var_3E0         = qword ptr -3E0h
.text:0000000000006300 var_3D8         = qword ptr -3D8h
.text:0000000000006300 var_3D0         = qword ptr -3D0h
.text:0000000000006300 n               = qword ptr -3C8h
.text:0000000000006300 var_3BC         = dword ptr -3BCh
.text:0000000000006300 var_3B8         = dword ptr -3B8h
.text:0000000000006300 var_3B4         = dword ptr -3B4h
.text:0000000000006300 var_3B0         = byte ptr -3B0h
.text:0000000000006300 var_3A8         = qword ptr -3A8h
.text:0000000000006300 var_2C0         = qword ptr -2C0h
.text:0000000000006300 var_2B8         = qword ptr -2B8h
.text:0000000000006300 var_2B0         = qword ptr -2B0h
.text:0000000000006300 var_2A8         = qword ptr -2A8h
.text:0000000000006300 var_38          = qword ptr -38h
.text:0000000000006300
.text:0000000000006300 ; __unwind {
.text:0000000000006300                 push    rbp
.text:0000000000006301                 mov     rbp, rsp
.text:0000000000006304                 push    r15
.text:0000000000006306                 push    r14
.text:0000000000006308                 push    r13
.text:000000000000630A                 push    r12
.text:000000000000630C                 lea     r14, [rbp+var_3B0]
.text:0000000000006313                 push    rbx
.text:0000000000006314                 mov     rbx, rdx
.text:0000000000006317                 mov     r12, rcx
.text:000000000000631A                 mov     rdx, r14
.text:000000000000631D                 sub     rsp, 408h
.text:0000000000006324                 mov     [rbp+var_418], rsi
.text:000000000000632B                 lea     rsi, [rbp+var_2C0]
.text:0000000000006332                 mov     [rbp+src], rdi
.text:0000000000006339                 mov     rdi, rbx
.text:000000000000633C                 mov     [rbp+var_410], r14
.text:0000000000006343                 mov     rax, fs:28h
.text:000000000000634C                 mov     [rbp+var_38], rax
.text:0000000000006350                 xor     eax, eax
.text:0000000000006352                 mov     [rbp+var_408], rsi
.text:0000000000006359                 call    printf_parse
.text:000000000000635E                 test    eax, eax
.text:0000000000006360                 js      loc_71C8
.text:0000000000006366                 mov     rsi, r14
.text:0000000000006369                 mov     rdi, r12
.text:000000000000636C                 call    printf_fetchargs
.text:0000000000006371                 test    eax, eax
.text:0000000000006373                 js      loc_7230
.text:0000000000006379                 mov     rax, [rbp+var_2B0]
.text:0000000000006380                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006387                 add     rax, 7
.text:000000000000638B                 cmp     rax, 6
.text:000000000000638F                 cmovbe  rax, rdx
.text:0000000000006393                 add     rax, [rbp+var_2A8]
.text:000000000000639A                 jb      loc_6DC8
.text:00000000000063A0                 mov     rdi, rax
.text:00000000000063A3                 xor     r8d, r8d
.text:00000000000063A6                 add     rdi, 6          ; size
.text:00000000000063AA                 setb    r8b
.text:00000000000063AE                 jb      loc_6DC8
.text:00000000000063B4                 cmp     rdi, 0F9Fh
.text:00000000000063BB                 jbe     loc_6508
.text:00000000000063C1                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000000063C5                 mov     [rbp+n], r8
.text:00000000000063CC                 jz      loc_6DC8
.text:00000000000063D2                 call    _malloc
.text:00000000000063D7                 test    rax, rax
.text:00000000000063DA                 mov     [rbp+var_3D8], rax
.text:00000000000063E1                 jz      loc_6DC8
.text:00000000000063E7                 mov     r8, [rbp+n]
.text:00000000000063EE                 mov     [rbp+ptr], rax
.text:00000000000063F5
.text:00000000000063F5 loc_63F5:                               ; CODE XREF: vasnprintf+22E↓j
.text:00000000000063F5                 xor     r12d, r12d
.text:00000000000063F8                 cmp     [rbp+src], 0
.text:0000000000006400                 jz      short loc_640C
.text:0000000000006402                 mov     rax, [rbp+var_418]
.text:0000000000006409                 mov     r12, [rax]
.text:000000000000640C
.text:000000000000640C loc_640C:                               ; CODE XREF: vasnprintf+100↑j
.text:000000000000640C                 mov     r13, [rbp+var_2B8]
.text:0000000000006413                 lea     rax, [rbp+var_3BC]
.text:000000000000641A                 mov     r15, [rbp+src]
.text:0000000000006421                 mov     [rbp+var_400], 0
.text:000000000000642C                 mov     [rbp+var_3F0], rax
.text:0000000000006433                 mov     rax, rbx
.text:0000000000006436                 mov     rbx, r8
.text:0000000000006439                 mov     rcx, [r13+0]
.text:000000000000643D                 mov     r8, rax
.text:0000000000006440                 cmp     rcx, r8
.text:0000000000006443                 jz      loc_6DB1
.text:0000000000006449
.text:0000000000006449 loc_6449:                               ; CODE XREF: vasnprintf+AAB↓j
.text:0000000000006449                 sub     rcx, r8
.text:000000000000644C                 mov     rax, rbx
.text:000000000000644F                 add     rax, rcx
.text:0000000000006452                 mov     r14, rax
.text:0000000000006455                 jnb     loc_6538
.text:000000000000645B                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000645F                 jz      loc_6F30
.text:0000000000006465
.text:0000000000006465 loc_6465:                               ; CODE XREF: vasnprintf+4E2↓j
.text:0000000000006465                                         ; vasnprintf+A86↓j ...
.text:0000000000006465                 call    ___errno_location
.text:000000000000646A                 mov     [rbp+n], rax
.text:0000000000006471
.text:0000000000006471 loc_6471:                               ; CODE XREF: vasnprintf+640↓j
.text:0000000000006471                                         ; vasnprintf+652↓j ...
.text:0000000000006471                 cmp     r15, [rbp+src]
.text:0000000000006478                 jz      short loc_6483
.text:000000000000647A                 test    r15, r15
.text:000000000000647D                 jnz     loc_6F60
.text:0000000000006483
.text:0000000000006483 loc_6483:                               ; CODE XREF: vasnprintf+178↑j
.text:0000000000006483                                         ; vasnprintf+C68↓j
.text:0000000000006483                 mov     rax, [rbp+ptr]
.text:000000000000648A                 test    rax, rax
.text:000000000000648D                 jz      short loc_6497
.text:000000000000648F                 mov     rdi, rax        ; ptr
.text:0000000000006492                 call    _free
.text:0000000000006497
.text:0000000000006497 loc_6497:                               ; CODE XREF: vasnprintf+18D↑j
.text:0000000000006497                                         ; vasnprintf+AD4↓j
.text:0000000000006497                 mov     rax, [rbp+var_408]
.text:000000000000649E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000064A5                 add     rax, 20h ; ' '
.text:00000000000064A9                 cmp     rdi, rax
.text:00000000000064AC                 jz      short loc_64B3
.text:00000000000064AE                 call    _free
.text:00000000000064B3
.text:00000000000064B3 loc_64B3:                               ; CODE XREF: vasnprintf+1AC↑j
.text:00000000000064B3                 mov     rax, [rbp+var_410]
.text:00000000000064BA                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000064C1                 add     rax, 10h
.text:00000000000064C5                 cmp     rdi, rax
.text:00000000000064C8                 jz      short loc_64CF
.text:00000000000064CA                 call    _free
.text:00000000000064CF
.text:00000000000064CF loc_64CF:                               ; CODE XREF: vasnprintf+1C8↑j
.text:00000000000064CF                 mov     rax, [rbp+n]
.text:00000000000064D6                 xor     r15d, r15d
.text:00000000000064D9                 mov     dword ptr [rax], 0Ch
.text:00000000000064DF
.text:00000000000064DF loc_64DF:                               ; CODE XREF: vasnprintf+7BA↓j
.text:00000000000064DF                                         ; vasnprintf+EBE↓j ...
.text:00000000000064DF                 mov     rdi, [rbp+var_38]
.text:00000000000064E3                 xor     rdi, fs:28h
.text:00000000000064EC                 mov     rax, r15
.text:00000000000064EF                 jnz     loc_73F7
.text:00000000000064F5                 lea     rsp, [rbp-28h]
.text:00000000000064F9                 pop     rbx
.text:00000000000064FA                 pop     r12
.text:00000000000064FC                 pop     r13
.text:00000000000064FE                 pop     r14
.text:0000000000006500                 pop     r15
.text:0000000000006502                 pop     rbp
.text:0000000000006503                 retn
.text:0000000000006503 ; ---------------------------------------------------------------------------
.text:0000000000006504                 align 8
.text:0000000000006508
.text:0000000000006508 loc_6508:                               ; CODE XREF: vasnprintf+BB↑j
.text:0000000000006508                 add     rax, 24h ; '$'
.text:000000000000650C                 mov     [rbp+ptr], 0
.text:0000000000006517                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000651B                 sub     rsp, rax
.text:000000000000651E                 lea     rax, [rsp+430h+var_421]
.text:0000000000006523                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000006527                 mov     [rbp+var_3D8], rax
.text:000000000000652E                 jmp     loc_63F5
.text:000000000000652E ; ---------------------------------------------------------------------------
.text:0000000000006533                 align 8
.text:0000000000006538
.text:0000000000006538 loc_6538:                               ; CODE XREF: vasnprintf+155↑j
.text:0000000000006538                 cmp     r12, rax
.text:000000000000653B                 jnb     short loc_65A4
.text:000000000000653D                 test    r12, r12
.text:0000000000006540                 jnz     loc_6E70
.text:0000000000006546                 cmp     rax, 0Ch
.text:000000000000654A                 ja      loc_6E82
.text:0000000000006550                 mov     r12d, 0Ch
.text:0000000000006556
.text:0000000000006556 loc_6556:                               ; CODE XREF: vasnprintf+B7C↓j
.text:0000000000006556                 cmp     r15, [rbp+src]
.text:000000000000655D                 setz    dl
.text:0000000000006560                 test    r15, r15
.text:0000000000006563                 jz      loc_6EA8
.text:0000000000006569
.text:0000000000006569 loc_6569:                               ; CODE XREF: vasnprintf+B9C↓j
.text:0000000000006569                 test    dl, dl
.text:000000000000656B                 jnz     loc_6EA8
.text:0000000000006571                 mov     rsi, r12        ; size
.text:0000000000006574                 mov     rdi, r15        ; ptr
.text:0000000000006577                 mov     [rbp+var_3D0], r8
.text:000000000000657E                 mov     [rbp+n], rcx
.text:0000000000006585                 call    _realloc
.text:000000000000658A                 test    rax, rax
.text:000000000000658D                 mov     rcx, [rbp+n]
.text:0000000000006594                 mov     r8, [rbp+var_3D0]
.text:000000000000659B                 jz      loc_6F4B
.text:00000000000065A1                 mov     r15, rax
.text:00000000000065A4
.text:00000000000065A4 loc_65A4:                               ; CODE XREF: vasnprintf+23B↑j
.text:00000000000065A4                                         ; vasnprintf+C23↓j ...
.text:00000000000065A4                 lea     rdi, [r15+rbx]  ; dest
.text:00000000000065A8                 mov     rdx, rcx        ; n
.text:00000000000065AB                 mov     rsi, r8         ; src
.text:00000000000065AE                 call    _memcpy
.text:00000000000065B3
.text:00000000000065B3 loc_65B3:                               ; CODE XREF: vasnprintf+AB4↓j
.text:00000000000065B3                 mov     rax, [rbp+var_400]
.text:00000000000065BA                 cmp     [rbp+var_2C0], rax
.text:00000000000065C1                 jz      loc_727B
.text:00000000000065C7                 movzx   edx, byte ptr [r13+48h]
.text:00000000000065CC                 mov     rax, [r13+50h]
.text:00000000000065D0                 cmp     dl, 25h ; '%'
.text:00000000000065D3                 jz      loc_6D68
.text:00000000000065D9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000065DD                 jz      def_685B        ; jumptable 000000000000685B default case, case 0
.text:00000000000065DD                                         ; jumptable 0000000000006E00 default case
.text:00000000000065E3                 mov     r8, [rbp+var_3A8]
.text:00000000000065EA                 shl     rax, 5
.text:00000000000065EE                 add     rax, r8
.text:00000000000065F1                 cmp     dl, 6Eh ; 'n'
.text:00000000000065F4                 mov     edi, [rax]
.text:00000000000065F6                 mov     dword ptr [rbp+var_3D0], edi
.text:00000000000065FC                 jz      loc_6DE0
.text:0000000000006602                 mov     eax, [r13+10h]
.text:0000000000006606                 mov     rdi, [rbp+var_3D8]
.text:000000000000660D                 test    al, 1
.text:000000000000660F                 mov     byte ptr [rdi], 25h ; '%'
.text:0000000000006612                 lea     rbx, [rdi+1]
.text:0000000000006616                 jz      short loc_6627
.text:0000000000006618                 mov     rdi, [rbp+var_3D8]
.text:000000000000661F                 lea     rbx, [rdi+2]
.text:0000000000006623                 mov     byte ptr [rdi+1], 27h ; '''
.text:0000000000006627
.text:0000000000006627 loc_6627:                               ; CODE XREF: vasnprintf+316↑j
.text:0000000000006627                 test    al, 2
.text:0000000000006629                 jz      short loc_6632
.text:000000000000662B                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000000662E                 add     rbx, 1
.text:0000000000006632
.text:0000000000006632 loc_6632:                               ; CODE XREF: vasnprintf+329↑j
.text:0000000000006632                 test    al, 4
.text:0000000000006634                 jz      short loc_663D
.text:0000000000006636                 mov     byte ptr [rbx], 2Bh ; '+'
.text:0000000000006639                 add     rbx, 1
.text:000000000000663D
.text:000000000000663D loc_663D:                               ; CODE XREF: vasnprintf+334↑j
.text:000000000000663D                 test    al, 8
.text:000000000000663F                 jz      short loc_6648
.text:0000000000006641                 mov     byte ptr [rbx], 20h ; ' '
.text:0000000000006644                 add     rbx, 1
.text:0000000000006648
.text:0000000000006648 loc_6648:                               ; CODE XREF: vasnprintf+33F↑j
.text:0000000000006648                 test    al, 10h
.text:000000000000664A                 jz      short loc_6653
.text:000000000000664C                 mov     byte ptr [rbx], 23h ; '#'
.text:000000000000664F                 add     rbx, 1
.text:0000000000006653
.text:0000000000006653 loc_6653:                               ; CODE XREF: vasnprintf+34A↑j
.text:0000000000006653                 test    al, 40h
.text:0000000000006655                 jz      short loc_665E
.text:0000000000006657                 mov     byte ptr [rbx], 49h ; 'I'
.text:000000000000665A                 add     rbx, 1
.text:000000000000665E
.text:000000000000665E loc_665E:                               ; CODE XREF: vasnprintf+355↑j
.text:000000000000665E                 test    al, 20h
.text:0000000000006660                 jz      short loc_6669
.text:0000000000006662                 mov     byte ptr [rbx], 30h ; '0'
.text:0000000000006665                 add     rbx, 1
.text:0000000000006669
.text:0000000000006669 loc_6669:                               ; CODE XREF: vasnprintf+360↑j
.text:0000000000006669                 mov     rsi, [r13+18h]  ; src
.text:000000000000666D                 mov     rdx, [r13+20h]
.text:0000000000006671                 cmp     rsi, rdx
.text:0000000000006674                 jz      short loc_66A6
.text:0000000000006676                 mov     rcx, rdx
.text:0000000000006679                 mov     rdi, rbx        ; dest
.text:000000000000667C                 mov     [rbp+var_3E0], r8
.text:0000000000006683                 sub     rcx, rsi
.text:0000000000006686                 mov     rdx, rcx        ; n
.text:0000000000006689                 mov     [rbp+n], rcx
.text:0000000000006690                 call    _memcpy
.text:0000000000006695                 mov     rcx, [rbp+n]
.text:000000000000669C                 mov     r8, [rbp+var_3E0]
.text:00000000000066A3                 add     rbx, rcx
.text:00000000000066A6
.text:00000000000066A6 loc_66A6:                               ; CODE XREF: vasnprintf+374↑j
.text:00000000000066A6                 mov     rsi, [r13+30h]  ; src
.text:00000000000066AA                 mov     rdx, [r13+38h]
.text:00000000000066AE                 cmp     rsi, rdx
.text:00000000000066B1                 jz      short loc_66E3
.text:00000000000066B3                 mov     rcx, rdx
.text:00000000000066B6                 mov     rdi, rbx        ; dest
.text:00000000000066B9                 mov     [rbp+var_3E0], r8
.text:00000000000066C0                 sub     rcx, rsi
.text:00000000000066C3                 mov     rdx, rcx        ; n
.text:00000000000066C6                 mov     [rbp+n], rcx
.text:00000000000066CD                 call    _memcpy
.text:00000000000066D2                 mov     rcx, [rbp+n]
.text:00000000000066D9                 mov     r8, [rbp+var_3E0]
.text:00000000000066E0                 add     rbx, rcx
.text:00000000000066E3
.text:00000000000066E3 loc_66E3:                               ; CODE XREF: vasnprintf+3B1↑j
.text:00000000000066E3                 mov     edi, dword ptr [rbp+var_3D0]
.text:00000000000066E9                 cmp     edi, 10h
.text:00000000000066EC                 ja      short loc_671B
.text:00000000000066EE                 mov     eax, 1
.text:00000000000066F3                 mov     ecx, edi
.text:00000000000066F5                 shl     rax, cl
.text:00000000000066F8                 test    eax, 14180h
.text:00000000000066FD                 jnz     short loc_6714
.text:00000000000066FF                 test    ah, 10h
.text:0000000000006702                 jnz     loc_7060
.text:0000000000006708                 test    ah, 6
.text:000000000000670B                 jz      short loc_671B
.text:000000000000670D                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000006710                 add     rbx, 1
.text:0000000000006714
.text:0000000000006714 loc_6714:                               ; CODE XREF: vasnprintf+3FD↑j
.text:0000000000006714                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:0000000000006717                 add     rbx, 1
.text:000000000000671B
.text:000000000000671B loc_671B:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000671B                                         ; vasnprintf+40B↑j ...
.text:000000000000671B                 movzx   eax, byte ptr [r13+48h]
.text:0000000000006720                 mov     byte ptr [rbx+1], 0
.text:0000000000006724                 mov     [rbx], al
.text:0000000000006726                 mov     rax, [r13+28h]
.text:000000000000672A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000672E                 jz      loc_6E60
.text:0000000000006734                 shl     rax, 5
.text:0000000000006738                 add     rax, r8
.text:000000000000673B                 cmp     dword ptr [rax], 5
.text:000000000000673E                 jnz     def_685B        ; jumptable 000000000000685B default case, case 0
.text:000000000000673E                                         ; jumptable 0000000000006E00 default case
.text:0000000000006744                 mov     eax, [rax+10h]
.text:0000000000006747                 mov     dword ptr [rbp+var_3E0], 1
.text:0000000000006751                 mov     [rbp+var_3B8], eax
.text:0000000000006757
.text:0000000000006757 loc_6757:                               ; CODE XREF: vasnprintf+B6A↓j
.text:0000000000006757                 mov     rax, [r13+40h]
.text:000000000000675B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000675F                 jz      short loc_678C
.text:0000000000006761                 shl     rax, 5
.text:0000000000006765                 add     r8, rax
.text:0000000000006768                 cmp     dword ptr [r8], 5
.text:000000000000676C                 jnz     def_685B        ; jumptable 000000000000685B default case, case 0
.text:000000000000676C                                         ; jumptable 0000000000006E00 default case
.text:0000000000006772                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006778                 mov     edx, [r8+10h]
.text:000000000000677C                 mov     [rbp+rax*4+var_3B8], edx
.text:0000000000006783                 lea     eax, [rax+1]
.text:0000000000006786                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000678C
.text:000000000000678C loc_678C:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000678C                 mov     rax, r14
.text:000000000000678F                 xor     edx, edx
.text:0000000000006791                 add     rax, 2
.text:0000000000006795                 jb      loc_73FC
.text:000000000000679B                 cmp     r12, rax
.text:000000000000679E                 jnb     short loc_67EB
.text:00000000000067A0                 test    r12, r12
.text:00000000000067A3                 jnz     loc_6FC8
.text:00000000000067A9                 cmp     rax, 0Ch
.text:00000000000067AD                 ja      loc_6FE0
.text:00000000000067B3                 mov     r12d, 0Ch
.text:00000000000067B9
.text:00000000000067B9 loc_67B9:                               ; CODE XREF: vasnprintf+CD4↓j
.text:00000000000067B9                 cmp     r15, [rbp+src]
.text:00000000000067C0                 setz    dl
.text:00000000000067C3                 test    r15, r15
.text:00000000000067C6                 jz      loc_7010
.text:00000000000067CC
.text:00000000000067CC loc_67CC:                               ; CODE XREF: vasnprintf+D03↓j
.text:00000000000067CC                 test    dl, dl
.text:00000000000067CE                 jnz     loc_7010
.text:00000000000067D4                 mov     rsi, r12        ; size
.text:00000000000067D7                 mov     rdi, r15        ; ptr
.text:00000000000067DA                 call    _realloc
.text:00000000000067DF                 test    rax, rax
.text:00000000000067E2                 jz      loc_6465
.text:00000000000067E8                 mov     r15, rax
.text:00000000000067EB
.text:00000000000067EB loc_67EB:                               ; CODE XREF: vasnprintf+49E↑j
.text:00000000000067EB                                         ; vasnprintf+D53↓j ...
.text:00000000000067EB                 mov     byte ptr [r15+r14], 0
.text:00000000000067F0                 call    ___errno_location
.text:00000000000067F5                 mov     [rbp+n], rax
.text:00000000000067FC                 mov     eax, [rax]
.text:00000000000067FE                 mov     [rbp+var_3F8], rbx
.text:0000000000006805                 mov     [rbp-424h], eax
.text:000000000000680B                 nop     dword ptr [rax+rax+00h]
.text:0000000000006810
.text:0000000000006810 loc_6810:                               ; CODE XREF: vasnprintf+637↓j
.text:0000000000006810                                         ; vasnprintf+68D↓j ...
.text:0000000000006810                 mov     rax, [rbp+n]
.text:0000000000006817                 mov     rbx, r12
.text:000000000000681A                 mov     r10d, 7FFFFFFFh
.text:0000000000006820                 sub     rbx, r14
.text:0000000000006823                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000682D                 cmp     rbx, 7FFFFFFFh
.text:0000000000006834                 mov     dword ptr [rax], 0
.text:000000000000683A                 mov     eax, dword ptr [rbp+var_3D0]
.text:0000000000006840                 cmovbe  r10, rbx
.text:0000000000006844                 cmp     eax, 11h        ; switch 18 cases
.text:0000000000006847                 ja      def_685B        ; jumptable 000000000000685B default case, case 0
.text:0000000000006847                                         ; jumptable 0000000000006E00 default case
.text:000000000000684D                 lea     rsi, jpt_685B
.text:0000000000006854                 movsxd  rax, ds:(jpt_685B - 9848h)[rsi+rax*4]
.text:0000000000006858                 add     rax, rsi
.text:000000000000685B                 jmp     rax             ; switch jump
.text:000000000000685B ; ---------------------------------------------------------------------------
.text:000000000000685D                 align 20h
.text:0000000000006860
.text:0000000000006860 loc_6860:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006860                                         ; DATA XREF: .rodata:jpt_685B↓o
.text:0000000000006860                 mov     rax, [r13+50h]  ; jumptable 000000000000685B cases 7-10,15-17
.text:0000000000006864                 lea     rdi, [r15+r14]
.text:0000000000006868                 shl     rax, 5
.text:000000000000686C                 add     rax, [rbp+var_3A8]
.text:0000000000006873                 mov     r9, [rax+10h]
.text:0000000000006877                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000687D                 cmp     eax, 1
.text:0000000000006880                 jz      loc_6D48
.text:0000000000006886                 cmp     eax, 2
.text:0000000000006889                 jz      loc_6D30
.text:000000000000688F                 sub     rsp, 8
.text:0000000000006893                 push    [rbp+var_3F0]
.text:0000000000006899
.text:0000000000006899 loc_6899:                               ; CODE XREF: vasnprintf+CBE↓j
.text:0000000000006899                 mov     r8, [rbp+var_3D8]
.text:00000000000068A0                 mov     rsi, r10
.text:00000000000068A3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000068AA                 mov     edx, 1
.text:00000000000068AF                 xor     eax, eax
.text:00000000000068B1                 mov     [rbp+var_430], r10
.text:00000000000068B8                 call    ___snprintf_chk
.text:00000000000068BD                 pop     rsi
.text:00000000000068BE                 pop     rdi
.text:00000000000068BF                 mov     r10, [rbp+var_430]
.text:00000000000068C6
.text:00000000000068C6 loc_68C6:                               ; CODE XREF: vasnprintf+83D↓j
.text:00000000000068C6                                         ; vasnprintf+8BE↓j ...
.text:00000000000068C6                 mov     ecx, [rbp+var_3BC]
.text:00000000000068CC                 test    ecx, ecx
.text:00000000000068CE                 js      loc_6A0C
.text:00000000000068D4
.text:00000000000068D4 loc_68D4:                               ; CODE XREF: vasnprintf+706↓j
.text:00000000000068D4                 movsxd  rdx, ecx
.text:00000000000068D7                 cmp     rdx, r10
.text:00000000000068DA                 jnb     short loc_68EA
.text:00000000000068DC                 add     rdx, r15
.text:00000000000068DF                 cmp     byte ptr [rdx+r14], 0
.text:00000000000068E4                 jnz     def_685B        ; jumptable 000000000000685B default case, case 0
.text:00000000000068E4                                         ; jumptable 0000000000006E00 default case
.text:00000000000068EA
.text:00000000000068EA loc_68EA:                               ; CODE XREF: vasnprintf+5DA↑j
.text:00000000000068EA                 cmp     ecx, eax
.text:00000000000068EC                 jge     short loc_68F6
.text:00000000000068EE
.text:00000000000068EE loc_68EE:                               ; CODE XREF: vasnprintf+71F↓j
.text:00000000000068EE                 mov     [rbp+var_3BC], eax
.text:00000000000068F4                 mov     ecx, eax
.text:00000000000068F6
.text:00000000000068F6 loc_68F6:                               ; CODE XREF: vasnprintf+5EC↑j
.text:00000000000068F6                 lea     eax, [rcx+1]
.text:00000000000068F9                 cmp     rax, r10
.text:00000000000068FC                 jb      loc_7130
.text:0000000000006902                 cmp     rbx, 7FFFFFFEh
.text:0000000000006909                 ja      loc_7150
.text:000000000000690F                 lea     rsi, [r12+r12]
.text:0000000000006913                 lea     edx, [rcx+2]
.text:0000000000006916                 test    r12, r12
.text:0000000000006919                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006920                 cmovns  rax, rsi
.text:0000000000006924                 add     rdx, r14
.text:0000000000006927                 jb      loc_73E8
.text:000000000000692D                 cmp     rax, rdx
.text:0000000000006930                 cmovb   rax, rdx
.text:0000000000006934                 cmp     r12, rax
.text:0000000000006937                 jnb     loc_6810
.text:000000000000693D                 test    r12, r12
.text:0000000000006940                 js      loc_6471
.text:0000000000006946                 cmp     rsi, rax
.text:0000000000006949                 mov     r12, rsi
.text:000000000000694C                 jnb     short loc_695B
.text:000000000000694E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006952                 jz      loc_6471
.text:0000000000006958                 mov     r12, rax
.text:000000000000695B
.text:000000000000695B loc_695B:                               ; CODE XREF: vasnprintf+64C↑j
.text:000000000000695B                 cmp     r15, [rbp+src]
.text:0000000000006962                 setz    bl
.text:0000000000006965                 test    r15, r15
.text:0000000000006968                 jz      loc_6CF0
.text:000000000000696E                 test    bl, bl
.text:0000000000006970                 jnz     loc_6CF0
.text:0000000000006976                 mov     rsi, r12        ; size
.text:0000000000006979                 mov     rdi, r15        ; ptr
.text:000000000000697C                 call    _realloc
.text:0000000000006981                 test    rax, rax
.text:0000000000006984                 jz      loc_6471
.text:000000000000698A                 mov     r15, rax
.text:000000000000698D                 jmp     loc_6810
.text:000000000000698D ; ---------------------------------------------------------------------------
.text:0000000000006992                 align 8
.text:0000000000006998
.text:0000000000006998 loc_6998:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006998                                         ; DATA XREF: .rodata:jpt_685B↓o
.text:0000000000006998                 mov     rax, [r13+50h]  ; jumptable 000000000000685B cases 5,6,13,14
.text:000000000000699C                 lea     rdi, [r15+r14]
.text:00000000000069A0                 shl     rax, 5
.text:00000000000069A4                 add     rax, [rbp+var_3A8]
.text:00000000000069AB                 mov     r9d, [rax+10h]
.text:00000000000069AF                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000069B5                 cmp     eax, 1
.text:00000000000069B8                 jz      loc_6BF0
.text:00000000000069BE
.text:00000000000069BE loc_69BE:                               ; CODE XREF: vasnprintf+8E9↓j
.text:00000000000069BE                                         ; vasnprintf+9B1↓j ...
.text:00000000000069BE                 cmp     eax, 2
.text:00000000000069C1                 jz      loc_6C38
.text:00000000000069C7
.text:00000000000069C7 loc_69C7:                               ; CODE XREF: vasnprintf+92E↓j
.text:00000000000069C7                 sub     rsp, 8
.text:00000000000069CB                 push    [rbp+var_3F0]
.text:00000000000069D1
.text:00000000000069D1 loc_69D1:                               ; CODE XREF: vasnprintf+8FF↓j
.text:00000000000069D1                 mov     r8, [rbp+var_3D8]
.text:00000000000069D8                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000069DF                 mov     edx, 1
.text:00000000000069E4                 mov     rsi, r10
.text:00000000000069E7                 xor     eax, eax
.text:00000000000069E9                 mov     [rbp+var_430], r10
.text:00000000000069F0                 call    ___snprintf_chk
.text:00000000000069F5                 pop     rdx
.text:00000000000069F6                 pop     rcx
.text:00000000000069F7                 mov     ecx, [rbp+var_3BC]
.text:00000000000069FD                 mov     r10, [rbp+var_430]
.text:0000000000006A04                 test    ecx, ecx
.text:0000000000006A06                 jns     loc_68D4
.text:0000000000006A0C
.text:0000000000006A0C loc_6A0C:                               ; CODE XREF: vasnprintf+5CE↑j
.text:0000000000006A0C                 mov     rdi, [rbp+var_3F8]
.text:0000000000006A13                 cmp     byte ptr [rdi+1], 0
.text:0000000000006A17                 jnz     loc_6D58
.text:0000000000006A1D                 test    eax, eax
.text:0000000000006A1F                 jns     loc_68EE
.text:0000000000006A25                 mov     rax, [rbp+n]
.text:0000000000006A2C                 mov     ebx, [rax]
.text:0000000000006A2E                 test    ebx, ebx
.text:0000000000006A30                 jnz     short loc_6A50
.text:0000000000006A32                 movzx   eax, byte ptr [r13+48h]
.text:0000000000006A37                 mov     ebx, 16h
.text:0000000000006A3C                 and     eax, 0FFFFFFEFh
.text:0000000000006A3F                 cmp     al, 63h ; 'c'
.text:0000000000006A41                 mov     eax, 54h ; 'T'
.text:0000000000006A46                 cmovz   ebx, eax
.text:0000000000006A49                 nop     dword ptr [rax+00000000h]
.text:0000000000006A50
.text:0000000000006A50 loc_6A50:                               ; CODE XREF: vasnprintf+730↑j
.text:0000000000006A50                 cmp     r15, [rbp+src]
.text:0000000000006A57                 jz      short loc_6A62
.text:0000000000006A59                 test    r15, r15
.text:0000000000006A5C                 jnz     loc_720C
.text:0000000000006A62
.text:0000000000006A62 loc_6A62:                               ; CODE XREF: vasnprintf+757↑j
.text:0000000000006A62                                         ; vasnprintf+F14↓j
.text:0000000000006A62                 mov     rax, [rbp+ptr]
.text:0000000000006A69                 test    rax, rax
.text:0000000000006A6C                 jz      short loc_6A76
.text:0000000000006A6E                 mov     rdi, rax        ; ptr
.text:0000000000006A71                 call    _free
.text:0000000000006A76
.text:0000000000006A76 loc_6A76:                               ; CODE XREF: vasnprintf+76C↑j
.text:0000000000006A76                 mov     rax, [rbp+var_408]
.text:0000000000006A7D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006A84                 add     rax, 20h ; ' '
.text:0000000000006A88                 cmp     rdi, rax
.text:0000000000006A8B                 jz      short loc_6A92
.text:0000000000006A8D                 call    _free
.text:0000000000006A92
.text:0000000000006A92 loc_6A92:                               ; CODE XREF: vasnprintf+78B↑j
.text:0000000000006A92                 mov     rax, [rbp+var_410]
.text:0000000000006A99                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006AA0                 add     rax, 10h
.text:0000000000006AA4                 cmp     rdi, rax
.text:0000000000006AA7                 jz      short loc_6AAE
.text:0000000000006AA9                 call    _free
.text:0000000000006AAE
.text:0000000000006AAE loc_6AAE:                               ; CODE XREF: vasnprintf+7A7↑j
.text:0000000000006AAE                 mov     rax, [rbp+n]
.text:0000000000006AB5                 xor     r15d, r15d
.text:0000000000006AB8                 mov     [rax], ebx
.text:0000000000006ABA                 jmp     loc_64DF
.text:0000000000006ABA ; ---------------------------------------------------------------------------
.text:0000000000006ABF                 align 20h
.text:0000000000006AC0
.text:0000000000006AC0 loc_6AC0:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006AC0                                         ; DATA XREF: .rodata:jpt_685B↓o
.text:0000000000006AC0                 mov     rax, [r13+50h]  ; jumptable 000000000000685B case 12
.text:0000000000006AC4                 lea     rdi, [r15+r14]
.text:0000000000006AC8                 shl     rax, 5
.text:0000000000006ACC                 add     rax, [rbp+var_3A8]
.text:0000000000006AD3                 fld     tbyte ptr [rax+10h]
.text:0000000000006AD6                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006ADC                 cmp     eax, 1
.text:0000000000006ADF                 jz      loc_7110
.text:0000000000006AE5                 cmp     eax, 2
.text:0000000000006AE8                 jnz     loc_6FB0
.text:0000000000006AEE                 mov     eax, [rbp+var_3B4]
.text:0000000000006AF4                 sub     rsp, 8
.text:0000000000006AF8                 push    [rbp+var_3F0]
.text:0000000000006AFE                 mov     r9d, [rbp+var_3B8]
.text:0000000000006B05                 mov     r8, [rbp+var_3D8]
.text:0000000000006B0C                 mov     rsi, r10
.text:0000000000006B0F                 sub     rsp, 18h
.text:0000000000006B13                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B1A                 mov     edx, 1
.text:0000000000006B1F                 fstp    [rsp+458h+var_450]
.text:0000000000006B23                 push    rax
.text:0000000000006B24                 xor     eax, eax
.text:0000000000006B26                 mov     [rbp+var_430], r10
.text:0000000000006B2D                 call    ___snprintf_chk
.text:0000000000006B32                 add     rsp, 30h
.text:0000000000006B36                 mov     r10, [rbp+var_430]
.text:0000000000006B3D                 jmp     loc_68C6
.text:0000000000006B3D ; ---------------------------------------------------------------------------
.text:0000000000006B42                 align 8
.text:0000000000006B48
.text:0000000000006B48 loc_6B48:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006B48                                         ; DATA XREF: .rodata:jpt_685B↓o
.text:0000000000006B48                 mov     rax, [r13+50h]  ; jumptable 000000000000685B case 11
.text:0000000000006B4C                 lea     rdi, [r15+r14]
.text:0000000000006B50                 shl     rax, 5
.text:0000000000006B54                 add     rax, [rbp+var_3A8]
.text:0000000000006B5B                 movsd   xmm0, qword ptr [rax+10h]
.text:0000000000006B60                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006B66                 cmp     eax, 1
.text:0000000000006B69                 jz      loc_7100
.text:0000000000006B6F                 cmp     eax, 2
.text:0000000000006B72                 jnz     loc_6F70
.text:0000000000006B78                 mov     eax, [rbp+var_3B4]
.text:0000000000006B7E                 push    [rbp+var_3F0]
.text:0000000000006B84                 push    rax
.text:0000000000006B85
.text:0000000000006B85 loc_6B85:                               ; CODE XREF: vasnprintf+E0A↓j
.text:0000000000006B85                 mov     r9d, [rbp+var_3B8]
.text:0000000000006B8C                 mov     r8, [rbp+var_3D8]
.text:0000000000006B93                 mov     rsi, r10
.text:0000000000006B96                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B9D                 mov     edx, 1
.text:0000000000006BA2                 mov     eax, 1
.text:0000000000006BA7                 mov     [rbp+var_430], r10
.text:0000000000006BAE                 call    ___snprintf_chk
.text:0000000000006BB3                 pop     r8
.text:0000000000006BB5                 mov     r10, [rbp+var_430]
.text:0000000000006BBC                 pop     r9
.text:0000000000006BBE                 jmp     loc_68C6
.text:0000000000006BBE ; ---------------------------------------------------------------------------
.text:0000000000006BC3                 align 8
.text:0000000000006BC8
.text:0000000000006BC8 loc_6BC8:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006BC8                                         ; DATA XREF: .rodata:jpt_685B↓o
.text:0000000000006BC8                 mov     rax, [r13+50h]  ; jumptable 000000000000685B case 4
.text:0000000000006BCC                 lea     rdi, [r15+r14]
.text:0000000000006BD0                 shl     rax, 5
.text:0000000000006BD4                 add     rax, [rbp+var_3A8]
.text:0000000000006BDB                 movzx   r9d, word ptr [rax+10h]
.text:0000000000006BE0                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006BE6                 cmp     eax, 1
.text:0000000000006BE9                 jnz     loc_69BE
.text:0000000000006BEF                 nop
.text:0000000000006BF0
.text:0000000000006BF0 loc_6BF0:                               ; CODE XREF: vasnprintf+6B8↑j
.text:0000000000006BF0                                         ; vasnprintf+929↓j ...
.text:0000000000006BF0                 push    [rbp+var_3F0]
.text:0000000000006BF6                 push    r9
.text:0000000000006BF8
.text:0000000000006BF8 loc_6BF8:                               ; CODE XREF: vasnprintf+A50↓j
.text:0000000000006BF8                 mov     r9d, [rbp+var_3B8]
.text:0000000000006BFF                 jmp     loc_69D1
.text:0000000000006BFF ; ---------------------------------------------------------------------------
.text:0000000000006C04                 align 8
.text:0000000000006C08
.text:0000000000006C08 loc_6C08:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006C08                                         ; DATA XREF: .rodata:jpt_685B↓o
.text:0000000000006C08                 mov     rax, [r13+50h]  ; jumptable 000000000000685B case 3
.text:0000000000006C0C                 lea     rdi, [r15+r14]
.text:0000000000006C10                 shl     rax, 5
.text:0000000000006C14                 add     rax, [rbp+var_3A8]
.text:0000000000006C1B                 movsx   r9d, word ptr [rax+10h]
.text:0000000000006C20                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006C26                 cmp     eax, 1
.text:0000000000006C29                 jz      short loc_6BF0
.text:0000000000006C2B                 cmp     eax, 2
.text:0000000000006C2E                 jnz     loc_69C7
.text:0000000000006C34                 nop     dword ptr [rax+00h]
.text:0000000000006C38
.text:0000000000006C38 loc_6C38:                               ; CODE XREF: vasnprintf+6C1↑j
.text:0000000000006C38                 sub     rsp, 8
.text:0000000000006C3C                 push    [rbp+var_3F0]
.text:0000000000006C42                 push    r9
.text:0000000000006C44
.text:0000000000006C44 loc_6C44:                               ; CODE XREF: vasnprintf+A3C↓j
.text:0000000000006C44                 mov     eax, [rbp+var_3B4]
.text:0000000000006C4A                 push    rax
.text:0000000000006C4B
.text:0000000000006C4B loc_6C4B:                               ; CODE XREF: vasnprintf+E21↓j
.text:0000000000006C4B                 mov     r9d, [rbp+var_3B8]
.text:0000000000006C52                 mov     r8, [rbp+var_3D8]
.text:0000000000006C59                 mov     rsi, r10
.text:0000000000006C5C                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006C63                 mov     edx, 1
.text:0000000000006C68                 xor     eax, eax
.text:0000000000006C6A                 mov     [rbp+var_430], r10
.text:0000000000006C71                 call    ___snprintf_chk
.text:0000000000006C76                 add     rsp, 20h
.text:0000000000006C7A                 mov     r10, [rbp+var_430]
.text:0000000000006C81                 jmp     loc_68C6
.text:0000000000006C81 ; ---------------------------------------------------------------------------
.text:0000000000006C86                 align 10h
.text:0000000000006C90
.text:0000000000006C90 loc_6C90:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006C90                                         ; DATA XREF: .rodata:jpt_685B↓o
.text:0000000000006C90                 mov     rax, [r13+50h]  ; jumptable 000000000000685B case 2
.text:0000000000006C94                 lea     rdi, [r15+r14]
.text:0000000000006C98                 shl     rax, 5
.text:0000000000006C9C                 add     rax, [rbp+var_3A8]
.text:0000000000006CA3                 movzx   r9d, byte ptr [rax+10h]
.text:0000000000006CA8                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006CAE                 cmp     eax, 1
.text:0000000000006CB1                 jnz     loc_69BE
.text:0000000000006CB7                 jmp     loc_6BF0
.text:0000000000006CB7 ; ---------------------------------------------------------------------------
.text:0000000000006CBC                 align 20h
.text:0000000000006CC0
.text:0000000000006CC0 loc_6CC0:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006CC0                                         ; DATA XREF: .rodata:jpt_685B↓o
.text:0000000000006CC0                 mov     rax, [r13+50h]  ; jumptable 000000000000685B case 1
.text:0000000000006CC4                 lea     rdi, [r15+r14]
.text:0000000000006CC8                 shl     rax, 5
.text:0000000000006CCC                 add     rax, [rbp+var_3A8]
.text:0000000000006CD3                 movsx   r9d, byte ptr [rax+10h]
.text:0000000000006CD8                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006CDE                 cmp     eax, 1
.text:0000000000006CE1                 jnz     loc_69BE
.text:0000000000006CE7                 jmp     loc_6BF0
.text:0000000000006CE7 ; ---------------------------------------------------------------------------
.text:0000000000006CEC                 align 10h
.text:0000000000006CF0
.text:0000000000006CF0 loc_6CF0:                               ; CODE XREF: vasnprintf+668↑j
.text:0000000000006CF0                                         ; vasnprintf+670↑j
.text:0000000000006CF0                 mov     rdi, r12        ; size
.text:0000000000006CF3                 call    _malloc
.text:0000000000006CF8                 test    rax, rax
.text:0000000000006CFB                 mov     rcx, rax
.text:0000000000006CFE                 jz      loc_6471
.text:0000000000006D04                 test    r14, r14
.text:0000000000006D07                 jz      loc_6DC0
.text:0000000000006D0D                 test    bl, bl
.text:0000000000006D0F                 jz      loc_6DC0
.text:0000000000006D15                 mov     rsi, r15        ; src
.text:0000000000006D18                 mov     rdx, r14        ; n
.text:0000000000006D1B                 mov     rdi, rax        ; dest
.text:0000000000006D1E                 call    _memcpy
.text:0000000000006D23                 mov     r15, rax
.text:0000000000006D26                 jmp     loc_6810
.text:0000000000006D26 ; ---------------------------------------------------------------------------
.text:0000000000006D2B                 align 10h
.text:0000000000006D30
.text:0000000000006D30 loc_6D30:                               ; CODE XREF: vasnprintf+589↑j
.text:0000000000006D30                 sub     rsp, 8
.text:0000000000006D34                 push    [rbp+var_3F0]
.text:0000000000006D3A                 push    r9
.text:0000000000006D3C                 jmp     loc_6C44
.text:0000000000006D3C ; ---------------------------------------------------------------------------
.text:0000000000006D41                 align 8
.text:0000000000006D48
.text:0000000000006D48 loc_6D48:                               ; CODE XREF: vasnprintf+580↑j
.text:0000000000006D48                 push    [rbp+var_3F0]
.text:0000000000006D4E                 push    r9
.text:0000000000006D50                 jmp     loc_6BF8
.text:0000000000006D50 ; ---------------------------------------------------------------------------
.text:0000000000006D55                 align 8
.text:0000000000006D58
.text:0000000000006D58 loc_6D58:                               ; CODE XREF: vasnprintf+717↑j
.text:0000000000006D58                 mov     byte ptr [rdi+1], 0
.text:0000000000006D5C                 jmp     loc_6810
.text:0000000000006D5C ; ---------------------------------------------------------------------------
.text:0000000000006D61                 align 8
.text:0000000000006D68
.text:0000000000006D68 loc_6D68:                               ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000006D68                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D6C                 jnz     def_685B        ; jumptable 000000000000685B default case, case 0
.text:0000000000006D6C                                         ; jumptable 0000000000006E00 default case
.text:0000000000006D72                 mov     rax, r14
.text:0000000000006D75                 add     rax, 1
.text:0000000000006D79                 mov     rbx, rax
.text:0000000000006D7C                 jnb     loc_6E08
.text:0000000000006D82                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D86                 jnz     loc_6465
.text:0000000000006D8C                 mov     rbx, r12
.text:0000000000006D8F
.text:0000000000006D8F loc_6D8F:                               ; CODE XREF: vasnprintf+B0B↓j
.text:0000000000006D8F                                         ; vasnprintf+B58↓j ...
.text:0000000000006D8F                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000006D94
.text:0000000000006D94 loc_6D94:                               ; CODE XREF: vasnprintf+C46↓j
.text:0000000000006D94                                         ; vasnprintf+D76↓j ...
.text:0000000000006D94                 mov     r8, [r13+8]
.text:0000000000006D98                 add     r13, 58h ; 'X'
.text:0000000000006D9C                 mov     rcx, [r13+0]
.text:0000000000006DA0                 add     [rbp+var_400], 1
.text:0000000000006DA8                 cmp     rcx, r8
.text:0000000000006DAB                 jnz     loc_6449
.text:0000000000006DB1
.text:0000000000006DB1 loc_6DB1:                               ; CODE XREF: vasnprintf+143↑j
.text:0000000000006DB1                 mov     r14, rbx
.text:0000000000006DB4                 jmp     loc_65B3
.text:0000000000006DB4 ; ---------------------------------------------------------------------------
.text:0000000000006DB9                 align 20h
.text:0000000000006DC0
.text:0000000000006DC0 loc_6DC0:                               ; CODE XREF: vasnprintf+A07↑j
.text:0000000000006DC0                                         ; vasnprintf+A0F↑j
.text:0000000000006DC0                 mov     r15, rcx
.text:0000000000006DC3                 jmp     loc_6810
.text:0000000000006DC8 ; ---------------------------------------------------------------------------
.text:0000000000006DC8
.text:0000000000006DC8 loc_6DC8:                               ; CODE XREF: vasnprintf+9A↑j
.text:0000000000006DC8                                         ; vasnprintf+AE↑j ...
.text:0000000000006DC8                 call    ___errno_location
.text:0000000000006DCD                 mov     [rbp+n], rax
.text:0000000000006DD4                 jmp     loc_6497
.text:0000000000006DD4 ; ---------------------------------------------------------------------------
.text:0000000000006DD9                 align 20h
.text:0000000000006DE0
.text:0000000000006DE0 loc_6DE0:                               ; CODE XREF: vasnprintf+2FC↑j
.text:0000000000006DE0                 mov     edx, edi
.text:0000000000006DE2                 sub     edx, 12h        ; switch 5 cases
.text:0000000000006DE5                 cmp     edx, 4
.text:0000000000006DE8                 ja      def_685B        ; jumptable 000000000000685B default case, case 0
.text:0000000000006DE8                                         ; jumptable 0000000000006E00 default case
.text:0000000000006DEE                 lea     rdi, jpt_6E00
.text:0000000000006DF5                 mov     rax, [rax+10h]
.text:0000000000006DF9                 movsxd  rdx, ds:(jpt_6E00 - 9890h)[rdi+rdx*4]
.text:0000000000006DFD                 add     rdx, rdi
.text:0000000000006E00                 jmp     rdx             ; switch jump
.text:0000000000006E00 ; ---------------------------------------------------------------------------
.text:0000000000006E02                 align 8
.text:0000000000006E08
.text:0000000000006E08 loc_6E08:                               ; CODE XREF: vasnprintf+A7C↑j
.text:0000000000006E08                 cmp     r12, rax
.text:0000000000006E0B                 jnb     short loc_6D8F
.text:0000000000006E0D                 test    r12, r12
.text:0000000000006E10                 jnz     loc_71E0
.text:0000000000006E16                 cmp     rax, 0Ch
.text:0000000000006E1A                 ja      loc_71F2
.text:0000000000006E20                 mov     r12d, 0Ch
.text:0000000000006E26
.text:0000000000006E26 loc_6E26:                               ; CODE XREF: vasnprintf+EEC↓j
.text:0000000000006E26                                         ; vasnprintf+EFF↓j
.text:0000000000006E26                 cmp     r15, [rbp+src]
.text:0000000000006E2D                 setz    dl
.text:0000000000006E30                 test    r15, r15
.text:0000000000006E33                 jz      loc_70A0
.text:0000000000006E39                 test    dl, dl
.text:0000000000006E3B                 jnz     loc_70A0
.text:0000000000006E41                 mov     rsi, r12        ; size
.text:0000000000006E44                 mov     rdi, r15        ; ptr
.text:0000000000006E47                 call    _realloc
.text:0000000000006E4C                 test    rax, rax
.text:0000000000006E4F                 jz      loc_6F4B
.text:0000000000006E55                 mov     r15, rax
.text:0000000000006E58                 jmp     loc_6D8F
.text:0000000000006E58 ; ---------------------------------------------------------------------------
.text:0000000000006E5D                 align 20h
.text:0000000000006E60
.text:0000000000006E60 loc_6E60:                               ; CODE XREF: vasnprintf+42E↑j
.text:0000000000006E60                 mov     dword ptr [rbp+var_3E0], 0
.text:0000000000006E6A                 jmp     loc_6757
.text:0000000000006E6A ; ---------------------------------------------------------------------------
.text:0000000000006E6F                 align 10h
.text:0000000000006E70
.text:0000000000006E70 loc_6E70:                               ; CODE XREF: vasnprintf+240↑j
.text:0000000000006E70                 js      loc_6465
.text:0000000000006E76                 add     r12, r12
.text:0000000000006E79                 cmp     r12, rax
.text:0000000000006E7C                 jnb     loc_6556
.text:0000000000006E82
.text:0000000000006E82 loc_6E82:                               ; CODE XREF: vasnprintf+24A↑j
.text:0000000000006E82                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006E86                 jz      loc_6465
.text:0000000000006E8C                 cmp     r15, [rbp+src]
.text:0000000000006E93                 mov     r12, rax
.text:0000000000006E96                 setz    dl
.text:0000000000006E99                 test    r15, r15
.text:0000000000006E9C                 jnz     loc_6569
.text:0000000000006EA2                 nop     word ptr [rax+rax+00h]
.text:0000000000006EA8
.text:0000000000006EA8 loc_6EA8:                               ; CODE XREF: vasnprintf+263↑j
.text:0000000000006EA8                                         ; vasnprintf+26B↑j
.text:0000000000006EA8                 mov     rdi, r12        ; size
.text:0000000000006EAB                 mov     [rbp+var_3E0], r8
.text:0000000000006EB2                 mov     byte ptr [rbp+var_3D0], dl
.text:0000000000006EB8                 mov     [rbp+n], rcx
.text:0000000000006EBF                 call    _malloc
.text:0000000000006EC4                 test    rax, rax
.text:0000000000006EC7                 mov     r9, rax
.text:0000000000006ECA                 mov     rcx, [rbp+n]
.text:0000000000006ED1                 movzx   edx, byte ptr [rbp+var_3D0]
.text:0000000000006ED8                 mov     r8, [rbp+var_3E0]
.text:0000000000006EDF                 jz      loc_6465
.text:0000000000006EE5                 test    rbx, rbx
.text:0000000000006EE8                 jz      loc_70F0
.text:0000000000006EEE                 test    dl, dl
.text:0000000000006EF0                 jz      loc_70F0
.text:0000000000006EF6                 mov     rsi, r15        ; src
.text:0000000000006EF9                 mov     rdx, rbx        ; n
.text:0000000000006EFC                 mov     rdi, rax        ; dest
.text:0000000000006EFF                 mov     [rbp+var_3D0], r8
.text:0000000000006F06                 mov     [rbp+n], rcx
.text:0000000000006F0D                 call    _memcpy
.text:0000000000006F12                 mov     rcx, [rbp+n]
.text:0000000000006F19                 mov     r15, rax
.text:0000000000006F1C                 mov     r8, [rbp+var_3D0]
.text:0000000000006F23                 jmp     loc_65A4
.text:0000000000006F23 ; ---------------------------------------------------------------------------
.text:0000000000006F28                 align 10h
.text:0000000000006F30
.text:0000000000006F30 loc_6F30:                               ; CODE XREF: vasnprintf+15F↑j
.text:0000000000006F30                 mov     r14, r12
.text:0000000000006F33                 jmp     loc_65A4
.text:0000000000006F33 ; ---------------------------------------------------------------------------
.text:0000000000006F38                 align 20h
.text:0000000000006F40
.text:0000000000006F40 loc_6F40:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006F40                                         ; DATA XREF: .rodata:jpt_6E00↓o
.text:0000000000006F40                 mov     [rax], r14      ; jumptable 0000000000006E00 cases 21,22
.text:0000000000006F43                 mov     rbx, r14
.text:0000000000006F46                 jmp     loc_6D94
.text:0000000000006F4B ; ---------------------------------------------------------------------------
.text:0000000000006F4B
.text:0000000000006F4B loc_6F4B:                               ; CODE XREF: vasnprintf+29B↑j
.text:0000000000006F4B                                         ; vasnprintf+B4F↑j ...
.text:0000000000006F4B                 call    ___errno_location
.text:0000000000006F50                 mov     [rbp+n], rax
.text:0000000000006F57                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006F60
.text:0000000000006F60 loc_6F60:                               ; CODE XREF: vasnprintf+17D↑j
.text:0000000000006F60                 mov     rdi, r15        ; ptr
.text:0000000000006F63                 call    _free
.text:0000000000006F68                 jmp     loc_6483
.text:0000000000006F68 ; ---------------------------------------------------------------------------
.text:0000000000006F6D                 align 10h
.text:0000000000006F70
.text:0000000000006F70 loc_6F70:                               ; CODE XREF: vasnprintf+872↑j
.text:0000000000006F70                 mov     r9, [rbp+var_3F0]
.text:0000000000006F77                 mov     r8, [rbp+var_3D8]
.text:0000000000006F7E                 mov     rsi, r10
.text:0000000000006F81                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F88                 mov     edx, 1
.text:0000000000006F8D                 mov     eax, 1
.text:0000000000006F92                 mov     [rbp+var_430], r10
.text:0000000000006F99                 call    ___snprintf_chk
.text:0000000000006F9E                 mov     r10, [rbp+var_430]
.text:0000000000006FA5                 jmp     loc_68C6
.text:0000000000006FA5 ; ---------------------------------------------------------------------------
.text:0000000000006FAA                 align 10h
.text:0000000000006FB0
.text:0000000000006FB0 loc_6FB0:                               ; CODE XREF: vasnprintf+7E8↑j
.text:0000000000006FB0                 sub     rsp, 10h
.text:0000000000006FB4                 mov     r9, [rbp+var_3F0]
.text:0000000000006FBB                 fstp    [rsp+440h+var_440]
.text:0000000000006FBE                 jmp     loc_6899
.text:0000000000006FBE ; ---------------------------------------------------------------------------
.text:0000000000006FC3                 align 8
.text:0000000000006FC8
.text:0000000000006FC8 loc_6FC8:                               ; CODE XREF: vasnprintf+4A3↑j
.text:0000000000006FC8                 js      loc_6465
.text:0000000000006FCE                 add     r12, r12
.text:0000000000006FD1                 cmp     r12, rax
.text:0000000000006FD4                 jnb     loc_67B9
.text:0000000000006FDA                 nop     word ptr [rax+rax+00h]
.text:0000000000006FE0
.text:0000000000006FE0 loc_6FE0:                               ; CODE XREF: vasnprintf+4AD↑j
.text:0000000000006FE0                                         ; vasnprintf+1114↓j
.text:0000000000006FE0                 test    rdx, rdx
.text:0000000000006FE3                 jnz     loc_6465
.text:0000000000006FE9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006FED                 jz      loc_6465
.text:0000000000006FF3                 cmp     r15, [rbp+src]
.text:0000000000006FFA                 mov     r12, rax
.text:0000000000006FFD                 setz    dl
.text:0000000000007000                 test    r15, r15
.text:0000000000007003                 jnz     loc_67CC
.text:0000000000007009                 nop     dword ptr [rax+00000000h]
.text:0000000000007010
.text:0000000000007010 loc_7010:                               ; CODE XREF: vasnprintf+4C6↑j
.text:0000000000007010                                         ; vasnprintf+4CE↑j
.text:0000000000007010                 mov     rdi, r12        ; size
.text:0000000000007013                 mov     byte ptr [rbp+n], dl
.text:0000000000007019                 call    _malloc
.text:000000000000701E                 test    rax, rax
.text:0000000000007021                 mov     rcx, rax
.text:0000000000007024                 movzx   edx, byte ptr [rbp+n]
.text:000000000000702B                 jz      loc_6465
.text:0000000000007031                 test    r14, r14
.text:0000000000007034                 jz      loc_71D0
.text:000000000000703A                 test    dl, dl
.text:000000000000703C                 jz      loc_71D0
.text:0000000000007042                 mov     rsi, r15        ; src
.text:0000000000007045                 mov     rdx, r14        ; n
.text:0000000000007048                 mov     rdi, rax        ; dest
.text:000000000000704B                 call    _memcpy
.text:0000000000007050                 mov     r15, rax
.text:0000000000007053                 jmp     loc_67EB
.text:0000000000007053 ; ---------------------------------------------------------------------------
.text:0000000000007058                 align 20h
.text:0000000000007060
.text:0000000000007060 loc_7060:                               ; CODE XREF: vasnprintf+402↑j
.text:0000000000007060                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000007063                 add     rbx, 1
.text:0000000000007067                 jmp     loc_671B
.text:0000000000007067 ; ---------------------------------------------------------------------------
.text:000000000000706C                 align 10h
.text:0000000000007070
.text:0000000000007070 loc_7070:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000007070                                         ; DATA XREF: .rodata:jpt_6E00↓o
.text:0000000000007070                 mov     [rax], r14b     ; jumptable 0000000000006E00 case 18
.text:0000000000007073                 mov     rbx, r14
.text:0000000000007076                 jmp     loc_6D94
.text:0000000000007076 ; ---------------------------------------------------------------------------
.text:000000000000707B                 align 20h
.text:0000000000007080
.text:0000000000007080 loc_7080:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000007080                                         ; DATA XREF: .rodata:jpt_6E00↓o
.text:0000000000007080                 mov     [rax], r14d     ; jumptable 0000000000006E00 case 20
.text:0000000000007083                 mov     rbx, r14
.text:0000000000007086                 jmp     loc_6D94
.text:0000000000007086 ; ---------------------------------------------------------------------------
.text:000000000000708B                 align 10h
.text:0000000000007090
.text:0000000000007090 loc_7090:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000007090                                         ; DATA XREF: .rodata:jpt_6E00↓o
.text:0000000000007090                 mov     [rax], r14w     ; jumptable 0000000000006E00 case 19
.text:0000000000007094                 mov     rbx, r14
.text:0000000000007097                 jmp     loc_6D94
.text:0000000000007097 ; ---------------------------------------------------------------------------
.text:000000000000709C                 align 20h
.text:00000000000070A0
.text:00000000000070A0 loc_70A0:                               ; CODE XREF: vasnprintf+B33↑j
.text:00000000000070A0                                         ; vasnprintf+B3B↑j
.text:00000000000070A0                 mov     rdi, r12        ; size
.text:00000000000070A3                 mov     byte ptr [rbp+n], dl
.text:00000000000070A9                 call    _malloc
.text:00000000000070AE                 test    rax, rax
.text:00000000000070B1                 mov     rcx, rax
.text:00000000000070B4                 movzx   edx, byte ptr [rbp+n]
.text:00000000000070BB                 jz      loc_6465
.text:00000000000070C1                 test    r14, r14
.text:00000000000070C4                 jz      loc_7204
.text:00000000000070CA                 test    dl, dl
.text:00000000000070CC                 jz      loc_7204
.text:00000000000070D2                 mov     rsi, r15        ; src
.text:00000000000070D5                 mov     rdx, r14        ; n
.text:00000000000070D8                 mov     rdi, rax        ; dest
.text:00000000000070DB                 call    _memcpy
.text:00000000000070E0                 mov     r15, rax
.text:00000000000070E3                 jmp     loc_6D8F
.text:00000000000070E3 ; ---------------------------------------------------------------------------
.text:00000000000070E8                 align 10h
.text:00000000000070F0
.text:00000000000070F0 loc_70F0:                               ; CODE XREF: vasnprintf+BE8↑j
.text:00000000000070F0                                         ; vasnprintf+BF0↑j
.text:00000000000070F0                 mov     r15, r9
.text:00000000000070F3                 jmp     loc_65A4
.text:00000000000070F3 ; ---------------------------------------------------------------------------
.text:00000000000070F8                 align 20h
.text:0000000000007100
.text:0000000000007100 loc_7100:                               ; CODE XREF: vasnprintf+869↑j
.text:0000000000007100                 sub     rsp, 8
.text:0000000000007104                 push    [rbp+var_3F0]
.text:000000000000710A                 jmp     loc_6B85
.text:000000000000710A ; ---------------------------------------------------------------------------
.text:000000000000710F                 align 10h
.text:0000000000007110
.text:0000000000007110 loc_7110:                               ; CODE XREF: vasnprintf+7DF↑j
.text:0000000000007110                 sub     rsp, 8
.text:0000000000007114                 push    [rbp+var_3F0]
.text:000000000000711A                 sub     rsp, 10h
.text:000000000000711E                 fstp    [rsp+450h+var_450]
.text:0000000000007121                 jmp     loc_6C4B
.text:0000000000007121 ; ---------------------------------------------------------------------------
.text:0000000000007126                 align 10h
.text:0000000000007130
.text:0000000000007130 loc_7130:                               ; CODE XREF: vasnprintf+5FC↑j
.text:0000000000007130                 mov     rax, [rbp+n]
.text:0000000000007137                 mov     edi, [rbp-424h]
.text:000000000000713D                 movsxd  rbx, ecx
.text:0000000000007140                 add     rbx, r14
.text:0000000000007143                 mov     [rax], edi
.text:0000000000007145                 jmp     loc_6D94
.text:0000000000007145 ; ---------------------------------------------------------------------------
.text:000000000000714A                 align 10h
.text:0000000000007150
.text:0000000000007150 loc_7150:                               ; CODE XREF: vasnprintf+609↑j
.text:0000000000007150                 cmp     r15, [rbp+src]
.text:0000000000007157                 jz      short loc_7162
.text:0000000000007159                 test    r15, r15
.text:000000000000715C                 jnz     loc_7219
.text:0000000000007162
.text:0000000000007162 loc_7162:                               ; CODE XREF: vasnprintf+E57↑j
.text:0000000000007162                                         ; vasnprintf+F21↓j
.text:0000000000007162                 mov     rax, [rbp+ptr]
.text:0000000000007169                 test    rax, rax
.text:000000000000716C                 jz      short loc_7176
.text:000000000000716E                 mov     rdi, rax        ; ptr
.text:0000000000007171                 call    _free
.text:0000000000007176
.text:0000000000007176 loc_7176:                               ; CODE XREF: vasnprintf+E6C↑j
.text:0000000000007176                 mov     rax, [rbp+var_408]
.text:000000000000717D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000007184                 add     rax, 20h ; ' '
.text:0000000000007188                 cmp     rdi, rax
.text:000000000000718B                 jz      short loc_7192
.text:000000000000718D                 call    _free
.text:0000000000007192
.text:0000000000007192 loc_7192:                               ; CODE XREF: vasnprintf+E8B↑j
.text:0000000000007192                 mov     rax, [rbp+var_410]
.text:0000000000007199                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000071A0                 add     rax, 10h
.text:00000000000071A4                 cmp     rdi, rax
.text:00000000000071A7                 jz      short loc_71AE
.text:00000000000071A9                 call    _free
.text:00000000000071AE
.text:00000000000071AE loc_71AE:                               ; CODE XREF: vasnprintf+EA7↑j
.text:00000000000071AE                 mov     rax, [rbp+n]
.text:00000000000071B5                 xor     r15d, r15d
.text:00000000000071B8                 mov     dword ptr [rax], 4Bh ; 'K'
.text:00000000000071BE                 jmp     loc_64DF
.text:00000000000071BE ; ---------------------------------------------------------------------------
.text:00000000000071C3                 align 8
.text:00000000000071C8
.text:00000000000071C8 loc_71C8:                               ; CODE XREF: vasnprintf+60↑j
.text:00000000000071C8                 xor     r15d, r15d
.text:00000000000071CB                 jmp     loc_64DF
.text:00000000000071D0 ; ---------------------------------------------------------------------------
.text:00000000000071D0
.text:00000000000071D0 loc_71D0:                               ; CODE XREF: vasnprintf+D34↑j
.text:00000000000071D0                                         ; vasnprintf+D3C↑j
.text:00000000000071D0                 mov     r15, rcx
.text:00000000000071D3                 jmp     loc_67EB
.text:00000000000071D3 ; ---------------------------------------------------------------------------
.text:00000000000071D8                 align 20h
.text:00000000000071E0
.text:00000000000071E0 loc_71E0:                               ; CODE XREF: vasnprintf+B10↑j
.text:00000000000071E0                 js      loc_6465
.text:00000000000071E6                 add     r12, r12
.text:00000000000071E9                 cmp     r12, rax
.text:00000000000071EC                 jnb     loc_6E26
.text:00000000000071F2
.text:00000000000071F2 loc_71F2:                               ; CODE XREF: vasnprintf+B1A↑j
.text:00000000000071F2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000071F6                 jz      loc_6465
.text:00000000000071FC                 mov     r12, rax
.text:00000000000071FF                 jmp     loc_6E26
.text:0000000000007204 ; ---------------------------------------------------------------------------
.text:0000000000007204
.text:0000000000007204 loc_7204:                               ; CODE XREF: vasnprintf+DC4↑j
.text:0000000000007204                                         ; vasnprintf+DCC↑j
.text:0000000000007204                 mov     r15, rcx
.text:0000000000007207                 jmp     loc_6D8F
.text:000000000000720C ; ---------------------------------------------------------------------------
.text:000000000000720C
.text:000000000000720C loc_720C:                               ; CODE XREF: vasnprintf+75C↑j
.text:000000000000720C                 mov     rdi, r15        ; ptr
.text:000000000000720F                 call    _free
.text:0000000000007214                 jmp     loc_6A62
.text:0000000000007219 ; ---------------------------------------------------------------------------
.text:0000000000007219
.text:0000000000007219 loc_7219:                               ; CODE XREF: vasnprintf+E5C↑j
.text:0000000000007219                 mov     rdi, r15        ; ptr
.text:000000000000721C                 call    _free
.text:0000000000007221                 jmp     loc_7162
.text:0000000000007226 ; ---------------------------------------------------------------------------
.text:0000000000007226
.text:0000000000007226 def_685B:                               ; CODE XREF: vasnprintf+2DD↑j
.text:0000000000007226                                         ; vasnprintf+43E↑j ...
.text:0000000000007226                 call    _abort          ; jumptable 000000000000685B default case, case 0
.text:0000000000007226                                         ; jumptable 0000000000006E00 default case
.text:0000000000007226 ; ---------------------------------------------------------------------------
.text:000000000000722B                 align 10h
.text:0000000000007230
.text:0000000000007230 loc_7230:                               ; CODE XREF: vasnprintf+73↑j
.text:0000000000007230                 mov     rax, [rbp+var_408]
.text:0000000000007237                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000723E                 add     rax, 20h ; ' '
.text:0000000000007242                 cmp     rdi, rax
.text:0000000000007245                 jz      short loc_724C
.text:0000000000007247                 call    _free
.text:000000000000724C
.text:000000000000724C loc_724C:                               ; CODE XREF: vasnprintf+F45↑j
.text:000000000000724C                 mov     rax, [rbp+var_410]
.text:0000000000007253                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000725A                 add     rax, 10h
.text:000000000000725E                 cmp     rdi, rax
.text:0000000000007261                 jz      short loc_7268
.text:0000000000007263                 call    _free
.text:0000000000007268
.text:0000000000007268 loc_7268:                               ; CODE XREF: vasnprintf+F61↑j
.text:0000000000007268                 call    ___errno_location
.text:000000000000726D                 xor     r15d, r15d
.text:0000000000007270                 mov     dword ptr [rax], 16h
.text:0000000000007276                 jmp     loc_64DF
.text:000000000000727B ; ---------------------------------------------------------------------------
.text:000000000000727B
.text:000000000000727B loc_727B:                               ; CODE XREF: vasnprintf+2C1↑j
.text:000000000000727B                 mov     rbx, r14
.text:000000000000727E                 xor     eax, eax
.text:0000000000007280                 add     rbx, 1
.text:0000000000007284                 jb      loc_7390
.text:000000000000728A                 cmp     r12, rbx
.text:000000000000728D                 jnb     short loc_72DC
.text:000000000000728F                 test    r12, r12
.text:0000000000007292                 jnz     loc_73C9
.text:0000000000007298                 cmp     rbx, 0Ch
.text:000000000000729C                 ja      loc_73AE
.text:00000000000072A2                 mov     r12d, 0Ch
.text:00000000000072A8
.text:00000000000072A8 loc_72A8:                               ; CODE XREF: vasnprintf+10C4↓j
.text:00000000000072A8                                         ; vasnprintf+10D5↓j
.text:00000000000072A8                 cmp     r15, [rbp+src]
.text:00000000000072AF                 setz    r13b
.text:00000000000072B3                 test    r15, r15
.text:00000000000072B6                 jz      loc_735C
.text:00000000000072BC                 test    r13b, r13b
.text:00000000000072BF                 jnz     loc_735C
.text:00000000000072C5                 mov     rsi, r12        ; size
.text:00000000000072C8                 mov     rdi, r15        ; ptr
.text:00000000000072CB                 call    _realloc
.text:00000000000072D0                 test    rax, rax
.text:00000000000072D3                 jz      loc_6F4B
.text:00000000000072D9                 mov     r15, rax
.text:00000000000072DC
.text:00000000000072DC loc_72DC:                               ; CODE XREF: vasnprintf+F8D↑j
.text:00000000000072DC                                         ; vasnprintf+108B↓j ...
.text:00000000000072DC                 cmp     r15, [rbp+src]
.text:00000000000072E3                 mov     byte ptr [r15+r14], 0
.text:00000000000072E8                 jz      short loc_7301
.text:00000000000072EA                 cmp     r12, rbx
.text:00000000000072ED                 jbe     short loc_7301
.text:00000000000072EF                 mov     rdi, r15        ; ptr
.text:00000000000072F2                 mov     rsi, rbx        ; size
.text:00000000000072F5                 call    _realloc
.text:00000000000072FA                 test    rax, rax
.text:00000000000072FD                 cmovnz  r15, rax
.text:0000000000007301
.text:0000000000007301 loc_7301:                               ; CODE XREF: vasnprintf+FE8↑j
.text:0000000000007301                                         ; vasnprintf+FED↑j
.text:0000000000007301                 mov     rax, [rbp+ptr]
.text:0000000000007308                 test    rax, rax
.text:000000000000730B                 jz      short loc_7315
.text:000000000000730D                 mov     rdi, rax        ; ptr
.text:0000000000007310                 call    _free
.text:0000000000007315
.text:0000000000007315 loc_7315:                               ; CODE XREF: vasnprintf+100B↑j
.text:0000000000007315                 mov     rax, [rbp+var_408]
.text:000000000000731C                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000007323                 add     rax, 20h ; ' '
.text:0000000000007327                 cmp     rdi, rax
.text:000000000000732A                 jz      short loc_7331
.text:000000000000732C                 call    _free
.text:0000000000007331
.text:0000000000007331 loc_7331:                               ; CODE XREF: vasnprintf+102A↑j
.text:0000000000007331                 mov     rax, [rbp+var_410]
.text:0000000000007338                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000733F                 add     rax, 10h
.text:0000000000007343                 cmp     rdi, rax
.text:0000000000007346                 jz      short loc_734D
.text:0000000000007348                 call    _free
.text:000000000000734D
.text:000000000000734D loc_734D:                               ; CODE XREF: vasnprintf+1046↑j
.text:000000000000734D                 mov     rax, [rbp+var_418]
.text:0000000000007354                 mov     [rax], r14
.text:0000000000007357                 jmp     loc_64DF
.text:000000000000735C ; ---------------------------------------------------------------------------
.text:000000000000735C
.text:000000000000735C loc_735C:                               ; CODE XREF: vasnprintf+FB6↑j
.text:000000000000735C                                         ; vasnprintf+FBF↑j
.text:000000000000735C                 mov     rdi, r12        ; size
.text:000000000000735F                 call    _malloc
.text:0000000000007364                 test    rax, rax
.text:0000000000007367                 mov     rcx, rax
.text:000000000000736A                 jz      loc_6465
.text:0000000000007370                 test    r14, r14
.text:0000000000007373                 jz      short loc_73E0
.text:0000000000007375                 test    r13b, r13b
.text:0000000000007378                 jz      short loc_73E0
.text:000000000000737A                 mov     rsi, r15        ; src
.text:000000000000737D                 mov     rdx, r14        ; n
.text:0000000000007380                 mov     rdi, rax        ; dest
.text:0000000000007383                 call    _memcpy
.text:0000000000007388                 mov     r15, rax
.text:000000000000738B                 jmp     loc_72DC
.text:0000000000007390 ; ---------------------------------------------------------------------------
.text:0000000000007390
.text:0000000000007390 loc_7390:                               ; CODE XREF: vasnprintf+F84↑j
.text:0000000000007390                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000007394                 mov     eax, 1
.text:0000000000007399                 jz      loc_72DC
.text:000000000000739F                 test    r12, r12
.text:00000000000073A2                 jz      loc_6465
.text:00000000000073A8                 js      loc_6465
.text:00000000000073AE
.text:00000000000073AE loc_73AE:                               ; CODE XREF: vasnprintf+F9C↑j
.text:00000000000073AE                                         ; vasnprintf+10DB↓j
.text:00000000000073AE                 test    rax, rax
.text:00000000000073B1                 jnz     loc_6465
.text:00000000000073B7                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000073BB                 jz      loc_6465
.text:00000000000073C1                 mov     r12, rbx
.text:00000000000073C4                 jmp     loc_72A8
.text:00000000000073C9 ; ---------------------------------------------------------------------------
.text:00000000000073C9
.text:00000000000073C9 loc_73C9:                               ; CODE XREF: vasnprintf+F92↑j
.text:00000000000073C9                 js      loc_6465
.text:00000000000073CF                 add     r12, r12
.text:00000000000073D2                 cmp     r12, rbx
.text:00000000000073D5                 jnb     loc_72A8
.text:00000000000073DB                 jmp     short loc_73AE
.text:00000000000073DB ; ---------------------------------------------------------------------------
.text:00000000000073DD                 align 20h
.text:00000000000073E0
.text:00000000000073E0 loc_73E0:                               ; CODE XREF: vasnprintf+1073↑j
.text:00000000000073E0                                         ; vasnprintf+1078↑j
.text:00000000000073E0                 mov     r15, rcx
.text:00000000000073E3                 jmp     loc_72DC
.text:00000000000073E8 ; ---------------------------------------------------------------------------
.text:00000000000073E8
.text:00000000000073E8 loc_73E8:                               ; CODE XREF: vasnprintf+627↑j
.text:00000000000073E8                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000073EC                 jz      loc_6810
.text:00000000000073F2                 jmp     loc_6471
.text:00000000000073F7 ; ---------------------------------------------------------------------------
.text:00000000000073F7
.text:00000000000073F7 loc_73F7:                               ; CODE XREF: vasnprintf+1EF↑j
.text:00000000000073F7                 call    ___stack_chk_fail
.text:00000000000073FC ; ---------------------------------------------------------------------------
.text:00000000000073FC
.text:00000000000073FC loc_73FC:                               ; CODE XREF: vasnprintf+495↑j
.text:00000000000073FC                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000007400                 mov     edx, 1
.text:0000000000007405                 jz      loc_67EB
.text:000000000000740B                 test    r12, r12
.text:000000000000740E                 jz      loc_6465
.text:0000000000007414                 jns     loc_6FE0
.text:000000000000741A                 jmp     loc_6465
.text:000000000000741A ; } // starts at 6300
.text:000000000000741A vasnprintf      endp
.text:000000000000741A
.text:000000000000741A ; ---------------------------------------------------------------------------
.text:000000000000741F                 align 20h
.text:0000000000007420
.text:0000000000007420 ; =============== S U B R O U T I N E =======================================
.text:0000000000007420
.text:0000000000007420
.text:0000000000007420                 public printf_fetchargs
.text:0000000000007420 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:0000000000007420 ; __unwind {
.text:0000000000007420                 cmp     qword ptr [rsi], 0
.text:0000000000007424                 mov     rax, [rsi+8]
.text:0000000000007428                 jz      short loc_748D
.text:000000000000742A                 lea     r8, jpt_7456
.text:0000000000007431                 lea     r10, wide_null_string_2696
.text:0000000000007438                 lea     r9, aNull       ; "(NULL)"
.text:000000000000743F                 xor     ecx, ecx
.text:0000000000007441                 nop     dword ptr [rax+00000000h]
.text:0000000000007448
.text:0000000000007448 loc_7448:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:0000000000007448                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:000000000000744B                 ja      short def_7456  ; jumptable 0000000000007456 default case, case 0
.text:000000000000744D                 mov     edx, [rax]
.text:000000000000744F                 movsxd  rdx, ds:(jpt_7456 - 98B0h)[r8+rdx*4]
.text:0000000000007453                 add     rdx, r8
.text:0000000000007456                 jmp     rdx             ; switch jump
.text:0000000000007456 ; ---------------------------------------------------------------------------
.text:0000000000007458                 align 20h
.text:0000000000007460
.text:0000000000007460 loc_7460:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007460                                         ; DATA XREF: .rodata:jpt_7456↓o
.text:0000000000007460                 mov     rdx, [rdi+8]    ; jumptable 0000000000007456 case 12
.text:0000000000007464                 add     rdx, 0Fh
.text:0000000000007468                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000000746C                 lea     r11, [rdx+10h]
.text:0000000000007470                 mov     [rdi+8], r11
.text:0000000000007474                 fld     tbyte ptr [rdx]
.text:0000000000007476                 fstp    tbyte ptr [rax+10h]
.text:0000000000007479                 nop     dword ptr [rax+00000000h]
.text:0000000000007480
.text:0000000000007480 loc_7480:                               ; CODE XREF: printf_fetchargs+98↓j
.text:0000000000007480                                         ; printf_fetchargs+BA↓j ...
.text:0000000000007480                 add     rcx, 1
.text:0000000000007484                 add     rax, 20h ; ' '
.text:0000000000007488                 cmp     [rsi], rcx
.text:000000000000748B                 ja      short loc_7448
.text:000000000000748D
.text:000000000000748D loc_748D:                               ; CODE XREF: printf_fetchargs+8↑j
.text:000000000000748D                 xor     eax, eax
.text:000000000000748F                 retn
.text:0000000000007490 ; ---------------------------------------------------------------------------
.text:0000000000007490
.text:0000000000007490 def_7456:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:0000000000007490                                         ; printf_fetchargs+36↑j
.text:0000000000007490                                         ; DATA XREF: ...
.text:0000000000007490                 mov     eax, 0FFFFFFFFh ; jumptable 0000000000007456 default case, case 0
.text:0000000000007495                 retn
.text:0000000000007496 ; ---------------------------------------------------------------------------
.text:0000000000007496
.text:0000000000007496 loc_7496:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007496                                         ; DATA XREF: .rodata:jpt_7456↓o
.text:0000000000007496                 mov     r11d, [rdi]     ; jumptable 0000000000007456 cases 7-10,17-22
.text:0000000000007499                 cmp     r11d, 2Fh ; '/'
.text:000000000000749D                 ja      loc_75DA
.text:00000000000074A3                 mov     edx, r11d
.text:00000000000074A6                 add     rdx, [rdi+10h]
.text:00000000000074AA                 add     r11d, 8
.text:00000000000074AE                 mov     [rdi], r11d
.text:00000000000074B1
.text:00000000000074B1 loc_74B1:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:00000000000074B1                 mov     rdx, [rdx]
.text:00000000000074B4                 mov     [rax+10h], rdx
.text:00000000000074B8                 jmp     short loc_7480
.text:00000000000074BA ; ---------------------------------------------------------------------------
.text:00000000000074BA
.text:00000000000074BA loc_74BA:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000074BA                                         ; DATA XREF: .rodata:jpt_7456↓o
.text:00000000000074BA                 mov     r11d, [rdi]     ; jumptable 0000000000007456 cases 5,6,13,14
.text:00000000000074BD                 cmp     r11d, 2Fh ; '/'
.text:00000000000074C1                 ja      loc_75FC
.text:00000000000074C7                 mov     edx, r11d
.text:00000000000074CA                 add     rdx, [rdi+10h]
.text:00000000000074CE                 add     r11d, 8
.text:00000000000074D2                 mov     [rdi], r11d
.text:00000000000074D5
.text:00000000000074D5 loc_74D5:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:00000000000074D5                 mov     edx, [rdx]
.text:00000000000074D7                 mov     [rax+10h], edx
.text:00000000000074DA                 jmp     short loc_7480
.text:00000000000074DC ; ---------------------------------------------------------------------------
.text:00000000000074DC
.text:00000000000074DC loc_74DC:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000074DC                                         ; DATA XREF: .rodata:jpt_7456↓o
.text:00000000000074DC                 mov     r11d, [rdi]     ; jumptable 0000000000007456 cases 1,2
.text:00000000000074DF                 cmp     r11d, 2Fh ; '/'
.text:00000000000074E3                 ja      loc_75EB
.text:00000000000074E9                 mov     edx, r11d
.text:00000000000074EC                 add     rdx, [rdi+10h]
.text:00000000000074F0                 add     r11d, 8
.text:00000000000074F4                 mov     [rdi], r11d
.text:00000000000074F7
.text:00000000000074F7 loc_74F7:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:00000000000074F7                 mov     edx, [rdx]
.text:00000000000074F9                 mov     [rax+10h], dl
.text:00000000000074FC                 jmp     short loc_7480
.text:00000000000074FE ; ---------------------------------------------------------------------------
.text:00000000000074FE
.text:00000000000074FE loc_74FE:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000074FE                                         ; DATA XREF: .rodata:jpt_7456↓o
.text:00000000000074FE                 mov     r11d, [rdi]     ; jumptable 0000000000007456 cases 3,4
.text:0000000000007501                 cmp     r11d, 2Fh ; '/'
.text:0000000000007505                 ja      loc_75AA
.text:000000000000750B                 mov     edx, r11d
.text:000000000000750E                 add     rdx, [rdi+10h]
.text:0000000000007512                 add     r11d, 8
.text:0000000000007516                 mov     [rdi], r11d
.text:0000000000007519
.text:0000000000007519 loc_7519:                               ; CODE XREF: printf_fetchargs+196↓j
.text:0000000000007519                 mov     edx, [rdx]
.text:000000000000751B                 mov     [rax+10h], dx
.text:000000000000751F                 jmp     loc_7480
.text:0000000000007524 ; ---------------------------------------------------------------------------
.text:0000000000007524
.text:0000000000007524 loc_7524:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007524                                         ; DATA XREF: .rodata:jpt_7456↓o
.text:0000000000007524                 mov     r11d, [rdi]     ; jumptable 0000000000007456 case 15
.text:0000000000007527                 cmp     r11d, 2Fh ; '/'
.text:000000000000752B                 ja      loc_75BB
.text:0000000000007531                 mov     edx, r11d
.text:0000000000007534                 add     rdx, [rdi+10h]
.text:0000000000007538                 add     r11d, 8
.text:000000000000753C                 mov     [rdi], r11d
.text:000000000000753F
.text:000000000000753F loc_753F:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:000000000000753F                 mov     rdx, [rdx]
.text:0000000000007542                 test    rdx, rdx
.text:0000000000007545                 cmovz   rdx, r9
.text:0000000000007549                 mov     [rax+10h], rdx
.text:000000000000754D                 jmp     loc_7480
.text:0000000000007552 ; ---------------------------------------------------------------------------
.text:0000000000007552
.text:0000000000007552 loc_7552:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007552                                         ; DATA XREF: .rodata:jpt_7456↓o
.text:0000000000007552                 mov     r11d, [rdi+4]   ; jumptable 0000000000007456 case 11
.text:0000000000007556                 cmp     r11d, 0AFh
.text:000000000000755D                 ja      loc_760D
.text:0000000000007563                 mov     edx, r11d
.text:0000000000007566                 add     rdx, [rdi+10h]
.text:000000000000756A                 add     r11d, 10h
.text:000000000000756E                 mov     [rdi+4], r11d
.text:0000000000007572
.text:0000000000007572 loc_7572:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:0000000000007572                 movsd   xmm0, qword ptr [rdx]
.text:0000000000007576                 movsd   qword ptr [rax+10h], xmm0
.text:000000000000757B                 jmp     loc_7480
.text:0000000000007580 ; ---------------------------------------------------------------------------
.text:0000000000007580
.text:0000000000007580 loc_7580:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007580                                         ; DATA XREF: .rodata:jpt_7456↓o
.text:0000000000007580                 mov     r11d, [rdi]     ; jumptable 0000000000007456 case 16
.text:0000000000007583                 cmp     r11d, 2Fh ; '/'
.text:0000000000007587                 ja      short loc_75CC
.text:0000000000007589                 mov     edx, r11d
.text:000000000000758C                 add     rdx, [rdi+10h]
.text:0000000000007590                 add     r11d, 8
.text:0000000000007594                 mov     [rdi], r11d
.text:0000000000007597
.text:0000000000007597 loc_7597:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:0000000000007597                 mov     rdx, [rdx]
.text:000000000000759A                 test    rdx, rdx
.text:000000000000759D                 cmovz   rdx, r10
.text:00000000000075A1                 mov     [rax+10h], rdx
.text:00000000000075A5                 jmp     loc_7480
.text:00000000000075AA ; ---------------------------------------------------------------------------
.text:00000000000075AA
.text:00000000000075AA loc_75AA:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:00000000000075AA                 mov     rdx, [rdi+8]
.text:00000000000075AE                 lea     r11, [rdx+8]
.text:00000000000075B2                 mov     [rdi+8], r11
.text:00000000000075B6                 jmp     loc_7519
.text:00000000000075BB ; ---------------------------------------------------------------------------
.text:00000000000075BB
.text:00000000000075BB loc_75BB:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:00000000000075BB                 mov     rdx, [rdi+8]
.text:00000000000075BF                 lea     r11, [rdx+8]
.text:00000000000075C3                 mov     [rdi+8], r11
.text:00000000000075C7                 jmp     loc_753F
.text:00000000000075CC ; ---------------------------------------------------------------------------
.text:00000000000075CC
.text:00000000000075CC loc_75CC:                               ; CODE XREF: printf_fetchargs+167↑j
.text:00000000000075CC                 mov     rdx, [rdi+8]
.text:00000000000075D0                 lea     r11, [rdx+8]
.text:00000000000075D4                 mov     [rdi+8], r11
.text:00000000000075D8                 jmp     short loc_7597
.text:00000000000075DA ; ---------------------------------------------------------------------------
.text:00000000000075DA
.text:00000000000075DA loc_75DA:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:00000000000075DA                 mov     rdx, [rdi+8]
.text:00000000000075DE                 lea     r11, [rdx+8]
.text:00000000000075E2                 mov     [rdi+8], r11
.text:00000000000075E6                 jmp     loc_74B1
.text:00000000000075EB ; ---------------------------------------------------------------------------
.text:00000000000075EB
.text:00000000000075EB loc_75EB:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:00000000000075EB                 mov     rdx, [rdi+8]
.text:00000000000075EF                 lea     r11, [rdx+8]
.text:00000000000075F3                 mov     [rdi+8], r11
.text:00000000000075F7                 jmp     loc_74F7
.text:00000000000075FC ; ---------------------------------------------------------------------------
.text:00000000000075FC
.text:00000000000075FC loc_75FC:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:00000000000075FC                 mov     rdx, [rdi+8]
.text:0000000000007600                 lea     r11, [rdx+8]
.text:0000000000007604                 mov     [rdi+8], r11
.text:0000000000007608                 jmp     loc_74D5
.text:000000000000760D ; ---------------------------------------------------------------------------
.text:000000000000760D
.text:000000000000760D loc_760D:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:000000000000760D                 mov     rdx, [rdi+8]
.text:0000000000007611                 lea     r11, [rdx+8]
.text:0000000000007615                 mov     [rdi+8], r11
.text:0000000000007619                 jmp     loc_7572
.text:0000000000007619 ; } // starts at 7420
.text:0000000000007619 printf_fetchargs endp
.text:0000000000007619
.text:0000000000007619 ; ---------------------------------------------------------------------------
.text:000000000000761E                 align 20h
.text:0000000000007620 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:0000000000007620 ; Format      : ELF64 for x86-64 (Relocatable)
.text:0000000000007620 ;
.text:0000000000007620 ; Source File : 'printf-parse.c'
.text:0000000000007620
.text:0000000000007620 ; =============== S U B R O U T I N E =======================================
.text:0000000000007620
.text:0000000000007620 ; Attributes: info_from_lumina
.text:0000000000007620
.text:0000000000007620 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:0000000000007620                 public printf_parse
.text:0000000000007620 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:0000000000007620
.text:0000000000007620 src             = qword ptr -80h
.text:0000000000007620 var_78          = qword ptr -78h
.text:0000000000007620 var_70          = qword ptr -70h
.text:0000000000007620 var_68          = qword ptr -68h
.text:0000000000007620 var_60          = qword ptr -60h
.text:0000000000007620 var_58          = qword ptr -58h
.text:0000000000007620 var_50          = qword ptr -50h
.text:0000000000007620 var_48          = qword ptr -48h
.text:0000000000007620 var_40          = qword ptr -40h
.text:0000000000007620
.text:0000000000007620 ; __unwind {
.text:0000000000007620                 push    r15
.text:0000000000007622                 push    r14
.text:0000000000007624                 lea     rcx, [rsi+20h]
.text:0000000000007628                 push    r13
.text:000000000000762A                 push    r12
.text:000000000000762C                 lea     rax, [rdx+10h]
.text:0000000000007630                 push    rbp
.text:0000000000007631                 push    rbx
.text:0000000000007632                 mov     r14, rsi
.text:0000000000007635                 mov     r15, rdx
.text:0000000000007638                 xor     ebx, ebx
.text:000000000000763A                 mov     r9d, 7
.text:0000000000007640                 sub     rsp, 58h
.text:0000000000007644                 mov     r10d, 7
.text:000000000000764A                 mov     qword ptr [rsi], 0
.text:0000000000007651                 mov     [rsi+8], rcx
.text:0000000000007655                 mov     [rsp+88h+var_60], rcx
.text:000000000000765A                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000007661                 mov     qword ptr [rdx], 0
.text:0000000000007668                 mov     [rsp+88h+src], rax
.text:000000000000766D                 mov     [rdx+8], rax
.text:0000000000007671                 mov     [rsp+88h+var_70], 0
.text:000000000000767A                 mov     [rsp+88h+var_78], 0
.text:0000000000007683                 mov     [rsp+88h+var_68], 0
.text:000000000000768C                 jmp     short loc_769B
.text:000000000000768C ; ---------------------------------------------------------------------------
.text:000000000000768E                 align 10h
.text:0000000000007690
.text:0000000000007690 loc_7690:                               ; CODE XREF: printf_parse+80↓j
.text:0000000000007690                 cmp     al, 25h ; '%'
.text:0000000000007692                 lea     rbp, [rdi+1]
.text:0000000000007696                 jz      short loc_76D8
.text:0000000000007698
.text:0000000000007698 loc_7698:                               ; CODE XREF: printf_parse+35B↓j
.text:0000000000007698                                         ; printf_parse+364↓j
.text:0000000000007698                 mov     rdi, rbp
.text:000000000000769B
.text:000000000000769B loc_769B:                               ; CODE XREF: printf_parse+6C↑j
.text:000000000000769B                 movzx   eax, byte ptr [rdi]
.text:000000000000769E                 test    al, al
.text:00000000000076A0                 jnz     short loc_7690
.text:00000000000076A2                 lea     rax, [rbx+rbx*4]
.text:00000000000076A6                 lea     rax, [rbx+rax*2]
.text:00000000000076AA                 mov     [rcx+rax*8], rdi
.text:00000000000076AE                 mov     rax, [rsp+88h+var_78]
.text:00000000000076B3                 mov     [r14+10h], rax
.text:00000000000076B7                 mov     rax, [rsp+88h+var_70]
.text:00000000000076BC                 mov     [r14+18h], rax
.text:00000000000076C0                 xor     eax, eax
.text:00000000000076C2
.text:00000000000076C2 loc_76C2:                               ; CODE XREF: printf_parse+87E↓j
.text:00000000000076C2                                         ; printf_parse+B1C↓j
.text:00000000000076C2                 add     rsp, 58h
.text:00000000000076C6                 pop     rbx
.text:00000000000076C7                 pop     rbp
.text:00000000000076C8                 pop     r12
.text:00000000000076CA                 pop     r13
.text:00000000000076CC                 pop     r14
.text:00000000000076CE                 pop     r15
.text:00000000000076D0                 retn
.text:00000000000076D0 ; ---------------------------------------------------------------------------
.text:00000000000076D1                 align 8
.text:00000000000076D8
.text:00000000000076D8 loc_76D8:                               ; CODE XREF: printf_parse+76↑j
.text:00000000000076D8                 lea     rax, [rbx+rbx*4]
.text:00000000000076DC                 mov     r13, r8
.text:00000000000076DF                 lea     rax, [rbx+rax*2]
.text:00000000000076E3                 lea     r12, [rcx+rax*8]
.text:00000000000076E7                 mov     [r12], rdi
.text:00000000000076EB                 mov     dword ptr [r12+10h], 0
.text:00000000000076F4                 mov     qword ptr [r12+18h], 0
.text:00000000000076FD                 mov     qword ptr [r12+20h], 0
.text:0000000000007706                 mov     [r12+28h], r8
.text:000000000000770B                 mov     qword ptr [r12+30h], 0
.text:0000000000007714                 mov     qword ptr [r12+38h], 0
.text:000000000000771D                 mov     [r12+40h], r8
.text:0000000000007722                 mov     [r12+50h], r8
.text:0000000000007727                 movzx   ebx, byte ptr [rdi+1]
.text:000000000000772B                 lea     eax, [rbx-30h]
.text:000000000000772E                 cmp     al, 9
.text:0000000000007730                 ja      short loc_776E
.text:0000000000007732                 jmp     loc_7B6A
.text:0000000000007732 ; ---------------------------------------------------------------------------
.text:0000000000007737                 align 20h
.text:0000000000007740
.text:0000000000007740 loc_7740:                               ; CODE XREF: printf_parse+158↓j
.text:0000000000007740                 cmp     bl, 2Dh ; '-'
.text:0000000000007743                 jz      short loc_7788
.text:0000000000007745                 cmp     bl, 2Bh ; '+'
.text:0000000000007748                 jz      short loc_7790
.text:000000000000774A                 cmp     bl, 20h ; ' '
.text:000000000000774D                 jz      short loc_77A0
.text:000000000000774F                 cmp     bl, 23h ; '#'
.text:0000000000007752                 jz      short loc_77B0
.text:0000000000007754                 cmp     bl, 30h ; '0'
.text:0000000000007757                 jz      short loc_77C0
.text:0000000000007759                 cmp     bl, 49h ; 'I'
.text:000000000000775C                 jnz     short loc_77D0
.text:000000000000775E                 or      dword ptr [r12+10h], 40h
.text:0000000000007764                 nop     dword ptr [rax+00h]
.text:0000000000007768
.text:0000000000007768 loc_7768:                               ; CODE XREF: printf_parse+160↓j
.text:0000000000007768                                         ; printf_parse+16E↓j ...
.text:0000000000007768                 movzx   ebx, byte ptr [rax]
.text:000000000000776B                 mov     rbp, rax
.text:000000000000776E
.text:000000000000776E loc_776E:                               ; CODE XREF: printf_parse+110↑j
.text:000000000000776E                                         ; printf_parse+565↓j ...
.text:000000000000776E                 lea     rax, [rbp+1]
.text:0000000000007772                 cmp     bl, 27h ; '''
.text:0000000000007775                 mov     rdx, rax
.text:0000000000007778                 jnz     short loc_7740
.text:000000000000777A                 or      dword ptr [r12+10h], 1
.text:0000000000007780                 jmp     short loc_7768
.text:0000000000007780 ; ---------------------------------------------------------------------------
.text:0000000000007782                 align 8
.text:0000000000007788
.text:0000000000007788 loc_7788:                               ; CODE XREF: printf_parse+123↑j
.text:0000000000007788                 or      dword ptr [r12+10h], 2
.text:000000000000778E                 jmp     short loc_7768
.text:0000000000007790 ; ---------------------------------------------------------------------------
.text:0000000000007790
.text:0000000000007790 loc_7790:                               ; CODE XREF: printf_parse+128↑j
.text:0000000000007790                 or      dword ptr [r12+10h], 4
.text:0000000000007796                 jmp     short loc_7768
.text:0000000000007796 ; ---------------------------------------------------------------------------
.text:0000000000007798                 align 20h
.text:00000000000077A0
.text:00000000000077A0 loc_77A0:                               ; CODE XREF: printf_parse+12D↑j
.text:00000000000077A0                 or      dword ptr [r12+10h], 8
.text:00000000000077A6                 jmp     short loc_7768
.text:00000000000077A6 ; ---------------------------------------------------------------------------
.text:00000000000077A8                 align 10h
.text:00000000000077B0
.text:00000000000077B0 loc_77B0:                               ; CODE XREF: printf_parse+132↑j
.text:00000000000077B0                 or      dword ptr [r12+10h], 10h
.text:00000000000077B6                 jmp     short loc_7768
.text:00000000000077B6 ; ---------------------------------------------------------------------------
.text:00000000000077B8                 align 20h
.text:00000000000077C0
.text:00000000000077C0 loc_77C0:                               ; CODE XREF: printf_parse+137↑j
.text:00000000000077C0                 or      dword ptr [r12+10h], 20h
.text:00000000000077C6                 jmp     short loc_7768
.text:00000000000077C6 ; ---------------------------------------------------------------------------
.text:00000000000077C8                 align 10h
.text:00000000000077D0
.text:00000000000077D0 loc_77D0:                               ; CODE XREF: printf_parse+13C↑j
.text:00000000000077D0                 cmp     bl, 2Ah ; '*'
.text:00000000000077D3                 jz      loc_7989
.text:00000000000077D9                 lea     ecx, [rbx-30h]
.text:00000000000077DC                 cmp     cl, 9
.text:00000000000077DF                 jbe     loc_7BF7
.text:00000000000077E5
.text:00000000000077E5 loc_77E5:                               ; CODE XREF: printf_parse+629↓j
.text:00000000000077E5                                         ; printf_parse+96C↓j
.text:00000000000077E5                 cmp     bl, 2Eh ; '.'
.text:00000000000077E8                 jz      loc_7ABF
.text:00000000000077EE
.text:00000000000077EE loc_77EE:                               ; CODE XREF: printf_parse+499↓j
.text:00000000000077EE                                         ; printf_parse+545↓j ...
.text:00000000000077EE                 xor     eax, eax
.text:00000000000077F0                 mov     esi, 1
.text:00000000000077F5                 jmp     short loc_7827
.text:00000000000077F5 ; ---------------------------------------------------------------------------
.text:00000000000077F7                 align 20h
.text:0000000000007800
.text:0000000000007800 loc_7800:                               ; CODE XREF: printf_parse+20E↓j
.text:0000000000007800                 cmp     bl, 4Ch ; 'L'
.text:0000000000007803                 jz      short loc_7840
.text:0000000000007805                 cmp     bl, 6Ch ; 'l'
.text:0000000000007808                 jz      short loc_7820
.text:000000000000780A                 cmp     bl, 6Ah ; 'j'
.text:000000000000780D                 jz      short loc_7820
.text:000000000000780F                 mov     edx, ebx
.text:0000000000007811                 and     edx, 0FFFFFFDFh
.text:0000000000007814                 cmp     dl, 5Ah ; 'Z'
.text:0000000000007817                 jz      short loc_7820
.text:0000000000007819                 cmp     bl, 74h ; 't'
.text:000000000000781C                 jnz     short loc_7848
.text:000000000000781E                 xchg    ax, ax
.text:0000000000007820
.text:0000000000007820 loc_7820:                               ; CODE XREF: printf_parse+1E8↑j
.text:0000000000007820                                         ; printf_parse+1ED↑j ...
.text:0000000000007820                 add     eax, 8
.text:0000000000007823
.text:0000000000007823 loc_7823:                               ; CODE XREF: printf_parse+21B↓j
.text:0000000000007823                                         ; printf_parse+223↓j
.text:0000000000007823                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007827
.text:0000000000007827 loc_7827:                               ; CODE XREF: printf_parse+1D5↑j
.text:0000000000007827                 add     rbp, 1
.text:000000000000782B                 cmp     bl, 68h ; 'h'
.text:000000000000782E                 jnz     short loc_7800
.text:0000000000007830                 mov     ecx, eax
.text:0000000000007832                 mov     edx, esi
.text:0000000000007834                 and     ecx, 1
.text:0000000000007837                 shl     edx, cl
.text:0000000000007839                 or      eax, edx
.text:000000000000783B                 jmp     short loc_7823
.text:000000000000783B ; ---------------------------------------------------------------------------
.text:000000000000783D                 align 20h
.text:0000000000007840
.text:0000000000007840 loc_7840:                               ; CODE XREF: printf_parse+1E3↑j
.text:0000000000007840                 or      eax, 4
.text:0000000000007843                 jmp     short loc_7823
.text:0000000000007843 ; ---------------------------------------------------------------------------
.text:0000000000007845                 align 8
.text:0000000000007848
.text:0000000000007848 loc_7848:                               ; CODE XREF: printf_parse+1FC↑j
.text:0000000000007848                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000000784B                 cmp     dl, 53h
.text:000000000000784E                 ja      def_7865        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007854                 lea     rcx, jpt_7865
.text:000000000000785B                 movzx   edx, dl
.text:000000000000785E                 movsxd  rdx, ds:(jpt_7865 - 992Ch)[rcx+rdx*4]
.text:0000000000007862                 add     rdx, rcx
.text:0000000000007865                 jmp     rdx             ; switch jump
.text:0000000000007867 ; ---------------------------------------------------------------------------
.text:0000000000007867
.text:0000000000007867 loc_7867:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007867                                         ; DATA XREF: .rodata:jpt_7865↓o
.text:0000000000007867                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000000786D                 mov     ebx, 73h ; 's'
.text:0000000000007872                 nop     word ptr [rax+rax+00h]
.text:0000000000007878
.text:0000000000007878 loc_7878:                               ; CODE XREF: printf_parse+705↓j
.text:0000000000007878                                         ; printf_parse+70D↓j ...
.text:0000000000007878                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000787C                 jz      loc_7F37
.text:0000000000007882                 mov     [r12+50h], r13
.text:0000000000007887
.text:0000000000007887 loc_7887:                               ; CODE XREF: printf_parse+939↓j
.text:0000000000007887                 cmp     r9, r13
.text:000000000000788A                 mov     rcx, [r15+8]
.text:000000000000788E                 jbe     loc_7EB0
.text:0000000000007894
.text:0000000000007894 loc_7894:                               ; CODE XREF: printf_parse+912↓j
.text:0000000000007894                 mov     rax, [r15]
.text:0000000000007897                 mov     rdx, rax
.text:000000000000789A                 shl     rdx, 5
.text:000000000000789E                 add     rdx, rcx
.text:00000000000078A1                 cmp     rax, r13
.text:00000000000078A4                 ja      short loc_78C6
.text:00000000000078A6                 db      2Eh
.text:00000000000078A6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000078B0
.text:00000000000078B0 loc_78B0:                               ; CODE XREF: printf_parse+2A1↓j
.text:00000000000078B0                 add     rax, 1
.text:00000000000078B4                 mov     dword ptr [rdx], 0
.text:00000000000078BA                 add     rdx, 20h ; ' '
.text:00000000000078BE                 cmp     rax, r13
.text:00000000000078C1                 jbe     short loc_78B0
.text:00000000000078C3                 mov     [r15], rax
.text:00000000000078C6
.text:00000000000078C6 loc_78C6:                               ; CODE XREF: printf_parse+284↑j
.text:00000000000078C6                 shl     r13, 5
.text:00000000000078CA                 lea     rax, [rcx+r13]
.text:00000000000078CE                 mov     edx, [rax]
.text:00000000000078D0                 test    edx, edx
.text:00000000000078D2                 jnz     loc_7EA3
.text:00000000000078D8                 mov     [rax], r11d
.text:00000000000078DB
.text:00000000000078DB loc_78DB:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000078DB                                         ; printf_parse+886↓j
.text:00000000000078DB                                         ; DATA XREF: ...
.text:00000000000078DB                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:00000000000078E0                 mov     rax, [r14]
.text:00000000000078E3                 mov     [r12+8], rbp
.text:00000000000078E8                 lea     rbx, [rax+1]
.text:00000000000078EC                 cmp     r10, rbx
.text:00000000000078EF                 mov     [r14], rbx
.text:00000000000078F2                 ja      loc_7980
.text:00000000000078F8                 test    r10, r10
.text:00000000000078FB                 js      loc_82A7
.text:0000000000007901                 add     r10, r10
.text:0000000000007904                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000000790E                 cmp     r10, rax
.text:0000000000007911                 ja      loc_82A7
.text:0000000000007917                 lea     rax, [r10+r10*4]
.text:000000000000791B                 mov     rdi, [r14+8]    ; ptr
.text:000000000000791F                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007924                 mov     [rsp+88h+var_48], r9
.text:0000000000007929                 mov     [rsp+88h+var_50], r10
.text:000000000000792E                 lea     rax, [r10+rax*2]
.text:0000000000007932                 mov     [rsp+88h+var_58], r8
.text:0000000000007937                 lea     rsi, ds:0[rax*8] ; size
.text:000000000000793F                 jz      loc_7FFD
.text:0000000000007945                 call    _realloc        ; PIC mode
.text:000000000000794A                 test    rax, rax
.text:000000000000794D                 mov     rcx, rax
.text:0000000000007950                 mov     r8, [rsp+88h+var_58]
.text:0000000000007955                 mov     r10, [rsp+88h+var_50]
.text:000000000000795A                 mov     r9, [rsp+88h+var_48]
.text:000000000000795F                 jz      loc_82A7
.text:0000000000007965                 mov     rax, [rsp+88h+var_60]
.text:000000000000796A                 cmp     rax, [r14+8]
.text:000000000000796E                 mov     rbx, [r14]
.text:0000000000007971                 jz      loc_8020
.text:0000000000007977
.text:0000000000007977 loc_7977:                               ; CODE XREF: printf_parse+A3D↓j
.text:0000000000007977                 mov     [r14+8], rcx
.text:000000000000797B                 jmp     loc_7698
.text:0000000000007980 ; ---------------------------------------------------------------------------
.text:0000000000007980
.text:0000000000007980 loc_7980:                               ; CODE XREF: printf_parse+2D2↑j
.text:0000000000007980                 mov     rcx, [r14+8]
.text:0000000000007984                 jmp     loc_7698
.text:0000000000007989 ; ---------------------------------------------------------------------------
.text:0000000000007989
.text:0000000000007989 loc_7989:                               ; CODE XREF: printf_parse+1B3↑j
.text:0000000000007989                 mov     rsi, [rsp+88h+var_78]
.text:000000000000798E                 mov     ecx, 1
.text:0000000000007993                 mov     [r12+18h], rbp
.text:0000000000007998                 mov     [r12+20h], rax
.text:000000000000799D                 test    rsi, rsi
.text:00000000000079A0                 cmovnz  rcx, rsi
.text:00000000000079A4                 mov     [rsp+88h+var_78], rcx
.text:00000000000079A9                 movzx   ecx, byte ptr [rbp+1]
.text:00000000000079AD                 lea     esi, [rcx-30h]
.text:00000000000079B0                 cmp     sil, 9
.text:00000000000079B4                 jbe     loc_7C95
.text:00000000000079BA
.text:00000000000079BA loc_79BA:                               ; CODE XREF: printf_parse+68D↓j
.text:00000000000079BA                 mov     rsi, [rsp+88h+var_68]
.text:00000000000079BF                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000079C3                 lea     rdx, [rsi+1]
.text:00000000000079C7                 mov     [r12+28h], rsi
.text:00000000000079CC                 jz      def_7865        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000079D2                 mov     rbx, [rsp+88h+var_68]
.text:00000000000079D7                 mov     rbp, rax
.text:00000000000079DA                 mov     [rsp+88h+var_68], rdx
.text:00000000000079DF
.text:00000000000079DF loc_79DF:                               ; CODE XREF: printf_parse+6F7↓j
.text:00000000000079DF                 cmp     r9, rbx
.text:00000000000079E2                 mov     rcx, [r15+8]
.text:00000000000079E6                 ja      loc_8062
.text:00000000000079EC                 add     r9, r9
.text:00000000000079EF                 lea     rax, [rbx+1]
.text:00000000000079F3                 cmp     r9, rbx
.text:00000000000079F6                 cmovbe  r9, rax
.text:00000000000079FA                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007A04                 cmp     r9, rax
.text:0000000000007A07                 ja      loc_82AB
.text:0000000000007A0D                 mov     rsi, r9
.text:0000000000007A10                 mov     [rsp+88h+var_48], r9
.text:0000000000007A15                 mov     [rsp+88h+var_50], r10
.text:0000000000007A1A                 shl     rsi, 5          ; size
.text:0000000000007A1E                 cmp     [rsp+88h+src], rcx
.text:0000000000007A23                 mov     [rsp+88h+var_58], r8
.text:0000000000007A28                 jz      loc_8141
.text:0000000000007A2E                 mov     rdi, rcx        ; ptr
.text:0000000000007A31                 call    _realloc        ; PIC mode
.text:0000000000007A36                 mov     rdx, [r15+8]
.text:0000000000007A3A                 mov     r8, [rsp+88h+var_58]
.text:0000000000007A3F                 mov     rcx, rax
.text:0000000000007A42                 mov     r10, [rsp+88h+var_50]
.text:0000000000007A47                 mov     r9, [rsp+88h+var_48]
.text:0000000000007A4C
.text:0000000000007A4C loc_7A4C:                               ; CODE XREF: printf_parse+B40↓j
.text:0000000000007A4C                 test    rcx, rcx
.text:0000000000007A4F                 jz      loc_8307
.text:0000000000007A55                 cmp     [rsp+88h+src], rdx
.text:0000000000007A5A                 mov     rax, [r15]
.text:0000000000007A5D                 jz      loc_821B
.text:0000000000007A63
.text:0000000000007A63 loc_7A63:                               ; CODE XREF: printf_parse+C33↓j
.text:0000000000007A63                 mov     [r15+8], rcx
.text:0000000000007A67
.text:0000000000007A67 loc_7A67:                               ; CODE XREF: printf_parse+A45↓j
.text:0000000000007A67                 mov     rdx, rax
.text:0000000000007A6A                 shl     rdx, 5
.text:0000000000007A6E                 add     rdx, rcx
.text:0000000000007A71                 cmp     rax, rbx
.text:0000000000007A74                 ja      short loc_7A96
.text:0000000000007A76                 db      2Eh
.text:0000000000007A76                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007A80
.text:0000000000007A80 loc_7A80:                               ; CODE XREF: printf_parse+471↓j
.text:0000000000007A80                 add     rax, 1
.text:0000000000007A84                 mov     dword ptr [rdx], 0
.text:0000000000007A8A                 add     rdx, 20h ; ' '
.text:0000000000007A8E                 cmp     rax, rbx
.text:0000000000007A91                 jbe     short loc_7A80
.text:0000000000007A93                 mov     [r15], rax
.text:0000000000007A96
.text:0000000000007A96 loc_7A96:                               ; CODE XREF: printf_parse+454↑j
.text:0000000000007A96                 shl     rbx, 5
.text:0000000000007A9A                 lea     rax, [rcx+rbx]
.text:0000000000007A9E                 mov     edx, [rax]
.text:0000000000007AA0                 test    edx, edx
.text:0000000000007AA2                 jnz     loc_7F7B
.text:0000000000007AA8                 mov     dword ptr [rax], 5
.text:0000000000007AAE                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007AB2                 lea     rdx, [rbp+1]
.text:0000000000007AB6                 cmp     bl, 2Eh ; '.'
.text:0000000000007AB9                 jnz     loc_77EE
.text:0000000000007ABF
.text:0000000000007ABF loc_7ABF:                               ; CODE XREF: printf_parse+1C8↑j
.text:0000000000007ABF                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:0000000000007AC3                 mov     [r12+30h], rbp
.text:0000000000007AC8                 jnz     loc_7C4E
.text:0000000000007ACE                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007AD3                 lea     r11, [rbp+2]
.text:0000000000007AD7                 mov     eax, 2
.text:0000000000007ADC                 mov     [r12+38h], r11
.text:0000000000007AE1                 cmp     rsi, 2
.text:0000000000007AE5                 cmovnb  rax, rsi
.text:0000000000007AE9                 mov     [rsp+88h+var_70], rax
.text:0000000000007AEE                 movsx   eax, byte ptr [rbp+2]
.text:0000000000007AF2                 lea     edx, [rax-30h]
.text:0000000000007AF5                 cmp     dl, 9
.text:0000000000007AF8                 jbe     loc_818C
.text:0000000000007AFE
.text:0000000000007AFE loc_7AFE:                               ; CODE XREF: printf_parse+B82↓j
.text:0000000000007AFE                 mov     rbx, [r12+40h]
.text:0000000000007B03                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007B07                 jz      loc_8165
.text:0000000000007B0D
.text:0000000000007B0D loc_7B0D:                               ; CODE XREF: printf_parse+B67↓j
.text:0000000000007B0D                                         ; printf_parse+C59↓j
.text:0000000000007B0D                 cmp     r9, rbx
.text:0000000000007B10                 mov     rcx, [r15+8]
.text:0000000000007B14                 jbe     loc_807F
.text:0000000000007B1A                 mov     rax, [r15]
.text:0000000000007B1D
.text:0000000000007B1D loc_7B1D:                               ; CODE XREF: printf_parse+AE4↓j
.text:0000000000007B1D                 mov     rdx, rax
.text:0000000000007B20                 shl     rdx, 5
.text:0000000000007B24                 add     rdx, rcx
.text:0000000000007B27                 cmp     rax, rbx
.text:0000000000007B2A                 ja      short loc_7B46
.text:0000000000007B2C                 nop     dword ptr [rax+00h]
.text:0000000000007B30
.text:0000000000007B30 loc_7B30:                               ; CODE XREF: printf_parse+521↓j
.text:0000000000007B30                 add     rax, 1
.text:0000000000007B34                 mov     dword ptr [rdx], 0
.text:0000000000007B3A                 add     rdx, 20h ; ' '
.text:0000000000007B3E                 cmp     rax, rbx
.text:0000000000007B41                 jbe     short loc_7B30
.text:0000000000007B43                 mov     [r15], rax
.text:0000000000007B46
.text:0000000000007B46 loc_7B46:                               ; CODE XREF: printf_parse+50A↑j
.text:0000000000007B46                 shl     rbx, 5
.text:0000000000007B4A                 lea     rax, [rcx+rbx]
.text:0000000000007B4E                 mov     edx, [rax]
.text:0000000000007B50                 test    edx, edx
.text:0000000000007B52                 jnz     loc_806A
.text:0000000000007B58                 mov     dword ptr [rax], 5
.text:0000000000007B5E                 mov     rbp, r11
.text:0000000000007B61                 movzx   ebx, byte ptr [r11]
.text:0000000000007B65                 jmp     loc_77EE
.text:0000000000007B6A ; ---------------------------------------------------------------------------
.text:0000000000007B6A
.text:0000000000007B6A loc_7B6A:                               ; CODE XREF: printf_parse+112↑j
.text:0000000000007B6A                 mov     rax, rbp
.text:0000000000007B6D                 nop     dword ptr [rax]
.text:0000000000007B70
.text:0000000000007B70 loc_7B70:                               ; CODE XREF: printf_parse+55D↓j
.text:0000000000007B70                 add     rax, 1
.text:0000000000007B74                 movzx   edx, byte ptr [rax]
.text:0000000000007B77                 lea     ecx, [rdx-30h]
.text:0000000000007B7A                 cmp     cl, 9
.text:0000000000007B7D                 jbe     short loc_7B70
.text:0000000000007B7F                 cmp     dl, 24h ; '$'
.text:0000000000007B82                 mov     r13, r8
.text:0000000000007B85                 jnz     loc_776E
.text:0000000000007B8B                 xor     edx, edx
.text:0000000000007B8D
.text:0000000000007B8D loc_7B8D:                               ; CODE XREF: printf_parse+5B7↓j
.text:0000000000007B8D                 movsx   eax, bl
.text:0000000000007B90                 mov     rdi, 1999999999999999h
.text:0000000000007B9A                 mov     rsi, r8
.text:0000000000007B9D                 sub     eax, 30h ; '0'
.text:0000000000007BA0                 cmp     rdx, rdi
.text:0000000000007BA3                 cdqe
.text:0000000000007BA5                 ja      short loc_7BAE
.text:0000000000007BA7                 lea     rsi, [rdx+rdx*4]
.text:0000000000007BAB                 add     rsi, rsi
.text:0000000000007BAE
.text:0000000000007BAE loc_7BAE:                               ; CODE XREF: printf_parse+585↑j
.text:0000000000007BAE                 mov     rcx, rbp
.text:0000000000007BB1
.text:0000000000007BB1 loc_7BB1:                               ; CODE XREF: printf_parse+956↓j
.text:0000000000007BB1                 add     rax, rsi
.text:0000000000007BB4                 movzx   ebx, byte ptr [rbp+1]
.text:0000000000007BB8                 setb    sil
.text:0000000000007BBC                 add     rbp, 1
.text:0000000000007BC0                 mov     rdx, rax
.text:0000000000007BC3                 movzx   esi, sil
.text:0000000000007BC7                 test    rsi, rsi
.text:0000000000007BCA                 lea     edi, [rbx-30h]
.text:0000000000007BCD                 jnz     loc_7F5E
.text:0000000000007BD3                 cmp     dil, 9
.text:0000000000007BD7                 jbe     short loc_7B8D
.text:0000000000007BD9                 mov     r13, rax
.text:0000000000007BDC                 sub     r13, 1
.text:0000000000007BE0                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:0000000000007BE4                 ja      def_7865        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007BEA                 lea     rbp, [rcx+2]
.text:0000000000007BEE                 movzx   ebx, byte ptr [rcx+2]
.text:0000000000007BF2                 jmp     loc_776E
.text:0000000000007BF7 ; ---------------------------------------------------------------------------
.text:0000000000007BF7
.text:0000000000007BF7 loc_7BF7:                               ; CODE XREF: printf_parse+1BF↑j
.text:0000000000007BF7                 mov     [r12+18h], rbp
.text:0000000000007BFC                 movzx   edi, byte ptr [rbp+0]
.text:0000000000007C00                 mov     rsi, rbp
.text:0000000000007C03                 lea     ecx, [rdi-30h]
.text:0000000000007C06                 cmp     cl, 9
.text:0000000000007C09                 jbe     short loc_7C17
.text:0000000000007C0B                 jmp     short loc_7C40
.text:0000000000007C0B ; ---------------------------------------------------------------------------
.text:0000000000007C0D                 align 10h
.text:0000000000007C10
.text:0000000000007C10 loc_7C10:                               ; CODE XREF: printf_parse+600↓j
.text:0000000000007C10                 mov     rbp, rax
.text:0000000000007C13                 add     rax, 1
.text:0000000000007C17
.text:0000000000007C17 loc_7C17:                               ; CODE XREF: printf_parse+5E9↑j
.text:0000000000007C17                 movzx   edi, byte ptr [rax]
.text:0000000000007C1A                 lea     edx, [rdi-30h]
.text:0000000000007C1D                 cmp     dl, 9
.text:0000000000007C20                 jbe     short loc_7C10
.text:0000000000007C22                 mov     rcx, rax
.text:0000000000007C25                 lea     rdx, [rbp+2]
.text:0000000000007C29                 mov     rbp, rax
.text:0000000000007C2C                 sub     rcx, rsi
.text:0000000000007C2F                 mov     rsi, [rsp+88h+var_78]
.text:0000000000007C34                 cmp     rsi, rcx
.text:0000000000007C37                 cmovnb  rcx, rsi
.text:0000000000007C3B                 mov     [rsp+88h+var_78], rcx
.text:0000000000007C40
.text:0000000000007C40 loc_7C40:                               ; CODE XREF: printf_parse+5EB↑j
.text:0000000000007C40                 mov     [r12+20h], rbp
.text:0000000000007C45                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007C49                 jmp     loc_77E5
.text:0000000000007C4E ; ---------------------------------------------------------------------------
.text:0000000000007C4E
.text:0000000000007C4E loc_7C4E:                               ; CODE XREF: printf_parse+4A8↑j
.text:0000000000007C4E                 movzx   eax, byte ptr [rbp+1]
.text:0000000000007C52                 sub     eax, 30h ; '0'
.text:0000000000007C55                 cmp     al, 9
.text:0000000000007C57                 ja      short loc_7C6E
.text:0000000000007C59                 nop     dword ptr [rax+00000000h]
.text:0000000000007C60
.text:0000000000007C60 loc_7C60:                               ; CODE XREF: printf_parse+64C↓j
.text:0000000000007C60                 add     rdx, 1
.text:0000000000007C64                 movzx   eax, byte ptr [rdx]
.text:0000000000007C67                 sub     eax, 30h ; '0'
.text:0000000000007C6A                 cmp     al, 9
.text:0000000000007C6C                 jbe     short loc_7C60
.text:0000000000007C6E
.text:0000000000007C6E loc_7C6E:                               ; CODE XREF: printf_parse+637↑j
.text:0000000000007C6E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007C73                 mov     rax, rdx
.text:0000000000007C76                 mov     [r12+38h], rdx
.text:0000000000007C7B                 sub     rax, rbp
.text:0000000000007C7E                 movzx   ebx, byte ptr [rdx]
.text:0000000000007C81                 mov     rbp, rdx
.text:0000000000007C84                 cmp     rsi, rax
.text:0000000000007C87                 cmovnb  rax, rsi
.text:0000000000007C8B                 mov     [rsp+88h+var_70], rax
.text:0000000000007C90                 jmp     loc_77EE
.text:0000000000007C95 ; ---------------------------------------------------------------------------
.text:0000000000007C95
.text:0000000000007C95 loc_7C95:                               ; CODE XREF: printf_parse+394↑j
.text:0000000000007C95                 mov     rsi, rax
.text:0000000000007C98
.text:0000000000007C98 loc_7C98:                               ; CODE XREF: printf_parse+687↓j
.text:0000000000007C98                 add     rsi, 1
.text:0000000000007C9C                 movzx   edi, byte ptr [rsi]
.text:0000000000007C9F                 lea     r11d, [rdi-30h]
.text:0000000000007CA3                 cmp     r11b, 9
.text:0000000000007CA7                 jbe     short loc_7C98
.text:0000000000007CA9                 cmp     dil, 24h ; '$'
.text:0000000000007CAD                 jnz     loc_79BA
.text:0000000000007CB3                 xor     esi, esi
.text:0000000000007CB5
.text:0000000000007CB5 loc_7CB5:                               ; CODE XREF: printf_parse+6DE↓j
.text:0000000000007CB5                 movsx   eax, cl
.text:0000000000007CB8                 mov     rdi, 1999999999999999h
.text:0000000000007CC2                 mov     rcx, r8
.text:0000000000007CC5                 sub     eax, 30h ; '0'
.text:0000000000007CC8                 cmp     rsi, rdi
.text:0000000000007CCB                 cdqe
.text:0000000000007CCD                 ja      short loc_7CD6
.text:0000000000007CCF                 lea     rcx, [rsi+rsi*4]
.text:0000000000007CD3                 add     rcx, rcx
.text:0000000000007CD6
.text:0000000000007CD6 loc_7CD6:                               ; CODE XREF: printf_parse+6AD↑j
.text:0000000000007CD6                 mov     rbp, rdx
.text:0000000000007CD9
.text:0000000000007CD9 loc_7CD9:                               ; CODE XREF: printf_parse+BF6↓j
.text:0000000000007CD9                 xor     r11d, r11d
.text:0000000000007CDC                 add     rax, rcx
.text:0000000000007CDF                 movzx   ecx, byte ptr [rdx+1]
.text:0000000000007CE3                 setb    r11b
.text:0000000000007CE7                 add     rdx, 1
.text:0000000000007CEB                 mov     rsi, rax
.text:0000000000007CEE                 test    r11, r11
.text:0000000000007CF1                 lea     edi, [rcx-30h]
.text:0000000000007CF4                 jnz     loc_81FE
.text:0000000000007CFA                 cmp     dil, 9
.text:0000000000007CFE                 jbe     short loc_7CB5
.text:0000000000007D00                 lea     rbx, [rax-1]
.text:0000000000007D04                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000007D08                 ja      def_7865        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007D0E                 mov     [r12+28h], rbx
.text:0000000000007D13                 add     rbp, 2
.text:0000000000007D17                 jmp     loc_79DF
.text:0000000000007D1C ; ---------------------------------------------------------------------------
.text:0000000000007D1C
.text:0000000000007D1C loc_7D1C:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007D1C                                         ; DATA XREF: .rodata:jpt_7865↓o
.text:0000000000007D1C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:0000000000007D1F                 mov     r11d, 16h
.text:0000000000007D25                 jg      loc_7878
.text:0000000000007D2B                 test    al, 4
.text:0000000000007D2D                 jnz     loc_7878
.text:0000000000007D33                 cmp     eax, 7
.text:0000000000007D36                 mov     r11d, 15h
.text:0000000000007D3C                 jg      loc_7878
.text:0000000000007D42                 test    al, 2
.text:0000000000007D44                 mov     r11d, 12h
.text:0000000000007D4A                 jnz     loc_7878
.text:0000000000007D50                 xor     r11d, r11d
.text:0000000000007D53                 test    al, 1
.text:0000000000007D55                 setz    r11b
.text:0000000000007D59                 add     r11d, 13h
.text:0000000000007D5D                 jmp     loc_7878
.text:0000000000007D5D ; ---------------------------------------------------------------------------
.text:0000000000007D62                 align 8
.text:0000000000007D68
.text:0000000000007D68 loc_7D68:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007D68                                         ; DATA XREF: .rodata:jpt_7865↓o
.text:0000000000007D68                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:0000000000007D6B                 cmp     eax, 7
.text:0000000000007D6E                 setnle  r11b
.text:0000000000007D72                 add     r11d, 0Dh
.text:0000000000007D76                 jmp     loc_7878
.text:0000000000007D7B ; ---------------------------------------------------------------------------
.text:0000000000007D7B
.text:0000000000007D7B loc_7D7B:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007D7B                                         ; DATA XREF: .rodata:jpt_7865↓o
.text:0000000000007D7B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:0000000000007D7E                 mov     r11d, 9
.text:0000000000007D84                 jg      loc_7878
.text:0000000000007D8A                 test    al, 4
.text:0000000000007D8C                 jnz     loc_7878
.text:0000000000007D92                 cmp     eax, 7
.text:0000000000007D95                 mov     r11d, 7
.text:0000000000007D9B                 jg      loc_7878
.text:0000000000007DA1                 test    al, 2
.text:0000000000007DA3                 mov     r11d, 1
.text:0000000000007DA9                 jnz     loc_7878
.text:0000000000007DAF                 and     eax, 1
.text:0000000000007DB2                 cmp     eax, 1
.text:0000000000007DB5                 sbb     r11d, r11d
.text:0000000000007DB8                 and     r11d, 2
.text:0000000000007DBC                 add     r11d, 3
.text:0000000000007DC0                 jmp     loc_7878
.text:0000000000007DC0 ; ---------------------------------------------------------------------------
.text:0000000000007DC5                 align 8
.text:0000000000007DC8
.text:0000000000007DC8 loc_7DC8:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007DC8                                         ; DATA XREF: .rodata:jpt_7865↓o
.text:0000000000007DC8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:0000000000007DCB                 cmp     eax, 7
.text:0000000000007DCE                 setnle  r11b
.text:0000000000007DD2                 add     r11d, 0Fh
.text:0000000000007DD6                 jmp     loc_7878
.text:0000000000007DDB ; ---------------------------------------------------------------------------
.text:0000000000007DDB
.text:0000000000007DDB loc_7DDB:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007DDB                                         ; DATA XREF: .rodata:jpt_7865↓o
.text:0000000000007DDB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:0000000000007DDE                 mov     r11d, 0Ch
.text:0000000000007DE4                 jg      loc_7878
.text:0000000000007DEA                 xor     r11d, r11d
.text:0000000000007DED                 test    al, 4
.text:0000000000007DEF                 setnz   r11b
.text:0000000000007DF3                 add     r11d, 0Bh
.text:0000000000007DF7                 jmp     loc_7878
.text:0000000000007DFC ; ---------------------------------------------------------------------------
.text:0000000000007DFC
.text:0000000000007DFC loc_7DFC:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007DFC                                         ; DATA XREF: .rodata:jpt_7865↓o
.text:0000000000007DFC                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:0000000000007E02                 mov     ebx, 63h ; 'c'
.text:0000000000007E07                 jmp     loc_7878
.text:0000000000007E0C ; ---------------------------------------------------------------------------
.text:0000000000007E0C
.text:0000000000007E0C loc_7E0C:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007E0C                                         ; DATA XREF: .rodata:jpt_7865↓o
.text:0000000000007E0C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:0000000000007E0F                 mov     r11d, 0Ah
.text:0000000000007E15                 jg      loc_7878
.text:0000000000007E1B                 test    al, 4
.text:0000000000007E1D                 jnz     loc_7878
.text:0000000000007E23                 cmp     eax, 7
.text:0000000000007E26                 mov     r11d, 8
.text:0000000000007E2C                 jg      loc_7878
.text:0000000000007E32                 test    al, 2
.text:0000000000007E34                 mov     r11d, 2
.text:0000000000007E3A                 jnz     loc_7878
.text:0000000000007E40                 and     eax, 1
.text:0000000000007E43                 cmp     eax, 1
.text:0000000000007E46                 sbb     r11d, r11d
.text:0000000000007E49                 and     r11d, 2
.text:0000000000007E4D                 add     r11d, 4
.text:0000000000007E51                 jmp     loc_7878
.text:0000000000007E51 ; ---------------------------------------------------------------------------
.text:0000000000007E56                 align 20h
.text:0000000000007E60
.text:0000000000007E60 loc_7E60:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007E60                                         ; DATA XREF: .rodata:jpt_7865↓o
.text:0000000000007E60                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:0000000000007E66                 jmp     loc_7878
.text:0000000000007E6B ; ---------------------------------------------------------------------------
.text:0000000000007E6B
.text:0000000000007E6B def_7865:                               ; CODE XREF: printf_parse+22E↑j
.text:0000000000007E6B                                         ; printf_parse+245↑j ...
.text:0000000000007E6B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007E6F
.text:0000000000007E6F loc_7E6F:                               ; CODE XREF: printf_parse+88C↓j
.text:0000000000007E6F                                         ; printf_parse+95E↓j ...
.text:0000000000007E6F                 cmp     [rsp+88h+src], rcx
.text:0000000000007E74                 jz      short loc_7E7E
.text:0000000000007E76                 mov     rdi, rcx        ; ptr
.text:0000000000007E79                 call    _free           ; PIC mode
.text:0000000000007E7E
.text:0000000000007E7E loc_7E7E:                               ; CODE XREF: printf_parse+854↑j
.text:0000000000007E7E                 mov     rdi, [r14+8]    ; ptr
.text:0000000000007E82                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007E87                 jz      short loc_7E8E
.text:0000000000007E89                 call    _free           ; PIC mode
.text:0000000000007E8E
.text:0000000000007E8E loc_7E8E:                               ; CODE XREF: printf_parse+867↑j
.text:0000000000007E8E                 call    ___errno_location ; PIC mode
.text:0000000000007E93                 mov     dword ptr [rax], 16h
.text:0000000000007E99                 mov     eax, 0FFFFFFFFh
.text:0000000000007E9E                 jmp     loc_76C2
.text:0000000000007EA3 ; ---------------------------------------------------------------------------
.text:0000000000007EA3
.text:0000000000007EA3 loc_7EA3:                               ; CODE XREF: printf_parse+2B2↑j
.text:0000000000007EA3                 cmp     edx, r11d
.text:0000000000007EA6                 jz      loc_78DB        ; jumptable 0000000000000245 case 37
.text:0000000000007EAC                 jmp     short loc_7E6F
.text:0000000000007EAC ; ---------------------------------------------------------------------------
.text:0000000000007EAE                 align 10h
.text:0000000000007EB0
.text:0000000000007EB0 loc_7EB0:                               ; CODE XREF: printf_parse+26E↑j
.text:0000000000007EB0                 add     r9, r9
.text:0000000000007EB3                 lea     rax, [r13+1]
.text:0000000000007EB7                 cmp     r9, r13
.text:0000000000007EBA                 cmovbe  r9, rax
.text:0000000000007EBE                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007EC8                 cmp     r9, rax
.text:0000000000007ECB                 ja      loc_82AB
.text:0000000000007ED1                 mov     rsi, r9
.text:0000000000007ED4                 mov     [rsp+88h+var_40], r9
.text:0000000000007ED9                 mov     [rsp+88h+var_48], r10
.text:0000000000007EDE                 shl     rsi, 5          ; size
.text:0000000000007EE2                 cmp     [rsp+88h+src], rcx
.text:0000000000007EE7                 mov     [rsp+88h+var_50], r8
.text:0000000000007EEC                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000007EF1                 jz      loc_7F91
.text:0000000000007EF7                 mov     rdi, rcx        ; ptr
.text:0000000000007EFA                 call    _realloc        ; PIC mode
.text:0000000000007EFF                 test    rax, rax
.text:0000000000007F02                 mov     rcx, rax
.text:0000000000007F05                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007F0A                 mov     r8, [rsp+88h+var_50]
.text:0000000000007F0F                 mov     r10, [rsp+88h+var_48]
.text:0000000000007F14                 mov     r9, [rsp+88h+var_40]
.text:0000000000007F19                 jz      loc_82A7
.text:0000000000007F1F                 mov     rax, [rsp+88h+src]
.text:0000000000007F24                 cmp     rax, [r15+8]
.text:0000000000007F28                 jz      loc_7FB9
.text:0000000000007F2E
.text:0000000000007F2E loc_7F2E:                               ; CODE XREF: printf_parse+9D8↓j
.text:0000000000007F2E                 mov     [r15+8], rcx
.text:0000000000007F32                 jmp     loc_7894
.text:0000000000007F37 ; ---------------------------------------------------------------------------
.text:0000000000007F37
.text:0000000000007F37 loc_7F37:                               ; CODE XREF: printf_parse+25C↑j
.text:0000000000007F37                 mov     rsi, [rsp+88h+var_68]
.text:0000000000007F3C                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007F40                 lea     rax, [rsi+1]
.text:0000000000007F44                 mov     [r12+50h], rsi
.text:0000000000007F49                 jz      def_7865        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007F4F                 mov     r13, [rsp+88h+var_68]
.text:0000000000007F54                 mov     [rsp+88h+var_68], rax
.text:0000000000007F59                 jmp     loc_7887
.text:0000000000007F5E ; ---------------------------------------------------------------------------
.text:0000000000007F5E
.text:0000000000007F5E loc_7F5E:                               ; CODE XREF: printf_parse+5AD↑j
.text:0000000000007F5E                 cmp     dil, 9
.text:0000000000007F62                 ja      def_7865        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007F68                 movsx   eax, bl
.text:0000000000007F6B                 mov     rsi, r8
.text:0000000000007F6E                 mov     rcx, rbp
.text:0000000000007F71                 sub     eax, 30h ; '0'
.text:0000000000007F74                 cdqe
.text:0000000000007F76                 jmp     loc_7BB1
.text:0000000000007F7B ; ---------------------------------------------------------------------------
.text:0000000000007F7B
.text:0000000000007F7B loc_7F7B:                               ; CODE XREF: printf_parse+482↑j
.text:0000000000007F7B                 cmp     edx, 5
.text:0000000000007F7E                 jnz     loc_7E6F
.text:0000000000007F84                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007F88                 lea     rdx, [rbp+1]
.text:0000000000007F8C                 jmp     loc_77E5
.text:0000000000007F91 ; ---------------------------------------------------------------------------
.text:0000000000007F91
.text:0000000000007F91 loc_7F91:                               ; CODE XREF: printf_parse+8D1↑j
.text:0000000000007F91                 mov     rdi, rsi        ; size
.text:0000000000007F94                 call    _malloc         ; PIC mode
.text:0000000000007F99                 test    rax, rax
.text:0000000000007F9C                 mov     rcx, rax
.text:0000000000007F9F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007FA4                 mov     r8, [rsp+88h+var_50]
.text:0000000000007FA9                 mov     r10, [rsp+88h+var_48]
.text:0000000000007FAE                 mov     r9, [rsp+88h+var_40]
.text:0000000000007FB3                 jz      loc_811C
.text:0000000000007FB9
.text:0000000000007FB9 loc_7FB9:                               ; CODE XREF: printf_parse+908↑j
.text:0000000000007FB9                 mov     rdx, [r15]
.text:0000000000007FBC                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000007FC1                 mov     rdi, rcx        ; dest
.text:0000000000007FC4                 mov     [rsp+88h+var_40], r9
.text:0000000000007FC9                 mov     [rsp+88h+var_48], r10
.text:0000000000007FCE                 mov     [rsp+88h+var_50], r8
.text:0000000000007FD3                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000007FD8                 shl     rdx, 5          ; n
.text:0000000000007FDC                 call    _memcpy         ; PIC mode
.text:0000000000007FE1                 mov     r9, [rsp+88h+var_40]
.text:0000000000007FE6                 mov     r10, [rsp+88h+var_48]
.text:0000000000007FEB                 mov     rcx, rax
.text:0000000000007FEE                 mov     r8, [rsp+88h+var_50]
.text:0000000000007FF3                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007FF8                 jmp     loc_7F2E
.text:0000000000007FFD ; ---------------------------------------------------------------------------
.text:0000000000007FFD
.text:0000000000007FFD loc_7FFD:                               ; CODE XREF: printf_parse+31F↑j
.text:0000000000007FFD                 mov     rdi, rsi        ; size
.text:0000000000008000                 call    _malloc         ; PIC mode
.text:0000000000008005                 test    rax, rax
.text:0000000000008008                 mov     rcx, rax
.text:000000000000800B                 mov     r8, [rsp+88h+var_58]
.text:0000000000008010                 mov     r10, [rsp+88h+var_50]
.text:0000000000008015                 mov     r9, [rsp+88h+var_48]
.text:000000000000801A                 jz      loc_8109
.text:0000000000008020
.text:0000000000008020 loc_8020:                               ; CODE XREF: printf_parse+351↑j
.text:0000000000008020                 lea     rax, [rbx+rbx*4]
.text:0000000000008024                 mov     rsi, [rsp+88h+var_60] ; src
.text:0000000000008029                 mov     rdi, rcx        ; dest
.text:000000000000802C                 mov     [rsp+88h+var_48], r9
.text:0000000000008031                 mov     [rsp+88h+var_50], r10
.text:0000000000008036                 lea     rdx, [rbx+rax*2]
.text:000000000000803A                 mov     [rsp+88h+var_58], r8
.text:000000000000803F                 shl     rdx, 3          ; n
.text:0000000000008043                 call    _memcpy         ; PIC mode
.text:0000000000008048                 mov     rbx, [r14]
.text:000000000000804B                 mov     rcx, rax
.text:000000000000804E                 mov     r9, [rsp+88h+var_48]
.text:0000000000008053                 mov     r10, [rsp+88h+var_50]
.text:0000000000008058                 mov     r8, [rsp+88h+var_58]
.text:000000000000805D                 jmp     loc_7977
.text:0000000000008062 ; ---------------------------------------------------------------------------
.text:0000000000008062
.text:0000000000008062 loc_8062:                               ; CODE XREF: printf_parse+3C6↑j
.text:0000000000008062                 mov     rax, [r15]
.text:0000000000008065                 jmp     loc_7A67
.text:000000000000806A ; ---------------------------------------------------------------------------
.text:000000000000806A
.text:000000000000806A loc_806A:                               ; CODE XREF: printf_parse+532↑j
.text:000000000000806A                 cmp     edx, 5
.text:000000000000806D                 jnz     loc_7E6F
.text:0000000000008073                 movzx   ebx, byte ptr [r11]
.text:0000000000008077                 mov     rbp, r11
.text:000000000000807A                 jmp     loc_77EE
.text:000000000000807F ; ---------------------------------------------------------------------------
.text:000000000000807F
.text:000000000000807F loc_807F:                               ; CODE XREF: printf_parse+4F4↑j
.text:000000000000807F                 add     r9, r9
.text:0000000000008082                 lea     rax, [rbx+1]
.text:0000000000008086                 cmp     r9, rbx
.text:0000000000008089                 cmovbe  r9, rax
.text:000000000000808D                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000008097                 cmp     r9, rax
.text:000000000000809A                 ja      loc_82AB
.text:00000000000080A0                 mov     rsi, r9
.text:00000000000080A3                 mov     [rsp+88h+var_40], r9
.text:00000000000080A8                 mov     [rsp+88h+var_48], r10
.text:00000000000080AD                 shl     rsi, 5          ; size
.text:00000000000080B1                 cmp     [rsp+88h+src], rcx
.text:00000000000080B6                 mov     [rsp+88h+var_50], r8
.text:00000000000080BB                 mov     [rsp+88h+var_58], r11
.text:00000000000080C0                 jz      loc_827E
.text:00000000000080C6                 mov     rdi, rcx        ; ptr
.text:00000000000080C9                 call    _realloc        ; PIC mode
.text:00000000000080CE                 mov     rdx, [r15+8]
.text:00000000000080D2                 mov     r11, [rsp+88h+var_58]
.text:00000000000080D7                 mov     rcx, rax
.text:00000000000080DA                 mov     r8, [rsp+88h+var_50]
.text:00000000000080DF                 mov     r10, [rsp+88h+var_48]
.text:00000000000080E4                 mov     r9, [rsp+88h+var_40]
.text:00000000000080E9
.text:00000000000080E9 loc_80E9:                               ; CODE XREF: printf_parse+C82↓j
.text:00000000000080E9                 test    rcx, rcx
.text:00000000000080EC                 jz      loc_8307
.text:00000000000080F2                 cmp     [rsp+88h+src], rdx
.text:00000000000080F7                 mov     rax, [r15]
.text:00000000000080FA                 jz      loc_82C0
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: printf_parse+CE2↓j
.text:0000000000008100                 mov     [r15+8], rcx
.text:0000000000008104                 jmp     loc_7B1D
.text:0000000000008109 ; ---------------------------------------------------------------------------
.text:0000000000008109
.text:0000000000008109 loc_8109:                               ; CODE XREF: printf_parse+9FA↑j
.text:0000000000008109                 mov     rcx, [r15+8]
.text:000000000000810D                 cmp     [rsp+88h+src], rcx
.text:0000000000008112                 jz      short loc_812C
.text:0000000000008114
.text:0000000000008114 loc_8114:                               ; CODE XREF: printf_parse+C90↓j
.text:0000000000008114                 mov     rdi, rcx        ; ptr
.text:0000000000008117                 call    _free           ; PIC mode
.text:000000000000811C
.text:000000000000811C loc_811C:                               ; CODE XREF: printf_parse+993↑j
.text:000000000000811C                                         ; printf_parse+C96↓j
.text:000000000000811C                 mov     rdi, [r14+8]    ; ptr
.text:0000000000008120                 cmp     [rsp+88h+var_60], rdi
.text:0000000000008125                 jz      short loc_812C
.text:0000000000008127                 call    _free           ; PIC mode
.text:000000000000812C
.text:000000000000812C loc_812C:                               ; CODE XREF: printf_parse+AF2↑j
.text:000000000000812C                                         ; printf_parse+B05↑j
.text:000000000000812C                 call    ___errno_location ; PIC mode
.text:0000000000008131                 mov     dword ptr [rax], 0Ch
.text:0000000000008137                 mov     eax, 0FFFFFFFFh
.text:000000000000813C                 jmp     loc_76C2
.text:0000000000008141 ; ---------------------------------------------------------------------------
.text:0000000000008141
.text:0000000000008141 loc_8141:                               ; CODE XREF: printf_parse+408↑j
.text:0000000000008141                 mov     rdi, rsi        ; size
.text:0000000000008144                 call    _malloc         ; PIC mode
.text:0000000000008149                 mov     rdx, [rsp+88h+src]
.text:000000000000814E                 mov     rcx, rax
.text:0000000000008151                 mov     r9, [rsp+88h+var_48]
.text:0000000000008156                 mov     r10, [rsp+88h+var_50]
.text:000000000000815B                 mov     r8, [rsp+88h+var_58]
.text:0000000000008160                 jmp     loc_7A4C
.text:0000000000008165 ; ---------------------------------------------------------------------------
.text:0000000000008165
.text:0000000000008165 loc_8165:                               ; CODE XREF: printf_parse+4E7↑j
.text:0000000000008165                 mov     rsi, [rsp+88h+var_68]
.text:000000000000816A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000816E                 lea     rax, [rsi+1]
.text:0000000000008172                 mov     [r12+40h], rsi
.text:0000000000008177                 jz      def_7865        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000817D                 mov     rbx, [rsp+88h+var_68]
.text:0000000000008182                 mov     [rsp+88h+var_68], rax
.text:0000000000008187                 jmp     loc_7B0D
.text:000000000000818C ; ---------------------------------------------------------------------------
.text:000000000000818C
.text:000000000000818C loc_818C:                               ; CODE XREF: printf_parse+4D8↑j
.text:000000000000818C                 mov     rdx, r11
.text:000000000000818F
.text:000000000000818F loc_818F:                               ; CODE XREF: printf_parse+B7D↓j
.text:000000000000818F                 add     rdx, 1
.text:0000000000008193                 movzx   ecx, byte ptr [rdx]
.text:0000000000008196                 lea     esi, [rcx-30h]
.text:0000000000008199                 cmp     sil, 9
.text:000000000000819D                 jbe     short loc_818F
.text:000000000000819F                 cmp     cl, 24h ; '$'
.text:00000000000081A2                 jnz     loc_7AFE
.text:00000000000081A8                 xor     ecx, ecx
.text:00000000000081AA
.text:00000000000081AA loc_81AA:                               ; CODE XREF: printf_parse+C3C↓j
.text:00000000000081AA                 mov     rsi, 1999999999999999h
.text:00000000000081B4                 sub     eax, 30h ; '0'
.text:00000000000081B7                 mov     rdx, r8
.text:00000000000081BA                 cmp     rcx, rsi
.text:00000000000081BD                 cdqe
.text:00000000000081BF                 ja      short loc_81C8
.text:00000000000081C1                 lea     rdx, [rcx+rcx*4]
.text:00000000000081C5                 add     rdx, rdx
.text:00000000000081C8
.text:00000000000081C8 loc_81C8:                               ; CODE XREF: printf_parse+B9F↑j
.text:00000000000081C8                 mov     rsi, r11
.text:00000000000081CB
.text:00000000000081CB loc_81CB:                               ; CODE XREF: printf_parse+BDC↓j
.text:00000000000081CB                 xor     ebx, ebx
.text:00000000000081CD                 add     rdx, rax
.text:00000000000081D0                 movsx   eax, byte ptr [r11+1]
.text:00000000000081D5                 setb    bl
.text:00000000000081D8                 add     r11, 1
.text:00000000000081DC                 mov     rcx, rdx
.text:00000000000081DF                 test    rbx, rbx
.text:00000000000081E2                 lea     edi, [rax-30h]
.text:00000000000081E5                 jz      short loc_8258
.text:00000000000081E7                 cmp     dil, 9
.text:00000000000081EB                 ja      def_7865        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000081F1                 sub     eax, 30h ; '0'
.text:00000000000081F4                 mov     rdx, r8
.text:00000000000081F7                 mov     rsi, r11
.text:00000000000081FA                 cdqe
.text:00000000000081FC                 jmp     short loc_81CB
.text:00000000000081FE ; ---------------------------------------------------------------------------
.text:00000000000081FE
.text:00000000000081FE loc_81FE:                               ; CODE XREF: printf_parse+6D4↑j
.text:00000000000081FE                 cmp     dil, 9
.text:0000000000008202                 ja      def_7865        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000008208                 movsx   eax, cl
.text:000000000000820B                 mov     rbp, rdx
.text:000000000000820E                 mov     rcx, r8
.text:0000000000008211                 sub     eax, 30h ; '0'
.text:0000000000008214                 cdqe
.text:0000000000008216                 jmp     loc_7CD9
.text:000000000000821B ; ---------------------------------------------------------------------------
.text:000000000000821B
.text:000000000000821B loc_821B:                               ; CODE XREF: printf_parse+43D↑j
.text:000000000000821B                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000008220                 shl     rax, 5
.text:0000000000008224                 mov     rdi, rcx        ; dest
.text:0000000000008227                 mov     rdx, rax        ; n
.text:000000000000822A                 mov     [rsp+88h+var_48], r9
.text:000000000000822F                 mov     [rsp+88h+var_50], r10
.text:0000000000008234                 mov     [rsp+88h+var_58], r8
.text:0000000000008239                 call    _memcpy         ; PIC mode
.text:000000000000823E                 mov     r9, [rsp+88h+var_48]
.text:0000000000008243                 mov     rcx, rax
.text:0000000000008246                 mov     r10, [rsp+88h+var_50]
.text:000000000000824B                 mov     rax, [r15]
.text:000000000000824E                 mov     r8, [rsp+88h+var_58]
.text:0000000000008253                 jmp     loc_7A63
.text:0000000000008258 ; ---------------------------------------------------------------------------
.text:0000000000008258
.text:0000000000008258 loc_8258:                               ; CODE XREF: printf_parse+BC5↑j
.text:0000000000008258                 cmp     dil, 9
.text:000000000000825C                 jbe     loc_81AA
.text:0000000000008262                 lea     rbx, [rdx-1]
.text:0000000000008266                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000826A                 ja      def_7865        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000008270                 mov     [r12+40h], rbx
.text:0000000000008275                 lea     r11, [rsi+2]
.text:0000000000008279                 jmp     loc_7B0D
.text:000000000000827E ; ---------------------------------------------------------------------------
.text:000000000000827E
.text:000000000000827E loc_827E:                               ; CODE XREF: printf_parse+AA0↑j
.text:000000000000827E                 mov     rdi, rsi        ; size
.text:0000000000008281                 call    _malloc         ; PIC mode
.text:0000000000008286                 mov     rdx, [rsp+88h+src]
.text:000000000000828B                 mov     rcx, rax
.text:000000000000828E                 mov     r9, [rsp+88h+var_40]
.text:0000000000008293                 mov     r10, [rsp+88h+var_48]
.text:0000000000008298                 mov     r8, [rsp+88h+var_50]
.text:000000000000829D                 mov     r11, [rsp+88h+var_58]
.text:00000000000082A2                 jmp     loc_80E9
.text:00000000000082A7 ; ---------------------------------------------------------------------------
.text:00000000000082A7
.text:00000000000082A7 loc_82A7:                               ; CODE XREF: printf_parse+2DB↑j
.text:00000000000082A7                                         ; printf_parse+2F1↑j ...
.text:00000000000082A7                 mov     rcx, [r15+8]
.text:00000000000082AB
.text:00000000000082AB loc_82AB:                               ; CODE XREF: printf_parse+3E7↑j
.text:00000000000082AB                                         ; printf_parse+8AB↑j ...
.text:00000000000082AB                 cmp     [rsp+88h+src], rcx
.text:00000000000082B0                 jnz     loc_8114
.text:00000000000082B6                 jmp     loc_811C
.text:00000000000082B6 ; ---------------------------------------------------------------------------
.text:00000000000082BB                 align 20h
.text:00000000000082C0
.text:00000000000082C0 loc_82C0:                               ; CODE XREF: printf_parse+ADA↑j
.text:00000000000082C0                 mov     rsi, [rsp+88h+src] ; src
.text:00000000000082C5                 shl     rax, 5
.text:00000000000082C9                 mov     rdi, rcx        ; dest
.text:00000000000082CC                 mov     rdx, rax        ; n
.text:00000000000082CF                 mov     [rsp+88h+var_40], r9
.text:00000000000082D4                 mov     [rsp+88h+var_48], r10
.text:00000000000082D9                 mov     [rsp+88h+var_50], r8
.text:00000000000082DE                 mov     [rsp+88h+var_58], r11
.text:00000000000082E3                 call    _memcpy         ; PIC mode
.text:00000000000082E8                 mov     r9, [rsp+88h+var_40]
.text:00000000000082ED                 mov     rcx, rax
.text:00000000000082F0                 mov     r10, [rsp+88h+var_48]
.text:00000000000082F5                 mov     rax, [r15]
.text:00000000000082F8                 mov     r8, [rsp+88h+var_50]
.text:00000000000082FD                 mov     r11, [rsp+88h+var_58]
.text:0000000000008302                 jmp     loc_8100
.text:0000000000008307 ; ---------------------------------------------------------------------------
.text:0000000000008307
.text:0000000000008307 loc_8307:                               ; CODE XREF: printf_parse+42F↑j
.text:0000000000008307                                         ; printf_parse+ACC↑j
.text:0000000000008307                 mov     rcx, rdx
.text:000000000000830A                 jmp     short loc_82AB
.text:000000000000830A ; } // starts at 7620
.text:000000000000830A printf_parse    endp
.text:000000000000830A
.text:000000000000830A ; ---------------------------------------------------------------------------
.text:000000000000830C                 align 10h
.text:0000000000008310
.text:0000000000008310 ; =============== S U B R O U T I N E =======================================
.text:0000000000008310
.text:0000000000008310 ; Attributes: info_from_lumina
.text:0000000000008310
.text:0000000000008310 ; void _libc_csu_init(void)
.text:0000000000008310                 public __libc_csu_init
.text:0000000000008310 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000008310 ; __unwind {
.text:0000000000008310                 push    r15
.text:0000000000008312                 push    r14
.text:0000000000008314                 mov     r15, rdx
.text:0000000000008317                 push    r13
.text:0000000000008319                 push    r12
.text:000000000000831B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000008322                 push    rbp
.text:0000000000008323                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000832A                 push    rbx
.text:000000000000832B                 mov     r13d, edi
.text:000000000000832E                 mov     r14, rsi
.text:0000000000008331                 sub     rbp, r12
.text:0000000000008334                 sub     rsp, 8
.text:0000000000008338                 sar     rbp, 3
.text:000000000000833C                 call    _init_proc
.text:0000000000008341                 test    rbp, rbp
.text:0000000000008344                 jz      short loc_8366
.text:0000000000008346                 xor     ebx, ebx
.text:0000000000008348                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000008350
.text:0000000000008350 loc_8350:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000008350                 mov     rdx, r15
.text:0000000000008353                 mov     rsi, r14
.text:0000000000008356                 mov     edi, r13d
.text:0000000000008359                 call    ds:(__frame_dummy_init_array_entry - 20BBB0h)[r12+rbx*8]
.text:000000000000835D                 add     rbx, 1
.text:0000000000008361                 cmp     rbp, rbx
.text:0000000000008364                 jnz     short loc_8350
.text:0000000000008366
.text:0000000000008366 loc_8366:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000008366                 add     rsp, 8
.text:000000000000836A                 pop     rbx
.text:000000000000836B                 pop     rbp
.text:000000000000836C                 pop     r12
.text:000000000000836E                 pop     r13
.text:0000000000008370                 pop     r14
.text:0000000000008372                 pop     r15
.text:0000000000008374                 retn
.text:0000000000008374 ; } // starts at 8310
.text:0000000000008374 __libc_csu_init endp
.text:0000000000008374
.text:0000000000008374 ; ---------------------------------------------------------------------------
.text:0000000000008375                 align 20h
.text:0000000000008380
.text:0000000000008380 ; =============== S U B R O U T I N E =======================================
.text:0000000000008380
.text:0000000000008380
.text:0000000000008380 ; void _libc_csu_fini(void)
.text:0000000000008380                 public __libc_csu_fini
.text:0000000000008380 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000008380 ; __unwind {
.text:0000000000008380                 rep retn
.text:0000000000008380 ; } // starts at 8380
.text:0000000000008380 __libc_csu_fini endp
.text:0000000000008380
.text:0000000000008380 ; ---------------------------------------------------------------------------
.text:0000000000008382                 align 10h
.text:0000000000008390
.text:0000000000008390 ; =============== S U B R O U T I N E =======================================
.text:0000000000008390
.text:0000000000008390
.text:0000000000008390 atexit          proc near               ; CODE XREF: main+68↑p
.text:0000000000008390 ; __unwind {
.text:0000000000008390                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000008397                 xor     esi, esi        ; obj
.text:0000000000008399                 jmp     ___cxa_atexit
.text:0000000000008399 ; } // starts at 8390
.text:0000000000008399 atexit          endp
.text:0000000000008399
.text:0000000000008399 _text           ends
.text:0000000000008399
LOAD:000000000000839E ; ===========================================================================
LOAD:000000000000839E
LOAD:000000000000839E ; Segment type: Pure code
LOAD:000000000000839E ; Segment permissions: Read/Execute
LOAD:000000000000839E LOAD            segment byte public 'CODE' use64
LOAD:000000000000839E                 assume cs:LOAD
LOAD:000000000000839E                 ;org 839Eh
LOAD:000000000000839E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000839E                 align 20h
LOAD:000000000000839E LOAD            ends
LOAD:000000000000839E
.fini:00000000000083A0 ; ===========================================================================
.fini:00000000000083A0
.fini:00000000000083A0 ; Segment type: Pure code
.fini:00000000000083A0 ; Segment permissions: Read/Execute
.fini:00000000000083A0 _fini           segment dword public 'CODE' use64
.fini:00000000000083A0                 assume cs:_fini
.fini:00000000000083A0                 ;org 83A0h
.fini:00000000000083A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000083A0
.fini:00000000000083A0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000083A0
.fini:00000000000083A0
.fini:00000000000083A0                 public _term_proc
.fini:00000000000083A0 _term_proc      proc near
.fini:00000000000083A0                 sub     rsp, 8          ; _fini
.fini:00000000000083A4                 add     rsp, 8
.fini:00000000000083A8                 retn
.fini:00000000000083A8 _term_proc      endp
.fini:00000000000083A8
.fini:00000000000083A8 _fini           ends
.fini:00000000000083A8
LOAD:00000000000083A9 ; ===========================================================================
LOAD:00000000000083A9
LOAD:00000000000083A9 ; Segment type: Pure code
LOAD:00000000000083A9 ; Segment permissions: Read/Execute
LOAD:00000000000083A9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000083A9                 assume cs:LOAD
LOAD:00000000000083A9                 ;org 83A9h
LOAD:00000000000083A9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000083A9                 align 20h
LOAD:00000000000083A9 LOAD            ends
LOAD:00000000000083A9
.rodata:00000000000083C0 ; ===========================================================================
.rodata:00000000000083C0
.rodata:00000000000083C0 ; Segment type: Pure data
.rodata:00000000000083C0 ; Segment permissions: Read
.rodata:00000000000083C0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000083C0                 assume cs:_rodata
.rodata:00000000000083C0                 ;org 83C0h
.rodata:00000000000083C0                 public _IO_stdin_used
.rodata:00000000000083C0 _IO_stdin_used  db    1
.rodata:00000000000083C1                 db    0
.rodata:00000000000083C2                 db    2
.rodata:00000000000083C3                 db    0
.rodata:00000000000083C4                 db    0
.rodata:00000000000083C5                 db    0
.rodata:00000000000083C6                 db    0
.rodata:00000000000083C7                 db    0
.rodata:00000000000083C8 ; const char aMissingHexadec[]
.rodata:00000000000083C8 aMissingHexadec db 'missing hexadecimal number in escape',0
.rodata:00000000000083C8                                         ; DATA XREF: print_esc:loc_2A68↑o
.rodata:00000000000083ED                 align 10h
.rodata:00000000000083F0 ; const char aInvalidUnivers[]
.rodata:00000000000083F0 aInvalidUnivers db 'invalid universal character name \%c%0*x',0
.rodata:00000000000083F0                                         ; DATA XREF: print_esc:loc_2B03↑o
.rodata:0000000000008419                 align 20h
.rodata:0000000000008420 ; const char aSValueNotCompl[]
.rodata:0000000000008420 aSValueNotCompl db '%s: value not completely converted',0
.rodata:0000000000008420                                         ; DATA XREF: verify_numeric+28↑o
.rodata:0000000000008443                 align 8
.rodata:0000000000008448 ; const char aWarningSCharac[]
.rodata:0000000000008448 aWarningSCharac db 'warning: %s: character(s) following character constant have been '
.rodata:0000000000008448                                         ; DATA XREF: main+8B0↑o
.rodata:0000000000008448                                         ; main+943↑o ...
.rodata:0000000000008448                 db 'ignored',0
.rodata:0000000000008491                 align 8
.rodata:0000000000008498 ; const char aTrySHelpForMor[]
.rodata:0000000000008498 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000008498                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000084BF                 align 20h
.rodata:00000000000084C0 ; const char aUsageSFormatAr[]
.rodata:00000000000084C0 aUsageSFormatAr db 'Usage: %s FORMAT [ARGUMENT]...',0Ah
.rodata:00000000000084C0                                         ; DATA XREF: usage:loc_2CFD↑o
.rodata:00000000000084C0                 db '  or:  %s OPTION',0Ah,0
.rodata:00000000000084F1                 align 8
.rodata:00000000000084F8 ; const char aPrintArgumentS[]
.rodata:00000000000084F8 aPrintArgumentS db 'Print ARGUMENT(s) according to FORMAT, or execute according to OP'
.rodata:00000000000084F8                                         ; DATA XREF: usage+87↑o
.rodata:00000000000084F8                 db 'TION:',0Ah
.rodata:00000000000084F8                 db 0Ah,0
.rodata:0000000000008541                 align 8
.rodata:0000000000008548 ; const char aHelpDisplayThi[]
.rodata:0000000000008548 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000008548                                         ; DATA XREF: usage+AC↑o
.rodata:0000000000008575                 align 8
.rodata:0000000000008578 ; const char aVersionOutputV[]
.rodata:0000000000008578 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000008578                                         ; DATA XREF: usage+D1↑o
.rodata:00000000000085AE                 align 10h
.rodata:00000000000085B0 ; const char aFormatControls[]
.rodata:00000000000085B0 aFormatControls db 0Ah                  ; DATA XREF: usage+F6↑o
.rodata:00000000000085B0                 db 'FORMAT controls the output as in C printf.  Interpreted sequences'
.rodata:00000000000085B0                 db ' are:',0Ah
.rodata:00000000000085B0                 db 0Ah
.rodata:00000000000085B0                 db '  \"      double quote',0Ah,0
.rodata:0000000000008611                 align 8
.rodata:0000000000008618 ; const char aBackslashAAler[]
.rodata:0000000000008618 aBackslashAAler db '  \\      backslash',0Ah
.rodata:0000000000008618                                         ; DATA XREF: usage+11B↑o
.rodata:0000000000008618                 db '  \a      alert (BEL)',0Ah
.rodata:0000000000008618                 db '  \b      backspace',0Ah
.rodata:0000000000008618                 db '  \c      produce no further output',0Ah
.rodata:0000000000008618                 db '  \e      escape',0Ah
.rodata:0000000000008618                 db '  \f      form feed',0Ah
.rodata:0000000000008618                 db '  \n      new line',0Ah
.rodata:0000000000008618                 db '  \r      carriage return',0Ah
.rodata:0000000000008618                 db '  \t      horizontal tab',0Ah
.rodata:0000000000008618                 db '  \v      vertical tab',0Ah,0
.rodata:00000000000086FD                 align 20h
.rodata:0000000000008700 ; const char aNnnByteWithOct[]
.rodata:0000000000008700 aNnnByteWithOct db '  \NNN    byte with octal value NNN (1 to 3 digits)',0Ah
.rodata:0000000000008700                                         ; DATA XREF: usage+140↑o
.rodata:0000000000008700                 db '  \xHH    byte with hexadecimal value HH (1 to 2 digits)',0Ah
.rodata:0000000000008700                 db '  \uHHHH  Unicode (ISO/IEC 10646) character with hex value HHHH ('
.rodata:0000000000008700                 db '4 digits)',0Ah
.rodata:0000000000008700                 db '  \UHHHHHHHH  Unicode character with hex value HHHHHHHH (8 digits'
.rodata:0000000000008700                 db ')',0Ah,0
.rodata:00000000000087FC                 align 20h
.rodata:0000000000008800 ; const char aASingleBArgume[]
.rodata:0000000000008800 aASingleBArgume db '  %%      a single %',0Ah
.rodata:0000000000008800                                         ; DATA XREF: usage+165↑o
.rodata:0000000000008800                 db '  %b      ARGUMENT as a string with ',27h,'\',27h,' escapes inter'
.rodata:0000000000008800                 db 'preted,',0Ah
.rodata:0000000000008800                 db '          except that octal escapes are of the form \0 or \0NNN',0Ah
.rodata:0000000000008800                 db '  %q      ARGUMENT is printed in a format that can be reused as s'
.rodata:0000000000008800                 db 'hell input,',0Ah
.rodata:0000000000008800                 db '          escaping non-printable characters with the proposed POS'
.rodata:0000000000008800                 db 'IX $',27h,27h,' syntax.',0Ah
.rodata:0000000000008800                 db 0Ah
.rodata:0000000000008800                 db 'and all C format specifications ending with one of diouxXfeEgGcs,'
.rodata:0000000000008800                 db ' with',0Ah
.rodata:0000000000008800                 db 'ARGUMENTs converted to proper type first.  Variable widths are ha'
.rodata:0000000000008800                 db 'ndled.',0Ah,0
.rodata:00000000000089C0 ; const char aNoteYourShellM[]
.rodata:00000000000089C0 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+18A↑o
.rodata:00000000000089C0                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:00000000000089C0                 db 'persedes',0Ah
.rodata:00000000000089C0                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:00000000000089C0                 db 'ocumentation',0Ah
.rodata:00000000000089C0                 db 'for details about the options it supports.',0Ah,0
.rodata:0000000000008A7F                 align 20h
.rodata:0000000000008A80 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000008A80                                         ; DATA XREF: usage+287↑o
.rodata:0000000000008A80                                         ; usage+2EB↑o ...
.rodata:0000000000008AA8 ; const char aReportAnyTrans[]
.rodata:0000000000008AA8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000008AA8                                         ; DATA XREF: usage+3DF↑o
.rodata:0000000000008AA8                 db 'am/>',0Ah,0
.rodata:0000000000008AEF                 align 10h
.rodata:0000000000008AF0 ; const char aOrAvailableLoc[]
.rodata:0000000000008AF0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000008AF0                                         ; DATA XREF: usage:loc_2FB6↑o
.rodata:0000000000008B23                 align 8
.rodata:0000000000008B28 ; const char aSInvalidConver[]
.rodata:0000000000008B28 aSInvalidConver db '%.*s: invalid conversion specification',0
.rodata:0000000000008B28                                         ; DATA XREF: main+CEF↑o
.rodata:0000000000008B4F                 align 10h
.rodata:0000000000008B50 ; const char msgid[]
.rodata:0000000000008B50 msgid           db 'warning: ignoring excess arguments, starting with %s',0
.rodata:0000000000008B50                                         ; DATA XREF: main+1B0↑o
.rodata:0000000000008B85 ; const char s[]
.rodata:0000000000008B85 s               db '"\abcefnrtv',0      ; DATA XREF: print_esc+17C↑o
.rodata:0000000000008B91 aSExpectedANume db '%s: expected a numeric value',0
.rodata:0000000000008B91                                         ; DATA XREF: verify_numeric+A0↑o
.rodata:0000000000008BAE aPrintf         db 'printf',0           ; DATA XREF: main+78E↑o
.rodata:0000000000008BAE                                         ; usage+17E↑o ...
.rodata:0000000000008BB5 asc_8BB5        db '[',0                ; DATA XREF: usage+1B3↑o
.rodata:0000000000008BB7 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1DA↑o
.rodata:0000000000008BC7 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000008BC7                                         ; DATA XREF: usage+20A↑o
.rodata:0000000000008BC7                                         ; usage+304↑o ...
.rodata:0000000000008BDD aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+21B↑o
.rodata:0000000000008BE7 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+227↑o
.rodata:0000000000008BF6 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1BA↑o
.rodata:0000000000008C00 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1E6↑o
.rodata:0000000000008C0A aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1FE↑o
.rodata:0000000000008C14 ; const char aSOnlineHelpS[]
.rodata:0000000000008C14 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+272↑o
.rodata:0000000000008C14                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000008C2B unk_8C2B        db  47h ; G             ; DATA XREF: main+787↑o
.rodata:0000000000008C2B                                         ; usage+28E↑o ...
.rodata:0000000000008C2C                 db  4Eh ; N
.rodata:0000000000008C2D                 db  55h ; U
.rodata:0000000000008C2E                 db  20h
.rodata:0000000000008C2F ; const char domainname[]
.rodata:0000000000008C2F domainname      db 'coreutils',0        ; DATA XREF: main+49↑o
.rodata:0000000000008C2F                                         ; main+55↑o ...
.rodata:0000000000008C39 ; const char aEn[]
.rodata:0000000000008C39 aEn             db 'en_',0              ; DATA XREF: usage+2B5↑o
.rodata:0000000000008C39                                         ; usage+376↑o
.rodata:0000000000008C3D ; const char aFullDocumentat[]
.rodata:0000000000008C3D aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000008C3D                                         ; DATA XREF: usage:loc_2F71↑o
.rodata:0000000000008C3D                                         ; usage:loc_302E↑o
.rodata:0000000000008C58 aLd             db 'ld',0               ; DATA XREF: main+608↑o
.rodata:0000000000008C5B asc_8C5B        db 'L',0                ; DATA XREF: main+64B↑o
.rodata:0000000000008C5D ; const char dirname[]
.rodata:0000000000008C5D dirname         db '/usr/local/share/locale',0
.rodata:0000000000008C5D                                         ; DATA XREF: main+42↑o
.rodata:0000000000008C75 ; const char name[]
.rodata:0000000000008C75 name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+6D↑o
.rodata:0000000000008C85 ; const char aHelp[]
.rodata:0000000000008C85 aHelp           db '--help',0           ; DATA XREF: main+6F9↑o
.rodata:0000000000008C8C ; const char aVersion[]
.rodata:0000000000008C8C aVersion        db '--version',0        ; DATA XREF: main+710↑o
.rodata:0000000000008C96 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+780↑o
.rodata:0000000000008CA6 ; const char s2[]
.rodata:0000000000008CA6 s2              db '--',0               ; DATA XREF: main+A3↑o
.rodata:0000000000008CA6                                         ; main+726↑o
.rodata:0000000000008CA9 ; const char aMissingOperand[]
.rodata:0000000000008CA9 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_1E9D↑o
.rodata:0000000000008CB9 ; const char aInvalidFieldWi[]
.rodata:0000000000008CB9 aInvalidFieldWi db 'invalid field width: %s',0
.rodata:0000000000008CB9                                         ; DATA XREF: main+D6B↑o
.rodata:0000000000008CD1 ; const char aInvalidPrecisi[]
.rodata:0000000000008CD1 aInvalidPrecisi db 'invalid precision: %s',0
.rodata:0000000000008CD1                                         ; DATA XREF: main+D35↑o
.rodata:0000000000008CE7                 align 8
.rodata:0000000000008CE8 jpt_27D1        dd offset loc_29C2 - 8CE8h
.rodata:0000000000008CE8                                         ; DATA XREF: print_esc+1A0↑o
.rodata:0000000000008CE8                                         ; print_esc+1AA↑r
.rodata:0000000000008CE8                 dd offset loc_294C - 8CE8h ; jump table for switch statement
.rodata:0000000000008CE8                 dd offset loc_2996 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset loc_2902 - 8CE8h
.rodata:0000000000008CE8                 dd offset loc_299D - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset loc_2927 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset loc_2971 - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset loc_28DD - 8CE8h
.rodata:0000000000008CE8                 dd offset def_27D1 - 8CE8h
.rodata:0000000000008CE8                 dd offset loc_28B8 - 8CE8h
.rodata:0000000000008D40 jpt_1B55        dd offset loc_1B76 - 8D40h
.rodata:0000000000008D40                                         ; DATA XREF: main+3E4↑o
.rodata:0000000000008D40                                         ; main+3EE↑r
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h ; jump table for switch statement
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset loc_1B80 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset loc_1B60 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset loc_1B76 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset loc_1B76 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset loc_1BB0 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset def_1B55 - 8D40h
.rodata:0000000000008D40                 dd offset loc_1B60 - 8D40h
.rodata:0000000000008DE8 jpt_1E1E        dd offset loc_2062 - 8DE8h, offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                                         ; DATA XREF: main+6AC↑o
.rodata:0000000000008DE8                                         ; main+6B7↑r
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset loc_2062 - 8DE8h, offset loc_2062 - 8DE8h ; jump table for switch statement
.rodata:0000000000008DE8                 dd offset loc_2062 - 8DE8h, offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h, offset loc_1FDA - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h, offset loc_2062 - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset loc_1FB9 - 8DE8h, offset loc_1F8A - 8DE8h
.rodata:0000000000008DE8                 dd offset loc_2062 - 8DE8h, offset loc_2062 - 8DE8h, offset loc_2062 - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset loc_1F8A - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset loc_1FDA - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset def_1E1E - 8DE8h, offset loc_1F50 - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset loc_1FDA - 8DE8h, offset def_1E1E - 8DE8h
.rodata:0000000000008DE8                 dd offset def_1E1E - 8DE8h, offset loc_1FDA - 8DE8h
.rodata:0000000000008EC8 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000008ECD ; const char aWriteError[]
.rodata:0000000000008ECD aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_31C3↑o
.rodata:0000000000008ED9 ; const char format[]
.rodata:0000000000008ED9 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000008EE0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000008EE0                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000008F18 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000008F20 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000008F24 unk_8F24        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000008F25                 db  80h
.rodata:0000000000008F26                 db  98h
.rodata:0000000000008F27                 db    0
.rodata:0000000000008F28 unk_8F28        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000008F29                 db  80h
.rodata:0000000000008F2A                 db  99h
.rodata:0000000000008F2B                 db    0
.rodata:0000000000008F2C unk_8F2C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000008F2D                 db    7
.rodata:0000000000008F2E                 db  65h ; e
.rodata:0000000000008F2F                 db    0
.rodata:0000000000008F30 unk_8F30        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000008F31                 db 0AFh
.rodata:0000000000008F32                 db    0
.rodata:0000000000008F33 unk_8F33        db  22h ; "             ; DATA XREF: gettext_quote:loc_32F0↑o
.rodata:0000000000008F33                                         ; quotearg_buffer_restyled:loc_40AB↑o ...
.rodata:0000000000008F34                 db    0
.rodata:0000000000008F35 ; const char asc_8F35[2]
.rodata:0000000000008F35 asc_8F35        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000008F35                                         ; quotearg_buffer_restyled:loc_3473↑o ...
.rodata:0000000000008F37 ; const char asc_8F37[2]
.rodata:0000000000008F37 asc_8F37        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000008F37                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000008F39 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000008F41 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020BBC8↓o
.rodata:0000000000008F47 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020BBD0↓o
.rodata:0000000000008F54 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020BBD8↓o
.rodata:0000000000008F54                                         ; .data.rel.ro:000000000020BBF8↓o
.rodata:0000000000008F61 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000008F61                                         ; DATA XREF: .data.rel.ro:000000000020BBE0↓o
.rodata:0000000000008F75 aC              db 'c',0                ; DATA XREF: .data.rel.ro:000000000020BBE8↓o
.rodata:0000000000008F77 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020BBF0↓o
.rodata:0000000000008F7F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020BC08↓o
.rodata:0000000000008F87                 align 20h
.rodata:0000000000008FA0 jpt_3451        dd offset loc_41FA - 8FA0h
.rodata:0000000000008FA0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000008FA0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000008FA0                 dd offset loc_3453 - 8FA0h ; jump table for switch statement
.rodata:0000000000008FA0                 dd offset loc_4428 - 8FA0h
.rodata:0000000000008FA0                 dd offset loc_4234 - 8FA0h
.rodata:0000000000008FA0                 dd offset loc_4024 - 8FA0h
.rodata:0000000000008FA0                 dd offset loc_4080 - 8FA0h
.rodata:0000000000008FA0                 dd offset loc_40D5 - 8FA0h
.rodata:0000000000008FA0                 dd offset loc_411A - 8FA0h
.rodata:0000000000008FA0                 dd offset loc_4154 - 8FA0h
.rodata:0000000000008FA0                 dd offset loc_4154 - 8FA0h
.rodata:0000000000008FA0                 dd offset loc_4154 - 8FA0h
.rodata:0000000000008FCC jpt_35AE        dd offset loc_37D0 - 8FCCh, offset def_35AE - 8FCCh, offset def_35AE - 8FCCh
.rodata:0000000000008FCC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000008FCC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000008FCC                 dd offset def_35AE - 8FCCh, offset def_35AE - 8FCCh, offset def_35AE - 8FCCh ; jump table for switch statement
.rodata:0000000000008FCC                 dd offset def_35AE - 8FCCh, offset loc_3810 - 8FCCh, offset loc_3718 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_36D8 - 8FCCh, offset loc_38A0 - 8FCCh, offset loc_3890 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_3880 - 8FCCh, offset loc_3870 - 8FCCh, offset def_35AE - 8FCCh
.rodata:0000000000008FCC                 dd offset def_35AE - 8FCCh, offset def_35AE - 8FCCh, offset def_35AE - 8FCCh
.rodata:0000000000008FCC                 dd offset def_35AE - 8FCCh, offset def_35AE - 8FCCh, offset def_35AE - 8FCCh
.rodata:0000000000008FCC                 dd offset def_35AE - 8FCCh, offset def_35AE - 8FCCh, offset def_35AE - 8FCCh
.rodata:0000000000008FCC                 dd offset def_35AE - 8FCCh, offset def_35AE - 8FCCh, offset def_35AE - 8FCCh
.rodata:0000000000008FCC                 dd offset def_35AE - 8FCCh, offset def_35AE - 8FCCh, offset def_35AE - 8FCCh
.rodata:0000000000008FCC                 dd offset def_35AE - 8FCCh, offset def_35AE - 8FCCh, offset loc_3860 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_3850 - 8FCCh, offset loc_3850 - 8FCCh, offset loc_3820 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_3850 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_3850 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_36B3 - 8FCCh, offset loc_3850 - 8FCCh, offset loc_3850 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_3850 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_3850 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_3850 - 8FCCh, offset loc_3850 - 8FCCh, offset loc_3850 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_3683 - 8FCCh, offset def_35AE - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_3850 - 8FCCh, offset loc_3728 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_3850 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_3850 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh, offset loc_37F8 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_35B3 - 8FCCh, offset loc_3850 - 8FCCh, offset loc_35B3 - 8FCCh
.rodata:0000000000008FCC                 dd offset loc_3820 - 8FCCh
.rodata:00000000000091C8 jpt_393A        dd offset loc_39A0 - 91C8h, offset def_393A - 91C8h, offset def_393A - 91C8h
.rodata:00000000000091C8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000091C8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000091C8                 dd offset def_393A - 91C8h, offset def_393A - 91C8h, offset def_393A - 91C8h ; jump table for switch statement
.rodata:00000000000091C8                 dd offset def_393A - 91C8h, offset loc_3990 - 91C8h, offset loc_3AE0 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3AC8 - 91C8h, offset loc_3978 - 91C8h, offset loc_3AB8 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3960 - 91C8h, offset loc_3AA0 - 91C8h, offset def_393A - 91C8h
.rodata:00000000000091C8                 dd offset def_393A - 91C8h, offset def_393A - 91C8h, offset def_393A - 91C8h
.rodata:00000000000091C8                 dd offset def_393A - 91C8h, offset def_393A - 91C8h, offset def_393A - 91C8h
.rodata:00000000000091C8                 dd offset def_393A - 91C8h, offset def_393A - 91C8h, offset def_393A - 91C8h
.rodata:00000000000091C8                 dd offset def_393A - 91C8h, offset def_393A - 91C8h, offset def_393A - 91C8h
.rodata:00000000000091C8                 dd offset def_393A - 91C8h, offset def_393A - 91C8h, offset def_393A - 91C8h
.rodata:00000000000091C8                 dd offset def_393A - 91C8h, offset def_393A - 91C8h, offset loc_3A88 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A70 - 91C8h, offset loc_3A70 - 91C8h, offset loc_3A58 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A70 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A70 - 91C8h
.rodata:00000000000091C8                 dd offset loc_36B0 - 91C8h, offset loc_3A70 - 91C8h, offset loc_3A70 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A70 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A70 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A70 - 91C8h, offset loc_3A70 - 91C8h, offset loc_3A70 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3680 - 91C8h, offset def_393A - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A70 - 91C8h, offset loc_3940 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A70 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A70 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h, offset loc_3A40 - 91C8h
.rodata:00000000000091C8                 dd offset loc_35B0 - 91C8h, offset loc_3A70 - 91C8h, offset loc_35B0 - 91C8h
.rodata:00000000000091C8                 dd offset loc_3A58 - 91C8h
.rodata:00000000000093C4                 align 20h
.rodata:00000000000093E0                 public quoting_style_vals
.rodata:00000000000093E0 quoting_style_vals db    0
.rodata:00000000000093E1                 db    0
.rodata:00000000000093E2                 db    0
.rodata:00000000000093E3                 db    0
.rodata:00000000000093E4                 db    1
.rodata:00000000000093E5                 db    0
.rodata:00000000000093E6                 db    0
.rodata:00000000000093E7                 db    0
.rodata:00000000000093E8                 db    2
.rodata:00000000000093E9                 db    0
.rodata:00000000000093EA                 db    0
.rodata:00000000000093EB                 db    0
.rodata:00000000000093EC                 db    3
.rodata:00000000000093ED                 db    0
.rodata:00000000000093EE                 db    0
.rodata:00000000000093EF                 db    0
.rodata:00000000000093F0                 db    4
.rodata:00000000000093F1                 db    0
.rodata:00000000000093F2                 db    0
.rodata:00000000000093F3                 db    0
.rodata:00000000000093F4                 db    5
.rodata:00000000000093F5                 db    0
.rodata:00000000000093F6                 db    0
.rodata:00000000000093F7                 db    0
.rodata:00000000000093F8                 db    6
.rodata:00000000000093F9                 db    0
.rodata:00000000000093FA                 db    0
.rodata:00000000000093FB                 db    0
.rodata:00000000000093FC                 db    7
.rodata:00000000000093FD                 db    0
.rodata:00000000000093FE                 db    0
.rodata:00000000000093FF                 db    0
.rodata:0000000000009400                 db    8
.rodata:0000000000009401                 db    0
.rodata:0000000000009402                 db    0
.rodata:0000000000009403                 db    0
.rodata:0000000000009404                 db    9
.rodata:0000000000009405                 db    0
.rodata:0000000000009406                 db    0
.rodata:0000000000009407                 db    0
.rodata:0000000000009408 aU04x           db '\u%04X',0           ; DATA XREF: fallback_failure_callback:loc_4FB0↑o
.rodata:000000000000940F aU08x           db '\U%08X',0           ; DATA XREF: fallback_failure_callback+11↑o
.rodata:0000000000009416 ; const char fromcode[]
.rodata:0000000000009416 fromcode        db 'UTF-8',0            ; DATA XREF: unicode_to_mb:loc_5140↑o
.rodata:000000000000941C ; const char tocode[]
.rodata:000000000000941C tocode          db 'ASCII',0            ; DATA XREF: unicode_to_mb:loc_5218↑o
.rodata:000000000000941C                                         ; locale_charset+16↑o ...
.rodata:0000000000009422 aIconvFunctionN db 'iconv function not usable',0
.rodata:0000000000009422                                         ; DATA XREF: unicode_to_mb+4E↑o
.rodata:000000000000943C aCharacterOutOf db 'character out of range',0
.rodata:000000000000943C                                         ; DATA XREF: unicode_to_mb+CB↑o
.rodata:0000000000009453                 align 8
.rodata:0000000000009458 ; const char aCannotConvertU_0[]
.rodata:0000000000009458 aCannotConvertU_0 db 'cannot convert U+%04X to local character set',0
.rodata:0000000000009458                                         ; DATA XREF: exit_failure_callback:loc_5028↑o
.rodata:0000000000009485                 align 8
.rodata:0000000000009488 ; const char aCannotConvertU[]
.rodata:0000000000009488 aCannotConvertU db 'cannot convert U+%04X to local character set: %s',0
.rodata:0000000000009488                                         ; DATA XREF: exit_failure_callback+19↑o
.rodata:00000000000094B9 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000094C5 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000094CC ; const char aC_0[]
.rodata:00000000000094CC aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_538C↑o
.rodata:00000000000094D0 ; const char aWrittenByS[]
.rodata:00000000000094D0 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000094D0                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000094E0 ; const char aWrittenBySAndS[]
.rodata:00000000000094E0 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000094E0                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000094F7 ; const char aWrittenBySSAnd[]
.rodata:00000000000094F7 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000094F7                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000009513 ; const char aReportBugsToS[]
.rodata:0000000000009513 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000009513                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000009528 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000009528                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000953E ; const char aSHomePageS[]
.rodata:000000000000953E aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000953E                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000009552                 align 8
.rodata:0000000000009558 ; const char aLicenseGplv3Gn[]
.rodata:0000000000009558 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000009558                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000009558                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000009558                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000009558                 db '.',0Ah
.rodata:0000000000009558                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000009558                 db 0Ah,0
.rodata:0000000000009624                 align 8
.rodata:0000000000009628 ; const char aWrittenBySSSAn[]
.rodata:0000000000009628 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009628                                         ; DATA XREF: version_etc_arn:loc_55E0↑o
.rodata:0000000000009628                 db 'and %s.',0Ah,0
.rodata:0000000000009648 ; const char aWrittenBySSSSA[]
.rodata:0000000000009648 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009648                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000009648                 db '%s, and %s.',0Ah,0
.rodata:000000000000966C                 align 10h
.rodata:0000000000009670 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000009670 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009670                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000009670                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000009698 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000009698 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009698                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000009698                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000096C4                 align 8
.rodata:00000000000096C8 ; const char aWrittenBySSSSS[]
.rodata:00000000000096C8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000096C8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000096C8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000096C8                 db 'and %s.',0Ah,0
.rodata:00000000000096F8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000096F8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000096F8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000096F8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000096F8                 db '%s, and %s.',0Ah,0
.rodata:000000000000972C                 align 10h
.rodata:0000000000009730 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009730                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000009730                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009730                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000976C                 align 10h
.rodata:0000000000009770 ; const char aGeneralHelpUsi[]
.rodata:0000000000009770 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000009770                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000009770                 db 0
.rodata:00000000000097B1                 align 4
.rodata:00000000000097B4 jpt_53F4        dd offset loc_5476 - 97B4h
.rodata:00000000000097B4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000097B4                                         ; version_etc_arn+9D↑r
.rodata:00000000000097B4                 dd offset loc_5508 - 97B4h ; jump table for switch statement
.rodata:00000000000097B4                 dd offset loc_5548 - 97B4h
.rodata:00000000000097B4                 dd offset loc_5590 - 97B4h
.rodata:00000000000097B4                 dd offset loc_55E0 - 97B4h
.rodata:00000000000097B4                 dd offset loc_5638 - 97B4h
.rodata:00000000000097B4                 dd offset loc_5668 - 97B4h
.rodata:00000000000097B4                 dd offset loc_56D0 - 97B4h
.rodata:00000000000097B4                 dd offset loc_5400 - 97B4h
.rodata:00000000000097B4                 dd offset loc_54B0 - 97B4h
.rodata:00000000000097DC                 align 20h
.rodata:00000000000097E0                 public version_etc_copyright
.rodata:00000000000097E0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000097E0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000980F ; const char aMemoryExhauste[]
.rodata:000000000000980F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000009820 ; const char aCannotPerformF[]
.rodata:0000000000009820 aCannotPerformF db 'cannot perform formatted output',0
.rodata:0000000000009820                                         ; DATA XREF: xvprintf+30↑o
.rodata:0000000000009820                                         ; xvfprintf+2C↑o
.rodata:0000000000009840 ; const char locale[]
.rodata:0000000000009840 locale          db 'C',0                ; DATA XREF: c_strtold:loc_6080↑o
.rodata:0000000000009840                                         ; hard_locale+18↑o
.rodata:0000000000009842 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_6170↑o
.rodata:0000000000009848 jpt_685B        dd offset def_685B - 9848h
.rodata:0000000000009848                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:0000000000009848                                         ; vasnprintf+554↑r
.rodata:0000000000009848                 dd offset loc_6CC0 - 9848h ; jump table for switch statement
.rodata:0000000000009848                 dd offset loc_6C90 - 9848h
.rodata:0000000000009848                 dd offset loc_6C08 - 9848h
.rodata:0000000000009848                 dd offset loc_6BC8 - 9848h
.rodata:0000000000009848                 dd offset loc_6998 - 9848h
.rodata:0000000000009848                 dd offset loc_6998 - 9848h
.rodata:0000000000009848                 dd offset loc_6860 - 9848h
.rodata:0000000000009848                 dd offset loc_6860 - 9848h
.rodata:0000000000009848                 dd offset loc_6860 - 9848h
.rodata:0000000000009848                 dd offset loc_6860 - 9848h
.rodata:0000000000009848                 dd offset loc_6B48 - 9848h
.rodata:0000000000009848                 dd offset loc_6AC0 - 9848h
.rodata:0000000000009848                 dd offset loc_6998 - 9848h
.rodata:0000000000009848                 dd offset loc_6998 - 9848h
.rodata:0000000000009848                 dd offset loc_6860 - 9848h
.rodata:0000000000009848                 dd offset loc_6860 - 9848h
.rodata:0000000000009848                 dd offset loc_6860 - 9848h
.rodata:0000000000009890 jpt_6E00        dd offset loc_7070 - 9890h
.rodata:0000000000009890                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000009890                                         ; vasnprintf+AF9↑r
.rodata:0000000000009890                 dd offset loc_7090 - 9890h ; jump table for switch statement
.rodata:0000000000009890                 dd offset loc_7080 - 9890h
.rodata:0000000000009890                 dd offset loc_6F40 - 9890h
.rodata:0000000000009890                 dd offset loc_6F40 - 9890h
.rodata:00000000000098A4 aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:00000000000098AB                 align 10h
.rodata:00000000000098B0 jpt_7456        dd offset def_7456 - 98B0h
.rodata:00000000000098B0                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:00000000000098B0                                         ; printf_fetchargs+2F↑r
.rodata:00000000000098B0                 dd offset loc_74DC - 98B0h ; jump table for switch statement
.rodata:00000000000098B0                 dd offset loc_74DC - 98B0h
.rodata:00000000000098B0                 dd offset loc_74FE - 98B0h
.rodata:00000000000098B0                 dd offset loc_74FE - 98B0h
.rodata:00000000000098B0                 dd offset loc_74BA - 98B0h
.rodata:00000000000098B0                 dd offset loc_74BA - 98B0h
.rodata:00000000000098B0                 dd offset loc_7496 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7496 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7496 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7496 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7552 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7460 - 98B0h
.rodata:00000000000098B0                 dd offset loc_74BA - 98B0h
.rodata:00000000000098B0                 dd offset loc_74BA - 98B0h
.rodata:00000000000098B0                 dd offset loc_7524 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7580 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7496 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7496 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7496 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7496 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7496 - 98B0h
.rodata:00000000000098B0                 dd offset loc_7496 - 98B0h
.rodata:000000000000990C                 align 10h
.rodata:0000000000009910 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000009911                 db    0
.rodata:0000000000009912                 db    0
.rodata:0000000000009913                 db    0
.rodata:0000000000009914                 db  4Eh ; N
.rodata:0000000000009915                 db    0
.rodata:0000000000009916                 db    0
.rodata:0000000000009917                 db    0
.rodata:0000000000009918                 db  55h ; U
.rodata:0000000000009919                 db    0
.rodata:000000000000991A                 db    0
.rodata:000000000000991B                 db    0
.rodata:000000000000991C                 db  4Ch ; L
.rodata:000000000000991D                 db    0
.rodata:000000000000991E                 db    0
.rodata:000000000000991F                 db    0
.rodata:0000000000009920                 db  4Ch ; L
.rodata:0000000000009921                 db    0
.rodata:0000000000009922                 db    0
.rodata:0000000000009923                 db    0
.rodata:0000000000009924                 db  29h ; )
.rodata:0000000000009925                 db    0
.rodata:0000000000009926                 db    0
.rodata:0000000000009927                 db    0
.rodata:0000000000009928                 db    0
.rodata:0000000000009929                 db    0
.rodata:000000000000992A                 db    0
.rodata:000000000000992B                 db    0
.rodata:000000000000992C jpt_7865        dd offset loc_78DB - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                                         ; DATA XREF: printf_parse+234↑o
.rodata:000000000000992C                                         ; printf_parse+23E↑r
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch ; jump table for switch statement
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset loc_7DDB - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset loc_7DFC - 992Ch, offset def_7865 - 992Ch, offset loc_7DDB - 992Ch
.rodata:000000000000992C                 dd offset loc_7DDB - 992Ch, offset loc_7DDB - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset loc_7867 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset loc_7E0C - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset loc_7DDB - 992Ch, offset def_7865 - 992Ch, offset loc_7D68 - 992Ch
.rodata:000000000000992C                 dd offset loc_7D7B - 992Ch, offset loc_7DDB - 992Ch, offset loc_7DDB - 992Ch
.rodata:000000000000992C                 dd offset loc_7DDB - 992Ch, offset def_7865 - 992Ch, offset loc_7D7B - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset loc_7D1C - 992Ch, offset loc_7E0C - 992Ch
.rodata:000000000000992C                 dd offset loc_7E60 - 992Ch, offset def_7865 - 992Ch, offset def_7865 - 992Ch
.rodata:000000000000992C                 dd offset loc_7DC8 - 992Ch, offset def_7865 - 992Ch, offset loc_7E0C - 992Ch
.rodata:000000000000992C                 dd offset def_7865 - 992Ch, offset def_7865 - 992Ch, offset loc_7E0C - 992Ch
.rodata:000000000000992C _rodata         ends
.rodata:000000000000992C
.eh_frame_hdr:0000000000009A7C ; ===========================================================================
.eh_frame_hdr:0000000000009A7C
.eh_frame_hdr:0000000000009A7C ; Segment type: Pure data
.eh_frame_hdr:0000000000009A7C ; Segment permissions: Read
.eh_frame_hdr:0000000000009A7C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000009A7C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000009A7C                 ;org 9A7Ch
.eh_frame_hdr:0000000000009A7C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000009A7D                 db  1Bh
.eh_frame_hdr:0000000000009A7E                 db    3
.eh_frame_hdr:0000000000009A7F                 db  3Bh ; ;
.eh_frame_hdr:0000000000009A80                 db 0E0h
.eh_frame_hdr:0000000000009A81                 db    2
.eh_frame_hdr:0000000000009A82                 db    0
.eh_frame_hdr:0000000000009A83                 db    0
.eh_frame_hdr:0000000000009A84                 db  5Bh ; [
.eh_frame_hdr:0000000000009A85                 db    0
.eh_frame_hdr:0000000000009A86                 db    0
.eh_frame_hdr:0000000000009A87                 db    0
.eh_frame_hdr:0000000000009A88                 db  84h
.eh_frame_hdr:0000000000009A89                 db  79h ; y
.eh_frame_hdr:0000000000009A8A                 db 0FFh
.eh_frame_hdr:0000000000009A8B                 db 0FFh
.eh_frame_hdr:0000000000009A8C                 db  2Ch ; ,
.eh_frame_hdr:0000000000009A8D                 db    3
.eh_frame_hdr:0000000000009A8E                 db    0
.eh_frame_hdr:0000000000009A8F                 db    0
.eh_frame_hdr:0000000000009A90                 db 0D4h
.eh_frame_hdr:0000000000009A91                 db  7Ch ; |
.eh_frame_hdr:0000000000009A92                 db 0FFh
.eh_frame_hdr:0000000000009A93                 db 0FFh
.eh_frame_hdr:0000000000009A94                 db  54h ; T
.eh_frame_hdr:0000000000009A95                 db    3
.eh_frame_hdr:0000000000009A96                 db    0
.eh_frame_hdr:0000000000009A97                 db    0
.eh_frame_hdr:0000000000009A98                 db 0E4h
.eh_frame_hdr:0000000000009A99                 db  7Ch ; |
.eh_frame_hdr:0000000000009A9A                 db 0FFh
.eh_frame_hdr:0000000000009A9B                 db 0FFh
.eh_frame_hdr:0000000000009A9C                 db  3Ch ; <
.eh_frame_hdr:0000000000009A9D                 db    4
.eh_frame_hdr:0000000000009A9E                 db    0
.eh_frame_hdr:0000000000009A9F                 db    0
.eh_frame_hdr:0000000000009AA0                 db  94h
.eh_frame_hdr:0000000000009AA1                 db  8Ah
.eh_frame_hdr:0000000000009AA2                 db 0FFh
.eh_frame_hdr:0000000000009AA3                 db 0FFh
.eh_frame_hdr:0000000000009AA4                 db 0FCh
.eh_frame_hdr:0000000000009AA5                 db    2
.eh_frame_hdr:0000000000009AA6                 db    0
.eh_frame_hdr:0000000000009AA7                 db    0
.eh_frame_hdr:0000000000009AA8                 db 0A4h
.eh_frame_hdr:0000000000009AA9                 db  8Bh
.eh_frame_hdr:0000000000009AAA                 db 0FFh
.eh_frame_hdr:0000000000009AAB                 db 0FFh
.eh_frame_hdr:0000000000009AAC                 db  6Ch ; l
.eh_frame_hdr:0000000000009AAD                 db    3
.eh_frame_hdr:0000000000009AAE                 db    0
.eh_frame_hdr:0000000000009AAF                 db    0
.eh_frame_hdr:0000000000009AB0                 db 0C4h
.eh_frame_hdr:0000000000009AB1                 db  90h
.eh_frame_hdr:0000000000009AB2                 db 0FFh
.eh_frame_hdr:0000000000009AB3                 db 0FFh
.eh_frame_hdr:0000000000009AB4                 db 0A8h
.eh_frame_hdr:0000000000009AB5                 db    3
.eh_frame_hdr:0000000000009AB6                 db    0
.eh_frame_hdr:0000000000009AB7                 db    0
.eh_frame_hdr:0000000000009AB8                 db  74h ; t
.eh_frame_hdr:0000000000009AB9                 db  91h
.eh_frame_hdr:0000000000009ABA                 db 0FFh
.eh_frame_hdr:0000000000009ABB                 db 0FFh
.eh_frame_hdr:0000000000009ABC                 db 0E4h
.eh_frame_hdr:0000000000009ABD                 db    3
.eh_frame_hdr:0000000000009ABE                 db    0
.eh_frame_hdr:0000000000009ABF                 db    0
.eh_frame_hdr:0000000000009AC0                 db  24h ; $
.eh_frame_hdr:0000000000009AC1                 db  92h
.eh_frame_hdr:0000000000009AC2                 db 0FFh
.eh_frame_hdr:0000000000009AC3                 db 0FFh
.eh_frame_hdr:0000000000009AC4                 db  10h
.eh_frame_hdr:0000000000009AC5                 db    4
.eh_frame_hdr:0000000000009AC6                 db    0
.eh_frame_hdr:0000000000009AC7                 db    0
.eh_frame_hdr:0000000000009AC8                 db  34h ; 4
.eh_frame_hdr:0000000000009AC9                 db  96h
.eh_frame_hdr:0000000000009ACA                 db 0FFh
.eh_frame_hdr:0000000000009ACB                 db 0FFh
.eh_frame_hdr:0000000000009ACC                 db 0C4h
.eh_frame_hdr:0000000000009ACD                 db    4
.eh_frame_hdr:0000000000009ACE                 db    0
.eh_frame_hdr:0000000000009ACF                 db    0
.eh_frame_hdr:0000000000009AD0                 db 0E4h
.eh_frame_hdr:0000000000009AD1                 db  96h
.eh_frame_hdr:0000000000009AD2                 db 0FFh
.eh_frame_hdr:0000000000009AD3                 db 0FFh
.eh_frame_hdr:0000000000009AD4                 db    4
.eh_frame_hdr:0000000000009AD5                 db    5
.eh_frame_hdr:0000000000009AD6                 db    0
.eh_frame_hdr:0000000000009AD7                 db    0
.eh_frame_hdr:0000000000009AD8                 db 0F4h
.eh_frame_hdr:0000000000009AD9                 db  96h
.eh_frame_hdr:0000000000009ADA                 db 0FFh
.eh_frame_hdr:0000000000009ADB                 db 0FFh
.eh_frame_hdr:0000000000009ADC                 db  18h
.eh_frame_hdr:0000000000009ADD                 db    5
.eh_frame_hdr:0000000000009ADE                 db    0
.eh_frame_hdr:0000000000009ADF                 db    0
.eh_frame_hdr:0000000000009AE0                 db    4
.eh_frame_hdr:0000000000009AE1                 db  97h
.eh_frame_hdr:0000000000009AE2                 db 0FFh
.eh_frame_hdr:0000000000009AE3                 db 0FFh
.eh_frame_hdr:0000000000009AE4                 db  2Ch ; ,
.eh_frame_hdr:0000000000009AE5                 db    5
.eh_frame_hdr:0000000000009AE6                 db    0
.eh_frame_hdr:0000000000009AE7                 db    0
.eh_frame_hdr:0000000000009AE8                 db 0B4h
.eh_frame_hdr:0000000000009AE9                 db  97h
.eh_frame_hdr:0000000000009AEA                 db 0FFh
.eh_frame_hdr:0000000000009AEB                 db 0FFh
.eh_frame_hdr:0000000000009AEC                 db  5Ch ; \
.eh_frame_hdr:0000000000009AED                 db    5
.eh_frame_hdr:0000000000009AEE                 db    0
.eh_frame_hdr:0000000000009AEF                 db    0
.eh_frame_hdr:0000000000009AF0                 db  54h ; T
.eh_frame_hdr:0000000000009AF1                 db  98h
.eh_frame_hdr:0000000000009AF2                 db 0FFh
.eh_frame_hdr:0000000000009AF3                 db 0FFh
.eh_frame_hdr:0000000000009AF4                 db  7Ch ; |
.eh_frame_hdr:0000000000009AF5                 db    5
.eh_frame_hdr:0000000000009AF6                 db    0
.eh_frame_hdr:0000000000009AF7                 db    0
.eh_frame_hdr:0000000000009AF8                 db  44h ; D
.eh_frame_hdr:0000000000009AF9                 db  99h
.eh_frame_hdr:0000000000009AFA                 db 0FFh
.eh_frame_hdr:0000000000009AFB                 db 0FFh
.eh_frame_hdr:0000000000009AFC                 db 0C0h
.eh_frame_hdr:0000000000009AFD                 db    5
.eh_frame_hdr:0000000000009AFE                 db    0
.eh_frame_hdr:0000000000009AFF                 db    0
.eh_frame_hdr:0000000000009B00                 db  84h
.eh_frame_hdr:0000000000009B01                 db 0ABh
.eh_frame_hdr:0000000000009B02                 db 0FFh
.eh_frame_hdr:0000000000009B03                 db 0FFh
.eh_frame_hdr:0000000000009B04                 db  38h ; 8
.eh_frame_hdr:0000000000009B05                 db    6
.eh_frame_hdr:0000000000009B06                 db    0
.eh_frame_hdr:0000000000009B07                 db    0
.eh_frame_hdr:0000000000009B08                 db  34h ; 4
.eh_frame_hdr:0000000000009B09                 db 0ADh
.eh_frame_hdr:0000000000009B0A                 db 0FFh
.eh_frame_hdr:0000000000009B0B                 db 0FFh
.eh_frame_hdr:0000000000009B0C                 db 0A4h
.eh_frame_hdr:0000000000009B0D                 db    6
.eh_frame_hdr:0000000000009B0E                 db    0
.eh_frame_hdr:0000000000009B0F                 db    0
.eh_frame_hdr:0000000000009B10                 db  74h ; t
.eh_frame_hdr:0000000000009B11                 db 0ADh
.eh_frame_hdr:0000000000009B12                 db 0FFh
.eh_frame_hdr:0000000000009B13                 db 0FFh
.eh_frame_hdr:0000000000009B14                 db 0D0h
.eh_frame_hdr:0000000000009B15                 db    6
.eh_frame_hdr:0000000000009B16                 db    0
.eh_frame_hdr:0000000000009B17                 db    0
.eh_frame_hdr:0000000000009B18                 db  94h
.eh_frame_hdr:0000000000009B19                 db 0ADh
.eh_frame_hdr:0000000000009B1A                 db 0FFh
.eh_frame_hdr:0000000000009B1B                 db 0FFh
.eh_frame_hdr:0000000000009B1C                 db 0E4h
.eh_frame_hdr:0000000000009B1D                 db    6
.eh_frame_hdr:0000000000009B1E                 db    0
.eh_frame_hdr:0000000000009B1F                 db    0
.eh_frame_hdr:0000000000009B20                 db 0B4h
.eh_frame_hdr:0000000000009B21                 db 0ADh
.eh_frame_hdr:0000000000009B22                 db 0FFh
.eh_frame_hdr:0000000000009B23                 db 0FFh
.eh_frame_hdr:0000000000009B24                 db 0F8h
.eh_frame_hdr:0000000000009B25                 db    6
.eh_frame_hdr:0000000000009B26                 db    0
.eh_frame_hdr:0000000000009B27                 db    0
.eh_frame_hdr:0000000000009B28                 db 0F4h
.eh_frame_hdr:0000000000009B29                 db 0ADh
.eh_frame_hdr:0000000000009B2A                 db 0FFh
.eh_frame_hdr:0000000000009B2B                 db 0FFh
.eh_frame_hdr:0000000000009B2C                 db  0Ch
.eh_frame_hdr:0000000000009B2D                 db    7
.eh_frame_hdr:0000000000009B2E                 db    0
.eh_frame_hdr:0000000000009B2F                 db    0
.eh_frame_hdr:0000000000009B30                 db  14h
.eh_frame_hdr:0000000000009B31                 db 0AEh
.eh_frame_hdr:0000000000009B32                 db 0FFh
.eh_frame_hdr:0000000000009B33                 db 0FFh
.eh_frame_hdr:0000000000009B34                 db  20h
.eh_frame_hdr:0000000000009B35                 db    7
.eh_frame_hdr:0000000000009B36                 db    0
.eh_frame_hdr:0000000000009B37                 db    0
.eh_frame_hdr:0000000000009B38                 db  44h ; D
.eh_frame_hdr:0000000000009B39                 db 0AEh
.eh_frame_hdr:0000000000009B3A                 db 0FFh
.eh_frame_hdr:0000000000009B3B                 db 0FFh
.eh_frame_hdr:0000000000009B3C                 db  34h ; 4
.eh_frame_hdr:0000000000009B3D                 db    7
.eh_frame_hdr:0000000000009B3E                 db    0
.eh_frame_hdr:0000000000009B3F                 db    0
.eh_frame_hdr:0000000000009B40                 db 0C4h
.eh_frame_hdr:0000000000009B41                 db 0AEh
.eh_frame_hdr:0000000000009B42                 db 0FFh
.eh_frame_hdr:0000000000009B43                 db 0FFh
.eh_frame_hdr:0000000000009B44                 db  88h
.eh_frame_hdr:0000000000009B45                 db    7
.eh_frame_hdr:0000000000009B46                 db    0
.eh_frame_hdr:0000000000009B47                 db    0
.eh_frame_hdr:0000000000009B48                 db 0B4h
.eh_frame_hdr:0000000000009B49                 db 0AFh
.eh_frame_hdr:0000000000009B4A                 db 0FFh
.eh_frame_hdr:0000000000009B4B                 db 0FFh
.eh_frame_hdr:0000000000009B4C                 db 0F4h
.eh_frame_hdr:0000000000009B4D                 db    7
.eh_frame_hdr:0000000000009B4E                 db    0
.eh_frame_hdr:0000000000009B4F                 db    0
.eh_frame_hdr:0000000000009B50                 db 0C4h
.eh_frame_hdr:0000000000009B51                 db 0AFh
.eh_frame_hdr:0000000000009B52                 db 0FFh
.eh_frame_hdr:0000000000009B53                 db 0FFh
.eh_frame_hdr:0000000000009B54                 db    8
.eh_frame_hdr:0000000000009B55                 db    8
.eh_frame_hdr:0000000000009B56                 db    0
.eh_frame_hdr:0000000000009B57                 db    0
.eh_frame_hdr:0000000000009B58                 db  64h ; d
.eh_frame_hdr:0000000000009B59                 db 0B0h
.eh_frame_hdr:0000000000009B5A                 db 0FFh
.eh_frame_hdr:0000000000009B5B                 db 0FFh
.eh_frame_hdr:0000000000009B5C                 db  34h ; 4
.eh_frame_hdr:0000000000009B5D                 db    8
.eh_frame_hdr:0000000000009B5E                 db    0
.eh_frame_hdr:0000000000009B5F                 db    0
.eh_frame_hdr:0000000000009B60                 db  84h
.eh_frame_hdr:0000000000009B61                 db 0B0h
.eh_frame_hdr:0000000000009B62                 db 0FFh
.eh_frame_hdr:0000000000009B63                 db 0FFh
.eh_frame_hdr:0000000000009B64                 db  48h ; H
.eh_frame_hdr:0000000000009B65                 db    8
.eh_frame_hdr:0000000000009B66                 db    0
.eh_frame_hdr:0000000000009B67                 db    0
.eh_frame_hdr:0000000000009B68                 db  94h
.eh_frame_hdr:0000000000009B69                 db 0B0h
.eh_frame_hdr:0000000000009B6A                 db 0FFh
.eh_frame_hdr:0000000000009B6B                 db 0FFh
.eh_frame_hdr:0000000000009B6C                 db  5Ch ; \
.eh_frame_hdr:0000000000009B6D                 db    8
.eh_frame_hdr:0000000000009B6E                 db    0
.eh_frame_hdr:0000000000009B6F                 db    0
.eh_frame_hdr:0000000000009B70                 db 0B4h
.eh_frame_hdr:0000000000009B71                 db 0B0h
.eh_frame_hdr:0000000000009B72                 db 0FFh
.eh_frame_hdr:0000000000009B73                 db 0FFh
.eh_frame_hdr:0000000000009B74                 db  70h ; p
.eh_frame_hdr:0000000000009B75                 db    8
.eh_frame_hdr:0000000000009B76                 db    0
.eh_frame_hdr:0000000000009B77                 db    0
.eh_frame_hdr:0000000000009B78                 db 0D4h
.eh_frame_hdr:0000000000009B79                 db 0B0h
.eh_frame_hdr:0000000000009B7A                 db 0FFh
.eh_frame_hdr:0000000000009B7B                 db 0FFh
.eh_frame_hdr:0000000000009B7C                 db  84h
.eh_frame_hdr:0000000000009B7D                 db    8
.eh_frame_hdr:0000000000009B7E                 db    0
.eh_frame_hdr:0000000000009B7F                 db    0
.eh_frame_hdr:0000000000009B80                 db  64h ; d
.eh_frame_hdr:0000000000009B81                 db 0B1h
.eh_frame_hdr:0000000000009B82                 db 0FFh
.eh_frame_hdr:0000000000009B83                 db 0FFh
.eh_frame_hdr:0000000000009B84                 db 0A0h
.eh_frame_hdr:0000000000009B85                 db    8
.eh_frame_hdr:0000000000009B86                 db    0
.eh_frame_hdr:0000000000009B87                 db    0
.eh_frame_hdr:0000000000009B88                 db 0F4h
.eh_frame_hdr:0000000000009B89                 db 0B1h
.eh_frame_hdr:0000000000009B8A                 db 0FFh
.eh_frame_hdr:0000000000009B8B                 db 0FFh
.eh_frame_hdr:0000000000009B8C                 db 0BCh
.eh_frame_hdr:0000000000009B8D                 db    8
.eh_frame_hdr:0000000000009B8E                 db    0
.eh_frame_hdr:0000000000009B8F                 db    0
.eh_frame_hdr:0000000000009B90                 db    4
.eh_frame_hdr:0000000000009B91                 db 0B2h
.eh_frame_hdr:0000000000009B92                 db 0FFh
.eh_frame_hdr:0000000000009B93                 db 0FFh
.eh_frame_hdr:0000000000009B94                 db 0D0h
.eh_frame_hdr:0000000000009B95                 db    8
.eh_frame_hdr:0000000000009B96                 db    0
.eh_frame_hdr:0000000000009B97                 db    0
.eh_frame_hdr:0000000000009B98                 db  14h
.eh_frame_hdr:0000000000009B99                 db 0B2h
.eh_frame_hdr:0000000000009B9A                 db 0FFh
.eh_frame_hdr:0000000000009B9B                 db 0FFh
.eh_frame_hdr:0000000000009B9C                 db 0E4h
.eh_frame_hdr:0000000000009B9D                 db    8
.eh_frame_hdr:0000000000009B9E                 db    0
.eh_frame_hdr:0000000000009B9F                 db    0
.eh_frame_hdr:0000000000009BA0                 db 0B4h
.eh_frame_hdr:0000000000009BA1                 db 0B2h
.eh_frame_hdr:0000000000009BA2                 db 0FFh
.eh_frame_hdr:0000000000009BA3                 db 0FFh
.eh_frame_hdr:0000000000009BA4                 db    0
.eh_frame_hdr:0000000000009BA5                 db    9
.eh_frame_hdr:0000000000009BA6                 db    0
.eh_frame_hdr:0000000000009BA7                 db    0
.eh_frame_hdr:0000000000009BA8                 db 0C4h
.eh_frame_hdr:0000000000009BA9                 db 0B2h
.eh_frame_hdr:0000000000009BAA                 db 0FFh
.eh_frame_hdr:0000000000009BAB                 db 0FFh
.eh_frame_hdr:0000000000009BAC                 db  14h
.eh_frame_hdr:0000000000009BAD                 db    9
.eh_frame_hdr:0000000000009BAE                 db    0
.eh_frame_hdr:0000000000009BAF                 db    0
.eh_frame_hdr:0000000000009BB0                 db 0E4h
.eh_frame_hdr:0000000000009BB1                 db 0B2h
.eh_frame_hdr:0000000000009BB2                 db 0FFh
.eh_frame_hdr:0000000000009BB3                 db 0FFh
.eh_frame_hdr:0000000000009BB4                 db  28h ; (
.eh_frame_hdr:0000000000009BB5                 db    9
.eh_frame_hdr:0000000000009BB6                 db    0
.eh_frame_hdr:0000000000009BB7                 db    0
.eh_frame_hdr:0000000000009BB8                 db 0F4h
.eh_frame_hdr:0000000000009BB9                 db 0B2h
.eh_frame_hdr:0000000000009BBA                 db 0FFh
.eh_frame_hdr:0000000000009BBB                 db 0FFh
.eh_frame_hdr:0000000000009BBC                 db  3Ch ; <
.eh_frame_hdr:0000000000009BBD                 db    9
.eh_frame_hdr:0000000000009BBE                 db    0
.eh_frame_hdr:0000000000009BBF                 db    0
.eh_frame_hdr:0000000000009BC0                 db  84h
.eh_frame_hdr:0000000000009BC1                 db 0B3h
.eh_frame_hdr:0000000000009BC2                 db 0FFh
.eh_frame_hdr:0000000000009BC3                 db 0FFh
.eh_frame_hdr:0000000000009BC4                 db  58h ; X
.eh_frame_hdr:0000000000009BC5                 db    9
.eh_frame_hdr:0000000000009BC6                 db    0
.eh_frame_hdr:0000000000009BC7                 db    0
.eh_frame_hdr:0000000000009BC8                 db  24h ; $
.eh_frame_hdr:0000000000009BC9                 db 0B4h
.eh_frame_hdr:0000000000009BCA                 db 0FFh
.eh_frame_hdr:0000000000009BCB                 db 0FFh
.eh_frame_hdr:0000000000009BCC                 db  74h ; t
.eh_frame_hdr:0000000000009BCD                 db    9
.eh_frame_hdr:0000000000009BCE                 db    0
.eh_frame_hdr:0000000000009BCF                 db    0
.eh_frame_hdr:0000000000009BD0                 db  34h ; 4
.eh_frame_hdr:0000000000009BD1                 db 0B4h
.eh_frame_hdr:0000000000009BD2                 db 0FFh
.eh_frame_hdr:0000000000009BD3                 db 0FFh
.eh_frame_hdr:0000000000009BD4                 db  88h
.eh_frame_hdr:0000000000009BD5                 db    9
.eh_frame_hdr:0000000000009BD6                 db    0
.eh_frame_hdr:0000000000009BD7                 db    0
.eh_frame_hdr:0000000000009BD8                 db  54h ; T
.eh_frame_hdr:0000000000009BD9                 db 0B4h
.eh_frame_hdr:0000000000009BDA                 db 0FFh
.eh_frame_hdr:0000000000009BDB                 db 0FFh
.eh_frame_hdr:0000000000009BDC                 db  9Ch
.eh_frame_hdr:0000000000009BDD                 db    9
.eh_frame_hdr:0000000000009BDE                 db    0
.eh_frame_hdr:0000000000009BDF                 db    0
.eh_frame_hdr:0000000000009BE0                 db  74h ; t
.eh_frame_hdr:0000000000009BE1                 db 0B4h
.eh_frame_hdr:0000000000009BE2                 db 0FFh
.eh_frame_hdr:0000000000009BE3                 db 0FFh
.eh_frame_hdr:0000000000009BE4                 db 0B0h
.eh_frame_hdr:0000000000009BE5                 db    9
.eh_frame_hdr:0000000000009BE6                 db    0
.eh_frame_hdr:0000000000009BE7                 db    0
.eh_frame_hdr:0000000000009BE8                 db  84h
.eh_frame_hdr:0000000000009BE9                 db 0B4h
.eh_frame_hdr:0000000000009BEA                 db 0FFh
.eh_frame_hdr:0000000000009BEB                 db 0FFh
.eh_frame_hdr:0000000000009BEC                 db 0C4h
.eh_frame_hdr:0000000000009BED                 db    9
.eh_frame_hdr:0000000000009BEE                 db    0
.eh_frame_hdr:0000000000009BEF                 db    0
.eh_frame_hdr:0000000000009BF0                 db 0A4h
.eh_frame_hdr:0000000000009BF1                 db 0B4h
.eh_frame_hdr:0000000000009BF2                 db 0FFh
.eh_frame_hdr:0000000000009BF3                 db 0FFh
.eh_frame_hdr:0000000000009BF4                 db 0D8h
.eh_frame_hdr:0000000000009BF5                 db    9
.eh_frame_hdr:0000000000009BF6                 db    0
.eh_frame_hdr:0000000000009BF7                 db    0
.eh_frame_hdr:0000000000009BF8                 db 0C4h
.eh_frame_hdr:0000000000009BF9                 db 0B4h
.eh_frame_hdr:0000000000009BFA                 db 0FFh
.eh_frame_hdr:0000000000009BFB                 db 0FFh
.eh_frame_hdr:0000000000009BFC                 db 0ECh
.eh_frame_hdr:0000000000009BFD                 db    9
.eh_frame_hdr:0000000000009BFE                 db    0
.eh_frame_hdr:0000000000009BFF                 db    0
.eh_frame_hdr:0000000000009C00                 db 0E4h
.eh_frame_hdr:0000000000009C01                 db 0B4h
.eh_frame_hdr:0000000000009C02                 db 0FFh
.eh_frame_hdr:0000000000009C03                 db 0FFh
.eh_frame_hdr:0000000000009C04                 db    4
.eh_frame_hdr:0000000000009C05                 db  0Ah
.eh_frame_hdr:0000000000009C06                 db    0
.eh_frame_hdr:0000000000009C07                 db    0
.eh_frame_hdr:0000000000009C08                 db    4
.eh_frame_hdr:0000000000009C09                 db 0B5h
.eh_frame_hdr:0000000000009C0A                 db 0FFh
.eh_frame_hdr:0000000000009C0B                 db 0FFh
.eh_frame_hdr:0000000000009C0C                 db  1Ch
.eh_frame_hdr:0000000000009C0D                 db  0Ah
.eh_frame_hdr:0000000000009C0E                 db    0
.eh_frame_hdr:0000000000009C0F                 db    0
.eh_frame_hdr:0000000000009C10                 db  54h ; T
.eh_frame_hdr:0000000000009C11                 db 0B5h
.eh_frame_hdr:0000000000009C12                 db 0FFh
.eh_frame_hdr:0000000000009C13                 db 0FFh
.eh_frame_hdr:0000000000009C14                 db  3Ch ; <
.eh_frame_hdr:0000000000009C15                 db  0Ah
.eh_frame_hdr:0000000000009C16                 db    0
.eh_frame_hdr:0000000000009C17                 db    0
.eh_frame_hdr:0000000000009C18                 db 0E4h
.eh_frame_hdr:0000000000009C19                 db 0B5h
.eh_frame_hdr:0000000000009C1A                 db 0FFh
.eh_frame_hdr:0000000000009C1B                 db 0FFh
.eh_frame_hdr:0000000000009C1C                 db  70h ; p
.eh_frame_hdr:0000000000009C1D                 db  0Ah
.eh_frame_hdr:0000000000009C1E                 db    0
.eh_frame_hdr:0000000000009C1F                 db    0
.eh_frame_hdr:0000000000009C20                 db 0F4h
.eh_frame_hdr:0000000000009C21                 db 0B7h
.eh_frame_hdr:0000000000009C22                 db 0FFh
.eh_frame_hdr:0000000000009C23                 db 0FFh
.eh_frame_hdr:0000000000009C24                 db 0BCh
.eh_frame_hdr:0000000000009C25                 db  0Ah
.eh_frame_hdr:0000000000009C26                 db    0
.eh_frame_hdr:0000000000009C27                 db    0
.eh_frame_hdr:0000000000009C28                 db  24h ; $
.eh_frame_hdr:0000000000009C29                 db 0B8h
.eh_frame_hdr:0000000000009C2A                 db 0FFh
.eh_frame_hdr:0000000000009C2B                 db 0FFh
.eh_frame_hdr:0000000000009C2C                 db 0D4h
.eh_frame_hdr:0000000000009C2D                 db  0Ah
.eh_frame_hdr:0000000000009C2E                 db    0
.eh_frame_hdr:0000000000009C2F                 db    0
.eh_frame_hdr:0000000000009C30                 db 0D4h
.eh_frame_hdr:0000000000009C31                 db 0B8h
.eh_frame_hdr:0000000000009C32                 db 0FFh
.eh_frame_hdr:0000000000009C33                 db 0FFh
.eh_frame_hdr:0000000000009C34                 db 0ECh
.eh_frame_hdr:0000000000009C35                 db  0Ah
.eh_frame_hdr:0000000000009C36                 db    0
.eh_frame_hdr:0000000000009C37                 db    0
.eh_frame_hdr:0000000000009C38                 db 0F4h
.eh_frame_hdr:0000000000009C39                 db 0BCh
.eh_frame_hdr:0000000000009C3A                 db 0FFh
.eh_frame_hdr:0000000000009C3B                 db 0FFh
.eh_frame_hdr:0000000000009C3C                 db    0
.eh_frame_hdr:0000000000009C3D                 db  0Ch
.eh_frame_hdr:0000000000009C3E                 db    0
.eh_frame_hdr:0000000000009C3F                 db    0
.eh_frame_hdr:0000000000009C40                 db  14h
.eh_frame_hdr:0000000000009C41                 db 0BDh
.eh_frame_hdr:0000000000009C42                 db 0FFh
.eh_frame_hdr:0000000000009C43                 db 0FFh
.eh_frame_hdr:0000000000009C44                 db  14h
.eh_frame_hdr:0000000000009C45                 db  0Ch
.eh_frame_hdr:0000000000009C46                 db    0
.eh_frame_hdr:0000000000009C47                 db    0
.eh_frame_hdr:0000000000009C48                 db  94h
.eh_frame_hdr:0000000000009C49                 db 0BDh
.eh_frame_hdr:0000000000009C4A                 db 0FFh
.eh_frame_hdr:0000000000009C4B                 db 0FFh
.eh_frame_hdr:0000000000009C4C                 db  30h ; 0
.eh_frame_hdr:0000000000009C4D                 db  0Ch
.eh_frame_hdr:0000000000009C4E                 db    0
.eh_frame_hdr:0000000000009C4F                 db    0
.eh_frame_hdr:0000000000009C50                 db  74h ; t
.eh_frame_hdr:0000000000009C51                 db 0BEh
.eh_frame_hdr:0000000000009C52                 db 0FFh
.eh_frame_hdr:0000000000009C53                 db 0FFh
.eh_frame_hdr:0000000000009C54                 db  5Ch ; \
.eh_frame_hdr:0000000000009C55                 db  0Ch
.eh_frame_hdr:0000000000009C56                 db    0
.eh_frame_hdr:0000000000009C57                 db    0
.eh_frame_hdr:0000000000009C58                 db 0F4h
.eh_frame_hdr:0000000000009C59                 db 0BEh
.eh_frame_hdr:0000000000009C5A                 db 0FFh
.eh_frame_hdr:0000000000009C5B                 db 0FFh
.eh_frame_hdr:0000000000009C5C                 db  7Ch ; |
.eh_frame_hdr:0000000000009C5D                 db  0Ch
.eh_frame_hdr:0000000000009C5E                 db    0
.eh_frame_hdr:0000000000009C5F                 db    0
.eh_frame_hdr:0000000000009C60                 db  14h
.eh_frame_hdr:0000000000009C61                 db 0BFh
.eh_frame_hdr:0000000000009C62                 db 0FFh
.eh_frame_hdr:0000000000009C63                 db 0FFh
.eh_frame_hdr:0000000000009C64                 db  98h
.eh_frame_hdr:0000000000009C65                 db  0Ch
.eh_frame_hdr:0000000000009C66                 db    0
.eh_frame_hdr:0000000000009C67                 db    0
.eh_frame_hdr:0000000000009C68                 db  44h ; D
.eh_frame_hdr:0000000000009C69                 db 0BFh
.eh_frame_hdr:0000000000009C6A                 db 0FFh
.eh_frame_hdr:0000000000009C6B                 db 0FFh
.eh_frame_hdr:0000000000009C6C                 db 0ACh
.eh_frame_hdr:0000000000009C6D                 db  0Ch
.eh_frame_hdr:0000000000009C6E                 db    0
.eh_frame_hdr:0000000000009C6F                 db    0
.eh_frame_hdr:0000000000009C70                 db  54h ; T
.eh_frame_hdr:0000000000009C71                 db 0BFh
.eh_frame_hdr:0000000000009C72                 db 0FFh
.eh_frame_hdr:0000000000009C73                 db 0FFh
.eh_frame_hdr:0000000000009C74                 db 0C0h
.eh_frame_hdr:0000000000009C75                 db  0Ch
.eh_frame_hdr:0000000000009C76                 db    0
.eh_frame_hdr:0000000000009C77                 db    0
.eh_frame_hdr:0000000000009C78                 db  94h
.eh_frame_hdr:0000000000009C79                 db 0BFh
.eh_frame_hdr:0000000000009C7A                 db 0FFh
.eh_frame_hdr:0000000000009C7B                 db 0FFh
.eh_frame_hdr:0000000000009C7C                 db 0E4h
.eh_frame_hdr:0000000000009C7D                 db  0Ch
.eh_frame_hdr:0000000000009C7E                 db    0
.eh_frame_hdr:0000000000009C7F                 db    0
.eh_frame_hdr:0000000000009C80                 db 0C4h
.eh_frame_hdr:0000000000009C81                 db 0BFh
.eh_frame_hdr:0000000000009C82                 db 0FFh
.eh_frame_hdr:0000000000009C83                 db 0FFh
.eh_frame_hdr:0000000000009C84                 db 0F8h
.eh_frame_hdr:0000000000009C85                 db  0Ch
.eh_frame_hdr:0000000000009C86                 db    0
.eh_frame_hdr:0000000000009C87                 db    0
.eh_frame_hdr:0000000000009C88                 db  54h ; T
.eh_frame_hdr:0000000000009C89                 db 0C0h
.eh_frame_hdr:0000000000009C8A                 db 0FFh
.eh_frame_hdr:0000000000009C8B                 db 0FFh
.eh_frame_hdr:0000000000009C8C                 db  10h
.eh_frame_hdr:0000000000009C8D                 db  0Dh
.eh_frame_hdr:0000000000009C8E                 db    0
.eh_frame_hdr:0000000000009C8F                 db    0
.eh_frame_hdr:0000000000009C90                 db 0A4h
.eh_frame_hdr:0000000000009C91                 db 0C0h
.eh_frame_hdr:0000000000009C92                 db 0FFh
.eh_frame_hdr:0000000000009C93                 db 0FFh
.eh_frame_hdr:0000000000009C94                 db  28h ; (
.eh_frame_hdr:0000000000009C95                 db  0Dh
.eh_frame_hdr:0000000000009C96                 db    0
.eh_frame_hdr:0000000000009C97                 db    0
.eh_frame_hdr:0000000000009C98                 db 0C4h
.eh_frame_hdr:0000000000009C99                 db 0C0h
.eh_frame_hdr:0000000000009C9A                 db 0FFh
.eh_frame_hdr:0000000000009C9B                 db 0FFh
.eh_frame_hdr:0000000000009C9C                 db  44h ; D
.eh_frame_hdr:0000000000009C9D                 db  0Dh
.eh_frame_hdr:0000000000009C9E                 db    0
.eh_frame_hdr:0000000000009C9F                 db    0
.eh_frame_hdr:0000000000009CA0                 db 0F4h
.eh_frame_hdr:0000000000009CA1                 db 0C0h
.eh_frame_hdr:0000000000009CA2                 db 0FFh
.eh_frame_hdr:0000000000009CA3                 db 0FFh
.eh_frame_hdr:0000000000009CA4                 db  60h ; `
.eh_frame_hdr:0000000000009CA5                 db  0Dh
.eh_frame_hdr:0000000000009CA6                 db    0
.eh_frame_hdr:0000000000009CA7                 db    0
.eh_frame_hdr:0000000000009CA8                 db  24h ; $
.eh_frame_hdr:0000000000009CA9                 db 0C1h
.eh_frame_hdr:0000000000009CAA                 db 0FFh
.eh_frame_hdr:0000000000009CAB                 db 0FFh
.eh_frame_hdr:0000000000009CAC                 db  88h
.eh_frame_hdr:0000000000009CAD                 db  0Dh
.eh_frame_hdr:0000000000009CAE                 db    0
.eh_frame_hdr:0000000000009CAF                 db    0
.eh_frame_hdr:0000000000009CB0                 db  44h ; D
.eh_frame_hdr:0000000000009CB1                 db 0C1h
.eh_frame_hdr:0000000000009CB2                 db 0FFh
.eh_frame_hdr:0000000000009CB3                 db 0FFh
.eh_frame_hdr:0000000000009CB4                 db 0A4h
.eh_frame_hdr:0000000000009CB5                 db  0Dh
.eh_frame_hdr:0000000000009CB6                 db    0
.eh_frame_hdr:0000000000009CB7                 db    0
.eh_frame_hdr:0000000000009CB8                 db  84h
.eh_frame_hdr:0000000000009CB9                 db 0C1h
.eh_frame_hdr:0000000000009CBA                 db 0FFh
.eh_frame_hdr:0000000000009CBB                 db 0FFh
.eh_frame_hdr:0000000000009CBC                 db 0BCh
.eh_frame_hdr:0000000000009CBD                 db  0Dh
.eh_frame_hdr:0000000000009CBE                 db    0
.eh_frame_hdr:0000000000009CBF                 db    0
.eh_frame_hdr:0000000000009CC0                 db 0E4h
.eh_frame_hdr:0000000000009CC1                 db 0C1h
.eh_frame_hdr:0000000000009CC2                 db 0FFh
.eh_frame_hdr:0000000000009CC3                 db 0FFh
.eh_frame_hdr:0000000000009CC4                 db 0E8h
.eh_frame_hdr:0000000000009CC5                 db  0Dh
.eh_frame_hdr:0000000000009CC6                 db    0
.eh_frame_hdr:0000000000009CC7                 db    0
.eh_frame_hdr:0000000000009CC8                 db 0A4h
.eh_frame_hdr:0000000000009CC9                 db 0C2h
.eh_frame_hdr:0000000000009CCA                 db 0FFh
.eh_frame_hdr:0000000000009CCB                 db 0FFh
.eh_frame_hdr:0000000000009CCC                 db    4
.eh_frame_hdr:0000000000009CCD                 db  0Eh
.eh_frame_hdr:0000000000009CCE                 db    0
.eh_frame_hdr:0000000000009CCF                 db    0
.eh_frame_hdr:0000000000009CD0                 db    4
.eh_frame_hdr:0000000000009CD1                 db 0C3h
.eh_frame_hdr:0000000000009CD2                 db 0FFh
.eh_frame_hdr:0000000000009CD3                 db 0FFh
.eh_frame_hdr:0000000000009CD4                 db  30h ; 0
.eh_frame_hdr:0000000000009CD5                 db  0Eh
.eh_frame_hdr:0000000000009CD6                 db    0
.eh_frame_hdr:0000000000009CD7                 db    0
.eh_frame_hdr:0000000000009CD8                 db 0C4h
.eh_frame_hdr:0000000000009CD9                 db 0C3h
.eh_frame_hdr:0000000000009CDA                 db 0FFh
.eh_frame_hdr:0000000000009CDB                 db 0FFh
.eh_frame_hdr:0000000000009CDC                 db  4Ch ; L
.eh_frame_hdr:0000000000009CDD                 db  0Eh
.eh_frame_hdr:0000000000009CDE                 db    0
.eh_frame_hdr:0000000000009CDF                 db    0
.eh_frame_hdr:0000000000009CE0                 db  54h ; T
.eh_frame_hdr:0000000000009CE1                 db 0C4h
.eh_frame_hdr:0000000000009CE2                 db 0FFh
.eh_frame_hdr:0000000000009CE3                 db 0FFh
.eh_frame_hdr:0000000000009CE4                 db  8Ch
.eh_frame_hdr:0000000000009CE5                 db  0Eh
.eh_frame_hdr:0000000000009CE6                 db    0
.eh_frame_hdr:0000000000009CE7                 db    0
.eh_frame_hdr:0000000000009CE8                 db  54h ; T
.eh_frame_hdr:0000000000009CE9                 db 0C5h
.eh_frame_hdr:0000000000009CEA                 db 0FFh
.eh_frame_hdr:0000000000009CEB                 db 0FFh
.eh_frame_hdr:0000000000009CEC                 db 0CCh
.eh_frame_hdr:0000000000009CED                 db  0Eh
.eh_frame_hdr:0000000000009CEE                 db    0
.eh_frame_hdr:0000000000009CEF                 db    0
.eh_frame_hdr:0000000000009CF0                 db  74h ; t
.eh_frame_hdr:0000000000009CF1                 db 0C5h
.eh_frame_hdr:0000000000009CF2                 db 0FFh
.eh_frame_hdr:0000000000009CF3                 db 0FFh
.eh_frame_hdr:0000000000009CF4                 db 0E4h
.eh_frame_hdr:0000000000009CF5                 db  0Eh
.eh_frame_hdr:0000000000009CF6                 db    0
.eh_frame_hdr:0000000000009CF7                 db    0
.eh_frame_hdr:0000000000009CF8                 db  34h ; 4
.eh_frame_hdr:0000000000009CF9                 db 0C6h
.eh_frame_hdr:0000000000009CFA                 db 0FFh
.eh_frame_hdr:0000000000009CFB                 db 0FFh
.eh_frame_hdr:0000000000009CFC                 db  3Ch ; <
.eh_frame_hdr:0000000000009CFD                 db  0Fh
.eh_frame_hdr:0000000000009CFE                 db    0
.eh_frame_hdr:0000000000009CFF                 db    0
.eh_frame_hdr:0000000000009D00                 db 0B4h
.eh_frame_hdr:0000000000009D01                 db 0C6h
.eh_frame_hdr:0000000000009D02                 db 0FFh
.eh_frame_hdr:0000000000009D03                 db 0FFh
.eh_frame_hdr:0000000000009D04                 db  8Ch
.eh_frame_hdr:0000000000009D05                 db  0Fh
.eh_frame_hdr:0000000000009D06                 db    0
.eh_frame_hdr:0000000000009D07                 db    0
.eh_frame_hdr:0000000000009D08                 db  14h
.eh_frame_hdr:0000000000009D09                 db 0C7h
.eh_frame_hdr:0000000000009D0A                 db 0FFh
.eh_frame_hdr:0000000000009D0B                 db 0FFh
.eh_frame_hdr:0000000000009D0C                 db 0ACh
.eh_frame_hdr:0000000000009D0D                 db  0Fh
.eh_frame_hdr:0000000000009D0E                 db    0
.eh_frame_hdr:0000000000009D0F                 db    0
.eh_frame_hdr:0000000000009D10                 db  54h ; T
.eh_frame_hdr:0000000000009D11                 db 0C7h
.eh_frame_hdr:0000000000009D12                 db 0FFh
.eh_frame_hdr:0000000000009D13                 db 0FFh
.eh_frame_hdr:0000000000009D14                 db 0CCh
.eh_frame_hdr:0000000000009D15                 db  0Fh
.eh_frame_hdr:0000000000009D16                 db    0
.eh_frame_hdr:0000000000009D17                 db    0
.eh_frame_hdr:0000000000009D18                 db 0D4h
.eh_frame_hdr:0000000000009D19                 db 0C7h
.eh_frame_hdr:0000000000009D1A                 db 0FFh
.eh_frame_hdr:0000000000009D1B                 db 0FFh
.eh_frame_hdr:0000000000009D1C                 db    4
.eh_frame_hdr:0000000000009D1D                 db  10h
.eh_frame_hdr:0000000000009D1E                 db    0
.eh_frame_hdr:0000000000009D1F                 db    0
.eh_frame_hdr:0000000000009D20                 db  14h
.eh_frame_hdr:0000000000009D21                 db 0C8h
.eh_frame_hdr:0000000000009D22                 db 0FFh
.eh_frame_hdr:0000000000009D23                 db 0FFh
.eh_frame_hdr:0000000000009D24                 db  24h ; $
.eh_frame_hdr:0000000000009D25                 db  10h
.eh_frame_hdr:0000000000009D26                 db    0
.eh_frame_hdr:0000000000009D27                 db    0
.eh_frame_hdr:0000000000009D28                 db  74h ; t
.eh_frame_hdr:0000000000009D29                 db 0C8h
.eh_frame_hdr:0000000000009D2A                 db 0FFh
.eh_frame_hdr:0000000000009D2B                 db 0FFh
.eh_frame_hdr:0000000000009D2C                 db  54h ; T
.eh_frame_hdr:0000000000009D2D                 db  10h
.eh_frame_hdr:0000000000009D2E                 db    0
.eh_frame_hdr:0000000000009D2F                 db    0
.eh_frame_hdr:0000000000009D30                 db  84h
.eh_frame_hdr:0000000000009D31                 db 0C8h
.eh_frame_hdr:0000000000009D32                 db 0FFh
.eh_frame_hdr:0000000000009D33                 db 0FFh
.eh_frame_hdr:0000000000009D34                 db  6Ch ; l
.eh_frame_hdr:0000000000009D35                 db  10h
.eh_frame_hdr:0000000000009D36                 db    0
.eh_frame_hdr:0000000000009D37                 db    0
.eh_frame_hdr:0000000000009D38                 db 0A4h
.eh_frame_hdr:0000000000009D39                 db 0D9h
.eh_frame_hdr:0000000000009D3A                 db 0FFh
.eh_frame_hdr:0000000000009D3B                 db 0FFh
.eh_frame_hdr:0000000000009D3C                 db  9Ch
.eh_frame_hdr:0000000000009D3D                 db  10h
.eh_frame_hdr:0000000000009D3E                 db    0
.eh_frame_hdr:0000000000009D3F                 db    0
.eh_frame_hdr:0000000000009D40                 db 0A4h
.eh_frame_hdr:0000000000009D41                 db 0DBh
.eh_frame_hdr:0000000000009D42                 db 0FFh
.eh_frame_hdr:0000000000009D43                 db 0FFh
.eh_frame_hdr:0000000000009D44                 db 0B4h
.eh_frame_hdr:0000000000009D45                 db  10h
.eh_frame_hdr:0000000000009D46                 db    0
.eh_frame_hdr:0000000000009D47                 db    0
.eh_frame_hdr:0000000000009D48                 db  94h
.eh_frame_hdr:0000000000009D49                 db 0E8h
.eh_frame_hdr:0000000000009D4A                 db 0FFh
.eh_frame_hdr:0000000000009D4B                 db 0FFh
.eh_frame_hdr:0000000000009D4C                 db    4
.eh_frame_hdr:0000000000009D4D                 db  11h
.eh_frame_hdr:0000000000009D4E                 db    0
.eh_frame_hdr:0000000000009D4F                 db    0
.eh_frame_hdr:0000000000009D50                 db    4
.eh_frame_hdr:0000000000009D51                 db 0E9h
.eh_frame_hdr:0000000000009D52                 db 0FFh
.eh_frame_hdr:0000000000009D53                 db 0FFh
.eh_frame_hdr:0000000000009D54                 db  4Ch ; L
.eh_frame_hdr:0000000000009D55                 db  11h
.eh_frame_hdr:0000000000009D56                 db    0
.eh_frame_hdr:0000000000009D57                 db    0
.eh_frame_hdr:0000000000009D58                 db  14h
.eh_frame_hdr:0000000000009D59                 db 0E9h
.eh_frame_hdr:0000000000009D5A                 db 0FFh
.eh_frame_hdr:0000000000009D5B                 db 0FFh
.eh_frame_hdr:0000000000009D5C                 db  64h ; d
.eh_frame_hdr:0000000000009D5D                 db  11h
.eh_frame_hdr:0000000000009D5E                 db    0
.eh_frame_hdr:0000000000009D5F                 db    0
.eh_frame_hdr:0000000000009D5F _eh_frame_hdr   ends
.eh_frame_hdr:0000000000009D5F
.eh_frame:0000000000009D60 ; ===========================================================================
.eh_frame:0000000000009D60
.eh_frame:0000000000009D60 ; Segment type: Pure data
.eh_frame:0000000000009D60 ; Segment permissions: Read
.eh_frame:0000000000009D60 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000009D60                 assume cs:_eh_frame
.eh_frame:0000000000009D60                 ;org 9D60h
.eh_frame:0000000000009D60                 db  14h
.eh_frame:0000000000009D61                 db    0
.eh_frame:0000000000009D62                 db    0
.eh_frame:0000000000009D63                 db    0
.eh_frame:0000000000009D64                 db    0
.eh_frame:0000000000009D65                 db    0
.eh_frame:0000000000009D66                 db    0
.eh_frame:0000000000009D67                 db    0
.eh_frame:0000000000009D68                 db    1
.eh_frame:0000000000009D69                 db  7Ah ; z
.eh_frame:0000000000009D6A                 db  52h ; R
.eh_frame:0000000000009D6B                 db    0
.eh_frame:0000000000009D6C                 db    1
.eh_frame:0000000000009D6D                 db  78h ; x
.eh_frame:0000000000009D6E                 db  10h
.eh_frame:0000000000009D6F                 db    1
.eh_frame:0000000000009D70                 db  1Bh
.eh_frame:0000000000009D71                 db  0Ch
.eh_frame:0000000000009D72                 db    7
.eh_frame:0000000000009D73                 db    8
.eh_frame:0000000000009D74                 db  90h
.eh_frame:0000000000009D75                 db    1
.eh_frame:0000000000009D76                 db    7
.eh_frame:0000000000009D77                 db  10h
.eh_frame:0000000000009D78                 db  14h
.eh_frame:0000000000009D79                 db    0
.eh_frame:0000000000009D7A                 db    0
.eh_frame:0000000000009D7B                 db    0
.eh_frame:0000000000009D7C                 db  1Ch
.eh_frame:0000000000009D7D                 db    0
.eh_frame:0000000000009D7E                 db    0
.eh_frame:0000000000009D7F                 db    0
.eh_frame:0000000000009D80                 db  90h
.eh_frame:0000000000009D81                 db  87h
.eh_frame:0000000000009D82                 db 0FFh
.eh_frame:0000000000009D83                 db 0FFh
.eh_frame:0000000000009D84                 db  2Bh ; +
.eh_frame:0000000000009D85                 db    0
.eh_frame:0000000000009D86                 db    0
.eh_frame:0000000000009D87                 db    0
.eh_frame:0000000000009D88                 db    0
.eh_frame:0000000000009D89                 db    0
.eh_frame:0000000000009D8A                 db    0
.eh_frame:0000000000009D8B                 db    0
.eh_frame:0000000000009D8C                 db    0
.eh_frame:0000000000009D8D                 db    0
.eh_frame:0000000000009D8E                 db    0
.eh_frame:0000000000009D8F                 db    0
.eh_frame:0000000000009D90                 db  14h
.eh_frame:0000000000009D91                 db    0
.eh_frame:0000000000009D92                 db    0
.eh_frame:0000000000009D93                 db    0
.eh_frame:0000000000009D94                 db    0
.eh_frame:0000000000009D95                 db    0
.eh_frame:0000000000009D96                 db    0
.eh_frame:0000000000009D97                 db    0
.eh_frame:0000000000009D98                 db    1
.eh_frame:0000000000009D99                 db  7Ah ; z
.eh_frame:0000000000009D9A                 db  52h ; R
.eh_frame:0000000000009D9B                 db    0
.eh_frame:0000000000009D9C                 db    1
.eh_frame:0000000000009D9D                 db  78h ; x
.eh_frame:0000000000009D9E                 db  10h
.eh_frame:0000000000009D9F                 db    1
.eh_frame:0000000000009DA0                 db  1Bh
.eh_frame:0000000000009DA1                 db  0Ch
.eh_frame:0000000000009DA2                 db    7
.eh_frame:0000000000009DA3                 db    8
.eh_frame:0000000000009DA4                 db  90h
.eh_frame:0000000000009DA5                 db    1
.eh_frame:0000000000009DA6                 db    0
.eh_frame:0000000000009DA7                 db    0
.eh_frame:0000000000009DA8                 db  24h ; $
.eh_frame:0000000000009DA9                 db    0
.eh_frame:0000000000009DAA                 db    0
.eh_frame:0000000000009DAB                 db    0
.eh_frame:0000000000009DAC                 db  1Ch
.eh_frame:0000000000009DAD                 db    0
.eh_frame:0000000000009DAE                 db    0
.eh_frame:0000000000009DAF                 db    0
.eh_frame:0000000000009DB0                 db  50h ; P
.eh_frame:0000000000009DB1                 db  76h ; v
.eh_frame:0000000000009DB2                 db 0FFh
.eh_frame:0000000000009DB3                 db 0FFh
.eh_frame:0000000000009DB4                 db  50h ; P
.eh_frame:0000000000009DB5                 db    3
.eh_frame:0000000000009DB6                 db    0
.eh_frame:0000000000009DB7                 db    0
.eh_frame:0000000000009DB8                 db    0
.eh_frame:0000000000009DB9                 db  0Eh
.eh_frame:0000000000009DBA                 db  10h
.eh_frame:0000000000009DBB                 db  46h ; F
.eh_frame:0000000000009DBC                 db  0Eh
.eh_frame:0000000000009DBD                 db  18h
.eh_frame:0000000000009DBE                 db  4Ah ; J
.eh_frame:0000000000009DBF                 db  0Fh
.eh_frame:0000000000009DC0                 db  0Bh
.eh_frame:0000000000009DC1                 db  77h ; w
.eh_frame:0000000000009DC2                 db    8
.eh_frame:0000000000009DC3                 db  80h
.eh_frame:0000000000009DC4                 db    0
.eh_frame:0000000000009DC5                 db  3Fh ; ?
.eh_frame:0000000000009DC6                 db  1Ah
.eh_frame:0000000000009DC7                 db  3Bh ; ;
.eh_frame:0000000000009DC8                 db  2Ah ; *
.eh_frame:0000000000009DC9                 db  33h ; 3
.eh_frame:0000000000009DCA                 db  24h ; $
.eh_frame:0000000000009DCB                 db  22h ; "
.eh_frame:0000000000009DCC                 db    0
.eh_frame:0000000000009DCD                 db    0
.eh_frame:0000000000009DCE                 db    0
.eh_frame:0000000000009DCF                 db    0
.eh_frame:0000000000009DD0                 db  14h
.eh_frame:0000000000009DD1                 db    0
.eh_frame:0000000000009DD2                 db    0
.eh_frame:0000000000009DD3                 db    0
.eh_frame:0000000000009DD4                 db  44h ; D
.eh_frame:0000000000009DD5                 db    0
.eh_frame:0000000000009DD6                 db    0
.eh_frame:0000000000009DD7                 db    0
.eh_frame:0000000000009DD8                 db  78h ; x
.eh_frame:0000000000009DD9                 db  79h ; y
.eh_frame:0000000000009DDA                 db 0FFh
.eh_frame:0000000000009DDB                 db 0FFh
.eh_frame:0000000000009DDC                 db    8
.eh_frame:0000000000009DDD                 db    0
.eh_frame:0000000000009DDE                 db    0
.eh_frame:0000000000009DDF                 db    0
.eh_frame:0000000000009DE0                 db    0
.eh_frame:0000000000009DE1                 db    0
.eh_frame:0000000000009DE2                 db    0
.eh_frame:0000000000009DE3                 db    0
.eh_frame:0000000000009DE4                 db    0
.eh_frame:0000000000009DE5                 db    0
.eh_frame:0000000000009DE6                 db    0
.eh_frame:0000000000009DE7                 db    0
.eh_frame:0000000000009DE8                 db  38h ; 8
.eh_frame:0000000000009DE9                 db    0
.eh_frame:0000000000009DEA                 db    0
.eh_frame:0000000000009DEB                 db    0
.eh_frame:0000000000009DEC                 db  5Ch ; \
.eh_frame:0000000000009DED                 db    0
.eh_frame:0000000000009DEE                 db    0
.eh_frame:0000000000009DEF                 db    0
.eh_frame:0000000000009DF0                 db  30h ; 0
.eh_frame:0000000000009DF1                 db  88h
.eh_frame:0000000000009DF2                 db 0FFh
.eh_frame:0000000000009DF3                 db 0FFh
.eh_frame:0000000000009DF4                 db  16h
.eh_frame:0000000000009DF5                 db    5
.eh_frame:0000000000009DF6                 db    0
.eh_frame:0000000000009DF7                 db    0
.eh_frame:0000000000009DF8                 db    0
.eh_frame:0000000000009DF9                 db  42h ; B
.eh_frame:0000000000009DFA                 db  0Eh
.eh_frame:0000000000009DFB                 db  10h
.eh_frame:0000000000009DFC                 db  8Dh
.eh_frame:0000000000009DFD                 db    2
.eh_frame:0000000000009DFE                 db  42h ; B
.eh_frame:0000000000009DFF                 db  0Eh
.eh_frame:0000000000009E00                 db  18h
.eh_frame:0000000000009E01                 db  8Ch
.eh_frame:0000000000009E02                 db    3
.eh_frame:0000000000009E03                 db  44h ; D
.eh_frame:0000000000009E04                 db  0Eh
.eh_frame:0000000000009E05                 db  20h
.eh_frame:0000000000009E06                 db  86h
.eh_frame:0000000000009E07                 db    4
.eh_frame:0000000000009E08                 db  41h ; A
.eh_frame:0000000000009E09                 db  0Eh
.eh_frame:0000000000009E0A                 db  28h ; (
.eh_frame:0000000000009E0B                 db  83h
.eh_frame:0000000000009E0C                 db    5
.eh_frame:0000000000009E0D                 db  44h ; D
.eh_frame:0000000000009E0E                 db  0Eh
.eh_frame:0000000000009E0F                 db  40h ; @
.eh_frame:0000000000009E10                 db    2
.eh_frame:0000000000009E11                 db  6Fh ; o
.eh_frame:0000000000009E12                 db  0Ah
.eh_frame:0000000000009E13                 db  0Eh
.eh_frame:0000000000009E14                 db  28h ; (
.eh_frame:0000000000009E15                 db  47h ; G
.eh_frame:0000000000009E16                 db  0Eh
.eh_frame:0000000000009E17                 db  20h
.eh_frame:0000000000009E18                 db  41h ; A
.eh_frame:0000000000009E19                 db  0Eh
.eh_frame:0000000000009E1A                 db  18h
.eh_frame:0000000000009E1B                 db  42h ; B
.eh_frame:0000000000009E1C                 db  0Eh
.eh_frame:0000000000009E1D                 db  10h
.eh_frame:0000000000009E1E                 db  42h ; B
.eh_frame:0000000000009E1F                 db  0Eh
.eh_frame:0000000000009E20                 db    8
.eh_frame:0000000000009E21                 db  48h ; H
.eh_frame:0000000000009E22                 db  0Bh
.eh_frame:0000000000009E23                 db    0
.eh_frame:0000000000009E24                 db  38h ; 8
.eh_frame:0000000000009E25                 db    0
.eh_frame:0000000000009E26                 db    0
.eh_frame:0000000000009E27                 db    0
.eh_frame:0000000000009E28                 db  98h
.eh_frame:0000000000009E29                 db    0
.eh_frame:0000000000009E2A                 db    0
.eh_frame:0000000000009E2B                 db    0
.eh_frame:0000000000009E2C                 db  14h
.eh_frame:0000000000009E2D                 db  8Dh
.eh_frame:0000000000009E2E                 db 0FFh
.eh_frame:0000000000009E2F                 db 0FFh
.eh_frame:0000000000009E30                 db 0A9h
.eh_frame:0000000000009E31                 db    0
.eh_frame:0000000000009E32                 db    0
.eh_frame:0000000000009E33                 db    0
.eh_frame:0000000000009E34                 db    0
.eh_frame:0000000000009E35                 db  42h ; B
.eh_frame:0000000000009E36                 db  0Eh
.eh_frame:0000000000009E37                 db  10h
.eh_frame:0000000000009E38                 db  8Ch
.eh_frame:0000000000009E39                 db    2
.eh_frame:0000000000009E3A                 db  41h ; A
.eh_frame:0000000000009E3B                 db  0Eh
.eh_frame:0000000000009E3C                 db  18h
.eh_frame:0000000000009E3D                 db  86h
.eh_frame:0000000000009E3E                 db    3
.eh_frame:0000000000009E3F                 db  44h ; D
.eh_frame:0000000000009E40                 db  0Eh
.eh_frame:0000000000009E41                 db  20h
.eh_frame:0000000000009E42                 db  83h
.eh_frame:0000000000009E43                 db    4
.eh_frame:0000000000009E44                 db    2
.eh_frame:0000000000009E45                 db  53h ; S
.eh_frame:0000000000009E46                 db  0Ah
.eh_frame:0000000000009E47                 db  0Eh
.eh_frame:0000000000009E48                 db  18h
.eh_frame:0000000000009E49                 db  41h ; A
.eh_frame:0000000000009E4A                 db  0Eh
.eh_frame:0000000000009E4B                 db  10h
.eh_frame:0000000000009E4C                 db  42h ; B
.eh_frame:0000000000009E4D                 db  0Eh
.eh_frame:0000000000009E4E                 db    8
.eh_frame:0000000000009E4F                 db  43h ; C
.eh_frame:0000000000009E50                 db  0Bh
.eh_frame:0000000000009E51                 db  61h ; a
.eh_frame:0000000000009E52                 db  0Ah
.eh_frame:0000000000009E53                 db  0Eh
.eh_frame:0000000000009E54                 db  18h
.eh_frame:0000000000009E55                 db  4Bh ; K
.eh_frame:0000000000009E56                 db  0Eh
.eh_frame:0000000000009E57                 db  10h
.eh_frame:0000000000009E58                 db  42h ; B
.eh_frame:0000000000009E59                 db  0Eh
.eh_frame:0000000000009E5A                 db    8
.eh_frame:0000000000009E5B                 db  42h ; B
.eh_frame:0000000000009E5C                 db  0Bh
.eh_frame:0000000000009E5D                 db    0
.eh_frame:0000000000009E5E                 db    0
.eh_frame:0000000000009E5F                 db    0
.eh_frame:0000000000009E60                 db  28h ; (
.eh_frame:0000000000009E61                 db    0
.eh_frame:0000000000009E62                 db    0
.eh_frame:0000000000009E63                 db    0
.eh_frame:0000000000009E64                 db 0D4h
.eh_frame:0000000000009E65                 db    0
.eh_frame:0000000000009E66                 db    0
.eh_frame:0000000000009E67                 db    0
.eh_frame:0000000000009E68                 db  88h
.eh_frame:0000000000009E69                 db  8Dh
.eh_frame:0000000000009E6A                 db 0FFh
.eh_frame:0000000000009E6B                 db 0FFh
.eh_frame:0000000000009E6C                 db 0ABh
.eh_frame:0000000000009E6D                 db    0
.eh_frame:0000000000009E6E                 db    0
.eh_frame:0000000000009E6F                 db    0
.eh_frame:0000000000009E70                 db    0
.eh_frame:0000000000009E71                 db  41h ; A
.eh_frame:0000000000009E72                 db  0Eh
.eh_frame:0000000000009E73                 db  10h
.eh_frame:0000000000009E74                 db  86h
.eh_frame:0000000000009E75                 db    2
.eh_frame:0000000000009E76                 db  41h ; A
.eh_frame:0000000000009E77                 db  0Eh
.eh_frame:0000000000009E78                 db  18h
.eh_frame:0000000000009E79                 db  83h
.eh_frame:0000000000009E7A                 db    3
.eh_frame:0000000000009E7B                 db  47h ; G
.eh_frame:0000000000009E7C                 db  0Eh
.eh_frame:0000000000009E7D                 db  30h ; 0
.eh_frame:0000000000009E7E                 db    2
.eh_frame:0000000000009E7F                 db  64h ; d
.eh_frame:0000000000009E80                 db  0Ah
.eh_frame:0000000000009E81                 db  0Eh
.eh_frame:0000000000009E82                 db  18h
.eh_frame:0000000000009E83                 db  41h ; A
.eh_frame:0000000000009E84                 db  0Eh
.eh_frame:0000000000009E85                 db  10h
.eh_frame:0000000000009E86                 db  41h ; A
.eh_frame:0000000000009E87                 db  0Eh
.eh_frame:0000000000009E88                 db    8
.eh_frame:0000000000009E89                 db  41h ; A
.eh_frame:0000000000009E8A                 db  0Bh
.eh_frame:0000000000009E8B                 db    0
.eh_frame:0000000000009E8C                 db  28h ; (
.eh_frame:0000000000009E8D                 db    0
.eh_frame:0000000000009E8E                 db    0
.eh_frame:0000000000009E8F                 db    0
.eh_frame:0000000000009E90                 db    0
.eh_frame:0000000000009E91                 db    1
.eh_frame:0000000000009E92                 db    0
.eh_frame:0000000000009E93                 db    0
.eh_frame:0000000000009E94                 db  0Ch
.eh_frame:0000000000009E95                 db  8Eh
.eh_frame:0000000000009E96                 db 0FFh
.eh_frame:0000000000009E97                 db 0FFh
.eh_frame:0000000000009E98                 db    2
.eh_frame:0000000000009E99                 db    4
.eh_frame:0000000000009E9A                 db    0
.eh_frame:0000000000009E9B                 db    0
.eh_frame:0000000000009E9C                 db    0
.eh_frame:0000000000009E9D                 db  42h ; B
.eh_frame:0000000000009E9E                 db  0Eh
.eh_frame:0000000000009E9F                 db  10h
.eh_frame:0000000000009EA0                 db  8Dh
.eh_frame:0000000000009EA1                 db    2
.eh_frame:0000000000009EA2                 db  42h ; B
.eh_frame:0000000000009EA3                 db  0Eh
.eh_frame:0000000000009EA4                 db  18h
.eh_frame:0000000000009EA5                 db  8Ch
.eh_frame:0000000000009EA6                 db    3
.eh_frame:0000000000009EA7                 db  46h ; F
.eh_frame:0000000000009EA8                 db  0Eh
.eh_frame:0000000000009EA9                 db  20h
.eh_frame:0000000000009EAA                 db  86h
.eh_frame:0000000000009EAB                 db    4
.eh_frame:0000000000009EAC                 db  41h ; A
.eh_frame:0000000000009EAD                 db  0Eh
.eh_frame:0000000000009EAE                 db  28h ; (
.eh_frame:0000000000009EAF                 db  83h
.eh_frame:0000000000009EB0                 db    5
.eh_frame:0000000000009EB1                 db  49h ; I
.eh_frame:0000000000009EB2                 db  0Eh
.eh_frame:0000000000009EB3                 db 0B0h
.eh_frame:0000000000009EB4                 db    1
.eh_frame:0000000000009EB5                 db    0
.eh_frame:0000000000009EB6                 db    0
.eh_frame:0000000000009EB7                 db    0
.eh_frame:0000000000009EB8                 db  84h
.eh_frame:0000000000009EB9                 db    0
.eh_frame:0000000000009EBA                 db    0
.eh_frame:0000000000009EBB                 db    0
.eh_frame:0000000000009EBC                 db  2Ch ; ,
.eh_frame:0000000000009EBD                 db    1
.eh_frame:0000000000009EBE                 db    0
.eh_frame:0000000000009EBF                 db    0
.eh_frame:0000000000009EC0                 db 0A0h
.eh_frame:0000000000009EC1                 db  78h ; x
.eh_frame:0000000000009EC2                 db 0FFh
.eh_frame:0000000000009EC3                 db 0FFh
.eh_frame:0000000000009EC4                 db 0A1h
.eh_frame:0000000000009EC5                 db  0Dh
.eh_frame:0000000000009EC6                 db    0
.eh_frame:0000000000009EC7                 db    0
.eh_frame:0000000000009EC8                 db    0
.eh_frame:0000000000009EC9                 db  42h ; B
.eh_frame:0000000000009ECA                 db  0Eh
.eh_frame:0000000000009ECB                 db  10h
.eh_frame:0000000000009ECC                 db  8Fh
.eh_frame:0000000000009ECD                 db    2
.eh_frame:0000000000009ECE                 db  42h ; B
.eh_frame:0000000000009ECF                 db  0Eh
.eh_frame:0000000000009ED0                 db  18h
.eh_frame:0000000000009ED1                 db  8Eh
.eh_frame:0000000000009ED2                 db    3
.eh_frame:0000000000009ED3                 db  42h ; B
.eh_frame:0000000000009ED4                 db  0Eh
.eh_frame:0000000000009ED5                 db  20h
.eh_frame:0000000000009ED6                 db  8Dh
.eh_frame:0000000000009ED7                 db    4
.eh_frame:0000000000009ED8                 db  42h ; B
.eh_frame:0000000000009ED9                 db  0Eh
.eh_frame:0000000000009EDA                 db  28h ; (
.eh_frame:0000000000009EDB                 db  8Ch
.eh_frame:0000000000009EDC                 db    5
.eh_frame:0000000000009EDD                 db  41h ; A
.eh_frame:0000000000009EDE                 db  0Eh
.eh_frame:0000000000009EDF                 db  30h ; 0
.eh_frame:0000000000009EE0                 db  86h
.eh_frame:0000000000009EE1                 db    6
.eh_frame:0000000000009EE2                 db  41h ; A
.eh_frame:0000000000009EE3                 db  0Eh
.eh_frame:0000000000009EE4                 db  38h ; 8
.eh_frame:0000000000009EE5                 db  83h
.eh_frame:0000000000009EE6                 db    7
.eh_frame:0000000000009EE7                 db  4Ch ; L
.eh_frame:0000000000009EE8                 db  0Eh
.eh_frame:0000000000009EE9                 db 0C0h
.eh_frame:0000000000009EEA                 db    3
.eh_frame:0000000000009EEB                 db    3
.eh_frame:0000000000009EEC                 db 0E9h
.eh_frame:0000000000009EED                 db    1
.eh_frame:0000000000009EEE                 db  0Ah
.eh_frame:0000000000009EEF                 db  0Eh
.eh_frame:0000000000009EF0                 db  38h ; 8
.eh_frame:0000000000009EF1                 db  41h ; A
.eh_frame:0000000000009EF2                 db  0Eh
.eh_frame:0000000000009EF3                 db  30h ; 0
.eh_frame:0000000000009EF4                 db  41h ; A
.eh_frame:0000000000009EF5                 db  0Eh
.eh_frame:0000000000009EF6                 db  28h ; (
.eh_frame:0000000000009EF7                 db  42h ; B
.eh_frame:0000000000009EF8                 db  0Eh
.eh_frame:0000000000009EF9                 db  20h
.eh_frame:0000000000009EFA                 db  42h ; B
.eh_frame:0000000000009EFB                 db  0Eh
.eh_frame:0000000000009EFC                 db  18h
.eh_frame:0000000000009EFD                 db  42h ; B
.eh_frame:0000000000009EFE                 db  0Eh
.eh_frame:0000000000009EFF                 db  10h
.eh_frame:0000000000009F00                 db  42h ; B
.eh_frame:0000000000009F01                 db  0Eh
.eh_frame:0000000000009F02                 db    8
.eh_frame:0000000000009F03                 db  47h ; G
.eh_frame:0000000000009F04                 db  0Bh
.eh_frame:0000000000009F05                 db    3
.eh_frame:0000000000009F06                 db  7Bh ; {
.eh_frame:0000000000009F07                 db    7
.eh_frame:0000000000009F08                 db  0Eh
.eh_frame:0000000000009F09                 db 0D0h
.eh_frame:0000000000009F0A                 db    3
.eh_frame:0000000000009F0B                 db  4Fh ; O
.eh_frame:0000000000009F0C                 db  0Eh
.eh_frame:0000000000009F0D                 db 0C8h
.eh_frame:0000000000009F0E                 db    3
.eh_frame:0000000000009F0F                 db  42h ; B
.eh_frame:0000000000009F10                 db  0Eh
.eh_frame:0000000000009F11                 db 0C0h
.eh_frame:0000000000009F12                 db    3
.eh_frame:0000000000009F13                 db    3
.eh_frame:0000000000009F14                 db 0D5h
.eh_frame:0000000000009F15                 db    1
.eh_frame:0000000000009F16                 db  0Eh
.eh_frame:0000000000009F17                 db 0D0h
.eh_frame:0000000000009F18                 db    3
.eh_frame:0000000000009F19                 db  52h ; R
.eh_frame:0000000000009F1A                 db  0Eh
.eh_frame:0000000000009F1B                 db 0C8h
.eh_frame:0000000000009F1C                 db    3
.eh_frame:0000000000009F1D                 db  41h ; A
.eh_frame:0000000000009F1E                 db  0Eh
.eh_frame:0000000000009F1F                 db 0C0h
.eh_frame:0000000000009F20                 db    3
.eh_frame:0000000000009F21                 db    2
.eh_frame:0000000000009F22                 db 0EAh
.eh_frame:0000000000009F23                 db  0Eh
.eh_frame:0000000000009F24                 db 0D0h
.eh_frame:0000000000009F25                 db    3
.eh_frame:0000000000009F26                 db  56h ; V
.eh_frame:0000000000009F27                 db  0Eh
.eh_frame:0000000000009F28                 db 0C8h
.eh_frame:0000000000009F29                 db    3
.eh_frame:0000000000009F2A                 db  41h ; A
.eh_frame:0000000000009F2B                 db  0Eh
.eh_frame:0000000000009F2C                 db 0C0h
.eh_frame:0000000000009F2D                 db    3
.eh_frame:0000000000009F2E                 db  49h ; I
.eh_frame:0000000000009F2F                 db  0Eh
.eh_frame:0000000000009F30                 db 0D0h
.eh_frame:0000000000009F31                 db    3
.eh_frame:0000000000009F32                 db  52h ; R
.eh_frame:0000000000009F33                 db  0Eh
.eh_frame:0000000000009F34                 db 0C8h
.eh_frame:0000000000009F35                 db    3
.eh_frame:0000000000009F36                 db  42h ; B
.eh_frame:0000000000009F37                 db  0Eh
.eh_frame:0000000000009F38                 db 0C0h
.eh_frame:0000000000009F39                 db    3
.eh_frame:0000000000009F3A                 db    0
.eh_frame:0000000000009F3B                 db    0
.eh_frame:0000000000009F3C                 db    0
.eh_frame:0000000000009F3D                 db    0
.eh_frame:0000000000009F3E                 db    0
.eh_frame:0000000000009F3F                 db    0
.eh_frame:0000000000009F40                 db  3Ch ; <
.eh_frame:0000000000009F41                 db    0
.eh_frame:0000000000009F42                 db    0
.eh_frame:0000000000009F43                 db    0
.eh_frame:0000000000009F44                 db 0B4h
.eh_frame:0000000000009F45                 db    1
.eh_frame:0000000000009F46                 db    0
.eh_frame:0000000000009F47                 db    0
.eh_frame:0000000000009F48                 db  68h ; h
.eh_frame:0000000000009F49                 db  91h
.eh_frame:0000000000009F4A                 db 0FFh
.eh_frame:0000000000009F4B                 db 0FFh
.eh_frame:0000000000009F4C                 db 0A7h
.eh_frame:0000000000009F4D                 db    0
.eh_frame:0000000000009F4E                 db    0
.eh_frame:0000000000009F4F                 db    0
.eh_frame:0000000000009F50                 db    0
.eh_frame:0000000000009F51                 db  42h ; B
.eh_frame:0000000000009F52                 db  0Eh
.eh_frame:0000000000009F53                 db  10h
.eh_frame:0000000000009F54                 db  8Dh
.eh_frame:0000000000009F55                 db    2
.eh_frame:0000000000009F56                 db  42h ; B
.eh_frame:0000000000009F57                 db  0Eh
.eh_frame:0000000000009F58                 db  18h
.eh_frame:0000000000009F59                 db  8Ch
.eh_frame:0000000000009F5A                 db    3
.eh_frame:0000000000009F5B                 db  41h ; A
.eh_frame:0000000000009F5C                 db  0Eh
.eh_frame:0000000000009F5D                 db  20h
.eh_frame:0000000000009F5E                 db  86h
.eh_frame:0000000000009F5F                 db    4
.eh_frame:0000000000009F60                 db  41h ; A
.eh_frame:0000000000009F61                 db  0Eh
.eh_frame:0000000000009F62                 db  28h ; (
.eh_frame:0000000000009F63                 db  83h
.eh_frame:0000000000009F64                 db    5
.eh_frame:0000000000009F65                 db  4Ah ; J
.eh_frame:0000000000009F66                 db  0Eh
.eh_frame:0000000000009F67                 db  60h ; `
.eh_frame:0000000000009F68                 db    2
.eh_frame:0000000000009F69                 db  49h ; I
.eh_frame:0000000000009F6A                 db  0Ah
.eh_frame:0000000000009F6B                 db  0Eh
.eh_frame:0000000000009F6C                 db  28h ; (
.eh_frame:0000000000009F6D                 db  41h ; A
.eh_frame:0000000000009F6E                 db  0Eh
.eh_frame:0000000000009F6F                 db  20h
.eh_frame:0000000000009F70                 db  41h ; A
.eh_frame:0000000000009F71                 db  0Eh
.eh_frame:0000000000009F72                 db  18h
.eh_frame:0000000000009F73                 db  42h ; B
.eh_frame:0000000000009F74                 db  0Eh
.eh_frame:0000000000009F75                 db  10h
.eh_frame:0000000000009F76                 db  42h ; B
.eh_frame:0000000000009F77                 db  0Eh
.eh_frame:0000000000009F78                 db    8
.eh_frame:0000000000009F79                 db  41h ; A
.eh_frame:0000000000009F7A                 db  0Bh
.eh_frame:0000000000009F7B                 db    0
.eh_frame:0000000000009F7C                 db    0
.eh_frame:0000000000009F7D                 db    0
.eh_frame:0000000000009F7E                 db    0
.eh_frame:0000000000009F7F                 db    0
.eh_frame:0000000000009F80                 db  10h
.eh_frame:0000000000009F81                 db    0
.eh_frame:0000000000009F82                 db    0
.eh_frame:0000000000009F83                 db    0
.eh_frame:0000000000009F84                 db 0F4h
.eh_frame:0000000000009F85                 db    1
.eh_frame:0000000000009F86                 db    0
.eh_frame:0000000000009F87                 db    0
.eh_frame:0000000000009F88                 db 0D8h
.eh_frame:0000000000009F89                 db  91h
.eh_frame:0000000000009F8A                 db 0FFh
.eh_frame:0000000000009F8B                 db 0FFh
.eh_frame:0000000000009F8C                 db    8
.eh_frame:0000000000009F8D                 db    0
.eh_frame:0000000000009F8E                 db    0
.eh_frame:0000000000009F8F                 db    0
.eh_frame:0000000000009F90                 db    0
.eh_frame:0000000000009F91                 db    0
.eh_frame:0000000000009F92                 db    0
.eh_frame:0000000000009F93                 db    0
.eh_frame:0000000000009F94                 db  10h
.eh_frame:0000000000009F95                 db    0
.eh_frame:0000000000009F96                 db    0
.eh_frame:0000000000009F97                 db    0
.eh_frame:0000000000009F98                 db    8
.eh_frame:0000000000009F99                 db    2
.eh_frame:0000000000009F9A                 db    0
.eh_frame:0000000000009F9B                 db    0
.eh_frame:0000000000009F9C                 db 0D4h
.eh_frame:0000000000009F9D                 db  91h
.eh_frame:0000000000009F9E                 db 0FFh
.eh_frame:0000000000009F9F                 db 0FFh
.eh_frame:0000000000009FA0                 db    8
.eh_frame:0000000000009FA1                 db    0
.eh_frame:0000000000009FA2                 db    0
.eh_frame:0000000000009FA3                 db    0
.eh_frame:0000000000009FA4                 db    0
.eh_frame:0000000000009FA5                 db    0
.eh_frame:0000000000009FA6                 db    0
.eh_frame:0000000000009FA7                 db    0
.eh_frame:0000000000009FA8                 db  2Ch ; ,
.eh_frame:0000000000009FA9                 db    0
.eh_frame:0000000000009FAA                 db    0
.eh_frame:0000000000009FAB                 db    0
.eh_frame:0000000000009FAC                 db  1Ch
.eh_frame:0000000000009FAD                 db    2
.eh_frame:0000000000009FAE                 db    0
.eh_frame:0000000000009FAF                 db    0
.eh_frame:0000000000009FB0                 db 0D0h
.eh_frame:0000000000009FB1                 db  91h
.eh_frame:0000000000009FB2                 db 0FFh
.eh_frame:0000000000009FB3                 db 0FFh
.eh_frame:0000000000009FB4                 db 0A4h
.eh_frame:0000000000009FB5                 db    0
.eh_frame:0000000000009FB6                 db    0
.eh_frame:0000000000009FB7                 db    0
.eh_frame:0000000000009FB8                 db    0
.eh_frame:0000000000009FB9                 db  41h ; A
.eh_frame:0000000000009FBA                 db  0Eh
.eh_frame:0000000000009FBB                 db  10h
.eh_frame:0000000000009FBC                 db  86h
.eh_frame:0000000000009FBD                 db    2
.eh_frame:0000000000009FBE                 db  41h ; A
.eh_frame:0000000000009FBF                 db  0Eh
.eh_frame:0000000000009FC0                 db  18h
.eh_frame:0000000000009FC1                 db  83h
.eh_frame:0000000000009FC2                 db    3
.eh_frame:0000000000009FC3                 db  44h ; D
.eh_frame:0000000000009FC4                 db  0Eh
.eh_frame:0000000000009FC5                 db  20h
.eh_frame:0000000000009FC6                 db  7Ah ; z
.eh_frame:0000000000009FC7                 db  0Ah
.eh_frame:0000000000009FC8                 db  0Eh
.eh_frame:0000000000009FC9                 db  18h
.eh_frame:0000000000009FCA                 db  41h ; A
.eh_frame:0000000000009FCB                 db  0Eh
.eh_frame:0000000000009FCC                 db  10h
.eh_frame:0000000000009FCD                 db  41h ; A
.eh_frame:0000000000009FCE                 db  0Eh
.eh_frame:0000000000009FCF                 db    8
.eh_frame:0000000000009FD0                 db  41h ; A
.eh_frame:0000000000009FD1                 db  0Bh
.eh_frame:0000000000009FD2                 db    0
.eh_frame:0000000000009FD3                 db    0
.eh_frame:0000000000009FD4                 db    0
.eh_frame:0000000000009FD5                 db    0
.eh_frame:0000000000009FD6                 db    0
.eh_frame:0000000000009FD7                 db    0
.eh_frame:0000000000009FD8                 db  1Ch
.eh_frame:0000000000009FD9                 db    0
.eh_frame:0000000000009FDA                 db    0
.eh_frame:0000000000009FDB                 db    0
.eh_frame:0000000000009FDC                 db  4Ch ; L
.eh_frame:0000000000009FDD                 db    2
.eh_frame:0000000000009FDE                 db    0
.eh_frame:0000000000009FDF                 db    0
.eh_frame:0000000000009FE0                 db  50h ; P
.eh_frame:0000000000009FE1                 db  92h
.eh_frame:0000000000009FE2                 db 0FFh
.eh_frame:0000000000009FE3                 db 0FFh
.eh_frame:0000000000009FE4                 db  9Fh
.eh_frame:0000000000009FE5                 db    0
.eh_frame:0000000000009FE6                 db    0
.eh_frame:0000000000009FE7                 db    0
.eh_frame:0000000000009FE8                 db    0
.eh_frame:0000000000009FE9                 db  44h ; D
.eh_frame:0000000000009FEA                 db  0Eh
.eh_frame:0000000000009FEB                 db  10h
.eh_frame:0000000000009FEC                 db  83h
.eh_frame:0000000000009FED                 db    2
.eh_frame:0000000000009FEE                 db    2
.eh_frame:0000000000009FEF                 db  78h ; x
.eh_frame:0000000000009FF0                 db  0Ah
.eh_frame:0000000000009FF1                 db  0Eh
.eh_frame:0000000000009FF2                 db    8
.eh_frame:0000000000009FF3                 db  41h ; A
.eh_frame:0000000000009FF4                 db  0Bh
.eh_frame:0000000000009FF5                 db    0
.eh_frame:0000000000009FF6                 db    0
.eh_frame:0000000000009FF7                 db    0
.eh_frame:0000000000009FF8                 db  40h ; @
.eh_frame:0000000000009FF9                 db    0
.eh_frame:0000000000009FFA                 db    0
.eh_frame:0000000000009FFB                 db    0
.eh_frame:0000000000009FFC                 db  6Ch ; l
.eh_frame:0000000000009FFD                 db    2
.eh_frame:0000000000009FFE                 db    0
.eh_frame:0000000000009FFF                 db    0
.eh_frame:000000000000A000                 db 0D0h
.eh_frame:000000000000A001                 db  92h
.eh_frame:000000000000A002                 db 0FFh
.eh_frame:000000000000A003                 db 0FFh
.eh_frame:000000000000A004                 db 0E7h
.eh_frame:000000000000A005                 db    0
.eh_frame:000000000000A006                 db    0
.eh_frame:000000000000A007                 db    0
.eh_frame:000000000000A008                 db    0
.eh_frame:000000000000A009                 db  41h ; A
.eh_frame:000000000000A00A                 db  0Eh
.eh_frame:000000000000A00B                 db  10h
.eh_frame:000000000000A00C                 db  86h
.eh_frame:000000000000A00D                 db    2
.eh_frame:000000000000A00E                 db  41h ; A
.eh_frame:000000000000A00F                 db  0Eh
.eh_frame:000000000000A010                 db  18h
.eh_frame:000000000000A011                 db  83h
.eh_frame:000000000000A012                 db    3
.eh_frame:000000000000A013                 db  49h ; I
.eh_frame:000000000000A014                 db  0Eh
.eh_frame:000000000000A015                 db  20h
.eh_frame:000000000000A016                 db  6Eh ; n
.eh_frame:000000000000A017                 db  0Ah
.eh_frame:000000000000A018                 db  0Eh
.eh_frame:000000000000A019                 db  18h
.eh_frame:000000000000A01A                 db  41h ; A
.eh_frame:000000000000A01B                 db  0Eh
.eh_frame:000000000000A01C                 db  10h
.eh_frame:000000000000A01D                 db  41h ; A
.eh_frame:000000000000A01E                 db  0Eh
.eh_frame:000000000000A01F                 db    8
.eh_frame:000000000000A020                 db  45h ; E
.eh_frame:000000000000A021                 db  0Bh
.eh_frame:000000000000A022                 db    2
.eh_frame:000000000000A023                 db  4Ah ; J
.eh_frame:000000000000A024                 db  0Ah
.eh_frame:000000000000A025                 db  0Eh
.eh_frame:000000000000A026                 db  18h
.eh_frame:000000000000A027                 db  41h ; A
.eh_frame:000000000000A028                 db  0Eh
.eh_frame:000000000000A029                 db  10h
.eh_frame:000000000000A02A                 db  41h ; A
.eh_frame:000000000000A02B                 db  0Eh
.eh_frame:000000000000A02C                 db    8
.eh_frame:000000000000A02D                 db  44h ; D
.eh_frame:000000000000A02E                 db  0Bh
.eh_frame:000000000000A02F                 db    2
.eh_frame:000000000000A030                 db  54h ; T
.eh_frame:000000000000A031                 db  0Eh
.eh_frame:000000000000A032                 db  18h
.eh_frame:000000000000A033                 db  41h ; A
.eh_frame:000000000000A034                 db  0Eh
.eh_frame:000000000000A035                 db  10h
.eh_frame:000000000000A036                 db  41h ; A
.eh_frame:000000000000A037                 db  0Eh
.eh_frame:000000000000A038                 db    8
.eh_frame:000000000000A039                 db    0
.eh_frame:000000000000A03A                 db    0
.eh_frame:000000000000A03B                 db    0
.eh_frame:000000000000A03C                 db  74h ; t
.eh_frame:000000000000A03D                 db    0
.eh_frame:000000000000A03E                 db    0
.eh_frame:000000000000A03F                 db    0
.eh_frame:000000000000A040                 db 0B0h
.eh_frame:000000000000A041                 db    2
.eh_frame:000000000000A042                 db    0
.eh_frame:000000000000A043                 db    0
.eh_frame:000000000000A044                 db  7Ch ; |
.eh_frame:000000000000A045                 db  93h
.eh_frame:000000000000A046                 db 0FFh
.eh_frame:000000000000A047                 db 0FFh
.eh_frame:000000000000A048                 db  34h ; 4
.eh_frame:000000000000A049                 db  12h
.eh_frame:000000000000A04A                 db    0
.eh_frame:000000000000A04B                 db    0
.eh_frame:000000000000A04C                 db    0
.eh_frame:000000000000A04D                 db  42h ; B
.eh_frame:000000000000A04E                 db  0Eh
.eh_frame:000000000000A04F                 db  10h
.eh_frame:000000000000A050                 db  8Fh
.eh_frame:000000000000A051                 db    2
.eh_frame:000000000000A052                 db  42h ; B
.eh_frame:000000000000A053                 db  0Eh
.eh_frame:000000000000A054                 db  18h
.eh_frame:000000000000A055                 db  8Eh
.eh_frame:000000000000A056                 db    3
.eh_frame:000000000000A057                 db  45h ; E
.eh_frame:000000000000A058                 db  0Eh
.eh_frame:000000000000A059                 db  20h
.eh_frame:000000000000A05A                 db  8Dh
.eh_frame:000000000000A05B                 db    4
.eh_frame:000000000000A05C                 db  42h ; B
.eh_frame:000000000000A05D                 db  0Eh
.eh_frame:000000000000A05E                 db  28h ; (
.eh_frame:000000000000A05F                 db  8Ch
.eh_frame:000000000000A060                 db    5
.eh_frame:000000000000A061                 db  44h ; D
.eh_frame:000000000000A062                 db  0Eh
.eh_frame:000000000000A063                 db  30h ; 0
.eh_frame:000000000000A064                 db  86h
.eh_frame:000000000000A065                 db    6
.eh_frame:000000000000A066                 db  41h ; A
.eh_frame:000000000000A067                 db  0Eh
.eh_frame:000000000000A068                 db  38h ; 8
.eh_frame:000000000000A069                 db  83h
.eh_frame:000000000000A06A                 db    7
.eh_frame:000000000000A06B                 db  53h ; S
.eh_frame:000000000000A06C                 db  0Eh
.eh_frame:000000000000A06D                 db 0F0h
.eh_frame:000000000000A06E                 db    1
.eh_frame:000000000000A06F                 db    3
.eh_frame:000000000000A070                 db  81h
.eh_frame:000000000000A071                 db  0Bh
.eh_frame:000000000000A072                 db  0Eh
.eh_frame:000000000000A073                 db 0F8h
.eh_frame:000000000000A074                 db    1
.eh_frame:000000000000A075                 db  4Ah ; J
.eh_frame:000000000000A076                 db  0Eh
.eh_frame:000000000000A077                 db  80h
.eh_frame:000000000000A078                 db    2
.eh_frame:000000000000A079                 db  44h ; D
.eh_frame:000000000000A07A                 db  0Eh
.eh_frame:000000000000A07B                 db  88h
.eh_frame:000000000000A07C                 db    2
.eh_frame:000000000000A07D                 db  45h ; E
.eh_frame:000000000000A07E                 db  0Eh
.eh_frame:000000000000A07F                 db  90h
.eh_frame:000000000000A080                 db    2
.eh_frame:000000000000A081                 db  5Fh ; _
.eh_frame:000000000000A082                 db  0Eh
.eh_frame:000000000000A083                 db 0F0h
.eh_frame:000000000000A084                 db    1
.eh_frame:000000000000A085                 db  64h ; d
.eh_frame:000000000000A086                 db  0Ah
.eh_frame:000000000000A087                 db  0Eh
.eh_frame:000000000000A088                 db  38h ; 8
.eh_frame:000000000000A089                 db  41h ; A
.eh_frame:000000000000A08A                 db  0Eh
.eh_frame:000000000000A08B                 db  30h ; 0
.eh_frame:000000000000A08C                 db  41h ; A
.eh_frame:000000000000A08D                 db  0Eh
.eh_frame:000000000000A08E                 db  28h ; (
.eh_frame:000000000000A08F                 db  42h ; B
.eh_frame:000000000000A090                 db  0Eh
.eh_frame:000000000000A091                 db  20h
.eh_frame:000000000000A092                 db  42h ; B
.eh_frame:000000000000A093                 db  0Eh
.eh_frame:000000000000A094                 db  18h
.eh_frame:000000000000A095                 db  42h ; B
.eh_frame:000000000000A096                 db  0Eh
.eh_frame:000000000000A097                 db  10h
.eh_frame:000000000000A098                 db  42h ; B
.eh_frame:000000000000A099                 db  0Eh
.eh_frame:000000000000A09A                 db    8
.eh_frame:000000000000A09B                 db  44h ; D
.eh_frame:000000000000A09C                 db  0Bh
.eh_frame:000000000000A09D                 db    3
.eh_frame:000000000000A09E                 db  99h
.eh_frame:000000000000A09F                 db    5
.eh_frame:000000000000A0A0                 db  0Eh
.eh_frame:000000000000A0A1                 db 0F8h
.eh_frame:000000000000A0A2                 db    1
.eh_frame:000000000000A0A3                 db  4Dh ; M
.eh_frame:000000000000A0A4                 db  0Eh
.eh_frame:000000000000A0A5                 db  80h
.eh_frame:000000000000A0A6                 db    2
.eh_frame:000000000000A0A7                 db  44h ; D
.eh_frame:000000000000A0A8                 db  0Eh
.eh_frame:000000000000A0A9                 db  88h
.eh_frame:000000000000A0AA                 db    2
.eh_frame:000000000000A0AB                 db  47h ; G
.eh_frame:000000000000A0AC                 db  0Eh
.eh_frame:000000000000A0AD                 db  90h
.eh_frame:000000000000A0AE                 db    2
.eh_frame:000000000000A0AF                 db  5Bh ; [
.eh_frame:000000000000A0B0                 db  0Eh
.eh_frame:000000000000A0B1                 db 0F0h
.eh_frame:000000000000A0B2                 db    1
.eh_frame:000000000000A0B3                 db    0
.eh_frame:000000000000A0B4                 db  68h ; h
.eh_frame:000000000000A0B5                 db    0
.eh_frame:000000000000A0B6                 db    0
.eh_frame:000000000000A0B7                 db    0
.eh_frame:000000000000A0B8                 db  28h ; (
.eh_frame:000000000000A0B9                 db    3
.eh_frame:000000000000A0BA                 db    0
.eh_frame:000000000000A0BB                 db    0
.eh_frame:000000000000A0BC                 db  44h ; D
.eh_frame:000000000000A0BD                 db 0A5h
.eh_frame:000000000000A0BE                 db 0FFh
.eh_frame:000000000000A0BF                 db 0FFh
.eh_frame:000000000000A0C0                 db 0ABh
.eh_frame:000000000000A0C1                 db    1
.eh_frame:000000000000A0C2                 db    0
.eh_frame:000000000000A0C3                 db    0
.eh_frame:000000000000A0C4                 db    0
.eh_frame:000000000000A0C5                 db  42h ; B
.eh_frame:000000000000A0C6                 db  0Eh
.eh_frame:000000000000A0C7                 db  10h
.eh_frame:000000000000A0C8                 db  8Fh
.eh_frame:000000000000A0C9                 db    2
.eh_frame:000000000000A0CA                 db  42h ; B
.eh_frame:000000000000A0CB                 db  0Eh
.eh_frame:000000000000A0CC                 db  18h
.eh_frame:000000000000A0CD                 db  8Eh
.eh_frame:000000000000A0CE                 db    3
.eh_frame:000000000000A0CF                 db  45h ; E
.eh_frame:000000000000A0D0                 db  0Eh
.eh_frame:000000000000A0D1                 db  20h
.eh_frame:000000000000A0D2                 db  8Dh
.eh_frame:000000000000A0D3                 db    4
.eh_frame:000000000000A0D4                 db  42h ; B
.eh_frame:000000000000A0D5                 db  0Eh
.eh_frame:000000000000A0D6                 db  28h ; (
.eh_frame:000000000000A0D7                 db  8Ch
.eh_frame:000000000000A0D8                 db    5
.eh_frame:000000000000A0D9                 db  44h ; D
.eh_frame:000000000000A0DA                 db  0Eh
.eh_frame:000000000000A0DB                 db  30h ; 0
.eh_frame:000000000000A0DC                 db  86h
.eh_frame:000000000000A0DD                 db    6
.eh_frame:000000000000A0DE                 db  41h ; A
.eh_frame:000000000000A0DF                 db  0Eh
.eh_frame:000000000000A0E0                 db  38h ; 8
.eh_frame:000000000000A0E1                 db  83h
.eh_frame:000000000000A0E2                 db    7
.eh_frame:000000000000A0E3                 db  47h ; G
.eh_frame:000000000000A0E4                 db  0Eh
.eh_frame:000000000000A0E5                 db  60h ; `
.eh_frame:000000000000A0E6                 db    2
.eh_frame:000000000000A0E7                 db  99h
.eh_frame:000000000000A0E8                 db  0Eh
.eh_frame:000000000000A0E9                 db  68h ; h
.eh_frame:000000000000A0EA                 db  5Fh ; _
.eh_frame:000000000000A0EB                 db  0Eh
.eh_frame:000000000000A0EC                 db  70h ; p
.eh_frame:000000000000A0ED                 db  46h ; F
.eh_frame:000000000000A0EE                 db  0Eh
.eh_frame:000000000000A0EF                 db  78h ; x
.eh_frame:000000000000A0F0                 db  42h ; B
.eh_frame:000000000000A0F1                 db  0Eh
.eh_frame:000000000000A0F2                 db  80h
.eh_frame:000000000000A0F3                 db    1
.eh_frame:000000000000A0F4                 db  59h ; Y
.eh_frame:000000000000A0F5                 db  0Eh
.eh_frame:000000000000A0F6                 db  60h ; `
.eh_frame:000000000000A0F7                 db    2
.eh_frame:000000000000A0F8                 db  40h ; @
.eh_frame:000000000000A0F9                 db  0Eh
.eh_frame:000000000000A0FA                 db  68h ; h
.eh_frame:000000000000A0FB                 db  4Bh ; K
.eh_frame:000000000000A0FC                 db  0Eh
.eh_frame:000000000000A0FD                 db  70h ; p
.eh_frame:000000000000A0FE                 db  43h ; C
.eh_frame:000000000000A0FF                 db  0Eh
.eh_frame:000000000000A100                 db  78h ; x
.eh_frame:000000000000A101                 db  45h ; E
.eh_frame:000000000000A102                 db  0Eh
.eh_frame:000000000000A103                 db  80h
.eh_frame:000000000000A104                 db    1
.eh_frame:000000000000A105                 db  5Eh ; ^
.eh_frame:000000000000A106                 db  0Eh
.eh_frame:000000000000A107                 db  60h ; `
.eh_frame:000000000000A108                 db  4Ch ; L
.eh_frame:000000000000A109                 db  0Ah
.eh_frame:000000000000A10A                 db  0Eh
.eh_frame:000000000000A10B                 db  38h ; 8
.eh_frame:000000000000A10C                 db  44h ; D
.eh_frame:000000000000A10D                 db  0Eh
.eh_frame:000000000000A10E                 db  30h ; 0
.eh_frame:000000000000A10F                 db  41h ; A
.eh_frame:000000000000A110                 db  0Eh
.eh_frame:000000000000A111                 db  28h ; (
.eh_frame:000000000000A112                 db  42h ; B
.eh_frame:000000000000A113                 db  0Eh
.eh_frame:000000000000A114                 db  20h
.eh_frame:000000000000A115                 db  42h ; B
.eh_frame:000000000000A116                 db  0Eh
.eh_frame:000000000000A117                 db  18h
.eh_frame:000000000000A118                 db  42h ; B
.eh_frame:000000000000A119                 db  0Eh
.eh_frame:000000000000A11A                 db  10h
.eh_frame:000000000000A11B                 db  42h ; B
.eh_frame:000000000000A11C                 db  0Eh
.eh_frame:000000000000A11D                 db    8
.eh_frame:000000000000A11E                 db  46h ; F
.eh_frame:000000000000A11F                 db  0Bh
.eh_frame:000000000000A120                 db  28h ; (
.eh_frame:000000000000A121                 db    0
.eh_frame:000000000000A122                 db    0
.eh_frame:000000000000A123                 db    0
.eh_frame:000000000000A124                 db  94h
.eh_frame:000000000000A125                 db    3
.eh_frame:000000000000A126                 db    0
.eh_frame:000000000000A127                 db    0
.eh_frame:000000000000A128                 db  88h
.eh_frame:000000000000A129                 db 0A6h
.eh_frame:000000000000A12A                 db 0FFh
.eh_frame:000000000000A12B                 db 0FFh
.eh_frame:000000000000A12C                 db  36h ; 6
.eh_frame:000000000000A12D                 db    0
.eh_frame:000000000000A12E                 db    0
.eh_frame:000000000000A12F                 db    0
.eh_frame:000000000000A130                 db    0
.eh_frame:000000000000A131                 db  42h ; B
.eh_frame:000000000000A132                 db  0Eh
.eh_frame:000000000000A133                 db  10h
.eh_frame:000000000000A134                 db  8Ch
.eh_frame:000000000000A135                 db    2
.eh_frame:000000000000A136                 db  41h ; A
.eh_frame:000000000000A137                 db  0Eh
.eh_frame:000000000000A138                 db  18h
.eh_frame:000000000000A139                 db  86h
.eh_frame:000000000000A13A                 db    3
.eh_frame:000000000000A13B                 db  41h ; A
.eh_frame:000000000000A13C                 db  0Eh
.eh_frame:000000000000A13D                 db  20h
.eh_frame:000000000000A13E                 db  83h
.eh_frame:000000000000A13F                 db    4
.eh_frame:000000000000A140                 db  6Eh ; n
.eh_frame:000000000000A141                 db  0Eh
.eh_frame:000000000000A142                 db  18h
.eh_frame:000000000000A143                 db  41h ; A
.eh_frame:000000000000A144                 db  0Eh
.eh_frame:000000000000A145                 db  10h
.eh_frame:000000000000A146                 db  42h ; B
.eh_frame:000000000000A147                 db  0Eh
.eh_frame:000000000000A148                 db    8
.eh_frame:000000000000A149                 db    0
.eh_frame:000000000000A14A                 db    0
.eh_frame:000000000000A14B                 db    0
.eh_frame:000000000000A14C                 db  10h
.eh_frame:000000000000A14D                 db    0
.eh_frame:000000000000A14E                 db    0
.eh_frame:000000000000A14F                 db    0
.eh_frame:000000000000A150                 db 0C0h
.eh_frame:000000000000A151                 db    3
.eh_frame:000000000000A152                 db    0
.eh_frame:000000000000A153                 db    0
.eh_frame:000000000000A154                 db  9Ch
.eh_frame:000000000000A155                 db 0A6h
.eh_frame:000000000000A156                 db 0FFh
.eh_frame:000000000000A157                 db 0FFh
.eh_frame:000000000000A158                 db  11h
.eh_frame:000000000000A159                 db    0
.eh_frame:000000000000A15A                 db    0
.eh_frame:000000000000A15B                 db    0
.eh_frame:000000000000A15C                 db    0
.eh_frame:000000000000A15D                 db    0
.eh_frame:000000000000A15E                 db    0
.eh_frame:000000000000A15F                 db    0
.eh_frame:000000000000A160                 db  10h
.eh_frame:000000000000A161                 db    0
.eh_frame:000000000000A162                 db    0
.eh_frame:000000000000A163                 db    0
.eh_frame:000000000000A164                 db 0D4h
.eh_frame:000000000000A165                 db    3
.eh_frame:000000000000A166                 db    0
.eh_frame:000000000000A167                 db    0
.eh_frame:000000000000A168                 db 0A8h
.eh_frame:000000000000A169                 db 0A6h
.eh_frame:000000000000A16A                 db 0FFh
.eh_frame:000000000000A16B                 db 0FFh
.eh_frame:000000000000A16C                 db  11h
.eh_frame:000000000000A16D                 db    0
.eh_frame:000000000000A16E                 db    0
.eh_frame:000000000000A16F                 db    0
.eh_frame:000000000000A170                 db    0
.eh_frame:000000000000A171                 db    0
.eh_frame:000000000000A172                 db    0
.eh_frame:000000000000A173                 db    0
.eh_frame:000000000000A174                 db  10h
.eh_frame:000000000000A175                 db    0
.eh_frame:000000000000A176                 db    0
.eh_frame:000000000000A177                 db    0
.eh_frame:000000000000A178                 db 0E8h
.eh_frame:000000000000A179                 db    3
.eh_frame:000000000000A17A                 db    0
.eh_frame:000000000000A17B                 db    0
.eh_frame:000000000000A17C                 db 0B4h
.eh_frame:000000000000A17D                 db 0A6h
.eh_frame:000000000000A17E                 db 0FFh
.eh_frame:000000000000A17F                 db 0FFh
.eh_frame:000000000000A180                 db  35h ; 5
.eh_frame:000000000000A181                 db    0
.eh_frame:000000000000A182                 db    0
.eh_frame:000000000000A183                 db    0
.eh_frame:000000000000A184                 db    0
.eh_frame:000000000000A185                 db    0
.eh_frame:000000000000A186                 db    0
.eh_frame:000000000000A187                 db    0
.eh_frame:000000000000A188                 db  10h
.eh_frame:000000000000A189                 db    0
.eh_frame:000000000000A18A                 db    0
.eh_frame:000000000000A18B                 db    0
.eh_frame:000000000000A18C                 db 0FCh
.eh_frame:000000000000A18D                 db    3
.eh_frame:000000000000A18E                 db    0
.eh_frame:000000000000A18F                 db    0
.eh_frame:000000000000A190                 db 0E0h
.eh_frame:000000000000A191                 db 0A6h
.eh_frame:000000000000A192                 db 0FFh
.eh_frame:000000000000A193                 db 0FFh
.eh_frame:000000000000A194                 db  15h
.eh_frame:000000000000A195                 db    0
.eh_frame:000000000000A196                 db    0
.eh_frame:000000000000A197                 db    0
.eh_frame:000000000000A198                 db    0
.eh_frame:000000000000A199                 db    0
.eh_frame:000000000000A19A                 db    0
.eh_frame:000000000000A19B                 db    0
.eh_frame:000000000000A19C                 db  10h
.eh_frame:000000000000A19D                 db    0
.eh_frame:000000000000A19E                 db    0
.eh_frame:000000000000A19F                 db    0
.eh_frame:000000000000A1A0                 db  10h
.eh_frame:000000000000A1A1                 db    4
.eh_frame:000000000000A1A2                 db    0
.eh_frame:000000000000A1A3                 db    0
.eh_frame:000000000000A1A4                 db 0ECh
.eh_frame:000000000000A1A5                 db 0A6h
.eh_frame:000000000000A1A6                 db 0FFh
.eh_frame:000000000000A1A7                 db 0FFh
.eh_frame:000000000000A1A8                 db  30h ; 0
.eh_frame:000000000000A1A9                 db    0
.eh_frame:000000000000A1AA                 db    0
.eh_frame:000000000000A1AB                 db    0
.eh_frame:000000000000A1AC                 db    0
.eh_frame:000000000000A1AD                 db  6Bh ; k
.eh_frame:000000000000A1AE                 db  0Eh
.eh_frame:000000000000A1AF                 db  10h
.eh_frame:000000000000A1B0                 db  50h ; P
.eh_frame:000000000000A1B1                 db    0
.eh_frame:000000000000A1B2                 db    0
.eh_frame:000000000000A1B3                 db    0
.eh_frame:000000000000A1B4                 db  24h ; $
.eh_frame:000000000000A1B5                 db    4
.eh_frame:000000000000A1B6                 db    0
.eh_frame:000000000000A1B7                 db    0
.eh_frame:000000000000A1B8                 db    8
.eh_frame:000000000000A1B9                 db 0A7h
.eh_frame:000000000000A1BA                 db 0FFh
.eh_frame:000000000000A1BB                 db 0FFh
.eh_frame:000000000000A1BC                 db  74h ; t
.eh_frame:000000000000A1BD                 db    0
.eh_frame:000000000000A1BE                 db    0
.eh_frame:000000000000A1BF                 db    0
.eh_frame:000000000000A1C0                 db    0
.eh_frame:000000000000A1C1                 db  42h ; B
.eh_frame:000000000000A1C2                 db  0Eh
.eh_frame:000000000000A1C3                 db  10h
.eh_frame:000000000000A1C4                 db  8Fh
.eh_frame:000000000000A1C5                 db    2
.eh_frame:000000000000A1C6                 db  42h ; B
.eh_frame:000000000000A1C7                 db  0Eh
.eh_frame:000000000000A1C8                 db  18h
.eh_frame:000000000000A1C9                 db  8Eh
.eh_frame:000000000000A1CA                 db    3
.eh_frame:000000000000A1CB                 db  49h ; I
.eh_frame:000000000000A1CC                 db  0Eh
.eh_frame:000000000000A1CD                 db  20h
.eh_frame:000000000000A1CE                 db  8Dh
.eh_frame:000000000000A1CF                 db    4
.eh_frame:000000000000A1D0                 db  42h ; B
.eh_frame:000000000000A1D1                 db  0Eh
.eh_frame:000000000000A1D2                 db  28h ; (
.eh_frame:000000000000A1D3                 db  8Ch
.eh_frame:000000000000A1D4                 db    5
.eh_frame:000000000000A1D5                 db  44h ; D
.eh_frame:000000000000A1D6                 db  0Eh
.eh_frame:000000000000A1D7                 db  30h ; 0
.eh_frame:000000000000A1D8                 db  86h
.eh_frame:000000000000A1D9                 db    6
.eh_frame:000000000000A1DA                 db  41h ; A
.eh_frame:000000000000A1DB                 db  0Eh
.eh_frame:000000000000A1DC                 db  38h ; 8
.eh_frame:000000000000A1DD                 db  83h
.eh_frame:000000000000A1DE                 db    7
.eh_frame:000000000000A1DF                 db  4Dh ; M
.eh_frame:000000000000A1E0                 db  0Eh
.eh_frame:000000000000A1E1                 db  50h ; P
.eh_frame:000000000000A1E2                 db  5Fh ; _
.eh_frame:000000000000A1E3                 db  0Eh
.eh_frame:000000000000A1E4                 db  58h ; X
.eh_frame:000000000000A1E5                 db  47h ; G
.eh_frame:000000000000A1E6                 db  0Eh
.eh_frame:000000000000A1E7                 db  60h ; `
.eh_frame:000000000000A1E8                 db  46h ; F
.eh_frame:000000000000A1E9                 db  0Eh
.eh_frame:000000000000A1EA                 db  68h ; h
.eh_frame:000000000000A1EB                 db  44h ; D
.eh_frame:000000000000A1EC                 db  0Eh
.eh_frame:000000000000A1ED                 db  70h ; p
.eh_frame:000000000000A1EE                 db  58h ; X
.eh_frame:000000000000A1EF                 db  0Eh
.eh_frame:000000000000A1F0                 db  38h ; 8
.eh_frame:000000000000A1F1                 db  41h ; A
.eh_frame:000000000000A1F2                 db  0Eh
.eh_frame:000000000000A1F3                 db  30h ; 0
.eh_frame:000000000000A1F4                 db  41h ; A
.eh_frame:000000000000A1F5                 db  0Eh
.eh_frame:000000000000A1F6                 db  28h ; (
.eh_frame:000000000000A1F7                 db  42h ; B
.eh_frame:000000000000A1F8                 db  0Eh
.eh_frame:000000000000A1F9                 db  20h
.eh_frame:000000000000A1FA                 db  42h ; B
.eh_frame:000000000000A1FB                 db  0Eh
.eh_frame:000000000000A1FC                 db  18h
.eh_frame:000000000000A1FD                 db  42h ; B
.eh_frame:000000000000A1FE                 db  0Eh
.eh_frame:000000000000A1FF                 db  10h
.eh_frame:000000000000A200                 db  42h ; B
.eh_frame:000000000000A201                 db  0Eh
.eh_frame:000000000000A202                 db    8
.eh_frame:000000000000A203                 db    0
.eh_frame:000000000000A204                 db  68h ; h
.eh_frame:000000000000A205                 db    0
.eh_frame:000000000000A206                 db    0
.eh_frame:000000000000A207                 db    0
.eh_frame:000000000000A208                 db  78h ; x
.eh_frame:000000000000A209                 db    4
.eh_frame:000000000000A20A                 db    0
.eh_frame:000000000000A20B                 db    0
.eh_frame:000000000000A20C                 db  34h ; 4
.eh_frame:000000000000A20D                 db 0A7h
.eh_frame:000000000000A20E                 db 0FFh
.eh_frame:000000000000A20F                 db 0FFh
.eh_frame:000000000000A210                 db 0E3h
.eh_frame:000000000000A211                 db    0
.eh_frame:000000000000A212                 db    0
.eh_frame:000000000000A213                 db    0
.eh_frame:000000000000A214                 db    0
.eh_frame:000000000000A215                 db  42h ; B
.eh_frame:000000000000A216                 db  0Eh
.eh_frame:000000000000A217                 db  10h
.eh_frame:000000000000A218                 db  8Fh
.eh_frame:000000000000A219                 db    2
.eh_frame:000000000000A21A                 db  42h ; B
.eh_frame:000000000000A21B                 db  0Eh
.eh_frame:000000000000A21C                 db  18h
.eh_frame:000000000000A21D                 db  8Eh
.eh_frame:000000000000A21E                 db    3
.eh_frame:000000000000A21F                 db  49h ; I
.eh_frame:000000000000A220                 db  0Eh
.eh_frame:000000000000A221                 db  20h
.eh_frame:000000000000A222                 db  8Dh
.eh_frame:000000000000A223                 db    4
.eh_frame:000000000000A224                 db  42h ; B
.eh_frame:000000000000A225                 db  0Eh
.eh_frame:000000000000A226                 db  28h ; (
.eh_frame:000000000000A227                 db  8Ch
.eh_frame:000000000000A228                 db    5
.eh_frame:000000000000A229                 db  44h ; D
.eh_frame:000000000000A22A                 db  0Eh
.eh_frame:000000000000A22B                 db  30h ; 0
.eh_frame:000000000000A22C                 db  86h
.eh_frame:000000000000A22D                 db    6
.eh_frame:000000000000A22E                 db  41h ; A
.eh_frame:000000000000A22F                 db  0Eh
.eh_frame:000000000000A230                 db  38h ; 8
.eh_frame:000000000000A231                 db  83h
.eh_frame:000000000000A232                 db    7
.eh_frame:000000000000A233                 db  4Dh ; M
.eh_frame:000000000000A234                 db  0Eh
.eh_frame:000000000000A235                 db  70h ; p
.eh_frame:000000000000A236                 db  65h ; e
.eh_frame:000000000000A237                 db  0Eh
.eh_frame:000000000000A238                 db  78h ; x
.eh_frame:000000000000A239                 db  4Dh ; M
.eh_frame:000000000000A23A                 db  0Eh
.eh_frame:000000000000A23B                 db  80h
.eh_frame:000000000000A23C                 db    1
.eh_frame:000000000000A23D                 db  46h ; F
.eh_frame:000000000000A23E                 db  0Eh
.eh_frame:000000000000A23F                 db  88h
.eh_frame:000000000000A240                 db    1
.eh_frame:000000000000A241                 db  42h ; B
.eh_frame:000000000000A242                 db  0Eh
.eh_frame:000000000000A243                 db  90h
.eh_frame:000000000000A244                 db    1
.eh_frame:000000000000A245                 db  5Eh ; ^
.eh_frame:000000000000A246                 db  0Eh
.eh_frame:000000000000A247                 db  70h ; p
.eh_frame:000000000000A248                 db  56h ; V
.eh_frame:000000000000A249                 db  0Eh
.eh_frame:000000000000A24A                 db  78h ; x
.eh_frame:000000000000A24B                 db  43h ; C
.eh_frame:000000000000A24C                 db  0Eh
.eh_frame:000000000000A24D                 db  80h
.eh_frame:000000000000A24E                 db    1
.eh_frame:000000000000A24F                 db  43h ; C
.eh_frame:000000000000A250                 db  0Eh
.eh_frame:000000000000A251                 db  88h
.eh_frame:000000000000A252                 db    1
.eh_frame:000000000000A253                 db  56h ; V
.eh_frame:000000000000A254                 db  0Eh
.eh_frame:000000000000A255                 db  90h
.eh_frame:000000000000A256                 db    1
.eh_frame:000000000000A257                 db  52h ; R
.eh_frame:000000000000A258                 db  0Eh
.eh_frame:000000000000A259                 db  70h ; p
.eh_frame:000000000000A25A                 db  5Bh ; [
.eh_frame:000000000000A25B                 db  0Eh
.eh_frame:000000000000A25C                 db  38h ; 8
.eh_frame:000000000000A25D                 db  41h ; A
.eh_frame:000000000000A25E                 db  0Eh
.eh_frame:000000000000A25F                 db  30h ; 0
.eh_frame:000000000000A260                 db  41h ; A
.eh_frame:000000000000A261                 db  0Eh
.eh_frame:000000000000A262                 db  28h ; (
.eh_frame:000000000000A263                 db  42h ; B
.eh_frame:000000000000A264                 db  0Eh
.eh_frame:000000000000A265                 db  20h
.eh_frame:000000000000A266                 db  42h ; B
.eh_frame:000000000000A267                 db  0Eh
.eh_frame:000000000000A268                 db  18h
.eh_frame:000000000000A269                 db  42h ; B
.eh_frame:000000000000A26A                 db  0Eh
.eh_frame:000000000000A26B                 db  10h
.eh_frame:000000000000A26C                 db  42h ; B
.eh_frame:000000000000A26D                 db  0Eh
.eh_frame:000000000000A26E                 db    8
.eh_frame:000000000000A26F                 db    0
.eh_frame:000000000000A270                 db  10h
.eh_frame:000000000000A271                 db    0
.eh_frame:000000000000A272                 db    0
.eh_frame:000000000000A273                 db    0
.eh_frame:000000000000A274                 db 0E4h
.eh_frame:000000000000A275                 db    4
.eh_frame:000000000000A276                 db    0
.eh_frame:000000000000A277                 db    0
.eh_frame:000000000000A278                 db 0B8h
.eh_frame:000000000000A279                 db 0A7h
.eh_frame:000000000000A27A                 db 0FFh
.eh_frame:000000000000A27B                 db 0FFh
.eh_frame:000000000000A27C                 db  0Ah
.eh_frame:000000000000A27D                 db    0
.eh_frame:000000000000A27E                 db    0
.eh_frame:000000000000A27F                 db    0
.eh_frame:000000000000A280                 db    0
.eh_frame:000000000000A281                 db    0
.eh_frame:000000000000A282                 db    0
.eh_frame:000000000000A283                 db    0
.eh_frame:000000000000A284                 db  28h ; (
.eh_frame:000000000000A285                 db    0
.eh_frame:000000000000A286                 db    0
.eh_frame:000000000000A287                 db    0
.eh_frame:000000000000A288                 db 0F8h
.eh_frame:000000000000A289                 db    4
.eh_frame:000000000000A28A                 db    0
.eh_frame:000000000000A28B                 db    0
.eh_frame:000000000000A28C                 db 0B4h
.eh_frame:000000000000A28D                 db 0A7h
.eh_frame:000000000000A28E                 db 0FFh
.eh_frame:000000000000A28F                 db 0FFh
.eh_frame:000000000000A290                 db  93h
.eh_frame:000000000000A291                 db    0
.eh_frame:000000000000A292                 db    0
.eh_frame:000000000000A293                 db    0
.eh_frame:000000000000A294                 db    0
.eh_frame:000000000000A295                 db  48h ; H
.eh_frame:000000000000A296                 db  0Eh
.eh_frame:000000000000A297                 db  10h
.eh_frame:000000000000A298                 db  8Ch
.eh_frame:000000000000A299                 db    2
.eh_frame:000000000000A29A                 db  48h ; H
.eh_frame:000000000000A29B                 db  0Eh
.eh_frame:000000000000A29C                 db  18h
.eh_frame:000000000000A29D                 db  86h
.eh_frame:000000000000A29E                 db    3
.eh_frame:000000000000A29F                 db  41h ; A
.eh_frame:000000000000A2A0                 db  0Eh
.eh_frame:000000000000A2A1                 db  20h
.eh_frame:000000000000A2A2                 db  83h
.eh_frame:000000000000A2A3                 db    4
.eh_frame:000000000000A2A4                 db    2
.eh_frame:000000000000A2A5                 db  74h ; t
.eh_frame:000000000000A2A6                 db  0Eh
.eh_frame:000000000000A2A7                 db  18h
.eh_frame:000000000000A2A8                 db  4Bh ; K
.eh_frame:000000000000A2A9                 db  0Eh
.eh_frame:000000000000A2AA                 db  10h
.eh_frame:000000000000A2AB                 db  42h ; B
.eh_frame:000000000000A2AC                 db  0Eh
.eh_frame:000000000000A2AD                 db    8
.eh_frame:000000000000A2AE                 db    0
.eh_frame:000000000000A2AF                 db    0
.eh_frame:000000000000A2B0                 db  10h
.eh_frame:000000000000A2B1                 db    0
.eh_frame:000000000000A2B2                 db    0
.eh_frame:000000000000A2B3                 db    0
.eh_frame:000000000000A2B4                 db  24h ; $
.eh_frame:000000000000A2B5                 db    5
.eh_frame:000000000000A2B6                 db    0
.eh_frame:000000000000A2B7                 db    0
.eh_frame:000000000000A2B8                 db  28h ; (
.eh_frame:000000000000A2B9                 db 0A8h
.eh_frame:000000000000A2BA                 db 0FFh
.eh_frame:000000000000A2BB                 db 0FFh
.eh_frame:000000000000A2BC                 db  13h
.eh_frame:000000000000A2BD                 db    0
.eh_frame:000000000000A2BE                 db    0
.eh_frame:000000000000A2BF                 db    0
.eh_frame:000000000000A2C0                 db    0
.eh_frame:000000000000A2C1                 db    0
.eh_frame:000000000000A2C2                 db    0
.eh_frame:000000000000A2C3                 db    0
.eh_frame:000000000000A2C4                 db  10h
.eh_frame:000000000000A2C5                 db    0
.eh_frame:000000000000A2C6                 db    0
.eh_frame:000000000000A2C7                 db    0
.eh_frame:000000000000A2C8                 db  38h ; 8
.eh_frame:000000000000A2C9                 db    5
.eh_frame:000000000000A2CA                 db    0
.eh_frame:000000000000A2CB                 db    0
.eh_frame:000000000000A2CC                 db  34h ; 4
.eh_frame:000000000000A2CD                 db 0A8h
.eh_frame:000000000000A2CE                 db 0FFh
.eh_frame:000000000000A2CF                 db 0FFh
.eh_frame:000000000000A2D0                 db  0Ch
.eh_frame:000000000000A2D1                 db    0
.eh_frame:000000000000A2D2                 db    0
.eh_frame:000000000000A2D3                 db    0
.eh_frame:000000000000A2D4                 db    0
.eh_frame:000000000000A2D5                 db    0
.eh_frame:000000000000A2D6                 db    0
.eh_frame:000000000000A2D7                 db    0
.eh_frame:000000000000A2D8                 db  10h
.eh_frame:000000000000A2D9                 db    0
.eh_frame:000000000000A2DA                 db    0
.eh_frame:000000000000A2DB                 db    0
.eh_frame:000000000000A2DC                 db  4Ch ; L
.eh_frame:000000000000A2DD                 db    5
.eh_frame:000000000000A2DE                 db    0
.eh_frame:000000000000A2DF                 db    0
.eh_frame:000000000000A2E0                 db  30h ; 0
.eh_frame:000000000000A2E1                 db 0A8h
.eh_frame:000000000000A2E2                 db 0FFh
.eh_frame:000000000000A2E3                 db 0FFh
.eh_frame:000000000000A2E4                 db  18h
.eh_frame:000000000000A2E5                 db    0
.eh_frame:000000000000A2E6                 db    0
.eh_frame:000000000000A2E7                 db    0
.eh_frame:000000000000A2E8                 db    0
.eh_frame:000000000000A2E9                 db    0
.eh_frame:000000000000A2EA                 db    0
.eh_frame:000000000000A2EB                 db    0
.eh_frame:000000000000A2EC                 db  10h
.eh_frame:000000000000A2ED                 db    0
.eh_frame:000000000000A2EE                 db    0
.eh_frame:000000000000A2EF                 db    0
.eh_frame:000000000000A2F0                 db  60h ; `
.eh_frame:000000000000A2F1                 db    5
.eh_frame:000000000000A2F2                 db    0
.eh_frame:000000000000A2F3                 db    0
.eh_frame:000000000000A2F4                 db  3Ch ; <
.eh_frame:000000000000A2F5                 db 0A8h
.eh_frame:000000000000A2F6                 db 0FFh
.eh_frame:000000000000A2F7                 db 0FFh
.eh_frame:000000000000A2F8                 db  14h
.eh_frame:000000000000A2F9                 db    0
.eh_frame:000000000000A2FA                 db    0
.eh_frame:000000000000A2FB                 db    0
.eh_frame:000000000000A2FC                 db    0
.eh_frame:000000000000A2FD                 db    0
.eh_frame:000000000000A2FE                 db    0
.eh_frame:000000000000A2FF                 db    0
.eh_frame:000000000000A300                 db  18h
.eh_frame:000000000000A301                 db    0
.eh_frame:000000000000A302                 db    0
.eh_frame:000000000000A303                 db    0
.eh_frame:000000000000A304                 db  74h ; t
.eh_frame:000000000000A305                 db    5
.eh_frame:000000000000A306                 db    0
.eh_frame:000000000000A307                 db    0
.eh_frame:000000000000A308                 db  48h ; H
.eh_frame:000000000000A309                 db 0A8h
.eh_frame:000000000000A30A                 db 0FFh
.eh_frame:000000000000A30B                 db 0FFh
.eh_frame:000000000000A30C                 db  8Eh
.eh_frame:000000000000A30D                 db    0
.eh_frame:000000000000A30E                 db    0
.eh_frame:000000000000A30F                 db    0
.eh_frame:000000000000A310                 db    0
.eh_frame:000000000000A311                 db  44h ; D
.eh_frame:000000000000A312                 db  0Eh
.eh_frame:000000000000A313                 db  50h ; P
.eh_frame:000000000000A314                 db    2
.eh_frame:000000000000A315                 db  7Fh ; 
.eh_frame:000000000000A316                 db  0Ah
.eh_frame:000000000000A317                 db  0Eh
.eh_frame:000000000000A318                 db    8
.eh_frame:000000000000A319                 db  41h ; A
.eh_frame:000000000000A31A                 db  0Bh
.eh_frame:000000000000A31B                 db    0
.eh_frame:000000000000A31C                 db  18h
.eh_frame:000000000000A31D                 db    0
.eh_frame:000000000000A31E                 db    0
.eh_frame:000000000000A31F                 db    0
.eh_frame:000000000000A320                 db  90h
.eh_frame:000000000000A321                 db    5
.eh_frame:000000000000A322                 db    0
.eh_frame:000000000000A323                 db    0
.eh_frame:000000000000A324                 db 0BCh
.eh_frame:000000000000A325                 db 0A8h
.eh_frame:000000000000A326                 db 0FFh
.eh_frame:000000000000A327                 db 0FFh
.eh_frame:000000000000A328                 db  8Ah
.eh_frame:000000000000A329                 db    0
.eh_frame:000000000000A32A                 db    0
.eh_frame:000000000000A32B                 db    0
.eh_frame:000000000000A32C                 db    0
.eh_frame:000000000000A32D                 db  44h ; D
.eh_frame:000000000000A32E                 db  0Eh
.eh_frame:000000000000A32F                 db  50h ; P
.eh_frame:000000000000A330                 db    2
.eh_frame:000000000000A331                 db  7Bh ; {
.eh_frame:000000000000A332                 db  0Ah
.eh_frame:000000000000A333                 db  0Eh
.eh_frame:000000000000A334                 db    8
.eh_frame:000000000000A335                 db  41h ; A
.eh_frame:000000000000A336                 db  0Bh
.eh_frame:000000000000A337                 db    0
.eh_frame:000000000000A338                 db  10h
.eh_frame:000000000000A339                 db    0
.eh_frame:000000000000A33A                 db    0
.eh_frame:000000000000A33B                 db    0
.eh_frame:000000000000A33C                 db 0ACh
.eh_frame:000000000000A33D                 db    5
.eh_frame:000000000000A33E                 db    0
.eh_frame:000000000000A33F                 db    0
.eh_frame:000000000000A340                 db  30h ; 0
.eh_frame:000000000000A341                 db 0A9h
.eh_frame:000000000000A342                 db 0FFh
.eh_frame:000000000000A343                 db 0FFh
.eh_frame:000000000000A344                 db  0Ch
.eh_frame:000000000000A345                 db    0
.eh_frame:000000000000A346                 db    0
.eh_frame:000000000000A347                 db    0
.eh_frame:000000000000A348                 db    0
.eh_frame:000000000000A349                 db    0
.eh_frame:000000000000A34A                 db    0
.eh_frame:000000000000A34B                 db    0
.eh_frame:000000000000A34C                 db  10h
.eh_frame:000000000000A34D                 db    0
.eh_frame:000000000000A34E                 db    0
.eh_frame:000000000000A34F                 db    0
.eh_frame:000000000000A350                 db 0C0h
.eh_frame:000000000000A351                 db    5
.eh_frame:000000000000A352                 db    0
.eh_frame:000000000000A353                 db    0
.eh_frame:000000000000A354                 db  2Ch ; ,
.eh_frame:000000000000A355                 db 0A9h
.eh_frame:000000000000A356                 db 0FFh
.eh_frame:000000000000A357                 db 0FFh
.eh_frame:000000000000A358                 db  0Fh
.eh_frame:000000000000A359                 db    0
.eh_frame:000000000000A35A                 db    0
.eh_frame:000000000000A35B                 db    0
.eh_frame:000000000000A35C                 db    0
.eh_frame:000000000000A35D                 db    0
.eh_frame:000000000000A35E                 db    0
.eh_frame:000000000000A35F                 db    0
.eh_frame:000000000000A360                 db  18h
.eh_frame:000000000000A361                 db    0
.eh_frame:000000000000A362                 db    0
.eh_frame:000000000000A363                 db    0
.eh_frame:000000000000A364                 db 0D4h
.eh_frame:000000000000A365                 db    5
.eh_frame:000000000000A366                 db    0
.eh_frame:000000000000A367                 db    0
.eh_frame:000000000000A368                 db  28h ; (
.eh_frame:000000000000A369                 db 0A9h
.eh_frame:000000000000A36A                 db 0FFh
.eh_frame:000000000000A36B                 db 0FFh
.eh_frame:000000000000A36C                 db  98h
.eh_frame:000000000000A36D                 db    0
.eh_frame:000000000000A36E                 db    0
.eh_frame:000000000000A36F                 db    0
.eh_frame:000000000000A370                 db    0
.eh_frame:000000000000A371                 db  44h ; D
.eh_frame:000000000000A372                 db  0Eh
.eh_frame:000000000000A373                 db  50h ; P
.eh_frame:000000000000A374                 db    2
.eh_frame:000000000000A375                 db  8Eh
.eh_frame:000000000000A376                 db  0Ah
.eh_frame:000000000000A377                 db  0Eh
.eh_frame:000000000000A378                 db    8
.eh_frame:000000000000A379                 db  41h ; A
.eh_frame:000000000000A37A                 db  0Bh
.eh_frame:000000000000A37B                 db    0
.eh_frame:000000000000A37C                 db  10h
.eh_frame:000000000000A37D                 db    0
.eh_frame:000000000000A37E                 db    0
.eh_frame:000000000000A37F                 db    0
.eh_frame:000000000000A380                 db 0F0h
.eh_frame:000000000000A381                 db    5
.eh_frame:000000000000A382                 db    0
.eh_frame:000000000000A383                 db    0
.eh_frame:000000000000A384                 db 0ACh
.eh_frame:000000000000A385                 db 0A9h
.eh_frame:000000000000A386                 db 0FFh
.eh_frame:000000000000A387                 db 0FFh
.eh_frame:000000000000A388                 db  10h
.eh_frame:000000000000A389                 db    0
.eh_frame:000000000000A38A                 db    0
.eh_frame:000000000000A38B                 db    0
.eh_frame:000000000000A38C                 db    0
.eh_frame:000000000000A38D                 db    0
.eh_frame:000000000000A38E                 db    0
.eh_frame:000000000000A38F                 db    0
.eh_frame:000000000000A390                 db  10h
.eh_frame:000000000000A391                 db    0
.eh_frame:000000000000A392                 db    0
.eh_frame:000000000000A393                 db    0
.eh_frame:000000000000A394                 db    4
.eh_frame:000000000000A395                 db    6
.eh_frame:000000000000A396                 db    0
.eh_frame:000000000000A397                 db    0
.eh_frame:000000000000A398                 db 0A8h
.eh_frame:000000000000A399                 db 0A9h
.eh_frame:000000000000A39A                 db 0FFh
.eh_frame:000000000000A39B                 db 0FFh
.eh_frame:000000000000A39C                 db  11h
.eh_frame:000000000000A39D                 db    0
.eh_frame:000000000000A39E                 db    0
.eh_frame:000000000000A39F                 db    0
.eh_frame:000000000000A3A0                 db    0
.eh_frame:000000000000A3A1                 db    0
.eh_frame:000000000000A3A2                 db    0
.eh_frame:000000000000A3A3                 db    0
.eh_frame:000000000000A3A4                 db  10h
.eh_frame:000000000000A3A5                 db    0
.eh_frame:000000000000A3A6                 db    0
.eh_frame:000000000000A3A7                 db    0
.eh_frame:000000000000A3A8                 db  18h
.eh_frame:000000000000A3A9                 db    6
.eh_frame:000000000000A3AA                 db    0
.eh_frame:000000000000A3AB                 db    0
.eh_frame:000000000000A3AC                 db 0B4h
.eh_frame:000000000000A3AD                 db 0A9h
.eh_frame:000000000000A3AE                 db 0FFh
.eh_frame:000000000000A3AF                 db 0FFh
.eh_frame:000000000000A3B0                 db  0Ah
.eh_frame:000000000000A3B1                 db    0
.eh_frame:000000000000A3B2                 db    0
.eh_frame:000000000000A3B3                 db    0
.eh_frame:000000000000A3B4                 db    0
.eh_frame:000000000000A3B5                 db    0
.eh_frame:000000000000A3B6                 db    0
.eh_frame:000000000000A3B7                 db    0
.eh_frame:000000000000A3B8                 db  18h
.eh_frame:000000000000A3B9                 db    0
.eh_frame:000000000000A3BA                 db    0
.eh_frame:000000000000A3BB                 db    0
.eh_frame:000000000000A3BC                 db  2Ch ; ,
.eh_frame:000000000000A3BD                 db    6
.eh_frame:000000000000A3BE                 db    0
.eh_frame:000000000000A3BF                 db    0
.eh_frame:000000000000A3C0                 db 0B0h
.eh_frame:000000000000A3C1                 db 0A9h
.eh_frame:000000000000A3C2                 db 0FFh
.eh_frame:000000000000A3C3                 db 0FFh
.eh_frame:000000000000A3C4                 db  8Eh
.eh_frame:000000000000A3C5                 db    0
.eh_frame:000000000000A3C6                 db    0
.eh_frame:000000000000A3C7                 db    0
.eh_frame:000000000000A3C8                 db    0
.eh_frame:000000000000A3C9                 db  44h ; D
.eh_frame:000000000000A3CA                 db  0Eh
.eh_frame:000000000000A3CB                 db  50h ; P
.eh_frame:000000000000A3CC                 db    2
.eh_frame:000000000000A3CD                 db  7Fh ; 
.eh_frame:000000000000A3CE                 db  0Ah
.eh_frame:000000000000A3CF                 db  0Eh
.eh_frame:000000000000A3D0                 db    8
.eh_frame:000000000000A3D1                 db  41h ; A
.eh_frame:000000000000A3D2                 db  0Bh
.eh_frame:000000000000A3D3                 db    0
.eh_frame:000000000000A3D4                 db  18h
.eh_frame:000000000000A3D5                 db    0
.eh_frame:000000000000A3D6                 db    0
.eh_frame:000000000000A3D7                 db    0
.eh_frame:000000000000A3D8                 db  48h ; H
.eh_frame:000000000000A3D9                 db    6
.eh_frame:000000000000A3DA                 db    0
.eh_frame:000000000000A3DB                 db    0
.eh_frame:000000000000A3DC                 db  24h ; $
.eh_frame:000000000000A3DD                 db 0AAh
.eh_frame:000000000000A3DE                 db 0FFh
.eh_frame:000000000000A3DF                 db 0FFh
.eh_frame:000000000000A3E0                 db  91h
.eh_frame:000000000000A3E1                 db    0
.eh_frame:000000000000A3E2                 db    0
.eh_frame:000000000000A3E3                 db    0
.eh_frame:000000000000A3E4                 db    0
.eh_frame:000000000000A3E5                 db  44h ; D
.eh_frame:000000000000A3E6                 db  0Eh
.eh_frame:000000000000A3E7                 db  50h ; P
.eh_frame:000000000000A3E8                 db    2
.eh_frame:000000000000A3E9                 db  82h
.eh_frame:000000000000A3EA                 db  0Ah
.eh_frame:000000000000A3EB                 db  0Eh
.eh_frame:000000000000A3EC                 db    8
.eh_frame:000000000000A3ED                 db  41h ; A
.eh_frame:000000000000A3EE                 db  0Bh
.eh_frame:000000000000A3EF                 db    0
.eh_frame:000000000000A3F0                 db  10h
.eh_frame:000000000000A3F1                 db    0
.eh_frame:000000000000A3F2                 db    0
.eh_frame:000000000000A3F3                 db    0
.eh_frame:000000000000A3F4                 db  64h ; d
.eh_frame:000000000000A3F5                 db    6
.eh_frame:000000000000A3F6                 db    0
.eh_frame:000000000000A3F7                 db    0
.eh_frame:000000000000A3F8                 db 0A8h
.eh_frame:000000000000A3F9                 db 0AAh
.eh_frame:000000000000A3FA                 db 0FFh
.eh_frame:000000000000A3FB                 db 0FFh
.eh_frame:000000000000A3FC                 db  0Ch
.eh_frame:000000000000A3FD                 db    0
.eh_frame:000000000000A3FE                 db    0
.eh_frame:000000000000A3FF                 db    0
.eh_frame:000000000000A400                 db    0
.eh_frame:000000000000A401                 db    0
.eh_frame:000000000000A402                 db    0
.eh_frame:000000000000A403                 db    0
.eh_frame:000000000000A404                 db  10h
.eh_frame:000000000000A405                 db    0
.eh_frame:000000000000A406                 db    0
.eh_frame:000000000000A407                 db    0
.eh_frame:000000000000A408                 db  78h ; x
.eh_frame:000000000000A409                 db    6
.eh_frame:000000000000A40A                 db    0
.eh_frame:000000000000A40B                 db    0
.eh_frame:000000000000A40C                 db 0A4h
.eh_frame:000000000000A40D                 db 0AAh
.eh_frame:000000000000A40E                 db 0FFh
.eh_frame:000000000000A40F                 db 0FFh
.eh_frame:000000000000A410                 db  17h
.eh_frame:000000000000A411                 db    0
.eh_frame:000000000000A412                 db    0
.eh_frame:000000000000A413                 db    0
.eh_frame:000000000000A414                 db    0
.eh_frame:000000000000A415                 db    0
.eh_frame:000000000000A416                 db    0
.eh_frame:000000000000A417                 db    0
.eh_frame:000000000000A418                 db  10h
.eh_frame:000000000000A419                 db    0
.eh_frame:000000000000A41A                 db    0
.eh_frame:000000000000A41B                 db    0
.eh_frame:000000000000A41C                 db  8Ch
.eh_frame:000000000000A41D                 db    6
.eh_frame:000000000000A41E                 db    0
.eh_frame:000000000000A41F                 db    0
.eh_frame:000000000000A420                 db 0B0h
.eh_frame:000000000000A421                 db 0AAh
.eh_frame:000000000000A422                 db 0FFh
.eh_frame:000000000000A423                 db 0FFh
.eh_frame:000000000000A424                 db  13h
.eh_frame:000000000000A425                 db    0
.eh_frame:000000000000A426                 db    0
.eh_frame:000000000000A427                 db    0
.eh_frame:000000000000A428                 db    0
.eh_frame:000000000000A429                 db    0
.eh_frame:000000000000A42A                 db    0
.eh_frame:000000000000A42B                 db    0
.eh_frame:000000000000A42C                 db  10h
.eh_frame:000000000000A42D                 db    0
.eh_frame:000000000000A42E                 db    0
.eh_frame:000000000000A42F                 db    0
.eh_frame:000000000000A430                 db 0A0h
.eh_frame:000000000000A431                 db    6
.eh_frame:000000000000A432                 db    0
.eh_frame:000000000000A433                 db    0
.eh_frame:000000000000A434                 db 0BCh
.eh_frame:000000000000A435                 db 0AAh
.eh_frame:000000000000A436                 db 0FFh
.eh_frame:000000000000A437                 db 0FFh
.eh_frame:000000000000A438                 db  0Ch
.eh_frame:000000000000A439                 db    0
.eh_frame:000000000000A43A                 db    0
.eh_frame:000000000000A43B                 db    0
.eh_frame:000000000000A43C                 db    0
.eh_frame:000000000000A43D                 db    0
.eh_frame:000000000000A43E                 db    0
.eh_frame:000000000000A43F                 db    0
.eh_frame:000000000000A440                 db  10h
.eh_frame:000000000000A441                 db    0
.eh_frame:000000000000A442                 db    0
.eh_frame:000000000000A443                 db    0
.eh_frame:000000000000A444                 db 0B4h
.eh_frame:000000000000A445                 db    6
.eh_frame:000000000000A446                 db    0
.eh_frame:000000000000A447                 db    0
.eh_frame:000000000000A448                 db 0B8h
.eh_frame:000000000000A449                 db 0AAh
.eh_frame:000000000000A44A                 db 0FFh
.eh_frame:000000000000A44B                 db 0FFh
.eh_frame:000000000000A44C                 db  14h
.eh_frame:000000000000A44D                 db    0
.eh_frame:000000000000A44E                 db    0
.eh_frame:000000000000A44F                 db    0
.eh_frame:000000000000A450                 db    0
.eh_frame:000000000000A451                 db    0
.eh_frame:000000000000A452                 db    0
.eh_frame:000000000000A453                 db    0
.eh_frame:000000000000A454                 db  10h
.eh_frame:000000000000A455                 db    0
.eh_frame:000000000000A456                 db    0
.eh_frame:000000000000A457                 db    0
.eh_frame:000000000000A458                 db 0C8h
.eh_frame:000000000000A459                 db    6
.eh_frame:000000000000A45A                 db    0
.eh_frame:000000000000A45B                 db    0
.eh_frame:000000000000A45C                 db 0C4h
.eh_frame:000000000000A45D                 db 0AAh
.eh_frame:000000000000A45E                 db 0FFh
.eh_frame:000000000000A45F                 db 0FFh
.eh_frame:000000000000A460                 db  13h
.eh_frame:000000000000A461                 db    0
.eh_frame:000000000000A462                 db    0
.eh_frame:000000000000A463                 db    0
.eh_frame:000000000000A464                 db    0
.eh_frame:000000000000A465                 db    0
.eh_frame:000000000000A466                 db    0
.eh_frame:000000000000A467                 db    0
.eh_frame:000000000000A468                 db  14h
.eh_frame:000000000000A469                 db    0
.eh_frame:000000000000A46A                 db    0
.eh_frame:000000000000A46B                 db    0
.eh_frame:000000000000A46C                 db 0DCh
.eh_frame:000000000000A46D                 db    6
.eh_frame:000000000000A46E                 db    0
.eh_frame:000000000000A46F                 db    0
.eh_frame:000000000000A470                 db 0D0h
.eh_frame:000000000000A471                 db 0AAh
.eh_frame:000000000000A472                 db 0FFh
.eh_frame:000000000000A473                 db 0FFh
.eh_frame:000000000000A474                 db  18h
.eh_frame:000000000000A475                 db    0
.eh_frame:000000000000A476                 db    0
.eh_frame:000000000000A477                 db    0
.eh_frame:000000000000A478                 db    0
.eh_frame:000000000000A479                 db    0
.eh_frame:000000000000A47A                 db    0
.eh_frame:000000000000A47B                 db    0
.eh_frame:000000000000A47C                 db    0
.eh_frame:000000000000A47D                 db    0
.eh_frame:000000000000A47E                 db    0
.eh_frame:000000000000A47F                 db    0
.eh_frame:000000000000A480                 db  14h
.eh_frame:000000000000A481                 db    0
.eh_frame:000000000000A482                 db    0
.eh_frame:000000000000A483                 db    0
.eh_frame:000000000000A484                 db 0F4h
.eh_frame:000000000000A485                 db    6
.eh_frame:000000000000A486                 db    0
.eh_frame:000000000000A487                 db    0
.eh_frame:000000000000A488                 db 0D8h
.eh_frame:000000000000A489                 db 0AAh
.eh_frame:000000000000A48A                 db 0FFh
.eh_frame:000000000000A48B                 db 0FFh
.eh_frame:000000000000A48C                 db  1Bh
.eh_frame:000000000000A48D                 db    0
.eh_frame:000000000000A48E                 db    0
.eh_frame:000000000000A48F                 db    0
.eh_frame:000000000000A490                 db    0
.eh_frame:000000000000A491                 db  44h ; D
.eh_frame:000000000000A492                 db  0Eh
.eh_frame:000000000000A493                 db  10h
.eh_frame:000000000000A494                 db  56h ; V
.eh_frame:000000000000A495                 db  0Eh
.eh_frame:000000000000A496                 db    8
.eh_frame:000000000000A497                 db    0
.eh_frame:000000000000A498                 db  1Ch
.eh_frame:000000000000A499                 db    0
.eh_frame:000000000000A49A                 db    0
.eh_frame:000000000000A49B                 db    0
.eh_frame:000000000000A49C                 db  0Ch
.eh_frame:000000000000A49D                 db    7
.eh_frame:000000000000A49E                 db    0
.eh_frame:000000000000A49F                 db    0
.eh_frame:000000000000A4A0                 db 0E0h
.eh_frame:000000000000A4A1                 db 0AAh
.eh_frame:000000000000A4A2                 db 0FFh
.eh_frame:000000000000A4A3                 db 0FFh
.eh_frame:000000000000A4A4                 db  4Fh ; O
.eh_frame:000000000000A4A5                 db    0
.eh_frame:000000000000A4A6                 db    0
.eh_frame:000000000000A4A7                 db    0
.eh_frame:000000000000A4A8                 db    0
.eh_frame:000000000000A4A9                 db  46h ; F
.eh_frame:000000000000A4AA                 db  0Eh
.eh_frame:000000000000A4AB                 db  10h
.eh_frame:000000000000A4AC                 db  69h ; i
.eh_frame:000000000000A4AD                 db  0Ah
.eh_frame:000000000000A4AE                 db  0Eh
.eh_frame:000000000000A4AF                 db    8
.eh_frame:000000000000A4B0                 db  41h ; A
.eh_frame:000000000000A4B1                 db  0Bh
.eh_frame:000000000000A4B2                 db  5Eh ; ^
.eh_frame:000000000000A4B3                 db  0Eh
.eh_frame:000000000000A4B4                 db    8
.eh_frame:000000000000A4B5                 db    0
.eh_frame:000000000000A4B6                 db    0
.eh_frame:000000000000A4B7                 db    0
.eh_frame:000000000000A4B8                 db  30h ; 0
.eh_frame:000000000000A4B9                 db    0
.eh_frame:000000000000A4BA                 db    0
.eh_frame:000000000000A4BB                 db    0
.eh_frame:000000000000A4BC                 db  2Ch ; ,
.eh_frame:000000000000A4BD                 db    7
.eh_frame:000000000000A4BE                 db    0
.eh_frame:000000000000A4BF                 db    0
.eh_frame:000000000000A4C0                 db  10h
.eh_frame:000000000000A4C1                 db 0ABh
.eh_frame:000000000000A4C2                 db 0FFh
.eh_frame:000000000000A4C3                 db 0FFh
.eh_frame:000000000000A4C4                 db  87h
.eh_frame:000000000000A4C5                 db    0
.eh_frame:000000000000A4C6                 db    0
.eh_frame:000000000000A4C7                 db    0
.eh_frame:000000000000A4C8                 db    0
.eh_frame:000000000000A4C9                 db  41h ; A
.eh_frame:000000000000A4CA                 db  0Eh
.eh_frame:000000000000A4CB                 db  10h
.eh_frame:000000000000A4CC                 db  86h
.eh_frame:000000000000A4CD                 db    2
.eh_frame:000000000000A4CE                 db  41h ; A
.eh_frame:000000000000A4CF                 db  0Eh
.eh_frame:000000000000A4D0                 db  18h
.eh_frame:000000000000A4D1                 db  83h
.eh_frame:000000000000A4D2                 db    3
.eh_frame:000000000000A4D3                 db  4Bh ; K
.eh_frame:000000000000A4D4                 db  0Eh
.eh_frame:000000000000A4D5                 db  20h
.eh_frame:000000000000A4D6                 db  7Ch ; |
.eh_frame:000000000000A4D7                 db  0Ah
.eh_frame:000000000000A4D8                 db  0Eh
.eh_frame:000000000000A4D9                 db  18h
.eh_frame:000000000000A4DA                 db  48h ; H
.eh_frame:000000000000A4DB                 db  0Eh
.eh_frame:000000000000A4DC                 db  10h
.eh_frame:000000000000A4DD                 db  41h ; A
.eh_frame:000000000000A4DE                 db  0Eh
.eh_frame:000000000000A4DF                 db    8
.eh_frame:000000000000A4E0                 db  46h ; F
.eh_frame:000000000000A4E1                 db  0Bh
.eh_frame:000000000000A4E2                 db  65h ; e
.eh_frame:000000000000A4E3                 db  0Eh
.eh_frame:000000000000A4E4                 db  18h
.eh_frame:000000000000A4E5                 db  48h ; H
.eh_frame:000000000000A4E6                 db  0Eh
.eh_frame:000000000000A4E7                 db  10h
.eh_frame:000000000000A4E8                 db  41h ; A
.eh_frame:000000000000A4E9                 db  0Eh
.eh_frame:000000000000A4EA                 db    8
.eh_frame:000000000000A4EB                 db    0
.eh_frame:000000000000A4EC                 db  48h ; H
.eh_frame:000000000000A4ED                 db    0
.eh_frame:000000000000A4EE                 db    0
.eh_frame:000000000000A4EF                 db    0
.eh_frame:000000000000A4F0                 db  60h ; `
.eh_frame:000000000000A4F1                 db    7
.eh_frame:000000000000A4F2                 db    0
.eh_frame:000000000000A4F3                 db    0
.eh_frame:000000000000A4F4                 db  6Ch ; l
.eh_frame:000000000000A4F5                 db 0ABh
.eh_frame:000000000000A4F6                 db 0FFh
.eh_frame:000000000000A4F7                 db 0FFh
.eh_frame:000000000000A4F8                 db  0Ch
.eh_frame:000000000000A4F9                 db    2
.eh_frame:000000000000A4FA                 db    0
.eh_frame:000000000000A4FB                 db    0
.eh_frame:000000000000A4FC                 db    0
.eh_frame:000000000000A4FD                 db  42h ; B
.eh_frame:000000000000A4FE                 db  0Eh
.eh_frame:000000000000A4FF                 db  10h
.eh_frame:000000000000A500                 db  8Fh
.eh_frame:000000000000A501                 db    2
.eh_frame:000000000000A502                 db  42h ; B
.eh_frame:000000000000A503                 db  0Eh
.eh_frame:000000000000A504                 db  18h
.eh_frame:000000000000A505                 db  8Eh
.eh_frame:000000000000A506                 db    3
.eh_frame:000000000000A507                 db  45h ; E
.eh_frame:000000000000A508                 db  0Eh
.eh_frame:000000000000A509                 db  20h
.eh_frame:000000000000A50A                 db  8Dh
.eh_frame:000000000000A50B                 db    4
.eh_frame:000000000000A50C                 db  42h ; B
.eh_frame:000000000000A50D                 db  0Eh
.eh_frame:000000000000A50E                 db  28h ; (
.eh_frame:000000000000A50F                 db  8Ch
.eh_frame:000000000000A510                 db    5
.eh_frame:000000000000A511                 db  44h ; D
.eh_frame:000000000000A512                 db  0Eh
.eh_frame:000000000000A513                 db  30h ; 0
.eh_frame:000000000000A514                 db  86h
.eh_frame:000000000000A515                 db    6
.eh_frame:000000000000A516                 db  41h ; A
.eh_frame:000000000000A517                 db  0Eh
.eh_frame:000000000000A518                 db  38h ; 8
.eh_frame:000000000000A519                 db  83h
.eh_frame:000000000000A51A                 db    7
.eh_frame:000000000000A51B                 db  49h ; I
.eh_frame:000000000000A51C                 db  0Eh
.eh_frame:000000000000A51D                 db 0B0h
.eh_frame:000000000000A51E                 db    1
.eh_frame:000000000000A51F                 db    2
.eh_frame:000000000000A520                 db  83h
.eh_frame:000000000000A521                 db  0Ah
.eh_frame:000000000000A522                 db  0Eh
.eh_frame:000000000000A523                 db  38h ; 8
.eh_frame:000000000000A524                 db  41h ; A
.eh_frame:000000000000A525                 db  0Eh
.eh_frame:000000000000A526                 db  30h ; 0
.eh_frame:000000000000A527                 db  41h ; A
.eh_frame:000000000000A528                 db  0Eh
.eh_frame:000000000000A529                 db  28h ; (
.eh_frame:000000000000A52A                 db  42h ; B
.eh_frame:000000000000A52B                 db  0Eh
.eh_frame:000000000000A52C                 db  20h
.eh_frame:000000000000A52D                 db  42h ; B
.eh_frame:000000000000A52E                 db  0Eh
.eh_frame:000000000000A52F                 db  18h
.eh_frame:000000000000A530                 db  42h ; B
.eh_frame:000000000000A531                 db  0Eh
.eh_frame:000000000000A532                 db  10h
.eh_frame:000000000000A533                 db  42h ; B
.eh_frame:000000000000A534                 db  0Eh
.eh_frame:000000000000A535                 db    8
.eh_frame:000000000000A536                 db  4Ah ; J
.eh_frame:000000000000A537                 db  0Bh
.eh_frame:000000000000A538                 db  14h
.eh_frame:000000000000A539                 db    0
.eh_frame:000000000000A53A                 db    0
.eh_frame:000000000000A53B                 db    0
.eh_frame:000000000000A53C                 db 0ACh
.eh_frame:000000000000A53D                 db    7
.eh_frame:000000000000A53E                 db    0
.eh_frame:000000000000A53F                 db    0
.eh_frame:000000000000A540                 db  30h ; 0
.eh_frame:000000000000A541                 db 0ADh
.eh_frame:000000000000A542                 db 0FFh
.eh_frame:000000000000A543                 db 0FFh
.eh_frame:000000000000A544                 db  25h ; %
.eh_frame:000000000000A545                 db    0
.eh_frame:000000000000A546                 db    0
.eh_frame:000000000000A547                 db    0
.eh_frame:000000000000A548                 db    0
.eh_frame:000000000000A549                 db    0
.eh_frame:000000000000A54A                 db    0
.eh_frame:000000000000A54B                 db    0
.eh_frame:000000000000A54C                 db    0
.eh_frame:000000000000A54D                 db    0
.eh_frame:000000000000A54E                 db    0
.eh_frame:000000000000A54F                 db    0
.eh_frame:000000000000A550                 db  14h
.eh_frame:000000000000A551                 db    0
.eh_frame:000000000000A552                 db    0
.eh_frame:000000000000A553                 db    0
.eh_frame:000000000000A554                 db 0C4h
.eh_frame:000000000000A555                 db    7
.eh_frame:000000000000A556                 db    0
.eh_frame:000000000000A557                 db    0
.eh_frame:000000000000A558                 db  48h ; H
.eh_frame:000000000000A559                 db 0ADh
.eh_frame:000000000000A55A                 db 0FFh
.eh_frame:000000000000A55B                 db 0FFh
.eh_frame:000000000000A55C                 db 0ACh
.eh_frame:000000000000A55D                 db    0
.eh_frame:000000000000A55E                 db    0
.eh_frame:000000000000A55F                 db    0
.eh_frame:000000000000A560                 db    0
.eh_frame:000000000000A561                 db    0
.eh_frame:000000000000A562                 db    0
.eh_frame:000000000000A563                 db    0
.eh_frame:000000000000A564                 db    0
.eh_frame:000000000000A565                 db    0
.eh_frame:000000000000A566                 db    0
.eh_frame:000000000000A567                 db    0
.eh_frame:000000000000A568                 db  10h
.eh_frame:000000000000A569                 db    1
.eh_frame:000000000000A56A                 db    0
.eh_frame:000000000000A56B                 db    0
.eh_frame:000000000000A56C                 db 0DCh
.eh_frame:000000000000A56D                 db    7
.eh_frame:000000000000A56E                 db    0
.eh_frame:000000000000A56F                 db    0
.eh_frame:000000000000A570                 db 0E0h
.eh_frame:000000000000A571                 db 0ADh
.eh_frame:000000000000A572                 db 0FFh
.eh_frame:000000000000A573                 db 0FFh
.eh_frame:000000000000A574                 db  17h
.eh_frame:000000000000A575                 db    4
.eh_frame:000000000000A576                 db    0
.eh_frame:000000000000A577                 db    0
.eh_frame:000000000000A578                 db    0
.eh_frame:000000000000A579                 db  42h ; B
.eh_frame:000000000000A57A                 db  0Eh
.eh_frame:000000000000A57B                 db  10h
.eh_frame:000000000000A57C                 db  8Fh
.eh_frame:000000000000A57D                 db    2
.eh_frame:000000000000A57E                 db  42h ; B
.eh_frame:000000000000A57F                 db  0Eh
.eh_frame:000000000000A580                 db  18h
.eh_frame:000000000000A581                 db  8Eh
.eh_frame:000000000000A582                 db    3
.eh_frame:000000000000A583                 db  42h ; B
.eh_frame:000000000000A584                 db  0Eh
.eh_frame:000000000000A585                 db  20h
.eh_frame:000000000000A586                 db  8Dh
.eh_frame:000000000000A587                 db    4
.eh_frame:000000000000A588                 db  42h ; B
.eh_frame:000000000000A589                 db  0Eh
.eh_frame:000000000000A58A                 db  28h ; (
.eh_frame:000000000000A58B                 db  8Ch
.eh_frame:000000000000A58C                 db    5
.eh_frame:000000000000A58D                 db  44h ; D
.eh_frame:000000000000A58E                 db  0Eh
.eh_frame:000000000000A58F                 db  30h ; 0
.eh_frame:000000000000A590                 db  86h
.eh_frame:000000000000A591                 db    6
.eh_frame:000000000000A592                 db  41h ; A
.eh_frame:000000000000A593                 db  0Eh
.eh_frame:000000000000A594                 db  38h ; 8
.eh_frame:000000000000A595                 db  83h
.eh_frame:000000000000A596                 db    7
.eh_frame:000000000000A597                 db  4Ah ; J
.eh_frame:000000000000A598                 db  0Eh
.eh_frame:000000000000A599                 db  60h ; `
.eh_frame:000000000000A59A                 db    2
.eh_frame:000000000000A59B                 db 0DDh
.eh_frame:000000000000A59C                 db  0Eh
.eh_frame:000000000000A59D                 db  68h ; h
.eh_frame:000000000000A59E                 db  57h ; W
.eh_frame:000000000000A59F                 db  0Eh
.eh_frame:000000000000A5A0                 db  70h ; p
.eh_frame:000000000000A5A1                 db  42h ; B
.eh_frame:000000000000A5A2                 db  0Eh
.eh_frame:000000000000A5A3                 db  78h ; x
.eh_frame:000000000000A5A4                 db  42h ; B
.eh_frame:000000000000A5A5                 db  0Eh
.eh_frame:000000000000A5A6                 db  80h
.eh_frame:000000000000A5A7                 db    1
.eh_frame:000000000000A5A8                 db  42h ; B
.eh_frame:000000000000A5A9                 db  0Eh
.eh_frame:000000000000A5AA                 db  88h
.eh_frame:000000000000A5AB                 db    1
.eh_frame:000000000000A5AC                 db  42h ; B
.eh_frame:000000000000A5AD                 db  0Eh
.eh_frame:000000000000A5AE                 db  90h
.eh_frame:000000000000A5AF                 db    1
.eh_frame:000000000000A5B0                 db  53h ; S
.eh_frame:000000000000A5B1                 db  0Eh
.eh_frame:000000000000A5B2                 db  60h ; `
.eh_frame:000000000000A5B3                 db  44h ; D
.eh_frame:000000000000A5B4                 db  0Ah
.eh_frame:000000000000A5B5                 db  0Eh
.eh_frame:000000000000A5B6                 db  38h ; 8
.eh_frame:000000000000A5B7                 db  41h ; A
.eh_frame:000000000000A5B8                 db  0Eh
.eh_frame:000000000000A5B9                 db  30h ; 0
.eh_frame:000000000000A5BA                 db  41h ; A
.eh_frame:000000000000A5BB                 db  0Eh
.eh_frame:000000000000A5BC                 db  28h ; (
.eh_frame:000000000000A5BD                 db  42h ; B
.eh_frame:000000000000A5BE                 db  0Eh
.eh_frame:000000000000A5BF                 db  20h
.eh_frame:000000000000A5C0                 db  42h ; B
.eh_frame:000000000000A5C1                 db  0Eh
.eh_frame:000000000000A5C2                 db  18h
.eh_frame:000000000000A5C3                 db  42h ; B
.eh_frame:000000000000A5C4                 db  0Eh
.eh_frame:000000000000A5C5                 db  10h
.eh_frame:000000000000A5C6                 db  42h ; B
.eh_frame:000000000000A5C7                 db  0Eh
.eh_frame:000000000000A5C8                 db    8
.eh_frame:000000000000A5C9                 db  44h ; D
.eh_frame:000000000000A5CA                 db  0Bh
.eh_frame:000000000000A5CB                 db    2
.eh_frame:000000000000A5CC                 db  78h ; x
.eh_frame:000000000000A5CD                 db  0Ah
.eh_frame:000000000000A5CE                 db  0Eh
.eh_frame:000000000000A5CF                 db  68h ; h
.eh_frame:000000000000A5D0                 db  48h ; H
.eh_frame:000000000000A5D1                 db  0Bh
.eh_frame:000000000000A5D2                 db  5Ah ; Z
.eh_frame:000000000000A5D3                 db  0Ah
.eh_frame:000000000000A5D4                 db  0Eh
.eh_frame:000000000000A5D5                 db  38h ; 8
.eh_frame:000000000000A5D6                 db  47h ; G
.eh_frame:000000000000A5D7                 db  0Eh
.eh_frame:000000000000A5D8                 db  30h ; 0
.eh_frame:000000000000A5D9                 db  41h ; A
.eh_frame:000000000000A5DA                 db  0Eh
.eh_frame:000000000000A5DB                 db  28h ; (
.eh_frame:000000000000A5DC                 db  42h ; B
.eh_frame:000000000000A5DD                 db  0Eh
.eh_frame:000000000000A5DE                 db  20h
.eh_frame:000000000000A5DF                 db  42h ; B
.eh_frame:000000000000A5E0                 db  0Eh
.eh_frame:000000000000A5E1                 db  18h
.eh_frame:000000000000A5E2                 db  42h ; B
.eh_frame:000000000000A5E3                 db  0Eh
.eh_frame:000000000000A5E4                 db  10h
.eh_frame:000000000000A5E5                 db  42h ; B
.eh_frame:000000000000A5E6                 db  0Eh
.eh_frame:000000000000A5E7                 db    8
.eh_frame:000000000000A5E8                 db  56h ; V
.eh_frame:000000000000A5E9                 db  0Bh
.eh_frame:000000000000A5EA                 db  5Eh ; ^
.eh_frame:000000000000A5EB                 db  0Ah
.eh_frame:000000000000A5EC                 db  0Eh
.eh_frame:000000000000A5ED                 db  38h ; 8
.eh_frame:000000000000A5EE                 db  52h ; R
.eh_frame:000000000000A5EF                 db  0Eh
.eh_frame:000000000000A5F0                 db  30h ; 0
.eh_frame:000000000000A5F1                 db  41h ; A
.eh_frame:000000000000A5F2                 db  0Eh
.eh_frame:000000000000A5F3                 db  28h ; (
.eh_frame:000000000000A5F4                 db  42h ; B
.eh_frame:000000000000A5F5                 db  0Eh
.eh_frame:000000000000A5F6                 db  20h
.eh_frame:000000000000A5F7                 db  42h ; B
.eh_frame:000000000000A5F8                 db  0Eh
.eh_frame:000000000000A5F9                 db  18h
.eh_frame:000000000000A5FA                 db  42h ; B
.eh_frame:000000000000A5FB                 db  0Eh
.eh_frame:000000000000A5FC                 db  10h
.eh_frame:000000000000A5FD                 db  42h ; B
.eh_frame:000000000000A5FE                 db  0Eh
.eh_frame:000000000000A5FF                 db    8
.eh_frame:000000000000A600                 db  4Fh ; O
.eh_frame:000000000000A601                 db  0Bh
.eh_frame:000000000000A602                 db  62h ; b
.eh_frame:000000000000A603                 db  0Ah
.eh_frame:000000000000A604                 db  0Eh
.eh_frame:000000000000A605                 db  38h ; 8
.eh_frame:000000000000A606                 db  50h ; P
.eh_frame:000000000000A607                 db  0Eh
.eh_frame:000000000000A608                 db  30h ; 0
.eh_frame:000000000000A609                 db  41h ; A
.eh_frame:000000000000A60A                 db  0Eh
.eh_frame:000000000000A60B                 db  28h ; (
.eh_frame:000000000000A60C                 db  42h ; B
.eh_frame:000000000000A60D                 db  0Eh
.eh_frame:000000000000A60E                 db  20h
.eh_frame:000000000000A60F                 db  42h ; B
.eh_frame:000000000000A610                 db  0Eh
.eh_frame:000000000000A611                 db  18h
.eh_frame:000000000000A612                 db  42h ; B
.eh_frame:000000000000A613                 db  0Eh
.eh_frame:000000000000A614                 db  10h
.eh_frame:000000000000A615                 db  42h ; B
.eh_frame:000000000000A616                 db  0Eh
.eh_frame:000000000000A617                 db    8
.eh_frame:000000000000A618                 db  55h ; U
.eh_frame:000000000000A619                 db  0Bh
.eh_frame:000000000000A61A                 db  66h ; f
.eh_frame:000000000000A61B                 db  0Eh
.eh_frame:000000000000A61C                 db  68h ; h
.eh_frame:000000000000A61D                 db  42h ; B
.eh_frame:000000000000A61E                 db  0Eh
.eh_frame:000000000000A61F                 db  70h ; p
.eh_frame:000000000000A620                 db  5Ch ; \
.eh_frame:000000000000A621                 db  0Eh
.eh_frame:000000000000A622                 db  68h ; h
.eh_frame:000000000000A623                 db  41h ; A
.eh_frame:000000000000A624                 db  0Eh
.eh_frame:000000000000A625                 db  60h ; `
.eh_frame:000000000000A626                 db  44h ; D
.eh_frame:000000000000A627                 db  0Ah
.eh_frame:000000000000A628                 db  0Eh
.eh_frame:000000000000A629                 db  38h ; 8
.eh_frame:000000000000A62A                 db  41h ; A
.eh_frame:000000000000A62B                 db  0Eh
.eh_frame:000000000000A62C                 db  30h ; 0
.eh_frame:000000000000A62D                 db  41h ; A
.eh_frame:000000000000A62E                 db  0Eh
.eh_frame:000000000000A62F                 db  28h ; (
.eh_frame:000000000000A630                 db  42h ; B
.eh_frame:000000000000A631                 db  0Eh
.eh_frame:000000000000A632                 db  20h
.eh_frame:000000000000A633                 db  42h ; B
.eh_frame:000000000000A634                 db  0Eh
.eh_frame:000000000000A635                 db  18h
.eh_frame:000000000000A636                 db  42h ; B
.eh_frame:000000000000A637                 db  0Eh
.eh_frame:000000000000A638                 db  10h
.eh_frame:000000000000A639                 db  42h ; B
.eh_frame:000000000000A63A                 db  0Eh
.eh_frame:000000000000A63B                 db    8
.eh_frame:000000000000A63C                 db  45h ; E
.eh_frame:000000000000A63D                 db  0Bh
.eh_frame:000000000000A63E                 db  68h ; h
.eh_frame:000000000000A63F                 db  0Ah
.eh_frame:000000000000A640                 db  0Eh
.eh_frame:000000000000A641                 db  68h ; h
.eh_frame:000000000000A642                 db  48h ; H
.eh_frame:000000000000A643                 db  0Bh
.eh_frame:000000000000A644                 db  72h ; r
.eh_frame:000000000000A645                 db  0Eh
.eh_frame:000000000000A646                 db  68h ; h
.eh_frame:000000000000A647                 db  45h ; E
.eh_frame:000000000000A648                 db  0Eh
.eh_frame:000000000000A649                 db  70h ; p
.eh_frame:000000000000A64A                 db  42h ; B
.eh_frame:000000000000A64B                 db  0Eh
.eh_frame:000000000000A64C                 db  78h ; x
.eh_frame:000000000000A64D                 db  42h ; B
.eh_frame:000000000000A64E                 db  0Eh
.eh_frame:000000000000A64F                 db  80h
.eh_frame:000000000000A650                 db    1
.eh_frame:000000000000A651                 db  5Eh ; ^
.eh_frame:000000000000A652                 db  0Eh
.eh_frame:000000000000A653                 db  60h ; `
.eh_frame:000000000000A654                 db  44h ; D
.eh_frame:000000000000A655                 db  0Ah
.eh_frame:000000000000A656                 db  0Eh
.eh_frame:000000000000A657                 db  38h ; 8
.eh_frame:000000000000A658                 db  41h ; A
.eh_frame:000000000000A659                 db  0Eh
.eh_frame:000000000000A65A                 db  30h ; 0
.eh_frame:000000000000A65B                 db  41h ; A
.eh_frame:000000000000A65C                 db  0Eh
.eh_frame:000000000000A65D                 db  28h ; (
.eh_frame:000000000000A65E                 db  42h ; B
.eh_frame:000000000000A65F                 db  0Eh
.eh_frame:000000000000A660                 db  20h
.eh_frame:000000000000A661                 db  42h ; B
.eh_frame:000000000000A662                 db  0Eh
.eh_frame:000000000000A663                 db  18h
.eh_frame:000000000000A664                 db  42h ; B
.eh_frame:000000000000A665                 db  0Eh
.eh_frame:000000000000A666                 db  10h
.eh_frame:000000000000A667                 db  42h ; B
.eh_frame:000000000000A668                 db  0Eh
.eh_frame:000000000000A669                 db    8
.eh_frame:000000000000A66A                 db  41h ; A
.eh_frame:000000000000A66B                 db  0Bh
.eh_frame:000000000000A66C                 db  79h ; y
.eh_frame:000000000000A66D                 db  0Ah
.eh_frame:000000000000A66E                 db  0Eh
.eh_frame:000000000000A66F                 db  68h ; h
.eh_frame:000000000000A670                 db  42h ; B
.eh_frame:000000000000A671                 db  0Eh
.eh_frame:000000000000A672                 db  70h ; p
.eh_frame:000000000000A673                 db  42h ; B
.eh_frame:000000000000A674                 db  0Eh
.eh_frame:000000000000A675                 db  78h ; x
.eh_frame:000000000000A676                 db  42h ; B
.eh_frame:000000000000A677                 db  0Eh
.eh_frame:000000000000A678                 db  80h
.eh_frame:000000000000A679                 db    1
.eh_frame:000000000000A67A                 db  51h ; Q
.eh_frame:000000000000A67B                 db  0Bh
.eh_frame:000000000000A67C                 db  10h
.eh_frame:000000000000A67D                 db    0
.eh_frame:000000000000A67E                 db    0
.eh_frame:000000000000A67F                 db    0
.eh_frame:000000000000A680                 db 0F0h
.eh_frame:000000000000A681                 db    8
.eh_frame:000000000000A682                 db    0
.eh_frame:000000000000A683                 db    0
.eh_frame:000000000000A684                 db 0ECh
.eh_frame:000000000000A685                 db 0B0h
.eh_frame:000000000000A686                 db 0FFh
.eh_frame:000000000000A687                 db 0FFh
.eh_frame:000000000000A688                 db  20h
.eh_frame:000000000000A689                 db    0
.eh_frame:000000000000A68A                 db    0
.eh_frame:000000000000A68B                 db    0
.eh_frame:000000000000A68C                 db    0
.eh_frame:000000000000A68D                 db    0
.eh_frame:000000000000A68E                 db    0
.eh_frame:000000000000A68F                 db    0
.eh_frame:000000000000A690                 db  18h
.eh_frame:000000000000A691                 db    0
.eh_frame:000000000000A692                 db    0
.eh_frame:000000000000A693                 db    0
.eh_frame:000000000000A694                 db    4
.eh_frame:000000000000A695                 db    9
.eh_frame:000000000000A696                 db    0
.eh_frame:000000000000A697                 db    0
.eh_frame:000000000000A698                 db 0F8h
.eh_frame:000000000000A699                 db 0B0h
.eh_frame:000000000000A69A                 db 0FFh
.eh_frame:000000000000A69B                 db 0FFh
.eh_frame:000000000000A69C                 db  78h ; x
.eh_frame:000000000000A69D                 db    0
.eh_frame:000000000000A69E                 db    0
.eh_frame:000000000000A69F                 db    0
.eh_frame:000000000000A6A0                 db    0
.eh_frame:000000000000A6A1                 db  44h ; D
.eh_frame:000000000000A6A2                 db  0Eh
.eh_frame:000000000000A6A3                 db  70h ; p
.eh_frame:000000000000A6A4                 db    2
.eh_frame:000000000000A6A5                 db  60h ; `
.eh_frame:000000000000A6A6                 db  0Ah
.eh_frame:000000000000A6A7                 db  0Eh
.eh_frame:000000000000A6A8                 db    8
.eh_frame:000000000000A6A9                 db  41h ; A
.eh_frame:000000000000A6AA                 db  0Bh
.eh_frame:000000000000A6AB                 db    0
.eh_frame:000000000000A6AC                 db  28h ; (
.eh_frame:000000000000A6AD                 db    0
.eh_frame:000000000000A6AE                 db    0
.eh_frame:000000000000A6AF                 db    0
.eh_frame:000000000000A6B0                 db  20h
.eh_frame:000000000000A6B1                 db    9
.eh_frame:000000000000A6B2                 db    0
.eh_frame:000000000000A6B3                 db    0
.eh_frame:000000000000A6B4                 db  5Ch ; \
.eh_frame:000000000000A6B5                 db 0B1h
.eh_frame:000000000000A6B6                 db 0FFh
.eh_frame:000000000000A6B7                 db 0FFh
.eh_frame:000000000000A6B8                 db 0D5h
.eh_frame:000000000000A6B9                 db    0
.eh_frame:000000000000A6BA                 db    0
.eh_frame:000000000000A6BB                 db    0
.eh_frame:000000000000A6BC                 db    0
.eh_frame:000000000000A6BD                 db  41h ; A
.eh_frame:000000000000A6BE                 db  0Eh
.eh_frame:000000000000A6BF                 db  10h
.eh_frame:000000000000A6C0                 db  86h
.eh_frame:000000000000A6C1                 db    2
.eh_frame:000000000000A6C2                 db  41h ; A
.eh_frame:000000000000A6C3                 db  0Eh
.eh_frame:000000000000A6C4                 db  18h
.eh_frame:000000000000A6C5                 db  83h
.eh_frame:000000000000A6C6                 db    3
.eh_frame:000000000000A6C7                 db  50h ; P
.eh_frame:000000000000A6C8                 db  0Eh
.eh_frame:000000000000A6C9                 db 0D0h
.eh_frame:000000000000A6CA                 db    1
.eh_frame:000000000000A6CB                 db    2
.eh_frame:000000000000A6CC                 db 0ABh
.eh_frame:000000000000A6CD                 db  0Ah
.eh_frame:000000000000A6CE                 db  0Eh
.eh_frame:000000000000A6CF                 db  18h
.eh_frame:000000000000A6D0                 db  41h ; A
.eh_frame:000000000000A6D1                 db  0Eh
.eh_frame:000000000000A6D2                 db  10h
.eh_frame:000000000000A6D3                 db  41h ; A
.eh_frame:000000000000A6D4                 db  0Eh
.eh_frame:000000000000A6D5                 db    8
.eh_frame:000000000000A6D6                 db  41h ; A
.eh_frame:000000000000A6D7                 db  0Bh
.eh_frame:000000000000A6D8                 db  1Ch
.eh_frame:000000000000A6D9                 db    0
.eh_frame:000000000000A6DA                 db    0
.eh_frame:000000000000A6DB                 db    0
.eh_frame:000000000000A6DC                 db  4Ch ; L
.eh_frame:000000000000A6DD                 db    9
.eh_frame:000000000000A6DE                 db    0
.eh_frame:000000000000A6DF                 db    0
.eh_frame:000000000000A6E0                 db  10h
.eh_frame:000000000000A6E1                 db 0B2h
.eh_frame:000000000000A6E2                 db 0FFh
.eh_frame:000000000000A6E3                 db 0FFh
.eh_frame:000000000000A6E4                 db  80h
.eh_frame:000000000000A6E5                 db    0
.eh_frame:000000000000A6E6                 db    0
.eh_frame:000000000000A6E7                 db    0
.eh_frame:000000000000A6E8                 db    0
.eh_frame:000000000000A6E9                 db  41h ; A
.eh_frame:000000000000A6EA                 db  0Eh
.eh_frame:000000000000A6EB                 db  10h
.eh_frame:000000000000A6EC                 db  83h
.eh_frame:000000000000A6ED                 db    2
.eh_frame:000000000000A6EE                 db    2
.eh_frame:000000000000A6EF                 db  7Ah ; z
.eh_frame:000000000000A6F0                 db  0Eh
.eh_frame:000000000000A6F1                 db    8
.eh_frame:000000000000A6F2                 db    0
.eh_frame:000000000000A6F3                 db    0
.eh_frame:000000000000A6F4                 db    0
.eh_frame:000000000000A6F5                 db    0
.eh_frame:000000000000A6F6                 db    0
.eh_frame:000000000000A6F7                 db    0
.eh_frame:000000000000A6F8                 db  18h
.eh_frame:000000000000A6F9                 db    0
.eh_frame:000000000000A6FA                 db    0
.eh_frame:000000000000A6FB                 db    0
.eh_frame:000000000000A6FC                 db  6Ch ; l
.eh_frame:000000000000A6FD                 db    9
.eh_frame:000000000000A6FE                 db    0
.eh_frame:000000000000A6FF                 db    0
.eh_frame:000000000000A700                 db  70h ; p
.eh_frame:000000000000A701                 db 0B2h
.eh_frame:000000000000A702                 db 0FFh
.eh_frame:000000000000A703                 db 0FFh
.eh_frame:000000000000A704                 db  1Ah
.eh_frame:000000000000A705                 db    0
.eh_frame:000000000000A706                 db    0
.eh_frame:000000000000A707                 db    0
.eh_frame:000000000000A708                 db    0
.eh_frame:000000000000A709                 db  41h ; A
.eh_frame:000000000000A70A                 db  0Eh
.eh_frame:000000000000A70B                 db  10h
.eh_frame:000000000000A70C                 db  83h
.eh_frame:000000000000A70D                 db    2
.eh_frame:000000000000A70E                 db  53h ; S
.eh_frame:000000000000A70F                 db  0Ah
.eh_frame:000000000000A710                 db  0Eh
.eh_frame:000000000000A711                 db    8
.eh_frame:000000000000A712                 db  41h ; A
.eh_frame:000000000000A713                 db  0Bh
.eh_frame:000000000000A714                 db  10h
.eh_frame:000000000000A715                 db    0
.eh_frame:000000000000A716                 db    0
.eh_frame:000000000000A717                 db    0
.eh_frame:000000000000A718                 db  88h
.eh_frame:000000000000A719                 db    9
.eh_frame:000000000000A71A                 db    0
.eh_frame:000000000000A71B                 db    0
.eh_frame:000000000000A71C                 db  74h ; t
.eh_frame:000000000000A71D                 db 0B2h
.eh_frame:000000000000A71E                 db 0FFh
.eh_frame:000000000000A71F                 db 0FFh
.eh_frame:000000000000A720                 db  24h ; $
.eh_frame:000000000000A721                 db    0
.eh_frame:000000000000A722                 db    0
.eh_frame:000000000000A723                 db    0
.eh_frame:000000000000A724                 db    0
.eh_frame:000000000000A725                 db  5Fh ; _
.eh_frame:000000000000A726                 db  0Eh
.eh_frame:000000000000A727                 db  10h
.eh_frame:000000000000A728                 db  10h
.eh_frame:000000000000A729                 db    0
.eh_frame:000000000000A72A                 db    0
.eh_frame:000000000000A72B                 db    0
.eh_frame:000000000000A72C                 db  9Ch
.eh_frame:000000000000A72D                 db    9
.eh_frame:000000000000A72E                 db    0
.eh_frame:000000000000A72F                 db    0
.eh_frame:000000000000A730                 db  90h
.eh_frame:000000000000A731                 db 0B2h
.eh_frame:000000000000A732                 db 0FFh
.eh_frame:000000000000A733                 db 0FFh
.eh_frame:000000000000A734                 db    2
.eh_frame:000000000000A735                 db    0
.eh_frame:000000000000A736                 db    0
.eh_frame:000000000000A737                 db    0
.eh_frame:000000000000A738                 db    0
.eh_frame:000000000000A739                 db    0
.eh_frame:000000000000A73A                 db    0
.eh_frame:000000000000A73B                 db    0
.eh_frame:000000000000A73C                 db  20h
.eh_frame:000000000000A73D                 db    0
.eh_frame:000000000000A73E                 db    0
.eh_frame:000000000000A73F                 db    0
.eh_frame:000000000000A740                 db 0B0h
.eh_frame:000000000000A741                 db    9
.eh_frame:000000000000A742                 db    0
.eh_frame:000000000000A743                 db    0
.eh_frame:000000000000A744                 db  8Ch
.eh_frame:000000000000A745                 db 0B2h
.eh_frame:000000000000A746                 db 0FFh
.eh_frame:000000000000A747                 db 0FFh
.eh_frame:000000000000A748                 db  36h ; 6
.eh_frame:000000000000A749                 db    0
.eh_frame:000000000000A74A                 db    0
.eh_frame:000000000000A74B                 db    0
.eh_frame:000000000000A74C                 db    0
.eh_frame:000000000000A74D                 db  44h ; D
.eh_frame:000000000000A74E                 db  0Eh
.eh_frame:000000000000A74F                 db  10h
.eh_frame:000000000000A750                 db  83h
.eh_frame:000000000000A751                 db    2
.eh_frame:000000000000A752                 db  5Dh ; ]
.eh_frame:000000000000A753                 db  0Ah
.eh_frame:000000000000A754                 db  0Eh
.eh_frame:000000000000A755                 db    8
.eh_frame:000000000000A756                 db  47h ; G
.eh_frame:000000000000A757                 db  0Bh
.eh_frame:000000000000A758                 db  48h ; H
.eh_frame:000000000000A759                 db  0Ah
.eh_frame:000000000000A75A                 db  0Eh
.eh_frame:000000000000A75B                 db    8
.eh_frame:000000000000A75C                 db  41h ; A
.eh_frame:000000000000A75D                 db  0Bh
.eh_frame:000000000000A75E                 db    0
.eh_frame:000000000000A75F                 db    0
.eh_frame:000000000000A760                 db  10h
.eh_frame:000000000000A761                 db    0
.eh_frame:000000000000A762                 db    0
.eh_frame:000000000000A763                 db    0
.eh_frame:000000000000A764                 db 0D4h
.eh_frame:000000000000A765                 db    9
.eh_frame:000000000000A766                 db    0
.eh_frame:000000000000A767                 db    0
.eh_frame:000000000000A768                 db 0A8h
.eh_frame:000000000000A769                 db 0B2h
.eh_frame:000000000000A76A                 db 0FFh
.eh_frame:000000000000A76B                 db 0FFh
.eh_frame:000000000000A76C                 db  24h ; $
.eh_frame:000000000000A76D                 db    0
.eh_frame:000000000000A76E                 db    0
.eh_frame:000000000000A76F                 db    0
.eh_frame:000000000000A770                 db    0
.eh_frame:000000000000A771                 db  5Fh ; _
.eh_frame:000000000000A772                 db  0Eh
.eh_frame:000000000000A773                 db  10h
.eh_frame:000000000000A774                 db  14h
.eh_frame:000000000000A775                 db    0
.eh_frame:000000000000A776                 db    0
.eh_frame:000000000000A777                 db    0
.eh_frame:000000000000A778                 db 0E8h
.eh_frame:000000000000A779                 db    9
.eh_frame:000000000000A77A                 db    0
.eh_frame:000000000000A77B                 db    0
.eh_frame:000000000000A77C                 db 0C4h
.eh_frame:000000000000A77D                 db 0B2h
.eh_frame:000000000000A77E                 db 0FFh
.eh_frame:000000000000A77F                 db 0FFh
.eh_frame:000000000000A780                 db  82h
.eh_frame:000000000000A781                 db    0
.eh_frame:000000000000A782                 db    0
.eh_frame:000000000000A783                 db    0
.eh_frame:000000000000A784                 db    0
.eh_frame:000000000000A785                 db    2
.eh_frame:000000000000A786                 db  5Fh ; _
.eh_frame:000000000000A787                 db  0Eh
.eh_frame:000000000000A788                 db  10h
.eh_frame:000000000000A789                 db  49h ; I
.eh_frame:000000000000A78A                 db  0Eh
.eh_frame:000000000000A78B                 db    8
.eh_frame:000000000000A78C                 db  14h
.eh_frame:000000000000A78D                 db    0
.eh_frame:000000000000A78E                 db    0
.eh_frame:000000000000A78F                 db    0
.eh_frame:000000000000A790                 db    0
.eh_frame:000000000000A791                 db  0Ah
.eh_frame:000000000000A792                 db    0
.eh_frame:000000000000A793                 db    0
.eh_frame:000000000000A794                 db  3Ch ; <
.eh_frame:000000000000A795                 db 0B3h
.eh_frame:000000000000A796                 db 0FFh
.eh_frame:000000000000A797                 db 0FFh
.eh_frame:000000000000A798                 db  4Ah ; J
.eh_frame:000000000000A799                 db    0
.eh_frame:000000000000A79A                 db    0
.eh_frame:000000000000A79B                 db    0
.eh_frame:000000000000A79C                 db    0
.eh_frame:000000000000A79D                 db    2
.eh_frame:000000000000A79E                 db  45h ; E
.eh_frame:000000000000A79F                 db  0Eh
.eh_frame:000000000000A7A0                 db  10h
.eh_frame:000000000000A7A1                 db    0
.eh_frame:000000000000A7A2                 db    0
.eh_frame:000000000000A7A3                 db    0
.eh_frame:000000000000A7A4                 db  18h
.eh_frame:000000000000A7A5                 db    0
.eh_frame:000000000000A7A6                 db    0
.eh_frame:000000000000A7A7                 db    0
.eh_frame:000000000000A7A8                 db  18h
.eh_frame:000000000000A7A9                 db  0Ah
.eh_frame:000000000000A7AA                 db    0
.eh_frame:000000000000A7AB                 db    0
.eh_frame:000000000000A7AC                 db  74h ; t
.eh_frame:000000000000A7AD                 db 0B3h
.eh_frame:000000000000A7AE                 db 0FFh
.eh_frame:000000000000A7AF                 db 0FFh
.eh_frame:000000000000A7B0                 db  17h
.eh_frame:000000000000A7B1                 db    0
.eh_frame:000000000000A7B2                 db    0
.eh_frame:000000000000A7B3                 db    0
.eh_frame:000000000000A7B4                 db    0
.eh_frame:000000000000A7B5                 db  41h ; A
.eh_frame:000000000000A7B6                 db  0Eh
.eh_frame:000000000000A7B7                 db  10h
.eh_frame:000000000000A7B8                 db  83h
.eh_frame:000000000000A7B9                 db    2
.eh_frame:000000000000A7BA                 db  51h ; Q
.eh_frame:000000000000A7BB                 db  0Eh
.eh_frame:000000000000A7BC                 db    8
.eh_frame:000000000000A7BD                 db    0
.eh_frame:000000000000A7BE                 db    0
.eh_frame:000000000000A7BF                 db    0
.eh_frame:000000000000A7C0                 db  18h
.eh_frame:000000000000A7C1                 db    0
.eh_frame:000000000000A7C2                 db    0
.eh_frame:000000000000A7C3                 db    0
.eh_frame:000000000000A7C4                 db  34h ; 4
.eh_frame:000000000000A7C5                 db  0Ah
.eh_frame:000000000000A7C6                 db    0
.eh_frame:000000000000A7C7                 db    0
.eh_frame:000000000000A7C8                 db  78h ; x
.eh_frame:000000000000A7C9                 db 0B3h
.eh_frame:000000000000A7CA                 db 0FFh
.eh_frame:000000000000A7CB                 db 0FFh
.eh_frame:000000000000A7CC                 db  2Eh ; .
.eh_frame:000000000000A7CD                 db    0
.eh_frame:000000000000A7CE                 db    0
.eh_frame:000000000000A7CF                 db    0
.eh_frame:000000000000A7D0                 db    0
.eh_frame:000000000000A7D1                 db  47h ; G
.eh_frame:000000000000A7D2                 db  0Eh
.eh_frame:000000000000A7D3                 db  10h
.eh_frame:000000000000A7D4                 db  61h ; a
.eh_frame:000000000000A7D5                 db  0Ah
.eh_frame:000000000000A7D6                 db  0Eh
.eh_frame:000000000000A7D7                 db    8
.eh_frame:000000000000A7D8                 db  41h ; A
.eh_frame:000000000000A7D9                 db  0Bh
.eh_frame:000000000000A7DA                 db    0
.eh_frame:000000000000A7DB                 db    0
.eh_frame:000000000000A7DC                 db  24h ; $
.eh_frame:000000000000A7DD                 db    0
.eh_frame:000000000000A7DE                 db    0
.eh_frame:000000000000A7DF                 db    0
.eh_frame:000000000000A7E0                 db  50h ; P
.eh_frame:000000000000A7E1                 db  0Ah
.eh_frame:000000000000A7E2                 db    0
.eh_frame:000000000000A7E3                 db    0
.eh_frame:000000000000A7E4                 db  8Ch
.eh_frame:000000000000A7E5                 db 0B3h
.eh_frame:000000000000A7E6                 db 0FFh
.eh_frame:000000000000A7E7                 db 0FFh
.eh_frame:000000000000A7E8                 db  28h ; (
.eh_frame:000000000000A7E9                 db    0
.eh_frame:000000000000A7EA                 db    0
.eh_frame:000000000000A7EB                 db    0
.eh_frame:000000000000A7EC                 db    0
.eh_frame:000000000000A7ED                 db  41h ; A
.eh_frame:000000000000A7EE                 db  0Eh
.eh_frame:000000000000A7EF                 db  10h
.eh_frame:000000000000A7F0                 db  86h
.eh_frame:000000000000A7F1                 db    2
.eh_frame:000000000000A7F2                 db  41h ; A
.eh_frame:000000000000A7F3                 db  0Eh
.eh_frame:000000000000A7F4                 db  18h
.eh_frame:000000000000A7F5                 db  83h
.eh_frame:000000000000A7F6                 db    3
.eh_frame:000000000000A7F7                 db  4Dh ; M
.eh_frame:000000000000A7F8                 db  0Eh
.eh_frame:000000000000A7F9                 db  20h
.eh_frame:000000000000A7FA                 db  49h ; I
.eh_frame:000000000000A7FB                 db  0Eh
.eh_frame:000000000000A7FC                 db  18h
.eh_frame:000000000000A7FD                 db  47h ; G
.eh_frame:000000000000A7FE                 db  0Eh
.eh_frame:000000000000A7FF                 db  10h
.eh_frame:000000000000A800                 db  41h ; A
.eh_frame:000000000000A801                 db  0Eh
.eh_frame:000000000000A802                 db    8
.eh_frame:000000000000A803                 db    0
.eh_frame:000000000000A804                 db  18h
.eh_frame:000000000000A805                 db    0
.eh_frame:000000000000A806                 db    0
.eh_frame:000000000000A807                 db    0
.eh_frame:000000000000A808                 db  78h ; x
.eh_frame:000000000000A809                 db  0Ah
.eh_frame:000000000000A80A                 db    0
.eh_frame:000000000000A80B                 db    0
.eh_frame:000000000000A80C                 db  94h
.eh_frame:000000000000A80D                 db 0B3h
.eh_frame:000000000000A80E                 db 0FFh
.eh_frame:000000000000A80F                 db 0FFh
.eh_frame:000000000000A810                 db  13h
.eh_frame:000000000000A811                 db    0
.eh_frame:000000000000A812                 db    0
.eh_frame:000000000000A813                 db    0
.eh_frame:000000000000A814                 db    0
.eh_frame:000000000000A815                 db  41h ; A
.eh_frame:000000000000A816                 db  0Eh
.eh_frame:000000000000A817                 db  10h
.eh_frame:000000000000A818                 db  83h
.eh_frame:000000000000A819                 db    2
.eh_frame:000000000000A81A                 db  50h ; P
.eh_frame:000000000000A81B                 db  0Eh
.eh_frame:000000000000A81C                 db    8
.eh_frame:000000000000A81D                 db    0
.eh_frame:000000000000A81E                 db    0
.eh_frame:000000000000A81F                 db    0
.eh_frame:000000000000A820                 db  14h
.eh_frame:000000000000A821                 db    0
.eh_frame:000000000000A822                 db    0
.eh_frame:000000000000A823                 db    0
.eh_frame:000000000000A824                 db  94h
.eh_frame:000000000000A825                 db  0Ah
.eh_frame:000000000000A826                 db    0
.eh_frame:000000000000A827                 db    0
.eh_frame:000000000000A828                 db  98h
.eh_frame:000000000000A829                 db 0B3h
.eh_frame:000000000000A82A                 db 0FFh
.eh_frame:000000000000A82B                 db 0FFh
.eh_frame:000000000000A82C                 db  35h ; 5
.eh_frame:000000000000A82D                 db    0
.eh_frame:000000000000A82E                 db    0
.eh_frame:000000000000A82F                 db    0
.eh_frame:000000000000A830                 db    0
.eh_frame:000000000000A831                 db  4Bh ; K
.eh_frame:000000000000A832                 db  0Eh
.eh_frame:000000000000A833                 db  10h
.eh_frame:000000000000A834                 db    0
.eh_frame:000000000000A835                 db    0
.eh_frame:000000000000A836                 db    0
.eh_frame:000000000000A837                 db    0
.eh_frame:000000000000A838                 db  28h ; (
.eh_frame:000000000000A839                 db    0
.eh_frame:000000000000A83A                 db    0
.eh_frame:000000000000A83B                 db    0
.eh_frame:000000000000A83C                 db 0ACh
.eh_frame:000000000000A83D                 db  0Ah
.eh_frame:000000000000A83E                 db    0
.eh_frame:000000000000A83F                 db    0
.eh_frame:000000000000A840                 db 0C0h
.eh_frame:000000000000A841                 db 0B3h
.eh_frame:000000000000A842                 db 0FFh
.eh_frame:000000000000A843                 db 0FFh
.eh_frame:000000000000A844                 db  5Fh ; _
.eh_frame:000000000000A845                 db    0
.eh_frame:000000000000A846                 db    0
.eh_frame:000000000000A847                 db    0
.eh_frame:000000000000A848                 db    0
.eh_frame:000000000000A849                 db  41h ; A
.eh_frame:000000000000A84A                 db  0Eh
.eh_frame:000000000000A84B                 db  10h
.eh_frame:000000000000A84C                 db  86h
.eh_frame:000000000000A84D                 db    2
.eh_frame:000000000000A84E                 db  41h ; A
.eh_frame:000000000000A84F                 db  0Eh
.eh_frame:000000000000A850                 db  18h
.eh_frame:000000000000A851                 db  83h
.eh_frame:000000000000A852                 db    3
.eh_frame:000000000000A853                 db  44h ; D
.eh_frame:000000000000A854                 db  0Eh
.eh_frame:000000000000A855                 db  20h
.eh_frame:000000000000A856                 db  4Fh ; O
.eh_frame:000000000000A857                 db  0Ah
.eh_frame:000000000000A858                 db  0Eh
.eh_frame:000000000000A859                 db  18h
.eh_frame:000000000000A85A                 db  43h ; C
.eh_frame:000000000000A85B                 db  0Eh
.eh_frame:000000000000A85C                 db  10h
.eh_frame:000000000000A85D                 db  41h ; A
.eh_frame:000000000000A85E                 db  0Eh
.eh_frame:000000000000A85F                 db    8
.eh_frame:000000000000A860                 db  47h ; G
.eh_frame:000000000000A861                 db  0Bh
.eh_frame:000000000000A862                 db    0
.eh_frame:000000000000A863                 db    0
.eh_frame:000000000000A864                 db  18h
.eh_frame:000000000000A865                 db    0
.eh_frame:000000000000A866                 db    0
.eh_frame:000000000000A867                 db    0
.eh_frame:000000000000A868                 db 0D8h
.eh_frame:000000000000A869                 db  0Ah
.eh_frame:000000000000A86A                 db    0
.eh_frame:000000000000A86B                 db    0
.eh_frame:000000000000A86C                 db 0F4h
.eh_frame:000000000000A86D                 db 0B3h
.eh_frame:000000000000A86E                 db 0FFh
.eh_frame:000000000000A86F                 db 0FFh
.eh_frame:000000000000A870                 db 0B6h
.eh_frame:000000000000A871                 db    0
.eh_frame:000000000000A872                 db    0
.eh_frame:000000000000A873                 db    0
.eh_frame:000000000000A874                 db    0
.eh_frame:000000000000A875                 db  47h ; G
.eh_frame:000000000000A876                 db  0Eh
.eh_frame:000000000000A877                 db 0E0h
.eh_frame:000000000000A878                 db    1
.eh_frame:000000000000A879                 db    2
.eh_frame:000000000000A87A                 db 0A9h
.eh_frame:000000000000A87B                 db  0Ah
.eh_frame:000000000000A87C                 db  0Eh
.eh_frame:000000000000A87D                 db    8
.eh_frame:000000000000A87E                 db  41h ; A
.eh_frame:000000000000A87F                 db  0Bh
.eh_frame:000000000000A880                 db  28h ; (
.eh_frame:000000000000A881                 db    0
.eh_frame:000000000000A882                 db    0
.eh_frame:000000000000A883                 db    0
.eh_frame:000000000000A884                 db 0F4h
.eh_frame:000000000000A885                 db  0Ah
.eh_frame:000000000000A886                 db    0
.eh_frame:000000000000A887                 db    0
.eh_frame:000000000000A888                 db  98h
.eh_frame:000000000000A889                 db 0B4h
.eh_frame:000000000000A88A                 db 0FFh
.eh_frame:000000000000A88B                 db 0FFh
.eh_frame:000000000000A88C                 db  5Bh ; [
.eh_frame:000000000000A88D                 db    0
.eh_frame:000000000000A88E                 db    0
.eh_frame:000000000000A88F                 db    0
.eh_frame:000000000000A890                 db    0
.eh_frame:000000000000A891                 db  41h ; A
.eh_frame:000000000000A892                 db  0Eh
.eh_frame:000000000000A893                 db  10h
.eh_frame:000000000000A894                 db  86h
.eh_frame:000000000000A895                 db    2
.eh_frame:000000000000A896                 db  41h ; A
.eh_frame:000000000000A897                 db  0Eh
.eh_frame:000000000000A898                 db  18h
.eh_frame:000000000000A899                 db  83h
.eh_frame:000000000000A89A                 db    3
.eh_frame:000000000000A89B                 db  47h ; G
.eh_frame:000000000000A89C                 db  0Eh
.eh_frame:000000000000A89D                 db  20h
.eh_frame:000000000000A89E                 db  4Fh ; O
.eh_frame:000000000000A89F                 db  0Ah
.eh_frame:000000000000A8A0                 db  0Eh
.eh_frame:000000000000A8A1                 db  18h
.eh_frame:000000000000A8A2                 db  43h ; C
.eh_frame:000000000000A8A3                 db  0Eh
.eh_frame:000000000000A8A4                 db  10h
.eh_frame:000000000000A8A5                 db  41h ; A
.eh_frame:000000000000A8A6                 db  0Eh
.eh_frame:000000000000A8A7                 db    8
.eh_frame:000000000000A8A8                 db  44h ; D
.eh_frame:000000000000A8A9                 db  0Bh
.eh_frame:000000000000A8AA                 db    0
.eh_frame:000000000000A8AB                 db    0
.eh_frame:000000000000A8AC                 db  18h
.eh_frame:000000000000A8AD                 db    0
.eh_frame:000000000000A8AE                 db    0
.eh_frame:000000000000A8AF                 db    0
.eh_frame:000000000000A8B0                 db  20h
.eh_frame:000000000000A8B1                 db  0Bh
.eh_frame:000000000000A8B2                 db    0
.eh_frame:000000000000A8B3                 db    0
.eh_frame:000000000000A8B4                 db 0CCh
.eh_frame:000000000000A8B5                 db 0B4h
.eh_frame:000000000000A8B6                 db 0FFh
.eh_frame:000000000000A8B7                 db 0FFh
.eh_frame:000000000000A8B8                 db 0B1h
.eh_frame:000000000000A8B9                 db    0
.eh_frame:000000000000A8BA                 db    0
.eh_frame:000000000000A8BB                 db    0
.eh_frame:000000000000A8BC                 db    0
.eh_frame:000000000000A8BD                 db  47h ; G
.eh_frame:000000000000A8BE                 db  0Eh
.eh_frame:000000000000A8BF                 db 0E0h
.eh_frame:000000000000A8C0                 db    1
.eh_frame:000000000000A8C1                 db    2
.eh_frame:000000000000A8C2                 db 0A4h
.eh_frame:000000000000A8C3                 db  0Ah
.eh_frame:000000000000A8C4                 db  0Eh
.eh_frame:000000000000A8C5                 db    8
.eh_frame:000000000000A8C6                 db  41h ; A
.eh_frame:000000000000A8C7                 db  0Bh
.eh_frame:000000000000A8C8                 db  3Ch ; <
.eh_frame:000000000000A8C9                 db    0
.eh_frame:000000000000A8CA                 db    0
.eh_frame:000000000000A8CB                 db    0
.eh_frame:000000000000A8CC                 db  3Ch ; <
.eh_frame:000000000000A8CD                 db  0Bh
.eh_frame:000000000000A8CE                 db    0
.eh_frame:000000000000A8CF                 db    0
.eh_frame:000000000000A8D0                 db  70h ; p
.eh_frame:000000000000A8D1                 db 0B5h
.eh_frame:000000000000A8D2                 db 0FFh
.eh_frame:000000000000A8D3                 db 0FFh
.eh_frame:000000000000A8D4                 db  83h
.eh_frame:000000000000A8D5                 db    0
.eh_frame:000000000000A8D6                 db    0
.eh_frame:000000000000A8D7                 db    0
.eh_frame:000000000000A8D8                 db    0
.eh_frame:000000000000A8D9                 db  42h ; B
.eh_frame:000000000000A8DA                 db  0Eh
.eh_frame:000000000000A8DB                 db  10h
.eh_frame:000000000000A8DC                 db  8Dh
.eh_frame:000000000000A8DD                 db    2
.eh_frame:000000000000A8DE                 db  42h ; B
.eh_frame:000000000000A8DF                 db  0Eh
.eh_frame:000000000000A8E0                 db  18h
.eh_frame:000000000000A8E1                 db  8Ch
.eh_frame:000000000000A8E2                 db    3
.eh_frame:000000000000A8E3                 db  44h ; D
.eh_frame:000000000000A8E4                 db  0Eh
.eh_frame:000000000000A8E5                 db  20h
.eh_frame:000000000000A8E6                 db  86h
.eh_frame:000000000000A8E7                 db    4
.eh_frame:000000000000A8E8                 db  41h ; A
.eh_frame:000000000000A8E9                 db  0Eh
.eh_frame:000000000000A8EA                 db  28h ; (
.eh_frame:000000000000A8EB                 db  83h
.eh_frame:000000000000A8EC                 db    5
.eh_frame:000000000000A8ED                 db  4Ah ; J
.eh_frame:000000000000A8EE                 db  0Eh
.eh_frame:000000000000A8EF                 db  40h ; @
.eh_frame:000000000000A8F0                 db    2
.eh_frame:000000000000A8F1                 db  64h ; d
.eh_frame:000000000000A8F2                 db  0Ah
.eh_frame:000000000000A8F3                 db  0Eh
.eh_frame:000000000000A8F4                 db  28h ; (
.eh_frame:000000000000A8F5                 db  41h ; A
.eh_frame:000000000000A8F6                 db  0Eh
.eh_frame:000000000000A8F7                 db  20h
.eh_frame:000000000000A8F8                 db  41h ; A
.eh_frame:000000000000A8F9                 db  0Eh
.eh_frame:000000000000A8FA                 db  18h
.eh_frame:000000000000A8FB                 db  42h ; B
.eh_frame:000000000000A8FC                 db  0Eh
.eh_frame:000000000000A8FD                 db  10h
.eh_frame:000000000000A8FE                 db  42h ; B
.eh_frame:000000000000A8FF                 db  0Eh
.eh_frame:000000000000A900                 db    8
.eh_frame:000000000000A901                 db  41h ; A
.eh_frame:000000000000A902                 db  0Bh
.eh_frame:000000000000A903                 db    0
.eh_frame:000000000000A904                 db    0
.eh_frame:000000000000A905                 db    0
.eh_frame:000000000000A906                 db    0
.eh_frame:000000000000A907                 db    0
.eh_frame:000000000000A908                 db  3Ch ; <
.eh_frame:000000000000A909                 db    0
.eh_frame:000000000000A90A                 db    0
.eh_frame:000000000000A90B                 db    0
.eh_frame:000000000000A90C                 db  7Ch ; |
.eh_frame:000000000000A90D                 db  0Bh
.eh_frame:000000000000A90E                 db    0
.eh_frame:000000000000A90F                 db    0
.eh_frame:000000000000A910                 db 0C0h
.eh_frame:000000000000A911                 db 0B5h
.eh_frame:000000000000A912                 db 0FFh
.eh_frame:000000000000A913                 db 0FFh
.eh_frame:000000000000A914                 db 0F2h
.eh_frame:000000000000A915                 db    0
.eh_frame:000000000000A916                 db    0
.eh_frame:000000000000A917                 db    0
.eh_frame:000000000000A918                 db    0
.eh_frame:000000000000A919                 db  42h ; B
.eh_frame:000000000000A91A                 db  0Eh
.eh_frame:000000000000A91B                 db  10h
.eh_frame:000000000000A91C                 db  8Dh
.eh_frame:000000000000A91D                 db    2
.eh_frame:000000000000A91E                 db  42h ; B
.eh_frame:000000000000A91F                 db  0Eh
.eh_frame:000000000000A920                 db  18h
.eh_frame:000000000000A921                 db  8Ch
.eh_frame:000000000000A922                 db    3
.eh_frame:000000000000A923                 db  44h ; D
.eh_frame:000000000000A924                 db  0Eh
.eh_frame:000000000000A925                 db  20h
.eh_frame:000000000000A926                 db  86h
.eh_frame:000000000000A927                 db    4
.eh_frame:000000000000A928                 db  41h ; A
.eh_frame:000000000000A929                 db  0Eh
.eh_frame:000000000000A92A                 db  28h ; (
.eh_frame:000000000000A92B                 db  83h
.eh_frame:000000000000A92C                 db    5
.eh_frame:000000000000A92D                 db  4Ah ; J
.eh_frame:000000000000A92E                 db  0Eh
.eh_frame:000000000000A92F                 db 0A0h
.eh_frame:000000000000A930                 db  10h
.eh_frame:000000000000A931                 db    2
.eh_frame:000000000000A932                 db  8Fh
.eh_frame:000000000000A933                 db  0Ah
.eh_frame:000000000000A934                 db  0Eh
.eh_frame:000000000000A935                 db  28h ; (
.eh_frame:000000000000A936                 db  41h ; A
.eh_frame:000000000000A937                 db  0Eh
.eh_frame:000000000000A938                 db  20h
.eh_frame:000000000000A939                 db  41h ; A
.eh_frame:000000000000A93A                 db  0Eh
.eh_frame:000000000000A93B                 db  18h
.eh_frame:000000000000A93C                 db  42h ; B
.eh_frame:000000000000A93D                 db  0Eh
.eh_frame:000000000000A93E                 db  10h
.eh_frame:000000000000A93F                 db  42h ; B
.eh_frame:000000000000A940                 db  0Eh
.eh_frame:000000000000A941                 db    8
.eh_frame:000000000000A942                 db  48h ; H
.eh_frame:000000000000A943                 db  0Bh
.eh_frame:000000000000A944                 db    0
.eh_frame:000000000000A945                 db    0
.eh_frame:000000000000A946                 db    0
.eh_frame:000000000000A947                 db    0
.eh_frame:000000000000A948                 db  14h
.eh_frame:000000000000A949                 db    0
.eh_frame:000000000000A94A                 db    0
.eh_frame:000000000000A94B                 db    0
.eh_frame:000000000000A94C                 db 0BCh
.eh_frame:000000000000A94D                 db  0Bh
.eh_frame:000000000000A94E                 db    0
.eh_frame:000000000000A94F                 db    0
.eh_frame:000000000000A950                 db  80h
.eh_frame:000000000000A951                 db 0B6h
.eh_frame:000000000000A952                 db 0FFh
.eh_frame:000000000000A953                 db 0FFh
.eh_frame:000000000000A954                 db  12h
.eh_frame:000000000000A955                 db    0
.eh_frame:000000000000A956                 db    0
.eh_frame:000000000000A957                 db    0
.eh_frame:000000000000A958                 db    0
.eh_frame:000000000000A959                 db    0
.eh_frame:000000000000A95A                 db    0
.eh_frame:000000000000A95B                 db    0
.eh_frame:000000000000A95C                 db    0
.eh_frame:000000000000A95D                 db    0
.eh_frame:000000000000A95E                 db    0
.eh_frame:000000000000A95F                 db    0
.eh_frame:000000000000A960                 db  54h ; T
.eh_frame:000000000000A961                 db    0
.eh_frame:000000000000A962                 db    0
.eh_frame:000000000000A963                 db    0
.eh_frame:000000000000A964                 db 0D4h
.eh_frame:000000000000A965                 db  0Bh
.eh_frame:000000000000A966                 db    0
.eh_frame:000000000000A967                 db    0
.eh_frame:000000000000A968                 db  88h
.eh_frame:000000000000A969                 db 0B6h
.eh_frame:000000000000A96A                 db 0FFh
.eh_frame:000000000000A96B                 db 0FFh
.eh_frame:000000000000A96C                 db 0B6h
.eh_frame:000000000000A96D                 db    0
.eh_frame:000000000000A96E                 db    0
.eh_frame:000000000000A96F                 db    0
.eh_frame:000000000000A970                 db    0
.eh_frame:000000000000A971                 db  42h ; B
.eh_frame:000000000000A972                 db  0Eh
.eh_frame:000000000000A973                 db  10h
.eh_frame:000000000000A974                 db  8Ch
.eh_frame:000000000000A975                 db    2
.eh_frame:000000000000A976                 db  41h ; A
.eh_frame:000000000000A977                 db  0Eh
.eh_frame:000000000000A978                 db  18h
.eh_frame:000000000000A979                 db  86h
.eh_frame:000000000000A97A                 db    3
.eh_frame:000000000000A97B                 db  44h ; D
.eh_frame:000000000000A97C                 db  0Eh
.eh_frame:000000000000A97D                 db  20h
.eh_frame:000000000000A97E                 db  83h
.eh_frame:000000000000A97F                 db    4
.eh_frame:000000000000A980                 db  47h ; G
.eh_frame:000000000000A981                 db  0Eh
.eh_frame:000000000000A982                 db  30h ; 0
.eh_frame:000000000000A983                 db    2
.eh_frame:000000000000A984                 db  53h ; S
.eh_frame:000000000000A985                 db  0Ah
.eh_frame:000000000000A986                 db  0Eh
.eh_frame:000000000000A987                 db  20h
.eh_frame:000000000000A988                 db  41h ; A
.eh_frame:000000000000A989                 db  0Eh
.eh_frame:000000000000A98A                 db  18h
.eh_frame:000000000000A98B                 db  41h ; A
.eh_frame:000000000000A98C                 db  0Eh
.eh_frame:000000000000A98D                 db  10h
.eh_frame:000000000000A98E                 db  42h ; B
.eh_frame:000000000000A98F                 db  0Eh
.eh_frame:000000000000A990                 db    8
.eh_frame:000000000000A991                 db  4Bh ; K
.eh_frame:000000000000A992                 db  0Bh
.eh_frame:000000000000A993                 db  49h ; I
.eh_frame:000000000000A994                 db  0Ah
.eh_frame:000000000000A995                 db  0Eh
.eh_frame:000000000000A996                 db  20h
.eh_frame:000000000000A997                 db  43h ; C
.eh_frame:000000000000A998                 db  0Eh
.eh_frame:000000000000A999                 db  18h
.eh_frame:000000000000A99A                 db  41h ; A
.eh_frame:000000000000A99B                 db  0Eh
.eh_frame:000000000000A99C                 db  10h
.eh_frame:000000000000A99D                 db  42h ; B
.eh_frame:000000000000A99E                 db  0Eh
.eh_frame:000000000000A99F                 db    8
.eh_frame:000000000000A9A0                 db  41h ; A
.eh_frame:000000000000A9A1                 db  0Bh
.eh_frame:000000000000A9A2                 db  47h ; G
.eh_frame:000000000000A9A3                 db  0Ah
.eh_frame:000000000000A9A4                 db  0Eh
.eh_frame:000000000000A9A5                 db  20h
.eh_frame:000000000000A9A6                 db  43h ; C
.eh_frame:000000000000A9A7                 db  0Eh
.eh_frame:000000000000A9A8                 db  18h
.eh_frame:000000000000A9A9                 db  41h ; A
.eh_frame:000000000000A9AA                 db  0Eh
.eh_frame:000000000000A9AB                 db  10h
.eh_frame:000000000000A9AC                 db  42h ; B
.eh_frame:000000000000A9AD                 db  0Eh
.eh_frame:000000000000A9AE                 db    8
.eh_frame:000000000000A9AF                 db  43h ; C
.eh_frame:000000000000A9B0                 db  0Bh
.eh_frame:000000000000A9B1                 db    0
.eh_frame:000000000000A9B2                 db    0
.eh_frame:000000000000A9B3                 db    0
.eh_frame:000000000000A9B4                 db    0
.eh_frame:000000000000A9B5                 db    0
.eh_frame:000000000000A9B6                 db    0
.eh_frame:000000000000A9B7                 db    0
.eh_frame:000000000000A9B8                 db  4Ch ; L
.eh_frame:000000000000A9B9                 db    0
.eh_frame:000000000000A9BA                 db    0
.eh_frame:000000000000A9BB                 db    0
.eh_frame:000000000000A9BC                 db  2Ch ; ,
.eh_frame:000000000000A9BD                 db  0Ch
.eh_frame:000000000000A9BE                 db    0
.eh_frame:000000000000A9BF                 db    0
.eh_frame:000000000000A9C0                 db 0F0h
.eh_frame:000000000000A9C1                 db 0B6h
.eh_frame:000000000000A9C2                 db 0FFh
.eh_frame:000000000000A9C3                 db 0FFh
.eh_frame:000000000000A9C4                 db  7Dh ; }
.eh_frame:000000000000A9C5                 db    0
.eh_frame:000000000000A9C6                 db    0
.eh_frame:000000000000A9C7                 db    0
.eh_frame:000000000000A9C8                 db    0
.eh_frame:000000000000A9C9                 db  42h ; B
.eh_frame:000000000000A9CA                 db  0Eh
.eh_frame:000000000000A9CB                 db  10h
.eh_frame:000000000000A9CC                 db  8Ch
.eh_frame:000000000000A9CD                 db    2
.eh_frame:000000000000A9CE                 db  41h ; A
.eh_frame:000000000000A9CF                 db  0Eh
.eh_frame:000000000000A9D0                 db  18h
.eh_frame:000000000000A9D1                 db  86h
.eh_frame:000000000000A9D2                 db    3
.eh_frame:000000000000A9D3                 db  44h ; D
.eh_frame:000000000000A9D4                 db  0Eh
.eh_frame:000000000000A9D5                 db  20h
.eh_frame:000000000000A9D6                 db  83h
.eh_frame:000000000000A9D7                 db    4
.eh_frame:000000000000A9D8                 db  69h ; i
.eh_frame:000000000000A9D9                 db  0Ah
.eh_frame:000000000000A9DA                 db  0Eh
.eh_frame:000000000000A9DB                 db  18h
.eh_frame:000000000000A9DC                 db  41h ; A
.eh_frame:000000000000A9DD                 db  0Eh
.eh_frame:000000000000A9DE                 db  10h
.eh_frame:000000000000A9DF                 db  42h ; B
.eh_frame:000000000000A9E0                 db  0Eh
.eh_frame:000000000000A9E1                 db    8
.eh_frame:000000000000A9E2                 db  45h ; E
.eh_frame:000000000000A9E3                 db  0Bh
.eh_frame:000000000000A9E4                 db  55h ; U
.eh_frame:000000000000A9E5                 db  0Ah
.eh_frame:000000000000A9E6                 db  0Eh
.eh_frame:000000000000A9E7                 db  18h
.eh_frame:000000000000A9E8                 db  41h ; A
.eh_frame:000000000000A9E9                 db  0Eh
.eh_frame:000000000000A9EA                 db  10h
.eh_frame:000000000000A9EB                 db  42h ; B
.eh_frame:000000000000A9EC                 db  0Eh
.eh_frame:000000000000A9ED                 db    8
.eh_frame:000000000000A9EE                 db  48h ; H
.eh_frame:000000000000A9EF                 db  0Bh
.eh_frame:000000000000A9F0                 db  41h ; A
.eh_frame:000000000000A9F1                 db  0Ah
.eh_frame:000000000000A9F2                 db  0Eh
.eh_frame:000000000000A9F3                 db  18h
.eh_frame:000000000000A9F4                 db  46h ; F
.eh_frame:000000000000A9F5                 db  0Eh
.eh_frame:000000000000A9F6                 db  10h
.eh_frame:000000000000A9F7                 db  42h ; B
.eh_frame:000000000000A9F8                 db  0Eh
.eh_frame:000000000000A9F9                 db    8
.eh_frame:000000000000A9FA                 db  47h ; G
.eh_frame:000000000000A9FB                 db  0Bh
.eh_frame:000000000000A9FC                 db  49h ; I
.eh_frame:000000000000A9FD                 db  0Eh
.eh_frame:000000000000A9FE                 db  18h
.eh_frame:000000000000A9FF                 db  41h ; A
.eh_frame:000000000000AA00                 db  0Eh
.eh_frame:000000000000AA01                 db  10h
.eh_frame:000000000000AA02                 db  42h ; B
.eh_frame:000000000000AA03                 db  0Eh
.eh_frame:000000000000AA04                 db    8
.eh_frame:000000000000AA05                 db    0
.eh_frame:000000000000AA06                 db    0
.eh_frame:000000000000AA07                 db    0
.eh_frame:000000000000AA08                 db  1Ch
.eh_frame:000000000000AA09                 db    0
.eh_frame:000000000000AA0A                 db    0
.eh_frame:000000000000AA0B                 db    0
.eh_frame:000000000000AA0C                 db  7Ch ; |
.eh_frame:000000000000AA0D                 db  0Ch
.eh_frame:000000000000AA0E                 db    0
.eh_frame:000000000000AA0F                 db    0
.eh_frame:000000000000AA10                 db  20h
.eh_frame:000000000000AA11                 db 0B7h
.eh_frame:000000000000AA12                 db 0FFh
.eh_frame:000000000000AA13                 db 0FFh
.eh_frame:000000000000AA14                 db  60h ; `
.eh_frame:000000000000AA15                 db    0
.eh_frame:000000000000AA16                 db    0
.eh_frame:000000000000AA17                 db    0
.eh_frame:000000000000AA18                 db    0
.eh_frame:000000000000AA19                 db  44h ; D
.eh_frame:000000000000AA1A                 db  0Eh
.eh_frame:000000000000AA1B                 db  10h
.eh_frame:000000000000AA1C                 db  75h ; u
.eh_frame:000000000000AA1D                 db  0Ah
.eh_frame:000000000000AA1E                 db  0Eh
.eh_frame:000000000000AA1F                 db    8
.eh_frame:000000000000AA20                 db  47h ; G
.eh_frame:000000000000AA21                 db  0Bh
.eh_frame:000000000000AA22                 db  5Fh ; _
.eh_frame:000000000000AA23                 db  0Eh
.eh_frame:000000000000AA24                 db    8
.eh_frame:000000000000AA25                 db    0
.eh_frame:000000000000AA26                 db    0
.eh_frame:000000000000AA27                 db    0
.eh_frame:000000000000AA28                 db  1Ch
.eh_frame:000000000000AA29                 db    0
.eh_frame:000000000000AA2A                 db    0
.eh_frame:000000000000AA2B                 db    0
.eh_frame:000000000000AA2C                 db  9Ch
.eh_frame:000000000000AA2D                 db  0Ch
.eh_frame:000000000000AA2E                 db    0
.eh_frame:000000000000AA2F                 db    0
.eh_frame:000000000000AA30                 db  60h ; `
.eh_frame:000000000000AA31                 db 0B7h
.eh_frame:000000000000AA32                 db 0FFh
.eh_frame:000000000000AA33                 db 0FFh
.eh_frame:000000000000AA34                 db  3Ch ; <
.eh_frame:000000000000AA35                 db    0
.eh_frame:000000000000AA36                 db    0
.eh_frame:000000000000AA37                 db    0
.eh_frame:000000000000AA38                 db    0
.eh_frame:000000000000AA39                 db  44h ; D
.eh_frame:000000000000AA3A                 db  0Eh
.eh_frame:000000000000AA3B                 db  10h
.eh_frame:000000000000AA3C                 db  61h ; a
.eh_frame:000000000000AA3D                 db  0Ah
.eh_frame:000000000000AA3E                 db  0Eh
.eh_frame:000000000000AA3F                 db    8
.eh_frame:000000000000AA40                 db  4Bh ; K
.eh_frame:000000000000AA41                 db  0Bh
.eh_frame:000000000000AA42                 db  4Bh ; K
.eh_frame:000000000000AA43                 db  0Eh
.eh_frame:000000000000AA44                 db    8
.eh_frame:000000000000AA45                 db    0
.eh_frame:000000000000AA46                 db    0
.eh_frame:000000000000AA47                 db    0
.eh_frame:000000000000AA48                 db  34h ; 4
.eh_frame:000000000000AA49                 db    0
.eh_frame:000000000000AA4A                 db    0
.eh_frame:000000000000AA4B                 db    0
.eh_frame:000000000000AA4C                 db 0BCh
.eh_frame:000000000000AA4D                 db  0Ch
.eh_frame:000000000000AA4E                 db    0
.eh_frame:000000000000AA4F                 db    0
.eh_frame:000000000000AA50                 db  80h
.eh_frame:000000000000AA51                 db 0B7h
.eh_frame:000000000000AA52                 db 0FFh
.eh_frame:000000000000AA53                 db 0FFh
.eh_frame:000000000000AA54                 db  7Bh ; {
.eh_frame:000000000000AA55                 db    0
.eh_frame:000000000000AA56                 db    0
.eh_frame:000000000000AA57                 db    0
.eh_frame:000000000000AA58                 db    0
.eh_frame:000000000000AA59                 db  42h ; B
.eh_frame:000000000000AA5A                 db  0Eh
.eh_frame:000000000000AA5B                 db  10h
.eh_frame:000000000000AA5C                 db  8Ch
.eh_frame:000000000000AA5D                 db    2
.eh_frame:000000000000AA5E                 db  41h ; A
.eh_frame:000000000000AA5F                 db  0Eh
.eh_frame:000000000000AA60                 db  18h
.eh_frame:000000000000AA61                 db  86h
.eh_frame:000000000000AA62                 db    3
.eh_frame:000000000000AA63                 db  41h ; A
.eh_frame:000000000000AA64                 db  0Eh
.eh_frame:000000000000AA65                 db  20h
.eh_frame:000000000000AA66                 db  83h
.eh_frame:000000000000AA67                 db    4
.eh_frame:000000000000AA68                 db  7Dh ; }
.eh_frame:000000000000AA69                 db  0Ah
.eh_frame:000000000000AA6A                 db  0Eh
.eh_frame:000000000000AA6B                 db  18h
.eh_frame:000000000000AA6C                 db  41h ; A
.eh_frame:000000000000AA6D                 db  0Eh
.eh_frame:000000000000AA6E                 db  10h
.eh_frame:000000000000AA6F                 db  42h ; B
.eh_frame:000000000000AA70                 db  0Eh
.eh_frame:000000000000AA71                 db    8
.eh_frame:000000000000AA72                 db  44h ; D
.eh_frame:000000000000AA73                 db  0Bh
.eh_frame:000000000000AA74                 db  60h ; `
.eh_frame:000000000000AA75                 db  0Ah
.eh_frame:000000000000AA76                 db  0Eh
.eh_frame:000000000000AA77                 db  18h
.eh_frame:000000000000AA78                 db  41h ; A
.eh_frame:000000000000AA79                 db  0Eh
.eh_frame:000000000000AA7A                 db  10h
.eh_frame:000000000000AA7B                 db  42h ; B
.eh_frame:000000000000AA7C                 db  0Eh
.eh_frame:000000000000AA7D                 db    8
.eh_frame:000000000000AA7E                 db  45h ; E
.eh_frame:000000000000AA7F                 db  0Bh
.eh_frame:000000000000AA80                 db  1Ch
.eh_frame:000000000000AA81                 db    0
.eh_frame:000000000000AA82                 db    0
.eh_frame:000000000000AA83                 db    0
.eh_frame:000000000000AA84                 db 0F4h
.eh_frame:000000000000AA85                 db  0Ch
.eh_frame:000000000000AA86                 db    0
.eh_frame:000000000000AA87                 db    0
.eh_frame:000000000000AA88                 db 0C8h
.eh_frame:000000000000AA89                 db 0B7h
.eh_frame:000000000000AA8A                 db 0FFh
.eh_frame:000000000000AA8B                 db 0FFh
.eh_frame:000000000000AA8C                 db  40h ; @
.eh_frame:000000000000AA8D                 db    0
.eh_frame:000000000000AA8E                 db    0
.eh_frame:000000000000AA8F                 db    0
.eh_frame:000000000000AA90                 db    0
.eh_frame:000000000000AA91                 db  44h ; D
.eh_frame:000000000000AA92                 db  0Eh
.eh_frame:000000000000AA93                 db  10h
.eh_frame:000000000000AA94                 db  83h
.eh_frame:000000000000AA95                 db    2
.eh_frame:000000000000AA96                 db  5Ah ; Z
.eh_frame:000000000000AA97                 db  0Ah
.eh_frame:000000000000AA98                 db  0Eh
.eh_frame:000000000000AA99                 db    8
.eh_frame:000000000000AA9A                 db  4Ah ; J
.eh_frame:000000000000AA9B                 db  0Bh
.eh_frame:000000000000AA9C                 db  53h ; S
.eh_frame:000000000000AA9D                 db  0Eh
.eh_frame:000000000000AA9E                 db    8
.eh_frame:000000000000AA9F                 db    0
.eh_frame:000000000000AAA0                 db  2Ch ; ,
.eh_frame:000000000000AAA1                 db    0
.eh_frame:000000000000AAA2                 db    0
.eh_frame:000000000000AAA3                 db    0
.eh_frame:000000000000AAA4                 db  14h
.eh_frame:000000000000AAA5                 db  0Dh
.eh_frame:000000000000AAA6                 db    0
.eh_frame:000000000000AAA7                 db    0
.eh_frame:000000000000AAA8                 db 0E8h
.eh_frame:000000000000AAA9                 db 0B7h
.eh_frame:000000000000AAAA                 db 0FFh
.eh_frame:000000000000AAAB                 db 0FFh
.eh_frame:000000000000AAAC                 db  57h ; W
.eh_frame:000000000000AAAD                 db    0
.eh_frame:000000000000AAAE                 db    0
.eh_frame:000000000000AAAF                 db    0
.eh_frame:000000000000AAB0                 db    0
.eh_frame:000000000000AAB1                 db  63h ; c
.eh_frame:000000000000AAB2                 db  0Eh
.eh_frame:000000000000AAB3                 db  10h
.eh_frame:000000000000AAB4                 db  8Ch
.eh_frame:000000000000AAB5                 db    2
.eh_frame:000000000000AAB6                 db  41h ; A
.eh_frame:000000000000AAB7                 db  0Eh
.eh_frame:000000000000AAB8                 db  18h
.eh_frame:000000000000AAB9                 db  86h
.eh_frame:000000000000AABA                 db    3
.eh_frame:000000000000AABB                 db  44h ; D
.eh_frame:000000000000AABC                 db  0Eh
.eh_frame:000000000000AABD                 db  20h
.eh_frame:000000000000AABE                 db  83h
.eh_frame:000000000000AABF                 db    4
.eh_frame:000000000000AAC0                 db  6Bh ; k
.eh_frame:000000000000AAC1                 db  0Eh
.eh_frame:000000000000AAC2                 db  18h
.eh_frame:000000000000AAC3                 db  41h ; A
.eh_frame:000000000000AAC4                 db  0Eh
.eh_frame:000000000000AAC5                 db  10h
.eh_frame:000000000000AAC6                 db  42h ; B
.eh_frame:000000000000AAC7                 db  0Eh
.eh_frame:000000000000AAC8                 db    8
.eh_frame:000000000000AAC9                 db    0
.eh_frame:000000000000AACA                 db    0
.eh_frame:000000000000AACB                 db    0
.eh_frame:000000000000AACC                 db    0
.eh_frame:000000000000AACD                 db    0
.eh_frame:000000000000AACE                 db    0
.eh_frame:000000000000AACF                 db    0
.eh_frame:000000000000AAD0                 db  14h
.eh_frame:000000000000AAD1                 db    0
.eh_frame:000000000000AAD2                 db    0
.eh_frame:000000000000AAD3                 db    0
.eh_frame:000000000000AAD4                 db  44h ; D
.eh_frame:000000000000AAD5                 db  0Dh
.eh_frame:000000000000AAD6                 db    0
.eh_frame:000000000000AAD7                 db    0
.eh_frame:000000000000AAD8                 db  18h
.eh_frame:000000000000AAD9                 db 0B8h
.eh_frame:000000000000AADA                 db 0FFh
.eh_frame:000000000000AADB                 db 0FFh
.eh_frame:000000000000AADC                 db    4
.eh_frame:000000000000AADD                 db    0
.eh_frame:000000000000AADE                 db    0
.eh_frame:000000000000AADF                 db    0
.eh_frame:000000000000AAE0                 db    0
.eh_frame:000000000000AAE1                 db    0
.eh_frame:000000000000AAE2                 db    0
.eh_frame:000000000000AAE3                 db    0
.eh_frame:000000000000AAE4                 db    0
.eh_frame:000000000000AAE5                 db    0
.eh_frame:000000000000AAE6                 db    0
.eh_frame:000000000000AAE7                 db    0
.eh_frame:000000000000AAE8                 db  2Ch ; ,
.eh_frame:000000000000AAE9                 db    0
.eh_frame:000000000000AAEA                 db    0
.eh_frame:000000000000AAEB                 db    0
.eh_frame:000000000000AAEC                 db  5Ch ; \
.eh_frame:000000000000AAED                 db  0Dh
.eh_frame:000000000000AAEE                 db    0
.eh_frame:000000000000AAEF                 db    0
.eh_frame:000000000000AAF0                 db  10h
.eh_frame:000000000000AAF1                 db 0B8h
.eh_frame:000000000000AAF2                 db 0FFh
.eh_frame:000000000000AAF3                 db 0FFh
.eh_frame:000000000000AAF4                 db  1Fh
.eh_frame:000000000000AAF5                 db  11h
.eh_frame:000000000000AAF6                 db    0
.eh_frame:000000000000AAF7                 db    0
.eh_frame:000000000000AAF8                 db    0
.eh_frame:000000000000AAF9                 db  41h ; A
.eh_frame:000000000000AAFA                 db  0Eh
.eh_frame:000000000000AAFB                 db  10h
.eh_frame:000000000000AAFC                 db  86h
.eh_frame:000000000000AAFD                 db    2
.eh_frame:000000000000AAFE                 db  43h ; C
.eh_frame:000000000000AAFF                 db  0Dh
.eh_frame:000000000000AB00                 db    6
.eh_frame:000000000000AB01                 db  48h ; H
.eh_frame:000000000000AB02                 db  8Fh
.eh_frame:000000000000AB03                 db    3
.eh_frame:000000000000AB04                 db  8Eh
.eh_frame:000000000000AB05                 db    4
.eh_frame:000000000000AB06                 db  8Dh
.eh_frame:000000000000AB07                 db    5
.eh_frame:000000000000AB08                 db  8Ch
.eh_frame:000000000000AB09                 db    6
.eh_frame:000000000000AB0A                 db  48h ; H
.eh_frame:000000000000AB0B                 db  83h
.eh_frame:000000000000AB0C                 db    7
.eh_frame:000000000000AB0D                 db    3
.eh_frame:000000000000AB0E                 db 0EFh
.eh_frame:000000000000AB0F                 db    1
.eh_frame:000000000000AB10                 db  0Ah
.eh_frame:000000000000AB11                 db  0Ch
.eh_frame:000000000000AB12                 db    7
.eh_frame:000000000000AB13                 db    8
.eh_frame:000000000000AB14                 db  45h ; E
.eh_frame:000000000000AB15                 db  0Bh
.eh_frame:000000000000AB16                 db    0
.eh_frame:000000000000AB17                 db    0
.eh_frame:000000000000AB18                 db  14h
.eh_frame:000000000000AB19                 db    0
.eh_frame:000000000000AB1A                 db    0
.eh_frame:000000000000AB1B                 db    0
.eh_frame:000000000000AB1C                 db  8Ch
.eh_frame:000000000000AB1D                 db  0Dh
.eh_frame:000000000000AB1E                 db    0
.eh_frame:000000000000AB1F                 db    0
.eh_frame:000000000000AB20                 db    0
.eh_frame:000000000000AB21                 db 0C9h
.eh_frame:000000000000AB22                 db 0FFh
.eh_frame:000000000000AB23                 db 0FFh
.eh_frame:000000000000AB24                 db 0FEh
.eh_frame:000000000000AB25                 db    1
.eh_frame:000000000000AB26                 db    0
.eh_frame:000000000000AB27                 db    0
.eh_frame:000000000000AB28                 db    0
.eh_frame:000000000000AB29                 db    0
.eh_frame:000000000000AB2A                 db    0
.eh_frame:000000000000AB2B                 db    0
.eh_frame:000000000000AB2C                 db    0
.eh_frame:000000000000AB2D                 db    0
.eh_frame:000000000000AB2E                 db    0
.eh_frame:000000000000AB2F                 db    0
.eh_frame:000000000000AB30                 db  4Ch ; L
.eh_frame:000000000000AB31                 db    0
.eh_frame:000000000000AB32                 db    0
.eh_frame:000000000000AB33                 db    0
.eh_frame:000000000000AB34                 db 0A4h
.eh_frame:000000000000AB35                 db  0Dh
.eh_frame:000000000000AB36                 db    0
.eh_frame:000000000000AB37                 db    0
.eh_frame:000000000000AB38                 db 0E8h
.eh_frame:000000000000AB39                 db 0CAh
.eh_frame:000000000000AB3A                 db 0FFh
.eh_frame:000000000000AB3B                 db 0FFh
.eh_frame:000000000000AB3C                 db 0ECh
.eh_frame:000000000000AB3D                 db  0Ch
.eh_frame:000000000000AB3E                 db    0
.eh_frame:000000000000AB3F                 db    0
.eh_frame:000000000000AB40                 db    0
.eh_frame:000000000000AB41                 db  42h ; B
.eh_frame:000000000000AB42                 db  0Eh
.eh_frame:000000000000AB43                 db  10h
.eh_frame:000000000000AB44                 db  8Fh
.eh_frame:000000000000AB45                 db    2
.eh_frame:000000000000AB46                 db  42h ; B
.eh_frame:000000000000AB47                 db  0Eh
.eh_frame:000000000000AB48                 db  18h
.eh_frame:000000000000AB49                 db  8Eh
.eh_frame:000000000000AB4A                 db    3
.eh_frame:000000000000AB4B                 db  46h ; F
.eh_frame:000000000000AB4C                 db  0Eh
.eh_frame:000000000000AB4D                 db  20h
.eh_frame:000000000000AB4E                 db  8Dh
.eh_frame:000000000000AB4F                 db    4
.eh_frame:000000000000AB50                 db  42h ; B
.eh_frame:000000000000AB51                 db  0Eh
.eh_frame:000000000000AB52                 db  28h ; (
.eh_frame:000000000000AB53                 db  8Ch
.eh_frame:000000000000AB54                 db    5
.eh_frame:000000000000AB55                 db  45h ; E
.eh_frame:000000000000AB56                 db  0Eh
.eh_frame:000000000000AB57                 db  30h ; 0
.eh_frame:000000000000AB58                 db  86h
.eh_frame:000000000000AB59                 db    6
.eh_frame:000000000000AB5A                 db  41h ; A
.eh_frame:000000000000AB5B                 db  0Eh
.eh_frame:000000000000AB5C                 db  38h ; 8
.eh_frame:000000000000AB5D                 db  83h
.eh_frame:000000000000AB5E                 db    7
.eh_frame:000000000000AB5F                 db  52h ; R
.eh_frame:000000000000AB60                 db  0Eh
.eh_frame:000000000000AB61                 db  90h
.eh_frame:000000000000AB62                 db    1
.eh_frame:000000000000AB63                 db    2
.eh_frame:000000000000AB64                 db  82h
.eh_frame:000000000000AB65                 db  0Ah
.eh_frame:000000000000AB66                 db  0Eh
.eh_frame:000000000000AB67                 db  38h ; 8
.eh_frame:000000000000AB68                 db  41h ; A
.eh_frame:000000000000AB69                 db  0Eh
.eh_frame:000000000000AB6A                 db  30h ; 0
.eh_frame:000000000000AB6B                 db  41h ; A
.eh_frame:000000000000AB6C                 db  0Eh
.eh_frame:000000000000AB6D                 db  28h ; (
.eh_frame:000000000000AB6E                 db  42h ; B
.eh_frame:000000000000AB6F                 db  0Eh
.eh_frame:000000000000AB70                 db  20h
.eh_frame:000000000000AB71                 db  42h ; B
.eh_frame:000000000000AB72                 db  0Eh
.eh_frame:000000000000AB73                 db  18h
.eh_frame:000000000000AB74                 db  42h ; B
.eh_frame:000000000000AB75                 db  0Eh
.eh_frame:000000000000AB76                 db  10h
.eh_frame:000000000000AB77                 db  42h ; B
.eh_frame:000000000000AB78                 db  0Eh
.eh_frame:000000000000AB79                 db    8
.eh_frame:000000000000AB7A                 db  48h ; H
.eh_frame:000000000000AB7B                 db  0Bh
.eh_frame:000000000000AB7C                 db    0
.eh_frame:000000000000AB7D                 db    0
.eh_frame:000000000000AB7E                 db    0
.eh_frame:000000000000AB7F                 db    0
.eh_frame:000000000000AB80                 db  44h ; D
.eh_frame:000000000000AB81                 db    0
.eh_frame:000000000000AB82                 db    0
.eh_frame:000000000000AB83                 db    0
.eh_frame:000000000000AB84                 db 0F4h
.eh_frame:000000000000AB85                 db  0Dh
.eh_frame:000000000000AB86                 db    0
.eh_frame:000000000000AB87                 db    0
.eh_frame:000000000000AB88                 db  88h
.eh_frame:000000000000AB89                 db 0D7h
.eh_frame:000000000000AB8A                 db 0FFh
.eh_frame:000000000000AB8B                 db 0FFh
.eh_frame:000000000000AB8C                 db  65h ; e
.eh_frame:000000000000AB8D                 db    0
.eh_frame:000000000000AB8E                 db    0
.eh_frame:000000000000AB8F                 db    0
.eh_frame:000000000000AB90                 db    0
.eh_frame:000000000000AB91                 db  42h ; B
.eh_frame:000000000000AB92                 db  0Eh
.eh_frame:000000000000AB93                 db  10h
.eh_frame:000000000000AB94                 db  8Fh
.eh_frame:000000000000AB95                 db    2
.eh_frame:000000000000AB96                 db  42h ; B
.eh_frame:000000000000AB97                 db  0Eh
.eh_frame:000000000000AB98                 db  18h
.eh_frame:000000000000AB99                 db  8Eh
.eh_frame:000000000000AB9A                 db    3
.eh_frame:000000000000AB9B                 db  45h ; E
.eh_frame:000000000000AB9C                 db  0Eh
.eh_frame:000000000000AB9D                 db  20h
.eh_frame:000000000000AB9E                 db  8Dh
.eh_frame:000000000000AB9F                 db    4
.eh_frame:000000000000ABA0                 db  42h ; B
.eh_frame:000000000000ABA1                 db  0Eh
.eh_frame:000000000000ABA2                 db  28h ; (
.eh_frame:000000000000ABA3                 db  8Ch
.eh_frame:000000000000ABA4                 db    5
.eh_frame:000000000000ABA5                 db  48h ; H
.eh_frame:000000000000ABA6                 db  0Eh
.eh_frame:000000000000ABA7                 db  30h ; 0
.eh_frame:000000000000ABA8                 db  86h
.eh_frame:000000000000ABA9                 db    6
.eh_frame:000000000000ABAA                 db  48h ; H
.eh_frame:000000000000ABAB                 db  0Eh
.eh_frame:000000000000ABAC                 db  38h ; 8
.eh_frame:000000000000ABAD                 db  83h
.eh_frame:000000000000ABAE                 db    7
.eh_frame:000000000000ABAF                 db  4Dh ; M
.eh_frame:000000000000ABB0                 db  0Eh
.eh_frame:000000000000ABB1                 db  40h ; @
.eh_frame:000000000000ABB2                 db  72h ; r
.eh_frame:000000000000ABB3                 db  0Eh
.eh_frame:000000000000ABB4                 db  38h ; 8
.eh_frame:000000000000ABB5                 db  41h ; A
.eh_frame:000000000000ABB6                 db  0Eh
.eh_frame:000000000000ABB7                 db  30h ; 0
.eh_frame:000000000000ABB8                 db  41h ; A
.eh_frame:000000000000ABB9                 db  0Eh
.eh_frame:000000000000ABBA                 db  28h ; (
.eh_frame:000000000000ABBB                 db  42h ; B
.eh_frame:000000000000ABBC                 db  0Eh
.eh_frame:000000000000ABBD                 db  20h
.eh_frame:000000000000ABBE                 db  42h ; B
.eh_frame:000000000000ABBF                 db  0Eh
.eh_frame:000000000000ABC0                 db  18h
.eh_frame:000000000000ABC1                 db  42h ; B
.eh_frame:000000000000ABC2                 db  0Eh
.eh_frame:000000000000ABC3                 db  10h
.eh_frame:000000000000ABC4                 db  42h ; B
.eh_frame:000000000000ABC5                 db  0Eh
.eh_frame:000000000000ABC6                 db    8
.eh_frame:000000000000ABC7                 db    0
.eh_frame:000000000000ABC8                 db  14h
.eh_frame:000000000000ABC9                 db    0
.eh_frame:000000000000ABCA                 db    0
.eh_frame:000000000000ABCB                 db    0
.eh_frame:000000000000ABCC                 db  3Ch ; <
.eh_frame:000000000000ABCD                 db  0Eh
.eh_frame:000000000000ABCE                 db    0
.eh_frame:000000000000ABCF                 db    0
.eh_frame:000000000000ABD0                 db 0B0h
.eh_frame:000000000000ABD1                 db 0D7h
.eh_frame:000000000000ABD2                 db 0FFh
.eh_frame:000000000000ABD3                 db 0FFh
.eh_frame:000000000000ABD4                 db    2
.eh_frame:000000000000ABD5                 db    0
.eh_frame:000000000000ABD6                 db    0
.eh_frame:000000000000ABD7                 db    0
.eh_frame:000000000000ABD8                 db    0
.eh_frame:000000000000ABD9                 db    0
.eh_frame:000000000000ABDA                 db    0
.eh_frame:000000000000ABDB                 db    0
.eh_frame:000000000000ABDC                 db    0
.eh_frame:000000000000ABDD                 db    0
.eh_frame:000000000000ABDE                 db    0
.eh_frame:000000000000ABDF                 db    0
.eh_frame:000000000000ABE0                 db  10h
.eh_frame:000000000000ABE1                 db    0
.eh_frame:000000000000ABE2                 db    0
.eh_frame:000000000000ABE3                 db    0
.eh_frame:000000000000ABE4                 db  54h ; T
.eh_frame:000000000000ABE5                 db  0Eh
.eh_frame:000000000000ABE6                 db    0
.eh_frame:000000000000ABE7                 db    0
.eh_frame:000000000000ABE8                 db 0A8h
.eh_frame:000000000000ABE9                 db 0D7h
.eh_frame:000000000000ABEA                 db 0FFh
.eh_frame:000000000000ABEB                 db 0FFh
.eh_frame:000000000000ABEC                 db  0Eh
.eh_frame:000000000000ABED                 db    0
.eh_frame:000000000000ABEE                 db    0
.eh_frame:000000000000ABEF                 db    0
.eh_frame:000000000000ABF0                 db    0
.eh_frame:000000000000ABF1                 db    0
.eh_frame:000000000000ABF2                 db    0
.eh_frame:000000000000ABF3                 db    0
.eh_frame:000000000000ABF4 __FRAME_END__   db    0
.eh_frame:000000000000ABF5                 db    0
.eh_frame:000000000000ABF6                 db    0
.eh_frame:000000000000ABF7                 db    0
.eh_frame:000000000000ABF7 _eh_frame       ends
.eh_frame:000000000000ABF7
.init_array:000000000020BBB0 ; ELF Initialization Function Table
.init_array:000000000020BBB0 ; ===========================================================================
.init_array:000000000020BBB0
.init_array:000000000020BBB0 ; Segment type: Pure data
.init_array:000000000020BBB0 ; Segment permissions: Read/Write
.init_array:000000000020BBB0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020BBB0                 assume cs:_init_array
.init_array:000000000020BBB0                 ;org 20BBB0h
.init_array:000000000020BBB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020BBB0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020BBB0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020BBB0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020BBB0
.fini_array:000000000020BBB8 ; ELF Termination Function Table
.fini_array:000000000020BBB8 ; ===========================================================================
.fini_array:000000000020BBB8
.fini_array:000000000020BBB8 ; Segment type: Pure data
.fini_array:000000000020BBB8 ; Segment permissions: Read/Write
.fini_array:000000000020BBB8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020BBB8                 assume cs:_fini_array
.fini_array:000000000020BBB8                 ;org 20BBB8h
.fini_array:000000000020BBB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020BBB8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020BBB8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020BBB8
.data.rel.ro:000000000020BBC0 ; ===========================================================================
.data.rel.ro:000000000020BBC0
.data.rel.ro:000000000020BBC0 ; Segment type: Pure data
.data.rel.ro:000000000020BBC0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020BBC0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020BBC0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020BBC0                 ;org 20BBC0h
.data.rel.ro:000000000020BBC0                 public quoting_style_args
.data.rel.ro:000000000020BBC0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020BBC8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020BBD0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020BBD8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020BBE0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020BBE8                 dq offset aC            ; "c"
.data.rel.ro:000000000020BBF0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020BBF8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020BC00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020BC08                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020BC10                 db    0
.data.rel.ro:000000000020BC11                 db    0
.data.rel.ro:000000000020BC12                 db    0
.data.rel.ro:000000000020BC13                 db    0
.data.rel.ro:000000000020BC14                 db    0
.data.rel.ro:000000000020BC15                 db    0
.data.rel.ro:000000000020BC16                 db    0
.data.rel.ro:000000000020BC17                 db    0
.data.rel.ro:000000000020BC17 _data_rel_ro    ends
.data.rel.ro:000000000020BC17
LOAD:000000000020BC18 ; ELF Dynamic Information
LOAD:000000000020BC18 ; ===========================================================================
LOAD:000000000020BC18
LOAD:000000000020BC18 ; Segment type: Pure data
LOAD:000000000020BC18 ; Segment permissions: Read/Write
LOAD:000000000020BC18 LOAD            segment byte public 'DATA' use64
LOAD:000000000020BC18                 assume cs:LOAD
LOAD:000000000020BC18                 ;org 20BC18h
LOAD:000000000020BC18 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020BC18                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020BC18                                         ; DT_NEEDED libc.so.6
LOAD:000000000020BC28                 Elf64_Dyn <0Ch, 13E0h>  ; DT_INIT
LOAD:000000000020BC38                 Elf64_Dyn <0Dh, 83A0h>  ; DT_FINI
LOAD:000000000020BC48                 Elf64_Dyn <19h, 20BBB0h> ; DT_INIT_ARRAY
LOAD:000000000020BC58                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020BC68                 Elf64_Dyn <1Ah, 20BBB8h> ; DT_FINI_ARRAY
LOAD:000000000020BC78                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020BC88                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020BC98                 Elf64_Dyn <5, 8D8h>     ; DT_STRTAB
LOAD:000000000020BCA8                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:000000000020BCB8                 Elf64_Dyn <0Ah, 2EFh>   ; DT_STRSZ
LOAD:000000000020BCC8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020BCD8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020BCE8                 Elf64_Dyn <3, 20BE08h>  ; DT_PLTGOT
LOAD:000000000020BCF8                 Elf64_Dyn <2, 4E0h>     ; DT_PLTRELSZ
LOAD:000000000020BD08                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020BD18                 Elf64_Dyn <17h, 0F00h>  ; DT_JMPREL
LOAD:000000000020BD28                 Elf64_Dyn <7, 0CA8h>    ; DT_RELA
LOAD:000000000020BD38                 Elf64_Dyn <8, 258h>     ; DT_RELASZ
LOAD:000000000020BD48                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020BD58                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020BD68                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020BD78                 Elf64_Dyn <6FFFFFFEh, 0C48h> ; DT_VERNEED
LOAD:000000000020BD88                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020BD98                 Elf64_Dyn <6FFFFFF0h, 0BC8h> ; DT_VERSYM
LOAD:000000000020BDA8                 Elf64_Dyn <6FFFFFF9h, 10h> ; DT_RELACOUNT
LOAD:000000000020BDB8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020BDC8                 db    0
LOAD:000000000020BDC9                 db    0
LOAD:000000000020BDCA                 db    0
LOAD:000000000020BDCB                 db    0
LOAD:000000000020BDCC                 db    0
LOAD:000000000020BDCD                 db    0
LOAD:000000000020BDCE                 db    0
LOAD:000000000020BDCF                 db    0
LOAD:000000000020BDD0                 db    0
LOAD:000000000020BDD1                 db    0
LOAD:000000000020BDD2                 db    0
LOAD:000000000020BDD3                 db    0
LOAD:000000000020BDD4                 db    0
LOAD:000000000020BDD5                 db    0
LOAD:000000000020BDD6                 db    0
LOAD:000000000020BDD7                 db    0
LOAD:000000000020BDD8                 db    0
LOAD:000000000020BDD9                 db    0
LOAD:000000000020BDDA                 db    0
LOAD:000000000020BDDB                 db    0
LOAD:000000000020BDDC                 db    0
LOAD:000000000020BDDD                 db    0
LOAD:000000000020BDDE                 db    0
LOAD:000000000020BDDF                 db    0
LOAD:000000000020BDE0                 db    0
LOAD:000000000020BDE1                 db    0
LOAD:000000000020BDE2                 db    0
LOAD:000000000020BDE3                 db    0
LOAD:000000000020BDE4                 db    0
LOAD:000000000020BDE5                 db    0
LOAD:000000000020BDE6                 db    0
LOAD:000000000020BDE7                 db    0
LOAD:000000000020BDE8                 db    0
LOAD:000000000020BDE9                 db    0
LOAD:000000000020BDEA                 db    0
LOAD:000000000020BDEB                 db    0
LOAD:000000000020BDEC                 db    0
LOAD:000000000020BDED                 db    0
LOAD:000000000020BDEE                 db    0
LOAD:000000000020BDEF                 db    0
LOAD:000000000020BDF0                 db    0
LOAD:000000000020BDF1                 db    0
LOAD:000000000020BDF2                 db    0
LOAD:000000000020BDF3                 db    0
LOAD:000000000020BDF4                 db    0
LOAD:000000000020BDF5                 db    0
LOAD:000000000020BDF6                 db    0
LOAD:000000000020BDF7                 db    0
LOAD:000000000020BDF8                 db    0
LOAD:000000000020BDF9                 db    0
LOAD:000000000020BDFA                 db    0
LOAD:000000000020BDFB                 db    0
LOAD:000000000020BDFC                 db    0
LOAD:000000000020BDFD                 db    0
LOAD:000000000020BDFE                 db    0
LOAD:000000000020BDFF                 db    0
LOAD:000000000020BE00                 db    0
LOAD:000000000020BE01                 db    0
LOAD:000000000020BE02                 db    0
LOAD:000000000020BE03                 db    0
LOAD:000000000020BE04                 db    0
LOAD:000000000020BE05                 db    0
LOAD:000000000020BE06                 db    0
LOAD:000000000020BE07                 db    0
LOAD:000000000020BE07 LOAD            ends
LOAD:000000000020BE07
.got:000000000020BE08 ; ===========================================================================
.got:000000000020BE08
.got:000000000020BE08 ; Segment type: Pure data
.got:000000000020BE08 ; Segment permissions: Read/Write
.got:000000000020BE08 _got            segment qword public 'DATA' use64
.got:000000000020BE08                 assume cs:_got
.got:000000000020BE08                 ;org 20BE08h
.got:000000000020BE08 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020BE10 qword_20BE10    dq 0                    ; DATA XREF: sub_1400↑r
.got:000000000020BE18 qword_20BE18    dq 0                    ; DATA XREF: sub_1400+6↑r
.got:000000000020BE20 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:000000000020BE28 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000020BE28                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000020BE30 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020BE38 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020BE40 __errno_location_ptr dq offset __errno_location
.got:000000000020BE40                                         ; DATA XREF: ___errno_location↑r
.got:000000000020BE48 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020BE50 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020BE58 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020BE60 iconv_ptr       dq offset iconv         ; DATA XREF: _iconv↑r
.got:000000000020BE68 ferror_ptr      dq offset ferror        ; DATA XREF: _ferror↑r
.got:000000000020BE70 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020BE78 __strtol_internal_ptr dq offset __strtol_internal
.got:000000000020BE78                                         ; DATA XREF: ___strtol_internal↑r
.got:000000000020BE80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020BE88 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020BE88                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020BE90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020BE98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020BE98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020BEA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020BEA8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020BEA8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020BEB0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020BEB8 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020BEC0 newlocale_ptr   dq offset newlocale     ; DATA XREF: _newlocale↑r
.got:000000000020BEC8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020BED0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020BED8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020BEE0 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000020BEE0                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000020BEE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020BEF0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020BEF8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020BEF8                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020BF00 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020BF08 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020BF10 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020BF18 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020BF20 uselocale_ptr   dq offset uselocale     ; DATA XREF: _uselocale↑r
.got:000000000020BF28 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020BF30 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020BF38 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020BF40 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020BF48 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020BF50 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020BF58 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020BF60 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:000000000020BF68 strtold_ptr     dq offset strtold       ; DATA XREF: _strtold↑r
.got:000000000020BF70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020BF78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020BF80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020BF88 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020BF90 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020BF98 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020BF98                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020BFA0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020BFA8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020BFB0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020BFB0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020BFB8 iconv_open_ptr  dq offset iconv_open    ; DATA XREF: _iconv_open↑r
.got:000000000020BFC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020BFC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020BFC8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020BFC8                                         ; DATA XREF: start+24↑r
.got:000000000020BFD0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020BFD0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020BFD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020BFD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020BFE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020BFE0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020BFE0                                         ; __do_global_dtors_aux+9↑r
.got:000000000020BFE0 _got            ends
.got:000000000020BFE0
LOAD:000000000020BFE8 ; ===========================================================================
LOAD:000000000020BFE8
LOAD:000000000020BFE8 ; Segment type: Pure data
LOAD:000000000020BFE8 ; Segment permissions: Read/Write
LOAD:000000000020BFE8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020BFE8                 assume cs:LOAD
LOAD:000000000020BFE8                 ;org 20BFE8h
LOAD:000000000020BFE8                 align 20h
LOAD:000000000020BFE8 LOAD            ends
LOAD:000000000020BFE8
.data:000000000020C000 ; ===========================================================================
.data:000000000020C000
.data:000000000020C000 ; Segment type: Pure data
.data:000000000020C000 ; Segment permissions: Read/Write
.data:000000000020C000 _data           segment align_32 public 'DATA' use64
.data:000000000020C000                 assume cs:_data
.data:000000000020C000                 ;org 20C000h
.data:000000000020C000                 public __data_start ; weak
.data:000000000020C000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020C000                                         ; data_start
.data:000000000020C001                 db    0
.data:000000000020C002                 db    0
.data:000000000020C003                 db    0
.data:000000000020C004                 db    0
.data:000000000020C005                 db    0
.data:000000000020C006                 db    0
.data:000000000020C007                 db    0
.data:000000000020C008                 public __dso_handle
.data:000000000020C008 ; void *_dso_handle
.data:000000000020C008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020C008                                         ; atexit↑r ...
.data:000000000020C010                 public Version
.data:000000000020C010 Version         dq offset a831          ; DATA XREF: main:loc_1ED2↑r
.data:000000000020C010                                         ; "8.31"
.data:000000000020C018                 public exit_failure
.data:000000000020C018 ; int exit_failure
.data:000000000020C018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3202↑r
.data:000000000020C018                                         ; xalloc_die+17↑r ...
.data:000000000020C01C                 align 20h
.data:000000000020C020                 public quote_quoting_options
.data:000000000020C020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020C020                                         ; quote_mem↑o ...
.data:000000000020C021                 db    0
.data:000000000020C022                 db    0
.data:000000000020C023                 db    0
.data:000000000020C024                 db    0
.data:000000000020C025                 db    0
.data:000000000020C026                 db    0
.data:000000000020C027                 db    0
.data:000000000020C028                 db    0
.data:000000000020C029                 db    0
.data:000000000020C02A                 db    0
.data:000000000020C02B                 db    0
.data:000000000020C02C                 db    0
.data:000000000020C02D                 db    0
.data:000000000020C02E                 db    0
.data:000000000020C02F                 db    0
.data:000000000020C030                 db    0
.data:000000000020C031                 db    0
.data:000000000020C032                 db    0
.data:000000000020C033                 db    0
.data:000000000020C034                 db    0
.data:000000000020C035                 db    0
.data:000000000020C036                 db    0
.data:000000000020C037                 db    0
.data:000000000020C038                 db    0
.data:000000000020C039                 db    0
.data:000000000020C03A                 db    0
.data:000000000020C03B                 db    0
.data:000000000020C03C                 db    0
.data:000000000020C03D                 db    0
.data:000000000020C03E                 db    0
.data:000000000020C03F                 db    0
.data:000000000020C040                 db    0
.data:000000000020C041                 db    0
.data:000000000020C042                 db    0
.data:000000000020C043                 db    0
.data:000000000020C044                 db    0
.data:000000000020C045                 db    0
.data:000000000020C046                 db    0
.data:000000000020C047                 db    0
.data:000000000020C048                 db    0
.data:000000000020C049                 db    0
.data:000000000020C04A                 db    0
.data:000000000020C04B                 db    0
.data:000000000020C04C                 db    0
.data:000000000020C04D                 db    0
.data:000000000020C04E                 db    0
.data:000000000020C04F                 db    0
.data:000000000020C050                 db    0
.data:000000000020C051                 db    0
.data:000000000020C052                 db    0
.data:000000000020C053                 db    0
.data:000000000020C054                 db    0
.data:000000000020C055                 db    0
.data:000000000020C056                 db    0
.data:000000000020C057                 db    0
.data:000000000020C058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020C058                                         ; quotearg_n_options:loc_467D↑r ...
.data:000000000020C05C                 align 20h
.data:000000000020C060 ; void *slotvec
.data:000000000020C060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020C060                                         ; quotearg_n_options+76↑w ...
.data:000000000020C068                 align 10h
.data:000000000020C070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020C070                                         ; quotearg_n_options+187↑r ...
.data:000000000020C078 off_20C078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020C078 _data           ends
.data:000000000020C078
.bss:000000000020C080 ; ===========================================================================
.bss:000000000020C080
.bss:000000000020C080 ; Segment type: Uninitialized
.bss:000000000020C080 ; Segment permissions: Read/Write
.bss:000000000020C080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020C080                 assume cs:_bss
.bss:000000000020C080                 ;org 20C080h
.bss:000000000020C080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020C080                 public __bss_start ; weak
.bss:000000000020C080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000860↑o
.bss:000000000020C080                                         ; LOAD:00000000000008A8↑o ...
.bss:000000000020C080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020C080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020C080                                         ; _edata
.bss:000000000020C080                                         ; Copy of shared data
.bss:000000000020C088                 public stdout@@GLIBC_2_2_5
.bss:000000000020C088 ; FILE *stdout
.bss:000000000020C088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000848↑o
.bss:000000000020C088                                         ; main+140↑r ...
.bss:000000000020C088                                         ; Alternative name is 'stdout'
.bss:000000000020C088                                         ; Copy of shared data
.bss:000000000020C090                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020C090 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020C090                                         ; DATA XREF: LOAD:0000000000000878↑o
.bss:000000000020C090                                         ; LOAD:0000000000000890↑o ...
.bss:000000000020C090                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020C090                                         ; Copy of shared data
.bss:000000000020C098                 align 20h
.bss:000000000020C0A0                 public stderr@@GLIBC_2_2_5
.bss:000000000020C0A0 ; FILE *stderr
.bss:000000000020C0A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008C0↑o
.bss:000000000020C0A0                                         ; usage+3D↑r ...
.bss:000000000020C0A0                                         ; Alternative name is 'stderr'
.bss:000000000020C0A0                                         ; Copy of shared data
.bss:000000000020C0A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020C0A8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020C0A9                 align 4
.bss:000000000020C0AC posixly_correct db ?                    ; DATA XREF: main+86↑w
.bss:000000000020C0AC                                         ; main+8A7↑r ...
.bss:000000000020C0AD                 align 10h
.bss:000000000020C0B0 exit_status     dd ?                    ; DATA XREF: main+74↑w
.bss:000000000020C0B0                                         ; main:loc_1937↑r ...
.bss:000000000020C0B4                 align 8
.bss:000000000020C0B8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020C0B8                                         ; close_stdout+1B↑r
.bss:000000000020C0B9                 align 20h
.bss:000000000020C0C0 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020C0C0                                         ; close_stdout+56↑r
.bss:000000000020C0C8                 public program_name
.bss:000000000020C0C8 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020C0C8                                         ; set_program_name:loc_329D↑w
.bss:000000000020C0D0                 align 20h
.bss:000000000020C0E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020C0E0                                         ; quotearg_free+46↑o ...
.bss:000000000020C0E1                 db    ? ;
.bss:000000000020C0E2                 db    ? ;
.bss:000000000020C0E3                 db    ? ;
.bss:000000000020C0E4                 db    ? ;
.bss:000000000020C0E5                 db    ? ;
.bss:000000000020C0E6                 db    ? ;
.bss:000000000020C0E7                 db    ? ;
.bss:000000000020C0E8                 db    ? ;
.bss:000000000020C0E9                 db    ? ;
.bss:000000000020C0EA                 db    ? ;
.bss:000000000020C0EB                 db    ? ;
.bss:000000000020C0EC                 db    ? ;
.bss:000000000020C0ED                 db    ? ;
.bss:000000000020C0EE                 db    ? ;
.bss:000000000020C0EF                 db    ? ;
.bss:000000000020C0F0                 db    ? ;
.bss:000000000020C0F1                 db    ? ;
.bss:000000000020C0F2                 db    ? ;
.bss:000000000020C0F3                 db    ? ;
.bss:000000000020C0F4                 db    ? ;
.bss:000000000020C0F5                 db    ? ;
.bss:000000000020C0F6                 db    ? ;
.bss:000000000020C0F7                 db    ? ;
.bss:000000000020C0F8                 db    ? ;
.bss:000000000020C0F9                 db    ? ;
.bss:000000000020C0FA                 db    ? ;
.bss:000000000020C0FB                 db    ? ;
.bss:000000000020C0FC                 db    ? ;
.bss:000000000020C0FD                 db    ? ;
.bss:000000000020C0FE                 db    ? ;
.bss:000000000020C0FF                 db    ? ;
.bss:000000000020C100                 db    ? ;
.bss:000000000020C101                 db    ? ;
.bss:000000000020C102                 db    ? ;
.bss:000000000020C103                 db    ? ;
.bss:000000000020C104                 db    ? ;
.bss:000000000020C105                 db    ? ;
.bss:000000000020C106                 db    ? ;
.bss:000000000020C107                 db    ? ;
.bss:000000000020C108                 db    ? ;
.bss:000000000020C109                 db    ? ;
.bss:000000000020C10A                 db    ? ;
.bss:000000000020C10B                 db    ? ;
.bss:000000000020C10C                 db    ? ;
.bss:000000000020C10D                 db    ? ;
.bss:000000000020C10E                 db    ? ;
.bss:000000000020C10F                 db    ? ;
.bss:000000000020C110                 db    ? ;
.bss:000000000020C111                 db    ? ;
.bss:000000000020C112                 db    ? ;
.bss:000000000020C113                 db    ? ;
.bss:000000000020C114                 db    ? ;
.bss:000000000020C115                 db    ? ;
.bss:000000000020C116                 db    ? ;
.bss:000000000020C117                 db    ? ;
.bss:000000000020C118                 db    ? ;
.bss:000000000020C119                 db    ? ;
.bss:000000000020C11A                 db    ? ;
.bss:000000000020C11B                 db    ? ;
.bss:000000000020C11C                 db    ? ;
.bss:000000000020C11D                 db    ? ;
.bss:000000000020C11E                 db    ? ;
.bss:000000000020C11F                 db    ? ;
.bss:000000000020C120                 db    ? ;
.bss:000000000020C121                 db    ? ;
.bss:000000000020C122                 db    ? ;
.bss:000000000020C123                 db    ? ;
.bss:000000000020C124                 db    ? ;
.bss:000000000020C125                 db    ? ;
.bss:000000000020C126                 db    ? ;
.bss:000000000020C127                 db    ? ;
.bss:000000000020C128                 db    ? ;
.bss:000000000020C129                 db    ? ;
.bss:000000000020C12A                 db    ? ;
.bss:000000000020C12B                 db    ? ;
.bss:000000000020C12C                 db    ? ;
.bss:000000000020C12D                 db    ? ;
.bss:000000000020C12E                 db    ? ;
.bss:000000000020C12F                 db    ? ;
.bss:000000000020C130                 db    ? ;
.bss:000000000020C131                 db    ? ;
.bss:000000000020C132                 db    ? ;
.bss:000000000020C133                 db    ? ;
.bss:000000000020C134                 db    ? ;
.bss:000000000020C135                 db    ? ;
.bss:000000000020C136                 db    ? ;
.bss:000000000020C137                 db    ? ;
.bss:000000000020C138                 db    ? ;
.bss:000000000020C139                 db    ? ;
.bss:000000000020C13A                 db    ? ;
.bss:000000000020C13B                 db    ? ;
.bss:000000000020C13C                 db    ? ;
.bss:000000000020C13D                 db    ? ;
.bss:000000000020C13E                 db    ? ;
.bss:000000000020C13F                 db    ? ;
.bss:000000000020C140                 db    ? ;
.bss:000000000020C141                 db    ? ;
.bss:000000000020C142                 db    ? ;
.bss:000000000020C143                 db    ? ;
.bss:000000000020C144                 db    ? ;
.bss:000000000020C145                 db    ? ;
.bss:000000000020C146                 db    ? ;
.bss:000000000020C147                 db    ? ;
.bss:000000000020C148                 db    ? ;
.bss:000000000020C149                 db    ? ;
.bss:000000000020C14A                 db    ? ;
.bss:000000000020C14B                 db    ? ;
.bss:000000000020C14C                 db    ? ;
.bss:000000000020C14D                 db    ? ;
.bss:000000000020C14E                 db    ? ;
.bss:000000000020C14F                 db    ? ;
.bss:000000000020C150                 db    ? ;
.bss:000000000020C151                 db    ? ;
.bss:000000000020C152                 db    ? ;
.bss:000000000020C153                 db    ? ;
.bss:000000000020C154                 db    ? ;
.bss:000000000020C155                 db    ? ;
.bss:000000000020C156                 db    ? ;
.bss:000000000020C157                 db    ? ;
.bss:000000000020C158                 db    ? ;
.bss:000000000020C159                 db    ? ;
.bss:000000000020C15A                 db    ? ;
.bss:000000000020C15B                 db    ? ;
.bss:000000000020C15C                 db    ? ;
.bss:000000000020C15D                 db    ? ;
.bss:000000000020C15E                 db    ? ;
.bss:000000000020C15F                 db    ? ;
.bss:000000000020C160                 db    ? ;
.bss:000000000020C161                 db    ? ;
.bss:000000000020C162                 db    ? ;
.bss:000000000020C163                 db    ? ;
.bss:000000000020C164                 db    ? ;
.bss:000000000020C165                 db    ? ;
.bss:000000000020C166                 db    ? ;
.bss:000000000020C167                 db    ? ;
.bss:000000000020C168                 db    ? ;
.bss:000000000020C169                 db    ? ;
.bss:000000000020C16A                 db    ? ;
.bss:000000000020C16B                 db    ? ;
.bss:000000000020C16C                 db    ? ;
.bss:000000000020C16D                 db    ? ;
.bss:000000000020C16E                 db    ? ;
.bss:000000000020C16F                 db    ? ;
.bss:000000000020C170                 db    ? ;
.bss:000000000020C171                 db    ? ;
.bss:000000000020C172                 db    ? ;
.bss:000000000020C173                 db    ? ;
.bss:000000000020C174                 db    ? ;
.bss:000000000020C175                 db    ? ;
.bss:000000000020C176                 db    ? ;
.bss:000000000020C177                 db    ? ;
.bss:000000000020C178                 db    ? ;
.bss:000000000020C179                 db    ? ;
.bss:000000000020C17A                 db    ? ;
.bss:000000000020C17B                 db    ? ;
.bss:000000000020C17C                 db    ? ;
.bss:000000000020C17D                 db    ? ;
.bss:000000000020C17E                 db    ? ;
.bss:000000000020C17F                 db    ? ;
.bss:000000000020C180                 db    ? ;
.bss:000000000020C181                 db    ? ;
.bss:000000000020C182                 db    ? ;
.bss:000000000020C183                 db    ? ;
.bss:000000000020C184                 db    ? ;
.bss:000000000020C185                 db    ? ;
.bss:000000000020C186                 db    ? ;
.bss:000000000020C187                 db    ? ;
.bss:000000000020C188                 db    ? ;
.bss:000000000020C189                 db    ? ;
.bss:000000000020C18A                 db    ? ;
.bss:000000000020C18B                 db    ? ;
.bss:000000000020C18C                 db    ? ;
.bss:000000000020C18D                 db    ? ;
.bss:000000000020C18E                 db    ? ;
.bss:000000000020C18F                 db    ? ;
.bss:000000000020C190                 db    ? ;
.bss:000000000020C191                 db    ? ;
.bss:000000000020C192                 db    ? ;
.bss:000000000020C193                 db    ? ;
.bss:000000000020C194                 db    ? ;
.bss:000000000020C195                 db    ? ;
.bss:000000000020C196                 db    ? ;
.bss:000000000020C197                 db    ? ;
.bss:000000000020C198                 db    ? ;
.bss:000000000020C199                 db    ? ;
.bss:000000000020C19A                 db    ? ;
.bss:000000000020C19B                 db    ? ;
.bss:000000000020C19C                 db    ? ;
.bss:000000000020C19D                 db    ? ;
.bss:000000000020C19E                 db    ? ;
.bss:000000000020C19F                 db    ? ;
.bss:000000000020C1A0                 db    ? ;
.bss:000000000020C1A1                 db    ? ;
.bss:000000000020C1A2                 db    ? ;
.bss:000000000020C1A3                 db    ? ;
.bss:000000000020C1A4                 db    ? ;
.bss:000000000020C1A5                 db    ? ;
.bss:000000000020C1A6                 db    ? ;
.bss:000000000020C1A7                 db    ? ;
.bss:000000000020C1A8                 db    ? ;
.bss:000000000020C1A9                 db    ? ;
.bss:000000000020C1AA                 db    ? ;
.bss:000000000020C1AB                 db    ? ;
.bss:000000000020C1AC                 db    ? ;
.bss:000000000020C1AD                 db    ? ;
.bss:000000000020C1AE                 db    ? ;
.bss:000000000020C1AF                 db    ? ;
.bss:000000000020C1B0                 db    ? ;
.bss:000000000020C1B1                 db    ? ;
.bss:000000000020C1B2                 db    ? ;
.bss:000000000020C1B3                 db    ? ;
.bss:000000000020C1B4                 db    ? ;
.bss:000000000020C1B5                 db    ? ;
.bss:000000000020C1B6                 db    ? ;
.bss:000000000020C1B7                 db    ? ;
.bss:000000000020C1B8                 db    ? ;
.bss:000000000020C1B9                 db    ? ;
.bss:000000000020C1BA                 db    ? ;
.bss:000000000020C1BB                 db    ? ;
.bss:000000000020C1BC                 db    ? ;
.bss:000000000020C1BD                 db    ? ;
.bss:000000000020C1BE                 db    ? ;
.bss:000000000020C1BF                 db    ? ;
.bss:000000000020C1C0                 db    ? ;
.bss:000000000020C1C1                 db    ? ;
.bss:000000000020C1C2                 db    ? ;
.bss:000000000020C1C3                 db    ? ;
.bss:000000000020C1C4                 db    ? ;
.bss:000000000020C1C5                 db    ? ;
.bss:000000000020C1C6                 db    ? ;
.bss:000000000020C1C7                 db    ? ;
.bss:000000000020C1C8                 db    ? ;
.bss:000000000020C1C9                 db    ? ;
.bss:000000000020C1CA                 db    ? ;
.bss:000000000020C1CB                 db    ? ;
.bss:000000000020C1CC                 db    ? ;
.bss:000000000020C1CD                 db    ? ;
.bss:000000000020C1CE                 db    ? ;
.bss:000000000020C1CF                 db    ? ;
.bss:000000000020C1D0                 db    ? ;
.bss:000000000020C1D1                 db    ? ;
.bss:000000000020C1D2                 db    ? ;
.bss:000000000020C1D3                 db    ? ;
.bss:000000000020C1D4                 db    ? ;
.bss:000000000020C1D5                 db    ? ;
.bss:000000000020C1D6                 db    ? ;
.bss:000000000020C1D7                 db    ? ;
.bss:000000000020C1D8                 db    ? ;
.bss:000000000020C1D9                 db    ? ;
.bss:000000000020C1DA                 db    ? ;
.bss:000000000020C1DB                 db    ? ;
.bss:000000000020C1DC                 db    ? ;
.bss:000000000020C1DD                 db    ? ;
.bss:000000000020C1DE                 db    ? ;
.bss:000000000020C1DF                 db    ? ;
.bss:000000000020C1E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020C1E0                                         ; get_quoting_style↑o ...
.bss:000000000020C1F0 xmmword_20C1F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020C1F0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020C200 xmmword_20C200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020C200                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020C210 qword_20C210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020C210                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020C218 ; iconv_t utf8_to_local_4447
.bss:000000000020C218 utf8_to_local_4447 dq ?                 ; DATA XREF: unicode_to_mb+41↑r
.bss:000000000020C218                                         ; unicode_to_mb+13F↑w ...
.bss:000000000020C220 is_utf8_4446    dd ?                    ; DATA XREF: unicode_to_mb+37↑r
.bss:000000000020C220                                         ; unicode_to_mb+109↑w ...
.bss:000000000020C224 initialized_4445 dd ?                   ; DATA XREF: unicode_to_mb+29↑r
.bss:000000000020C224                                         ; unicode_to_mb:loc_5171↑w
.bss:000000000020C228 ; __locale_t c_locale_cache
.bss:000000000020C228 c_locale_cache  dq ?                    ; DATA XREF: c_strtold+E↑r
.bss:000000000020C228                                         ; c_strtold:loc_600A↑r ...
.bss:000000000020C228 _bss            ends
.bss:000000000020C228
.prgend:000000000020C230 ; ===========================================================================
.prgend:000000000020C230
.prgend:000000000020C230 ; Segment type: Zero-length
.prgend:000000000020C230 _prgend         segment byte public '' use64
.prgend:000000000020C230 _end            label byte
.prgend:000000000020C230 _prgend         ends
.prgend:000000000020C230
extern:000000000020C238 ; ===========================================================================
extern:000000000020C238
extern:000000000020C238 ; Segment type: Externs
extern:000000000020C238 ; extern
extern:000000000020C238 ; char *getenv(const char *name)
extern:000000000020C238                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000020C238                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000020C240                 extrn __snprintf_chk:near
extern:000000000020C240                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000020C240                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000020C248 ; void free(void *ptr)
extern:000000000020C248                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020C248                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020C250 ; void __noreturn abort(void)
extern:000000000020C250                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020C250                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020C258 ; int *_errno_location(void)
extern:000000000020C258                 extrn __errno_location:near
extern:000000000020C258                                         ; CODE XREF: ___errno_location↑j
extern:000000000020C258                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020C260 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020C260                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020C260                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020C268 ; void __noreturn exit(int status)
extern:000000000020C268                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020C268                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020C270 ; size_t _fpending(FILE *fp)
extern:000000000020C270                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020C270                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020C278 ; size_t iconv(iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)
extern:000000000020C278                 extrn iconv:near        ; CODE XREF: _iconv↑j
extern:000000000020C278                                         ; DATA XREF: .got:iconv_ptr↑o
extern:000000000020C280 ; int ferror(FILE *stream)
extern:000000000020C280                 extrn ferror:near       ; CODE XREF: _ferror↑j
extern:000000000020C280                                         ; DATA XREF: .got:ferror_ptr↑o
extern:000000000020C288 ; char *textdomain(const char *domainname)
extern:000000000020C288                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020C288                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020C290 ; __int64 _strtol_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000020C290                 extrn __strtol_internal:near
extern:000000000020C290                                         ; CODE XREF: ___strtol_internal↑j
extern:000000000020C290                                         ; DATA XREF: .got:__strtol_internal_ptr↑o
extern:000000000020C298 ; int fclose(FILE *stream)
extern:000000000020C298                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020C298                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020C2A0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020C2A0                 extrn bindtextdomain:near
extern:000000000020C2A0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020C2A0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020C2A8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020C2A8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020C2A8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020C2B0 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020C2B0                 extrn __ctype_get_mb_cur_max:near
extern:000000000020C2B0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020C2B0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020C2B8 ; size_t strlen(const char *s)
extern:000000000020C2B8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020C2B8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020C2C0                 extrn __stack_chk_fail:near
extern:000000000020C2C0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020C2C0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020C2C8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020C2C8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020C2C8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020C2D0 ; char *strchr(const char *s, int c)
extern:000000000020C2D0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020C2D0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020C2D8 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
extern:000000000020C2D8                 extrn newlocale:near    ; CODE XREF: _newlocale↑j
extern:000000000020C2D8                                         ; DATA XREF: .got:newlocale_ptr↑o
extern:000000000020C2E0 ; int _overflow(_IO_FILE *, int)
extern:000000000020C2E0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020C2E0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020C2E8 ; char *strrchr(const char *s, int c)
extern:000000000020C2E8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020C2E8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020C2F0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020C2F0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020C2F0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020C2F8 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000020C2F8                 extrn __strtoul_internal:near
extern:000000000020C2F8                                         ; CODE XREF: ___strtoul_internal↑j
extern:000000000020C2F8                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:000000000020C300 ; void *memset(void *s, int c, size_t n)
extern:000000000020C300                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020C300                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020C308 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020C308                 extrn __libc_start_main:near
extern:000000000020C308                                         ; CODE XREF: start+24↑p
extern:000000000020C308                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020C310 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020C310                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020C310                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020C318 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020C318                 extrn fputs_unlocked:near
extern:000000000020C318                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020C318                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020C320 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020C320                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020C320                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020C328 ; int strcmp(const char *s1, const char *s2)
extern:000000000020C328                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020C328                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020C330 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020C330                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020C330                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020C338 ; int fileno(FILE *stream)
extern:000000000020C338                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020C338                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020C340 ; __locale_t uselocale(__locale_t dataset)
extern:000000000020C340                 extrn uselocale:near    ; CODE XREF: _uselocale↑j
extern:000000000020C340                                         ; DATA XREF: .got:uselocale_ptr↑o
extern:000000000020C348 ; void *malloc(size_t size)
extern:000000000020C348                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020C348                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020C350 ; int fflush(FILE *stream)
extern:000000000020C350                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020C350                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020C358 ; char *nl_langinfo(nl_item item)
extern:000000000020C358                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020C358                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020C360 ; int _freading(FILE *fp)
extern:000000000020C360                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020C360                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020C368 ; void *realloc(void *ptr, size_t size)
extern:000000000020C368                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020C368                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020C370 ; char *setlocale(int category, const char *locale)
extern:000000000020C370                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020C370                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020C378                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020C378                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020C380 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000020C380                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000020C380                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000020C388 ; long double strtold(const char *nptr, char **endptr)
extern:000000000020C388                 extrn strtold:near      ; CODE XREF: _strtold↑j
extern:000000000020C388                                         ; DATA XREF: .got:strtold_ptr↑o
extern:000000000020C390 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020C390                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020C390                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020C398 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020C398                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020C398                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020C3A0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020C3A0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020C3A0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020C3A8 ; void __noreturn exit(int status)
extern:000000000020C3A8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020C3A8                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020C3B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020C3B0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020C3B0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020C3B8                 extrn __fprintf_chk:near
extern:000000000020C3B8                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020C3B8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020C3C0 ; int mbsinit(const mbstate_t *ps)
extern:000000000020C3C0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020C3C0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020C3C8 ; int iswprint(wint_t wc)
extern:000000000020C3C8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020C3C8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020C3D0 ; int __fastcall __cxa_finalize(void *)
extern:000000000020C3D0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020C3D0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020C3D0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020C3D8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020C3D8                 extrn __ctype_b_loc:near
extern:000000000020C3D8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020C3D8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020C3E0 ; iconv_t iconv_open(const char *tocode, const char *fromcode)
extern:000000000020C3E0                 extrn iconv_open:near   ; CODE XREF: _iconv_open↑j
extern:000000000020C3E0                                         ; DATA XREF: .got:iconv_open_ptr↑o
extern:000000000020C3E8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020C3E8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020C3F0                 extrn __gmon_start__:near ; weak
extern:000000000020C3F0                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020C3F0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020C3F8                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020C3F8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020C3F8
extern:000000000020C3F8
extern:000000000020C3F8                 end start
