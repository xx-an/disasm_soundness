LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 75AB0842E9C99096A6BB74D74232BB4A8EACBE61433BE1E594578FC351667764
LOAD:0000000000000000 ; Input MD5    : 225EF2EB7BC1F3A05160E398141028E8
LOAD:0000000000000000 ; Input CRC32  : B3A33D09
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/tac
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'tac.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'filenamecat-lgpl.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'safe-read.c'
LOAD:0000000000000000 ; Source File : 'mkstemp-safer.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'regex.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'fd-safer-flag.c'
LOAD:0000000000000000 ; Source File : 'dup-safer-flag.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 79F78h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 17FF0h               ; Size in file image
LOAD:00000000000000D8                 dq 17FF0h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 18A70h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 218A70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 610h                 ; Size in file image
LOAD:0000000000000110                 dq 2998h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 18BB8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 218BB8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 157A0h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 157A0h               ; Physical address
LOAD:00000000000001B0                 dq 57Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 57Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 18A70h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 218A70h              ; Physical address
LOAD:0000000000000220                 dq 590h                 ; Size in file image
LOAD:0000000000000228                 dq 590h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 63h, 83h, 0A9h, 0EBh, 67h, 0B7h, 2Ch, 9Dh, 63h, 7Dh ; Desc
LOAD:0000000000000284                 db 51h, 0CCh, 0B3h, 0F9h, 5Eh, 15h, 23h, 0D9h, 22h, 0E1h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 48h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 48h, 49h, 4Eh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_A60, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aGetenv - offset byte_A60, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_A60, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_A60, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_A60, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aUnlink - offset byte_A60, 12h, 0, 0, \ ; "unlink"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrncmp - offset byte_A60, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aItmDeregistert - offset byte_A60, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aExit - offset byte_A60, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFpending - offset byte_A60, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aIsatty - offset byte_A60, 12h, 0, 0, \ ; "isatty"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFcntl - offset byte_A60, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000400                            0>
LOAD:0000000000000418                 Elf64_Sym <offset aClearerrUnlock - offset byte_A60, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_A60, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aIswctype - offset byte_A60, 12h, 0, 0, \ ; "iswctype"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aFclose - offset byte_A60, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aBindtextdomain - offset byte_A60, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aDcgettext - offset byte_A60, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_A60, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrlen - offset byte_A60, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStackChkFail - offset byte_A60, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aGetoptLong - offset byte_A60, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMbrtowc - offset byte_A60, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrrchr - offset byte_A60, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aFtruncate - offset byte_A60, 12h, 0, 0, \ ; "ftruncate"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMkostemp - offset byte_A60, 12h, 0, 0, \ ; "mkostemp"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLseek - offset byte_A60, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000568                            0>
LOAD:0000000000000580                 Elf64_Sym <offset aAssertFail - offset byte_A60, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMemset - offset byte_A60, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aFclose+1 - offset byte_A60, 12h, 0, 0, \ ; "close"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aRead - offset byte_A60, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:00000000000005C8                            0>
LOAD:00000000000005E0                 Elf64_Sym <offset aLibcStartMain - offset byte_A60, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemcmp - offset byte_A60, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aIswctype+2 - offset byte_A60, 12h, 0, 0, \ ; "wctype"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFputsUnlocked - offset byte_A60, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aCalloc - offset byte_A60, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aStrcmp - offset byte_A60, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aGmonStart - offset byte_A60, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMemcpy - offset byte_A60, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFileno - offset byte_A60, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aIswalnum - offset byte_A60, 12h, 0, 0, \ ; "iswalnum"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aMalloc - offset byte_A60, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aWcrtomb - offset byte_A60, 12h, 0, 0, \ ; "wcrtomb"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFflush - offset byte_A60, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aNlLanginfo - offset byte_A60, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aMkstemp - offset byte_A60, 12h, 0, 0, \ ; "mkstemp"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFreading - offset byte_A60, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFwriteUnlocked - offset byte_A60, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aRealloc - offset byte_A60, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFdopen - offset byte_A60, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aSetlocale - offset byte_A60, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aPrintfChk - offset byte_A60, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aBtowc - offset byte_A60, 12h, 0, 0, offset dword_0,\ ; "btowc"
LOAD:00000000000007D8                            0>
LOAD:00000000000007F0                 Elf64_Sym <offset aMempcpy - offset byte_A60, 12h, 0, 0, \ ; "mempcpy"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aMemmove - offset byte_A60, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aError - offset byte_A60, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000820                            0>
LOAD:0000000000000838                 Elf64_Sym <offset aFdopen+2 - offset byte_A60, 12h, 0, 0, \ ; "open"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aFseeko - offset byte_A60, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aTowlower - offset byte_A60, 12h, 0, 0, \ ; "towlower"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aTowupper - offset byte_A60, 12h, 0, 0, \ ; "towupper"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aCxaAtexit - offset byte_A60, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aExit+1 - offset byte_A60, 12h, 0, 0, \ ; "exit"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aFwrite - offset byte_A60, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aFprintfChk - offset byte_A60, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aItmRegistertmc - offset byte_A60, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aFflushUnlocked - offset byte_A60, 12h, 0, 0, \ ; "fflush_unlocked"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aMbsinit - offset byte_A60, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aIswprint - offset byte_A60, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aCxaFinalize - offset byte_A60, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_A60, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aCtypeBLoc - offset byte_A60, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aStdout - offset byte_A60, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000009A0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000009B8                 Elf64_Sym <offset aProgname - offset byte_A60, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000009B8                            offset __bss_start, 8>
LOAD:00000000000009D0                 Elf64_Sym <offset aProgramInvocat - offset byte_A60, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000009D0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000009E8                 Elf64_Sym <offset aPrognameFull - offset byte_A60, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000009E8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A00                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_A60, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A00                            offset __bss_start, 8>
LOAD:0000000000000A18                 Elf64_Sym <offset aStderr - offset byte_A60, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A18                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aOptind - offset byte_A60, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A30                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000A48                 Elf64_Sym <offset aOptarg - offset byte_A60, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000A48                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000A60 ; ELF String Table
LOAD:0000000000000A60 byte_A60        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A60                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000A61 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000E80↓o
LOAD:0000000000000A6B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000A72 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A7F aClearerrUnlock db 'clearerr_unlocked',0
LOAD:0000000000000A7F                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000A91 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000A9B aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000AA3 aTowlower       db 'towlower',0         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000AAC aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000AB4 aFtruncate      db 'ftruncate',0        ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000ABE aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000AC5 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000ACD aFflushUnlocked db 'fflush_unlocked',0  ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000ADD aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000AE7 aWcrtomb        db 'wcrtomb',0          ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000AEF aError          db 'error',0            ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000AF5 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000B06 aUnlink         db 'unlink',0           ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B0D aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000B16 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B1E aBtowc          db 'btowc',0            ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000B24 aTowupper       db 'towupper',0         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B2D aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000B33 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000B33                                         ; LOAD:00000000000008B0↑o
LOAD:0000000000000B39 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000B39                                         ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000B51 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B5F aIswalnum       db 'iswalnum',0         ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000B68 aMkstemp        db 'mkstemp',0          ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000B70 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000B70                                         ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B87 aIsatty         db 'isatty',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000B8E aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000B95 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B9C aIswctype       db 'iswctype',0         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000B9C                                         ; LOAD:0000000000000610↑o
LOAD:0000000000000BA5 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000BAC aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000BBD aRead           db 'read',0             ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000BC2 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000BC9 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000BD1 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000BDF aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000BE6 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000BEC aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000BF3 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000BF3                                         ; LOAD:00000000000005B0↑o
LOAD:0000000000000BFA aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000C01 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000C09 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000C15 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000C23 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000C2A aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000C31 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000C3C aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000C43 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000C4F aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000C56 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000C5D aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000C68 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000C68                                         ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000C86 aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000C86                                         ; LOAD:0000000000000838↑o
LOAD:0000000000000C8D aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000C8D                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000CA1 aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000CA1                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000CB5 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000CC4 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000CCA aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000CD2 aMkostemp       db 'mkostemp',0         ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000CDB aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000CDB                                         ; LOAD:0000000000000430↑o
LOAD:0000000000000CEA aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000CFA aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000D01 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000D01                                         ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000D13 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000D1A aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000D29 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000D2E aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000D39 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000D49 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000D56 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000E90↓o
LOAD:0000000000000D62 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000EA0↓o
LOAD:0000000000000D6D aGlibc27        db 'GLIBC_2.7',0        ; DATA XREF: LOAD:0000000000000EB0↓o
LOAD:0000000000000D77 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000EC0↓o
LOAD:0000000000000D81 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000ED0↓o
LOAD:0000000000000D8D aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000EE0↓o
LOAD:0000000000000D97 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000D97                                         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000DB3 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000DC2 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000DC2                                         ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000DDC ; ELF GNU Symbol Version Table
LOAD:0000000000000DDC                 dw 0
LOAD:0000000000000DDE                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000DE0                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000DE2                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000DE4                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000DE6                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000DE8                 dw 3                    ; unlink@@GLIBC_2.2.5
LOAD:0000000000000DEA                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000DEC                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000DEE                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000DF0                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000DF2                 dw 3                    ; isatty@@GLIBC_2.2.5
LOAD:0000000000000DF4                 dw 3                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000DF6                 dw 3                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000DF8                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000DFA                 dw 3                    ; iswctype@@GLIBC_2.2.5
LOAD:0000000000000DFC                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000DFE                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000E00                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000E02                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000E04                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000E06                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000E08                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000E0A                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000E0C                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000E0E                 dw 3                    ; ftruncate@@GLIBC_2.2.5
LOAD:0000000000000E10                 dw 5                    ; mkostemp@@GLIBC_2.7
LOAD:0000000000000E12                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000E14                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000E16                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000E18                 dw 3                    ; close@@GLIBC_2.2.5
LOAD:0000000000000E1A                 dw 3                    ; read@@GLIBC_2.2.5
LOAD:0000000000000E1C                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000E1E                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000E20                 dw 3                    ; wctype@@GLIBC_2.2.5
LOAD:0000000000000E22                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E24                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000E26                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000E28                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000E2A                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000E2C                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000E2E                 dw 3                    ; iswalnum@@GLIBC_2.2.5
LOAD:0000000000000E30                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000E32                 dw 3                    ; wcrtomb@@GLIBC_2.2.5
LOAD:0000000000000E34                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000E36                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000E38                 dw 3                    ; mkstemp@@GLIBC_2.2.5
LOAD:0000000000000E3A                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000E3C                 dw 3                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E3E                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000E40                 dw 3                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000E42                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000E44                 dw 7                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000E46                 dw 3                    ; btowc@@GLIBC_2.2.5
LOAD:0000000000000E48                 dw 3                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000000E4A                 dw 3                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000E4C                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000E4E                 dw 3                    ; open@@GLIBC_2.2.5
LOAD:0000000000000E50                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000E52                 dw 3                    ; towlower@@GLIBC_2.2.5
LOAD:0000000000000E54                 dw 3                    ; towupper@@GLIBC_2.2.5
LOAD:0000000000000E56                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000E58                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000E5A                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000E5C                 dw 7                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E5E                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000E60                 dw 3                    ; fflush_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E62                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000E64                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000E66                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000E68                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000E6A                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000E6C                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000E6E                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000E70                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000E72                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000E74                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000E76                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000E78                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000E7A                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000E7C                 dw 0
LOAD:0000000000000E7E                 dw 0
LOAD:0000000000000E80 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000E80                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_A60, 10h, 0> ; "libc.so.6"
LOAD:0000000000000E90                 Elf64_Vernaux <9691974h, 0, 7, offset aGlibc234 - offset byte_A60, \ ; "GLIBC_2.3.4"
LOAD:0000000000000E90                                10h>
LOAD:0000000000000EA0                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset byte_A60, \ ; "GLIBC_2.14"
LOAD:0000000000000EA0                                10h>
LOAD:0000000000000EB0                 Elf64_Vernaux <0D696917h, 0, 5, offset aGlibc27 - offset byte_A60, \ ; "GLIBC_2.7"
LOAD:0000000000000EB0                                10h>
LOAD:0000000000000EC0                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_A60, \ ; "GLIBC_2.4"
LOAD:0000000000000EC0                                10h>
LOAD:0000000000000ED0                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_A60, \ ; "GLIBC_2.2.5"
LOAD:0000000000000ED0                                10h>
LOAD:0000000000000EE0                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_A60, 0> ; "GLIBC_2.3"
LOAD:0000000000000EF0 ; ELF RELA Relocation Table
LOAD:0000000000000EF0                 Elf64_Rela <218A70h, 8, 2520h> ; R_X86_64_RELATIVE +2520h
LOAD:0000000000000F08                 Elf64_Rela <218A78h, 8, 24E0h> ; R_X86_64_RELATIVE +24E0h
LOAD:0000000000000F20                 Elf64_Rela <218A80h, 8, 146CAh> ; R_X86_64_RELATIVE +146CAh
LOAD:0000000000000F38                 Elf64_Rela <218AA0h, 8, 142E2h> ; R_X86_64_RELATIVE +142E2h
LOAD:0000000000000F50                 Elf64_Rela <218AC0h, 8, 142E9h> ; R_X86_64_RELATIVE +142E9h
LOAD:0000000000000F68                 Elf64_Rela <218AE0h, 8, 142EFh> ; R_X86_64_RELATIVE +142EFh
LOAD:0000000000000F80                 Elf64_Rela <218B00h, 8, 142F9h> ; R_X86_64_RELATIVE +142F9h
LOAD:0000000000000F98                 Elf64_Rela <218B20h, 8, 142FEh> ; R_X86_64_RELATIVE +142FEh
LOAD:0000000000000FB0                 Elf64_Rela <218B60h, 8, 146E1h> ; R_X86_64_RELATIVE +146E1h
LOAD:0000000000000FC8                 Elf64_Rela <218B68h, 8, 146E9h> ; R_X86_64_RELATIVE +146E9h
LOAD:0000000000000FE0                 Elf64_Rela <218B70h, 8, 146EFh> ; R_X86_64_RELATIVE +146EFh
LOAD:0000000000000FF8                 Elf64_Rela <218B78h, 8, 146FCh> ; R_X86_64_RELATIVE +146FCh
LOAD:0000000000001010                 Elf64_Rela <218B80h, 8, 14709h> ; R_X86_64_RELATIVE +14709h
LOAD:0000000000001028                 Elf64_Rela <218B88h, 8, 14176h> ; R_X86_64_RELATIVE +14176h
LOAD:0000000000001040                 Elf64_Rela <218B90h, 8, 1471Dh> ; R_X86_64_RELATIVE +1471Dh
LOAD:0000000000001058                 Elf64_Rela <218B98h, 8, 14702h> ; R_X86_64_RELATIVE +14702h
LOAD:0000000000001070                 Elf64_Rela <218BA0h, 8, 14231h> ; R_X86_64_RELATIVE +14231h
LOAD:0000000000001088                 Elf64_Rela <218BA8h, 8, 14725h> ; R_X86_64_RELATIVE +14725h
LOAD:00000000000010A0                 Elf64_Rela <219008h, 8, 219008h> ; R_X86_64_RELATIVE +219008h
LOAD:00000000000010B8                 Elf64_Rela <219010h, 8, 14677h> ; R_X86_64_RELATIVE +14677h
LOAD:00000000000010D0                 Elf64_Rela <219060h, 8, 219070h> ; R_X86_64_RELATIVE +219070h
LOAD:00000000000010E8                 Elf64_Rela <219078h, 8, 21B2C0h> ; R_X86_64_RELATIVE +21B2C0h
LOAD:0000000000001100                 Elf64_Rela <218FD0h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001118                 Elf64_Rela <218FD8h, 2000000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001130                 Elf64_Rela <218FE0h, 2600000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001148                 Elf64_Rela <218FE8h, 4100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001160                 Elf64_Rela <218FF0h, 4500000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001178                 Elf64_Rela <219080h, 4900000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001190                 Elf64_Rela <219088h, 4800000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000011A8                 Elf64_Rela <219090h, 4E00000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000011C0                 Elf64_Rela <219098h, 4F00000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000011D8                 Elf64_Rela <2190A0h, 4B00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000011F0                 Elf64_Rela <2190C0h, 4D00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001208 ; ELF JMPREL Relocation Table
LOAD:0000000000001208                 Elf64_Rela <218DC0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:0000000000001220                 Elf64_Rela <218DC8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001238                 Elf64_Rela <218DD0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001250                 Elf64_Rela <218DD8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001268                 Elf64_Rela <218DE0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001280                 Elf64_Rela <218DE8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT unlink
LOAD:0000000000001298                 Elf64_Rela <218DF0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000012B0                 Elf64_Rela <218DF8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000012C8                 Elf64_Rela <218E00h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000012E0                 Elf64_Rela <218E08h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:00000000000012F8                 Elf64_Rela <218E10h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001310                 Elf64_Rela <218E18h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:0000000000001328                 Elf64_Rela <218E20h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001340                 Elf64_Rela <218E28h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT iswctype
LOAD:0000000000001358                 Elf64_Rela <218E30h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001370                 Elf64_Rela <218E38h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001388                 Elf64_Rela <218E40h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000013A0                 Elf64_Rela <218E48h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000013B8                 Elf64_Rela <218E50h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000013D0                 Elf64_Rela <218E58h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000013E8                 Elf64_Rela <218E60h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001400                 Elf64_Rela <218E68h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001418                 Elf64_Rela <218E70h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001430                 Elf64_Rela <218E78h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT ftruncate
LOAD:0000000000001448                 Elf64_Rela <218E80h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT mkostemp
LOAD:0000000000001460                 Elf64_Rela <218E88h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001478                 Elf64_Rela <218E90h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001490                 Elf64_Rela <218E98h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000014A8                 Elf64_Rela <218EA0h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000014C0                 Elf64_Rela <218EA8h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:00000000000014D8                 Elf64_Rela <218EB0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000014F0                 Elf64_Rela <218EB8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT wctype
LOAD:0000000000001508                 Elf64_Rela <218EC0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001520                 Elf64_Rela <218EC8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001538                 Elf64_Rela <218ED0h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001550                 Elf64_Rela <218ED8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001568                 Elf64_Rela <218EE0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001580                 Elf64_Rela <218EE8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT iswalnum
LOAD:0000000000001598                 Elf64_Rela <218EF0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000015B0                 Elf64_Rela <218EF8h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT wcrtomb
LOAD:00000000000015C8                 Elf64_Rela <218F00h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000015E0                 Elf64_Rela <218F08h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000015F8                 Elf64_Rela <218F10h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT mkstemp
LOAD:0000000000001610                 Elf64_Rela <218F18h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001628                 Elf64_Rela <218F20h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001640                 Elf64_Rela <218F28h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001658                 Elf64_Rela <218F30h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:0000000000001670                 Elf64_Rela <218F38h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001688                 Elf64_Rela <218F40h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000016A0                 Elf64_Rela <218F48h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT btowc
LOAD:00000000000016B8                 Elf64_Rela <218F50h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:00000000000016D0                 Elf64_Rela <218F58h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:00000000000016E8                 Elf64_Rela <218F60h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001700                 Elf64_Rela <218F68h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001718                 Elf64_Rela <218F70h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001730                 Elf64_Rela <218F78h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT towlower
LOAD:0000000000001748                 Elf64_Rela <218F80h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT towupper
LOAD:0000000000001760                 Elf64_Rela <218F88h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001778                 Elf64_Rela <218F90h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001790                 Elf64_Rela <218F98h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000017A8                 Elf64_Rela <218FA0h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000017C0                 Elf64_Rela <218FA8h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT fflush_unlocked
LOAD:00000000000017D8                 Elf64_Rela <218FB0h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000017F0                 Elf64_Rela <218FB8h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001808                 Elf64_Rela <218FC0h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:0000000000001820                 Elf64_Rela <218FC8h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001820 LOAD            ends
LOAD:0000000000001820
.init:0000000000001838 ; ===========================================================================
.init:0000000000001838
.init:0000000000001838 ; Segment type: Pure code
.init:0000000000001838 ; Segment permissions: Read/Execute
.init:0000000000001838 _init           segment dword public 'CODE' use64
.init:0000000000001838                 assume cs:_init
.init:0000000000001838                 ;org 1838h
.init:0000000000001838                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001838
.init:0000000000001838 ; =============== S U B R O U T I N E =======================================
.init:0000000000001838
.init:0000000000001838
.init:0000000000001838                 public _init_proc
.init:0000000000001838 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001838                 sub     rsp, 8          ; _init
.init:000000000000183C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001843                 test    rax, rax
.init:0000000000001846                 jz      short loc_184A
.init:0000000000001848                 call    rax ; __gmon_start__
.init:000000000000184A
.init:000000000000184A loc_184A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000184A                 add     rsp, 8
.init:000000000000184E                 retn
.init:000000000000184E _init_proc      endp
.init:000000000000184E
.init:000000000000184E _init           ends
.init:000000000000184E
LOAD:000000000000184F ; ===========================================================================
LOAD:000000000000184F
LOAD:000000000000184F ; Segment type: Pure code
LOAD:000000000000184F ; Segment permissions: Read/Execute
LOAD:000000000000184F LOAD            segment byte public 'CODE' use64
LOAD:000000000000184F                 assume cs:LOAD
LOAD:000000000000184F                 ;org 184Fh
LOAD:000000000000184F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000184F                 align 10h
LOAD:000000000000184F LOAD            ends
LOAD:000000000000184F
.plt:0000000000001850 ; ===========================================================================
.plt:0000000000001850
.plt:0000000000001850 ; Segment type: Pure code
.plt:0000000000001850 ; Segment permissions: Read/Execute
.plt:0000000000001850 _plt            segment para public 'CODE' use64
.plt:0000000000001850                 assume cs:_plt
.plt:0000000000001850                 ;org 1850h
.plt:0000000000001850                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850
.plt:0000000000001850 sub_1850        proc near               ; CODE XREF: .plt:000000000000186B↓j
.plt:0000000000001850                                         ; .plt:000000000000187B↓j ...
.plt:0000000000001850 ; __unwind {
.plt:0000000000001850                 push    cs:qword_218DB0
.plt:0000000000001856                 jmp     cs:qword_218DB8
.plt:0000000000001856 sub_1850        endp
.plt:0000000000001856
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:000000000000185C                 align 20h
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000001860 ___ctype_toupper_loc proc near          ; CODE XREF: build_upper_buffer+1D↓p
.plt:0000000000001860                                         ; build_wcs_upper_buffer:loc_6668↓p
.plt:0000000000001860                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000001860 ___ctype_toupper_loc endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    0
.plt:000000000000186B                 jmp     sub_1850
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; char *getenv(const char *name)
.plt:0000000000001870 _getenv         proc near               ; CODE XREF: main+58D↓p
.plt:0000000000001870                 jmp     cs:getenv_ptr
.plt:0000000000001870 _getenv         endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    1
.plt:000000000000187B                 jmp     sub_1850
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; void free(void *ptr)
.plt:0000000000001880 _free           proc near               ; CODE XREF: main+6B6↓p
.plt:0000000000001880                                         ; quotearg_n_options+115↓p ...
.plt:0000000000001880                 jmp     cs:free_ptr
.plt:0000000000001880 _free           endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    2
.plt:000000000000188B                 jmp     sub_1850
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: noreturn thunk
.plt:0000000000001890
.plt:0000000000001890 ; void __noreturn abort(void)
.plt:0000000000001890 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001890                                         ; quotearg_buffer_restyled:def_3381↓p ...
.plt:0000000000001890                 jmp     cs:abort_ptr
.plt:0000000000001890 _abort          endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    3
.plt:000000000000189B                 jmp     sub_1850
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; int *__errno_location(void)
.plt:00000000000018A0 ___errno_location proc near             ; CODE XREF: main+499↓p
.plt:00000000000018A0                                         ; main+4F2↓p ...
.plt:00000000000018A0                 jmp     cs:__errno_location_ptr
.plt:00000000000018A0 ___errno_location endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    4
.plt:00000000000018AB                 jmp     sub_1850
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; int unlink(const char *name)
.plt:00000000000018B0 _unlink         proc near               ; CODE XREF: main+5F3↓p
.plt:00000000000018B0                                         ; main+71A↓p
.plt:00000000000018B0                 jmp     cs:unlink_ptr
.plt:00000000000018B0 _unlink         endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    5
.plt:00000000000018BB                 jmp     sub_1850
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000018C0 _strncmp        proc near               ; CODE XREF: tac_seekable+331↓p
.plt:00000000000018C0                                         ; usage+274↓p ...
.plt:00000000000018C0                 jmp     cs:strncmp_ptr
.plt:00000000000018C0 _strncmp        endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    6
.plt:00000000000018CB                 jmp     sub_1850
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: noreturn thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; void __noreturn _exit(int status)
.plt:00000000000018D0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000018D0                 jmp     cs:_exit_ptr
.plt:00000000000018D0 __exit          endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    7
.plt:00000000000018DB                 jmp     sub_1850
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; size_t __fpending(FILE *fp)
.plt:00000000000018E0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000018E0                 jmp     cs:__fpending_ptr
.plt:00000000000018E0 ___fpending     endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    8
.plt:00000000000018EB                 jmp     sub_1850
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; int isatty(int fd)
.plt:00000000000018F0 _isatty         proc near               ; CODE XREF: main+32B↓p
.plt:00000000000018F0                 jmp     cs:isatty_ptr
.plt:00000000000018F0 _isatty         endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    9
.plt:00000000000018FB                 jmp     sub_1850
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001900 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001900                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001900                 jmp     cs:fcntl_ptr
.plt:0000000000001900 _fcntl          endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    0Ah
.plt:000000000000190B                 jmp     sub_1850
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; void clearerr_unlocked(FILE *stream)
.plt:0000000000001910 _clearerr_unlocked proc near            ; CODE XREF: main+350↓p
.plt:0000000000001910                 jmp     cs:clearerr_unlocked_ptr
.plt:0000000000001910 _clearerr_unlocked endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    0Bh
.plt:000000000000191B                 jmp     sub_1850
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; char *textdomain(const char *domainname)
.plt:0000000000001920 _textdomain     proc near               ; CODE XREF: main+4D↓p
.plt:0000000000001920                 jmp     cs:textdomain_ptr
.plt:0000000000001920 _textdomain     endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    0Ch
.plt:000000000000192B                 jmp     sub_1850
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; int iswctype(wint_t wc, wctype_t desc)
.plt:0000000000001930 _iswctype       proc near               ; CODE XREF: check_node_accept_bytes_isra_31+D9↓p
.plt:0000000000001930                 jmp     cs:iswctype_ptr
.plt:0000000000001930 _iswctype       endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    0Dh
.plt:000000000000193B                 jmp     sub_1850
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; int fclose(FILE *stream)
.plt:0000000000001940 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001940                                         ; rpl_fclose+6B↓j
.plt:0000000000001940                 jmp     cs:fclose_ptr
.plt:0000000000001940 _fclose         endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    0Eh
.plt:000000000000194B                 jmp     sub_1850
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001950 _bindtextdomain proc near               ; CODE XREF: main+41↓p
.plt:0000000000001950                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001950 _bindtextdomain endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    0Fh
.plt:000000000000195B                 jmp     sub_1850
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001960 _dcgettext      proc near               ; CODE XREF: main+30B↓p
.plt:0000000000001960                                         ; main+491↓p ...
.plt:0000000000001960                 jmp     cs:dcgettext_ptr
.plt:0000000000001960 _dcgettext      endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    10h
.plt:000000000000196B                 jmp     sub_1850
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001970 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001970                                         ; re_compile_internal+122↓p
.plt:0000000000001970                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001970 ___ctype_get_mb_cur_max endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    11h
.plt:000000000000197B                 jmp     sub_1850
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; size_t strlen(const char *s)
.plt:0000000000001980 _strlen         proc near               ; CODE XREF: mfile_name_concat+33↓p
.plt:0000000000001980                                         ; quotearg_buffer_restyled+157↓p ...
.plt:0000000000001980                 jmp     cs:strlen_ptr
.plt:0000000000001980 _strlen         endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    12h
.plt:000000000000198B                 jmp     sub_1850
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: noreturn thunk
.plt:0000000000001990
.plt:0000000000001990 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_44E3↓p
.plt:0000000000001990                                         ; quotearg_n_style:loc_4B09↓p ...
.plt:0000000000001990                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001990 ___stack_chk_fail endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    13h
.plt:000000000000199B                 jmp     sub_1850
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000019A0 _getopt_long    proc near               ; CODE XREF: main+90↓p
.plt:00000000000019A0                 jmp     cs:getopt_long_ptr
.plt:00000000000019A0 _getopt_long    endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    14h
.plt:00000000000019AB                 jmp     sub_1850
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000019B0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000019B0                 jmp     cs:mbrtowc_ptr
.plt:00000000000019B0 _mbrtowc        endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    15h
.plt:00000000000019BB                 jmp     sub_1850
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; char *strrchr(const char *s, int c)
.plt:00000000000019C0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000019C0                 jmp     cs:strrchr_ptr
.plt:00000000000019C0 _strrchr        endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    16h
.plt:00000000000019CB                 jmp     sub_1850
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; int ftruncate(int fd, __off_t length)
.plt:00000000000019D0 _ftruncate      proc near               ; CODE XREF: main+379↓p
.plt:00000000000019D0                 jmp     cs:ftruncate_ptr
.plt:00000000000019D0 _ftruncate      endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    17h
.plt:00000000000019DB                 jmp     sub_1850
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; int mkostemp(char *template, int flags)
.plt:00000000000019E0 _mkostemp       proc near               ; CODE XREF: mkostemp_safer+3↓p
.plt:00000000000019E0                 jmp     cs:mkostemp_ptr
.plt:00000000000019E0 _mkostemp       endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    18h
.plt:00000000000019EB                 jmp     sub_1850
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000019F0 _lseek          proc near               ; CODE XREF: main+31C↓p
.plt:00000000000019F0                                         ; tac_seekable+9D↓p ...
.plt:00000000000019F0                 jmp     cs:lseek_ptr
.plt:00000000000019F0 _lseek          endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    19h
.plt:00000000000019FB                 jmp     sub_1850
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: noreturn thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001A00 ___assert_fail  proc near               ; CODE XREF: pop_fail_stack_isra_25+8F↓p
.plt:0000000000001A00                                         ; re_search_internal+1047↓p ...
.plt:0000000000001A00                 jmp     cs:__assert_fail_ptr
.plt:0000000000001A00 ___assert_fail  endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    1Ah
.plt:0000000000001A0B                 jmp     sub_1850
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001A10 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001A10                                         ; xzalloc+12↓j ...
.plt:0000000000001A10                 jmp     cs:memset_ptr
.plt:0000000000001A10 _memset         endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    1Bh
.plt:0000000000001A1B                 jmp     sub_1850
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int close(int fd)
.plt:0000000000001A20 _close          proc near               ; CODE XREF: main+511↓p
.plt:0000000000001A20                                         ; main+613↓p ...
.plt:0000000000001A20                 jmp     cs:close_ptr
.plt:0000000000001A20 _close          endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    1Ch
.plt:0000000000001A2B                 jmp     sub_1850
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:0000000000001A30 _read           proc near               ; CODE XREF: safe_read+21↓p
.plt:0000000000001A30                 jmp     cs:read_ptr
.plt:0000000000001A30 _read           endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    1Dh
.plt:0000000000001A3B                 jmp     sub_1850
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001A40 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001A40                                         ; set_regs+411↓p ...
.plt:0000000000001A40                 jmp     cs:memcmp_ptr
.plt:0000000000001A40 _memcmp         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    1Eh
.plt:0000000000001A4B                 jmp     sub_1850
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; wctype_t wctype(const char *property)
.plt:0000000000001A50 _wctype         proc near               ; CODE XREF: build_charclass_isra_29+67↓p
.plt:0000000000001A50                 jmp     cs:wctype_ptr
.plt:0000000000001A50 _wctype         endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    1Fh
.plt:0000000000001A5B                 jmp     sub_1850
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001A60 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001A60                                         ; usage+C2↓p ...
.plt:0000000000001A60                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001A60 _fputs_unlocked endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    20h ; ' '
.plt:0000000000001A6B                 jmp     sub_1850
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001A70 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001A70                                         ; re_acquire_state_context+CA↓p ...
.plt:0000000000001A70                 jmp     cs:calloc_ptr
.plt:0000000000001A70 _calloc         endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    21h ; '!'
.plt:0000000000001A7B                 jmp     sub_1850
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001A80 _strcmp         proc near               ; CODE XREF: build_charclass_isra_29+5C8↓p
.plt:0000000000001A80                                         ; build_charclass_isra_29+654↓p ...
.plt:0000000000001A80                 jmp     cs:strcmp_ptr
.plt:0000000000001A80 _strcmp         endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    22h ; '"'
.plt:0000000000001A8B                 jmp     sub_1850
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001A90 _memcpy         proc near               ; CODE XREF: main+65A↓p
.plt:0000000000001A90                                         ; output+5B↓p ...
.plt:0000000000001A90                 jmp     cs:memcpy_ptr
.plt:0000000000001A90 _memcpy         endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    23h ; '#'
.plt:0000000000001A9B                 jmp     sub_1850
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; int fileno(FILE *stream)
.plt:0000000000001AA0 _fileno         proc near               ; CODE XREF: main+370↓p
.plt:0000000000001AA0                                         ; main+406↓p ...
.plt:0000000000001AA0                 jmp     cs:fileno_ptr
.plt:0000000000001AA0 _fileno         endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    24h ; '$'
.plt:0000000000001AAB                 jmp     sub_1850
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; int iswalnum(wint_t wc)
.plt:0000000000001AB0 _iswalnum       proc near               ; CODE XREF: re_string_context_at+CA↓p
.plt:0000000000001AB0                                         ; re_string_reconstruct+6FE↓p ...
.plt:0000000000001AB0                 jmp     cs:iswalnum_ptr
.plt:0000000000001AB0 _iswalnum       endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    25h ; '%'
.plt:0000000000001ABB                 jmp     sub_1850
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; void *malloc(size_t size)
.plt:0000000000001AC0 _malloc         proc near               ; CODE XREF: mfile_name_concat+97↓p
.plt:0000000000001AC0                                         ; xmalloc+4↓p ...
.plt:0000000000001AC0                 jmp     cs:malloc_ptr
.plt:0000000000001AC0 _malloc         endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    26h ; '&'
.plt:0000000000001ACB                 jmp     sub_1850
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
.plt:0000000000001AD0 _wcrtomb        proc near               ; CODE XREF: build_wcs_upper_buffer+139↓p
.plt:0000000000001AD0                                         ; build_wcs_upper_buffer+29C↓p ...
.plt:0000000000001AD0                 jmp     cs:wcrtomb_ptr
.plt:0000000000001AD0 _wcrtomb        endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    27h ; '''
.plt:0000000000001ADB                 jmp     sub_1850
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int fflush(FILE *stream)
.plt:0000000000001AE0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001AE0                                         ; rpl_fflush+3B↓j
.plt:0000000000001AE0                 jmp     cs:fflush_ptr
.plt:0000000000001AE0 _fflush         endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    28h ; '('
.plt:0000000000001AEB                 jmp     sub_1850
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; char *nl_langinfo(nl_item item)
.plt:0000000000001AF0 _nl_langinfo    proc near               ; CODE XREF: re_compile_internal+132↓p
.plt:0000000000001AF0                                         ; locale_charset+9↓p
.plt:0000000000001AF0                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001AF0 _nl_langinfo    endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    29h ; ')'
.plt:0000000000001AFB                 jmp     sub_1850
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; int mkstemp(char *template)
.plt:0000000000001B00 _mkstemp        proc near               ; CODE XREF: mkstemp_safer+4↓p
.plt:0000000000001B00                 jmp     cs:mkstemp_ptr
.plt:0000000000001B00 _mkstemp        endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    2Ah ; '*'
.plt:0000000000001B0B                 jmp     sub_1850
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; int __freading(FILE *fp)
.plt:0000000000001B10 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001B10                                         ; rpl_fflush+9↓p
.plt:0000000000001B10                 jmp     cs:__freading_ptr
.plt:0000000000001B10 ___freading     endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    2Bh ; '+'
.plt:0000000000001B1B                 jmp     sub_1850
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001B20 _fwrite_unlocked proc near              ; CODE XREF: main+3BC↓p
.plt:0000000000001B20                                         ; output+7A↓p ...
.plt:0000000000001B20                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001B20 _fwrite_unlocked endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    2Ch ; ','
.plt:0000000000001B2B                 jmp     sub_1850
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001B30 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001B30                                         ; re_string_realloc_buffers+30↓p ...
.plt:0000000000001B30                 jmp     cs:realloc_ptr
.plt:0000000000001B30 _realloc        endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    2Dh ; '-'
.plt:0000000000001B3B                 jmp     sub_1850
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000001B40 _fdopen         proc near               ; CODE XREF: main+5D7↓p
.plt:0000000000001B40                 jmp     cs:fdopen_ptr
.plt:0000000000001B40 _fdopen         endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    2Eh ; '.'
.plt:0000000000001B4B                 jmp     sub_1850
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; char *setlocale(int category, const char *locale)
.plt:0000000000001B50 _setlocale      proc near               ; CODE XREF: main+2E↓p
.plt:0000000000001B50                                         ; usage+25B↓p ...
.plt:0000000000001B50                 jmp     cs:setlocale_ptr
.plt:0000000000001B50 _setlocale      endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    2Fh ; '/'
.plt:0000000000001B5B                 jmp     sub_1850
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001B60                                         ; usage+24F↓p ...
.plt:0000000000001B60                 jmp     cs:__printf_chk_ptr
.plt:0000000000001B60 ___printf_chk   endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    30h ; '0'
.plt:0000000000001B6B                 jmp     sub_1850
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; wint_t btowc(int c)
.plt:0000000000001B70 _btowc          proc near               ; CODE XREF: parse_expression+F23↓p
.plt:0000000000001B70                                         ; parse_expression+11F7↓p ...
.plt:0000000000001B70                 jmp     cs:btowc_ptr
.plt:0000000000001B70 _btowc          endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    31h ; '1'
.plt:0000000000001B7B                 jmp     sub_1850
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000001B80 _mempcpy        proc near               ; CODE XREF: mfile_name_concat+AD↓p
.plt:0000000000001B80                                         ; mfile_name_concat+CE↓p
.plt:0000000000001B80                 jmp     cs:mempcpy_ptr
.plt:0000000000001B80 _mempcpy        endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    32h ; '2'
.plt:0000000000001B8B                 jmp     sub_1850
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001B90 _memmove        proc near               ; CODE XREF: tac_seekable+2AF↓p
.plt:0000000000001B90                                         ; re_string_reconstruct+190↓p ...
.plt:0000000000001B90                 jmp     cs:memmove_ptr
.plt:0000000000001B90 _memmove        endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    33h ; '3'
.plt:0000000000001B9B                 jmp     sub_1850
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001BA0 _error          proc near               ; CODE XREF: main+4AA↓p
.plt:0000000000001BA0                                         ; main+505↓p ...
.plt:0000000000001BA0                 jmp     cs:error_ptr
.plt:0000000000001BA0 _error          endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    34h ; '4'
.plt:0000000000001BAB                 jmp     sub_1850
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; int open(const char *file, int oflag, ...)
.plt:0000000000001BB0 _open           proc near               ; CODE XREF: main+4BD↓p
.plt:0000000000001BB0                 jmp     cs:open_ptr
.plt:0000000000001BB0 _open           endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    35h ; '5'
.plt:0000000000001BBB                 jmp     sub_1850
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001BC0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_582A↓j
.plt:0000000000001BC0                 jmp     cs:fseeko_ptr
.plt:0000000000001BC0 _fseeko         endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    36h ; '6'
.plt:0000000000001BCB                 jmp     sub_1850
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; wint_t towlower(wint_t wc)
.plt:0000000000001BD0 _towlower       proc near               ; CODE XREF: re_compile_fastmap_iter_isra_30+205↓p
.plt:0000000000001BD0                                         ; re_compile_fastmap_iter_isra_30+30E↓p
.plt:0000000000001BD0                 jmp     cs:towlower_ptr
.plt:0000000000001BD0 _towlower       endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    37h ; '7'
.plt:0000000000001BDB                 jmp     sub_1850
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; wint_t towupper(wint_t wc)
.plt:0000000000001BE0 _towupper       proc near               ; CODE XREF: build_wcs_upper_buffer+10C↓p
.plt:0000000000001BE0                                         ; build_wcs_upper_buffer+280↓p
.plt:0000000000001BE0                 jmp     cs:towupper_ptr
.plt:0000000000001BE0 _towupper       endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    38h ; '8'
.plt:0000000000001BEB                 jmp     sub_1850
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001BF0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001BF0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001BF0 ___cxa_atexit   endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    39h ; '9'
.plt:0000000000001BFB                 jmp     sub_1850
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: noreturn thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; void __noreturn exit(int status)
.plt:0000000000001C00 _exit           proc near               ; CODE XREF: main+10C↓p
.plt:0000000000001C00                                         ; usage+58↓p
.plt:0000000000001C00                 jmp     cs:exit_ptr
.plt:0000000000001C00 _exit           endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    3Ah ; ':'
.plt:0000000000001C0B                 jmp     sub_1850
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001C10 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001C10                 jmp     cs:fwrite_ptr
.plt:0000000000001C10 _fwrite         endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    3Bh ; ';'
.plt:0000000000001C1B                 jmp     sub_1850
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001C20                                         ; version_etc_arn+37↓p ...
.plt:0000000000001C20                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001C20 ___fprintf_chk  endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    3Ch ; '<'
.plt:0000000000001C2B                 jmp     sub_1850
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; int fflush_unlocked(FILE *stream)
.plt:0000000000001C30 _fflush_unlocked proc near              ; CODE XREF: main+3ED↓p
.plt:0000000000001C30                 jmp     cs:fflush_unlocked_ptr
.plt:0000000000001C30 _fflush_unlocked endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    3Dh ; '='
.plt:0000000000001C3B                 jmp     sub_1850
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001C40 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001C40                                         ; build_wcs_upper_buffer+22D↓p
.plt:0000000000001C40                 jmp     cs:mbsinit_ptr
.plt:0000000000001C40 _mbsinit        endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    3Eh ; '>'
.plt:0000000000001C4B                 jmp     sub_1850
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int iswprint(wint_t wc)
.plt:0000000000001C50 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001C50                 jmp     cs:iswprint_ptr
.plt:0000000000001C50 _iswprint       endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    3Fh ; '?'
.plt:0000000000001C5B                 jmp     sub_1850
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000001C60 ___ctype_tolower_loc proc near          ; CODE XREF: re_compile_fastmap_iter_isra_30+11F↓p
.plt:0000000000001C60                                         ; re_compile_fastmap_iter_isra_30+2D9↓p ...
.plt:0000000000001C60                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000001C60 ___ctype_tolower_loc endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    40h ; '@'
.plt:0000000000001C6B                 jmp     sub_1850
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001C70 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001C70                                         ; build_charclass_isra_29+A8↓p ...
.plt:0000000000001C70                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001C70 ___ctype_b_loc  endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    41h ; 'A'
.plt:0000000000001C7B                 jmp     sub_1850
.plt:0000000000001C7B ; } // starts at 1850
.plt:0000000000001C7B _plt            ends
.plt:0000000000001C7B
.plt.got:0000000000001C80 ; ===========================================================================
.plt.got:0000000000001C80
.plt.got:0000000000001C80 ; Segment type: Pure code
.plt.got:0000000000001C80 ; Segment permissions: Read/Execute
.plt.got:0000000000001C80 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001C80                 assume cs:_plt_got
.plt.got:0000000000001C80                 ;org 1C80h
.plt.got:0000000000001C80                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001C80
.plt.got:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001C80
.plt.got:0000000000001C80 ; Attributes: thunk
.plt.got:0000000000001C80
.plt.got:0000000000001C80 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001C80 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001C80 ; __unwind {
.plt.got:0000000000001C80                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001C80 __cxa_finalize  endp
.plt.got:0000000000001C80
.plt.got:0000000000001C80 ; ---------------------------------------------------------------------------
.plt.got:0000000000001C86                 align 8
.plt.got:0000000000001C86 ; } // starts at 1C80
.plt.got:0000000000001C86 _plt_got        ends
.plt.got:0000000000001C86
LOAD:0000000000001C88 ; ===========================================================================
LOAD:0000000000001C88
LOAD:0000000000001C88 ; Segment type: Pure code
LOAD:0000000000001C88 ; Segment permissions: Read/Execute
LOAD:0000000000001C88 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001C88                 assume cs:LOAD
LOAD:0000000000001C88                 ;org 1C88h
LOAD:0000000000001C88                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001C88                 align 10h
LOAD:0000000000001C88 LOAD            ends
LOAD:0000000000001C88
.text:0000000000001C90 ; ===========================================================================
.text:0000000000001C90
.text:0000000000001C90 ; Segment type: Pure code
.text:0000000000001C90 ; Segment permissions: Read/Execute
.text:0000000000001C90 _text           segment para public 'CODE' use64
.text:0000000000001C90                 assume cs:_text
.text:0000000000001C90                 ;org 1C90h
.text:0000000000001C90                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001C90
.text:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C90
.text:0000000000001C90
.text:0000000000001C90 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001C90                 public main
.text:0000000000001C90 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001C90
.text:0000000000001C90 var_58          = qword ptr -58h
.text:0000000000001C90 var_49          = byte ptr -49h
.text:0000000000001C90 var_48          = qword ptr -48h
.text:0000000000001C90 format          = qword ptr -40h
.text:0000000000001C90
.text:0000000000001C90 ; __unwind {
.text:0000000000001C90                 push    r15
.text:0000000000001C92                 push    r14
.text:0000000000001C94                 push    r13
.text:0000000000001C96                 push    r12
.text:0000000000001C98                 lea     r12, longopts
.text:0000000000001C9F                 push    rbp
.text:0000000000001CA0                 push    rbx
.text:0000000000001CA1                 mov     ebp, edi
.text:0000000000001CA3                 mov     rbx, rsi
.text:0000000000001CA6                 sub     rsp, 28h
.text:0000000000001CAA                 mov     rdi, [rsi]
.text:0000000000001CAD                 call    set_program_name
.text:0000000000001CB2                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001CB9                 mov     edi, 6          ; category
.text:0000000000001CBE                 call    _setlocale
.text:0000000000001CC3                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001CCA                 lea     rdi, domainname ; "coreutils"
.text:0000000000001CD1                 call    _bindtextdomain
.text:0000000000001CD6                 lea     rdi, domainname ; "coreutils"
.text:0000000000001CDD                 call    _textdomain
.text:0000000000001CE2                 lea     rdi, close_stdout
.text:0000000000001CE9                 call    atexit
.text:0000000000001CEE                 lea     rax, aWrittenBySSAnd+1Ah ; "\n"
.text:0000000000001CF5                 mov     cs:sentinel_length, 1
.text:0000000000001D00                 mov     cs:separator_ends_record, 1
.text:0000000000001D07                 mov     cs:separator, rax
.text:0000000000001D0E
.text:0000000000001D0E loc_1D0E:                               ; CODE XREF: main+C1↓j
.text:0000000000001D0E                                         ; main+11F↓j ...
.text:0000000000001D0E                 lea     rdx, shortopts  ; "brs:"
.text:0000000000001D15                 xor     r8d, r8d        ; longind
.text:0000000000001D18                 mov     rcx, r12        ; longopts
.text:0000000000001D1B                 mov     rsi, rbx        ; argv
.text:0000000000001D1E                 mov     edi, ebp        ; argc
.text:0000000000001D20                 call    _getopt_long
.text:0000000000001D25                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D28                 jz      loc_1DC8
.text:0000000000001D2E                 cmp     eax, 62h ; 'b'
.text:0000000000001D31                 jz      short loc_1DA8
.text:0000000000001D33                 jle     short loc_1D58
.text:0000000000001D35                 cmp     eax, 72h ; 'r'
.text:0000000000001D38                 jz      short loc_1DB8
.text:0000000000001D3A                 cmp     eax, 73h ; 's'
.text:0000000000001D3D                 jnz     loc_23CB
.text:0000000000001D43                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000001D4A                 mov     cs:separator, rax
.text:0000000000001D51                 jmp     short loc_1D0E
.text:0000000000001D51 ; ---------------------------------------------------------------------------
.text:0000000000001D53                 align 8
.text:0000000000001D58
.text:0000000000001D58 loc_1D58:                               ; CODE XREF: main+A3↑j
.text:0000000000001D58                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001D5D                 jnz     loc_23B1
.text:0000000000001D63                 sub     rsp, 8
.text:0000000000001D67                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D6E                 mov     rcx, cs:Version
.text:0000000000001D75                 push    0
.text:0000000000001D77                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001D7E                 lea     r8, aJayLepreau ; "Jay Lepreau"
.text:0000000000001D85                 lea     rdx, unk_141EE
.text:0000000000001D8C                 lea     rsi, aTac       ; "tac"
.text:0000000000001D93                 xor     eax, eax
.text:0000000000001D95                 call    version_etc
.text:0000000000001D9A                 xor     edi, edi        ; status
.text:0000000000001D9C                 call    _exit
.text:0000000000001D9C ; ---------------------------------------------------------------------------
.text:0000000000001DA1                 align 8
.text:0000000000001DA8
.text:0000000000001DA8 loc_1DA8:                               ; CODE XREF: main+A1↑j
.text:0000000000001DA8                 mov     cs:separator_ends_record, 0
.text:0000000000001DAF                 jmp     loc_1D0E
.text:0000000000001DAF ; ---------------------------------------------------------------------------
.text:0000000000001DB4                 align 8
.text:0000000000001DB8
.text:0000000000001DB8 loc_1DB8:                               ; CODE XREF: main+A8↑j
.text:0000000000001DB8                 mov     cs:sentinel_length, 0
.text:0000000000001DC3                 jmp     loc_1D0E
.text:0000000000001DC8 ; ---------------------------------------------------------------------------
.text:0000000000001DC8
.text:0000000000001DC8 loc_1DC8:                               ; CODE XREF: main+98↑j
.text:0000000000001DC8                 cmp     cs:sentinel_length, 0
.text:0000000000001DD0                 mov     r8, cs:separator
.text:0000000000001DD7                 movzx   edx, byte ptr [r8]
.text:0000000000001DDB                 jnz     loc_1F05
.text:0000000000001DE1                 test    dl, dl
.text:0000000000001DE3                 jz      loc_23D5
.text:0000000000001DE9                 lea     rax, compiled_separator_fastmap
.text:0000000000001DF0                 mov     rdi, r8
.text:0000000000001DF3                 mov     cs:compiled_separator, 0
.text:0000000000001DFE                 mov     cs:qword_21B228, 0
.text:0000000000001E09                 mov     cs:qword_21B248, 0
.text:0000000000001E14                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000001E18                 mov     cs:qword_21B240, rax
.text:0000000000001E1F                 xor     eax, eax
.text:0000000000001E21                 lea     rdx, compiled_separator
.text:0000000000001E28                 repne scasb
.text:0000000000001E2A                 mov     rdi, r8
.text:0000000000001E2D                 mov     rax, rcx
.text:0000000000001E30                 not     rax
.text:0000000000001E33                 lea     rsi, [rax-1]
.text:0000000000001E37                 call    rpl_re_compile_pattern
.text:0000000000001E3C                 test    rax, rax
.text:0000000000001E3F                 jnz     loc_23F9
.text:0000000000001E45
.text:0000000000001E45 loc_1E45:                               ; CODE XREF: main+2A1↓j
.text:0000000000001E45                 mov     rsi, cs:sentinel_length
.text:0000000000001E4C                 mov     cs:read_size, 2000h
.text:0000000000001E57                 mov     edx, 32h ; '2'
.text:0000000000001E5C                 mov     eax, 2000h
.text:0000000000001E61                 cmp     rsi, 0FFFh
.text:0000000000001E68                 ja      short loc_1E79
.text:0000000000001E6A                 jmp     short loc_1E8E
.text:0000000000001E6A ; ---------------------------------------------------------------------------
.text:0000000000001E6C                 align 10h
.text:0000000000001E70
.text:0000000000001E70 loc_1E70:                               ; CODE XREF: main+1F5↓j
.text:0000000000001E70                 sub     edx, 1
.text:0000000000001E73                 jz      loc_23BF
.text:0000000000001E79
.text:0000000000001E79 loc_1E79:                               ; CODE XREF: main+1D8↑j
.text:0000000000001E79                 add     rax, rax
.text:0000000000001E7C                 mov     rcx, rax
.text:0000000000001E7F                 shr     rcx, 1
.text:0000000000001E82                 cmp     rcx, rsi
.text:0000000000001E85                 jbe     short loc_1E70
.text:0000000000001E87                 mov     cs:read_size, rax
.text:0000000000001E8E
.text:0000000000001E8E loc_1E8E:                               ; CODE XREF: main+1DA↑j
.text:0000000000001E8E                 lea     rdx, [rax+rsi+1]
.text:0000000000001E93                 lea     rdi, [rdx+rdx]
.text:0000000000001E97                 cmp     rdx, rax
.text:0000000000001E9A                 setbe   cl
.text:0000000000001E9D                 cmp     rdi, rdx
.text:0000000000001EA0                 mov     cs:G_buffer_size, rdi
.text:0000000000001EA7                 setbe   al
.text:0000000000001EAA                 or      cl, al
.text:0000000000001EAC                 jnz     loc_23C6
.text:0000000000001EB2                 call    xmalloc
.text:0000000000001EB7                 mov     r12, cs:sentinel_length
.text:0000000000001EBE                 mov     rcx, rax
.text:0000000000001EC1                 mov     cs:G_buffer, rax
.text:0000000000001EC8                 test    r12, r12
.text:0000000000001ECB                 jnz     loc_22DB
.text:0000000000001ED1                 add     rcx, 1
.text:0000000000001ED5                 mov     cs:G_buffer, rcx
.text:0000000000001EDC
.text:0000000000001EDC loc_1EDC:                               ; CODE XREF: main+66C↓j
.text:0000000000001EDC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001EE3                 cmp     eax, ebp
.text:0000000000001EE5                 jge     short loc_1F36
.text:0000000000001EE7                 lea     r15, [rbx+rax*8]
.text:0000000000001EEB                 mov     r14, [r15]
.text:0000000000001EEE                 test    r14, r14
.text:0000000000001EF1                 jz      loc_22D1
.text:0000000000001EF7                 lea     rax, aLt+2      ; "-"
.text:0000000000001EFE                 mov     [rsp+58h+var_48], rax
.text:0000000000001F03                 jmp     short loc_1F4C
.text:0000000000001F05 ; ---------------------------------------------------------------------------
.text:0000000000001F05
.text:0000000000001F05 loc_1F05:                               ; CODE XREF: main+14B↑j
.text:0000000000001F05                 test    dl, dl
.text:0000000000001F07                 mov     eax, 1
.text:0000000000001F0C                 jz      short loc_1F23
.text:0000000000001F0E                 xor     eax, eax
.text:0000000000001F10                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000001F14                 mov     rdi, r8
.text:0000000000001F17                 repne scasb
.text:0000000000001F19                 mov     rax, rcx
.text:0000000000001F1C                 not     rax
.text:0000000000001F1F                 sub     rax, 1
.text:0000000000001F23
.text:0000000000001F23 loc_1F23:                               ; CODE XREF: main+27C↑j
.text:0000000000001F23                 mov     cs:sentinel_length, rax
.text:0000000000001F2A                 mov     cs:match_length, rax
.text:0000000000001F31                 jmp     loc_1E45
.text:0000000000001F36 ; ---------------------------------------------------------------------------
.text:0000000000001F36
.text:0000000000001F36 loc_1F36:                               ; CODE XREF: main+255↑j
.text:0000000000001F36                 lea     rax, aLt+2      ; "-"
.text:0000000000001F3D                 lea     r15, default_file_list_7113
.text:0000000000001F44                 mov     [rsp+58h+var_48], rax
.text:0000000000001F49                 mov     r14, rax
.text:0000000000001F4C
.text:0000000000001F4C loc_1F4C:                               ; CODE XREF: main+273↑j
.text:0000000000001F4C                 lea     rax, [r15+8]
.text:0000000000001F50                 mov     [rsp+58h+var_49], 1
.text:0000000000001F55                 mov     [rsp+58h+var_58], rax
.text:0000000000001F59                 nop     dword ptr [rax+00000000h]
.text:0000000000001F60
.text:0000000000001F60 loc_1F60:                               ; CODE XREF: main+439↓j
.text:0000000000001F60                 mov     rdi, [rsp+58h+var_48]
.text:0000000000001F65                 mov     ecx, 2
.text:0000000000001F6A                 mov     rsi, r14
.text:0000000000001F6D                 repe cmpsb
.text:0000000000001F6F                 setnbe  r12b
.text:0000000000001F73                 sbb     r12b, 0
.text:0000000000001F77                 movsx   r12d, r12b
.text:0000000000001F7B                 test    r12d, r12d
.text:0000000000001F7E                 jnz     loc_2146
.text:0000000000001F84                 lea     rsi, msgid      ; "standard input"
.text:0000000000001F8B                 mov     edx, 5          ; category
.text:0000000000001F90                 xor     edi, edi        ; domainname
.text:0000000000001F92                 mov     cs:have_read_stdin, 1
.text:0000000000001F99                 xor     ebp, ebp
.text:0000000000001F9B                 call    _dcgettext
.text:0000000000001FA0                 mov     r14, rax
.text:0000000000001FA3
.text:0000000000001FA3 loc_1FA3:                               ; CODE XREF: main+4C6↓j
.text:0000000000001FA3                 xor     esi, esi        ; offset
.text:0000000000001FA5                 mov     edx, 2          ; whence
.text:0000000000001FAA                 mov     edi, ebp        ; fd
.text:0000000000001FAC                 call    _lseek
.text:0000000000001FB1                 test    rax, rax
.text:0000000000001FB4                 mov     rbx, rax
.text:0000000000001FB7                 js      short loc_1FC8
.text:0000000000001FB9                 mov     edi, ebp        ; fd
.text:0000000000001FBB                 call    _isatty
.text:0000000000001FC0                 test    eax, eax
.text:0000000000001FC2                 jz      loc_228D
.text:0000000000001FC8
.text:0000000000001FC8 loc_1FC8:                               ; CODE XREF: main+327↑j
.text:0000000000001FC8                 cmp     cs:tempfile_7065, 0
.text:0000000000001FD0                 jz      loc_2216
.text:0000000000001FD6                 mov     rbx, cs:tmp_fp_7066
.text:0000000000001FDD                 mov     rdi, rbx        ; stream
.text:0000000000001FE0                 call    _clearerr_unlocked
.text:0000000000001FE5                 xor     edx, edx
.text:0000000000001FE7                 xor     esi, esi
.text:0000000000001FE9                 mov     rdi, rbx
.text:0000000000001FEC                 call    rpl_fseeko
.text:0000000000001FF1                 test    eax, eax
.text:0000000000001FF3                 js      loc_20FF
.text:0000000000001FF9                 mov     rdi, cs:tmp_fp_7066 ; stream
.text:0000000000002000                 call    _fileno
.text:0000000000002005                 xor     esi, esi        ; length
.text:0000000000002007                 mov     edi, eax        ; fd
.text:0000000000002009                 call    _ftruncate
.text:000000000000200E                 test    eax, eax
.text:0000000000002010                 js      loc_20FF
.text:0000000000002016
.text:0000000000002016 loc_2016:                               ; CODE XREF: main+5F8↓j
.text:0000000000002016                 mov     rax, cs:tempfile_7065
.text:000000000000201D                 mov     r13, cs:tmp_fp_7066
.text:0000000000002024                 xor     ebx, ebx
.text:0000000000002026                 mov     [rsp+58h+format], rax
.text:000000000000202B                 jmp     short loc_205D
.text:000000000000202B ; ---------------------------------------------------------------------------
.text:000000000000202D                 align 10h
.text:0000000000002030
.text:0000000000002030 loc_2030:                               ; CODE XREF: main+3E8↓j
.text:0000000000002030                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002034                 jz      loc_21CE
.text:000000000000203A                 mov     rdi, cs:G_buffer ; ptr
.text:0000000000002041                 mov     rcx, r13        ; stream
.text:0000000000002044                 mov     rdx, rax        ; n
.text:0000000000002047                 mov     esi, 1          ; size
.text:000000000000204C                 call    _fwrite_unlocked
.text:0000000000002051                 cmp     r15, rax
.text:0000000000002054                 jnz     loc_21F1
.text:000000000000205A                 add     rbx, r15
.text:000000000000205D
.text:000000000000205D loc_205D:                               ; CODE XREF: main+39B↑j
.text:000000000000205D                 mov     rdx, cs:read_size ; nbytes
.text:0000000000002064                 mov     rsi, cs:G_buffer ; buf
.text:000000000000206B                 mov     edi, ebp        ; fd
.text:000000000000206D                 call    safe_read
.text:0000000000002072                 test    rax, rax
.text:0000000000002075                 mov     r15, rax
.text:0000000000002078                 jnz     short loc_2030
.text:000000000000207A                 mov     rdi, r13        ; stream
.text:000000000000207D                 call    _fflush_unlocked
.text:0000000000002082                 test    eax, eax
.text:0000000000002084                 jnz     loc_21F1
.text:000000000000208A                 test    rbx, rbx
.text:000000000000208D                 js      loc_213F
.text:0000000000002093                 mov     rdi, r13        ; stream
.text:0000000000002096                 call    _fileno
.text:000000000000209B                 mov     rsi, [rsp+58h+format]
.text:00000000000020A0                 mov     rdx, rbx
.text:00000000000020A3                 mov     edi, eax
.text:00000000000020A5                 call    tac_seekable
.text:00000000000020AA                 mov     ebx, eax
.text:00000000000020AC
.text:00000000000020AC loc_20AC:                               ; CODE XREF: main+4B1↓j
.text:00000000000020AC                                         ; main+60C↓j ...
.text:00000000000020AC                 test    r12d, r12d
.text:00000000000020AF                 jnz     loc_219F
.text:00000000000020B5
.text:00000000000020B5 loc_20B5:                               ; CODE XREF: main+50A↓j
.text:00000000000020B5                                         ; main+518↓j
.text:00000000000020B5                 add     [rsp+58h+var_58], 8
.text:00000000000020BA                 and     [rsp+58h+var_49], bl
.text:00000000000020BE                 mov     rax, [rsp+58h+var_58]
.text:00000000000020C2                 mov     r14, [rax-8]
.text:00000000000020C6                 test    r14, r14
.text:00000000000020C9                 jnz     loc_1F60
.text:00000000000020CF
.text:00000000000020CF loc_20CF:                               ; CODE XREF: main+646↓j
.text:00000000000020CF                 xor     esi, esi
.text:00000000000020D1                 xor     edi, edi        ; src
.text:00000000000020D3                 call    output
.text:00000000000020D8                 cmp     cs:have_read_stdin, 0
.text:00000000000020DF                 jnz     loc_22A1
.text:00000000000020E5
.text:00000000000020E5 loc_20E5:                               ; CODE XREF: main+61A↓j
.text:00000000000020E5                                         ; main+63C↓j
.text:00000000000020E5                 movzx   eax, [rsp+58h+var_49]
.text:00000000000020EA                 add     rsp, 28h
.text:00000000000020EE                 pop     rbx
.text:00000000000020EF                 pop     rbp
.text:00000000000020F0                 pop     r12
.text:00000000000020F2                 xor     eax, 1
.text:00000000000020F5                 pop     r13
.text:00000000000020F7                 movzx   eax, al
.text:00000000000020FA                 pop     r14
.text:00000000000020FC                 pop     r15
.text:00000000000020FE                 retn
.text:00000000000020FF ; ---------------------------------------------------------------------------
.text:00000000000020FF
.text:00000000000020FF loc_20FF:                               ; CODE XREF: main+363↑j
.text:00000000000020FF                                         ; main+380↑j
.text:00000000000020FF                 mov     rsi, cs:tempfile_7065
.text:0000000000002106                 mov     edi, 4
.text:000000000000210B                 call    quotearg_style
.text:0000000000002110                 lea     rsi, aFailedToRewind ; "failed to rewind stream for %s"
.text:0000000000002117                 mov     rbx, rax
.text:000000000000211A                 mov     edx, 5          ; category
.text:000000000000211F
.text:000000000000211F loc_211F:                               ; CODE XREF: main+55C↓j
.text:000000000000211F                                         ; main+581↓j
.text:000000000000211F                 xor     edi, edi        ; domainname
.text:0000000000002121                 call    _dcgettext
.text:0000000000002126                 mov     r13, rax
.text:0000000000002129                 call    ___errno_location
.text:000000000000212E                 mov     esi, [rax]      ; errnum
.text:0000000000002130                 mov     rcx, rbx
.text:0000000000002133                 mov     rdx, r13        ; format
.text:0000000000002136                 xor     edi, edi        ; status
.text:0000000000002138                 xor     eax, eax
.text:000000000000213A                 call    _error
.text:000000000000213F
.text:000000000000213F loc_213F:                               ; CODE XREF: main+3FD↑j
.text:000000000000213F                 xor     ebx, ebx
.text:0000000000002141                 jmp     loc_20AC
.text:0000000000002146 ; ---------------------------------------------------------------------------
.text:0000000000002146
.text:0000000000002146 loc_2146:                               ; CODE XREF: main+2EE↑j
.text:0000000000002146                 xor     esi, esi        ; oflag
.text:0000000000002148                 xor     eax, eax
.text:000000000000214A                 mov     rdi, r14        ; file
.text:000000000000214D                 call    _open
.text:0000000000002152                 test    eax, eax
.text:0000000000002154                 mov     ebp, eax
.text:0000000000002156                 jns     loc_1FA3
.text:000000000000215C                 mov     rsi, r14
.text:000000000000215F                 mov     edi, 4
.text:0000000000002164                 call    quotearg_style
.text:0000000000002169                 lea     rsi, aFailedToOpenSF ; "failed to open %s for reading"
.text:0000000000002170                 mov     rbp, rax
.text:0000000000002173                 mov     edx, 5          ; category
.text:0000000000002178
.text:0000000000002178 loc_2178:                               ; CODE XREF: main+53C↓j
.text:0000000000002178                 xor     edi, edi        ; domainname
.text:000000000000217A                 call    _dcgettext
.text:000000000000217F                 mov     rbx, rax
.text:0000000000002182                 call    ___errno_location
.text:0000000000002187                 mov     esi, [rax]      ; errnum
.text:0000000000002189                 mov     rdx, rbx        ; format
.text:000000000000218C                 mov     rcx, rbp
.text:000000000000218F                 xor     edi, edi        ; status
.text:0000000000002191                 xor     eax, eax
.text:0000000000002193                 xor     ebx, ebx
.text:0000000000002195                 call    _error
.text:000000000000219A                 jmp     loc_20B5
.text:000000000000219F ; ---------------------------------------------------------------------------
.text:000000000000219F
.text:000000000000219F loc_219F:                               ; CODE XREF: main+41F↑j
.text:000000000000219F                 mov     edi, ebp        ; fd
.text:00000000000021A1                 call    _close
.text:00000000000021A6                 test    eax, eax
.text:00000000000021A8                 jz      loc_20B5
.text:00000000000021AE                 mov     rdx, r14
.text:00000000000021B1                 mov     esi, 3
.text:00000000000021B6                 xor     edi, edi
.text:00000000000021B8                 call    quotearg_n_style_colon
.text:00000000000021BD                 mov     edx, 5
.text:00000000000021C2                 mov     rbp, rax
.text:00000000000021C5                 lea     rsi, aSReadError ; "%s: read error"
.text:00000000000021CC                 jmp     short loc_2178
.text:00000000000021CE ; ---------------------------------------------------------------------------
.text:00000000000021CE
.text:00000000000021CE loc_21CE:                               ; CODE XREF: main+3A4↑j
.text:00000000000021CE                 mov     rdx, r14
.text:00000000000021D1                 mov     esi, 3
.text:00000000000021D6                 xor     edi, edi
.text:00000000000021D8                 call    quotearg_n_style_colon
.text:00000000000021DD                 mov     edx, 5
.text:00000000000021E2                 mov     rbx, rax
.text:00000000000021E5                 lea     rsi, aSReadError ; "%s: read error"
.text:00000000000021EC                 jmp     loc_211F
.text:00000000000021F1 ; ---------------------------------------------------------------------------
.text:00000000000021F1
.text:00000000000021F1 loc_21F1:                               ; CODE XREF: main+3C4↑j
.text:00000000000021F1                                         ; main+3F4↑j
.text:00000000000021F1                 mov     rdx, [rsp+58h+format]
.text:00000000000021F6                 mov     esi, 3
.text:00000000000021FB                 xor     edi, edi
.text:00000000000021FD                 call    quotearg_n_style_colon
.text:0000000000002202                 mov     edx, 5
.text:0000000000002207                 mov     rbx, rax
.text:000000000000220A                 lea     rsi, aSWriteError ; "%s: write error"
.text:0000000000002211                 jmp     loc_211F
.text:0000000000002216 ; ---------------------------------------------------------------------------
.text:0000000000002216
.text:0000000000002216 loc_2216:                               ; CODE XREF: main+340↑j
.text:0000000000002216                 lea     rdi, name       ; "TMPDIR"
.text:000000000000221D                 call    _getenv
.text:0000000000002222                 test    rax, rax
.text:0000000000002225                 mov     rbx, rax
.text:0000000000002228                 lea     rax, aTmp       ; "/tmp"
.text:000000000000222F                 lea     rsi, aTacxxxxxx ; "tacXXXXXX"
.text:0000000000002236                 cmovz   rbx, rax
.text:000000000000223A                 xor     edx, edx
.text:000000000000223C                 mov     rdi, rbx        ; src
.text:000000000000223F                 call    mfile_name_concat
.text:0000000000002244                 mov     rdi, rax
.text:0000000000002247                 mov     cs:tempfile_7065, rax
.text:000000000000224E                 call    mkstemp_safer
.text:0000000000002253                 test    eax, eax
.text:0000000000002255                 mov     r13d, eax
.text:0000000000002258                 js      loc_2301
.text:000000000000225E                 lea     rsi, modes      ; "w+"
.text:0000000000002265                 mov     edi, eax        ; fd
.text:0000000000002267                 call    _fdopen
.text:000000000000226C                 test    rax, rax
.text:000000000000226F                 mov     cs:tmp_fp_7066, rax
.text:0000000000002276                 mov     rdi, cs:tempfile_7065 ; name
.text:000000000000227D                 jz      loc_235B
.text:0000000000002283                 call    _unlink
.text:0000000000002288                 jmp     loc_2016
.text:000000000000228D ; ---------------------------------------------------------------------------
.text:000000000000228D
.text:000000000000228D loc_228D:                               ; CODE XREF: main+332↑j
.text:000000000000228D                 mov     rdx, rbx
.text:0000000000002290                 mov     rsi, r14
.text:0000000000002293                 mov     edi, ebp
.text:0000000000002295                 call    tac_seekable
.text:000000000000229A                 mov     ebx, eax
.text:000000000000229C                 jmp     loc_20AC
.text:00000000000022A1 ; ---------------------------------------------------------------------------
.text:00000000000022A1
.text:00000000000022A1 loc_22A1:                               ; CODE XREF: main+44F↑j
.text:00000000000022A1                 xor     edi, edi        ; fd
.text:00000000000022A3                 call    _close
.text:00000000000022A8                 test    eax, eax
.text:00000000000022AA                 jns     loc_20E5
.text:00000000000022B0                 call    ___errno_location
.text:00000000000022B5                 mov     esi, [rax]      ; errnum
.text:00000000000022B7                 lea     rdx, aLt+2      ; format
.text:00000000000022BE                 xor     edi, edi        ; status
.text:00000000000022C0                 xor     eax, eax
.text:00000000000022C2                 call    _error
.text:00000000000022C7                 mov     [rsp+58h+var_49], 0
.text:00000000000022CC                 jmp     loc_20E5
.text:00000000000022D1 ; ---------------------------------------------------------------------------
.text:00000000000022D1
.text:00000000000022D1 loc_22D1:                               ; CODE XREF: main+261↑j
.text:00000000000022D1                 mov     [rsp+58h+var_49], 1
.text:00000000000022D6                 jmp     loc_20CF
.text:00000000000022DB ; ---------------------------------------------------------------------------
.text:00000000000022DB
.text:00000000000022DB loc_22DB:                               ; CODE XREF: main+23B↑j
.text:00000000000022DB                 mov     rsi, cs:separator ; src
.text:00000000000022E2                 lea     rdx, [r12+1]    ; n
.text:00000000000022E7                 mov     rdi, rax        ; dest
.text:00000000000022EA                 call    _memcpy
.text:00000000000022EF                 mov     rcx, rax
.text:00000000000022F2                 add     rcx, r12
.text:00000000000022F5                 mov     cs:G_buffer, rcx
.text:00000000000022FC                 jmp     loc_1EDC
.text:0000000000002301 ; ---------------------------------------------------------------------------
.text:0000000000002301
.text:0000000000002301 loc_2301:                               ; CODE XREF: main+5C8↑j
.text:0000000000002301                 mov     rsi, rbx
.text:0000000000002304                 mov     edi, 4
.text:0000000000002309                 call    quotearg_style
.text:000000000000230E                 lea     rsi, aFailedToCreate ; "failed to create temporary file in %s"
.text:0000000000002315                 mov     edx, 5          ; category
.text:000000000000231A                 xor     edi, edi        ; domainname
.text:000000000000231C                 mov     rbx, rax
.text:000000000000231F                 call    _dcgettext
.text:0000000000002324                 mov     r13, rax
.text:0000000000002327                 call    ___errno_location
.text:000000000000232C                 mov     esi, [rax]      ; errnum
.text:000000000000232E                 mov     rcx, rbx
.text:0000000000002331                 mov     rdx, r13        ; format
.text:0000000000002334                 xor     edi, edi        ; status
.text:0000000000002336                 xor     eax, eax
.text:0000000000002338                 call    _error
.text:000000000000233D
.text:000000000000233D loc_233D:                               ; CODE XREF: main+71F↓j
.text:000000000000233D                 mov     rdi, cs:tempfile_7065 ; ptr
.text:0000000000002344                 xor     ebx, ebx
.text:0000000000002346                 call    _free
.text:000000000000234B                 mov     cs:tempfile_7065, 0
.text:0000000000002356                 jmp     loc_20AC
.text:000000000000235B ; ---------------------------------------------------------------------------
.text:000000000000235B
.text:000000000000235B loc_235B:                               ; CODE XREF: main+5ED↑j
.text:000000000000235B                 mov     rsi, rdi
.text:000000000000235E                 mov     edi, 4
.text:0000000000002363                 call    quotearg_style
.text:0000000000002368                 lea     rsi, aFailedToOpenSF_0 ; "failed to open %s for writing"
.text:000000000000236F                 xor     edi, edi        ; domainname
.text:0000000000002371                 mov     edx, 5          ; category
.text:0000000000002376                 mov     rbx, rax
.text:0000000000002379                 call    _dcgettext
.text:000000000000237E                 mov     [rsp+58h+format], rax
.text:0000000000002383                 call    ___errno_location
.text:0000000000002388                 mov     rdx, [rsp+58h+format] ; format
.text:000000000000238D                 mov     esi, [rax]      ; errnum
.text:000000000000238F                 mov     rcx, rbx
.text:0000000000002392                 xor     edi, edi        ; status
.text:0000000000002394                 xor     eax, eax
.text:0000000000002396                 call    _error
.text:000000000000239B                 mov     edi, r13d       ; fd
.text:000000000000239E                 call    _close
.text:00000000000023A3                 mov     rdi, cs:tempfile_7065 ; name
.text:00000000000023AA                 call    _unlink
.text:00000000000023AF                 jmp     short loc_233D
.text:00000000000023B1 ; ---------------------------------------------------------------------------
.text:00000000000023B1
.text:00000000000023B1 loc_23B1:                               ; CODE XREF: main+CD↑j
.text:00000000000023B1                 cmp     eax, 0FFFFFF7Eh
.text:00000000000023B6                 jnz     short loc_23CB
.text:00000000000023B8                 xor     edi, edi        ; status
.text:00000000000023BA                 call    usage
.text:00000000000023BF ; ---------------------------------------------------------------------------
.text:00000000000023BF
.text:00000000000023BF loc_23BF:                               ; CODE XREF: main+1E3↑j
.text:00000000000023BF                 mov     cs:read_size, rax
.text:00000000000023C6
.text:00000000000023C6 loc_23C6:                               ; CODE XREF: main+21C↑j
.text:00000000000023C6                 call    xalloc_die
.text:00000000000023CB ; ---------------------------------------------------------------------------
.text:00000000000023CB
.text:00000000000023CB loc_23CB:                               ; CODE XREF: main+AD↑j
.text:00000000000023CB                                         ; main+726↑j
.text:00000000000023CB                 mov     edi, 1          ; status
.text:00000000000023D0                 call    usage
.text:00000000000023D5 ; ---------------------------------------------------------------------------
.text:00000000000023D5
.text:00000000000023D5 loc_23D5:                               ; CODE XREF: main+153↑j
.text:00000000000023D5                 lea     rsi, aSeparatorCanno ; "separator cannot be empty"
.text:00000000000023DC                 mov     edx, 5          ; category
.text:00000000000023E1                 xor     edi, edi        ; domainname
.text:00000000000023E3                 call    _dcgettext
.text:00000000000023E8                 xor     esi, esi        ; errnum
.text:00000000000023EA                 mov     rdx, rax        ; format
.text:00000000000023ED                 mov     edi, 1          ; status
.text:00000000000023F2                 xor     eax, eax
.text:00000000000023F4                 call    _error
.text:00000000000023F9
.text:00000000000023F9 loc_23F9:                               ; CODE XREF: main+1AF↑j
.text:00000000000023F9                 lea     rdx, format     ; format
.text:0000000000002400                 mov     rcx, rax
.text:0000000000002403                 xor     esi, esi        ; errnum
.text:0000000000002405                 mov     edi, 1          ; status
.text:000000000000240A                 xor     eax, eax
.text:000000000000240C                 call    _error
.text:000000000000240C ; } // starts at 1C90
.text:0000000000002411                 db      2Eh
.text:0000000000002411                 nop     word ptr [rax+rax+00000000h]
.text:000000000000241B                 nop     dword ptr [rax+rax+00h]
.text:000000000000241B main            endp ; sp-analysis failed
.text:000000000000241B
.text:0000000000002420
.text:0000000000002420 ; =============== S U B R O U T I N E =======================================
.text:0000000000002420
.text:0000000000002420 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002420
.text:0000000000002420 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002420                 public start
.text:0000000000002420 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002420 ; __unwind {
.text:0000000000002420                 xor     ebp, ebp
.text:0000000000002422                 mov     r9, rdx         ; rtld_fini
.text:0000000000002425                 pop     rsi             ; argc
.text:0000000000002426                 mov     rdx, rsp        ; ubp_av
.text:0000000000002429                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000242D                 push    rax
.text:000000000000242E                 push    rsp             ; stack_end
.text:000000000000242F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002436                 lea     rcx, __libc_csu_init ; init
.text:000000000000243D                 lea     rdi, main       ; main
.text:0000000000002444                 call    cs:__libc_start_main_ptr
.text:000000000000244A                 hlt
.text:000000000000244A ; } // starts at 2420
.text:000000000000244A start           endp
.text:000000000000244A
.text:000000000000244A ; ---------------------------------------------------------------------------
.text:000000000000244B                 align 10h
.text:0000000000002450
.text:0000000000002450 ; =============== S U B R O U T I N E =======================================
.text:0000000000002450
.text:0000000000002450 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002450
.text:0000000000002450 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2503↓p
.text:0000000000002450                 lea     rdi, __bss_start
.text:0000000000002457                 push    rbp
.text:0000000000002458                 lea     rax, __bss_start
.text:000000000000245F                 cmp     rax, rdi
.text:0000000000002462                 mov     rbp, rsp
.text:0000000000002465                 jz      short loc_2480
.text:0000000000002467                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000246E                 test    rax, rax
.text:0000000000002471                 jz      short loc_2480
.text:0000000000002473                 pop     rbp
.text:0000000000002474                 jmp     rax
.text:0000000000002474 ; ---------------------------------------------------------------------------
.text:0000000000002476                 align 20h
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002480                                         ; deregister_tm_clones+21↑j
.text:0000000000002480                 pop     rbp
.text:0000000000002481                 retn
.text:0000000000002481 deregister_tm_clones endp
.text:0000000000002481
.text:0000000000002481 ; ---------------------------------------------------------------------------
.text:0000000000002482                 align 10h
.text:0000000000002490
.text:0000000000002490 ; =============== S U B R O U T I N E =======================================
.text:0000000000002490
.text:0000000000002490 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002490
.text:0000000000002490 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002490                 lea     rdi, __bss_start
.text:0000000000002497                 lea     rsi, __bss_start
.text:000000000000249E                 push    rbp
.text:000000000000249F                 sub     rsi, rdi
.text:00000000000024A2                 mov     rbp, rsp
.text:00000000000024A5                 sar     rsi, 3
.text:00000000000024A9                 mov     rax, rsi
.text:00000000000024AC                 shr     rax, 3Fh
.text:00000000000024B0                 add     rsi, rax
.text:00000000000024B3                 sar     rsi, 1
.text:00000000000024B6                 jz      short loc_24D0
.text:00000000000024B8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000024BF                 test    rax, rax
.text:00000000000024C2                 jz      short loc_24D0
.text:00000000000024C4                 pop     rbp
.text:00000000000024C5                 jmp     rax
.text:00000000000024C5 ; ---------------------------------------------------------------------------
.text:00000000000024C7                 align 10h
.text:00000000000024D0
.text:00000000000024D0 loc_24D0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000024D0                                         ; register_tm_clones+32↑j
.text:00000000000024D0                 pop     rbp
.text:00000000000024D1                 retn
.text:00000000000024D1 register_tm_clones endp
.text:00000000000024D1
.text:00000000000024D1 ; ---------------------------------------------------------------------------
.text:00000000000024D2                 align 20h
.text:00000000000024E0
.text:00000000000024E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000024E0
.text:00000000000024E0 ; Attributes: info_from_lumina
.text:00000000000024E0
.text:00000000000024E0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000024E0                 cmp     cs:completed_7697, 0
.text:00000000000024E7                 jnz     short locret_2518
.text:00000000000024E9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000024F1                 push    rbp
.text:00000000000024F2                 mov     rbp, rsp
.text:00000000000024F5                 jz      short loc_2503
.text:00000000000024F7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000024FE                 call    __cxa_finalize
.text:0000000000002503
.text:0000000000002503 loc_2503:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002503                 call    deregister_tm_clones
.text:0000000000002508                 mov     cs:completed_7697, 1
.text:000000000000250F                 pop     rbp
.text:0000000000002510                 retn
.text:0000000000002510 ; ---------------------------------------------------------------------------
.text:0000000000002511                 align 8
.text:0000000000002518
.text:0000000000002518 locret_2518:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002518                 rep retn
.text:0000000000002518 __do_global_dtors_aux endp
.text:0000000000002518
.text:0000000000002518 ; ---------------------------------------------------------------------------
.text:000000000000251A                 align 20h
.text:0000000000002520
.text:0000000000002520 ; =============== S U B R O U T I N E =======================================
.text:0000000000002520
.text:0000000000002520 ; Attributes: bp-based frame
.text:0000000000002520
.text:0000000000002520 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002520                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002520                 push    rbp
.text:0000000000002521                 mov     rbp, rsp
.text:0000000000002524                 pop     rbp
.text:0000000000002525                 jmp     register_tm_clones
.text:0000000000002525 frame_dummy     endp
.text:0000000000002525
.text:0000000000002525 ; ---------------------------------------------------------------------------
.text:000000000000252A                 align 10h
.text:0000000000002530
.text:0000000000002530 ; =============== S U B R O U T I N E =======================================
.text:0000000000002530
.text:0000000000002530
.text:0000000000002530 ; __int64 __fastcall output(void *src)
.text:0000000000002530 output          proc near               ; CODE XREF: main+443↑p
.text:0000000000002530                                         ; tac_seekable+3D8↓p ...
.text:0000000000002530 ; __unwind {
.text:0000000000002530                 push    r15
.text:0000000000002532                 push    r14
.text:0000000000002534                 push    r13
.text:0000000000002536                 push    r12
.text:0000000000002538                 push    rbp
.text:0000000000002539                 push    rbx
.text:000000000000253A                 sub     rsp, 8
.text:000000000000253E                 test    rdi, rdi
.text:0000000000002541                 mov     rbx, cs:bytes_in_buffer_7000
.text:0000000000002548                 jz      loc_25F0
.text:000000000000254E                 mov     r15d, 2000h
.text:0000000000002554                 sub     rsi, rdi
.text:0000000000002557                 lea     r13, buffer_6999
.text:000000000000255E                 sub     r15, rbx
.text:0000000000002561                 mov     r12, rdi
.text:0000000000002564                 mov     rbp, rsi
.text:0000000000002567                 cmp     rsi, r15
.text:000000000000256A                 mov     r14, r13
.text:000000000000256D                 jb      loc_2628
.text:0000000000002573                 nop     dword ptr [rax+rax+00h]
.text:0000000000002578
.text:0000000000002578 loc_2578:                               ; CODE XREF: output+91↓j
.text:0000000000002578                 lea     rdi, [r13+rbx+0] ; dest
.text:000000000000257D                 mov     rdx, r15        ; n
.text:0000000000002580                 mov     rsi, r12        ; src
.text:0000000000002583                 sub     rbp, r15
.text:0000000000002586                 add     r12, r15
.text:0000000000002589                 xor     ebx, ebx
.text:000000000000258B                 call    _memcpy
.text:0000000000002590                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002597                 mov     edx, 2000h      ; n
.text:000000000000259C                 mov     esi, 1          ; size
.text:00000000000025A1                 mov     rdi, r14        ; ptr
.text:00000000000025A4                 mov     r15d, 2000h
.text:00000000000025AA                 call    _fwrite_unlocked
.text:00000000000025AF                 cmp     rbp, 1FFFh
.text:00000000000025B6                 mov     cs:bytes_in_buffer_7000, 0
.text:00000000000025C1                 ja      short loc_2578
.text:00000000000025C3                 lea     rdi, buffer_6999 ; dest
.text:00000000000025CA
.text:00000000000025CA loc_25CA:                               ; CODE XREF: output+FC↓j
.text:00000000000025CA                 add     rbx, rbp
.text:00000000000025CD                 mov     rdx, rbp        ; n
.text:00000000000025D0                 mov     rsi, r12        ; src
.text:00000000000025D3                 call    _memcpy
.text:00000000000025D8                 mov     cs:bytes_in_buffer_7000, rbx
.text:00000000000025DF                 add     rsp, 8
.text:00000000000025E3                 pop     rbx
.text:00000000000025E4                 pop     rbp
.text:00000000000025E5                 pop     r12
.text:00000000000025E7                 pop     r13
.text:00000000000025E9                 pop     r14
.text:00000000000025EB                 pop     r15
.text:00000000000025ED                 retn
.text:00000000000025ED ; ---------------------------------------------------------------------------
.text:00000000000025EE                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: output+18↑j
.text:00000000000025F0                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000025F7                 lea     rdi, buffer_6999 ; ptr
.text:00000000000025FE                 mov     rdx, rbx        ; n
.text:0000000000002601                 mov     esi, 1          ; size
.text:0000000000002606                 call    _fwrite_unlocked
.text:000000000000260B                 mov     cs:bytes_in_buffer_7000, 0
.text:0000000000002616                 add     rsp, 8
.text:000000000000261A                 pop     rbx
.text:000000000000261B                 pop     rbp
.text:000000000000261C                 pop     r12
.text:000000000000261E                 pop     r13
.text:0000000000002620                 pop     r14
.text:0000000000002622                 pop     r15
.text:0000000000002624                 retn
.text:0000000000002624 ; ---------------------------------------------------------------------------
.text:0000000000002625                 align 8
.text:0000000000002628
.text:0000000000002628 loc_2628:                               ; CODE XREF: output+3D↑j
.text:0000000000002628                 lea     rdi, [rbx+r13]
.text:000000000000262C                 jmp     short loc_25CA
.text:000000000000262C ; } // starts at 2530
.text:000000000000262C output          endp
.text:000000000000262C
.text:000000000000262C ; ---------------------------------------------------------------------------
.text:000000000000262E                 align 10h
.text:0000000000002630
.text:0000000000002630 ; =============== S U B R O U T I N E =======================================
.text:0000000000002630
.text:0000000000002630
.text:0000000000002630 tac_seekable    proc near               ; CODE XREF: main+415↑p
.text:0000000000002630                                         ; main+605↑p
.text:0000000000002630
.text:0000000000002630 s2              = qword ptr -60h
.text:0000000000002630 nbytes          = qword ptr -58h
.text:0000000000002630 fd              = dword ptr -4Ch
.text:0000000000002630 var_48          = qword ptr -48h
.text:0000000000002630 var_40          = qword ptr -40h
.text:0000000000002630
.text:0000000000002630 ; __unwind {
.text:0000000000002630                 push    r15
.text:0000000000002632                 push    r14
.text:0000000000002634                 mov     r14, rdx
.text:0000000000002637                 push    r13
.text:0000000000002639                 push    r12
.text:000000000000263B                 push    rbp
.text:000000000000263C                 push    rbx
.text:000000000000263D                 sub     rsp, 38h
.text:0000000000002641                 mov     r15, cs:separator
.text:0000000000002648                 mov     rbx, cs:read_size
.text:000000000000264F                 mov     [rsp+68h+fd], edi
.text:0000000000002653                 mov     [rsp+68h+var_40], rsi
.text:0000000000002658                 lea     rax, [r15+1]
.text:000000000000265C                 movzx   ebp, byte ptr [r15]
.text:0000000000002660                 mov     [rsp+68h+s2], rax
.text:0000000000002665                 mov     rax, cs:match_length
.text:000000000000266C                 mov     [rsp+68h+var_48], rax
.text:0000000000002671                 lea     r13, [rax-1]
.text:0000000000002675                 mov     rax, rdx
.text:0000000000002678                 xor     edx, edx
.text:000000000000267A                 div     rbx
.text:000000000000267D                 test    rdx, rdx
.text:0000000000002680                 jnz     loc_2B19
.text:0000000000002686
.text:0000000000002686 loc_2686:                               ; CODE XREF: tac_seekable+4F9↓j
.text:0000000000002686                                         ; tac_seekable+546↓j
.text:0000000000002686                 lea     r12, aSSeekFailed ; "%s: seek failed"
.text:000000000000268D                 jmp     short loc_2693
.text:000000000000268D ; ---------------------------------------------------------------------------
.text:000000000000268F                 align 10h
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: tac_seekable+A5↓j
.text:0000000000002690                                         ; tac_seekable+EA↓j
.text:0000000000002690                 sub     r14, rbx
.text:0000000000002693
.text:0000000000002693 loc_2693:                               ; CODE XREF: tac_seekable+5D↑j
.text:0000000000002693                 mov     rsi, cs:G_buffer ; buf
.text:000000000000269A                 mov     edi, [rsp+68h+fd] ; fd
.text:000000000000269E                 mov     rdx, rbx        ; nbytes
.text:00000000000026A1                 call    safe_read
.text:00000000000026A6                 test    rax, rax
.text:00000000000026A9                 mov     rdx, rax
.text:00000000000026AC                 mov     rbx, cs:read_size
.text:00000000000026B3                 jnz     short loc_271F
.text:00000000000026B5                 test    r14, r14
.text:00000000000026B8                 jz      loc_2ADE
.text:00000000000026BE                 mov     edi, [rsp+68h+fd] ; fd
.text:00000000000026C2                 mov     rsi, rbx
.text:00000000000026C5                 mov     edx, 1          ; whence
.text:00000000000026CA                 neg     rsi             ; offset
.text:00000000000026CD                 call    _lseek
.text:00000000000026D2                 test    rax, rax
.text:00000000000026D5                 jns     short loc_2690
.text:00000000000026D7                 mov     rdx, [rsp+68h+var_40]
.text:00000000000026DC                 mov     esi, 3
.text:00000000000026E1                 xor     edi, edi
.text:00000000000026E3                 call    quotearg_n_style_colon
.text:00000000000026E8                 mov     edx, 5          ; category
.text:00000000000026ED                 mov     rsi, r12        ; msgid
.text:00000000000026F0                 xor     edi, edi        ; domainname
.text:00000000000026F2                 mov     rbx, rax
.text:00000000000026F5                 call    _dcgettext
.text:00000000000026FA                 mov     r15, rax
.text:00000000000026FD                 call    ___errno_location
.text:0000000000002702                 mov     esi, [rax]      ; errnum
.text:0000000000002704                 mov     rcx, rbx
.text:0000000000002707                 mov     rdx, r15        ; format
.text:000000000000270A                 xor     edi, edi        ; status
.text:000000000000270C                 xor     eax, eax
.text:000000000000270E                 call    _error
.text:0000000000002713                 mov     rbx, cs:read_size
.text:000000000000271A                 jmp     loc_2690
.text:000000000000271F ; ---------------------------------------------------------------------------
.text:000000000000271F
.text:000000000000271F loc_271F:                               ; CODE XREF: tac_seekable+83↑j
.text:000000000000271F                 cmp     rax, rbx
.text:0000000000002722                 jz      short loc_274C
.text:0000000000002724                 jmp     loc_2B7B
.text:0000000000002724 ; ---------------------------------------------------------------------------
.text:0000000000002729                 align 10h
.text:0000000000002730
.text:0000000000002730 loc_2730:                               ; CODE XREF: tac_seekable+12F↓j
.text:0000000000002730                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002734                 jz      loc_2A8D
.text:000000000000273A                 mov     rdx, cs:read_size ; nbytes
.text:0000000000002741                 add     r14, rax
.text:0000000000002744                 mov     rbx, rax
.text:0000000000002747                 cmp     rdx, rax
.text:000000000000274A                 jnz     short loc_276B
.text:000000000000274C
.text:000000000000274C loc_274C:                               ; CODE XREF: tac_seekable+F2↑j
.text:000000000000274C                                         ; tac_seekable+4B4↓j
.text:000000000000274C                 mov     rsi, cs:G_buffer ; buf
.text:0000000000002753                 mov     edi, [rsp+68h+fd] ; fd
.text:0000000000002757                 call    safe_read
.text:000000000000275C                 test    rax, rax
.text:000000000000275F                 jnz     short loc_2730
.text:0000000000002761
.text:0000000000002761 loc_2761:                               ; CODE XREF: tac_seekable+54E↓j
.text:0000000000002761                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002765                 jz      loc_2A8D
.text:000000000000276B
.text:000000000000276B loc_276B:                               ; CODE XREF: tac_seekable+11A↑j
.text:000000000000276B                                         ; tac_seekable+4BC↓j
.text:000000000000276B                 mov     r12, cs:G_buffer
.text:0000000000002772                 mov     rax, cs:sentinel_length
.text:0000000000002779                 lea     rcx, [r12+rbx]
.text:000000000000277D                 mov     rdx, rcx
.text:0000000000002780                 mov     [rsp+68h+nbytes], rcx
.text:0000000000002785                 sub     rcx, [rsp+68h+var_48]
.text:000000000000278A                 mov     byte ptr [rsp+68h+var_48], 1
.text:000000000000278F                 add     rcx, 1
.text:0000000000002793                 test    rax, rax
.text:0000000000002796                 cmovnz  rdx, rcx
.text:000000000000279A                 mov     r15, rdx
.text:000000000000279D                 nop     dword ptr [rax]
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: tac_seekable+39A↓j
.text:00000000000027A0                 test    rax, rax
.text:00000000000027A3                 jnz     loc_2943
.text:00000000000027A9
.text:00000000000027A9 loc_27A9:                               ; CODE XREF: tac_seekable+2FE↓j
.text:00000000000027A9                                         ; tac_seekable+385↓j
.text:00000000000027A9                 sub     r15, r12
.text:00000000000027AC                 mov     r8d, 1
.text:00000000000027B2                 sub     r8, r15
.text:00000000000027B5                 cmp     r8, 1
.text:00000000000027B9                 jg      loc_2BAC
.text:00000000000027BF                 jz      loc_29D7
.text:00000000000027C5                 lea     rcx, [r15-1]
.text:00000000000027C9                 lea     r9, regs
.text:00000000000027D0                 lea     rdi, compiled_separator
.text:00000000000027D7                 mov     rdx, r15
.text:00000000000027DA                 mov     rsi, r12
.text:00000000000027DD                 call    rpl_re_search
.text:00000000000027E2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000027E6                 jz      loc_29D0
.text:00000000000027EC                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000027F0                 jz      loc_2B88
.text:00000000000027F6                 mov     rax, cs:qword_21B108
.text:00000000000027FD                 mov     r12, cs:G_buffer
.text:0000000000002804                 mov     rdx, [rax]
.text:0000000000002807                 mov     rax, cs:qword_21B110
.text:000000000000280E                 mov     rax, [rax]
.text:0000000000002811                 lea     rbx, [r12+rdx]
.text:0000000000002815                 sub     rax, rdx
.text:0000000000002818                 mov     cs:match_length, rax
.text:000000000000281F
.text:000000000000281F loc_281F:                               ; CODE XREF: tac_seekable+320↓j
.text:000000000000281F                                         ; tac_seekable+3AC↓j
.text:000000000000281F                 cmp     rbx, r12
.text:0000000000002822                 jnb     loc_2978
.text:0000000000002828
.text:0000000000002828 loc_2828:                               ; CODE XREF: tac_seekable+33D↓j
.text:0000000000002828                 test    r14, r14
.text:000000000000282B                 jz      loc_2AF8
.text:0000000000002831                 mov     rbx, [rsp+68h+nbytes]
.text:0000000000002836                 mov     rax, cs:read_size
.text:000000000000283D                 sub     rbx, r12
.text:0000000000002840                 cmp     rax, rbx
.text:0000000000002843                 jnb     short loc_289C
.text:0000000000002845                 mov     rdx, cs:sentinel_length
.text:000000000000284C                 lea     rsi, [rax+rax]
.text:0000000000002850                 mov     rdi, cs:G_buffer_size
.text:0000000000002857                 mov     r15d, 1
.text:000000000000285D                 mov     cs:read_size, rsi
.text:0000000000002864                 lea     rsi, [rdx+rax*4+2]
.text:0000000000002869                 test    rdx, rdx
.text:000000000000286C                 cmovnz  r15, rdx
.text:0000000000002870                 cmp     rsi, rdi
.text:0000000000002873                 mov     cs:G_buffer_size, rsi
.text:000000000000287A                 jb      loc_2B83
.text:0000000000002880                 mov     rdi, r12
.text:0000000000002883                 sub     rdi, r15
.text:0000000000002886                 call    xrealloc
.text:000000000000288B                 add     rax, r15
.text:000000000000288E                 mov     cs:G_buffer, rax
.text:0000000000002895                 mov     rax, cs:read_size
.text:000000000000289C
.text:000000000000289C loc_289C:                               ; CODE XREF: tac_seekable+213↑j
.text:000000000000289C                 cmp     r14, rax
.text:000000000000289F                 jb      loc_29E8
.text:00000000000028A5                 sub     r14, rax
.text:00000000000028A8
.text:00000000000028A8 loc_28A8:                               ; CODE XREF: tac_seekable+3C2↓j
.text:00000000000028A8                 mov     edi, [rsp+68h+fd] ; fd
.text:00000000000028AC                 xor     edx, edx        ; whence
.text:00000000000028AE                 mov     rsi, r14        ; offset
.text:00000000000028B1                 call    _lseek
.text:00000000000028B6                 test    rax, rax
.text:00000000000028B9                 js      loc_2A48
.text:00000000000028BF
.text:00000000000028BF loc_28BF:                               ; CODE XREF: tac_seekable+458↓j
.text:00000000000028BF                 mov     r12, cs:G_buffer
.text:00000000000028C6                 mov     r8, cs:read_size
.text:00000000000028CD                 mov     rdx, rbx        ; n
.text:00000000000028D0                 lea     r15, [r12+r8]
.text:00000000000028D4                 mov     rsi, r12        ; src
.text:00000000000028D7                 mov     [rsp+68h+nbytes], r8
.text:00000000000028DC                 mov     rdi, r15        ; dest
.text:00000000000028DF                 call    _memmove
.text:00000000000028E4                 mov     r8, [rsp+68h+nbytes]
.text:00000000000028E9                 mov     edi, [rsp+68h+fd] ; fd
.text:00000000000028ED                 mov     rsi, r12        ; buf
.text:00000000000028F0                 add     rbx, r8
.text:00000000000028F3                 cmp     cs:sentinel_length, 0
.text:00000000000028FB                 mov     rdx, r8         ; nbytes
.text:00000000000028FE                 lea     rax, [r12+rbx]
.text:0000000000002902                 mov     [rsp+68h+nbytes], rax
.text:0000000000002907                 cmovz   r15, rax
.text:000000000000290B                 call    safe_read
.text:0000000000002910                 cmp     rax, cs:read_size
.text:0000000000002917                 jnz     loc_2A8D
.text:000000000000291D                 mov     rax, cs:sentinel_length
.text:0000000000002924                 mov     r12, cs:G_buffer
.text:000000000000292B                 test    rax, rax
.text:000000000000292E                 jz      loc_27A9
.text:0000000000002934                 cmp     [r15-1], bpl
.text:0000000000002938                 lea     rbx, [r15-1]
.text:000000000000293C                 jz      short loc_294D
.text:000000000000293E                 xchg    ax, ax
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: tac_seekable+31B↓j
.text:0000000000002940                                         ; tac_seekable+338↓j
.text:0000000000002940                 mov     r15, rbx
.text:0000000000002943
.text:0000000000002943 loc_2943:                               ; CODE XREF: tac_seekable+173↑j
.text:0000000000002943                 cmp     [r15-1], bpl
.text:0000000000002947                 lea     rbx, [r15-1]
.text:000000000000294B                 jnz     short loc_2940
.text:000000000000294D
.text:000000000000294D loc_294D:                               ; CODE XREF: tac_seekable+30C↑j
.text:000000000000294D                 test    r13, r13
.text:0000000000002950                 jz      loc_281F
.text:0000000000002956                 mov     rsi, [rsp+68h+s2] ; s2
.text:000000000000295B                 mov     rdx, r13        ; n
.text:000000000000295E                 mov     rdi, r15        ; s1
.text:0000000000002961                 call    _strncmp
.text:0000000000002966                 test    eax, eax
.text:0000000000002968                 jnz     short loc_2940
.text:000000000000296A                 cmp     rbx, r12
.text:000000000000296D                 jb      loc_2828
.text:0000000000002973                 nop     dword ptr [rax+rax+00h]
.text:0000000000002978
.text:0000000000002978 loc_2978:                               ; CODE XREF: tac_seekable+1F2↑j
.text:0000000000002978                 cmp     cs:separator_ends_record, 0
.text:000000000000297F                 jz      short loc_2A00
.text:0000000000002981                 movzx   ecx, byte ptr [rsp+68h+var_48]
.text:0000000000002986                 mov     r15, cs:match_length
.text:000000000000298D                 add     r15, rbx
.text:0000000000002990                 xor     ecx, 1
.text:0000000000002993                 cmp     [rsp+68h+nbytes], r15
.text:0000000000002998                 setnz   dl
.text:000000000000299B                 or      cl, dl
.text:000000000000299D                 mov     byte ptr [rsp+68h+var_48], cl
.text:00000000000029A1                 jnz     short loc_2A20
.text:00000000000029A3                 mov     [rsp+68h+nbytes], r15
.text:00000000000029A8
.text:00000000000029A8 loc_29A8:                               ; CODE XREF: tac_seekable+3E9↓j
.text:00000000000029A8                                         ; tac_seekable+40E↓j
.text:00000000000029A8                 mov     rax, cs:sentinel_length
.text:00000000000029AF                 mov     r15, rbx
.text:00000000000029B2                 test    rax, rax
.text:00000000000029B5                 jz      loc_27A9
.text:00000000000029BB                 mov     edx, 1
.text:00000000000029C0                 sub     rdx, cs:match_length
.text:00000000000029C7                 add     r15, rdx
.text:00000000000029CA                 jmp     loc_27A0
.text:00000000000029CA ; ---------------------------------------------------------------------------
.text:00000000000029CF                 align 10h
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: tac_seekable+1B6↑j
.text:00000000000029D0                 mov     r12, cs:G_buffer
.text:00000000000029D7
.text:00000000000029D7 loc_29D7:                               ; CODE XREF: tac_seekable+18F↑j
.text:00000000000029D7                 lea     rbx, [r12-1]
.text:00000000000029DC                 jmp     loc_281F
.text:00000000000029DC ; ---------------------------------------------------------------------------
.text:00000000000029E1                 align 8
.text:00000000000029E8
.text:00000000000029E8 loc_29E8:                               ; CODE XREF: tac_seekable+26F↑j
.text:00000000000029E8                 mov     cs:read_size, r14
.text:00000000000029EF                 xor     r14d, r14d
.text:00000000000029F2                 jmp     loc_28A8
.text:00000000000029F2 ; ---------------------------------------------------------------------------
.text:00000000000029F7                 align 20h
.text:0000000000002A00
.text:0000000000002A00 loc_2A00:                               ; CODE XREF: tac_seekable+34F↑j
.text:0000000000002A00                 mov     rsi, [rsp+68h+nbytes]
.text:0000000000002A05                 mov     rdi, rbx        ; src
.text:0000000000002A08                 call    output
.text:0000000000002A0D                 mov     r12, cs:G_buffer
.text:0000000000002A14                 mov     [rsp+68h+nbytes], rbx
.text:0000000000002A19                 jmp     short loc_29A8
.text:0000000000002A19 ; ---------------------------------------------------------------------------
.text:0000000000002A1B                 align 20h
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: tac_seekable+371↑j
.text:0000000000002A20                 mov     rsi, [rsp+68h+nbytes]
.text:0000000000002A25                 mov     rdi, r15        ; src
.text:0000000000002A28                 call    output
.text:0000000000002A2D                 mov     r12, cs:G_buffer
.text:0000000000002A34                 mov     [rsp+68h+nbytes], r15
.text:0000000000002A39                 mov     byte ptr [rsp+68h+var_48], 0
.text:0000000000002A3E                 jmp     loc_29A8
.text:0000000000002A3E ; ---------------------------------------------------------------------------
.text:0000000000002A43                 align 8
.text:0000000000002A48
.text:0000000000002A48 loc_2A48:                               ; CODE XREF: tac_seekable+289↑j
.text:0000000000002A48                 mov     rdx, [rsp+68h+var_40]
.text:0000000000002A4D                 xor     edi, edi
.text:0000000000002A4F                 mov     esi, 3
.text:0000000000002A54                 call    quotearg_n_style_colon
.text:0000000000002A59                 lea     rsi, aSSeekFailed ; "%s: seek failed"
.text:0000000000002A60                 xor     edi, edi        ; domainname
.text:0000000000002A62                 mov     edx, 5          ; category
.text:0000000000002A67                 mov     r12, rax
.text:0000000000002A6A                 call    _dcgettext
.text:0000000000002A6F                 mov     r15, rax
.text:0000000000002A72                 call    ___errno_location
.text:0000000000002A77                 mov     esi, [rax]      ; errnum
.text:0000000000002A79                 mov     rcx, r12
.text:0000000000002A7C                 mov     rdx, r15        ; format
.text:0000000000002A7F                 xor     edi, edi        ; status
.text:0000000000002A81                 xor     eax, eax
.text:0000000000002A83                 call    _error
.text:0000000000002A88                 jmp     loc_28BF
.text:0000000000002A8D ; ---------------------------------------------------------------------------
.text:0000000000002A8D
.text:0000000000002A8D loc_2A8D:                               ; CODE XREF: tac_seekable+104↑j
.text:0000000000002A8D                                         ; tac_seekable+135↑j ...
.text:0000000000002A8D                 mov     rdx, [rsp+68h+var_40]
.text:0000000000002A92                 mov     esi, 3
.text:0000000000002A97                 xor     edi, edi
.text:0000000000002A99                 call    quotearg_n_style_colon
.text:0000000000002A9E                 lea     rsi, aSReadError ; "%s: read error"
.text:0000000000002AA5                 mov     edx, 5          ; category
.text:0000000000002AAA                 xor     edi, edi        ; domainname
.text:0000000000002AAC                 mov     rbp, rax
.text:0000000000002AAF                 call    _dcgettext
.text:0000000000002AB4                 mov     rbx, rax
.text:0000000000002AB7                 call    ___errno_location
.text:0000000000002ABC                 mov     esi, [rax]      ; errnum
.text:0000000000002ABE                 mov     rcx, rbp
.text:0000000000002AC1                 mov     rdx, rbx        ; format
.text:0000000000002AC4                 xor     eax, eax
.text:0000000000002AC6                 xor     edi, edi        ; status
.text:0000000000002AC8                 call    _error
.text:0000000000002ACD                 add     rsp, 38h
.text:0000000000002AD1                 xor     eax, eax
.text:0000000000002AD3                 pop     rbx
.text:0000000000002AD4                 pop     rbp
.text:0000000000002AD5                 pop     r12
.text:0000000000002AD7                 pop     r13
.text:0000000000002AD9                 pop     r14
.text:0000000000002ADB                 pop     r15
.text:0000000000002ADD                 retn
.text:0000000000002ADE ; ---------------------------------------------------------------------------
.text:0000000000002ADE
.text:0000000000002ADE loc_2ADE:                               ; CODE XREF: tac_seekable+88↑j
.text:0000000000002ADE                 test    rbx, rbx
.text:0000000000002AE1                 mov     rdx, r14
.text:0000000000002AE4                 jz      loc_274C
.text:0000000000002AEA                 xor     ebx, ebx
.text:0000000000002AEC                 jmp     loc_276B
.text:0000000000002AEC ; ---------------------------------------------------------------------------
.text:0000000000002AF1                 align 8
.text:0000000000002AF8
.text:0000000000002AF8 loc_2AF8:                               ; CODE XREF: tac_seekable+1FB↑j
.text:0000000000002AF8                 mov     rsi, [rsp+68h+nbytes]
.text:0000000000002AFD                 mov     rdi, r12        ; src
.text:0000000000002B00                 call    output
.text:0000000000002B05                 add     rsp, 38h
.text:0000000000002B09                 mov     eax, 1
.text:0000000000002B0E                 pop     rbx
.text:0000000000002B0F                 pop     rbp
.text:0000000000002B10                 pop     r12
.text:0000000000002B12                 pop     r13
.text:0000000000002B14                 pop     r14
.text:0000000000002B16                 pop     r15
.text:0000000000002B18                 retn
.text:0000000000002B19 ; ---------------------------------------------------------------------------
.text:0000000000002B19
.text:0000000000002B19 loc_2B19:                               ; CODE XREF: tac_seekable+50↑j
.text:0000000000002B19                 sub     r14, rdx
.text:0000000000002B1C                 xor     edx, edx        ; whence
.text:0000000000002B1E                 mov     rsi, r14        ; offset
.text:0000000000002B21                 call    _lseek
.text:0000000000002B26                 test    rax, rax
.text:0000000000002B29                 jns     loc_2686
.text:0000000000002B2F                 mov     rdx, [rsp+68h+var_40]
.text:0000000000002B34                 mov     esi, 3
.text:0000000000002B39                 xor     edi, edi
.text:0000000000002B3B                 call    quotearg_n_style_colon
.text:0000000000002B40                 lea     rsi, aSSeekFailed ; "%s: seek failed"
.text:0000000000002B47                 mov     edx, 5          ; category
.text:0000000000002B4C                 xor     edi, edi        ; domainname
.text:0000000000002B4E                 mov     rbx, rax
.text:0000000000002B51                 call    _dcgettext
.text:0000000000002B56                 mov     r12, rax
.text:0000000000002B59                 call    ___errno_location
.text:0000000000002B5E                 mov     esi, [rax]      ; errnum
.text:0000000000002B60                 mov     rcx, rbx
.text:0000000000002B63                 mov     rdx, r12        ; format
.text:0000000000002B66                 xor     edi, edi        ; status
.text:0000000000002B68                 xor     eax, eax
.text:0000000000002B6A                 call    _error
.text:0000000000002B6F                 mov     rbx, cs:read_size
.text:0000000000002B76                 jmp     loc_2686
.text:0000000000002B7B ; ---------------------------------------------------------------------------
.text:0000000000002B7B
.text:0000000000002B7B loc_2B7B:                               ; CODE XREF: tac_seekable+F4↑j
.text:0000000000002B7B                 mov     rbx, rax
.text:0000000000002B7E                 jmp     loc_2761
.text:0000000000002B83 ; ---------------------------------------------------------------------------
.text:0000000000002B83
.text:0000000000002B83 loc_2B83:                               ; CODE XREF: tac_seekable+24A↑j
.text:0000000000002B83                 call    xalloc_die
.text:0000000000002B88 ; ---------------------------------------------------------------------------
.text:0000000000002B88
.text:0000000000002B88 loc_2B88:                               ; CODE XREF: tac_seekable+1C0↑j
.text:0000000000002B88                 lea     rsi, aErrorInRegular ; "error in regular expression search"
.text:0000000000002B8F                 mov     edx, 5          ; category
.text:0000000000002B94                 xor     edi, edi        ; domainname
.text:0000000000002B96                 call    _dcgettext
.text:0000000000002B9B                 xor     esi, esi        ; errnum
.text:0000000000002B9D                 mov     rdx, rax        ; format
.text:0000000000002BA0                 mov     edi, 1          ; status
.text:0000000000002BA5                 xor     eax, eax
.text:0000000000002BA7                 call    _error
.text:0000000000002BAC
.text:0000000000002BAC loc_2BAC:                               ; CODE XREF: tac_seekable+189↑j
.text:0000000000002BAC                 lea     rsi, aRecordTooLarge ; "record too large"
.text:0000000000002BB3                 mov     edx, 5          ; category
.text:0000000000002BB8                 xor     edi, edi        ; domainname
.text:0000000000002BBA                 call    _dcgettext
.text:0000000000002BBF                 xor     esi, esi        ; errnum
.text:0000000000002BC1                 mov     rdx, rax        ; format
.text:0000000000002BC4                 mov     edi, 1          ; status
.text:0000000000002BC9                 xor     eax, eax
.text:0000000000002BCB                 call    _error
.text:0000000000002BCB ; } // starts at 2630
.text:0000000000002BCB tac_seekable    endp ; sp-analysis failed
.text:0000000000002BCB
.text:0000000000002BD0
.text:0000000000002BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BD0
.text:0000000000002BD0 ; Attributes: noreturn
.text:0000000000002BD0
.text:0000000000002BD0 ; void __fastcall __noreturn usage(int status)
.text:0000000000002BD0                 public usage
.text:0000000000002BD0 usage           proc near               ; CODE XREF: main+72A↑p
.text:0000000000002BD0                                         ; main+740↑p
.text:0000000000002BD0
.text:0000000000002BD0 var_A8          = qword ptr -0A8h
.text:0000000000002BD0 var_A0          = qword ptr -0A0h
.text:0000000000002BD0 var_98          = qword ptr -98h
.text:0000000000002BD0 var_90          = qword ptr -90h
.text:0000000000002BD0 var_88          = qword ptr -88h
.text:0000000000002BD0 var_80          = qword ptr -80h
.text:0000000000002BD0 var_78          = qword ptr -78h
.text:0000000000002BD0 var_70          = qword ptr -70h
.text:0000000000002BD0 var_68          = qword ptr -68h
.text:0000000000002BD0 var_60          = qword ptr -60h
.text:0000000000002BD0 var_58          = qword ptr -58h
.text:0000000000002BD0 var_50          = qword ptr -50h
.text:0000000000002BD0 var_48          = qword ptr -48h
.text:0000000000002BD0 var_40          = qword ptr -40h
.text:0000000000002BD0 var_30          = qword ptr -30h
.text:0000000000002BD0
.text:0000000000002BD0 ; __unwind {
.text:0000000000002BD0                 push    r13
.text:0000000000002BD2                 push    r12
.text:0000000000002BD4                 mov     edx, 5          ; category
.text:0000000000002BD9                 push    rbp
.text:0000000000002BDA                 push    rbx
.text:0000000000002BDB                 mov     ebp, edi
.text:0000000000002BDD                 sub     rsp, 88h
.text:0000000000002BE4                 mov     rbx, cs:program_name
.text:0000000000002BEB                 mov     rax, fs:28h
.text:0000000000002BF4                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002BF9                 xor     eax, eax
.text:0000000000002BFB                 test    edi, edi
.text:0000000000002BFD                 jz      short loc_2C2D
.text:0000000000002BFF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002C06                 xor     edi, edi        ; domainname
.text:0000000000002C08                 call    _dcgettext
.text:0000000000002C0D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002C14                 mov     rdx, rax
.text:0000000000002C17                 mov     rcx, rbx
.text:0000000000002C1A                 mov     esi, 1
.text:0000000000002C1F                 xor     eax, eax
.text:0000000000002C21                 call    ___fprintf_chk
.text:0000000000002C26
.text:0000000000002C26 loc_2C26:                               ; CODE XREF: usage+2EE↓j
.text:0000000000002C26                 mov     edi, ebp        ; status
.text:0000000000002C28                 call    _exit
.text:0000000000002C2D ; ---------------------------------------------------------------------------
.text:0000000000002C2D
.text:0000000000002C2D loc_2C2D:                               ; CODE XREF: usage+2D↑j
.text:0000000000002C2D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000002C34                 xor     edi, edi        ; domainname
.text:0000000000002C36                 call    _dcgettext
.text:0000000000002C3B                 mov     rdx, rbx
.text:0000000000002C3E                 mov     rsi, rax
.text:0000000000002C41                 mov     edi, 1
.text:0000000000002C46                 xor     eax, eax
.text:0000000000002C48                 call    ___printf_chk
.text:0000000000002C4D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002C54                 lea     rsi, aWriteEachFileT ; "Write each FILE to standard output, las"...
.text:0000000000002C5B                 mov     edx, 5          ; category
.text:0000000000002C60                 xor     edi, edi        ; domainname
.text:0000000000002C62                 call    _dcgettext
.text:0000000000002C67                 mov     rsi, rbx        ; stream
.text:0000000000002C6A                 mov     rdi, rax        ; s
.text:0000000000002C6D                 call    _fputs_unlocked
.text:0000000000002C72                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002C79                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000002C80                 mov     edx, 5          ; category
.text:0000000000002C85                 xor     edi, edi        ; domainname
.text:0000000000002C87                 call    _dcgettext
.text:0000000000002C8C                 mov     rsi, rbx        ; stream
.text:0000000000002C8F                 mov     rdi, rax        ; s
.text:0000000000002C92                 call    _fputs_unlocked
.text:0000000000002C97                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002C9E                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002CA5                 mov     edx, 5          ; category
.text:0000000000002CAA                 xor     edi, edi        ; domainname
.text:0000000000002CAC                 call    _dcgettext
.text:0000000000002CB1                 mov     rsi, rbx        ; stream
.text:0000000000002CB4                 mov     rdi, rax        ; s
.text:0000000000002CB7                 call    _fputs_unlocked
.text:0000000000002CBC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002CC3                 lea     rsi, aBBeforeAttachT ; "  -b, --before             attach the s"...
.text:0000000000002CCA                 mov     edx, 5          ; category
.text:0000000000002CCF                 xor     edi, edi        ; domainname
.text:0000000000002CD1                 call    _dcgettext
.text:0000000000002CD6                 mov     rsi, rbx        ; stream
.text:0000000000002CD9                 mov     rdi, rax        ; s
.text:0000000000002CDC                 call    _fputs_unlocked
.text:0000000000002CE1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002CE8                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002CEF                 mov     edx, 5          ; category
.text:0000000000002CF4                 xor     edi, edi        ; domainname
.text:0000000000002CF6                 call    _dcgettext
.text:0000000000002CFB                 mov     rsi, rbx        ; stream
.text:0000000000002CFE                 mov     rdi, rax        ; s
.text:0000000000002D01                 call    _fputs_unlocked
.text:0000000000002D06                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002D0D                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002D14                 mov     edx, 5          ; category
.text:0000000000002D19                 xor     edi, edi        ; domainname
.text:0000000000002D1B                 call    _dcgettext
.text:0000000000002D20                 mov     rsi, rbx        ; stream
.text:0000000000002D23                 mov     rdi, rax        ; s
.text:0000000000002D26                 lea     rbx, aTac       ; "tac"
.text:0000000000002D2D                 call    _fputs_unlocked
.text:0000000000002D32                 lea     rax, asc_14178  ; "["
.text:0000000000002D39                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002D40                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002D49                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002D52                 mov     rdx, rsp
.text:0000000000002D55                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002D59                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002D60                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002D65                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002D6C                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002D71                 lea     rax, domainname ; "coreutils"
.text:0000000000002D78                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002D7D                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002D84                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002D89                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002D90                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002D95                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002D9A                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002DA1                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002DA6                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002DAD                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002DB2                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002DB7                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002DBC                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002DC1                 nop     dword ptr [rax+00000000h]
.text:0000000000002DC8
.text:0000000000002DC8 loc_2DC8:                               ; CODE XREF: usage+215↓j
.text:0000000000002DC8                 add     rdx, 10h
.text:0000000000002DCC                 mov     rdi, [rdx]
.text:0000000000002DCF                 test    rdi, rdi
.text:0000000000002DD2                 jz      short loc_2DE7
.text:0000000000002DD4                 mov     ecx, 4
.text:0000000000002DD9                 mov     rsi, rbx
.text:0000000000002DDC                 repe cmpsb
.text:0000000000002DDE                 setnbe  al
.text:0000000000002DE1                 sbb     al, 0
.text:0000000000002DE3                 test    al, al
.text:0000000000002DE5                 jnz     short loc_2DC8
.text:0000000000002DE7
.text:0000000000002DE7 loc_2DE7:                               ; CODE XREF: usage+202↑j
.text:0000000000002DE7                 mov     r12, [rdx+8]
.text:0000000000002DEB                 xor     edi, edi        ; domainname
.text:0000000000002DED                 mov     edx, 5          ; category
.text:0000000000002DF2                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002DF9                 test    r12, r12
.text:0000000000002DFC                 jz      loc_2EC3
.text:0000000000002E02                 call    _dcgettext
.text:0000000000002E07                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002E0E                 lea     rdx, unk_141EE
.text:0000000000002E15                 mov     rsi, rax
.text:0000000000002E18                 mov     edi, 1
.text:0000000000002E1D                 xor     eax, eax
.text:0000000000002E1F                 call    ___printf_chk
.text:0000000000002E24                 xor     esi, esi        ; locale
.text:0000000000002E26                 mov     edi, 5          ; category
.text:0000000000002E2B                 call    _setlocale
.text:0000000000002E30                 test    rax, rax
.text:0000000000002E33                 jz      short loc_2E51
.text:0000000000002E35                 lea     rsi, s2         ; "en_"
.text:0000000000002E3C                 mov     edx, 3          ; n
.text:0000000000002E41                 mov     rdi, rax        ; s1
.text:0000000000002E44                 call    _strncmp
.text:0000000000002E49                 test    eax, eax
.text:0000000000002E4B                 jnz     loc_2F58
.text:0000000000002E51
.text:0000000000002E51 loc_2E51:                               ; CODE XREF: usage+263↑j
.text:0000000000002E51                                         ; usage+3AD↓j
.text:0000000000002E51                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002E58                 xor     edi, edi        ; domainname
.text:0000000000002E5A                 mov     edx, 5          ; category
.text:0000000000002E5F                 call    _dcgettext
.text:0000000000002E64                 lea     rcx, aTac       ; "tac"
.text:0000000000002E6B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002E72                 mov     rsi, rax
.text:0000000000002E75                 mov     edi, 1
.text:0000000000002E7A                 xor     eax, eax
.text:0000000000002E7C                 call    ___printf_chk
.text:0000000000002E81                 cmp     r12, rbx
.text:0000000000002E84                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002E8B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002E92                 cmovz   rbx, rcx
.text:0000000000002E96
.text:0000000000002E96 loc_2E96:                               ; CODE XREF: usage+37C↓j
.text:0000000000002E96                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002E9D                 xor     edi, edi        ; domainname
.text:0000000000002E9F                 mov     edx, 5          ; category
.text:0000000000002EA4                 call    _dcgettext
.text:0000000000002EA9                 mov     rcx, rbx
.text:0000000000002EAC                 mov     rsi, rax
.text:0000000000002EAF                 mov     rdx, r12
.text:0000000000002EB2                 mov     edi, 1
.text:0000000000002EB7                 xor     eax, eax
.text:0000000000002EB9                 call    ___printf_chk
.text:0000000000002EBE                 jmp     loc_2C26
.text:0000000000002EC3 ; ---------------------------------------------------------------------------
.text:0000000000002EC3
.text:0000000000002EC3 loc_2EC3:                               ; CODE XREF: usage+22C↑j
.text:0000000000002EC3                 call    _dcgettext
.text:0000000000002EC8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002ECF                 lea     rdx, unk_141EE
.text:0000000000002ED6                 mov     rsi, rax
.text:0000000000002ED9                 mov     edi, 1
.text:0000000000002EDE                 xor     eax, eax
.text:0000000000002EE0                 call    ___printf_chk
.text:0000000000002EE5                 xor     esi, esi        ; locale
.text:0000000000002EE7                 mov     edi, 5          ; category
.text:0000000000002EEC                 call    _setlocale
.text:0000000000002EF1                 test    rax, rax
.text:0000000000002EF4                 jz      short loc_2F0E
.text:0000000000002EF6                 lea     rsi, s2         ; "en_"
.text:0000000000002EFD                 mov     edx, 3          ; n
.text:0000000000002F02                 mov     rdi, rax        ; s1
.text:0000000000002F05                 call    _strncmp
.text:0000000000002F0A                 test    eax, eax
.text:0000000000002F0C                 jnz     short loc_2F51
.text:0000000000002F0E
.text:0000000000002F0E loc_2F0E:                               ; CODE XREF: usage+324↑j
.text:0000000000002F0E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002F15                 mov     edx, 5          ; category
.text:0000000000002F1A                 xor     edi, edi        ; domainname
.text:0000000000002F1C                 lea     r12, aTac       ; "tac"
.text:0000000000002F23                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002F2A                 call    _dcgettext
.text:0000000000002F2F                 lea     rcx, aTac       ; "tac"
.text:0000000000002F36                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002F3D                 mov     rsi, rax
.text:0000000000002F40                 mov     edi, 1
.text:0000000000002F45                 xor     eax, eax
.text:0000000000002F47                 call    ___printf_chk
.text:0000000000002F4C                 jmp     loc_2E96
.text:0000000000002F51 ; ---------------------------------------------------------------------------
.text:0000000000002F51
.text:0000000000002F51 loc_2F51:                               ; CODE XREF: usage+33C↑j
.text:0000000000002F51                 lea     r12, aTac       ; "tac"
.text:0000000000002F58
.text:0000000000002F58 loc_2F58:                               ; CODE XREF: usage+27B↑j
.text:0000000000002F58                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F5F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002F66                 xor     edi, edi        ; domainname
.text:0000000000002F68                 mov     edx, 5          ; category
.text:0000000000002F6D                 call    _dcgettext
.text:0000000000002F72                 mov     rsi, r13        ; stream
.text:0000000000002F75                 mov     rdi, rax        ; s
.text:0000000000002F78                 call    _fputs_unlocked
.text:0000000000002F7D                 jmp     loc_2E51
.text:0000000000002F7D ; } // starts at 2BD0
.text:0000000000002F7D usage           endp
.text:0000000000002F7D
.text:0000000000002F7D ; ---------------------------------------------------------------------------
.text:0000000000002F82                 align 10h
.text:0000000000002F90
.text:0000000000002F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F90
.text:0000000000002F90
.text:0000000000002F90                 public close_stdout_set_file_name
.text:0000000000002F90 close_stdout_set_file_name proc near
.text:0000000000002F90 ; __unwind {
.text:0000000000002F90                 mov     cs:file_name, rdi
.text:0000000000002F97                 retn
.text:0000000000002F97 ; } // starts at 2F90
.text:0000000000002F97 close_stdout_set_file_name endp
.text:0000000000002F97
.text:0000000000002F97 ; ---------------------------------------------------------------------------
.text:0000000000002F98                 align 20h
.text:0000000000002FA0
.text:0000000000002FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FA0
.text:0000000000002FA0
.text:0000000000002FA0                 public close_stdout_set_ignore_EPIPE
.text:0000000000002FA0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002FA0 ; __unwind {
.text:0000000000002FA0                 mov     cs:ignore_EPIPE, dil
.text:0000000000002FA7                 retn
.text:0000000000002FA7 ; } // starts at 2FA0
.text:0000000000002FA7 close_stdout_set_ignore_EPIPE endp
.text:0000000000002FA7
.text:0000000000002FA7 ; ---------------------------------------------------------------------------
.text:0000000000002FA8                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FB0
.text:0000000000002FB0 ; Attributes: info_from_lumina
.text:0000000000002FB0
.text:0000000000002FB0 ; void __cdecl close_stdout()
.text:0000000000002FB0                 public close_stdout
.text:0000000000002FB0 close_stdout    proc near               ; DATA XREF: main+52↑o
.text:0000000000002FB0 ; __unwind {
.text:0000000000002FB0                 push    rbp
.text:0000000000002FB1                 push    rbx
.text:0000000000002FB2                 sub     rsp, 8
.text:0000000000002FB6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002FBD                 call    close_stream
.text:0000000000002FC2                 test    eax, eax
.text:0000000000002FC4                 jz      short loc_2FDC
.text:0000000000002FC6                 call    ___errno_location
.text:0000000000002FCB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002FD2                 mov     rbx, rax
.text:0000000000002FD5                 jz      short loc_2FF3
.text:0000000000002FD7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000002FDA                 jnz     short loc_2FF3
.text:0000000000002FDC
.text:0000000000002FDC loc_2FDC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000002FDC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002FE3                 call    close_stream
.text:0000000000002FE8                 test    eax, eax
.text:0000000000002FEA                 jnz     short loc_3032
.text:0000000000002FEC                 add     rsp, 8
.text:0000000000002FF0                 pop     rbx
.text:0000000000002FF1                 pop     rbp
.text:0000000000002FF2                 retn
.text:0000000000002FF3 ; ---------------------------------------------------------------------------
.text:0000000000002FF3
.text:0000000000002FF3 loc_2FF3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002FF3                                         ; close_stdout+2A↑j
.text:0000000000002FF3                 lea     rsi, aSWriteError+4 ; msgid
.text:0000000000002FFA                 xor     edi, edi        ; domainname
.text:0000000000002FFC                 mov     edx, 5          ; category
.text:0000000000003001                 call    _dcgettext
.text:0000000000003006                 mov     rdi, cs:file_name
.text:000000000000300D                 mov     rbp, rax
.text:0000000000003010                 test    rdi, rdi
.text:0000000000003013                 jz      short loc_303D
.text:0000000000003015                 call    quotearg_colon
.text:000000000000301A                 mov     esi, [rbx]      ; errnum
.text:000000000000301C                 lea     rdx, aS         ; "%s: "
.text:0000000000003023                 mov     rcx, rax
.text:0000000000003026                 mov     r8, rbp
.text:0000000000003029                 xor     edi, edi        ; status
.text:000000000000302B                 xor     eax, eax
.text:000000000000302D                 call    _error
.text:0000000000003032
.text:0000000000003032 loc_3032:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003032                                         ; close_stdout+A2↓j
.text:0000000000003032                 mov     edi, cs:exit_failure ; status
.text:0000000000003038                 call    __exit
.text:000000000000303D ; ---------------------------------------------------------------------------
.text:000000000000303D
.text:000000000000303D loc_303D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000303D                 mov     esi, [rbx]      ; errnum
.text:000000000000303F                 lea     rdx, format     ; format
.text:0000000000003046                 mov     rcx, rax
.text:0000000000003049                 xor     edi, edi        ; status
.text:000000000000304B                 xor     eax, eax
.text:000000000000304D                 call    _error
.text:0000000000003052                 jmp     short loc_3032
.text:0000000000003052 ; } // starts at 2FB0
.text:0000000000003052 close_stdout    endp
.text:0000000000003052
.text:0000000000003052 ; ---------------------------------------------------------------------------
.text:0000000000003054                 align 20h
.text:0000000000003060
.text:0000000000003060 ; =============== S U B R O U T I N E =======================================
.text:0000000000003060
.text:0000000000003060
.text:0000000000003060 ; __int64 __fastcall mfile_name_concat(void *src, void *)
.text:0000000000003060                 public mfile_name_concat
.text:0000000000003060 mfile_name_concat proc near             ; CODE XREF: main+5AF↑p
.text:0000000000003060
.text:0000000000003060 var_48          = qword ptr -48h
.text:0000000000003060 var_39          = byte ptr -39h
.text:0000000000003060
.text:0000000000003060 ; __unwind {
.text:0000000000003060                 push    r15
.text:0000000000003062                 push    r14
.text:0000000000003064                 mov     r15, rdx
.text:0000000000003067                 push    r13
.text:0000000000003069                 push    r12
.text:000000000000306B                 mov     r12, rdi
.text:000000000000306E                 push    rbp
.text:000000000000306F                 push    rbx
.text:0000000000003070                 mov     rbp, rsi
.text:0000000000003073                 sub     rsp, 18h
.text:0000000000003077                 call    last_component
.text:000000000000307C                 mov     rbx, rax
.text:000000000000307F                 mov     rdi, rax
.text:0000000000003082                 call    base_len
.text:0000000000003087                 sub     rbx, r12
.text:000000000000308A                 mov     r13, rax
.text:000000000000308D                 mov     rdi, rbp        ; s
.text:0000000000003090                 add     rbx, rax
.text:0000000000003093                 call    _strlen
.text:0000000000003098                 test    r13, r13
.text:000000000000309B                 mov     r14, rax
.text:000000000000309E                 jz      short loc_30D0
.text:00000000000030A0                 cmp     byte ptr [r12+rbx-1], 2Fh ; '/'
.text:00000000000030A6                 jz      loc_3150
.text:00000000000030AC                 xor     eax, eax
.text:00000000000030AE                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:00000000000030B2                 mov     edx, 0
.text:00000000000030B7                 setnz   al
.text:00000000000030BA                 mov     [rsp+48h+var_48], rax
.text:00000000000030BE                 mov     eax, 2Fh ; '/'
.text:00000000000030C3                 cmovz   eax, edx
.text:00000000000030C6                 mov     [rsp+48h+var_39], al
.text:00000000000030CA                 jmp     short loc_30EE
.text:00000000000030CA ; ---------------------------------------------------------------------------
.text:00000000000030CC                 align 10h
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: mfile_name_concat+3E↑j
.text:00000000000030D0                 xor     eax, eax
.text:00000000000030D2                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:00000000000030D6                 mov     edx, 0
.text:00000000000030DB                 setz    al
.text:00000000000030DE                 mov     [rsp+48h+var_48], rax
.text:00000000000030E2                 mov     eax, 2Eh ; '.'
.text:00000000000030E7                 cmovnz  eax, edx
.text:00000000000030EA                 mov     [rsp+48h+var_39], al
.text:00000000000030EE
.text:00000000000030EE loc_30EE:                               ; CODE XREF: mfile_name_concat+6A↑j
.text:00000000000030EE                                         ; mfile_name_concat+FD↓j
.text:00000000000030EE                 lea     rdi, [rbx+r14+1]
.text:00000000000030F3                 add     rdi, [rsp+48h+var_48] ; size
.text:00000000000030F7                 call    _malloc
.text:00000000000030FC                 test    rax, rax
.text:00000000000030FF                 mov     r13, rax
.text:0000000000003102                 jz      short loc_3136
.text:0000000000003104                 mov     rdi, rax        ; dest
.text:0000000000003107                 mov     rdx, rbx        ; n
.text:000000000000310A                 mov     rsi, r12        ; src
.text:000000000000310D                 call    _mempcpy
.text:0000000000003112                 movzx   ecx, [rsp+48h+var_39]
.text:0000000000003117                 mov     rdi, [rsp+48h+var_48]
.text:000000000000311B                 add     rdi, rax        ; dest
.text:000000000000311E                 test    r15, r15
.text:0000000000003121                 mov     [rax], cl
.text:0000000000003123                 jz      short loc_3128
.text:0000000000003125                 mov     [r15], rdi
.text:0000000000003128
.text:0000000000003128 loc_3128:                               ; CODE XREF: mfile_name_concat+C3↑j
.text:0000000000003128                 mov     rdx, r14        ; n
.text:000000000000312B                 mov     rsi, rbp        ; src
.text:000000000000312E                 call    _mempcpy
.text:0000000000003133                 mov     byte ptr [rax], 0
.text:0000000000003136
.text:0000000000003136 loc_3136:                               ; CODE XREF: mfile_name_concat+A2↑j
.text:0000000000003136                 add     rsp, 18h
.text:000000000000313A                 mov     rax, r13
.text:000000000000313D                 pop     rbx
.text:000000000000313E                 pop     rbp
.text:000000000000313F                 pop     r12
.text:0000000000003141                 pop     r13
.text:0000000000003143                 pop     r14
.text:0000000000003145                 pop     r15
.text:0000000000003147                 retn
.text:0000000000003147 ; ---------------------------------------------------------------------------
.text:0000000000003148                 align 10h
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: mfile_name_concat+46↑j
.text:0000000000003150                 mov     [rsp+48h+var_48], 0
.text:0000000000003158                 mov     [rsp+48h+var_39], 0
.text:000000000000315D                 jmp     short loc_30EE
.text:000000000000315D ; } // starts at 3060
.text:000000000000315D mfile_name_concat endp
.text:000000000000315D
.text:000000000000315D ; ---------------------------------------------------------------------------
.text:000000000000315F                 align 20h
.text:0000000000003160
.text:0000000000003160 ; =============== S U B R O U T I N E =======================================
.text:0000000000003160
.text:0000000000003160
.text:0000000000003160                 public set_program_name
.text:0000000000003160 set_program_name proc near              ; CODE XREF: main+1D↑p
.text:0000000000003160 ; __unwind {
.text:0000000000003160                 test    rdi, rdi
.text:0000000000003163                 push    rbx
.text:0000000000003164                 jz      short loc_31DD
.text:0000000000003166                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000316B                 mov     rbx, rdi
.text:000000000000316E                 call    _strrchr
.text:0000000000003173                 test    rax, rax
.text:0000000000003176                 jz      short loc_31CD
.text:0000000000003178                 lea     r8, [rax+1]
.text:000000000000317C                 mov     rdx, r8
.text:000000000000317F                 sub     rdx, rbx
.text:0000000000003182                 cmp     rdx, 6
.text:0000000000003186                 jle     short loc_31CD
.text:0000000000003188                 lea     rsi, [rax-6]
.text:000000000000318C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003193                 mov     ecx, 7
.text:0000000000003198                 repe cmpsb
.text:000000000000319A                 setnbe  dl
.text:000000000000319D                 sbb     dl, 0
.text:00000000000031A0                 test    dl, dl
.text:00000000000031A2                 jnz     short loc_31CD
.text:00000000000031A4                 lea     rdi, aLt        ; "lt-"
.text:00000000000031AB                 mov     ecx, 3
.text:00000000000031B0                 mov     rsi, r8
.text:00000000000031B3                 mov     rbx, r8
.text:00000000000031B6                 repe cmpsb
.text:00000000000031B8                 setnbe  dl
.text:00000000000031BB                 sbb     dl, 0
.text:00000000000031BE                 test    dl, dl
.text:00000000000031C0                 jnz     short loc_31CD
.text:00000000000031C2                 lea     rbx, [rax+4]
.text:00000000000031C6                 mov     cs:__bss_start, rbx
.text:00000000000031CD
.text:00000000000031CD loc_31CD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000031CD                                         ; set_program_name+26↑j ...
.text:00000000000031CD                 mov     cs:program_name, rbx
.text:00000000000031D4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000031DB                 pop     rbx
.text:00000000000031DC                 retn
.text:00000000000031DD ; ---------------------------------------------------------------------------
.text:00000000000031DD
.text:00000000000031DD loc_31DD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000031DD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000031E4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000031EB                 mov     edx, 37h ; '7'  ; n
.text:00000000000031F0                 mov     esi, 1          ; size
.text:00000000000031F5                 call    _fwrite
.text:00000000000031FA                 call    _abort
.text:00000000000031FA ; } // starts at 3160
.text:00000000000031FA set_program_name endp
.text:00000000000031FA
.text:00000000000031FA ; ---------------------------------------------------------------------------
.text:00000000000031FF                 align 20h
.text:0000000000003200
.text:0000000000003200 ; =============== S U B R O U T I N E =======================================
.text:0000000000003200
.text:0000000000003200 ; Attributes: info_from_lumina
.text:0000000000003200
.text:0000000000003200 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000003200 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000003200                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000003200 ; __unwind {
.text:0000000000003200                 push    rbp
.text:0000000000003201                 push    rbx
.text:0000000000003202                 mov     rbp, rdi
.text:0000000000003205                 mov     ebx, esi
.text:0000000000003207                 sub     rsp, 8
.text:000000000000320B                 call    locale_charset
.text:0000000000003210                 movzx   edx, byte ptr [rax]
.text:0000000000003213                 and     edx, 0FFFFFFDFh
.text:0000000000003216                 cmp     dl, 55h ; 'U'
.text:0000000000003219                 jz      short loc_3290
.text:000000000000321B                 cmp     dl, 47h ; 'G'
.text:000000000000321E                 jz      short loc_3240
.text:0000000000003220
.text:0000000000003220 loc_3220:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000003220                                         ; gettext_quote+50↓j ...
.text:0000000000003220                 lea     rax, unk_146DB
.text:0000000000003227                 lea     rdx, asc_146DD  ; "'"
.text:000000000000322E                 cmp     ebx, 9
.text:0000000000003231                 cmovnz  rax, rdx
.text:0000000000003235                 add     rsp, 8
.text:0000000000003239                 pop     rbx
.text:000000000000323A                 pop     rbp
.text:000000000000323B                 retn
.text:000000000000323B ; ---------------------------------------------------------------------------
.text:000000000000323C                 align 20h
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003240                 movzx   edx, byte ptr [rax+1]
.text:0000000000003244                 and     edx, 0FFFFFFDFh
.text:0000000000003247                 cmp     dl, 42h ; 'B'
.text:000000000000324A                 jnz     short loc_3220
.text:000000000000324C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003250                 jnz     short loc_3220
.text:0000000000003252                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003256                 jnz     short loc_3220
.text:0000000000003258                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000325C                 jnz     short loc_3220
.text:000000000000325E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003262                 jnz     short loc_3220
.text:0000000000003264                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003268                 jnz     short loc_3220
.text:000000000000326A                 cmp     byte ptr [rax+7], 0
.text:000000000000326E                 jnz     short loc_3220
.text:0000000000003270                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003274                 lea     rax, unk_146D4
.text:000000000000327B                 lea     rdx, unk_146D8
.text:0000000000003282                 cmovnz  rax, rdx
.text:0000000000003286                 add     rsp, 8
.text:000000000000328A                 pop     rbx
.text:000000000000328B                 pop     rbp
.text:000000000000328C                 retn
.text:000000000000328C ; ---------------------------------------------------------------------------
.text:000000000000328D                 align 10h
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003290                 movzx   edx, byte ptr [rax+1]
.text:0000000000003294                 and     edx, 0FFFFFFDFh
.text:0000000000003297                 cmp     dl, 54h ; 'T'
.text:000000000000329A                 jnz     short loc_3220
.text:000000000000329C                 movzx   edx, byte ptr [rax+2]
.text:00000000000032A0                 and     edx, 0FFFFFFDFh
.text:00000000000032A3                 cmp     dl, 46h ; 'F'
.text:00000000000032A6                 jnz     loc_3220
.text:00000000000032AC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000032B0                 jnz     loc_3220
.text:00000000000032B6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000032BA                 jnz     loc_3220
.text:00000000000032C0                 cmp     byte ptr [rax+5], 0
.text:00000000000032C4                 jnz     loc_3220
.text:00000000000032CA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000032CE                 lea     rax, unk_146CC
.text:00000000000032D5                 lea     rdx, unk_146D0
.text:00000000000032DC                 cmovnz  rax, rdx
.text:00000000000032E0                 add     rsp, 8
.text:00000000000032E4                 pop     rbx
.text:00000000000032E5                 pop     rbp
.text:00000000000032E6                 retn
.text:00000000000032E6 ; } // starts at 3200
.text:00000000000032E6 gettext_quote   endp
.text:00000000000032E6
.text:00000000000032E6 ; ---------------------------------------------------------------------------
.text:00000000000032E7                 align 10h
.text:00000000000032F0
.text:00000000000032F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032F0
.text:00000000000032F0 ; Attributes: info_from_lumina
.text:00000000000032F0
.text:00000000000032F0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000032F0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000032F0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000032F0
.text:00000000000032F0 var_E0          = dword ptr -0E0h
.text:00000000000032F0 var_DB          = byte ptr -0DBh
.text:00000000000032F0 var_DA          = byte ptr -0DAh
.text:00000000000032F0 var_D9          = byte ptr -0D9h
.text:00000000000032F0 s               = qword ptr -0D8h
.text:00000000000032F0 n               = qword ptr -0D0h
.text:00000000000032F0 var_C8          = qword ptr -0C8h
.text:00000000000032F0 ps              = qword ptr -0C0h
.text:00000000000032F0 var_B8          = qword ptr -0B8h
.text:00000000000032F0 var_B0          = qword ptr -0B0h
.text:00000000000032F0 var_A8          = qword ptr -0A8h
.text:00000000000032F0 s2              = qword ptr -0A0h
.text:00000000000032F0 var_98          = qword ptr -98h
.text:00000000000032F0 var_90          = qword ptr -90h
.text:00000000000032F0 var_88          = qword ptr -88h
.text:00000000000032F0 var_80          = qword ptr -80h
.text:00000000000032F0 var_78          = qword ptr -78h
.text:00000000000032F0 var_70          = dword ptr -70h
.text:00000000000032F0 var_6C          = byte ptr -6Ch
.text:00000000000032F0 var_6B          = byte ptr -6Bh
.text:00000000000032F0 var_6A          = byte ptr -6Ah
.text:00000000000032F0 var_69          = byte ptr -69h
.text:00000000000032F0 var_68          = qword ptr -68h
.text:00000000000032F0 var_60          = qword ptr -60h
.text:00000000000032F0 wc              = dword ptr -4Ch
.text:00000000000032F0 var_48          = qword ptr -48h
.text:00000000000032F0 var_40          = qword ptr -40h
.text:00000000000032F0 arg_0           = qword ptr  8
.text:00000000000032F0 arg_8           = qword ptr  10h
.text:00000000000032F0 arg_10          = qword ptr  18h
.text:00000000000032F0
.text:00000000000032F0 ; __unwind {
.text:00000000000032F0                 push    r15
.text:00000000000032F2                 push    r14
.text:00000000000032F4                 mov     r15d, r8d
.text:00000000000032F7                 push    r13
.text:00000000000032F9                 push    r12
.text:00000000000032FB                 mov     r14, rdi
.text:00000000000032FE                 push    rbp
.text:00000000000032FF                 push    rbx
.text:0000000000003300                 mov     ebx, r9d
.text:0000000000003303                 mov     r13, rsi
.text:0000000000003306                 mov     rbp, rcx
.text:0000000000003309                 and     ebx, 2
.text:000000000000330C                 sub     rsp, 0B8h
.text:0000000000003313                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000331B                 mov     [rsp+0E8h+s], rdx
.text:0000000000003320                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003325                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000332A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000332F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003337                 mov     [rsp+0E8h+var_80], rax
.text:000000000000333C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003344                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003349                 mov     rax, fs:28h
.text:0000000000003352                 mov     [rsp+0E8h+var_40], rax
.text:000000000000335A                 xor     eax, eax
.text:000000000000335C                 call    ___ctype_get_mb_cur_max
.text:0000000000003361                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003365                 mov     [rsp+0E8h+var_90], rax
.text:000000000000336A                 ja      def_3381        ; jumptable 00000000000121F1 default case
.text:0000000000003370                 lea     rcx, jpt_3381
.text:0000000000003377                 mov     edx, r15d
.text:000000000000337A                 movsxd  rax, ds:(jpt_3381 - 14740h)[rcx+rdx*4]
.text:000000000000337E                 add     rax, rcx
.text:0000000000003381                 jmp     rax             ; switch jump
.text:0000000000003383 ; ---------------------------------------------------------------------------
.text:0000000000003383
.text:0000000000003383 loc_3383:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003383                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003383                                         ; DATA XREF: ...
.text:0000000000003383                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003388                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000338D                 xor     r12d, r12d
.text:0000000000003390                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003399                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000339E                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000033A3
.text:00000000000033A3 loc_33A3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000033A3                 lea     rax, asc_146DD  ; "'"
.text:00000000000033AA                 mov     [rsp+0E8h+n], 1
.text:00000000000033B3                 xor     r15d, r15d
.text:00000000000033B6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033BE                 mov     [rsp+0E8h+s2], rax
.text:00000000000033C3
.text:00000000000033C3 loc_33C3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000033C3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000033C3                 xor     r11d, r11d
.text:00000000000033C6                 mov     rax, rbp
.text:00000000000033C9                 mov     r8d, r12d
.text:00000000000033CC                 mov     rbp, r11
.text:00000000000033CF                 mov     r11, rax
.text:00000000000033D2                 nop     word ptr [rax+rax+00h]
.text:00000000000033D8
.text:00000000000033D8 loc_33D8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000033D8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000033D8                 cmp     r11, rbp
.text:00000000000033DB                 setnz   r12b
.text:00000000000033DF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000033E3                 jnz     short loc_33F2
.text:00000000000033E5                 mov     rax, [rsp+0E8h+s]
.text:00000000000033EA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000033EE                 setnz   r12b
.text:00000000000033F2
.text:00000000000033F2 loc_33F2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000033F2                 test    r12b, r12b
.text:00000000000033F5                 jz      loc_3A50
.text:00000000000033FB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003400                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003405                 lea     r9, [rdi+rbp]
.text:0000000000003409                 setnz   al
.text:000000000000340C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003410                 mov     r10d, eax
.text:0000000000003413                 jz      loc_34C0
.text:0000000000003419                 mov     rax, [rsp+0E8h+n]
.text:000000000000341E                 test    rax, rax
.text:0000000000003421                 jz      loc_3850
.text:0000000000003427                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000342B                 lea     rbx, [rbp+rax+0]
.text:0000000000003430                 jnz     short loc_3460
.text:0000000000003432                 cmp     rax, 1
.text:0000000000003436                 jbe     short loc_3460
.text:0000000000003438                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000343D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003442                 mov     [rsp+0E8h+ps], r9
.text:0000000000003447                 call    _strlen
.text:000000000000344C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003452                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003458                 mov     r11, rax
.text:000000000000345B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003460                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003460                 cmp     rbx, r11
.text:0000000000003463                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003468                 ja      loc_3A20
.text:000000000000346E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003473                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003478                 mov     rdi, r9         ; s1
.text:000000000000347B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003480                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003485                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000348A                 call    _memcmp
.text:000000000000348F                 test    eax, eax
.text:0000000000003491                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003496                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000349C                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000034A1                 jnz     loc_3A20
.text:00000000000034A7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000034AC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000034B2                 jnz     loc_4435
.text:00000000000034B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000034C0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000034C0                 movzx   ebx, byte ptr [r9]
.text:00000000000034C4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000034C7                 ja      def_34DE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000034CD                 lea     rcx, jpt_34DE
.text:00000000000034D4                 movzx   edx, bl
.text:00000000000034D7                 movsxd  rax, ds:(jpt_34DE - 1476Ch)[rcx+rdx*4]
.text:00000000000034DB                 add     rax, rcx
.text:00000000000034DE                 jmp     rax             ; switch jump
.text:00000000000034E0 ; ---------------------------------------------------------------------------
.text:00000000000034E0
.text:00000000000034E0 loc_34E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000034E0                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000034E0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000034E3
.text:00000000000034E3 loc_34E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000034E3                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:00000000000034E3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000034E7                 setnz   al
.text:00000000000034EA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000034EE                 jnz     short loc_34FC
.text:00000000000034F0                 mov     rax, [rsp+0E8h+s]
.text:00000000000034F5                 cmp     byte ptr [rax+1], 0
.text:00000000000034F9                 setnz   al
.text:00000000000034FC
.text:00000000000034FC loc_34FC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000034FC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003501                 setz    dl
.text:0000000000003504                 test    al, al
.text:0000000000003506                 jz      loc_3758
.text:000000000000350C
.text:000000000000350C loc_350C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000350C                 xor     r12d, r12d
.text:000000000000350F                 xor     eax, eax
.text:0000000000003511                 nop     dword ptr [rax+00000000h]
.text:0000000000003518
.text:0000000000003518 loc_3518:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003518                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003518                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000351D                 jnz     loc_3632
.text:0000000000003523                 test    dl, dl
.text:0000000000003525                 jnz     loc_3632
.text:000000000000352B
.text:000000000000352B loc_352B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000352B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003530                 test    rsi, rsi
.text:0000000000003533                 jz      short loc_3549
.text:0000000000003535                 mov     edx, ebx
.text:0000000000003537                 shr     dl, 5
.text:000000000000353A                 movzx   edx, dl
.text:000000000000353D                 mov     edx, [rsi+rdx*4]
.text:0000000000003540                 bt      edx, ebx
.text:0000000000003543                 jb      loc_3693
.text:0000000000003549
.text:0000000000003549 loc_3549:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003549                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003549                 test    r10b, r10b
.text:000000000000354C                 jnz     loc_3693
.text:0000000000003552                 xor     eax, 1
.text:0000000000003555                 add     rbp, 1
.text:0000000000003559                 and     eax, r8d
.text:000000000000355C
.text:000000000000355C loc_355C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000355C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000355C                 test    al, al
.text:000000000000355E                 jz      short loc_3580
.text:0000000000003560                 cmp     r13, r15
.text:0000000000003563                 jbe     short loc_356A
.text:0000000000003565                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000356A
.text:000000000000356A loc_356A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000356A                 lea     rax, [r15+1]
.text:000000000000356E                 cmp     r13, rax
.text:0000000000003571                 jbe     short loc_3579
.text:0000000000003573                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003579
.text:0000000000003579 loc_3579:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003579                 add     r15, 2
.text:000000000000357D                 xor     r8d, r8d
.text:0000000000003580
.text:0000000000003580 loc_3580:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003580                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003580                 cmp     r15, r13
.text:0000000000003583                 jnb     short loc_3589
.text:0000000000003585                 mov     [r14+r15], bl
.text:0000000000003589
.text:0000000000003589 loc_3589:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003589                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000358E                 add     r15, 1
.text:0000000000003592                 mov     eax, 0
.text:0000000000003597                 test    r12b, r12b
.text:000000000000359A                 cmovz   edi, eax
.text:000000000000359D                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000035A2                 jmp     loc_33D8
.text:00000000000035A2 ; ---------------------------------------------------------------------------
.text:00000000000035A7                 align 10h
.text:00000000000035B0
.text:00000000000035B0 loc_35B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000035B0                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000035B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000035B3
.text:00000000000035B3 loc_35B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035B3                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:00000000000035B3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000035B7                 cmp     eax, 2
.text:00000000000035BA                 jz      loc_3B78
.text:00000000000035C0                 cmp     eax, 5
.text:00000000000035C3                 jz      loc_3B38
.text:00000000000035C9                 cmp     eax, 2
.text:00000000000035CC                 mov     ebx, 3Fh ; '?'
.text:00000000000035D1                 setz    dl
.text:00000000000035D4                 xor     r12d, r12d
.text:00000000000035D7                 xor     eax, eax
.text:00000000000035D9                 jmp     loc_3518
.text:00000000000035D9 ; ---------------------------------------------------------------------------
.text:00000000000035DE                 align 20h
.text:00000000000035E0
.text:00000000000035E0 loc_35E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000035E0                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000035E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000035E3
.text:00000000000035E3 loc_35E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035E3                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:00000000000035E3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000035E8                 jz      loc_3AF0
.text:00000000000035EE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000035F3                 xor     edx, edx
.text:00000000000035F5                 xor     eax, eax
.text:00000000000035F7                 mov     ebx, 27h ; '''
.text:00000000000035FC                 jmp     loc_3518
.text:00000000000035FC ; ---------------------------------------------------------------------------
.text:0000000000003601                 align 8
.text:0000000000003608
.text:0000000000003608 loc_3608:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003608                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:0000000000003608                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000360D                 mov     ebx, 74h ; 't'
.text:0000000000003612
.text:0000000000003612 loc_3612:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003612                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003612                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003617                 setz    al
.text:000000000000361A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000361E                 jnz     loc_376E
.text:0000000000003624
.text:0000000000003624 loc_3624:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003624                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003624                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003629                 jnz     short loc_3690
.text:000000000000362B
.text:000000000000362B loc_362B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000362B                 mov     ebx, edx
.text:000000000000362D                 xor     r12d, r12d
.text:0000000000003630                 xor     eax, eax
.text:0000000000003632
.text:0000000000003632 loc_3632:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003632                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003632                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003637                 jnz     loc_352B
.text:000000000000363D                 jmp     loc_3549
.text:000000000000363D ; ---------------------------------------------------------------------------
.text:0000000000003642                 align 8
.text:0000000000003648
.text:0000000000003648 loc_3648:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003648                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:0000000000003648                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000364D                 mov     ebx, 62h ; 'b'
.text:0000000000003652                 jmp     short loc_3624
.text:0000000000003652 ; ---------------------------------------------------------------------------
.text:0000000000003654                 align 8
.text:0000000000003658
.text:0000000000003658 loc_3658:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003658                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:0000000000003658                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000365D                 jz      loc_3A30
.text:0000000000003663                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003668                 jz      loc_3880
.text:000000000000366E
.text:000000000000366E loc_366E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000366E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003673                 jz      loc_3880
.text:0000000000003679                 cmp     [rsp+0E8h+n], 0
.text:000000000000367F                 jnz     loc_3A3B
.text:0000000000003685                 mov     ebx, 5Ch ; '\'
.text:000000000000368A                 nop     word ptr [rax+rax+00h]
.text:0000000000003690
.text:0000000000003690 loc_3690:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003690                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003690                 xor     r12d, r12d
.text:0000000000003693
.text:0000000000003693 loc_3693:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003693                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003693                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003698                 setz    dl
.text:000000000000369B                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000036A0                 mov     eax, edx
.text:00000000000036A2                 jnz     loc_3EF8
.text:00000000000036A8                 mov     eax, r8d
.text:00000000000036AB                 xor     eax, 1
.text:00000000000036AE                 and     al, dl
.text:00000000000036B0                 jz      short loc_36E1
.text:00000000000036B2                 cmp     r13, r15
.text:00000000000036B5                 jbe     short loc_36BC
.text:00000000000036B7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000036BC
.text:00000000000036BC loc_36BC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000036BC                 lea     rdx, [r15+1]
.text:00000000000036C0                 cmp     r13, rdx
.text:00000000000036C3                 jbe     short loc_36CB
.text:00000000000036C5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000036CB
.text:00000000000036CB loc_36CB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000036CB                 lea     rdx, [r15+2]
.text:00000000000036CF                 cmp     r13, rdx
.text:00000000000036D2                 jbe     short loc_36DA
.text:00000000000036D4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000036DA
.text:00000000000036DA loc_36DA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000036DA                 add     r15, 3
.text:00000000000036DE                 mov     r8d, eax
.text:00000000000036E1
.text:00000000000036E1 loc_36E1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000036E1                 cmp     r13, r15
.text:00000000000036E4                 jbe     short loc_36EB
.text:00000000000036E6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000036EB
.text:00000000000036EB loc_36EB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000036EB                 add     r15, 1
.text:00000000000036EF                 add     rbp, 1
.text:00000000000036F3                 jmp     loc_3580
.text:00000000000036F3 ; ---------------------------------------------------------------------------
.text:00000000000036F8                 align 20h
.text:0000000000003700
.text:0000000000003700 loc_3700:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003700                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:0000000000003700                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003705                 jnz     loc_38D3
.text:000000000000370B                 xor     edx, edx
.text:000000000000370D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003712                 jz      loc_362B
.text:0000000000003718                 add     rbp, 1
.text:000000000000371C                 jmp     loc_33D8
.text:000000000000371C ; ---------------------------------------------------------------------------
.text:0000000000003721                 align 8
.text:0000000000003728
.text:0000000000003728 loc_3728:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003728                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:0000000000003728                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000372D                 setz    dl
.text:0000000000003730                 xor     eax, eax
.text:0000000000003732                 jmp     loc_3518
.text:0000000000003732 ; ---------------------------------------------------------------------------
.text:0000000000003737                 align 20h
.text:0000000000003740
.text:0000000000003740 loc_3740:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003740                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:0000000000003740                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003745                 mov     ebx, 61h ; 'a'
.text:000000000000374A                 jmp     loc_3624
.text:000000000000374A ; ---------------------------------------------------------------------------
.text:000000000000374F                 align 10h
.text:0000000000003750
.text:0000000000003750 loc_3750:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003750                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:0000000000003750                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003755                 setz    dl
.text:0000000000003758
.text:0000000000003758 loc_3758:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003758                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003758                 test    rbp, rbp
.text:000000000000375B                 jnz     loc_350C
.text:0000000000003761
.text:0000000000003761 loc_3761:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003761                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003761                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003766                 and     al, dl
.text:0000000000003768                 jz      loc_3518
.text:000000000000376E
.text:000000000000376E loc_376E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000376E                 mov     rbp, r11
.text:0000000000003771                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003779                 jmp     loc_3E79
.text:0000000000003779 ; ---------------------------------------------------------------------------
.text:000000000000377E                 align 20h
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003780                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:0000000000003780                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003785                 setz    dl
.text:0000000000003788                 xor     r12d, r12d
.text:000000000000378B                 jmp     short loc_3761
.text:000000000000378B ; ---------------------------------------------------------------------------
.text:000000000000378D                 align 10h
.text:0000000000003790
.text:0000000000003790 loc_3790:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003790                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:0000000000003790                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003795                 mov     ebx, 20h ; ' '
.text:000000000000379A                 setz    dl
.text:000000000000379D                 jmp     short loc_3761
.text:000000000000379D ; ---------------------------------------------------------------------------
.text:000000000000379F                 align 20h
.text:00000000000037A0
.text:00000000000037A0 loc_37A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037A0                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:00000000000037A0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000037A5                 mov     ebx, 72h ; 'r'
.text:00000000000037AA                 jmp     loc_3612
.text:00000000000037AA ; ---------------------------------------------------------------------------
.text:00000000000037AF                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037B0                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:00000000000037B0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000037B5                 mov     ebx, 66h ; 'f'
.text:00000000000037BA                 jmp     loc_3624
.text:00000000000037BA ; ---------------------------------------------------------------------------
.text:00000000000037BF                 align 20h
.text:00000000000037C0
.text:00000000000037C0 loc_37C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037C0                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:00000000000037C0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000037C5                 mov     ebx, 76h ; 'v'
.text:00000000000037CA                 jmp     loc_3624
.text:00000000000037CA ; ---------------------------------------------------------------------------
.text:00000000000037CF                 align 10h
.text:00000000000037D0
.text:00000000000037D0 loc_37D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037D0                                         ; DATA XREF: .rodata:jpt_34DE↓o
.text:00000000000037D0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000037D5                 mov     ebx, 6Eh ; 'n'
.text:00000000000037DA                 jmp     loc_3612
.text:00000000000037DA ; ---------------------------------------------------------------------------
.text:00000000000037DF                 align 20h
.text:00000000000037E0
.text:00000000000037E0 def_386A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000037E0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000037E0                                         ; DATA XREF: ...
.text:00000000000037E0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000037E3                 nop     dword ptr [rax+rax+00h]
.text:00000000000037E8
.text:00000000000037E8 def_34DE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000037E8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000037E8                                         ; DATA XREF: ...
.text:00000000000037E8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000037EE                 jnz     loc_3B98
.text:00000000000037F4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000037F9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000037FE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003803                 call    ___ctype_b_loc
.text:0000000000003808                 mov     rcx, [rax]
.text:000000000000380B                 movzx   edx, bl
.text:000000000000380E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003814                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000381A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000381F                 mov     edi, 1
.text:0000000000003824                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003828                 and     ax, 4000h
.text:000000000000382C                 setnz   r12b
.text:0000000000003830                 setz    al
.text:0000000000003833                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003837
.text:0000000000003837 loc_3837:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003837                 test    al, al
.text:0000000000003839                 jnz     loc_41D1
.text:000000000000383F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003844                 setz    dl
.text:0000000000003847                 jmp     loc_3518
.text:0000000000003847 ; ---------------------------------------------------------------------------
.text:000000000000384C                 align 10h
.text:0000000000003850
.text:0000000000003850 loc_3850:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003850                 movzx   ebx, byte ptr [r9]
.text:0000000000003854                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003857                 ja      short def_386A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003859                 lea     rcx, jpt_386A
.text:0000000000003860                 movzx   edx, bl
.text:0000000000003863                 movsxd  rax, ds:(jpt_386A - 14968h)[rcx+rdx*4]
.text:0000000000003867                 add     rax, rcx
.text:000000000000386A                 jmp     rax             ; switch jump
.text:000000000000386A ; ---------------------------------------------------------------------------
.text:000000000000386C                 align 10h
.text:0000000000003870
.text:0000000000003870 loc_3870:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003870                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:0000000000003870                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003873                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003878                 jnz     loc_366E
.text:000000000000387E                 xchg    ax, ax
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003880                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003880                 mov     edx, 5Ch ; '\'
.text:0000000000003885                 mov     ebx, 5Ch ; '\'
.text:000000000000388A                 jmp     loc_3624
.text:000000000000388A ; ---------------------------------------------------------------------------
.text:000000000000388F                 align 10h
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003890                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:0000000000003890                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003895                 xor     r10d, r10d
.text:0000000000003898                 mov     ebx, 66h ; 'f'
.text:000000000000389D                 jmp     loc_3624
.text:000000000000389D ; ---------------------------------------------------------------------------
.text:00000000000038A2                 align 8
.text:00000000000038A8
.text:00000000000038A8 loc_38A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038A8                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000038A8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000038AD                 xor     r10d, r10d
.text:00000000000038B0                 mov     ebx, 6Eh ; 'n'
.text:00000000000038B5                 jmp     loc_3612
.text:00000000000038B5 ; ---------------------------------------------------------------------------
.text:00000000000038BA                 align 20h
.text:00000000000038C0
.text:00000000000038C0 loc_38C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038C0                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000038C0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000038C5                 jmp     loc_3690
.text:00000000000038C5 ; ---------------------------------------------------------------------------
.text:00000000000038CA                 align 10h
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038D0                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000038D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000038D3
.text:00000000000038D3 loc_38D3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000038D3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038D8                 setz    dl
.text:00000000000038DB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000038E0                 jnz     loc_447A
.text:00000000000038E6                 mov     eax, r8d
.text:00000000000038E9                 mov     rcx, r15
.text:00000000000038EC                 xor     eax, 1
.text:00000000000038EF                 and     al, dl
.text:00000000000038F1                 jz      short loc_3920
.text:00000000000038F3                 cmp     r13, r15
.text:00000000000038F6                 jbe     short loc_38FD
.text:00000000000038F8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000038FD
.text:00000000000038FD loc_38FD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000038FD                 lea     rcx, [r15+1]
.text:0000000000003901                 cmp     r13, rcx
.text:0000000000003904                 jbe     short loc_390C
.text:0000000000003906                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000390C
.text:000000000000390C loc_390C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000390C                 lea     rcx, [r15+2]
.text:0000000000003910                 cmp     r13, rcx
.text:0000000000003913                 ja      loc_3F49
.text:0000000000003919
.text:0000000000003919 loc_3919:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003919                 lea     rcx, [r15+3]
.text:000000000000391D                 mov     r8d, eax
.text:0000000000003920
.text:0000000000003920 loc_3920:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003920                 cmp     r13, rcx
.text:0000000000003923                 jbe     short loc_392A
.text:0000000000003925                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000392A
.text:000000000000392A loc_392A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000392A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000392F                 lea     r15, [rcx+1]
.text:0000000000003933                 jz      loc_3F39
.text:0000000000003939                 lea     rax, [rbp+1]
.text:000000000000393D                 cmp     rax, r11
.text:0000000000003940                 jnb     short loc_395B
.text:0000000000003942                 mov     rax, [rsp+0E8h+s]
.text:0000000000003947                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000394C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003950                 sub     eax, 30h ; '0'
.text:0000000000003953                 cmp     al, 9
.text:0000000000003955                 jbe     loc_4189
.text:000000000000395B
.text:000000000000395B loc_395B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000395B                 mov     eax, r12d
.text:000000000000395E                 mov     ebx, 30h ; '0'
.text:0000000000003963                 xor     r12d, r12d
.text:0000000000003966                 jmp     loc_3518
.text:0000000000003966 ; ---------------------------------------------------------------------------
.text:000000000000396B                 align 10h
.text:0000000000003970
.text:0000000000003970 loc_3970:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003970                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:0000000000003970                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003975                 mov     r12d, r10d
.text:0000000000003978                 setz    dl
.text:000000000000397B                 xor     r10d, r10d
.text:000000000000397E                 xor     eax, eax
.text:0000000000003980                 jmp     loc_3518
.text:0000000000003980 ; ---------------------------------------------------------------------------
.text:0000000000003985                 align 8
.text:0000000000003988
.text:0000000000003988 loc_3988:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003988                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:0000000000003988                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000398D                 setz    dl
.text:0000000000003990                 xor     r10d, r10d
.text:0000000000003993                 jmp     loc_3758
.text:0000000000003993 ; ---------------------------------------------------------------------------
.text:0000000000003998                 align 20h
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039A0                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000039A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000039A5                 setz    dl
.text:00000000000039A8                 xor     r10d, r10d
.text:00000000000039AB                 xor     r12d, r12d
.text:00000000000039AE                 jmp     loc_3761
.text:00000000000039AE ; ---------------------------------------------------------------------------
.text:00000000000039B3                 align 8
.text:00000000000039B8
.text:00000000000039B8 loc_39B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039B8                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000039B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000039BD                 mov     r12d, r10d
.text:00000000000039C0                 mov     ebx, 20h ; ' '
.text:00000000000039C5                 setz    dl
.text:00000000000039C8                 xor     r10d, r10d
.text:00000000000039CB                 jmp     loc_3761
.text:00000000000039D0 ; ---------------------------------------------------------------------------
.text:00000000000039D0
.text:00000000000039D0 loc_39D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039D0                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000039D0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000039D5                 xor     r10d, r10d
.text:00000000000039D8                 mov     ebx, 72h ; 'r'
.text:00000000000039DD                 jmp     loc_3612
.text:00000000000039DD ; ---------------------------------------------------------------------------
.text:00000000000039E2                 align 8
.text:00000000000039E8
.text:00000000000039E8 loc_39E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039E8                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000039E8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000039ED                 jmp     loc_3690
.text:00000000000039ED ; ---------------------------------------------------------------------------
.text:00000000000039F2                 align 8
.text:00000000000039F8
.text:00000000000039F8 loc_39F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039F8                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:00000000000039F8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000039FD                 xor     r10d, r10d
.text:0000000000003A00                 mov     ebx, 74h ; 't'
.text:0000000000003A05                 jmp     loc_3612
.text:0000000000003A05 ; ---------------------------------------------------------------------------
.text:0000000000003A0A                 align 10h
.text:0000000000003A10
.text:0000000000003A10 loc_3A10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A10                                         ; DATA XREF: .rodata:jpt_386A↓o
.text:0000000000003A10                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003A15                 jmp     loc_3690
.text:0000000000003A15 ; ---------------------------------------------------------------------------
.text:0000000000003A1A                 align 20h
.text:0000000000003A20
.text:0000000000003A20 loc_3A20:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003A20                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003A20                 xor     r10d, r10d
.text:0000000000003A23                 jmp     loc_34C0
.text:0000000000003A23 ; ---------------------------------------------------------------------------
.text:0000000000003A28                 align 10h
.text:0000000000003A30
.text:0000000000003A30 loc_3A30:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003A30                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A35                 jnz     loc_43A0
.text:0000000000003A3B
.text:0000000000003A3B loc_3A3B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003A3B                 add     rbp, 1
.text:0000000000003A3F                 mov     eax, r8d
.text:0000000000003A42                 xor     r12d, r12d
.text:0000000000003A45                 mov     ebx, 5Ch ; '\'
.text:0000000000003A4A                 jmp     loc_355C
.text:0000000000003A4A ; ---------------------------------------------------------------------------
.text:0000000000003A4F                 align 10h
.text:0000000000003A50
.text:0000000000003A50 loc_3A50:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003A50                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003A55                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003A5A                 mov     r12d, r8d
.text:0000000000003A5D                 mov     rbp, r11
.text:0000000000003A60                 setz    dl
.text:0000000000003A63                 mov     eax, ebx
.text:0000000000003A65                 test    r15, r15
.text:0000000000003A68                 setz    cl
.text:0000000000003A6B                 and     eax, edx
.text:0000000000003A6D                 and     al, cl
.text:0000000000003A6F                 jnz     loc_44D6
.text:0000000000003A75                 mov     eax, ebx
.text:0000000000003A77                 xor     eax, 1
.text:0000000000003A7A                 and     dl, al
.text:0000000000003A7C                 jz      loc_43EC
.text:0000000000003A82                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003A87                 jz      loc_43EA
.text:0000000000003A8D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003A92                 jnz     loc_448D
.text:0000000000003A98                 test    r13, r13
.text:0000000000003A9B                 setz    al
.text:0000000000003A9E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003AA4                 setnz   dl
.text:0000000000003AA7                 and     al, dl
.text:0000000000003AA9                 jz      loc_44CC
.text:0000000000003AAF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003AB4
.text:0000000000003AB4 loc_3AB4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003AB4                 lea     rbx, asc_146DD  ; "'"
.text:0000000000003ABB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003ABF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003AC7                 mov     r15d, 1
.text:0000000000003ACD                 mov     [rsp+0E8h+n], 1
.text:0000000000003AD6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003ADB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003AE0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003AE4                 jmp     loc_33C3
.text:0000000000003AE4 ; ---------------------------------------------------------------------------
.text:0000000000003AE9                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003AF0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003AF5                 jnz     loc_43A0
.text:0000000000003AFB                 test    r13, r13
.text:0000000000003AFE                 jz      loc_3F00
.text:0000000000003B04                 xor     edx, edx
.text:0000000000003B06                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003B0C                 jnz     loc_3F00
.text:0000000000003B12
.text:0000000000003B12 loc_3B12:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003B12                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003B12                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003B17                 add     r15, 3
.text:0000000000003B1B                 xor     eax, eax
.text:0000000000003B1D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003B22                 xor     r8d, r8d
.text:0000000000003B25                 mov     r13, rdx
.text:0000000000003B28                 mov     ebx, 27h ; '''
.text:0000000000003B2D                 jmp     loc_3549
.text:0000000000003B2D ; ---------------------------------------------------------------------------
.text:0000000000003B32                 align 8
.text:0000000000003B38
.text:0000000000003B38 loc_3B38:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003B38                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003B3D                 jz      short loc_3B60
.text:0000000000003B3F                 lea     rcx, [rbp+2]
.text:0000000000003B43                 cmp     rcx, r11
.text:0000000000003B46                 jnb     short loc_3B60
.text:0000000000003B48                 mov     rax, [rsp+0E8h+s]
.text:0000000000003B4D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003B52                 jz      loc_42E2
.text:0000000000003B58                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003B60
.text:0000000000003B60 loc_3B60:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003B60                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003B60                 xor     edx, edx
.text:0000000000003B62                 xor     r12d, r12d
.text:0000000000003B65                 xor     eax, eax
.text:0000000000003B67                 mov     ebx, 3Fh ; '?'
.text:0000000000003B6C                 jmp     loc_3518
.text:0000000000003B6C ; ---------------------------------------------------------------------------
.text:0000000000003B71                 align 8
.text:0000000000003B78
.text:0000000000003B78 loc_3B78:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003B78                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003B7D                 jnz     loc_43A0
.text:0000000000003B83                 xor     r12d, r12d
.text:0000000000003B86                 xor     eax, eax
.text:0000000000003B88                 mov     ebx, 3Fh ; '?'
.text:0000000000003B8D                 jmp     loc_3549
.text:0000000000003B8D ; ---------------------------------------------------------------------------
.text:0000000000003B92                 align 8
.text:0000000000003B98
.text:0000000000003B98 loc_3B98:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003B98                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003BA0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BA4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003BB0                 mov     [rsp+0E8h+ps], rax
.text:0000000000003BB5                 jnz     short loc_3BE4
.text:0000000000003BB7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003BBC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003BC1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003BC6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003BCB                 call    _strlen
.text:0000000000003BD0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003BD6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003BDC                 mov     r11, rax
.text:0000000000003BDF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003BE4
.text:0000000000003BE4 loc_3BE4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003BE4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003BEC                 xor     ecx, ecx
.text:0000000000003BEE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003BF2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003BF7                 mov     rbx, rcx
.text:0000000000003BFA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003C02                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003C07                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003C0C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003C14                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003C19                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003C1E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003C23
.text:0000000000003C23 loc_3C23:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003C23                 mov     rax, [rsp+0E8h+s]
.text:0000000000003C28                 lea     r14, [rbp+rbx+0]
.text:0000000000003C2D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003C32                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003C37                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003C3C                 lea     r13, [rax+r14]
.text:0000000000003C40                 sub     rdx, r14
.text:0000000000003C43                 mov     rsi, r13
.text:0000000000003C46                 call    rpl_mbrtowc
.text:0000000000003C4B                 test    rax, rax
.text:0000000000003C4E                 mov     r15, rax
.text:0000000000003C51                 jz      short loc_3CA1
.text:0000000000003C53                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C57                 jz      loc_4275
.text:0000000000003C5D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003C61                 jz      loc_4201
.text:0000000000003C67                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C6C                 setz    al
.text:0000000000003C6F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003C73                 jnz     loc_3E10
.text:0000000000003C79
.text:0000000000003C79 loc_3C79:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003C79                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003C79                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003C80                 call    _iswprint
.text:0000000000003C85                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000003C8A                 test    eax, eax
.text:0000000000003C8C                 mov     eax, 0
.text:0000000000003C91                 cmovz   r12d, eax
.text:0000000000003C95                 add     rbx, r15
.text:0000000000003C98                 call    _mbsinit
.text:0000000000003C9D                 test    eax, eax
.text:0000000000003C9F                 jz      short loc_3C23
.text:0000000000003CA1
.text:0000000000003CA1 loc_3CA1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003CA1                 mov     edx, r12d
.text:0000000000003CA4                 mov     rdi, rbx
.text:0000000000003CA7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003CAD                 xor     edx, 1
.text:0000000000003CB0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003CB5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003CBB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000003CBF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003CC7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003CCC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003CD1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003CD6
.text:0000000000003CD6 loc_3CD6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003CD6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003CD6                 cmp     rdi, 1
.text:0000000000003CDA                 jbe     loc_42DB
.text:0000000000003CE0
.text:0000000000003CE0 loc_3CE0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003CE0                 mov     rcx, rdi
.text:0000000000003CE3                 xor     esi, esi
.text:0000000000003CE5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000003CEB                 add     rcx, rbp
.text:0000000000003CEE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003CF3                 jmp     loc_3DAE
.text:0000000000003CF3 ; ---------------------------------------------------------------------------
.text:0000000000003CF8                 align 20h
.text:0000000000003D00
.text:0000000000003D00 loc_3D00:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003D00                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D05                 setz    al
.text:0000000000003D08                 test    r9b, r9b
.text:0000000000003D0B                 jnz     loc_41C0
.text:0000000000003D11                 mov     esi, r8d
.text:0000000000003D14                 xor     esi, 1
.text:0000000000003D17                 and     al, sil
.text:0000000000003D1A                 jz      short loc_3D4B
.text:0000000000003D1C                 cmp     r13, r15
.text:0000000000003D1F                 jbe     short loc_3D26
.text:0000000000003D21                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003D26
.text:0000000000003D26 loc_3D26:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003D26                 lea     rsi, [r15+1]
.text:0000000000003D2A                 cmp     r13, rsi
.text:0000000000003D2D                 jbe     short loc_3D35
.text:0000000000003D2F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003D35
.text:0000000000003D35 loc_3D35:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003D35                 lea     rsi, [r15+2]
.text:0000000000003D39                 cmp     r13, rsi
.text:0000000000003D3C                 jbe     short loc_3D44
.text:0000000000003D3E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003D44
.text:0000000000003D44 loc_3D44:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003D44                 add     r15, 3
.text:0000000000003D48                 mov     r8d, eax
.text:0000000000003D4B
.text:0000000000003D4B loc_3D4B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000003D4B                 cmp     r13, r15
.text:0000000000003D4E                 jbe     short loc_3D55
.text:0000000000003D50                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003D55
.text:0000000000003D55 loc_3D55:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003D55                 lea     rax, [r15+1]
.text:0000000000003D59                 cmp     r13, rax
.text:0000000000003D5C                 jbe     short loc_3D6B
.text:0000000000003D5E                 mov     eax, ebx
.text:0000000000003D60                 shr     al, 6
.text:0000000000003D63                 add     eax, 30h ; '0'
.text:0000000000003D66                 mov     [r14+r15+1], al
.text:0000000000003D6B
.text:0000000000003D6B loc_3D6B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000003D6B                 lea     rax, [r15+2]
.text:0000000000003D6F                 cmp     r13, rax
.text:0000000000003D72                 jbe     short loc_3D84
.text:0000000000003D74                 mov     eax, ebx
.text:0000000000003D76                 shr     al, 3
.text:0000000000003D79                 and     eax, 7
.text:0000000000003D7C                 add     eax, 30h ; '0'
.text:0000000000003D7F                 mov     [r14+r15+2], al
.text:0000000000003D84
.text:0000000000003D84 loc_3D84:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003D84                 and     ebx, 7
.text:0000000000003D87                 add     rbp, 1
.text:0000000000003D8B                 add     r15, 3
.text:0000000000003D8F                 add     ebx, 30h ; '0'
.text:0000000000003D92                 cmp     rbp, rcx
.text:0000000000003D95                 jnb     loc_3580
.text:0000000000003D9B                 mov     esi, edx
.text:0000000000003D9D
.text:0000000000003D9D loc_3D9D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003D9D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003D9D                 cmp     r13, r15
.text:0000000000003DA0                 jbe     short loc_3DA6
.text:0000000000003DA2                 mov     [r14+r15], bl
.text:0000000000003DA6
.text:0000000000003DA6 loc_3DA6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003DA6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003DAA                 add     r15, 1
.text:0000000000003DAE
.text:0000000000003DAE loc_3DAE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003DAE                 test    dl, dl
.text:0000000000003DB0                 jnz     loc_3D00
.text:0000000000003DB6                 mov     eax, esi
.text:0000000000003DB8                 xor     eax, 1
.text:0000000000003DBB                 and     eax, r8d
.text:0000000000003DBE                 test    r10b, r10b
.text:0000000000003DC1                 jz      short loc_3DD1
.text:0000000000003DC3                 cmp     r13, r15
.text:0000000000003DC6                 jbe     short loc_3DCD
.text:0000000000003DC8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003DCD
.text:0000000000003DCD loc_3DCD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003DCD                 add     r15, 1
.text:0000000000003DD1
.text:0000000000003DD1 loc_3DD1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003DD1                 add     rbp, 1
.text:0000000000003DD5                 cmp     rbp, rcx
.text:0000000000003DD8                 jnb     loc_355C
.text:0000000000003DDE                 test    al, al
.text:0000000000003DE0                 jz      loc_41DE
.text:0000000000003DE6                 cmp     r13, r15
.text:0000000000003DE9                 jbe     short loc_3DF0
.text:0000000000003DEB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003DF0
.text:0000000000003DF0 loc_3DF0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003DF0                 lea     rax, [r15+1]
.text:0000000000003DF4                 cmp     r13, rax
.text:0000000000003DF7                 jbe     short loc_3DFF
.text:0000000000003DF9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003DFF
.text:0000000000003DFF loc_3DFF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003DFF                 add     r15, 2
.text:0000000000003E03                 xor     r10d, r10d
.text:0000000000003E06                 xor     r8d, r8d
.text:0000000000003E09                 jmp     short loc_3D9D
.text:0000000000003E09 ; ---------------------------------------------------------------------------
.text:0000000000003E0B                 align 10h
.text:0000000000003E10
.text:0000000000003E10 loc_3E10:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003E10                 cmp     r15, 1
.text:0000000000003E14                 jz      loc_3C79
.text:0000000000003E1A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003E1F                 lea     rcx, [rdi+r15]
.text:0000000000003E23                 lea     rdx, [rdi+r14+1]
.text:0000000000003E28                 lea     r8, [rcx+r14]
.text:0000000000003E2C                 jmp     short loc_3E3D
.text:0000000000003E2C ; ---------------------------------------------------------------------------
.text:0000000000003E2E                 align 10h
.text:0000000000003E30
.text:0000000000003E30 loc_3E30:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003E30                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003E30                 add     rdx, 1
.text:0000000000003E34                 cmp     r8, rdx
.text:0000000000003E37                 jz      loc_3C79
.text:0000000000003E3D
.text:0000000000003E3D loc_3E3D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003E3D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003E40                 sub     ecx, 5Bh ; '['
.text:0000000000003E43                 cmp     cl, 21h ; '!'
.text:0000000000003E46                 ja      short loc_3E30
.text:0000000000003E48                 mov     esi, 1
.text:0000000000003E4D                 shl     rsi, cl
.text:0000000000003E50                 mov     rcx, rsi
.text:0000000000003E53                 mov     rsi, 20000002Bh
.text:0000000000003E5D                 test    rcx, rsi
.text:0000000000003E60                 jz      short loc_3E30
.text:0000000000003E62                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003E67                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003E6C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003E71                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E79
.text:0000000000003E79 loc_3E79:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003E79                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003E79                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003E7E                 jz      short loc_3E90
.text:0000000000003E80                 test    al, al
.text:0000000000003E82                 mov     eax, 4
.text:0000000000003E87                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003E8C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003E90                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003E90                 sub     rsp, 8
.text:0000000000003E94                 mov     rcx, rbp
.text:0000000000003E97                 mov     rsi, r13
.text:0000000000003E9A                 push    [rsp+0F0h+var_88]
.text:0000000000003E9E                 push    [rsp+0F8h+var_80]
.text:0000000000003EA2                 mov     rdi, r14
.text:0000000000003EA5                 push    0
.text:0000000000003EA7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003EAF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003EB4                 mov     rdx, [rsp+108h+s]
.text:0000000000003EB9                 and     r9d, 0FFFFFFFDh
.text:0000000000003EBD                 call    quotearg_buffer_restyled
.text:0000000000003EC2                 add     rsp, 20h
.text:0000000000003EC6                 mov     r15, rax
.text:0000000000003EC9
.text:0000000000003EC9 loc_3EC9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003EC9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003EC9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003ED1                 xor     rbx, fs:28h
.text:0000000000003EDA                 mov     rax, r15
.text:0000000000003EDD                 jnz     loc_44E3
.text:0000000000003EE3                 add     rsp, 0B8h
.text:0000000000003EEA                 pop     rbx
.text:0000000000003EEB                 pop     rbp
.text:0000000000003EEC                 pop     r12
.text:0000000000003EEE                 pop     r13
.text:0000000000003EF0                 pop     r14
.text:0000000000003EF2                 pop     r15
.text:0000000000003EF4                 retn
.text:0000000000003EF4 ; ---------------------------------------------------------------------------
.text:0000000000003EF5                 align 8
.text:0000000000003EF8
.text:0000000000003EF8 loc_3EF8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003EF8                 mov     rbp, r11
.text:0000000000003EFB                 jmp     loc_3E79
.text:0000000000003F00 ; ---------------------------------------------------------------------------
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003F00                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003F00                 cmp     r13, r15
.text:0000000000003F03                 jbe     short loc_3F0A
.text:0000000000003F05                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003F0A
.text:0000000000003F0A loc_3F0A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003F0A                 lea     rax, [r15+1]
.text:0000000000003F0E                 cmp     r13, rax
.text:0000000000003F11                 jbe     short loc_3F19
.text:0000000000003F13                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003F19
.text:0000000000003F19 loc_3F19:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003F19                 lea     rax, [r15+2]
.text:0000000000003F1D                 cmp     r13, rax
.text:0000000000003F20                 jbe     loc_4512
.text:0000000000003F26                 mov     rdx, r13
.text:0000000000003F29                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003F2F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003F34                 jmp     loc_3B12
.text:0000000000003F39 ; ---------------------------------------------------------------------------
.text:0000000000003F39
.text:0000000000003F39 loc_3F39:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003F39                 mov     eax, r12d
.text:0000000000003F3C                 mov     ebx, 30h ; '0'
.text:0000000000003F41                 xor     r12d, r12d
.text:0000000000003F44                 jmp     loc_3549
.text:0000000000003F49 ; ---------------------------------------------------------------------------
.text:0000000000003F49
.text:0000000000003F49 loc_3F49:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003F49                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003F4F                 jmp     loc_3919
.text:0000000000003F54 ; ---------------------------------------------------------------------------
.text:0000000000003F54
.text:0000000000003F54 loc_3F54:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003F54                                         ; DATA XREF: .rodata:jpt_3381↓o
.text:0000000000003F54                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003F56                 jnz     loc_3383        ; jumptable 00000000000121F1 case 1
.text:0000000000003F5C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003F61
.text:0000000000003F61 loc_3F61:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003F61                 test    r13, r13
.text:0000000000003F64                 jnz     loc_44FA
.text:0000000000003F6A                 lea     rax, asc_146DD  ; "'"
.text:0000000000003F71                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003F7A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003F7F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003F84                 xor     r12d, r12d
.text:0000000000003F87                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003F8C                 mov     [rsp+0E8h+n], 1
.text:0000000000003F95                 mov     [rsp+0E8h+s2], rax
.text:0000000000003F9A                 mov     r15d, 1
.text:0000000000003FA0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003FA8                 jmp     loc_33C3
.text:0000000000003FA8 ; ---------------------------------------------------------------------------
.text:0000000000003FAD                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 loc_3FB0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003FB0                                         ; DATA XREF: .rodata:jpt_3381↓o
.text:0000000000003FB0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003FB2                 jnz     loc_43AD
.text:0000000000003FB8                 test    r13, r13
.text:0000000000003FBB                 jz      loc_41E6
.text:0000000000003FC1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003FC5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003FCA                 xor     r12d, r12d
.text:0000000000003FCD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003FD2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003FDB
.text:0000000000003FDB loc_3FDB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003FDB                 lea     rax, unk_146DB
.text:0000000000003FE2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003FE7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003FEC                 mov     [rsp+0E8h+n], 1
.text:0000000000003FF5                 mov     r15d, 1
.text:0000000000003FFB                 mov     [rsp+0E8h+s2], rax
.text:0000000000004000                 jmp     loc_33C3
.text:0000000000004005 ; ---------------------------------------------------------------------------
.text:0000000000004005
.text:0000000000004005 loc_4005:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004005                                         ; DATA XREF: .rodata:jpt_3381↓o
.text:0000000000004005                 lea     rax, unk_146DB  ; jumptable 00000000000121F1 case 6
.text:000000000000400C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004011                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004016                 xor     r12d, r12d
.text:0000000000004019                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004022                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004027                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000402C                 mov     [rsp+0E8h+n], 1
.text:0000000000004035                 xor     r15d, r15d
.text:0000000000004038                 mov     [rsp+0E8h+s2], rax
.text:000000000000403D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004045                 jmp     loc_33C3
.text:000000000000404A ; ---------------------------------------------------------------------------
.text:000000000000404A
.text:000000000000404A loc_404A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000404A                                         ; DATA XREF: .rodata:jpt_3381↓o
.text:000000000000404A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000404F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004054                 xor     r12d, r12d
.text:0000000000004057                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004060                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004065                 xor     r15d, r15d
.text:0000000000004068                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000406D                 mov     [rsp+0E8h+n], 0
.text:0000000000004076                 mov     [rsp+0E8h+s2], 0
.text:000000000000407F                 jmp     loc_33C3
.text:0000000000004084 ; ---------------------------------------------------------------------------
.text:0000000000004084
.text:0000000000004084 loc_4084:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004084                                         ; DATA XREF: .rodata:jpt_3381↓o
.text:0000000000004084                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004089                 jz      short loc_40E1
.text:000000000000408B                 lea     rsi, asc_146DF  ; "`"
.text:0000000000004092                 xor     edi, edi        ; domainname
.text:0000000000004094                 mov     edx, 5          ; category
.text:0000000000004099                 call    _dcgettext
.text:000000000000409E                 mov     rcx, rax
.text:00000000000040A1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000040A6                 lea     rax, asc_146DF  ; "`"
.text:00000000000040AD                 cmp     rcx, rax
.text:00000000000040B0                 jz      loc_444E
.text:00000000000040B6
.text:00000000000040B6 loc_40B6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000040B6                 lea     rsi, asc_146DD  ; "'"
.text:00000000000040BD                 xor     edi, edi        ; domainname
.text:00000000000040BF                 mov     edx, 5          ; category
.text:00000000000040C4                 call    _dcgettext
.text:00000000000040C9                 mov     rcx, rax
.text:00000000000040CC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000040D1                 lea     rax, asc_146DD  ; "'"
.text:00000000000040D8                 cmp     rcx, rax
.text:00000000000040DB                 jz      loc_4464
.text:00000000000040E1
.text:00000000000040E1 loc_40E1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000040E1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000040E1                 xor     r15d, r15d
.text:00000000000040E4                 test    ebx, ebx
.text:00000000000040E6                 jz      loc_42AD
.text:00000000000040EC
.text:00000000000040EC loc_40EC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000040EC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000040EC                 test    ebx, ebx
.text:00000000000040EE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000040F3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000040F8                 xor     r12d, r12d
.text:00000000000040FB                 mov     rdi, rbx        ; s
.text:00000000000040FE                 call    _strlen
.text:0000000000004103                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004108                 mov     [rsp+0E8h+n], rax
.text:000000000000410D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004112                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004117                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004120                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004125                 jmp     loc_33C3
.text:000000000000412A ; ---------------------------------------------------------------------------
.text:000000000000412A
.text:000000000000412A loc_412A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000412A                                         ; DATA XREF: .rodata:jpt_3381↓o
.text:000000000000412A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000412F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004134                 xor     r12d, r12d
.text:0000000000004137                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004140                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004145                 xor     r15d, r15d
.text:0000000000004148                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000414D                 mov     [rsp+0E8h+n], 0
.text:0000000000004156                 mov     [rsp+0E8h+s2], 0
.text:000000000000415F                 jmp     loc_33C3
.text:0000000000004164 ; ---------------------------------------------------------------------------
.text:0000000000004164
.text:0000000000004164 loc_4164:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004164                                         ; DATA XREF: .rodata:jpt_3381↓o
.text:0000000000004164                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004169                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000416E                 xor     r12d, r12d
.text:0000000000004171                 mov     [rsp+0E8h+var_98], 0
.text:000000000000417A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000417F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004184                 jmp     loc_33A3
.text:0000000000004189 ; ---------------------------------------------------------------------------
.text:0000000000004189
.text:0000000000004189 loc_4189:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004189                 cmp     r13, r15
.text:000000000000418C                 jbe     short loc_4193
.text:000000000000418E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004193
.text:0000000000004193 loc_4193:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004193                 lea     rax, [rcx+2]
.text:0000000000004197                 cmp     r13, rax
.text:000000000000419A                 jbe     short loc_41A2
.text:000000000000419C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000041A2
.text:00000000000041A2 loc_41A2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000041A2                 mov     eax, r12d
.text:00000000000041A5                 lea     r15, [rcx+3]
.text:00000000000041A9                 xor     r12d, r12d
.text:00000000000041AC                 mov     ebx, 30h ; '0'
.text:00000000000041B1                 jmp     loc_3518
.text:00000000000041B1 ; ---------------------------------------------------------------------------
.text:00000000000041B6                 align 20h
.text:00000000000041C0
.text:00000000000041C0 loc_41C0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000041C0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000041C5                 mov     rbp, r11
.text:00000000000041C8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000041CC                 jmp     loc_3E79
.text:00000000000041D1 ; ---------------------------------------------------------------------------
.text:00000000000041D1
.text:00000000000041D1 loc_41D1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000041D1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000041D6                 xor     r12d, r12d
.text:00000000000041D9                 jmp     loc_3CE0
.text:00000000000041DE ; ---------------------------------------------------------------------------
.text:00000000000041DE
.text:00000000000041DE loc_41DE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000041DE                 xor     r10d, r10d
.text:00000000000041E1                 jmp     loc_3D9D
.text:00000000000041E6 ; ---------------------------------------------------------------------------
.text:00000000000041E6
.text:00000000000041E6 loc_41E6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000041E6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000041EF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000041F4                 xor     r12d, r12d
.text:00000000000041F7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000041FC                 jmp     loc_3FDB
.text:0000000000004201 ; ---------------------------------------------------------------------------
.text:0000000000004201
.text:0000000000004201 loc_4201:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000004201                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004206                 mov     rsi, r14
.text:0000000000004209                 mov     rcx, r13
.text:000000000000420C                 mov     rax, rbx
.text:000000000000420F                 mov     rdi, rbx
.text:0000000000004212                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004218                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000421D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000004225                 cmp     rsi, r11
.text:0000000000004228                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000422E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004236                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000423B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004240                 jnb     short loc_4268
.text:0000000000004242                 cmp     byte ptr [rcx], 0
.text:0000000000004245                 jnz     short loc_4257
.text:0000000000004247                 jmp     short loc_4268
.text:0000000000004247 ; ---------------------------------------------------------------------------
.text:0000000000004249                 align 10h
.text:0000000000004250
.text:0000000000004250 loc_4250:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004250                 cmp     byte ptr [r9+rax], 0
.text:0000000000004255                 jz      short loc_4265
.text:0000000000004257
.text:0000000000004257 loc_4257:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004257                 add     rax, 1
.text:000000000000425B                 lea     rdx, [rbp+rax+0]
.text:0000000000004260                 cmp     r11, rdx
.text:0000000000004263                 ja      short loc_4250
.text:0000000000004265
.text:0000000000004265 loc_4265:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004265                 mov     rdi, rax
.text:0000000000004268
.text:0000000000004268 loc_4268:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004268                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004268                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000426D                 xor     r12d, r12d
.text:0000000000004270                 jmp     loc_3CD6
.text:0000000000004275 ; ---------------------------------------------------------------------------
.text:0000000000004275
.text:0000000000004275 loc_4275:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004275                 mov     rdi, rbx
.text:0000000000004278                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000427E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004283                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004289                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004291                 xor     r12d, r12d
.text:0000000000004294                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004299                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000429E                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000042A3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000042A8                 jmp     loc_3CD6
.text:00000000000042AD ; ---------------------------------------------------------------------------
.text:00000000000042AD
.text:00000000000042AD loc_42AD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000042AD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000042B2                 movzx   eax, byte ptr [rdx]
.text:00000000000042B5                 test    al, al
.text:00000000000042B7                 jz      loc_40EC
.text:00000000000042BD                 nop     dword ptr [rax]
.text:00000000000042C0
.text:00000000000042C0 loc_42C0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000042C0                 cmp     r13, r15
.text:00000000000042C3                 jbe     short loc_42C9
.text:00000000000042C5                 mov     [r14+r15], al
.text:00000000000042C9
.text:00000000000042C9 loc_42C9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000042C9                 add     r15, 1
.text:00000000000042CD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000042D2                 test    al, al
.text:00000000000042D4                 jnz     short loc_42C0
.text:00000000000042D6                 jmp     loc_40EC
.text:00000000000042DB ; ---------------------------------------------------------------------------
.text:00000000000042DB
.text:00000000000042DB loc_42DB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000042DB                 mov     eax, edx
.text:00000000000042DD                 jmp     loc_3837
.text:00000000000042E2 ; ---------------------------------------------------------------------------
.text:00000000000042E2
.text:00000000000042E2 loc_42E2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000042E2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000042E6                 cmp     bl, 3Eh ; '>'
.text:00000000000042E9                 ja      loc_3B60
.text:00000000000042EF                 mov     rax, 7000A38200000000h
.text:00000000000042F9                 bt      rax, rbx
.text:00000000000042FD                 jnb     loc_3B60
.text:0000000000004303                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004308                 jnz     loc_44F2
.text:000000000000430E                 cmp     r13, r15
.text:0000000000004311                 jbe     short loc_4318
.text:0000000000004313                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004318
.text:0000000000004318 loc_4318:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004318                 lea     rax, [r15+1]
.text:000000000000431C                 cmp     r13, rax
.text:000000000000431F                 jbe     short loc_4327
.text:0000000000004321                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004327
.text:0000000000004327 loc_4327:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004327                 lea     rax, [r15+2]
.text:000000000000432B                 cmp     r13, rax
.text:000000000000432E                 jbe     short loc_4336
.text:0000000000004330                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004336
.text:0000000000004336 loc_4336:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004336                 lea     rax, [r15+3]
.text:000000000000433A                 cmp     r13, rax
.text:000000000000433D                 jbe     short loc_4345
.text:000000000000433F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004345
.text:0000000000004345 loc_4345:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004345                 add     r15, 4
.text:0000000000004349                 xor     edx, edx
.text:000000000000434B                 xor     r12d, r12d
.text:000000000000434E                 xor     eax, eax
.text:0000000000004350                 mov     rbp, rcx
.text:0000000000004353                 jmp     loc_3518
.text:0000000000004358 ; ---------------------------------------------------------------------------
.text:0000000000004358
.text:0000000000004358 loc_4358:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004358                                         ; DATA XREF: .rodata:jpt_3381↓o
.text:0000000000004358                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000435A                 jz      loc_44E8
.text:0000000000004360                 lea     rax, asc_146DD  ; "'"
.text:0000000000004367                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000436C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004371                 xor     r12d, r12d
.text:0000000000004374                 mov     [rsp+0E8h+var_98], 0
.text:000000000000437D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004382                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004387                 mov     [rsp+0E8h+n], 1
.text:0000000000004390                 xor     r15d, r15d
.text:0000000000004393                 mov     [rsp+0E8h+s2], rax
.text:0000000000004398                 jmp     loc_33C3
.text:0000000000004398 ; ---------------------------------------------------------------------------
.text:000000000000439D                 align 20h
.text:00000000000043A0
.text:00000000000043A0 loc_43A0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000043A0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000043A0                 mov     rbp, r11
.text:00000000000043A3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000043A8                 jmp     loc_3E79
.text:00000000000043AD ; ---------------------------------------------------------------------------
.text:00000000000043AD
.text:00000000000043AD loc_43AD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000043AD                 lea     rax, unk_146DB
.text:00000000000043B4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000043B9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043BE                 xor     r12d, r12d
.text:00000000000043C1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043CA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000043CF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000043D4                 mov     [rsp+0E8h+n], 1
.text:00000000000043DD                 xor     r15d, r15d
.text:00000000000043E0                 mov     [rsp+0E8h+s2], rax
.text:00000000000043E5                 jmp     loc_33C3
.text:00000000000043EA ; ---------------------------------------------------------------------------
.text:00000000000043EA
.text:00000000000043EA loc_43EA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000043EA                 mov     eax, edx
.text:00000000000043EC
.text:00000000000043EC loc_43EC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000043EC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000043EC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000043F1                 test    rbx, rbx
.text:00000000000043F4                 jz      short loc_4422
.text:00000000000043F6                 test    al, al
.text:00000000000043F8                 jz      short loc_4422
.text:00000000000043FA                 movzx   ecx, byte ptr [rbx]
.text:00000000000043FD                 mov     rax, rbx
.text:0000000000004400                 test    cl, cl
.text:0000000000004402                 jz      short loc_4422
.text:0000000000004404                 mov     rdx, r15
.text:0000000000004407                 sub     rax, r15
.text:000000000000440A
.text:000000000000440A loc_440A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000440A                 cmp     r13, rdx
.text:000000000000440D                 jbe     short loc_4413
.text:000000000000440F                 mov     [r14+rdx], cl
.text:0000000000004413
.text:0000000000004413 loc_4413:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004413                 add     rdx, 1
.text:0000000000004417                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000441B                 test    cl, cl
.text:000000000000441D                 jnz     short loc_440A
.text:000000000000441F                 mov     r15, rdx
.text:0000000000004422
.text:0000000000004422 loc_4422:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004422                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004422                 cmp     r13, r15
.text:0000000000004425                 jbe     loc_3EC9
.text:000000000000442B                 mov     byte ptr [r14+r15], 0
.text:0000000000004430                 jmp     loc_3EC9
.text:0000000000004435 ; ---------------------------------------------------------------------------
.text:0000000000004435
.text:0000000000004435 loc_4435:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004435                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000443A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000443F                 mov     rbp, r11
.text:0000000000004442                 setz    al
.text:0000000000004445                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004449                 jmp     loc_3E79
.text:000000000000444E ; ---------------------------------------------------------------------------
.text:000000000000444E
.text:000000000000444E loc_444E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000444E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004452                 mov     rdi, rcx
.text:0000000000004455                 call    gettext_quote
.text:000000000000445A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000445F                 jmp     loc_40B6
.text:0000000000004464 ; ---------------------------------------------------------------------------
.text:0000000000004464
.text:0000000000004464 loc_4464:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004464                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004468                 mov     rdi, rcx
.text:000000000000446B                 call    gettext_quote
.text:0000000000004470                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004475                 jmp     loc_40E1
.text:000000000000447A ; ---------------------------------------------------------------------------
.text:000000000000447A
.text:000000000000447A loc_447A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000447A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000447F                 mov     rbp, r11
.text:0000000000004482                 mov     eax, edx
.text:0000000000004484                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004488                 jmp     loc_3E79
.text:000000000000448D ; ---------------------------------------------------------------------------
.text:000000000000448D
.text:000000000000448D loc_448D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000448D                 sub     rsp, 8
.text:0000000000004491                 mov     r8d, 5
.text:0000000000004497                 mov     rcx, r11
.text:000000000000449A                 push    [rsp+0F0h+var_88]
.text:000000000000449E                 push    [rsp+0F8h+var_80]
.text:00000000000044A2                 mov     rdi, r14
.text:00000000000044A5                 push    [rsp+100h+var_C8]
.text:00000000000044A9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000044B1                 mov     rdx, [rsp+108h+s]
.text:00000000000044B6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000044BB                 call    quotearg_buffer_restyled
.text:00000000000044C0                 add     rsp, 20h
.text:00000000000044C4                 mov     r15, rax
.text:00000000000044C7                 jmp     loc_3EC9
.text:00000000000044CC ; ---------------------------------------------------------------------------
.text:00000000000044CC
.text:00000000000044CC loc_44CC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000044CC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000044D1                 jmp     loc_43EC
.text:00000000000044D6 ; ---------------------------------------------------------------------------
.text:00000000000044D6
.text:00000000000044D6 loc_44D6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000044D6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000044DE                 jmp     loc_3E79
.text:00000000000044E3 ; ---------------------------------------------------------------------------
.text:00000000000044E3
.text:00000000000044E3 loc_44E3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000044E3                 call    ___stack_chk_fail
.text:00000000000044E8 ; ---------------------------------------------------------------------------
.text:00000000000044E8
.text:00000000000044E8 loc_44E8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000044E8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000044ED                 jmp     loc_3F61
.text:00000000000044F2 ; ---------------------------------------------------------------------------
.text:00000000000044F2
.text:00000000000044F2 loc_44F2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000044F2                 mov     rbp, r11
.text:00000000000044F5                 jmp     loc_3E90
.text:00000000000044FA ; ---------------------------------------------------------------------------
.text:00000000000044FA
.text:00000000000044FA loc_44FA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000044FA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000044FF                 xor     eax, eax
.text:0000000000004501                 xor     r12d, r12d
.text:0000000000004504                 mov     [rsp+0E8h+var_98], 0
.text:000000000000450D                 jmp     loc_3AB4
.text:0000000000004512 ; ---------------------------------------------------------------------------
.text:0000000000004512
.text:0000000000004512 loc_4512:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004512                 mov     rdx, r13
.text:0000000000004515                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000451A                 jmp     loc_3B12
.text:000000000000451F ; ---------------------------------------------------------------------------
.text:000000000000451F
.text:000000000000451F def_3381:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000451F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000451F ; } // starts at 32F0
.text:000000000000451F quotearg_buffer_restyled endp
.text:000000000000451F
.text:000000000000451F ; ---------------------------------------------------------------------------
.text:0000000000004524                 align 10h
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530
.text:0000000000004530 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004530                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004530
.text:0000000000004530 var_50          = qword ptr -50h
.text:0000000000004530 var_48          = qword ptr -48h
.text:0000000000004530 var_40          = dword ptr -40h
.text:0000000000004530 var_3C          = dword ptr -3Ch
.text:0000000000004530
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 push    r15
.text:0000000000004532                 push    r14
.text:0000000000004534                 movsxd  r15, edi
.text:0000000000004537                 push    r13
.text:0000000000004539                 push    r12
.text:000000000000453B                 mov     r14, rdx
.text:000000000000453E                 push    rbp
.text:000000000000453F                 push    rbx
.text:0000000000004540                 mov     rbp, rcx
.text:0000000000004543                 sub     rsp, 28h
.text:0000000000004547                 mov     [rsp+58h+var_50], rsi
.text:000000000000454C                 call    ___errno_location
.text:0000000000004551                 mov     r13, rax
.text:0000000000004554                 mov     eax, [rax]
.text:0000000000004556                 test    r15d, r15d
.text:0000000000004559                 mov     rbx, cs:slotvec
.text:0000000000004560                 mov     [rsp+58h+var_40], eax
.text:0000000000004564                 js      loc_46D1
.text:000000000000456A                 cmp     cs:nslots, r15d
.text:0000000000004571                 jg      short loc_45D5
.text:0000000000004573                 cmp     r15d, 7FFFFFFFh
.text:000000000000457A                 jz      loc_46D6
.text:0000000000004580                 lea     r12d, [r15+1]
.text:0000000000004584                 lea     rax, slotvec0
.text:000000000000458B                 movsxd  rsi, r12d
.text:000000000000458E                 shl     rsi, 4
.text:0000000000004592                 cmp     rbx, rax
.text:0000000000004595                 jz      loc_46B0
.text:000000000000459B                 mov     rdi, rbx
.text:000000000000459E                 call    xrealloc
.text:00000000000045A3                 mov     rbx, rax
.text:00000000000045A6                 mov     cs:slotvec, rax
.text:00000000000045AD
.text:00000000000045AD loc_45AD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000045AD                 movsxd  rdi, cs:nslots
.text:00000000000045B4                 mov     edx, r12d
.text:00000000000045B7                 xor     esi, esi        ; c
.text:00000000000045B9                 sub     edx, edi
.text:00000000000045BB                 shl     rdi, 4
.text:00000000000045BF                 movsxd  rdx, edx
.text:00000000000045C2                 add     rdi, rbx        ; s
.text:00000000000045C5                 shl     rdx, 4          ; n
.text:00000000000045C9                 call    _memset
.text:00000000000045CE                 mov     cs:nslots, r12d
.text:00000000000045D5
.text:00000000000045D5 loc_45D5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000045D5                 mov     eax, [rbp+4]
.text:00000000000045D8                 shl     r15, 4
.text:00000000000045DC                 sub     rsp, 8
.text:00000000000045E0                 add     rbx, r15
.text:00000000000045E3                 lea     r15, [rbp+8]
.text:00000000000045E7                 mov     r8d, [rbp+0]
.text:00000000000045EB                 mov     r11, [rbx]
.text:00000000000045EE                 mov     r12, [rbx+8]
.text:00000000000045F2                 mov     rcx, r14
.text:00000000000045F5                 or      eax, 1
.text:00000000000045F8                 mov     [rsp+60h+var_3C], eax
.text:00000000000045FC                 push    qword ptr [rbp+30h]
.text:00000000000045FF                 mov     r9d, eax
.text:0000000000004602                 push    qword ptr [rbp+28h]
.text:0000000000004605                 push    r15
.text:0000000000004607                 mov     rsi, r11
.text:000000000000460A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000460F                 mov     rdi, r12
.text:0000000000004612                 mov     [rsp+78h+var_48], r11
.text:0000000000004617                 call    quotearg_buffer_restyled
.text:000000000000461C                 add     rsp, 20h
.text:0000000000004620                 mov     r11, [rsp+58h+var_48]
.text:0000000000004625                 cmp     r11, rax
.text:0000000000004628                 ja      short loc_4691
.text:000000000000462A                 lea     rsi, [rax+1]
.text:000000000000462E                 lea     rax, slot0
.text:0000000000004635                 cmp     r12, rax
.text:0000000000004638                 mov     [rbx], rsi
.text:000000000000463B                 jz      short loc_464F
.text:000000000000463D                 mov     rdi, r12        ; ptr
.text:0000000000004640                 mov     [rsp+58h+var_48], rsi
.text:0000000000004645                 call    _free
.text:000000000000464A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000464F
.text:000000000000464F loc_464F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000464F                 mov     rdi, rsi
.text:0000000000004652                 mov     [rsp+58h+var_48], rsi
.text:0000000000004657                 call    xmalloc
.text:000000000000465C                 sub     rsp, 8
.text:0000000000004660                 mov     [rbx+8], rax
.text:0000000000004664                 mov     r8d, [rbp+0]
.text:0000000000004668                 push    qword ptr [rbp+30h]
.text:000000000000466B                 push    qword ptr [rbp+28h]
.text:000000000000466E                 mov     rcx, r14
.text:0000000000004671                 push    r15
.text:0000000000004673                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004678                 mov     rdi, rax
.text:000000000000467B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004680                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004685                 mov     r12, rax
.text:0000000000004688                 call    quotearg_buffer_restyled
.text:000000000000468D                 add     rsp, 20h
.text:0000000000004691
.text:0000000000004691 loc_4691:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004691                 mov     eax, [rsp+58h+var_40]
.text:0000000000004695                 mov     [r13+0], eax
.text:0000000000004699                 add     rsp, 28h
.text:000000000000469D                 mov     rax, r12
.text:00000000000046A0                 pop     rbx
.text:00000000000046A1                 pop     rbp
.text:00000000000046A2                 pop     r12
.text:00000000000046A4                 pop     r13
.text:00000000000046A6                 pop     r14
.text:00000000000046A8                 pop     r15
.text:00000000000046AA                 retn
.text:00000000000046AA ; ---------------------------------------------------------------------------
.text:00000000000046AB                 align 10h
.text:00000000000046B0
.text:00000000000046B0 loc_46B0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000046B0                 xor     edi, edi
.text:00000000000046B2                 call    xrealloc
.text:00000000000046B7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000046BF                 mov     rbx, rax
.text:00000000000046C2                 mov     cs:slotvec, rax
.text:00000000000046C9                 movups  xmmword ptr [rax], xmm0
.text:00000000000046CC                 jmp     loc_45AD
.text:00000000000046D1 ; ---------------------------------------------------------------------------
.text:00000000000046D1
.text:00000000000046D1 loc_46D1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000046D1                 call    _abort
.text:00000000000046D6 ; ---------------------------------------------------------------------------
.text:00000000000046D6
.text:00000000000046D6 loc_46D6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000046D6                 call    xalloc_die
.text:00000000000046D6 ; } // starts at 4530
.text:00000000000046D6 quotearg_n_options endp
.text:00000000000046D6
.text:00000000000046D6 ; ---------------------------------------------------------------------------
.text:00000000000046DB                 align 20h
.text:00000000000046E0
.text:00000000000046E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046E0
.text:00000000000046E0 ; Attributes: info_from_lumina
.text:00000000000046E0
.text:00000000000046E0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000046E0                 public clone_quoting_options
.text:00000000000046E0 clone_quoting_options proc near
.text:00000000000046E0 ; __unwind {
.text:00000000000046E0                 push    r12
.text:00000000000046E2                 push    rbp
.text:00000000000046E3                 push    rbx
.text:00000000000046E4                 mov     rbx, rdi
.text:00000000000046E7                 call    ___errno_location
.text:00000000000046EC                 mov     r12d, [rax]
.text:00000000000046EF                 mov     rbp, rax
.text:00000000000046F2                 lea     rax, default_quoting_options
.text:00000000000046F9                 test    rbx, rbx
.text:00000000000046FC                 mov     esi, 38h ; '8'  ; n
.text:0000000000004701                 cmovz   rbx, rax
.text:0000000000004705                 mov     rdi, rbx        ; src
.text:0000000000004708                 call    xmemdup
.text:000000000000470D                 mov     [rbp+0], r12d
.text:0000000000004711                 pop     rbx
.text:0000000000004712                 pop     rbp
.text:0000000000004713                 pop     r12
.text:0000000000004715                 retn
.text:0000000000004715 ; } // starts at 46E0
.text:0000000000004715 clone_quoting_options endp
.text:0000000000004715
.text:0000000000004715 ; ---------------------------------------------------------------------------
.text:0000000000004716                 align 20h
.text:0000000000004720
.text:0000000000004720 ; =============== S U B R O U T I N E =======================================
.text:0000000000004720
.text:0000000000004720
.text:0000000000004720                 public get_quoting_style
.text:0000000000004720 get_quoting_style proc near
.text:0000000000004720 ; __unwind {
.text:0000000000004720                 lea     rax, default_quoting_options
.text:0000000000004727                 test    rdi, rdi
.text:000000000000472A                 cmovz   rdi, rax
.text:000000000000472E                 mov     eax, [rdi]
.text:0000000000004730                 retn
.text:0000000000004730 ; } // starts at 4720
.text:0000000000004730 get_quoting_style endp
.text:0000000000004730
.text:0000000000004730 ; ---------------------------------------------------------------------------
.text:0000000000004731                 align 20h
.text:0000000000004740
.text:0000000000004740 ; =============== S U B R O U T I N E =======================================
.text:0000000000004740
.text:0000000000004740
.text:0000000000004740                 public set_quoting_style
.text:0000000000004740 set_quoting_style proc near
.text:0000000000004740 ; __unwind {
.text:0000000000004740                 lea     rax, default_quoting_options
.text:0000000000004747                 test    rdi, rdi
.text:000000000000474A                 cmovz   rdi, rax
.text:000000000000474E                 mov     [rdi], esi
.text:0000000000004750                 retn
.text:0000000000004750 ; } // starts at 4740
.text:0000000000004750 set_quoting_style endp
.text:0000000000004750
.text:0000000000004750 ; ---------------------------------------------------------------------------
.text:0000000000004751                 align 20h
.text:0000000000004760
.text:0000000000004760 ; =============== S U B R O U T I N E =======================================
.text:0000000000004760
.text:0000000000004760 ; Attributes: info_from_lumina
.text:0000000000004760
.text:0000000000004760 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004760                 public set_char_quoting
.text:0000000000004760 set_char_quoting proc near
.text:0000000000004760 ; __unwind {
.text:0000000000004760                 lea     rax, default_quoting_options
.text:0000000000004767                 test    rdi, rdi
.text:000000000000476A                 mov     ecx, esi
.text:000000000000476C                 cmovz   rdi, rax
.text:0000000000004770                 mov     eax, esi
.text:0000000000004772                 and     ecx, 1Fh
.text:0000000000004775                 shr     al, 5
.text:0000000000004778                 movzx   eax, al
.text:000000000000477B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004780                 mov     esi, [rdi]
.text:0000000000004782                 mov     eax, esi
.text:0000000000004784                 shr     eax, cl
.text:0000000000004786                 xor     edx, eax
.text:0000000000004788                 and     eax, 1
.text:000000000000478B                 and     edx, 1
.text:000000000000478E                 shl     edx, cl
.text:0000000000004790                 xor     edx, esi
.text:0000000000004792                 mov     [rdi], edx
.text:0000000000004794                 retn
.text:0000000000004794 ; } // starts at 4760
.text:0000000000004794 set_char_quoting endp
.text:0000000000004794
.text:0000000000004794 ; ---------------------------------------------------------------------------
.text:0000000000004795                 align 20h
.text:00000000000047A0
.text:00000000000047A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047A0
.text:00000000000047A0
.text:00000000000047A0                 public set_quoting_flags
.text:00000000000047A0 set_quoting_flags proc near
.text:00000000000047A0 ; __unwind {
.text:00000000000047A0                 lea     rax, default_quoting_options
.text:00000000000047A7                 test    rdi, rdi
.text:00000000000047AA                 cmovz   rdi, rax
.text:00000000000047AE                 mov     eax, [rdi+4]
.text:00000000000047B1                 mov     [rdi+4], esi
.text:00000000000047B4                 retn
.text:00000000000047B4 ; } // starts at 47A0
.text:00000000000047B4 set_quoting_flags endp
.text:00000000000047B4
.text:00000000000047B4 ; ---------------------------------------------------------------------------
.text:00000000000047B5                 align 20h
.text:00000000000047C0
.text:00000000000047C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047C0
.text:00000000000047C0 ; Attributes: info_from_lumina
.text:00000000000047C0
.text:00000000000047C0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000047C0                 public set_custom_quoting
.text:00000000000047C0 set_custom_quoting proc near
.text:00000000000047C0 ; __unwind {
.text:00000000000047C0                 lea     rax, default_quoting_options
.text:00000000000047C7                 test    rdi, rdi
.text:00000000000047CA                 cmovz   rdi, rax
.text:00000000000047CE                 test    rsi, rsi
.text:00000000000047D1                 mov     dword ptr [rdi], 0Ah
.text:00000000000047D7                 jz      short loc_47E7
.text:00000000000047D9                 test    rdx, rdx
.text:00000000000047DC                 jz      short loc_47E7
.text:00000000000047DE                 mov     [rdi+28h], rsi
.text:00000000000047E2                 mov     [rdi+30h], rdx
.text:00000000000047E6                 retn
.text:00000000000047E7 ; ---------------------------------------------------------------------------
.text:00000000000047E7
.text:00000000000047E7 loc_47E7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000047E7                                         ; set_custom_quoting+1C↑j
.text:00000000000047E7                 sub     rsp, 8
.text:00000000000047EB                 call    _abort
.text:00000000000047EB ; } // starts at 47C0
.text:00000000000047EB set_custom_quoting endp
.text:00000000000047EB
.text:00000000000047F0
.text:00000000000047F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047F0
.text:00000000000047F0 ; Attributes: info_from_lumina
.text:00000000000047F0
.text:00000000000047F0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000047F0                 public quotearg_buffer
.text:00000000000047F0 quotearg_buffer proc near
.text:00000000000047F0
.text:00000000000047F0 var_40          = qword ptr -40h
.text:00000000000047F0
.text:00000000000047F0 ; __unwind {
.text:00000000000047F0                 push    r15
.text:00000000000047F2                 push    r14
.text:00000000000047F4                 lea     rax, default_quoting_options
.text:00000000000047FB                 push    r13
.text:00000000000047FD                 push    r12
.text:00000000000047FF                 mov     r13, rdi
.text:0000000000004802                 push    rbp
.text:0000000000004803                 push    rbx
.text:0000000000004804                 mov     rbx, r8
.text:0000000000004807                 mov     r14, rsi
.text:000000000000480A                 mov     r15, rdx
.text:000000000000480D                 sub     rsp, 18h
.text:0000000000004811                 test    r8, r8
.text:0000000000004814                 cmovz   rbx, rax
.text:0000000000004818                 mov     [rsp+48h+var_40], rcx
.text:000000000000481D                 call    ___errno_location
.text:0000000000004822                 mov     r12d, [rax]
.text:0000000000004825                 mov     rbp, rax
.text:0000000000004828                 lea     rax, [rbx+8]
.text:000000000000482C                 sub     rsp, 8
.text:0000000000004830                 mov     r9d, [rbx+4]
.text:0000000000004834                 push    qword ptr [rbx+30h]
.text:0000000000004837                 mov     r8d, [rbx]
.text:000000000000483A                 push    qword ptr [rbx+28h]
.text:000000000000483D                 mov     rdx, r15
.text:0000000000004840                 push    rax
.text:0000000000004841                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004846                 mov     rsi, r14
.text:0000000000004849                 mov     rdi, r13
.text:000000000000484C                 call    quotearg_buffer_restyled
.text:0000000000004851                 mov     [rbp+0], r12d
.text:0000000000004855                 add     rsp, 38h
.text:0000000000004859                 pop     rbx
.text:000000000000485A                 pop     rbp
.text:000000000000485B                 pop     r12
.text:000000000000485D                 pop     r13
.text:000000000000485F                 pop     r14
.text:0000000000004861                 pop     r15
.text:0000000000004863                 retn
.text:0000000000004863 ; } // starts at 47F0
.text:0000000000004863 quotearg_buffer endp
.text:0000000000004863
.text:0000000000004863 ; ---------------------------------------------------------------------------
.text:0000000000004864                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870 ; Attributes: info_from_lumina
.text:0000000000004870
.text:0000000000004870 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004870                 public quotearg_alloc_mem
.text:0000000000004870 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004870
.text:0000000000004870 var_5C          = dword ptr -5Ch
.text:0000000000004870 var_58          = qword ptr -58h
.text:0000000000004870 var_50          = qword ptr -50h
.text:0000000000004870 var_48          = qword ptr -48h
.text:0000000000004870 var_40          = qword ptr -40h
.text:0000000000004870
.text:0000000000004870 ; __unwind {
.text:0000000000004870                 push    r15
.text:0000000000004872                 push    r14
.text:0000000000004874                 lea     rax, default_quoting_options
.text:000000000000487B                 push    r13
.text:000000000000487D                 push    r12
.text:000000000000487F                 mov     r12, rdx
.text:0000000000004882                 push    rbp
.text:0000000000004883                 push    rbx
.text:0000000000004884                 mov     rbx, rcx
.text:0000000000004887                 mov     r14, rdi
.text:000000000000488A                 mov     r15, rsi
.text:000000000000488D                 sub     rsp, 38h
.text:0000000000004891                 test    rcx, rcx
.text:0000000000004894                 cmovz   rbx, rax
.text:0000000000004898                 xor     ebp, ebp
.text:000000000000489A                 call    ___errno_location
.text:000000000000489F                 test    r12, r12
.text:00000000000048A2                 mov     r13, rax
.text:00000000000048A5                 mov     eax, [rax]
.text:00000000000048A7                 setz    bpl
.text:00000000000048AB                 or      ebp, [rbx+4]
.text:00000000000048AE                 lea     r10, [rbx+8]
.text:00000000000048B2                 sub     rsp, 8
.text:00000000000048B6                 mov     r8d, [rbx]
.text:00000000000048B9                 mov     rcx, r15
.text:00000000000048BC                 mov     [rsp+70h+var_5C], eax
.text:00000000000048C0                 push    qword ptr [rbx+30h]
.text:00000000000048C3                 mov     rdx, r14
.text:00000000000048C6                 push    qword ptr [rbx+28h]
.text:00000000000048C9                 push    r10
.text:00000000000048CB                 xor     esi, esi
.text:00000000000048CD                 mov     r9d, ebp
.text:00000000000048D0                 xor     edi, edi
.text:00000000000048D2                 mov     [rsp+88h+var_48], r10
.text:00000000000048D7                 call    quotearg_buffer_restyled
.text:00000000000048DC                 lea     rsi, [rax+1]
.text:00000000000048E0                 mov     [rsp+88h+var_40], rax
.text:00000000000048E5                 add     rsp, 20h
.text:00000000000048E9                 mov     rdi, rsi
.text:00000000000048EC                 mov     [rsp+68h+var_50], rsi
.text:00000000000048F1                 call    xmalloc
.text:00000000000048F6                 mov     [rsp+68h+var_58], rax
.text:00000000000048FB                 sub     rsp, 8
.text:00000000000048FF                 push    qword ptr [rbx+30h]
.text:0000000000004902                 push    qword ptr [rbx+28h]
.text:0000000000004905                 mov     r10, [rsp+80h+var_48]
.text:000000000000490A                 mov     r9d, ebp
.text:000000000000490D                 mov     r8d, [rbx]
.text:0000000000004910                 mov     rcx, r15
.text:0000000000004913                 mov     rdx, r14
.text:0000000000004916                 mov     rdi, rax
.text:0000000000004919                 push    r10
.text:000000000000491B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004920                 call    quotearg_buffer_restyled
.text:0000000000004925                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004929                 add     rsp, 20h
.text:000000000000492D                 test    r12, r12
.text:0000000000004930                 mov     [r13+0], eax
.text:0000000000004934                 jz      short loc_493F
.text:0000000000004936                 mov     r11, [rsp+68h+var_40]
.text:000000000000493B                 mov     [r12], r11
.text:000000000000493F
.text:000000000000493F loc_493F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000493F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004944                 add     rsp, 38h
.text:0000000000004948                 pop     rbx
.text:0000000000004949                 pop     rbp
.text:000000000000494A                 pop     r12
.text:000000000000494C                 pop     r13
.text:000000000000494E                 pop     r14
.text:0000000000004950                 pop     r15
.text:0000000000004952                 retn
.text:0000000000004952 ; } // starts at 4870
.text:0000000000004952 quotearg_alloc_mem endp
.text:0000000000004952
.text:0000000000004952 ; ---------------------------------------------------------------------------
.text:0000000000004953                 align 20h
.text:0000000000004960
.text:0000000000004960 ; =============== S U B R O U T I N E =======================================
.text:0000000000004960
.text:0000000000004960
.text:0000000000004960                 public quotearg_alloc
.text:0000000000004960 quotearg_alloc  proc near
.text:0000000000004960 ; __unwind {
.text:0000000000004960                 mov     rcx, rdx
.text:0000000000004963                 xor     edx, edx
.text:0000000000004965                 jmp     quotearg_alloc_mem
.text:0000000000004965 ; } // starts at 4960
.text:0000000000004965 quotearg_alloc  endp
.text:0000000000004965
.text:0000000000004965 ; ---------------------------------------------------------------------------
.text:000000000000496A                 align 10h
.text:0000000000004970
.text:0000000000004970 ; =============== S U B R O U T I N E =======================================
.text:0000000000004970
.text:0000000000004970 ; Attributes: info_from_lumina
.text:0000000000004970
.text:0000000000004970 ; void __cdecl quotearg_free()
.text:0000000000004970                 public quotearg_free
.text:0000000000004970 quotearg_free   proc near
.text:0000000000004970 ; __unwind {
.text:0000000000004970                 mov     eax, cs:nslots
.text:0000000000004976                 push    r12
.text:0000000000004978                 mov     r12, cs:slotvec
.text:000000000000497F                 push    rbp
.text:0000000000004980                 push    rbx
.text:0000000000004981                 cmp     eax, 1
.text:0000000000004984                 jle     short loc_49B1
.text:0000000000004986                 sub     eax, 2
.text:0000000000004989                 lea     rbx, [r12+18h]
.text:000000000000498E                 shl     rax, 4
.text:0000000000004992                 lea     rbp, [r12+rax+28h]
.text:0000000000004997                 nop     word ptr [rax+rax+00000000h]
.text:00000000000049A0
.text:00000000000049A0 loc_49A0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000049A0                 mov     rdi, [rbx]      ; ptr
.text:00000000000049A3                 add     rbx, 10h
.text:00000000000049A7                 call    _free
.text:00000000000049AC                 cmp     rbx, rbp
.text:00000000000049AF                 jnz     short loc_49A0
.text:00000000000049B1
.text:00000000000049B1 loc_49B1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000049B1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000049B6                 lea     rbx, slot0
.text:00000000000049BD                 cmp     rdi, rbx
.text:00000000000049C0                 jz      short loc_49D9
.text:00000000000049C2                 call    _free
.text:00000000000049C7                 mov     cs:slotvec0, 100h
.text:00000000000049D2                 mov     cs:off_219078, rbx
.text:00000000000049D9
.text:00000000000049D9 loc_49D9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000049D9                 lea     rbx, slotvec0
.text:00000000000049E0                 cmp     r12, rbx
.text:00000000000049E3                 jz      short loc_49F4
.text:00000000000049E5                 mov     rdi, r12        ; ptr
.text:00000000000049E8                 call    _free
.text:00000000000049ED                 mov     cs:slotvec, rbx
.text:00000000000049F4
.text:00000000000049F4 loc_49F4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000049F4                 pop     rbx
.text:00000000000049F5                 mov     cs:nslots, 1
.text:00000000000049FF                 pop     rbp
.text:0000000000004A00                 pop     r12
.text:0000000000004A02                 retn
.text:0000000000004A02 ; } // starts at 4970
.text:0000000000004A02 quotearg_free   endp
.text:0000000000004A02
.text:0000000000004A02 ; ---------------------------------------------------------------------------
.text:0000000000004A03                 align 10h
.text:0000000000004A10
.text:0000000000004A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A10
.text:0000000000004A10
.text:0000000000004A10                 public quotearg_n
.text:0000000000004A10 quotearg_n      proc near
.text:0000000000004A10 ; __unwind {
.text:0000000000004A10                 lea     rcx, default_quoting_options
.text:0000000000004A17                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A1E                 jmp     quotearg_n_options
.text:0000000000004A1E ; } // starts at 4A10
.text:0000000000004A1E quotearg_n      endp
.text:0000000000004A1E
.text:0000000000004A1E ; ---------------------------------------------------------------------------
.text:0000000000004A23                 align 10h
.text:0000000000004A30
.text:0000000000004A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A30
.text:0000000000004A30
.text:0000000000004A30                 public quotearg_n_mem
.text:0000000000004A30 quotearg_n_mem  proc near
.text:0000000000004A30 ; __unwind {
.text:0000000000004A30                 lea     rcx, default_quoting_options
.text:0000000000004A37                 jmp     quotearg_n_options
.text:0000000000004A37 ; } // starts at 4A30
.text:0000000000004A37 quotearg_n_mem  endp
.text:0000000000004A37
.text:0000000000004A37 ; ---------------------------------------------------------------------------
.text:0000000000004A3C                 align 20h
.text:0000000000004A40
.text:0000000000004A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A40
.text:0000000000004A40
.text:0000000000004A40                 public quotearg
.text:0000000000004A40 quotearg        proc near
.text:0000000000004A40 ; __unwind {
.text:0000000000004A40                 lea     rcx, default_quoting_options
.text:0000000000004A47                 mov     rsi, rdi
.text:0000000000004A4A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A51                 xor     edi, edi
.text:0000000000004A53                 jmp     quotearg_n_options
.text:0000000000004A53 ; } // starts at 4A40
.text:0000000000004A53 quotearg        endp
.text:0000000000004A53
.text:0000000000004A53 ; ---------------------------------------------------------------------------
.text:0000000000004A58                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60
.text:0000000000004A60                 public quotearg_mem
.text:0000000000004A60 quotearg_mem    proc near
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 lea     rcx, default_quoting_options
.text:0000000000004A67                 mov     rdx, rsi
.text:0000000000004A6A                 mov     rsi, rdi
.text:0000000000004A6D                 xor     edi, edi
.text:0000000000004A6F                 jmp     quotearg_n_options
.text:0000000000004A6F ; } // starts at 4A60
.text:0000000000004A6F quotearg_mem    endp
.text:0000000000004A6F
.text:0000000000004A6F ; ---------------------------------------------------------------------------
.text:0000000000004A74                 align 20h
.text:0000000000004A80
.text:0000000000004A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A80
.text:0000000000004A80 ; Attributes: info_from_lumina
.text:0000000000004A80
.text:0000000000004A80 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004A80                 public quotearg_n_style
.text:0000000000004A80 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004A80
.text:0000000000004A80 var_48          = dword ptr -48h
.text:0000000000004A80 var_44          = qword ptr -44h
.text:0000000000004A80 var_3C          = qword ptr -3Ch
.text:0000000000004A80 var_34          = qword ptr -34h
.text:0000000000004A80 var_2C          = qword ptr -2Ch
.text:0000000000004A80 var_24          = qword ptr -24h
.text:0000000000004A80 var_1C          = qword ptr -1Ch
.text:0000000000004A80 var_14          = dword ptr -14h
.text:0000000000004A80 var_10          = qword ptr -10h
.text:0000000000004A80
.text:0000000000004A80 ; __unwind {
.text:0000000000004A80                 sub     rsp, 48h
.text:0000000000004A84                 mov     rax, rdx
.text:0000000000004A87                 mov     rdx, fs:28h
.text:0000000000004A90                 mov     [rsp+48h+var_10], rdx
.text:0000000000004A95                 xor     edx, edx
.text:0000000000004A97                 cmp     esi, 0Ah
.text:0000000000004A9A                 jz      short loc_4B04
.text:0000000000004A9C                 mov     [rsp+48h+var_48], esi
.text:0000000000004A9F                 mov     rcx, rsp
.text:0000000000004AA2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004AA9                 mov     rsi, rax
.text:0000000000004AAC                 mov     [rsp+48h+var_44], 0
.text:0000000000004AB5                 mov     [rsp+48h+var_3C], 0
.text:0000000000004ABE                 mov     [rsp+48h+var_34], 0
.text:0000000000004AC7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004AD0                 mov     [rsp+48h+var_24], 0
.text:0000000000004AD9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004AE2                 mov     [rsp+48h+var_14], 0
.text:0000000000004AEA                 call    quotearg_n_options
.text:0000000000004AEF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004AF4                 xor     rcx, fs:28h
.text:0000000000004AFD                 jnz     short loc_4B09
.text:0000000000004AFF                 add     rsp, 48h
.text:0000000000004B03                 retn
.text:0000000000004B04 ; ---------------------------------------------------------------------------
.text:0000000000004B04
.text:0000000000004B04 loc_4B04:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004B04                 call    _abort
.text:0000000000004B09 ; ---------------------------------------------------------------------------
.text:0000000000004B09
.text:0000000000004B09 loc_4B09:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004B09                 call    ___stack_chk_fail
.text:0000000000004B09 ; } // starts at 4A80
.text:0000000000004B09 quotearg_n_style endp
.text:0000000000004B09
.text:0000000000004B09 ; ---------------------------------------------------------------------------
.text:0000000000004B0E                 align 10h
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10 ; Attributes: info_from_lumina
.text:0000000000004B10
.text:0000000000004B10 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004B10                 public quotearg_n_style_mem
.text:0000000000004B10 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004B10
.text:0000000000004B10 var_48          = dword ptr -48h
.text:0000000000004B10 var_44          = qword ptr -44h
.text:0000000000004B10 var_3C          = qword ptr -3Ch
.text:0000000000004B10 var_34          = qword ptr -34h
.text:0000000000004B10 var_2C          = qword ptr -2Ch
.text:0000000000004B10 var_24          = qword ptr -24h
.text:0000000000004B10 var_1C          = qword ptr -1Ch
.text:0000000000004B10 var_14          = dword ptr -14h
.text:0000000000004B10 var_10          = qword ptr -10h
.text:0000000000004B10
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 sub     rsp, 48h
.text:0000000000004B14                 mov     rax, rdx
.text:0000000000004B17                 mov     rdx, rcx
.text:0000000000004B1A                 mov     rcx, fs:28h
.text:0000000000004B23                 mov     [rsp+48h+var_10], rcx
.text:0000000000004B28                 xor     ecx, ecx
.text:0000000000004B2A                 cmp     esi, 0Ah
.text:0000000000004B2D                 jz      short loc_4B90
.text:0000000000004B2F                 mov     [rsp+48h+var_48], esi
.text:0000000000004B32                 mov     rcx, rsp
.text:0000000000004B35                 mov     rsi, rax
.text:0000000000004B38                 mov     [rsp+48h+var_44], 0
.text:0000000000004B41                 mov     [rsp+48h+var_3C], 0
.text:0000000000004B4A                 mov     [rsp+48h+var_34], 0
.text:0000000000004B53                 mov     [rsp+48h+var_2C], 0
.text:0000000000004B5C                 mov     [rsp+48h+var_24], 0
.text:0000000000004B65                 mov     [rsp+48h+var_1C], 0
.text:0000000000004B6E                 mov     [rsp+48h+var_14], 0
.text:0000000000004B76                 call    quotearg_n_options
.text:0000000000004B7B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004B80                 xor     rdx, fs:28h
.text:0000000000004B89                 jnz     short loc_4B95
.text:0000000000004B8B                 add     rsp, 48h
.text:0000000000004B8F                 retn
.text:0000000000004B90 ; ---------------------------------------------------------------------------
.text:0000000000004B90
.text:0000000000004B90 loc_4B90:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004B90                 call    _abort
.text:0000000000004B95 ; ---------------------------------------------------------------------------
.text:0000000000004B95
.text:0000000000004B95 loc_4B95:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004B95                 call    ___stack_chk_fail
.text:0000000000004B95 ; } // starts at 4B10
.text:0000000000004B95 quotearg_n_style_mem endp
.text:0000000000004B95
.text:0000000000004B95 ; ---------------------------------------------------------------------------
.text:0000000000004B9A                 align 20h
.text:0000000000004BA0
.text:0000000000004BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BA0
.text:0000000000004BA0
.text:0000000000004BA0                 public quotearg_style
.text:0000000000004BA0 quotearg_style  proc near               ; CODE XREF: main+47B↑p
.text:0000000000004BA0                                         ; main+4D4↑p ...
.text:0000000000004BA0 ; __unwind {
.text:0000000000004BA0                 mov     rdx, rsi
.text:0000000000004BA3                 mov     esi, edi
.text:0000000000004BA5                 xor     edi, edi
.text:0000000000004BA7                 jmp     quotearg_n_style
.text:0000000000004BA7 ; } // starts at 4BA0
.text:0000000000004BA7 quotearg_style  endp
.text:0000000000004BA7
.text:0000000000004BA7 ; ---------------------------------------------------------------------------
.text:0000000000004BAC                 align 10h
.text:0000000000004BB0
.text:0000000000004BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BB0
.text:0000000000004BB0
.text:0000000000004BB0                 public quotearg_style_mem
.text:0000000000004BB0 quotearg_style_mem proc near
.text:0000000000004BB0 ; __unwind {
.text:0000000000004BB0                 mov     rcx, rdx
.text:0000000000004BB3                 mov     rdx, rsi
.text:0000000000004BB6                 mov     esi, edi
.text:0000000000004BB8                 xor     edi, edi
.text:0000000000004BBA                 jmp     quotearg_n_style_mem
.text:0000000000004BBA ; } // starts at 4BB0
.text:0000000000004BBA quotearg_style_mem endp
.text:0000000000004BBA
.text:0000000000004BBA ; ---------------------------------------------------------------------------
.text:0000000000004BBF                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BC0
.text:0000000000004BC0 ; Attributes: info_from_lumina
.text:0000000000004BC0
.text:0000000000004BC0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004BC0                 public quotearg_char_mem
.text:0000000000004BC0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004BC0                                         ; quotearg_colon+C↓j ...
.text:0000000000004BC0
.text:0000000000004BC0 var_48          = xmmword ptr -48h
.text:0000000000004BC0 var_38          = xmmword ptr -38h
.text:0000000000004BC0 var_28          = xmmword ptr -28h
.text:0000000000004BC0 var_18          = qword ptr -18h
.text:0000000000004BC0 var_10          = qword ptr -10h
.text:0000000000004BC0
.text:0000000000004BC0 ; __unwind {
.text:0000000000004BC0                 sub     rsp, 48h
.text:0000000000004BC4                 mov     ecx, edx
.text:0000000000004BC6                 mov     rax, fs:28h
.text:0000000000004BCF                 mov     [rsp+48h+var_10], rax
.text:0000000000004BD4                 xor     eax, eax
.text:0000000000004BD6                 mov     rax, cs:qword_21B3F0
.text:0000000000004BDD                 mov     r8, rsp
.text:0000000000004BE0                 and     ecx, 1Fh
.text:0000000000004BE3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004BEB                 mov     [rsp+48h+var_18], rax
.text:0000000000004BF0                 mov     eax, edx
.text:0000000000004BF2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004BF6                 shr     al, 5
.text:0000000000004BF9                 movzx   eax, al
.text:0000000000004BFC                 lea     r9, [r8+rax*4+8]
.text:0000000000004C01                 movdqa  xmm0, cs:xmmword_21B3D0
.text:0000000000004C09                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004C0E                 movdqa  xmm0, cs:xmmword_21B3E0
.text:0000000000004C16                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004C1B                 mov     edx, [r9]
.text:0000000000004C1E                 mov     eax, edx
.text:0000000000004C20                 shr     eax, cl
.text:0000000000004C22                 not     eax
.text:0000000000004C24                 and     eax, 1
.text:0000000000004C27                 shl     eax, cl
.text:0000000000004C29                 mov     rcx, r8
.text:0000000000004C2C                 xor     eax, edx
.text:0000000000004C2E                 mov     rdx, rsi
.text:0000000000004C31                 mov     rsi, rdi
.text:0000000000004C34                 mov     [r9], eax
.text:0000000000004C37                 xor     edi, edi
.text:0000000000004C39                 call    quotearg_n_options
.text:0000000000004C3E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004C43                 xor     rsi, fs:28h
.text:0000000000004C4C                 jnz     short loc_4C53
.text:0000000000004C4E                 add     rsp, 48h
.text:0000000000004C52                 retn
.text:0000000000004C53 ; ---------------------------------------------------------------------------
.text:0000000000004C53
.text:0000000000004C53 loc_4C53:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004C53                 call    ___stack_chk_fail
.text:0000000000004C53 ; } // starts at 4BC0
.text:0000000000004C53 quotearg_char_mem endp
.text:0000000000004C53
.text:0000000000004C53 ; ---------------------------------------------------------------------------
.text:0000000000004C58                 align 20h
.text:0000000000004C60
.text:0000000000004C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C60
.text:0000000000004C60
.text:0000000000004C60                 public quotearg_char
.text:0000000000004C60 quotearg_char   proc near
.text:0000000000004C60 ; __unwind {
.text:0000000000004C60                 movsx   edx, sil
.text:0000000000004C64                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C6B                 jmp     quotearg_char_mem
.text:0000000000004C6B ; } // starts at 4C60
.text:0000000000004C6B quotearg_char   endp
.text:0000000000004C6B
.text:0000000000004C70
.text:0000000000004C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C70
.text:0000000000004C70
.text:0000000000004C70                 public quotearg_colon
.text:0000000000004C70 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004C70 ; __unwind {
.text:0000000000004C70                 mov     edx, 3Ah ; ':'
.text:0000000000004C75                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C7C                 jmp     quotearg_char_mem
.text:0000000000004C7C ; } // starts at 4C70
.text:0000000000004C7C quotearg_colon  endp
.text:0000000000004C7C
.text:0000000000004C7C ; ---------------------------------------------------------------------------
.text:0000000000004C81                 align 10h
.text:0000000000004C90
.text:0000000000004C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C90
.text:0000000000004C90
.text:0000000000004C90                 public quotearg_colon_mem
.text:0000000000004C90 quotearg_colon_mem proc near
.text:0000000000004C90 ; __unwind {
.text:0000000000004C90                 mov     edx, 3Ah ; ':'
.text:0000000000004C95                 jmp     quotearg_char_mem
.text:0000000000004C95 ; } // starts at 4C90
.text:0000000000004C95 quotearg_colon_mem endp
.text:0000000000004C95
.text:0000000000004C95 ; ---------------------------------------------------------------------------
.text:0000000000004C9A                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0 ; Attributes: info_from_lumina
.text:0000000000004CA0
.text:0000000000004CA0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004CA0                 public quotearg_n_style_colon
.text:0000000000004CA0 quotearg_n_style_colon proc near        ; CODE XREF: main+528↑p
.text:0000000000004CA0                                         ; main+548↑p ...
.text:0000000000004CA0
.text:0000000000004CA0 var_48          = dword ptr -48h
.text:0000000000004CA0 var_44          = qword ptr -44h
.text:0000000000004CA0 var_3C          = qword ptr -3Ch
.text:0000000000004CA0 var_34          = qword ptr -34h
.text:0000000000004CA0 var_2C          = qword ptr -2Ch
.text:0000000000004CA0 var_24          = qword ptr -24h
.text:0000000000004CA0 var_1C          = qword ptr -1Ch
.text:0000000000004CA0 var_14          = dword ptr -14h
.text:0000000000004CA0 var_10          = qword ptr -10h
.text:0000000000004CA0
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 sub     rsp, 48h
.text:0000000000004CA4                 mov     rax, rdx
.text:0000000000004CA7                 mov     rdx, fs:28h
.text:0000000000004CB0                 mov     [rsp+48h+var_10], rdx
.text:0000000000004CB5                 xor     edx, edx
.text:0000000000004CB7                 cmp     esi, 0Ah
.text:0000000000004CBA                 jz      short loc_4D24
.text:0000000000004CBC                 mov     [rsp+48h+var_48], esi
.text:0000000000004CBF                 mov     rcx, rsp
.text:0000000000004CC2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CC9                 mov     rsi, rax
.text:0000000000004CCC                 mov     [rsp+48h+var_44], 0
.text:0000000000004CD5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000004CDE                 mov     [rsp+48h+var_34], 0
.text:0000000000004CE7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004CF0                 mov     [rsp+48h+var_24], 0
.text:0000000000004CF9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004D02                 mov     [rsp+48h+var_14], 0
.text:0000000000004D0A                 call    quotearg_n_options
.text:0000000000004D0F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004D14                 xor     rcx, fs:28h
.text:0000000000004D1D                 jnz     short loc_4D29
.text:0000000000004D1F                 add     rsp, 48h
.text:0000000000004D23                 retn
.text:0000000000004D24 ; ---------------------------------------------------------------------------
.text:0000000000004D24
.text:0000000000004D24 loc_4D24:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004D24                 call    _abort
.text:0000000000004D29 ; ---------------------------------------------------------------------------
.text:0000000000004D29
.text:0000000000004D29 loc_4D29:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004D29                 call    ___stack_chk_fail
.text:0000000000004D29 ; } // starts at 4CA0
.text:0000000000004D29 quotearg_n_style_colon endp
.text:0000000000004D29
.text:0000000000004D29 ; ---------------------------------------------------------------------------
.text:0000000000004D2E                 align 10h
.text:0000000000004D30
.text:0000000000004D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D30
.text:0000000000004D30 ; Attributes: info_from_lumina
.text:0000000000004D30
.text:0000000000004D30 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004D30                 public quotearg_n_custom_mem
.text:0000000000004D30 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004D30                                         ; quotearg_custom+12↓j ...
.text:0000000000004D30
.text:0000000000004D30 var_48          = xmmword ptr -48h
.text:0000000000004D30 var_38          = xmmword ptr -38h
.text:0000000000004D30 var_28          = xmmword ptr -28h
.text:0000000000004D30 var_18          = qword ptr -18h
.text:0000000000004D30 var_10          = qword ptr -10h
.text:0000000000004D30
.text:0000000000004D30 ; __unwind {
.text:0000000000004D30                 sub     rsp, 48h
.text:0000000000004D34                 mov     r9, rcx
.text:0000000000004D37                 mov     rcx, cs:qword_21B3F0
.text:0000000000004D3E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004D46                 mov     rax, fs:28h
.text:0000000000004D4F                 mov     [rsp+48h+var_10], rax
.text:0000000000004D54                 xor     eax, eax
.text:0000000000004D56                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004D5A                 test    rsi, rsi
.text:0000000000004D5D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004D62                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004D69                 movdqa  xmm0, cs:xmmword_21B3D0
.text:0000000000004D71                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004D76                 movdqa  xmm0, cs:xmmword_21B3E0
.text:0000000000004D7E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004D83                 jz      short loc_4DB7
.text:0000000000004D85                 test    rdx, rdx
.text:0000000000004D88                 jz      short loc_4DB7
.text:0000000000004D8A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004D8F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004D94                 mov     rcx, rsp
.text:0000000000004D97                 mov     rdx, r8
.text:0000000000004D9A                 mov     rsi, r9
.text:0000000000004D9D                 call    quotearg_n_options
.text:0000000000004DA2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004DA7                 xor     rdi, fs:28h
.text:0000000000004DB0                 jnz     short loc_4DBC
.text:0000000000004DB2                 add     rsp, 48h
.text:0000000000004DB6                 retn
.text:0000000000004DB7 ; ---------------------------------------------------------------------------
.text:0000000000004DB7
.text:0000000000004DB7 loc_4DB7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004DB7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004DB7                 call    _abort
.text:0000000000004DBC ; ---------------------------------------------------------------------------
.text:0000000000004DBC
.text:0000000000004DBC loc_4DBC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004DBC                 call    ___stack_chk_fail
.text:0000000000004DBC ; } // starts at 4D30
.text:0000000000004DBC quotearg_n_custom_mem endp
.text:0000000000004DBC
.text:0000000000004DBC ; ---------------------------------------------------------------------------
.text:0000000000004DC1                 align 10h
.text:0000000000004DD0
.text:0000000000004DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DD0
.text:0000000000004DD0
.text:0000000000004DD0                 public quotearg_n_custom
.text:0000000000004DD0 quotearg_n_custom proc near
.text:0000000000004DD0 ; __unwind {
.text:0000000000004DD0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004DD7                 jmp     quotearg_n_custom_mem
.text:0000000000004DD7 ; } // starts at 4DD0
.text:0000000000004DD7 quotearg_n_custom endp
.text:0000000000004DD7
.text:0000000000004DD7 ; ---------------------------------------------------------------------------
.text:0000000000004DDC                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DE0
.text:0000000000004DE0
.text:0000000000004DE0                 public quotearg_custom
.text:0000000000004DE0 quotearg_custom proc near
.text:0000000000004DE0 ; __unwind {
.text:0000000000004DE0                 mov     rcx, rdx
.text:0000000000004DE3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004DEA                 mov     rdx, rsi
.text:0000000000004DED                 mov     rsi, rdi
.text:0000000000004DF0                 xor     edi, edi
.text:0000000000004DF2                 jmp     quotearg_n_custom_mem
.text:0000000000004DF2 ; } // starts at 4DE0
.text:0000000000004DF2 quotearg_custom endp
.text:0000000000004DF2
.text:0000000000004DF2 ; ---------------------------------------------------------------------------
.text:0000000000004DF7                 align 20h
.text:0000000000004E00
.text:0000000000004E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E00
.text:0000000000004E00
.text:0000000000004E00                 public quotearg_custom_mem
.text:0000000000004E00 quotearg_custom_mem proc near
.text:0000000000004E00 ; __unwind {
.text:0000000000004E00                 mov     r8, rcx
.text:0000000000004E03                 mov     rcx, rdx
.text:0000000000004E06                 mov     rdx, rsi
.text:0000000000004E09                 mov     rsi, rdi
.text:0000000000004E0C                 xor     edi, edi
.text:0000000000004E0E                 jmp     quotearg_n_custom_mem
.text:0000000000004E0E ; } // starts at 4E00
.text:0000000000004E0E quotearg_custom_mem endp
.text:0000000000004E0E
.text:0000000000004E0E ; ---------------------------------------------------------------------------
.text:0000000000004E13                 align 20h
.text:0000000000004E20
.text:0000000000004E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E20
.text:0000000000004E20
.text:0000000000004E20                 public quote_n_mem
.text:0000000000004E20 quote_n_mem     proc near
.text:0000000000004E20 ; __unwind {
.text:0000000000004E20                 lea     rcx, quote_quoting_options
.text:0000000000004E27                 jmp     quotearg_n_options
.text:0000000000004E27 ; } // starts at 4E20
.text:0000000000004E27 quote_n_mem     endp
.text:0000000000004E27
.text:0000000000004E27 ; ---------------------------------------------------------------------------
.text:0000000000004E2C                 align 10h
.text:0000000000004E30
.text:0000000000004E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E30
.text:0000000000004E30
.text:0000000000004E30                 public quote_mem
.text:0000000000004E30 quote_mem       proc near
.text:0000000000004E30 ; __unwind {
.text:0000000000004E30                 lea     rcx, quote_quoting_options
.text:0000000000004E37                 mov     rdx, rsi
.text:0000000000004E3A                 mov     rsi, rdi
.text:0000000000004E3D                 xor     edi, edi
.text:0000000000004E3F                 jmp     quotearg_n_options
.text:0000000000004E3F ; } // starts at 4E30
.text:0000000000004E3F quote_mem       endp
.text:0000000000004E3F
.text:0000000000004E3F ; ---------------------------------------------------------------------------
.text:0000000000004E44                 align 10h
.text:0000000000004E50
.text:0000000000004E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E50
.text:0000000000004E50
.text:0000000000004E50                 public quote_n
.text:0000000000004E50 quote_n         proc near
.text:0000000000004E50 ; __unwind {
.text:0000000000004E50                 lea     rcx, quote_quoting_options
.text:0000000000004E57                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E5E                 jmp     quotearg_n_options
.text:0000000000004E5E ; } // starts at 4E50
.text:0000000000004E5E quote_n         endp
.text:0000000000004E5E
.text:0000000000004E5E ; ---------------------------------------------------------------------------
.text:0000000000004E63                 align 10h
.text:0000000000004E70
.text:0000000000004E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E70
.text:0000000000004E70
.text:0000000000004E70                 public quote
.text:0000000000004E70 quote           proc near
.text:0000000000004E70 ; __unwind {
.text:0000000000004E70                 lea     rcx, quote_quoting_options
.text:0000000000004E77                 mov     rsi, rdi
.text:0000000000004E7A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E81                 xor     edi, edi
.text:0000000000004E83                 jmp     quotearg_n_options
.text:0000000000004E83 ; } // starts at 4E70
.text:0000000000004E83 quote           endp
.text:0000000000004E83
.text:0000000000004E83 ; ---------------------------------------------------------------------------
.text:0000000000004E88                 align 10h
.text:0000000000004E90
.text:0000000000004E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E90
.text:0000000000004E90
.text:0000000000004E90 ; __int64 __fastcall safe_read(int fd, void *buf, size_t nbytes)
.text:0000000000004E90                 public safe_read
.text:0000000000004E90 safe_read       proc near               ; CODE XREF: main+3DD↑p
.text:0000000000004E90                                         ; tac_seekable+71↑p ...
.text:0000000000004E90 ; __unwind {
.text:0000000000004E90                 push    r13
.text:0000000000004E92                 push    r12
.text:0000000000004E94                 mov     r13d, edi
.text:0000000000004E97                 push    rbp
.text:0000000000004E98                 push    rbx
.text:0000000000004E99                 mov     r12, rsi
.text:0000000000004E9C                 mov     rbx, rdx
.text:0000000000004E9F                 sub     rsp, 8
.text:0000000000004EA3                 nop     dword ptr [rax+rax+00h]
.text:0000000000004EA8
.text:0000000000004EA8 loc_4EA8:                               ; CODE XREF: safe_read+38↓j
.text:0000000000004EA8                                         ; safe_read+4D↓j
.text:0000000000004EA8                 mov     rdx, rbx        ; nbytes
.text:0000000000004EAB                 mov     rsi, r12        ; buf
.text:0000000000004EAE                 mov     edi, r13d       ; fd
.text:0000000000004EB1                 call    _read
.text:0000000000004EB6                 test    rax, rax
.text:0000000000004EB9                 mov     rbp, rax
.text:0000000000004EBC                 jns     short loc_4EE0
.text:0000000000004EBE                 call    ___errno_location
.text:0000000000004EC3                 mov     eax, [rax]
.text:0000000000004EC5                 cmp     eax, 4
.text:0000000000004EC8                 jz      short loc_4EA8
.text:0000000000004ECA                 cmp     rbx, 7FF00000h
.text:0000000000004ED1                 jbe     short loc_4EE0
.text:0000000000004ED3                 cmp     eax, 16h
.text:0000000000004ED6                 jnz     short loc_4EE0
.text:0000000000004ED8                 mov     ebx, 7FF00000h
.text:0000000000004EDD                 jmp     short loc_4EA8
.text:0000000000004EDD ; ---------------------------------------------------------------------------
.text:0000000000004EDF                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 loc_4EE0:                               ; CODE XREF: safe_read+2C↑j
.text:0000000000004EE0                                         ; safe_read+41↑j ...
.text:0000000000004EE0                 add     rsp, 8
.text:0000000000004EE4                 mov     rax, rbp
.text:0000000000004EE7                 pop     rbx
.text:0000000000004EE8                 pop     rbp
.text:0000000000004EE9                 pop     r12
.text:0000000000004EEB                 pop     r13
.text:0000000000004EED                 retn
.text:0000000000004EED ; } // starts at 4E90
.text:0000000000004EED safe_read       endp
.text:0000000000004EED
.text:0000000000004EED ; ---------------------------------------------------------------------------
.text:0000000000004EEE                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0
.text:0000000000004EF0                 public mkstemp_safer
.text:0000000000004EF0 mkstemp_safer   proc near               ; CODE XREF: main+5BE↑p
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 sub     rsp, 8
.text:0000000000004EF4                 call    _mkstemp
.text:0000000000004EF9                 add     rsp, 8
.text:0000000000004EFD                 mov     edi, eax        ; fd
.text:0000000000004EFF                 jmp     fd_safer_flag_0
.text:0000000000004EFF ; } // starts at 4EF0
.text:0000000000004EFF mkstemp_safer   endp
.text:0000000000004EFF
.text:0000000000004EFF ; ---------------------------------------------------------------------------
.text:0000000000004F04                 align 10h
.text:0000000000004F10
.text:0000000000004F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F10
.text:0000000000004F10
.text:0000000000004F10                 public mkostemp_safer
.text:0000000000004F10 mkostemp_safer  proc near
.text:0000000000004F10 ; __unwind {
.text:0000000000004F10                 push    rbx
.text:0000000000004F11                 mov     ebx, esi
.text:0000000000004F13                 call    _mkostemp
.text:0000000000004F18                 mov     esi, ebx
.text:0000000000004F1A                 mov     edi, eax        ; fd
.text:0000000000004F1C                 pop     rbx
.text:0000000000004F1D                 jmp     fd_safer_flag
.text:0000000000004F1D ; } // starts at 4F10
.text:0000000000004F1D mkostemp_safer  endp
.text:0000000000004F1D
.text:0000000000004F1D ; ---------------------------------------------------------------------------
.text:0000000000004F22                 align 10h
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30 ; Attributes: info_from_lumina
.text:0000000000004F30
.text:0000000000004F30 ; __int64 __fastcall fd_safer_flag_0(int fd)
.text:0000000000004F30                 public fd_safer_flag_0
.text:0000000000004F30 fd_safer_flag_0 proc near               ; CODE XREF: mkstemp_safer+F↑j
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 push    r13
.text:0000000000004F32                 push    r12
.text:0000000000004F34                 push    rbp
.text:0000000000004F35                 push    rbx
.text:0000000000004F36                 mov     ebx, edi
.text:0000000000004F38                 sub     rsp, 8
.text:0000000000004F3C                 cmp     edi, 2
.text:0000000000004F3F                 ja      short loc_4F62
.text:0000000000004F41                 call    dup_safer
.text:0000000000004F46                 mov     r12d, eax
.text:0000000000004F49                 call    ___errno_location
.text:0000000000004F4E                 mov     r13d, [rax]
.text:0000000000004F51                 mov     rbp, rax
.text:0000000000004F54                 mov     edi, ebx        ; fd
.text:0000000000004F56                 call    _close
.text:0000000000004F5B                 mov     ebx, r12d
.text:0000000000004F5E                 mov     [rbp+0], r13d
.text:0000000000004F62
.text:0000000000004F62 loc_4F62:                               ; CODE XREF: fd_safer_flag_0+F↑j
.text:0000000000004F62                 add     rsp, 8
.text:0000000000004F66                 mov     eax, ebx
.text:0000000000004F68                 pop     rbx
.text:0000000000004F69                 pop     rbp
.text:0000000000004F6A                 pop     r12
.text:0000000000004F6C                 pop     r13
.text:0000000000004F6E                 retn
.text:0000000000004F6E ; } // starts at 4F30
.text:0000000000004F6E fd_safer_flag_0 endp
.text:0000000000004F6E
.text:0000000000004F6E ; ---------------------------------------------------------------------------
.text:0000000000004F6F                 align 10h
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70
.text:0000000000004F70 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004F70                 public version_etc_arn
.text:0000000000004F70 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_53AB↓j
.text:0000000000004F70                                         ; version_etc_va:loc_53FB↓p ...
.text:0000000000004F70
.text:0000000000004F70 var_58          = qword ptr -58h
.text:0000000000004F70 var_50          = qword ptr -50h
.text:0000000000004F70 var_48          = qword ptr -48h
.text:0000000000004F70 var_40          = qword ptr -40h
.text:0000000000004F70
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 push    r15
.text:0000000000004F72                 push    r14
.text:0000000000004F74                 push    r13
.text:0000000000004F76                 push    r12
.text:0000000000004F78                 mov     r12, r9
.text:0000000000004F7B                 push    rbp
.text:0000000000004F7C                 push    rbx
.text:0000000000004F7D                 mov     rbp, rdi
.text:0000000000004F80                 mov     rbx, r8
.text:0000000000004F83                 sub     rsp, 28h
.text:0000000000004F87                 test    rsi, rsi
.text:0000000000004F8A                 jz      loc_50A8
.text:0000000000004F90                 mov     r8, rdx
.text:0000000000004F93                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004F9A                 mov     r9, rcx
.text:0000000000004F9D                 xor     eax, eax
.text:0000000000004F9F                 mov     rcx, rsi
.text:0000000000004FA2                 mov     esi, 1
.text:0000000000004FA7                 call    ___fprintf_chk
.text:0000000000004FAC
.text:0000000000004FAC loc_4FAC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004FAC                 lea     rsi, aC         ; "(C)"
.text:0000000000004FB3                 xor     edi, edi        ; domainname
.text:0000000000004FB5                 mov     edx, 5          ; category
.text:0000000000004FBA                 call    _dcgettext
.text:0000000000004FBF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004FC6                 mov     rcx, rax
.text:0000000000004FC9                 mov     r8d, 7E3h
.text:0000000000004FCF                 mov     esi, 1
.text:0000000000004FD4                 mov     rdi, rbp
.text:0000000000004FD7                 xor     eax, eax
.text:0000000000004FD9                 call    ___fprintf_chk
.text:0000000000004FDE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004FE5                 xor     edi, edi        ; domainname
.text:0000000000004FE7                 mov     edx, 5          ; category
.text:0000000000004FEC                 call    _dcgettext
.text:0000000000004FF1                 mov     rsi, rbp        ; stream
.text:0000000000004FF4                 mov     rdi, rax        ; s
.text:0000000000004FF7                 call    _fputs_unlocked
.text:0000000000004FFC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005000                 ja      def_5014        ; jumptable 0000000000005014 default case
.text:0000000000005006                 lea     rdx, jpt_5014
.text:000000000000500D                 movsxd  rax, ds:(jpt_5014 - 14EA4h)[rdx+r12*4]
.text:0000000000005011                 add     rax, rdx
.text:0000000000005014                 jmp     rax             ; switch jump
.text:0000000000005014 ; ---------------------------------------------------------------------------
.text:0000000000005016                 align 20h
.text:0000000000005020
.text:0000000000005020 loc_5020:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005020                                         ; DATA XREF: .rodata:jpt_5014↓o
.text:0000000000005020                 mov     r9, [rbx+38h]   ; jumptable 0000000000005014 case 8
.text:0000000000005024                 mov     rax, [rbx+10h]
.text:0000000000005028                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000502F                 mov     r8, [rbx+8]
.text:0000000000005033                 mov     edx, 5          ; category
.text:0000000000005038                 xor     edi, edi        ; domainname
.text:000000000000503A                 mov     r13, [rbx+30h]
.text:000000000000503E                 mov     r12, [rbx+28h]
.text:0000000000005042                 mov     [rsp+58h+var_48], r9
.text:0000000000005047                 mov     r15, [rbx+20h]
.text:000000000000504B                 mov     r14, [rbx+18h]
.text:000000000000504F                 mov     [rsp+58h+var_58], rax
.text:0000000000005053                 mov     [rsp+58h+var_50], r8
.text:0000000000005058                 mov     rbx, [rbx]
.text:000000000000505B                 call    _dcgettext
.text:0000000000005060                 sub     rsp, 8
.text:0000000000005064
.text:0000000000005064 loc_5064:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005064                 mov     r9, [rsp+60h+var_48]
.text:0000000000005069                 mov     rdx, rax
.text:000000000000506C                 mov     rcx, rbx
.text:000000000000506F                 mov     esi, 1
.text:0000000000005074                 mov     rdi, rbp
.text:0000000000005077                 xor     eax, eax
.text:0000000000005079                 push    r9
.text:000000000000507B                 push    r13
.text:000000000000507D                 push    r12
.text:000000000000507F                 push    r15
.text:0000000000005081                 push    r14
.text:0000000000005083                 mov     r9, [rsp+88h+var_58]
.text:0000000000005088                 mov     r8, [rsp+88h+var_50]
.text:000000000000508D                 call    ___fprintf_chk
.text:0000000000005092                 add     rsp, 30h
.text:0000000000005096
.text:0000000000005096 loc_5096:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005096                                         ; DATA XREF: .rodata:jpt_5014↓o
.text:0000000000005096                 add     rsp, 28h        ; jumptable 0000000000005014 case 0
.text:000000000000509A                 pop     rbx
.text:000000000000509B                 pop     rbp
.text:000000000000509C                 pop     r12
.text:000000000000509E                 pop     r13
.text:00000000000050A0                 pop     r14
.text:00000000000050A2                 pop     r15
.text:00000000000050A4                 retn
.text:00000000000050A4 ; ---------------------------------------------------------------------------
.text:00000000000050A5                 align 8
.text:00000000000050A8
.text:00000000000050A8 loc_50A8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000050A8                 mov     r8, rcx
.text:00000000000050AB                 mov     rcx, rdx
.text:00000000000050AE                 lea     rdx, aSS        ; "%s %s\n"
.text:00000000000050B5                 mov     esi, 1
.text:00000000000050BA                 xor     eax, eax
.text:00000000000050BC                 call    ___fprintf_chk
.text:00000000000050C1                 jmp     loc_4FAC
.text:00000000000050C1 ; ---------------------------------------------------------------------------
.text:00000000000050C6                 align 10h
.text:00000000000050D0
.text:00000000000050D0 loc_50D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000050D0                                         ; DATA XREF: .rodata:jpt_5014↓o
.text:00000000000050D0                 mov     r10, [rbx+40h]  ; jumptable 0000000000005014 case 9
.text:00000000000050D4                 mov     r9, [rbx+38h]
.text:00000000000050D8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000050DF                 mov     rax, [rbx+10h]
.text:00000000000050E3                 mov     r8, [rbx+8]
.text:00000000000050E7                 mov     edx, 5          ; category
.text:00000000000050EC                 mov     r13, [rbx+30h]
.text:00000000000050F0                 mov     r12, [rbx+28h]
.text:00000000000050F4                 mov     r15, [rbx+20h]
.text:00000000000050F8                 mov     r14, [rbx+18h]
.text:00000000000050FC                 mov     rbx, [rbx]
.text:00000000000050FF                 mov     [rsp+58h+var_40], r10
.text:0000000000005104                 mov     [rsp+58h+var_48], r9
.text:0000000000005109                 mov     [rsp+58h+var_58], rax
.text:000000000000510D                 mov     [rsp+58h+var_50], r8
.text:0000000000005112
.text:0000000000005112 loc_5112:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005112                 xor     edi, edi        ; domainname
.text:0000000000005114                 call    _dcgettext
.text:0000000000005119                 mov     r10, [rsp+58h+var_40]
.text:000000000000511E                 push    r10
.text:0000000000005120                 jmp     loc_5064
.text:0000000000005120 ; ---------------------------------------------------------------------------
.text:0000000000005125                 align 8
.text:0000000000005128
.text:0000000000005128 loc_5128:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005128                                         ; DATA XREF: .rodata:jpt_5014↓o
.text:0000000000005128                 mov     rbx, [rbx]      ; jumptable 0000000000005014 case 1
.text:000000000000512B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005132                 mov     edx, 5          ; category
.text:0000000000005137                 xor     edi, edi        ; domainname
.text:0000000000005139                 call    _dcgettext
.text:000000000000513E                 add     rsp, 28h
.text:0000000000005142                 mov     rcx, rbx
.text:0000000000005145                 mov     rdi, rbp
.text:0000000000005148                 pop     rbx
.text:0000000000005149                 pop     rbp
.text:000000000000514A                 pop     r12
.text:000000000000514C                 pop     r13
.text:000000000000514E                 pop     r14
.text:0000000000005150                 pop     r15
.text:0000000000005152                 mov     rdx, rax
.text:0000000000005155                 mov     esi, 1
.text:000000000000515A                 xor     eax, eax
.text:000000000000515C                 jmp     ___fprintf_chk
.text:000000000000515C ; ---------------------------------------------------------------------------
.text:0000000000005161                 align 8
.text:0000000000005168
.text:0000000000005168 loc_5168:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005168                                         ; DATA XREF: .rodata:jpt_5014↓o
.text:0000000000005168                 mov     r12, [rbx+8]    ; jumptable 0000000000005014 case 2
.text:000000000000516C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005173                 mov     rbx, [rbx]
.text:0000000000005176                 mov     edx, 5          ; category
.text:000000000000517B                 xor     edi, edi        ; domainname
.text:000000000000517D                 call    _dcgettext
.text:0000000000005182                 add     rsp, 28h
.text:0000000000005186                 mov     r8, r12
.text:0000000000005189                 mov     rcx, rbx
.text:000000000000518C                 mov     rdi, rbp
.text:000000000000518F                 mov     rdx, rax
.text:0000000000005192                 mov     esi, 1
.text:0000000000005197                 pop     rbx
.text:0000000000005198                 pop     rbp
.text:0000000000005199                 pop     r12
.text:000000000000519B                 pop     r13
.text:000000000000519D                 pop     r14
.text:000000000000519F                 pop     r15
.text:00000000000051A1                 xor     eax, eax
.text:00000000000051A3                 jmp     ___fprintf_chk
.text:00000000000051A3 ; ---------------------------------------------------------------------------
.text:00000000000051A8                 align 10h
.text:00000000000051B0
.text:00000000000051B0 loc_51B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000051B0                                         ; DATA XREF: .rodata:jpt_5014↓o
.text:00000000000051B0                 mov     r13, [rbx+10h]  ; jumptable 0000000000005014 case 3
.text:00000000000051B4                 mov     r12, [rbx+8]
.text:00000000000051B8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000051BF                 mov     rbx, [rbx]
.text:00000000000051C2                 mov     edx, 5          ; category
.text:00000000000051C7                 xor     edi, edi        ; domainname
.text:00000000000051C9                 call    _dcgettext
.text:00000000000051CE                 add     rsp, 28h
.text:00000000000051D2                 mov     r9, r13
.text:00000000000051D5                 mov     r8, r12
.text:00000000000051D8                 mov     rcx, rbx
.text:00000000000051DB                 mov     rdi, rbp
.text:00000000000051DE                 mov     rdx, rax
.text:00000000000051E1                 pop     rbx
.text:00000000000051E2                 pop     rbp
.text:00000000000051E3                 pop     r12
.text:00000000000051E5                 pop     r13
.text:00000000000051E7                 pop     r14
.text:00000000000051E9                 pop     r15
.text:00000000000051EB                 mov     esi, 1
.text:00000000000051F0                 xor     eax, eax
.text:00000000000051F2                 jmp     ___fprintf_chk
.text:00000000000051F2 ; ---------------------------------------------------------------------------
.text:00000000000051F7                 align 20h
.text:0000000000005200
.text:0000000000005200 loc_5200:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005200                                         ; DATA XREF: .rodata:jpt_5014↓o
.text:0000000000005200                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005014 case 4
.text:0000000000005207                 mov     edx, 5          ; category
.text:000000000000520C                 xor     edi, edi        ; domainname
.text:000000000000520E                 mov     r14, [rbx+18h]
.text:0000000000005212                 mov     r13, [rbx+10h]
.text:0000000000005216                 mov     r12, [rbx+8]
.text:000000000000521A                 mov     rbx, [rbx]
.text:000000000000521D                 call    _dcgettext
.text:0000000000005222                 sub     rsp, 8
.text:0000000000005226
.text:0000000000005226 loc_5226:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005226                 push    r14
.text:0000000000005228                 mov     rdx, rax
.text:000000000000522B                 mov     r9, r13
.text:000000000000522E                 mov     r8, r12
.text:0000000000005231                 mov     rcx, rbx
.text:0000000000005234                 mov     rdi, rbp
.text:0000000000005237                 mov     esi, 1
.text:000000000000523C                 xor     eax, eax
.text:000000000000523E                 call    ___fprintf_chk
.text:0000000000005243                 pop     rax
.text:0000000000005244                 pop     rdx
.text:0000000000005245                 add     rsp, 28h
.text:0000000000005249                 pop     rbx
.text:000000000000524A                 pop     rbp
.text:000000000000524B                 pop     r12
.text:000000000000524D                 pop     r13
.text:000000000000524F                 pop     r14
.text:0000000000005251                 pop     r15
.text:0000000000005253                 retn
.text:0000000000005253 ; ---------------------------------------------------------------------------
.text:0000000000005254                 align 8
.text:0000000000005258
.text:0000000000005258 loc_5258:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005258                                         ; DATA XREF: .rodata:jpt_5014↓o
.text:0000000000005258                 mov     r15, [rbx+20h]  ; jumptable 0000000000005014 case 5
.text:000000000000525C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005263                 mov     edx, 5          ; category
.text:0000000000005268                 xor     edi, edi        ; domainname
.text:000000000000526A                 mov     r14, [rbx+18h]
.text:000000000000526E                 mov     r13, [rbx+10h]
.text:0000000000005272                 mov     r12, [rbx+8]
.text:0000000000005276                 mov     rbx, [rbx]
.text:0000000000005279                 call    _dcgettext
.text:000000000000527E                 push    r15
.text:0000000000005280                 jmp     short loc_5226
.text:0000000000005280 ; ---------------------------------------------------------------------------
.text:0000000000005282                 align 8
.text:0000000000005288
.text:0000000000005288 loc_5288:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005288                                         ; DATA XREF: .rodata:jpt_5014↓o
.text:0000000000005288                 mov     r8, [rbx+8]     ; jumptable 0000000000005014 case 6
.text:000000000000528C                 mov     r12, [rbx+28h]
.text:0000000000005290                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005297                 mov     r15, [rbx+20h]
.text:000000000000529B                 mov     r14, [rbx+18h]
.text:000000000000529F                 mov     edx, 5          ; category
.text:00000000000052A4                 mov     r13, [rbx+10h]
.text:00000000000052A8                 xor     edi, edi        ; domainname
.text:00000000000052AA                 mov     rbx, [rbx]
.text:00000000000052AD                 mov     [rsp+58h+var_58], r8
.text:00000000000052B1                 call    _dcgettext
.text:00000000000052B6                 sub     rsp, 8
.text:00000000000052BA                 mov     r9, r13
.text:00000000000052BD                 push    r12
.text:00000000000052BF                 push    r15
.text:00000000000052C1                 push    r14
.text:00000000000052C3
.text:00000000000052C3 loc_52C3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000052C3                 mov     r8, [rsp+78h+var_58]
.text:00000000000052C8                 mov     rcx, rbx
.text:00000000000052CB                 mov     rdx, rax
.text:00000000000052CE                 mov     rdi, rbp
.text:00000000000052D1                 mov     esi, 1
.text:00000000000052D6                 xor     eax, eax
.text:00000000000052D8                 call    ___fprintf_chk
.text:00000000000052DD                 add     rsp, 20h
.text:00000000000052E1                 add     rsp, 28h
.text:00000000000052E5                 pop     rbx
.text:00000000000052E6                 pop     rbp
.text:00000000000052E7                 pop     r12
.text:00000000000052E9                 pop     r13
.text:00000000000052EB                 pop     r14
.text:00000000000052ED                 pop     r15
.text:00000000000052EF                 retn
.text:00000000000052F0 ; ---------------------------------------------------------------------------
.text:00000000000052F0
.text:00000000000052F0 loc_52F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000052F0                                         ; DATA XREF: .rodata:jpt_5014↓o
.text:00000000000052F0                 mov     r9, [rbx+10h]   ; jumptable 0000000000005014 case 7
.text:00000000000052F4                 mov     r13, [rbx+30h]
.text:00000000000052F8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000052FF                 mov     r12, [rbx+28h]
.text:0000000000005303                 mov     r15, [rbx+20h]
.text:0000000000005307                 mov     edx, 5          ; category
.text:000000000000530C                 mov     r14, [rbx+18h]
.text:0000000000005310                 mov     r8, [rbx+8]
.text:0000000000005314                 xor     edi, edi        ; domainname
.text:0000000000005316                 mov     [rsp+58h+var_50], r9
.text:000000000000531B                 mov     rbx, [rbx]
.text:000000000000531E                 mov     [rsp+58h+var_58], r8
.text:0000000000005322                 call    _dcgettext
.text:0000000000005327                 push    r13
.text:0000000000005329                 push    r12
.text:000000000000532B                 push    r15
.text:000000000000532D                 push    r14
.text:000000000000532F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005334                 jmp     short loc_52C3
.text:0000000000005334 ; ---------------------------------------------------------------------------
.text:0000000000005336                 align 20h
.text:0000000000005340
.text:0000000000005340 def_5014:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005340                 mov     r10, [rbx+40h]  ; jumptable 0000000000005014 default case
.text:0000000000005344                 mov     r9, [rbx+38h]
.text:0000000000005348                 mov     edx, 5
.text:000000000000534D                 mov     rax, [rbx+10h]
.text:0000000000005351                 mov     r8, [rbx+8]
.text:0000000000005355                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000535C                 mov     r13, [rbx+30h]
.text:0000000000005360                 mov     r12, [rbx+28h]
.text:0000000000005364                 mov     r15, [rbx+20h]
.text:0000000000005368                 mov     r14, [rbx+18h]
.text:000000000000536C                 mov     [rsp+58h+var_40], r10
.text:0000000000005371                 mov     [rsp+58h+var_48], r9
.text:0000000000005376                 mov     [rsp+58h+var_58], rax
.text:000000000000537A                 mov     [rsp+58h+var_50], r8
.text:000000000000537F                 mov     rbx, [rbx]
.text:0000000000005382                 jmp     loc_5112
.text:0000000000005382 ; } // starts at 4F70
.text:0000000000005382 version_etc_arn endp
.text:0000000000005382
.text:0000000000005382 ; ---------------------------------------------------------------------------
.text:0000000000005387                 align 10h
.text:0000000000005390
.text:0000000000005390 ; =============== S U B R O U T I N E =======================================
.text:0000000000005390
.text:0000000000005390 ; Attributes: info_from_lumina
.text:0000000000005390
.text:0000000000005390 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005390                 public version_etc_ar
.text:0000000000005390 version_etc_ar  proc near
.text:0000000000005390 ; __unwind {
.text:0000000000005390                 xor     r9d, r9d
.text:0000000000005393                 cmp     qword ptr [r8], 0
.text:0000000000005397                 jz      short loc_53AB
.text:0000000000005399                 nop     dword ptr [rax+00000000h]
.text:00000000000053A0
.text:00000000000053A0 loc_53A0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000053A0                 add     r9, 1
.text:00000000000053A4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000053A9                 jnz     short loc_53A0
.text:00000000000053AB
.text:00000000000053AB loc_53AB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000053AB                 jmp     version_etc_arn
.text:00000000000053AB ; } // starts at 5390
.text:00000000000053AB version_etc_ar  endp
.text:00000000000053AB
.text:00000000000053B0
.text:00000000000053B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053B0
.text:00000000000053B0 ; Attributes: info_from_lumina
.text:00000000000053B0
.text:00000000000053B0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000053B0                 public version_etc_va
.text:00000000000053B0 version_etc_va  proc near
.text:00000000000053B0
.text:00000000000053B0 authtab         = qword ptr -68h
.text:00000000000053B0 var_10          = qword ptr -10h
.text:00000000000053B0
.text:00000000000053B0 ; __unwind {
.text:00000000000053B0                 sub     rsp, 68h
.text:00000000000053B4                 mov     r10, r8
.text:00000000000053B7                 xor     r9d, r9d
.text:00000000000053BA                 mov     rax, fs:28h
.text:00000000000053C3                 mov     [rsp+68h+var_10], rax
.text:00000000000053C8                 xor     eax, eax
.text:00000000000053CA                 mov     r8, rsp
.text:00000000000053CD                 nop     dword ptr [rax]
.text:00000000000053D0
.text:00000000000053D0 loc_53D0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000053D0                 mov     eax, [r10]
.text:00000000000053D3                 cmp     eax, 2Fh ; '/'
.text:00000000000053D6                 ja      short loc_541A
.text:00000000000053D8                 mov     r11d, eax
.text:00000000000053DB                 add     r11, [r10+10h]
.text:00000000000053DF                 add     eax, 8
.text:00000000000053E2                 mov     [r10], eax
.text:00000000000053E5
.text:00000000000053E5 loc_53E5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000053E5                 mov     rax, [r11]
.text:00000000000053E8                 test    rax, rax
.text:00000000000053EB                 mov     [r8+r9*8], rax
.text:00000000000053EF                 jz      short loc_53FB
.text:00000000000053F1                 add     r9, 1
.text:00000000000053F5                 cmp     r9, 0Ah
.text:00000000000053F9                 jnz     short loc_53D0
.text:00000000000053FB
.text:00000000000053FB loc_53FB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000053FB                 call    version_etc_arn
.text:0000000000005400                 mov     rax, [rsp+68h+var_10]
.text:0000000000005405                 xor     rax, fs:28h
.text:000000000000540E                 jnz     short loc_5415
.text:0000000000005410                 add     rsp, 68h
.text:0000000000005414                 retn
.text:0000000000005415 ; ---------------------------------------------------------------------------
.text:0000000000005415
.text:0000000000005415 loc_5415:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005415                 call    ___stack_chk_fail
.text:000000000000541A ; ---------------------------------------------------------------------------
.text:000000000000541A
.text:000000000000541A loc_541A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000541A                 mov     r11, [r10+8]
.text:000000000000541E                 lea     rax, [r11+8]
.text:0000000000005422                 mov     [r10+8], rax
.text:0000000000005426                 jmp     short loc_53E5
.text:0000000000005426 ; } // starts at 53B0
.text:0000000000005426 version_etc_va  endp
.text:0000000000005426
.text:0000000000005426 ; ---------------------------------------------------------------------------
.text:0000000000005428                 align 10h
.text:0000000000005430
.text:0000000000005430 ; =============== S U B R O U T I N E =======================================
.text:0000000000005430
.text:0000000000005430 ; Attributes: info_from_lumina
.text:0000000000005430
.text:0000000000005430 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005430                 public version_etc
.text:0000000000005430 version_etc     proc near               ; CODE XREF: main+105↑p
.text:0000000000005430
.text:0000000000005430 var_C0          = dword ptr -0C0h
.text:0000000000005430 var_B8          = qword ptr -0B8h
.text:0000000000005430 var_B0          = qword ptr -0B0h
.text:0000000000005430 var_A8          = byte ptr -0A8h
.text:0000000000005430 var_50          = qword ptr -50h
.text:0000000000005430 var_48          = byte ptr -48h
.text:0000000000005430 var_28          = qword ptr -28h
.text:0000000000005430 var_20          = qword ptr -20h
.text:0000000000005430 arg_0           = byte ptr  8
.text:0000000000005430
.text:0000000000005430 ; __unwind {
.text:0000000000005430                 push    rbp
.text:0000000000005431                 push    rbx
.text:0000000000005432                 mov     r10d, 20h ; ' '
.text:0000000000005438                 xor     r11d, r11d
.text:000000000000543B                 sub     rsp, 0B8h
.text:0000000000005442                 mov     rax, fs:28h
.text:000000000000544B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005450                 xor     eax, eax
.text:0000000000005452                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000545A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005462                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000546A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000546F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005477                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000547F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005484                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000548C                 xor     r9d, r9d
.text:000000000000548F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005494                 mov     rbp, rax
.text:0000000000005497                 nop     word ptr [rax+rax+00000000h]
.text:00000000000054A0
.text:00000000000054A0 loc_54A0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000054A0                 cmp     r10d, 2Fh ; '/'
.text:00000000000054A4                 ja      short loc_54FC
.text:00000000000054A6                 mov     eax, r10d
.text:00000000000054A9                 mov     r11d, 1
.text:00000000000054AF                 add     r10d, 8
.text:00000000000054B3                 add     rax, rbp
.text:00000000000054B6
.text:00000000000054B6 loc_54B6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000054B6                 mov     rax, [rax]
.text:00000000000054B9                 test    rax, rax
.text:00000000000054BC                 mov     [r8+r9*8], rax
.text:00000000000054C0                 jz      short loc_54CC
.text:00000000000054C2                 add     r9, 1
.text:00000000000054C6                 cmp     r9, 0Ah
.text:00000000000054CA                 jnz     short loc_54A0
.text:00000000000054CC
.text:00000000000054CC loc_54CC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000054CC                 test    r11b, r11b
.text:00000000000054CF                 jnz     short loc_54F5
.text:00000000000054D1
.text:00000000000054D1 loc_54D1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000054D1                 call    version_etc_arn
.text:00000000000054D6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000054DB                 xor     rax, fs:28h
.text:00000000000054E4                 jnz     short loc_54F0
.text:00000000000054E6                 add     rsp, 0B8h
.text:00000000000054ED                 pop     rbx
.text:00000000000054EE                 pop     rbp
.text:00000000000054EF                 retn
.text:00000000000054F0 ; ---------------------------------------------------------------------------
.text:00000000000054F0
.text:00000000000054F0 loc_54F0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000054F0                 call    ___stack_chk_fail
.text:00000000000054F5 ; ---------------------------------------------------------------------------
.text:00000000000054F5
.text:00000000000054F5 loc_54F5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000054F5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000054FA                 jmp     short loc_54D1
.text:00000000000054FC ; ---------------------------------------------------------------------------
.text:00000000000054FC
.text:00000000000054FC loc_54FC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000054FC                 mov     rax, rbx
.text:00000000000054FF                 add     rbx, 8
.text:0000000000005503                 jmp     short loc_54B6
.text:0000000000005503 ; } // starts at 5430
.text:0000000000005503 version_etc     endp
.text:0000000000005503
.text:0000000000005503 ; ---------------------------------------------------------------------------
.text:0000000000005505                 align 10h
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510 ; Attributes: info_from_lumina
.text:0000000000005510
.text:0000000000005510 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005510                 public emit_bug_reporting_address
.text:0000000000005510 emit_bug_reporting_address proc near
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 push    rbx
.text:0000000000005511                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005518                 mov     edx, 5          ; category
.text:000000000000551D                 xor     edi, edi        ; domainname
.text:000000000000551F                 call    _dcgettext
.text:0000000000005524                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000552B                 mov     rsi, rax
.text:000000000000552E                 mov     edi, 1
.text:0000000000005533                 xor     eax, eax
.text:0000000000005535                 call    ___printf_chk
.text:000000000000553A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005541                 mov     edx, 5          ; category
.text:0000000000005546                 xor     edi, edi        ; domainname
.text:0000000000005548                 call    _dcgettext
.text:000000000000554D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005554                 lea     rdx, unk_141EE
.text:000000000000555B                 mov     rsi, rax
.text:000000000000555E                 mov     edi, 1
.text:0000000000005563                 xor     eax, eax
.text:0000000000005565                 call    ___printf_chk
.text:000000000000556A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005571                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005578                 xor     edi, edi        ; domainname
.text:000000000000557A                 mov     edx, 5          ; category
.text:000000000000557F                 call    _dcgettext
.text:0000000000005584                 mov     rsi, rbx        ; stream
.text:0000000000005587                 mov     rdi, rax        ; s
.text:000000000000558A                 pop     rbx
.text:000000000000558B                 jmp     _fputs_unlocked
.text:000000000000558B ; } // starts at 5510
.text:000000000000558B emit_bug_reporting_address endp
.text:000000000000558B
.text:0000000000005590
.text:0000000000005590 ; =============== S U B R O U T I N E =======================================
.text:0000000000005590
.text:0000000000005590
.text:0000000000005590                 public xmalloc
.text:0000000000005590 xmalloc         proc near               ; CODE XREF: main+222↑p
.text:0000000000005590                                         ; quotearg_n_options+127↑p ...
.text:0000000000005590 ; __unwind {
.text:0000000000005590                 push    rbx
.text:0000000000005591                 mov     rbx, rdi
.text:0000000000005594                 call    _malloc
.text:0000000000005599                 test    rax, rax
.text:000000000000559C                 jnz     short loc_55A3
.text:000000000000559E                 test    rbx, rbx
.text:00000000000055A1                 jnz     short loc_55A5
.text:00000000000055A3
.text:00000000000055A3 loc_55A3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000055A3                 pop     rbx
.text:00000000000055A4                 retn
.text:00000000000055A5 ; ---------------------------------------------------------------------------
.text:00000000000055A5
.text:00000000000055A5 loc_55A5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000055A5                 call    xalloc_die
.text:00000000000055A5 ; } // starts at 5590
.text:00000000000055A5 xmalloc         endp
.text:00000000000055A5
.text:00000000000055A5 ; ---------------------------------------------------------------------------
.text:00000000000055AA                 align 10h
.text:00000000000055B0
.text:00000000000055B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055B0
.text:00000000000055B0 ; Attributes: info_from_lumina
.text:00000000000055B0
.text:00000000000055B0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000055B0                 public xnmalloc
.text:00000000000055B0 xnmalloc        proc near
.text:00000000000055B0 ; __unwind {
.text:00000000000055B0                 mov     rax, rdi
.text:00000000000055B3                 mul     rsi
.text:00000000000055B6                 mov     rdi, rax
.text:00000000000055B9                 seto    al
.text:00000000000055BC                 test    rdi, rdi
.text:00000000000055BF                 js      short loc_55CB
.text:00000000000055C1                 movzx   eax, al
.text:00000000000055C4                 test    rax, rax
.text:00000000000055C7                 jnz     short loc_55CB
.text:00000000000055C9                 jmp     short xmalloc
.text:00000000000055CB ; ---------------------------------------------------------------------------
.text:00000000000055CB
.text:00000000000055CB loc_55CB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000055CB                                         ; xnmalloc+17↑j
.text:00000000000055CB                 sub     rsp, 8
.text:00000000000055CF                 call    xalloc_die
.text:00000000000055CF ; } // starts at 55B0
.text:00000000000055CF xnmalloc        endp
.text:00000000000055CF
.text:00000000000055CF ; ---------------------------------------------------------------------------
.text:00000000000055D4                 align 20h
.text:00000000000055E0
.text:00000000000055E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055E0
.text:00000000000055E0
.text:00000000000055E0                 public xcharalloc
.text:00000000000055E0 xcharalloc      proc near
.text:00000000000055E0 ; __unwind {
.text:00000000000055E0                 jmp     short xmalloc
.text:00000000000055E0 ; } // starts at 55E0
.text:00000000000055E0 xcharalloc      endp
.text:00000000000055E0
.text:00000000000055E0 ; ---------------------------------------------------------------------------
.text:00000000000055E2                 align 10h
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0 ; Attributes: info_from_lumina
.text:00000000000055F0
.text:00000000000055F0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000055F0                 public xrealloc
.text:00000000000055F0 xrealloc        proc near               ; CODE XREF: tac_seekable+256↑p
.text:00000000000055F0                                         ; quotearg_n_options+6E↑p ...
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 test    rsi, rsi
.text:00000000000055F3                 push    rbx
.text:00000000000055F4                 mov     rbx, rsi
.text:00000000000055F7                 jnz     short loc_55FE
.text:00000000000055F9                 test    rdi, rdi
.text:00000000000055FC                 jnz     short loc_5618
.text:00000000000055FE
.text:00000000000055FE loc_55FE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000055FE                 mov     rsi, rbx        ; size
.text:0000000000005601                 call    _realloc
.text:0000000000005606                 test    rax, rax
.text:0000000000005609                 jnz     short loc_5610
.text:000000000000560B                 test    rbx, rbx
.text:000000000000560E                 jnz     short loc_5621
.text:0000000000005610
.text:0000000000005610 loc_5610:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005610                 pop     rbx
.text:0000000000005611                 retn
.text:0000000000005611 ; ---------------------------------------------------------------------------
.text:0000000000005612                 align 8
.text:0000000000005618
.text:0000000000005618 loc_5618:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005618                 call    _free
.text:000000000000561D                 xor     eax, eax
.text:000000000000561F                 pop     rbx
.text:0000000000005620                 retn
.text:0000000000005621 ; ---------------------------------------------------------------------------
.text:0000000000005621
.text:0000000000005621 loc_5621:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005621                 call    xalloc_die
.text:0000000000005621 ; } // starts at 55F0
.text:0000000000005621 xrealloc        endp
.text:0000000000005621
.text:0000000000005621 ; ---------------------------------------------------------------------------
.text:0000000000005626                 align 10h
.text:0000000000005630
.text:0000000000005630 ; =============== S U B R O U T I N E =======================================
.text:0000000000005630
.text:0000000000005630 ; Attributes: info_from_lumina
.text:0000000000005630
.text:0000000000005630 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005630                 public xnrealloc
.text:0000000000005630 xnrealloc       proc near
.text:0000000000005630 ; __unwind {
.text:0000000000005630                 mov     rax, rsi
.text:0000000000005633                 mul     rdx
.text:0000000000005636                 mov     rsi, rax
.text:0000000000005639                 seto    al
.text:000000000000563C                 test    rsi, rsi
.text:000000000000563F                 js      short loc_564B
.text:0000000000005641                 movzx   eax, al
.text:0000000000005644                 test    rax, rax
.text:0000000000005647                 jnz     short loc_564B
.text:0000000000005649                 jmp     short xrealloc
.text:000000000000564B ; ---------------------------------------------------------------------------
.text:000000000000564B
.text:000000000000564B loc_564B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000564B                                         ; xnrealloc+17↑j
.text:000000000000564B                 sub     rsp, 8
.text:000000000000564F                 call    xalloc_die
.text:000000000000564F ; } // starts at 5630
.text:000000000000564F xnrealloc       endp
.text:000000000000564F
.text:000000000000564F ; ---------------------------------------------------------------------------
.text:0000000000005654                 align 20h
.text:0000000000005660
.text:0000000000005660 ; =============== S U B R O U T I N E =======================================
.text:0000000000005660
.text:0000000000005660 ; Attributes: info_from_lumina
.text:0000000000005660
.text:0000000000005660 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005660                 public x2nrealloc
.text:0000000000005660 x2nrealloc      proc near
.text:0000000000005660 ; __unwind {
.text:0000000000005660                 test    rdi, rdi
.text:0000000000005663                 mov     r9, rdx
.text:0000000000005666                 mov     rcx, [rsi]
.text:0000000000005669                 jz      short loc_56A0
.text:000000000000566B                 xor     edx, edx
.text:000000000000566D                 mov     rax, 5555555555555554h
.text:0000000000005677                 div     r9
.text:000000000000567A                 cmp     rax, rcx
.text:000000000000567D                 jbe     short loc_56BB
.text:000000000000567F                 mov     rax, rcx
.text:0000000000005682                 shr     rax, 1
.text:0000000000005685                 lea     rcx, [rax+rcx+1]
.text:000000000000568A
.text:000000000000568A loc_568A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000568A                 mov     [rsi], rcx
.text:000000000000568D                 imul    rcx, r9
.text:0000000000005691                 mov     rsi, rcx
.text:0000000000005694                 jmp     xrealloc
.text:0000000000005694 ; ---------------------------------------------------------------------------
.text:0000000000005699                 align 20h
.text:00000000000056A0
.text:00000000000056A0 loc_56A0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000056A0                 test    rcx, rcx
.text:00000000000056A3                 jz      short loc_56C8
.text:00000000000056A5
.text:00000000000056A5 loc_56A5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000056A5                 mov     rax, rcx
.text:00000000000056A8                 mul     r9
.text:00000000000056AB                 seto    dl
.text:00000000000056AE                 test    rax, rax
.text:00000000000056B1                 movzx   edx, dl
.text:00000000000056B4                 js      short loc_56BB
.text:00000000000056B6                 test    rdx, rdx
.text:00000000000056B9                 jz      short loc_568A
.text:00000000000056BB
.text:00000000000056BB loc_56BB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000056BB                                         ; x2nrealloc+54↑j
.text:00000000000056BB                 sub     rsp, 8
.text:00000000000056BF                 call    xalloc_die
.text:00000000000056BF ; ---------------------------------------------------------------------------
.text:00000000000056C4                 align 8
.text:00000000000056C8
.text:00000000000056C8 loc_56C8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000056C8                 xor     edx, edx
.text:00000000000056CA                 mov     eax, 80h
.text:00000000000056CF                 xor     r8d, r8d
.text:00000000000056D2                 div     r9
.text:00000000000056D5                 test    rax, rax
.text:00000000000056D8                 setz    r8b
.text:00000000000056DC                 lea     rcx, [r8+rax]
.text:00000000000056E0                 jmp     short loc_56A5
.text:00000000000056E0 ; } // starts at 5660
.text:00000000000056E0 x2nrealloc      endp
.text:00000000000056E0
.text:00000000000056E0 ; ---------------------------------------------------------------------------
.text:00000000000056E2                 align 10h
.text:00000000000056F0
.text:00000000000056F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056F0
.text:00000000000056F0 ; Attributes: info_from_lumina
.text:00000000000056F0
.text:00000000000056F0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000056F0                 public x2realloc
.text:00000000000056F0 x2realloc       proc near
.text:00000000000056F0 ; __unwind {
.text:00000000000056F0                 test    rdi, rdi
.text:00000000000056F3                 mov     rax, [rsi]
.text:00000000000056F6                 jz      short loc_5720
.text:00000000000056F8                 mov     rdx, 5555555555555553h
.text:0000000000005702                 cmp     rax, rdx
.text:0000000000005705                 ja      short loc_5731
.text:0000000000005707                 mov     rdx, rax
.text:000000000000570A                 shr     rdx, 1
.text:000000000000570D                 lea     rax, [rdx+rax+1]
.text:0000000000005712
.text:0000000000005712 loc_5712:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005712                 mov     [rsi], rax
.text:0000000000005715                 mov     rsi, rax
.text:0000000000005718                 jmp     xrealloc
.text:0000000000005718 ; ---------------------------------------------------------------------------
.text:000000000000571D                 align 20h
.text:0000000000005720
.text:0000000000005720 loc_5720:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005720                 test    rax, rax
.text:0000000000005723                 mov     edx, 80h
.text:0000000000005728                 cmovz   rax, rdx
.text:000000000000572C                 test    rax, rax
.text:000000000000572F                 jns     short loc_5712
.text:0000000000005731
.text:0000000000005731 loc_5731:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005731                 sub     rsp, 8
.text:0000000000005735                 call    xalloc_die
.text:0000000000005735 ; } // starts at 56F0
.text:0000000000005735 x2realloc       endp
.text:0000000000005735
.text:0000000000005735 ; ---------------------------------------------------------------------------
.text:000000000000573A                 align 20h
.text:0000000000005740
.text:0000000000005740 ; =============== S U B R O U T I N E =======================================
.text:0000000000005740
.text:0000000000005740
.text:0000000000005740 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005740                 public xzalloc
.text:0000000000005740 xzalloc         proc near
.text:0000000000005740 ; __unwind {
.text:0000000000005740                 push    rbx
.text:0000000000005741                 mov     rbx, rdi
.text:0000000000005744                 call    xmalloc
.text:0000000000005749                 mov     rdx, rbx        ; n
.text:000000000000574C                 xor     esi, esi        ; c
.text:000000000000574E                 mov     rdi, rax        ; s
.text:0000000000005751                 pop     rbx
.text:0000000000005752                 jmp     _memset
.text:0000000000005752 ; } // starts at 5740
.text:0000000000005752 xzalloc         endp
.text:0000000000005752
.text:0000000000005752 ; ---------------------------------------------------------------------------
.text:0000000000005757                 align 20h
.text:0000000000005760
.text:0000000000005760 ; =============== S U B R O U T I N E =======================================
.text:0000000000005760
.text:0000000000005760 ; Attributes: info_from_lumina
.text:0000000000005760
.text:0000000000005760 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005760                 public xcalloc
.text:0000000000005760 xcalloc         proc near
.text:0000000000005760 ; __unwind {
.text:0000000000005760                 mov     rax, rdi
.text:0000000000005763                 sub     rsp, 8
.text:0000000000005767                 mul     rsi
.text:000000000000576A                 seto    dl
.text:000000000000576D                 test    rax, rax
.text:0000000000005770                 js      short loc_5789
.text:0000000000005772                 movzx   edx, dl
.text:0000000000005775                 test    rdx, rdx
.text:0000000000005778                 jnz     short loc_5789
.text:000000000000577A                 call    _calloc
.text:000000000000577F                 test    rax, rax
.text:0000000000005782                 jz      short loc_5789
.text:0000000000005784                 add     rsp, 8
.text:0000000000005788                 retn
.text:0000000000005789 ; ---------------------------------------------------------------------------
.text:0000000000005789
.text:0000000000005789 loc_5789:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005789                                         ; xcalloc+18↑j ...
.text:0000000000005789                 call    xalloc_die
.text:0000000000005789 ; } // starts at 5760
.text:0000000000005789 xcalloc         endp
.text:0000000000005789
.text:0000000000005789 ; ---------------------------------------------------------------------------
.text:000000000000578E                 align 10h
.text:0000000000005790
.text:0000000000005790 ; =============== S U B R O U T I N E =======================================
.text:0000000000005790
.text:0000000000005790 ; Attributes: info_from_lumina
.text:0000000000005790
.text:0000000000005790 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005790                 public xmemdup
.text:0000000000005790 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005790                                         ; xstrdup+11↓j
.text:0000000000005790 ; __unwind {
.text:0000000000005790                 push    rbp
.text:0000000000005791                 push    rbx
.text:0000000000005792                 mov     rbp, rdi
.text:0000000000005795                 mov     rdi, rsi
.text:0000000000005798                 mov     rbx, rsi
.text:000000000000579B                 sub     rsp, 8
.text:000000000000579F                 call    xmalloc
.text:00000000000057A4                 add     rsp, 8
.text:00000000000057A8                 mov     rdx, rbx        ; n
.text:00000000000057AB                 mov     rsi, rbp        ; src
.text:00000000000057AE                 pop     rbx
.text:00000000000057AF                 pop     rbp
.text:00000000000057B0                 mov     rdi, rax        ; dest
.text:00000000000057B3                 jmp     _memcpy
.text:00000000000057B3 ; } // starts at 5790
.text:00000000000057B3 xmemdup         endp
.text:00000000000057B3
.text:00000000000057B3 ; ---------------------------------------------------------------------------
.text:00000000000057B8                 align 20h
.text:00000000000057C0
.text:00000000000057C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057C0
.text:00000000000057C0
.text:00000000000057C0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000057C0                 public xstrdup
.text:00000000000057C0 xstrdup         proc near
.text:00000000000057C0 ; __unwind {
.text:00000000000057C0                 push    rbx
.text:00000000000057C1                 mov     rbx, rdi
.text:00000000000057C4                 call    _strlen
.text:00000000000057C9                 mov     rdi, rbx        ; src
.text:00000000000057CC                 lea     rsi, [rax+1]    ; n
.text:00000000000057D0                 pop     rbx
.text:00000000000057D1                 jmp     short xmemdup
.text:00000000000057D1 ; } // starts at 57C0
.text:00000000000057D1 xstrdup         endp
.text:00000000000057D1
.text:00000000000057D1 ; ---------------------------------------------------------------------------
.text:00000000000057D3                 align 20h
.text:00000000000057E0
.text:00000000000057E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057E0
.text:00000000000057E0 ; Attributes: noreturn info_from_lumina
.text:00000000000057E0
.text:00000000000057E0 ; void __cdecl xalloc_die()
.text:00000000000057E0                 public xalloc_die
.text:00000000000057E0 xalloc_die      proc near               ; CODE XREF: main:loc_23C6↑p
.text:00000000000057E0                                         ; tac_seekable:loc_2B83↑p ...
.text:00000000000057E0 ; __unwind {
.text:00000000000057E0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000057E7                 sub     rsp, 8
.text:00000000000057EB                 mov     edx, 5          ; category
.text:00000000000057F0                 xor     edi, edi        ; domainname
.text:00000000000057F2                 call    _dcgettext
.text:00000000000057F7                 mov     edi, cs:exit_failure ; status
.text:00000000000057FD                 lea     rdx, format     ; format
.text:0000000000005804                 mov     rcx, rax
.text:0000000000005807                 xor     esi, esi        ; errnum
.text:0000000000005809                 xor     eax, eax
.text:000000000000580B                 call    _error
.text:0000000000005810                 call    _abort
.text:0000000000005810 ; } // starts at 57E0
.text:0000000000005810 xalloc_die      endp
.text:0000000000005810
.text:0000000000005810 ; ---------------------------------------------------------------------------
.text:0000000000005815                 align 20h
.text:0000000000005820
.text:0000000000005820 ; =============== S U B R O U T I N E =======================================
.text:0000000000005820
.text:0000000000005820 ; Attributes: info_from_lumina
.text:0000000000005820
.text:0000000000005820 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005820                 public rpl_fseeko
.text:0000000000005820 rpl_fseeko      proc near               ; CODE XREF: main+35C↑p
.text:0000000000005820                                         ; rpl_fflush+32↓p
.text:0000000000005820 ; __unwind {
.text:0000000000005820                 mov     rax, [rdi+8]
.text:0000000000005824                 cmp     [rdi+10h], rax
.text:0000000000005828                 jz      short loc_5830
.text:000000000000582A
.text:000000000000582A loc_582A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000582A                                         ; rpl_fseeko+1F↓j
.text:000000000000582A                 jmp     _fseeko
.text:000000000000582A ; ---------------------------------------------------------------------------
.text:000000000000582F                 align 10h
.text:0000000000005830
.text:0000000000005830 loc_5830:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005830                 mov     rax, [rdi+20h]
.text:0000000000005834                 cmp     [rdi+28h], rax
.text:0000000000005838                 jnz     short loc_582A
.text:000000000000583A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000583F                 jnz     short loc_582A
.text:0000000000005841                 push    r12
.text:0000000000005843                 push    rbp
.text:0000000000005844                 mov     r12d, edx
.text:0000000000005847                 push    rbx
.text:0000000000005848                 mov     rbp, rsi
.text:000000000000584B                 mov     rbx, rdi
.text:000000000000584E                 call    _fileno
.text:0000000000005853                 mov     edx, r12d       ; whence
.text:0000000000005856                 mov     rsi, rbp        ; offset
.text:0000000000005859                 mov     edi, eax        ; fd
.text:000000000000585B                 call    _lseek
.text:0000000000005860                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005864                 jz      short loc_5872
.text:0000000000005866                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005869                 mov     [rbx+90h], rax
.text:0000000000005870                 xor     eax, eax
.text:0000000000005872
.text:0000000000005872 loc_5872:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005872                 pop     rbx
.text:0000000000005873                 pop     rbp
.text:0000000000005874                 pop     r12
.text:0000000000005876                 retn
.text:0000000000005876 ; } // starts at 5820
.text:0000000000005876 rpl_fseeko      endp
.text:0000000000005876
.text:0000000000005876 ; ---------------------------------------------------------------------------
.text:0000000000005877                 align 20h
.text:0000000000005880
.text:0000000000005880 ; =============== S U B R O U T I N E =======================================
.text:0000000000005880
.text:0000000000005880 ; Attributes: info_from_lumina
.text:0000000000005880
.text:0000000000005880 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005880                 public rpl_mbrtowc
.text:0000000000005880 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005880                                         ; build_wcs_buffer+6F↓p ...
.text:0000000000005880
.text:0000000000005880 pwc             = dword ptr -34h
.text:0000000000005880 var_30          = qword ptr -30h
.text:0000000000005880
.text:0000000000005880 ; __unwind {
.text:0000000000005880                 push    r13
.text:0000000000005882                 push    r12
.text:0000000000005884                 mov     r13, rsi
.text:0000000000005887                 push    rbp
.text:0000000000005888                 push    rbx
.text:0000000000005889                 mov     rbx, rdi
.text:000000000000588C                 mov     r12, rdx
.text:000000000000588F                 sub     rsp, 18h
.text:0000000000005893                 mov     rax, fs:28h
.text:000000000000589C                 mov     [rsp+38h+var_30], rax
.text:00000000000058A1                 xor     eax, eax
.text:00000000000058A3                 lea     rax, [rsp+38h+pwc]
.text:00000000000058A8                 test    rdi, rdi
.text:00000000000058AB                 cmovz   rbx, rax
.text:00000000000058AF                 mov     rdi, rbx        ; pwc
.text:00000000000058B2                 call    _mbrtowc
.text:00000000000058B7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000058BB                 mov     rbp, rax
.text:00000000000058BE                 jbe     short loc_58E0
.text:00000000000058C0                 test    r12, r12
.text:00000000000058C3                 jz      short loc_58E0
.text:00000000000058C5                 xor     edi, edi
.text:00000000000058C7                 call    hard_locale
.text:00000000000058CC                 test    al, al
.text:00000000000058CE                 jnz     short loc_58E0
.text:00000000000058D0                 movzx   eax, byte ptr [r13+0]
.text:00000000000058D5                 mov     ebp, 1
.text:00000000000058DA                 mov     [rbx], eax
.text:00000000000058DC                 nop     dword ptr [rax+00h]
.text:00000000000058E0
.text:00000000000058E0 loc_58E0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000058E0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000058E0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000058E5                 xor     rdx, fs:28h
.text:00000000000058EE                 mov     rax, rbp
.text:00000000000058F1                 jnz     short loc_58FE
.text:00000000000058F3                 add     rsp, 18h
.text:00000000000058F7                 pop     rbx
.text:00000000000058F8                 pop     rbp
.text:00000000000058F9                 pop     r12
.text:00000000000058FB                 pop     r13
.text:00000000000058FD                 retn
.text:00000000000058FE ; ---------------------------------------------------------------------------
.text:00000000000058FE
.text:00000000000058FE loc_58FE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000058FE                 call    ___stack_chk_fail
.text:00000000000058FE ; } // starts at 5880
.text:00000000000058FE rpl_mbrtowc     endp
.text:00000000000058FE
.text:00000000000058FE ; ---------------------------------------------------------------------------
.text:0000000000005903                 align 10h
.text:0000000000005910
.text:0000000000005910 ; =============== S U B R O U T I N E =======================================
.text:0000000000005910
.text:0000000000005910
.text:0000000000005910 peek_token_bracket proc near            ; CODE XREF: parse_bracket_element_constprop_37+1FB↓p
.text:0000000000005910                                         ; parse_expression+854↓p ...
.text:0000000000005910 ; __unwind {
.text:0000000000005910                 mov     rax, [rsi+48h]
.text:0000000000005914                 cmp     [rsi+68h], rax
.text:0000000000005918                 jle     short loc_5970
.text:000000000000591A                 mov     r8, [rsi+8]
.text:000000000000591E                 cmp     dword ptr [rsi+90h], 1
.text:0000000000005925                 movzx   ecx, byte ptr [r8+rax]
.text:000000000000592A                 mov     [rdi], cl
.text:000000000000592C                 jle     short loc_5943
.text:000000000000592E                 cmp     rax, [rsi+30h]
.text:0000000000005932                 jz      short loc_5943
.text:0000000000005934                 mov     r9, [rsi+10h]
.text:0000000000005938                 cmp     dword ptr [r9+rax*4], 0FFFFFFFFh
.text:000000000000593D                 jz      loc_59BF
.text:0000000000005943
.text:0000000000005943 loc_5943:                               ; CODE XREF: peek_token_bracket+1C↑j
.text:0000000000005943                                         ; peek_token_bracket+22↑j
.text:0000000000005943                 cmp     cl, 5Ch ; '\'
.text:0000000000005946                 jz      short loc_59B0
.text:0000000000005948                 cmp     cl, 5Bh ; '['
.text:000000000000594B                 jz      short loc_5980
.text:000000000000594D                 cmp     cl, 5Dh ; ']'
.text:0000000000005950                 jz      loc_59F0
.text:0000000000005956                 cmp     cl, 5Eh ; '^'
.text:0000000000005959                 jz      loc_59E0
.text:000000000000595F                 cmp     cl, 2Dh ; '-'
.text:0000000000005962                 jnz     short loc_59BF
.text:0000000000005964                 mov     byte ptr [rdi+8], 16h
.text:0000000000005968                 mov     eax, 1
.text:000000000000596D                 retn
.text:000000000000596D ; ---------------------------------------------------------------------------
.text:000000000000596E                 align 10h
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: peek_token_bracket+8↑j
.text:0000000000005970                 mov     byte ptr [rdi+8], 2
.text:0000000000005974                 xor     eax, eax
.text:0000000000005976                 retn
.text:0000000000005976 ; ---------------------------------------------------------------------------
.text:0000000000005977                 align 20h
.text:0000000000005980
.text:0000000000005980 loc_5980:                               ; CODE XREF: peek_token_bracket+3B↑j
.text:0000000000005980                 lea     rcx, [rax+1]
.text:0000000000005984                 cmp     rcx, [rsi+58h]
.text:0000000000005988                 jge     short loc_59D0
.text:000000000000598A                 movzx   eax, byte ptr [r8+rax+1]
.text:0000000000005990                 cmp     al, 3Ah ; ':'
.text:0000000000005992                 mov     [rdi], al
.text:0000000000005994                 jz      loc_5A30
.text:000000000000599A                 cmp     al, 3Dh ; '='
.text:000000000000599C                 jz      loc_5A20
.text:00000000000059A2                 cmp     al, 2Eh ; '.'
.text:00000000000059A4                 jnz     short loc_59D0
.text:00000000000059A6                 mov     byte ptr [rdi+8], 1Ah
.text:00000000000059AA                 mov     eax, 2
.text:00000000000059AF                 retn
.text:00000000000059B0 ; ---------------------------------------------------------------------------
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: peek_token_bracket+36↑j
.text:00000000000059B0                 and     edx, 1
.text:00000000000059B3                 jz      short loc_59BF
.text:00000000000059B5                 lea     rdx, [rax+1]
.text:00000000000059B9                 cmp     rdx, [rsi+58h]
.text:00000000000059BD                 jl      short loc_5A00
.text:00000000000059BF
.text:00000000000059BF loc_59BF:                               ; CODE XREF: peek_token_bracket+2D↑j
.text:00000000000059BF                                         ; peek_token_bracket+52↑j ...
.text:00000000000059BF                 mov     byte ptr [rdi+8], 1
.text:00000000000059C3                 mov     eax, 1
.text:00000000000059C8                 retn
.text:00000000000059C8 ; ---------------------------------------------------------------------------
.text:00000000000059C9                 align 10h
.text:00000000000059D0
.text:00000000000059D0 loc_59D0:                               ; CODE XREF: peek_token_bracket+78↑j
.text:00000000000059D0                                         ; peek_token_bracket+94↑j ...
.text:00000000000059D0                 mov     byte ptr [rdi+8], 1
.text:00000000000059D4                 mov     byte ptr [rdi], 5Bh ; '['
.text:00000000000059D7                 mov     eax, 1
.text:00000000000059DC                 retn
.text:00000000000059DC ; ---------------------------------------------------------------------------
.text:00000000000059DD                 align 20h
.text:00000000000059E0
.text:00000000000059E0 loc_59E0:                               ; CODE XREF: peek_token_bracket+49↑j
.text:00000000000059E0                 mov     byte ptr [rdi+8], 19h
.text:00000000000059E4                 mov     eax, 1
.text:00000000000059E9                 retn
.text:00000000000059E9 ; ---------------------------------------------------------------------------
.text:00000000000059EA                 align 10h
.text:00000000000059F0
.text:00000000000059F0 loc_59F0:                               ; CODE XREF: peek_token_bracket+40↑j
.text:00000000000059F0                 mov     byte ptr [rdi+8], 15h
.text:00000000000059F4                 mov     eax, 1
.text:00000000000059F9                 retn
.text:00000000000059F9 ; ---------------------------------------------------------------------------
.text:00000000000059FA                 align 20h
.text:0000000000005A00
.text:0000000000005A00 loc_5A00:                               ; CODE XREF: peek_token_bracket+AD↑j
.text:0000000000005A00                 mov     [rsi+48h], rdx
.text:0000000000005A04                 movzx   eax, byte ptr [r8+rax+1]
.text:0000000000005A0A                 mov     byte ptr [rdi+8], 1
.text:0000000000005A0E                 mov     [rdi], al
.text:0000000000005A10                 mov     eax, 1
.text:0000000000005A15                 retn
.text:0000000000005A15 ; ---------------------------------------------------------------------------
.text:0000000000005A16                 align 20h
.text:0000000000005A20
.text:0000000000005A20 loc_5A20:                               ; CODE XREF: peek_token_bracket+8C↑j
.text:0000000000005A20                 mov     byte ptr [rdi+8], 1Ch
.text:0000000000005A24                 mov     eax, 2
.text:0000000000005A29                 retn
.text:0000000000005A29 ; ---------------------------------------------------------------------------
.text:0000000000005A2A                 align 10h
.text:0000000000005A30
.text:0000000000005A30 loc_5A30:                               ; CODE XREF: peek_token_bracket+84↑j
.text:0000000000005A30                 and     edx, 4
.text:0000000000005A33                 jz      short loc_59D0
.text:0000000000005A35                 mov     byte ptr [rdi+8], 1Eh
.text:0000000000005A39                 mov     eax, 2
.text:0000000000005A3E                 retn
.text:0000000000005A3E ; } // starts at 5910
.text:0000000000005A3E peek_token_bracket endp
.text:0000000000005A3E
.text:0000000000005A3E ; ---------------------------------------------------------------------------
.text:0000000000005A3F                 align 20h
.text:0000000000005A40
.text:0000000000005A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A40
.text:0000000000005A40
.text:0000000000005A40 mark_opt_subexp proc near               ; DATA XREF: parse_expression+594↓o
.text:0000000000005A40 ; __unwind {
.text:0000000000005A40                 cmp     byte ptr [rsi+30h], 11h
.text:0000000000005A44                 jz      short loc_5A50
.text:0000000000005A46
.text:0000000000005A46 loc_5A46:                               ; CODE XREF: mark_opt_subexp+14↓j
.text:0000000000005A46                 xor     eax, eax
.text:0000000000005A48                 retn
.text:0000000000005A48 ; ---------------------------------------------------------------------------
.text:0000000000005A49                 align 10h
.text:0000000000005A50
.text:0000000000005A50 loc_5A50:                               ; CODE XREF: mark_opt_subexp+4↑j
.text:0000000000005A50                 cmp     rdi, [rsi+28h]
.text:0000000000005A54                 jnz     short loc_5A46
.text:0000000000005A56                 or      byte ptr [rsi+32h], 8
.text:0000000000005A5A                 xor     eax, eax
.text:0000000000005A5C                 retn
.text:0000000000005A5C ; } // starts at 5A40
.text:0000000000005A5C mark_opt_subexp endp
.text:0000000000005A5C
.text:0000000000005A5C ; ---------------------------------------------------------------------------
.text:0000000000005A5D                 align 20h
.text:0000000000005A60
.text:0000000000005A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A60
.text:0000000000005A60
.text:0000000000005A60 check_dst_limits_calc_pos_1 proc near   ; CODE XREF: check_dst_limits_calc_pos_1+15D↓p
.text:0000000000005A60                                         ; check_dst_limits_calc_pos+58↓j
.text:0000000000005A60
.text:0000000000005A60 var_78          = qword ptr -78h
.text:0000000000005A60 var_70          = dword ptr -70h
.text:0000000000005A60 var_6C          = dword ptr -6Ch
.text:0000000000005A60 var_68          = qword ptr -68h
.text:0000000000005A60 var_60          = qword ptr -60h
.text:0000000000005A60 var_58          = dword ptr -58h
.text:0000000000005A60 var_52          = word ptr -52h
.text:0000000000005A60 var_50          = qword ptr -50h
.text:0000000000005A60 var_48          = qword ptr -48h
.text:0000000000005A60 var_40          = qword ptr -40h
.text:0000000000005A60
.text:0000000000005A60 ; __unwind {
.text:0000000000005A60                 push    r15
.text:0000000000005A62                 push    r14
.text:0000000000005A64                 mov     r9, rdx
.text:0000000000005A67                 push    r13
.text:0000000000005A69                 push    r12
.text:0000000000005A6B                 lea     rdx, [rcx+rcx*2]
.text:0000000000005A6F                 push    rbp
.text:0000000000005A70                 push    rbx
.text:0000000000005A71                 mov     r15d, esi
.text:0000000000005A74                 sub     rsp, 48h
.text:0000000000005A78                 mov     r14, [rdi+98h]
.text:0000000000005A7F                 mov     [rsp+78h+var_78], rdi
.text:0000000000005A83                 mov     rax, [r14+30h]
.text:0000000000005A87                 lea     r12, [rax+rdx*8]
.text:0000000000005A8B                 cmp     qword ptr [r12+8], 0
.text:0000000000005A91                 jle     loc_5C25
.text:0000000000005A97                 lea     rax, [r8+r8*4]
.text:0000000000005A9B                 mov     r11, rcx
.text:0000000000005A9E                 mov     ecx, r9d
.text:0000000000005AA1                 mov     r10, r8
.text:0000000000005AA4                 xor     ebx, ebx
.text:0000000000005AA6                 mov     [rsp+78h+var_58], esi
.text:0000000000005AAA                 shl     rax, 3
.text:0000000000005AAE                 mov     r15, r9
.text:0000000000005AB1                 mov     [rsp+78h+var_68], r11
.text:0000000000005AB6                 mov     [rsp+78h+var_50], rax
.text:0000000000005ABB                 mov     eax, 1
.text:0000000000005AC0                 shl     rax, cl
.text:0000000000005AC3                 mov     [rsp+78h+var_60], rax
.text:0000000000005AC8                 not     eax
.text:0000000000005ACA                 mov     [rsp+78h+var_52], ax
.text:0000000000005ACF                 mov     eax, esi
.text:0000000000005AD1                 and     eax, 1
.text:0000000000005AD4                 mov     [rsp+78h+var_6C], eax
.text:0000000000005AD8                 mov     eax, esi
.text:0000000000005ADA                 and     eax, 2
.text:0000000000005ADD                 mov     [rsp+78h+var_70], eax
.text:0000000000005AE1                 jmp     short loc_5B05
.text:0000000000005AE1 ; ---------------------------------------------------------------------------
.text:0000000000005AE3                 align 8
.text:0000000000005AE8
.text:0000000000005AE8 loc_5AE8:                               ; CODE XREF: check_dst_limits_calc_pos_1+BF↓j
.text:0000000000005AE8                 cmp     dl, 9
.text:0000000000005AEB                 jz      loc_5C40
.text:0000000000005AF1                 cmp     dl, 4
.text:0000000000005AF4                 jz      short loc_5B48
.text:0000000000005AF6
.text:0000000000005AF6 loc_5AF6:                               ; CODE XREF: check_dst_limits_calc_pos_1+C7↓j
.text:0000000000005AF6                                         ; check_dst_limits_calc_pos_1+CC↓j ...
.text:0000000000005AF6                 add     rbx, 1
.text:0000000000005AFA                 cmp     [r12+8], rbx
.text:0000000000005AFF                 jle     loc_5C20
.text:0000000000005B05
.text:0000000000005B05 loc_5B05:                               ; CODE XREF: check_dst_limits_calc_pos_1+81↑j
.text:0000000000005B05                                         ; check_dst_limits_calc_pos_1+1B4↓j
.text:0000000000005B05                 mov     rax, [r12+10h]
.text:0000000000005B0A                 mov     rbp, [rax+rbx*8]
.text:0000000000005B0E                 mov     rax, rbp
.text:0000000000005B11                 shl     rax, 4
.text:0000000000005B15                 add     rax, [r14]
.text:0000000000005B18                 movzx   edx, byte ptr [rax+8]
.text:0000000000005B1C                 cmp     dl, 8
.text:0000000000005B1F                 jnz     short loc_5AE8
.text:0000000000005B21                 mov     ecx, [rsp+78h+var_6C]
.text:0000000000005B25                 test    ecx, ecx
.text:0000000000005B27                 jz      short loc_5AF6
.text:0000000000005B29                 cmp     [rax], r15
.text:0000000000005B2C                 jnz     short loc_5AF6
.text:0000000000005B2E
.text:0000000000005B2E loc_5B2E:                               ; CODE XREF: check_dst_limits_calc_pos_1+165↓j
.text:0000000000005B2E                 add     rsp, 48h
.text:0000000000005B32                 mov     eax, 0FFFFFFFFh
.text:0000000000005B37                 pop     rbx
.text:0000000000005B38                 pop     rbp
.text:0000000000005B39                 pop     r12
.text:0000000000005B3B                 pop     r13
.text:0000000000005B3D                 pop     r14
.text:0000000000005B3F                 pop     r15
.text:0000000000005B41                 retn
.text:0000000000005B41 ; ---------------------------------------------------------------------------
.text:0000000000005B42                 align 8
.text:0000000000005B48
.text:0000000000005B48 loc_5B48:                               ; CODE XREF: check_dst_limits_calc_pos_1+94↑j
.text:0000000000005B48                 cmp     r10, 0FFFFFFFFFFFFFFFFh
.text:0000000000005B4C                 jz      short loc_5AF6
.text:0000000000005B4E                 mov     rax, [rsp+78h+var_78]
.text:0000000000005B52                 mov     r13, [rsp+78h+var_50]
.text:0000000000005B57                 mov     rdi, rbp
.text:0000000000005B5A                 mov     [rsp+78h+var_48], r12
.text:0000000000005B5F                 mov     [rsp+78h+var_40], rbx
.text:0000000000005B64                 mov     r12, r10
.text:0000000000005B67                 add     r13, [rax+0D8h]
.text:0000000000005B6E                 lea     rax, [rbp+rbp*2+0]
.text:0000000000005B73                 mov     rbp, r14
.text:0000000000005B76                 mov     r14, rdi
.text:0000000000005B79                 shl     rax, 3
.text:0000000000005B7D                 mov     rbx, rax
.text:0000000000005B80
.text:0000000000005B80 loc_5B80:                               ; CODE XREF: check_dst_limits_calc_pos_1+199↓j
.text:0000000000005B80                 cmp     [r13+0], r14
.text:0000000000005B84                 jnz     short loc_5BF0
.text:0000000000005B86                 cmp     r15, 3Fh ; '?'
.text:0000000000005B8A                 jg      short loc_5B98
.text:0000000000005B8C                 movzx   eax, word ptr [r13+22h]
.text:0000000000005B91                 test    [rsp+78h+var_60], rax
.text:0000000000005B96                 jz      short loc_5BF0
.text:0000000000005B98
.text:0000000000005B98 loc_5B98:                               ; CODE XREF: check_dst_limits_calc_pos_1+12A↑j
.text:0000000000005B98                 mov     rax, [rbp+28h]
.text:0000000000005B9C                 mov     rax, [rax+rbx+10h]
.text:0000000000005BA1                 mov     rcx, [rax]
.text:0000000000005BA4                 cmp     [rsp+78h+var_68], rcx
.text:0000000000005BA9                 jz      loc_5C70
.text:0000000000005BAF                 mov     esi, [rsp+78h+var_58]
.text:0000000000005BB3                 mov     rdi, [rsp+78h+var_78]
.text:0000000000005BB7                 mov     r8, r12
.text:0000000000005BBA                 mov     rdx, r15
.text:0000000000005BBD                 call    check_dst_limits_calc_pos_1
.text:0000000000005BC2                 cmp     eax, 0FFFFFFFFh
.text:0000000000005BC5                 jz      loc_5B2E
.text:0000000000005BCB                 test    eax, eax
.text:0000000000005BCD                 jnz     short loc_5BD7
.text:0000000000005BCF                 mov     esi, [rsp+78h+var_70]
.text:0000000000005BD3                 test    esi, esi
.text:0000000000005BD5                 jnz     short loc_5C55
.text:0000000000005BD7
.text:0000000000005BD7 loc_5BD7:                               ; CODE XREF: check_dst_limits_calc_pos_1+16D↑j
.text:0000000000005BD7                 cmp     r15, 3Fh ; '?'
.text:0000000000005BDB                 jg      short loc_5BF0
.text:0000000000005BDD                 movzx   eax, [rsp+78h+var_52]
.text:0000000000005BE2                 and     [r13+22h], ax
.text:0000000000005BE7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005BF0
.text:0000000000005BF0 loc_5BF0:                               ; CODE XREF: check_dst_limits_calc_pos_1+124↑j
.text:0000000000005BF0                                         ; check_dst_limits_calc_pos_1+136↑j ...
.text:0000000000005BF0                 add     r13, 28h ; '('
.text:0000000000005BF4                 cmp     byte ptr [r13-8], 0
.text:0000000000005BF9                 jnz     short loc_5B80
.text:0000000000005BFB                 mov     rbx, [rsp+78h+var_40]
.text:0000000000005C00                 mov     r10, r12
.text:0000000000005C03                 mov     r12, [rsp+78h+var_48]
.text:0000000000005C08                 mov     r14, rbp
.text:0000000000005C0B                 add     rbx, 1
.text:0000000000005C0F                 cmp     [r12+8], rbx
.text:0000000000005C14                 jg      loc_5B05
.text:0000000000005C1A                 nop     word ptr [rax+rax+00h]
.text:0000000000005C20
.text:0000000000005C20 loc_5C20:                               ; CODE XREF: check_dst_limits_calc_pos_1+9F↑j
.text:0000000000005C20                 mov     r15d, [rsp+78h+var_58]
.text:0000000000005C25
.text:0000000000005C25 loc_5C25:                               ; CODE XREF: check_dst_limits_calc_pos_1+31↑j
.text:0000000000005C25                 add     rsp, 48h
.text:0000000000005C29                 mov     eax, r15d
.text:0000000000005C2C                 pop     rbx
.text:0000000000005C2D                 sar     eax, 1
.text:0000000000005C2F                 pop     rbp
.text:0000000000005C30                 pop     r12
.text:0000000000005C32                 pop     r13
.text:0000000000005C34                 pop     r14
.text:0000000000005C36                 pop     r15
.text:0000000000005C38                 retn
.text:0000000000005C38 ; ---------------------------------------------------------------------------
.text:0000000000005C39                 align 20h
.text:0000000000005C40
.text:0000000000005C40 loc_5C40:                               ; CODE XREF: check_dst_limits_calc_pos_1+8B↑j
.text:0000000000005C40                 mov     edx, [rsp+78h+var_70]
.text:0000000000005C44                 test    edx, edx
.text:0000000000005C46                 jz      loc_5AF6
.text:0000000000005C4C                 cmp     [rax], r15
.text:0000000000005C4F                 jnz     loc_5AF6
.text:0000000000005C55
.text:0000000000005C55 loc_5C55:                               ; CODE XREF: check_dst_limits_calc_pos_1+175↑j
.text:0000000000005C55                 add     rsp, 48h
.text:0000000000005C59                 xor     eax, eax
.text:0000000000005C5B                 pop     rbx
.text:0000000000005C5C                 pop     rbp
.text:0000000000005C5D                 pop     r12
.text:0000000000005C5F                 pop     r13
.text:0000000000005C61                 pop     r14
.text:0000000000005C63                 pop     r15
.text:0000000000005C65                 retn
.text:0000000000005C65 ; ---------------------------------------------------------------------------
.text:0000000000005C66                 align 10h
.text:0000000000005C70
.text:0000000000005C70 loc_5C70:                               ; CODE XREF: check_dst_limits_calc_pos_1+149↑j
.text:0000000000005C70                 mov     r15d, [rsp+78h+var_58]
.text:0000000000005C75                 add     rsp, 48h
.text:0000000000005C79                 pop     rbx
.text:0000000000005C7A                 pop     rbp
.text:0000000000005C7B                 mov     eax, r15d
.text:0000000000005C7E                 and     eax, 1
.text:0000000000005C81                 pop     r12
.text:0000000000005C83                 neg     eax
.text:0000000000005C85                 pop     r13
.text:0000000000005C87                 pop     r14
.text:0000000000005C89                 pop     r15
.text:0000000000005C8B                 retn
.text:0000000000005C8B ; } // starts at 5A60
.text:0000000000005C8B check_dst_limits_calc_pos_1 endp
.text:0000000000005C8B
.text:0000000000005C8B ; ---------------------------------------------------------------------------
.text:0000000000005C8C                 align 10h
.text:0000000000005C90
.text:0000000000005C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C90
.text:0000000000005C90
.text:0000000000005C90 check_dst_limits_calc_pos proc near     ; CODE XREF: check_dst_limits_isra_13+1AE↓p
.text:0000000000005C90                                         ; check_dst_limits_isra_13+1D0↓p
.text:0000000000005C90 ; __unwind {
.text:0000000000005C90                 mov     rax, [rdi+0D8h]
.text:0000000000005C97                 lea     rsi, [rsi+rsi*4]
.text:0000000000005C9B                 lea     rax, [rax+rsi*8]
.text:0000000000005C9F                 mov     r10, [rax+10h]
.text:0000000000005CA3                 cmp     r10, r8
.text:0000000000005CA6                 jg      short loc_5CF0
.text:0000000000005CA8                 mov     rax, [rax+18h]
.text:0000000000005CAC                 cmp     rax, r8
.text:0000000000005CAF                 jl      short loc_5CD0
.text:0000000000005CB1                 xor     esi, esi
.text:0000000000005CB3                 cmp     r10, r8
.text:0000000000005CB6                 setz    sil
.text:0000000000005CBA                 or      esi, 2
.text:0000000000005CBD                 cmp     rax, r8
.text:0000000000005CC0                 jz      short loc_5CE5
.text:0000000000005CC2                 xor     eax, eax
.text:0000000000005CC4                 cmp     r10, r8
.text:0000000000005CC7                 jz      short loc_5CE0
.text:0000000000005CC9                 rep retn
.text:0000000000005CC9 ; ---------------------------------------------------------------------------
.text:0000000000005CCB                 align 10h
.text:0000000000005CD0
.text:0000000000005CD0 loc_5CD0:                               ; CODE XREF: check_dst_limits_calc_pos+1F↑j
.text:0000000000005CD0                 mov     eax, 1
.text:0000000000005CD5                 retn
.text:0000000000005CD5 ; ---------------------------------------------------------------------------
.text:0000000000005CD6                 align 20h
.text:0000000000005CE0
.text:0000000000005CE0 loc_5CE0:                               ; CODE XREF: check_dst_limits_calc_pos+37↑j
.text:0000000000005CE0                 mov     esi, 1
.text:0000000000005CE5
.text:0000000000005CE5 loc_5CE5:                               ; CODE XREF: check_dst_limits_calc_pos+30↑j
.text:0000000000005CE5                 mov     r8, r9
.text:0000000000005CE8                 jmp     check_dst_limits_calc_pos_1
.text:0000000000005CE8 ; ---------------------------------------------------------------------------
.text:0000000000005CED                 align 10h
.text:0000000000005CF0
.text:0000000000005CF0 loc_5CF0:                               ; CODE XREF: check_dst_limits_calc_pos+16↑j
.text:0000000000005CF0                 mov     eax, 0FFFFFFFFh
.text:0000000000005CF5                 retn
.text:0000000000005CF5 ; } // starts at 5C90
.text:0000000000005CF5 check_dst_limits_calc_pos endp
.text:0000000000005CF5
.text:0000000000005CF5 ; ---------------------------------------------------------------------------
.text:0000000000005CF6                 align 20h
.text:0000000000005D00
.text:0000000000005D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D00
.text:0000000000005D00
.text:0000000000005D00 postorder       proc near               ; CODE XREF: parse_expression+ED↓p
.text:0000000000005D00                                         ; parse_expression+398↓p ...
.text:0000000000005D00 ; __unwind {
.text:0000000000005D00                 push    r12
.text:0000000000005D02                 mov     r12, rsi
.text:0000000000005D05                 push    rbp
.text:0000000000005D06                 mov     rbp, rdx
.text:0000000000005D09                 push    rbx
.text:0000000000005D0A                 mov     rbx, rdi
.text:0000000000005D0D                 jmp     short loc_5D13
.text:0000000000005D0D ; ---------------------------------------------------------------------------
.text:0000000000005D0F                 align 10h
.text:0000000000005D10
.text:0000000000005D10 loc_5D10:                               ; CODE XREF: postorder+1A↓j
.text:0000000000005D10                                         ; postorder+23↓j ...
.text:0000000000005D10                 mov     rbx, rax
.text:0000000000005D13
.text:0000000000005D13 loc_5D13:                               ; CODE XREF: postorder+D↑j
.text:0000000000005D13                 mov     rax, [rbx+8]
.text:0000000000005D17                 test    rax, rax
.text:0000000000005D1A                 jnz     short loc_5D10
.text:0000000000005D1C                 mov     rax, [rbx+10h]
.text:0000000000005D20                 test    rax, rax
.text:0000000000005D23                 jnz     short loc_5D10
.text:0000000000005D25                 mov     rsi, rbx
.text:0000000000005D28                 mov     rdi, rbp
.text:0000000000005D2B                 call    r12
.text:0000000000005D2E                 test    eax, eax
.text:0000000000005D30                 jnz     short loc_5D66
.text:0000000000005D32                 nop     word ptr [rax+rax+00h]
.text:0000000000005D38
.text:0000000000005D38 loc_5D38:                               ; CODE XREF: postorder+64↓j
.text:0000000000005D38                 mov     rdx, [rbx]
.text:0000000000005D3B                 test    rdx, rdx
.text:0000000000005D3E                 jz      short loc_5D66
.text:0000000000005D40                 mov     rax, [rdx+10h]
.text:0000000000005D44                 cmp     rax, rbx
.text:0000000000005D47                 mov     rbx, rdx
.text:0000000000005D4A                 setz    sil
.text:0000000000005D4E                 test    rax, rax
.text:0000000000005D51                 setz    cl
.text:0000000000005D54                 or      sil, cl
.text:0000000000005D57                 jz      short loc_5D10
.text:0000000000005D59                 mov     rsi, rbx
.text:0000000000005D5C                 mov     rdi, rbp
.text:0000000000005D5F                 call    r12
.text:0000000000005D62                 test    eax, eax
.text:0000000000005D64                 jz      short loc_5D38
.text:0000000000005D66
.text:0000000000005D66 loc_5D66:                               ; CODE XREF: postorder+30↑j
.text:0000000000005D66                                         ; postorder+3E↑j
.text:0000000000005D66                 pop     rbx
.text:0000000000005D67                 pop     rbp
.text:0000000000005D68                 pop     r12
.text:0000000000005D6A                 retn
.text:0000000000005D6A ; } // starts at 5D00
.text:0000000000005D6A postorder       endp
.text:0000000000005D6A
.text:0000000000005D6A ; ---------------------------------------------------------------------------
.text:0000000000005D6B                 align 10h
.text:0000000000005D70
.text:0000000000005D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D70
.text:0000000000005D70
.text:0000000000005D70 preorder        proc near               ; CODE XREF: re_compile_internal+61B↓p
.text:0000000000005D70                                         ; re_compile_internal+6A3↓p
.text:0000000000005D70 ; __unwind {
.text:0000000000005D70                 push    r12
.text:0000000000005D72                 mov     r12, rsi
.text:0000000000005D75                 push    rbp
.text:0000000000005D76                 mov     rbp, rdx
.text:0000000000005D79                 push    rbx
.text:0000000000005D7A                 mov     rbx, rdi
.text:0000000000005D7D                 jmp     short loc_5D83
.text:0000000000005D7D ; ---------------------------------------------------------------------------
.text:0000000000005D7F                 align 20h
.text:0000000000005D80
.text:0000000000005D80 loc_5D80:                               ; CODE XREF: preorder+29↓j
.text:0000000000005D80                                         ; preorder+3F↓j
.text:0000000000005D80                 mov     rbx, rdx
.text:0000000000005D83
.text:0000000000005D83 loc_5D83:                               ; CODE XREF: preorder+D↑j
.text:0000000000005D83                 mov     rsi, rbx
.text:0000000000005D86                 mov     rdi, rbp
.text:0000000000005D89                 call    r12
.text:0000000000005D8C                 test    eax, eax
.text:0000000000005D8E                 jnz     short loc_5DBC
.text:0000000000005D90                 mov     rdx, [rbx+8]
.text:0000000000005D94                 xor     ecx, ecx
.text:0000000000005D96                 test    rdx, rdx
.text:0000000000005D99                 jnz     short loc_5D80
.text:0000000000005D9B                 jmp     short loc_5DA3
.text:0000000000005D9B ; ---------------------------------------------------------------------------
.text:0000000000005D9D                 align 20h
.text:0000000000005DA0
.text:0000000000005DA0 loc_5DA0:                               ; CODE XREF: preorder+4A↓j
.text:0000000000005DA0                 mov     rbx, rdx
.text:0000000000005DA3
.text:0000000000005DA3 loc_5DA3:                               ; CODE XREF: preorder+2B↑j
.text:0000000000005DA3                 mov     rdx, [rbx+10h]
.text:0000000000005DA7                 cmp     rdx, rcx
.text:0000000000005DAA                 jz      short loc_5DB1
.text:0000000000005DAC                 test    rdx, rdx
.text:0000000000005DAF                 jnz     short loc_5D80
.text:0000000000005DB1
.text:0000000000005DB1 loc_5DB1:                               ; CODE XREF: preorder+3A↑j
.text:0000000000005DB1                 mov     rdx, [rbx]
.text:0000000000005DB4                 mov     rcx, rbx
.text:0000000000005DB7                 test    rdx, rdx
.text:0000000000005DBA                 jnz     short loc_5DA0
.text:0000000000005DBC
.text:0000000000005DBC loc_5DBC:                               ; CODE XREF: preorder+1E↑j
.text:0000000000005DBC                 pop     rbx
.text:0000000000005DBD                 pop     rbp
.text:0000000000005DBE                 pop     r12
.text:0000000000005DC0                 retn
.text:0000000000005DC0 ; } // starts at 5D70
.text:0000000000005DC0 preorder        endp
.text:0000000000005DC0
.text:0000000000005DC0 ; ---------------------------------------------------------------------------
.text:0000000000005DC1                 align 10h
.text:0000000000005DD0
.text:0000000000005DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DD0
.text:0000000000005DD0
.text:0000000000005DD0 re_string_realloc_buffers proc near     ; CODE XREF: extend_buffers+38↓p
.text:0000000000005DD0                                         ; re_search_internal+24B↓p ...
.text:0000000000005DD0 ; __unwind {
.text:0000000000005DD0                 push    rbp
.text:0000000000005DD1                 push    rbx
.text:0000000000005DD2                 mov     rbp, rsi
.text:0000000000005DD5                 mov     rbx, rdi
.text:0000000000005DD8                 sub     rsp, 8
.text:0000000000005DDC                 cmp     dword ptr [rdi+90h], 1
.text:0000000000005DE3                 jle     short loc_5E2D
.text:0000000000005DE5                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:0000000000005DEF                 cmp     rsi, rax
.text:0000000000005DF2                 ja      short loc_5E60
.text:0000000000005DF4                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000005DF8                 lea     rsi, ds:0[rsi*4] ; size
.text:0000000000005E00                 call    _realloc
.text:0000000000005E05                 test    rax, rax
.text:0000000000005E08                 jz      short loc_5E60
.text:0000000000005E0A                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000005E0E                 mov     [rbx+10h], rax
.text:0000000000005E12                 test    rdi, rdi
.text:0000000000005E15                 jz      short loc_5E2D
.text:0000000000005E17                 lea     rsi, ds:0[rbp*8] ; size
.text:0000000000005E1F                 call    _realloc
.text:0000000000005E24                 test    rax, rax
.text:0000000000005E27                 jz      short loc_5E60
.text:0000000000005E29                 mov     [rbx+18h], rax
.text:0000000000005E2D
.text:0000000000005E2D loc_5E2D:                               ; CODE XREF: re_string_realloc_buffers+13↑j
.text:0000000000005E2D                                         ; re_string_realloc_buffers+45↑j
.text:0000000000005E2D                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000005E34                 jnz     short loc_5E48
.text:0000000000005E36
.text:0000000000005E36 loc_5E36:                               ; CODE XREF: re_string_realloc_buffers+8D↓j
.text:0000000000005E36                 mov     [rbx+40h], rbp
.text:0000000000005E3A                 add     rsp, 8
.text:0000000000005E3E                 xor     eax, eax
.text:0000000000005E40                 pop     rbx
.text:0000000000005E41                 pop     rbp
.text:0000000000005E42                 retn
.text:0000000000005E42 ; ---------------------------------------------------------------------------
.text:0000000000005E43                 align 8
.text:0000000000005E48
.text:0000000000005E48 loc_5E48:                               ; CODE XREF: re_string_realloc_buffers+64↑j
.text:0000000000005E48                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000005E4C                 mov     rsi, rbp        ; size
.text:0000000000005E4F                 call    _realloc
.text:0000000000005E54                 test    rax, rax
.text:0000000000005E57                 jz      short loc_5E60
.text:0000000000005E59                 mov     [rbx+8], rax
.text:0000000000005E5D                 jmp     short loc_5E36
.text:0000000000005E5D ; ---------------------------------------------------------------------------
.text:0000000000005E5F                 align 20h
.text:0000000000005E60
.text:0000000000005E60 loc_5E60:                               ; CODE XREF: re_string_realloc_buffers+22↑j
.text:0000000000005E60                                         ; re_string_realloc_buffers+38↑j ...
.text:0000000000005E60                 add     rsp, 8
.text:0000000000005E64                 mov     eax, 0Ch
.text:0000000000005E69                 pop     rbx
.text:0000000000005E6A                 pop     rbp
.text:0000000000005E6B                 retn
.text:0000000000005E6B ; } // starts at 5DD0
.text:0000000000005E6B re_string_realloc_buffers endp
.text:0000000000005E6B
.text:0000000000005E6B ; ---------------------------------------------------------------------------
.text:0000000000005E6C                 align 10h
.text:0000000000005E70
.text:0000000000005E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E70
.text:0000000000005E70
.text:0000000000005E70 re_node_set_insert_last proc near       ; CODE XREF: register_state+75↓p
.text:0000000000005E70                                         ; re_compile_internal+B61↓p
.text:0000000000005E70 ; __unwind {
.text:0000000000005E70                 push    rbp
.text:0000000000005E71                 push    rbx
.text:0000000000005E72                 mov     rbp, rsi
.text:0000000000005E75                 mov     rbx, rdi
.text:0000000000005E78                 sub     rsp, 8
.text:0000000000005E7C                 mov     rsi, [rdi+8]
.text:0000000000005E80                 cmp     [rdi], rsi
.text:0000000000005E83                 mov     rax, [rdi+10h]
.text:0000000000005E87                 jz      short loc_5EA8
.text:0000000000005E89
.text:0000000000005E89 loc_5E89:                               ; CODE XREF: re_node_set_insert_last+5C↓j
.text:0000000000005E89                 lea     rdx, [rsi+1]
.text:0000000000005E8D                 mov     [rbx+8], rdx
.text:0000000000005E91                 mov     [rax+rsi*8], rbp
.text:0000000000005E95                 mov     eax, 1
.text:0000000000005E9A
.text:0000000000005E9A loc_5E9A:                               ; CODE XREF: re_node_set_insert_last+62↓j
.text:0000000000005E9A                 add     rsp, 8
.text:0000000000005E9E                 pop     rbx
.text:0000000000005E9F                 pop     rbp
.text:0000000000005EA0                 retn
.text:0000000000005EA0 ; ---------------------------------------------------------------------------
.text:0000000000005EA1                 align 8
.text:0000000000005EA8
.text:0000000000005EA8 loc_5EA8:                               ; CODE XREF: re_node_set_insert_last+17↑j
.text:0000000000005EA8                 add     rsi, 1
.text:0000000000005EAC                 lea     rdx, [rsi+rsi]
.text:0000000000005EB0                 shl     rsi, 4          ; size
.text:0000000000005EB4                 mov     [rdi], rdx
.text:0000000000005EB7                 mov     rdi, rax        ; ptr
.text:0000000000005EBA                 call    _realloc
.text:0000000000005EBF                 test    rax, rax
.text:0000000000005EC2                 jz      short loc_5ED0
.text:0000000000005EC4                 mov     [rbx+10h], rax
.text:0000000000005EC8                 mov     rsi, [rbx+8]
.text:0000000000005ECC                 jmp     short loc_5E89
.text:0000000000005ECC ; ---------------------------------------------------------------------------
.text:0000000000005ECE                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 loc_5ED0:                               ; CODE XREF: re_node_set_insert_last+52↑j
.text:0000000000005ED0                 xor     eax, eax
.text:0000000000005ED2                 jmp     short loc_5E9A
.text:0000000000005ED2 ; } // starts at 5E70
.text:0000000000005ED2 re_node_set_insert_last endp
.text:0000000000005ED2
.text:0000000000005ED2 ; ---------------------------------------------------------------------------
.text:0000000000005ED4                 align 20h
.text:0000000000005EE0
.text:0000000000005EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EE0
.text:0000000000005EE0
.text:0000000000005EE0 re_node_set_insert proc near            ; CODE XREF: duplicate_node_closure+E0↓p
.text:0000000000005EE0                                         ; duplicate_node_closure+11A↓p ...
.text:0000000000005EE0 ; __unwind {
.text:0000000000005EE0                 push    rbp
.text:0000000000005EE1                 push    rbx
.text:0000000000005EE2                 mov     rbp, rsi
.text:0000000000005EE5                 mov     rbx, rdi
.text:0000000000005EE8                 sub     rsp, 8
.text:0000000000005EEC                 mov     rdx, [rdi]
.text:0000000000005EEF                 test    rdx, rdx
.text:0000000000005EF2                 jz      short loc_5F18
.text:0000000000005EF4                 mov     rsi, [rdi+8]
.text:0000000000005EF8                 mov     rax, [rdi+10h]
.text:0000000000005EFC                 test    rsi, rsi
.text:0000000000005EFF                 jnz     short loc_5F50
.text:0000000000005F01                 mov     [rax], rbp
.text:0000000000005F04                 add     qword ptr [rdi+8], 1
.text:0000000000005F09                 mov     eax, 1
.text:0000000000005F0E
.text:0000000000005F0E loc_5F0E:                               ; CODE XREF: re_node_set_insert+B1↓j
.text:0000000000005F0E                                         ; re_node_set_insert+F7↓j ...
.text:0000000000005F0E                 add     rsp, 8
.text:0000000000005F12                 pop     rbx
.text:0000000000005F13                 pop     rbp
.text:0000000000005F14                 retn
.text:0000000000005F14 ; ---------------------------------------------------------------------------
.text:0000000000005F15                 align 8
.text:0000000000005F18
.text:0000000000005F18 loc_5F18:                               ; CODE XREF: re_node_set_insert+12↑j
.text:0000000000005F18                 mov     qword ptr [rdi], 1
.text:0000000000005F1F                 mov     qword ptr [rdi+8], 1
.text:0000000000005F27                 mov     edi, 8          ; size
.text:0000000000005F2C                 call    _malloc
.text:0000000000005F31                 test    rax, rax
.text:0000000000005F34                 mov     [rbx+10h], rax
.text:0000000000005F38                 jz      loc_5FC8
.text:0000000000005F3E                 mov     [rax], rbp
.text:0000000000005F41                 add     rsp, 8
.text:0000000000005F45                 mov     eax, 1
.text:0000000000005F4A                 pop     rbx
.text:0000000000005F4B                 pop     rbp
.text:0000000000005F4C                 retn
.text:0000000000005F4C ; ---------------------------------------------------------------------------
.text:0000000000005F4D                 align 10h
.text:0000000000005F50
.text:0000000000005F50 loc_5F50:                               ; CODE XREF: re_node_set_insert+1F↑j
.text:0000000000005F50                 cmp     rdx, rsi
.text:0000000000005F53                 jz      loc_5FE0
.text:0000000000005F59
.text:0000000000005F59 loc_5F59:                               ; CODE XREF: re_node_set_insert+120↓j
.text:0000000000005F59                 cmp     [rax], rbp
.text:0000000000005F5C                 lea     rdx, ds:0[rsi*8]
.text:0000000000005F64                 jle     short loc_5FA0
.text:0000000000005F66                 test    rsi, rsi
.text:0000000000005F69                 jle     short loc_5F83
.text:0000000000005F6B                 add     rdx, rax
.text:0000000000005F6E                 xchg    ax, ax
.text:0000000000005F70
.text:0000000000005F70 loc_5F70:                               ; CODE XREF: re_node_set_insert+9F↓j
.text:0000000000005F70                 mov     rcx, [rdx-8]
.text:0000000000005F74                 sub     rdx, 8
.text:0000000000005F78                 mov     [rdx+8], rcx
.text:0000000000005F7C                 cmp     rax, rdx
.text:0000000000005F7F                 jnz     short loc_5F70
.text:0000000000005F81                 xor     edx, edx
.text:0000000000005F83
.text:0000000000005F83 loc_5F83:                               ; CODE XREF: re_node_set_insert+89↑j
.text:0000000000005F83                                         ; re_node_set_insert+C8↓j ...
.text:0000000000005F83                 mov     [rax+rdx], rbp
.text:0000000000005F87                 mov     eax, 1
.text:0000000000005F8C                 add     qword ptr [rbx+8], 1
.text:0000000000005F91                 jmp     loc_5F0E
.text:0000000000005F91 ; ---------------------------------------------------------------------------
.text:0000000000005F96                 align 20h
.text:0000000000005FA0
.text:0000000000005FA0 loc_5FA0:                               ; CODE XREF: re_node_set_insert+84↑j
.text:0000000000005FA0                 mov     rcx, [rax+rdx-8]
.text:0000000000005FA5                 cmp     rbp, rcx
.text:0000000000005FA8                 jge     short loc_5F83
.text:0000000000005FAA                 nop     word ptr [rax+rax+00h]
.text:0000000000005FB0
.text:0000000000005FB0 loc_5FB0:                               ; CODE XREF: re_node_set_insert+E0↓j
.text:0000000000005FB0                 mov     [rax+rdx], rcx
.text:0000000000005FB4                 sub     rdx, 8
.text:0000000000005FB8                 mov     rcx, [rax+rdx-8]
.text:0000000000005FBD                 cmp     rcx, rbp
.text:0000000000005FC0                 jg      short loc_5FB0
.text:0000000000005FC2                 jmp     short loc_5F83
.text:0000000000005FC2 ; ---------------------------------------------------------------------------
.text:0000000000005FC4                 align 8
.text:0000000000005FC8
.text:0000000000005FC8 loc_5FC8:                               ; CODE XREF: re_node_set_insert+58↑j
.text:0000000000005FC8                 mov     qword ptr [rbx+8], 0
.text:0000000000005FD0                 mov     qword ptr [rbx], 0
.text:0000000000005FD7                 jmp     loc_5F0E
.text:0000000000005FD7 ; ---------------------------------------------------------------------------
.text:0000000000005FDC                 align 20h
.text:0000000000005FE0
.text:0000000000005FE0 loc_5FE0:                               ; CODE XREF: re_node_set_insert+73↑j
.text:0000000000005FE0                 lea     rdx, [rsi+rsi]
.text:0000000000005FE4                 shl     rsi, 4          ; size
.text:0000000000005FE8                 mov     [rdi], rdx
.text:0000000000005FEB                 mov     rdi, rax        ; ptr
.text:0000000000005FEE                 call    _realloc
.text:0000000000005FF3                 test    rax, rax
.text:0000000000005FF6                 jz      short loc_6005
.text:0000000000005FF8                 mov     [rbx+10h], rax
.text:0000000000005FFC                 mov     rsi, [rbx+8]
.text:0000000000006000                 jmp     loc_5F59
.text:0000000000006005 ; ---------------------------------------------------------------------------
.text:0000000000006005
.text:0000000000006005 loc_6005:                               ; CODE XREF: re_node_set_insert+116↑j
.text:0000000000006005                 xor     eax, eax
.text:0000000000006007                 jmp     loc_5F0E
.text:0000000000006007 ; } // starts at 5EE0
.text:0000000000006007 re_node_set_insert endp
.text:0000000000006007
.text:0000000000006007 ; ---------------------------------------------------------------------------
.text:000000000000600C                 align 10h
.text:0000000000006010
.text:0000000000006010 ; =============== S U B R O U T I N E =======================================
.text:0000000000006010
.text:0000000000006010
.text:0000000000006010 register_state  proc near               ; CODE XREF: re_acquire_state_context+201↓p
.text:0000000000006010                                         ; re_acquire_state+186↓p
.text:0000000000006010 ; __unwind {
.text:0000000000006010                 push    r14
.text:0000000000006012                 push    r13
.text:0000000000006014                 mov     r14, rdi
.text:0000000000006017                 push    r12
.text:0000000000006019                 push    rbp
.text:000000000000601A                 mov     r12, rdx
.text:000000000000601D                 push    rbx
.text:000000000000601E                 mov     rbx, [rsi+10h]
.text:0000000000006022                 mov     rbp, rsi
.text:0000000000006025                 mov     [rsi], rdx
.text:0000000000006028                 mov     qword ptr [rsi+28h], 0
.text:0000000000006030                 lea     r13, [rsi+20h]
.text:0000000000006034                 lea     rdi, ds:0[rbx*8] ; size
.text:000000000000603C                 mov     [rsi+20h], rbx
.text:0000000000006040                 call    _malloc
.text:0000000000006045                 test    rax, rax
.text:0000000000006048                 mov     [rbp+30h], rax
.text:000000000000604C                 jz      short loc_608E
.text:000000000000604E                 test    rbx, rbx
.text:0000000000006051                 jle     short loc_60A0
.text:0000000000006053                 xor     ebx, ebx
.text:0000000000006055                 jmp     short loc_606A
.text:0000000000006055 ; ---------------------------------------------------------------------------
.text:0000000000006057                 align 20h
.text:0000000000006060
.text:0000000000006060 loc_6060:                               ; CODE XREF: register_state+70↓j
.text:0000000000006060                                         ; register_state+7C↓j
.text:0000000000006060                 add     rbx, 1
.text:0000000000006064                 cmp     [rbp+10h], rbx
.text:0000000000006068                 jle     short loc_60A0
.text:000000000000606A
.text:000000000000606A loc_606A:                               ; CODE XREF: register_state+45↑j
.text:000000000000606A                 mov     rax, [rbp+18h]
.text:000000000000606E                 mov     rsi, [rax+rbx*8]
.text:0000000000006072                 mov     rax, rsi
.text:0000000000006075                 shl     rax, 4
.text:0000000000006079                 add     rax, [r14]
.text:000000000000607C                 test    byte ptr [rax+8], 8
.text:0000000000006080                 jnz     short loc_6060
.text:0000000000006082                 mov     rdi, r13
.text:0000000000006085                 call    re_node_set_insert_last
.text:000000000000608A                 test    al, al
.text:000000000000608C                 jnz     short loc_6060
.text:000000000000608E
.text:000000000000608E loc_608E:                               ; CODE XREF: register_state+3C↑j
.text:000000000000608E                                         ; register_state+D9↓j
.text:000000000000608E                 pop     rbx
.text:000000000000608F                 mov     eax, 0Ch
.text:0000000000006094                 pop     rbp
.text:0000000000006095                 pop     r12
.text:0000000000006097                 pop     r13
.text:0000000000006099                 pop     r14
.text:000000000000609B                 retn
.text:000000000000609B ; ---------------------------------------------------------------------------
.text:000000000000609C                 align 20h
.text:00000000000060A0
.text:00000000000060A0 loc_60A0:                               ; CODE XREF: register_state+41↑j
.text:00000000000060A0                                         ; register_state+58↑j
.text:00000000000060A0                 and     r12, [r14+88h]
.text:00000000000060A7                 mov     rax, [r14+40h]
.text:00000000000060AB                 lea     rdx, [r12+r12*2]
.text:00000000000060AF                 lea     rbx, [rax+rdx*8]
.text:00000000000060B3                 mov     rdx, [rbx]
.text:00000000000060B6                 cmp     [rbx+8], rdx
.text:00000000000060BA                 mov     rax, [rbx+10h]
.text:00000000000060BE                 lea     rsi, [rdx+1]
.text:00000000000060C2                 jle     short loc_60D6
.text:00000000000060C4
.text:00000000000060C4 loc_60C4:                               ; CODE XREF: register_state+EA↓j
.text:00000000000060C4                 mov     [rbx], rsi
.text:00000000000060C7                 mov     [rax+rdx*8], rbp
.text:00000000000060CB                 xor     eax, eax
.text:00000000000060CD                 pop     rbx
.text:00000000000060CE                 pop     rbp
.text:00000000000060CF                 pop     r12
.text:00000000000060D1                 pop     r13
.text:00000000000060D3                 pop     r14
.text:00000000000060D5                 retn
.text:00000000000060D6 ; ---------------------------------------------------------------------------
.text:00000000000060D6
.text:00000000000060D6 loc_60D6:                               ; CODE XREF: register_state+B2↑j
.text:00000000000060D6                 lea     r12, [rsi+rsi]
.text:00000000000060DA                 mov     rdi, rax        ; ptr
.text:00000000000060DD                 shl     rsi, 4          ; size
.text:00000000000060E1                 call    _realloc
.text:00000000000060E6                 test    rax, rax
.text:00000000000060E9                 jz      short loc_608E
.text:00000000000060EB                 mov     rdx, [rbx]
.text:00000000000060EE                 mov     [rbx+10h], rax
.text:00000000000060F2                 mov     [rbx+8], r12
.text:00000000000060F6                 lea     rsi, [rdx+1]
.text:00000000000060FA                 jmp     short loc_60C4
.text:00000000000060FA ; } // starts at 6010
.text:00000000000060FA register_state  endp
.text:00000000000060FA
.text:00000000000060FA ; ---------------------------------------------------------------------------
.text:00000000000060FC                 align 20h
.text:0000000000006100
.text:0000000000006100 ; =============== S U B R O U T I N E =======================================
.text:0000000000006100
.text:0000000000006100
.text:0000000000006100 build_upper_buffer proc near            ; CODE XREF: extend_buffers:loc_6AA0↓p
.text:0000000000006100                                         ; re_string_reconstruct+673↓p ...
.text:0000000000006100 ; __unwind {
.text:0000000000006100                 push    r12
.text:0000000000006102                 mov     r12, [rdi+58h]
.text:0000000000006106                 cmp     [rdi+40h], r12
.text:000000000000610A                 push    rbp
.text:000000000000610B                 mov     rbp, rdi
.text:000000000000610E                 cmovle  r12, [rdi+40h]
.text:0000000000006113                 push    rbx
.text:0000000000006114                 mov     rbx, [rdi+30h]
.text:0000000000006118                 cmp     r12, rbx
.text:000000000000611B                 jle     short loc_6155
.text:000000000000611D                 call    ___ctype_toupper_loc
.text:0000000000006122                 nop     word ptr [rax+rax+00h]
.text:0000000000006128
.text:0000000000006128 loc_6128:                               ; CODE XREF: build_upper_buffer+53↓j
.text:0000000000006128                 mov     rdx, [rbp+0]
.text:000000000000612C                 mov     rcx, [rbp+78h]
.text:0000000000006130                 add     rdx, rbx
.text:0000000000006133                 add     rdx, [rbp+28h]
.text:0000000000006137                 test    rcx, rcx
.text:000000000000613A                 movzx   edx, byte ptr [rdx]
.text:000000000000613D                 jnz     short loc_6168
.text:000000000000613F
.text:000000000000613F loc_613F:                               ; CODE XREF: build_upper_buffer+6C↓j
.text:000000000000613F                 mov     rsi, [rax]
.text:0000000000006142                 mov     rcx, [rbp+8]
.text:0000000000006146                 mov     edx, [rsi+rdx*4]
.text:0000000000006149                 mov     [rcx+rbx], dl
.text:000000000000614C                 add     rbx, 1
.text:0000000000006150                 cmp     r12, rbx
.text:0000000000006153                 jnz     short loc_6128
.text:0000000000006155
.text:0000000000006155 loc_6155:                               ; CODE XREF: build_upper_buffer+1B↑j
.text:0000000000006155                 mov     [rbp+30h], rbx
.text:0000000000006159                 mov     [rbp+38h], rbx
.text:000000000000615D                 pop     rbx
.text:000000000000615E                 pop     rbp
.text:000000000000615F                 pop     r12
.text:0000000000006161                 retn
.text:0000000000006161 ; ---------------------------------------------------------------------------
.text:0000000000006162                 align 8
.text:0000000000006168
.text:0000000000006168 loc_6168:                               ; CODE XREF: build_upper_buffer+3D↑j
.text:0000000000006168                 movzx   edx, byte ptr [rcx+rdx]
.text:000000000000616C                 jmp     short loc_613F
.text:000000000000616C ; } // starts at 6100
.text:000000000000616C build_upper_buffer endp
.text:000000000000616C
.text:000000000000616C ; ---------------------------------------------------------------------------
.text:000000000000616E                 align 10h
.text:0000000000006170
.text:0000000000006170 ; =============== S U B R O U T I N E =======================================
.text:0000000000006170
.text:0000000000006170
.text:0000000000006170 build_wcs_buffer proc near              ; CODE XREF: extend_buffers+113↓p
.text:0000000000006170                                         ; re_string_reconstruct:loc_9678↓p ...
.text:0000000000006170
.text:0000000000006170 var_8C          = dword ptr -8Ch
.text:0000000000006170 var_88          = byte ptr -88h
.text:0000000000006170 var_40          = qword ptr -40h
.text:0000000000006170
.text:0000000000006170 ; __unwind {
.text:0000000000006170                 push    r15
.text:0000000000006172                 push    r14
.text:0000000000006174                 push    r13
.text:0000000000006176                 push    r12
.text:0000000000006178                 push    rbp
.text:0000000000006179                 push    rbx
.text:000000000000617A                 mov     rbx, rdi
.text:000000000000617D                 sub     rsp, 68h
.text:0000000000006181                 mov     r12, [rdi+58h]
.text:0000000000006185                 mov     rbp, [rdi+30h]
.text:0000000000006189                 mov     rax, fs:28h
.text:0000000000006192                 mov     [rsp+98h+var_40], rax
.text:0000000000006197                 xor     eax, eax
.text:0000000000006199                 cmp     [rdi+40h], r12
.text:000000000000619D                 cmovle  r12, [rdi+40h]
.text:00000000000061A2                 cmp     r12, rbp
.text:00000000000061A5                 jle     loc_6234
.text:00000000000061AB                 lea     r14, [rdi+20h]
.text:00000000000061AF                 lea     r13, [rsp+98h+var_8C]
.text:00000000000061B4                 nop     dword ptr [rax+00h]
.text:00000000000061B8
.text:00000000000061B8 loc_61B8:                               ; CODE XREF: build_wcs_buffer+C2↓j
.text:00000000000061B8                                         ; build_wcs_buffer+F6↓j
.text:00000000000061B8                 mov     rdi, [rbx+78h]
.text:00000000000061BC                 mov     rdx, r12
.text:00000000000061BF                 mov     r15, [rbx+20h]
.text:00000000000061C3                 sub     rdx, rbp
.text:00000000000061C6                 test    rdi, rdi
.text:00000000000061C9                 jnz     loc_62B0
.text:00000000000061CF                 mov     rsi, [rbx+28h]
.text:00000000000061D3                 add     rsi, rbp
.text:00000000000061D6                 add     rsi, [rbx]
.text:00000000000061D9
.text:00000000000061D9 loc_61D9:                               ; CODE XREF: build_wcs_buffer+151↓j
.text:00000000000061D9                                         ; build_wcs_buffer+167↓j ...
.text:00000000000061D9                 mov     rcx, r14
.text:00000000000061DC                 mov     rdi, r13
.text:00000000000061DF                 call    rpl_mbrtowc
.text:00000000000061E4                 lea     rdx, [rax-1]
.text:00000000000061E8                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:00000000000061EC                 ja      loc_6280
.text:00000000000061F2                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000061F6                 mov     edx, [rsp+98h+var_8C]
.text:00000000000061FA                 jz      short loc_6270
.text:00000000000061FC
.text:00000000000061FC loc_61FC:                               ; CODE XREF: build_wcs_buffer+137↓j
.text:00000000000061FC                 mov     rcx, [rbx+10h]
.text:0000000000006200                 lea     rsi, [rbp+1]
.text:0000000000006204                 lea     rdi, ds:0[rbp*4]
.text:000000000000620C                 mov     [rcx+rbp*4], edx
.text:000000000000620F                 add     rbp, rax
.text:0000000000006212                 cmp     rsi, rbp
.text:0000000000006215                 jge     short loc_6260
.text:0000000000006217                 lea     rdx, [rcx+rdi+4]
.text:000000000000621C                 lea     rax, [rcx+rbp*4]
.text:0000000000006220
.text:0000000000006220 loc_6220:                               ; CODE XREF: build_wcs_buffer+BD↓j
.text:0000000000006220                 mov     dword ptr [rdx], 0FFFFFFFFh
.text:0000000000006226                 add     rdx, 4
.text:000000000000622A                 cmp     rax, rdx
.text:000000000000622D                 jnz     short loc_6220
.text:000000000000622F                 cmp     rbp, r12
.text:0000000000006232                 jl      short loc_61B8
.text:0000000000006234
.text:0000000000006234 loc_6234:                               ; CODE XREF: build_wcs_buffer+35↑j
.text:0000000000006234                                         ; build_wcs_buffer+FC↓j ...
.text:0000000000006234                 mov     rax, [rsp+98h+var_40]
.text:0000000000006239                 xor     rax, fs:28h
.text:0000000000006242                 mov     [rbx+30h], rbp
.text:0000000000006246                 mov     [rbx+38h], rbp
.text:000000000000624A                 jnz     loc_632E
.text:0000000000006250                 add     rsp, 68h
.text:0000000000006254                 pop     rbx
.text:0000000000006255                 pop     rbp
.text:0000000000006256                 pop     r12
.text:0000000000006258                 pop     r13
.text:000000000000625A                 pop     r14
.text:000000000000625C                 pop     r15
.text:000000000000625E                 retn
.text:000000000000625E ; ---------------------------------------------------------------------------
.text:000000000000625F                 align 20h
.text:0000000000006260
.text:0000000000006260 loc_6260:                               ; CODE XREF: build_wcs_buffer+A5↑j
.text:0000000000006260                 mov     rbp, rsi
.text:0000000000006263                 cmp     rbp, r12
.text:0000000000006266                 jl      loc_61B8
.text:000000000000626C                 jmp     short loc_6234
.text:000000000000626C ; ---------------------------------------------------------------------------
.text:000000000000626E                 align 10h
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: build_wcs_buffer+8A↑j
.text:0000000000006270                 mov     rax, [rbx+58h]
.text:0000000000006274                 cmp     [rbx+40h], rax
.text:0000000000006278                 jl      loc_6318
.text:000000000000627E                 xchg    ax, ax
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: build_wcs_buffer+7C↑j
.text:0000000000006280                 mov     rax, [rbx]
.text:0000000000006283                 mov     rcx, [rbx+78h]
.text:0000000000006287                 add     rax, rbp
.text:000000000000628A                 add     rax, [rbx+28h]
.text:000000000000628E                 test    rcx, rcx
.text:0000000000006291                 movzx   edx, byte ptr [rax]
.text:0000000000006294                 mov     [rsp+98h+var_8C], edx
.text:0000000000006298                 jnz     loc_6321
.text:000000000000629E
.text:000000000000629E loc_629E:                               ; CODE XREF: build_wcs_buffer+1B9↓j
.text:000000000000629E                 mov     [rbx+20h], r15
.text:00000000000062A2                 mov     eax, 1
.text:00000000000062A7                 jmp     loc_61FC
.text:00000000000062A7 ; ---------------------------------------------------------------------------
.text:00000000000062AC                 align 10h
.text:00000000000062B0
.text:00000000000062B0 loc_62B0:                               ; CODE XREF: build_wcs_buffer+59↑j
.text:00000000000062B0                 mov     ecx, [rbx+90h]
.text:00000000000062B6                 xor     eax, eax
.text:00000000000062B8                 lea     rsi, [rsp+98h+var_88]
.text:00000000000062BD                 test    ecx, ecx
.text:00000000000062BF                 jg      short loc_62E1
.text:00000000000062C1                 jmp     loc_61D9
.text:00000000000062C1 ; ---------------------------------------------------------------------------
.text:00000000000062C6                 align 10h
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: build_wcs_buffer+19B↓j
.text:00000000000062D0                 add     rax, 1
.text:00000000000062D4                 cmp     rdx, rax
.text:00000000000062D7                 jz      loc_61D9
.text:00000000000062DD                 mov     rdi, [rbx+78h]
.text:00000000000062E1
.text:00000000000062E1 loc_62E1:                               ; CODE XREF: build_wcs_buffer+14F↑j
.text:00000000000062E1                 mov     rcx, [rbx]
.text:00000000000062E4                 add     rcx, rbp
.text:00000000000062E7                 add     rcx, rax
.text:00000000000062EA                 add     rcx, [rbx+28h]
.text:00000000000062EE                 movzx   ecx, byte ptr [rcx]
.text:00000000000062F1                 movzx   ecx, byte ptr [rdi+rcx]
.text:00000000000062F5                 mov     rdi, [rbx+8]
.text:00000000000062F9                 add     rdi, rbp
.text:00000000000062FC                 mov     [rdi+rax], cl
.text:00000000000062FF                 mov     [rsi+rax], cl
.text:0000000000006302                 lea     ecx, [rax+1]
.text:0000000000006305                 cmp     ecx, [rbx+90h]
.text:000000000000630B                 jl      short loc_62D0
.text:000000000000630D                 jmp     loc_61D9
.text:000000000000630D ; ---------------------------------------------------------------------------
.text:0000000000006312                 align 8
.text:0000000000006318
.text:0000000000006318 loc_6318:                               ; CODE XREF: build_wcs_buffer+108↑j
.text:0000000000006318                 mov     [rbx+20h], r15
.text:000000000000631C                 jmp     loc_6234
.text:0000000000006321 ; ---------------------------------------------------------------------------
.text:0000000000006321
.text:0000000000006321 loc_6321:                               ; CODE XREF: build_wcs_buffer+128↑j
.text:0000000000006321                 movzx   edx, byte ptr [rcx+rdx]
.text:0000000000006325                 mov     [rsp+98h+var_8C], edx
.text:0000000000006329                 jmp     loc_629E
.text:000000000000632E ; ---------------------------------------------------------------------------
.text:000000000000632E
.text:000000000000632E loc_632E:                               ; CODE XREF: build_wcs_buffer+DA↑j
.text:000000000000632E                 call    ___stack_chk_fail
.text:000000000000632E ; } // starts at 6170
.text:000000000000632E build_wcs_buffer endp
.text:000000000000632E
.text:000000000000632E ; ---------------------------------------------------------------------------
.text:0000000000006333                 align 20h
.text:0000000000006340
.text:0000000000006340 ; =============== S U B R O U T I N E =======================================
.text:0000000000006340
.text:0000000000006340
.text:0000000000006340 build_wcs_upper_buffer proc near        ; CODE XREF: extend_buffers+95↓j
.text:0000000000006340                                         ; re_string_reconstruct+12A↓p ...
.text:0000000000006340
.text:0000000000006340 var_D0          = qword ptr -0D0h
.text:0000000000006340 src             = qword ptr -0C8h
.text:0000000000006340 var_C0          = qword ptr -0C0h
.text:0000000000006340 var_B8          = qword ptr -0B8h
.text:0000000000006340 var_B0          = qword ptr -0B0h
.text:0000000000006340 var_A8          = qword ptr -0A8h
.text:0000000000006340 var_A0          = qword ptr -0A0h
.text:0000000000006340 wc              = dword ptr -94h
.text:0000000000006340 ps              = mbstate_t ptr -90h
.text:0000000000006340 s               = byte ptr -88h
.text:0000000000006340 var_40          = qword ptr -40h
.text:0000000000006340
.text:0000000000006340 ; __unwind {
.text:0000000000006340                 push    r15
.text:0000000000006342                 push    r14
.text:0000000000006344                 mov     r14, rdi
.text:0000000000006347                 push    r13
.text:0000000000006349                 push    r12
.text:000000000000634B                 push    rbp
.text:000000000000634C                 push    rbx
.text:000000000000634D                 sub     rsp, 0A8h
.text:0000000000006354                 mov     rbx, [rdi+58h]
.text:0000000000006358                 mov     r15, [rdi+30h]
.text:000000000000635C                 mov     rax, fs:28h
.text:0000000000006365                 mov     [rsp+0D8h+var_40], rax
.text:000000000000636D                 xor     eax, eax
.text:000000000000636F                 cmp     [rdi+40h], rbx
.text:0000000000006373                 cmovle  rbx, [rdi+40h]
.text:0000000000006378                 cmp     byte ptr [rdi+8Ah], 0
.text:000000000000637F                 jnz     short loc_638C
.text:0000000000006381                 cmp     qword ptr [rdi+78h], 0
.text:0000000000006386                 jz      loc_6510
.text:000000000000638C
.text:000000000000638C loc_638C:                               ; CODE XREF: build_wcs_upper_buffer+3F↑j
.text:000000000000638C                                         ; build_wcs_upper_buffer+1D7↓j
.text:000000000000638C                 mov     r13, [r14+38h]
.text:0000000000006390
.text:0000000000006390 loc_6390:                               ; CODE XREF: build_wcs_upper_buffer+198↓j
.text:0000000000006390                                         ; build_wcs_upper_buffer+1C2↓j ...
.text:0000000000006390                 cmp     r15, rbx
.text:0000000000006393                 jl      short loc_63D0
.text:0000000000006395
.text:0000000000006395 loc_6395:                               ; CODE XREF: build_wcs_upper_buffer+4D1↓j
.text:0000000000006395                 mov     [r14+30h], r15
.text:0000000000006399                 mov     [r14+38h], r13
.text:000000000000639D                 xor     eax, eax
.text:000000000000639F
.text:000000000000639F loc_639F:                               ; CODE XREF: build_wcs_upper_buffer+382↓j
.text:000000000000639F                                         ; build_wcs_upper_buffer+5EB↓j
.text:000000000000639F                 mov     rcx, [rsp+0D8h+var_40]
.text:00000000000063A7                 xor     rcx, fs:28h
.text:00000000000063B0                 jnz     loc_693A
.text:00000000000063B6                 add     rsp, 0A8h
.text:00000000000063BD                 pop     rbx
.text:00000000000063BE                 pop     rbp
.text:00000000000063BF                 pop     r12
.text:00000000000063C1                 pop     r13
.text:00000000000063C3                 pop     r14
.text:00000000000063C5                 pop     r15
.text:00000000000063C7                 retn
.text:00000000000063C7 ; ---------------------------------------------------------------------------
.text:00000000000063C8                 align 10h
.text:00000000000063D0
.text:00000000000063D0 loc_63D0:                               ; CODE XREF: build_wcs_upper_buffer+53↑j
.text:00000000000063D0                 lea     rax, [r14+20h]
.text:00000000000063D4                 mov     [rsp+0D8h+var_D0], rax
.text:00000000000063D9                 mov     rax, rbx
.text:00000000000063DC                 sub     rax, r15
.text:00000000000063DF                 mov     [rsp+0D8h+src], rax
.text:00000000000063E4                 lea     rax, [rsp+0D8h+wc]
.text:00000000000063E9                 mov     [rsp+0D8h+var_B8], rax
.text:00000000000063EE
.text:00000000000063EE loc_63EE:                               ; CODE XREF: build_wcs_upper_buffer+41B↓j
.text:00000000000063EE                 mov     rdx, [r14+78h]
.text:00000000000063F2                 mov     rax, [r14+20h]
.text:00000000000063F6                 test    rdx, rdx
.text:00000000000063F9                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:00000000000063FE                 jnz     loc_6709
.text:0000000000006404                 mov     rbp, [r14+28h]
.text:0000000000006408                 add     rbp, r13
.text:000000000000640B                 add     rbp, [r14]
.text:000000000000640E                 mov     [rsp+0D8h+var_C0], rbp
.text:0000000000006413
.text:0000000000006413 loc_6413:                               ; CODE XREF: build_wcs_upper_buffer+410↓j
.text:0000000000006413                 mov     rcx, [rsp+0D8h+var_D0]
.text:0000000000006418                 mov     rdx, [rsp+0D8h+src]
.text:000000000000641D                 mov     rsi, [rsp+0D8h+var_C0]
.text:0000000000006422                 mov     rdi, [rsp+0D8h+var_B8]
.text:0000000000006427                 call    rpl_mbrtowc
.text:000000000000642C                 mov     rbp, rax
.text:000000000000642F                 lea     rax, [rax-1]
.text:0000000000006433                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:0000000000006437                 mov     [rsp+0D8h+var_B8], rax
.text:000000000000643C                 ja      loc_6779
.text:0000000000006442                 mov     edx, [rsp+0D8h+wc]
.text:0000000000006446                 mov     edi, edx        ; wc
.text:0000000000006448                 mov     dword ptr [rsp+0D8h+src], edx
.text:000000000000644C                 call    _towupper
.text:0000000000006451                 mov     edx, dword ptr [rsp+0D8h+src]
.text:0000000000006455                 mov     r12d, eax
.text:0000000000006458                 mov     [rsp+0D8h+var_D0], r15
.text:000000000000645D                 cmp     edx, eax
.text:000000000000645F                 jz      loc_6760
.text:0000000000006465                 lea     rcx, [rsp+0D8h+s]
.text:000000000000646A                 lea     rdx, [rsp+0D8h+ps] ; ps
.text:000000000000646F                 mov     esi, eax        ; wc
.text:0000000000006471                 mov     rdi, rcx        ; s
.text:0000000000006474                 mov     [rsp+0D8h+src], rcx
.text:0000000000006479                 call    _wcrtomb
.text:000000000000647E                 cmp     rbp, rax
.text:0000000000006481                 mov     r11, rax
.text:0000000000006484                 mov     rcx, [rsp+0D8h+src]
.text:0000000000006489                 jnz     loc_6816
.text:000000000000648F                 mov     rdi, [r14+8]
.text:0000000000006493                 mov     rdx, rbp        ; n
.text:0000000000006496                 mov     rsi, rcx        ; src
.text:0000000000006499                 add     rdi, r15        ; dest
.text:000000000000649C                 call    _memcpy
.text:00000000000064A1
.text:00000000000064A1 loc_64A1:                               ; CODE XREF: build_wcs_upper_buffer+434↓j
.text:00000000000064A1                 cmp     byte ptr [r14+8Ch], 0
.text:00000000000064A9                 lea     rax, [rbp+r13+0]
.text:00000000000064AE                 jnz     loc_67E5
.text:00000000000064B4
.text:00000000000064B4 loc_64B4:                               ; CODE XREF: build_wcs_upper_buffer+4C3↓j
.text:00000000000064B4                 add     r15, 1
.text:00000000000064B8                 mov     rsi, [rsp+0D8h+var_D0]
.text:00000000000064BD                 mov     rdx, [r14+10h]
.text:00000000000064C1                 lea     rcx, [r15+rbp-1]
.text:00000000000064C6                 mov     r13, rax
.text:00000000000064C9                 cmp     r15, rcx
.text:00000000000064CC                 lea     rax, ds:0[rsi*4]
.text:00000000000064D4                 mov     [rdx+rsi*4], r12d
.text:00000000000064D8                 jge     loc_6390
.text:00000000000064DE                 lea     rax, [rdx+rax+4]
.text:00000000000064E3                 lea     rdx, [rdx+rcx*4]
.text:00000000000064E7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000064F0
.text:00000000000064F0 loc_64F0:                               ; CODE XREF: build_wcs_upper_buffer+1BD↓j
.text:00000000000064F0                 mov     dword ptr [rax], 0FFFFFFFFh
.text:00000000000064F6                 add     rax, 4
.text:00000000000064FA                 cmp     rdx, rax
.text:00000000000064FD                 jnz     short loc_64F0
.text:00000000000064FF                 mov     r15, rcx
.text:0000000000006502                 jmp     loc_6390
.text:0000000000006502 ; ---------------------------------------------------------------------------
.text:0000000000006507                 align 10h
.text:0000000000006510
.text:0000000000006510 loc_6510:                               ; CODE XREF: build_wcs_upper_buffer+46↑j
.text:0000000000006510                 cmp     byte ptr [rdi+8Ch], 0
.text:0000000000006517                 jnz     loc_638C
.text:000000000000651D                 cmp     r15, rbx
.text:0000000000006520                 jge     loc_66B8
.text:0000000000006526                 lea     rax, [rdi+20h]
.text:000000000000652A                 mov     [rsp+0D8h+var_D0], rax
.text:000000000000652F                 lea     rax, [rsp+0D8h+wc]
.text:0000000000006534                 mov     [rsp+0D8h+var_A8], rax
.text:0000000000006539                 lea     rax, [rsp+0D8h+ps]
.text:000000000000653E                 mov     [rsp+0D8h+var_A0], rax
.text:0000000000006543                 lea     rax, [rsp+0D8h+s]
.text:0000000000006548                 mov     [rsp+0D8h+var_B0], rax
.text:000000000000654D                 nop     dword ptr [rax]
.text:0000000000006550
.text:0000000000006550 loc_6550:                               ; CODE XREF: build_wcs_upper_buffer+2FD↓j
.text:0000000000006550                 mov     rbp, [r14+28h]
.text:0000000000006554                 mov     r13, r15
.text:0000000000006557                 add     rbp, r15
.text:000000000000655A                 add     rbp, [r14]
.text:000000000000655D                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000006562                 test    r12b, 80h
.text:0000000000006566                 jnz     short loc_657A
.text:0000000000006568                 mov     rdi, [rsp+0D8h+var_D0] ; ps
.text:000000000000656D                 call    _mbsinit
.text:0000000000006572                 test    eax, eax
.text:0000000000006574                 jnz     loc_6668
.text:000000000000657A
.text:000000000000657A loc_657A:                               ; CODE XREF: build_wcs_upper_buffer+226↑j
.text:000000000000657A                 mov     rax, [r14+20h]
.text:000000000000657E                 mov     rdi, [rsp+0D8h+var_A8]
.text:0000000000006583                 mov     rdx, rbx
.text:0000000000006586                 mov     rcx, [rsp+0D8h+var_D0]
.text:000000000000658B                 sub     rdx, r15
.text:000000000000658E                 mov     rsi, rbp
.text:0000000000006591                 mov     [rsp+0D8h+src], rdx
.text:0000000000006596                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:000000000000659B                 mov     [rsp+0D8h+var_B8], rdi
.text:00000000000065A0                 call    rpl_mbrtowc
.text:00000000000065A5                 mov     rbp, rax
.text:00000000000065A8                 lea     rax, [rax-1]
.text:00000000000065AC                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:00000000000065B0                 ja      loc_6698
.text:00000000000065B6                 mov     edx, [rsp+0D8h+wc]
.text:00000000000065BA                 mov     edi, edx        ; wc
.text:00000000000065BC                 mov     dword ptr [rsp+0D8h+var_C0], edx
.text:00000000000065C0                 call    _towupper
.text:00000000000065C5                 mov     edx, dword ptr [rsp+0D8h+var_C0]
.text:00000000000065C9                 mov     r12d, eax
.text:00000000000065CC                 cmp     edx, eax
.text:00000000000065CE                 jz      short loc_6648
.text:00000000000065D0                 mov     rdx, [rsp+0D8h+var_A0] ; ps
.text:00000000000065D5                 mov     rdi, [rsp+0D8h+var_B0] ; s
.text:00000000000065DA                 mov     esi, eax        ; wc
.text:00000000000065DC                 call    _wcrtomb
.text:00000000000065E1                 cmp     rbp, rax
.text:00000000000065E4                 jnz     loc_6758
.text:00000000000065EA                 mov     rdi, [r14+8]
.text:00000000000065EE                 mov     rsi, [rsp+0D8h+var_B0] ; src
.text:00000000000065F3                 mov     rdx, rbp        ; n
.text:00000000000065F6                 add     rdi, r15        ; dest
.text:00000000000065F9                 call    _memcpy
.text:00000000000065FE
.text:00000000000065FE loc_65FE:                               ; CODE XREF: build_wcs_upper_buffer+321↓j
.text:00000000000065FE                 add     r15, 1
.text:0000000000006602                 mov     rdx, [r14+10h]
.text:0000000000006606                 lea     rax, ds:0[r13*4]
.text:000000000000660E                 lea     rcx, [r15+rbp-1]
.text:0000000000006613                 cmp     r15, rcx
.text:0000000000006616                 mov     [rdx+r13*4], r12d
.text:000000000000661A                 jge     short loc_663A
.text:000000000000661C                 lea     rax, [rdx+rax+4]
.text:0000000000006621                 lea     rdx, [rdx+rcx*4]
.text:0000000000006625                 nop     dword ptr [rax]
.text:0000000000006628
.text:0000000000006628 loc_6628:                               ; CODE XREF: build_wcs_upper_buffer+2F5↓j
.text:0000000000006628                 mov     dword ptr [rax], 0FFFFFFFFh
.text:000000000000662E                 add     rax, 4
.text:0000000000006632                 cmp     rdx, rax
.text:0000000000006635                 jnz     short loc_6628
.text:0000000000006637                 mov     r15, rcx
.text:000000000000663A
.text:000000000000663A loc_663A:                               ; CODE XREF: build_wcs_upper_buffer+2DA↑j
.text:000000000000663A                                         ; build_wcs_upper_buffer+351↓j ...
.text:000000000000663A                 cmp     rbx, r15
.text:000000000000663D                 jg      loc_6550
.text:0000000000006643                 jmp     short loc_66B8
.text:0000000000006643 ; ---------------------------------------------------------------------------
.text:0000000000006645                 align 8
.text:0000000000006648
.text:0000000000006648 loc_6648:                               ; CODE XREF: build_wcs_upper_buffer+28E↑j
.text:0000000000006648                 mov     rsi, [r14+28h]
.text:000000000000664C                 mov     rdi, [r14+8]
.text:0000000000006650                 mov     rdx, rbp        ; n
.text:0000000000006653                 add     rsi, r15
.text:0000000000006656                 add     rsi, [r14]      ; src
.text:0000000000006659                 add     rdi, r15        ; dest
.text:000000000000665C                 call    _memcpy
.text:0000000000006661                 jmp     short loc_65FE
.text:0000000000006661 ; ---------------------------------------------------------------------------
.text:0000000000006663                 align 8
.text:0000000000006668
.text:0000000000006668 loc_6668:                               ; CODE XREF: build_wcs_upper_buffer+234↑j
.text:0000000000006668                 call    ___ctype_toupper_loc
.text:000000000000666D                 mov     rax, [rax]
.text:0000000000006670                 mov     rdx, [r14+8]
.text:0000000000006674                 mov     eax, [rax+r12*4]
.text:0000000000006678                 mov     [rdx+r15], al
.text:000000000000667C                 mov     rdx, [r14+8]
.text:0000000000006680                 mov     rax, [r14+10h]
.text:0000000000006684                 movzx   edx, byte ptr [rdx+r15]
.text:0000000000006689                 mov     [rax+r15*4], edx
.text:000000000000668D                 add     r15, 1
.text:0000000000006691                 jmp     short loc_663A
.text:0000000000006691 ; ---------------------------------------------------------------------------
.text:0000000000006693                 align 8
.text:0000000000006698
.text:0000000000006698 loc_6698:                               ; CODE XREF: build_wcs_upper_buffer+270↑j
.text:0000000000006698                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000669C                 jnz     short loc_66D0
.text:000000000000669E                 mov     rax, [r14+58h]
.text:00000000000066A2                 cmp     [r14+40h], rax
.text:00000000000066A6                 jge     short loc_66D0
.text:00000000000066A8                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:00000000000066AD                 mov     [r14+20h], rax
.text:00000000000066B1                 nop     dword ptr [rax+00000000h]
.text:00000000000066B8
.text:00000000000066B8 loc_66B8:                               ; CODE XREF: build_wcs_upper_buffer+1E0↑j
.text:00000000000066B8                                         ; build_wcs_upper_buffer+303↑j
.text:00000000000066B8                 mov     [r14+30h], r15
.text:00000000000066BC                 mov     [r14+38h], r15
.text:00000000000066C0                 xor     eax, eax
.text:00000000000066C2                 jmp     loc_639F
.text:00000000000066C2 ; ---------------------------------------------------------------------------
.text:00000000000066C7                 align 10h
.text:00000000000066D0
.text:00000000000066D0 loc_66D0:                               ; CODE XREF: build_wcs_upper_buffer+35C↑j
.text:00000000000066D0                                         ; build_wcs_upper_buffer+366↑j
.text:00000000000066D0                 mov     rax, [r14]
.text:00000000000066D3                 mov     rdx, [r14+8]
.text:00000000000066D7                 add     rax, r15
.text:00000000000066DA                 add     rax, [r14+28h]
.text:00000000000066DE                 movzx   eax, byte ptr [rax]
.text:00000000000066E1                 mov     [rdx+r15], al
.text:00000000000066E5                 mov     rdx, [r14+10h]
.text:00000000000066E9                 add     r15, 1
.text:00000000000066ED                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:00000000000066F1                 mov     [rdx+r13*4], eax
.text:00000000000066F5                 jnz     loc_663A
.text:00000000000066FB                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000006700                 mov     [r14+20h], rax
.text:0000000000006704                 jmp     loc_663A
.text:0000000000006709 ; ---------------------------------------------------------------------------
.text:0000000000006709
.text:0000000000006709 loc_6709:                               ; CODE XREF: build_wcs_upper_buffer+BE↑j
.text:0000000000006709                 mov     eax, [r14+90h]
.text:0000000000006710                 test    eax, eax
.text:0000000000006712                 jle     loc_6930
.text:0000000000006718                 mov     rdi, [r14+28h]
.text:000000000000671C                 lea     r11d, [rax-1]
.text:0000000000006720                 lea     rcx, [rsp+0D8h+s]
.text:0000000000006725                 xor     eax, eax
.text:0000000000006727                 add     rdi, r13
.text:000000000000672A                 add     rdi, [r14]
.text:000000000000672D                 jmp     short loc_673A
.text:000000000000672F ; ---------------------------------------------------------------------------
.text:000000000000672F
.text:000000000000672F loc_672F:                               ; CODE XREF: build_wcs_upper_buffer+409↓j
.text:000000000000672F                 add     rax, 1
.text:0000000000006733                 cmp     [rsp+0D8h+src], rax
.text:0000000000006738                 jz      short loc_674B
.text:000000000000673A
.text:000000000000673A loc_673A:                               ; CODE XREF: build_wcs_upper_buffer+3ED↑j
.text:000000000000673A                 movzx   esi, byte ptr [rdi+rax]
.text:000000000000673E                 cmp     r11, rax
.text:0000000000006741                 movzx   esi, byte ptr [rdx+rsi]
.text:0000000000006745                 mov     [rcx+rax], sil
.text:0000000000006749                 jnz     short loc_672F
.text:000000000000674B
.text:000000000000674B loc_674B:                               ; CODE XREF: build_wcs_upper_buffer+3F8↑j
.text:000000000000674B                                         ; build_wcs_upper_buffer+5F5↓j
.text:000000000000674B                 mov     [rsp+0D8h+var_C0], rcx
.text:0000000000006750                 jmp     loc_6413
.text:0000000000006750 ; ---------------------------------------------------------------------------
.text:0000000000006755                 align 8
.text:0000000000006758
.text:0000000000006758 loc_6758:                               ; CODE XREF: build_wcs_upper_buffer+2A4↑j
.text:0000000000006758                 mov     r13, r15
.text:000000000000675B                 jmp     loc_63EE
.text:0000000000006760 ; ---------------------------------------------------------------------------
.text:0000000000006760
.text:0000000000006760 loc_6760:                               ; CODE XREF: build_wcs_upper_buffer+11F↑j
.text:0000000000006760                                         ; build_wcs_upper_buffer+4DA↓j
.text:0000000000006760                 mov     rdi, [r14+8]
.text:0000000000006764                 mov     rsi, [rsp+0D8h+var_C0] ; src
.text:0000000000006769                 mov     rdx, rbp        ; n
.text:000000000000676C                 add     rdi, r15        ; dest
.text:000000000000676F                 call    _memcpy
.text:0000000000006774                 jmp     loc_64A1
.text:0000000000006779 ; ---------------------------------------------------------------------------
.text:0000000000006779
.text:0000000000006779 loc_6779:                               ; CODE XREF: build_wcs_upper_buffer+FC↑j
.text:0000000000006779                 cmp     [rsp+0D8h+var_B8], 0FFFFFFFFFFFFFFFDh
.text:000000000000677F                 jnz     short loc_678B
.text:0000000000006781                 mov     rax, [r14+58h]
.text:0000000000006785                 cmp     [r14+40h], rax
.text:0000000000006789                 jl      short loc_6808
.text:000000000000678B
.text:000000000000678B loc_678B:                               ; CODE XREF: build_wcs_upper_buffer+43F↑j
.text:000000000000678B                 mov     rax, [r14]
.text:000000000000678E                 mov     rdx, [r14+78h]
.text:0000000000006792                 add     rax, r13
.text:0000000000006795                 add     rax, [r14+28h]
.text:0000000000006799                 test    rdx, rdx
.text:000000000000679C                 movzx   eax, byte ptr [rax]
.text:000000000000679F                 jnz     loc_694C
.text:00000000000067A5
.text:00000000000067A5 loc_67A5:                               ; CODE XREF: build_wcs_upper_buffer+610↓j
.text:00000000000067A5                 mov     rdx, [r14+8]
.text:00000000000067A9                 mov     rcx, r15
.text:00000000000067AC                 mov     [rdx+r15], al
.text:00000000000067B0                 cmp     byte ptr [r14+8Ch], 0
.text:00000000000067B8                 jnz     loc_693F
.text:00000000000067BE
.text:00000000000067BE loc_67BE:                               ; CODE XREF: build_wcs_upper_buffer+607↓j
.text:00000000000067BE                 mov     rdx, [r14+10h]
.text:00000000000067C2                 add     r13, 1
.text:00000000000067C6                 add     r15, 1
.text:00000000000067CA                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:00000000000067CE                 mov     [rdx+rcx*4], eax
.text:00000000000067D1                 jnz     loc_6390
.text:00000000000067D7                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:00000000000067DC                 mov     [r14+20h], rax
.text:00000000000067E0                 jmp     loc_6390
.text:00000000000067E5 ; ---------------------------------------------------------------------------
.text:00000000000067E5
.text:00000000000067E5 loc_67E5:                               ; CODE XREF: build_wcs_upper_buffer+16E↑j
.text:00000000000067E5                 mov     rdx, [r14+18h]
.text:00000000000067E9                 mov     rcx, r15
.text:00000000000067EC                 mov     r10, r13
.text:00000000000067EF                 sub     rcx, r13
.text:00000000000067F2                 lea     rdx, [rdx+rcx*8]
.text:00000000000067F6
.text:00000000000067F6 loc_67F6:                               ; CODE XREF: build_wcs_upper_buffer+4C1↓j
.text:00000000000067F6                 mov     [rdx+r10*8], r10
.text:00000000000067FA                 add     r10, 1
.text:00000000000067FE                 cmp     rax, r10
.text:0000000000006801                 jnz     short loc_67F6
.text:0000000000006803                 jmp     loc_64B4
.text:0000000000006808 ; ---------------------------------------------------------------------------
.text:0000000000006808
.text:0000000000006808 loc_6808:                               ; CODE XREF: build_wcs_upper_buffer+449↑j
.text:0000000000006808                                         ; build_wcs_upper_buffer+4F3↓j
.text:0000000000006808                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:000000000000680D                 mov     [r14+20h], rax
.text:0000000000006811                 jmp     loc_6395
.text:0000000000006816 ; ---------------------------------------------------------------------------
.text:0000000000006816
.text:0000000000006816 loc_6816:                               ; CODE XREF: build_wcs_upper_buffer+149↑j
.text:0000000000006816                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000681A                 jz      loc_6760
.text:0000000000006820                 lea     rax, [rax+r15]
.text:0000000000006824                 mov     rsi, rax
.text:0000000000006827                 mov     [rsp+0D8h+var_D0], rax
.text:000000000000682C                 mov     rax, [r14+40h]
.text:0000000000006830                 cmp     rsi, rax
.text:0000000000006833                 ja      short loc_6808
.text:0000000000006835                 cmp     qword ptr [r14+18h], 0
.text:000000000000683A                 jz      loc_68F8
.text:0000000000006840
.text:0000000000006840 loc_6840:                               ; CODE XREF: build_wcs_upper_buffer+5E0↓j
.text:0000000000006840                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000006848                 jnz     short loc_686A
.text:000000000000684A                 test    r15, r15
.text:000000000000684D                 jz      short loc_6862
.text:000000000000684F                 mov     rdx, [r14+18h]
.text:0000000000006853                 xor     eax, eax
.text:0000000000006855
.text:0000000000006855 loc_6855:                               ; CODE XREF: build_wcs_upper_buffer+520↓j
.text:0000000000006855                 mov     [rdx+rax*8], rax
.text:0000000000006859                 add     rax, 1
.text:000000000000685D                 cmp     rax, r15
.text:0000000000006860                 jnz     short loc_6855
.text:0000000000006862
.text:0000000000006862 loc_6862:                               ; CODE XREF: build_wcs_upper_buffer+50D↑j
.text:0000000000006862                 mov     byte ptr [r14+8Ch], 1
.text:000000000000686A
.text:000000000000686A loc_686A:                               ; CODE XREF: build_wcs_upper_buffer+508↑j
.text:000000000000686A                 mov     rdi, [r14+8]
.text:000000000000686E                 mov     rsi, rcx        ; src
.text:0000000000006871                 mov     rdx, r11        ; n
.text:0000000000006874                 mov     [rsp+0D8h+src], r11
.text:0000000000006879                 add     rdi, r15        ; dest
.text:000000000000687C                 call    _memcpy
.text:0000000000006881                 mov     rax, [r14+10h]
.text:0000000000006885                 mov     r11, [rsp+0D8h+src]
.text:000000000000688A                 lea     rcx, [rax+r15*4]
.text:000000000000688E                 mov     rax, [r14+18h]
.text:0000000000006892                 cmp     r11, 1
.text:0000000000006896                 mov     [rcx], r12d
.text:0000000000006899                 lea     rsi, [rax+r15*8]
.text:000000000000689D                 mov     [rsi], r13
.text:00000000000068A0                 jbe     short loc_68CA
.text:00000000000068A2                 mov     eax, 1
.text:00000000000068A7
.text:00000000000068A7 loc_68A7:                               ; CODE XREF: build_wcs_upper_buffer+588↓j
.text:00000000000068A7                 mov     rdx, [rsp+0D8h+var_B8]
.text:00000000000068AC                 cmp     rax, rbp
.text:00000000000068AF                 cmovb   rdx, rax
.text:00000000000068B3                 add     rdx, r13
.text:00000000000068B6                 mov     [rsi+rax*8], rdx
.text:00000000000068BA                 mov     dword ptr [rcx+rax*4], 0FFFFFFFFh
.text:00000000000068C1                 add     rax, 1
.text:00000000000068C5                 cmp     rax, r11
.text:00000000000068C8                 jnz     short loc_68A7
.text:00000000000068CA
.text:00000000000068CA loc_68CA:                               ; CODE XREF: build_wcs_upper_buffer+560↑j
.text:00000000000068CA                 mov     rbx, [r14+58h]
.text:00000000000068CE                 sub     r11, rbp
.text:00000000000068D1                 add     rbx, r11
.text:00000000000068D4                 cmp     r13, [r14+60h]
.text:00000000000068D8                 mov     [r14+58h], rbx
.text:00000000000068DC                 jge     short loc_68E2
.text:00000000000068DE                 add     [r14+68h], r11
.text:00000000000068E2
.text:00000000000068E2 loc_68E2:                               ; CODE XREF: build_wcs_upper_buffer+59C↑j
.text:00000000000068E2                 cmp     [r14+40h], rbx
.text:00000000000068E6                 mov     r15, [rsp+0D8h+var_D0]
.text:00000000000068EB                 cmovle  rbx, [r14+40h]
.text:00000000000068F0                 add     r13, rbp
.text:00000000000068F3                 jmp     loc_6390
.text:00000000000068F8 ; ---------------------------------------------------------------------------
.text:00000000000068F8
.text:00000000000068F8 loc_68F8:                               ; CODE XREF: build_wcs_upper_buffer+4FA↑j
.text:00000000000068F8                 lea     rdi, ds:0[rax*8] ; size
.text:0000000000006900                 mov     [rsp+0D8h+var_C0], rcx
.text:0000000000006905                 mov     [rsp+0D8h+src], r11
.text:000000000000690A                 call    _malloc
.text:000000000000690F                 test    rax, rax
.text:0000000000006912                 mov     [r14+18h], rax
.text:0000000000006916                 mov     r11, [rsp+0D8h+src]
.text:000000000000691B                 mov     rcx, [rsp+0D8h+var_C0]
.text:0000000000006920                 jnz     loc_6840
.text:0000000000006926                 mov     eax, 0Ch
.text:000000000000692B                 jmp     loc_639F
.text:0000000000006930 ; ---------------------------------------------------------------------------
.text:0000000000006930
.text:0000000000006930 loc_6930:                               ; CODE XREF: build_wcs_upper_buffer+3D2↑j
.text:0000000000006930                 lea     rcx, [rsp+0D8h+s]
.text:0000000000006935                 jmp     loc_674B
.text:000000000000693A ; ---------------------------------------------------------------------------
.text:000000000000693A
.text:000000000000693A loc_693A:                               ; CODE XREF: build_wcs_upper_buffer+70↑j
.text:000000000000693A                 call    ___stack_chk_fail
.text:000000000000693F ; ---------------------------------------------------------------------------
.text:000000000000693F
.text:000000000000693F loc_693F:                               ; CODE XREF: build_wcs_upper_buffer+478↑j
.text:000000000000693F                 mov     rdx, [r14+18h]
.text:0000000000006943                 mov     [rdx+r15*8], r13
.text:0000000000006947                 jmp     loc_67BE
.text:000000000000694C ; ---------------------------------------------------------------------------
.text:000000000000694C
.text:000000000000694C loc_694C:                               ; CODE XREF: build_wcs_upper_buffer+45F↑j
.text:000000000000694C                 movzx   eax, byte ptr [rdx+rax]
.text:0000000000006950                 jmp     loc_67A5
.text:0000000000006950 ; } // starts at 6340
.text:0000000000006950 build_wcs_upper_buffer endp
.text:0000000000006950
.text:0000000000006950 ; ---------------------------------------------------------------------------
.text:0000000000006955                 align 20h
.text:0000000000006960
.text:0000000000006960 ; =============== S U B R O U T I N E =======================================
.text:0000000000006960
.text:0000000000006960
.text:0000000000006960 extend_buffers  proc near               ; CODE XREF: clean_state_log_if_needed+26↓p
.text:0000000000006960                                         ; clean_state_log_if_needed+55↓p ...
.text:0000000000006960 ; __unwind {
.text:0000000000006960                 push    rbp
.text:0000000000006961                 push    rbx
.text:0000000000006962                 mov     rdx, 0FFFFFFFFFFFFFFEh
.text:000000000000696C                 sub     rsp, 8
.text:0000000000006970                 mov     rax, [rdi+40h]
.text:0000000000006974                 cmp     rax, rdx
.text:0000000000006977                 ja      loc_6A88
.text:000000000000697D                 mov     rdx, [rdi+58h]
.text:0000000000006981                 add     rax, rax
.text:0000000000006984                 movsxd  rsi, esi
.text:0000000000006987                 mov     rbx, rdi
.text:000000000000698A                 cmp     rax, rdx
.text:000000000000698D                 cmovg   rax, rdx
.text:0000000000006991                 cmp     rax, rsi
.text:0000000000006994                 cmovge  rsi, rax
.text:0000000000006998                 call    re_string_realloc_buffers
.text:000000000000699D                 test    eax, eax
.text:000000000000699F                 mov     ebp, eax
.text:00000000000069A1                 jnz     loc_6A5D
.text:00000000000069A7                 mov     rdi, [rbx+0B8h] ; ptr
.text:00000000000069AE                 test    rdi, rdi
.text:00000000000069B1                 jz      short loc_69D4
.text:00000000000069B3                 mov     rax, [rbx+40h]
.text:00000000000069B7                 lea     rsi, ds:8[rax*8] ; size
.text:00000000000069BF                 call    _realloc
.text:00000000000069C4                 test    rax, rax
.text:00000000000069C7                 jz      loc_6A88
.text:00000000000069CD                 mov     [rbx+0B8h], rax
.text:00000000000069D4
.text:00000000000069D4 loc_69D4:                               ; CODE XREF: extend_buffers+51↑j
.text:00000000000069D4                 cmp     byte ptr [rbx+88h], 0
.text:00000000000069DB                 mov     eax, [rbx+90h]
.text:00000000000069E1                 jz      short loc_6A00
.text:00000000000069E3                 cmp     eax, 1
.text:00000000000069E6                 mov     rdi, rbx
.text:00000000000069E9                 jle     loc_6AA0
.text:00000000000069EF                 add     rsp, 8
.text:00000000000069F3                 pop     rbx
.text:00000000000069F4                 pop     rbp
.text:00000000000069F5                 jmp     build_wcs_upper_buffer
.text:00000000000069F5 ; ---------------------------------------------------------------------------
.text:00000000000069FA                 align 20h
.text:0000000000006A00
.text:0000000000006A00 loc_6A00:                               ; CODE XREF: extend_buffers+81↑j
.text:0000000000006A00                 cmp     eax, 1
.text:0000000000006A03                 jg      short loc_6A70
.text:0000000000006A05                 mov     rcx, [rbx+78h]
.text:0000000000006A09                 test    rcx, rcx
.text:0000000000006A0C                 jz      short loc_6A5D
.text:0000000000006A0E                 mov     rsi, [rbx+58h]
.text:0000000000006A12                 cmp     [rbx+40h], rsi
.text:0000000000006A16                 cmovle  rsi, [rbx+40h]
.text:0000000000006A1B                 mov     rax, [rbx+30h]
.text:0000000000006A1F                 cmp     rsi, rax
.text:0000000000006A22                 jg      short loc_6A34
.text:0000000000006A24                 jmp     short loc_6A55
.text:0000000000006A24 ; ---------------------------------------------------------------------------
.text:0000000000006A26                 align 10h
.text:0000000000006A30
.text:0000000000006A30 loc_6A30:                               ; CODE XREF: extend_buffers+F3↓j
.text:0000000000006A30                 mov     rcx, [rbx+78h]
.text:0000000000006A34
.text:0000000000006A34 loc_6A34:                               ; CODE XREF: extend_buffers+C2↑j
.text:0000000000006A34                 mov     rdx, [rbx]
.text:0000000000006A37                 add     rdx, rax
.text:0000000000006A3A                 add     rdx, [rbx+28h]
.text:0000000000006A3E                 movzx   edx, byte ptr [rdx]
.text:0000000000006A41                 movzx   ecx, byte ptr [rcx+rdx]
.text:0000000000006A45                 mov     rdx, [rbx+8]
.text:0000000000006A49                 mov     [rdx+rax], cl
.text:0000000000006A4C                 add     rax, 1
.text:0000000000006A50                 cmp     rsi, rax
.text:0000000000006A53                 jnz     short loc_6A30
.text:0000000000006A55
.text:0000000000006A55 loc_6A55:                               ; CODE XREF: extend_buffers+C4↑j
.text:0000000000006A55                 mov     [rbx+30h], rax
.text:0000000000006A59                 mov     [rbx+38h], rax
.text:0000000000006A5D
.text:0000000000006A5D loc_6A5D:                               ; CODE XREF: extend_buffers+41↑j
.text:0000000000006A5D                                         ; extend_buffers+AC↑j
.text:0000000000006A5D                 add     rsp, 8
.text:0000000000006A61                 mov     eax, ebp
.text:0000000000006A63                 pop     rbx
.text:0000000000006A64                 pop     rbp
.text:0000000000006A65                 retn
.text:0000000000006A65 ; ---------------------------------------------------------------------------
.text:0000000000006A66                 align 10h
.text:0000000000006A70
.text:0000000000006A70 loc_6A70:                               ; CODE XREF: extend_buffers+A3↑j
.text:0000000000006A70                 mov     rdi, rbx
.text:0000000000006A73                 call    build_wcs_buffer
.text:0000000000006A78                 add     rsp, 8
.text:0000000000006A7C                 mov     eax, ebp
.text:0000000000006A7E                 pop     rbx
.text:0000000000006A7F                 pop     rbp
.text:0000000000006A80                 retn
.text:0000000000006A80 ; ---------------------------------------------------------------------------
.text:0000000000006A81                 align 8
.text:0000000000006A88
.text:0000000000006A88 loc_6A88:                               ; CODE XREF: extend_buffers+17↑j
.text:0000000000006A88                                         ; extend_buffers+67↑j
.text:0000000000006A88                 mov     ebp, 0Ch
.text:0000000000006A8D                 add     rsp, 8
.text:0000000000006A91                 mov     eax, ebp
.text:0000000000006A93                 pop     rbx
.text:0000000000006A94                 pop     rbp
.text:0000000000006A95                 retn
.text:0000000000006A95 ; ---------------------------------------------------------------------------
.text:0000000000006A96                 align 20h
.text:0000000000006AA0
.text:0000000000006AA0 loc_6AA0:                               ; CODE XREF: extend_buffers+89↑j
.text:0000000000006AA0                 call    build_upper_buffer
.text:0000000000006AA5                 add     rsp, 8
.text:0000000000006AA9                 mov     eax, ebp
.text:0000000000006AAB                 pop     rbx
.text:0000000000006AAC                 pop     rbp
.text:0000000000006AAD                 retn
.text:0000000000006AAD ; } // starts at 6960
.text:0000000000006AAD extend_buffers  endp
.text:0000000000006AAD
.text:0000000000006AAD ; ---------------------------------------------------------------------------
.text:0000000000006AAE                 align 10h
.text:0000000000006AB0
.text:0000000000006AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AB0
.text:0000000000006AB0
.text:0000000000006AB0 clean_state_log_if_needed proc near     ; CODE XREF: get_subexp_sub_isra_32+F4↓j
.text:0000000000006AB0                                         ; transit_state_bkref_isra_34+330↓p ...
.text:0000000000006AB0 ; __unwind {
.text:0000000000006AB0                 push    r12
.text:0000000000006AB2                 push    rbp
.text:0000000000006AB3                 mov     rbp, rsi
.text:0000000000006AB6                 push    rbx
.text:0000000000006AB7                 mov     rax, [rdi+40h]
.text:0000000000006ABB                 mov     rbx, rdi
.text:0000000000006ABE                 mov     r12, [rdi+0C0h]
.text:0000000000006AC5                 cmp     rax, rsi
.text:0000000000006AC8                 jg      short loc_6AF0
.text:0000000000006ACA                 cmp     rax, [rdi+58h]
.text:0000000000006ACE                 jge     short loc_6AF0
.text:0000000000006AD0                 lea     esi, [rbp+1]
.text:0000000000006AD3                 mov     rdi, rbx
.text:0000000000006AD6                 call    extend_buffers
.text:0000000000006ADB                 test    eax, eax
.text:0000000000006ADD                 jnz     short loc_6AE6
.text:0000000000006ADF
.text:0000000000006ADF loc_6ADF:                               ; CODE XREF: clean_state_log_if_needed+47↓j
.text:0000000000006ADF                                         ; clean_state_log_if_needed+4D↓j ...
.text:0000000000006ADF                 cmp     r12, rbp
.text:0000000000006AE2                 jl      short loc_6B10
.text:0000000000006AE4
.text:0000000000006AE4 loc_6AE4:                               ; CODE XREF: clean_state_log_if_needed+84↓j
.text:0000000000006AE4                 xor     eax, eax
.text:0000000000006AE6
.text:0000000000006AE6 loc_6AE6:                               ; CODE XREF: clean_state_log_if_needed+2D↑j
.text:0000000000006AE6                                         ; clean_state_log_if_needed+5E↓j
.text:0000000000006AE6                 pop     rbx
.text:0000000000006AE7                 pop     rbp
.text:0000000000006AE8                 pop     r12
.text:0000000000006AEA                 retn
.text:0000000000006AEA ; ---------------------------------------------------------------------------
.text:0000000000006AEB                 align 10h
.text:0000000000006AF0
.text:0000000000006AF0 loc_6AF0:                               ; CODE XREF: clean_state_log_if_needed+18↑j
.text:0000000000006AF0                                         ; clean_state_log_if_needed+1E↑j
.text:0000000000006AF0                 mov     rax, [rbx+30h]
.text:0000000000006AF4                 cmp     rax, rbp
.text:0000000000006AF7                 jg      short loc_6ADF
.text:0000000000006AF9                 cmp     rax, [rbx+58h]
.text:0000000000006AFD                 jge     short loc_6ADF
.text:0000000000006AFF                 lea     esi, [rbp+1]
.text:0000000000006B02                 mov     rdi, rbx
.text:0000000000006B05                 call    extend_buffers
.text:0000000000006B0A                 test    eax, eax
.text:0000000000006B0C                 jz      short loc_6ADF
.text:0000000000006B0E                 jmp     short loc_6AE6
.text:0000000000006B10 ; ---------------------------------------------------------------------------
.text:0000000000006B10
.text:0000000000006B10 loc_6B10:                               ; CODE XREF: clean_state_log_if_needed+32↑j
.text:0000000000006B10                 mov     rax, [rbx+0B8h]
.text:0000000000006B17                 mov     rdx, rbp
.text:0000000000006B1A                 xor     esi, esi        ; c
.text:0000000000006B1C                 sub     rdx, r12
.text:0000000000006B1F                 shl     rdx, 3          ; n
.text:0000000000006B23                 lea     rdi, [rax+r12*8+8] ; s
.text:0000000000006B28                 call    _memset
.text:0000000000006B2D                 mov     [rbx+0C0h], rbp
.text:0000000000006B34                 jmp     short loc_6AE4
.text:0000000000006B34 ; } // starts at 6AB0
.text:0000000000006B34 clean_state_log_if_needed endp
.text:0000000000006B34
.text:0000000000006B34 ; ---------------------------------------------------------------------------
.text:0000000000006B36                 align 20h
.text:0000000000006B40
.text:0000000000006B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B40
.text:0000000000006B40 ; Attributes: info_from_lumina
.text:0000000000006B40
.text:0000000000006B40 ; isl_union_flow_0 *__fastcall isl_union_flow_free_0(isl_union_flow_0 *flow)
.text:0000000000006B40 isl_union_flow_free_0 proc near         ; CODE XREF: free_token+23↓j
.text:0000000000006B40                                         ; build_charclass_op+1F3↓p ...
.text:0000000000006B40 ; __unwind {
.text:0000000000006B40                 push    rbx
.text:0000000000006B41                 mov     rbx, rdi
.text:0000000000006B44                 mov     rdi, [rdi]      ; ptr
.text:0000000000006B47                 call    _free
.text:0000000000006B4C                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000006B50                 call    _free
.text:0000000000006B55                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000006B59                 call    _free
.text:0000000000006B5E                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000006B62                 call    _free
.text:0000000000006B67                 mov     rdi, rbx        ; ptr
.text:0000000000006B6A                 pop     rbx
.text:0000000000006B6B                 jmp     _free
.text:0000000000006B6B ; } // starts at 6B40
.text:0000000000006B6B isl_union_flow_free_0 endp
.text:0000000000006B6B
.text:0000000000006B70
.text:0000000000006B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B70
.text:0000000000006B70
.text:0000000000006B70 free_token      proc near               ; CODE XREF: free_tree+8↓p
.text:0000000000006B70                                         ; free_dfa_content+32↓p
.text:0000000000006B70 ; __unwind {
.text:0000000000006B70                 mov     eax, [rdi+8]
.text:0000000000006B73                 and     eax, 400FFh
.text:0000000000006B78                 cmp     eax, 6
.text:0000000000006B7B                 jz      short loc_6B90
.text:0000000000006B7D                 cmp     eax, 3
.text:0000000000006B80                 jz      short loc_6B88
.text:0000000000006B82                 rep retn
.text:0000000000006B82 ; ---------------------------------------------------------------------------
.text:0000000000006B84                 align 8
.text:0000000000006B88
.text:0000000000006B88 loc_6B88:                               ; CODE XREF: free_token+10↑j
.text:0000000000006B88                 mov     rdi, [rdi]      ; ptr
.text:0000000000006B8B                 jmp     _free
.text:0000000000006B90 ; ---------------------------------------------------------------------------
.text:0000000000006B90
.text:0000000000006B90 loc_6B90:                               ; CODE XREF: free_token+B↑j
.text:0000000000006B90                 mov     rdi, [rdi]      ; ptr
.text:0000000000006B93                 jmp     short isl_union_flow_free_0
.text:0000000000006B93 ; } // starts at 6B70
.text:0000000000006B93 free_token      endp
.text:0000000000006B93
.text:0000000000006B93 ; ---------------------------------------------------------------------------
.text:0000000000006B95                 align 20h
.text:0000000000006BA0
.text:0000000000006BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BA0
.text:0000000000006BA0
.text:0000000000006BA0 free_tree       proc near               ; DATA XREF: parse_expression+E1↓o
.text:0000000000006BA0                                         ; parse_expression+38C↓o ...
.text:0000000000006BA0 ; __unwind {
.text:0000000000006BA0                 lea     rdi, [rsi+28h]
.text:0000000000006BA4                 sub     rsp, 8
.text:0000000000006BA8                 call    free_token
.text:0000000000006BAD                 xor     eax, eax
.text:0000000000006BAF                 add     rsp, 8
.text:0000000000006BB3                 retn
.text:0000000000006BB3 ; } // starts at 6BA0
.text:0000000000006BB3 free_tree       endp
.text:0000000000006BB3
.text:0000000000006BB3 ; ---------------------------------------------------------------------------
.text:0000000000006BB4                 align 20h
.text:0000000000006BC0
.text:0000000000006BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BC0
.text:0000000000006BC0
.text:0000000000006BC0 re_dfa_add_node proc near               ; CODE XREF: duplicate_node+26↓p
.text:0000000000006BC0                                         ; calc_first+1E↓p
.text:0000000000006BC0
.text:0000000000006BC0 ptr             = qword ptr -48h
.text:0000000000006BC0 var_40          = qword ptr -40h
.text:0000000000006BC0
.text:0000000000006BC0 ; __unwind {
.text:0000000000006BC0                 push    r15
.text:0000000000006BC2                 push    r14
.text:0000000000006BC4                 mov     r14, rsi
.text:0000000000006BC7                 push    r13
.text:0000000000006BC9                 push    r12
.text:0000000000006BCB                 push    rbp
.text:0000000000006BCC                 push    rbx
.text:0000000000006BCD                 mov     rbx, rdi
.text:0000000000006BD0                 sub     rsp, 18h
.text:0000000000006BD4                 mov     rsi, [rdi+10h]
.text:0000000000006BD8                 mov     rbp, [rdi+8]
.text:0000000000006BDC                 cmp     rsi, rbp
.text:0000000000006BDF                 jnb     loc_6C90
.text:0000000000006BE5                 mov     r12, [rdi+18h]
.text:0000000000006BE9                 mov     rbp, [rdi+28h]
.text:0000000000006BED
.text:0000000000006BED loc_6BED:                               ; CODE XREF: re_dfa_add_node+187↓j
.text:0000000000006BED                 mov     rax, rsi
.text:0000000000006BF0                 mov     ecx, edx
.text:0000000000006BF2                 shl     rax, 4
.text:0000000000006BF6                 add     rax, [rbx]
.text:0000000000006BF9                 and     ecx, 0FFFC00FFh
.text:0000000000006BFF                 mov     [rax+8], rdx
.text:0000000000006C03                 mov     [rax+8], ecx
.text:0000000000006C06                 xor     ecx, ecx
.text:0000000000006C08                 cmp     dl, 6
.text:0000000000006C0B                 mov     [rax], r14
.text:0000000000006C0E                 setz    cl
.text:0000000000006C11                 cmp     dl, 5
.text:0000000000006C14                 jnz     short loc_6C22
.text:0000000000006C16                 xor     ecx, ecx
.text:0000000000006C18                 cmp     dword ptr [rbx+0B4h], 1
.text:0000000000006C1F                 setnle  cl
.text:0000000000006C22
.text:0000000000006C22 loc_6C22:                               ; CODE XREF: re_dfa_add_node+54↑j
.text:0000000000006C22                 movzx   edx, byte ptr [rax+0Ah]
.text:0000000000006C26                 shl     ecx, 4
.text:0000000000006C29                 pxor    xmm0, xmm0
.text:0000000000006C2D                 and     edx, 0FFFFFFEFh
.text:0000000000006C30                 or      edx, ecx
.text:0000000000006C32                 mov     [rax+0Ah], dl
.text:0000000000006C35                 mov     qword ptr [r12+rsi*8], 0FFFFFFFFFFFFFFFFh
.text:0000000000006C3D                 mov     rax, [rbx+10h]
.text:0000000000006C41                 lea     rax, [rax+rax*2]
.text:0000000000006C45                 lea     rax, [rbp+rax*8+0]
.text:0000000000006C4A                 movups  xmmword ptr [rax], xmm0
.text:0000000000006C4D                 mov     qword ptr [rax+10h], 0
.text:0000000000006C55                 mov     rax, [rbx+10h]
.text:0000000000006C59                 lea     rdx, [rax+rax*2]
.text:0000000000006C5D                 mov     rax, [rbx+30h]
.text:0000000000006C61                 lea     rax, [rax+rdx*8]
.text:0000000000006C65                 movups  xmmword ptr [rax], xmm0
.text:0000000000006C68                 mov     qword ptr [rax+10h], 0
.text:0000000000006C70                 mov     rax, [rbx+10h]
.text:0000000000006C74                 lea     rdx, [rax+1]
.text:0000000000006C78                 mov     [rbx+10h], rdx
.text:0000000000006C7C
.text:0000000000006C7C loc_6C7C:                               ; CODE XREF: re_dfa_add_node+1C9↓j
.text:0000000000006C7C                 add     rsp, 18h
.text:0000000000006C80                 pop     rbx
.text:0000000000006C81                 pop     rbp
.text:0000000000006C82                 pop     r12
.text:0000000000006C84                 pop     r13
.text:0000000000006C86                 pop     r14
.text:0000000000006C88                 pop     r15
.text:0000000000006C8A                 retn
.text:0000000000006C8A ; ---------------------------------------------------------------------------
.text:0000000000006C8B                 align 10h
.text:0000000000006C90
.text:0000000000006C90 loc_6C90:                               ; CODE XREF: re_dfa_add_node+1F↑j
.text:0000000000006C90                 lea     r13, [rbp+rbp+0]
.text:0000000000006C95                 mov     rax, 0AAAAAAAAAAAAAAAh
.text:0000000000006C9F                 cmp     r13, rax
.text:0000000000006CA2                 ja      loc_6D82
.text:0000000000006CA8                 mov     rdi, [rdi]      ; ptr
.text:0000000000006CAB                 mov     rsi, rbp
.text:0000000000006CAE                 mov     [rsp+48h+var_40], rdx
.text:0000000000006CB3                 shl     rsi, 5          ; size
.text:0000000000006CB7                 call    _realloc
.text:0000000000006CBC                 test    rax, rax
.text:0000000000006CBF                 jz      loc_6D82
.text:0000000000006CC5                 mov     r15, rbp
.text:0000000000006CC8                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000006CCC                 mov     [rbx], rax
.text:0000000000006CCF                 shl     r15, 4
.text:0000000000006CD3                 mov     rsi, r15        ; size
.text:0000000000006CD6                 call    _realloc
.text:0000000000006CDB                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000006CDF                 mov     rsi, r15        ; size
.text:0000000000006CE2                 lea     r15, [r13+rbp*4+0]
.text:0000000000006CE7                 mov     r12, rax
.text:0000000000006CEA                 shl     r15, 3
.text:0000000000006CEE                 call    _realloc
.text:0000000000006CF3                 mov     rdi, [rbx+28h]  ; ptr
.text:0000000000006CF7                 mov     rsi, r15        ; size
.text:0000000000006CFA                 mov     [rsp+48h+ptr], rax
.text:0000000000006CFE                 call    _realloc
.text:0000000000006D03                 mov     rdi, [rbx+30h]  ; ptr
.text:0000000000006D07                 mov     rsi, r15        ; size
.text:0000000000006D0A                 mov     rbp, rax
.text:0000000000006D0D                 call    _realloc
.text:0000000000006D12                 test    r12, r12
.text:0000000000006D15                 mov     rcx, [rsp+48h+ptr]
.text:0000000000006D19                 jz      short loc_6D50
.text:0000000000006D1B                 test    rcx, rcx
.text:0000000000006D1E                 jz      short loc_6D50
.text:0000000000006D20                 test    rbp, rbp
.text:0000000000006D23                 jz      short loc_6D50
.text:0000000000006D25                 test    rax, rax
.text:0000000000006D28                 mov     rdx, [rsp+48h+var_40]
.text:0000000000006D2D                 jz      short loc_6D50
.text:0000000000006D2F                 mov     [rbx+18h], r12
.text:0000000000006D33                 mov     [rbx+20h], rcx
.text:0000000000006D37                 mov     [rbx+28h], rbp
.text:0000000000006D3B                 mov     [rbx+30h], rax
.text:0000000000006D3F                 mov     [rbx+8], r13
.text:0000000000006D43                 mov     rsi, [rbx+10h]
.text:0000000000006D47                 jmp     loc_6BED
.text:0000000000006D47 ; ---------------------------------------------------------------------------
.text:0000000000006D4C                 align 10h
.text:0000000000006D50
.text:0000000000006D50 loc_6D50:                               ; CODE XREF: re_dfa_add_node+159↑j
.text:0000000000006D50                                         ; re_dfa_add_node+15E↑j ...
.text:0000000000006D50                 mov     rdi, r12        ; ptr
.text:0000000000006D53                 mov     [rsp+48h+var_40], rax
.text:0000000000006D58                 mov     [rsp+48h+ptr], rcx
.text:0000000000006D5C                 call    _free
.text:0000000000006D61                 mov     rcx, [rsp+48h+ptr]
.text:0000000000006D65                 mov     rdi, rcx        ; ptr
.text:0000000000006D68                 call    _free
.text:0000000000006D6D                 mov     rdi, rbp        ; ptr
.text:0000000000006D70                 call    _free
.text:0000000000006D75                 mov     rax, [rsp+48h+var_40]
.text:0000000000006D7A                 mov     rdi, rax        ; ptr
.text:0000000000006D7D                 call    _free
.text:0000000000006D82
.text:0000000000006D82 loc_6D82:                               ; CODE XREF: re_dfa_add_node+E2↑j
.text:0000000000006D82                                         ; re_dfa_add_node+FF↑j
.text:0000000000006D82                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D89                 jmp     loc_6C7C
.text:0000000000006D89 ; } // starts at 6BC0
.text:0000000000006D89 re_dfa_add_node endp
.text:0000000000006D89
.text:0000000000006D89 ; ---------------------------------------------------------------------------
.text:0000000000006D8E                 align 10h
.text:0000000000006D90
.text:0000000000006D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D90
.text:0000000000006D90
.text:0000000000006D90 duplicate_node  proc near               ; CODE XREF: duplicate_node_closure+102↓p
.text:0000000000006D90                                         ; duplicate_node_closure+148↓p ...
.text:0000000000006D90 ; __unwind {
.text:0000000000006D90                 push    r13
.text:0000000000006D92                 push    r12
.text:0000000000006D94                 mov     r13, rsi
.text:0000000000006D97                 push    rbp
.text:0000000000006D98                 push    rbx
.text:0000000000006D99                 shl     r13, 4
.text:0000000000006D9D                 mov     rbp, rsi
.text:0000000000006DA0                 mov     r12d, edx
.text:0000000000006DA3                 mov     rbx, rdi
.text:0000000000006DA6                 sub     rsp, 8
.text:0000000000006DAA                 mov     rax, [rdi]
.text:0000000000006DAD                 mov     rsi, [rax+r13]
.text:0000000000006DB1                 mov     rdx, [rax+r13+8]
.text:0000000000006DB6                 call    re_dfa_add_node
.text:0000000000006DBB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006DBF                 jz      short loc_6E24
.text:0000000000006DC1                 mov     edi, r12d
.text:0000000000006DC4                 mov     r8, [rbx]
.text:0000000000006DC7                 mov     rsi, rax
.text:0000000000006DCA                 and     di, 3FFh
.text:0000000000006DCF                 shl     rsi, 4
.text:0000000000006DD3                 mov     ecx, edi
.text:0000000000006DD5                 and     ecx, 3FFh
.text:0000000000006DDB                 add     rsi, r8
.text:0000000000006DDE                 shl     ecx, 8
.text:0000000000006DE1                 mov     edx, ecx
.text:0000000000006DE3                 mov     ecx, [rsi+8]
.text:0000000000006DE6                 and     ecx, 0FFFC00FFh
.text:0000000000006DEC                 or      ecx, edx
.text:0000000000006DEE                 mov     [rsi+8], ecx
.text:0000000000006DF1                 mov     edx, [r8+r13+8]
.text:0000000000006DF6                 and     ecx, 0FFFC00FFh
.text:0000000000006DFC                 shr     edx, 8
.text:0000000000006DFF                 or      edx, edi
.text:0000000000006E01                 and     edx, 3FFh
.text:0000000000006E07                 shl     edx, 8
.text:0000000000006E0A                 or      edx, ecx
.text:0000000000006E0C                 mov     ecx, edx
.text:0000000000006E0E                 mov     [rsi+8], edx
.text:0000000000006E11                 shr     ecx, 10h
.text:0000000000006E14                 mov     edx, ecx
.text:0000000000006E16                 or      edx, 4
.text:0000000000006E19                 mov     [rsi+0Ah], dl
.text:0000000000006E1C                 mov     rdx, [rbx+20h]
.text:0000000000006E20                 mov     [rdx+rax*8], rbp
.text:0000000000006E24
.text:0000000000006E24 loc_6E24:                               ; CODE XREF: duplicate_node+2F↑j
.text:0000000000006E24                 add     rsp, 8
.text:0000000000006E28                 pop     rbx
.text:0000000000006E29                 pop     rbp
.text:0000000000006E2A                 pop     r12
.text:0000000000006E2C                 pop     r13
.text:0000000000006E2E                 retn
.text:0000000000006E2E ; } // starts at 6D90
.text:0000000000006E2E duplicate_node  endp
.text:0000000000006E2E
.text:0000000000006E2E ; ---------------------------------------------------------------------------
.text:0000000000006E2F                 align 10h
.text:0000000000006E30
.text:0000000000006E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E30
.text:0000000000006E30
.text:0000000000006E30 duplicate_node_closure proc near        ; CODE XREF: duplicate_node_closure+17A↓p
.text:0000000000006E30                                         ; calc_eclosure_iter+26A↓p
.text:0000000000006E30
.text:0000000000006E30 var_48          = qword ptr -48h
.text:0000000000006E30 var_40          = qword ptr -40h
.text:0000000000006E30
.text:0000000000006E30 ; __unwind {
.text:0000000000006E30                 push    r15
.text:0000000000006E32                 push    r14
.text:0000000000006E34                 mov     r9, rsi
.text:0000000000006E37                 push    r13
.text:0000000000006E39                 push    r12
.text:0000000000006E3B                 mov     r14, rdi
.text:0000000000006E3E                 push    rbp
.text:0000000000006E3F                 push    rbx
.text:0000000000006E40                 mov     r13, rdx
.text:0000000000006E43                 mov     ebp, r8d
.text:0000000000006E46                 sub     rsp, 18h
.text:0000000000006E4A                 mov     [rsp+48h+var_40], rcx
.text:0000000000006E4F
.text:0000000000006E4F loc_6E4F:                               ; CODE XREF: duplicate_node_closure+125↓j
.text:0000000000006E4F                                         ; duplicate_node_closure+1E1↓j
.text:0000000000006E4F                 mov     r8, [r14]
.text:0000000000006E52                 mov     rax, r9
.text:0000000000006E55                 mov     rdi, [r14+28h]
.text:0000000000006E59                 shl     rax, 4
.text:0000000000006E5D                 mov     r12, r13
.text:0000000000006E60                 add     rax, r8
.text:0000000000006E63                 cmp     byte ptr [rax+8], 4
.text:0000000000006E67                 jz      loc_7020
.text:0000000000006E6D                 lea     r12, [r9+r9*2]
.text:0000000000006E71                 shl     r12, 3
.text:0000000000006E75                 lea     rsi, [rdi+r12]
.text:0000000000006E79                 mov     rcx, [rsi+8]
.text:0000000000006E7D                 test    rcx, rcx
.text:0000000000006E80                 jz      loc_7079
.text:0000000000006E86                 lea     rbx, [r13+r13*2+0]
.text:0000000000006E8B                 mov     rsi, [rsi+10h]
.text:0000000000006E8F                 shl     rbx, 3
.text:0000000000006E93                 add     rdi, rbx
.text:0000000000006E96                 cmp     rcx, 1
.text:0000000000006E9A                 mov     r15, [rsi]
.text:0000000000006E9D                 mov     qword ptr [rdi+8], 0
.text:0000000000006EA5                 jz      loc_6FC0
.text:0000000000006EAB                 mov     rdx, [r14+10h]
.text:0000000000006EAF                 lea     rsi, [rdx-1]
.text:0000000000006EB3                 mov     rax, rsi
.text:0000000000006EB6                 shl     rax, 4
.text:0000000000006EBA                 add     rax, r8
.text:0000000000006EBD                 test    byte ptr [rax+0Ah], 4
.text:0000000000006EC1                 jz      loc_6F70
.text:0000000000006EC7                 test    rsi, rsi
.text:0000000000006ECA                 jle     loc_6F70
.text:0000000000006ED0                 shl     rdx, 4
.text:0000000000006ED4                 sub     r8, rax
.text:0000000000006ED7                 mov     rcx, [r14+20h]
.text:0000000000006EDB                 lea     r8, [r8+rdx-20h]
.text:0000000000006EE0                 jmp     short loc_6EFA
.text:0000000000006EE0 ; ---------------------------------------------------------------------------
.text:0000000000006EE2                 align 8
.text:0000000000006EE8
.text:0000000000006EE8 loc_6EE8:                               ; CODE XREF: duplicate_node_closure+CE↓j
.text:0000000000006EE8                                         ; duplicate_node_closure+DE↓j
.text:0000000000006EE8                 add     rax, r8
.text:0000000000006EEB                 sub     rsi, 1
.text:0000000000006EEF                 test    byte ptr [rax+0Ah], 4
.text:0000000000006EF3                 jz      short loc_6F70
.text:0000000000006EF5                 test    rsi, rsi
.text:0000000000006EF8                 jle     short loc_6F70
.text:0000000000006EFA
.text:0000000000006EFA loc_6EFA:                               ; CODE XREF: duplicate_node_closure+B0↑j
.text:0000000000006EFA                 cmp     [rcx+rsi*8], r15
.text:0000000000006EFE                 jnz     short loc_6EE8
.text:0000000000006F00                 mov     edx, [rax+8]
.text:0000000000006F03                 shr     edx, 8
.text:0000000000006F06                 and     edx, 3FFh
.text:0000000000006F0C                 cmp     ebp, edx
.text:0000000000006F0E                 jnz     short loc_6EE8
.text:0000000000006F10                 call    re_node_set_insert
.text:0000000000006F15                 test    al, al
.text:0000000000006F17                 jz      short loc_6F5B
.text:0000000000006F19
.text:0000000000006F19 loc_6F19:                               ; CODE XREF: duplicate_node_closure+181↓j
.text:0000000000006F19                 mov     rax, [r14+28h]
.text:0000000000006F1D                 mov     edx, ebp
.text:0000000000006F1F                 mov     rdi, r14
.text:0000000000006F22                 mov     rax, [rax+r12+10h]
.text:0000000000006F27                 mov     r9, [rax+8]
.text:0000000000006F2B                 mov     rsi, r9
.text:0000000000006F2E                 mov     [rsp+48h+var_48], r9
.text:0000000000006F32                 call    duplicate_node
.text:0000000000006F37                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F3B                 mov     r13, rax
.text:0000000000006F3E                 jz      short loc_6F5B
.text:0000000000006F40
.text:0000000000006F40 loc_6F40:                               ; CODE XREF: duplicate_node_closure+244↓j
.text:0000000000006F40                 add     rbx, [r14+28h]
.text:0000000000006F44                 mov     rsi, r13
.text:0000000000006F47                 mov     rdi, rbx
.text:0000000000006F4A                 call    re_node_set_insert
.text:0000000000006F4F                 test    al, al
.text:0000000000006F51                 mov     r9, [rsp+48h+var_48]
.text:0000000000006F55                 jnz     loc_6E4F
.text:0000000000006F5B
.text:0000000000006F5B loc_6F5B:                               ; CODE XREF: duplicate_node_closure+E7↑j
.text:0000000000006F5B                                         ; duplicate_node_closure+10E↑j ...
.text:0000000000006F5B                 mov     eax, 0Ch
.text:0000000000006F60
.text:0000000000006F60 loc_6F60:                               ; CODE XREF: duplicate_node_closure+187↓j
.text:0000000000006F60                                         ; duplicate_node_closure+257↓j ...
.text:0000000000006F60                 add     rsp, 18h
.text:0000000000006F64                 pop     rbx
.text:0000000000006F65                 pop     rbp
.text:0000000000006F66                 pop     r12
.text:0000000000006F68                 pop     r13
.text:0000000000006F6A                 pop     r14
.text:0000000000006F6C                 pop     r15
.text:0000000000006F6E                 retn
.text:0000000000006F6E ; ---------------------------------------------------------------------------
.text:0000000000006F6F                 align 10h
.text:0000000000006F70
.text:0000000000006F70 loc_6F70:                               ; CODE XREF: duplicate_node_closure+91↑j
.text:0000000000006F70                                         ; duplicate_node_closure+9A↑j ...
.text:0000000000006F70                 mov     edx, ebp
.text:0000000000006F72                 mov     rsi, r15
.text:0000000000006F75                 mov     rdi, r14
.text:0000000000006F78                 call    duplicate_node
.text:0000000000006F7D                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F81                 mov     r13, rax
.text:0000000000006F84                 jz      short loc_6F5B
.text:0000000000006F86                 mov     rdi, [r14+28h]
.text:0000000000006F8A                 mov     rsi, r13
.text:0000000000006F8D                 add     rdi, rbx
.text:0000000000006F90                 call    re_node_set_insert
.text:0000000000006F95                 test    al, al
.text:0000000000006F97                 jz      short loc_6F5B
.text:0000000000006F99                 mov     rcx, [rsp+48h+var_40]
.text:0000000000006F9E                 mov     r8d, ebp
.text:0000000000006FA1                 mov     rdx, r13
.text:0000000000006FA4                 mov     rsi, r15
.text:0000000000006FA7                 mov     rdi, r14
.text:0000000000006FAA                 call    duplicate_node_closure
.text:0000000000006FAF                 test    eax, eax
.text:0000000000006FB1                 jz      loc_6F19
.text:0000000000006FB7                 jmp     short loc_6F60
.text:0000000000006FB7 ; ---------------------------------------------------------------------------
.text:0000000000006FB9                 align 20h
.text:0000000000006FC0
.text:0000000000006FC0 loc_6FC0:                               ; CODE XREF: duplicate_node_closure+75↑j
.text:0000000000006FC0                 cmp     r9, [rsp+48h+var_40]
.text:0000000000006FC5                 jnz     short loc_6FD0
.text:0000000000006FC7                 cmp     r9, r13
.text:0000000000006FCA                 jnz     loc_708C
.text:0000000000006FD0
.text:0000000000006FD0 loc_6FD0:                               ; CODE XREF: duplicate_node_closure+195↑j
.text:0000000000006FD0                 mov     eax, [rax+8]
.text:0000000000006FD3                 mov     rsi, r15
.text:0000000000006FD6                 mov     rdi, r14
.text:0000000000006FD9                 shr     eax, 8
.text:0000000000006FDC                 and     eax, 3FFh
.text:0000000000006FE1                 or      ebp, eax
.text:0000000000006FE3                 mov     edx, ebp
.text:0000000000006FE5                 call    duplicate_node
.text:0000000000006FEA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006FEE                 mov     r13, rax
.text:0000000000006FF1                 jz      loc_6F5B
.text:0000000000006FF7                 add     rbx, [r14+28h]
.text:0000000000006FFB                 mov     rsi, rax
.text:0000000000006FFE                 mov     rdi, rbx
.text:0000000000007001                 call    re_node_set_insert
.text:0000000000007006                 test    al, al
.text:0000000000007008                 jz      loc_6F5B
.text:000000000000700E                 mov     r9, r15
.text:0000000000007011                 jmp     loc_6E4F
.text:0000000000007011 ; ---------------------------------------------------------------------------
.text:0000000000007016                 align 20h
.text:0000000000007020
.text:0000000000007020 loc_7020:                               ; CODE XREF: duplicate_node_closure+37↑j
.text:0000000000007020                 mov     rax, [r14+18h]
.text:0000000000007024                 lea     rbx, [r13+r13*2+0]
.text:0000000000007029                 lea     r15, ds:0[r9*8]
.text:0000000000007031                 mov     edx, ebp
.text:0000000000007033                 shl     rbx, 3
.text:0000000000007037                 mov     r9, [rax+r9*8]
.text:000000000000703B                 mov     qword ptr [rdi+rbx+8], 0
.text:0000000000007044                 mov     rdi, r14
.text:0000000000007047                 mov     rsi, r9
.text:000000000000704A                 mov     [rsp+48h+var_48], r9
.text:000000000000704E                 call    duplicate_node
.text:0000000000007053                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007057                 mov     r13, rax
.text:000000000000705A                 mov     r9, [rsp+48h+var_48]
.text:000000000000705E                 jz      loc_6F5B
.text:0000000000007064                 mov     rax, [r14+18h]
.text:0000000000007068                 mov     [rsp+48h+var_48], r9
.text:000000000000706C                 mov     rcx, [rax+r15]
.text:0000000000007070                 mov     [rax+r12*8], rcx
.text:0000000000007074                 jmp     loc_6F40
.text:0000000000007079 ; ---------------------------------------------------------------------------
.text:0000000000007079
.text:0000000000007079 loc_7079:                               ; CODE XREF: duplicate_node_closure+50↑j
.text:0000000000007079                 mov     rax, [r14+18h]
.text:000000000000707D                 mov     rcx, [rax+r9*8]
.text:0000000000007081                 mov     [rax+r13*8], rcx
.text:0000000000007085                 xor     eax, eax
.text:0000000000007087                 jmp     loc_6F60
.text:000000000000708C ; ---------------------------------------------------------------------------
.text:000000000000708C
.text:000000000000708C loc_708C:                               ; CODE XREF: duplicate_node_closure+19A↑j
.text:000000000000708C                 mov     rsi, r15
.text:000000000000708F                 call    re_node_set_insert
.text:0000000000007094                 mov     edx, eax
.text:0000000000007096                 xor     eax, eax
.text:0000000000007098                 test    dl, dl
.text:000000000000709A                 jnz     loc_6F60
.text:00000000000070A0                 jmp     loc_6F5B
.text:00000000000070A0 ; } // starts at 6E30
.text:00000000000070A0 duplicate_node_closure endp
.text:00000000000070A0
.text:00000000000070A0 ; ---------------------------------------------------------------------------
.text:00000000000070A5                 align 10h
.text:00000000000070B0
.text:00000000000070B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070B0
.text:00000000000070B0
.text:00000000000070B0 ; __int64 __fastcall free_state(void *ptr)
.text:00000000000070B0 free_state      proc near               ; CODE XREF: free_dfa_content+FC↓p
.text:00000000000070B0                                         ; re_acquire_state_context+211↓p ...
.text:00000000000070B0 ; __unwind {
.text:00000000000070B0                 push    rbx
.text:00000000000070B1                 mov     rbx, rdi
.text:00000000000070B4                 mov     rdi, [rdi+30h]  ; ptr
.text:00000000000070B8                 call    _free
.text:00000000000070BD                 mov     rdi, [rbx+48h]  ; ptr
.text:00000000000070C1                 call    _free
.text:00000000000070C6                 mov     rax, [rbx+50h]
.text:00000000000070CA                 lea     rdx, [rbx+8]
.text:00000000000070CE                 cmp     rax, rdx
.text:00000000000070D1                 jz      short loc_70E5
.text:00000000000070D3                 mov     rdi, [rax+10h]  ; ptr
.text:00000000000070D7                 call    _free
.text:00000000000070DC                 mov     rdi, [rbx+50h]  ; ptr
.text:00000000000070E0                 call    _free
.text:00000000000070E5
.text:00000000000070E5 loc_70E5:                               ; CODE XREF: free_state+21↑j
.text:00000000000070E5                 mov     rdi, [rbx+18h]  ; ptr
.text:00000000000070E9                 call    _free
.text:00000000000070EE                 mov     rdi, [rbx+60h]  ; ptr
.text:00000000000070F2                 call    _free
.text:00000000000070F7                 mov     rdi, [rbx+58h]  ; ptr
.text:00000000000070FB                 call    _free
.text:0000000000007100                 mov     rdi, rbx        ; ptr
.text:0000000000007103                 pop     rbx
.text:0000000000007104                 jmp     _free
.text:0000000000007104 ; } // starts at 70B0
.text:0000000000007104 free_state      endp
.text:0000000000007104
.text:0000000000007104 ; ---------------------------------------------------------------------------
.text:0000000000007109                 align 10h
.text:0000000000007110
.text:0000000000007110 ; =============== S U B R O U T I N E =======================================
.text:0000000000007110
.text:0000000000007110
.text:0000000000007110 re_string_destruct proc near            ; CODE XREF: re_search_internal+B74↓p
.text:0000000000007110                                         ; re_compile_internal+377↓p ...
.text:0000000000007110 ; __unwind {
.text:0000000000007110                 push    rbx
.text:0000000000007111                 mov     rbx, rdi
.text:0000000000007114                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000007118                 call    _free
.text:000000000000711D                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000007121                 call    _free
.text:0000000000007126                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000712D                 jnz     short loc_7138
.text:000000000000712F                 pop     rbx
.text:0000000000007130                 retn
.text:0000000000007130 ; ---------------------------------------------------------------------------
.text:0000000000007131                 align 8
.text:0000000000007138
.text:0000000000007138 loc_7138:                               ; CODE XREF: re_string_destruct+1D↑j
.text:0000000000007138                 mov     rdi, [rbx+8]    ; ptr
.text:000000000000713C                 pop     rbx
.text:000000000000713D                 jmp     _free
.text:000000000000713D ; } // starts at 7110
.text:000000000000713D re_string_destruct endp
.text:000000000000713D
.text:000000000000713D ; ---------------------------------------------------------------------------
.text:0000000000007142                 align 10h
.text:0000000000007150
.text:0000000000007150 ; =============== S U B R O U T I N E =======================================
.text:0000000000007150
.text:0000000000007150
.text:0000000000007150 ; __int64 __fastcall free_dfa_content(void *ptr)
.text:0000000000007150 free_dfa_content proc near              ; CODE XREF: re_compile_internal+37F↓p
.text:0000000000007150                                         ; regfree+C↓p
.text:0000000000007150 ; __unwind {
.text:0000000000007150                 push    r14
.text:0000000000007152                 push    r13
.text:0000000000007154                 push    r12
.text:0000000000007156                 mov     r12, rdi
.text:0000000000007159                 push    rbp
.text:000000000000715A                 push    rbx
.text:000000000000715B                 mov     rdi, [rdi]
.text:000000000000715E                 test    rdi, rdi
.text:0000000000007161                 jz      short loc_718E
.text:0000000000007163                 cmp     qword ptr [r12+10h], 0
.text:0000000000007169                 jz      short loc_718E
.text:000000000000716B                 xor     ebx, ebx
.text:000000000000716D                 jmp     short loc_7174
.text:000000000000716D ; ---------------------------------------------------------------------------
.text:000000000000716F                 align 10h
.text:0000000000007170
.text:0000000000007170 loc_7170:                               ; CODE XREF: free_dfa_content+3C↓j
.text:0000000000007170                 mov     rdi, [r12]
.text:0000000000007174
.text:0000000000007174 loc_7174:                               ; CODE XREF: free_dfa_content+1D↑j
.text:0000000000007174                 mov     rax, rbx
.text:0000000000007177                 add     rbx, 1
.text:000000000000717B                 shl     rax, 4
.text:000000000000717F                 add     rdi, rax
.text:0000000000007182                 call    free_token
.text:0000000000007187                 cmp     [r12+10h], rbx
.text:000000000000718C                 ja      short loc_7170
.text:000000000000718E
.text:000000000000718E loc_718E:                               ; CODE XREF: free_dfa_content+11↑j
.text:000000000000718E                                         ; free_dfa_content+19↑j
.text:000000000000718E                 mov     rdi, [r12+18h]  ; ptr
.text:0000000000007193                 call    _free
.text:0000000000007198                 cmp     qword ptr [r12+10h], 0
.text:000000000000719E                 jz      short loc_71F3
.text:00000000000071A0                 xor     ebx, ebx
.text:00000000000071A2                 xor     ebp, ebp
.text:00000000000071A4                 nop     dword ptr [rax+00h]
.text:00000000000071A8
.text:00000000000071A8 loc_71A8:                               ; CODE XREF: free_dfa_content+A1↓j
.text:00000000000071A8                 mov     rax, [r12+30h]
.text:00000000000071AD                 test    rax, rax
.text:00000000000071B0                 jz      short loc_71BC
.text:00000000000071B2                 mov     rdi, [rax+rbx+10h] ; ptr
.text:00000000000071B7                 call    _free
.text:00000000000071BC
.text:00000000000071BC loc_71BC:                               ; CODE XREF: free_dfa_content+60↑j
.text:00000000000071BC                 mov     rax, [r12+38h]
.text:00000000000071C1                 test    rax, rax
.text:00000000000071C4                 jz      short loc_71D0
.text:00000000000071C6                 mov     rdi, [rax+rbx+10h] ; ptr
.text:00000000000071CB                 call    _free
.text:00000000000071D0
.text:00000000000071D0 loc_71D0:                               ; CODE XREF: free_dfa_content+74↑j
.text:00000000000071D0                 mov     rax, [r12+28h]
.text:00000000000071D5                 test    rax, rax
.text:00000000000071D8                 jz      short loc_71E4
.text:00000000000071DA                 mov     rdi, [rax+rbx+10h] ; ptr
.text:00000000000071DF                 call    _free
.text:00000000000071E4
.text:00000000000071E4 loc_71E4:                               ; CODE XREF: free_dfa_content+88↑j
.text:00000000000071E4                 add     rbp, 1
.text:00000000000071E8                 add     rbx, 18h
.text:00000000000071EC                 cmp     [r12+10h], rbp
.text:00000000000071F1                 ja      short loc_71A8
.text:00000000000071F3
.text:00000000000071F3 loc_71F3:                               ; CODE XREF: free_dfa_content+4E↑j
.text:00000000000071F3                 mov     rdi, [r12+28h]  ; ptr
.text:00000000000071F8                 call    _free
.text:00000000000071FD                 mov     rdi, [r12+30h]  ; ptr
.text:0000000000007202                 call    _free
.text:0000000000007207                 mov     rdi, [r12+38h]  ; ptr
.text:000000000000720C                 call    _free
.text:0000000000007211                 mov     rdi, [r12]      ; ptr
.text:0000000000007215                 call    _free
.text:000000000000721A                 mov     rdi, [r12+40h]
.text:000000000000721F                 test    rdi, rdi
.text:0000000000007222                 jz      short loc_7277
.text:0000000000007224                 xor     r14d, r14d
.text:0000000000007227                 xor     r13d, r13d
.text:000000000000722A                 nop     word ptr [rax+rax+00h]
.text:0000000000007230
.text:0000000000007230 loc_7230:                               ; CODE XREF: free_dfa_content+125↓j
.text:0000000000007230                 lea     rbp, [rdi+r14]
.text:0000000000007234                 cmp     qword ptr [rbp+0], 0
.text:0000000000007239                 jle     short loc_7257
.text:000000000000723B                 xor     ebx, ebx
.text:000000000000723D                 nop     dword ptr [rax]
.text:0000000000007240
.text:0000000000007240 loc_7240:                               ; CODE XREF: free_dfa_content+105↓j
.text:0000000000007240                 mov     rax, [rbp+10h]
.text:0000000000007244                 mov     rdi, [rax+rbx*8] ; ptr
.text:0000000000007248                 add     rbx, 1
.text:000000000000724C                 call    free_state
.text:0000000000007251                 cmp     [rbp+0], rbx
.text:0000000000007255                 jg      short loc_7240
.text:0000000000007257
.text:0000000000007257 loc_7257:                               ; CODE XREF: free_dfa_content+E9↑j
.text:0000000000007257                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000725B                 add     r13, 1
.text:000000000000725F                 add     r14, 18h
.text:0000000000007263                 call    _free
.text:0000000000007268                 cmp     [r12+88h], r13
.text:0000000000007270                 mov     rdi, [r12+40h]  ; ptr
.text:0000000000007275                 jnb     short loc_7230
.text:0000000000007277
.text:0000000000007277 loc_7277:                               ; CODE XREF: free_dfa_content+D2↑j
.text:0000000000007277                 call    _free
.text:000000000000727C                 mov     rdi, [r12+78h]  ; ptr
.text:0000000000007281                 lea     rax, utf8_sb_map
.text:0000000000007288                 cmp     rdi, rax
.text:000000000000728B                 jz      short loc_7292
.text:000000000000728D                 call    _free
.text:0000000000007292
.text:0000000000007292 loc_7292:                               ; CODE XREF: free_dfa_content+13B↑j
.text:0000000000007292                 mov     rdi, [r12+0E0h] ; ptr
.text:000000000000729A                 call    _free
.text:000000000000729F                 pop     rbx
.text:00000000000072A0                 mov     rdi, r12        ; ptr
.text:00000000000072A3                 pop     rbp
.text:00000000000072A4                 pop     r12
.text:00000000000072A6                 pop     r13
.text:00000000000072A8                 pop     r14
.text:00000000000072AA                 jmp     _free
.text:00000000000072AA ; } // starts at 7150
.text:00000000000072AA free_dfa_content endp
.text:00000000000072AA
.text:00000000000072AA ; ---------------------------------------------------------------------------
.text:00000000000072AF                 align 10h
.text:00000000000072B0
.text:00000000000072B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072B0
.text:00000000000072B0
.text:00000000000072B0 match_ctx_clean proc near               ; CODE XREF: re_search_internal+F34↓p
.text:00000000000072B0                                         ; re_search_internal+1494↓p
.text:00000000000072B0 ; __unwind {
.text:00000000000072B0                 push    r14
.text:00000000000072B2                 push    r13
.text:00000000000072B4                 mov     r14, rdi
.text:00000000000072B7                 push    r12
.text:00000000000072B9                 push    rbp
.text:00000000000072BA                 push    rbx
.text:00000000000072BB                 cmp     qword ptr [rdi+0E8h], 0
.text:00000000000072C3                 jle     loc_7349
.text:00000000000072C9                 xor     r13d, r13d
.text:00000000000072CC                 nop     dword ptr [rax+00h]
.text:00000000000072D0
.text:00000000000072D0 loc_72D0:                               ; CODE XREF: match_ctx_clean+97↓j
.text:00000000000072D0                 mov     rax, [r14+0F8h]
.text:00000000000072D7                 mov     r12, [rax+r13*8]
.text:00000000000072DB                 cmp     qword ptr [r12+20h], 0
.text:00000000000072E1                 jle     short loc_730D
.text:00000000000072E3                 xor     ebx, ebx
.text:00000000000072E5                 nop     dword ptr [rax]
.text:00000000000072E8
.text:00000000000072E8 loc_72E8:                               ; CODE XREF: match_ctx_clean+5B↓j
.text:00000000000072E8                 mov     rax, [r12+28h]
.text:00000000000072ED                 mov     rbp, [rax+rbx*8]
.text:00000000000072F1                 add     rbx, 1
.text:00000000000072F5                 mov     rdi, [rbp+20h]  ; ptr
.text:00000000000072F9                 call    _free
.text:00000000000072FE                 mov     rdi, rbp        ; ptr
.text:0000000000007301                 call    _free
.text:0000000000007306                 cmp     [r12+20h], rbx
.text:000000000000730B                 jg      short loc_72E8
.text:000000000000730D
.text:000000000000730D loc_730D:                               ; CODE XREF: match_ctx_clean+31↑j
.text:000000000000730D                 mov     rdi, [r12+28h]  ; ptr
.text:0000000000007312                 call    _free
.text:0000000000007317                 mov     rax, [r12+10h]
.text:000000000000731C                 test    rax, rax
.text:000000000000731F                 jz      short loc_7334
.text:0000000000007321                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000007325
.text:0000000000007325 loc_7325:                               ; DATA XREF: .rodata:format↓o
.text:0000000000007325                 call    _free
.text:000000000000732A                 mov     rdi, [r12+10h]  ; ptr
.text:000000000000732F                 call    _free
.text:0000000000007334
.text:0000000000007334 loc_7334:                               ; CODE XREF: match_ctx_clean+6F↑j
.text:0000000000007334                 mov     rdi, r12        ; ptr
.text:0000000000007337                 add     r13, 1
.text:000000000000733B                 call    _free
.text:0000000000007340                 cmp     [r14+0E8h], r13
.text:0000000000007347                 jg      short loc_72D0
.text:0000000000007349
.text:0000000000007349 loc_7349:                               ; CODE XREF: match_ctx_clean+13↑j
.text:0000000000007349                 pop     rbx
.text:000000000000734A                 mov     qword ptr [r14+0E8h], 0
.text:0000000000007355                 mov     qword ptr [r14+0C8h], 0
.text:0000000000007360                 pop     rbp
.text:0000000000007361                 pop     r12
.text:0000000000007363                 pop     r13
.text:0000000000007365                 pop     r14
.text:0000000000007367                 retn
.text:0000000000007367 ; } // starts at 72B0
.text:0000000000007367 match_ctx_clean endp
.text:0000000000007367
.text:0000000000007367 ; ---------------------------------------------------------------------------
.text:0000000000007368                 align 10h
.text:0000000000007370
.text:0000000000007370 ; =============== S U B R O U T I N E =======================================
.text:0000000000007370
.text:0000000000007370
.text:0000000000007370 re_string_char_size_at_part_0 proc near ; CODE XREF: check_node_accept_bytes_isra_31+3A↓p
.text:0000000000007370                                         ; parse_bracket_element_constprop_37+3B↓p ...
.text:0000000000007370 ; __unwind {
.text:0000000000007370                 mov     rcx, [rdi+30h]
.text:0000000000007374                 lea     rax, [rsi+1]
.text:0000000000007378                 cmp     rax, rcx
.text:000000000000737B                 jge     short loc_73B8
.text:000000000000737D                 mov     rdx, [rdi+10h]
.text:0000000000007381                 lea     rdi, ds:0[rax*4]
.text:0000000000007389                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:000000000000738D                 jnz     short loc_73B8
.text:000000000000738F                 sub     rcx, rsi
.text:0000000000007392                 lea     rsi, [rdx+rdi-4]
.text:0000000000007397                 mov     edx, 2
.text:000000000000739C                 jmp     short loc_73AB
.text:000000000000739C ; ---------------------------------------------------------------------------
.text:000000000000739E                 align 20h
.text:00000000000073A0
.text:00000000000073A0 loc_73A0:                               ; CODE XREF: re_string_char_size_at_part_0+40↓j
.text:00000000000073A0                 add     rdx, 1
.text:00000000000073A4                 cmp     dword ptr [rsi+rdx*4-4], 0FFFFFFFFh
.text:00000000000073A9                 jnz     short locret_73BD
.text:00000000000073AB
.text:00000000000073AB loc_73AB:                               ; CODE XREF: re_string_char_size_at_part_0+2C↑j
.text:00000000000073AB                 cmp     rdx, rcx
.text:00000000000073AE                 mov     eax, edx
.text:00000000000073B0                 jnz     short loc_73A0
.text:00000000000073B2                 rep retn
.text:00000000000073B2 ; ---------------------------------------------------------------------------
.text:00000000000073B4                 align 8
.text:00000000000073B8
.text:00000000000073B8 loc_73B8:                               ; CODE XREF: re_string_char_size_at_part_0+B↑j
.text:00000000000073B8                                         ; re_string_char_size_at_part_0+1D↑j
.text:00000000000073B8                 mov     eax, 1
.text:00000000000073BD
.text:00000000000073BD locret_73BD:                            ; CODE XREF: re_string_char_size_at_part_0+39↑j
.text:00000000000073BD                 rep retn
.text:00000000000073BD ; } // starts at 7370
.text:00000000000073BD re_string_char_size_at_part_0 endp
.text:00000000000073BD
.text:00000000000073BD ; ---------------------------------------------------------------------------
.text:00000000000073BF                 align 20h
.text:00000000000073C0
.text:00000000000073C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000073C0
.text:00000000000073C0
.text:00000000000073C0 re_node_set_compare_part_2 proc near    ; CODE XREF: re_acquire_state_context+A3↓p
.text:00000000000073C0                                         ; re_acquire_state+80↓p
.text:00000000000073C0 ; __unwind {
.text:00000000000073C0                 mov     rdx, [rdi+8]
.text:00000000000073C4                 xor     eax, eax
.text:00000000000073C6                 cmp     rdx, [rsi+8]
.text:00000000000073CA                 jz      short loc_73D0
.text:00000000000073CC                 rep retn
.text:00000000000073CC ; ---------------------------------------------------------------------------
.text:00000000000073CE                 align 10h
.text:00000000000073D0
.text:00000000000073D0 loc_73D0:                               ; CODE XREF: re_node_set_compare_part_2+A↑j
.text:00000000000073D0                 lea     rax, [rdx-1]
.text:00000000000073D4                 lea     rdx, ds:0[rax*8]
.text:00000000000073DC                 jmp     short loc_73FD
.text:00000000000073DC ; ---------------------------------------------------------------------------
.text:00000000000073DE                 align 20h
.text:00000000000073E0
.text:00000000000073E0 loc_73E0:                               ; CODE XREF: re_node_set_compare_part_2+40↓j
.text:00000000000073E0                 mov     rcx, [rdi+10h]
.text:00000000000073E4                 mov     r8, [rcx+rdx]
.text:00000000000073E8                 mov     rcx, [rsi+10h]
.text:00000000000073EC                 mov     rcx, [rcx+rdx]
.text:00000000000073F0                 sub     rdx, 8
.text:00000000000073F4                 cmp     r8, rcx
.text:00000000000073F7                 jnz     short loc_7410
.text:00000000000073F9                 sub     rax, 1
.text:00000000000073FD
.text:00000000000073FD loc_73FD:                               ; CODE XREF: re_node_set_compare_part_2+1C↑j
.text:00000000000073FD                 test    rax, rax
.text:0000000000007400                 jns     short loc_73E0
.text:0000000000007402                 mov     eax, 1
.text:0000000000007407                 retn
.text:0000000000007407 ; ---------------------------------------------------------------------------
.text:0000000000007408                 align 10h
.text:0000000000007410
.text:0000000000007410 loc_7410:                               ; CODE XREF: re_node_set_compare_part_2+37↑j
.text:0000000000007410                 xor     eax, eax
.text:0000000000007412                 retn
.text:0000000000007412 ; } // starts at 73C0
.text:0000000000007412 re_node_set_compare_part_2 endp
.text:0000000000007412
.text:0000000000007412 ; ---------------------------------------------------------------------------
.text:0000000000007413                 align 20h
.text:0000000000007420
.text:0000000000007420 ; =============== S U B R O U T I N E =======================================
.text:0000000000007420
.text:0000000000007420
.text:0000000000007420 re_node_set_contains_isra_3 proc near   ; CODE XREF: check_arrival_expand_ecl_sub+2B↓p
.text:0000000000007420                                         ; expand_bkref_cache+173↓p ...
.text:0000000000007420 ; __unwind {
.text:0000000000007420                 xor     eax, eax
.text:0000000000007422                 test    rdi, rdi
.text:0000000000007425                 jle     short locret_7465
.text:0000000000007427                 mov     r8, [rsi]
.text:000000000000742A                 sub     rdi, 1
.text:000000000000742E                 xor     esi, esi
.text:0000000000007430
.text:0000000000007430 loc_7430:                               ; CODE XREF: re_node_set_contains_isra_3+67↓j
.text:0000000000007430                 cmp     rsi, rdi
.text:0000000000007433                 jnb     short loc_745D
.text:0000000000007435                 lea     rcx, [rsi+rdi]
.text:0000000000007439                 shr     rcx, 1
.text:000000000000743C                 cmp     rdx, [r8+rcx*8]
.text:0000000000007440                 jle     short loc_7458
.text:0000000000007442                 jmp     short loc_7470
.text:0000000000007442 ; ---------------------------------------------------------------------------
.text:0000000000007444                 align 8
.text:0000000000007448
.text:0000000000007448 loc_7448:                               ; CODE XREF: re_node_set_contains_isra_3+3B↓j
.text:0000000000007448                 lea     rax, [rsi+rcx]
.text:000000000000744C                 shr     rax, 1
.text:000000000000744F                 cmp     [r8+rax*8], rdx
.text:0000000000007453                 jl      short loc_7480
.text:0000000000007455                 mov     rcx, rax
.text:0000000000007458
.text:0000000000007458 loc_7458:                               ; CODE XREF: re_node_set_contains_isra_3+20↑j
.text:0000000000007458                 cmp     rsi, rcx
.text:000000000000745B                 jb      short loc_7448
.text:000000000000745D
.text:000000000000745D loc_745D:                               ; CODE XREF: re_node_set_contains_isra_3+13↑j
.text:000000000000745D                 xor     eax, eax
.text:000000000000745F                 cmp     rdx, [r8+rsi*8]
.text:0000000000007463                 jz      short loc_7490
.text:0000000000007465
.text:0000000000007465 locret_7465:                            ; CODE XREF: re_node_set_contains_isra_3+5↑j
.text:0000000000007465                 rep retn
.text:0000000000007465 ; ---------------------------------------------------------------------------
.text:0000000000007467                 align 10h
.text:0000000000007470
.text:0000000000007470 loc_7470:                               ; CODE XREF: re_node_set_contains_isra_3+22↑j
.text:0000000000007470                 mov     rax, rcx
.text:0000000000007473                 mov     rcx, rdi
.text:0000000000007476                 db      2Eh
.text:0000000000007476                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007480
.text:0000000000007480 loc_7480:                               ; CODE XREF: re_node_set_contains_isra_3+33↑j
.text:0000000000007480                 lea     rsi, [rax+1]
.text:0000000000007484                 mov     rdi, rcx
.text:0000000000007487                 jmp     short loc_7430
.text:0000000000007487 ; ---------------------------------------------------------------------------
.text:0000000000007489                 align 10h
.text:0000000000007490
.text:0000000000007490 loc_7490:                               ; CODE XREF: re_node_set_contains_isra_3+43↑j
.text:0000000000007490                 lea     rax, [rsi+1]
.text:0000000000007494                 retn
.text:0000000000007494 ; } // starts at 7420
.text:0000000000007494 re_node_set_contains_isra_3 endp
.text:0000000000007494
.text:0000000000007494 ; ---------------------------------------------------------------------------
.text:0000000000007495                 align 20h
.text:00000000000074A0
.text:00000000000074A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074A0
.text:00000000000074A0
.text:00000000000074A0 check_arrival_expand_ecl_sub proc near  ; CODE XREF: check_arrival_expand_ecl_sub+E0↓p
.text:00000000000074A0                                         ; check_arrival_expand_ecl+D8↓p
.text:00000000000074A0 ; __unwind {
.text:00000000000074A0                 push    r15
.text:00000000000074A2                 push    r14
.text:00000000000074A4                 lea     r14, [rsi+10h]
.text:00000000000074A8                 push    r13
.text:00000000000074AA                 push    r12
.text:00000000000074AC                 mov     r15, rcx
.text:00000000000074AF                 push    rbp
.text:00000000000074B0                 push    rbx
.text:00000000000074B1                 mov     r12, rdi
.text:00000000000074B4                 mov     rbp, rsi
.text:00000000000074B7                 mov     rbx, rdx
.text:00000000000074BA                 mov     r13d, r8d
.text:00000000000074BD                 sub     rsp, 8
.text:00000000000074C1
.text:00000000000074C1 loc_74C1:                               ; CODE XREF: check_arrival_expand_ecl_sub+83↓j
.text:00000000000074C1                 mov     rdi, [rbp+8]
.text:00000000000074C5                 mov     rdx, rbx
.text:00000000000074C8                 mov     rsi, r14
.text:00000000000074CB                 call    re_node_set_contains_isra_3
.text:00000000000074D0                 test    rax, rax
.text:00000000000074D3                 jnz     short loc_7540
.text:00000000000074D5                 mov     rax, rbx
.text:00000000000074D8                 shl     rax, 4
.text:00000000000074DC                 add     rax, [r12]
.text:00000000000074E0                 movzx   edx, byte ptr [rax+8]
.text:00000000000074E4                 cmp     edx, r13d
.text:00000000000074E7                 jnz     short loc_74EE
.text:00000000000074E9                 cmp     [rax], r15
.text:00000000000074EC                 jz      short loc_7528
.text:00000000000074EE
.text:00000000000074EE loc_74EE:                               ; CODE XREF: check_arrival_expand_ecl_sub+47↑j
.text:00000000000074EE                 mov     rsi, rbx
.text:00000000000074F1                 mov     rdi, rbp
.text:00000000000074F4                 call    re_node_set_insert
.text:00000000000074F9                 test    al, al
.text:00000000000074FB                 jz      short loc_7558
.text:00000000000074FD                 lea     rbx, [rbx+rbx*2]
.text:0000000000007501                 mov     rdx, [r12+28h]
.text:0000000000007506                 shl     rbx, 3
.text:000000000000750A                 add     rdx, rbx
.text:000000000000750D                 mov     rax, [rdx+8]
.text:0000000000007511                 test    rax, rax
.text:0000000000007514                 jz      short loc_7540
.text:0000000000007516                 cmp     rax, 2
.text:000000000000751A                 mov     rdx, [rdx+10h]
.text:000000000000751E                 jz      short loc_7570
.text:0000000000007520
.text:0000000000007520 loc_7520:                               ; CODE XREF: check_arrival_expand_ecl_sub+F3↓j
.text:0000000000007520                 mov     rbx, [rdx]
.text:0000000000007523                 jmp     short loc_74C1
.text:0000000000007523 ; ---------------------------------------------------------------------------
.text:0000000000007525                 align 8
.text:0000000000007528
.text:0000000000007528 loc_7528:                               ; CODE XREF: check_arrival_expand_ecl_sub+4C↑j
.text:0000000000007528                 cmp     r13d, 9
.text:000000000000752C                 jnz     short loc_7540
.text:000000000000752E                 mov     rsi, rbx
.text:0000000000007531                 mov     rdi, rbp
.text:0000000000007534                 call    re_node_set_insert
.text:0000000000007539                 test    al, al
.text:000000000000753B                 jz      short loc_7558
.text:000000000000753D                 nop     dword ptr [rax]
.text:0000000000007540
.text:0000000000007540 loc_7540:                               ; CODE XREF: check_arrival_expand_ecl_sub+33↑j
.text:0000000000007540                                         ; check_arrival_expand_ecl_sub+74↑j ...
.text:0000000000007540                 xor     eax, eax
.text:0000000000007542
.text:0000000000007542 loc_7542:                               ; CODE XREF: check_arrival_expand_ecl_sub+E7↓j
.text:0000000000007542                 add     rsp, 8
.text:0000000000007546                 pop     rbx
.text:0000000000007547                 pop     rbp
.text:0000000000007548                 pop     r12
.text:000000000000754A                 pop     r13
.text:000000000000754C                 pop     r14
.text:000000000000754E                 pop     r15
.text:0000000000007550                 retn
.text:0000000000007550 ; ---------------------------------------------------------------------------
.text:0000000000007551                 align 8
.text:0000000000007558
.text:0000000000007558 loc_7558:                               ; CODE XREF: check_arrival_expand_ecl_sub+5B↑j
.text:0000000000007558                                         ; check_arrival_expand_ecl_sub+9B↑j
.text:0000000000007558                 add     rsp, 8
.text:000000000000755C                 mov     eax, 0Ch
.text:0000000000007561                 pop     rbx
.text:0000000000007562                 pop     rbp
.text:0000000000007563                 pop     r12
.text:0000000000007565                 pop     r13
.text:0000000000007567                 pop     r14
.text:0000000000007569                 pop     r15
.text:000000000000756B                 retn
.text:000000000000756B ; ---------------------------------------------------------------------------
.text:000000000000756C                 align 10h
.text:0000000000007570
.text:0000000000007570 loc_7570:                               ; CODE XREF: check_arrival_expand_ecl_sub+7E↑j
.text:0000000000007570                 mov     rdx, [rdx+8]
.text:0000000000007574                 mov     r8d, r13d
.text:0000000000007577                 mov     rcx, r15
.text:000000000000757A                 mov     rsi, rbp
.text:000000000000757D                 mov     rdi, r12
.text:0000000000007580                 call    check_arrival_expand_ecl_sub
.text:0000000000007585                 test    eax, eax
.text:0000000000007587                 jnz     short loc_7542
.text:0000000000007589                 mov     rax, [r12+28h]
.text:000000000000758E                 mov     rdx, [rax+rbx+10h]
.text:0000000000007593                 jmp     short loc_7520
.text:0000000000007593 ; } // starts at 74A0
.text:0000000000007593 check_arrival_expand_ecl_sub endp
.text:0000000000007593
.text:0000000000007593 ; ---------------------------------------------------------------------------
.text:0000000000007595                 align 20h
.text:00000000000075A0
.text:00000000000075A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000075A0
.text:00000000000075A0
.text:00000000000075A0 re_node_set_remove_at_isra_4_part_5 proc near
.text:00000000000075A0                                         ; CODE XREF: re_acquire_state_context+1D9↓p
.text:00000000000075A0                                         ; _sub_epsilon_src_nodes+1DD↓p ...
.text:00000000000075A0 ; __unwind {
.text:00000000000075A0                 mov     rax, [rdi]
.text:00000000000075A3                 cmp     rax, rdx
.text:00000000000075A6                 jle     short locret_75D2
.text:00000000000075A8                 sub     rax, 1
.text:00000000000075AC                 cmp     rdx, rax
.text:00000000000075AF                 mov     [rdi], rax
.text:00000000000075B2                 jge     short locret_75D2
.text:00000000000075B4                 mov     rax, [rsi]
.text:00000000000075B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000075C0
.text:00000000000075C0 loc_75C0:                               ; CODE XREF: re_node_set_remove_at_isra_4_part_5+30↓j
.text:00000000000075C0                 mov     rcx, [rax+rdx*8+8]
.text:00000000000075C5                 mov     [rax+rdx*8], rcx
.text:00000000000075C9                 add     rdx, 1
.text:00000000000075CD                 cmp     rdx, [rdi]
.text:00000000000075D0                 jl      short loc_75C0
.text:00000000000075D2
.text:00000000000075D2 locret_75D2:                            ; CODE XREF: re_node_set_remove_at_isra_4_part_5+6↑j
.text:00000000000075D2                                         ; re_node_set_remove_at_isra_4_part_5+12↑j
.text:00000000000075D2                 rep retn
.text:00000000000075D2 ; } // starts at 75A0
.text:00000000000075D2 re_node_set_remove_at_isra_4_part_5 endp
.text:00000000000075D2
.text:00000000000075D2 ; ---------------------------------------------------------------------------
.text:00000000000075D4                 align 20h
.text:00000000000075E0
.text:00000000000075E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000075E0
.text:00000000000075E0
.text:00000000000075E0 optimize_subexps proc near              ; DATA XREF: re_compile_internal+611↓o
.text:00000000000075E0 ; __unwind {
.text:00000000000075E0                 movzx   eax, byte ptr [rsi+30h]
.text:00000000000075E4                 cmp     al, 4
.text:00000000000075E6                 jz      short loc_7640
.text:00000000000075E8                 cmp     al, 11h
.text:00000000000075EA                 jz      short loc_75F0
.text:00000000000075EC
.text:00000000000075EC loc_75EC:                               ; CODE XREF: optimize_subexps+17↓j
.text:00000000000075EC                                         ; optimize_subexps+1D↓j ...
.text:00000000000075EC                 xor     eax, eax
.text:00000000000075EE                 retn
.text:00000000000075EE ; ---------------------------------------------------------------------------
.text:00000000000075EF                 align 10h
.text:00000000000075F0
.text:00000000000075F0 loc_75F0:                               ; CODE XREF: optimize_subexps+A↑j
.text:00000000000075F0                 mov     rax, [rsi+8]
.text:00000000000075F4                 test    rax, rax
.text:00000000000075F7                 jz      short loc_75EC
.text:00000000000075F9                 cmp     byte ptr [rax+30h], 11h
.text:00000000000075FD                 jnz     short loc_75EC
.text:00000000000075FF                 mov     rcx, [rax+28h]
.text:0000000000007603                 mov     rax, [rax+8]
.text:0000000000007607                 test    rax, rax
.text:000000000000760A                 mov     [rsi+8], rax
.text:000000000000760E                 jz      short loc_7613
.text:0000000000007610                 mov     [rax], rsi
.text:0000000000007613
.text:0000000000007613 loc_7613:                               ; CODE XREF: optimize_subexps+2E↑j
.text:0000000000007613                 mov     rax, [rdi+0E0h]
.text:000000000000761A                 mov     rdx, [rsi+28h]
.text:000000000000761E                 cmp     rcx, 3Fh ; '?'
.text:0000000000007622                 mov     rdx, [rax+rdx*8]
.text:0000000000007626                 mov     [rax+rcx*8], rdx
.text:000000000000762A                 jg      short loc_75EC
.text:000000000000762C                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000007633                 rol     rax, cl
.text:0000000000007636                 and     [rdi+0A0h], rax
.text:000000000000763D                 jmp     short loc_75EC
.text:000000000000763D ; ---------------------------------------------------------------------------
.text:000000000000763F                 align 20h
.text:0000000000007640
.text:0000000000007640 loc_7640:                               ; CODE XREF: optimize_subexps+6↑j
.text:0000000000007640                 mov     rax, [rdi+0E0h]
.text:0000000000007647                 test    rax, rax
.text:000000000000764A                 jz      short loc_75EC
.text:000000000000764C                 movsxd  rdx, dword ptr [rsi+28h]
.text:0000000000007650                 mov     rcx, [rax+rdx*8]
.text:0000000000007654                 mov     eax, 1
.text:0000000000007659                 shl     eax, cl
.text:000000000000765B                 mov     [rsi+28h], rcx
.text:000000000000765F                 cdqe
.text:0000000000007661                 or      [rdi+0A0h], rax
.text:0000000000007668                 xor     eax, eax
.text:000000000000766A                 retn
.text:000000000000766A ; } // starts at 75E0
.text:000000000000766A optimize_subexps endp
.text:000000000000766A
.text:000000000000766A ; ---------------------------------------------------------------------------
.text:000000000000766B                 align 10h
.text:0000000000007670
.text:0000000000007670 ; =============== S U B R O U T I N E =======================================
.text:0000000000007670
.text:0000000000007670
.text:0000000000007670 calc_next       proc near               ; DATA XREF: re_compile_internal+699↓o
.text:0000000000007670 ; __unwind {
.text:0000000000007670                 movzx   eax, byte ptr [rsi+30h]
.text:0000000000007674                 mov     rdx, [rsi+8]
.text:0000000000007678                 cmp     al, 0Bh
.text:000000000000767A                 jz      short loc_76C0
.text:000000000000767C                 cmp     al, 10h
.text:000000000000767E                 jz      short loc_76A8
.text:0000000000007680                 test    rdx, rdx
.text:0000000000007683                 jz      short loc_768D
.text:0000000000007685                 mov     rax, [rsi+20h]
.text:0000000000007689                 mov     [rdx+20h], rax
.text:000000000000768D
.text:000000000000768D loc_768D:                               ; CODE XREF: calc_next+13↑j
.text:000000000000768D                 mov     rax, [rsi+10h]
.text:0000000000007691                 test    rax, rax
.text:0000000000007694                 jz      short loc_769E
.text:0000000000007696                 mov     rdx, [rsi+20h]
.text:000000000000769A                 mov     [rax+20h], rdx
.text:000000000000769E
.text:000000000000769E loc_769E:                               ; CODE XREF: calc_next+24↑j
.text:000000000000769E                 xor     eax, eax
.text:00000000000076A0                 retn
.text:00000000000076A0 ; ---------------------------------------------------------------------------
.text:00000000000076A1                 align 8
.text:00000000000076A8
.text:00000000000076A8 loc_76A8:                               ; CODE XREF: calc_next+E↑j
.text:00000000000076A8                 mov     rax, [rsi+10h]
.text:00000000000076AC                 mov     rcx, [rax+18h]
.text:00000000000076B0                 mov     [rdx+20h], rcx
.text:00000000000076B4                 mov     rdx, [rsi+20h]
.text:00000000000076B8                 mov     [rax+20h], rdx
.text:00000000000076BC                 xor     eax, eax
.text:00000000000076BE                 retn
.text:00000000000076BE ; ---------------------------------------------------------------------------
.text:00000000000076BF                 align 20h
.text:00000000000076C0
.text:00000000000076C0 loc_76C0:                               ; CODE XREF: calc_next+A↑j
.text:00000000000076C0                 mov     [rdx+20h], rsi
.text:00000000000076C4                 xor     eax, eax
.text:00000000000076C6                 retn
.text:00000000000076C6 ; } // starts at 7670
.text:00000000000076C6 calc_next       endp
.text:00000000000076C6
.text:00000000000076C6 ; ---------------------------------------------------------------------------
.text:00000000000076C7                 align 10h
.text:00000000000076D0
.text:00000000000076D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076D0
.text:00000000000076D0
.text:00000000000076D0 check_dst_limits_isra_13 proc near      ; CODE XREF: sift_states_backward+18C↓p
.text:00000000000076D0                                         ; update_cur_sifted_state+6A3↓p
.text:00000000000076D0
.text:00000000000076D0 var_70          = qword ptr -70h
.text:00000000000076D0 var_68          = qword ptr -68h
.text:00000000000076D0 var_60          = qword ptr -60h
.text:00000000000076D0 var_58          = qword ptr -58h
.text:00000000000076D0 var_50          = qword ptr -50h
.text:00000000000076D0 var_48          = qword ptr -48h
.text:00000000000076D0 var_40          = qword ptr -40h
.text:00000000000076D0 arg_0           = qword ptr  8
.text:00000000000076D0
.text:00000000000076D0 ; __unwind {
.text:00000000000076D0                 push    r15
.text:00000000000076D2                 push    r14
.text:00000000000076D4                 push    r13
.text:00000000000076D6                 push    r12
.text:00000000000076D8                 push    rbp
.text:00000000000076D9                 push    rbx
.text:00000000000076DA                 xor     ebx, ebx
.text:00000000000076DC                 sub     rsp, 48h
.text:00000000000076E0                 mov     rax, [rdi+98h]
.text:00000000000076E7                 mov     r15, [rdi+0C8h]
.text:00000000000076EE                 mov     r12, [rsp+78h+arg_0]
.text:00000000000076F6                 mov     [rsp+78h+var_70], rax
.text:00000000000076FB                 mov     rbp, r15
.text:00000000000076FE
.text:00000000000076FE loc_76FE:                               ; CODE XREF: check_dst_limits_isra_13+207↓j
.text:00000000000076FE                 cmp     rbx, rbp
.text:0000000000007701                 jge     short loc_775B
.text:0000000000007703                 lea     rax, [rbx+rbp]
.text:0000000000007707                 mov     r13, [rdi+0D8h]
.text:000000000000770E                 mov     r10, rax
.text:0000000000007711                 shr     r10, 3Fh
.text:0000000000007715                 add     r10, rax
.text:0000000000007718                 sar     r10, 1
.text:000000000000771B                 lea     rax, [r10+r10*4]
.text:000000000000771F                 cmp     r8, [r13+rax*8+8]
.text:0000000000007724                 jle     short loc_7756
.text:0000000000007726                 jmp     loc_78C0
.text:0000000000007726 ; ---------------------------------------------------------------------------
.text:000000000000772B                 align 10h
.text:0000000000007730
.text:0000000000007730 loc_7730:                               ; CODE XREF: check_dst_limits_isra_13+89↓j
.text:0000000000007730                 lea     r11, [rbx+r10]
.text:0000000000007734                 mov     rax, r11
.text:0000000000007737                 shr     rax, 3Fh
.text:000000000000773B                 add     rax, r11
.text:000000000000773E                 sar     rax, 1
.text:0000000000007741                 lea     r11, [rax+rax*4]
.text:0000000000007745                 mov     r14, rax
.text:0000000000007748                 cmp     [r13+r11*8+8], r8
.text:000000000000774D                 jl      loc_78D0
.text:0000000000007753                 mov     r10, rax
.text:0000000000007756
.text:0000000000007756 loc_7756:                               ; CODE XREF: check_dst_limits_isra_13+54↑j
.text:0000000000007756                 cmp     rbx, r10
.text:0000000000007759                 jl      short loc_7730
.text:000000000000775B
.text:000000000000775B loc_775B:                               ; CODE XREF: check_dst_limits_isra_13+31↑j
.text:000000000000775B                 cmp     r15, rbx
.text:000000000000775E                 jle     loc_7900
.text:0000000000007764                 mov     r11, [rdi+0D8h]
.text:000000000000776B                 lea     rax, [rbx+rbx*4]
.text:000000000000776F                 lea     rax, [r11+rax*8]
.text:0000000000007773                 cmp     r8, [rax+8]
.text:0000000000007777                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000777E                 cmovnz  rbx, rax
.text:0000000000007782
.text:0000000000007782 loc_7782:                               ; CODE XREF: check_dst_limits_isra_13+237↓j
.text:0000000000007782                 mov     rax, r15
.text:0000000000007785                 xor     ebp, ebp
.text:0000000000007787
.text:0000000000007787 loc_7787:                               ; CODE XREF: check_dst_limits_isra_13+227↓j
.text:0000000000007787                 cmp     rbp, rax
.text:000000000000778A                 jge     short loc_77E4
.text:000000000000778C                 lea     r11, [rbp+rax+0]
.text:0000000000007791                 mov     r10, r11
.text:0000000000007794                 shr     r10, 3Fh
.text:0000000000007798                 add     r10, r11
.text:000000000000779B                 mov     r11, [rdi+0D8h]
.text:00000000000077A2                 sar     r10, 1
.text:00000000000077A5                 lea     r13, [r10+r10*4]
.text:00000000000077A9                 cmp     r12, [r11+r13*8+8]
.text:00000000000077AE                 jle     short loc_77DF
.text:00000000000077B0                 jmp     loc_78E0
.text:00000000000077B0 ; ---------------------------------------------------------------------------
.text:00000000000077B5                 align 8
.text:00000000000077B8
.text:00000000000077B8 loc_77B8:                               ; CODE XREF: check_dst_limits_isra_13+112↓j
.text:00000000000077B8                 lea     r13, [rbp+r10+0]
.text:00000000000077BD                 mov     rax, r13
.text:00000000000077C0                 shr     rax, 3Fh
.text:00000000000077C4                 add     rax, r13
.text:00000000000077C7                 sar     rax, 1
.text:00000000000077CA                 lea     r13, [rax+rax*4]
.text:00000000000077CE                 mov     r14, rax
.text:00000000000077D1                 cmp     [r11+r13*8+8], r12
.text:00000000000077D6                 jl      loc_78F0
.text:00000000000077DC                 mov     r10, rax
.text:00000000000077DF
.text:00000000000077DF loc_77DF:                               ; CODE XREF: check_dst_limits_isra_13+DE↑j
.text:00000000000077DF                 cmp     rbp, r10
.text:00000000000077E2                 jl      short loc_77B8
.text:00000000000077E4
.text:00000000000077E4 loc_77E4:                               ; CODE XREF: check_dst_limits_isra_13+BA↑j
.text:00000000000077E4                 cmp     r15, rbp
.text:00000000000077E7                 jle     loc_7910
.text:00000000000077ED                 mov     r10, [rdi+0D8h]
.text:00000000000077F4                 lea     rax, [rbp+rbp*4+0]
.text:00000000000077F9                 lea     rax, [r10+rax*8]
.text:00000000000077FD                 cmp     r12, [rax+8]
.text:0000000000007801                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007808                 cmovnz  rbp, rax
.text:000000000000780C
.text:000000000000780C loc_780C:                               ; CODE XREF: check_dst_limits_isra_13+247↓j
.text:000000000000780C                 cmp     qword ptr [rsi], 0
.text:0000000000007810                 jle     loc_7932
.text:0000000000007816                 mov     [rsp+78h+var_48], rbp
.text:000000000000781B                 mov     [rsp+78h+var_58], r9
.text:0000000000007820                 mov     r13, rdi
.text:0000000000007823                 mov     [rsp+78h+var_60], r8
.text:0000000000007828                 mov     [rsp+78h+var_68], rcx
.text:000000000000782D                 xor     r14d, r14d
.text:0000000000007830                 mov     [rsp+78h+var_40], rsi
.text:0000000000007835                 mov     [rsp+78h+var_50], rbx
.text:000000000000783A                 mov     rbp, rdx
.text:000000000000783D                 mov     r15, r12
.text:0000000000007840
.text:0000000000007840 loc_7840:                               ; CODE XREF: check_dst_limits_isra_13+25C↓j
.text:0000000000007840                 mov     rax, [rbp+0]
.text:0000000000007844                 mov     rdx, [r13+0D8h]
.text:000000000000784B                 mov     rdi, r13
.text:000000000000784E                 mov     r9, [rsp+78h+var_50]
.text:0000000000007853                 mov     r8, [rsp+78h+var_60]
.text:0000000000007858                 mov     rcx, [rsp+78h+var_68]
.text:000000000000785D                 mov     rsi, [rax+r14*8]
.text:0000000000007861                 lea     rax, [rsi+rsi*4]
.text:0000000000007865                 lea     rax, [rdx+rax*8]
.text:0000000000007869                 mov     rdx, [rsp+78h+var_70]
.text:000000000000786E                 mov     rax, [rax]
.text:0000000000007871                 shl     rax, 4
.text:0000000000007875                 add     rax, [rdx]
.text:0000000000007878                 mov     r12, [rax]
.text:000000000000787B                 mov     rdx, r12
.text:000000000000787E                 call    check_dst_limits_calc_pos
.text:0000000000007883                 mov     ebx, eax
.text:0000000000007885                 mov     rax, [rbp+0]
.text:0000000000007889                 mov     r9, [rsp+78h+var_48]
.text:000000000000788E                 mov     rcx, [rsp+78h+var_58]
.text:0000000000007893                 mov     r8, r15
.text:0000000000007896                 mov     rdx, r12
.text:0000000000007899                 mov     rdi, r13
.text:000000000000789C                 mov     rsi, [rax+r14*8]
.text:00000000000078A0                 call    check_dst_limits_calc_pos
.text:00000000000078A5                 cmp     ebx, eax
.text:00000000000078A7                 jz      short loc_7920
.text:00000000000078A9                 mov     eax, 1
.text:00000000000078AE
.text:00000000000078AE loc_78AE:                               ; CODE XREF: check_dst_limits_isra_13+264↓j
.text:00000000000078AE                 add     rsp, 48h
.text:00000000000078B2                 pop     rbx
.text:00000000000078B3                 pop     rbp
.text:00000000000078B4                 pop     r12
.text:00000000000078B6                 pop     r13
.text:00000000000078B8                 pop     r14
.text:00000000000078BA                 pop     r15
.text:00000000000078BC                 retn
.text:00000000000078BC ; ---------------------------------------------------------------------------
.text:00000000000078BD                 align 20h
.text:00000000000078C0
.text:00000000000078C0 loc_78C0:                               ; CODE XREF: check_dst_limits_isra_13+56↑j
.text:00000000000078C0                 mov     r14, r10
.text:00000000000078C3                 mov     r10, rbp
.text:00000000000078C6                 db      2Eh
.text:00000000000078C6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000078D0
.text:00000000000078D0 loc_78D0:                               ; CODE XREF: check_dst_limits_isra_13+7D↑j
.text:00000000000078D0                 lea     rbx, [r14+1]
.text:00000000000078D4                 mov     rbp, r10
.text:00000000000078D7                 jmp     loc_76FE
.text:00000000000078D7 ; ---------------------------------------------------------------------------
.text:00000000000078DC                 align 20h
.text:00000000000078E0
.text:00000000000078E0 loc_78E0:                               ; CODE XREF: check_dst_limits_isra_13+E0↑j
.text:00000000000078E0                 mov     r14, r10
.text:00000000000078E3                 mov     r10, rax
.text:00000000000078E6                 db      2Eh
.text:00000000000078E6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000078F0
.text:00000000000078F0 loc_78F0:                               ; CODE XREF: check_dst_limits_isra_13+106↑j
.text:00000000000078F0                 lea     rbp, [r14+1]
.text:00000000000078F4                 mov     rax, r10
.text:00000000000078F7                 jmp     loc_7787
.text:00000000000078F7 ; ---------------------------------------------------------------------------
.text:00000000000078FC                 align 20h
.text:0000000000007900
.text:0000000000007900 loc_7900:                               ; CODE XREF: check_dst_limits_isra_13+8E↑j
.text:0000000000007900                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007907                 jmp     loc_7782
.text:0000000000007907 ; ---------------------------------------------------------------------------
.text:000000000000790C                 align 10h
.text:0000000000007910
.text:0000000000007910 loc_7910:                               ; CODE XREF: check_dst_limits_isra_13+117↑j
.text:0000000000007910                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000007917                 jmp     loc_780C
.text:0000000000007917 ; ---------------------------------------------------------------------------
.text:000000000000791C                 align 20h
.text:0000000000007920
.text:0000000000007920 loc_7920:                               ; CODE XREF: check_dst_limits_isra_13+1D7↑j
.text:0000000000007920                 mov     rax, [rsp+78h+var_40]
.text:0000000000007925                 add     r14, 1
.text:0000000000007929                 cmp     r14, [rax]
.text:000000000000792C                 jl      loc_7840
.text:0000000000007932
.text:0000000000007932 loc_7932:                               ; CODE XREF: check_dst_limits_isra_13+140↑j
.text:0000000000007932                 xor     eax, eax
.text:0000000000007934                 jmp     loc_78AE
.text:0000000000007934 ; } // starts at 76D0
.text:0000000000007934 check_dst_limits_isra_13 endp
.text:0000000000007934
.text:0000000000007934 ; ---------------------------------------------------------------------------
.text:0000000000007939                 align 20h
.text:0000000000007940
.text:0000000000007940 ; =============== S U B R O U T I N E =======================================
.text:0000000000007940
.text:0000000000007940
.text:0000000000007940 re_node_set_merge proc near             ; CODE XREF: calc_eclosure_iter+132↓p
.text:0000000000007940                                         ; check_arrival_expand_ecl+113↓p ...
.text:0000000000007940 ; __unwind {
.text:0000000000007940                 test    rsi, rsi
.text:0000000000007943                 jz      loc_7A38
.text:0000000000007949                 mov     rdx, [rsi+8]
.text:000000000000794D                 test    rdx, rdx
.text:0000000000007950                 jz      loc_7A38
.text:0000000000007956                 push    r12
.text:0000000000007958                 push    rbp
.text:0000000000007959                 mov     r12, rsi
.text:000000000000795C                 push    rbx
.text:000000000000795D                 mov     rax, [rdi+8]
.text:0000000000007961                 mov     rbx, rdi
.text:0000000000007964                 mov     rsi, [rdi]
.text:0000000000007967                 lea     rcx, [rax+rdx*2]
.text:000000000000796B                 cmp     rsi, rcx
.text:000000000000796E                 jl      loc_7AB8
.text:0000000000007974
.text:0000000000007974 loc_7974:                               ; CODE XREF: re_node_set_merge+1A4↓j
.text:0000000000007974                 test    rax, rax
.text:0000000000007977                 jz      loc_7AF0
.text:000000000000797D                 lea     rbp, [rax+rdx*2]
.text:0000000000007981                 sub     rdx, 1
.text:0000000000007985                 sub     rax, 1
.text:0000000000007989                 mov     rdi, rdx
.text:000000000000798C                 not     rdi
.text:000000000000798F
.text:000000000000798F loc_798F:                               ; CODE XREF: re_node_set_merge+10E↓j
.text:000000000000798F                                         ; re_node_set_merge+11C↓j
.text:000000000000798F                 test    rdi, rdi
.text:0000000000007992                 jns     short loc_79D0
.text:0000000000007994
.text:0000000000007994 loc_7994:                               ; CODE XREF: re_node_set_merge+8B↓j
.text:0000000000007994                 test    rax, rax
.text:0000000000007997                 js      short loc_79D0
.text:0000000000007999                 mov     rcx, [rbx+10h]
.text:000000000000799D                 mov     rsi, [r12+10h]
.text:00000000000079A2                 mov     rsi, [rsi+rdx*8]
.text:00000000000079A6                 cmp     [rcx+rax*8], rsi
.text:00000000000079AA                 jz      loc_7A40
.text:00000000000079B0                 jge     loc_7A58
.text:00000000000079B6                 sub     rdx, 1
.text:00000000000079BA                 sub     rbp, 1
.text:00000000000079BE                 mov     rdi, rdx
.text:00000000000079C1                 mov     [rcx+rbp*8], rsi
.text:00000000000079C5                 not     rdi
.text:00000000000079C8                 test    rdi, rdi
.text:00000000000079CB                 js      short loc_7994
.text:00000000000079CD                 nop     dword ptr [rax]
.text:00000000000079D0
.text:00000000000079D0 loc_79D0:                               ; CODE XREF: re_node_set_merge+52↑j
.text:00000000000079D0                                         ; re_node_set_merge+57↑j
.text:00000000000079D0                 test    rdx, rdx
.text:00000000000079D3                 jns     loc_7A68
.text:00000000000079D9
.text:00000000000079D9 loc_79D9:                               ; CODE XREF: re_node_set_merge+145↓j
.text:00000000000079D9                 mov     rcx, [rbx+8]
.text:00000000000079DD                 mov     rax, [r12+8]
.text:00000000000079E2                 lea     r8, [rcx+rax*2-1]
.text:00000000000079E7                 mov     rdx, r8
.text:00000000000079EA                 sub     rdx, rbp
.text:00000000000079ED                 add     rdx, 1
.text:00000000000079F1                 jz      short loc_7A2A
.text:00000000000079F3                 mov     rdi, [rbx+10h]  ; dest
.text:00000000000079F7                 lea     rax, [rcx-1]
.text:00000000000079FB                 add     rcx, rdx
.text:00000000000079FE                 mov     [rbx+8], rcx
.text:0000000000007A02                 nop     word ptr [rax+rax+00h]
.text:0000000000007A08
.text:0000000000007A08 loc_7A08:                               ; CODE XREF: re_node_set_merge+E8↓j
.text:0000000000007A08                                         ; re_node_set_merge+157↓j
.text:0000000000007A08                 mov     rsi, [rdi+r8*8]
.text:0000000000007A0C                 mov     rcx, [rdi+rax*8]
.text:0000000000007A10                 lea     r9, [rax+rdx]
.text:0000000000007A14                 lea     r9, [rdi+r9*8]
.text:0000000000007A18                 cmp     rsi, rcx
.text:0000000000007A1B                 jle     short loc_7A90
.text:0000000000007A1D                 sub     r8, 1
.text:0000000000007A21                 sub     rdx, 1
.text:0000000000007A25                 mov     [r9], rsi
.text:0000000000007A28                 jnz     short loc_7A08
.text:0000000000007A2A
.text:0000000000007A2A loc_7A2A:                               ; CODE XREF: re_node_set_merge+B1↑j
.text:0000000000007A2A                                         ; re_node_set_merge+1CF↓j
.text:0000000000007A2A                 xor     eax, eax
.text:0000000000007A2C
.text:0000000000007A2C loc_7A2C:                               ; CODE XREF: re_node_set_merge+16C↓j
.text:0000000000007A2C                                         ; re_node_set_merge+1D9↓j
.text:0000000000007A2C                 pop     rbx
.text:0000000000007A2D                 pop     rbp
.text:0000000000007A2E                 pop     r12
.text:0000000000007A30                 retn
.text:0000000000007A30 ; ---------------------------------------------------------------------------
.text:0000000000007A31                 align 8
.text:0000000000007A38
.text:0000000000007A38 loc_7A38:                               ; CODE XREF: re_node_set_merge+3↑j
.text:0000000000007A38                                         ; re_node_set_merge+10↑j
.text:0000000000007A38                 xor     eax, eax
.text:0000000000007A3A                 retn
.text:0000000000007A3A ; ---------------------------------------------------------------------------
.text:0000000000007A3B                 align 20h
.text:0000000000007A40
.text:0000000000007A40 loc_7A40:                               ; CODE XREF: re_node_set_merge+6A↑j
.text:0000000000007A40                 sub     rdx, 1
.text:0000000000007A44                 sub     rax, 1
.text:0000000000007A48                 mov     rdi, rdx
.text:0000000000007A4B                 not     rdi
.text:0000000000007A4E                 jmp     loc_798F
.text:0000000000007A4E ; ---------------------------------------------------------------------------
.text:0000000000007A53                 align 8
.text:0000000000007A58
.text:0000000000007A58 loc_7A58:                               ; CODE XREF: re_node_set_merge+70↑j
.text:0000000000007A58                 sub     rax, 1
.text:0000000000007A5C                 jmp     loc_798F
.text:0000000000007A5C ; ---------------------------------------------------------------------------
.text:0000000000007A61                 align 8
.text:0000000000007A68
.text:0000000000007A68 loc_7A68:                               ; CODE XREF: re_node_set_merge+93↑j
.text:0000000000007A68                 mov     rax, [rbx+10h]
.text:0000000000007A6C                 add     rdx, 1
.text:0000000000007A70                 mov     rsi, [r12+10h]  ; src
.text:0000000000007A75                 sub     rbp, rdx
.text:0000000000007A78                 shl     rdx, 3          ; n
.text:0000000000007A7C                 lea     rdi, [rax+rbp*8] ; dest
.text:0000000000007A80                 call    _memcpy
.text:0000000000007A85                 jmp     loc_79D9
.text:0000000000007A85 ; ---------------------------------------------------------------------------
.text:0000000000007A8A                 align 10h
.text:0000000000007A90
.text:0000000000007A90 loc_7A90:                               ; CODE XREF: re_node_set_merge+DB↑j
.text:0000000000007A90                 sub     rax, 1
.text:0000000000007A94                 mov     [r9], rcx
.text:0000000000007A97                 jns     loc_7A08
.text:0000000000007A9D                 lea     rsi, [rdi+rbp*8] ; src
.text:0000000000007AA1                 shl     rdx, 3          ; n
.text:0000000000007AA5                 call    _memcpy
.text:0000000000007AAA                 xor     eax, eax
.text:0000000000007AAC                 jmp     loc_7A2C
.text:0000000000007AAC ; ---------------------------------------------------------------------------
.text:0000000000007AB1                 align 8
.text:0000000000007AB8
.text:0000000000007AB8 loc_7AB8:                               ; CODE XREF: re_node_set_merge+2E↑j
.text:0000000000007AB8                 add     rdx, rsi
.text:0000000000007ABB                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000007ABF                 lea     rbp, [rdx+rdx]
.text:0000000000007AC3                 shl     rdx, 4
.text:0000000000007AC7                 mov     rsi, rdx        ; size
.text:0000000000007ACA                 call    _realloc
.text:0000000000007ACF                 test    rax, rax
.text:0000000000007AD2                 jz      short loc_7B14
.text:0000000000007AD4                 mov     [rbx+10h], rax
.text:0000000000007AD8                 mov     [rbx], rbp
.text:0000000000007ADB                 mov     rax, [rbx+8]
.text:0000000000007ADF                 mov     rdx, [r12+8]
.text:0000000000007AE4                 jmp     loc_7974
.text:0000000000007AE4 ; ---------------------------------------------------------------------------
.text:0000000000007AE9                 align 10h
.text:0000000000007AF0
.text:0000000000007AF0 loc_7AF0:                               ; CODE XREF: re_node_set_merge+37↑j
.text:0000000000007AF0                 mov     [rbx+8], rdx
.text:0000000000007AF4                 mov     rax, [r12+8]
.text:0000000000007AF9                 mov     rdi, [rbx+10h]  ; dest
.text:0000000000007AFD                 mov     rsi, [r12+10h]  ; src
.text:0000000000007B02                 lea     rdx, ds:0[rax*8] ; n
.text:0000000000007B0A                 call    _memcpy
.text:0000000000007B0F                 jmp     loc_7A2A
.text:0000000000007B14 ; ---------------------------------------------------------------------------
.text:0000000000007B14
.text:0000000000007B14 loc_7B14:                               ; CODE XREF: re_node_set_merge+192↑j
.text:0000000000007B14                 mov     eax, 0Ch
.text:0000000000007B19                 jmp     loc_7A2C
.text:0000000000007B19 ; } // starts at 7940
.text:0000000000007B19 re_node_set_merge endp
.text:0000000000007B19
.text:0000000000007B19 ; ---------------------------------------------------------------------------
.text:0000000000007B1E                 align 20h
.text:0000000000007B20
.text:0000000000007B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B20
.text:0000000000007B20
.text:0000000000007B20 calc_eclosure_iter proc near            ; CODE XREF: calc_eclosure_iter+28E↓p
.text:0000000000007B20                                         ; re_compile_internal+A2A↓p
.text:0000000000007B20
.text:0000000000007B20 var_90          = qword ptr -90h
.text:0000000000007B20 var_88          = qword ptr -88h
.text:0000000000007B20 var_7D          = byte ptr -7Dh
.text:0000000000007B20 var_7C          = dword ptr -7Ch
.text:0000000000007B20 var_78          = xmmword ptr -78h
.text:0000000000007B20 var_68          = qword ptr -68h
.text:0000000000007B20 var_58          = xmmword ptr -58h
.text:0000000000007B20 ptr             = qword ptr -48h
.text:0000000000007B20 var_40          = qword ptr -40h
.text:0000000000007B20
.text:0000000000007B20 ; __unwind {
.text:0000000000007B20                 push    r15
.text:0000000000007B22                 push    r14
.text:0000000000007B24                 mov     r15, rsi
.text:0000000000007B27                 push    r13
.text:0000000000007B29                 push    r12
.text:0000000000007B2B                 push    rbp
.text:0000000000007B2C                 push    rbx
.text:0000000000007B2D                 lea     rbx, [rdx+rdx*2]
.text:0000000000007B31                 mov     rbp, rdx
.text:0000000000007B34                 sub     rsp, 68h
.text:0000000000007B38                 mov     r12, [rsi+28h]
.text:0000000000007B3C                 shl     rbx, 3
.text:0000000000007B40                 mov     rax, fs:28h
.text:0000000000007B49                 mov     [rsp+98h+var_40], rax
.text:0000000000007B4E                 xor     eax, eax
.text:0000000000007B50                 mov     [rsp+98h+var_88], rdi
.text:0000000000007B55                 mov     [rsp+98h+var_7C], ecx
.text:0000000000007B59                 add     r12, rbx
.text:0000000000007B5C                 mov     rax, [r12+8]
.text:0000000000007B61                 mov     qword ptr [rsp+98h+var_78+8], 0
.text:0000000000007B6A                 lea     rdi, [rax+1]
.text:0000000000007B6E                 mov     qword ptr [rsp+98h+var_78], rdi
.text:0000000000007B73                 shl     rdi, 3          ; size
.text:0000000000007B77                 call    _malloc
.text:0000000000007B7C                 test    rax, rax
.text:0000000000007B7F                 mov     [rsp+98h+var_68], rax
.text:0000000000007B84                 jz      loc_7DC0
.text:0000000000007B8A                 mov     rax, [r15+30h]
.text:0000000000007B8E                 mov     rdx, [r15]
.text:0000000000007B91                 mov     r13, rbp
.text:0000000000007B94                 shl     r13, 4
.text:0000000000007B98                 mov     qword ptr [rax+rbx+8], 0FFFFFFFFFFFFFFFFh
.text:0000000000007BA1                 lea     rax, [rdx+r13]
.text:0000000000007BA5                 mov     r8d, [rax+8]
.text:0000000000007BA9                 test    r8d, 3FF00h
.text:0000000000007BB0                 jnz     loc_7D50
.text:0000000000007BB6
.text:0000000000007BB6 loc_7BB6:                               ; CODE XREF: calc_eclosure_iter+24D↓j
.text:0000000000007BB6                                         ; calc_eclosure_iter+27D↓j
.text:0000000000007BB6                 test    byte ptr [rax+8], 8
.text:0000000000007BBA                 jz      loc_7C80
.text:0000000000007BC0                 mov     rsi, [r15+28h]
.text:0000000000007BC4                 lea     rax, [rsi+rbx]
.text:0000000000007BC8                 cmp     qword ptr [rax+8], 0
.text:0000000000007BCD                 jle     loc_7C80
.text:0000000000007BD3                 lea     rdx, [rsp+98h+var_78]
.text:0000000000007BD8                 mov     [rsp+98h+var_7D], 0
.text:0000000000007BDD                 xor     r14d, r14d
.text:0000000000007BE0                 lea     r12, [rsp+98h+var_58]
.text:0000000000007BE5                 mov     [rsp+98h+var_90], rdx
.text:0000000000007BEA                 jmp     short loc_7C06
.text:0000000000007BEA ; ---------------------------------------------------------------------------
.text:0000000000007BEC                 align 10h
.text:0000000000007BF0
.text:0000000000007BF0 loc_7BF0:                               ; CODE XREF: calc_eclosure_iter+145↓j
.text:0000000000007BF0                                         ; calc_eclosure_iter+156↓j
.text:0000000000007BF0                 mov     rsi, [r15+28h]
.text:0000000000007BF4                 add     r14, 1
.text:0000000000007BF8                 lea     rax, [rsi+rbx]
.text:0000000000007BFC                 cmp     [rax+8], r14
.text:0000000000007C00                 jle     loc_7D07
.text:0000000000007C06
.text:0000000000007C06 loc_7C06:                               ; CODE XREF: calc_eclosure_iter+CA↑j
.text:0000000000007C06                                         ; calc_eclosure_iter+1E1↓j
.text:0000000000007C06                 mov     rax, [rax+10h]
.text:0000000000007C0A                 mov     rdx, [rax+r14*8]
.text:0000000000007C0E                 mov     rax, [r15+30h]
.text:0000000000007C12                 lea     r8, [rdx+rdx*2]
.text:0000000000007C16                 lea     r13, ds:0[r8*8]
.text:0000000000007C1E                 add     rax, r13
.text:0000000000007C21                 mov     rcx, [rax+8]
.text:0000000000007C25                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007C29                 jz      loc_7CF0
.text:0000000000007C2F                 test    rcx, rcx
.text:0000000000007C32                 jz      loc_7DA8
.text:0000000000007C38                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000007C3C                 movaps  [rsp+98h+var_58], xmm0
.text:0000000000007C41                 mov     rax, [rax+10h]
.text:0000000000007C45                 mov     [rsp+98h+ptr], rax
.text:0000000000007C4A
.text:0000000000007C4A loc_7C4A:                               ; CODE XREF: calc_eclosure_iter+295↓j
.text:0000000000007C4A                 mov     rdi, [rsp+98h+var_90]
.text:0000000000007C4F                 mov     rsi, r12
.text:0000000000007C52                 call    re_node_set_merge
.text:0000000000007C57                 test    eax, eax
.text:0000000000007C59                 jnz     short loc_7CC6
.text:0000000000007C5B                 mov     rax, [r15+30h]
.text:0000000000007C5F                 cmp     qword ptr [rax+r13+8], 0
.text:0000000000007C65                 jnz     short loc_7BF0
.text:0000000000007C67                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:0000000000007C6C                 call    _free
.text:0000000000007C71                 mov     [rsp+98h+var_7D], 1
.text:0000000000007C76                 jmp     loc_7BF0
.text:0000000000007C76 ; ---------------------------------------------------------------------------
.text:0000000000007C7B                 align 20h
.text:0000000000007C80
.text:0000000000007C80 loc_7C80:                               ; CODE XREF: calc_eclosure_iter+9A↑j
.text:0000000000007C80                                         ; calc_eclosure_iter+AD↑j ...
.text:0000000000007C80                 lea     rdi, [rsp+98h+var_78]
.text:0000000000007C85                 mov     rsi, rbp
.text:0000000000007C88                 call    re_node_set_insert
.text:0000000000007C8D                 test    al, al
.text:0000000000007C8F                 jz      loc_7DC0
.text:0000000000007C95                 mov     rax, [r15+30h]
.text:0000000000007C99
.text:0000000000007C99 loc_7C99:                               ; CODE XREF: calc_eclosure_iter+209↓j
.text:0000000000007C99                                         ; calc_eclosure_iter+214↓j
.text:0000000000007C99                 movdqa  xmm0, [rsp+98h+var_78]
.text:0000000000007C9F                 movups  xmmword ptr [rax+rbx], xmm0
.text:0000000000007CA3                 mov     rdx, [rsp+98h+var_68]
.text:0000000000007CA8                 mov     [rax+rbx+10h], rdx
.text:0000000000007CAD
.text:0000000000007CAD loc_7CAD:                               ; CODE XREF: calc_eclosure_iter+222↓j
.text:0000000000007CAD                 mov     rbx, [rsp+98h+var_88]
.text:0000000000007CB2                 mov     rax, [rsp+98h+var_68]
.text:0000000000007CB7                 movdqa  xmm0, [rsp+98h+var_78]
.text:0000000000007CBD                 movaps  xmmword ptr [rbx], xmm0
.text:0000000000007CC0                 mov     [rbx+10h], rax
.text:0000000000007CC4                 xor     eax, eax
.text:0000000000007CC6
.text:0000000000007CC6 loc_7CC6:                               ; CODE XREF: calc_eclosure_iter+139↑j
.text:0000000000007CC6                                         ; calc_eclosure_iter+271↓j ...
.text:0000000000007CC6                 mov     rsi, [rsp+98h+var_40]
.text:0000000000007CCB                 xor     rsi, fs:28h
.text:0000000000007CD4                 jnz     loc_7DCA
.text:0000000000007CDA                 add     rsp, 68h
.text:0000000000007CDE                 pop     rbx
.text:0000000000007CDF                 pop     rbp
.text:0000000000007CE0                 pop     r12
.text:0000000000007CE2                 pop     r13
.text:0000000000007CE4                 pop     r14
.text:0000000000007CE6                 pop     r15
.text:0000000000007CE8                 retn
.text:0000000000007CE8 ; ---------------------------------------------------------------------------
.text:0000000000007CE9                 align 10h
.text:0000000000007CF0
.text:0000000000007CF0 loc_7CF0:                               ; CODE XREF: calc_eclosure_iter+109↑j
.text:0000000000007CF0                 lea     rax, [rsi+rbx]
.text:0000000000007CF4                 add     r14, 1
.text:0000000000007CF8                 mov     [rsp+98h+var_7D], 1
.text:0000000000007CFD                 cmp     [rax+8], r14
.text:0000000000007D01                 jg      loc_7C06
.text:0000000000007D07
.text:0000000000007D07 loc_7D07:                               ; CODE XREF: calc_eclosure_iter+E0↑j
.text:0000000000007D07                 lea     rdi, [rsp+98h+var_78]
.text:0000000000007D0C                 mov     rsi, rbp
.text:0000000000007D0F                 call    re_node_set_insert
.text:0000000000007D14                 test    al, al
.text:0000000000007D16                 jz      loc_7DC0
.text:0000000000007D1C                 cmp     byte ptr [rsp+98h+var_7C], 1
.text:0000000000007D21                 mov     rax, [r15+30h]
.text:0000000000007D25                 lea     rdx, [rax+rbx]
.text:0000000000007D29                 jz      loc_7C99
.text:0000000000007D2F                 cmp     [rsp+98h+var_7D], 0
.text:0000000000007D34                 jz      loc_7C99
.text:0000000000007D3A                 mov     qword ptr [rdx+8], 0
.text:0000000000007D42                 jmp     loc_7CAD
.text:0000000000007D42 ; ---------------------------------------------------------------------------
.text:0000000000007D47                 align 10h
.text:0000000000007D50
.text:0000000000007D50 loc_7D50:                               ; CODE XREF: calc_eclosure_iter+90↑j
.text:0000000000007D50                 cmp     qword ptr [r12+8], 0
.text:0000000000007D56                 jz      loc_7C80
.text:0000000000007D5C                 mov     rcx, [r12+10h]
.text:0000000000007D61                 mov     rcx, [rcx]
.text:0000000000007D64                 shl     rcx, 4
.text:0000000000007D68                 test    byte ptr [rdx+rcx+0Ah], 4
.text:0000000000007D6D                 jnz     loc_7BB6
.text:0000000000007D73                 shr     r8d, 8
.text:0000000000007D77                 mov     rcx, rbp
.text:0000000000007D7A                 mov     rdx, rbp
.text:0000000000007D7D                 and     r8d, 3FFh
.text:0000000000007D84                 mov     rsi, rbp
.text:0000000000007D87                 mov     rdi, r15
.text:0000000000007D8A                 call    duplicate_node_closure
.text:0000000000007D8F                 test    eax, eax
.text:0000000000007D91                 jnz     loc_7CC6
.text:0000000000007D97                 mov     rax, [r15]
.text:0000000000007D9A                 add     rax, r13
.text:0000000000007D9D                 jmp     loc_7BB6
.text:0000000000007D9D ; ---------------------------------------------------------------------------
.text:0000000000007DA2                 align 8
.text:0000000000007DA8
.text:0000000000007DA8 loc_7DA8:                               ; CODE XREF: calc_eclosure_iter+112↑j
.text:0000000000007DA8                 mov     rsi, r15
.text:0000000000007DAB                 mov     rdi, r12
.text:0000000000007DAE                 call    calc_eclosure_iter
.text:0000000000007DB3                 test    eax, eax
.text:0000000000007DB5                 jz      loc_7C4A
.text:0000000000007DBB                 jmp     loc_7CC6
.text:0000000000007DC0 ; ---------------------------------------------------------------------------
.text:0000000000007DC0
.text:0000000000007DC0 loc_7DC0:                               ; CODE XREF: calc_eclosure_iter+64↑j
.text:0000000000007DC0                                         ; calc_eclosure_iter+16F↑j ...
.text:0000000000007DC0                 mov     eax, 0Ch
.text:0000000000007DC5                 jmp     loc_7CC6
.text:0000000000007DCA ; ---------------------------------------------------------------------------
.text:0000000000007DCA
.text:0000000000007DCA loc_7DCA:                               ; CODE XREF: calc_eclosure_iter+1B4↑j
.text:0000000000007DCA                 call    ___stack_chk_fail
.text:0000000000007DCA ; } // starts at 7B20
.text:0000000000007DCA calc_eclosure_iter endp
.text:0000000000007DCA
.text:0000000000007DCA ; ---------------------------------------------------------------------------
.text:0000000000007DCF                 align 10h
.text:0000000000007DD0
.text:0000000000007DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DD0
.text:0000000000007DD0
.text:0000000000007DD0 check_arrival_expand_ecl proc near      ; CODE XREF: expand_bkref_cache+2A8↓p
.text:0000000000007DD0                                         ; check_arrival+374↓p ...
.text:0000000000007DD0
.text:0000000000007DD0 var_5C          = dword ptr -5Ch
.text:0000000000007DD0 var_58          = xmmword ptr -58h
.text:0000000000007DD0 ptr             = qword ptr -48h
.text:0000000000007DD0 var_40          = qword ptr -40h
.text:0000000000007DD0
.text:0000000000007DD0 ; __unwind {
.text:0000000000007DD0                 push    r15
.text:0000000000007DD2                 push    r14
.text:0000000000007DD4                 mov     r14, rdi
.text:0000000000007DD7                 push    r13
.text:0000000000007DD9                 push    r12
.text:0000000000007DDB                 mov     r15, rsi
.text:0000000000007DDE                 push    rbp
.text:0000000000007DDF                 push    rbx
.text:0000000000007DE0                 mov     rbp, rdx
.text:0000000000007DE3                 mov     ebx, ecx
.text:0000000000007DE5                 sub     rsp, 38h
.text:0000000000007DE9                 mov     r12, [rsi+8]
.text:0000000000007DED                 mov     rax, fs:28h
.text:0000000000007DF6                 mov     [rsp+68h+var_40], rax
.text:0000000000007DFB                 xor     eax, eax
.text:0000000000007DFD                 mov     qword ptr [rsp+68h+var_58+8], 0
.text:0000000000007E06                 lea     rdi, ds:0[r12*8] ; size
.text:0000000000007E0E                 mov     qword ptr [rsp+68h+var_58], r12
.text:0000000000007E13                 call    _malloc
.text:0000000000007E18                 test    rax, rax
.text:0000000000007E1B                 mov     [rsp+68h+ptr], rax
.text:0000000000007E20                 jz      loc_7F1D
.text:0000000000007E26                 test    r12, r12
.text:0000000000007E29                 jle     loc_7EBB
.text:0000000000007E2F                 lea     r12, [rsp+68h+var_58]
.text:0000000000007E34                 xor     r13d, r13d
.text:0000000000007E37                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007E40
.text:0000000000007E40 loc_7E40:                               ; CODE XREF: check_arrival_expand_ecl+E9↓j
.text:0000000000007E40                 mov     rax, [r15+10h]
.text:0000000000007E44                 mov     rdx, [rax+r13*8]
.text:0000000000007E48                 mov     rax, [r14+30h]
.text:0000000000007E4C                 lea     rcx, [rdx+rdx*2]
.text:0000000000007E50                 lea     rsi, [rax+rcx*8]
.text:0000000000007E54                 mov     r8, [rsi+8]
.text:0000000000007E58                 test    r8, r8
.text:0000000000007E5B                 jle     loc_7EE0
.text:0000000000007E61                 mov     r10, [rsi+10h]
.text:0000000000007E65                 mov     r9, [r14]
.text:0000000000007E68                 xor     ecx, ecx
.text:0000000000007E6A                 jmp     short loc_7E79
.text:0000000000007E6A ; ---------------------------------------------------------------------------
.text:0000000000007E6C                 align 10h
.text:0000000000007E70
.text:0000000000007E70 loc_7E70:                               ; CODE XREF: check_arrival_expand_ecl+BF↓j
.text:0000000000007E70                                         ; check_arrival_expand_ecl+C4↓j
.text:0000000000007E70                 add     rcx, 1
.text:0000000000007E74                 cmp     r8, rcx
.text:0000000000007E77                 jz      short loc_7EE0
.text:0000000000007E79
.text:0000000000007E79 loc_7E79:                               ; CODE XREF: check_arrival_expand_ecl+9A↑j
.text:0000000000007E79                 mov     rdi, [r10+rcx*8]
.text:0000000000007E7D                 mov     rax, rdi
.text:0000000000007E80                 shl     rax, 4
.text:0000000000007E84                 add     rax, r9
.text:0000000000007E87                 movzx   r11d, byte ptr [rax+8]
.text:0000000000007E8C                 cmp     ebx, r11d
.text:0000000000007E8F                 jnz     short loc_7E70
.text:0000000000007E91                 cmp     rbp, [rax]
.text:0000000000007E94                 jnz     short loc_7E70
.text:0000000000007E96                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007E9A                 jz      short loc_7EE0
.text:0000000000007E9C                 mov     r8d, ebx
.text:0000000000007E9F                 mov     rcx, rbp
.text:0000000000007EA2                 mov     rsi, r12
.text:0000000000007EA5                 mov     rdi, r14
.text:0000000000007EA8                 call    check_arrival_expand_ecl_sub
.text:0000000000007EAD                 test    eax, eax
.text:0000000000007EAF                 jnz     short loc_7EEC
.text:0000000000007EB1
.text:0000000000007EB1 loc_7EB1:                               ; CODE XREF: check_arrival_expand_ecl+11A↓j
.text:0000000000007EB1                 add     r13, 1
.text:0000000000007EB5                 cmp     [r15+8], r13
.text:0000000000007EB9                 jg      short loc_7E40
.text:0000000000007EBB
.text:0000000000007EBB loc_7EBB:                               ; CODE XREF: check_arrival_expand_ecl+59↑j
.text:0000000000007EBB                 mov     rdi, [r15+10h]  ; ptr
.text:0000000000007EBF                 call    _free
.text:0000000000007EC4                 mov     rax, [rsp+68h+ptr]
.text:0000000000007EC9                 movdqa  xmm0, [rsp+68h+var_58]
.text:0000000000007ECF                 mov     [r15+10h], rax
.text:0000000000007ED3                 xor     eax, eax
.text:0000000000007ED5                 movaps  xmmword ptr [r15], xmm0
.text:0000000000007ED9                 jmp     short loc_7EFE
.text:0000000000007ED9 ; ---------------------------------------------------------------------------
.text:0000000000007EDB                 align 20h
.text:0000000000007EE0
.text:0000000000007EE0 loc_7EE0:                               ; CODE XREF: check_arrival_expand_ecl+8B↑j
.text:0000000000007EE0                                         ; check_arrival_expand_ecl+A7↑j ...
.text:0000000000007EE0                 mov     rdi, r12
.text:0000000000007EE3                 call    re_node_set_merge
.text:0000000000007EE8                 test    eax, eax
.text:0000000000007EEA                 jz      short loc_7EB1
.text:0000000000007EEC
.text:0000000000007EEC loc_7EEC:                               ; CODE XREF: check_arrival_expand_ecl+DF↑j
.text:0000000000007EEC                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:0000000000007EF1                 mov     [rsp+68h+var_5C], eax
.text:0000000000007EF5                 call    _free
.text:0000000000007EFA                 mov     eax, [rsp+68h+var_5C]
.text:0000000000007EFE
.text:0000000000007EFE loc_7EFE:                               ; CODE XREF: check_arrival_expand_ecl+109↑j
.text:0000000000007EFE                                         ; check_arrival_expand_ecl+152↓j
.text:0000000000007EFE                 mov     rdx, [rsp+68h+var_40]
.text:0000000000007F03                 xor     rdx, fs:28h
.text:0000000000007F0C                 jnz     short loc_7F24
.text:0000000000007F0E                 add     rsp, 38h
.text:0000000000007F12                 pop     rbx
.text:0000000000007F13                 pop     rbp
.text:0000000000007F14                 pop     r12
.text:0000000000007F16                 pop     r13
.text:0000000000007F18                 pop     r14
.text:0000000000007F1A                 pop     r15
.text:0000000000007F1C                 retn
.text:0000000000007F1D ; ---------------------------------------------------------------------------
.text:0000000000007F1D
.text:0000000000007F1D loc_7F1D:                               ; CODE XREF: check_arrival_expand_ecl+50↑j
.text:0000000000007F1D                 mov     eax, 0Ch
.text:0000000000007F22                 jmp     short loc_7EFE
.text:0000000000007F24 ; ---------------------------------------------------------------------------
.text:0000000000007F24
.text:0000000000007F24 loc_7F24:                               ; CODE XREF: check_arrival_expand_ecl+13C↑j
.text:0000000000007F24                 call    ___stack_chk_fail
.text:0000000000007F24 ; } // starts at 7DD0
.text:0000000000007F24 check_arrival_expand_ecl endp
.text:0000000000007F24
.text:0000000000007F24 ; ---------------------------------------------------------------------------
.text:0000000000007F29                 align 10h
.text:0000000000007F30
.text:0000000000007F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F30
.text:0000000000007F30
.text:0000000000007F30 re_node_set_add_intersect proc near     ; CODE XREF: _sub_epsilon_src_nodes+9C↓p
.text:0000000000007F30                                         ; update_cur_sifted_state+107↓p
.text:0000000000007F30 ; __unwind {
.text:0000000000007F30                 mov     r9, [rsi+8]
.text:0000000000007F34                 xor     eax, eax
.text:0000000000007F36                 test    r9, r9
.text:0000000000007F39                 jz      locret_7FF8
.text:0000000000007F3F                 mov     r11, [rdx+8]
.text:0000000000007F43                 test    r11, r11
.text:0000000000007F46                 jz      locret_7FF8
.text:0000000000007F4C                 push    r13
.text:0000000000007F4E                 push    r12
.text:0000000000007F50                 lea     rax, [r9+r11]
.text:0000000000007F54                 push    rbp
.text:0000000000007F55                 push    rbx
.text:0000000000007F56                 mov     r12, rdx
.text:0000000000007F59                 mov     rbx, rdi
.text:0000000000007F5C                 mov     rbp, rsi
.text:0000000000007F5F                 sub     rsp, 8
.text:0000000000007F63                 mov     rcx, [rdi+8]
.text:0000000000007F67                 mov     r13, [rdi]
.text:0000000000007F6A                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000007F6E                 lea     rdx, [rax+rcx]
.text:0000000000007F72                 cmp     rdx, r13
.text:0000000000007F75                 jg      loc_80A0
.text:0000000000007F7B
.text:0000000000007F7B loc_7F7B:                               ; CODE XREF: re_node_set_add_intersect+19C↓j
.text:0000000000007F7B                 lea     rsi, [rcx+r9]
.text:0000000000007F7F                 mov     r13, [rbp+10h]
.text:0000000000007F83                 mov     rdx, [r12+10h]
.text:0000000000007F88                 sub     r9, 1
.text:0000000000007F8C                 sub     rcx, 1
.text:0000000000007F90                 add     rsi, r11
.text:0000000000007F93                 sub     r11, 1
.text:0000000000007F97                 mov     rax, [r13+r9*8+0]
.text:0000000000007F9C                 mov     r8, [rdx+r11*8]
.text:0000000000007FA0
.text:0000000000007FA0 loc_7FA0:                               ; CODE XREF: re_node_set_add_intersect+DB↓j
.text:0000000000007FA0                 cmp     rax, r8
.text:0000000000007FA3                 jz      short loc_7FB6
.text:0000000000007FA5
.text:0000000000007FA5 loc_7FA5:                               ; CODE XREF: re_node_set_add_intersect+84↓j
.text:0000000000007FA5                 jge     short loc_8000
.text:0000000000007FA7                 sub     r11, 1
.text:0000000000007FAB                 js      short loc_8010
.text:0000000000007FAD
.text:0000000000007FAD loc_7FAD:                               ; CODE XREF: re_node_set_add_intersect+C1↓j
.text:0000000000007FAD                 mov     r8, [rdx+r11*8]
.text:0000000000007FB1                 cmp     rax, r8
.text:0000000000007FB4                 jnz     short loc_7FA5
.text:0000000000007FB6
.text:0000000000007FB6 loc_7FB6:                               ; CODE XREF: re_node_set_add_intersect+73↑j
.text:0000000000007FB6                 test    rcx, rcx
.text:0000000000007FB9                 jns     short loc_7FCA
.text:0000000000007FBB                 jmp     short loc_7FD8
.text:0000000000007FBB ; ---------------------------------------------------------------------------
.text:0000000000007FBD                 align 20h
.text:0000000000007FC0
.text:0000000000007FC0 loc_7FC0:                               ; CODE XREF: re_node_set_add_intersect+A1↓j
.text:0000000000007FC0                 sub     rcx, 1
.text:0000000000007FC4                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007FC8                 jz      short loc_7FD8
.text:0000000000007FCA
.text:0000000000007FCA loc_7FCA:                               ; CODE XREF: re_node_set_add_intersect+89↑j
.text:0000000000007FCA                 mov     r10, [rdi+rcx*8]
.text:0000000000007FCE                 cmp     r10, r8
.text:0000000000007FD1                 jg      short loc_7FC0
.text:0000000000007FD3                 cmp     r10, r8
.text:0000000000007FD6                 jz      short loc_7FE0
.text:0000000000007FD8
.text:0000000000007FD8 loc_7FD8:                               ; CODE XREF: re_node_set_add_intersect+8B↑j
.text:0000000000007FD8                                         ; re_node_set_add_intersect+98↑j
.text:0000000000007FD8                 sub     rsi, 1
.text:0000000000007FDC                 mov     [rdi+rsi*8], r8
.text:0000000000007FE0
.text:0000000000007FE0 loc_7FE0:                               ; CODE XREF: re_node_set_add_intersect+A6↑j
.text:0000000000007FE0                 sub     r9, 1
.text:0000000000007FE4                 js      short loc_8010
.text:0000000000007FE6                 sub     r11, 1
.text:0000000000007FEA                 js      short loc_8010
.text:0000000000007FEC                 mov     rax, [r13+r9*8+0]
.text:0000000000007FF1                 jmp     short loc_7FAD
.text:0000000000007FF1 ; ---------------------------------------------------------------------------
.text:0000000000007FF3                 align 8
.text:0000000000007FF8
.text:0000000000007FF8 locret_7FF8:                            ; CODE XREF: re_node_set_add_intersect+9↑j
.text:0000000000007FF8                                         ; re_node_set_add_intersect+16↑j
.text:0000000000007FF8                 rep retn
.text:0000000000007FF8 ; ---------------------------------------------------------------------------
.text:0000000000007FFA                 align 20h
.text:0000000000008000
.text:0000000000008000 loc_8000:                               ; CODE XREF: re_node_set_add_intersect:loc_7FA5↑j
.text:0000000000008000                 sub     r9, 1
.text:0000000000008004                 js      short loc_8010
.text:0000000000008006                 mov     rax, [r13+r9*8+0]
.text:000000000000800B                 jmp     short loc_7FA0
.text:000000000000800B ; ---------------------------------------------------------------------------
.text:000000000000800D                 align 10h
.text:0000000000008010
.text:0000000000008010 loc_8010:                               ; CODE XREF: re_node_set_add_intersect+7B↑j
.text:0000000000008010                                         ; re_node_set_add_intersect+B4↑j ...
.text:0000000000008010                 mov     rcx, [rbx+8]
.text:0000000000008014                 mov     rdx, [rbp+8]
.text:0000000000008018                 add     rdx, rcx
.text:000000000000801B                 add     rdx, [r12+8]
.text:0000000000008020                 lea     rax, [rcx-1]
.text:0000000000008024                 lea     r9, [rdx-1]
.text:0000000000008028                 sub     rdx, rsi
.text:000000000000802B                 add     rcx, rdx
.text:000000000000802E                 test    rdx, rdx
.text:0000000000008031                 mov     [rbx+8], rcx
.text:0000000000008035                 jle     short loc_807D
.text:0000000000008037                 test    rax, rax
.text:000000000000803A                 js      short loc_807D
.text:000000000000803C                 nop     dword ptr [rax+00h]
.text:0000000000008040
.text:0000000000008040 loc_8040:                               ; CODE XREF: re_node_set_add_intersect+130↓j
.text:0000000000008040                                         ; re_node_set_add_intersect+14B↓j
.text:0000000000008040                 mov     r8, [rdi+r9*8]
.text:0000000000008044                 mov     rcx, [rdi+rax*8]
.text:0000000000008048                 lea     r10, [rax+rdx]
.text:000000000000804C                 lea     r10, [rdi+r10*8]
.text:0000000000008050                 cmp     r8, rcx
.text:0000000000008053                 jle     short loc_8070
.text:0000000000008055                 sub     r9, 1
.text:0000000000008059                 sub     rdx, 1
.text:000000000000805D                 mov     [r10], r8
.text:0000000000008060                 jnz     short loc_8040
.text:0000000000008062                 xor     edx, edx
.text:0000000000008064                 jmp     short loc_8081
.text:0000000000008064 ; ---------------------------------------------------------------------------
.text:0000000000008066                 align 10h
.text:0000000000008070
.text:0000000000008070 loc_8070:                               ; CODE XREF: re_node_set_add_intersect+123↑j
.text:0000000000008070                 sub     rax, 1
.text:0000000000008074                 mov     [r10], rcx
.text:0000000000008077                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000807B                 jnz     short loc_8040
.text:000000000000807D
.text:000000000000807D loc_807D:                               ; CODE XREF: re_node_set_add_intersect+105↑j
.text:000000000000807D                                         ; re_node_set_add_intersect+10A↑j
.text:000000000000807D                 shl     rdx, 3          ; n
.text:0000000000008081
.text:0000000000008081 loc_8081:                               ; CODE XREF: re_node_set_add_intersect+134↑j
.text:0000000000008081                 lea     rsi, [rdi+rsi*8] ; src
.text:0000000000008085                 call    _memcpy
.text:000000000000808A                 xor     eax, eax
.text:000000000000808C
.text:000000000000808C loc_808C:                               ; CODE XREF: re_node_set_add_intersect+1A6↓j
.text:000000000000808C                 add     rsp, 8
.text:0000000000008090                 pop     rbx
.text:0000000000008091                 pop     rbp
.text:0000000000008092                 pop     r12
.text:0000000000008094                 pop     r13
.text:0000000000008096                 retn
.text:0000000000008096 ; ---------------------------------------------------------------------------
.text:0000000000008097                 align 20h
.text:00000000000080A0
.text:00000000000080A0 loc_80A0:                               ; CODE XREF: re_node_set_add_intersect+45↑j
.text:00000000000080A0                 add     r13, rax
.text:00000000000080A3                 lea     rsi, ds:0[r13*8] ; size
.text:00000000000080AB                 call    _realloc
.text:00000000000080B0                 test    rax, rax
.text:00000000000080B3                 mov     rdi, rax
.text:00000000000080B6                 jz      short loc_80D1
.text:00000000000080B8                 mov     [rbx+10h], rax
.text:00000000000080BC                 mov     [rbx], r13
.text:00000000000080BF                 mov     rcx, [rbx+8]
.text:00000000000080C3                 mov     r9, [rbp+8]
.text:00000000000080C7                 mov     r11, [r12+8]
.text:00000000000080CC                 jmp     loc_7F7B
.text:00000000000080D1 ; ---------------------------------------------------------------------------
.text:00000000000080D1
.text:00000000000080D1 loc_80D1:                               ; CODE XREF: re_node_set_add_intersect+186↑j
.text:00000000000080D1                 mov     eax, 0Ch
.text:00000000000080D6                 jmp     short loc_808C
.text:00000000000080D6 ; } // starts at 7F30
.text:00000000000080D6 re_node_set_add_intersect endp
.text:00000000000080D6
.text:00000000000080D6 ; ---------------------------------------------------------------------------
.text:00000000000080D8                 align 20h
.text:00000000000080E0
.text:00000000000080E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080E0
.text:00000000000080E0
.text:00000000000080E0 create_token_tree_isra_16 proc near     ; CODE XREF: duplicate_tree+3E↓p
.text:00000000000080E0                                         ; lower_subexp+82↓p ...
.text:00000000000080E0
.text:00000000000080E0 var_28          = qword ptr -28h
.text:00000000000080E0 var_20          = qword ptr -20h
.text:00000000000080E0 var_18          = qword ptr -18h
.text:00000000000080E0 var_10          = qword ptr -10h
.text:00000000000080E0
.text:00000000000080E0 ; __unwind {
.text:00000000000080E0                 push    rbx
.text:00000000000080E1                 mov     rbx, rdi
.text:00000000000080E4                 sub     rsp, 20h
.text:00000000000080E8                 mov     eax, [rsi]
.text:00000000000080EA                 cmp     eax, 0Fh
.text:00000000000080ED                 jz      short loc_8168
.text:00000000000080EF                 movsxd  r9, eax
.text:00000000000080F2                 lea     r10d, [rax+1]
.text:00000000000080F6                 mov     rdi, [rdi]
.text:00000000000080F9                 mov     rax, r9
.text:00000000000080FC                 shl     rax, 6
.text:0000000000008100                 add     rax, 8
.text:0000000000008104
.text:0000000000008104 loc_8104:                               ; CODE XREF: create_token_tree_isra_16+D7↓j
.text:0000000000008104                 shl     r9, 6
.text:0000000000008108                 mov     [rsi], r10d
.text:000000000000810B                 add     rax, rdi
.text:000000000000810E                 lea     rsi, [rdi+r9]
.text:0000000000008112                 mov     qword ptr [rsi+8], 0
.text:000000000000811A                 mov     [rsi+10h], rdx
.text:000000000000811E                 lea     rdi, [rsi+20h]
.text:0000000000008122                 mov     [rsi+18h], rcx
.text:0000000000008126                 movdqu  xmm0, xmmword ptr [r8]
.text:000000000000812B                 movups  xmmword ptr [rsi+30h], xmm0
.text:000000000000812F                 and     byte ptr [rdi+1Ah], 0F3h
.text:0000000000008133                 test    rdx, rdx
.text:0000000000008136                 mov     qword ptr [rsi+20h], 0
.text:000000000000813E                 mov     qword ptr [rsi+28h], 0
.text:0000000000008146                 mov     qword ptr [rsi+40h], 0FFFFFFFFFFFFFFFFh
.text:000000000000814E                 jz      short loc_8153
.text:0000000000008150                 mov     [rdx], rax
.text:0000000000008153
.text:0000000000008153 loc_8153:                               ; CODE XREF: create_token_tree_isra_16+6E↑j
.text:0000000000008153                 test    rcx, rcx
.text:0000000000008156                 jz      short loc_815B
.text:0000000000008158                 mov     [rcx], rax
.text:000000000000815B
.text:000000000000815B loc_815B:                               ; CODE XREF: create_token_tree_isra_16+76↑j
.text:000000000000815B                                         ; create_token_tree_isra_16+DE↓j
.text:000000000000815B                 add     rsp, 20h
.text:000000000000815F                 pop     rbx
.text:0000000000008160                 retn
.text:0000000000008160 ; ---------------------------------------------------------------------------
.text:0000000000008161                 align 8
.text:0000000000008168
.text:0000000000008168 loc_8168:                               ; CODE XREF: create_token_tree_isra_16+D↑j
.text:0000000000008168                 mov     edi, 3C8h       ; size
.text:000000000000816D                 mov     [rsp+28h+var_10], r8
.text:0000000000008172                 mov     [rsp+28h+var_18], rcx
.text:0000000000008177                 mov     [rsp+28h+var_20], rdx
.text:000000000000817C                 mov     [rsp+28h+var_28], rsi
.text:0000000000008180                 call    _malloc
.text:0000000000008185                 test    rax, rax
.text:0000000000008188                 mov     rdi, rax
.text:000000000000818B                 jz      short loc_81BC
.text:000000000000818D                 mov     rax, [rbx]
.text:0000000000008190                 mov     r10d, 1
.text:0000000000008196                 mov     [rbx], rdi
.text:0000000000008199                 xor     r9d, r9d
.text:000000000000819C                 mov     r8, [rsp+28h+var_10]
.text:00000000000081A1                 mov     rcx, [rsp+28h+var_18]
.text:00000000000081A6                 mov     rdx, [rsp+28h+var_20]
.text:00000000000081AB                 mov     rsi, [rsp+28h+var_28]
.text:00000000000081AF                 mov     [rdi], rax
.text:00000000000081B2                 mov     eax, 8
.text:00000000000081B7                 jmp     loc_8104
.text:00000000000081BC ; ---------------------------------------------------------------------------
.text:00000000000081BC
.text:00000000000081BC loc_81BC:                               ; CODE XREF: create_token_tree_isra_16+AB↑j
.text:00000000000081BC                 xor     eax, eax
.text:00000000000081BE                 jmp     short loc_815B
.text:00000000000081BE ; } // starts at 80E0
.text:00000000000081BE create_token_tree_isra_16 endp
.text:00000000000081BE
.text:00000000000081C0
.text:00000000000081C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081C0
.text:00000000000081C0
.text:00000000000081C0 duplicate_tree  proc near               ; CODE XREF: parse_expression+2AC↓p
.text:00000000000081C0                                         ; parse_expression+408↓p ...
.text:00000000000081C0
.text:00000000000081C0 var_38          = qword ptr -38h
.text:00000000000081C0 var_30          = qword ptr -30h
.text:00000000000081C0
.text:00000000000081C0 ; __unwind {
.text:00000000000081C0                 push    r14
.text:00000000000081C2                 push    r13
.text:00000000000081C4                 lea     r13, [rsi+70h]
.text:00000000000081C8                 push    r12
.text:00000000000081CA                 push    rbp
.text:00000000000081CB                 lea     r12, [rsi+80h]
.text:00000000000081D2                 push    rbx
.text:00000000000081D3                 mov     rbx, rdi
.text:00000000000081D6                 sub     rsp, 10h
.text:00000000000081DA                 mov     rbp, [rdi]
.text:00000000000081DD                 mov     rax, fs:28h
.text:00000000000081E6                 mov     [rsp+38h+var_30], rax
.text:00000000000081EB                 xor     eax, eax
.text:00000000000081ED                 mov     r14, rsp
.text:00000000000081F0
.text:00000000000081F0 loc_81F0:                               ; CODE XREF: duplicate_tree+65↓j
.text:00000000000081F0                                         ; duplicate_tree+C7↓j
.text:00000000000081F0                 lea     r8, [rbx+28h]
.text:00000000000081F4                 xor     ecx, ecx
.text:00000000000081F6                 xor     edx, edx
.text:00000000000081F8                 mov     rsi, r12
.text:00000000000081FB                 mov     rdi, r13
.text:00000000000081FE                 call    create_token_tree_isra_16
.text:0000000000008203                 test    rax, rax
.text:0000000000008206                 mov     [r14], rax
.text:0000000000008209                 jz      short loc_825C
.text:000000000000820B                 mov     [rax], rbp
.text:000000000000820E                 mov     rbp, [r14]
.text:0000000000008211                 or      byte ptr [rbp+32h], 4
.text:0000000000008215                 mov     rax, [rbx+8]
.text:0000000000008219                 test    rax, rax
.text:000000000000821C                 jz      short loc_8230
.text:000000000000821E                 lea     r14, [rbp+8]
.text:0000000000008222                 mov     rbx, rax
.text:0000000000008225                 jmp     short loc_81F0
.text:0000000000008225 ; ---------------------------------------------------------------------------
.text:0000000000008227                 align 10h
.text:0000000000008230
.text:0000000000008230 loc_8230:                               ; CODE XREF: duplicate_tree+5C↑j
.text:0000000000008230                 xor     edx, edx
.text:0000000000008232                 jmp     short loc_823B
.text:0000000000008232 ; ---------------------------------------------------------------------------
.text:0000000000008234                 align 8
.text:0000000000008238
.text:0000000000008238 loc_8238:                               ; CODE XREF: duplicate_tree+96↓j
.text:0000000000008238                 mov     rbx, rax
.text:000000000000823B
.text:000000000000823B loc_823B:                               ; CODE XREF: duplicate_tree+72↑j
.text:000000000000823B                 mov     rax, [rbx+10h]
.text:000000000000823F                 test    rax, rax
.text:0000000000008242                 jz      short loc_8249
.text:0000000000008244                 cmp     rax, rdx
.text:0000000000008247                 jnz     short loc_8280
.text:0000000000008249
.text:0000000000008249 loc_8249:                               ; CODE XREF: duplicate_tree+82↑j
.text:0000000000008249                 mov     rax, [rbx]
.text:000000000000824C                 mov     rbp, [rbp+0]
.text:0000000000008250                 mov     rdx, rbx
.text:0000000000008253                 test    rax, rax
.text:0000000000008256                 jnz     short loc_8238
.text:0000000000008258                 mov     rax, [rsp+38h+var_38]
.text:000000000000825C
.text:000000000000825C loc_825C:                               ; CODE XREF: duplicate_tree+49↑j
.text:000000000000825C                 mov     rcx, [rsp+38h+var_30]
.text:0000000000008261                 xor     rcx, fs:28h
.text:000000000000826A                 jnz     short loc_828C
.text:000000000000826C                 add     rsp, 10h
.text:0000000000008270                 pop     rbx
.text:0000000000008271                 pop     rbp
.text:0000000000008272                 pop     r12
.text:0000000000008274                 pop     r13
.text:0000000000008276                 pop     r14
.text:0000000000008278                 retn
.text:0000000000008278 ; ---------------------------------------------------------------------------
.text:0000000000008279                 align 20h
.text:0000000000008280
.text:0000000000008280 loc_8280:                               ; CODE XREF: duplicate_tree+87↑j
.text:0000000000008280                 lea     r14, [rbp+10h]
.text:0000000000008284                 mov     rbx, rax
.text:0000000000008287                 jmp     loc_81F0
.text:000000000000828C ; ---------------------------------------------------------------------------
.text:000000000000828C
.text:000000000000828C loc_828C:                               ; CODE XREF: duplicate_tree+AA↑j
.text:000000000000828C                 call    ___stack_chk_fail
.text:000000000000828C ; } // starts at 81C0
.text:000000000000828C duplicate_tree  endp
.text:000000000000828C
.text:000000000000828C ; ---------------------------------------------------------------------------
.text:0000000000008291                 align 20h
.text:00000000000082A0
.text:00000000000082A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082A0
.text:00000000000082A0
.text:00000000000082A0 lower_subexp    proc near               ; CODE XREF: lower_subexps+68↓p
.text:00000000000082A0                                         ; lower_subexps+88↓p
.text:00000000000082A0
.text:00000000000082A0 var_70          = qword ptr -70h
.text:00000000000082A0 var_68          = qword ptr -68h
.text:00000000000082A0 var_60          = qword ptr -60h
.text:00000000000082A0 var_58          = byte ptr -58h
.text:00000000000082A0 var_50          = byte ptr -50h
.text:00000000000082A0 var_40          = qword ptr -40h
.text:00000000000082A0
.text:00000000000082A0 ; __unwind {
.text:00000000000082A0                 push    r15
.text:00000000000082A2                 push    r14
.text:00000000000082A4                 push    r13
.text:00000000000082A6                 push    r12
.text:00000000000082A8                 mov     r13, rdx
.text:00000000000082AB                 push    rbp
.text:00000000000082AC                 push    rbx
.text:00000000000082AD                 sub     rsp, 48h
.text:00000000000082B1                 mov     rbx, [rsi]
.text:00000000000082B4                 mov     rbp, [rdx+8]
.text:00000000000082B8                 mov     rax, fs:28h
.text:00000000000082C1                 mov     [rsp+78h+var_40], rax
.text:00000000000082C6                 xor     eax, eax
.text:00000000000082C8                 test    byte ptr [rsi+38h], 10h
.text:00000000000082CC                 mov     [rsp+78h+var_60], rdi
.text:00000000000082D1                 jz      loc_8448
.text:00000000000082D7                 test    rbp, rbp
.text:00000000000082DA                 jz      short loc_8350
.text:00000000000082DC                 mov     rax, [rdx+28h]
.text:00000000000082E0                 cmp     rax, 3Fh ; '?'
.text:00000000000082E4                 jg      loc_841D
.text:00000000000082EA                 mov     rdx, [rbx+0A0h]
.text:00000000000082F1                 bt      rdx, rax
.text:00000000000082F5                 jnb     loc_841D
.text:00000000000082FB                 lea     rax, [rbx+70h]
.text:00000000000082FF                 lea     r14, [rsp+78h+var_58]
.text:0000000000008304                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:0000000000008308                 xor     ecx, ecx
.text:000000000000830A                 xor     edx, edx
.text:000000000000830C                 mov     rsi, rbx
.text:000000000000830F                 mov     r15, rax
.text:0000000000008312                 mov     r8, r14
.text:0000000000008315                 mov     rdi, rax
.text:0000000000008318                 mov     [rsp+78h+var_50], 8
.text:000000000000831D                 mov     [rsp+78h+var_70], rax
.text:0000000000008322                 call    create_token_tree_isra_16
.text:0000000000008327                 mov     rdi, r15
.text:000000000000832A                 mov     r8, r14
.text:000000000000832D                 xor     ecx, ecx
.text:000000000000832F                 xor     edx, edx
.text:0000000000008331                 mov     rsi, rbx
.text:0000000000008334                 mov     r12, rax
.text:0000000000008337                 mov     [rsp+78h+var_50], 9
.text:000000000000833C                 call    create_token_tree_isra_16
.text:0000000000008341                 mov     r15, rax
.text:0000000000008344                 jmp     loc_849D
.text:0000000000008344 ; ---------------------------------------------------------------------------
.text:0000000000008349                 align 10h
.text:0000000000008350
.text:0000000000008350 loc_8350:                               ; CODE XREF: lower_subexp+3A↑j
.text:0000000000008350                 lea     rax, [rbx+70h]
.text:0000000000008354                 lea     r14, [rsp+78h+var_58]
.text:0000000000008359                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:000000000000835D                 xor     ecx, ecx
.text:000000000000835F                 xor     edx, edx
.text:0000000000008361                 mov     rsi, rbx
.text:0000000000008364                 mov     r15, rax
.text:0000000000008367                 mov     r8, r14
.text:000000000000836A                 mov     rdi, rax
.text:000000000000836D                 mov     [rsp+78h+var_50], 8
.text:0000000000008372                 mov     [rsp+78h+var_70], rax
.text:0000000000008377                 call    create_token_tree_isra_16
.text:000000000000837C                 mov     rdi, r15
.text:000000000000837F                 mov     r8, r14
.text:0000000000008382                 xor     ecx, ecx
.text:0000000000008384                 xor     edx, edx
.text:0000000000008386                 mov     rsi, rbx
.text:0000000000008389                 mov     r12, rax
.text:000000000000838C                 mov     [rsp+78h+var_50], 9
.text:0000000000008391                 call    create_token_tree_isra_16
.text:0000000000008396                 mov     r11, rax
.text:0000000000008399                 mov     r15, rax
.text:000000000000839C
.text:000000000000839C loc_839C:                               ; CODE XREF: lower_subexp+1F7↓j
.text:000000000000839C                                         ; lower_subexp+21B↓j
.text:000000000000839C                 mov     rdi, [rsp+78h+var_70]
.text:00000000000083A1                 mov     r8, r14
.text:00000000000083A4                 mov     rcx, r11
.text:00000000000083A7                 mov     rdx, r12
.text:00000000000083AA                 mov     rsi, rbx
.text:00000000000083AD                 mov     [rsp+78h+var_50], 10h
.text:00000000000083B2                 mov     [rsp+78h+var_68], r11
.text:00000000000083B7                 call    create_token_tree_isra_16
.text:00000000000083BC                 test    rax, rax
.text:00000000000083BF                 mov     rbp, rax
.text:00000000000083C2                 jz      loc_84C0
.text:00000000000083C8                 mov     r11, [rsp+78h+var_68]
.text:00000000000083CD                 test    r11, r11
.text:00000000000083D0                 jz      loc_84C0
.text:00000000000083D6                 test    r12, r12
.text:00000000000083D9                 jz      loc_84C0
.text:00000000000083DF                 test    r15, r15
.text:00000000000083E2                 jz      loc_84C0
.text:00000000000083E8                 mov     rax, [r13+28h]
.text:00000000000083EC                 mov     [r15+28h], rax
.text:00000000000083F0                 mov     [r12+28h], rax
.text:00000000000083F5                 movzx   eax, byte ptr [r13+32h]
.text:00000000000083FA                 movzx   edx, byte ptr [r15+32h]
.text:00000000000083FF                 and     eax, 8
.text:0000000000008402                 and     edx, 0FFFFFFF7h
.text:0000000000008405                 mov     ecx, eax
.text:0000000000008407                 or      edx, ecx
.text:0000000000008409                 mov     [r15+32h], dl
.text:000000000000840D                 movzx   eax, byte ptr [r12+32h]
.text:0000000000008413                 and     eax, 0FFFFFFF7h
.text:0000000000008416                 or      eax, ecx
.text:0000000000008418                 mov     [r12+32h], al
.text:000000000000841D
.text:000000000000841D loc_841D:                               ; CODE XREF: lower_subexp+44↑j
.text:000000000000841D                                         ; lower_subexp+55↑j ...
.text:000000000000841D                 mov     rdi, [rsp+78h+var_40]
.text:0000000000008422                 xor     rdi, fs:28h
.text:000000000000842B                 mov     rax, rbp
.text:000000000000842E                 jnz     loc_84D2
.text:0000000000008434                 add     rsp, 48h
.text:0000000000008438                 pop     rbx
.text:0000000000008439                 pop     rbp
.text:000000000000843A                 pop     r12
.text:000000000000843C                 pop     r13
.text:000000000000843E                 pop     r14
.text:0000000000008440                 pop     r15
.text:0000000000008442                 retn
.text:0000000000008442 ; ---------------------------------------------------------------------------
.text:0000000000008443                 align 8
.text:0000000000008448
.text:0000000000008448 loc_8448:                               ; CODE XREF: lower_subexp+31↑j
.text:0000000000008448                 lea     rax, [rbx+70h]
.text:000000000000844C                 lea     r14, [rsp+78h+var_58]
.text:0000000000008451                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:0000000000008455                 xor     ecx, ecx
.text:0000000000008457                 xor     edx, edx
.text:0000000000008459                 mov     rsi, rbx
.text:000000000000845C                 mov     r15, rax
.text:000000000000845F                 mov     r8, r14
.text:0000000000008462                 mov     rdi, rax
.text:0000000000008465                 mov     [rsp+78h+var_50], 8
.text:000000000000846A                 mov     [rsp+78h+var_70], rax
.text:000000000000846F                 call    create_token_tree_isra_16
.text:0000000000008474                 xor     ecx, ecx
.text:0000000000008476                 xor     edx, edx
.text:0000000000008478                 mov     rdi, r15
.text:000000000000847B                 mov     r8, r14
.text:000000000000847E                 mov     rsi, rbx
.text:0000000000008481                 mov     r12, rax
.text:0000000000008484                 mov     [rsp+78h+var_50], 9
.text:0000000000008489                 call    create_token_tree_isra_16
.text:000000000000848E                 test    rbp, rbp
.text:0000000000008491                 mov     r15, rax
.text:0000000000008494                 mov     r11, rax
.text:0000000000008497                 jz      loc_839C
.text:000000000000849D
.text:000000000000849D loc_849D:                               ; CODE XREF: lower_subexp+A4↑j
.text:000000000000849D                 mov     rdi, [rsp+78h+var_70]
.text:00000000000084A2                 mov     r8, r14
.text:00000000000084A5                 mov     rcx, r15
.text:00000000000084A8                 mov     rdx, rbp
.text:00000000000084AB                 mov     rsi, rbx
.text:00000000000084AE                 mov     [rsp+78h+var_50], 10h
.text:00000000000084B3                 call    create_token_tree_isra_16
.text:00000000000084B8                 mov     r11, rax
.text:00000000000084BB                 jmp     loc_839C
.text:00000000000084C0 ; ---------------------------------------------------------------------------
.text:00000000000084C0
.text:00000000000084C0 loc_84C0:                               ; CODE XREF: lower_subexp+122↑j
.text:00000000000084C0                                         ; lower_subexp+130↑j ...
.text:00000000000084C0                 mov     rax, [rsp+78h+var_60]
.text:00000000000084C5                 xor     ebp, ebp
.text:00000000000084C7                 mov     dword ptr [rax], 0Ch
.text:00000000000084CD                 jmp     loc_841D
.text:00000000000084D2 ; ---------------------------------------------------------------------------
.text:00000000000084D2
.text:00000000000084D2 loc_84D2:                               ; CODE XREF: lower_subexp+18E↑j
.text:00000000000084D2                 call    ___stack_chk_fail
.text:00000000000084D2 ; } // starts at 82A0
.text:00000000000084D2 lower_subexp    endp
.text:00000000000084D2
.text:00000000000084D2 ; ---------------------------------------------------------------------------
.text:00000000000084D7                 align 20h
.text:00000000000084E0
.text:00000000000084E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000084E0
.text:00000000000084E0
.text:00000000000084E0 lower_subexps   proc near               ; DATA XREF: re_compile_internal+666↓o
.text:00000000000084E0
.text:00000000000084E0 var_24          = dword ptr -24h
.text:00000000000084E0 var_20          = qword ptr -20h
.text:00000000000084E0
.text:00000000000084E0 ; __unwind {
.text:00000000000084E0                 push    rbp
.text:00000000000084E1                 push    rbx
.text:00000000000084E2                 mov     rbp, rdi
.text:00000000000084E5                 mov     rbx, rsi
.text:00000000000084E8                 sub     rsp, 18h
.text:00000000000084EC                 mov     rdx, [rsi+8]
.text:00000000000084F0                 mov     rax, fs:28h
.text:00000000000084F9                 mov     [rsp+28h+var_20], rax
.text:00000000000084FE                 xor     eax, eax
.text:0000000000008500                 mov     [rsp+28h+var_24], 0
.text:0000000000008508                 test    rdx, rdx
.text:000000000000850B                 jz      short loc_8513
.text:000000000000850D                 cmp     byte ptr [rdx+30h], 11h
.text:0000000000008511                 jz      short loc_8560
.text:0000000000008513
.text:0000000000008513 loc_8513:                               ; CODE XREF: lower_subexps+2B↑j
.text:0000000000008513                                         ; lower_subexps+94↓j ...
.text:0000000000008513                 mov     rdx, [rbx+10h]
.text:0000000000008517                 test    rdx, rdx
.text:000000000000851A                 jz      short loc_8522
.text:000000000000851C                 cmp     byte ptr [rdx+30h], 11h
.text:0000000000008520                 jz      short loc_8540
.text:0000000000008522
.text:0000000000008522 loc_8522:                               ; CODE XREF: lower_subexps+3A↑j
.text:0000000000008522                                         ; lower_subexps+74↓j ...
.text:0000000000008522                 mov     rcx, [rsp+28h+var_20]
.text:0000000000008527                 xor     rcx, fs:28h
.text:0000000000008530                 mov     eax, [rsp+28h+var_24]
.text:0000000000008534                 jnz     short loc_857B
.text:0000000000008536                 add     rsp, 18h
.text:000000000000853A                 pop     rbx
.text:000000000000853B                 pop     rbp
.text:000000000000853C                 retn
.text:000000000000853C ; ---------------------------------------------------------------------------
.text:000000000000853D                 align 20h
.text:0000000000008540
.text:0000000000008540 loc_8540:                               ; CODE XREF: lower_subexps+40↑j
.text:0000000000008540                 lea     rdi, [rsp+28h+var_24]
.text:0000000000008545                 mov     rsi, rbp
.text:0000000000008548                 call    lower_subexp
.text:000000000000854D                 test    rax, rax
.text:0000000000008550                 mov     [rbx+10h], rax
.text:0000000000008554                 jz      short loc_8522
.text:0000000000008556                 mov     [rax], rbx
.text:0000000000008559                 jmp     short loc_8522
.text:0000000000008559 ; ---------------------------------------------------------------------------
.text:000000000000855B                 align 20h
.text:0000000000008560
.text:0000000000008560 loc_8560:                               ; CODE XREF: lower_subexps+31↑j
.text:0000000000008560                 lea     rdi, [rsp+28h+var_24]
.text:0000000000008565                 mov     rsi, rbp
.text:0000000000008568                 call    lower_subexp
.text:000000000000856D                 test    rax, rax
.text:0000000000008570                 mov     [rbx+8], rax
.text:0000000000008574                 jz      short loc_8513
.text:0000000000008576                 mov     [rax], rbx
.text:0000000000008579                 jmp     short loc_8513
.text:000000000000857B ; ---------------------------------------------------------------------------
.text:000000000000857B
.text:000000000000857B loc_857B:                               ; CODE XREF: lower_subexps+54↑j
.text:000000000000857B                 call    ___stack_chk_fail
.text:000000000000857B ; } // starts at 84E0
.text:000000000000857B lower_subexps   endp
.text:000000000000857B
.text:0000000000008580
.text:0000000000008580 ; =============== S U B R O U T I N E =======================================
.text:0000000000008580
.text:0000000000008580
.text:0000000000008580 re_node_set_init_copy proc near         ; CODE XREF: re_node_set_init_union+EB↓j
.text:0000000000008580                                         ; re_acquire_state_context+E8↓p ...
.text:0000000000008580 ; __unwind {
.text:0000000000008580                 push    r12
.text:0000000000008582                 push    rbp
.text:0000000000008583                 push    rbx
.text:0000000000008584                 mov     rax, [rsi+8]
.text:0000000000008588                 mov     [rdi+8], rax
.text:000000000000858C                 mov     r12, [rsi+8]
.text:0000000000008590                 test    r12, r12
.text:0000000000008593                 jle     short loc_85D0
.text:0000000000008595                 mov     rbx, rdi
.text:0000000000008598                 mov     [rdi], rax
.text:000000000000859B                 lea     rdi, ds:0[rax*8] ; size
.text:00000000000085A3                 mov     rbp, rsi
.text:00000000000085A6                 call    _malloc
.text:00000000000085AB                 test    rax, rax
.text:00000000000085AE                 mov     [rbx+10h], rax
.text:00000000000085B2                 jz      short loc_85F0
.text:00000000000085B4                 mov     rsi, [rbp+10h]  ; src
.text:00000000000085B8                 lea     rdx, ds:0[r12*8] ; n
.text:00000000000085C0                 mov     rdi, rax        ; dest
.text:00000000000085C3                 call    _memcpy
.text:00000000000085C8                 xor     eax, eax
.text:00000000000085CA
.text:00000000000085CA loc_85CA:                               ; CODE XREF: re_node_set_init_copy+84↓j
.text:00000000000085CA                 pop     rbx
.text:00000000000085CB                 pop     rbp
.text:00000000000085CC                 pop     r12
.text:00000000000085CE                 retn
.text:00000000000085CE ; ---------------------------------------------------------------------------
.text:00000000000085CF                 align 10h
.text:00000000000085D0
.text:00000000000085D0 loc_85D0:                               ; CODE XREF: re_node_set_init_copy+13↑j
.text:00000000000085D0                 pxor    xmm0, xmm0
.text:00000000000085D4                 mov     qword ptr [rdi+10h], 0
.text:00000000000085DC                 xor     eax, eax
.text:00000000000085DE                 movups  xmmword ptr [rdi], xmm0
.text:00000000000085E1                 pop     rbx
.text:00000000000085E2                 pop     rbp
.text:00000000000085E3                 pop     r12
.text:00000000000085E5                 retn
.text:00000000000085E5 ; ---------------------------------------------------------------------------
.text:00000000000085E6                 align 10h
.text:00000000000085F0
.text:00000000000085F0 loc_85F0:                               ; CODE XREF: re_node_set_init_copy+32↑j
.text:00000000000085F0                 mov     qword ptr [rbx+8], 0
.text:00000000000085F8                 mov     qword ptr [rbx], 0
.text:00000000000085FF                 mov     eax, 0Ch
.text:0000000000008604                 jmp     short loc_85CA
.text:0000000000008604 ; } // starts at 8580
.text:0000000000008604 re_node_set_init_copy endp
.text:0000000000008604
.text:0000000000008604 ; ---------------------------------------------------------------------------
.text:0000000000008606                 align 10h
.text:0000000000008610
.text:0000000000008610 ; =============== S U B R O U T I N E =======================================
.text:0000000000008610
.text:0000000000008610
.text:0000000000008610 re_node_set_init_union proc near        ; CODE XREF: merge_state_array+60↓p
.text:0000000000008610                                         ; transit_state_bkref_isra_34+4A1↓p ...
.text:0000000000008610 ; __unwind {
.text:0000000000008610                 test    rsi, rsi
.text:0000000000008613                 push    r14
.text:0000000000008615                 push    r13
.text:0000000000008617                 push    r12
.text:0000000000008619                 push    rbp
.text:000000000000861A                 push    rbx
.text:000000000000861B                 jz      loc_86C5
.text:0000000000008621                 test    rdx, rdx
.text:0000000000008624                 mov     r13, [rsi+8]
.text:0000000000008628                 jz      loc_86C0
.text:000000000000862E                 test    r13, r13
.text:0000000000008631                 jle     loc_86C0
.text:0000000000008637                 mov     r14, [rdx+8]
.text:000000000000863B                 test    r14, r14
.text:000000000000863E                 jle     loc_86F3
.text:0000000000008644                 mov     r12, rdi
.text:0000000000008647                 lea     rdi, [r13+r14+0]
.text:000000000000864C                 mov     rbx, rdx
.text:000000000000864F                 mov     rbp, rsi
.text:0000000000008652                 mov     [r12], rdi
.text:0000000000008656                 shl     rdi, 3          ; size
.text:000000000000865A                 call    _malloc
.text:000000000000865F                 test    rax, rax
.text:0000000000008662                 mov     [r12+10h], rax
.text:0000000000008667                 jz      loc_8758
.text:000000000000866D                 mov     r9, [rbx+10h]
.text:0000000000008671                 mov     r8, [rbp+10h]
.text:0000000000008675                 xor     ebx, ebx
.text:0000000000008677                 xor     ecx, ecx
.text:0000000000008679                 xor     esi, esi
.text:000000000000867B                 jmp     short loc_869E
.text:000000000000867B ; ---------------------------------------------------------------------------
.text:000000000000867D                 align 20h
.text:0000000000008680
.text:0000000000008680 loc_8680:                               ; CODE XREF: re_node_set_init_union+9D↓j
.text:0000000000008680                 setz    dil
.text:0000000000008684                 mov     [rax+rbx*8-8], rdx
.text:0000000000008689                 add     rsi, 1
.text:000000000000868D                 movzx   edi, dil
.text:0000000000008691                 add     rcx, rdi
.text:0000000000008694
.text:0000000000008694 loc_8694:                               ; CODE XREF: re_node_set_init_union+A8↓j
.text:0000000000008694                 cmp     r13, rsi
.text:0000000000008697                 jle     short loc_8700
.text:0000000000008699                 cmp     r14, rcx
.text:000000000000869C                 jle     short loc_8718
.text:000000000000869E
.text:000000000000869E loc_869E:                               ; CODE XREF: re_node_set_init_union+6B↑j
.text:000000000000869E                 mov     rdx, [r8+rsi*8]
.text:00000000000086A2                 mov     rdi, [r9+rcx*8]
.text:00000000000086A6                 add     rbx, 1
.text:00000000000086AA                 cmp     rdx, rdi
.text:00000000000086AD                 jle     short loc_8680
.text:00000000000086AF                 add     rcx, 1
.text:00000000000086B3                 mov     [rax+rbx*8-8], rdi
.text:00000000000086B8                 jmp     short loc_8694
.text:00000000000086B8 ; ---------------------------------------------------------------------------
.text:00000000000086BA                 align 20h
.text:00000000000086C0
.text:00000000000086C0 loc_86C0:                               ; CODE XREF: re_node_set_init_union+18↑j
.text:00000000000086C0                                         ; re_node_set_init_union+21↑j
.text:00000000000086C0                 test    r13, r13
.text:00000000000086C3                 jg      short loc_86F3
.text:00000000000086C5
.text:00000000000086C5 loc_86C5:                               ; CODE XREF: re_node_set_init_union+B↑j
.text:00000000000086C5                 test    rdx, rdx
.text:00000000000086C8                 jz      short loc_86D1
.text:00000000000086CA                 cmp     qword ptr [rdx+8], 0
.text:00000000000086CF                 jg      short loc_86F0
.text:00000000000086D1
.text:00000000000086D1 loc_86D1:                               ; CODE XREF: re_node_set_init_union+B8↑j
.text:00000000000086D1                 pxor    xmm0, xmm0
.text:00000000000086D5                 mov     qword ptr [rdi+10h], 0
.text:00000000000086DD                 xor     eax, eax
.text:00000000000086DF                 movaps  xmmword ptr [rdi], xmm0
.text:00000000000086E2
.text:00000000000086E2 loc_86E2:                               ; CODE XREF: re_node_set_init_union+14D↓j
.text:00000000000086E2                 pop     rbx
.text:00000000000086E3                 pop     rbp
.text:00000000000086E4                 pop     r12
.text:00000000000086E6                 pop     r13
.text:00000000000086E8                 pop     r14
.text:00000000000086EA                 retn
.text:00000000000086EA ; ---------------------------------------------------------------------------
.text:00000000000086EB                 align 10h
.text:00000000000086F0
.text:00000000000086F0 loc_86F0:                               ; CODE XREF: re_node_set_init_union+BF↑j
.text:00000000000086F0                 mov     rsi, rdx
.text:00000000000086F3
.text:00000000000086F3 loc_86F3:                               ; CODE XREF: re_node_set_init_union+2E↑j
.text:00000000000086F3                                         ; re_node_set_init_union+B3↑j
.text:00000000000086F3                 pop     rbx
.text:00000000000086F4                 pop     rbp
.text:00000000000086F5                 pop     r12
.text:00000000000086F7                 pop     r13
.text:00000000000086F9                 pop     r14
.text:00000000000086FB                 jmp     re_node_set_init_copy
.text:0000000000008700 ; ---------------------------------------------------------------------------
.text:0000000000008700
.text:0000000000008700 loc_8700:                               ; CODE XREF: re_node_set_init_union+87↑j
.text:0000000000008700                 cmp     r14, rcx
.text:0000000000008703                 jg      short loc_8738
.text:0000000000008705
.text:0000000000008705 loc_8705:                               ; CODE XREF: re_node_set_init_union+123↓j
.text:0000000000008705                                         ; re_node_set_init_union+143↓j
.text:0000000000008705                 mov     [r12+8], rbx
.text:000000000000870A                 xor     eax, eax
.text:000000000000870C                 pop     rbx
.text:000000000000870D                 pop     rbp
.text:000000000000870E                 pop     r12
.text:0000000000008710                 pop     r13
.text:0000000000008712                 pop     r14
.text:0000000000008714                 retn
.text:0000000000008714 ; ---------------------------------------------------------------------------
.text:0000000000008715                 align 8
.text:0000000000008718
.text:0000000000008718 loc_8718:                               ; CODE XREF: re_node_set_init_union+8C↑j
.text:0000000000008718                 sub     r13, rsi
.text:000000000000871B                 lea     rdi, [rax+rbx*8] ; dest
.text:000000000000871F                 lea     rsi, [r8+rsi*8] ; src
.text:0000000000008723                 lea     rdx, ds:0[r13*8] ; n
.text:000000000000872B                 add     rbx, r13
.text:000000000000872E                 call    _memcpy
.text:0000000000008733                 jmp     short loc_8705
.text:0000000000008733 ; ---------------------------------------------------------------------------
.text:0000000000008735                 align 8
.text:0000000000008738
.text:0000000000008738 loc_8738:                               ; CODE XREF: re_node_set_init_union+F3↑j
.text:0000000000008738                 sub     r14, rcx
.text:000000000000873B                 lea     rdi, [rax+rbx*8] ; dest
.text:000000000000873F                 lea     rsi, [r9+rcx*8] ; src
.text:0000000000008743                 lea     rdx, ds:0[r14*8] ; n
.text:000000000000874B                 add     rbx, r14
.text:000000000000874E                 call    _memcpy
.text:0000000000008753                 jmp     short loc_8705
.text:0000000000008753 ; ---------------------------------------------------------------------------
.text:0000000000008755                 align 8
.text:0000000000008758
.text:0000000000008758 loc_8758:                               ; CODE XREF: re_node_set_init_union+57↑j
.text:0000000000008758                 mov     eax, 0Ch
.text:000000000000875D                 jmp     loc_86E2
.text:000000000000875D ; } // starts at 8610
.text:000000000000875D re_node_set_init_union endp
.text:000000000000875D
.text:000000000000875D ; ---------------------------------------------------------------------------
.text:0000000000008762                 align 10h
.text:0000000000008770
.text:0000000000008770 ; =============== S U B R O U T I N E =======================================
.text:0000000000008770
.text:0000000000008770
.text:0000000000008770 re_acquire_state_context proc near      ; CODE XREF: build_trtable+255↓p
.text:0000000000008770                                         ; build_trtable+9A0↓p ...
.text:0000000000008770
.text:0000000000008770 var_54          = dword ptr -54h
.text:0000000000008770 var_50          = qword ptr -50h
.text:0000000000008770 var_48          = qword ptr -48h
.text:0000000000008770 var_40          = qword ptr -40h
.text:0000000000008770
.text:0000000000008770 ; __unwind {
.text:0000000000008770                 push    r15
.text:0000000000008772                 push    r14
.text:0000000000008774                 push    r13
.text:0000000000008776                 push    r12
.text:0000000000008778                 push    rbp
.text:0000000000008779                 push    rbx
.text:000000000000877A                 sub     rsp, 28h
.text:000000000000877E                 mov     r10, [rdx+8]
.text:0000000000008782                 test    r10, r10
.text:0000000000008785                 jz      loc_8A0F
.text:000000000000878B                 mov     r8d, ecx
.text:000000000000878E                 test    r10, r10
.text:0000000000008791                 lea     r12, [r8+r10]
.text:0000000000008795                 jle     short loc_87AC
.text:0000000000008797                 mov     rax, [rdx+10h]
.text:000000000000879B                 lea     r10, [rax+r10*8]
.text:000000000000879F                 nop
.text:00000000000087A0
.text:00000000000087A0 loc_87A0:                               ; CODE XREF: re_acquire_state_context+3A↓j
.text:00000000000087A0                 add     r12, [rax]
.text:00000000000087A3                 add     rax, 8
.text:00000000000087A7                 cmp     r10, rax
.text:00000000000087AA                 jnz     short loc_87A0
.text:00000000000087AC
.text:00000000000087AC loc_87AC:                               ; CODE XREF: re_acquire_state_context+25↑j
.text:00000000000087AC                 mov     rax, [rsi+88h]
.text:00000000000087B3                 mov     rbp, rdx
.text:00000000000087B6                 mov     [rsp+58h+var_54], ecx
.text:00000000000087BA                 mov     r13, rsi
.text:00000000000087BD                 mov     [rsp+58h+var_40], rdi
.text:00000000000087C2                 and     rax, r12
.text:00000000000087C5                 lea     rdx, [rax+rax*2]
.text:00000000000087C9                 mov     rax, [rsi+40h]
.text:00000000000087CD                 lea     rax, [rax+rdx*8]
.text:00000000000087D1                 mov     r11, [rax]
.text:00000000000087D4                 test    r11, r11
.text:00000000000087D7                 jle     short loc_8830
.text:00000000000087D9                 mov     rbx, [rax+10h]
.text:00000000000087DD                 xor     r10d, r10d
.text:00000000000087E0                 mov     r9d, ecx
.text:00000000000087E3                 jmp     short loc_87F1
.text:00000000000087E3 ; ---------------------------------------------------------------------------
.text:00000000000087E5                 align 8
.text:00000000000087E8
.text:00000000000087E8 loc_87E8:                               ; CODE XREF: re_acquire_state_context+88↓j
.text:00000000000087E8                                         ; re_acquire_state_context+95↓j ...
.text:00000000000087E8                 add     r10, 1
.text:00000000000087EC                 cmp     r10, r11
.text:00000000000087EF                 jz      short loc_8830
.text:00000000000087F1
.text:00000000000087F1 loc_87F1:                               ; CODE XREF: re_acquire_state_context+73↑j
.text:00000000000087F1                 mov     r14, [rbx+r10*8]
.text:00000000000087F5                 cmp     [r14], r12
.text:00000000000087F8                 jnz     short loc_87E8
.text:00000000000087FA                 movzx   eax, byte ptr [r14+68h]
.text:00000000000087FF                 and     eax, 0Fh
.text:0000000000008802                 cmp     eax, r9d
.text:0000000000008805                 jnz     short loc_87E8
.text:0000000000008807                 mov     rdi, [r14+50h]
.text:000000000000880B                 test    rdi, rdi
.text:000000000000880E                 jz      short loc_87E8
.text:0000000000008810                 mov     rsi, rbp
.text:0000000000008813                 call    re_node_set_compare_part_2
.text:0000000000008818                 test    al, al
.text:000000000000881A                 jz      short loc_87E8
.text:000000000000881C
.text:000000000000881C loc_881C:                               ; CODE XREF: re_acquire_state_context+208↓j
.text:000000000000881C                                         ; re_acquire_state_context+224↓j ...
.text:000000000000881C                 add     rsp, 28h
.text:0000000000008820                 mov     rax, r14
.text:0000000000008823                 pop     rbx
.text:0000000000008824                 pop     rbp
.text:0000000000008825                 pop     r12
.text:0000000000008827                 pop     r13
.text:0000000000008829                 pop     r14
.text:000000000000882B                 pop     r15
.text:000000000000882D                 retn
.text:000000000000882D ; ---------------------------------------------------------------------------
.text:000000000000882E                 align 10h
.text:0000000000008830
.text:0000000000008830 loc_8830:                               ; CODE XREF: re_acquire_state_context+67↑j
.text:0000000000008830                                         ; re_acquire_state_context+7F↑j
.text:0000000000008830                 mov     esi, 1          ; size
.text:0000000000008835                 mov     edi, 70h ; 'p'  ; nmemb
.text:000000000000883A                 call    _calloc
.text:000000000000883F                 test    rax, rax
.text:0000000000008842                 mov     r14, rax
.text:0000000000008845                 jz      loc_8986
.text:000000000000884B                 lea     rax, [rax+8]
.text:000000000000884F                 mov     rsi, rbp
.text:0000000000008852                 mov     rdi, rax
.text:0000000000008855                 mov     rbx, rax
.text:0000000000008858                 call    re_node_set_init_copy
.text:000000000000885D                 test    eax, eax
.text:000000000000885F                 jnz     loc_8A1D
.text:0000000000008865                 movzx   eax, byte ptr [r14+68h]
.text:000000000000886A                 movzx   edx, byte ptr [rsp+58h+var_54]
.text:000000000000886F                 mov     [r14+50h], rbx
.text:0000000000008873                 and     edx, 0Fh
.text:0000000000008876                 and     eax, 0FFFFFFF0h
.text:0000000000008879                 or      eax, edx
.text:000000000000887B                 cmp     qword ptr [rbp+8], 0
.text:0000000000008880                 mov     [r14+68h], al
.text:0000000000008884                 jle     loc_8968
.text:000000000000888A                 lea     rcx, [r14+18h]
.text:000000000000888E                 xor     r15d, r15d
.text:0000000000008891                 mov     [rsp+58h+var_48], r12
.text:0000000000008896                 xor     r10d, r10d
.text:0000000000008899                 mov     r12, r13
.text:000000000000889C                 mov     r13, r15
.text:000000000000889F                 mov     [rsp+58h+var_50], rcx
.text:00000000000088A4                 mov     r15, rbx
.text:00000000000088A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000088B0
.text:00000000000088B0 loc_88B0:                               ; CODE XREF: re_acquire_state_context+1EA↓j
.text:00000000000088B0                 mov     rax, [rbp+10h]
.text:00000000000088B4                 mov     rax, [rax+r13*8]
.text:00000000000088B8                 shl     rax, 4
.text:00000000000088BC                 add     rax, [r12]
.text:00000000000088C0                 movzx   esi, byte ptr [rax+8]
.text:00000000000088C4                 mov     ebx, [rax+8]
.text:00000000000088C7                 shr     ebx, 8
.text:00000000000088CA                 and     bx, 3FFh
.text:00000000000088CF                 cmp     esi, 1
.text:00000000000088D2                 movzx   edi, bx
.text:00000000000088D5                 jnz     short loc_88DB
.text:00000000000088D7                 test    edi, edi
.text:00000000000088D9                 jz      short loc_8952
.text:00000000000088DB
.text:00000000000088DB loc_88DB:                               ; CODE XREF: re_acquire_state_context+165↑j
.text:00000000000088DB                 movzx   edx, byte ptr [r14+68h]
.text:00000000000088E0                 movzx   eax, byte ptr [rax+0Ah]
.text:00000000000088E4                 mov     r9d, edx
.text:00000000000088E7                 shr     al, 4
.text:00000000000088EA                 and     edx, 0FFFFFFDFh
.text:00000000000088ED                 shr     r9b, 5
.text:00000000000088F1                 or      eax, r9d
.text:00000000000088F4                 and     eax, 1
.text:00000000000088F7                 shl     eax, 5
.text:00000000000088FA                 or      eax, edx
.text:00000000000088FC                 cmp     esi, 2
.text:00000000000088FF                 mov     [r14+68h], al
.text:0000000000008903                 jz      loc_89D0
.text:0000000000008909                 cmp     esi, 4
.text:000000000000890C                 jnz     short loc_8915
.text:000000000000890E                 or      eax, 40h
.text:0000000000008911                 mov     [r14+68h], al
.text:0000000000008915
.text:0000000000008915 loc_8915:                               ; CODE XREF: re_acquire_state_context+19C↑j
.text:0000000000008915                                         ; re_acquire_state_context+267↓j
.text:0000000000008915                 test    edi, edi
.text:0000000000008917                 jz      short loc_8952
.text:0000000000008919                 cmp     r15, [r14+50h]
.text:000000000000891D                 jz      loc_89E0
.text:0000000000008923
.text:0000000000008923 loc_8923:                               ; CODE XREF: re_acquire_state_context+29A↓j
.text:0000000000008923                 test    bl, 1
.text:0000000000008926                 jz      short loc_89A0
.text:0000000000008928                 test    byte ptr [rsp+58h+var_54], 1
.text:000000000000892D                 jz      short loc_8938
.text:000000000000892F                 test    bl, 2
.text:0000000000008932                 jz      short loc_89AC
.text:0000000000008934                 nop     dword ptr [rax+00h]
.text:0000000000008938
.text:0000000000008938 loc_8938:                               ; CODE XREF: re_acquire_state_context+1BD↑j
.text:0000000000008938                                         ; re_acquire_state_context+23A↓j ...
.text:0000000000008938                 mov     rdx, r13
.text:000000000000893B                 sub     rdx, r10
.text:000000000000893E                 js      short loc_894E
.text:0000000000008940                 mov     rsi, [rsp+58h+var_50]
.text:0000000000008945                 lea     rdi, [r14+10h]
.text:0000000000008949                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000000894E
.text:000000000000894E loc_894E:                               ; CODE XREF: re_acquire_state_context+1CE↑j
.text:000000000000894E                 add     r10, 1
.text:0000000000008952
.text:0000000000008952 loc_8952:                               ; CODE XREF: re_acquire_state_context+169↑j
.text:0000000000008952                                         ; re_acquire_state_context+1A7↑j ...
.text:0000000000008952                 add     r13, 1
.text:0000000000008956                 cmp     r13, [rbp+8]
.text:000000000000895A                 jl      loc_88B0
.text:0000000000008960                 mov     r13, r12
.text:0000000000008963                 mov     r12, [rsp+58h+var_48]
.text:0000000000008968
.text:0000000000008968 loc_8968:                               ; CODE XREF: re_acquire_state_context+114↑j
.text:0000000000008968                 mov     rdx, r12
.text:000000000000896B                 mov     rsi, r14
.text:000000000000896E                 mov     rdi, r13
.text:0000000000008971                 call    register_state
.text:0000000000008976                 test    eax, eax
.text:0000000000008978                 jz      loc_881C
.text:000000000000897E
.text:000000000000897E loc_897E:                               ; CODE XREF: re_acquire_state_context+281↓j
.text:000000000000897E                 mov     rdi, r14        ; ptr
.text:0000000000008981                 call    free_state
.text:0000000000008986
.text:0000000000008986 loc_8986:                               ; CODE XREF: re_acquire_state_context+D5↑j
.text:0000000000008986                                         ; re_acquire_state_context+290↓j ...
.text:0000000000008986                 mov     rax, [rsp+58h+var_40]
.text:000000000000898B                 xor     r14d, r14d
.text:000000000000898E                 mov     dword ptr [rax], 0Ch
.text:0000000000008994                 jmp     loc_881C
.text:0000000000008994 ; ---------------------------------------------------------------------------
.text:0000000000008999                 align 20h
.text:00000000000089A0
.text:00000000000089A0 loc_89A0:                               ; CODE XREF: re_acquire_state_context+1B6↑j
.text:00000000000089A0                 test    bl, 2
.text:00000000000089A3                 jz      short loc_89AC
.text:00000000000089A5                 test    byte ptr [rsp+58h+var_54], 1
.text:00000000000089AA                 jnz     short loc_8938
.text:00000000000089AC
.text:00000000000089AC loc_89AC:                               ; CODE XREF: re_acquire_state_context+1C2↑j
.text:00000000000089AC                                         ; re_acquire_state_context+233↑j
.text:00000000000089AC                 test    bl, 10h
.text:00000000000089AF                 jz      short loc_89B8
.text:00000000000089B1                 test    byte ptr [rsp+58h+var_54], 2
.text:00000000000089B6                 jz      short loc_8938
.text:00000000000089B8
.text:00000000000089B8 loc_89B8:                               ; CODE XREF: re_acquire_state_context+23F↑j
.text:00000000000089B8                 and     ebx, 40h
.text:00000000000089BB                 jz      short loc_8952
.text:00000000000089BD                 test    byte ptr [rsp+58h+var_54], 4
.text:00000000000089C2                 jnz     short loc_8952
.text:00000000000089C4                 jmp     loc_8938
.text:00000000000089C4 ; ---------------------------------------------------------------------------
.text:00000000000089C9                 align 10h
.text:00000000000089D0
.text:00000000000089D0 loc_89D0:                               ; CODE XREF: re_acquire_state_context+193↑j
.text:00000000000089D0                 or      eax, 10h
.text:00000000000089D3                 mov     [r14+68h], al
.text:00000000000089D7                 jmp     loc_8915
.text:00000000000089D7 ; ---------------------------------------------------------------------------
.text:00000000000089DC                 align 20h
.text:00000000000089E0
.text:00000000000089E0 loc_89E0:                               ; CODE XREF: re_acquire_state_context+1AD↑j
.text:00000000000089E0                 mov     edi, 18h        ; size
.text:00000000000089E5                 call    _malloc
.text:00000000000089EA                 test    rax, rax
.text:00000000000089ED                 mov     [r14+50h], rax
.text:00000000000089F1                 jz      short loc_897E
.text:00000000000089F3                 mov     rsi, rbp
.text:00000000000089F6                 mov     rdi, rax
.text:00000000000089F9                 call    re_node_set_init_copy
.text:00000000000089FE                 test    eax, eax
.text:0000000000008A00                 jnz     short loc_8986
.text:0000000000008A02                 or      byte ptr [r14+68h], 80h
.text:0000000000008A07                 xor     r10d, r10d
.text:0000000000008A0A                 jmp     loc_8923
.text:0000000000008A0F ; ---------------------------------------------------------------------------
.text:0000000000008A0F
.text:0000000000008A0F loc_8A0F:                               ; CODE XREF: re_acquire_state_context+15↑j
.text:0000000000008A0F                 mov     dword ptr [rdi], 0
.text:0000000000008A15                 xor     r14d, r14d
.text:0000000000008A18                 jmp     loc_881C
.text:0000000000008A1D ; ---------------------------------------------------------------------------
.text:0000000000008A1D
.text:0000000000008A1D loc_8A1D:                               ; CODE XREF: re_acquire_state_context+EF↑j
.text:0000000000008A1D                 mov     rdi, r14        ; ptr
.text:0000000000008A20                 call    _free
.text:0000000000008A25                 jmp     loc_8986
.text:0000000000008A25 ; } // starts at 8770
.text:0000000000008A25 re_acquire_state_context endp
.text:0000000000008A25
.text:0000000000008A25 ; ---------------------------------------------------------------------------
.text:0000000000008A2A                 align 10h
.text:0000000000008A30
.text:0000000000008A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A30
.text:0000000000008A30
.text:0000000000008A30 re_acquire_state proc near              ; CODE XREF: merge_state_array+78↓p
.text:0000000000008A30                                         ; expand_bkref_cache+1D0↓p ...
.text:0000000000008A30 ; __unwind {
.text:0000000000008A30                 push    r15
.text:0000000000008A32                 push    r14
.text:0000000000008A34                 push    r13
.text:0000000000008A36                 push    r12
.text:0000000000008A38                 push    rbp
.text:0000000000008A39                 push    rbx
.text:0000000000008A3A                 sub     rsp, 8
.text:0000000000008A3E                 mov     rbp, [rdx+8]
.text:0000000000008A42                 test    rbp, rbp
.text:0000000000008A45                 jz      loc_8C20
.text:0000000000008A4B                 test    rbp, rbp
.text:0000000000008A4E                 jle     short loc_8A6C
.text:0000000000008A50                 mov     rax, [rdx+10h]
.text:0000000000008A54                 lea     rcx, [rax+rbp*8]
.text:0000000000008A58                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000008A60
.text:0000000000008A60 loc_8A60:                               ; CODE XREF: re_acquire_state+3A↓j
.text:0000000000008A60                 add     rbp, [rax]
.text:0000000000008A63                 add     rax, 8
.text:0000000000008A67                 cmp     rcx, rax
.text:0000000000008A6A                 jnz     short loc_8A60
.text:0000000000008A6C
.text:0000000000008A6C loc_8A6C:                               ; CODE XREF: re_acquire_state+1E↑j
.text:0000000000008A6C                 mov     rax, [rsi+88h]
.text:0000000000008A73                 mov     r14, rdx
.text:0000000000008A76                 mov     r12, rsi
.text:0000000000008A79                 mov     r13, rdi
.text:0000000000008A7C                 and     rax, rbp
.text:0000000000008A7F                 lea     rdx, [rax+rax*2]
.text:0000000000008A83                 mov     rax, [rsi+40h]
.text:0000000000008A87                 lea     rax, [rax+rdx*8]
.text:0000000000008A8B                 mov     r10, [rax]
.text:0000000000008A8E                 test    r10, r10
.text:0000000000008A91                 jle     short loc_8AC6
.text:0000000000008A93                 mov     r11, [rax+10h]
.text:0000000000008A97                 xor     r9d, r9d
.text:0000000000008A9A                 nop     word ptr [rax+rax+00h]
.text:0000000000008AA0
.text:0000000000008AA0 loc_8AA0:                               ; CODE XREF: re_acquire_state+94↓j
.text:0000000000008AA0                 mov     rbx, [r11+r9*8]
.text:0000000000008AA4                 cmp     [rbx], rbp
.text:0000000000008AA7                 jnz     short loc_8ABD
.text:0000000000008AA9                 lea     rdi, [rbx+8]
.text:0000000000008AAD                 mov     rsi, r14
.text:0000000000008AB0                 call    re_node_set_compare_part_2
.text:0000000000008AB5                 test    al, al
.text:0000000000008AB7                 jnz     loc_8BBF
.text:0000000000008ABD
.text:0000000000008ABD loc_8ABD:                               ; CODE XREF: re_acquire_state+77↑j
.text:0000000000008ABD                 add     r9, 1
.text:0000000000008AC1                 cmp     r10, r9
.text:0000000000008AC4                 jnz     short loc_8AA0
.text:0000000000008AC6
.text:0000000000008AC6 loc_8AC6:                               ; CODE XREF: re_acquire_state+61↑j
.text:0000000000008AC6                 mov     esi, 1          ; size
.text:0000000000008ACB                 mov     edi, 70h ; 'p'  ; nmemb
.text:0000000000008AD0                 call    _calloc
.text:0000000000008AD5                 test    rax, rax
.text:0000000000008AD8                 mov     rbx, rax
.text:0000000000008ADB                 jz      loc_8C08
.text:0000000000008AE1                 lea     r15, [rax+8]
.text:0000000000008AE5                 mov     rsi, r14
.text:0000000000008AE8                 mov     rdi, r15
.text:0000000000008AEB                 call    re_node_set_init_copy
.text:0000000000008AF0                 test    eax, eax
.text:0000000000008AF2                 jnz     loc_8C00
.text:0000000000008AF8                 mov     rax, [r14+8]
.text:0000000000008AFC                 mov     [rbx+50h], r15
.text:0000000000008B00                 test    rax, rax
.text:0000000000008B03                 jle     loc_8BAD
.text:0000000000008B09                 mov     rsi, [r14+10h]
.text:0000000000008B0D                 mov     r8, [r12]
.text:0000000000008B11                 lea     r9, [rsi+rax*8]
.text:0000000000008B15                 jmp     short loc_8B64
.text:0000000000008B15 ; ---------------------------------------------------------------------------
.text:0000000000008B17                 align 20h
.text:0000000000008B20
.text:0000000000008B20 loc_8B20:                               ; CODE XREF: re_acquire_state+145↓j
.text:0000000000008B20                 movzx   ecx, byte ptr [rbx+68h]
.text:0000000000008B24                 movzx   edx, byte ptr [rax+0Ah]
.text:0000000000008B28                 mov     r10d, ecx
.text:0000000000008B2B                 shr     dl, 4
.text:0000000000008B2E                 and     ecx, 0FFFFFFDFh
.text:0000000000008B31                 shr     r10b, 5
.text:0000000000008B35                 or      edx, r10d
.text:0000000000008B38                 and     edx, 1
.text:0000000000008B3B                 shl     edx, 5
.text:0000000000008B3E                 or      edx, ecx
.text:0000000000008B40                 cmp     edi, 2
.text:0000000000008B43                 mov     [rbx+68h], dl
.text:0000000000008B46                 jz      loc_8BD8
.text:0000000000008B4C                 cmp     edi, 4
.text:0000000000008B4F                 jnz     loc_8BE8
.text:0000000000008B55                 or      edx, 40h
.text:0000000000008B58                 mov     [rbx+68h], dl
.text:0000000000008B5B
.text:0000000000008B5B loc_8B5B:                               ; CODE XREF: re_acquire_state+14E↓j
.text:0000000000008B5B                                         ; re_acquire_state+1AE↓j ...
.text:0000000000008B5B                 add     rsi, 8
.text:0000000000008B5F                 cmp     r9, rsi
.text:0000000000008B62                 jz      short loc_8BAD
.text:0000000000008B64
.text:0000000000008B64 loc_8B64:                               ; CODE XREF: re_acquire_state+E5↑j
.text:0000000000008B64                                         ; re_acquire_state+17B↓j
.text:0000000000008B64                 mov     rax, [rsi]
.text:0000000000008B67                 shl     rax, 4
.text:0000000000008B6B                 add     rax, r8
.text:0000000000008B6E                 movzx   edi, byte ptr [rax+8]
.text:0000000000008B72                 cmp     edi, 1
.text:0000000000008B75                 jnz     short loc_8B20
.text:0000000000008B77                 test    dword ptr [rax+8], 3FF00h
.text:0000000000008B7E                 jz      short loc_8B5B
.text:0000000000008B80                 movzx   edx, byte ptr [rbx+68h]
.text:0000000000008B84                 movzx   eax, byte ptr [rax+0Ah]
.text:0000000000008B88                 mov     ecx, edx
.text:0000000000008B8A                 shr     al, 4
.text:0000000000008B8D                 and     edx, 0FFFFFFDFh
.text:0000000000008B90                 shr     cl, 5
.text:0000000000008B93                 or      eax, ecx
.text:0000000000008B95                 and     eax, 1
.text:0000000000008B98                 shl     eax, 5
.text:0000000000008B9B                 or      eax, edx
.text:0000000000008B9D                 mov     [rbx+68h], al
.text:0000000000008BA0
.text:0000000000008BA0 loc_8BA0:                               ; CODE XREF: re_acquire_state+1BB↓j
.text:0000000000008BA0                                         ; re_acquire_state+1CA↓j
.text:0000000000008BA0                 add     rsi, 8
.text:0000000000008BA4                 or      byte ptr [rbx+68h], 80h
.text:0000000000008BA8                 cmp     r9, rsi
.text:0000000000008BAB                 jnz     short loc_8B64
.text:0000000000008BAD
.text:0000000000008BAD loc_8BAD:                               ; CODE XREF: re_acquire_state+D3↑j
.text:0000000000008BAD                                         ; re_acquire_state+132↑j
.text:0000000000008BAD                 mov     rdx, rbp
.text:0000000000008BB0                 mov     rsi, rbx
.text:0000000000008BB3                 mov     rdi, r12
.text:0000000000008BB6                 call    register_state
.text:0000000000008BBB                 test    eax, eax
.text:0000000000008BBD                 jnz     short loc_8C14
.text:0000000000008BBF
.text:0000000000008BBF loc_8BBF:                               ; CODE XREF: re_acquire_state+87↑j
.text:0000000000008BBF                                         ; re_acquire_state+1E2↓j ...
.text:0000000000008BBF                 add     rsp, 8
.text:0000000000008BC3                 mov     rax, rbx
.text:0000000000008BC6                 pop     rbx
.text:0000000000008BC7                 pop     rbp
.text:0000000000008BC8                 pop     r12
.text:0000000000008BCA                 pop     r13
.text:0000000000008BCC                 pop     r14
.text:0000000000008BCE                 pop     r15
.text:0000000000008BD0                 retn
.text:0000000000008BD0 ; ---------------------------------------------------------------------------
.text:0000000000008BD1                 align 8
.text:0000000000008BD8
.text:0000000000008BD8 loc_8BD8:                               ; CODE XREF: re_acquire_state+116↑j
.text:0000000000008BD8                 or      edx, 10h
.text:0000000000008BDB                 mov     [rbx+68h], dl
.text:0000000000008BDE                 jmp     loc_8B5B
.text:0000000000008BDE ; ---------------------------------------------------------------------------
.text:0000000000008BE3                 align 8
.text:0000000000008BE8
.text:0000000000008BE8 loc_8BE8:                               ; CODE XREF: re_acquire_state+11F↑j
.text:0000000000008BE8                 cmp     edi, 0Ch
.text:0000000000008BEB                 jz      short loc_8BA0
.text:0000000000008BED                 test    dword ptr [rax+8], 3FF00h
.text:0000000000008BF4                 jz      loc_8B5B
.text:0000000000008BFA                 jmp     short loc_8BA0
.text:0000000000008BFA ; ---------------------------------------------------------------------------
.text:0000000000008BFC                 align 20h
.text:0000000000008C00
.text:0000000000008C00 loc_8C00:                               ; CODE XREF: re_acquire_state+C2↑j
.text:0000000000008C00                 mov     rdi, rbx        ; ptr
.text:0000000000008C03                 call    _free
.text:0000000000008C08
.text:0000000000008C08 loc_8C08:                               ; CODE XREF: re_acquire_state+AB↑j
.text:0000000000008C08                                         ; re_acquire_state+1EC↓j
.text:0000000000008C08                 mov     dword ptr [r13+0], 0Ch
.text:0000000000008C10                 xor     ebx, ebx
.text:0000000000008C12                 jmp     short loc_8BBF
.text:0000000000008C14 ; ---------------------------------------------------------------------------
.text:0000000000008C14
.text:0000000000008C14 loc_8C14:                               ; CODE XREF: re_acquire_state+18D↑j
.text:0000000000008C14                 mov     rdi, rbx        ; ptr
.text:0000000000008C17                 call    free_state
.text:0000000000008C1C                 jmp     short loc_8C08
.text:0000000000008C1C ; ---------------------------------------------------------------------------
.text:0000000000008C1E                 align 20h
.text:0000000000008C20
.text:0000000000008C20 loc_8C20:                               ; CODE XREF: re_acquire_state+15↑j
.text:0000000000008C20                 mov     dword ptr [rdi], 0
.text:0000000000008C26                 xor     ebx, ebx
.text:0000000000008C28                 jmp     short loc_8BBF
.text:0000000000008C28 ; } // starts at 8A30
.text:0000000000008C28 re_acquire_state endp
.text:0000000000008C28
.text:0000000000008C28 ; ---------------------------------------------------------------------------
.text:0000000000008C2A                 align 10h
.text:0000000000008C30
.text:0000000000008C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C30
.text:0000000000008C30
.text:0000000000008C30 merge_state_array proc near             ; CODE XREF: re_search_internal+167B↓p
.text:0000000000008C30                                         ; update_cur_sifted_state+71B↓p
.text:0000000000008C30
.text:0000000000008C30 var_70          = qword ptr -70h
.text:0000000000008C30 var_5C          = dword ptr -5Ch
.text:0000000000008C30 var_58          = byte ptr -58h
.text:0000000000008C30 ptr             = qword ptr -48h
.text:0000000000008C30 var_40          = qword ptr -40h
.text:0000000000008C30
.text:0000000000008C30 ; __unwind {
.text:0000000000008C30                 push    r15
.text:0000000000008C32                 push    r14
.text:0000000000008C34                 push    r13
.text:0000000000008C36                 push    r12
.text:0000000000008C38                 push    rbp
.text:0000000000008C39                 push    rbx
.text:0000000000008C3A                 sub     rsp, 48h
.text:0000000000008C3E                 mov     rax, fs:28h
.text:0000000000008C47                 mov     [rsp+78h+var_40], rax
.text:0000000000008C4C                 xor     eax, eax
.text:0000000000008C4E                 test    rcx, rcx
.text:0000000000008C51                 jle     loc_8CE6
.text:0000000000008C57                 lea     rax, [rsp+78h+var_5C]
.text:0000000000008C5C                 mov     r14, rdi
.text:0000000000008C5F                 mov     rbx, rsi
.text:0000000000008C62                 mov     r12, rdx
.text:0000000000008C65                 mov     rbp, rcx
.text:0000000000008C68                 xor     r15d, r15d
.text:0000000000008C6B                 lea     r13, [rsp+78h+var_58]
.text:0000000000008C70                 mov     [rsp+78h+var_70], rax
.text:0000000000008C75                 jmp     short loc_8CCC
.text:0000000000008C75 ; ---------------------------------------------------------------------------
.text:0000000000008C77                 align 20h
.text:0000000000008C80
.text:0000000000008C80 loc_8C80:                               ; CODE XREF: merge_state_array+A7↓j
.text:0000000000008C80                 test    rdx, rdx
.text:0000000000008C83                 jz      short loc_8CC3
.text:0000000000008C85                 add     rdx, 8
.text:0000000000008C89                 add     rsi, 8
.text:0000000000008C8D                 mov     rdi, r13
.text:0000000000008C90                 call    re_node_set_init_union
.text:0000000000008C95                 test    eax, eax
.text:0000000000008C97                 mov     [rsp+78h+var_5C], eax
.text:0000000000008C9B                 jnz     short loc_8CE8
.text:0000000000008C9D                 mov     rdi, [rsp+78h+var_70]
.text:0000000000008CA2                 mov     rdx, r13
.text:0000000000008CA5                 mov     rsi, r14
.text:0000000000008CA8                 call    re_acquire_state
.text:0000000000008CAD                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000008CB2                 mov     [rbx+r15*8], rax
.text:0000000000008CB6                 call    _free
.text:0000000000008CBB                 mov     eax, [rsp+78h+var_5C]
.text:0000000000008CBF                 test    eax, eax
.text:0000000000008CC1                 jnz     short loc_8CE8
.text:0000000000008CC3
.text:0000000000008CC3 loc_8CC3:                               ; CODE XREF: merge_state_array+53↑j
.text:0000000000008CC3                 add     r15, 1
.text:0000000000008CC7                 cmp     rbp, r15
.text:0000000000008CCA                 jz      short loc_8CE6
.text:0000000000008CCC
.text:0000000000008CCC loc_8CCC:                               ; CODE XREF: merge_state_array+45↑j
.text:0000000000008CCC                                         ; merge_state_array+B4↓j
.text:0000000000008CCC                 mov     rsi, [rbx+r15*8]
.text:0000000000008CD0                 mov     rdx, [r12+r15*8]
.text:0000000000008CD4                 test    rsi, rsi
.text:0000000000008CD7                 jnz     short loc_8C80
.text:0000000000008CD9                 mov     [rbx+r15*8], rdx
.text:0000000000008CDD                 add     r15, 1
.text:0000000000008CE1                 cmp     rbp, r15
.text:0000000000008CE4                 jnz     short loc_8CCC
.text:0000000000008CE6
.text:0000000000008CE6 loc_8CE6:                               ; CODE XREF: merge_state_array+21↑j
.text:0000000000008CE6                                         ; merge_state_array+9A↑j
.text:0000000000008CE6                 xor     eax, eax
.text:0000000000008CE8
.text:0000000000008CE8 loc_8CE8:                               ; CODE XREF: merge_state_array+6B↑j
.text:0000000000008CE8                                         ; merge_state_array+91↑j
.text:0000000000008CE8                 mov     rcx, [rsp+78h+var_40]
.text:0000000000008CED                 xor     rcx, fs:28h
.text:0000000000008CF6                 jnz     short loc_8D07
.text:0000000000008CF8                 add     rsp, 48h
.text:0000000000008CFC                 pop     rbx
.text:0000000000008CFD                 pop     rbp
.text:0000000000008CFE                 pop     r12
.text:0000000000008D00                 pop     r13
.text:0000000000008D02                 pop     r14
.text:0000000000008D04                 pop     r15
.text:0000000000008D06                 retn
.text:0000000000008D07 ; ---------------------------------------------------------------------------
.text:0000000000008D07
.text:0000000000008D07 loc_8D07:                               ; CODE XREF: merge_state_array+C6↑j
.text:0000000000008D07                 call    ___stack_chk_fail
.text:0000000000008D07 ; } // starts at 8C30
.text:0000000000008D07 merge_state_array endp
.text:0000000000008D07
.text:0000000000008D07 ; ---------------------------------------------------------------------------
.text:0000000000008D0C                 align 10h
.text:0000000000008D10
.text:0000000000008D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D10
.text:0000000000008D10
.text:0000000000008D10 expand_bkref_cache proc near            ; CODE XREF: check_arrival+3A0↓p
.text:0000000000008D10                                         ; check_arrival+64E↓p
.text:0000000000008D10
.text:0000000000008D10 var_A8          = qword ptr -0A8h
.text:0000000000008D10 var_A0          = qword ptr -0A0h
.text:0000000000008D10 var_98          = qword ptr -98h
.text:0000000000008D10 var_90          = qword ptr -90h
.text:0000000000008D10 var_88          = qword ptr -88h
.text:0000000000008D10 var_7C          = dword ptr -7Ch
.text:0000000000008D10 var_78          = qword ptr -78h
.text:0000000000008D10 var_70          = qword ptr -70h
.text:0000000000008D10 var_5C          = dword ptr -5Ch
.text:0000000000008D10 var_58          = qword ptr -58h
.text:0000000000008D10 var_50          = qword ptr -50h
.text:0000000000008D10 ptr             = qword ptr -48h
.text:0000000000008D10 var_40          = qword ptr -40h
.text:0000000000008D10
.text:0000000000008D10 ; __unwind {
.text:0000000000008D10                 push    r15
.text:0000000000008D12                 push    r14
.text:0000000000008D14                 push    r13
.text:0000000000008D16                 push    r12
.text:0000000000008D18                 mov     r12, rdx
.text:0000000000008D1B                 push    rbp
.text:0000000000008D1C                 push    rbx
.text:0000000000008D1D                 mov     rbx, rdi
.text:0000000000008D20                 mov     rbp, rsi
.text:0000000000008D23                 xor     esi, esi
.text:0000000000008D25                 sub     rsp, 78h
.text:0000000000008D29                 mov     rdi, [rdi+0C8h]
.text:0000000000008D30                 mov     rax, fs:28h
.text:0000000000008D39                 mov     [rsp+0A8h+var_40], rax
.text:0000000000008D3E                 xor     eax, eax
.text:0000000000008D40                 mov     [rsp+0A8h+var_88], rcx
.text:0000000000008D45                 mov     [rsp+0A8h+var_7C], r8d
.text:0000000000008D4A                 mov     rdx, rdi
.text:0000000000008D4D
.text:0000000000008D4D loc_8D4D:                               ; CODE XREF: expand_bkref_cache+F7↓j
.text:0000000000008D4D                 cmp     rsi, rdx
.text:0000000000008D50                 jge     short loc_8DA7
.text:0000000000008D52                 lea     rax, [rsi+rdx]
.text:0000000000008D56                 mov     r8, [rbx+0D8h]
.text:0000000000008D5D                 mov     rcx, rax
.text:0000000000008D60                 shr     rcx, 3Fh
.text:0000000000008D64                 add     rcx, rax
.text:0000000000008D67                 sar     rcx, 1
.text:0000000000008D6A                 lea     rax, [rcx+rcx*4]
.text:0000000000008D6E                 cmp     r12, [r8+rax*8+8]
.text:0000000000008D73                 jle     short loc_8DA2
.text:0000000000008D75                 jmp     loc_8DF8
.text:0000000000008D75 ; ---------------------------------------------------------------------------
.text:0000000000008D7A                 align 20h
.text:0000000000008D80
.text:0000000000008D80 loc_8D80:                               ; CODE XREF: expand_bkref_cache+95↓j
.text:0000000000008D80                 lea     rdx, [rsi+rcx]
.text:0000000000008D84                 mov     rax, rdx
.text:0000000000008D87                 shr     rax, 3Fh
.text:0000000000008D8B                 add     rax, rdx
.text:0000000000008D8E                 sar     rax, 1
.text:0000000000008D91                 lea     rdx, [rax+rax*4]
.text:0000000000008D95                 mov     r9, rax
.text:0000000000008D98                 cmp     r12, [r8+rdx*8+8]
.text:0000000000008D9D                 jg      short loc_8E00
.text:0000000000008D9F                 mov     rcx, rax
.text:0000000000008DA2
.text:0000000000008DA2 loc_8DA2:                               ; CODE XREF: expand_bkref_cache+63↑j
.text:0000000000008DA2                 cmp     rsi, rcx
.text:0000000000008DA5                 jl      short loc_8D80
.text:0000000000008DA7
.text:0000000000008DA7 loc_8DA7:                               ; CODE XREF: expand_bkref_cache+40↑j
.text:0000000000008DA7                 cmp     rdi, rsi
.text:0000000000008DAA                 jle     short loc_8DCD
.text:0000000000008DAC                 mov     rcx, [rbx+0D8h]
.text:0000000000008DB3                 lea     rax, [rsi+rsi*4]
.text:0000000000008DB7                 shl     rax, 3
.text:0000000000008DBB                 cmp     [rcx+rax+8], r12
.text:0000000000008DC0                 mov     [rsp+0A8h+var_78], rax
.text:0000000000008DC5                 jnz     short loc_8DCD
.text:0000000000008DC7                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000008DCB                 jnz     short loc_8E10
.text:0000000000008DCD
.text:0000000000008DCD loc_8DCD:                               ; CODE XREF: expand_bkref_cache+9A↑j
.text:0000000000008DCD                                         ; expand_bkref_cache+B5↑j ...
.text:0000000000008DCD                 xor     eax, eax
.text:0000000000008DCF
.text:0000000000008DCF loc_8DCF:                               ; CODE XREF: expand_bkref_cache+341↓j
.text:0000000000008DCF                                         ; expand_bkref_cache+356↓j ...
.text:0000000000008DCF                 mov     rbx, [rsp+0A8h+var_40]
.text:0000000000008DD4                 xor     rbx, fs:28h
.text:0000000000008DDD                 jnz     loc_90A9
.text:0000000000008DE3                 add     rsp, 78h
.text:0000000000008DE7                 pop     rbx
.text:0000000000008DE8                 pop     rbp
.text:0000000000008DE9                 pop     r12
.text:0000000000008DEB                 pop     r13
.text:0000000000008DED                 pop     r14
.text:0000000000008DEF                 pop     r15
.text:0000000000008DF1                 retn
.text:0000000000008DF1 ; ---------------------------------------------------------------------------
.text:0000000000008DF2                 align 8
.text:0000000000008DF8
.text:0000000000008DF8 loc_8DF8:                               ; CODE XREF: expand_bkref_cache+65↑j
.text:0000000000008DF8                 mov     r9, rcx
.text:0000000000008DFB                 mov     rcx, rdx
.text:0000000000008DFE                 xchg    ax, ax
.text:0000000000008E00
.text:0000000000008E00 loc_8E00:                               ; CODE XREF: expand_bkref_cache+8D↑j
.text:0000000000008E00                 lea     rsi, [r9+1]
.text:0000000000008E04                 mov     rdx, rcx
.text:0000000000008E07                 jmp     loc_8D4D
.text:0000000000008E07 ; ---------------------------------------------------------------------------
.text:0000000000008E0C                 align 10h
.text:0000000000008E10
.text:0000000000008E10 loc_8E10:                               ; CODE XREF: expand_bkref_cache+BB↑j
.text:0000000000008E10                 lea     rax, [rbp+10h]
.text:0000000000008E14                 mov     r13, [rbx+98h]
.text:0000000000008E1B                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000008E1F                 lea     rax, [rsp+0A8h+var_5C]
.text:0000000000008E24                 mov     [rsp+0A8h+var_70], rax
.text:0000000000008E29                 lea     rax, [rsp+0A8h+var_58]
.text:0000000000008E2E                 mov     [rsp+0A8h+var_98], rax
.text:0000000000008E33
.text:0000000000008E33 loc_8E33:                               ; CODE XREF: expand_bkref_cache+2E1↓j
.text:0000000000008E33                 mov     rax, [rsp+0A8h+var_78]
.text:0000000000008E38                 lea     r15, [rcx+rax]
.text:0000000000008E3C                 jmp     loc_8F18
.text:0000000000008E3C ; ---------------------------------------------------------------------------
.text:0000000000008E41                 align 8
.text:0000000000008E48
.text:0000000000008E48 loc_8E48:                               ; CODE XREF: expand_bkref_cache+234↓j
.text:0000000000008E48                 mov     rax, [r13+18h]
.text:0000000000008E4C                 mov     rcx, [rax+r10*8]
.text:0000000000008E50                 mov     r10, [rbx+0B8h]
.text:0000000000008E57                 lea     rax, ds:0[r14*8]
.text:0000000000008E5F                 mov     [rsp+0A8h+var_90], rax
.text:0000000000008E64                 add     r10, rax
.text:0000000000008E67                 mov     [rsp+0A8h+var_A0], rcx
.text:0000000000008E6C                 mov     r9, [r10]
.text:0000000000008E6F                 test    r9, r9
.text:0000000000008E72                 jz      loc_9000
.text:0000000000008E78                 mov     rdi, [r9+10h]
.text:0000000000008E7C                 lea     rsi, [r9+18h]
.text:0000000000008E80                 mov     rdx, rcx
.text:0000000000008E83                 call    re_node_set_contains_isra_3
.text:0000000000008E88                 test    rax, rax
.text:0000000000008E8B                 jnz     short loc_8F09
.text:0000000000008E8D                 mov     rdi, [rsp+0A8h+var_98]
.text:0000000000008E92                 lea     rsi, [r9+8]
.text:0000000000008E96                 call    re_node_set_init_copy
.text:0000000000008E9B                 mov     rsi, [rsp+0A8h+var_A0]
.text:0000000000008EA0                 mov     rdi, [rsp+0A8h+var_98]
.text:0000000000008EA5                 mov     [rsp+0A8h+var_5C], eax
.text:0000000000008EA9                 call    re_node_set_insert
.text:0000000000008EAE                 mov     edx, [rsp+0A8h+var_5C]
.text:0000000000008EB2                 test    edx, edx
.text:0000000000008EB4                 jnz     loc_9056
.text:0000000000008EBA                 cmp     al, 1
.text:0000000000008EBC                 jnz     loc_9056
.text:0000000000008EC2                 mov     r10, [rsp+0A8h+var_90]
.text:0000000000008EC7                 add     r10, [rbx+0B8h]
.text:0000000000008ECE
.text:0000000000008ECE loc_8ECE:                               ; CODE XREF: expand_bkref_cache+330↓j
.text:0000000000008ECE                 mov     rdx, [rsp+0A8h+var_98]
.text:0000000000008ED3                 mov     rdi, [rsp+0A8h+var_70]
.text:0000000000008ED8                 mov     rsi, r13
.text:0000000000008EDB                 mov     [rsp+0A8h+var_A0], r10
.text:0000000000008EE0                 call    re_acquire_state
.text:0000000000008EE5                 mov     r10, [rsp+0A8h+var_A0]
.text:0000000000008EEA                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000008EEF                 mov     [r10], rax
.text:0000000000008EF2                 call    _free
.text:0000000000008EF7                 mov     rax, [rbx+0B8h]
.text:0000000000008EFE                 cmp     qword ptr [rax+r14*8], 0
.text:0000000000008F03                 jz      loc_9045
.text:0000000000008F09
.text:0000000000008F09 loc_8F09:                               ; CODE XREF: expand_bkref_cache+17B↑j
.text:0000000000008F09                                         ; expand_bkref_cache+221↓j ...
.text:0000000000008F09                 add     r15, 28h ; '('
.text:0000000000008F0D                 cmp     byte ptr [r15-8], 0
.text:0000000000008F12                 jz      loc_8DCD
.text:0000000000008F18
.text:0000000000008F18 loc_8F18:                               ; CODE XREF: expand_bkref_cache+12C↑j
.text:0000000000008F18                 mov     r10, [r15]
.text:0000000000008F1B                 mov     r9, [rbp+8]
.text:0000000000008F1F                 mov     rsi, [rsp+0A8h+var_A8]
.text:0000000000008F23                 mov     rdx, r10
.text:0000000000008F26                 mov     rdi, r9
.text:0000000000008F29                 call    re_node_set_contains_isra_3
.text:0000000000008F2E                 test    rax, rax
.text:0000000000008F31                 jz      short loc_8F09
.text:0000000000008F33                 mov     r8, [r15+18h]
.text:0000000000008F37                 add     r8, r12
.text:0000000000008F3A                 mov     r14, r8
.text:0000000000008F3D                 sub     r14, [r15+10h]
.text:0000000000008F41                 cmp     r12, r14
.text:0000000000008F44                 jnz     loc_8E48
.text:0000000000008F4A                 mov     rcx, [r13+28h]
.text:0000000000008F4E                 lea     rax, [r10+r10*2]
.text:0000000000008F52                 mov     rsi, [rsp+0A8h+var_A8]
.text:0000000000008F56                 mov     rdi, r9
.text:0000000000008F59                 lea     rax, [rcx+rax*8]
.text:0000000000008F5D                 mov     rax, [rax+10h]
.text:0000000000008F61                 mov     r14, [rax]
.text:0000000000008F64                 mov     rdx, r14
.text:0000000000008F67                 call    re_node_set_contains_isra_3
.text:0000000000008F6C                 test    rax, rax
.text:0000000000008F6F                 jnz     short loc_8F09
.text:0000000000008F71                 mov     edi, 8          ; size
.text:0000000000008F76                 mov     [rsp+0A8h+var_58], 1
.text:0000000000008F7F                 mov     [rsp+0A8h+var_50], 1
.text:0000000000008F88                 call    _malloc
.text:0000000000008F8D                 test    rax, rax
.text:0000000000008F90                 mov     [rsp+0A8h+ptr], rax
.text:0000000000008F95                 jz      loc_908D
.text:0000000000008F9B                 mov     [rax], r14
.text:0000000000008F9E                 xor     eax, eax
.text:0000000000008FA0
.text:0000000000008FA0 loc_8FA0:                               ; CODE XREF: expand_bkref_cache+394↓j
.text:0000000000008FA0                 mov     r15, [rsp+0A8h+var_98]
.text:0000000000008FA5                 mov     rdx, [rsp+0A8h+var_88]
.text:0000000000008FAA                 mov     rdi, r13
.text:0000000000008FAD                 mov     ecx, [rsp+0A8h+var_7C]
.text:0000000000008FB1                 mov     [rsp+0A8h+var_5C], eax
.text:0000000000008FB5                 mov     rsi, r15
.text:0000000000008FB8                 call    check_arrival_expand_ecl
.text:0000000000008FBD                 mov     rsi, r15
.text:0000000000008FC0                 mov     rdi, rbp
.text:0000000000008FC3                 mov     r14d, eax
.text:0000000000008FC6                 call    re_node_set_merge
.text:0000000000008FCB                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000008FD0                 mov     r15d, eax
.text:0000000000008FD3                 call    _free
.text:0000000000008FD8                 mov     eax, [rsp+0A8h+var_5C]
.text:0000000000008FDC                 mov     edx, r14d
.text:0000000000008FDF                 or      edx, r15d
.text:0000000000008FE2                 or      edx, eax
.text:0000000000008FE4                 jnz     loc_9076
.text:0000000000008FEA                 mov     rcx, [rbx+0D8h]
.text:0000000000008FF1                 jmp     loc_8E33
.text:0000000000008FF1 ; ---------------------------------------------------------------------------
.text:0000000000008FF6                 align 20h
.text:0000000000009000
.text:0000000000009000 loc_9000:                               ; CODE XREF: expand_bkref_cache+162↑j
.text:0000000000009000                 mov     edi, 8          ; size
.text:0000000000009005                 mov     [rsp+0A8h+var_90], r10
.text:000000000000900A                 mov     [rsp+0A8h+var_58], 1
.text:0000000000009013                 mov     [rsp+0A8h+var_50], 1
.text:000000000000901C                 call    _malloc
.text:0000000000009021                 test    rax, rax
.text:0000000000009024                 mov     [rsp+0A8h+ptr], rax
.text:0000000000009029                 jz      short loc_906C
.text:000000000000902B                 mov     rdi, [rsp+0A8h+var_A0]
.text:0000000000009030                 mov     [rsp+0A8h+var_5C], 0
.text:0000000000009038                 mov     r10, [rsp+0A8h+var_90]
.text:000000000000903D                 mov     [rax], rdi
.text:0000000000009040                 jmp     loc_8ECE
.text:0000000000009045 ; ---------------------------------------------------------------------------
.text:0000000000009045
.text:0000000000009045 loc_9045:                               ; CODE XREF: expand_bkref_cache+1F3↑j
.text:0000000000009045                 mov     eax, [rsp+0A8h+var_5C]
.text:0000000000009049                 test    eax, eax
.text:000000000000904B                 jz      loc_8F09
.text:0000000000009051                 jmp     loc_8DCF
.text:0000000000009056 ; ---------------------------------------------------------------------------
.text:0000000000009056
.text:0000000000009056 loc_9056:                               ; CODE XREF: expand_bkref_cache+1A4↑j
.text:0000000000009056                                         ; expand_bkref_cache+1AC↑j
.text:0000000000009056                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000905B                 call    _free
.text:0000000000009060                 mov     eax, [rsp+0A8h+var_5C]
.text:0000000000009064                 test    eax, eax
.text:0000000000009066                 jnz     loc_8DCF
.text:000000000000906C
.text:000000000000906C loc_906C:                               ; CODE XREF: expand_bkref_cache+319↑j
.text:000000000000906C                 mov     eax, 0Ch
.text:0000000000009071                 jmp     loc_8DCF
.text:0000000000009076 ; ---------------------------------------------------------------------------
.text:0000000000009076
.text:0000000000009076 loc_9076:                               ; CODE XREF: expand_bkref_cache+2D4↑j
.text:0000000000009076                 test    eax, eax
.text:0000000000009078                 jnz     loc_8DCF
.text:000000000000907E                 test    r14d, r14d
.text:0000000000009081                 mov     eax, r14d
.text:0000000000009084                 cmovz   eax, r15d
.text:0000000000009088                 jmp     loc_8DCF
.text:000000000000908D ; ---------------------------------------------------------------------------
.text:000000000000908D
.text:000000000000908D loc_908D:                               ; CODE XREF: expand_bkref_cache+285↑j
.text:000000000000908D                 mov     [rsp+0A8h+var_50], 0
.text:0000000000009096                 mov     [rsp+0A8h+var_58], 0
.text:000000000000909F                 mov     eax, 0Ch
.text:00000000000090A4                 jmp     loc_8FA0
.text:00000000000090A9 ; ---------------------------------------------------------------------------
.text:00000000000090A9
.text:00000000000090A9 loc_90A9:                               ; CODE XREF: expand_bkref_cache+CD↑j
.text:00000000000090A9                 call    ___stack_chk_fail
.text:00000000000090A9 ; } // starts at 8D10
.text:00000000000090A9 expand_bkref_cache endp
.text:00000000000090A9
.text:00000000000090A9 ; ---------------------------------------------------------------------------
.text:00000000000090AE                 align 10h
.text:00000000000090B0
.text:00000000000090B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090B0
.text:00000000000090B0
.text:00000000000090B0 check_subexp_matching_top_isra_18 proc near
.text:00000000000090B0                                         ; CODE XREF: transit_state_bkref_isra_34+808↓p
.text:00000000000090B0                                         ; merge_state_with_log+1A1↓p ...
.text:00000000000090B0
.text:00000000000090B0 var_50          = qword ptr -50h
.text:00000000000090B0 var_48          = qword ptr -48h
.text:00000000000090B0 var_40          = qword ptr -40h
.text:00000000000090B0
.text:00000000000090B0 ; __unwind {
.text:00000000000090B0                 push    r15
.text:00000000000090B2                 push    r14
.text:00000000000090B4                 push    r13
.text:00000000000090B6                 push    r12
.text:00000000000090B8                 push    rbp
.text:00000000000090B9                 push    rbx
.text:00000000000090BA                 sub     rsp, 28h
.text:00000000000090BE                 cmp     qword ptr [rsi], 0
.text:00000000000090C2                 mov     r13, [rdi+98h]
.text:00000000000090C9                 jle     loc_9190
.text:00000000000090CF                 mov     r14, rdx
.text:00000000000090D2                 mov     r12, rsi
.text:00000000000090D5                 mov     r15, rdi
.text:00000000000090D8                 xor     ebx, ebx
.text:00000000000090DA                 jmp     short loc_90EE
.text:00000000000090DA ; ---------------------------------------------------------------------------
.text:00000000000090DC                 align 20h
.text:00000000000090E0
.text:00000000000090E0 loc_90E0:                               ; CODE XREF: check_subexp_matching_top_isra_18+54↓j
.text:00000000000090E0                                         ; check_subexp_matching_top_isra_18+5D↓j ...
.text:00000000000090E0                 add     rbx, 1
.text:00000000000090E4                 cmp     rbx, [r12]
.text:00000000000090E8                 jge     loc_9190
.text:00000000000090EE
.text:00000000000090EE loc_90EE:                               ; CODE XREF: check_subexp_matching_top_isra_18+2A↑j
.text:00000000000090EE                                         ; check_subexp_matching_top_isra_18+D3↓j
.text:00000000000090EE                 mov     rax, [r14]
.text:00000000000090F1                 mov     rbp, [rax+rbx*8]
.text:00000000000090F5                 mov     rax, rbp
.text:00000000000090F8                 shl     rax, 4
.text:00000000000090FC                 add     rax, [r13+0]
.text:0000000000009100                 cmp     byte ptr [rax+8], 8
.text:0000000000009104                 jnz     short loc_90E0
.text:0000000000009106                 mov     rax, [rax]
.text:0000000000009109                 cmp     rax, 3Fh ; '?'
.text:000000000000910D                 jg      short loc_90E0
.text:000000000000910F                 mov     rsi, [r13+0A0h]
.text:0000000000009116                 bt      rsi, rax
.text:000000000000911A                 jnb     short loc_90E0
.text:000000000000911C                 mov     r8, [r15+0E8h]
.text:0000000000009123                 cmp     r8, [r15+0F0h]
.text:000000000000912A                 mov     r9, [r15+0F8h]
.text:0000000000009131                 jz      short loc_91A8
.text:0000000000009133
.text:0000000000009133 loc_9133:                               ; CODE XREF: check_subexp_matching_top_isra_18+13C↓j
.text:0000000000009133                 mov     esi, 30h ; '0'  ; size
.text:0000000000009138                 mov     edi, 1          ; nmemb
.text:000000000000913D                 mov     [rsp+58h+var_48], r9
.text:0000000000009142                 mov     [rsp+58h+var_50], r8
.text:0000000000009147                 mov     [rsp+58h+var_40], rcx
.text:000000000000914C                 call    _calloc
.text:0000000000009151                 mov     r8, [rsp+58h+var_50]
.text:0000000000009156                 mov     r9, [rsp+58h+var_48]
.text:000000000000915B                 test    rax, rax
.text:000000000000915E                 mov     [r9+r8*8], rax
.text:0000000000009162                 jz      short loc_91A1
.text:0000000000009164                 add     r8, 1
.text:0000000000009168                 add     rbx, 1
.text:000000000000916C                 mov     rcx, [rsp+58h+var_40]
.text:0000000000009171                 mov     [r15+0E8h], r8
.text:0000000000009178                 cmp     rbx, [r12]
.text:000000000000917C                 mov     [rax+8], rbp
.text:0000000000009180                 mov     [rax], rcx
.text:0000000000009183                 jl      loc_90EE
.text:0000000000009189                 nop     dword ptr [rax+00000000h]
.text:0000000000009190
.text:0000000000009190 loc_9190:                               ; CODE XREF: check_subexp_matching_top_isra_18+19↑j
.text:0000000000009190                                         ; check_subexp_matching_top_isra_18+38↑j
.text:0000000000009190                 xor     eax, eax
.text:0000000000009192
.text:0000000000009192 loc_9192:                               ; CODE XREF: check_subexp_matching_top_isra_18+F6↓j
.text:0000000000009192                 add     rsp, 28h
.text:0000000000009196                 pop     rbx
.text:0000000000009197                 pop     rbp
.text:0000000000009198                 pop     r12
.text:000000000000919A                 pop     r13
.text:000000000000919C                 pop     r14
.text:000000000000919E                 pop     r15
.text:00000000000091A0                 retn
.text:00000000000091A1 ; ---------------------------------------------------------------------------
.text:00000000000091A1
.text:00000000000091A1 loc_91A1:                               ; CODE XREF: check_subexp_matching_top_isra_18+B2↑j
.text:00000000000091A1                                         ; check_subexp_matching_top_isra_18+120↓j
.text:00000000000091A1                 mov     eax, 0Ch
.text:00000000000091A6                 jmp     short loc_9192
.text:00000000000091A8 ; ---------------------------------------------------------------------------
.text:00000000000091A8
.text:00000000000091A8 loc_91A8:                               ; CODE XREF: check_subexp_matching_top_isra_18+81↑j
.text:00000000000091A8                 lea     rax, [r8+r8]
.text:00000000000091AC                 mov     rsi, r8
.text:00000000000091AF                 mov     rdi, r9         ; ptr
.text:00000000000091B2                 shl     rsi, 4          ; size
.text:00000000000091B6                 mov     [rsp+58h+var_50], rcx
.text:00000000000091BB                 mov     [rsp+58h+var_48], rax
.text:00000000000091C0                 call    _realloc
.text:00000000000091C5                 test    rax, rax
.text:00000000000091C8                 mov     r9, rax
.text:00000000000091CB                 mov     rcx, [rsp+58h+var_50]
.text:00000000000091D0                 jz      short loc_91A1
.text:00000000000091D2                 mov     [r15+0F8h], rax
.text:00000000000091D9                 mov     rax, [rsp+58h+var_48]
.text:00000000000091DE                 mov     r8, [r15+0E8h]
.text:00000000000091E5                 mov     [r15+0F0h], rax
.text:00000000000091EC                 jmp     loc_9133
.text:00000000000091EC ; } // starts at 90B0
.text:00000000000091EC check_subexp_matching_top_isra_18 endp
.text:00000000000091EC
.text:00000000000091EC ; ---------------------------------------------------------------------------
.text:00000000000091F1                 align 20h
.text:0000000000009200
.text:0000000000009200 ; =============== S U B R O U T I N E =======================================
.text:0000000000009200
.text:0000000000009200
.text:0000000000009200 re_string_context_at proc near          ; CODE XREF: check_node_accept+6D↓p
.text:0000000000009200                                         ; check_halt_state_context_isra_20+16↓p ...
.text:0000000000009200 ; __unwind {
.text:0000000000009200                 push    rbp
.text:0000000000009201                 push    rbx
.text:0000000000009202                 mov     rbp, rdi
.text:0000000000009205                 sub     rsp, 8
.text:0000000000009209                 test    rsi, rsi
.text:000000000000920C                 js      short loc_9260
.text:000000000000920E                 cmp     [rdi+58h], rsi
.text:0000000000009212                 jz      loc_92B8
.text:0000000000009218                 cmp     dword ptr [rdi+90h], 1
.text:000000000000921F                 jle     short loc_9270
.text:0000000000009221                 mov     rax, [rdi+10h]
.text:0000000000009225                 jmp     short loc_923A
.text:0000000000009225 ; ---------------------------------------------------------------------------
.text:0000000000009227                 align 10h
.text:0000000000009230
.text:0000000000009230 loc_9230:                               ; CODE XREF: re_string_context_at+40↓j
.text:0000000000009230                 sub     rsi, 1
.text:0000000000009234                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000009238                 jz      short loc_9260
.text:000000000000923A
.text:000000000000923A loc_923A:                               ; CODE XREF: re_string_context_at+25↑j
.text:000000000000923A                 mov     ebx, [rax+rsi*4]
.text:000000000000923D                 cmp     ebx, 0FFFFFFFFh
.text:0000000000009240                 jz      short loc_9230
.text:0000000000009242                 cmp     byte ptr [rbp+8Eh], 0
.text:0000000000009249                 jnz     short loc_92C8
.text:000000000000924B
.text:000000000000924B loc_924B:                               ; CODE XREF: re_string_context_at+D6↓j
.text:000000000000924B                 xor     eax, eax
.text:000000000000924D                 cmp     ebx, 0Ah
.text:0000000000009250                 jz      short loc_929C
.text:0000000000009252
.text:0000000000009252 loc_9252:                               ; CODE XREF: re_string_context_at+93↓j
.text:0000000000009252                                         ; re_string_context_at+9A↓j ...
.text:0000000000009252                 add     rsp, 8
.text:0000000000009256                 pop     rbx
.text:0000000000009257                 pop     rbp
.text:0000000000009258                 retn
.text:0000000000009258 ; ---------------------------------------------------------------------------
.text:0000000000009259                 align 20h
.text:0000000000009260
.text:0000000000009260 loc_9260:                               ; CODE XREF: re_string_context_at+C↑j
.text:0000000000009260                                         ; re_string_context_at+38↑j
.text:0000000000009260                 mov     eax, [rbp+70h]
.text:0000000000009263                 add     rsp, 8
.text:0000000000009267                 pop     rbx
.text:0000000000009268                 pop     rbp
.text:0000000000009269                 retn
.text:0000000000009269 ; ---------------------------------------------------------------------------
.text:000000000000926A                 align 10h
.text:0000000000009270
.text:0000000000009270 loc_9270:                               ; CODE XREF: re_string_context_at+1F↑j
.text:0000000000009270                 mov     rax, [rdi+8]
.text:0000000000009274                 mov     rcx, [rdi+80h]
.text:000000000000927B                 movzx   eax, byte ptr [rax+rsi]
.text:000000000000927F                 mov     rdx, rax
.text:0000000000009282                 sar     rax, 6
.text:0000000000009286                 mov     rcx, [rcx+rax*8]
.text:000000000000928A                 mov     eax, 1
.text:000000000000928F                 bt      rcx, rdx
.text:0000000000009293                 jb      short loc_9252
.text:0000000000009295                 xor     eax, eax
.text:0000000000009297                 cmp     dl, 0Ah
.text:000000000000929A                 jnz     short loc_9252
.text:000000000000929C
.text:000000000000929C loc_929C:                               ; CODE XREF: re_string_context_at+50↑j
.text:000000000000929C                 xor     eax, eax
.text:000000000000929E                 cmp     byte ptr [rbp+8Dh], 0
.text:00000000000092A5                 setnz   al
.text:00000000000092A8                 add     rsp, 8
.text:00000000000092AC                 add     eax, eax
.text:00000000000092AE                 pop     rbx
.text:00000000000092AF                 pop     rbp
.text:00000000000092B0                 retn
.text:00000000000092B0 ; ---------------------------------------------------------------------------
.text:00000000000092B1                 align 8
.text:00000000000092B8
.text:00000000000092B8 loc_92B8:                               ; CODE XREF: re_string_context_at+12↑j
.text:00000000000092B8                 and     edx, 2
.text:00000000000092BB                 cmp     edx, 1
.text:00000000000092BE                 sbb     eax, eax
.text:00000000000092C0                 and     eax, 2
.text:00000000000092C3                 add     eax, 8
.text:00000000000092C6                 jmp     short loc_9252
.text:00000000000092C8 ; ---------------------------------------------------------------------------
.text:00000000000092C8
.text:00000000000092C8 loc_92C8:                               ; CODE XREF: re_string_context_at+49↑j
.text:00000000000092C8                 mov     edi, ebx        ; wc
.text:00000000000092CA                 call    _iswalnum
.text:00000000000092CF                 test    eax, eax
.text:00000000000092D1                 jnz     short loc_92DC
.text:00000000000092D3                 cmp     ebx, 5Fh ; '_'
.text:00000000000092D6                 jnz     loc_924B
.text:00000000000092DC
.text:00000000000092DC loc_92DC:                               ; CODE XREF: re_string_context_at+D1↑j
.text:00000000000092DC                 mov     eax, 1
.text:00000000000092E1                 jmp     loc_9252
.text:00000000000092E1 ; } // starts at 9200
.text:00000000000092E1 re_string_context_at endp
.text:00000000000092E1
.text:00000000000092E1 ; ---------------------------------------------------------------------------
.text:00000000000092E6                 align 10h
.text:00000000000092F0
.text:00000000000092F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092F0
.text:00000000000092F0
.text:00000000000092F0 check_node_accept proc near             ; CODE XREF: check_arrival+1EF↓p
.text:00000000000092F0                                         ; set_regs+17A↓p ...
.text:00000000000092F0 ; __unwind {
.text:00000000000092F0                 mov     rax, [rdi+8]
.text:00000000000092F4                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000092F8                 movzx   eax, byte ptr [rsi+8]
.text:00000000000092FC                 cmp     al, 3
.text:00000000000092FE                 jz      loc_93B8
.text:0000000000009304                 jbe     loc_93A0
.text:000000000000930A                 cmp     al, 5
.text:000000000000930C                 jz      short loc_9320
.text:000000000000930E                 cmp     al, 7
.text:0000000000009310                 jnz     loc_93B0
.text:0000000000009316                 xor     eax, eax
.text:0000000000009318                 test    cl, cl
.text:000000000000931A                 js      locret_93AA
.text:0000000000009320
.text:0000000000009320 loc_9320:                               ; CODE XREF: check_node_accept+1C↑j
.text:0000000000009320                 cmp     cl, 0Ah
.text:0000000000009323                 jz      loc_93E8
.text:0000000000009329                 test    cl, cl
.text:000000000000932B                 jnz     short loc_9340
.text:000000000000932D                 mov     rcx, [rdi+98h]
.text:0000000000009334                 xor     eax, eax
.text:0000000000009336                 test    byte ptr [rcx+0D8h], 80h
.text:000000000000933D                 jnz     short locret_93AA
.text:000000000000933F                 nop
.text:0000000000009340
.text:0000000000009340 loc_9340:                               ; CODE XREF: check_node_accept+3B↑j
.text:0000000000009340                                         ; check_node_accept+B8↓j ...
.text:0000000000009340                 push    rbx
.text:0000000000009341                 mov     ebx, [rsi+8]
.text:0000000000009344                 mov     eax, 1
.text:0000000000009349                 test    ebx, 3FF00h
.text:000000000000934F                 jz      short loc_939C
.text:0000000000009351                 mov     rsi, rdx
.text:0000000000009354                 mov     edx, [rdi+0A0h]
.text:000000000000935A                 shr     ebx, 8
.text:000000000000935D                 call    re_string_context_at
.text:0000000000009362                 mov     ecx, ebx
.text:0000000000009364                 mov     edx, eax
.text:0000000000009366                 and     cx, 3FFh
.text:000000000000936B                 test    bl, 4
.text:000000000000936E                 jz      short loc_93D8
.text:0000000000009370                 xor     eax, eax
.text:0000000000009372                 test    dl, 1
.text:0000000000009375                 jz      short loc_939C
.text:0000000000009377                 and     ebx, 8
.text:000000000000937A                 jnz     short loc_939C
.text:000000000000937C
.text:000000000000937C loc_937C:                               ; CODE XREF: check_node_accept+EB↓j
.text:000000000000937C                                         ; check_node_accept+EF↓j
.text:000000000000937C                 test    cl, 20h
.text:000000000000937F                 jz      short loc_9388
.text:0000000000009381                 xor     eax, eax
.text:0000000000009383                 test    dl, 2
.text:0000000000009386                 jz      short loc_939C
.text:0000000000009388
.text:0000000000009388 loc_9388:                               ; CODE XREF: check_node_accept+8F↑j
.text:0000000000009388                 shr     edx, 3
.text:000000000000938B                 mov     eax, 1
.text:0000000000009390                 and     edx, 1
.text:0000000000009393                 and     ecx, 80h
.text:0000000000009399                 cmovnz  eax, edx
.text:000000000000939C
.text:000000000000939C loc_939C:                               ; CODE XREF: check_node_accept+5F↑j
.text:000000000000939C                                         ; check_node_accept+85↑j ...
.text:000000000000939C                 pop     rbx
.text:000000000000939D                 retn
.text:000000000000939D ; ---------------------------------------------------------------------------
.text:000000000000939E                 align 20h
.text:00000000000093A0
.text:00000000000093A0 loc_93A0:                               ; CODE XREF: check_node_accept+14↑j
.text:00000000000093A0                 cmp     al, 1
.text:00000000000093A2                 jnz     short loc_93B0
.text:00000000000093A4                 xor     eax, eax
.text:00000000000093A6                 cmp     [rsi], cl
.text:00000000000093A8                 jz      short loc_9340
.text:00000000000093AA
.text:00000000000093AA locret_93AA:                            ; CODE XREF: check_node_accept+2A↑j
.text:00000000000093AA                                         ; check_node_accept+4D↑j
.text:00000000000093AA                 rep retn
.text:00000000000093AA ; ---------------------------------------------------------------------------
.text:00000000000093AC                 align 10h
.text:00000000000093B0
.text:00000000000093B0 loc_93B0:                               ; CODE XREF: check_node_accept+20↑j
.text:00000000000093B0                                         ; check_node_accept+B2↑j
.text:00000000000093B0                 xor     eax, eax
.text:00000000000093B2                 retn
.text:00000000000093B2 ; ---------------------------------------------------------------------------
.text:00000000000093B3                 align 8
.text:00000000000093B8
.text:00000000000093B8 loc_93B8:                               ; CODE XREF: check_node_accept+E↑j
.text:00000000000093B8                 mov     r8, [rsi]
.text:00000000000093BB                 movzx   eax, cl
.text:00000000000093BE                 sar     rax, 6
.text:00000000000093C2                 mov     r8, [r8+rax*8]
.text:00000000000093C6                 xor     eax, eax
.text:00000000000093C8                 bt      r8, rcx
.text:00000000000093CC                 jb      loc_9340
.text:00000000000093D2                 rep retn
.text:00000000000093D2 ; ---------------------------------------------------------------------------
.text:00000000000093D4                 align 8
.text:00000000000093D8
.text:00000000000093D8 loc_93D8:                               ; CODE XREF: check_node_accept+7E↑j
.text:00000000000093D8                 and     ebx, 8
.text:00000000000093DB                 jz      short loc_937C
.text:00000000000093DD                 test    al, 1
.text:00000000000093DF                 jz      short loc_937C
.text:00000000000093E1                 xor     eax, eax
.text:00000000000093E3                 pop     rbx
.text:00000000000093E4                 retn
.text:00000000000093E4 ; ---------------------------------------------------------------------------
.text:00000000000093E5                 align 8
.text:00000000000093E8
.text:00000000000093E8 loc_93E8:                               ; CODE XREF: check_node_accept+33↑j
.text:00000000000093E8                 mov     rcx, [rdi+98h]
.text:00000000000093EF                 xor     eax, eax
.text:00000000000093F1                 test    byte ptr [rcx+0D8h], 40h
.text:00000000000093F8                 jnz     loc_9340
.text:00000000000093FE                 rep retn
.text:00000000000093FE ; } // starts at 92F0
.text:00000000000093FE check_node_accept endp
.text:00000000000093FE
.text:0000000000009400
.text:0000000000009400 ; =============== S U B R O U T I N E =======================================
.text:0000000000009400
.text:0000000000009400
.text:0000000000009400 check_halt_state_context_isra_20 proc near
.text:0000000000009400                                         ; CODE XREF: re_search_internal+8C7↓p
.text:0000000000009400                                         ; re_search_internal+A3C↓p ...
.text:0000000000009400 ; __unwind {
.text:0000000000009400                 push    r12
.text:0000000000009402                 mov     r12, rdx
.text:0000000000009405                 push    rbp
.text:0000000000009406                 push    rbx
.text:0000000000009407                 mov     edx, [rdi+0A0h]
.text:000000000000940D                 mov     rbx, rsi
.text:0000000000009410                 mov     rsi, rcx
.text:0000000000009413                 mov     rbp, rdi
.text:0000000000009416                 call    re_string_context_at
.text:000000000000941B                 test    rbx, rbx
.text:000000000000941E                 jle     loc_94C8
.text:0000000000009424                 mov     rdx, [rbp+98h]
.text:000000000000942B                 mov     r11d, eax
.text:000000000000942E                 mov     ebp, eax
.text:0000000000009430                 and     eax, 1
.text:0000000000009433                 mov     r9, [r12]
.text:0000000000009437                 xor     esi, esi
.text:0000000000009439                 and     ebp, 8
.text:000000000000943C                 and     r11d, 2
.text:0000000000009440                 mov     r10d, eax
.text:0000000000009443                 mov     r8, [rdx]
.text:0000000000009446                 jmp     short loc_9459
.text:0000000000009446 ; ---------------------------------------------------------------------------
.text:0000000000009448                 align 10h
.text:0000000000009450
.text:0000000000009450 loc_9450:                               ; CODE XREF: check_halt_state_context_isra_20+78↓j
.text:0000000000009450                                         ; check_halt_state_context_isra_20+87↓j ...
.text:0000000000009450                 add     rsi, 1
.text:0000000000009454                 cmp     rsi, rbx
.text:0000000000009457                 jz      short loc_94C8
.text:0000000000009459
.text:0000000000009459 loc_9459:                               ; CODE XREF: check_halt_state_context_isra_20+46↑j
.text:0000000000009459                 mov     rax, [r9+rsi*8]
.text:000000000000945D                 mov     rdx, rax
.text:0000000000009460                 shl     rdx, 4
.text:0000000000009464                 add     rdx, r8
.text:0000000000009467                 mov     ecx, [rdx+8]
.text:000000000000946A                 shr     ecx, 8
.text:000000000000946D                 mov     edi, ecx
.text:000000000000946F                 and     di, 3FFh
.text:0000000000009474                 cmp     byte ptr [rdx+8], 2
.text:0000000000009478                 jnz     short loc_9450
.text:000000000000947A                 test    di, di
.text:000000000000947D                 jz      short loc_94A5
.text:000000000000947F                 test    cl, 4
.text:0000000000009482                 jz      short loc_94B0
.text:0000000000009484                 test    r10d, r10d
.text:0000000000009487                 jz      short loc_9450
.text:0000000000009489                 and     ecx, 8
.text:000000000000948C                 jnz     short loc_9450
.text:000000000000948E
.text:000000000000948E loc_948E:                               ; CODE XREF: check_halt_state_context_isra_20+B3↓j
.text:000000000000948E                 test    dil, 20h
.text:0000000000009492                 jz      short loc_9499
.text:0000000000009494
.text:0000000000009494 loc_9494:                               ; CODE XREF: check_halt_state_context_isra_20+C0↓j
.text:0000000000009494                 test    r11d, r11d
.text:0000000000009497                 jz      short loc_9450
.text:0000000000009499
.text:0000000000009499 loc_9499:                               ; CODE XREF: check_halt_state_context_isra_20+92↑j
.text:0000000000009499                                         ; check_halt_state_context_isra_20+BE↓j
.text:0000000000009499                 and     edi, 80h
.text:000000000000949F                 jz      short loc_94A5
.text:00000000000094A1                 test    ebp, ebp
.text:00000000000094A3                 jz      short loc_9450
.text:00000000000094A5
.text:00000000000094A5 loc_94A5:                               ; CODE XREF: check_halt_state_context_isra_20+7D↑j
.text:00000000000094A5                                         ; check_halt_state_context_isra_20+9F↑j
.text:00000000000094A5                 pop     rbx
.text:00000000000094A6                 pop     rbp
.text:00000000000094A7                 pop     r12
.text:00000000000094A9                 retn
.text:00000000000094A9 ; ---------------------------------------------------------------------------
.text:00000000000094AA                 align 10h
.text:00000000000094B0
.text:00000000000094B0 loc_94B0:                               ; CODE XREF: check_halt_state_context_isra_20+82↑j
.text:00000000000094B0                 and     ecx, 8
.text:00000000000094B3                 jz      short loc_948E
.text:00000000000094B5                 test    r10d, r10d
.text:00000000000094B8                 jnz     short loc_9450
.text:00000000000094BA                 test    dil, 20h
.text:00000000000094BE                 jz      short loc_9499
.text:00000000000094C0                 jmp     short loc_9494
.text:00000000000094C0 ; ---------------------------------------------------------------------------
.text:00000000000094C2                 align 8
.text:00000000000094C8
.text:00000000000094C8 loc_94C8:                               ; CODE XREF: check_halt_state_context_isra_20+1E↑j
.text:00000000000094C8                                         ; check_halt_state_context_isra_20+57↑j
.text:00000000000094C8                 pop     rbx
.text:00000000000094C9                 xor     eax, eax
.text:00000000000094CB                 pop     rbp
.text:00000000000094CC                 pop     r12
.text:00000000000094CE                 retn
.text:00000000000094CE ; } // starts at 9400
.text:00000000000094CE check_halt_state_context_isra_20 endp
.text:00000000000094CE
.text:00000000000094CE ; ---------------------------------------------------------------------------
.text:00000000000094CF                 align 10h
.text:00000000000094D0
.text:00000000000094D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094D0
.text:00000000000094D0
.text:00000000000094D0 re_string_reconstruct proc near         ; CODE XREF: re_search_internal+5E6↓p
.text:00000000000094D0                                         ; re_search_internal+115B↓p
.text:00000000000094D0
.text:00000000000094D0 var_78          = qword ptr -78h
.text:00000000000094D0 var_6C          = dword ptr -6Ch
.text:00000000000094D0 var_68          = qword ptr -68h
.text:00000000000094D0 var_60          = qword ptr -60h
.text:00000000000094D0 wc              = dword ptr -54h
.text:00000000000094D0 var_50          = qword ptr -50h
.text:00000000000094D0 var_46          = byte ptr -46h
.text:00000000000094D0 var_40          = qword ptr -40h
.text:00000000000094D0
.text:00000000000094D0 ; __unwind {
.text:00000000000094D0                 push    r15
.text:00000000000094D2                 push    r14
.text:00000000000094D4                 mov     r15, rsi
.text:00000000000094D7                 push    r13
.text:00000000000094D9                 push    r12
.text:00000000000094DB                 mov     r10d, edx
.text:00000000000094DE                 push    rbp
.text:00000000000094DF                 push    rbx
.text:00000000000094E0                 mov     rbp, rsi
.text:00000000000094E3                 mov     rbx, rdi
.text:00000000000094E6                 sub     rsp, 48h
.text:00000000000094EA                 mov     rax, fs:28h
.text:00000000000094F3                 mov     [rsp+78h+var_40], rax
.text:00000000000094F8                 xor     eax, eax
.text:00000000000094FA                 mov     rax, [rdi+28h]
.text:00000000000094FE                 sub     rbp, rax
.text:0000000000009501                 cmp     rax, rsi
.text:0000000000009504                 jle     short loc_9566
.text:0000000000009506                 cmp     dword ptr [rdi+90h], 1
.text:000000000000950D                 jg      loc_9640
.text:0000000000009513
.text:0000000000009513 loc_9513:                               ; CODE XREF: re_string_reconstruct+178↓j
.text:0000000000009513                 mov     rax, [rbx+50h]
.text:0000000000009517                 mov     qword ptr [rbx+30h], 0
.text:000000000000951F                 mov     rbp, r15
.text:0000000000009522                 mov     qword ptr [rbx+28h], 0
.text:000000000000952A                 mov     qword ptr [rbx+38h], 0
.text:0000000000009532                 mov     byte ptr [rbx+8Ch], 0
.text:0000000000009539                 mov     [rbx+58h], rax
.text:000000000000953D                 mov     rax, [rbx+60h]
.text:0000000000009541                 mov     [rbx+68h], rax
.text:0000000000009545                 mov     eax, r10d
.text:0000000000009548                 and     eax, 1
.text:000000000000954B                 cmp     eax, 1
.text:000000000000954E                 sbb     eax, eax
.text:0000000000009550                 and     eax, 2
.text:0000000000009553                 add     eax, 4
.text:0000000000009556                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000955D                 mov     [rbx+70h], eax
.text:0000000000009560                 jz      loc_9630
.text:0000000000009566
.text:0000000000009566 loc_9566:                               ; CODE XREF: re_string_reconstruct+34↑j
.text:0000000000009566                                         ; re_string_reconstruct+167↓j
.text:0000000000009566                 test    rbp, rbp
.text:0000000000009569                 jz      short loc_95CE
.text:000000000000956B                 mov     rax, [rbx+38h]
.text:000000000000956F                 movzx   edx, byte ptr [rbx+8Ch]
.text:0000000000009576                 mov     r8, [rbx+30h]
.text:000000000000957A                 cmp     rax, rbp
.text:000000000000957D                 jle     loc_96A0
.text:0000000000009583                 test    dl, dl
.text:0000000000009585                 jnz     loc_9798
.text:000000000000958B                 lea     rsi, [rbp-1]
.text:000000000000958F                 mov     edx, r10d
.text:0000000000009592                 mov     rdi, rbx
.text:0000000000009595                 mov     [rsp+78h+var_78], r8
.text:0000000000009599                 call    re_string_context_at
.text:000000000000959E                 mov     r8, [rsp+78h+var_78]
.text:00000000000095A2                 mov     [rbx+70h], eax
.text:00000000000095A5                 sub     r8, rbp
.text:00000000000095A8                 cmp     dword ptr [rbx+90h], 1
.text:00000000000095AF                 jg      loc_9650
.text:00000000000095B5
.text:00000000000095B5 loc_95B5:                               ; CODE XREF: re_string_reconstruct+19C↓j
.text:00000000000095B5                 cmp     byte ptr [rbx+8Bh], 0
.text:00000000000095BC                 jnz     loc_9960
.text:00000000000095C2                 sub     [rbx+38h], rbp
.text:00000000000095C6                 mov     [rbx+30h], r8
.text:00000000000095CA
.text:00000000000095CA loc_95CA:                               ; CODE XREF: re_string_reconstruct+47E↓j
.text:00000000000095CA                                         ; re_string_reconstruct+6F4↓j
.text:00000000000095CA                 add     [rbx+8], rbp
.text:00000000000095CE
.text:00000000000095CE loc_95CE:                               ; CODE XREF: re_string_reconstruct+99↑j
.text:00000000000095CE                                         ; re_string_reconstruct+484↓j
.text:00000000000095CE                 mov     rax, [rbx+58h]
.text:00000000000095D2                 sub     [rbx+68h], rbp
.text:00000000000095D6                 mov     [rbx+28h], r15
.text:00000000000095DA                 sub     rax, rbp
.text:00000000000095DD                 cmp     dword ptr [rbx+90h], 1
.text:00000000000095E4                 mov     [rbx+58h], rax
.text:00000000000095E8                 jle     loc_9688
.text:00000000000095EE                 cmp     byte ptr [rbx+88h], 0
.text:00000000000095F5                 mov     rdi, rbx
.text:00000000000095F8                 jz      short loc_9678
.text:00000000000095FA                 call    build_wcs_upper_buffer
.text:00000000000095FF                 test    eax, eax
.text:0000000000009601                 jnz     short loc_960D
.text:0000000000009603
.text:0000000000009603 loc_9603:                               ; CODE XREF: re_string_reconstruct+1AD↓j
.text:0000000000009603                                         ; re_string_reconstruct+1C9↓j ...
.text:0000000000009603                 mov     qword ptr [rbx+48h], 0
.text:000000000000960B                 xor     eax, eax
.text:000000000000960D
.text:000000000000960D loc_960D:                               ; CODE XREF: re_string_reconstruct+131↑j
.text:000000000000960D                 mov     rcx, [rsp+78h+var_40]
.text:0000000000009612                 xor     rcx, fs:28h
.text:000000000000961B                 jnz     loc_9C6A
.text:0000000000009621                 add     rsp, 48h
.text:0000000000009625                 pop     rbx
.text:0000000000009626                 pop     rbp
.text:0000000000009627                 pop     r12
.text:0000000000009629                 pop     r13
.text:000000000000962B                 pop     r14
.text:000000000000962D                 pop     r15
.text:000000000000962F                 retn
.text:0000000000009630 ; ---------------------------------------------------------------------------
.text:0000000000009630
.text:0000000000009630 loc_9630:                               ; CODE XREF: re_string_reconstruct+90↑j
.text:0000000000009630                 mov     rax, [rbx]
.text:0000000000009633                 mov     [rbx+8], rax
.text:0000000000009637                 jmp     loc_9566
.text:0000000000009637 ; ---------------------------------------------------------------------------
.text:000000000000963C                 align 20h
.text:0000000000009640
.text:0000000000009640 loc_9640:                               ; CODE XREF: re_string_reconstruct+3D↑j
.text:0000000000009640                 mov     qword ptr [rdi+20h], 0
.text:0000000000009648                 jmp     loc_9513
.text:0000000000009648 ; ---------------------------------------------------------------------------
.text:000000000000964D                 align 10h
.text:0000000000009650
.text:0000000000009650 loc_9650:                               ; CODE XREF: re_string_reconstruct+DF↑j
.text:0000000000009650                 mov     rdi, [rbx+10h]  ; dest
.text:0000000000009654                 lea     rdx, ds:0[r8*4] ; n
.text:000000000000965C                 lea     rsi, [rdi+rbp*4] ; src
.text:0000000000009660                 call    _memmove
.text:0000000000009665                 mov     r8, [rbx+30h]
.text:0000000000009669                 sub     r8, rbp
.text:000000000000966C                 jmp     loc_95B5
.text:000000000000966C ; ---------------------------------------------------------------------------
.text:0000000000009671                 align 8
.text:0000000000009678
.text:0000000000009678 loc_9678:                               ; CODE XREF: re_string_reconstruct+128↑j
.text:0000000000009678                 call    build_wcs_buffer
.text:000000000000967D                 jmp     loc_9603
.text:000000000000967D ; ---------------------------------------------------------------------------
.text:0000000000009682                 align 8
.text:0000000000009688
.text:0000000000009688 loc_9688:                               ; CODE XREF: re_string_reconstruct+118↑j
.text:0000000000009688                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000968F                 jnz     loc_9A40
.text:0000000000009695                 mov     [rbx+30h], rax
.text:0000000000009699                 jmp     loc_9603
.text:0000000000009699 ; ---------------------------------------------------------------------------
.text:000000000000969E                 align 20h
.text:00000000000096A0
.text:00000000000096A0 loc_96A0:                               ; CODE XREF: re_string_reconstruct+AD↑j
.text:00000000000096A0                 test    dl, dl
.text:00000000000096A2                 jnz     loc_9B4D
.text:00000000000096A8
.text:00000000000096A8 loc_96A8:                               ; CODE XREF: re_string_reconstruct+6A0↓j
.text:00000000000096A8                 movsxd  rdx, dword ptr [rbx+90h]
.text:00000000000096AF                 mov     qword ptr [rbx+30h], 0
.text:00000000000096B7                 mov     r11, [rbx+28h]
.text:00000000000096BB                 cmp     edx, 1
.text:00000000000096BE                 jle     loc_9AA8
.text:00000000000096C4                 cmp     byte ptr [rbx+89h], 0
.text:00000000000096CB                 jnz     loc_9988
.text:00000000000096D1
.text:00000000000096D1 loc_96D1:                               ; CODE XREF: re_string_reconstruct+4DC↓j
.text:00000000000096D1                                         ; re_string_reconstruct+4EF↓j ...
.text:00000000000096D1                 lea     r14, [r11+rax]
.text:00000000000096D5                 cmp     r15, r14
.text:00000000000096D8                 jle     loc_9B1F
.text:00000000000096DE                 lea     rax, [rbx+20h]
.text:00000000000096E2                 lea     r13, [rsp+78h+wc]
.text:00000000000096E7                 mov     [rsp+78h+var_68], rax
.text:00000000000096EC                 nop     dword ptr [rax+00h]
.text:00000000000096F0
.text:00000000000096F0 loc_96F0:                               ; CODE XREF: re_string_reconstruct+270↓j
.text:00000000000096F0                 mov     r12, [rbx+50h]
.text:00000000000096F4                 mov     rsi, [rbx]
.text:00000000000096F7                 mov     rdi, r13
.text:00000000000096FA                 mov     rax, [rbx+20h]
.text:00000000000096FE                 mov     rcx, [rsp+78h+var_68]
.text:0000000000009703                 mov     [rsp+78h+var_6C], r10d
.text:0000000000009708                 mov     [rsp+78h+var_78], r8
.text:000000000000970C                 sub     r12, r14
.text:000000000000970F                 add     rsi, r14
.text:0000000000009712                 mov     rdx, r12
.text:0000000000009715                 mov     [rsp+78h+var_60], rax
.text:000000000000971A                 call    rpl_mbrtowc
.text:000000000000971F                 lea     rcx, [rax-1]
.text:0000000000009723                 mov     edx, [rsp+78h+wc]
.text:0000000000009727                 mov     r8, [rsp+78h+var_78]
.text:000000000000972B                 mov     r10d, [rsp+78h+var_6C]
.text:0000000000009730                 cmp     rcx, 0FFFFFFFFFFFFFFFCh
.text:0000000000009734                 ja      loc_9B75
.text:000000000000973A
.text:000000000000973A loc_973A:                               ; CODE XREF: re_string_reconstruct+6C5↓j
.text:000000000000973A                 add     r14, rax
.text:000000000000973D                 cmp     r15, r14
.text:0000000000009740                 jg      short loc_96F0
.text:0000000000009742                 sub     r14, r15
.text:0000000000009745                 cmp     edx, 0FFFFFFFFh
.text:0000000000009748                 mov     r12, r14
.text:000000000000974B                 mov     [rbx+30h], r14
.text:000000000000974F                 jz      loc_9B29
.text:0000000000009755
.text:0000000000009755 loc_9755:                               ; CODE XREF: re_string_reconstruct+73A↓j
.text:0000000000009755                 cmp     byte ptr [rbx+8Eh], 0
.text:000000000000975C                 jnz     loc_9BC9
.text:0000000000009762
.text:0000000000009762 loc_9762:                               ; CODE XREF: re_string_reconstruct+70D↓j
.text:0000000000009762                 xor     eax, eax
.text:0000000000009764                 cmp     edx, 0Ah
.text:0000000000009767                 jnz     short loc_9777
.text:0000000000009769                 xor     eax, eax
.text:000000000000976B                 cmp     byte ptr [rbx+8Dh], 0
.text:0000000000009772                 setnz   al
.text:0000000000009775                 add     eax, eax
.text:0000000000009777
.text:0000000000009777 loc_9777:                               ; CODE XREF: re_string_reconstruct+297↑j
.text:0000000000009777                                         ; re_string_reconstruct+718↓j
.text:0000000000009777                 mov     [rbx+70h], eax
.text:000000000000977A
.text:000000000000977A loc_977A:                               ; CODE XREF: re_string_reconstruct+66B↓j
.text:000000000000977A                 cmp     r12, 0
.text:000000000000977E                 jnz     loc_9B9A
.text:0000000000009784
.text:0000000000009784 loc_9784:                               ; CODE XREF: re_string_reconstruct+75D↓j
.text:0000000000009784                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000978B                 mov     [rbx+38h], r12
.text:000000000000978F                 jmp     loc_994C
.text:000000000000978F ; ---------------------------------------------------------------------------
.text:0000000000009794                 align 8
.text:0000000000009798
.text:0000000000009798 loc_9798:                               ; CODE XREF: re_string_reconstruct+B5↑j
.text:0000000000009798                 mov     r14, [rbx+18h]
.text:000000000000979C                 mov     rcx, r8
.text:000000000000979F                 xor     esi, esi
.text:00000000000097A1                 jmp     short loc_97B3
.text:00000000000097A1 ; ---------------------------------------------------------------------------
.text:00000000000097A3                 align 8
.text:00000000000097A8
.text:00000000000097A8 loc_97A8:                               ; CODE XREF: re_string_reconstruct+2FE↓j
.text:00000000000097A8                 jge     short loc_97E3
.text:00000000000097AA                 lea     rsi, [rax+1]
.text:00000000000097AE
.text:00000000000097AE loc_97AE:                               ; CODE XREF: re_string_reconstruct+303↓j
.text:00000000000097AE                 cmp     rsi, rcx
.text:00000000000097B1                 jge     short loc_97D8
.text:00000000000097B3
.text:00000000000097B3 loc_97B3:                               ; CODE XREF: re_string_reconstruct+2D1↑j
.text:00000000000097B3                 lea     rdx, [rsi+rcx]
.text:00000000000097B7                 mov     rax, rdx
.text:00000000000097BA                 shr     rax, 3Fh
.text:00000000000097BE                 add     rax, rdx
.text:00000000000097C1                 sar     rax, 1
.text:00000000000097C4                 mov     rdx, [r14+rax*8]
.text:00000000000097C8                 mov     r12, rax
.text:00000000000097CB                 cmp     rdx, rbp
.text:00000000000097CE                 jle     short loc_97A8
.text:00000000000097D0                 mov     rcx, rax
.text:00000000000097D3                 jmp     short loc_97AE
.text:00000000000097D3 ; ---------------------------------------------------------------------------
.text:00000000000097D5                 align 8
.text:00000000000097D8
.text:00000000000097D8 loc_97D8:                               ; CODE XREF: re_string_reconstruct+2E1↑j
.text:00000000000097D8                 lea     r12, [rax+1]
.text:00000000000097DC                 cmp     rdx, rbp
.text:00000000000097DF                 cmovge  r12, rax
.text:00000000000097E3
.text:00000000000097E3 loc_97E3:                               ; CODE XREF: re_string_reconstruct:loc_97A8↑j
.text:00000000000097E3                 lea     r13, [r12-1]
.text:00000000000097E8                 mov     edx, r10d
.text:00000000000097EB                 mov     rdi, rbx
.text:00000000000097EE                 mov     [rsp+78h+var_78], r8
.text:00000000000097F2                 mov     rsi, r13
.text:00000000000097F5                 call    re_string_context_at
.text:00000000000097FA                 cmp     rbp, r12
.text:00000000000097FD                 mov     [rbx+70h], eax
.text:0000000000009800                 mov     r8, [rsp+78h+var_78]
.text:0000000000009804                 jnz     loc_9888
.text:000000000000980A                 cmp     rbp, r8
.text:000000000000980D                 jge     short loc_9888
.text:000000000000980F                 cmp     [r14+r12*8], rbp
.text:0000000000009813                 jnz     short loc_9888
.text:0000000000009815                 mov     rdi, [rbx+10h]  ; dest
.text:0000000000009819                 sub     r8, rbp
.text:000000000000981C                 lea     rdx, ds:0[r8*4] ; n
.text:0000000000009824                 lea     rsi, [rdi+rbp*4] ; src
.text:0000000000009828                 call    _memmove
.text:000000000000982D                 mov     rdi, [rbx+8]    ; dest
.text:0000000000009831                 mov     rdx, [rbx+30h]
.text:0000000000009835                 lea     rsi, [rdi+rbp]  ; src
.text:0000000000009839                 sub     rdx, rbp        ; n
.text:000000000000983C                 call    _memmove
.text:0000000000009841                 mov     rax, [rbx+30h]
.text:0000000000009845                 sub     [rbx+38h], rbp
.text:0000000000009849                 sub     rax, rbp
.text:000000000000984C                 test    rax, rax
.text:000000000000984F                 mov     [rbx+30h], rax
.text:0000000000009853                 jle     short loc_9878
.text:0000000000009855                 mov     rcx, [rbx+18h]
.text:0000000000009859                 xor     eax, eax
.text:000000000000985B                 lea     rsi, [rcx+rbp*8]
.text:000000000000985F                 nop
.text:0000000000009860
.text:0000000000009860 loc_9860:                               ; CODE XREF: re_string_reconstruct+3A3↓j
.text:0000000000009860                 mov     rdx, [rsi+rax*8]
.text:0000000000009864                 sub     rdx, rbp
.text:0000000000009867                 mov     [rcx+rax*8], rdx
.text:000000000000986B                 add     rax, 1
.text:000000000000986F                 cmp     [rbx+30h], rax
.text:0000000000009873                 jg      short loc_9860
.text:0000000000009875                 nop     dword ptr [rax]
.text:0000000000009878
.text:0000000000009878 loc_9878:                               ; CODE XREF: re_string_reconstruct+383↑j
.text:0000000000009878                                         ; re_string_reconstruct+633↓j
.text:0000000000009878                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000987F                 jmp     loc_994C
.text:000000000000987F ; ---------------------------------------------------------------------------
.text:0000000000009884                 align 8
.text:0000000000009888
.text:0000000000009888 loc_9888:                               ; CODE XREF: re_string_reconstruct+334↑j
.text:0000000000009888                                         ; re_string_reconstruct+33D↑j ...
.text:0000000000009888                 mov     rax, [rbx+50h]
.text:000000000000988C                 mov     byte ptr [rbx+8Ch], 0
.text:0000000000009893                 add     rax, rbp
.text:0000000000009896                 sub     rax, r15
.text:0000000000009899                 mov     [rbx+58h], rax
.text:000000000000989D                 mov     rax, [rbx+60h]
.text:00000000000098A1                 add     rax, rbp
.text:00000000000098A4                 sub     rax, r15
.text:00000000000098A7                 test    r12, r12
.text:00000000000098AA                 mov     [rbx+68h], rax
.text:00000000000098AE                 jle     short loc_98D3
.text:00000000000098B0                 cmp     [r14+r12*8-8], rbp
.text:00000000000098B5                 jz      short loc_98CB
.text:00000000000098B7                 jmp     short loc_98D3
.text:00000000000098B7 ; ---------------------------------------------------------------------------
.text:00000000000098B9                 align 20h
.text:00000000000098C0
.text:00000000000098C0 loc_98C0:                               ; CODE XREF: re_string_reconstruct+401↓j
.text:00000000000098C0                 cmp     [r14+r13*8-8], rbp
.text:00000000000098C5                 jnz     short loc_98D3
.text:00000000000098C7                 sub     r13, 1
.text:00000000000098CB
.text:00000000000098CB loc_98CB:                               ; CODE XREF: re_string_reconstruct+3E5↑j
.text:00000000000098CB                 test    r13, r13
.text:00000000000098CE                 mov     r12, r13
.text:00000000000098D1                 jnz     short loc_98C0
.text:00000000000098D3
.text:00000000000098D3 loc_98D3:                               ; CODE XREF: re_string_reconstruct+3DE↑j
.text:00000000000098D3                                         ; re_string_reconstruct+3E7↑j ...
.text:00000000000098D3                 cmp     r12, r8
.text:00000000000098D6                 jge     loc_9B08
.text:00000000000098DC                 mov     rax, [rbx+10h]
.text:00000000000098E0                 jmp     short loc_98F5
.text:00000000000098E0 ; ---------------------------------------------------------------------------
.text:00000000000098E2                 align 8
.text:00000000000098E8
.text:00000000000098E8 loc_98E8:                               ; CODE XREF: re_string_reconstruct+42A↓j
.text:00000000000098E8                 add     r12, 1
.text:00000000000098EC                 cmp     r12, r8
.text:00000000000098EF                 jz      loc_9B10
.text:00000000000098F5
.text:00000000000098F5 loc_98F5:                               ; CODE XREF: re_string_reconstruct+410↑j
.text:00000000000098F5                 cmp     dword ptr [rax+r12*4], 0FFFFFFFFh
.text:00000000000098FA                 jz      short loc_98E8
.text:00000000000098FC
.text:00000000000098FC loc_98FC:                               ; CODE XREF: re_string_reconstruct:loc_9B08↓j
.text:00000000000098FC                 mov     rdx, [r14+r12*8]
.text:0000000000009900                 sub     rdx, rbp        ; n
.text:0000000000009903                 cmp     rdx, 0
.text:0000000000009907                 mov     [rbx+30h], rdx
.text:000000000000990B                 jz      short loc_9941
.text:000000000000990D                 jle     short loc_992F
.text:000000000000990F                 mov     rax, [rbx+10h]
.text:0000000000009913                 lea     rcx, [rax+rdx*4]
.text:0000000000009917                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009920
.text:0000000000009920 loc_9920:                               ; CODE XREF: re_string_reconstruct+45D↓j
.text:0000000000009920                 mov     dword ptr [rax], 0FFFFFFFFh
.text:0000000000009926                 add     rax, 4
.text:000000000000992A                 cmp     rcx, rax
.text:000000000000992D                 jnz     short loc_9920
.text:000000000000992F
.text:000000000000992F loc_992F:                               ; CODE XREF: re_string_reconstruct+43D↑j
.text:000000000000992F                 mov     rdi, [rbx+8]    ; s
.text:0000000000009933                 mov     esi, 0FFh       ; c
.text:0000000000009938                 call    _memset
.text:000000000000993D                 mov     rdx, [rbx+30h]
.text:0000000000009941
.text:0000000000009941 loc_9941:                               ; CODE XREF: re_string_reconstruct+43B↑j
.text:0000000000009941                                         ; re_string_reconstruct+64A↓j
.text:0000000000009941                 movzx   eax, byte ptr [rbx+8Bh]
.text:0000000000009948                 mov     [rbx+38h], rdx
.text:000000000000994C
.text:000000000000994C loc_994C:                               ; CODE XREF: re_string_reconstruct+2BF↑j
.text:000000000000994C                                         ; re_string_reconstruct+3AF↑j ...
.text:000000000000994C                 test    al, al
.text:000000000000994E                 jz      loc_95CA
.text:0000000000009954                 jmp     loc_95CE
.text:0000000000009954 ; ---------------------------------------------------------------------------
.text:0000000000009959                 align 20h
.text:0000000000009960
.text:0000000000009960 loc_9960:                               ; CODE XREF: re_string_reconstruct+EC↑j
.text:0000000000009960                 mov     rdi, [rbx+8]    ; dest
.text:0000000000009964                 mov     rdx, r8         ; n
.text:0000000000009967                 lea     rsi, [rdi+rbp]  ; src
.text:000000000000996B                 call    _memmove
.text:0000000000009970                 movzx   eax, byte ptr [rbx+8Bh]
.text:0000000000009977                 sub     [rbx+30h], rbp
.text:000000000000997B                 sub     [rbx+38h], rbp
.text:000000000000997F                 jmp     short loc_994C
.text:000000000000997F ; ---------------------------------------------------------------------------
.text:0000000000009981                 align 8
.text:0000000000009988
.text:0000000000009988 loc_9988:                               ; CODE XREF: re_string_reconstruct+1FB↑j
.text:0000000000009988                 mov     rcx, [rbx]
.text:000000000000998B                 mov     rdi, rbp
.text:000000000000998E                 sub     rdi, rdx
.text:0000000000009991                 mov     rdx, rdi
.text:0000000000009994                 lea     r12, [rcx+r11]
.text:0000000000009998                 add     rdx, r12
.text:000000000000999B                 lea     rsi, [r12+rbp-1]
.text:00000000000099A0                 cmp     rcx, rdx
.text:00000000000099A3                 cmovb   rcx, rdx
.text:00000000000099A7                 cmp     rcx, rsi
.text:00000000000099AA                 jbe     short loc_99C5
.text:00000000000099AC                 jmp     loc_96D1
.text:00000000000099AC ; ---------------------------------------------------------------------------
.text:00000000000099B1                 align 8
.text:00000000000099B8
.text:00000000000099B8 loc_99B8:                               ; CODE XREF: re_string_reconstruct+4FE↓j
.text:00000000000099B8                 sub     rsi, 1
.text:00000000000099BC                 cmp     rcx, rsi
.text:00000000000099BF                 ja      loc_96D1
.text:00000000000099C5
.text:00000000000099C5 loc_99C5:                               ; CODE XREF: re_string_reconstruct+4DA↑j
.text:00000000000099C5                 movzx   edx, byte ptr [rsi]
.text:00000000000099C8                 and     edx, 0FFFFFFC0h
.text:00000000000099CB                 cmp     dl, 80h
.text:00000000000099CE                 jz      short loc_99B8
.text:00000000000099D0                 mov     rdx, [rbx+58h]
.text:00000000000099D4                 mov     rcx, [rbx+78h]
.text:00000000000099D8                 mov     r14, rsi
.text:00000000000099DB                 add     rdx, r12
.text:00000000000099DE                 sub     rdx, rsi
.text:00000000000099E1                 test    rcx, rcx
.text:00000000000099E4                 jnz     loc_9C32
.text:00000000000099EA
.text:00000000000099EA loc_99EA:                               ; CODE XREF: re_string_reconstruct+795↓j
.text:00000000000099EA                 lea     r13, [rsp+78h+wc]
.text:00000000000099EF                 add     r12, rbp
.text:00000000000099F2                 lea     rcx, [rsp+78h+var_50]
.text:00000000000099F7                 sub     r12, r14
.text:00000000000099FA                 mov     [rsp+78h+var_6C], r10d
.text:00000000000099FF                 mov     [rsp+78h+var_78], r8
.text:0000000000009A03                 mov     rdi, r13
.text:0000000000009A06                 mov     [rsp+78h+var_50], 0
.text:0000000000009A0F                 call    rpl_mbrtowc
.text:0000000000009A14                 cmp     r12, rax
.text:0000000000009A17                 mov     r8, [rsp+78h+var_78]
.text:0000000000009A1B                 mov     r10d, [rsp+78h+var_6C]
.text:0000000000009A20                 ja      short loc_9A2C
.text:0000000000009A22                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000009A26                 jbe     loc_9BF1
.text:0000000000009A2C
.text:0000000000009A2C loc_9A2C:                               ; CODE XREF: re_string_reconstruct+550↑j
.text:0000000000009A2C                                         ; re_string_reconstruct+740↓j
.text:0000000000009A2C                 mov     r11, [rbx+28h]
.text:0000000000009A30                 mov     rax, [rbx+38h]
.text:0000000000009A34                 jmp     loc_96D1
.text:0000000000009A34 ; ---------------------------------------------------------------------------
.text:0000000000009A39                 align 20h
.text:0000000000009A40
.text:0000000000009A40 loc_9A40:                               ; CODE XREF: re_string_reconstruct+1BF↑j
.text:0000000000009A40                 cmp     byte ptr [rbx+88h], 0
.text:0000000000009A47                 jnz     loc_9B40
.text:0000000000009A4D                 mov     rcx, [rbx+78h]
.text:0000000000009A51                 test    rcx, rcx
.text:0000000000009A54                 jz      loc_9603
.text:0000000000009A5A                 cmp     [rbx+40h], rax
.text:0000000000009A5E                 mov     rdx, [rbx+30h]
.text:0000000000009A62                 cmovle  rax, [rbx+40h]
.text:0000000000009A67                 cmp     rax, rdx
.text:0000000000009A6A                 jg      short loc_9A78
.text:0000000000009A6C                 jmp     short loc_9A98
.text:0000000000009A6C ; ---------------------------------------------------------------------------
.text:0000000000009A6E                 align 10h
.text:0000000000009A70
.text:0000000000009A70 loc_9A70:                               ; CODE XREF: re_string_reconstruct+5C6↓j
.text:0000000000009A70                 mov     r15, [rbx+28h]
.text:0000000000009A74                 mov     rcx, [rbx+78h]
.text:0000000000009A78
.text:0000000000009A78 loc_9A78:                               ; CODE XREF: re_string_reconstruct+59A↑j
.text:0000000000009A78                 mov     rsi, [rbx]
.text:0000000000009A7B                 add     rsi, rdx
.text:0000000000009A7E                 movzx   esi, byte ptr [rsi+r15]
.text:0000000000009A83                 movzx   esi, byte ptr [rcx+rsi]
.text:0000000000009A87                 mov     rcx, [rbx+8]
.text:0000000000009A8B                 mov     [rcx+rdx], sil
.text:0000000000009A8F                 add     rdx, 1
.text:0000000000009A93                 cmp     rax, rdx
.text:0000000000009A96                 jnz     short loc_9A70
.text:0000000000009A98
.text:0000000000009A98 loc_9A98:                               ; CODE XREF: re_string_reconstruct+59C↑j
.text:0000000000009A98                 mov     [rbx+30h], rdx
.text:0000000000009A9C                 mov     [rbx+38h], rdx
.text:0000000000009AA0                 jmp     loc_9603
.text:0000000000009AA0 ; ---------------------------------------------------------------------------
.text:0000000000009AA5                 align 8
.text:0000000000009AA8
.text:0000000000009AA8 loc_9AA8:                               ; CODE XREF: re_string_reconstruct+1EE↑j
.text:0000000000009AA8                 mov     rax, [rbx]
.text:0000000000009AAB                 mov     rdx, [rbx+78h]
.text:0000000000009AAF                 add     rax, rbp
.text:0000000000009AB2                 test    rdx, rdx
.text:0000000000009AB5                 movzx   eax, byte ptr [r11+rax-1]
.text:0000000000009ABB                 mov     qword ptr [rbx+38h], 0
.text:0000000000009AC3                 jz      short loc_9AC9
.text:0000000000009AC5                 movzx   eax, byte ptr [rdx+rax]
.text:0000000000009AC9
.text:0000000000009AC9 loc_9AC9:                               ; CODE XREF: re_string_reconstruct+5F3↑j
.text:0000000000009AC9                 mov     rcx, [rbx+80h]
.text:0000000000009AD0                 movzx   edx, al
.text:0000000000009AD3                 sar     rdx, 6
.text:0000000000009AD7                 mov     rcx, [rcx+rdx*8]
.text:0000000000009ADB                 mov     edx, 1
.text:0000000000009AE0                 bt      rcx, rax
.text:0000000000009AE4                 jb      short loc_9B00
.text:0000000000009AE6                 xor     edx, edx
.text:0000000000009AE8                 cmp     al, 0Ah
.text:0000000000009AEA                 jnz     short loc_9B00
.text:0000000000009AEC                 xor     edx, edx
.text:0000000000009AEE                 cmp     byte ptr [rbx+8Dh], 0
.text:0000000000009AF5                 setnz   dl
.text:0000000000009AF8                 add     edx, edx
.text:0000000000009AFA                 nop     word ptr [rax+rax+00h]
.text:0000000000009B00
.text:0000000000009B00 loc_9B00:                               ; CODE XREF: re_string_reconstruct+614↑j
.text:0000000000009B00                                         ; re_string_reconstruct+61A↑j
.text:0000000000009B00                 mov     [rbx+70h], edx
.text:0000000000009B03                 jmp     loc_9878
.text:0000000000009B08 ; ---------------------------------------------------------------------------
.text:0000000000009B08
.text:0000000000009B08 loc_9B08:                               ; CODE XREF: re_string_reconstruct+406↑j
.text:0000000000009B08                 jnz     loc_98FC
.text:0000000000009B0E                 xchg    ax, ax
.text:0000000000009B10
.text:0000000000009B10 loc_9B10:                               ; CODE XREF: re_string_reconstruct+41F↑j
.text:0000000000009B10                 mov     qword ptr [rbx+30h], 0
.text:0000000000009B18                 xor     edx, edx
.text:0000000000009B1A                 jmp     loc_9941
.text:0000000000009B1F ; ---------------------------------------------------------------------------
.text:0000000000009B1F
.text:0000000000009B1F loc_9B1F:                               ; CODE XREF: re_string_reconstruct+208↑j
.text:0000000000009B1F                 sub     r14, r15
.text:0000000000009B22                 mov     r12, r14
.text:0000000000009B25                 mov     [rbx+30h], r14
.text:0000000000009B29
.text:0000000000009B29 loc_9B29:                               ; CODE XREF: re_string_reconstruct+27F↑j
.text:0000000000009B29                 lea     rsi, [r8-1]
.text:0000000000009B2D                 mov     edx, r10d
.text:0000000000009B30                 mov     rdi, rbx
.text:0000000000009B33                 call    re_string_context_at
.text:0000000000009B38                 mov     [rbx+70h], eax
.text:0000000000009B3B                 jmp     loc_977A
.text:0000000000009B40 ; ---------------------------------------------------------------------------
.text:0000000000009B40
.text:0000000000009B40 loc_9B40:                               ; CODE XREF: re_string_reconstruct+577↑j
.text:0000000000009B40                 mov     rdi, rbx
.text:0000000000009B43                 call    build_upper_buffer
.text:0000000000009B48                 jmp     loc_9603
.text:0000000000009B4D ; ---------------------------------------------------------------------------
.text:0000000000009B4D
.text:0000000000009B4D loc_9B4D:                               ; CODE XREF: re_string_reconstruct+1D2↑j
.text:0000000000009B4D                 mov     rdx, [rbx+50h]
.text:0000000000009B51                 mov     byte ptr [rbx+8Ch], 0
.text:0000000000009B58                 add     rdx, rbp
.text:0000000000009B5B                 sub     rdx, r15
.text:0000000000009B5E                 mov     [rbx+58h], rdx
.text:0000000000009B62                 mov     rdx, [rbx+60h]
.text:0000000000009B66                 add     rdx, rbp
.text:0000000000009B69                 sub     rdx, r15
.text:0000000000009B6C                 mov     [rbx+68h], rdx
.text:0000000000009B70                 jmp     loc_96A8
.text:0000000000009B75 ; ---------------------------------------------------------------------------
.text:0000000000009B75
.text:0000000000009B75 loc_9B75:                               ; CODE XREF: re_string_reconstruct+264↑j
.text:0000000000009B75                 test    rax, rax
.text:0000000000009B78                 jz      short loc_9BED
.text:0000000000009B7A                 test    r12, r12
.text:0000000000009B7D                 jz      short loc_9BED
.text:0000000000009B7F                 mov     rax, [rbx]
.text:0000000000009B82                 movzx   edx, byte ptr [rax+r14]
.text:0000000000009B87
.text:0000000000009B87 loc_9B87:                               ; CODE XREF: re_string_reconstruct+71F↓j
.text:0000000000009B87                 mov     rax, [rsp+78h+var_60]
.text:0000000000009B8C                 mov     [rbx+20h], rax
.text:0000000000009B90                 mov     eax, 1
.text:0000000000009B95                 jmp     loc_973A
.text:0000000000009B9A ; ---------------------------------------------------------------------------
.text:0000000000009B9A
.text:0000000000009B9A loc_9B9A:                               ; CODE XREF: re_string_reconstruct+2AE↑j
.text:0000000000009B9A                 jle     short loc_9BB7
.text:0000000000009B9C                 mov     rax, [rbx+10h]
.text:0000000000009BA0                 lea     rdx, [rax+r12*4]
.text:0000000000009BA4                 nop     dword ptr [rax+00h]
.text:0000000000009BA8
.text:0000000000009BA8 loc_9BA8:                               ; CODE XREF: re_string_reconstruct+6E5↓j
.text:0000000000009BA8                 mov     dword ptr [rax], 0FFFFFFFFh
.text:0000000000009BAE                 add     rax, 4
.text:0000000000009BB2                 cmp     rdx, rax
.text:0000000000009BB5                 jnz     short loc_9BA8
.text:0000000000009BB7
.text:0000000000009BB7 loc_9BB7:                               ; CODE XREF: re_string_reconstruct:loc_9B9A↑j
.text:0000000000009BB7                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000009BBE                 jnz     short loc_9C18
.text:0000000000009BC0                 mov     [rbx+38h], r12
.text:0000000000009BC4                 jmp     loc_95CA
.text:0000000000009BC9 ; ---------------------------------------------------------------------------
.text:0000000000009BC9
.text:0000000000009BC9 loc_9BC9:                               ; CODE XREF: re_string_reconstruct+28C↑j
.text:0000000000009BC9                 mov     edi, edx        ; wc
.text:0000000000009BCB                 mov     dword ptr [rsp+78h+var_78], edx
.text:0000000000009BCE                 call    _iswalnum
.text:0000000000009BD3                 test    eax, eax
.text:0000000000009BD5                 jnz     short loc_9BE3
.text:0000000000009BD7                 mov     edx, dword ptr [rsp+78h+var_78]
.text:0000000000009BDA                 cmp     edx, 5Fh ; '_'
.text:0000000000009BDD                 jnz     loc_9762
.text:0000000000009BE3
.text:0000000000009BE3 loc_9BE3:                               ; CODE XREF: re_string_reconstruct+705↑j
.text:0000000000009BE3                 mov     eax, 1
.text:0000000000009BE8                 jmp     loc_9777
.text:0000000000009BED ; ---------------------------------------------------------------------------
.text:0000000000009BED
.text:0000000000009BED loc_9BED:                               ; CODE XREF: re_string_reconstruct+6A8↑j
.text:0000000000009BED                                         ; re_string_reconstruct+6AD↑j
.text:0000000000009BED                 xor     edx, edx
.text:0000000000009BEF                 jmp     short loc_9B87
.text:0000000000009BF1 ; ---------------------------------------------------------------------------
.text:0000000000009BF1
.text:0000000000009BF1 loc_9BF1:                               ; CODE XREF: re_string_reconstruct+556↑j
.text:0000000000009BF1                 mov     edx, [rsp+78h+wc]
.text:0000000000009BF5                 sub     rax, r12
.text:0000000000009BF8                 mov     qword ptr [rbx+20h], 0
.text:0000000000009C00                 mov     r12, rax
.text:0000000000009C03                 mov     [rbx+30h], rax
.text:0000000000009C07                 cmp     edx, 0FFFFFFFFh
.text:0000000000009C0A                 jnz     loc_9755
.text:0000000000009C10                 jmp     loc_9A2C
.text:0000000000009C10 ; ---------------------------------------------------------------------------
.text:0000000000009C15                 align 8
.text:0000000000009C18
.text:0000000000009C18 loc_9C18:                               ; CODE XREF: re_string_reconstruct+6EE↑j
.text:0000000000009C18                 mov     rdi, [rbx+8]    ; s
.text:0000000000009C1C                 mov     rdx, r12        ; n
.text:0000000000009C1F                 mov     esi, 0FFh       ; c
.text:0000000000009C24                 call    _memset
.text:0000000000009C29                 mov     r12, [rbx+30h]
.text:0000000000009C2D                 jmp     loc_9784
.text:0000000000009C32 ; ---------------------------------------------------------------------------
.text:0000000000009C32
.text:0000000000009C32 loc_9C32:                               ; CODE XREF: re_string_reconstruct+514↑j
.text:0000000000009C32                 cmp     rdx, 6
.text:0000000000009C36                 mov     edi, 6
.text:0000000000009C3B                 lea     r11, [rsp+78h+var_46]
.text:0000000000009C40                 cmovle  rdi, rdx
.text:0000000000009C44                 sub     edi, 1
.text:0000000000009C47                 test    edi, edi
.text:0000000000009C49                 movsxd  rax, edi
.text:0000000000009C4C                 js      short loc_9C62
.text:0000000000009C4E
.text:0000000000009C4E loc_9C4E:                               ; CODE XREF: re_string_reconstruct+790↓j
.text:0000000000009C4E                 movzx   edi, byte ptr [rsi+rax]
.text:0000000000009C52                 movzx   edi, byte ptr [rcx+rdi]
.text:0000000000009C56                 mov     [r11+rax], dil
.text:0000000000009C5A                 sub     rax, 1
.text:0000000000009C5E                 test    eax, eax
.text:0000000000009C60                 jns     short loc_9C4E
.text:0000000000009C62
.text:0000000000009C62 loc_9C62:                               ; CODE XREF: re_string_reconstruct+77C↑j
.text:0000000000009C62                 mov     rsi, r11
.text:0000000000009C65                 jmp     loc_99EA
.text:0000000000009C6A ; ---------------------------------------------------------------------------
.text:0000000000009C6A
.text:0000000000009C6A loc_9C6A:                               ; CODE XREF: re_string_reconstruct+14B↑j
.text:0000000000009C6A                 call    ___stack_chk_fail
.text:0000000000009C6A ; } // starts at 94D0
.text:0000000000009C6A re_string_reconstruct endp
.text:0000000000009C6A
.text:0000000000009C6A ; ---------------------------------------------------------------------------
.text:0000000000009C6F                 align 10h
.text:0000000000009C70
.text:0000000000009C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C70
.text:0000000000009C70
.text:0000000000009C70 _sub_epsilon_src_nodes proc near        ; CODE XREF: update_cur_sifted_state+44C↓p
.text:0000000000009C70                                         ; update_cur_sifted_state+50A↓p ...
.text:0000000000009C70
.text:0000000000009C70 var_78          = qword ptr -78h
.text:0000000000009C70 var_70          = qword ptr -70h
.text:0000000000009C70 var_68          = qword ptr -68h
.text:0000000000009C70 var_60          = qword ptr -60h
.text:0000000000009C70 var_58          = xmmword ptr -58h
.text:0000000000009C70 ptr             = qword ptr -48h
.text:0000000000009C70 var_40          = qword ptr -40h
.text:0000000000009C70
.text:0000000000009C70 ; __unwind {
.text:0000000000009C70                 push    r15
.text:0000000000009C72                 push    r14
.text:0000000000009C74                 mov     r14, rdx
.text:0000000000009C77                 push    r13
.text:0000000000009C79                 push    r12
.text:0000000000009C7B                 lea     rdx, [rsi+rsi*2]
.text:0000000000009C7F                 push    rbp
.text:0000000000009C80                 push    rbx
.text:0000000000009C81                 pxor    xmm0, xmm0
.text:0000000000009C85                 sub     rsp, 48h
.text:0000000000009C89                 mov     rax, fs:28h
.text:0000000000009C92                 mov     [rsp+78h+var_40], rax
.text:0000000000009C97                 xor     eax, eax
.text:0000000000009C99                 mov     rax, [rdi+38h]
.text:0000000000009C9D                 mov     [rsp+78h+ptr], 0
.text:0000000000009CA6                 movaps  [rsp+78h+var_58], xmm0
.text:0000000000009CAB                 mov     [rsp+78h+var_68], rcx
.text:0000000000009CB0                 lea     rbp, [rax+rdx*8]
.text:0000000000009CB4                 mov     r10, [rbp+8]
.text:0000000000009CB8                 test    r10, r10
.text:0000000000009CBB                 jle     loc_9EA2
.text:0000000000009CC1                 lea     rax, [rsp+78h+var_58]
.text:0000000000009CC6                 mov     r12, rdi
.text:0000000000009CC9                 mov     r13, rsi
.text:0000000000009CCC                 xor     ebx, ebx
.text:0000000000009CCE                 mov     [rsp+78h+var_60], rax
.text:0000000000009CD3                 jmp     short loc_9D2D
.text:0000000000009CD3 ; ---------------------------------------------------------------------------
.text:0000000000009CD5                 align 8
.text:0000000000009CD8
.text:0000000000009CD8 loc_9CD8:                               ; CODE XREF: _sub_epsilon_src_nodes+11B↓j
.text:0000000000009CD8                 test    rax, rax
.text:0000000000009CDB                 jnz     loc_9DB8
.text:0000000000009CE1                 mov     rdi, [r14+8]
.text:0000000000009CE5                 lea     rsi, [r14+10h]
.text:0000000000009CE9                 mov     rdx, r8
.text:0000000000009CEC                 call    re_node_set_contains_isra_3
.text:0000000000009CF1                 test    rax, rax
.text:0000000000009CF4                 jz      loc_9DB8
.text:0000000000009CFA
.text:0000000000009CFA loc_9CFA:                               ; CODE XREF: _sub_epsilon_src_nodes+139↓j
.text:0000000000009CFA                                         ; _sub_epsilon_src_nodes+182↓j
.text:0000000000009CFA                 mov     rdx, [r12+38h]
.text:0000000000009CFF                 mov     rsi, [rsp+78h+var_68]
.text:0000000000009D04                 mov     rdi, [rsp+78h+var_60]
.text:0000000000009D09                 add     rdx, r9
.text:0000000000009D0C                 call    re_node_set_add_intersect
.text:0000000000009D11                 test    eax, eax
.text:0000000000009D13                 jnz     loc_9E90
.text:0000000000009D19                 mov     r10, [rbp+8]
.text:0000000000009D1D                 nop     dword ptr [rax]
.text:0000000000009D20
.text:0000000000009D20 loc_9D20:                               ; CODE XREF: _sub_epsilon_src_nodes+C8↓j
.text:0000000000009D20                                         ; _sub_epsilon_src_nodes+D9↓j ...
.text:0000000000009D20                 add     rbx, 1
.text:0000000000009D24                 cmp     r10, rbx
.text:0000000000009D27                 jle     loc_9E00
.text:0000000000009D2D
.text:0000000000009D2D loc_9D2D:                               ; CODE XREF: _sub_epsilon_src_nodes+63↑j
.text:0000000000009D2D                 mov     rax, [rbp+10h]
.text:0000000000009D31                 mov     rax, [rax+rbx*8]
.text:0000000000009D35                 cmp     r13, rax
.text:0000000000009D38                 jz      short loc_9D20
.text:0000000000009D3A                 mov     rdx, rax
.text:0000000000009D3D                 shl     rdx, 4
.text:0000000000009D41                 add     rdx, [r12]
.text:0000000000009D45                 test    byte ptr [rdx+8], 8
.text:0000000000009D49                 jz      short loc_9D20
.text:0000000000009D4B                 lea     r9, [rax+rax*2]
.text:0000000000009D4F                 mov     rcx, [r12+28h]
.text:0000000000009D54                 lea     r11, [rbp+10h]
.text:0000000000009D58                 mov     rdi, r10
.text:0000000000009D5B                 shl     r9, 3
.text:0000000000009D5F                 mov     rsi, r11
.text:0000000000009D62                 add     rcx, r9
.text:0000000000009D65                 mov     r15, [rcx+10h]
.text:0000000000009D69                 mov     [rsp+78h+var_70], rcx
.text:0000000000009D6E                 mov     r8, [r15]
.text:0000000000009D71                 mov     rdx, r8
.text:0000000000009D74                 mov     [rsp+78h+var_78], r8
.text:0000000000009D78                 call    re_node_set_contains_isra_3
.text:0000000000009D7D                 mov     rcx, [rsp+78h+var_70]
.text:0000000000009D82                 mov     r8, [rsp+78h+var_78]
.text:0000000000009D86                 cmp     qword ptr [rcx+8], 1
.text:0000000000009D8B                 jg      loc_9CD8
.text:0000000000009D91                 test    rax, rax
.text:0000000000009D94                 jnz     short loc_9D20
.text:0000000000009D96                 mov     rdi, [r14+8]
.text:0000000000009D9A                 lea     rsi, [r14+10h]
.text:0000000000009D9E                 mov     rdx, r8
.text:0000000000009DA1                 call    re_node_set_contains_isra_3
.text:0000000000009DA6                 test    rax, rax
.text:0000000000009DA9                 jnz     loc_9CFA
.text:0000000000009DAF                 jmp     loc_9D20
.text:0000000000009DAF ; ---------------------------------------------------------------------------
.text:0000000000009DB4                 align 8
.text:0000000000009DB8
.text:0000000000009DB8 loc_9DB8:                               ; CODE XREF: _sub_epsilon_src_nodes+6B↑j
.text:0000000000009DB8                                         ; _sub_epsilon_src_nodes+84↑j
.text:0000000000009DB8                 mov     r15, [r15+8]
.text:0000000000009DBC                 test    r15, r15
.text:0000000000009DBF                 jle     loc_9D20
.text:0000000000009DC5                 mov     rdx, r15
.text:0000000000009DC8                 mov     rsi, r11
.text:0000000000009DCB                 mov     rdi, r10
.text:0000000000009DCE                 call    re_node_set_contains_isra_3
.text:0000000000009DD3                 test    rax, rax
.text:0000000000009DD6                 jnz     loc_9D20
.text:0000000000009DDC                 mov     rdi, [r14+8]
.text:0000000000009DE0                 lea     rsi, [r14+10h]
.text:0000000000009DE4                 call    re_node_set_contains_isra_3
.text:0000000000009DE9                 test    rax, rax
.text:0000000000009DEC                 jz      loc_9D20
.text:0000000000009DF2                 jmp     loc_9CFA
.text:0000000000009DF2 ; ---------------------------------------------------------------------------
.text:0000000000009DF7                 align 20h
.text:0000000000009E00
.text:0000000000009E00 loc_9E00:                               ; CODE XREF: _sub_epsilon_src_nodes+B7↑j
.text:0000000000009E00                 xor     r9d, r9d
.text:0000000000009E03                 test    r10, r10
.text:0000000000009E06                 lea     r11, [rsp+78h+ptr]
.text:0000000000009E0B                 jle     short loc_9E5C
.text:0000000000009E0D                 nop     dword ptr [rax]
.text:0000000000009E10
.text:0000000000009E10 loc_9E10:                               ; CODE XREF: _sub_epsilon_src_nodes+1EA↓j
.text:0000000000009E10                 mov     rax, [rbp+10h]
.text:0000000000009E14                 mov     rdi, qword ptr [rsp+78h+var_58+8]
.text:0000000000009E19                 mov     rsi, r11
.text:0000000000009E1C                 mov     r10, [rax+r9*8]
.text:0000000000009E20                 mov     rdx, r10
.text:0000000000009E23                 call    re_node_set_contains_isra_3
.text:0000000000009E28                 test    rax, rax
.text:0000000000009E2B                 jnz     short loc_9E52
.text:0000000000009E2D                 lea     rbx, [r14+10h]
.text:0000000000009E31                 mov     rdi, [r14+8]
.text:0000000000009E35                 mov     rsi, rbx
.text:0000000000009E38                 call    re_node_set_contains_isra_3
.text:0000000000009E3D                 sub     rax, 1
.text:0000000000009E41                 mov     rdx, rax
.text:0000000000009E44                 js      short loc_9E52
.text:0000000000009E46                 lea     rdi, [r14+8]
.text:0000000000009E4A                 mov     rsi, rbx
.text:0000000000009E4D                 call    re_node_set_remove_at_isra_4_part_5
.text:0000000000009E52
.text:0000000000009E52 loc_9E52:                               ; CODE XREF: _sub_epsilon_src_nodes+1BB↑j
.text:0000000000009E52                                         ; _sub_epsilon_src_nodes+1D4↑j
.text:0000000000009E52                 add     r9, 1
.text:0000000000009E56                 cmp     [rbp+8], r9
.text:0000000000009E5A                 jg      short loc_9E10
.text:0000000000009E5C
.text:0000000000009E5C loc_9E5C:                               ; CODE XREF: _sub_epsilon_src_nodes+19B↑j
.text:0000000000009E5C                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000009E61
.text:0000000000009E61 loc_9E61:                               ; CODE XREF: _sub_epsilon_src_nodes+234↓j
.text:0000000000009E61                 call    _free
.text:0000000000009E66                 xor     eax, eax
.text:0000000000009E68
.text:0000000000009E68 loc_9E68:                               ; CODE XREF: _sub_epsilon_src_nodes+230↓j
.text:0000000000009E68                 mov     rsi, [rsp+78h+var_40]
.text:0000000000009E6D                 xor     rsi, fs:28h
.text:0000000000009E76                 jnz     short loc_9EA6
.text:0000000000009E78                 add     rsp, 48h
.text:0000000000009E7C                 pop     rbx
.text:0000000000009E7D                 pop     rbp
.text:0000000000009E7E                 pop     r12
.text:0000000000009E80                 pop     r13
.text:0000000000009E82                 pop     r14
.text:0000000000009E84                 pop     r15
.text:0000000000009E86                 retn
.text:0000000000009E86 ; ---------------------------------------------------------------------------
.text:0000000000009E87                 align 10h
.text:0000000000009E90
.text:0000000000009E90 loc_9E90:                               ; CODE XREF: _sub_epsilon_src_nodes+A3↑j
.text:0000000000009E90                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000009E95                 mov     dword ptr [rsp+78h+var_78], eax
.text:0000000000009E98                 call    _free
.text:0000000000009E9D                 mov     eax, dword ptr [rsp+78h+var_78]
.text:0000000000009EA0                 jmp     short loc_9E68
.text:0000000000009EA2 ; ---------------------------------------------------------------------------
.text:0000000000009EA2
.text:0000000000009EA2 loc_9EA2:                               ; CODE XREF: _sub_epsilon_src_nodes+4B↑j
.text:0000000000009EA2                 xor     edi, edi
.text:0000000000009EA4                 jmp     short loc_9E61
.text:0000000000009EA6 ; ---------------------------------------------------------------------------
.text:0000000000009EA6
.text:0000000000009EA6 loc_9EA6:                               ; CODE XREF: _sub_epsilon_src_nodes+206↑j
.text:0000000000009EA6                 call    ___stack_chk_fail
.text:0000000000009EA6 ; } // starts at 9C70
.text:0000000000009EA6 _sub_epsilon_src_nodes endp
.text:0000000000009EA6
.text:0000000000009EA6 ; ---------------------------------------------------------------------------
.text:0000000000009EAB                 align 10h
.text:0000000000009EB0
.text:0000000000009EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EB0
.text:0000000000009EB0
.text:0000000000009EB0 build_trtable   proc near               ; CODE XREF: re_search_internal+1090↓p
.text:0000000000009EB0
.text:0000000000009EB0 var_130         = qword ptr -130h
.text:0000000000009EB0 ptr             = qword ptr -128h
.text:0000000000009EB0 var_120         = qword ptr -120h
.text:0000000000009EB0 var_118         = qword ptr -118h
.text:0000000000009EB0 var_110         = qword ptr -110h
.text:0000000000009EB0 var_108         = qword ptr -108h
.text:0000000000009EB0 var_100         = qword ptr -100h
.text:0000000000009EB0 var_F8          = qword ptr -0F8h
.text:0000000000009EB0 var_E9          = byte ptr -0E9h
.text:0000000000009EB0 var_E8          = qword ptr -0E8h
.text:0000000000009EB0 var_E0          = qword ptr -0E0h
.text:0000000000009EB0 var_CC          = dword ptr -0CCh
.text:0000000000009EB0 var_C8          = qword ptr -0C8h
.text:0000000000009EB0 var_C0          = qword ptr -0C0h
.text:0000000000009EB0 var_B8          = qword ptr -0B8h
.text:0000000000009EB0 var_A8          = xmmword ptr -0A8h
.text:0000000000009EB0 var_98          = xmmword ptr -98h
.text:0000000000009EB0 var_88          = xmmword ptr -88h
.text:0000000000009EB0 var_78          = xmmword ptr -78h
.text:0000000000009EB0 var_68          = xmmword ptr -68h
.text:0000000000009EB0 var_58          = xmmword ptr -58h
.text:0000000000009EB0 var_40          = qword ptr -40h
.text:0000000000009EB0
.text:0000000000009EB0 ; __unwind {
.text:0000000000009EB0                 push    r15
.text:0000000000009EB2                 push    r14
.text:0000000000009EB4                 mov     r15, rdi
.text:0000000000009EB7                 push    r13
.text:0000000000009EB9                 push    r12
.text:0000000000009EBB                 mov     edi, 3800h      ; size
.text:0000000000009EC0                 push    rbp
.text:0000000000009EC1                 push    rbx
.text:0000000000009EC2                 sub     rsp, 108h
.text:0000000000009EC9                 mov     rax, fs:28h
.text:0000000000009ED2                 mov     [rsp+138h+var_40], rax
.text:0000000000009EDA                 xor     eax, eax
.text:0000000000009EDC                 mov     [rsp+138h+var_130], rsi
.text:0000000000009EE1                 call    _malloc
.text:0000000000009EE6                 test    rax, rax
.text:0000000000009EE9                 mov     [rsp+138h+var_120], rax
.text:0000000000009EEE                 jz      loc_A2C0
.text:0000000000009EF4                 mov     rax, [rsp+138h+var_120]
.text:0000000000009EF9                 pxor    xmm0, xmm0
.text:0000000000009EFD                 lea     rbx, [rax+1800h]
.text:0000000000009F04                 mov     rax, [rsp+138h+var_130]
.text:0000000000009F09                 movaps  [rsp+138h+var_A8], xmm0
.text:0000000000009F11                 mov     [rsp+138h+var_F8], rbx
.text:0000000000009F16                 movaps  [rsp+138h+var_98], xmm0
.text:0000000000009F1E                 cmp     qword ptr [rax+10h], 0
.text:0000000000009F23                 mov     qword ptr [rax+58h], 0
.text:0000000000009F2B                 mov     qword ptr [rax+60h], 0
.text:0000000000009F33                 jle     loc_A9AA
.text:0000000000009F39                 mov     [rsp+138h+var_108], r15
.text:0000000000009F3E                 xor     ebp, ebp
.text:0000000000009F40                 mov     [rsp+138h+ptr], 0
.text:0000000000009F49                 mov     r15, rbx
.text:0000000000009F4C
.text:0000000000009F4C loc_9F4C:                               ; CODE XREF: build_trtable+113↓j
.text:0000000000009F4C                 mov     rbx, [rsp+138h+ptr]
.text:0000000000009F51                 lea     rax, ds:0[rbx*8]
.text:0000000000009F59                 mov     [rsp+138h+var_118], rax
.text:0000000000009F5E                 mov     rax, [rsp+138h+var_130]
.text:0000000000009F63                 mov     rax, [rax+18h]
.text:0000000000009F67                 mov     r13, [rax+rbx*8]
.text:0000000000009F6B                 mov     rax, [rsp+138h+var_108]
.text:0000000000009F70                 shl     r13, 4
.text:0000000000009F74                 add     r13, [rax]
.text:0000000000009F77                 movzx   r14d, byte ptr [r13+8]
.text:0000000000009F7C                 mov     eax, [r13+8]
.text:0000000000009F80                 shr     eax, 8
.text:0000000000009F83                 and     ax, 3FFh
.text:0000000000009F87                 cmp     r14d, 1
.text:0000000000009F8B                 jz      loc_A2F0
.text:0000000000009F91                 cmp     r14d, 3
.text:0000000000009F95                 jz      loc_A760
.text:0000000000009F9B                 cmp     r14d, 5
.text:0000000000009F9F                 jz      loc_A620
.text:0000000000009FA5                 cmp     r14d, 7
.text:0000000000009FA9                 jz      loc_A789
.text:0000000000009FAF
.text:0000000000009FAF loc_9FAF:                               ; CODE XREF: build_trtable+4CF↓j
.text:0000000000009FAF                                         ; build_trtable+524↓j ...
.text:0000000000009FAF                 mov     rbx, [rsp+138h+var_130]
.text:0000000000009FB4                 add     [rsp+138h+ptr], 1
.text:0000000000009FBA                 mov     rax, [rsp+138h+ptr]
.text:0000000000009FBF                 cmp     rax, [rbx+10h]
.text:0000000000009FC3                 jl      short loc_9F4C
.text:0000000000009FC5                 test    rbp, rbp
.text:0000000000009FC8                 mov     r15, [rsp+138h+var_108]
.text:0000000000009FCD                 jle     loc_AA29
.text:0000000000009FD3                 lea     rbx, [rbp+1]
.text:0000000000009FD7                 mov     [rsp+138h+var_C0], 0
.text:0000000000009FE0                 mov     [rsp+138h+var_C8], rbx
.text:0000000000009FE5                 shl     rbx, 3
.text:0000000000009FE9                 mov     rdi, rbx        ; size
.text:0000000000009FEC                 call    _malloc
.text:0000000000009FF1                 test    rax, rax
.text:0000000000009FF4                 mov     r12, rax
.text:0000000000009FF7                 mov     [rsp+138h+var_B8], rax
.text:0000000000009FFF                 jz      loc_A7FF
.text:000000000000A005                 mov     rax, 0AAAAAAAAAAAA855h
.text:000000000000A00F                 mov     [rsp+138h+var_CC], 0
.text:000000000000A017                 cmp     rbp, rax
.text:000000000000A01A                 jg      loc_A7FF
.text:000000000000A020                 lea     rax, [rbp+rbp*2+0]
.text:000000000000A025                 shl     rax, 3
.text:000000000000A029                 mov     rdi, rax        ; size
.text:000000000000A02C                 mov     [rsp+138h+var_E0], rax
.text:000000000000A031                 call    _malloc
.text:000000000000A036                 test    rax, rax
.text:000000000000A039                 mov     [rsp+138h+ptr], rax
.text:000000000000A03E                 jz      loc_A7FF
.text:000000000000A044                 mov     rax, [rsp+138h+ptr]
.text:000000000000A049                 sub     rbx, 8
.text:000000000000A04D                 mov     r12, [rsp+138h+var_F8]
.text:000000000000A052                 pxor    xmm0, xmm0
.text:000000000000A056                 lea     r14, [rsp+138h+var_C8]
.text:000000000000A05B                 mov     [rsp+138h+var_118], rbp
.text:000000000000A060                 mov     [rsp+138h+var_E9], 0
.text:000000000000A065                 mov     rbp, r15
.text:000000000000A068                 add     rax, rbx
.text:000000000000A06B                 mov     [rsp+138h+var_E8], r12
.text:000000000000A070                 add     rbx, rax
.text:000000000000A073                 mov     [rsp+138h+var_108], rax
.text:000000000000A078                 mov     rax, [rsp+138h+var_120]
.text:000000000000A07D                 movaps  [rsp+138h+var_68], xmm0
.text:000000000000A085                 mov     [rsp+138h+var_100], rbx
.text:000000000000A08A                 xor     ebx, ebx
.text:000000000000A08C                 lea     r13, [rax+8]
.text:000000000000A090                 lea     rax, [rsp+138h+var_CC]
.text:000000000000A095                 movaps  [rsp+138h+var_58], xmm0
.text:000000000000A09D                 mov     [rsp+138h+var_110], rax
.text:000000000000A0A2
.text:000000000000A0A2 loc_A0A2:                               ; CODE XREF: build_trtable+2C2↓j
.text:000000000000A0A2                 mov     [rsp+138h+var_C0], 0
.text:000000000000A0AB                 cmp     qword ptr [r13+0], 0
.text:000000000000A0B0                 jle     short loc_A0F8
.text:000000000000A0B2                 xor     r15d, r15d
.text:000000000000A0B5                 nop     dword ptr [rax]
.text:000000000000A0B8
.text:000000000000A0B8 loc_A0B8:                               ; CODE XREF: build_trtable+246↓j
.text:000000000000A0B8                 mov     rax, [r13+8]
.text:000000000000A0BC                 mov     rdx, [rax+r15*8]
.text:000000000000A0C0                 mov     rax, [rbp+18h]
.text:000000000000A0C4                 mov     rax, [rax+rdx*8]
.text:000000000000A0C8                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A0CC                 jz      short loc_A0EE
.text:000000000000A0CE                 lea     rdx, [rax+rax*2]
.text:000000000000A0D2                 mov     rax, [rbp+30h]
.text:000000000000A0D6                 mov     rdi, r14
.text:000000000000A0D9                 lea     rsi, [rax+rdx*8]
.text:000000000000A0DD                 call    re_node_set_merge
.text:000000000000A0E2                 test    eax, eax
.text:000000000000A0E4                 mov     [rsp+138h+var_CC], eax
.text:000000000000A0E8                 jnz     loc_A7E8
.text:000000000000A0EE
.text:000000000000A0EE loc_A0EE:                               ; CODE XREF: build_trtable+21C↑j
.text:000000000000A0EE                 add     r15, 1
.text:000000000000A0F2                 cmp     [r13+0], r15
.text:000000000000A0F6                 jg      short loc_A0B8
.text:000000000000A0F8
.text:000000000000A0F8 loc_A0F8:                               ; CODE XREF: build_trtable+200↑j
.text:000000000000A0F8                 mov     rdi, [rsp+138h+var_110]
.text:000000000000A0FD                 xor     ecx, ecx
.text:000000000000A0FF                 mov     rsi, rbp
.text:000000000000A102                 mov     rdx, r14
.text:000000000000A105                 call    re_acquire_state_context
.text:000000000000A10A                 mov     rsi, [rsp+138h+ptr]
.text:000000000000A10F                 test    rax, rax
.text:000000000000A112                 mov     [rsi+rbx*8], rax
.text:000000000000A116                 jz      loc_A8C8
.text:000000000000A11C
.text:000000000000A11C loc_A11C:                               ; CODE XREF: build_trtable+A1E↓j
.text:000000000000A11C                 cmp     byte ptr [rax+68h], 0
.text:000000000000A120                 js      loc_A840
.text:000000000000A126                 mov     rdi, [rsp+138h+var_108]
.text:000000000000A12B                 mov     rsi, [rsp+138h+var_100]
.text:000000000000A130                 mov     [rdi+rbx*8], rax
.text:000000000000A134                 mov     rax, [rsp+138h+ptr]
.text:000000000000A139                 mov     rax, [rax+rbx*8]
.text:000000000000A13D                 mov     [rsi+rbx*8], rax
.text:000000000000A141
.text:000000000000A141 loc_A141:                               ; CODE XREF: build_trtable+9FC↓j
.text:000000000000A141                                         ; build_trtable+A08↓j
.text:000000000000A141                 lea     rdx, [rsp+138h+var_68]
.text:000000000000A149                 xor     eax, eax
.text:000000000000A14B
.text:000000000000A14B loc_A14B:                               ; CODE XREF: build_trtable+2AF↓j
.text:000000000000A14B                 mov     rcx, [rdx+rax]
.text:000000000000A14F                 or      rcx, [r12+rax]
.text:000000000000A153                 mov     [rdx+rax], rcx
.text:000000000000A157                 add     rax, 8
.text:000000000000A15B                 cmp     rax, 20h ; ' '
.text:000000000000A15F                 jnz     short loc_A14B
.text:000000000000A161                 add     rbx, 1
.text:000000000000A165                 add     r13, 18h
.text:000000000000A169                 add     r12, 20h ; ' '
.text:000000000000A16D                 cmp     rbx, [rsp+138h+var_118]
.text:000000000000A172                 jnz     loc_A0A2
.text:000000000000A178                 cmp     [rsp+138h+var_E9], 0
.text:000000000000A17D                 mov     r15, rbp
.text:000000000000A180                 mov     rbp, [rsp+138h+var_118]
.text:000000000000A185                 mov     [rsp+138h+var_118], rdx
.text:000000000000A18A                 jnz     loc_A8D9
.text:000000000000A190                 mov     esi, 100h       ; size
.text:000000000000A195                 mov     edi, 8          ; nmemb
.text:000000000000A19A                 call    _calloc
.text:000000000000A19F                 mov     r11, rax
.text:000000000000A1A2                 mov     rax, [rsp+138h+var_130]
.text:000000000000A1A7                 test    r11, r11
.text:000000000000A1AA                 mov     [rax+58h], r11
.text:000000000000A1AE                 jz      loc_A7ED
.text:000000000000A1B4                 mov     rbx, [rsp+138h+var_F8]
.text:000000000000A1B9                 mov     r12, [rsp+138h+ptr]
.text:000000000000A1BE                 xor     r9d, r9d
.text:000000000000A1C1                 mov     r13, [rsp+138h+var_108]
.text:000000000000A1C6                 mov     rdx, [rsp+138h+var_118]
.text:000000000000A1CB                 add     rbx, 20h ; ' '
.text:000000000000A1CF
.text:000000000000A1CF loc_A1CF:                               ; CODE XREF: build_trtable+35C↓j
.text:000000000000A1CF                 mov     rax, [rdx+r9]
.text:000000000000A1D3                 test    rax, rax
.text:000000000000A1D6                 jz      short loc_A204
.text:000000000000A1D8                 mov     rsi, r9
.text:000000000000A1DB                 mov     ecx, 1
.text:000000000000A1E0                 shl     rsi, 6
.text:000000000000A1E4                 add     rsi, r11
.text:000000000000A1E7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A1F0
.text:000000000000A1F0 loc_A1F0:                               ; CODE XREF: build_trtable+352↓j
.text:000000000000A1F0                 test    al, 1
.text:000000000000A1F2                 jnz     loc_A958
.text:000000000000A1F8
.text:000000000000A1F8 loc_A1F8:                               ; CODE XREF: build_trtable+AE9↓j
.text:000000000000A1F8                                         ; build_trtable+AF5↓j
.text:000000000000A1F8                 add     rcx, rcx
.text:000000000000A1FB                 add     rsi, 8
.text:000000000000A1FF                 shr     rax, 1
.text:000000000000A202                 jnz     short loc_A1F0
.text:000000000000A204
.text:000000000000A204 loc_A204:                               ; CODE XREF: build_trtable+326↑j
.text:000000000000A204                 add     r9, 8
.text:000000000000A208                 cmp     r9, 20h ; ' '
.text:000000000000A20C                 jnz     short loc_A1CF
.text:000000000000A20E
.text:000000000000A20E loc_A20E:                               ; CODE XREF: build_trtable+AA0↓j
.text:000000000000A20E                 test    byte ptr [rsp+138h+var_68+1], 4
.text:000000000000A216                 jz      short loc_A252
.text:000000000000A218                 xor     eax, eax
.text:000000000000A21A                 mov     rdx, [rsp+138h+var_E8]
.text:000000000000A21F                 jmp     short loc_A22E
.text:000000000000A221 ; ---------------------------------------------------------------------------
.text:000000000000A221
.text:000000000000A221 loc_A221:                               ; CODE XREF: build_trtable+385↓j
.text:000000000000A221                 add     rax, 1
.text:000000000000A225                 add     rdx, 20h ; ' '
.text:000000000000A229                 cmp     rax, rbp
.text:000000000000A22C                 jz      short loc_A252
.text:000000000000A22E
.text:000000000000A22E loc_A22E:                               ; CODE XREF: build_trtable+36F↑j
.text:000000000000A22E                 test    qword ptr [rdx], 400h
.text:000000000000A235                 jz      short loc_A221
.text:000000000000A237                 mov     rbx, [rsp+138h+var_100]
.text:000000000000A23C                 cmp     [rsp+138h+var_E9], 0
.text:000000000000A241                 mov     rax, [rbx+rax*8]
.text:000000000000A245                 mov     [r11+50h], rax
.text:000000000000A249                 jz      short loc_A252
.text:000000000000A24B                 mov     [r11+850h], rax
.text:000000000000A252
.text:000000000000A252 loc_A252:                               ; CODE XREF: build_trtable+366↑j
.text:000000000000A252                                         ; build_trtable+37C↑j ...
.text:000000000000A252                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:000000000000A257                 call    _free
.text:000000000000A25C                 mov     rdi, [rsp+138h+var_B8] ; ptr
.text:000000000000A264                 call    _free
.text:000000000000A269                 mov     rax, [rsp+138h+var_120]
.text:000000000000A26E                 mov     rbx, [rsp+138h+var_E0]
.text:000000000000A273                 lea     rbp, [rax+10h]
.text:000000000000A277                 add     rbx, rbp
.text:000000000000A27A
.text:000000000000A27A loc_A27A:                               ; CODE XREF: build_trtable+3DA↓j
.text:000000000000A27A                 mov     rdi, [rbp+0]    ; ptr
.text:000000000000A27E                 add     rbp, 18h
.text:000000000000A282                 call    _free
.text:000000000000A287                 cmp     rbx, rbp
.text:000000000000A28A                 jnz     short loc_A27A
.text:000000000000A28C                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000A291                 call    _free
.text:000000000000A296                 mov     eax, 1
.text:000000000000A29B                 jmp     short loc_A2C2
.text:000000000000A29D ; ---------------------------------------------------------------------------
.text:000000000000A29D
.text:000000000000A29D loc_A29D:                               ; CODE XREF: build_trtable+707↓j
.text:000000000000A29D                 test    rbp, rbp
.text:000000000000A2A0                 mov     qword ptr [rbx+8], 0
.text:000000000000A2A8                 mov     qword ptr [rbx], 0
.text:000000000000A2AF                 jnz     loc_A5E0
.text:000000000000A2B5                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000A2BA                 call    _free
.text:000000000000A2BF                 nop
.text:000000000000A2C0
.text:000000000000A2C0 loc_A2C0:                               ; CODE XREF: build_trtable+3E↑j
.text:000000000000A2C0                                         ; build_trtable+763↓j ...
.text:000000000000A2C0                 xor     eax, eax
.text:000000000000A2C2
.text:000000000000A2C2 loc_A2C2:                               ; CODE XREF: build_trtable+3EB↑j
.text:000000000000A2C2                                         ; build_trtable+B22↓j
.text:000000000000A2C2                 mov     rbx, [rsp+138h+var_40]
.text:000000000000A2CA                 xor     rbx, fs:28h
.text:000000000000A2D3                 jnz     loc_AA24
.text:000000000000A2D9                 add     rsp, 108h
.text:000000000000A2E0                 pop     rbx
.text:000000000000A2E1                 pop     rbp
.text:000000000000A2E2                 pop     r12
.text:000000000000A2E4                 pop     r13
.text:000000000000A2E6                 pop     r14
.text:000000000000A2E8                 pop     r15
.text:000000000000A2EA                 retn
.text:000000000000A2EA ; ---------------------------------------------------------------------------
.text:000000000000A2EB                 align 10h
.text:000000000000A2F0
.text:000000000000A2F0 loc_A2F0:                               ; CODE XREF: build_trtable+DB↑j
.text:000000000000A2F0                 movzx   ecx, byte ptr [r13+0]
.text:000000000000A2F5                 lea     r12, [rsp+138h+var_A8]
.text:000000000000A2FD                 mov     edi, 1
.text:000000000000A302                 mov     rdx, rcx
.text:000000000000A305                 and     ecx, 3Fh
.text:000000000000A308                 shr     rdx, 3
.text:000000000000A30C                 shl     rdi, cl
.text:000000000000A30F                 and     edx, 18h
.text:000000000000A312                 or      [r12+rdx], rdi
.text:000000000000A316
.text:000000000000A316 loc_A316:                               ; CODE XREF: build_trtable+7C9↓j
.text:000000000000A316                                         ; build_trtable+7D8↓j ...
.text:000000000000A316                 test    ax, ax
.text:000000000000A319                 jz      loc_A3E0
.text:000000000000A31F                 test    al, 20h
.text:000000000000A321                 jnz     loc_A690
.text:000000000000A327
.text:000000000000A327 loc_A327:                               ; CODE XREF: build_trtable+80C↓j
.text:000000000000A327                 test    al, 80h
.text:000000000000A329                 jnz     loc_A5C4
.text:000000000000A32F                 test    al, 4
.text:000000000000A331                 jz      short loc_A385
.text:000000000000A333                 cmp     r14d, 1
.text:000000000000A337                 jz      loc_A715
.text:000000000000A33D                 mov     r8, [rsp+138h+var_108]
.text:000000000000A342                 cmp     dword ptr [r8+0B4h], 1
.text:000000000000A34A                 jle     loc_A7A2
.text:000000000000A350
.text:000000000000A350 loc_A350:                               ; CODE XREF: build_trtable+87D↓j
.text:000000000000A350                 mov     rdi, [r8+78h]
.text:000000000000A354                 xor     esi, esi
.text:000000000000A356                 xor     ecx, ecx
.text:000000000000A358
.text:000000000000A358 loc_A358:                               ; CODE XREF: build_trtable+4CA↓j
.text:000000000000A358                 mov     rdx, [rdi+rcx*8]
.text:000000000000A35C                 not     rdx
.text:000000000000A35F                 or      rdx, [r8+rcx*8+0B8h]
.text:000000000000A367                 and     rdx, [r12+rcx*8]
.text:000000000000A36B                 mov     [r12+rcx*8], rdx
.text:000000000000A36F                 add     rcx, 1
.text:000000000000A373                 or      rsi, rdx
.text:000000000000A376                 cmp     rcx, 4
.text:000000000000A37A                 jnz     short loc_A358
.text:000000000000A37C                 test    rsi, rsi
.text:000000000000A37F                 jz      loc_9FAF
.text:000000000000A385
.text:000000000000A385 loc_A385:                               ; CODE XREF: build_trtable+481↑j
.text:000000000000A385                                         ; build_trtable+91B↓j
.text:000000000000A385                 test    al, 8
.text:000000000000A387                 jz      short loc_A3E0
.text:000000000000A389                 cmp     r14d, 1
.text:000000000000A38D                 jz      loc_A6C1
.text:000000000000A393                 mov     rdi, [rsp+138h+var_108]
.text:000000000000A398                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000000A39F                 jle     loc_A6DE
.text:000000000000A3A5
.text:000000000000A3A5 loc_A3A5:                               ; CODE XREF: build_trtable+828↓j
.text:000000000000A3A5                 mov     rsi, [rdi+78h]
.text:000000000000A3A9                 xor     ecx, ecx
.text:000000000000A3AB                 xor     edx, edx
.text:000000000000A3AD
.text:000000000000A3AD loc_A3AD:                               ; CODE XREF: build_trtable+51F↓j
.text:000000000000A3AD                 mov     rax, [rdi+rdx*8+0B8h]
.text:000000000000A3B5                 and     rax, [rsi+rdx*8]
.text:000000000000A3B9                 not     rax
.text:000000000000A3BC                 and     rax, [r12+rdx*8]
.text:000000000000A3C0                 mov     [r12+rdx*8], rax
.text:000000000000A3C4                 add     rdx, 1
.text:000000000000A3C8                 or      rcx, rax
.text:000000000000A3CB                 cmp     rdx, 4
.text:000000000000A3CF                 jnz     short loc_A3AD
.text:000000000000A3D1                 test    rcx, rcx
.text:000000000000A3D4                 jz      loc_9FAF
.text:000000000000A3DA                 nop     word ptr [rax+rax+00h]
.text:000000000000A3E0
.text:000000000000A3E0 loc_A3E0:                               ; CODE XREF: build_trtable+469↑j
.text:000000000000A3E0                                         ; build_trtable+4D7↑j ...
.text:000000000000A3E0                 xor     ebx, ebx
.text:000000000000A3E2                 test    rbp, rbp
.text:000000000000A3E5                 jle     loc_A54B
.text:000000000000A3EB                 mov     [rsp+138h+var_110], r13
.text:000000000000A3F0                 mov     r13, r15
.text:000000000000A3F3                 nop     dword ptr [rax+rax+00h]
.text:000000000000A3F8
.text:000000000000A3F8 loc_A3F8:                               ; CODE XREF: build_trtable+692↓j
.text:000000000000A3F8                 mov     r10, rbx
.text:000000000000A3FB                 shl     r10, 5
.text:000000000000A3FF                 cmp     r14d, 1
.text:000000000000A403                 jnz     short loc_A428
.text:000000000000A405                 mov     rax, [rsp+138h+var_110]
.text:000000000000A40A                 movzx   edx, byte ptr [rax]
.text:000000000000A40D                 mov     rax, rdx
.text:000000000000A410                 shr     rax, 3
.text:000000000000A414                 and     eax, 18h
.text:000000000000A417                 add     rax, r13
.text:000000000000A41A                 mov     rax, [rax+r10]
.text:000000000000A41E                 bt      rax, rdx
.text:000000000000A422                 jnb     loc_A53B
.text:000000000000A428
.text:000000000000A428 loc_A428:                               ; CODE XREF: build_trtable+553↑j
.text:000000000000A428                 lea     rdi, [r13+r10+0]
.text:000000000000A42D                 lea     rsi, [rsp+138h+var_88]
.text:000000000000A435                 xor     ecx, ecx
.text:000000000000A437                 xor     eax, eax
.text:000000000000A439
.text:000000000000A439 loc_A439:                               ; CODE XREF: build_trtable+5A0↓j
.text:000000000000A439                 mov     rdx, [r12+rax*8]
.text:000000000000A43D                 and     rdx, [rdi+rax*8]
.text:000000000000A441                 mov     [rsi+rax*8], rdx
.text:000000000000A445                 add     rax, 1
.text:000000000000A449                 or      rcx, rdx
.text:000000000000A44C                 cmp     rax, 4
.text:000000000000A450                 jnz     short loc_A439
.text:000000000000A452                 test    rcx, rcx
.text:000000000000A455                 jz      loc_A53B
.text:000000000000A45B                 lea     r11, [rsp+138h+var_68]
.text:000000000000A463                 xor     r15d, r15d
.text:000000000000A466                 xor     r9d, r9d
.text:000000000000A469                 xor     ecx, ecx
.text:000000000000A46B
.text:000000000000A46B loc_A46B:                               ; CODE XREF: build_trtable+5E8↓j
.text:000000000000A46B                 mov     rsi, [r12+rcx*8]
.text:000000000000A46F                 mov     rax, [rdi+rcx*8]
.text:000000000000A473                 mov     rdx, rsi
.text:000000000000A476                 not     rdx
.text:000000000000A479                 and     rdx, rax
.text:000000000000A47C                 not     rax
.text:000000000000A47F                 and     rax, rsi
.text:000000000000A482                 mov     [r11+rcx*8], rdx
.text:000000000000A486                 or      r9, rdx
.text:000000000000A489                 mov     [r12+rcx*8], rax
.text:000000000000A48D                 add     rcx, 1
.text:000000000000A491                 or      r15, rax
.text:000000000000A494                 cmp     rcx, 4
.text:000000000000A498                 jnz     short loc_A46B
.text:000000000000A49A                 mov     rdi, [rsp+138h+var_120]
.text:000000000000A49F                 lea     rax, [rbx+rbx*2]
.text:000000000000A4A3                 test    r9, r9
.text:000000000000A4A6                 lea     rdx, [rdi+rax*8]
.text:000000000000A4AA                 jz      short loc_A514
.text:000000000000A4AC                 mov     rax, rbp
.text:000000000000A4AF                 movdqa  xmm0, [rsp+138h+var_68]
.text:000000000000A4B8                 shl     rax, 5
.text:000000000000A4BC                 mov     rsi, rdx
.text:000000000000A4BF                 mov     [rsp+138h+var_100], rdx
.text:000000000000A4C4                 add     rax, r13
.text:000000000000A4C7                 movups  xmmword ptr [rax], xmm0
.text:000000000000A4CA                 movdqa  xmm0, [rsp+138h+var_58]
.text:000000000000A4D3                 movups  xmmword ptr [rax+10h], xmm0
.text:000000000000A4D7                 lea     rax, [rbp+rbp*2+0]
.text:000000000000A4DC                 lea     rdi, [rdi+rax*8]
.text:000000000000A4E0                 movdqa  xmm0, [rsp+138h+var_88]
.text:000000000000A4E9                 movups  xmmword ptr [r13+r10+0], xmm0
.text:000000000000A4EF                 movdqa  xmm0, [rsp+138h+var_78]
.text:000000000000A4F8                 movups  xmmword ptr [r13+r10+10h], xmm0
.text:000000000000A4FE                 call    re_node_set_init_copy
.text:000000000000A503                 test    eax, eax
.text:000000000000A505                 jnz     loc_A5E0
.text:000000000000A50B                 mov     rdx, [rsp+138h+var_100]
.text:000000000000A510                 add     rbp, 1
.text:000000000000A514
.text:000000000000A514 loc_A514:                               ; CODE XREF: build_trtable+5FA↑j
.text:000000000000A514                 mov     rax, [rsp+138h+var_130]
.text:000000000000A519                 mov     rsi, [rsp+138h+var_118]
.text:000000000000A51E                 mov     rdi, rdx
.text:000000000000A521                 mov     rax, [rax+18h]
.text:000000000000A525                 mov     rsi, [rax+rsi]
.text:000000000000A529                 call    re_node_set_insert
.text:000000000000A52E                 test    al, al
.text:000000000000A530                 jz      loc_A5E0
.text:000000000000A536                 test    r15, r15
.text:000000000000A539                 jz      short loc_A548
.text:000000000000A53B
.text:000000000000A53B loc_A53B:                               ; CODE XREF: build_trtable+572↑j
.text:000000000000A53B                                         ; build_trtable+5A5↑j
.text:000000000000A53B                 add     rbx, 1
.text:000000000000A53F                 cmp     rbx, rbp
.text:000000000000A542                 jl      loc_A3F8
.text:000000000000A548
.text:000000000000A548 loc_A548:                               ; CODE XREF: build_trtable+689↑j
.text:000000000000A548                 mov     r15, r13
.text:000000000000A54B
.text:000000000000A54B loc_A54B:                               ; CODE XREF: build_trtable+535↑j
.text:000000000000A54B                 cmp     rbp, rbx
.text:000000000000A54E                 jnz     loc_9FAF
.text:000000000000A554                 mov     rax, rbp
.text:000000000000A557                 movdqa  xmm0, [rsp+138h+var_A8]
.text:000000000000A560                 shl     rax, 5
.text:000000000000A564                 mov     rbx, [rsp+138h+var_118]
.text:000000000000A569                 mov     edi, 8          ; size
.text:000000000000A56E                 add     rax, r15
.text:000000000000A571                 movups  xmmword ptr [rax], xmm0
.text:000000000000A574                 movdqa  xmm0, [rsp+138h+var_98]
.text:000000000000A57D                 movups  xmmword ptr [rax+10h], xmm0
.text:000000000000A581                 mov     rax, [rsp+138h+var_130]
.text:000000000000A586                 mov     rax, [rax+18h]
.text:000000000000A58A                 mov     r13, [rax+rbx]
.text:000000000000A58E                 mov     rbx, [rsp+138h+var_120]
.text:000000000000A593                 lea     rax, [rbp+rbp*2+0]
.text:000000000000A598                 lea     rbx, [rbx+rax*8]
.text:000000000000A59C                 mov     qword ptr [rbx], 1
.text:000000000000A5A3                 mov     qword ptr [rbx+8], 1
.text:000000000000A5AB                 call    _malloc
.text:000000000000A5B0                 test    rax, rax
.text:000000000000A5B3                 mov     [rbx+10h], rax
.text:000000000000A5B7                 jz      loc_A29D
.text:000000000000A5BD                 mov     [rax], r13
.text:000000000000A5C0                 add     rbp, 1
.text:000000000000A5C4
.text:000000000000A5C4 loc_A5C4:                               ; CODE XREF: build_trtable+479↑j
.text:000000000000A5C4                                         ; build_trtable+816↓j ...
.text:000000000000A5C4                 pxor    xmm0, xmm0
.text:000000000000A5C8                 movaps  xmmword ptr [r12], xmm0
.text:000000000000A5CD                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000000A5D3                 jmp     loc_9FAF
.text:000000000000A5D3 ; ---------------------------------------------------------------------------
.text:000000000000A5D8                 align 20h
.text:000000000000A5E0
.text:000000000000A5E0 loc_A5E0:                               ; CODE XREF: build_trtable+3FF↑j
.text:000000000000A5E0                                         ; build_trtable+655↑j ...
.text:000000000000A5E0                 mov     rax, [rsp+138h+var_120]
.text:000000000000A5E5                 lea     rbx, [rax+10h]
.text:000000000000A5E9                 lea     rax, [rbp+rbp*2+0]
.text:000000000000A5EE                 lea     rbp, [rbx+rax*8]
.text:000000000000A5F2                 nop     word ptr [rax+rax+00h]
.text:000000000000A5F8
.text:000000000000A5F8 loc_A5F8:                               ; CODE XREF: build_trtable+757↓j
.text:000000000000A5F8                 mov     rdi, [rbx]      ; ptr
.text:000000000000A5FB                 add     rbx, 18h
.text:000000000000A5FF                 call    _free
.text:000000000000A604                 cmp     rbp, rbx
.text:000000000000A607                 jnz     short loc_A5F8
.text:000000000000A609                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000A60E                 call    _free
.text:000000000000A613                 jmp     loc_A2C0
.text:000000000000A613 ; ---------------------------------------------------------------------------
.text:000000000000A618                 align 20h
.text:000000000000A620
.text:000000000000A620 loc_A620:                               ; CODE XREF: build_trtable+EF↑j
.text:000000000000A620                 mov     rsi, [rsp+138h+var_108]
.text:000000000000A625                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000A62C                 jle     loc_A735
.text:000000000000A632                 mov     rsi, [rsi+78h]
.text:000000000000A636                 lea     r12, [rsp+138h+var_A8]
.text:000000000000A63E                 xor     edx, edx
.text:000000000000A640
.text:000000000000A640 loc_A640:                               ; CODE XREF: build_trtable+7A4↓j
.text:000000000000A640                 mov     rcx, [r12+rdx]
.text:000000000000A644                 or      rcx, [rsi+rdx]
.text:000000000000A648                 mov     [r12+rdx], rcx
.text:000000000000A64C                 add     rdx, 8
.text:000000000000A650                 cmp     rdx, 20h ; ' '
.text:000000000000A654                 jnz     short loc_A640
.text:000000000000A656
.text:000000000000A656 loc_A656:                               ; CODE XREF: build_trtable+8A1↓j
.text:000000000000A656                                         ; build_trtable+8ED↓j
.text:000000000000A656                 mov     rbx, [rsp+138h+var_108]
.text:000000000000A65B                 mov     rdx, [rbx+0D8h]
.text:000000000000A662                 test    dl, 40h
.text:000000000000A665                 jnz     short loc_A673
.text:000000000000A667                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFBFFh
.text:000000000000A673
.text:000000000000A673 loc_A673:                               ; CODE XREF: build_trtable+7B5↑j
.text:000000000000A673                 and     edx, 80h
.text:000000000000A679                 jz      loc_A316
.text:000000000000A67F                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFFFEh
.text:000000000000A688                 jmp     loc_A316
.text:000000000000A688 ; ---------------------------------------------------------------------------
.text:000000000000A68D                 align 10h
.text:000000000000A690
.text:000000000000A690 loc_A690:                               ; CODE XREF: build_trtable+471↑j
.text:000000000000A690                 mov     rdx, qword ptr [rsp+138h+var_A8]
.text:000000000000A698                 pxor    xmm0, xmm0
.text:000000000000A69C                 and     dh, 4
.text:000000000000A69F                 movaps  xmmword ptr [r12], xmm0
.text:000000000000A6A4                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000000A6AA                 jz      loc_9FAF
.text:000000000000A6B0                 mov     qword ptr [rsp+138h+var_A8], 400h
.text:000000000000A6BC                 jmp     loc_A327
.text:000000000000A6C1 ; ---------------------------------------------------------------------------
.text:000000000000A6C1
.text:000000000000A6C1 loc_A6C1:                               ; CODE XREF: build_trtable+4DD↑j
.text:000000000000A6C1                 test    byte ptr [r13+0Ah], 40h
.text:000000000000A6C6                 jnz     loc_A5C4
.text:000000000000A6CC                 mov     rdi, [rsp+138h+var_108]
.text:000000000000A6D1                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000000A6D8                 jg      loc_A3A5
.text:000000000000A6DE
.text:000000000000A6DE loc_A6DE:                               ; CODE XREF: build_trtable+4EF↑j
.text:000000000000A6DE                 mov     rsi, [rsp+138h+var_108]
.text:000000000000A6E3                 xor     ecx, ecx
.text:000000000000A6E5                 xor     edx, edx
.text:000000000000A6E7
.text:000000000000A6E7 loc_A6E7:                               ; CODE XREF: build_trtable+855↓j
.text:000000000000A6E7                 mov     rax, [rsi+rdx*8+0B8h]
.text:000000000000A6EF                 not     rax
.text:000000000000A6F2                 and     rax, [r12+rdx*8]
.text:000000000000A6F6                 mov     [r12+rdx*8], rax
.text:000000000000A6FA                 add     rdx, 1
.text:000000000000A6FE                 or      rcx, rax
.text:000000000000A701                 cmp     rdx, 4
.text:000000000000A705                 jnz     short loc_A6E7
.text:000000000000A707                 test    rcx, rcx
.text:000000000000A70A                 jnz     loc_A3E0
.text:000000000000A710                 jmp     loc_9FAF
.text:000000000000A715 ; ---------------------------------------------------------------------------
.text:000000000000A715
.text:000000000000A715 loc_A715:                               ; CODE XREF: build_trtable+487↑j
.text:000000000000A715                 test    byte ptr [r13+0Ah], 40h
.text:000000000000A71A                 jz      loc_A5C4
.text:000000000000A720                 mov     r8, [rsp+138h+var_108]
.text:000000000000A725                 cmp     dword ptr [r8+0B4h], 1
.text:000000000000A72D                 jg      loc_A350
.text:000000000000A733                 jmp     short loc_A7A2
.text:000000000000A735 ; ---------------------------------------------------------------------------
.text:000000000000A735
.text:000000000000A735 loc_A735:                               ; CODE XREF: build_trtable+77C↑j
.text:000000000000A735                 pcmpeqd xmm0, xmm0
.text:000000000000A739                 lea     r12, [rsp+138h+var_A8]
.text:000000000000A741                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000A749                 movaps  [rsp+138h+var_98], xmm0
.text:000000000000A751                 jmp     loc_A656
.text:000000000000A751 ; ---------------------------------------------------------------------------
.text:000000000000A756                 align 20h
.text:000000000000A760
.text:000000000000A760 loc_A760:                               ; CODE XREF: build_trtable+E5↑j
.text:000000000000A760                 mov     rsi, [r13+0]
.text:000000000000A764                 lea     r12, [rsp+138h+var_A8]
.text:000000000000A76C                 xor     edx, edx
.text:000000000000A76E
.text:000000000000A76E loc_A76E:                               ; CODE XREF: build_trtable+8D2↓j
.text:000000000000A76E                 mov     rcx, [r12+rdx]
.text:000000000000A772                 or      rcx, [rsi+rdx]
.text:000000000000A776                 mov     [r12+rdx], rcx
.text:000000000000A77A                 add     rdx, 8
.text:000000000000A77E                 cmp     rdx, 20h ; ' '
.text:000000000000A782                 jnz     short loc_A76E
.text:000000000000A784                 jmp     loc_A316
.text:000000000000A789 ; ---------------------------------------------------------------------------
.text:000000000000A789
.text:000000000000A789 loc_A789:                               ; CODE XREF: build_trtable+F9↑j
.text:000000000000A789                 pcmpeqd xmm0, xmm0
.text:000000000000A78D                 lea     r12, [rsp+138h+var_A8]
.text:000000000000A795                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000A79D                 jmp     loc_A656
.text:000000000000A7A2 ; ---------------------------------------------------------------------------
.text:000000000000A7A2
.text:000000000000A7A2 loc_A7A2:                               ; CODE XREF: build_trtable+49A↑j
.text:000000000000A7A2                                         ; build_trtable+883↑j
.text:000000000000A7A2                 mov     rdi, [rsp+138h+var_108]
.text:000000000000A7A7                 xor     esi, esi
.text:000000000000A7A9                 xor     edx, edx
.text:000000000000A7AB
.text:000000000000A7AB loc_A7AB:                               ; CODE XREF: build_trtable+916↓j
.text:000000000000A7AB                 mov     rcx, [r12+rdx*8]
.text:000000000000A7AF                 and     rcx, [rdi+rdx*8+0B8h]
.text:000000000000A7B7                 mov     [r12+rdx*8], rcx
.text:000000000000A7BB                 add     rdx, 1
.text:000000000000A7BF                 or      rsi, rcx
.text:000000000000A7C2                 cmp     rdx, 4
.text:000000000000A7C6                 jnz     short loc_A7AB
.text:000000000000A7C8                 test    rsi, rsi
.text:000000000000A7CB                 jnz     loc_A385
.text:000000000000A7D1                 jmp     loc_9FAF
.text:000000000000A7D6 ; ---------------------------------------------------------------------------
.text:000000000000A7D6
.text:000000000000A7D6 loc_A7D6:                               ; CODE XREF: build_trtable+9B1↓j
.text:000000000000A7D6                 mov     edx, [rsp+138h+var_CC]
.text:000000000000A7DA                 test    edx, edx
.text:000000000000A7DC                 jz      loc_A867
.text:000000000000A7E2                 nop     word ptr [rax+rax+00h]
.text:000000000000A7E8
.text:000000000000A7E8 loc_A7E8:                               ; CODE XREF: build_trtable+238↑j
.text:000000000000A7E8                                         ; build_trtable+A0E↓j ...
.text:000000000000A7E8                 mov     rbp, [rsp+138h+var_118]
.text:000000000000A7ED
.text:000000000000A7ED loc_A7ED:                               ; CODE XREF: build_trtable+2FE↑j
.text:000000000000A7ED                                         ; build_trtable+A47↓j
.text:000000000000A7ED                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:000000000000A7F2                 call    _free
.text:000000000000A7F7                 mov     r12, [rsp+138h+var_B8]
.text:000000000000A7FF
.text:000000000000A7FF loc_A7FF:                               ; CODE XREF: build_trtable+14F↑j
.text:000000000000A7FF                                         ; build_trtable+16A↑j ...
.text:000000000000A7FF                 mov     rdi, r12        ; ptr
.text:000000000000A802                 call    _free
.text:000000000000A807                 mov     rax, [rsp+138h+var_120]
.text:000000000000A80C                 lea     rbx, [rax+10h]
.text:000000000000A810                 lea     rax, [rbp+rbp*2+0]
.text:000000000000A815                 lea     rbp, [rbx+rax*8]
.text:000000000000A819                 nop     dword ptr [rax+00000000h]
.text:000000000000A820
.text:000000000000A820 loc_A820:                               ; CODE XREF: build_trtable+97F↓j
.text:000000000000A820                 mov     rdi, [rbx]      ; ptr
.text:000000000000A823                 add     rbx, 18h
.text:000000000000A827                 call    _free
.text:000000000000A82C                 cmp     rbp, rbx
.text:000000000000A82F                 jnz     short loc_A820
.text:000000000000A831                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000A836                 call    _free
.text:000000000000A83B                 jmp     loc_A2C0
.text:000000000000A840 ; ---------------------------------------------------------------------------
.text:000000000000A840
.text:000000000000A840 loc_A840:                               ; CODE XREF: build_trtable+270↑j
.text:000000000000A840                 mov     rdi, [rsp+138h+var_110]
.text:000000000000A845                 mov     ecx, 1
.text:000000000000A84A                 mov     rdx, r14
.text:000000000000A84D                 mov     rsi, rbp
.text:000000000000A850                 call    re_acquire_state_context
.text:000000000000A855                 mov     rdi, [rsp+138h+var_108]
.text:000000000000A85A                 test    rax, rax
.text:000000000000A85D                 mov     [rdi+rbx*8], rax
.text:000000000000A861                 jz      loc_A7D6
.text:000000000000A867
.text:000000000000A867 loc_A867:                               ; CODE XREF: build_trtable+92C↑j
.text:000000000000A867                 mov     rdi, [rsp+138h+ptr]
.text:000000000000A86C                 cmp     rax, [rdi+rbx*8]
.text:000000000000A870                 jz      short loc_A88B
.text:000000000000A872                 movzx   edi, [rsp+138h+var_E9]
.text:000000000000A877                 cmp     dword ptr [rbp+0B4h], 2
.text:000000000000A87E                 mov     eax, 1
.text:000000000000A883                 cmovge  edi, eax
.text:000000000000A886                 mov     [rsp+138h+var_E9], dil
.text:000000000000A88B
.text:000000000000A88B loc_A88B:                               ; CODE XREF: build_trtable+9C0↑j
.text:000000000000A88B                 mov     rdi, [rsp+138h+var_110]
.text:000000000000A890                 mov     rsi, rbp
.text:000000000000A893                 mov     ecx, 2
.text:000000000000A898                 mov     rdx, r14
.text:000000000000A89B                 call    re_acquire_state_context
.text:000000000000A8A0                 mov     rsi, [rsp+138h+var_100]
.text:000000000000A8A5                 test    rax, rax
.text:000000000000A8A8                 mov     [rsi+rbx*8], rax
.text:000000000000A8AC                 jnz     loc_A141
.text:000000000000A8B2                 mov     eax, [rsp+138h+var_CC]
.text:000000000000A8B6                 test    eax, eax
.text:000000000000A8B8                 jz      loc_A141
.text:000000000000A8BE                 jmp     loc_A7E8
.text:000000000000A8BE ; ---------------------------------------------------------------------------
.text:000000000000A8C3                 align 8
.text:000000000000A8C8
.text:000000000000A8C8 loc_A8C8:                               ; CODE XREF: build_trtable+266↑j
.text:000000000000A8C8                 mov     ecx, [rsp+138h+var_CC]
.text:000000000000A8CC                 test    ecx, ecx
.text:000000000000A8CE                 jz      loc_A11C
.text:000000000000A8D4                 jmp     loc_A7E8
.text:000000000000A8D9 ; ---------------------------------------------------------------------------
.text:000000000000A8D9
.text:000000000000A8D9 loc_A8D9:                               ; CODE XREF: build_trtable+2DA↑j
.text:000000000000A8D9                 mov     esi, 200h       ; size
.text:000000000000A8DE                 mov     edi, 8          ; nmemb
.text:000000000000A8E3                 call    _calloc
.text:000000000000A8E8                 mov     r11, rax
.text:000000000000A8EB                 mov     rax, [rsp+138h+var_130]
.text:000000000000A8F0                 test    r11, r11
.text:000000000000A8F3                 mov     [rax+60h], r11
.text:000000000000A8F7                 jz      loc_A7ED
.text:000000000000A8FD                 mov     r13, [rsp+138h+var_F8]
.text:000000000000A902                 mov     r10, [rsp+138h+ptr]
.text:000000000000A907                 mov     r12, r11
.text:000000000000A90A                 mov     r14, [rsp+138h+var_108]
.text:000000000000A90F                 mov     rdx, [rsp+138h+var_118]
.text:000000000000A914                 xor     ebx, ebx
.text:000000000000A916                 add     r13, 20h ; ' '
.text:000000000000A91A
.text:000000000000A91A loc_A91A:                               ; CODE XREF: build_trtable+A9E↓j
.text:000000000000A91A                 mov     rax, [rdx+rbx]
.text:000000000000A91E                 test    rax, rax
.text:000000000000A921                 jz      short loc_A93F
.text:000000000000A923                 mov     rsi, r12
.text:000000000000A926                 mov     ecx, 1
.text:000000000000A92B
.text:000000000000A92B loc_A92B:                               ; CODE XREF: build_trtable+A8D↓j
.text:000000000000A92B                 test    al, 1
.text:000000000000A92D                 jnz     loc_A9DC
.text:000000000000A933
.text:000000000000A933 loc_A933:                               ; CODE XREF: build_trtable+B6B↓j
.text:000000000000A933                 add     rcx, rcx
.text:000000000000A936                 add     rsi, 8
.text:000000000000A93A                 shr     rax, 1
.text:000000000000A93D                 jnz     short loc_A92B
.text:000000000000A93F
.text:000000000000A93F loc_A93F:                               ; CODE XREF: build_trtable+A71↑j
.text:000000000000A93F                 add     rbx, 8
.text:000000000000A943                 add     r12, 200h
.text:000000000000A94A                 cmp     rbx, 20h ; ' '
.text:000000000000A94E                 jnz     short loc_A91A
.text:000000000000A950                 jmp     loc_A20E
.text:000000000000A950 ; ---------------------------------------------------------------------------
.text:000000000000A955                 align 8
.text:000000000000A958
.text:000000000000A958 loc_A958:                               ; CODE XREF: build_trtable+342↑j
.text:000000000000A958                 mov     rdi, [rsp+138h+var_120]
.text:000000000000A95D                 test    [rdi+r9+1800h], rcx
.text:000000000000A965                 jnz     short loc_A9D7
.text:000000000000A967                 lea     rdi, [rbx+r9]
.text:000000000000A96B                 xor     r8d, r8d
.text:000000000000A96E                 xchg    ax, ax
.text:000000000000A970
.text:000000000000A970 loc_A970:                               ; CODE XREF: build_trtable+AD1↓j
.text:000000000000A970                 mov     r10, [rdi]
.text:000000000000A973                 add     r8, 1
.text:000000000000A977                 add     rdi, 20h ; ' '
.text:000000000000A97B                 and     r10, rcx
.text:000000000000A97E                 test    r10, r10
.text:000000000000A981                 jz      short loc_A970
.text:000000000000A983                 shl     r8, 3
.text:000000000000A987
.text:000000000000A987 loc_A987:                               ; CODE XREF: build_trtable+B2A↓j
.text:000000000000A987                 test    [r15+r9+0B8h], rcx
.text:000000000000A98F                 jz      short loc_A99E
.text:000000000000A991                 mov     rdi, [r13+r8+0]
.text:000000000000A996                 mov     [rsi], rdi
.text:000000000000A999                 jmp     loc_A1F8
.text:000000000000A99E ; ---------------------------------------------------------------------------
.text:000000000000A99E
.text:000000000000A99E loc_A99E:                               ; CODE XREF: build_trtable+ADF↑j
.text:000000000000A99E                 mov     rdi, [r12+r8]
.text:000000000000A9A2                 mov     [rsi], rdi
.text:000000000000A9A5                 jmp     loc_A1F8
.text:000000000000A9AA ; ---------------------------------------------------------------------------
.text:000000000000A9AA
.text:000000000000A9AA loc_A9AA:                               ; CODE XREF: build_trtable+83↑j
.text:000000000000A9AA                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000A9AF                 call    _free
.text:000000000000A9B4
.text:000000000000A9B4 loc_A9B4:                               ; CODE XREF: build_trtable+B8C↓j
.text:000000000000A9B4                 mov     esi, 100h       ; size
.text:000000000000A9B9                 mov     edi, 8          ; nmemb
.text:000000000000A9BE                 call    _calloc
.text:000000000000A9C3                 mov     rbx, [rsp+138h+var_130]
.text:000000000000A9C8                 test    rax, rax
.text:000000000000A9CB                 mov     [rbx+58h], rax
.text:000000000000A9CF                 setnz   al
.text:000000000000A9D2                 jmp     loc_A2C2
.text:000000000000A9D7 ; ---------------------------------------------------------------------------
.text:000000000000A9D7
.text:000000000000A9D7 loc_A9D7:                               ; CODE XREF: build_trtable+AB5↑j
.text:000000000000A9D7                 xor     r8d, r8d
.text:000000000000A9DA                 jmp     short loc_A987
.text:000000000000A9DC ; ---------------------------------------------------------------------------
.text:000000000000A9DC
.text:000000000000A9DC loc_A9DC:                               ; CODE XREF: build_trtable+A7D↑j
.text:000000000000A9DC                 mov     rdi, [rsp+138h+var_120]
.text:000000000000A9E1                 test    [rdi+rbx+1800h], rcx
.text:000000000000A9E9                 jnz     short loc_AA20
.text:000000000000A9EB                 lea     r9, [r13+rbx+0]
.text:000000000000A9F0                 xor     r8d, r8d
.text:000000000000A9F3
.text:000000000000A9F3 loc_A9F3:                               ; CODE XREF: build_trtable+B57↓j
.text:000000000000A9F3                 mov     r15, [r9]
.text:000000000000A9F6                 add     r8, 1
.text:000000000000A9FA                 add     r9, 20h ; ' '
.text:000000000000A9FE                 mov     rdi, r8
.text:000000000000AA01                 and     r15, rcx
.text:000000000000AA04                 test    r15, r15
.text:000000000000AA07                 jz      short loc_A9F3
.text:000000000000AA09
.text:000000000000AA09 loc_AA09:                               ; CODE XREF: build_trtable+B72↓j
.text:000000000000AA09                 mov     r8, [r10+rdi*8]
.text:000000000000AA0D                 mov     [rsi], r8
.text:000000000000AA10                 mov     rdi, [r14+rdi*8]
.text:000000000000AA14                 mov     [rsi+800h], rdi
.text:000000000000AA1B                 jmp     loc_A933
.text:000000000000AA20 ; ---------------------------------------------------------------------------
.text:000000000000AA20
.text:000000000000AA20 loc_AA20:                               ; CODE XREF: build_trtable+B39↑j
.text:000000000000AA20                 xor     edi, edi
.text:000000000000AA22                 jmp     short loc_AA09
.text:000000000000AA24 ; ---------------------------------------------------------------------------
.text:000000000000AA24
.text:000000000000AA24 loc_AA24:                               ; CODE XREF: build_trtable+423↑j
.text:000000000000AA24                 call    ___stack_chk_fail
.text:000000000000AA29 ; ---------------------------------------------------------------------------
.text:000000000000AA29
.text:000000000000AA29 loc_AA29:                               ; CODE XREF: build_trtable+11D↑j
.text:000000000000AA29                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000AA2E                 call    _free
.text:000000000000AA33                 test    rbp, rbp
.text:000000000000AA36                 jnz     loc_A2C0
.text:000000000000AA3C                 jmp     loc_A9B4
.text:000000000000AA3C ; } // starts at 9EB0
.text:000000000000AA3C build_trtable   endp
.text:000000000000AA3C
.text:000000000000AA3C ; ---------------------------------------------------------------------------
.text:000000000000AA41                 align 10h
.text:000000000000AA50
.text:000000000000AA50 ; =============== S U B R O U T I N E =======================================
.text:000000000000AA50
.text:000000000000AA50
.text:000000000000AA50 calc_first      proc near               ; DATA XREF: re_compile_internal+67E↓o
.text:000000000000AA50 ; __unwind {
.text:000000000000AA50                 cmp     byte ptr [rsi+30h], 10h
.text:000000000000AA54                 jz      short loc_AAB8
.text:000000000000AA56                 push    rbp
.text:000000000000AA57                 push    rbx
.text:000000000000AA58                 mov     rbx, rsi
.text:000000000000AA5B                 mov     rbp, rdi
.text:000000000000AA5E                 sub     rsp, 8
.text:000000000000AA62                 mov     [rbx+18h], rsi
.text:000000000000AA66                 mov     rdx, [rbx+30h]
.text:000000000000AA6A                 mov     rsi, [rsi+28h]
.text:000000000000AA6E                 call    re_dfa_add_node
.text:000000000000AA73                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000AA77                 mov     rdx, rax
.text:000000000000AA7A                 mov     [rbx+38h], rax
.text:000000000000AA7E                 jz      short loc_AAD0
.text:000000000000AA80                 xor     eax, eax
.text:000000000000AA82                 cmp     byte ptr [rbx+30h], 0Ch
.text:000000000000AA86                 jnz     short loc_AAAC
.text:000000000000AA88                 mov     ecx, [rbx+28h]
.text:000000000000AA8B                 shl     rdx, 4
.text:000000000000AA8F                 add     rdx, [rbp+0]
.text:000000000000AA93                 and     ecx, 3FFh
.text:000000000000AA99                 shl     ecx, 8
.text:000000000000AA9C                 mov     esi, ecx
.text:000000000000AA9E                 mov     ecx, [rdx+8]
.text:000000000000AAA1                 and     ecx, 0FFFC00FFh
.text:000000000000AAA7                 or      ecx, esi
.text:000000000000AAA9                 mov     [rdx+8], ecx
.text:000000000000AAAC
.text:000000000000AAAC loc_AAAC:                               ; CODE XREF: calc_first+36↑j
.text:000000000000AAAC                                         ; calc_first+85↓j
.text:000000000000AAAC                 add     rsp, 8
.text:000000000000AAB0                 pop     rbx
.text:000000000000AAB1                 pop     rbp
.text:000000000000AAB2                 retn
.text:000000000000AAB2 ; ---------------------------------------------------------------------------
.text:000000000000AAB3                 align 8
.text:000000000000AAB8
.text:000000000000AAB8 loc_AAB8:                               ; CODE XREF: calc_first+4↑j
.text:000000000000AAB8                 mov     rax, [rsi+8]
.text:000000000000AABC                 mov     rdx, [rax+18h]
.text:000000000000AAC0                 mov     rax, [rax+38h]
.text:000000000000AAC4                 mov     [rsi+18h], rdx
.text:000000000000AAC8                 mov     [rsi+38h], rax
.text:000000000000AACC                 xor     eax, eax
.text:000000000000AACE                 retn
.text:000000000000AACE ; ---------------------------------------------------------------------------
.text:000000000000AACF                 align 10h
.text:000000000000AAD0
.text:000000000000AAD0 loc_AAD0:                               ; CODE XREF: calc_first+2E↑j
.text:000000000000AAD0                 mov     eax, 0Ch
.text:000000000000AAD5                 jmp     short loc_AAAC
.text:000000000000AAD5 ; } // starts at AA50
.text:000000000000AAD5 calc_first      endp
.text:000000000000AAD5
.text:000000000000AAD5 ; ---------------------------------------------------------------------------
.text:000000000000AAD7                 align 20h
.text:000000000000AAE0
.text:000000000000AAE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AAE0
.text:000000000000AAE0
.text:000000000000AAE0 free_fail_stack_return_part_24 proc near
.text:000000000000AAE0                                         ; CODE XREF: set_regs+4FF↓p
.text:000000000000AAE0                                         ; set_regs+567↓p ...
.text:000000000000AAE0 ; __unwind {
.text:000000000000AAE0                 push    r12
.text:000000000000AAE2                 push    rbp
.text:000000000000AAE3                 mov     rbp, rdi
.text:000000000000AAE6                 push    rbx
.text:000000000000AAE7                 cmp     qword ptr [rdi], 0
.text:000000000000AAEB                 jle     short loc_AB22
.text:000000000000AAED                 xor     ebx, ebx
.text:000000000000AAEF                 xor     r12d, r12d
.text:000000000000AAF2                 nop     word ptr [rax+rax+00h]
.text:000000000000AAF8
.text:000000000000AAF8 loc_AAF8:                               ; CODE XREF: free_fail_stack_return_part_24+40↓j
.text:000000000000AAF8                 mov     rax, [rbp+10h]
.text:000000000000AAFC                 add     r12, 1
.text:000000000000AB00                 mov     rdi, [rax+rbx+28h] ; ptr
.text:000000000000AB05                 call    _free
.text:000000000000AB0A                 mov     rax, [rbp+10h]
.text:000000000000AB0E                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000AB13                 add     rbx, 30h ; '0'
.text:000000000000AB17                 call    _free
.text:000000000000AB1C                 cmp     r12, [rbp+0]
.text:000000000000AB20                 jl      short loc_AAF8
.text:000000000000AB22
.text:000000000000AB22 loc_AB22:                               ; CODE XREF: free_fail_stack_return_part_24+B↑j
.text:000000000000AB22                 pop     rbx
.text:000000000000AB23                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000AB27                 pop     rbp
.text:000000000000AB28                 pop     r12
.text:000000000000AB2A                 jmp     _free
.text:000000000000AB2A ; } // starts at AAE0
.text:000000000000AB2A free_fail_stack_return_part_24 endp
.text:000000000000AB2A
.text:000000000000AB2A ; ---------------------------------------------------------------------------
.text:000000000000AB2F                 align 10h
.text:000000000000AB30
.text:000000000000AB30 ; =============== S U B R O U T I N E =======================================
.text:000000000000AB30
.text:000000000000AB30
.text:000000000000AB30 pop_fail_stack_isra_25 proc near        ; CODE XREF: set_regs+5B3↓p
.text:000000000000AB30                                         ; set_regs+606↓p
.text:000000000000AB30 ; __unwind {
.text:000000000000AB30                 push    r12
.text:000000000000AB32                 push    rbp
.text:000000000000AB33                 push    rbx
.text:000000000000AB34                 mov     rax, [rdi]
.text:000000000000AB37                 sub     rax, 1
.text:000000000000AB3B                 test    rax, rax
.text:000000000000AB3E                 mov     [rdi], rax
.text:000000000000AB41                 js      short loc_ABA5
.text:000000000000AB43                 lea     rbx, [rax+rax*2]
.text:000000000000AB47                 mov     rax, [rsi]
.text:000000000000AB4A                 mov     r12, rsi
.text:000000000000AB4D                 shl     rcx, 4
.text:000000000000AB51                 mov     rbp, r9
.text:000000000000AB54                 mov     rdi, r8         ; dest
.text:000000000000AB57                 shl     rbx, 4
.text:000000000000AB5B                 add     rax, rbx
.text:000000000000AB5E                 mov     rsi, [rax]
.text:000000000000AB61                 mov     [rdx], rsi
.text:000000000000AB64                 mov     rsi, [rax+10h]  ; src
.text:000000000000AB68                 mov     rdx, rcx        ; n
.text:000000000000AB6B                 call    _memcpy
.text:000000000000AB70                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000AB74                 call    _free
.text:000000000000AB79                 mov     rax, [r12]
.text:000000000000AB7D                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000AB82                 call    _free
.text:000000000000AB87                 add     rbx, [r12]
.text:000000000000AB8B                 movdqu  xmm0, xmmword ptr [rbx+18h]
.text:000000000000AB90                 movaps  xmmword ptr [rbp+0], xmm0
.text:000000000000AB94                 mov     rax, [rbx+28h]
.text:000000000000AB98                 mov     [rbp+10h], rax
.text:000000000000AB9C                 mov     rax, [rbx+8]
.text:000000000000ABA0                 pop     rbx
.text:000000000000ABA1                 pop     rbp
.text:000000000000ABA2                 pop     r12
.text:000000000000ABA4                 retn
.text:000000000000ABA5 ; ---------------------------------------------------------------------------
.text:000000000000ABA5
.text:000000000000ABA5 loc_ABA5:                               ; CODE XREF: pop_fail_stack_isra_25+11↑j
.text:000000000000ABA5                 lea     rcx, __PRETTY_FUNCTION___8040 ; "pop_fail_stack"
.text:000000000000ABAC                 lea     rsi, file       ; "../coreutils-8.31/lib/regexec.c"
.text:000000000000ABB3                 lea     rdi, assertion  ; "num >= 0"
.text:000000000000ABBA                 mov     edx, 555h       ; line
.text:000000000000ABBF                 call    ___assert_fail
.text:000000000000ABBF ; } // starts at AB30
.text:000000000000ABBF pop_fail_stack_isra_25 endp
.text:000000000000ABBF
.text:000000000000ABBF ; ---------------------------------------------------------------------------
.text:000000000000ABC4                 align 10h
.text:000000000000ABD0
.text:000000000000ABD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ABD0
.text:000000000000ABD0
.text:000000000000ABD0 build_equiv_class_isra_27 proc near     ; CODE XREF: parse_expression+C30↓p
.text:000000000000ABD0                                         ; parse_expression+C68↓p
.text:000000000000ABD0 ; __unwind {
.text:000000000000ABD0                 push    rbp
.text:000000000000ABD1                 push    rbx
.text:000000000000ABD2                 mov     rbp, rdi
.text:000000000000ABD5                 mov     rdi, rsi        ; s
.text:000000000000ABD8                 mov     rbx, rsi
.text:000000000000ABDB                 sub     rsp, 8
.text:000000000000ABDF                 call    _strlen
.text:000000000000ABE4                 cmp     rax, 1
.text:000000000000ABE8                 jnz     short loc_AC10
.text:000000000000ABEA                 movzx   ecx, byte ptr [rbx]
.text:000000000000ABED                 mov     rdx, rcx
.text:000000000000ABF0                 and     ecx, 3Fh
.text:000000000000ABF3                 shr     rdx, 3
.text:000000000000ABF7                 shl     rax, cl
.text:000000000000ABFA                 and     edx, 18h
.text:000000000000ABFD                 or      [rbp+rdx+0], rax
.text:000000000000AC02                 add     rsp, 8
.text:000000000000AC06                 xor     eax, eax
.text:000000000000AC08                 pop     rbx
.text:000000000000AC09                 pop     rbp
.text:000000000000AC0A                 retn
.text:000000000000AC0A ; ---------------------------------------------------------------------------
.text:000000000000AC0B                 align 10h
.text:000000000000AC10
.text:000000000000AC10 loc_AC10:                               ; CODE XREF: build_equiv_class_isra_27+18↑j
.text:000000000000AC10                 add     rsp, 8
.text:000000000000AC14                 mov     eax, 3
.text:000000000000AC19                 pop     rbx
.text:000000000000AC1A                 pop     rbp
.text:000000000000AC1B                 retn
.text:000000000000AC1B ; } // starts at ABD0
.text:000000000000AC1B build_equiv_class_isra_27 endp
.text:000000000000AC1B
.text:000000000000AC1B ; ---------------------------------------------------------------------------
.text:000000000000AC1C                 align 20h
.text:000000000000AC20
.text:000000000000AC20 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC20
.text:000000000000AC20
.text:000000000000AC20 build_charclass_isra_29 proc near       ; CODE XREF: build_charclass_op+A3↓p
.text:000000000000AC20                                         ; parse_expression+D1D↓p
.text:000000000000AC20
.text:000000000000AC20 var_38          = qword ptr -38h
.text:000000000000AC20 var_30          = qword ptr -30h
.text:000000000000AC20 arg_0           = qword ptr  8
.text:000000000000AC20
.text:000000000000AC20 ; __unwind {
.text:000000000000AC20                 push    r14
.text:000000000000AC22                 push    r13
.text:000000000000AC24                 mov     r13, rcx
.text:000000000000AC27                 push    r12
.text:000000000000AC29                 push    rbp
.text:000000000000AC2A                 mov     r12, r9
.text:000000000000AC2D                 push    rbx
.text:000000000000AC2E                 mov     rbp, rdi
.text:000000000000AC31                 mov     rbx, rsi
.text:000000000000AC34                 sub     rsp, 10h
.text:000000000000AC38                 test    [rsp+38h+arg_0], 400000h
.text:000000000000AC41                 jz      short loc_AC68
.text:000000000000AC43                 lea     rdi, aUpper     ; "upper"
.text:000000000000AC4A                 mov     ecx, 6
.text:000000000000AC4F                 mov     rsi, r9
.text:000000000000AC52                 repe cmpsb
.text:000000000000AC54                 setnbe  al
.text:000000000000AC57                 sbb     al, 0
.text:000000000000AC59                 test    al, al
.text:000000000000AC5B                 jnz     loc_AD56
.text:000000000000AC61                 lea     r12, aAlpha     ; "alpha"
.text:000000000000AC68
.text:000000000000AC68 loc_AC68:                               ; CODE XREF: build_charclass_isra_29+21↑j
.text:000000000000AC68                 mov     rcx, [r13+0]
.text:000000000000AC6C                 cmp     [r8], rcx
.text:000000000000AC6F                 mov     rax, [rdx]
.text:000000000000AC72                 jz      loc_AD89
.text:000000000000AC78
.text:000000000000AC78 loc_AC78:                               ; CODE XREF: build_charclass_isra_29+163↓j
.text:000000000000AC78                                         ; build_charclass_isra_29+1A3↓j
.text:000000000000AC78                 lea     rdx, [rcx+1]
.text:000000000000AC7C                 mov     rdi, r12        ; property
.text:000000000000AC7F                 mov     [r13+0], rdx
.text:000000000000AC83                 lea     r13, [rax+rcx*8]
.text:000000000000AC87                 call    _wctype
.text:000000000000AC8C                 lea     rdi, aAlnum     ; "alnum"
.text:000000000000AC93                 mov     [r13+0], rax
.text:000000000000AC97                 mov     ecx, 6
.text:000000000000AC9C                 mov     rsi, r12
.text:000000000000AC9F                 repe cmpsb
.text:000000000000ACA1                 setnbe  al
.text:000000000000ACA4                 sbb     al, 0
.text:000000000000ACA6                 test    al, al
.text:000000000000ACA8                 jz      short loc_AD18
.text:000000000000ACAA                 lea     rdi, aCntrl     ; "cntrl"
.text:000000000000ACB1                 mov     ecx, 6
.text:000000000000ACB6                 mov     rsi, r12
.text:000000000000ACB9                 repe cmpsb
.text:000000000000ACBB                 setnbe  al
.text:000000000000ACBE                 sbb     al, 0
.text:000000000000ACC0                 test    al, al
.text:000000000000ACC2                 jnz     loc_ADC8
.text:000000000000ACC8                 call    ___ctype_b_loc
.text:000000000000ACCD                 xor     ecx, ecx
.text:000000000000ACCF                 test    rbp, rbp
.text:000000000000ACD2                 mov     rdx, [rax]
.text:000000000000ACD5                 mov     edi, 1
.text:000000000000ACDA                 jnz     loc_AF9A
.text:000000000000ACE0
.text:000000000000ACE0 loc_ACE0:                               ; CODE XREF: build_charclass_isra_29+E2↓j
.text:000000000000ACE0                 test    byte ptr [rdx+rcx*2], 2
.text:000000000000ACE4                 jz      short loc_ACF7
.text:000000000000ACE6                 mov     rax, rcx
.text:000000000000ACE9                 mov     rsi, rdi
.text:000000000000ACEC                 sar     rax, 6
.text:000000000000ACF0                 shl     rsi, cl
.text:000000000000ACF3                 or      [rbx+rax*8], rsi
.text:000000000000ACF7
.text:000000000000ACF7 loc_ACF7:                               ; CODE XREF: build_charclass_isra_29+C4↑j
.text:000000000000ACF7                 add     rcx, 1
.text:000000000000ACFB                 cmp     rcx, 100h
.text:000000000000AD02                 jnz     short loc_ACE0
.text:000000000000AD04
.text:000000000000AD04 loc_AD04:                               ; CODE XREF: build_charclass_isra_29+134↓j
.text:000000000000AD04                                         ; build_charclass_isra_29+225↓j ...
.text:000000000000AD04                 xor     eax, eax
.text:000000000000AD06
.text:000000000000AD06 loc_AD06:                               ; CODE XREF: build_charclass_isra_29+4AD↓j
.text:000000000000AD06                                         ; build_charclass_isra_29+765↓j
.text:000000000000AD06                 add     rsp, 10h
.text:000000000000AD0A                 pop     rbx
.text:000000000000AD0B                 pop     rbp
.text:000000000000AD0C                 pop     r12
.text:000000000000AD0E                 pop     r13
.text:000000000000AD10                 pop     r14
.text:000000000000AD12                 retn
.text:000000000000AD12 ; ---------------------------------------------------------------------------
.text:000000000000AD13                 align 8
.text:000000000000AD18
.text:000000000000AD18 loc_AD18:                               ; CODE XREF: build_charclass_isra_29+88↑j
.text:000000000000AD18                 call    ___ctype_b_loc
.text:000000000000AD1D                 xor     ecx, ecx
.text:000000000000AD1F                 test    rbp, rbp
.text:000000000000AD22                 mov     rdx, [rax]
.text:000000000000AD25                 mov     edi, 1
.text:000000000000AD2A                 jnz     loc_AF1A
.text:000000000000AD30
.text:000000000000AD30 loc_AD30:                               ; CODE XREF: build_charclass_isra_29+132↓j
.text:000000000000AD30                 test    byte ptr [rdx+rcx*2], 8
.text:000000000000AD34                 jz      short loc_AD47
.text:000000000000AD36                 mov     rax, rcx
.text:000000000000AD39                 mov     rsi, rdi
.text:000000000000AD3C                 sar     rax, 6
.text:000000000000AD40                 shl     rsi, cl
.text:000000000000AD43                 or      [rbx+rax*8], rsi
.text:000000000000AD47
.text:000000000000AD47 loc_AD47:                               ; CODE XREF: build_charclass_isra_29+114↑j
.text:000000000000AD47                 add     rcx, 1
.text:000000000000AD4B                 cmp     rcx, 100h
.text:000000000000AD52                 jnz     short loc_AD30
.text:000000000000AD54                 jmp     short loc_AD04
.text:000000000000AD56 ; ---------------------------------------------------------------------------
.text:000000000000AD56
.text:000000000000AD56 loc_AD56:                               ; CODE XREF: build_charclass_isra_29+3B↑j
.text:000000000000AD56                 lea     rdi, aLower     ; "lower"
.text:000000000000AD5D                 mov     ecx, 6
.text:000000000000AD62                 mov     rsi, r9
.text:000000000000AD65                 repe cmpsb
.text:000000000000AD67                 mov     rcx, [r13+0]
.text:000000000000AD6B                 setnbe  al
.text:000000000000AD6E                 sbb     al, 0
.text:000000000000AD70                 test    al, al
.text:000000000000AD72                 lea     rax, aAlpha     ; "alpha"
.text:000000000000AD79                 cmovz   r12, rax
.text:000000000000AD7D                 cmp     [r8], rcx
.text:000000000000AD80                 mov     rax, [rdx]
.text:000000000000AD83                 jnz     loc_AC78
.text:000000000000AD89
.text:000000000000AD89 loc_AD89:                               ; CODE XREF: build_charclass_isra_29+52↑j
.text:000000000000AD89                 lea     r14, [rcx+rcx+1]
.text:000000000000AD8E                 mov     rdi, rax        ; ptr
.text:000000000000AD91                 mov     [rsp+38h+var_30], r8
.text:000000000000AD96                 mov     [rsp+38h+var_38], rdx
.text:000000000000AD9A                 lea     rsi, ds:0[r14*8] ; size
.text:000000000000ADA2                 call    _realloc
.text:000000000000ADA7                 test    rax, rax
.text:000000000000ADAA                 jz      loc_B0C8
.text:000000000000ADB0                 mov     rdx, [rsp+38h+var_38]
.text:000000000000ADB4                 mov     r8, [rsp+38h+var_30]
.text:000000000000ADB9                 mov     [rdx], rax
.text:000000000000ADBC                 mov     [r8], r14
.text:000000000000ADBF                 mov     rcx, [r13+0]
.text:000000000000ADC3                 jmp     loc_AC78
.text:000000000000ADC8 ; ---------------------------------------------------------------------------
.text:000000000000ADC8
.text:000000000000ADC8 loc_ADC8:                               ; CODE XREF: build_charclass_isra_29+A2↑j
.text:000000000000ADC8                 lea     rdi, aLower     ; "lower"
.text:000000000000ADCF                 mov     ecx, 6
.text:000000000000ADD4                 mov     rsi, r12
.text:000000000000ADD7                 repe cmpsb
.text:000000000000ADD9                 setnbe  al
.text:000000000000ADDC                 sbb     al, 0
.text:000000000000ADDE                 test    al, al
.text:000000000000ADE0                 jz      short loc_AE4A
.text:000000000000ADE2                 lea     rdi, aSpace     ; "space"
.text:000000000000ADE9                 mov     ecx, 6
.text:000000000000ADEE                 mov     rsi, r12
.text:000000000000ADF1                 repe cmpsb
.text:000000000000ADF3                 setnbe  al
.text:000000000000ADF6                 sbb     al, 0
.text:000000000000ADF8                 test    al, al
.text:000000000000ADFA                 jnz     loc_AE92
.text:000000000000AE00                 call    ___ctype_b_loc
.text:000000000000AE05                 xor     ecx, ecx
.text:000000000000AE07                 test    rbp, rbp
.text:000000000000AE0A                 mov     rdx, [rax]
.text:000000000000AE0D                 mov     edi, 1
.text:000000000000AE12                 jnz     loc_B16E
.text:000000000000AE18                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000AE20
.text:000000000000AE20 loc_AE20:                               ; CODE XREF: build_charclass_isra_29+223↓j
.text:000000000000AE20                 test    byte ptr [rdx+rcx*2+1], 20h
.text:000000000000AE25                 jz      short loc_AE38
.text:000000000000AE27                 mov     rax, rcx
.text:000000000000AE2A                 mov     rsi, rdi
.text:000000000000AE2D                 sar     rax, 6
.text:000000000000AE31                 shl     rsi, cl
.text:000000000000AE34                 or      [rbx+rax*8], rsi
.text:000000000000AE38
.text:000000000000AE38 loc_AE38:                               ; CODE XREF: build_charclass_isra_29+205↑j
.text:000000000000AE38                 add     rcx, 1
.text:000000000000AE3C                 cmp     rcx, 100h
.text:000000000000AE43                 jnz     short loc_AE20
.text:000000000000AE45                 jmp     loc_AD04
.text:000000000000AE4A ; ---------------------------------------------------------------------------
.text:000000000000AE4A
.text:000000000000AE4A loc_AE4A:                               ; CODE XREF: build_charclass_isra_29+1C0↑j
.text:000000000000AE4A                 call    ___ctype_b_loc
.text:000000000000AE4F                 xor     ecx, ecx
.text:000000000000AE51                 test    rbp, rbp
.text:000000000000AE54                 mov     rdx, [rax]
.text:000000000000AE57                 mov     edi, 1
.text:000000000000AE5C                 jnz     loc_B032
.text:000000000000AE62                 nop     word ptr [rax+rax+00h]
.text:000000000000AE68
.text:000000000000AE68 loc_AE68:                               ; CODE XREF: build_charclass_isra_29+26B↓j
.text:000000000000AE68                 test    byte ptr [rdx+rcx*2+1], 2
.text:000000000000AE6D                 jz      short loc_AE80
.text:000000000000AE6F                 mov     rax, rcx
.text:000000000000AE72                 mov     rsi, rdi
.text:000000000000AE75                 sar     rax, 6
.text:000000000000AE79                 shl     rsi, cl
.text:000000000000AE7C                 or      [rbx+rax*8], rsi
.text:000000000000AE80
.text:000000000000AE80 loc_AE80:                               ; CODE XREF: build_charclass_isra_29+24D↑j
.text:000000000000AE80                 add     rcx, 1
.text:000000000000AE84                 cmp     rcx, 100h
.text:000000000000AE8B                 jnz     short loc_AE68
.text:000000000000AE8D                 jmp     loc_AD04
.text:000000000000AE92 ; ---------------------------------------------------------------------------
.text:000000000000AE92
.text:000000000000AE92 loc_AE92:                               ; CODE XREF: build_charclass_isra_29+1DA↑j
.text:000000000000AE92                 lea     rdi, aAlpha     ; "alpha"
.text:000000000000AE99                 mov     ecx, 6
.text:000000000000AE9E                 mov     rsi, r12
.text:000000000000AEA1                 repe cmpsb
.text:000000000000AEA3                 setnbe  al
.text:000000000000AEA6                 sbb     al, 0
.text:000000000000AEA8                 test    al, al
.text:000000000000AEAA                 jz      loc_AF53
.text:000000000000AEB0                 lea     rdi, aDigit     ; "digit"
.text:000000000000AEB7                 mov     ecx, 6
.text:000000000000AEBC                 mov     rsi, r12
.text:000000000000AEBF                 repe cmpsb
.text:000000000000AEC1                 setnbe  al
.text:000000000000AEC4                 sbb     al, 0
.text:000000000000AEC6                 test    al, al
.text:000000000000AEC8                 jnz     loc_AFD3
.text:000000000000AECE                 call    ___ctype_b_loc
.text:000000000000AED3                 xor     ecx, ecx
.text:000000000000AED5                 test    rbp, rbp
.text:000000000000AED8                 mov     rdx, [rax]
.text:000000000000AEDB                 mov     edi, 1
.text:000000000000AEE0                 jnz     loc_B38A
.text:000000000000AEE6                 db      2Eh
.text:000000000000AEE6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000AEF0
.text:000000000000AEF0 loc_AEF0:                               ; CODE XREF: build_charclass_isra_29+2F3↓j
.text:000000000000AEF0                 test    byte ptr [rdx+rcx*2+1], 8
.text:000000000000AEF5                 jz      short loc_AF08
.text:000000000000AEF7                 mov     rax, rcx
.text:000000000000AEFA                 mov     rsi, rdi
.text:000000000000AEFD                 sar     rax, 6
.text:000000000000AF01                 shl     rsi, cl
.text:000000000000AF04                 or      [rbx+rax*8], rsi
.text:000000000000AF08
.text:000000000000AF08 loc_AF08:                               ; CODE XREF: build_charclass_isra_29+2D5↑j
.text:000000000000AF08                 add     rcx, 1
.text:000000000000AF0C                 cmp     rcx, 100h
.text:000000000000AF13                 jnz     short loc_AEF0
.text:000000000000AF15                 jmp     loc_AD04
.text:000000000000AF1A ; ---------------------------------------------------------------------------
.text:000000000000AF1A
.text:000000000000AF1A loc_AF1A:                               ; CODE XREF: build_charclass_isra_29+10A↑j
.text:000000000000AF1A                 xor     eax, eax
.text:000000000000AF1C                 nop     dword ptr [rax+00h]
.text:000000000000AF20
.text:000000000000AF20 loc_AF20:                               ; CODE XREF: build_charclass_isra_29+32C↓j
.text:000000000000AF20                 test    byte ptr [rdx+rax*2], 8
.text:000000000000AF24                 jz      short loc_AF42
.text:000000000000AF26                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000AF2B                 mov     r10, rdi
.text:000000000000AF2E                 mov     rsi, rcx
.text:000000000000AF31                 and     ecx, 3Fh
.text:000000000000AF34                 shr     rsi, 3
.text:000000000000AF38                 shl     r10, cl
.text:000000000000AF3B                 and     esi, 18h
.text:000000000000AF3E                 or      [rbx+rsi], r10
.text:000000000000AF42
.text:000000000000AF42 loc_AF42:                               ; CODE XREF: build_charclass_isra_29+304↑j
.text:000000000000AF42                 add     rax, 1
.text:000000000000AF46                 cmp     rax, 100h
.text:000000000000AF4C                 jnz     short loc_AF20
.text:000000000000AF4E                 jmp     loc_AD04
.text:000000000000AF53 ; ---------------------------------------------------------------------------
.text:000000000000AF53
.text:000000000000AF53 loc_AF53:                               ; CODE XREF: build_charclass_isra_29+28A↑j
.text:000000000000AF53                 call    ___ctype_b_loc
.text:000000000000AF58                 xor     ecx, ecx
.text:000000000000AF5A                 test    rbp, rbp
.text:000000000000AF5D                 mov     rdx, [rax]
.text:000000000000AF60                 mov     edi, 1
.text:000000000000AF65                 jnz     loc_B138
.text:000000000000AF6B                 nop     dword ptr [rax+rax+00h]
.text:000000000000AF70
.text:000000000000AF70 loc_AF70:                               ; CODE XREF: build_charclass_isra_29+373↓j
.text:000000000000AF70                 test    byte ptr [rdx+rcx*2+1], 4
.text:000000000000AF75                 jz      short loc_AF88
.text:000000000000AF77                 mov     rax, rcx
.text:000000000000AF7A                 mov     rsi, rdi
.text:000000000000AF7D                 sar     rax, 6
.text:000000000000AF81                 shl     rsi, cl
.text:000000000000AF84                 or      [rbx+rax*8], rsi
.text:000000000000AF88
.text:000000000000AF88 loc_AF88:                               ; CODE XREF: build_charclass_isra_29+355↑j
.text:000000000000AF88                 add     rcx, 1
.text:000000000000AF8C                 cmp     rcx, 100h
.text:000000000000AF93                 jnz     short loc_AF70
.text:000000000000AF95                 jmp     loc_AD04
.text:000000000000AF9A ; ---------------------------------------------------------------------------
.text:000000000000AF9A
.text:000000000000AF9A loc_AF9A:                               ; CODE XREF: build_charclass_isra_29+BA↑j
.text:000000000000AF9A                 xor     eax, eax
.text:000000000000AF9C                 nop     dword ptr [rax+00h]
.text:000000000000AFA0
.text:000000000000AFA0 loc_AFA0:                               ; CODE XREF: build_charclass_isra_29+3AC↓j
.text:000000000000AFA0                 test    byte ptr [rdx+rax*2], 2
.text:000000000000AFA4                 jz      short loc_AFC2
.text:000000000000AFA6                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000AFAB                 mov     r11, rdi
.text:000000000000AFAE                 mov     rsi, rcx
.text:000000000000AFB1                 and     ecx, 3Fh
.text:000000000000AFB4                 shr     rsi, 3
.text:000000000000AFB8                 shl     r11, cl
.text:000000000000AFBB                 and     esi, 18h
.text:000000000000AFBE                 or      [rbx+rsi], r11
.text:000000000000AFC2
.text:000000000000AFC2 loc_AFC2:                               ; CODE XREF: build_charclass_isra_29+384↑j
.text:000000000000AFC2                 add     rax, 1
.text:000000000000AFC6                 cmp     rax, 100h
.text:000000000000AFCC                 jnz     short loc_AFA0
.text:000000000000AFCE                 jmp     loc_AD04
.text:000000000000AFD3 ; ---------------------------------------------------------------------------
.text:000000000000AFD3
.text:000000000000AFD3 loc_AFD3:                               ; CODE XREF: build_charclass_isra_29+2A8↑j
.text:000000000000AFD3                 lea     rdi, aPrint     ; "print"
.text:000000000000AFDA                 mov     ecx, 6
.text:000000000000AFDF                 mov     rsi, r12
.text:000000000000AFE2                 repe cmpsb
.text:000000000000AFE4                 setnbe  al
.text:000000000000AFE7                 sbb     al, 0
.text:000000000000AFE9                 test    al, al
.text:000000000000AFEB                 jnz     short loc_B06C
.text:000000000000AFED                 call    ___ctype_b_loc
.text:000000000000AFF2                 xor     ecx, ecx
.text:000000000000AFF4                 test    rbp, rbp
.text:000000000000AFF7                 mov     rdx, [rax]
.text:000000000000AFFA                 mov     edi, 1
.text:000000000000AFFF                 jnz     loc_B3F7
.text:000000000000B005                 nop     dword ptr [rax]
.text:000000000000B008
.text:000000000000B008 loc_B008:                               ; CODE XREF: build_charclass_isra_29+40B↓j
.text:000000000000B008                 test    byte ptr [rdx+rcx*2+1], 40h
.text:000000000000B00D                 jz      short loc_B020
.text:000000000000B00F                 mov     rax, rcx
.text:000000000000B012                 mov     rsi, rdi
.text:000000000000B015                 sar     rax, 6
.text:000000000000B019                 shl     rsi, cl
.text:000000000000B01C                 or      [rbx+rax*8], rsi
.text:000000000000B020
.text:000000000000B020 loc_B020:                               ; CODE XREF: build_charclass_isra_29+3ED↑j
.text:000000000000B020                 add     rcx, 1
.text:000000000000B024                 cmp     rcx, 100h
.text:000000000000B02B                 jnz     short loc_B008
.text:000000000000B02D                 jmp     loc_AD04
.text:000000000000B032 ; ---------------------------------------------------------------------------
.text:000000000000B032
.text:000000000000B032 loc_B032:                               ; CODE XREF: build_charclass_isra_29+23C↑j
.text:000000000000B032                 xor     eax, eax
.text:000000000000B034                 nop     dword ptr [rax+00h]
.text:000000000000B038
.text:000000000000B038 loc_B038:                               ; CODE XREF: build_charclass_isra_29+445↓j
.text:000000000000B038                 test    byte ptr [rdx+rax*2+1], 2
.text:000000000000B03D                 jz      short loc_B05B
.text:000000000000B03F                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B044                 mov     r14, rdi
.text:000000000000B047                 mov     rsi, rcx
.text:000000000000B04A                 and     ecx, 3Fh
.text:000000000000B04D                 shr     rsi, 3
.text:000000000000B051                 shl     r14, cl
.text:000000000000B054                 and     esi, 18h
.text:000000000000B057                 or      [rbx+rsi], r14
.text:000000000000B05B
.text:000000000000B05B loc_B05B:                               ; CODE XREF: build_charclass_isra_29+41D↑j
.text:000000000000B05B                 add     rax, 1
.text:000000000000B05F                 cmp     rax, 100h
.text:000000000000B065                 jnz     short loc_B038
.text:000000000000B067                 jmp     loc_AD04
.text:000000000000B06C ; ---------------------------------------------------------------------------
.text:000000000000B06C
.text:000000000000B06C loc_B06C:                               ; CODE XREF: build_charclass_isra_29+3CB↑j
.text:000000000000B06C                 lea     rdi, aUpper     ; "upper"
.text:000000000000B073                 mov     ecx, 6
.text:000000000000B078                 mov     rsi, r12
.text:000000000000B07B                 repe cmpsb
.text:000000000000B07D                 setnbe  al
.text:000000000000B080                 sbb     al, 0
.text:000000000000B082                 test    al, al
.text:000000000000B084                 jnz     short loc_B0D2
.text:000000000000B086                 call    ___ctype_b_loc
.text:000000000000B08B                 xor     ecx, ecx
.text:000000000000B08D                 test    rbp, rbp
.text:000000000000B090                 mov     rax, [rax]
.text:000000000000B093                 mov     edi, 1
.text:000000000000B098                 jnz     loc_B3C0
.text:000000000000B09E
.text:000000000000B09E loc_B09E:                               ; CODE XREF: build_charclass_isra_29+4A1↓j
.text:000000000000B09E                 test    byte ptr [rax+rcx*2+1], 1
.text:000000000000B0A3                 jz      short loc_B0B6
.text:000000000000B0A5                 mov     rdx, rcx
.text:000000000000B0A8                 mov     rsi, rdi
.text:000000000000B0AB                 sar     rdx, 6
.text:000000000000B0AF                 shl     rsi, cl
.text:000000000000B0B2                 or      [rbx+rdx*8], rsi
.text:000000000000B0B6
.text:000000000000B0B6 loc_B0B6:                               ; CODE XREF: build_charclass_isra_29+483↑j
.text:000000000000B0B6                 add     rcx, 1
.text:000000000000B0BA                 cmp     rcx, 100h
.text:000000000000B0C1                 jnz     short loc_B09E
.text:000000000000B0C3                 jmp     loc_AD04
.text:000000000000B0C8 ; ---------------------------------------------------------------------------
.text:000000000000B0C8
.text:000000000000B0C8 loc_B0C8:                               ; CODE XREF: build_charclass_isra_29+18A↑j
.text:000000000000B0C8                 mov     eax, 0Ch
.text:000000000000B0CD                 jmp     loc_AD06
.text:000000000000B0D2 ; ---------------------------------------------------------------------------
.text:000000000000B0D2
.text:000000000000B0D2 loc_B0D2:                               ; CODE XREF: build_charclass_isra_29+464↑j
.text:000000000000B0D2                 lea     rdi, aBlank     ; "blank"
.text:000000000000B0D9                 mov     ecx, 6
.text:000000000000B0DE                 mov     rsi, r12
.text:000000000000B0E1                 repe cmpsb
.text:000000000000B0E3                 setnbe  al
.text:000000000000B0E6                 sbb     al, 0
.text:000000000000B0E8                 test    al, al
.text:000000000000B0EA                 jnz     loc_B1DE
.text:000000000000B0F0                 call    ___ctype_b_loc
.text:000000000000B0F5                 xor     ecx, ecx
.text:000000000000B0F7                 test    rbp, rbp
.text:000000000000B0FA                 mov     rdx, [rax]
.text:000000000000B0FD                 mov     esi, 1
.text:000000000000B102                 jnz     loc_B1A4
.text:000000000000B108
.text:000000000000B108 loc_B108:                               ; CODE XREF: build_charclass_isra_29+50A↓j
.text:000000000000B108                 test    byte ptr [rdx+rcx*2], 1
.text:000000000000B10C                 jz      short loc_B11F
.text:000000000000B10E                 mov     rax, rcx
.text:000000000000B111                 mov     rdi, rsi
.text:000000000000B114                 sar     rax, 6
.text:000000000000B118                 shl     rdi, cl
.text:000000000000B11B                 or      [rbx+rax*8], rdi
.text:000000000000B11F
.text:000000000000B11F loc_B11F:                               ; CODE XREF: build_charclass_isra_29+4EC↑j
.text:000000000000B11F                 add     rcx, 1
.text:000000000000B123                 cmp     rcx, 100h
.text:000000000000B12A                 jnz     short loc_B108
.text:000000000000B12C                 jmp     loc_AD04
.text:000000000000B12C ; ---------------------------------------------------------------------------
.text:000000000000B131                 align 8
.text:000000000000B138
.text:000000000000B138 loc_B138:                               ; CODE XREF: build_charclass_isra_29+345↑j
.text:000000000000B138                 xor     eax, eax
.text:000000000000B13A
.text:000000000000B13A loc_B13A:                               ; CODE XREF: build_charclass_isra_29+547↓j
.text:000000000000B13A                 test    byte ptr [rdx+rax*2+1], 4
.text:000000000000B13F                 jz      short loc_B15D
.text:000000000000B141                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B146                 mov     r9, rdi
.text:000000000000B149                 mov     rsi, rcx
.text:000000000000B14C                 and     ecx, 3Fh
.text:000000000000B14F                 shr     rsi, 3
.text:000000000000B153                 shl     r9, cl
.text:000000000000B156                 and     esi, 18h
.text:000000000000B159                 or      [rbx+rsi], r9
.text:000000000000B15D
.text:000000000000B15D loc_B15D:                               ; CODE XREF: build_charclass_isra_29+51F↑j
.text:000000000000B15D                 add     rax, 1
.text:000000000000B161                 cmp     rax, 100h
.text:000000000000B167                 jnz     short loc_B13A
.text:000000000000B169                 jmp     loc_AD04
.text:000000000000B16E ; ---------------------------------------------------------------------------
.text:000000000000B16E
.text:000000000000B16E loc_B16E:                               ; CODE XREF: build_charclass_isra_29+1F2↑j
.text:000000000000B16E                 xor     eax, eax
.text:000000000000B170
.text:000000000000B170 loc_B170:                               ; CODE XREF: build_charclass_isra_29+57D↓j
.text:000000000000B170                 test    byte ptr [rdx+rax*2+1], 20h
.text:000000000000B175                 jz      short loc_B193
.text:000000000000B177                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B17C                 mov     r9, rdi
.text:000000000000B17F                 mov     rsi, rcx
.text:000000000000B182                 and     ecx, 3Fh
.text:000000000000B185                 shr     rsi, 3
.text:000000000000B189                 shl     r9, cl
.text:000000000000B18C                 and     esi, 18h
.text:000000000000B18F                 or      [rbx+rsi], r9
.text:000000000000B193
.text:000000000000B193 loc_B193:                               ; CODE XREF: build_charclass_isra_29+555↑j
.text:000000000000B193                 add     rax, 1
.text:000000000000B197                 cmp     rax, 100h
.text:000000000000B19D                 jnz     short loc_B170
.text:000000000000B19F                 jmp     loc_AD04
.text:000000000000B1A4 ; ---------------------------------------------------------------------------
.text:000000000000B1A4
.text:000000000000B1A4 loc_B1A4:                               ; CODE XREF: build_charclass_isra_29+4E2↑j
.text:000000000000B1A4                 xor     eax, eax
.text:000000000000B1A6                 mov     edi, 1
.text:000000000000B1AB
.text:000000000000B1AB loc_B1AB:                               ; CODE XREF: build_charclass_isra_29+5B7↓j
.text:000000000000B1AB                 test    byte ptr [rdx+rax*2], 1
.text:000000000000B1AF                 jz      short loc_B1CD
.text:000000000000B1B1                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B1B6                 mov     r14, rdi
.text:000000000000B1B9                 mov     rsi, rcx
.text:000000000000B1BC                 and     ecx, 3Fh
.text:000000000000B1BF                 shr     rsi, 3
.text:000000000000B1C3                 shl     r14, cl
.text:000000000000B1C6                 and     esi, 18h
.text:000000000000B1C9                 or      [rbx+rsi], r14
.text:000000000000B1CD
.text:000000000000B1CD loc_B1CD:                               ; CODE XREF: build_charclass_isra_29+58F↑j
.text:000000000000B1CD                 add     rax, 1
.text:000000000000B1D1                 cmp     rax, 100h
.text:000000000000B1D7                 jnz     short loc_B1AB
.text:000000000000B1D9                 jmp     loc_AD04
.text:000000000000B1DE ; ---------------------------------------------------------------------------
.text:000000000000B1DE
.text:000000000000B1DE loc_B1DE:                               ; CODE XREF: build_charclass_isra_29+4CA↑j
.text:000000000000B1DE                 lea     rsi, aGraph     ; "graph"
.text:000000000000B1E5                 mov     rdi, r12        ; s1
.text:000000000000B1E8                 call    _strcmp
.text:000000000000B1ED                 test    eax, eax
.text:000000000000B1EF                 jnz     short loc_B26A
.text:000000000000B1F1                 call    ___ctype_b_loc
.text:000000000000B1F6                 xor     ecx, ecx
.text:000000000000B1F8                 test    rbp, rbp
.text:000000000000B1FB                 mov     rsi, [rax]
.text:000000000000B1FE                 mov     edx, 1
.text:000000000000B203                 jnz     short loc_B22F
.text:000000000000B205
.text:000000000000B205 loc_B205:                               ; CODE XREF: build_charclass_isra_29+608↓j
.text:000000000000B205                 cmp     word ptr [rsi+rcx*2], 0
.text:000000000000B20A                 jns     short loc_B21D
.text:000000000000B20C                 mov     rax, rcx
.text:000000000000B20F                 mov     rdi, rdx
.text:000000000000B212                 sar     rax, 6
.text:000000000000B216                 shl     rdi, cl
.text:000000000000B219                 or      [rbx+rax*8], rdi
.text:000000000000B21D
.text:000000000000B21D loc_B21D:                               ; CODE XREF: build_charclass_isra_29+5EA↑j
.text:000000000000B21D                 add     rcx, 1
.text:000000000000B221                 cmp     rcx, 100h
.text:000000000000B228                 jnz     short loc_B205
.text:000000000000B22A                 jmp     loc_AD04
.text:000000000000B22F ; ---------------------------------------------------------------------------
.text:000000000000B22F
.text:000000000000B22F loc_B22F:                               ; CODE XREF: build_charclass_isra_29+5E3↑j
.text:000000000000B22F                 xor     eax, eax
.text:000000000000B231                 mov     edi, 1
.text:000000000000B236
.text:000000000000B236 loc_B236:                               ; CODE XREF: build_charclass_isra_29+643↓j
.text:000000000000B236                 cmp     word ptr [rsi+rax*2], 0
.text:000000000000B23B                 jns     short loc_B259
.text:000000000000B23D                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B242                 mov     r9, rdi
.text:000000000000B245                 mov     rdx, rcx
.text:000000000000B248                 and     ecx, 3Fh
.text:000000000000B24B                 shr     rdx, 3
.text:000000000000B24F                 shl     r9, cl
.text:000000000000B252                 and     edx, 18h
.text:000000000000B255                 or      [rbx+rdx], r9
.text:000000000000B259
.text:000000000000B259 loc_B259:                               ; CODE XREF: build_charclass_isra_29+61B↑j
.text:000000000000B259                 add     rax, 1
.text:000000000000B25D                 cmp     rax, 100h
.text:000000000000B263                 jnz     short loc_B236
.text:000000000000B265                 jmp     loc_AD04
.text:000000000000B26A ; ---------------------------------------------------------------------------
.text:000000000000B26A
.text:000000000000B26A loc_B26A:                               ; CODE XREF: build_charclass_isra_29+5CF↑j
.text:000000000000B26A                 lea     rsi, aPunct     ; "punct"
.text:000000000000B271                 mov     rdi, r12        ; s1
.text:000000000000B274                 call    _strcmp
.text:000000000000B279                 test    eax, eax
.text:000000000000B27B                 jnz     short loc_B2F4
.text:000000000000B27D                 call    ___ctype_b_loc
.text:000000000000B282                 xor     ecx, ecx
.text:000000000000B284                 test    rbp, rbp
.text:000000000000B287                 mov     rsi, [rax]
.text:000000000000B28A                 mov     edx, 1
.text:000000000000B28F                 jnz     short loc_B2BA
.text:000000000000B291
.text:000000000000B291 loc_B291:                               ; CODE XREF: build_charclass_isra_29+693↓j
.text:000000000000B291                 test    byte ptr [rsi+rcx*2], 4
.text:000000000000B295                 jz      short loc_B2A8
.text:000000000000B297                 mov     rax, rcx
.text:000000000000B29A                 mov     rdi, rdx
.text:000000000000B29D                 sar     rax, 6
.text:000000000000B2A1                 shl     rdi, cl
.text:000000000000B2A4                 or      [rbx+rax*8], rdi
.text:000000000000B2A8
.text:000000000000B2A8 loc_B2A8:                               ; CODE XREF: build_charclass_isra_29+675↑j
.text:000000000000B2A8                 add     rcx, 1
.text:000000000000B2AC                 cmp     rcx, 100h
.text:000000000000B2B3                 jnz     short loc_B291
.text:000000000000B2B5                 jmp     loc_AD04
.text:000000000000B2BA ; ---------------------------------------------------------------------------
.text:000000000000B2BA
.text:000000000000B2BA loc_B2BA:                               ; CODE XREF: build_charclass_isra_29+66F↑j
.text:000000000000B2BA                 xor     eax, eax
.text:000000000000B2BC                 mov     edi, 1
.text:000000000000B2C1
.text:000000000000B2C1 loc_B2C1:                               ; CODE XREF: build_charclass_isra_29+6CD↓j
.text:000000000000B2C1                 test    byte ptr [rsi+rax*2], 4
.text:000000000000B2C5                 jz      short loc_B2E3
.text:000000000000B2C7                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B2CC                 mov     r14, rdi
.text:000000000000B2CF                 mov     rdx, rcx
.text:000000000000B2D2                 and     ecx, 3Fh
.text:000000000000B2D5                 shr     rdx, 3
.text:000000000000B2D9                 shl     r14, cl
.text:000000000000B2DC                 and     edx, 18h
.text:000000000000B2DF                 or      [rbx+rdx], r14
.text:000000000000B2E3
.text:000000000000B2E3 loc_B2E3:                               ; CODE XREF: build_charclass_isra_29+6A5↑j
.text:000000000000B2E3                 add     rax, 1
.text:000000000000B2E7                 cmp     rax, 100h
.text:000000000000B2ED                 jnz     short loc_B2C1
.text:000000000000B2EF                 jmp     loc_AD04
.text:000000000000B2F4 ; ---------------------------------------------------------------------------
.text:000000000000B2F4
.text:000000000000B2F4 loc_B2F4:                               ; CODE XREF: build_charclass_isra_29+65B↑j
.text:000000000000B2F4                 lea     rsi, asc_14FCD  ; "x"
.text:000000000000B2FB                 mov     rdi, r12        ; s1
.text:000000000000B2FE                 call    _strcmp
.text:000000000000B303                 test    eax, eax
.text:000000000000B305                 jnz     short loc_B380
.text:000000000000B307                 call    ___ctype_b_loc
.text:000000000000B30C                 xor     ecx, ecx
.text:000000000000B30E                 test    rbp, rbp
.text:000000000000B311                 mov     rsi, [rax]
.text:000000000000B314                 mov     edx, 1
.text:000000000000B319                 jnz     short loc_B345
.text:000000000000B31B
.text:000000000000B31B loc_B31B:                               ; CODE XREF: build_charclass_isra_29+71E↓j
.text:000000000000B31B                 test    byte ptr [rsi+rcx*2+1], 10h
.text:000000000000B320                 jz      short loc_B333
.text:000000000000B322                 mov     rax, rcx
.text:000000000000B325                 mov     rdi, rdx
.text:000000000000B328                 sar     rax, 6
.text:000000000000B32C                 shl     rdi, cl
.text:000000000000B32F                 or      [rbx+rax*8], rdi
.text:000000000000B333
.text:000000000000B333 loc_B333:                               ; CODE XREF: build_charclass_isra_29+700↑j
.text:000000000000B333                 add     rcx, 1
.text:000000000000B337                 cmp     rcx, 100h
.text:000000000000B33E                 jnz     short loc_B31B
.text:000000000000B340                 jmp     loc_AD04
.text:000000000000B345 ; ---------------------------------------------------------------------------
.text:000000000000B345
.text:000000000000B345 loc_B345:                               ; CODE XREF: build_charclass_isra_29+6F9↑j
.text:000000000000B345                 xor     eax, eax
.text:000000000000B347                 mov     edi, 1
.text:000000000000B34C
.text:000000000000B34C loc_B34C:                               ; CODE XREF: build_charclass_isra_29+759↓j
.text:000000000000B34C                 test    byte ptr [rsi+rax*2+1], 10h
.text:000000000000B351                 jz      short loc_B36F
.text:000000000000B353                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B358                 mov     r9, rdi
.text:000000000000B35B                 mov     rdx, rcx
.text:000000000000B35E                 and     ecx, 3Fh
.text:000000000000B361                 shr     rdx, 3
.text:000000000000B365                 shl     r9, cl
.text:000000000000B368                 and     edx, 18h
.text:000000000000B36B                 or      [rbx+rdx], r9
.text:000000000000B36F
.text:000000000000B36F loc_B36F:                               ; CODE XREF: build_charclass_isra_29+731↑j
.text:000000000000B36F                 add     rax, 1
.text:000000000000B373                 cmp     rax, 100h
.text:000000000000B379                 jnz     short loc_B34C
.text:000000000000B37B                 jmp     loc_AD04
.text:000000000000B380 ; ---------------------------------------------------------------------------
.text:000000000000B380
.text:000000000000B380 loc_B380:                               ; CODE XREF: build_charclass_isra_29+6E5↑j
.text:000000000000B380                 mov     eax, 4
.text:000000000000B385                 jmp     loc_AD06
.text:000000000000B38A ; ---------------------------------------------------------------------------
.text:000000000000B38A
.text:000000000000B38A loc_B38A:                               ; CODE XREF: build_charclass_isra_29+2C0↑j
.text:000000000000B38A                 xor     eax, eax
.text:000000000000B38C
.text:000000000000B38C loc_B38C:                               ; CODE XREF: build_charclass_isra_29+799↓j
.text:000000000000B38C                 test    byte ptr [rdx+rax*2+1], 8
.text:000000000000B391                 jz      short loc_B3AF
.text:000000000000B393                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B398                 mov     r14, rdi
.text:000000000000B39B                 mov     rsi, rcx
.text:000000000000B39E                 and     ecx, 3Fh
.text:000000000000B3A1                 shr     rsi, 3
.text:000000000000B3A5                 shl     r14, cl
.text:000000000000B3A8                 and     esi, 18h
.text:000000000000B3AB                 or      [rbx+rsi], r14
.text:000000000000B3AF
.text:000000000000B3AF loc_B3AF:                               ; CODE XREF: build_charclass_isra_29+771↑j
.text:000000000000B3AF                 add     rax, 1
.text:000000000000B3B3                 cmp     rax, 100h
.text:000000000000B3B9                 jnz     short loc_B38C
.text:000000000000B3BB                 jmp     loc_AD04
.text:000000000000B3C0 ; ---------------------------------------------------------------------------
.text:000000000000B3C0
.text:000000000000B3C0 loc_B3C0:                               ; CODE XREF: build_charclass_isra_29+478↑j
.text:000000000000B3C0                 xor     edx, edx
.text:000000000000B3C2
.text:000000000000B3C2 loc_B3C2:                               ; CODE XREF: build_charclass_isra_29+7D0↓j
.text:000000000000B3C2                 test    byte ptr [rax+rdx*2+1], 1
.text:000000000000B3C7                 jz      short loc_B3E5
.text:000000000000B3C9                 movzx   ecx, byte ptr [rbp+rdx+0]
.text:000000000000B3CE                 mov     r9, rdi
.text:000000000000B3D1                 mov     rsi, rcx
.text:000000000000B3D4                 and     ecx, 3Fh
.text:000000000000B3D7                 shr     rsi, 3
.text:000000000000B3DB                 shl     r9, cl
.text:000000000000B3DE                 and     esi, 18h
.text:000000000000B3E1                 or      [rbx+rsi], r9
.text:000000000000B3E5
.text:000000000000B3E5 loc_B3E5:                               ; CODE XREF: build_charclass_isra_29+7A7↑j
.text:000000000000B3E5                 add     rdx, 1
.text:000000000000B3E9                 cmp     rdx, 100h
.text:000000000000B3F0                 jnz     short loc_B3C2
.text:000000000000B3F2                 jmp     loc_AD04
.text:000000000000B3F7 ; ---------------------------------------------------------------------------
.text:000000000000B3F7
.text:000000000000B3F7 loc_B3F7:                               ; CODE XREF: build_charclass_isra_29+3DF↑j
.text:000000000000B3F7                 xor     eax, eax
.text:000000000000B3F9
.text:000000000000B3F9 loc_B3F9:                               ; CODE XREF: build_charclass_isra_29+806↓j
.text:000000000000B3F9                 test    byte ptr [rdx+rax*2+1], 40h
.text:000000000000B3FE                 jz      short loc_B41C
.text:000000000000B400                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000B405                 mov     r14, rdi
.text:000000000000B408                 mov     rsi, rcx
.text:000000000000B40B                 and     ecx, 3Fh
.text:000000000000B40E                 shr     rsi, 3
.text:000000000000B412                 shl     r14, cl
.text:000000000000B415                 and     esi, 18h
.text:000000000000B418                 or      [rbx+rsi], r14
.text:000000000000B41C
.text:000000000000B41C loc_B41C:                               ; CODE XREF: build_charclass_isra_29+7DE↑j
.text:000000000000B41C                 add     rax, 1
.text:000000000000B420                 cmp     rax, 100h
.text:000000000000B426                 jnz     short loc_B3F9
.text:000000000000B428                 jmp     loc_AD04
.text:000000000000B428 ; } // starts at AC20
.text:000000000000B428 build_charclass_isra_29 endp
.text:000000000000B428
.text:000000000000B428 ; ---------------------------------------------------------------------------
.text:000000000000B42D                 align 10h
.text:000000000000B430
.text:000000000000B430 ; =============== S U B R O U T I N E =======================================
.text:000000000000B430
.text:000000000000B430
.text:000000000000B430 build_charclass_op proc near            ; CODE XREF: parse_expression+992↓p
.text:000000000000B430
.text:000000000000B430 var_88          = qword ptr -88h
.text:000000000000B430 var_80          = qword ptr -80h
.text:000000000000B430 var_70          = qword ptr -70h
.text:000000000000B430 var_68          = qword ptr -68h
.text:000000000000B430 var_60          = byte ptr -60h
.text:000000000000B430 var_58          = byte ptr -58h
.text:000000000000B430 var_50          = byte ptr -50h
.text:000000000000B430 var_40          = qword ptr -40h
.text:000000000000B430
.text:000000000000B430 ; __unwind {
.text:000000000000B430                 push    r15
.text:000000000000B432                 push    r14
.text:000000000000B434                 mov     r14, rdx
.text:000000000000B437                 push    r13
.text:000000000000B439                 push    r12
.text:000000000000B43B                 mov     r13, rcx
.text:000000000000B43E                 push    rbp
.text:000000000000B43F                 push    rbx
.text:000000000000B440                 mov     rbp, rdi
.text:000000000000B443                 mov     edi, 20h ; ' '  ; nmemb
.text:000000000000B448                 mov     r12d, r8d
.text:000000000000B44B                 sub     rsp, 58h
.text:000000000000B44F                 mov     [rsp+88h+var_88], rsi
.text:000000000000B453                 mov     esi, 1          ; size
.text:000000000000B458                 mov     [rsp+88h+var_80], r9
.text:000000000000B45D                 mov     rax, fs:28h
.text:000000000000B466                 mov     [rsp+88h+var_40], rax
.text:000000000000B46B                 xor     eax, eax
.text:000000000000B46D                 mov     [rsp+88h+var_70], 0
.text:000000000000B476                 call    _calloc
.text:000000000000B47B                 test    rax, rax
.text:000000000000B47E                 jz      loc_B640
.text:000000000000B484                 mov     esi, 1          ; size
.text:000000000000B489                 mov     edi, 50h ; 'P'  ; nmemb
.text:000000000000B48E                 mov     rbx, rax
.text:000000000000B491                 call    _calloc
.text:000000000000B496                 test    rax, rax
.text:000000000000B499                 mov     r15, rax
.text:000000000000B49C                 jz      loc_B650
.text:000000000000B4A2                 movzx   eax, byte ptr [rax+20h]
.text:000000000000B4A6                 sub     rsp, 8
.text:000000000000B4AA                 mov     edx, r12d
.text:000000000000B4AD                 push    0
.text:000000000000B4AF                 and     edx, 1
.text:000000000000B4B2                 mov     rdi, [rsp+98h+var_88]
.text:000000000000B4B7                 lea     rcx, [r15+48h]
.text:000000000000B4BB                 mov     r9, r14
.text:000000000000B4BE                 mov     rsi, rbx
.text:000000000000B4C1                 lea     r8, [rsp+98h+var_70]
.text:000000000000B4C6                 and     eax, 0FFFFFFFEh
.text:000000000000B4C9                 or      eax, edx
.text:000000000000B4CB                 lea     rdx, [r15+18h]
.text:000000000000B4CF                 mov     [r15+20h], al
.text:000000000000B4D3                 call    build_charclass_isra_29
.text:000000000000B4D8                 test    eax, eax
.text:000000000000B4DA                 pop     rdx
.text:000000000000B4DB                 pop     rcx
.text:000000000000B4DC                 jnz     loc_B670
.text:000000000000B4E2                 movsx   rcx, byte ptr [r13+0]
.text:000000000000B4E7                 mov     esi, 1
.text:000000000000B4EC                 test    cl, cl
.text:000000000000B4EE                 jz      short loc_B52A
.text:000000000000B4F0
.text:000000000000B4F0 loc_B4F0:                               ; CODE XREF: build_charclass_op+F8↓j
.text:000000000000B4F0                 lea     rax, [rcx+3Fh]
.text:000000000000B4F4                 test    rcx, rcx
.text:000000000000B4F7                 mov     rdx, rcx
.text:000000000000B4FA                 cmovns  rax, rcx
.text:000000000000B4FE                 sar     rdx, 3Fh
.text:000000000000B502                 add     r13, 1
.text:000000000000B506                 shr     rdx, 3Ah
.text:000000000000B50A                 sar     rax, 6
.text:000000000000B50E                 add     rcx, rdx
.text:000000000000B511                 and     ecx, 3Fh
.text:000000000000B514                 sub     rcx, rdx
.text:000000000000B517                 mov     rdx, rsi
.text:000000000000B51A                 shl     rdx, cl
.text:000000000000B51D                 movsx   rcx, byte ptr [r13+0]
.text:000000000000B522                 or      [rbx+rax*8], rdx
.text:000000000000B526                 test    cl, cl
.text:000000000000B528                 jnz     short loc_B4F0
.text:000000000000B52A
.text:000000000000B52A loc_B52A:                               ; CODE XREF: build_charclass_op+BE↑j
.text:000000000000B52A                 test    r12b, r12b
.text:000000000000B52D                 jz      short loc_B542
.text:000000000000B52F                 lea     rdx, [rbx+20h]
.text:000000000000B533                 mov     rax, rbx
.text:000000000000B536
.text:000000000000B536 loc_B536:                               ; CODE XREF: build_charclass_op+110↓j
.text:000000000000B536                 not     qword ptr [rax]
.text:000000000000B539                 add     rax, 8
.text:000000000000B53D                 cmp     rdx, rax
.text:000000000000B540                 jnz     short loc_B536
.text:000000000000B542
.text:000000000000B542 loc_B542:                               ; CODE XREF: build_charclass_op+FD↑j
.text:000000000000B542                 cmp     dword ptr [rbp+0B4h], 1
.text:000000000000B549                 jle     short loc_B563
.text:000000000000B54B                 mov     rcx, [rbp+78h]
.text:000000000000B54F                 xor     eax, eax
.text:000000000000B551
.text:000000000000B551 loc_B551:                               ; CODE XREF: build_charclass_op+131↓j
.text:000000000000B551                 mov     rdx, [rcx+rax]
.text:000000000000B555                 and     [rbx+rax], rdx
.text:000000000000B559                 add     rax, 8
.text:000000000000B55D                 cmp     rax, 20h ; ' '
.text:000000000000B561                 jnz     short loc_B551
.text:000000000000B563
.text:000000000000B563 loc_B563:                               ; CODE XREF: build_charclass_op+119↑j
.text:000000000000B563                 lea     r9, [rsp+88h+var_68]
.text:000000000000B568                 lea     r12, [rbp+70h]
.text:000000000000B56C                 lea     r13, [rbp+80h]
.text:000000000000B573                 xor     ecx, ecx
.text:000000000000B575                 xor     edx, edx
.text:000000000000B577                 mov     [rsp+88h+var_60], 3
.text:000000000000B57C                 mov     r8, r9
.text:000000000000B57F                 mov     rsi, r13
.text:000000000000B582                 mov     rdi, r12
.text:000000000000B585                 mov     [rsp+88h+var_68], rbx
.text:000000000000B58A                 mov     [rsp+88h+var_88], r9
.text:000000000000B58E                 call    create_token_tree_isra_16
.text:000000000000B593                 test    rax, rax
.text:000000000000B596                 mov     r14, rax
.text:000000000000B599                 jz      loc_B630
.text:000000000000B59F                 cmp     dword ptr [rbp+0B4h], 1
.text:000000000000B5A6                 jle     short loc_B620
.text:000000000000B5A8                 or      byte ptr [rbp+0B0h], 2
.text:000000000000B5AF                 mov     r9, [rsp+88h+var_88]
.text:000000000000B5B3                 xor     ecx, ecx
.text:000000000000B5B5                 xor     edx, edx
.text:000000000000B5B7                 mov     rsi, r13
.text:000000000000B5BA                 mov     rdi, r12
.text:000000000000B5BD                 mov     [rsp+88h+var_60], 6
.text:000000000000B5C2                 mov     [rsp+88h+var_68], r15
.text:000000000000B5C7                 mov     r8, r9
.text:000000000000B5CA                 call    create_token_tree_isra_16
.text:000000000000B5CF                 test    rax, rax
.text:000000000000B5D2                 jz      short loc_B630
.text:000000000000B5D4                 lea     r8, [rsp+88h+var_58]
.text:000000000000B5D9                 mov     rdx, r14
.text:000000000000B5DC                 mov     rcx, rax
.text:000000000000B5DF                 mov     rsi, r13
.text:000000000000B5E2                 mov     rdi, r12
.text:000000000000B5E5                 mov     [rsp+88h+var_50], 0Ah
.text:000000000000B5EA                 call    create_token_tree_isra_16
.text:000000000000B5EF                 mov     r14, rax
.text:000000000000B5F2
.text:000000000000B5F2 loc_B5F2:                               ; CODE XREF: build_charclass_op+1F8↓j
.text:000000000000B5F2                                         ; build_charclass_op+21E↓j ...
.text:000000000000B5F2                 mov     rdi, [rsp+88h+var_40]
.text:000000000000B5F7                 xor     rdi, fs:28h
.text:000000000000B600                 mov     rax, r14
.text:000000000000B603                 jnz     loc_B695
.text:000000000000B609                 add     rsp, 58h
.text:000000000000B60D                 pop     rbx
.text:000000000000B60E                 pop     rbp
.text:000000000000B60F                 pop     r12
.text:000000000000B611                 pop     r13
.text:000000000000B613                 pop     r14
.text:000000000000B615                 pop     r15
.text:000000000000B617                 retn
.text:000000000000B617 ; ---------------------------------------------------------------------------
.text:000000000000B618                 align 20h
.text:000000000000B620
.text:000000000000B620 loc_B620:                               ; CODE XREF: build_charclass_op+176↑j
.text:000000000000B620                 mov     rdi, r15        ; ptr
.text:000000000000B623                 call    isl_union_flow_free_0
.text:000000000000B628                 jmp     short loc_B5F2
.text:000000000000B628 ; ---------------------------------------------------------------------------
.text:000000000000B62A                 align 10h
.text:000000000000B630
.text:000000000000B630 loc_B630:                               ; CODE XREF: build_charclass_op+169↑j
.text:000000000000B630                                         ; build_charclass_op+1A2↑j
.text:000000000000B630                 mov     rdi, rbx        ; ptr
.text:000000000000B633                 call    _free
.text:000000000000B638                 mov     rdi, r15        ; ptr
.text:000000000000B63B                 call    isl_union_flow_free_0
.text:000000000000B640
.text:000000000000B640 loc_B640:                               ; CODE XREF: build_charclass_op+4E↑j
.text:000000000000B640                 mov     rax, [rsp+88h+var_80]
.text:000000000000B645                 xor     r14d, r14d
.text:000000000000B648                 mov     dword ptr [rax], 0Ch
.text:000000000000B64E                 jmp     short loc_B5F2
.text:000000000000B650 ; ---------------------------------------------------------------------------
.text:000000000000B650
.text:000000000000B650 loc_B650:                               ; CODE XREF: build_charclass_op+6C↑j
.text:000000000000B650                 mov     rdi, rbx        ; ptr
.text:000000000000B653                 xor     r14d, r14d
.text:000000000000B656                 call    _free
.text:000000000000B65B                 mov     rax, [rsp+88h+var_80]
.text:000000000000B660                 mov     dword ptr [rax], 0Ch
.text:000000000000B666                 jmp     short loc_B5F2
.text:000000000000B666 ; ---------------------------------------------------------------------------
.text:000000000000B668                 align 10h
.text:000000000000B670
.text:000000000000B670 loc_B670:                               ; CODE XREF: build_charclass_op+AC↑j
.text:000000000000B670                 mov     rdi, rbx        ; ptr
.text:000000000000B673                 mov     dword ptr [rsp+88h+var_88], eax
.text:000000000000B676                 xor     r14d, r14d
.text:000000000000B679                 call    _free
.text:000000000000B67E                 mov     rdi, r15        ; ptr
.text:000000000000B681                 call    isl_union_flow_free_0
.text:000000000000B686                 mov     rdi, [rsp+88h+var_80]
.text:000000000000B68B                 mov     eax, dword ptr [rsp+88h+var_88]
.text:000000000000B68E                 mov     [rdi], eax
.text:000000000000B690                 jmp     loc_B5F2
.text:000000000000B695 ; ---------------------------------------------------------------------------
.text:000000000000B695
.text:000000000000B695 loc_B695:                               ; CODE XREF: build_charclass_op+1D3↑j
.text:000000000000B695                 call    ___stack_chk_fail
.text:000000000000B695 ; } // starts at B430
.text:000000000000B695 build_charclass_op endp
.text:000000000000B695
.text:000000000000B695 ; ---------------------------------------------------------------------------
.text:000000000000B69A                 align 20h
.text:000000000000B6A0
.text:000000000000B6A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B6A0
.text:000000000000B6A0
.text:000000000000B6A0 re_compile_fastmap_iter_isra_30 proc near
.text:000000000000B6A0                                         ; CODE XREF: rpl_re_compile_fastmap+50↓p
.text:000000000000B6A0                                         ; rpl_re_compile_fastmap+6F↓p ...
.text:000000000000B6A0
.text:000000000000B6A0 var_1A8         = qword ptr -1A8h
.text:000000000000B6A0 var_1A0         = qword ptr -1A0h
.text:000000000000B6A0 var_198         = qword ptr -198h
.text:000000000000B6A0 var_190         = qword ptr -190h
.text:000000000000B6A0 var_188         = qword ptr -188h
.text:000000000000B6A0 var_180         = qword ptr -180h
.text:000000000000B6A0 var_178         = qword ptr -178h
.text:000000000000B6A0 s               = qword ptr -170h
.text:000000000000B6A0 ps              = qword ptr -168h
.text:000000000000B6A0 var_160         = qword ptr -160h
.text:000000000000B6A0 wc              = dword ptr -154h
.text:000000000000B6A0 var_150         = byte ptr -150h
.text:000000000000B6A0 var_148         = byte ptr -148h
.text:000000000000B6A0 var_40          = qword ptr -40h
.text:000000000000B6A0
.text:000000000000B6A0 ; __unwind {
.text:000000000000B6A0                 push    r15
.text:000000000000B6A2                 push    r14
.text:000000000000B6A4                 mov     rax, rdi
.text:000000000000B6A7                 push    r13
.text:000000000000B6A9                 push    r12
.text:000000000000B6AB                 push    rbp
.text:000000000000B6AC                 push    rbx
.text:000000000000B6AD                 xor     ebx, ebx
.text:000000000000B6AF                 mov     rbp, rcx
.text:000000000000B6B2                 sub     rsp, 178h
.text:000000000000B6B9                 mov     rax, [rax]
.text:000000000000B6BC                 mov     [rsp+1A8h+var_178], rdi
.text:000000000000B6C1                 mov     [rsp+1A8h+var_188], rsi
.text:000000000000B6C6                 mov     rdi, fs:28h
.text:000000000000B6CF                 mov     [rsp+1A8h+var_40], rdi
.text:000000000000B6D7                 xor     edi, edi
.text:000000000000B6D9                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000B6E0                 mov     [rsp+1A8h+var_180], rdx
.text:000000000000B6E5                 mov     [rsp+1A8h+var_1A0], rax
.text:000000000000B6EA                 jnz     short loc_B703
.text:000000000000B6EC                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000B6F1                 mov     rax, [rax+18h]
.text:000000000000B6F5                 mov     rbx, rax
.text:000000000000B6F8                 mov     [rsp+1A8h+var_1A8], rax
.text:000000000000B6FC                 shr     rbx, 16h
.text:000000000000B700                 and     ebx, 1
.text:000000000000B703
.text:000000000000B703 loc_B703:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+4A↑j
.text:000000000000B703                 mov     rax, [rsp+1A8h+var_188]
.text:000000000000B708                 cmp     qword ptr [rax], 0
.text:000000000000B70C                 jle     loc_BB1D
.text:000000000000B712                 lea     rax, [rsp+1A8h+var_150]
.text:000000000000B717                 mov     [rsp+1A8h+var_1A8], 0
.text:000000000000B71F                 mov     [rsp+1A8h+ps], rax
.text:000000000000B724                 lea     rax, [rsp+1A8h+wc]
.text:000000000000B729                 mov     [rsp+1A8h+var_160], rax
.text:000000000000B72E                 lea     rax, [rsp+1A8h+var_148]
.text:000000000000B733                 mov     [rsp+1A8h+s], rax
.text:000000000000B738                 jmp     short loc_B77E
.text:000000000000B738 ; ---------------------------------------------------------------------------
.text:000000000000B73A                 align 20h
.text:000000000000B740
.text:000000000000B740 loc_B740:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+10F↓j
.text:000000000000B740                 cmp     eax, 3
.text:000000000000B743                 jz      loc_BA36
.text:000000000000B749                 cmp     eax, 6
.text:000000000000B74C                 jz      loc_B8D8
.text:000000000000B752                 and     edx, 0FFFFFFFDh
.text:000000000000B755                 cmp     dl, 5
.text:000000000000B758                 jz      loc_BB54
.text:000000000000B75E                 cmp     eax, 2
.text:000000000000B761                 jz      loc_BAB4
.text:000000000000B767
.text:000000000000B767 loc_B767:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+139↓j
.text:000000000000B767                                         ; re_compile_fastmap_iter_isra_30+147↓j ...
.text:000000000000B767                 mov     rdi, [rsp+1A8h+var_188]
.text:000000000000B76C                 add     [rsp+1A8h+var_1A8], 1
.text:000000000000B771                 mov     rax, [rsp+1A8h+var_1A8]
.text:000000000000B775                 cmp     rax, [rdi]
.text:000000000000B778                 jge     loc_BB1D
.text:000000000000B77E
.text:000000000000B77E loc_B77E:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+98↑j
.text:000000000000B77E                 mov     rax, [rsp+1A8h+var_180]
.text:000000000000B783                 mov     rdi, [rsp+1A8h+var_1A8]
.text:000000000000B787                 mov     rax, [rax]
.text:000000000000B78A                 mov     r12, [rax+rdi*8]
.text:000000000000B78E                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000B793                 mov     rcx, [rax]
.text:000000000000B796                 mov     rax, r12
.text:000000000000B799                 shl     rax, 4
.text:000000000000B79D                 mov     [rsp+1A8h+var_198], rax
.text:000000000000B7A2                 lea     rsi, [rcx+rax]
.text:000000000000B7A6                 movzx   eax, byte ptr [rsi+8]
.text:000000000000B7AA                 cmp     eax, 1
.text:000000000000B7AD                 mov     edx, eax
.text:000000000000B7AF                 jnz     short loc_B740
.text:000000000000B7B1                 movzx   r13d, byte ptr [rsi]
.text:000000000000B7B5                 test    ebx, ebx
.text:000000000000B7B7                 mov     byte ptr [rbp+r13+0], 1
.text:000000000000B7BD                 jz      short loc_B7D0
.text:000000000000B7BF                 call    ___ctype_tolower_loc
.text:000000000000B7C4                 mov     rax, [rax]
.text:000000000000B7C7                 movsxd  rax, dword ptr [rax+r13*4]
.text:000000000000B7CB                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000B7D0
.text:000000000000B7D0 loc_B7D0:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+11D↑j
.text:000000000000B7D0                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000B7D5                 test    byte ptr [rax+1Ah], 40h
.text:000000000000B7D9                 jz      short loc_B767
.text:000000000000B7DB                 mov     rsi, [rsp+1A8h+var_1A0]
.text:000000000000B7E0                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000B7E7                 jle     loc_B767
.text:000000000000B7ED                 mov     rax, [rsi]
.text:000000000000B7F0                 mov     rdi, [rsp+1A8h+var_198]
.text:000000000000B7F5                 movzx   edx, byte ptr [rax+rdi]
.text:000000000000B7F9                 mov     [rsp+1A8h+var_148], dl
.text:000000000000B7FD                 lea     rdx, [r12+1]
.text:000000000000B802                 cmp     [rsi+10h], rdx
.text:000000000000B806                 jbe     loc_BB46
.text:000000000000B80C                 lea     rcx, [rax+rdi+10h]
.text:000000000000B811                 mov     eax, [rcx+8]
.text:000000000000B814                 and     eax, 2000FFh
.text:000000000000B819                 cmp     eax, 200001h
.text:000000000000B81E                 jnz     loc_BB46
.text:000000000000B824                 add     rdi, 20h ; ' '
.text:000000000000B828                 mov     r13, rdi
.text:000000000000B82B                 mov     rdi, [rsp+1A8h+s]
.text:000000000000B830                 lea     rax, [rdi+1]
.text:000000000000B834                 jmp     short loc_B85B
.text:000000000000B834 ; ---------------------------------------------------------------------------
.text:000000000000B836                 align 20h
.text:000000000000B840
.text:000000000000B840 loc_B840:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+1D2↓j
.text:000000000000B840                 mov     rcx, [rsi]
.text:000000000000B843                 add     rcx, r13
.text:000000000000B846                 add     r13, 10h
.text:000000000000B84A                 mov     edx, [rcx+8]
.text:000000000000B84D                 and     edx, 2000FFh
.text:000000000000B853                 cmp     edx, 200001h
.text:000000000000B859                 jnz     short loc_B874
.text:000000000000B85B
.text:000000000000B85B loc_B85B:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+194↑j
.text:000000000000B85B                 movzx   edx, byte ptr [rcx]
.text:000000000000B85E                 add     rax, 1
.text:000000000000B862                 mov     [rax-1], dl
.text:000000000000B865                 mov     rdx, rax
.text:000000000000B868                 sub     rdx, rdi
.text:000000000000B86B                 add     rdx, r12
.text:000000000000B86E                 cmp     [rsi+10h], rdx
.text:000000000000B872                 ja      short loc_B840
.text:000000000000B874
.text:000000000000B874 loc_B874:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+1B9↑j
.text:000000000000B874                                         ; re_compile_fastmap_iter_isra_30+4AF↓j
.text:000000000000B874                 mov     rsi, [rsp+1A8h+s]
.text:000000000000B879                 mov     rcx, [rsp+1A8h+ps]
.text:000000000000B87E                 mov     rdi, [rsp+1A8h+var_160]
.text:000000000000B883                 sub     rax, rsi
.text:000000000000B886                 mov     qword ptr [rcx], 0
.text:000000000000B88D                 mov     r12, rax
.text:000000000000B890                 mov     rdx, rax
.text:000000000000B893                 call    rpl_mbrtowc
.text:000000000000B898                 cmp     r12, rax
.text:000000000000B89B                 jnz     loc_B767
.text:000000000000B8A1                 mov     edi, [rsp+1A8h+wc] ; wc
.text:000000000000B8A5                 call    _towlower
.text:000000000000B8AA                 mov     rdx, [rsp+1A8h+ps] ; ps
.text:000000000000B8AF                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000B8B4                 mov     esi, eax        ; wc
.text:000000000000B8B6                 call    _wcrtomb
.text:000000000000B8BB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B8BF                 jz      loc_B767
.text:000000000000B8C5                 movzx   eax, [rsp+1A8h+var_148]
.text:000000000000B8CA                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000B8CF                 jmp     loc_B767
.text:000000000000B8CF ; ---------------------------------------------------------------------------
.text:000000000000B8D4                 align 8
.text:000000000000B8D8
.text:000000000000B8D8 loc_B8D8:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+AC↑j
.text:000000000000B8D8                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000B8DD                 mov     r12, [rsi]
.text:000000000000B8E0                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000B8E7                 jle     short loc_B90D
.text:000000000000B8E9                 cmp     qword ptr [r12+48h], 0
.text:000000000000B8EF                 jnz     loc_B9EF
.text:000000000000B8F5                 test    byte ptr [r12+20h], 1
.text:000000000000B8FB                 jnz     loc_B9EF
.text:000000000000B901                 cmp     qword ptr [r12+40h], 0
.text:000000000000B907                 jnz     loc_B9EF
.text:000000000000B90D
.text:000000000000B90D loc_B90D:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+247↑j
.text:000000000000B90D                 xor     r13d, r13d
.text:000000000000B910                 cmp     qword ptr [r12+28h], 0
.text:000000000000B916                 jle     loc_B767
.text:000000000000B91C                 mov     r15, r12
.text:000000000000B91F                 mov     r14, [rsp+1A8h+ps]
.text:000000000000B924                 mov     r12, rbp
.text:000000000000B927                 mov     rbp, r13
.text:000000000000B92A                 mov     r13d, ebx
.text:000000000000B92D                 jmp     short loc_B93D
.text:000000000000B92F ; ---------------------------------------------------------------------------
.text:000000000000B92F
.text:000000000000B92F loc_B92F:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+2F8↓j
.text:000000000000B92F                                         ; re_compile_fastmap_iter_isra_30+306↓j ...
.text:000000000000B92F                 add     rbp, 1
.text:000000000000B933                 cmp     rbp, [r15+28h]
.text:000000000000B937                 jge     loc_B9E4
.text:000000000000B93D
.text:000000000000B93D loc_B93D:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+28D↑j
.text:000000000000B93D                                         ; re_compile_fastmap_iter_isra_30+33E↓j
.text:000000000000B93D                 mov     qword ptr [r14], 0
.text:000000000000B944                 mov     rax, [r15]
.text:000000000000B947                 mov     rdx, r14        ; ps
.text:000000000000B94A                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000B94F                 lea     rbx, ds:0[rbp*4]
.text:000000000000B957                 mov     esi, [rax+rbp*4] ; wc
.text:000000000000B95A                 call    _wcrtomb
.text:000000000000B95F                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B963                 jz      short loc_B98F
.text:000000000000B965                 movzx   edx, [rsp+1A8h+var_148]
.text:000000000000B96A                 test    r13d, r13d
.text:000000000000B96D                 mov     byte ptr [r12+rdx], 1
.text:000000000000B972                 mov     [rsp+1A8h+var_198], rdx
.text:000000000000B977                 jz      short loc_B98F
.text:000000000000B979                 call    ___ctype_tolower_loc
.text:000000000000B97E                 mov     rdx, [rsp+1A8h+var_198]
.text:000000000000B983                 mov     rax, [rax]
.text:000000000000B986                 movsxd  rax, dword ptr [rax+rdx*4]
.text:000000000000B98A                 mov     byte ptr [r12+rax], 1
.text:000000000000B98F
.text:000000000000B98F loc_B98F:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+2C3↑j
.text:000000000000B98F                                         ; re_compile_fastmap_iter_isra_30+2D7↑j
.text:000000000000B98F                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000B994                 test    byte ptr [rax+1Ah], 40h
.text:000000000000B998                 jz      short loc_B92F
.text:000000000000B99A                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000B99F                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000B9A6                 jle     short loc_B92F
.text:000000000000B9A8                 mov     rax, [r15]
.text:000000000000B9AB                 mov     edi, [rax+rbx]  ; wc
.text:000000000000B9AE                 call    _towlower
.text:000000000000B9B3                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000B9B8                 mov     rdx, r14        ; ps
.text:000000000000B9BB                 mov     esi, eax        ; wc
.text:000000000000B9BD                 call    _wcrtomb
.text:000000000000B9C2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B9C6                 jz      loc_B92F
.text:000000000000B9CC                 movzx   eax, [rsp+1A8h+var_148]
.text:000000000000B9D1                 add     rbp, 1
.text:000000000000B9D5                 mov     byte ptr [r12+rax], 1
.text:000000000000B9DA                 cmp     rbp, [r15+28h]
.text:000000000000B9DE                 jl      loc_B93D
.text:000000000000B9E4
.text:000000000000B9E4 loc_B9E4:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+297↑j
.text:000000000000B9E4                 mov     ebx, r13d
.text:000000000000B9E7                 mov     rbp, r12
.text:000000000000B9EA                 jmp     loc_B767
.text:000000000000B9EF ; ---------------------------------------------------------------------------
.text:000000000000B9EF
.text:000000000000B9EF loc_B9EF:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+24F↑j
.text:000000000000B9EF                                         ; re_compile_fastmap_iter_isra_30+25B↑j ...
.text:000000000000B9EF                 mov     r12, [rsp+1A8h+ps]
.text:000000000000B9F4                 mov     r13, [rsp+1A8h+var_160]
.text:000000000000B9F9                 mov     byte ptr [rsp+1A8h+wc], 0
.text:000000000000B9FE                 xchg    ax, ax
.text:000000000000BA00
.text:000000000000BA00 loc_BA00:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+38F↓j
.text:000000000000BA00                 xor     edi, edi
.text:000000000000BA02                 mov     qword ptr [r12], 0
.text:000000000000BA0A                 mov     rcx, r12
.text:000000000000BA0D                 mov     edx, 1
.text:000000000000BA12                 mov     rsi, r13
.text:000000000000BA15                 call    rpl_mbrtowc
.text:000000000000BA1A                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000BA1E                 jnz     short loc_BA2A
.text:000000000000BA20                 movzx   eax, byte ptr [rsp+1A8h+wc]
.text:000000000000BA25                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000BA2A
.text:000000000000BA2A loc_BA2A:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+37E↑j
.text:000000000000BA2A                 add     byte ptr [rsp+1A8h+wc], 1
.text:000000000000BA2F                 jnz     short loc_BA00
.text:000000000000BA31                 jmp     loc_B767
.text:000000000000BA36 ; ---------------------------------------------------------------------------
.text:000000000000BA36
.text:000000000000BA36 loc_BA36:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+A3↑j
.text:000000000000BA36                 mov     r13, rbp
.text:000000000000BA39                 xor     r12d, r12d
.text:000000000000BA3C                 mov     [rsp+1A8h+var_190], 0
.text:000000000000BA45
.text:000000000000BA45 loc_BA45:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+412↓j
.text:000000000000BA45                 mov     rax, [rsp+1A8h+var_198]
.text:000000000000BA4A                 mov     rsi, [rsp+1A8h+var_190]
.text:000000000000BA4F                 xor     r14d, r14d
.text:000000000000BA52                 mov     rax, [rcx+rax]
.text:000000000000BA56                 mov     r15, [rax+rsi]
.text:000000000000BA5A                 nop     word ptr [rax+rax+00h]
.text:000000000000BA60
.text:000000000000BA60 loc_BA60:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+3ED↓j
.text:000000000000BA60                 bt      r15, r14
.text:000000000000BA64                 jnb     short loc_BA85
.text:000000000000BA66                 test    ebx, ebx
.text:000000000000BA68                 mov     byte ptr [r13+r14+0], 1
.text:000000000000BA6E                 jz      short loc_BA85
.text:000000000000BA70                 call    ___ctype_tolower_loc
.text:000000000000BA75                 mov     rax, [rax]
.text:000000000000BA78                 lea     rdx, [r12+r14]
.text:000000000000BA7C                 movsxd  rax, dword ptr [rax+rdx*4]
.text:000000000000BA80                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000BA85
.text:000000000000BA85 loc_BA85:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+3C4↑j
.text:000000000000BA85                                         ; re_compile_fastmap_iter_isra_30+3CE↑j
.text:000000000000BA85                 add     r14, 1
.text:000000000000BA89                 cmp     r14, 40h ; '@'
.text:000000000000BA8D                 jnz     short loc_BA60
.text:000000000000BA8F                 add     r12, 40h ; '@'
.text:000000000000BA93                 add     [rsp+1A8h+var_190], 8
.text:000000000000BA99                 add     r13, 40h ; '@'
.text:000000000000BA9D                 cmp     r12, 100h
.text:000000000000BAA4                 jz      loc_B767
.text:000000000000BAAA                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000BAAF                 mov     rcx, [rax]
.text:000000000000BAB2                 jmp     short loc_BA45
.text:000000000000BAB4 ; ---------------------------------------------------------------------------
.text:000000000000BAB4
.text:000000000000BAB4 loc_BAB4:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+C1↑j
.text:000000000000BAB4                 movdqa  xmm0, cs:xmmword_15780
.text:000000000000BABC                 movups  xmmword ptr [rbp+0], xmm0
.text:000000000000BAC0                 movups  xmmword ptr [rbp+10h], xmm0
.text:000000000000BAC4                 movups  xmmword ptr [rbp+20h], xmm0
.text:000000000000BAC8                 movups  xmmword ptr [rbp+30h], xmm0
.text:000000000000BACC                 movups  xmmword ptr [rbp+40h], xmm0
.text:000000000000BAD0                 movups  xmmword ptr [rbp+50h], xmm0
.text:000000000000BAD4                 movups  xmmword ptr [rbp+60h], xmm0
.text:000000000000BAD8                 movups  xmmword ptr [rbp+70h], xmm0
.text:000000000000BADC                 movups  xmmword ptr [rbp+80h], xmm0
.text:000000000000BAE3                 movups  xmmword ptr [rbp+90h], xmm0
.text:000000000000BAEA                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:000000000000BAF1                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:000000000000BAF8                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:000000000000BAFF                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:000000000000BB06                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:000000000000BB0D                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:000000000000BB14
.text:000000000000BB14 loc_BB14:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+51D↓j
.text:000000000000BB14                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000BB19                 or      byte ptr [rax+38h], 1
.text:000000000000BB1D
.text:000000000000BB1D loc_BB1D:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+6C↑j
.text:000000000000BB1D                                         ; re_compile_fastmap_iter_isra_30+D8↑j ...
.text:000000000000BB1D                 mov     rax, [rsp+1A8h+var_40]
.text:000000000000BB25                 xor     rax, fs:28h
.text:000000000000BB2E                 jnz     loc_BBC2
.text:000000000000BB34                 add     rsp, 178h
.text:000000000000BB3B                 pop     rbx
.text:000000000000BB3C                 pop     rbp
.text:000000000000BB3D                 pop     r12
.text:000000000000BB3F                 pop     r13
.text:000000000000BB41                 pop     r14
.text:000000000000BB43                 pop     r15
.text:000000000000BB45                 retn
.text:000000000000BB46 ; ---------------------------------------------------------------------------
.text:000000000000BB46
.text:000000000000BB46 loc_BB46:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+166↑j
.text:000000000000BB46                                         ; re_compile_fastmap_iter_isra_30+17E↑j
.text:000000000000BB46                 mov     rax, [rsp+1A8h+s]
.text:000000000000BB4B                 add     rax, 1
.text:000000000000BB4F                 jmp     loc_B874
.text:000000000000BB54 ; ---------------------------------------------------------------------------
.text:000000000000BB54
.text:000000000000BB54 loc_BB54:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+B8↑j
.text:000000000000BB54                 movdqa  xmm0, cs:xmmword_15780
.text:000000000000BB5C                 cmp     eax, 2
.text:000000000000BB5F                 movups  xmmword ptr [rbp+0], xmm0
.text:000000000000BB63                 movups  xmmword ptr [rbp+10h], xmm0
.text:000000000000BB67                 movups  xmmword ptr [rbp+20h], xmm0
.text:000000000000BB6B                 movups  xmmword ptr [rbp+30h], xmm0
.text:000000000000BB6F                 movups  xmmword ptr [rbp+40h], xmm0
.text:000000000000BB73                 movups  xmmword ptr [rbp+50h], xmm0
.text:000000000000BB77                 movups  xmmword ptr [rbp+60h], xmm0
.text:000000000000BB7B                 movups  xmmword ptr [rbp+70h], xmm0
.text:000000000000BB7F                 movups  xmmword ptr [rbp+80h], xmm0
.text:000000000000BB86                 movups  xmmword ptr [rbp+90h], xmm0
.text:000000000000BB8D                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:000000000000BB94                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:000000000000BB9B                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:000000000000BBA2                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:000000000000BBA9                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:000000000000BBB0                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:000000000000BBB7                 jnz     loc_BB1D
.text:000000000000BBBD                 jmp     loc_BB14
.text:000000000000BBC2 ; ---------------------------------------------------------------------------
.text:000000000000BBC2
.text:000000000000BBC2 loc_BBC2:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+48E↑j
.text:000000000000BBC2                 call    ___stack_chk_fail
.text:000000000000BBC2 ; } // starts at B6A0
.text:000000000000BBC2 re_compile_fastmap_iter_isra_30 endp
.text:000000000000BBC2
.text:000000000000BBC2 ; ---------------------------------------------------------------------------
.text:000000000000BBC7                 align 10h
.text:000000000000BBD0
.text:000000000000BBD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BBD0
.text:000000000000BBD0
.text:000000000000BBD0 check_node_accept_bytes_isra_31 proc near
.text:000000000000BBD0                                         ; CODE XREF: check_arrival+255↓p
.text:000000000000BBD0                                         ; set_regs+378↓p ...
.text:000000000000BBD0 ; __unwind {
.text:000000000000BBD0                 shl     rdx, 4
.text:000000000000BBD4                 push    r13
.text:000000000000BBD6                 push    r12
.text:000000000000BBD8                 lea     r9, [rdi+rdx]
.text:000000000000BBDC                 push    rbp
.text:000000000000BBDD                 push    rbx
.text:000000000000BBDE                 sub     rsp, 8
.text:000000000000BBE2                 movzx   r11d, byte ptr [r9+8]
.text:000000000000BBE7                 cmp     r11b, 7
.text:000000000000BBEB                 jz      loc_BD00
.text:000000000000BBF1                 cmp     dword ptr [rcx+90h], 1
.text:000000000000BBF8                 jz      loc_BCC0
.text:000000000000BBFE                 mov     rbx, rsi
.text:000000000000BC01                 mov     rdi, rcx
.text:000000000000BC04                 mov     rsi, r8
.text:000000000000BC07                 mov     r10, rcx
.text:000000000000BC0A                 call    re_string_char_size_at_part_0
.text:000000000000BC0F                 cmp     r11b, 5
.text:000000000000BC13                 mov     ebp, eax
.text:000000000000BC15                 jz      loc_BCD0
.text:000000000000BC1B                 cmp     r11b, 6
.text:000000000000BC1F                 jnz     loc_BCC0
.text:000000000000BC25                 cmp     eax, 1
.text:000000000000BC28                 jle     loc_BCC0
.text:000000000000BC2E                 mov     r13, [r9]
.text:000000000000BC31                 mov     rsi, [r13+40h]
.text:000000000000BC35                 mov     rdx, [r13+28h]
.text:000000000000BC39                 test    rsi, rsi
.text:000000000000BC3C                 jnz     short loc_BC49
.text:000000000000BC3E                 cmp     qword ptr [r13+48h], 0
.text:000000000000BC43                 jz      loc_BD38
.text:000000000000BC49
.text:000000000000BC49 loc_BC49:                               ; CODE XREF: check_node_accept_bytes_isra_31+6C↑j
.text:000000000000BC49                                         ; check_node_accept_bytes_isra_31+16B↓j
.text:000000000000BC49                 mov     rax, [r10+10h]
.text:000000000000BC4D                 test    rdx, rdx
.text:000000000000BC50                 mov     r12d, [rax+r8*4]
.text:000000000000BC54                 jle     short loc_BC77
.text:000000000000BC56                 mov     rcx, [r13+0]
.text:000000000000BC5A                 cmp     r12d, [rcx]
.text:000000000000BC5D                 jz      short loc_BCB2
.text:000000000000BC5F                 xor     eax, eax
.text:000000000000BC61                 jmp     short loc_BC6E
.text:000000000000BC61 ; ---------------------------------------------------------------------------
.text:000000000000BC63                 align 8
.text:000000000000BC68
.text:000000000000BC68 loc_BC68:                               ; CODE XREF: check_node_accept_bytes_isra_31+A5↓j
.text:000000000000BC68                 cmp     r12d, [rcx+rax*4]
.text:000000000000BC6C                 jz      short loc_BCB2
.text:000000000000BC6E
.text:000000000000BC6E loc_BC6E:                               ; CODE XREF: check_node_accept_bytes_isra_31+91↑j
.text:000000000000BC6E                 add     rax, 1
.text:000000000000BC72                 cmp     rax, rdx
.text:000000000000BC75                 jnz     short loc_BC68
.text:000000000000BC77
.text:000000000000BC77 loc_BC77:                               ; CODE XREF: check_node_accept_bytes_isra_31+84↑j
.text:000000000000BC77                 mov     rax, [r13+48h]
.text:000000000000BC7B                 test    rax, rax
.text:000000000000BC7E                 jle     loc_BD5C
.text:000000000000BC84                 xor     ebx, ebx
.text:000000000000BC86                 jmp     short loc_BC9E
.text:000000000000BC86 ; ---------------------------------------------------------------------------
.text:000000000000BC88                 align 10h
.text:000000000000BC90
.text:000000000000BC90 loc_BC90:                               ; CODE XREF: check_node_accept_bytes_isra_31+E0↓j
.text:000000000000BC90                 add     rbx, 1
.text:000000000000BC94                 cmp     rbx, [r13+48h]
.text:000000000000BC98                 jge     loc_BD58
.text:000000000000BC9E
.text:000000000000BC9E loc_BC9E:                               ; CODE XREF: check_node_accept_bytes_isra_31+B6↑j
.text:000000000000BC9E                 mov     rax, [r13+18h]
.text:000000000000BCA2                 mov     edi, r12d       ; wc
.text:000000000000BCA5                 mov     rsi, [rax+rbx*8] ; desc
.text:000000000000BCA9                 call    _iswctype
.text:000000000000BCAE                 test    eax, eax
.text:000000000000BCB0                 jz      short loc_BC90
.text:000000000000BCB2
.text:000000000000BCB2 loc_BCB2:                               ; CODE XREF: check_node_accept_bytes_isra_31+8D↑j
.text:000000000000BCB2                                         ; check_node_accept_bytes_isra_31+9C↑j ...
.text:000000000000BCB2                 test    byte ptr [r13+20h], 1
.text:000000000000BCB7                 jz      short loc_BCC2
.text:000000000000BCB9                 nop     dword ptr [rax+00000000h]
.text:000000000000BCC0
.text:000000000000BCC0 loc_BCC0:                               ; CODE XREF: check_node_accept_bytes_isra_31+28↑j
.text:000000000000BCC0                                         ; check_node_accept_bytes_isra_31+4F↑j ...
.text:000000000000BCC0                 xor     ebp, ebp
.text:000000000000BCC2
.text:000000000000BCC2 loc_BCC2:                               ; CODE XREF: check_node_accept_bytes_isra_31+E7↑j
.text:000000000000BCC2                                         ; check_node_accept_bytes_isra_31+10E↓j ...
.text:000000000000BCC2                 add     rsp, 8
.text:000000000000BCC6                 mov     eax, ebp
.text:000000000000BCC8                 pop     rbx
.text:000000000000BCC9                 pop     rbp
.text:000000000000BCCA                 pop     r12
.text:000000000000BCCC                 pop     r13
.text:000000000000BCCE                 retn
.text:000000000000BCCE ; ---------------------------------------------------------------------------
.text:000000000000BCCF                 align 10h
.text:000000000000BCD0
.text:000000000000BCD0 loc_BCD0:                               ; CODE XREF: check_node_accept_bytes_isra_31+45↑j
.text:000000000000BCD0                 cmp     eax, 1
.text:000000000000BCD3                 jle     short loc_BCC0
.text:000000000000BCD5                 mov     rax, [rbx]
.text:000000000000BCD8                 test    al, 40h
.text:000000000000BCDA                 jz      short loc_BCF0
.text:000000000000BCDC
.text:000000000000BCDC loc_BCDC:                               ; CODE XREF: check_node_accept_bytes_isra_31+129↓j
.text:000000000000BCDC                 test    al, 80h
.text:000000000000BCDE                 jz      short loc_BCC2
.text:000000000000BCE0                 mov     rax, [r10+8]
.text:000000000000BCE4                 cmp     byte ptr [rax+r8], 0
.text:000000000000BCE9                 jz      short loc_BCC0
.text:000000000000BCEB                 jmp     short loc_BCC2
.text:000000000000BCEB ; ---------------------------------------------------------------------------
.text:000000000000BCED                 align 10h
.text:000000000000BCF0
.text:000000000000BCF0 loc_BCF0:                               ; CODE XREF: check_node_accept_bytes_isra_31+10A↑j
.text:000000000000BCF0                 mov     rdx, [r10+8]
.text:000000000000BCF4                 cmp     byte ptr [rdx+r8], 0Ah
.text:000000000000BCF9                 jnz     short loc_BCDC
.text:000000000000BCFB                 jmp     short loc_BCC0
.text:000000000000BCFB ; ---------------------------------------------------------------------------
.text:000000000000BCFD                 align 20h
.text:000000000000BD00
.text:000000000000BD00 loc_BD00:                               ; CODE XREF: check_node_accept_bytes_isra_31+1B↑j
.text:000000000000BD00                 mov     rdx, [rcx+8]
.text:000000000000BD04                 lea     rsi, [rdx+r8]
.text:000000000000BD08                 movzx   eax, byte ptr [rsi]
.text:000000000000BD0B                 cmp     al, 0C1h
.text:000000000000BD0D                 jbe     short loc_BCC0
.text:000000000000BD0F                 mov     rcx, [rcx+58h]
.text:000000000000BD13                 lea     rdi, [r8+1]
.text:000000000000BD17                 cmp     rdi, rcx
.text:000000000000BD1A                 jge     short loc_BCC0
.text:000000000000BD1C                 cmp     al, 0DFh
.text:000000000000BD1E                 movzx   edx, byte ptr [rdx+r8+1]
.text:000000000000BD24                 ja      short loc_BD8E
.text:000000000000BD26                 add     edx, 0FFFFFF80h
.text:000000000000BD29                 mov     ebp, 2
.text:000000000000BD2E                 cmp     dl, 3Fh ; '?'
.text:000000000000BD31                 ja      short loc_BCC0
.text:000000000000BD33                 jmp     short loc_BCC2
.text:000000000000BD33 ; ---------------------------------------------------------------------------
.text:000000000000BD35                 align 8
.text:000000000000BD38
.text:000000000000BD38 loc_BD38:                               ; CODE XREF: check_node_accept_bytes_isra_31+73↑j
.text:000000000000BD38                 test    rdx, rdx
.text:000000000000BD3B                 jnz     loc_BC49
.text:000000000000BD41
.text:000000000000BD41 loc_BD41:                               ; CODE XREF: check_node_accept_bytes_isra_31+18F↓j
.text:000000000000BD41                                         ; check_node_accept_bytes_isra_31+1A7↓j
.text:000000000000BD41                 test    byte ptr [r13+20h], 1
.text:000000000000BD46                 jnz     loc_BCC2
.text:000000000000BD4C                 jmp     loc_BCC0
.text:000000000000BD4C ; ---------------------------------------------------------------------------
.text:000000000000BD51                 align 8
.text:000000000000BD58
.text:000000000000BD58 loc_BD58:                               ; CODE XREF: check_node_accept_bytes_isra_31+C8↑j
.text:000000000000BD58                 mov     rsi, [r13+40h]
.text:000000000000BD5C
.text:000000000000BD5C loc_BD5C:                               ; CODE XREF: check_node_accept_bytes_isra_31+AE↑j
.text:000000000000BD5C                 test    rsi, rsi
.text:000000000000BD5F                 jle     short loc_BD41
.text:000000000000BD61                 mov     rdx, [r13+8]
.text:000000000000BD65                 xor     eax, eax
.text:000000000000BD67                 jmp     short loc_BD79
.text:000000000000BD67 ; ---------------------------------------------------------------------------
.text:000000000000BD69                 align 10h
.text:000000000000BD70
.text:000000000000BD70 loc_BD70:                               ; CODE XREF: check_node_accept_bytes_isra_31+1AD↓j
.text:000000000000BD70                                         ; check_node_accept_bytes_isra_31+1B7↓j
.text:000000000000BD70                 add     rax, 1
.text:000000000000BD74                 cmp     rax, rsi
.text:000000000000BD77                 jz      short loc_BD41
.text:000000000000BD79
.text:000000000000BD79 loc_BD79:                               ; CODE XREF: check_node_accept_bytes_isra_31+197↑j
.text:000000000000BD79                 cmp     r12d, [rdx+rax*4]
.text:000000000000BD7D                 jl      short loc_BD70
.text:000000000000BD7F                 mov     rcx, [r13+10h]
.text:000000000000BD83                 cmp     r12d, [rcx+rax*4]
.text:000000000000BD87                 jg      short loc_BD70
.text:000000000000BD89                 jmp     loc_BCB2
.text:000000000000BD8E ; ---------------------------------------------------------------------------
.text:000000000000BD8E
.text:000000000000BD8E loc_BD8E:                               ; CODE XREF: check_node_accept_bytes_isra_31+154↑j
.text:000000000000BD8E                 cmp     al, 0EFh
.text:000000000000BD90                 ja      short loc_BDD8
.text:000000000000BD92                 cmp     al, 0E0h
.text:000000000000BD94                 jnz     short loc_BD9F
.text:000000000000BD96                 cmp     dl, 9Fh
.text:000000000000BD99                 jbe     loc_BCC0
.text:000000000000BD9F
.text:000000000000BD9F loc_BD9F:                               ; CODE XREF: check_node_accept_bytes_isra_31+1C4↑j
.text:000000000000BD9F                 mov     ebp, 3
.text:000000000000BDA4
.text:000000000000BDA4 loc_BDA4:                               ; CODE XREF: check_node_accept_bytes_isra_31+21E↓j
.text:000000000000BDA4                                         ; check_node_accept_bytes_isra_31+236↓j ...
.text:000000000000BDA4                 movsxd  rdi, ebp
.text:000000000000BDA7                 add     r8, rdi
.text:000000000000BDAA                 cmp     rcx, r8
.text:000000000000BDAD                 jl      loc_BCC0
.text:000000000000BDB3                 mov     eax, 1
.text:000000000000BDB8                 jmp     short loc_BDC7
.text:000000000000BDBA ; ---------------------------------------------------------------------------
.text:000000000000BDBA
.text:000000000000BDBA loc_BDBA:                               ; CODE XREF: check_node_accept_bytes_isra_31+201↓j
.text:000000000000BDBA                 add     rax, 1
.text:000000000000BDBE                 cmp     rdi, rax
.text:000000000000BDC1                 jle     loc_BCC2
.text:000000000000BDC7
.text:000000000000BDC7 loc_BDC7:                               ; CODE XREF: check_node_accept_bytes_isra_31+1E8↑j
.text:000000000000BDC7                 movzx   ebx, byte ptr [rsi+rax]
.text:000000000000BDCB                 lea     edx, [rbx-80h]
.text:000000000000BDCE                 cmp     dl, 3Fh ; '?'
.text:000000000000BDD1                 jbe     short loc_BDBA
.text:000000000000BDD3                 jmp     loc_BCC0
.text:000000000000BDD8 ; ---------------------------------------------------------------------------
.text:000000000000BDD8
.text:000000000000BDD8 loc_BDD8:                               ; CODE XREF: check_node_accept_bytes_isra_31+1C0↑j
.text:000000000000BDD8                 cmp     al, 0F7h
.text:000000000000BDDA                 ja      short loc_BDF0
.text:000000000000BDDC                 cmp     al, 0F0h
.text:000000000000BDDE                 jnz     short loc_BDE9
.text:000000000000BDE0                 cmp     dl, 8Fh
.text:000000000000BDE3                 jbe     loc_BCC0
.text:000000000000BDE9
.text:000000000000BDE9 loc_BDE9:                               ; CODE XREF: check_node_accept_bytes_isra_31+20E↑j
.text:000000000000BDE9                 mov     ebp, 4
.text:000000000000BDEE                 jmp     short loc_BDA4
.text:000000000000BDF0 ; ---------------------------------------------------------------------------
.text:000000000000BDF0
.text:000000000000BDF0 loc_BDF0:                               ; CODE XREF: check_node_accept_bytes_isra_31+20A↑j
.text:000000000000BDF0                 cmp     al, 0FBh
.text:000000000000BDF2                 ja      short loc_BE08
.text:000000000000BDF4                 cmp     al, 0F8h
.text:000000000000BDF6                 jnz     short loc_BE01
.text:000000000000BDF8                 cmp     dl, 87h
.text:000000000000BDFB                 jbe     loc_BCC0
.text:000000000000BE01
.text:000000000000BE01 loc_BE01:                               ; CODE XREF: check_node_accept_bytes_isra_31+226↑j
.text:000000000000BE01                 mov     ebp, 5
.text:000000000000BE06                 jmp     short loc_BDA4
.text:000000000000BE08 ; ---------------------------------------------------------------------------
.text:000000000000BE08
.text:000000000000BE08 loc_BE08:                               ; CODE XREF: check_node_accept_bytes_isra_31+222↑j
.text:000000000000BE08                 cmp     al, 0FDh
.text:000000000000BE0A                 ja      loc_BCC0
.text:000000000000BE10                 cmp     al, 0FCh
.text:000000000000BE12                 jnz     short loc_BE1D
.text:000000000000BE14                 cmp     dl, 83h
.text:000000000000BE17                 jbe     loc_BCC0
.text:000000000000BE1D
.text:000000000000BE1D loc_BE1D:                               ; CODE XREF: check_node_accept_bytes_isra_31+242↑j
.text:000000000000BE1D                 mov     ebp, 6
.text:000000000000BE22                 jmp     short loc_BDA4
.text:000000000000BE22 ; } // starts at BBD0
.text:000000000000BE22 check_node_accept_bytes_isra_31 endp
.text:000000000000BE22
.text:000000000000BE22 ; ---------------------------------------------------------------------------
.text:000000000000BE24                 align 10h
.text:000000000000BE30
.text:000000000000BE30 ; =============== S U B R O U T I N E =======================================
.text:000000000000BE30
.text:000000000000BE30
.text:000000000000BE30 check_arrival   proc near               ; CODE XREF: get_subexp_sub_isra_32+30↓p
.text:000000000000BE30                                         ; transit_state_bkref_isra_34+68B↓p
.text:000000000000BE30
.text:000000000000BE30 var_108         = qword ptr -108h
.text:000000000000BE30 var_100         = qword ptr -100h
.text:000000000000BE30 var_F8          = qword ptr -0F8h
.text:000000000000BE30 var_F0          = qword ptr -0F0h
.text:000000000000BE30 var_E8          = qword ptr -0E8h
.text:000000000000BE30 var_E0          = qword ptr -0E0h
.text:000000000000BE30 var_D8          = qword ptr -0D8h
.text:000000000000BE30 var_D0          = qword ptr -0D0h
.text:000000000000BE30 var_C8          = qword ptr -0C8h
.text:000000000000BE30 var_C0          = qword ptr -0C0h
.text:000000000000BE30 var_B8          = qword ptr -0B8h
.text:000000000000BE30 var_B0          = qword ptr -0B0h
.text:000000000000BE30 var_A8          = qword ptr -0A8h
.text:000000000000BE30 var_A0          = qword ptr -0A0h
.text:000000000000BE30 var_98          = qword ptr -98h
.text:000000000000BE30 var_90          = qword ptr -90h
.text:000000000000BE30 var_80          = dword ptr -80h
.text:000000000000BE30 var_7C          = dword ptr -7Ch
.text:000000000000BE30 var_78          = xmmword ptr -78h
.text:000000000000BE30 var_68          = qword ptr -68h
.text:000000000000BE30 var_58          = byte ptr -58h
.text:000000000000BE30 var_50          = qword ptr -50h
.text:000000000000BE30 ptr             = qword ptr -48h
.text:000000000000BE30 var_40          = qword ptr -40h
.text:000000000000BE30 arg_0           = dword ptr  8
.text:000000000000BE30
.text:000000000000BE30 ; __unwind {
.text:000000000000BE30                 push    r15
.text:000000000000BE32                 push    r14
.text:000000000000BE34                 mov     r15, rdi
.text:000000000000BE37                 push    r13
.text:000000000000BE39                 push    r12
.text:000000000000BE3B                 push    rbp
.text:000000000000BE3C                 push    rbx
.text:000000000000BE3D                 mov     rbp, rcx
.text:000000000000BE40                 mov     rbx, rdx
.text:000000000000BE43                 sub     rsp, 0D8h
.text:000000000000BE4A                 mov     rcx, [rdi+98h]
.text:000000000000BE51                 mov     r13, [rsi+8]
.text:000000000000BE55                 mov     rax, fs:28h
.text:000000000000BE5E                 mov     [rsp+108h+var_40], rax
.text:000000000000BE66                 xor     eax, eax
.text:000000000000BE68                 mov     rax, rdx
.text:000000000000BE6B                 mov     [rsp+108h+var_A8], rsi
.text:000000000000BE70                 mov     [rsp+108h+var_90], r8
.text:000000000000BE75                 shl     rax, 4
.text:000000000000BE79                 add     rax, [rcx]
.text:000000000000BE7C                 mov     [rsp+108h+var_C8], r9
.text:000000000000BE81                 mov     [rsp+108h+var_D8], rcx
.text:000000000000BE86                 mov     [rsp+108h+var_80], 0
.text:000000000000BE91                 mov     rax, [rax]
.text:000000000000BE94                 mov     [rsp+108h+var_C0], rax
.text:000000000000BE99                 movsxd  rax, dword ptr [rdi+0E0h]
.text:000000000000BEA0                 add     rax, r9
.text:000000000000BEA3                 cmp     rax, r13
.text:000000000000BEA6                 jge     loc_C4C6
.text:000000000000BEAC
.text:000000000000BEAC loc_BEAC:                               ; CODE XREF: check_arrival+6FB↓j
.text:000000000000BEAC                 mov     rax, [rsp+108h+var_A8]
.text:000000000000BEB1                 mov     rdx, [r15+0B8h]
.text:000000000000BEB8                 mov     rcx, [r15+48h]
.text:000000000000BEBC                 mov     r12, [rax]
.text:000000000000BEBF                 mov     r14, [rax+10h]
.text:000000000000BEC3                 mov     [rsp+108h+var_A0], rdx
.text:000000000000BEC8                 mov     [rsp+108h+var_98], rcx
.text:000000000000BECD                 mov     edx, [r15+0A0h]
.text:000000000000BED4                 test    r12, r12
.text:000000000000BED7                 mov     [r15+0B8h], r14
.text:000000000000BEDE                 jz      loc_C2C0
.text:000000000000BEE4                 lea     rsi, [r12-1]
.text:000000000000BEE9                 mov     [r15+48h], r12
.text:000000000000BEED                 mov     rdi, r15
.text:000000000000BEF0                 call    re_string_context_at
.text:000000000000BEF5                 cmp     r12, rbp
.text:000000000000BEF8                 mov     r13d, eax
.text:000000000000BEFB                 jz      loc_C2D3
.text:000000000000BF01                 mov     rbp, [r14+r12*8]
.text:000000000000BF05                 test    rbp, rbp
.text:000000000000BF08                 jz      short loc_BF14
.text:000000000000BF0A                 test    byte ptr [rbp+68h], 40h
.text:000000000000BF0E                 jnz     loc_C430
.text:000000000000BF14
.text:000000000000BF14 loc_BF14:                               ; CODE XREF: check_arrival+D8↑j
.text:000000000000BF14                 pxor    xmm0, xmm0
.text:000000000000BF18                 mov     [rsp+108h+var_68], 0
.text:000000000000BF24                 movaps  [rsp+108h+var_78], xmm0
.text:000000000000BF2C
.text:000000000000BF2C loc_BF2C:                               ; CODE XREF: check_arrival+627↓j
.text:000000000000BF2C                                         ; check_arrival+691↓j
.text:000000000000BF2C                 cmp     r12, [rsp+108h+var_C8]
.text:000000000000BF31                 jge     loc_C258
.text:000000000000BF37                 mov     ecx, [r15+0E0h]
.text:000000000000BF3E                 test    ecx, ecx
.text:000000000000BF40                 js      loc_C258
.text:000000000000BF46                 lea     rbx, [rsp+108h+var_78]
.text:000000000000BF4E                 lea     rax, ds:8[r12*8]
.text:000000000000BF56                 mov     [rsp+108h+var_108], r12
.text:000000000000BF5A                 mov     [rsp+108h+var_E8], 0
.text:000000000000BF63                 mov     [rsp+108h+var_100], rbx
.text:000000000000BF68                 lea     rbx, [rsp+108h+var_58]
.text:000000000000BF70                 mov     [rsp+108h+var_F8], rax
.text:000000000000BF75                 mov     rax, [r15+0B8h]
.text:000000000000BF7C                 mov     [rsp+108h+var_F0], rbx
.text:000000000000BF81                 lea     rbx, [rsp+108h+var_7C]
.text:000000000000BF89                 mov     [rsp+108h+var_B0], rbx
.text:000000000000BF8E
.text:000000000000BF8E loc_BF8E:                               ; CODE XREF: check_arrival+422↓j
.text:000000000000BF8E                 mov     rcx, [rsp+108h+var_F8]
.text:000000000000BF93                 mov     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000BF9F                 mov     rsi, [rax+rcx]
.text:000000000000BFA3                 test    rsi, rsi
.text:000000000000BFA6                 jz      loc_C368
.text:000000000000BFAC                 mov     rdi, [rsp+108h+var_100]
.text:000000000000BFB1                 add     rsi, 8
.text:000000000000BFB5                 call    re_node_set_merge
.text:000000000000BFBA                 test    eax, eax
.text:000000000000BFBC                 mov     [rsp+108h+var_80], eax
.text:000000000000BFC3                 jnz     loc_C3A0
.text:000000000000BFC9                 test    rbp, rbp
.text:000000000000BFCC                 jz      loc_C178
.text:000000000000BFD2
.text:000000000000BFD2 loc_BFD2:                               ; CODE XREF: check_arrival+53B↓j
.text:000000000000BFD2                 cmp     qword ptr [rbp+28h], 0
.text:000000000000BFD7                 mov     rax, [rsp+108h+var_F0]
.text:000000000000BFDC                 pxor    xmm0, xmm0
.text:000000000000BFE0                 mov     r12, [r15+98h]
.text:000000000000BFE7                 mov     [rsp+108h+var_7C], 0
.text:000000000000BFF2                 mov     qword ptr [rax+10h], 0
.text:000000000000BFFA                 movaps  xmmword ptr [rax], xmm0
.text:000000000000BFFD                 jle     loc_C530
.text:000000000000C003                 lea     rax, [r12+0D8h]
.text:000000000000C00B                 xor     ebx, ebx
.text:000000000000C00D                 mov     [rsp+108h+var_E0], rax
.text:000000000000C012                 jmp     short loc_C059
.text:000000000000C012 ; ---------------------------------------------------------------------------
.text:000000000000C014                 align 8
.text:000000000000C018
.text:000000000000C018 loc_C018:                               ; CODE XREF: check_arrival+244↓j
.text:000000000000C018                                         ; check_arrival+52F↓j
.text:000000000000C018                 mov     rdx, [rsp+108h+var_108]
.text:000000000000C01C                 mov     rdi, r15
.text:000000000000C01F                 call    check_node_accept
.text:000000000000C024                 test    al, al
.text:000000000000C026                 jz      short loc_C04B
.text:000000000000C028
.text:000000000000C028 loc_C028:                               ; CODE XREF: check_arrival+522↓j
.text:000000000000C028                 lea     r13, ds:0[r14*8]
.text:000000000000C030
.text:000000000000C030 loc_C030:                               ; CODE XREF: check_arrival+30B↓j
.text:000000000000C030                                         ; check_arrival+31A↓j
.text:000000000000C030                 mov     rax, [r12+18h]
.text:000000000000C035                 mov     rdi, [rsp+108h+var_100]
.text:000000000000C03A                 mov     rsi, [rax+r13]
.text:000000000000C03E                 call    re_node_set_insert
.text:000000000000C043                 test    al, al
.text:000000000000C045                 jz      loc_C388
.text:000000000000C04B
.text:000000000000C04B loc_C04B:                               ; CODE XREF: check_arrival+1F6↑j
.text:000000000000C04B                 add     rbx, 1
.text:000000000000C04F                 cmp     rbx, [rbp+28h]
.text:000000000000C053                 jge     loc_C3E0
.text:000000000000C059
.text:000000000000C059 loc_C059:                               ; CODE XREF: check_arrival+1E2↑j
.text:000000000000C059                 mov     rax, [rbp+30h]
.text:000000000000C05D                 mov     rdi, [r12]
.text:000000000000C061                 mov     r14, [rax+rbx*8]
.text:000000000000C065                 mov     r13, r14
.text:000000000000C068                 shl     r13, 4
.text:000000000000C06C                 lea     rsi, [rdi+r13]
.text:000000000000C070                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000C074                 jz      short loc_C018
.text:000000000000C076                 mov     r8, [rsp+108h+var_108]
.text:000000000000C07A                 mov     rsi, [rsp+108h+var_E0]
.text:000000000000C07F                 mov     rcx, r15
.text:000000000000C082                 mov     rdx, r14
.text:000000000000C085                 call    check_node_accept_bytes_isra_31
.text:000000000000C08A                 cmp     eax, 1
.text:000000000000C08D                 jle     loc_C350
.text:000000000000C093                 cdqe
.text:000000000000C095                 add     rax, [rsp+108h+var_108]
.text:000000000000C099                 mov     rdx, [r12+18h]
.text:000000000000C09E                 lea     r13, ds:0[r14*8]
.text:000000000000C0A6                 mov     rdx, [rdx+r14*8]
.text:000000000000C0AA                 mov     rcx, rax
.text:000000000000C0AD                 mov     [rsp+108h+var_D0], rax
.text:000000000000C0B2                 lea     r14, ds:0[rax*8]
.text:000000000000C0BA                 mov     rax, [r15+0B8h]
.text:000000000000C0C1                 mov     rsi, [rax+rcx*8]
.text:000000000000C0C5                 mov     [rsp+108h+var_50], 0
.text:000000000000C0D1                 test    rsi, rsi
.text:000000000000C0D4                 jz      short loc_C0F9
.text:000000000000C0D6                 mov     rdi, [rsp+108h+var_F0]
.text:000000000000C0DB                 add     rsi, 8
.text:000000000000C0DF                 mov     [rsp+108h+var_B8], rdx
.text:000000000000C0E4                 call    re_node_set_merge
.text:000000000000C0E9                 test    eax, eax
.text:000000000000C0EB                 mov     [rsp+108h+var_7C], eax
.text:000000000000C0F2                 mov     rdx, [rsp+108h+var_B8]
.text:000000000000C0F7                 jnz     short loc_C150
.text:000000000000C0F9
.text:000000000000C0F9 loc_C0F9:                               ; CODE XREF: check_arrival+2A4↑j
.text:000000000000C0F9                 mov     rdi, [rsp+108h+var_F0]
.text:000000000000C0FE                 mov     rsi, rdx
.text:000000000000C101                 call    re_node_set_insert
.text:000000000000C106                 test    al, al
.text:000000000000C108                 jz      loc_C388
.text:000000000000C10E                 add     r14, [r15+0B8h]
.text:000000000000C115                 mov     rdx, [rsp+108h+var_F0]
.text:000000000000C11A                 mov     rsi, r12
.text:000000000000C11D                 mov     rdi, [rsp+108h+var_B0]
.text:000000000000C122                 call    re_acquire_state
.text:000000000000C127                 mov     rdx, [rsp+108h+var_D0]
.text:000000000000C12C                 mov     [r14], rax
.text:000000000000C12F                 mov     rax, [r15+0B8h]
.text:000000000000C136                 cmp     qword ptr [rax+rdx*8], 0
.text:000000000000C13B                 jnz     loc_C030
.text:000000000000C141                 mov     edx, [rsp+108h+var_7C]
.text:000000000000C148                 test    edx, edx
.text:000000000000C14A                 jz      loc_C030
.text:000000000000C150
.text:000000000000C150 loc_C150:                               ; CODE XREF: check_arrival+2C7↑j
.text:000000000000C150                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000C158                 call    _free
.text:000000000000C15D                 mov     eax, [rsp+108h+var_7C]
.text:000000000000C164                 test    eax, eax
.text:000000000000C166                 mov     [rsp+108h+var_80], eax
.text:000000000000C16D                 jnz     loc_C3A0
.text:000000000000C173                 nop     dword ptr [rax+rax+00h]
.text:000000000000C178
.text:000000000000C178 loc_C178:                               ; CODE XREF: check_arrival+19C↑j
.text:000000000000C178                                         ; check_arrival+5C8↓j
.text:000000000000C178                 mov     rax, [rsp+108h+var_108]
.text:000000000000C17C                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000C185                 lea     rbx, [rax+1]
.text:000000000000C189                 mov     r12, rbx
.text:000000000000C18C                 jz      short loc_C1E4
.text:000000000000C18E                 mov     ecx, [rsp+108h+arg_0]
.text:000000000000C195                 mov     rdx, [rsp+108h+var_C0]
.text:000000000000C19A                 mov     rsi, [rsp+108h+var_100]
.text:000000000000C19F                 mov     rdi, [rsp+108h+var_D8]
.text:000000000000C1A4                 call    check_arrival_expand_ecl
.text:000000000000C1A9                 test    eax, eax
.text:000000000000C1AB                 mov     [rsp+108h+var_80], eax
.text:000000000000C1B2                 jnz     loc_C3A0
.text:000000000000C1B8                 mov     r8d, [rsp+108h+arg_0]
.text:000000000000C1C0                 mov     rcx, [rsp+108h+var_C0]
.text:000000000000C1C5                 mov     rdx, rbx
.text:000000000000C1C8                 mov     rsi, [rsp+108h+var_100]
.text:000000000000C1CD                 mov     rdi, r15
.text:000000000000C1D0                 call    expand_bkref_cache
.text:000000000000C1D5                 test    eax, eax
.text:000000000000C1D7                 mov     [rsp+108h+var_80], eax
.text:000000000000C1DE                 jnz     loc_C3A0
.text:000000000000C1E4
.text:000000000000C1E4 loc_C1E4:                               ; CODE XREF: check_arrival+35C↑j
.text:000000000000C1E4                                         ; check_arrival+54C↓j
.text:000000000000C1E4                 mov     edx, [r15+0A0h]
.text:000000000000C1EB                 mov     rsi, [rsp+108h+var_108]
.text:000000000000C1EF                 mov     rdi, r15
.text:000000000000C1F2                 call    re_string_context_at
.text:000000000000C1F7                 mov     rdx, [rsp+108h+var_100]
.text:000000000000C1FC                 mov     rsi, [rsp+108h+var_D8]
.text:000000000000C201                 lea     rdi, [rsp+108h+var_80]
.text:000000000000C209                 mov     ecx, eax
.text:000000000000C20B                 call    re_acquire_state_context
.text:000000000000C210                 test    rax, rax
.text:000000000000C213                 mov     rbp, rax
.text:000000000000C216                 jz      loc_C400
.text:000000000000C21C                 mov     rax, [r15+0B8h]
.text:000000000000C223                 mov     rdx, [rsp+108h+var_F8]
.text:000000000000C228                 mov     [rsp+108h+var_E8], 0
.text:000000000000C231                 mov     [rax+rdx], rbp
.text:000000000000C235
.text:000000000000C235 loc_C235:                               ; CODE XREF: check_arrival+5F5↓j
.text:000000000000C235                 cmp     [rsp+108h+var_C8], rbx
.text:000000000000C23A                 jle     short loc_C258
.text:000000000000C23C                 movsxd  rdx, dword ptr [r15+0E0h]
.text:000000000000C243                 add     [rsp+108h+var_F8], 8
.text:000000000000C249                 cmp     rdx, [rsp+108h+var_E8]
.text:000000000000C24E                 mov     [rsp+108h+var_108], rbx
.text:000000000000C252                 jge     loc_BF8E
.text:000000000000C258
.text:000000000000C258 loc_C258:                               ; CODE XREF: check_arrival+101↑j
.text:000000000000C258                                         ; check_arrival+110↑j ...
.text:000000000000C258                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:000000000000C260                 call    _free
.text:000000000000C265                 mov     rax, [r15+0B8h]
.text:000000000000C26C                 mov     rbx, [rsp+108h+var_C8]
.text:000000000000C271                 mov     rax, [rax+rbx*8]
.text:000000000000C275                 test    rax, rax
.text:000000000000C278                 jz      loc_C555
.text:000000000000C27E                 mov     rbx, [rsp+108h+var_A8]
.text:000000000000C283                 mov     rdx, [rsp+108h+var_90]
.text:000000000000C288                 lea     rsi, [rax+18h]
.text:000000000000C28C                 mov     [rbx], r12
.text:000000000000C28F                 mov     rbx, [rsp+108h+var_A0]
.text:000000000000C294                 mov     [r15+0B8h], rbx
.text:000000000000C29B                 mov     rbx, [rsp+108h+var_98]
.text:000000000000C2A0                 mov     [r15+48h], rbx
.text:000000000000C2A4                 mov     rdi, [rax+10h]
.text:000000000000C2A8                 call    re_node_set_contains_isra_3
.text:000000000000C2AD                 test    rax, rax
.text:000000000000C2B0                 setz    al
.text:000000000000C2B3                 movzx   eax, al
.text:000000000000C2B6                 jmp     loc_C3B4
.text:000000000000C2B6 ; ---------------------------------------------------------------------------
.text:000000000000C2BB                 align 20h
.text:000000000000C2C0
.text:000000000000C2C0 loc_C2C0:                               ; CODE XREF: check_arrival+AE↑j
.text:000000000000C2C0                 lea     rsi, [rbp-1]
.text:000000000000C2C4                 mov     [r15+48h], rbp
.text:000000000000C2C8                 mov     rdi, r15
.text:000000000000C2CB                 call    re_string_context_at
.text:000000000000C2D0                 mov     r13d, eax
.text:000000000000C2D3
.text:000000000000C2D3 loc_C2D3:                               ; CODE XREF: check_arrival+CB↑j
.text:000000000000C2D3                 mov     edi, 8          ; size
.text:000000000000C2D8                 mov     qword ptr [rsp+108h+var_78], 1
.text:000000000000C2E4                 mov     qword ptr [rsp+108h+var_78+8], 1
.text:000000000000C2F0                 call    _malloc
.text:000000000000C2F5                 test    rax, rax
.text:000000000000C2F8                 mov     [rsp+108h+var_68], rax
.text:000000000000C300                 jz      loc_C54B
.text:000000000000C306                 mov     [rax], rbx
.text:000000000000C309                 mov     ecx, [rsp+108h+arg_0]
.text:000000000000C310                 lea     rbx, [rsp+108h+var_78]
.text:000000000000C318                 mov     rdx, [rsp+108h+var_C0]
.text:000000000000C31D                 mov     rdi, [rsp+108h+var_D8]
.text:000000000000C322                 mov     r12, rbp
.text:000000000000C325                 mov     rsi, rbx
.text:000000000000C328                 mov     [rsp+108h+var_80], 0
.text:000000000000C333                 call    check_arrival_expand_ecl
.text:000000000000C338                 test    eax, eax
.text:000000000000C33A                 mov     [rsp+108h+var_80], eax
.text:000000000000C341                 jz      loc_C45D
.text:000000000000C347                 jmp     short loc_C3A0
.text:000000000000C347 ; ---------------------------------------------------------------------------
.text:000000000000C349                 align 10h
.text:000000000000C350
.text:000000000000C350 loc_C350:                               ; CODE XREF: check_arrival+25D↑j
.text:000000000000C350                 test    eax, eax
.text:000000000000C352                 jnz     loc_C028
.text:000000000000C358                 mov     rsi, [r12]
.text:000000000000C35C                 add     rsi, r13
.text:000000000000C35F                 jmp     loc_C018
.text:000000000000C35F ; ---------------------------------------------------------------------------
.text:000000000000C364                 align 8
.text:000000000000C368
.text:000000000000C368 loc_C368:                               ; CODE XREF: check_arrival+176↑j
.text:000000000000C368                 test    rbp, rbp
.text:000000000000C36B                 jnz     loc_BFD2
.text:000000000000C371                 mov     rax, [rsp+108h+var_108]
.text:000000000000C375                 lea     rbx, [rax+1]
.text:000000000000C379                 mov     r12, rbx
.text:000000000000C37C                 jmp     loc_C1E4
.text:000000000000C37C ; ---------------------------------------------------------------------------
.text:000000000000C381                 align 8
.text:000000000000C388
.text:000000000000C388 loc_C388:                               ; CODE XREF: check_arrival+215↑j
.text:000000000000C388                                         ; check_arrival+2D8↑j
.text:000000000000C388                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000C390                 call    _free
.text:000000000000C395                 mov     [rsp+108h+var_80], 0Ch
.text:000000000000C3A0
.text:000000000000C3A0 loc_C3A0:                               ; CODE XREF: check_arrival+193↑j
.text:000000000000C3A0                                         ; check_arrival+33D↑j ...
.text:000000000000C3A0                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:000000000000C3A8                 call    _free
.text:000000000000C3AD                 mov     eax, [rsp+108h+var_80]
.text:000000000000C3B4
.text:000000000000C3B4 loc_C3B4:                               ; CODE XREF: check_arrival+486↑j
.text:000000000000C3B4                                         ; check_arrival+61D↓j ...
.text:000000000000C3B4                 mov     rbx, [rsp+108h+var_40]
.text:000000000000C3BC                 xor     rbx, fs:28h
.text:000000000000C3C5                 jnz     loc_C57C
.text:000000000000C3CB                 add     rsp, 0D8h
.text:000000000000C3D2                 pop     rbx
.text:000000000000C3D3                 pop     rbp
.text:000000000000C3D4                 pop     r12
.text:000000000000C3D6                 pop     r13
.text:000000000000C3D8                 pop     r14
.text:000000000000C3DA                 pop     r15
.text:000000000000C3DC                 retn
.text:000000000000C3DC ; ---------------------------------------------------------------------------
.text:000000000000C3DD                 align 20h
.text:000000000000C3E0
.text:000000000000C3E0 loc_C3E0:                               ; CODE XREF: check_arrival+223↑j
.text:000000000000C3E0                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000C3E8
.text:000000000000C3E8 loc_C3E8:                               ; CODE XREF: check_arrival+702↓j
.text:000000000000C3E8                 call    _free
.text:000000000000C3ED                 mov     [rsp+108h+var_80], 0
.text:000000000000C3F8                 jmp     loc_C178
.text:000000000000C3F8 ; ---------------------------------------------------------------------------
.text:000000000000C3FD                 align 20h
.text:000000000000C400
.text:000000000000C400 loc_C400:                               ; CODE XREF: check_arrival+3E6↑j
.text:000000000000C400                 mov     eax, [rsp+108h+var_80]
.text:000000000000C407                 test    eax, eax
.text:000000000000C409                 jnz     short loc_C3A0
.text:000000000000C40B                 mov     rax, [r15+0B8h]
.text:000000000000C412                 mov     rdx, [rsp+108h+var_F8]
.text:000000000000C417                 add     [rsp+108h+var_E8], 1
.text:000000000000C41D                 mov     qword ptr [rax+rdx], 0
.text:000000000000C425                 jmp     loc_C235
.text:000000000000C425 ; ---------------------------------------------------------------------------
.text:000000000000C42A                 align 10h
.text:000000000000C430
.text:000000000000C430 loc_C430:                               ; CODE XREF: check_arrival+DE↑j
.text:000000000000C430                 lea     rbx, [rsp+108h+var_78]
.text:000000000000C438                 lea     rsi, [rbp+8]
.text:000000000000C43C                 mov     rdi, rbx
.text:000000000000C43F                 call    re_node_set_init_copy
.text:000000000000C444                 test    eax, eax
.text:000000000000C446                 mov     [rsp+108h+var_80], eax
.text:000000000000C44D                 jnz     loc_C3B4
.text:000000000000C453                 test    byte ptr [rbp+68h], 40h
.text:000000000000C457                 jz      loc_BF2C
.text:000000000000C45D
.text:000000000000C45D loc_C45D:                               ; CODE XREF: check_arrival+511↑j
.text:000000000000C45D                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000C466                 jz      short loc_C492
.text:000000000000C468                 mov     r8d, [rsp+108h+arg_0]
.text:000000000000C470                 mov     rcx, [rsp+108h+var_C0]
.text:000000000000C475                 mov     rdx, r12
.text:000000000000C478                 mov     rsi, rbx
.text:000000000000C47B                 mov     rdi, r15
.text:000000000000C47E                 call    expand_bkref_cache
.text:000000000000C483                 test    eax, eax
.text:000000000000C485                 mov     [rsp+108h+var_80], eax
.text:000000000000C48C                 jnz     loc_C3A0
.text:000000000000C492
.text:000000000000C492 loc_C492:                               ; CODE XREF: check_arrival+636↑j
.text:000000000000C492                 mov     rsi, [rsp+108h+var_D8]
.text:000000000000C497                 lea     rdi, [rsp+108h+var_80]
.text:000000000000C49F                 mov     ecx, r13d
.text:000000000000C4A2                 mov     rdx, rbx
.text:000000000000C4A5                 call    re_acquire_state_context
.text:000000000000C4AA                 test    rax, rax
.text:000000000000C4AD                 mov     rbp, rax
.text:000000000000C4B0                 jz      loc_C537
.text:000000000000C4B6
.text:000000000000C4B6 loc_C4B6:                               ; CODE XREF: check_arrival+710↓j
.text:000000000000C4B6                 mov     rax, [r15+0B8h]
.text:000000000000C4BD                 mov     [rax+r12*8], rbp
.text:000000000000C4C1                 jmp     loc_BF2C
.text:000000000000C4C6 ; ---------------------------------------------------------------------------
.text:000000000000C4C6
.text:000000000000C4C6 loc_C4C6:                               ; CODE XREF: check_arrival+76↑j
.text:000000000000C4C6                 lea     r12, [rax+1]
.text:000000000000C4CA                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:000000000000C4D4                 sub     rax, r13
.text:000000000000C4D7                 cmp     rax, r12
.text:000000000000C4DA                 jl      short loc_C54B
.text:000000000000C4DC                 lea     r14, [r13+r12+0]
.text:000000000000C4E1                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000000C4EB                 cmp     r14, rax
.text:000000000000C4EE                 ja      short loc_C54B
.text:000000000000C4F0                 mov     rax, [rsp+108h+var_A8]
.text:000000000000C4F5                 lea     rsi, ds:0[r14*8] ; size
.text:000000000000C4FD                 mov     rdi, [rax+10h]  ; ptr
.text:000000000000C501                 call    _realloc
.text:000000000000C506                 test    rax, rax
.text:000000000000C509                 jz      short loc_C54B
.text:000000000000C50B                 mov     rcx, [rsp+108h+var_A8]
.text:000000000000C510                 lea     rdx, ds:0[r12*8] ; n
.text:000000000000C518                 lea     rdi, [rax+r13*8] ; s
.text:000000000000C51C                 xor     esi, esi        ; c
.text:000000000000C51E                 mov     [rcx+10h], rax
.text:000000000000C522                 mov     [rcx+8], r14
.text:000000000000C526                 call    _memset
.text:000000000000C52B                 jmp     loc_BEAC
.text:000000000000C530 ; ---------------------------------------------------------------------------
.text:000000000000C530
.text:000000000000C530 loc_C530:                               ; CODE XREF: check_arrival+1CD↑j
.text:000000000000C530                 xor     edi, edi
.text:000000000000C532                 jmp     loc_C3E8
.text:000000000000C537 ; ---------------------------------------------------------------------------
.text:000000000000C537
.text:000000000000C537 loc_C537:                               ; CODE XREF: check_arrival+680↑j
.text:000000000000C537                 mov     esi, [rsp+108h+var_80]
.text:000000000000C53E                 test    esi, esi
.text:000000000000C540                 jz      loc_C4B6
.text:000000000000C546                 jmp     loc_C3A0
.text:000000000000C54B ; ---------------------------------------------------------------------------
.text:000000000000C54B
.text:000000000000C54B loc_C54B:                               ; CODE XREF: check_arrival+4D0↑j
.text:000000000000C54B                                         ; check_arrival+6AA↑j ...
.text:000000000000C54B                 mov     eax, 0Ch
.text:000000000000C550                 jmp     loc_C3B4
.text:000000000000C555 ; ---------------------------------------------------------------------------
.text:000000000000C555
.text:000000000000C555 loc_C555:                               ; CODE XREF: check_arrival+448↑j
.text:000000000000C555                 mov     rax, [rsp+108h+var_A8]
.text:000000000000C55A                 mov     [rax], r12
.text:000000000000C55D                 mov     rax, [rsp+108h+var_A0]
.text:000000000000C562                 mov     [r15+0B8h], rax
.text:000000000000C569                 mov     rax, [rsp+108h+var_98]
.text:000000000000C56E                 mov     [r15+48h], rax
.text:000000000000C572                 mov     eax, 1
.text:000000000000C577                 jmp     loc_C3B4
.text:000000000000C57C ; ---------------------------------------------------------------------------
.text:000000000000C57C
.text:000000000000C57C loc_C57C:                               ; CODE XREF: check_arrival+595↑j
.text:000000000000C57C                 call    ___stack_chk_fail
.text:000000000000C57C ; } // starts at BE30
.text:000000000000C57C check_arrival   endp
.text:000000000000C57C
.text:000000000000C57C ; ---------------------------------------------------------------------------
.text:000000000000C581                 align 10h
.text:000000000000C590
.text:000000000000C590 ; =============== S U B R O U T I N E =======================================
.text:000000000000C590
.text:000000000000C590 ; Attributes: bp-based frame
.text:000000000000C590
.text:000000000000C590 set_regs        proc near               ; CODE XREF: re_search_internal+1351↓p
.text:000000000000C590
.text:000000000000C590 var_D1          = byte ptr -0D1h
.text:000000000000C590 var_C9          = byte ptr -0C9h
.text:000000000000C590 var_C8          = qword ptr -0C8h
.text:000000000000C590 dest            = qword ptr -0C0h
.text:000000000000C590 n               = qword ptr -0B8h
.text:000000000000C590 var_B0          = qword ptr -0B0h
.text:000000000000C590 var_A8          = qword ptr -0A8h
.text:000000000000C590 var_A0          = qword ptr -0A0h
.text:000000000000C590 var_98          = qword ptr -98h
.text:000000000000C590 var_90          = qword ptr -90h
.text:000000000000C590 var_88          = qword ptr -88h
.text:000000000000C590 var_78          = qword ptr -78h
.text:000000000000C590 var_70          = xmmword ptr -70h
.text:000000000000C590 ptr             = qword ptr -60h
.text:000000000000C590 var_50          = qword ptr -50h
.text:000000000000C590 var_48          = qword ptr -48h
.text:000000000000C590 var_40          = qword ptr -40h
.text:000000000000C590 var_38          = qword ptr -38h
.text:000000000000C590
.text:000000000000C590 ; __unwind {
.text:000000000000C590                 push    rbp
.text:000000000000C591                 mov     rbp, rsp
.text:000000000000C594                 push    r15
.text:000000000000C596                 push    r14
.text:000000000000C598                 push    r13
.text:000000000000C59A                 push    r12
.text:000000000000C59C                 mov     r13, rcx
.text:000000000000C59F                 push    rbx
.text:000000000000C5A0                 mov     r12, rsi
.text:000000000000C5A3                 sub     rsp, 0B8h
.text:000000000000C5AA                 mov     [rbp+var_98], rdx
.text:000000000000C5B1                 mov     [rbp+var_50], 0
.text:000000000000C5B9                 mov     rax, fs:28h
.text:000000000000C5C2                 mov     [rbp+var_38], rax
.text:000000000000C5C6                 xor     eax, eax
.text:000000000000C5C8                 mov     rax, [rdi]
.text:000000000000C5CB                 test    r8b, r8b
.text:000000000000C5CE                 mov     [rbp+var_48], 2
.text:000000000000C5D6                 mov     [rbp+var_40], 0
.text:000000000000C5DE                 mov     [rbp+var_90], rax
.text:000000000000C5E5                 jz      loc_CD8D
.text:000000000000C5EB                 mov     edi, 60h ; '`'  ; size
.text:000000000000C5F0                 call    _malloc
.text:000000000000C5F5                 lea     rcx, [rbp+var_50]
.text:000000000000C5F9                 test    rax, rax
.text:000000000000C5FC                 mov     [rbp+var_40], rax
.text:000000000000C600                 mov     [rbp+var_88], rcx
.text:000000000000C607                 jz      loc_CD2C
.text:000000000000C60D
.text:000000000000C60D loc_C60D:                               ; CODE XREF: set_regs+808↓j
.text:000000000000C60D                 mov     rax, [rbp+var_90]
.text:000000000000C614                 pxor    xmm0, xmm0
.text:000000000000C618                 mov     [rbp+ptr], 0
.text:000000000000C620                 mov     rbx, [rax+90h]
.text:000000000000C627                 mov     rax, [rbp+var_98]
.text:000000000000C62E                 movaps  [rbp+var_70], xmm0
.text:000000000000C632                 shl     rax, 4
.text:000000000000C636                 cmp     rax, 0FBFh
.text:000000000000C63C                 mov     [rbp+n], rax
.text:000000000000C643                 ja      loc_CD36
.text:000000000000C649                 add     rax, 10h
.text:000000000000C64D                 mov     [rbp+var_C9], 0
.text:000000000000C654                 sub     rsp, rax
.text:000000000000C657                 lea     rax, [rsp+0E0h+var_D1]
.text:000000000000C65C                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000C660                 mov     [rbp+dest], rax
.text:000000000000C667
.text:000000000000C667 loc_C667:                               ; CODE XREF: set_regs+7C3↓j
.text:000000000000C667                 mov     rdx, [rbp+n]    ; n
.text:000000000000C66E                 mov     rdi, [rbp+dest] ; dest
.text:000000000000C675                 mov     rsi, r13        ; src
.text:000000000000C678                 call    _memcpy
.text:000000000000C67D                 lea     rax, [rbp+var_70]
.text:000000000000C681                 mov     rcx, [r13+0]
.text:000000000000C685                 mov     [rbp+var_A8], rax
.text:000000000000C68C                 add     rax, 10h
.text:000000000000C690                 mov     [rbp+var_78], rcx
.text:000000000000C694                 mov     [rbp+var_C8], rax
.text:000000000000C69B
.text:000000000000C69B loc_C69B:                               ; CODE XREF: set_regs+612↓j
.text:000000000000C69B                 lea     rax, [rbp+var_78]
.text:000000000000C69F                 mov     [rbp+var_B0], rax
.text:000000000000C6A6                 jmp     loc_C789
.text:000000000000C6A6 ; ---------------------------------------------------------------------------
.text:000000000000C6AB                 align 10h
.text:000000000000C6B0
.text:000000000000C6B0 loc_C6B0:                               ; CODE XREF: set_regs+224↓j
.text:000000000000C6B0                 cmp     esi, 9
.text:000000000000C6B3                 jz      loc_C8A0
.text:000000000000C6B9
.text:000000000000C6B9 loc_C6B9:                               ; CODE XREF: set_regs+238↓j
.text:000000000000C6B9                                         ; set_regs+254↓j ...
.text:000000000000C6B9                 cmp     rax, rcx
.text:000000000000C6BC                 jnz     short loc_C6CC
.text:000000000000C6BE                 cmp     [r12+0B0h], rbx
.text:000000000000C6C6                 jz      loc_CAA0
.text:000000000000C6CC
.text:000000000000C6CC loc_C6CC:                               ; CODE XREF: set_regs+12C↑j
.text:000000000000C6CC                                         ; set_regs+5C5↓j
.text:000000000000C6CC                 mov     r14, [r12+98h]
.text:000000000000C6D4                 mov     rdi, [r14]
.text:000000000000C6D7                 lea     rsi, [rdi+r9]
.text:000000000000C6DB                 movzx   eax, byte ptr [rsi+8]
.text:000000000000C6DF                 test    al, 8
.text:000000000000C6E1                 jnz     loc_C7F0
.text:000000000000C6E7                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000C6EB                 jnz     loc_C8F0
.text:000000000000C6F1                 cmp     al, 4
.text:000000000000C6F3                 jz      loc_C930
.text:000000000000C6F9                 mov     rcx, [rbp+var_78]
.text:000000000000C6FD
.text:000000000000C6FD loc_C6FD:                               ; CODE XREF: set_regs+39A↓j
.text:000000000000C6FD                                         ; set_regs+6A5↓j
.text:000000000000C6FD                 mov     rdx, rcx
.text:000000000000C700                 mov     rdi, r12
.text:000000000000C703                 mov     [rbp+var_A0], rcx
.text:000000000000C70A                 call    check_node_accept
.text:000000000000C70F                 test    al, al
.text:000000000000C711                 mov     rcx, [rbp+var_A0]
.text:000000000000C718                 jz      loc_CB68
.text:000000000000C71E                 mov     rax, [r14+18h]
.text:000000000000C722                 lea     rdx, [rcx+1]
.text:000000000000C726                 mov     rbx, [rax+r15*8]
.text:000000000000C72A
.text:000000000000C72A loc_C72A:                               ; CODE XREF: set_regs+431↓j
.text:000000000000C72A                 cmp     [rbp+var_88], 0
.text:000000000000C732                 mov     [rbp+var_78], rdx
.text:000000000000C736                 jz      short loc_C774
.text:000000000000C738                 cmp     rdx, [r12+0A8h]
.text:000000000000C740                 jg      loc_CB76
.text:000000000000C746                 mov     rax, [r12+0B8h]
.text:000000000000C74E                 mov     rax, [rax+rdx*8]
.text:000000000000C752                 test    rax, rax
.text:000000000000C755                 jz      loc_CB76
.text:000000000000C75B                 mov     rdi, [rax+10h]
.text:000000000000C75F                 lea     rsi, [rax+18h]
.text:000000000000C763                 mov     rdx, rbx
.text:000000000000C766                 call    re_node_set_contains_isra_3
.text:000000000000C76B                 test    rax, rax
.text:000000000000C76E                 jz      loc_CB76
.text:000000000000C774
.text:000000000000C774 loc_C774:                               ; CODE XREF: set_regs+1A6↑j
.text:000000000000C774                 mov     qword ptr [rbp+var_70+8], 0
.text:000000000000C77C
.text:000000000000C77C loc_C77C:                               ; CODE XREF: set_regs+304↓j
.text:000000000000C77C                                         ; set_regs+470↓j ...
.text:000000000000C77C                 test    rbx, rbx
.text:000000000000C77F                 js      loc_CB5A
.text:000000000000C785                 mov     rcx, [rbp+var_78]
.text:000000000000C789
.text:000000000000C789 loc_C789:                               ; CODE XREF: set_regs+116↑j
.text:000000000000C789                 mov     rax, [r13+8]
.text:000000000000C78D                 cmp     rax, rcx
.text:000000000000C790                 jl      loc_CC80
.text:000000000000C796                 mov     rdi, [rbp+var_90]
.text:000000000000C79D                 mov     r9, rbx
.text:000000000000C7A0                 mov     r15, rbx
.text:000000000000C7A3                 shl     r9, 4
.text:000000000000C7A7                 mov     rdx, [rdi]
.text:000000000000C7AA                 add     rdx, r9
.text:000000000000C7AD                 movzx   esi, byte ptr [rdx+8]
.text:000000000000C7B1                 cmp     esi, 8
.text:000000000000C7B4                 jnz     loc_C6B0
.text:000000000000C7BA                 mov     rdx, [rdx]
.text:000000000000C7BD                 add     rdx, 1
.text:000000000000C7C1                 cmp     [rbp+var_98], rdx
.text:000000000000C7C8                 jle     loc_C6B9
.text:000000000000C7CE                 shl     rdx, 4
.text:000000000000C7D2                 add     rdx, r13
.text:000000000000C7D5                 mov     qword ptr [rdx+8], 0FFFFFFFFFFFFFFFFh
.text:000000000000C7DD                 mov     [rdx], rcx
.text:000000000000C7E0                 mov     rax, [r13+8]
.text:000000000000C7E4                 jmp     loc_C6B9
.text:000000000000C7E4 ; ---------------------------------------------------------------------------
.text:000000000000C7E9                 align 10h
.text:000000000000C7F0
.text:000000000000C7F0 loc_C7F0:                               ; CODE XREF: set_regs+151↑j
.text:000000000000C7F0                 mov     rax, [r12+0B8h]
.text:000000000000C7F8                 mov     rdx, [rbp+var_78]
.text:000000000000C7FC                 mov     rsi, rbx
.text:000000000000C7FF                 mov     rdi, [rbp+var_A8]
.text:000000000000C806                 mov     r9, [rax+rdx*8]
.text:000000000000C80A                 mov     rax, [r14+28h]
.text:000000000000C80E                 lea     rdx, [rbx+rbx*2]
.text:000000000000C812                 mov     [rbp+var_A0], r9
.text:000000000000C819                 lea     r15, [rax+rdx*8]
.text:000000000000C81D                 call    re_node_set_insert
.text:000000000000C822                 test    al, al
.text:000000000000C824                 mov     r9, [rbp+var_A0]
.text:000000000000C82B                 jz      loc_CD08
.text:000000000000C831                 mov     r10, [r15+8]
.text:000000000000C835                 test    r10, r10
.text:000000000000C838                 jle     loc_CB68
.text:000000000000C83E                 mov     r15, [r15+10h]
.text:000000000000C842                 mov     r11, [r9+10h]
.text:000000000000C846                 lea     r14, [r9+18h]
.text:000000000000C84A                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C851                 xor     r9d, r9d
.text:000000000000C854                 mov     [rbp+var_A0], r12
.text:000000000000C85B                 nop     dword ptr [rax+rax+00h]
.text:000000000000C860
.text:000000000000C860 loc_C860:                               ; CODE XREF: set_regs+2FB↓j
.text:000000000000C860                 mov     r12, [r15+r9*8]
.text:000000000000C864                 mov     rsi, r14
.text:000000000000C867                 mov     rdi, r11
.text:000000000000C86A                 mov     rdx, r12
.text:000000000000C86D                 call    re_node_set_contains_isra_3
.text:000000000000C872                 test    rax, rax
.text:000000000000C875                 jz      short loc_C884
.text:000000000000C877                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C87B                 jnz     loc_C9D0
.text:000000000000C881                 mov     rbx, r12
.text:000000000000C884
.text:000000000000C884 loc_C884:                               ; CODE XREF: set_regs+2E5↑j
.text:000000000000C884                 add     r9, 1
.text:000000000000C888                 cmp     r10, r9
.text:000000000000C88B                 jnz     short loc_C860
.text:000000000000C88D                 mov     r12, [rbp+var_A0]
.text:000000000000C894                 jmp     loc_C77C
.text:000000000000C894 ; ---------------------------------------------------------------------------
.text:000000000000C899                 align 20h
.text:000000000000C8A0
.text:000000000000C8A0 loc_C8A0:                               ; CODE XREF: set_regs+123↑j
.text:000000000000C8A0                 mov     rdi, [rdx]
.text:000000000000C8A3                 lea     rsi, [rdi+1]
.text:000000000000C8A7                 cmp     [rbp+var_98], rsi
.text:000000000000C8AE                 jle     loc_C6B9
.text:000000000000C8B4                 shl     rsi, 4
.text:000000000000C8B8                 lea     rax, [r13+rsi+0]
.text:000000000000C8BD                 cmp     [rax], rcx
.text:000000000000C8C0                 jl      loc_CC40
.text:000000000000C8C6                 test    byte ptr [rdx+0Ah], 8
.text:000000000000C8CA                 jz      short loc_C8DE
.text:000000000000C8CC                 mov     rdi, [rbp+dest]
.text:000000000000C8D3                 cmp     qword ptr [rdi+rsi], 0FFFFFFFFFFFFFFFFh
.text:000000000000C8D8                 jnz     loc_CCCB
.text:000000000000C8DE
.text:000000000000C8DE loc_C8DE:                               ; CODE XREF: set_regs+33A↑j
.text:000000000000C8DE                 mov     [rax+8], rcx
.text:000000000000C8E2                 mov     rax, [r13+8]
.text:000000000000C8E6                 jmp     loc_C6B9
.text:000000000000C8E6 ; ---------------------------------------------------------------------------
.text:000000000000C8EB                 align 10h
.text:000000000000C8F0
.text:000000000000C8F0 loc_C8F0:                               ; CODE XREF: set_regs+15B↑j
.text:000000000000C8F0                 mov     r8, [rbp+var_78]
.text:000000000000C8F4                 lea     rsi, [r14+0D8h]
.text:000000000000C8FB                 mov     rcx, r12
.text:000000000000C8FE                 mov     rdx, rbx
.text:000000000000C901                 mov     [rbp+var_A0], r9
.text:000000000000C908                 call    check_node_accept_bytes_isra_31
.text:000000000000C90D                 movsxd  rcx, eax
.text:000000000000C910                 test    rcx, rcx
.text:000000000000C913                 jnz     loc_CB11
.text:000000000000C919                 mov     r9, [rbp+var_A0]
.text:000000000000C920                 mov     rsi, [r14]
.text:000000000000C923                 mov     rcx, [rbp+var_78]
.text:000000000000C927                 add     rsi, r9
.text:000000000000C92A                 jmp     loc_C6FD
.text:000000000000C92A ; ---------------------------------------------------------------------------
.text:000000000000C92F                 align 10h
.text:000000000000C930
.text:000000000000C930 loc_C930:                               ; CODE XREF: set_regs+163↑j
.text:000000000000C930                 mov     rax, [rsi]
.text:000000000000C933                 add     rax, 1
.text:000000000000C937                 shl     rax, 4
.text:000000000000C93B                 add     rax, r13
.text:000000000000C93E                 mov     rdx, [rax+8]
.text:000000000000C942                 mov     rdi, [rax]
.text:000000000000C945                 mov     rcx, rdx
.text:000000000000C948                 sub     rcx, rdi
.text:000000000000C94B                 cmp     [rbp+var_88], 0
.text:000000000000C953                 jz      loc_CB08
.text:000000000000C959                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000C95D                 jz      loc_CB76
.text:000000000000C963                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C967                 jz      loc_CB76
.text:000000000000C96D                 test    rcx, rcx
.text:000000000000C970                 jz      loc_CBC0
.text:000000000000C976                 mov     r15, [rbp+var_78]
.text:000000000000C97A                 mov     rdx, [r12+30h]
.text:000000000000C97F                 mov     rax, [r12+8]
.text:000000000000C984                 sub     rdx, r15
.text:000000000000C987                 cmp     rcx, rdx
.text:000000000000C98A                 jg      loc_CB76
.text:000000000000C990                 lea     rsi, [rax+r15]  ; s2
.text:000000000000C994                 add     rdi, rax        ; s1
.text:000000000000C997                 mov     rdx, rcx        ; n
.text:000000000000C99A                 mov     [rbp+var_A0], rcx
.text:000000000000C9A1                 call    _memcmp
.text:000000000000C9A6                 test    eax, eax
.text:000000000000C9A8                 mov     rcx, [rbp+var_A0]
.text:000000000000C9AF                 jnz     loc_CB76
.text:000000000000C9B5
.text:000000000000C9B5 loc_C9B5:                               ; CODE XREF: set_regs+585↓j
.text:000000000000C9B5                 mov     rax, [r14+18h]
.text:000000000000C9B9                 lea     rdx, [r15+rcx]
.text:000000000000C9BD                 mov     rbx, [rax+rbx*8]
.text:000000000000C9C1                 jmp     loc_C72A
.text:000000000000C9C1 ; ---------------------------------------------------------------------------
.text:000000000000C9C6                 align 10h
.text:000000000000C9D0
.text:000000000000C9D0 loc_C9D0:                               ; CODE XREF: set_regs+2EB↑j
.text:000000000000C9D0                 mov     rsi, [rbp+var_C8]
.text:000000000000C9D7                 mov     rdi, qword ptr [rbp+var_70+8]
.text:000000000000C9DB                 mov     rdx, rbx
.text:000000000000C9DE                 mov     r14, r12
.text:000000000000C9E1                 mov     r12, [rbp+var_A0]
.text:000000000000C9E8                 call    re_node_set_contains_isra_3
.text:000000000000C9ED                 test    rax, rax
.text:000000000000C9F0                 jnz     loc_CBB0
.text:000000000000C9F6                 mov     rcx, [rbp+var_88]
.text:000000000000C9FD                 test    rcx, rcx
.text:000000000000CA00                 jz      loc_C77C
.text:000000000000CA06                 mov     r15, [rcx]
.text:000000000000CA09                 mov     rdx, [rbp+var_78]
.text:000000000000CA0D                 lea     rax, [r15+1]
.text:000000000000CA11                 cmp     rax, [rcx+8]
.text:000000000000CA15                 mov     [rcx], rax
.text:000000000000CA18                 jz      loc_CD9D
.text:000000000000CA1E                 mov     rax, [rcx+10h]
.text:000000000000CA22
.text:000000000000CA22 loc_CA22:                               ; CODE XREF: set_regs+847↓j
.text:000000000000CA22                 lea     r15, [r15+r15*2]
.text:000000000000CA26                 shl     r15, 4
.text:000000000000CA2A                 add     r15, rax
.text:000000000000CA2D                 mov     [r15+8], r14
.text:000000000000CA31                 mov     r14, [rbp+n]
.text:000000000000CA38                 mov     [r15], rdx
.text:000000000000CA3B                 mov     rdi, r14        ; size
.text:000000000000CA3E                 call    _malloc
.text:000000000000CA43                 test    rax, rax
.text:000000000000CA46                 mov     [r15+10h], rax
.text:000000000000CA4A                 jz      short loc_CA72
.text:000000000000CA4C                 mov     rdx, r14        ; n
.text:000000000000CA4F                 mov     rsi, r13        ; src
.text:000000000000CA52                 mov     rdi, rax        ; dest
.text:000000000000CA55                 call    _memcpy
.text:000000000000CA5A                 mov     rsi, [rbp+var_A8]
.text:000000000000CA61                 lea     rdi, [r15+18h]
.text:000000000000CA65                 call    re_node_set_init_copy
.text:000000000000CA6A                 test    eax, eax
.text:000000000000CA6C                 jz      loc_C77C
.text:000000000000CA72
.text:000000000000CA72 loc_CA72:                               ; CODE XREF: set_regs+4BA↑j
.text:000000000000CA72                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000CA76                 call    _free
.text:000000000000CA7B                 cmp     [rbp+var_C9], 0
.text:000000000000CA82                 jnz     loc_CE1B
.text:000000000000CA88
.text:000000000000CA88 loc_CA88:                               ; CODE XREF: set_regs+796↓j
.text:000000000000CA88                                         ; set_regs+885↓j
.text:000000000000CA88                 mov     rdi, [rbp+var_88]
.text:000000000000CA8F                 call    free_fail_stack_return_part_24
.text:000000000000CA94                 mov     eax, 0Ch
.text:000000000000CA99                 jmp     loc_CCA9
.text:000000000000CA99 ; ---------------------------------------------------------------------------
.text:000000000000CA9E                 align 20h
.text:000000000000CAA0
.text:000000000000CAA0 loc_CAA0:                               ; CODE XREF: set_regs+136↑j
.text:000000000000CAA0                 cmp     [rbp+var_88], 0
.text:000000000000CAA8                 jz      loc_CDDC
.text:000000000000CAAE                 mov     rcx, [rbp+var_98]
.text:000000000000CAB5                 test    rcx, rcx
.text:000000000000CAB8                 jz      short loc_CADA
.text:000000000000CABA                 mov     rax, r13
.text:000000000000CABD                 xor     edx, edx
.text:000000000000CABF                 nop
.text:000000000000CAC0
.text:000000000000CAC0 loc_CAC0:                               ; CODE XREF: set_regs+548↓j
.text:000000000000CAC0                 cmp     qword ptr [rax], 0
.text:000000000000CAC4                 js      short loc_CACD
.text:000000000000CAC6                 cmp     qword ptr [rax+8], 0FFFFFFFFFFFFFFFFh
.text:000000000000CACB                 jz      short loc_CB20
.text:000000000000CACD
.text:000000000000CACD loc_CACD:                               ; CODE XREF: set_regs+534↑j
.text:000000000000CACD                 add     rdx, 1
.text:000000000000CAD1                 add     rax, 10h
.text:000000000000CAD5                 cmp     rcx, rdx
.text:000000000000CAD8                 jnz     short loc_CAC0
.text:000000000000CADA
.text:000000000000CADA loc_CADA:                               ; CODE XREF: set_regs+528↑j
.text:000000000000CADA                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000CADE                 call    _free
.text:000000000000CAE3                 cmp     [rbp+var_C9], 0
.text:000000000000CAEA                 jnz     loc_CE64
.text:000000000000CAF0
.text:000000000000CAF0 loc_CAF0:                               ; CODE XREF: set_regs+8E0↓j
.text:000000000000CAF0                 mov     rdi, [rbp+var_88]
.text:000000000000CAF7                 call    free_fail_stack_return_part_24
.text:000000000000CAFC                 xor     eax, eax
.text:000000000000CAFE                 jmp     loc_CCA9
.text:000000000000CAFE ; ---------------------------------------------------------------------------
.text:000000000000CB03                 align 8
.text:000000000000CB08
.text:000000000000CB08 loc_CB08:                               ; CODE XREF: set_regs+3C3↑j
.text:000000000000CB08                 test    rcx, rcx
.text:000000000000CB0B                 jz      loc_CBC0
.text:000000000000CB11
.text:000000000000CB11 loc_CB11:                               ; CODE XREF: set_regs+383↑j
.text:000000000000CB11                 mov     r15, [rbp+var_78]
.text:000000000000CB15                 jmp     loc_C9B5
.text:000000000000CB15 ; ---------------------------------------------------------------------------
.text:000000000000CB1A                 align 20h
.text:000000000000CB20
.text:000000000000CB20 loc_CB20:                               ; CODE XREF: set_regs+53B↑j
.text:000000000000CB20                 mov     rdi, [rbp+var_88]
.text:000000000000CB27                 mov     r9, [rbp+var_A8]
.text:000000000000CB2E                 mov     r8, r13
.text:000000000000CB31                 mov     rcx, [rbp+var_98]
.text:000000000000CB38                 mov     rdx, [rbp+var_B0]
.text:000000000000CB3F                 lea     rsi, [rdi+10h]
.text:000000000000CB43                 call    pop_fail_stack_isra_25
.text:000000000000CB48                 mov     r9, rax
.text:000000000000CB4B                 mov     rbx, rax
.text:000000000000CB4E                 mov     r15, rax
.text:000000000000CB51                 shl     r9, 4
.text:000000000000CB55                 jmp     loc_C6CC
.text:000000000000CB5A ; ---------------------------------------------------------------------------
.text:000000000000CB5A
.text:000000000000CB5A loc_CB5A:                               ; CODE XREF: set_regs+1EF↑j
.text:000000000000CB5A                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:000000000000CB5E                 jz      loc_CD08
.text:000000000000CB64                 nop     dword ptr [rax+00h]
.text:000000000000CB68
.text:000000000000CB68 loc_CB68:                               ; CODE XREF: set_regs+188↑j
.text:000000000000CB68                                         ; set_regs+2A8↑j
.text:000000000000CB68                 cmp     [rbp+var_88], 0
.text:000000000000CB70                 jz      loc_CE2C
.text:000000000000CB76
.text:000000000000CB76 loc_CB76:                               ; CODE XREF: set_regs+1B0↑j
.text:000000000000CB76                                         ; set_regs+1C5↑j ...
.text:000000000000CB76                 mov     rdi, [rbp+var_88]
.text:000000000000CB7D                 mov     rcx, [rbp+var_98]
.text:000000000000CB84                 lea     rdx, [rbp+var_78]
.text:000000000000CB88                 mov     r9, [rbp+var_A8]
.text:000000000000CB8F                 mov     r8, r13
.text:000000000000CB92                 lea     rsi, [rdi+10h]
.text:000000000000CB96                 call    pop_fail_stack_isra_25
.text:000000000000CB9B                 mov     rcx, [rbp+var_78]
.text:000000000000CB9F                 mov     rbx, rax
.text:000000000000CBA2                 jmp     loc_C69B
.text:000000000000CBA2 ; ---------------------------------------------------------------------------
.text:000000000000CBA7                 align 10h
.text:000000000000CBB0
.text:000000000000CBB0 loc_CBB0:                               ; CODE XREF: set_regs+460↑j
.text:000000000000CBB0                 mov     rbx, r14
.text:000000000000CBB3                 jmp     loc_C77C
.text:000000000000CBB3 ; ---------------------------------------------------------------------------
.text:000000000000CBB8                 align 20h
.text:000000000000CBC0
.text:000000000000CBC0 loc_CBC0:                               ; CODE XREF: set_regs+3E0↑j
.text:000000000000CBC0                                         ; set_regs+57B↑j
.text:000000000000CBC0                 mov     rdi, [rbp+var_A8]
.text:000000000000CBC7                 mov     rsi, rbx
.text:000000000000CBCA                 mov     [rbp+var_A0], r9
.text:000000000000CBD1                 call    re_node_set_insert
.text:000000000000CBD6                 test    al, al
.text:000000000000CBD8                 jz      loc_CD08
.text:000000000000CBDE                 mov     rdx, [r14+28h]
.text:000000000000CBE2                 lea     rax, [rbx+rbx*2]
.text:000000000000CBE6                 mov     rcx, [rbp+var_78]
.text:000000000000CBEA                 lea     rax, [rdx+rax*8]
.text:000000000000CBEE                 mov     [rbp-0D8h], rcx
.text:000000000000CBF5                 mov     rax, [rax+10h]
.text:000000000000CBF9                 mov     rbx, [rax]
.text:000000000000CBFC                 mov     rax, [r12+0B8h]
.text:000000000000CC04                 mov     rax, [rax+rcx*8]
.text:000000000000CC08                 mov     rdx, rbx
.text:000000000000CC0B                 mov     rdi, [rax+10h]
.text:000000000000CC0F                 lea     rsi, [rax+18h]
.text:000000000000CC13                 call    re_node_set_contains_isra_3
.text:000000000000CC18                 test    rax, rax
.text:000000000000CC1B                 jnz     loc_C77C
.text:000000000000CC21                 mov     r9, [rbp+var_A0]
.text:000000000000CC28                 mov     rsi, [r14]
.text:000000000000CC2B                 mov     rcx, [rbp-0D8h]
.text:000000000000CC32                 add     rsi, r9
.text:000000000000CC35                 jmp     loc_C6FD
.text:000000000000CC35 ; ---------------------------------------------------------------------------
.text:000000000000CC3A                 align 20h
.text:000000000000CC40
.text:000000000000CC40 loc_CC40:                               ; CODE XREF: set_regs+330↑j
.text:000000000000CC40                 mov     rdx, [rbp+n]    ; n
.text:000000000000CC47                 mov     rdi, [rbp+dest] ; dest
.text:000000000000CC4E                 mov     rsi, r13        ; src
.text:000000000000CC51                 mov     [rax+8], rcx
.text:000000000000CC55                 mov     [rbp-0D8h], r9
.text:000000000000CC5C                 mov     [rbp+var_A0], rcx
.text:000000000000CC63                 call    _memcpy
.text:000000000000CC68                 mov     rax, [r13+8]
.text:000000000000CC6C                 mov     rcx, [rbp+var_A0]
.text:000000000000CC73                 mov     r9, [rbp-0D8h]
.text:000000000000CC7A                 jmp     loc_C6B9
.text:000000000000CC7A ; ---------------------------------------------------------------------------
.text:000000000000CC7F                 align 20h
.text:000000000000CC80
.text:000000000000CC80 loc_CC80:                               ; CODE XREF: set_regs+200↑j
.text:000000000000CC80                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000CC84                 call    _free
.text:000000000000CC89                 cmp     [rbp+var_C9], 0
.text:000000000000CC90                 jnz     loc_CD6C
.text:000000000000CC96                 mov     rdi, [rbp+var_88]
.text:000000000000CC9D                 test    rdi, rdi
.text:000000000000CCA0                 jz      short loc_CCA7
.text:000000000000CCA2
.text:000000000000CCA2 loc_CCA2:                               ; CODE XREF: set_regs+7F2↓j
.text:000000000000CCA2                 call    free_fail_stack_return_part_24
.text:000000000000CCA7
.text:000000000000CCA7 loc_CCA7:                               ; CODE XREF: set_regs+710↑j
.text:000000000000CCA7                                         ; set_regs+7F8↓j ...
.text:000000000000CCA7                 xor     eax, eax
.text:000000000000CCA9
.text:000000000000CCA9 loc_CCA9:                               ; CODE XREF: set_regs+509↑j
.text:000000000000CCA9                                         ; set_regs+56E↑j ...
.text:000000000000CCA9                 mov     rbx, [rbp+var_38]
.text:000000000000CCAD                 xor     rbx, fs:28h
.text:000000000000CCB6                 jnz     loc_CE75
.text:000000000000CCBC                 lea     rsp, [rbp-28h]
.text:000000000000CCC0                 pop     rbx
.text:000000000000CCC1                 pop     r12
.text:000000000000CCC3                 pop     r13
.text:000000000000CCC5                 pop     r14
.text:000000000000CCC7                 pop     r15
.text:000000000000CCC9                 pop     rbp
.text:000000000000CCCA                 retn
.text:000000000000CCCB ; ---------------------------------------------------------------------------
.text:000000000000CCCB
.text:000000000000CCCB loc_CCCB:                               ; CODE XREF: set_regs+348↑j
.text:000000000000CCCB                 mov     rdx, [rbp+n]    ; n
.text:000000000000CCD2                 mov     rsi, rdi        ; src
.text:000000000000CCD5                 mov     rdi, r13        ; dest
.text:000000000000CCD8                 mov     [rbp-0D8h], rcx
.text:000000000000CCDF                 mov     [rbp+var_A0], r9
.text:000000000000CCE6                 call    _memcpy
.text:000000000000CCEB                 mov     rax, [r13+8]
.text:000000000000CCEF                 mov     r9, [rbp+var_A0]
.text:000000000000CCF6                 mov     rcx, [rbp-0D8h]
.text:000000000000CCFD                 jmp     loc_C6B9
.text:000000000000CCFD ; ---------------------------------------------------------------------------
.text:000000000000CD02                 align 8
.text:000000000000CD08
.text:000000000000CD08 loc_CD08:                               ; CODE XREF: set_regs+29B↑j
.text:000000000000CD08                                         ; set_regs+5CE↑j ...
.text:000000000000CD08                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000CD0C                 call    _free
.text:000000000000CD11                 cmp     [rbp+var_C9], 0
.text:000000000000CD18                 jnz     loc_CE1B
.text:000000000000CD1E
.text:000000000000CD1E loc_CD1E:                               ; CODE XREF: set_regs+897↓j
.text:000000000000CD1E                 cmp     [rbp+var_88], 0
.text:000000000000CD26                 jnz     loc_CA88
.text:000000000000CD2C
.text:000000000000CD2C loc_CD2C:                               ; CODE XREF: set_regs+77↑j
.text:000000000000CD2C                                         ; set_regs+7D3↓j ...
.text:000000000000CD2C                 mov     eax, 0Ch
.text:000000000000CD31                 jmp     loc_CCA9
.text:000000000000CD36 ; ---------------------------------------------------------------------------
.text:000000000000CD36
.text:000000000000CD36 loc_CD36:                               ; CODE XREF: set_regs+B3↑j
.text:000000000000CD36                 mov     rdi, [rbp+n]    ; size
.text:000000000000CD3D                 call    _malloc
.text:000000000000CD42                 test    rax, rax
.text:000000000000CD45                 mov     [rbp+dest], rax
.text:000000000000CD4C                 mov     [rbp+var_C9], 1
.text:000000000000CD53                 jnz     loc_C667
.text:000000000000CD59                 mov     rdi, [rbp+var_88]
.text:000000000000CD60                 test    rdi, rdi
.text:000000000000CD63                 jz      short loc_CD2C
.text:000000000000CD65                 call    free_fail_stack_return_part_24
.text:000000000000CD6A                 jmp     short loc_CD2C
.text:000000000000CD6C ; ---------------------------------------------------------------------------
.text:000000000000CD6C
.text:000000000000CD6C loc_CD6C:                               ; CODE XREF: set_regs+700↑j
.text:000000000000CD6C                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000CD73                 call    _free
.text:000000000000CD78                 mov     rdi, [rbp+var_88]
.text:000000000000CD7F                 test    rdi, rdi
.text:000000000000CD82                 jnz     loc_CCA2
.text:000000000000CD88                 jmp     loc_CCA7
.text:000000000000CD8D ; ---------------------------------------------------------------------------
.text:000000000000CD8D
.text:000000000000CD8D loc_CD8D:                               ; CODE XREF: set_regs+55↑j
.text:000000000000CD8D                 mov     [rbp+var_88], 0
.text:000000000000CD98                 jmp     loc_C60D
.text:000000000000CD9D ; ---------------------------------------------------------------------------
.text:000000000000CD9D
.text:000000000000CD9D loc_CD9D:                               ; CODE XREF: set_regs+488↑j
.text:000000000000CD9D                 lea     rsi, [rax+rax*2]
.text:000000000000CDA1                 mov     rax, [rbp+var_88]
.text:000000000000CDA8                 mov     [rbp+var_A0], rdx
.text:000000000000CDAF                 shl     rsi, 5          ; size
.text:000000000000CDB3                 mov     rdi, [rax+10h]  ; ptr
.text:000000000000CDB7                 call    _realloc
.text:000000000000CDBC                 test    rax, rax
.text:000000000000CDBF                 jz      short loc_CE05
.text:000000000000CDC1                 mov     rcx, [rbp+var_88]
.text:000000000000CDC8                 mov     rdx, [rbp+var_A0]
.text:000000000000CDCF                 shl     qword ptr [rcx+8], 1
.text:000000000000CDD3                 mov     [rcx+10h], rax
.text:000000000000CDD7                 jmp     loc_CA22
.text:000000000000CDDC ; ---------------------------------------------------------------------------
.text:000000000000CDDC
.text:000000000000CDDC loc_CDDC:                               ; CODE XREF: set_regs+518↑j
.text:000000000000CDDC                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000CDE0                 call    _free
.text:000000000000CDE5                 cmp     [rbp+var_C9], 0
.text:000000000000CDEC                 jz      loc_CCA7
.text:000000000000CDF2                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000CDF9                 call    _free
.text:000000000000CDFE                 xor     eax, eax
.text:000000000000CE00                 jmp     loc_CCA9
.text:000000000000CE05 ; ---------------------------------------------------------------------------
.text:000000000000CE05
.text:000000000000CE05 loc_CE05:                               ; CODE XREF: set_regs+82F↑j
.text:000000000000CE05                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000CE09                 call    _free
.text:000000000000CE0E                 cmp     [rbp+var_C9], 0
.text:000000000000CE15                 jz      loc_CA88
.text:000000000000CE1B
.text:000000000000CE1B loc_CE1B:                               ; CODE XREF: set_regs+4F2↑j
.text:000000000000CE1B                                         ; set_regs+788↑j
.text:000000000000CE1B                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000CE22                 call    _free
.text:000000000000CE27                 jmp     loc_CD1E
.text:000000000000CE2C ; ---------------------------------------------------------------------------
.text:000000000000CE2C
.text:000000000000CE2C loc_CE2C:                               ; CODE XREF: set_regs+5E0↑j
.text:000000000000CE2C                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000CE30                 call    _free
.text:000000000000CE35                 cmp     [rbp+var_C9], 0
.text:000000000000CE3C                 mov     eax, 1
.text:000000000000CE41                 jz      loc_CCA9
.text:000000000000CE47                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000CE4E                 mov     dword ptr [rbp+var_88], eax
.text:000000000000CE54                 call    _free
.text:000000000000CE59                 mov     eax, dword ptr [rbp+var_88]
.text:000000000000CE5F                 jmp     loc_CCA9
.text:000000000000CE64 ; ---------------------------------------------------------------------------
.text:000000000000CE64
.text:000000000000CE64 loc_CE64:                               ; CODE XREF: set_regs+55A↑j
.text:000000000000CE64                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000CE6B                 call    _free
.text:000000000000CE70                 jmp     loc_CAF0
.text:000000000000CE75 ; ---------------------------------------------------------------------------
.text:000000000000CE75
.text:000000000000CE75 loc_CE75:                               ; CODE XREF: set_regs+726↑j
.text:000000000000CE75                 call    ___stack_chk_fail
.text:000000000000CE75 ; } // starts at C590
.text:000000000000CE75 set_regs        endp
.text:000000000000CE75
.text:000000000000CE75 ; ---------------------------------------------------------------------------
.text:000000000000CE7A                 align 20h
.text:000000000000CE80
.text:000000000000CE80 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE80
.text:000000000000CE80
.text:000000000000CE80 get_subexp_sub_isra_32 proc near        ; CODE XREF: transit_state_bkref_isra_34+2C6↓p
.text:000000000000CE80                                         ; transit_state_bkref_isra_34+6FD↓p
.text:000000000000CE80
.text:000000000000CE80 var_40          = qword ptr -40h
.text:000000000000CE80
.text:000000000000CE80 ; __unwind {
.text:000000000000CE80                 push    r15
.text:000000000000CE82                 push    r14
.text:000000000000CE84                 mov     r14, rcx
.text:000000000000CE87                 push    r13
.text:000000000000CE89                 push    r12
.text:000000000000CE8B                 mov     r13, rsi
.text:000000000000CE8E                 push    rbp
.text:000000000000CE8F                 push    rbx
.text:000000000000CE90                 lea     rsi, [rdx+10h]
.text:000000000000CE94                 mov     rbp, rdx
.text:000000000000CE97                 mov     r9, r8
.text:000000000000CE9A                 mov     r12, r8
.text:000000000000CE9D                 sub     rsp, 20h
.text:000000000000CEA1                 mov     rcx, [rdx+8]
.text:000000000000CEA5                 mov     r8, r14
.text:000000000000CEA8                 push    8
.text:000000000000CEAA                 mov     rdx, [rdx]
.text:000000000000CEAD                 mov     rbx, rdi
.text:000000000000CEB0                 call    check_arrival
.text:000000000000CEB5                 test    eax, eax
.text:000000000000CEB7                 pop     rdx
.text:000000000000CEB8                 pop     rcx
.text:000000000000CEB9                 jz      short loc_CED0
.text:000000000000CEBB
.text:000000000000CEBB loc_CEBB:                               ; CODE XREF: get_subexp_sub_isra_32+191↓j
.text:000000000000CEBB                 add     rsp, 18h
.text:000000000000CEBF                 pop     rbx
.text:000000000000CEC0                 pop     rbp
.text:000000000000CEC1                 pop     r12
.text:000000000000CEC3                 pop     r13
.text:000000000000CEC5                 pop     r14
.text:000000000000CEC7                 pop     r15
.text:000000000000CEC9                 retn
.text:000000000000CEC9 ; ---------------------------------------------------------------------------
.text:000000000000CECA                 align 10h
.text:000000000000CED0
.text:000000000000CED0 loc_CED0:                               ; CODE XREF: get_subexp_sub_isra_32+39↑j
.text:000000000000CED0                 mov     rax, [rbx+0C8h]
.text:000000000000CED7                 mov     rdx, [rbx+0D0h]
.text:000000000000CEDE                 mov     r15, [rbp+8]
.text:000000000000CEE2                 mov     rcx, [r13+0]
.text:000000000000CEE6                 mov     rdi, [rbx+0D8h] ; ptr
.text:000000000000CEED                 cmp     rax, rdx
.text:000000000000CEF0                 mov     rsi, r15
.text:000000000000CEF3                 jge     loc_CF90
.text:000000000000CEF9
.text:000000000000CEF9 loc_CEF9:                               ; CODE XREF: get_subexp_sub_isra_32+17B↓j
.text:000000000000CEF9                 lea     rdx, [rax+rax*4]
.text:000000000000CEFD                 shl     rdx, 3
.text:000000000000CF01                 test    rax, rax
.text:000000000000CF04                 jle     short loc_CF11
.text:000000000000CF06                 lea     r8, [rdi+rdx-28h]
.text:000000000000CF0B                 cmp     r12, [r8+8]
.text:000000000000CF0F                 jz      short loc_CF80
.text:000000000000CF11
.text:000000000000CF11 loc_CF11:                               ; CODE XREF: get_subexp_sub_isra_32+84↑j
.text:000000000000CF11                                         ; get_subexp_sub_isra_32+105↓j
.text:000000000000CF11                 add     rdi, rdx
.text:000000000000CF14                 xor     edx, edx
.text:000000000000CF16                 cmp     r15, rcx
.text:000000000000CF19                 setz    dl
.text:000000000000CF1C                 add     rax, 1
.text:000000000000CF20                 mov     [rdi], r14
.text:000000000000CF23                 neg     edx
.text:000000000000CF25                 mov     [rdi+8], r12
.text:000000000000CF29                 mov     [rdi+10h], rcx
.text:000000000000CF2D                 mov     [rdi+22h], dx
.text:000000000000CF31                 mov     [rdi+18h], r15
.text:000000000000CF35                 mov     [rbx+0C8h], rax
.text:000000000000CF3C                 mov     byte ptr [rdi+20h], 0
.text:000000000000CF40                 mov     rax, r15
.text:000000000000CF43                 movsxd  rdx, dword ptr [rbx+0E0h]
.text:000000000000CF4A                 sub     rax, rcx
.text:000000000000CF4D                 cmp     rdx, rax
.text:000000000000CF50                 jge     short loc_CF5C
.text:000000000000CF52                 sub     r15d, ecx
.text:000000000000CF55                 mov     [rbx+0E0h], r15d
.text:000000000000CF5C
.text:000000000000CF5C loc_CF5C:                               ; CODE XREF: get_subexp_sub_isra_32+D0↑j
.text:000000000000CF5C                 add     rsi, r12
.text:000000000000CF5F                 sub     rsi, [r13+0]
.text:000000000000CF63                 add     rsp, 18h
.text:000000000000CF67                 mov     rdi, rbx
.text:000000000000CF6A                 pop     rbx
.text:000000000000CF6B                 pop     rbp
.text:000000000000CF6C                 pop     r12
.text:000000000000CF6E                 pop     r13
.text:000000000000CF70                 pop     r14
.text:000000000000CF72                 pop     r15
.text:000000000000CF74                 jmp     clean_state_log_if_needed
.text:000000000000CF74 ; ---------------------------------------------------------------------------
.text:000000000000CF79                 align 20h
.text:000000000000CF80
.text:000000000000CF80 loc_CF80:                               ; CODE XREF: get_subexp_sub_isra_32+8F↑j
.text:000000000000CF80                 mov     byte ptr [r8+20h], 1
.text:000000000000CF85                 jmp     short loc_CF11
.text:000000000000CF85 ; ---------------------------------------------------------------------------
.text:000000000000CF87                 align 10h
.text:000000000000CF90
.text:000000000000CF90 loc_CF90:                               ; CODE XREF: get_subexp_sub_isra_32+73↑j
.text:000000000000CF90                 lea     rsi, [rdx+rdx*4]
.text:000000000000CF94                 mov     [rsp+48h+var_40], rcx
.text:000000000000CF99                 shl     rsi, 4          ; size
.text:000000000000CF9D                 call    _realloc
.text:000000000000CFA2                 test    rax, rax
.text:000000000000CFA5                 mov     rcx, [rsp+48h+var_40]
.text:000000000000CFAA                 jz      short loc_D000
.text:000000000000CFAC                 mov     rsi, [rbx+0C8h]
.text:000000000000CFB3                 mov     rdx, [rbx+0D0h]
.text:000000000000CFBA                 mov     [rbx+0D8h], rax
.text:000000000000CFC1                 mov     [rsp+48h+var_40], rcx
.text:000000000000CFC6                 lea     rsi, [rsi+rsi*4]
.text:000000000000CFCA                 lea     rdx, [rdx+rdx*4]
.text:000000000000CFCE                 lea     rdi, [rax+rsi*8] ; s
.text:000000000000CFD2                 shl     rdx, 3          ; n
.text:000000000000CFD6                 xor     esi, esi        ; c
.text:000000000000CFD8                 call    _memset
.text:000000000000CFDD                 shl     qword ptr [rbx+0D0h], 1
.text:000000000000CFE4                 mov     rax, [rbx+0C8h]
.text:000000000000CFEB                 mov     rdi, [rbx+0D8h]
.text:000000000000CFF2                 mov     rsi, [rbp+8]
.text:000000000000CFF6                 mov     rcx, [rsp+48h+var_40]
.text:000000000000CFFB                 jmp     loc_CEF9
.text:000000000000D000 ; ---------------------------------------------------------------------------
.text:000000000000D000
.text:000000000000D000 loc_D000:                               ; CODE XREF: get_subexp_sub_isra_32+12A↑j
.text:000000000000D000                 mov     rdi, [rbx+0D8h] ; ptr
.text:000000000000D007                 call    _free
.text:000000000000D00C                 mov     eax, 0Ch
.text:000000000000D011                 jmp     loc_CEBB
.text:000000000000D011 ; } // starts at CE80
.text:000000000000D011 get_subexp_sub_isra_32 endp
.text:000000000000D011
.text:000000000000D011 ; ---------------------------------------------------------------------------
.text:000000000000D016                 align 20h
.text:000000000000D020
.text:000000000000D020 ; =============== S U B R O U T I N E =======================================
.text:000000000000D020
.text:000000000000D020
.text:000000000000D020 transit_state_bkref_isra_34 proc near   ; CODE XREF: transit_state_bkref_isra_34+82A↓p
.text:000000000000D020                                         ; merge_state_with_log+1C1↓p ...
.text:000000000000D020
.text:000000000000D020 var_E8          = qword ptr -0E8h
.text:000000000000D020 var_E0          = qword ptr -0E0h
.text:000000000000D020 var_D8          = qword ptr -0D8h
.text:000000000000D020 var_D0          = qword ptr -0D0h
.text:000000000000D020 var_C8          = qword ptr -0C8h
.text:000000000000D020 var_C0          = qword ptr -0C0h
.text:000000000000D020 var_B8          = qword ptr -0B8h
.text:000000000000D020 var_B0          = qword ptr -0B0h
.text:000000000000D020 var_A8          = qword ptr -0A8h
.text:000000000000D020 var_A0          = qword ptr -0A0h
.text:000000000000D020 var_98          = qword ptr -98h
.text:000000000000D020 var_90          = qword ptr -90h
.text:000000000000D020 var_88          = qword ptr -88h
.text:000000000000D020 var_80          = qword ptr -80h
.text:000000000000D020 var_78          = qword ptr -78h
.text:000000000000D020 var_70          = qword ptr -70h
.text:000000000000D020 var_5C          = byte ptr -5Ch
.text:000000000000D020 var_58          = byte ptr -58h
.text:000000000000D020 ptr             = qword ptr -48h
.text:000000000000D020 var_40          = qword ptr -40h
.text:000000000000D020
.text:000000000000D020 ; __unwind {
.text:000000000000D020                 push    r15
.text:000000000000D022                 push    r14
.text:000000000000D024                 push    r13
.text:000000000000D026                 push    r12
.text:000000000000D028                 push    rbp
.text:000000000000D029                 push    rbx
.text:000000000000D02A                 sub     rsp, 0B8h
.text:000000000000D031                 mov     r15, [rdi+48h]
.text:000000000000D035                 mov     rax, fs:28h
.text:000000000000D03E                 mov     [rsp+0E8h+var_40], rax
.text:000000000000D046                 xor     eax, eax
.text:000000000000D048                 cmp     qword ptr [rsi], 0
.text:000000000000D04C                 mov     rax, [rdi+98h]
.text:000000000000D053                 mov     [rsp+0E8h+var_A0], rsi
.text:000000000000D058                 mov     [rsp+0E8h+var_A8], rdx
.text:000000000000D05D                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000D062                 jle     loc_D390
.text:000000000000D068                 lea     rax, ds:0[r15*8]
.text:000000000000D070                 mov     r14, rdi
.text:000000000000D073                 mov     [rsp+0E8h+var_E8], 0
.text:000000000000D07B                 mov     [rsp+0E8h+var_E0], r15
.text:000000000000D080                 mov     [rsp+0E8h+var_88], rax
.text:000000000000D085                 lea     rax, [rsp+0E8h+var_58]
.text:000000000000D08D                 mov     [rsp+0E8h+var_80], rax
.text:000000000000D092                 lea     rax, [rsp+0E8h+var_5C]
.text:000000000000D09A                 mov     [rsp+0E8h+var_70], rax
.text:000000000000D09F                 jmp     short loc_D0E7
.text:000000000000D09F ; ---------------------------------------------------------------------------
.text:000000000000D0A1                 align 8
.text:000000000000D0A8
.text:000000000000D0A8 loc_D0A8:                               ; CODE XREF: transit_state_bkref_isra_34+11D↓j
.text:000000000000D0A8                 test    al, 1
.text:000000000000D0AA                 jz      short loc_D0D0
.text:000000000000D0AC                 and     edx, 8
.text:000000000000D0AF                 jnz     short loc_D0D0
.text:000000000000D0B1
.text:000000000000D0B1 loc_D0B1:                               ; CODE XREF: transit_state_bkref_isra_34+126↓j
.text:000000000000D0B1                                         ; transit_state_bkref_isra_34+12E↓j
.text:000000000000D0B1                 test    cl, 20h
.text:000000000000D0B4                 jz      short loc_D0BA
.text:000000000000D0B6                 test    al, 2
.text:000000000000D0B8                 jz      short loc_D0D0
.text:000000000000D0BA
.text:000000000000D0BA loc_D0BA:                               ; CODE XREF: transit_state_bkref_isra_34+94↑j
.text:000000000000D0BA                 and     ecx, 80h
.text:000000000000D0C0                 jz      loc_D160
.text:000000000000D0C6                 test    al, 8
.text:000000000000D0C8                 jnz     loc_D160
.text:000000000000D0CE                 xchg    ax, ax
.text:000000000000D0D0
.text:000000000000D0D0 loc_D0D0:                               ; CODE XREF: transit_state_bkref_isra_34+8A↑j
.text:000000000000D0D0                                         ; transit_state_bkref_isra_34+8F↑j ...
.text:000000000000D0D0                 mov     rdi, [rsp+0E8h+var_A0]
.text:000000000000D0D5                 add     [rsp+0E8h+var_E8], 1
.text:000000000000D0DA                 mov     rax, [rsp+0E8h+var_E8]
.text:000000000000D0DE                 cmp     rax, [rdi]
.text:000000000000D0E1                 jge     loc_D390
.text:000000000000D0E7
.text:000000000000D0E7 loc_D0E7:                               ; CODE XREF: transit_state_bkref_isra_34+7F↑j
.text:000000000000D0E7                 mov     rax, [rsp+0E8h+var_A8]
.text:000000000000D0EC                 mov     rdi, [rsp+0E8h+var_E8]
.text:000000000000D0F0                 mov     rax, [rax]
.text:000000000000D0F3                 mov     r13, [rax+rdi*8]
.text:000000000000D0F7                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000D0FC                 mov     rax, [rdi]
.text:000000000000D0FF                 mov     rbx, r13
.text:000000000000D102                 shl     rbx, 4
.text:000000000000D106                 add     rax, rbx
.text:000000000000D109                 cmp     byte ptr [rax+8], 4
.text:000000000000D10D                 jnz     short loc_D0D0
.text:000000000000D10F                 mov     ebp, [rax+8]
.text:000000000000D112                 test    ebp, 3FF00h
.text:000000000000D118                 jz      short loc_D160
.text:000000000000D11A                 mov     edx, [r14+0A0h]
.text:000000000000D121                 mov     rsi, [rsp+0E8h+var_E0]
.text:000000000000D126                 mov     rdi, r14
.text:000000000000D129                 call    re_string_context_at
.text:000000000000D12E                 mov     edx, ebp
.text:000000000000D130                 shr     edx, 8
.text:000000000000D133                 mov     ecx, edx
.text:000000000000D135                 and     cx, 3FFh
.text:000000000000D13A                 test    dl, 4
.text:000000000000D13D                 jnz     loc_D0A8
.text:000000000000D143                 and     edx, 8
.text:000000000000D146                 jz      loc_D0B1
.text:000000000000D14C                 test    al, 1
.text:000000000000D14E                 jz      loc_D0B1
.text:000000000000D154                 jmp     loc_D0D0
.text:000000000000D154 ; ---------------------------------------------------------------------------
.text:000000000000D159                 align 20h
.text:000000000000D160
.text:000000000000D160 loc_D160:                               ; CODE XREF: transit_state_bkref_isra_34+A0↑j
.text:000000000000D160                                         ; transit_state_bkref_isra_34+A8↑j ...
.text:000000000000D160                 mov     rdi, [r14+0C8h]
.text:000000000000D167                 mov     rax, [r14+98h]
.text:000000000000D16E                 xor     ecx, ecx
.text:000000000000D170                 mov     r10, [r14+8]
.text:000000000000D174                 mov     r9, [rsp+0E8h+var_E0]
.text:000000000000D179                 mov     [rsp+0E8h+var_78], rdi
.text:000000000000D17E                 mov     [rsp+0E8h+var_98], rax
.text:000000000000D183
.text:000000000000D183 loc_D183:                               ; CODE XREF: transit_state_bkref_isra_34+367↓j
.text:000000000000D183                 cmp     rcx, rdi
.text:000000000000D186                 jge     short loc_D1DB
.text:000000000000D188                 lea     rax, [rcx+rdi]
.text:000000000000D18C                 mov     r11, [r14+0D8h]
.text:000000000000D193                 mov     rsi, rax
.text:000000000000D196                 shr     rsi, 3Fh
.text:000000000000D19A                 add     rsi, rax
.text:000000000000D19D                 sar     rsi, 1
.text:000000000000D1A0                 lea     rax, [rsi+rsi*4]
.text:000000000000D1A4                 cmp     r9, [r11+rax*8+8]
.text:000000000000D1A9                 jle     short loc_D1D6
.text:000000000000D1AB                 jmp     loc_D378
.text:000000000000D1B0 ; ---------------------------------------------------------------------------
.text:000000000000D1B0
.text:000000000000D1B0 loc_D1B0:                               ; CODE XREF: transit_state_bkref_isra_34+1B9↓j
.text:000000000000D1B0                 lea     rdx, [rsi+rcx]
.text:000000000000D1B4                 mov     rax, rdx
.text:000000000000D1B7                 shr     rax, 3Fh
.text:000000000000D1BB                 add     rax, rdx
.text:000000000000D1BE                 sar     rax, 1
.text:000000000000D1C1                 lea     rdx, [rax+rax*4]
.text:000000000000D1C5                 mov     r8, rax
.text:000000000000D1C8                 cmp     r9, [r11+rdx*8+8]
.text:000000000000D1CD                 jg      loc_D380
.text:000000000000D1D3                 mov     rsi, rax
.text:000000000000D1D6
.text:000000000000D1D6 loc_D1D6:                               ; CODE XREF: transit_state_bkref_isra_34+189↑j
.text:000000000000D1D6                 cmp     rsi, rcx
.text:000000000000D1D9                 jg      short loc_D1B0
.text:000000000000D1DB
.text:000000000000D1DB loc_D1DB:                               ; CODE XREF: transit_state_bkref_isra_34+166↑j
.text:000000000000D1DB                 cmp     [rsp+0E8h+var_78], rcx
.text:000000000000D1E0                 jle     short loc_D206
.text:000000000000D1E2                 mov     rdx, [r14+0D8h]
.text:000000000000D1E9                 lea     rax, [rcx+rcx*4]
.text:000000000000D1ED                 mov     rdi, [rsp+0E8h+var_E0]
.text:000000000000D1F2                 lea     rax, [rdx+rax*8]
.text:000000000000D1F6                 cmp     [rax+8], rdi
.text:000000000000D1FA                 jnz     short loc_D206
.text:000000000000D1FC                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D200                 jnz     loc_D3D6
.text:000000000000D206
.text:000000000000D206 loc_D206:                               ; CODE XREF: transit_state_bkref_isra_34+1C0↑j
.text:000000000000D206                                         ; transit_state_bkref_isra_34+1DA↑j ...
.text:000000000000D206                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000D20B                 cmp     qword ptr [r14+0E8h], 0
.text:000000000000D213                 mov     rdx, [rax]
.text:000000000000D216                 mov     rax, [rdx+rbx]
.text:000000000000D21A                 mov     [rsp+0E8h+var_90], rax
.text:000000000000D21F                 jle     loc_D3DB
.text:000000000000D225                 mov     [rsp+0E8h+var_B8], r13
.text:000000000000D22A                 mov     [rsp+0E8h+var_C0], 0
.text:000000000000D233                 mov     r13, r10
.text:000000000000D236
.text:000000000000D236 loc_D236:                               ; CODE XREF: transit_state_bkref_isra_34+259↓j
.text:000000000000D236                 mov     rax, [r14+0F8h]
.text:000000000000D23D                 mov     rbx, [rsp+0E8h+var_C0]
.text:000000000000D242                 mov     rdi, [rsp+0E8h+var_90]
.text:000000000000D247                 mov     rbx, [rax+rbx*8]
.text:000000000000D24B                 mov     rax, [rbx+8]
.text:000000000000D24F                 shl     rax, 4
.text:000000000000D253                 cmp     rdi, [rdx+rax]
.text:000000000000D257                 jz      short loc_D280
.text:000000000000D259
.text:000000000000D259 loc_D259:                               ; CODE XREF: transit_state_bkref_isra_34+5A7↓j
.text:000000000000D259                                         ; transit_state_bkref_isra_34+725↓j ...
.text:000000000000D259                 add     [rsp+0E8h+var_C0], 1
.text:000000000000D25F                 mov     rax, [rsp+0E8h+var_C0]
.text:000000000000D264                 cmp     rax, [r14+0E8h]
.text:000000000000D26B                 jge     loc_D8E1
.text:000000000000D271                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000D276                 mov     rdx, [rax]
.text:000000000000D279                 jmp     short loc_D236
.text:000000000000D279 ; ---------------------------------------------------------------------------
.text:000000000000D27B                 align 20h
.text:000000000000D280
.text:000000000000D280 loc_D280:                               ; CODE XREF: transit_state_bkref_isra_34+237↑j
.text:000000000000D280                 cmp     qword ptr [rbx+20h], 0
.text:000000000000D285                 mov     r11, [rbx]
.text:000000000000D288                 jle     loc_D8F2
.text:000000000000D28E                 mov     rcx, [rsp+0E8h+var_E0]
.text:000000000000D293                 mov     r8, r13
.text:000000000000D296                 xor     ebp, ebp
.text:000000000000D298                 mov     r13, rbx
.text:000000000000D29B                 mov     rbx, rcx
.text:000000000000D29E                 jmp     short loc_D30C
.text:000000000000D2A0 ; ---------------------------------------------------------------------------
.text:000000000000D2A0
.text:000000000000D2A0 loc_D2A0:                               ; CODE XREF: transit_state_bkref_isra_34+30B↓j
.text:000000000000D2A0                                         ; transit_state_bkref_isra_34+34C↓j
.text:000000000000D2A0                 lea     rsi, [r8+r11]   ; s2
.text:000000000000D2A4                 lea     rdi, [r8+rbx]   ; s1
.text:000000000000D2A8                 mov     [rsp+0E8h+var_C8], r9
.text:000000000000D2AD                 mov     [rsp+0E8h+var_D0], r11
.text:000000000000D2B2                 mov     [rsp+0E8h+var_D8], r8
.text:000000000000D2B7                 call    _memcmp
.text:000000000000D2BC                 test    eax, eax
.text:000000000000D2BE                 mov     r8, [rsp+0E8h+var_D8]
.text:000000000000D2C3                 mov     r11, [rsp+0E8h+var_D0]
.text:000000000000D2C8                 mov     r9, [rsp+0E8h+var_C8]
.text:000000000000D2CD                 jnz     loc_D798
.text:000000000000D2D3
.text:000000000000D2D3 loc_D2D3:                               ; CODE XREF: transit_state_bkref_isra_34+305↓j
.text:000000000000D2D3                 mov     r8, [rsp+0E8h+var_E0]
.text:000000000000D2D8                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000000D2DD                 mov     rdx, r9
.text:000000000000D2E0                 mov     rsi, r13
.text:000000000000D2E3                 mov     rdi, r14
.text:000000000000D2E6                 call    get_subexp_sub_isra_32
.text:000000000000D2EB                 cmp     eax, 1
.text:000000000000D2EE                 mov     r8, [r14+8]
.text:000000000000D2F2                 ja      loc_D398
.text:000000000000D2F8                 add     rbp, 1
.text:000000000000D2FC                 cmp     rbp, [r13+20h]
.text:000000000000D300                 mov     r11, r15
.text:000000000000D303                 mov     rbx, r12
.text:000000000000D306                 jge     loc_D5B8
.text:000000000000D30C
.text:000000000000D30C loc_D30C:                               ; CODE XREF: transit_state_bkref_isra_34+27E↑j
.text:000000000000D30C                 mov     rax, [r13+28h]
.text:000000000000D310                 mov     r9, [rax+rbp*8]
.text:000000000000D314                 mov     r15, [r9+8]
.text:000000000000D318                 mov     rdx, r15
.text:000000000000D31B                 sub     rdx, r11        ; n
.text:000000000000D31E                 test    rdx, rdx
.text:000000000000D321                 lea     r12, [rdx+rbx]
.text:000000000000D325                 jle     short loc_D2D3
.text:000000000000D327                 cmp     [r14+30h], r12
.text:000000000000D32B                 jge     loc_D2A0
.text:000000000000D331                 cmp     [r14+58h], r12
.text:000000000000D335                 mov     [rsp+0E8h+var_D0], rdx
.text:000000000000D33A                 mov     [rsp+0E8h+var_D8], r9
.text:000000000000D33F                 jl      loc_D798
.text:000000000000D345                 mov     rsi, r12
.text:000000000000D348                 mov     rdi, r14
.text:000000000000D34B                 mov     [rsp+0E8h+var_C8], r11
.text:000000000000D350                 call    clean_state_log_if_needed
.text:000000000000D355                 test    eax, eax
.text:000000000000D357                 jnz     short loc_D398
.text:000000000000D359                 mov     r8, [r14+8]
.text:000000000000D35D                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000D362                 mov     r9, [rsp+0E8h+var_D8]
.text:000000000000D367                 mov     r11, [rsp+0E8h+var_C8]
.text:000000000000D36C                 jmp     loc_D2A0
.text:000000000000D36C ; ---------------------------------------------------------------------------
.text:000000000000D371                 align 8
.text:000000000000D378
.text:000000000000D378 loc_D378:                               ; CODE XREF: transit_state_bkref_isra_34+18B↑j
.text:000000000000D378                 mov     r8, rsi
.text:000000000000D37B                 mov     rsi, rdi
.text:000000000000D37E                 xchg    ax, ax
.text:000000000000D380
.text:000000000000D380 loc_D380:                               ; CODE XREF: transit_state_bkref_isra_34+1AD↑j
.text:000000000000D380                 lea     rcx, [r8+1]
.text:000000000000D384                 mov     rdi, rsi
.text:000000000000D387                 jmp     loc_D183
.text:000000000000D387 ; ---------------------------------------------------------------------------
.text:000000000000D38C                 align 10h
.text:000000000000D390
.text:000000000000D390 loc_D390:                               ; CODE XREF: transit_state_bkref_isra_34+42↑j
.text:000000000000D390                                         ; transit_state_bkref_isra_34+C1↑j
.text:000000000000D390                 xor     eax, eax
.text:000000000000D392                 nop     word ptr [rax+rax+00h]
.text:000000000000D398
.text:000000000000D398 loc_D398:                               ; CODE XREF: transit_state_bkref_isra_34+2D2↑j
.text:000000000000D398                                         ; transit_state_bkref_isra_34+337↑j ...
.text:000000000000D398                 mov     rbx, [rsp+0E8h+var_40]
.text:000000000000D3A0                 xor     rbx, fs:28h
.text:000000000000D3A9                 jnz     loc_D8FC
.text:000000000000D3AF                 add     rsp, 0B8h
.text:000000000000D3B6                 pop     rbx
.text:000000000000D3B7                 pop     rbp
.text:000000000000D3B8                 pop     r12
.text:000000000000D3BA                 pop     r13
.text:000000000000D3BC                 pop     r14
.text:000000000000D3BE                 pop     r15
.text:000000000000D3C0                 retn
.text:000000000000D3C0 ; ---------------------------------------------------------------------------
.text:000000000000D3C1                 align 8
.text:000000000000D3C8
.text:000000000000D3C8 loc_D3C8:                               ; CODE XREF: transit_state_bkref_isra_34+3B9↓j
.text:000000000000D3C8                 add     rax, 28h ; '('
.text:000000000000D3CC                 cmp     byte ptr [rax-8], 0
.text:000000000000D3D0                 jz      loc_D206
.text:000000000000D3D6
.text:000000000000D3D6 loc_D3D6:                               ; CODE XREF: transit_state_bkref_isra_34+1E0↑j
.text:000000000000D3D6                 cmp     r13, [rax]
.text:000000000000D3D9                 jnz     short loc_D3C8
.text:000000000000D3DB
.text:000000000000D3DB loc_D3DB:                               ; CODE XREF: transit_state_bkref_isra_34+1FF↑j
.text:000000000000D3DB                 mov     rax, [rsp+0E8h+var_78]
.text:000000000000D3E0
.text:000000000000D3E0 loc_D3E0:                               ; CODE XREF: transit_state_bkref_isra_34+8CD↓j
.text:000000000000D3E0                 cmp     [rsp+0E8h+var_78], rax
.text:000000000000D3E5                 mov     dword ptr [rsp+0E8h+var_5C], 0
.text:000000000000D3F0                 jge     loc_D0D0
.text:000000000000D3F6                 lea     rax, ds:0[r13*8]
.text:000000000000D3FE                 mov     r12, [rsp+0E8h+var_78]
.text:000000000000D403                 mov     rbp, [rsp+0E8h+var_B0]
.text:000000000000D408                 mov     [rsp+0E8h+var_98], rax
.text:000000000000D40D                 lea     rax, [r13+r13*2+0]
.text:000000000000D412                 lea     r8, [r12+r12*4]
.text:000000000000D416                 shl     rax, 3
.text:000000000000D41A                 mov     [rsp+0E8h+var_90], rax
.text:000000000000D41F                 lea     r15, ds:0[r8*8]
.text:000000000000D427                 jmp     loc_D55D
.text:000000000000D427 ; ---------------------------------------------------------------------------
.text:000000000000D42C                 align 10h
.text:000000000000D430
.text:000000000000D430 loc_D430:                               ; CODE XREF: transit_state_bkref_isra_34+56E↓j
.text:000000000000D430                 mov     rcx, [rbp+28h]
.text:000000000000D434                 mov     rdi, [rsp+0E8h+var_90]
.text:000000000000D439                 mov     rcx, [rcx+rdi+10h]
.text:000000000000D43E                 mov     rcx, [rcx]
.text:000000000000D441                 lea     rcx, [rcx+rcx*2]
.text:000000000000D445                 lea     rcx, [rdx+rcx*8]
.text:000000000000D449                 mov     [rsp+0E8h+var_D0], rcx
.text:000000000000D44E
.text:000000000000D44E loc_D44E:                               ; CODE XREF: transit_state_bkref_isra_34+58E↓j
.text:000000000000D44E                 add     rbx, [rsp+0E8h+var_E0]
.text:000000000000D453                 mov     edx, [r14+0A0h]
.text:000000000000D45A                 mov     rdi, r14
.text:000000000000D45D                 sub     rbx, rax
.text:000000000000D460                 lea     rsi, [rbx-1]
.text:000000000000D464                 call    re_string_context_at
.text:000000000000D469                 mov     rsi, [rsp+0E8h+var_88]
.text:000000000000D46E                 mov     ecx, eax
.text:000000000000D470                 mov     rax, [r14+0B8h]
.text:000000000000D477                 lea     r10, ds:0[rbx*8]
.text:000000000000D47F                 mov     [rsp+0E8h+var_D8], 0
.text:000000000000D488                 lea     r11, [rax+r10]
.text:000000000000D48C                 mov     rax, [rax+rsi]
.text:000000000000D490                 mov     rdx, [r11]
.text:000000000000D493                 test    rax, rax
.text:000000000000D496                 jz      short loc_D4A1
.text:000000000000D498                 mov     rax, [rax+10h]
.text:000000000000D49C                 mov     [rsp+0E8h+var_D8], rax
.text:000000000000D4A1
.text:000000000000D4A1 loc_D4A1:                               ; CODE XREF: transit_state_bkref_isra_34+476↑j
.text:000000000000D4A1                 test    rdx, rdx
.text:000000000000D4A4                 jz      loc_D7C0
.text:000000000000D4AA                 mov     rsi, [rdx+50h]
.text:000000000000D4AE                 mov     rdi, [rsp+0E8h+var_80]
.text:000000000000D4B3                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000D4B8                 mov     [rsp+0E8h+var_B8], r10
.text:000000000000D4BD                 mov     dword ptr [rsp+0E8h+var_C0], ecx
.text:000000000000D4C1                 call    re_node_set_init_union
.text:000000000000D4C6                 test    eax, eax
.text:000000000000D4C8                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000D4CF                 mov     ecx, dword ptr [rsp+0E8h+var_C0]
.text:000000000000D4D3                 mov     r10, [rsp+0E8h+var_B8]
.text:000000000000D4D8                 jnz     loc_D868
.text:000000000000D4DE                 add     r10, [r14+0B8h]
.text:000000000000D4E5                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000000D4EA                 mov     rsi, rbp
.text:000000000000D4ED                 mov     rdi, [rsp+0E8h+var_70]
.text:000000000000D4F2                 mov     [rsp+0E8h+var_C0], r10
.text:000000000000D4F7                 call    re_acquire_state_context
.text:000000000000D4FC                 mov     r10, [rsp+0E8h+var_C0]
.text:000000000000D501                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:000000000000D509                 mov     [r10], rax
.text:000000000000D50C                 call    _free
.text:000000000000D511                 mov     rdx, [r14+0B8h]
.text:000000000000D518                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000000D51D                 jz      loc_D7F1
.text:000000000000D523
.text:000000000000D523 loc_D523:                               ; CODE XREF: transit_state_bkref_isra_34+7CB↓j
.text:000000000000D523                                         ; transit_state_bkref_isra_34+7DA↓j
.text:000000000000D523                 cmp     [rsp+0E8h+var_C8], 0
.text:000000000000D529                 jnz     short loc_D548
.text:000000000000D52B                 mov     rax, [rsp+0E8h+var_88]
.text:000000000000D530                 mov     rbx, [rsp+0E8h+var_D8]
.text:000000000000D535                 mov     rax, [rdx+rax]
.text:000000000000D539                 cmp     [rax+10h], rbx
.text:000000000000D53D                 jg      loc_D808
.text:000000000000D543                 nop     dword ptr [rax+rax+00h]
.text:000000000000D548
.text:000000000000D548 loc_D548:                               ; CODE XREF: transit_state_bkref_isra_34+509↑j
.text:000000000000D548                                         ; transit_state_bkref_isra_34+54A↓j ...
.text:000000000000D548                 add     r12, 1
.text:000000000000D54C                 add     r15, 28h ; '('
.text:000000000000D550                 cmp     r12, [r14+0C8h]
.text:000000000000D557                 jge     loc_D0D0
.text:000000000000D55D
.text:000000000000D55D loc_D55D:                               ; CODE XREF: transit_state_bkref_isra_34+407↑j
.text:000000000000D55D                 mov     rax, [r14+0D8h]
.text:000000000000D564                 add     rax, r15
.text:000000000000D567                 cmp     r13, [rax]
.text:000000000000D56A                 jnz     short loc_D548
.text:000000000000D56C                 mov     rdi, [rsp+0E8h+var_E0]
.text:000000000000D571                 cmp     rdi, [rax+8]
.text:000000000000D575                 jnz     short loc_D548
.text:000000000000D577                 mov     rbx, [rax+18h]
.text:000000000000D57B                 mov     rax, [rax+10h]
.text:000000000000D57F                 mov     rdx, [rbp+30h]
.text:000000000000D583                 mov     rcx, rbx
.text:000000000000D586                 sub     rcx, rax
.text:000000000000D589                 mov     [rsp+0E8h+var_C8], rcx
.text:000000000000D58E                 jz      loc_D430
.text:000000000000D594                 mov     rcx, [rbp+18h]
.text:000000000000D598                 mov     rdi, [rsp+0E8h+var_98]
.text:000000000000D59D                 mov     rcx, [rcx+rdi]
.text:000000000000D5A1                 lea     rcx, [rcx+rcx*2]
.text:000000000000D5A5                 lea     rcx, [rdx+rcx*8]
.text:000000000000D5A9                 mov     [rsp+0E8h+var_D0], rcx
.text:000000000000D5AE                 jmp     loc_D44E
.text:000000000000D5AE ; ---------------------------------------------------------------------------
.text:000000000000D5B3                 align 8
.text:000000000000D5B8
.text:000000000000D5B8 loc_D5B8:                               ; CODE XREF: transit_state_bkref_isra_34+2E6↑j
.text:000000000000D5B8                 mov     rbx, r13
.text:000000000000D5BB                 mov     r13, r8
.text:000000000000D5BE
.text:000000000000D5BE loc_D5BE:                               ; CODE XREF: transit_state_bkref_isra_34+79A↓j
.text:000000000000D5BE                 lea     r11, [r15+1]
.text:000000000000D5C2
.text:000000000000D5C2 loc_D5C2:                               ; CODE XREF: transit_state_bkref_isra_34+791↓j
.text:000000000000D5C2                                         ; transit_state_bkref_isra_34+8D7↓j
.text:000000000000D5C2                 cmp     [rsp+0E8h+var_E0], r11
.text:000000000000D5C7                 jl      loc_D259
.text:000000000000D5CD                 mov     rax, r12
.text:000000000000D5D0                 lea     r15, ds:0[r11*8]
.text:000000000000D5D8                 mov     r12, rbx
.text:000000000000D5DB                 mov     rbx, r11
.text:000000000000D5DE                 mov     r11, r13
.text:000000000000D5E1                 mov     r13, rax
.text:000000000000D5E4                 nop     dword ptr [rax+00h]
.text:000000000000D5E8
.text:000000000000D5E8 loc_D5E8:                               ; CODE XREF: transit_state_bkref_isra_34+71C↓j
.text:000000000000D5E8                 mov     rax, rbx
.text:000000000000D5EB                 sub     rax, [r12]
.text:000000000000D5EF                 test    rax, rax
.text:000000000000D5F2                 jle     short loc_D615
.text:000000000000D5F4                 cmp     [r14+30h], r13
.text:000000000000D5F8                 jle     loc_D881
.text:000000000000D5FE
.text:000000000000D5FE loc_D5FE:                               ; CODE XREF: transit_state_bkref_isra_34+883↓j
.text:000000000000D5FE                 movzx   ecx, byte ptr [r11+rbx-1]
.text:000000000000D604                 lea     rax, [r13+1]
.text:000000000000D608                 cmp     [r11+r13], cl
.text:000000000000D60C                 jnz     loc_D742
.text:000000000000D612                 mov     r13, rax
.text:000000000000D615
.text:000000000000D615 loc_D615:                               ; CODE XREF: transit_state_bkref_isra_34+5D2↑j
.text:000000000000D615                 mov     rax, [r14+0B8h]
.text:000000000000D61C                 mov     rax, [rax+r15]
.text:000000000000D620                 test    rax, rax
.text:000000000000D623                 jz      loc_D72F
.text:000000000000D629                 mov     rcx, [rax+10h]
.text:000000000000D62D                 test    rcx, rcx
.text:000000000000D630                 jle     loc_D72F
.text:000000000000D636                 mov     rdi, [rax+18h]
.text:000000000000D63A                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000D63F                 xor     edx, edx
.text:000000000000D641                 mov     r8, [rsp+0E8h+var_90]
.text:000000000000D646                 mov     rsi, [rax]
.text:000000000000D649                 jmp     short loc_D65D
.text:000000000000D649 ; ---------------------------------------------------------------------------
.text:000000000000D64B                 align 10h
.text:000000000000D650
.text:000000000000D650 loc_D650:                               ; CODE XREF: transit_state_bkref_isra_34+64F↓j
.text:000000000000D650                                         ; transit_state_bkref_isra_34+654↓j
.text:000000000000D650                 add     rdx, 1
.text:000000000000D654                 cmp     rcx, rdx
.text:000000000000D657                 jz      loc_D72F
.text:000000000000D65D
.text:000000000000D65D loc_D65D:                               ; CODE XREF: transit_state_bkref_isra_34+629↑j
.text:000000000000D65D                 mov     rbp, [rdi+rdx*8]
.text:000000000000D661                 mov     rax, rbp
.text:000000000000D664                 shl     rax, 4
.text:000000000000D668                 add     rax, rsi
.text:000000000000D66B                 cmp     byte ptr [rax+8], 9
.text:000000000000D66F                 jnz     short loc_D650
.text:000000000000D671                 cmp     r8, [rax]
.text:000000000000D674                 jnz     short loc_D650
.text:000000000000D676                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000D67A                 jz      loc_D72F
.text:000000000000D680                 mov     rsi, [r12+10h]
.text:000000000000D685                 mov     rcx, [r12]
.text:000000000000D689                 test    rsi, rsi
.text:000000000000D68C                 jz      loc_D750
.text:000000000000D692
.text:000000000000D692 loc_D692:                               ; CODE XREF: transit_state_bkref_isra_34+763↓j
.text:000000000000D692                 mov     [rsp+0E8h+var_D8], r11
.text:000000000000D697                 mov     rdx, [r12+8]
.text:000000000000D69C                 sub     rsp, 8
.text:000000000000D6A0                 push    9
.text:000000000000D6A2                 mov     r9, rbx
.text:000000000000D6A5                 mov     r8, rbp
.text:000000000000D6A8                 mov     rdi, r14
.text:000000000000D6AB                 call    check_arrival
.text:000000000000D6B0                 pop     rdx
.text:000000000000D6B1                 cmp     eax, 1
.text:000000000000D6B4                 pop     rcx
.text:000000000000D6B5                 mov     r11, [rsp+0E8h+var_D8]
.text:000000000000D6BA                 jz      short loc_D72F
.text:000000000000D6BC                 test    eax, eax
.text:000000000000D6BE                 jnz     loc_D398
.text:000000000000D6C4                 mov     rax, [r12+20h]
.text:000000000000D6C9                 cmp     rax, [r12+18h]
.text:000000000000D6CE                 jz      loc_D8A8
.text:000000000000D6D4
.text:000000000000D6D4 loc_D6D4:                               ; CODE XREF: transit_state_bkref_isra_34+8BC↓j
.text:000000000000D6D4                 mov     esi, 28h ; '('  ; size
.text:000000000000D6D9                 mov     edi, 1          ; nmemb
.text:000000000000D6DE                 call    _calloc
.text:000000000000D6E3                 test    rax, rax
.text:000000000000D6E6                 jz      loc_D789
.text:000000000000D6EC                 mov     rdx, [r12+20h]
.text:000000000000D6F1                 mov     rcx, [r12+28h]
.text:000000000000D6F6                 mov     rsi, r12
.text:000000000000D6F9                 mov     r8, [rsp+0E8h+var_E0]
.text:000000000000D6FE                 mov     rdi, r14
.text:000000000000D701                 mov     [rcx+rdx*8], rax
.text:000000000000D705                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000000D70A                 add     rdx, 1
.text:000000000000D70E                 mov     [rax], rbp
.text:000000000000D711                 mov     [rax+8], rbx
.text:000000000000D715                 mov     [r12+20h], rdx
.text:000000000000D71A                 mov     rdx, rax
.text:000000000000D71D                 call    get_subexp_sub_isra_32
.text:000000000000D722                 cmp     eax, 1
.text:000000000000D725                 mov     r11, [r14+8]
.text:000000000000D729                 ja      loc_D398
.text:000000000000D72F
.text:000000000000D72F loc_D72F:                               ; CODE XREF: transit_state_bkref_isra_34+603↑j
.text:000000000000D72F                                         ; transit_state_bkref_isra_34+610↑j ...
.text:000000000000D72F                 add     rbx, 1
.text:000000000000D733                 add     r15, 8
.text:000000000000D737                 cmp     [rsp+0E8h+var_E0], rbx
.text:000000000000D73C                 jge     loc_D5E8
.text:000000000000D742
.text:000000000000D742 loc_D742:                               ; CODE XREF: transit_state_bkref_isra_34+5EC↑j
.text:000000000000D742                                         ; transit_state_bkref_isra_34+865↓j
.text:000000000000D742                 mov     r13, r11
.text:000000000000D745                 jmp     loc_D259
.text:000000000000D745 ; ---------------------------------------------------------------------------
.text:000000000000D74A                 align 10h
.text:000000000000D750
.text:000000000000D750 loc_D750:                               ; CODE XREF: transit_state_bkref_isra_34+66C↑j
.text:000000000000D750                 mov     rsi, rbx
.text:000000000000D753                 mov     edi, 18h        ; nmemb
.text:000000000000D758                 mov     [rsp+0E8h+var_D0], r11
.text:000000000000D75D                 sub     rsi, rcx
.text:000000000000D760                 mov     [rsp+0E8h+var_D8], rcx
.text:000000000000D765                 add     rsi, 1          ; size
.text:000000000000D769                 call    _calloc
.text:000000000000D76E                 test    rax, rax
.text:000000000000D771                 mov     rsi, rax
.text:000000000000D774                 mov     [r12+10h], rax
.text:000000000000D779                 mov     rcx, [rsp+0E8h+var_D8]
.text:000000000000D77E                 mov     r11, [rsp+0E8h+var_D0]
.text:000000000000D783                 jnz     loc_D692
.text:000000000000D789
.text:000000000000D789 loc_D789:                               ; CODE XREF: transit_state_bkref_isra_34+6C6↑j
.text:000000000000D789                                         ; transit_state_bkref_isra_34+8A7↓j
.text:000000000000D789                 mov     eax, 0Ch
.text:000000000000D78E                 jmp     loc_D398
.text:000000000000D78E ; ---------------------------------------------------------------------------
.text:000000000000D793                 align 8
.text:000000000000D798
.text:000000000000D798 loc_D798:                               ; CODE XREF: transit_state_bkref_isra_34+2AD↑j
.text:000000000000D798                                         ; transit_state_bkref_isra_34+31F↑j
.text:000000000000D798                 mov     rcx, rbx
.text:000000000000D79B                 mov     rbx, r13
.text:000000000000D79E                 mov     r13, r8
.text:000000000000D7A1                 cmp     [rbx+20h], rbp
.text:000000000000D7A5                 jg      loc_D259
.text:000000000000D7AB                 test    rbp, rbp
.text:000000000000D7AE                 mov     r12, rcx
.text:000000000000D7B1                 jz      loc_D5C2
.text:000000000000D7B7                 mov     r15, r11
.text:000000000000D7BA                 jmp     loc_D5BE
.text:000000000000D7BA ; ---------------------------------------------------------------------------
.text:000000000000D7BF                 align 20h
.text:000000000000D7C0
.text:000000000000D7C0 loc_D7C0:                               ; CODE XREF: transit_state_bkref_isra_34+484↑j
.text:000000000000D7C0                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000D7C5                 mov     rdi, [rsp+0E8h+var_70]
.text:000000000000D7CA                 mov     rsi, rbp
.text:000000000000D7CD                 mov     [rsp+0E8h+var_C0], r11
.text:000000000000D7D2                 call    re_acquire_state_context
.text:000000000000D7D7                 mov     r11, [rsp+0E8h+var_C0]
.text:000000000000D7DC                 mov     rdx, [r14+0B8h]
.text:000000000000D7E3                 mov     [r11], rax
.text:000000000000D7E6                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000000D7EB                 jnz     loc_D523
.text:000000000000D7F1
.text:000000000000D7F1 loc_D7F1:                               ; CODE XREF: transit_state_bkref_isra_34+4FD↑j
.text:000000000000D7F1                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:000000000000D7F8                 test    eax, eax
.text:000000000000D7FA                 jz      loc_D523
.text:000000000000D800                 jmp     loc_D398
.text:000000000000D800 ; ---------------------------------------------------------------------------
.text:000000000000D805                 align 8
.text:000000000000D808
.text:000000000000D808 loc_D808:                               ; CODE XREF: transit_state_bkref_isra_34+51D↑j
.text:000000000000D808                 mov     rax, [rsp+0E8h+var_D0]
.text:000000000000D80D                 mov     rcx, [rsp+0E8h+var_E0]
.text:000000000000D812                 mov     rdi, r14
.text:000000000000D815                 lea     r8, [rax+10h]
.text:000000000000D819                 lea     rbx, [rax+8]
.text:000000000000D81D                 mov     rdx, r8
.text:000000000000D820                 mov     rsi, rbx
.text:000000000000D823                 mov     [rsp+0E8h+var_D8], r8
.text:000000000000D828                 call    check_subexp_matching_top_isra_18
.text:000000000000D82D                 test    eax, eax
.text:000000000000D82F                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000D836                 jnz     loc_D398
.text:000000000000D83C                 mov     r8, [rsp+0E8h+var_D8]
.text:000000000000D841                 mov     rsi, rbx
.text:000000000000D844                 mov     rdi, r14
.text:000000000000D847                 mov     rdx, r8
.text:000000000000D84A                 call    transit_state_bkref_isra_34
.text:000000000000D84F                 test    eax, eax
.text:000000000000D851                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000D858                 jz      loc_D548
.text:000000000000D85E                 jmp     loc_D398
.text:000000000000D85E ; ---------------------------------------------------------------------------
.text:000000000000D863                 align 8
.text:000000000000D868
.text:000000000000D868 loc_D868:                               ; CODE XREF: transit_state_bkref_isra_34+4B8↑j
.text:000000000000D868                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:000000000000D870                 call    _free
.text:000000000000D875                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:000000000000D87C                 jmp     loc_D398
.text:000000000000D881 ; ---------------------------------------------------------------------------
.text:000000000000D881
.text:000000000000D881 loc_D881:                               ; CODE XREF: transit_state_bkref_isra_34+5D8↑j
.text:000000000000D881                 cmp     [r14+58h], r13
.text:000000000000D885                 jle     loc_D742
.text:000000000000D88B                 lea     esi, [r13+1]
.text:000000000000D88F                 mov     rdi, r14
.text:000000000000D892                 call    extend_buffers
.text:000000000000D897                 test    eax, eax
.text:000000000000D899                 jnz     loc_D398
.text:000000000000D89F                 mov     r11, [r14+8]
.text:000000000000D8A3                 jmp     loc_D5FE
.text:000000000000D8A8 ; ---------------------------------------------------------------------------
.text:000000000000D8A8
.text:000000000000D8A8 loc_D8A8:                               ; CODE XREF: transit_state_bkref_isra_34+6AE↑j
.text:000000000000D8A8                 lea     rdx, [rax+rax+1]
.text:000000000000D8AD                 mov     rdi, [r12+28h]  ; ptr
.text:000000000000D8B2                 lea     rsi, ds:0[rdx*8] ; size
.text:000000000000D8BA                 mov     [rsp+0E8h+var_D8], rdx
.text:000000000000D8BF                 call    _realloc
.text:000000000000D8C4                 test    rax, rax
.text:000000000000D8C7                 jz      loc_D789
.text:000000000000D8CD                 mov     rdx, [rsp+0E8h+var_D8]
.text:000000000000D8D2                 mov     [r12+28h], rax
.text:000000000000D8D7                 mov     [r12+18h], rdx
.text:000000000000D8DC                 jmp     loc_D6D4
.text:000000000000D8E1 ; ---------------------------------------------------------------------------
.text:000000000000D8E1
.text:000000000000D8E1 loc_D8E1:                               ; CODE XREF: transit_state_bkref_isra_34+24B↑j
.text:000000000000D8E1                 mov     r13, [rsp+0E8h+var_B8]
.text:000000000000D8E6                 mov     rax, [r14+0C8h]
.text:000000000000D8ED                 jmp     loc_D3E0
.text:000000000000D8F2 ; ---------------------------------------------------------------------------
.text:000000000000D8F2
.text:000000000000D8F2 loc_D8F2:                               ; CODE XREF: transit_state_bkref_isra_34+268↑j
.text:000000000000D8F2                 mov     r12, [rsp+0E8h+var_E0]
.text:000000000000D8F7                 jmp     loc_D5C2
.text:000000000000D8FC ; ---------------------------------------------------------------------------
.text:000000000000D8FC
.text:000000000000D8FC loc_D8FC:                               ; CODE XREF: transit_state_bkref_isra_34+389↑j
.text:000000000000D8FC                 call    ___stack_chk_fail
.text:000000000000D8FC ; } // starts at D020
.text:000000000000D8FC transit_state_bkref_isra_34 endp
.text:000000000000D8FC
.text:000000000000D8FC ; ---------------------------------------------------------------------------
.text:000000000000D901                 align 10h
.text:000000000000D910
.text:000000000000D910 ; =============== S U B R O U T I N E =======================================
.text:000000000000D910
.text:000000000000D910
.text:000000000000D910 merge_state_with_log proc near          ; CODE XREF: re_search_internal+7DC↓p
.text:000000000000D910                                         ; re_search_internal+BC3↓p
.text:000000000000D910
.text:000000000000D910 var_68          = qword ptr -68h
.text:000000000000D910 var_60          = qword ptr -60h
.text:000000000000D910 var_58          = xmmword ptr -58h
.text:000000000000D910 ptr             = qword ptr -48h
.text:000000000000D910 var_40          = qword ptr -40h
.text:000000000000D910
.text:000000000000D910 ; __unwind {
.text:000000000000D910                 push    r15
.text:000000000000D912                 push    r14
.text:000000000000D914                 push    r13
.text:000000000000D916                 push    r12
.text:000000000000D918                 mov     r13, rdi
.text:000000000000D91B                 push    rbp
.text:000000000000D91C                 push    rbx
.text:000000000000D91D                 mov     rbx, rsi
.text:000000000000D920                 sub     rsp, 38h
.text:000000000000D924                 mov     r12, [rsi+48h]
.text:000000000000D928                 mov     r14, [rsi+0B8h]
.text:000000000000D92F                 mov     rax, fs:28h
.text:000000000000D938                 mov     [rsp+68h+var_40], rax
.text:000000000000D93D                 xor     eax, eax
.text:000000000000D93F                 mov     r15, [rsi+98h]
.text:000000000000D946                 lea     rbp, ds:0[r12*8]
.text:000000000000D94E                 add     r14, rbp
.text:000000000000D951                 cmp     [rsi+0C0h], r12
.text:000000000000D958                 jge     short loc_D9A0
.text:000000000000D95A                 mov     [r14], rdx
.text:000000000000D95D                 mov     rbp, rdx
.text:000000000000D960                 mov     [rsi+0C0h], r12
.text:000000000000D967
.text:000000000000D967 loc_D967:                               ; CODE XREF: merge_state_with_log+111↓j
.text:000000000000D967                                         ; merge_state_with_log+121↓j ...
.text:000000000000D967                 cmp     qword ptr [r15+98h], 0
.text:000000000000D96F                 jnz     loc_DA98
.text:000000000000D975
.text:000000000000D975 loc_D975:                               ; CODE XREF: merge_state_with_log+1B2↓j
.text:000000000000D975                                         ; merge_state_with_log+1D9↓j ...
.text:000000000000D975                 mov     rcx, [rsp+68h+var_40]
.text:000000000000D97A                 xor     rcx, fs:28h
.text:000000000000D983                 mov     rax, rbp
.text:000000000000D986                 jnz     loc_DAF7
.text:000000000000D98C                 add     rsp, 38h
.text:000000000000D990                 pop     rbx
.text:000000000000D991                 pop     rbp
.text:000000000000D992                 pop     r12
.text:000000000000D994                 pop     r13
.text:000000000000D996                 pop     r14
.text:000000000000D998                 pop     r15
.text:000000000000D99A                 retn
.text:000000000000D99A ; ---------------------------------------------------------------------------
.text:000000000000D99B                 align 20h
.text:000000000000D9A0
.text:000000000000D9A0 loc_D9A0:                               ; CODE XREF: merge_state_with_log+48↑j
.text:000000000000D9A0                 mov     rax, [r14]
.text:000000000000D9A3                 test    rax, rax
.text:000000000000D9A6                 jz      loc_DA88
.text:000000000000D9AC                 test    rdx, rdx
.text:000000000000D9AF                 mov     rax, [rax+50h]
.text:000000000000D9B3                 jz      loc_DA40
.text:000000000000D9B9                 mov     r14, [rdx+50h]
.text:000000000000D9BD                 lea     rdi, [rsp+68h+var_58]
.text:000000000000D9C2                 mov     rdx, rax
.text:000000000000D9C5                 mov     [rsp+68h+var_68], rdi
.text:000000000000D9C9                 mov     rsi, r14
.text:000000000000D9CC                 call    re_node_set_init_union
.text:000000000000D9D1                 test    eax, eax
.text:000000000000D9D3                 mov     [r13+0], eax
.text:000000000000D9D7                 jnz     loc_DAF0
.text:000000000000D9DD                 mov     rax, [rbx+48h]
.text:000000000000D9E1                 mov     edx, [rbx+0A0h]
.text:000000000000D9E7                 mov     rdi, rbx
.text:000000000000D9EA                 lea     rsi, [rax-1]
.text:000000000000D9EE                 call    re_string_context_at
.text:000000000000D9F3                 mov     r8, [rbx+0B8h]
.text:000000000000D9FA                 mov     rdx, [rsp+68h+var_68]
.text:000000000000D9FE                 mov     ecx, eax
.text:000000000000DA00                 mov     rsi, r15
.text:000000000000DA03                 mov     rdi, r13
.text:000000000000DA06                 add     r8, rbp
.text:000000000000DA09                 mov     [rsp+68h+var_60], r8
.text:000000000000DA0E                 call    re_acquire_state_context
.text:000000000000DA13                 mov     r8, [rsp+68h+var_60]
.text:000000000000DA18                 test    r14, r14
.text:000000000000DA1B                 mov     rbp, rax
.text:000000000000DA1E                 mov     [r8], rax
.text:000000000000DA21                 jz      loc_D967
.text:000000000000DA27                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:000000000000DA2C                 call    _free
.text:000000000000DA31                 jmp     loc_D967
.text:000000000000DA31 ; ---------------------------------------------------------------------------
.text:000000000000DA36                 align 20h
.text:000000000000DA40
.text:000000000000DA40 loc_DA40:                               ; CODE XREF: merge_state_with_log+A3↑j
.text:000000000000DA40                 movdqu  xmm0, xmmword ptr [rax]
.text:000000000000DA44                 mov     rdi, rbx
.text:000000000000DA47                 mov     edx, [rsi+0A0h]
.text:000000000000DA4D                 lea     rsi, [r12-1]
.text:000000000000DA52                 movaps  [rsp+68h+var_58], xmm0
.text:000000000000DA57                 mov     rax, [rax+10h]
.text:000000000000DA5B                 mov     [rsp+68h+ptr], rax
.text:000000000000DA60                 call    re_string_context_at
.text:000000000000DA65                 lea     rdx, [rsp+68h+var_58]
.text:000000000000DA6A                 mov     ecx, eax
.text:000000000000DA6C                 mov     rsi, r15
.text:000000000000DA6F                 mov     rdi, r13
.text:000000000000DA72                 call    re_acquire_state_context
.text:000000000000DA77                 mov     rbp, rax
.text:000000000000DA7A                 mov     [r14], rax
.text:000000000000DA7D                 jmp     loc_D967
.text:000000000000DA7D ; ---------------------------------------------------------------------------
.text:000000000000DA82                 align 8
.text:000000000000DA88
.text:000000000000DA88 loc_DA88:                               ; CODE XREF: merge_state_with_log+96↑j
.text:000000000000DA88                 mov     [r14], rdx
.text:000000000000DA8B                 mov     rbp, rdx
.text:000000000000DA8E                 jmp     loc_D967
.text:000000000000DA8E ; ---------------------------------------------------------------------------
.text:000000000000DA93                 align 8
.text:000000000000DA98
.text:000000000000DA98 loc_DA98:                               ; CODE XREF: merge_state_with_log+5F↑j
.text:000000000000DA98                 test    rbp, rbp
.text:000000000000DA9B                 jz      short loc_DAF0
.text:000000000000DA9D                 lea     r14, [rbp+10h]
.text:000000000000DAA1                 lea     r15, [rbp+18h]
.text:000000000000DAA5                 mov     rcx, r12
.text:000000000000DAA8                 mov     rdi, rbx
.text:000000000000DAAB                 mov     rdx, r15
.text:000000000000DAAE                 mov     rsi, r14
.text:000000000000DAB1                 call    check_subexp_matching_top_isra_18
.text:000000000000DAB6                 test    eax, eax
.text:000000000000DAB8                 mov     [r13+0], eax
.text:000000000000DABC                 jnz     short loc_DAF0
.text:000000000000DABE                 test    byte ptr [rbp+68h], 40h
.text:000000000000DAC2                 jz      loc_D975
.text:000000000000DAC8                 mov     rdx, r15
.text:000000000000DACB                 mov     rsi, r14
.text:000000000000DACE                 mov     rdi, rbx
.text:000000000000DAD1                 call    transit_state_bkref_isra_34
.text:000000000000DAD6                 test    eax, eax
.text:000000000000DAD8                 mov     [r13+0], eax
.text:000000000000DADC                 jnz     short loc_DAF0
.text:000000000000DADE                 mov     rax, [rbx+0B8h]
.text:000000000000DAE5                 mov     rbp, [rax+r12*8]
.text:000000000000DAE9                 jmp     loc_D975
.text:000000000000DAE9 ; ---------------------------------------------------------------------------
.text:000000000000DAEE                 align 10h
.text:000000000000DAF0
.text:000000000000DAF0 loc_DAF0:                               ; CODE XREF: merge_state_with_log+C7↑j
.text:000000000000DAF0                                         ; merge_state_with_log+18B↑j ...
.text:000000000000DAF0                 xor     ebp, ebp
.text:000000000000DAF2                 jmp     loc_D975
.text:000000000000DAF7 ; ---------------------------------------------------------------------------
.text:000000000000DAF7
.text:000000000000DAF7 loc_DAF7:                               ; CODE XREF: merge_state_with_log+76↑j
.text:000000000000DAF7                 call    ___stack_chk_fail
.text:000000000000DAF7 ; } // starts at D910
.text:000000000000DAF7 merge_state_with_log endp
.text:000000000000DAF7
.text:000000000000DAF7 ; ---------------------------------------------------------------------------
.text:000000000000DAFC                 align 20h
.text:000000000000DB00
.text:000000000000DB00 ; =============== S U B R O U T I N E =======================================
.text:000000000000DB00
.text:000000000000DB00
.text:000000000000DB00 sift_states_backward proc near          ; CODE XREF: re_search_internal+9CE↓p
.text:000000000000DB00                                         ; re_search_internal+1235↓p ...
.text:000000000000DB00
.text:000000000000DB00 var_98          = qword ptr -98h
.text:000000000000DB00 n               = qword ptr -90h
.text:000000000000DB00 var_88          = qword ptr -88h
.text:000000000000DB00 var_80          = qword ptr -80h
.text:000000000000DB00 var_78          = qword ptr -78h
.text:000000000000DB00 var_6C          = dword ptr -6Ch
.text:000000000000DB00 var_68          = qword ptr -68h
.text:000000000000DB00 var_60          = qword ptr -60h
.text:000000000000DB00 var_58          = qword ptr -58h
.text:000000000000DB00 var_50          = qword ptr -50h
.text:000000000000DB00 ptr             = qword ptr -48h
.text:000000000000DB00 var_40          = qword ptr -40h
.text:000000000000DB00
.text:000000000000DB00 ; __unwind {
.text:000000000000DB00                 push    r15
.text:000000000000DB02                 push    r14
.text:000000000000DB04                 mov     r14, rdi
.text:000000000000DB07                 push    r13
.text:000000000000DB09                 push    r12
.text:000000000000DB0B                 mov     r13, rsi
.text:000000000000DB0E                 push    rbp
.text:000000000000DB0F                 push    rbx
.text:000000000000DB10                 sub     rsp, 68h
.text:000000000000DB14                 mov     r15, [rsi+18h]
.text:000000000000DB18                 mov     rbx, [rsi+10h]
.text:000000000000DB1C                 mov     [rsp+98h+var_98], rdi
.text:000000000000DB20                 mov     edi, 8          ; size
.text:000000000000DB25                 mov     [rsp+98h+var_58], 1
.text:000000000000DB2E                 mov     rax, fs:28h
.text:000000000000DB37                 mov     [rsp+98h+var_40], rax
.text:000000000000DB3C                 xor     eax, eax
.text:000000000000DB3E                 mov     [rsp+98h+var_50], 1
.text:000000000000DB47                 call    _malloc
.text:000000000000DB4C                 test    rax, rax
.text:000000000000DB4F                 mov     [rsp+98h+ptr], rax
.text:000000000000DB54                 jz      loc_DE34
.text:000000000000DB5A                 lea     rcx, [rsp+98h+var_58]
.text:000000000000DB5F                 mov     [rax], rbx
.text:000000000000DB62                 mov     rdx, r15
.text:000000000000DB65                 mov     rsi, r13
.text:000000000000DB68                 mov     rdi, r14
.text:000000000000DB6B                 mov     [rsp+98h+var_88], rcx
.text:000000000000DB70                 call    update_cur_sifted_state
.text:000000000000DB75                 test    eax, eax
.text:000000000000DB77                 jnz     loc_DE05
.text:000000000000DB7D                 lea     rax, ds:0[r15*8]
.text:000000000000DB85                 test    r15, r15
.text:000000000000DB88                 mov     [rsp+98h+var_6C], 0
.text:000000000000DB90                 mov     [rsp+98h+n], rax
.text:000000000000DB95                 lea     rax, [r13+30h]
.text:000000000000DB99                 mov     [rsp+98h+var_60], rax
.text:000000000000DB9E                 jle     loc_DDA7
.text:000000000000DBA4
.text:000000000000DBA4 loc_DBA4:                               ; CODE XREF: sift_states_backward+2A1↓j
.text:000000000000DBA4                 mov     rdi, [r13+0]    ; s
.text:000000000000DBA8                 mov     rax, [rsp+98h+n]
.text:000000000000DBAD                 cmp     qword ptr [rdi+rax], 0
.text:000000000000DBB2                 jz      loc_DDC8
.text:000000000000DBB8                 mov     rax, [rsp+98h+var_98]
.text:000000000000DBBC                 mov     [rsp+98h+var_6C], 0
.text:000000000000DBC4                 mov     ecx, [rsp+98h+var_6C]
.text:000000000000DBC8                 cmp     [rax+0E0h], ecx
.text:000000000000DBCE                 jl      loc_DDE1
.text:000000000000DBD4
.text:000000000000DBD4 loc_DBD4:                               ; CODE XREF: sift_states_backward+2DB↓j
.text:000000000000DBD4                 mov     rbx, [rsp+98h+var_98]
.text:000000000000DBD8                 mov     rdi, [rsp+98h+n]
.text:000000000000DBDD                 sub     r15, 1
.text:000000000000DBE1                 mov     [rsp+98h+var_50], 0
.text:000000000000DBEA                 mov     rax, [rbx+0B8h]
.text:000000000000DBF1                 mov     r12, [rax+rdi-8]
.text:000000000000DBF6                 test    r12, r12
.text:000000000000DBF9                 jz      loc_DD80
.text:000000000000DBFF                 cmp     qword ptr [r12+28h], 0
.text:000000000000DC05                 mov     r14, [rbx+98h]
.text:000000000000DC0C                 jle     loc_DD80
.text:000000000000DC12                 xor     ebx, ebx
.text:000000000000DC14                 jmp     loc_DCBB
.text:000000000000DC14 ; ---------------------------------------------------------------------------
.text:000000000000DC19                 align 20h
.text:000000000000DC20
.text:000000000000DC20 loc_DC20:                               ; CODE XREF: sift_states_backward+1D5↓j
.text:000000000000DC20                                         ; sift_states_backward+271↓j ...
.text:000000000000DC20                 mov     rdi, [rsp+98h+var_98]
.text:000000000000DC24                 mov     rdx, r15
.text:000000000000DC27                 call    check_node_accept
.text:000000000000DC2C                 test    al, al
.text:000000000000DC2E                 jz      short loc_DCAC
.text:000000000000DC30                 mov     rax, [r13+0]
.text:000000000000DC34                 mov     rcx, [rsp+98h+n]
.text:000000000000DC39                 mov     rax, [rax+rcx]
.text:000000000000DC3D                 test    rax, rax
.text:000000000000DC40                 jz      short loc_DCAC
.text:000000000000DC42                 mov     rdx, [r14+18h]
.text:000000000000DC46                 mov     rdi, [rax+10h]
.text:000000000000DC4A                 lea     rsi, [rax+18h]
.text:000000000000DC4E                 mov     rdx, [rdx+rbp*8]
.text:000000000000DC52                 call    re_node_set_contains_isra_3
.text:000000000000DC57                 test    rax, rax
.text:000000000000DC5A                 jz      short loc_DCAC
.text:000000000000DC5C                 mov     r10d, 1
.text:000000000000DC62
.text:000000000000DC62 loc_DC62:                               ; CODE XREF: sift_states_backward+22B↓j
.text:000000000000DC62                                         ; sift_states_backward+260↓j ...
.text:000000000000DC62                 cmp     qword ptr [r13+28h], 0
.text:000000000000DC67                 jz      short loc_DC97
.text:000000000000DC69                 mov     rax, [r14+18h]
.text:000000000000DC6D                 sub     rsp, 8
.text:000000000000DC71                 lea     rsi, [r13+28h]
.text:000000000000DC75                 lea     r8, [r10+r15]
.text:000000000000DC79                 mov     r9, rbp
.text:000000000000DC7C                 mov     rcx, [rax+rbp*8]
.text:000000000000DC80                 push    r15
.text:000000000000DC82                 mov     rdx, [rsp+0A8h+var_60]
.text:000000000000DC87                 mov     rdi, [rsp+0A8h+var_98]
.text:000000000000DC8C                 call    check_dst_limits_isra_13
.text:000000000000DC91                 test    al, al
.text:000000000000DC93                 pop     rdx
.text:000000000000DC94                 pop     rcx
.text:000000000000DC95                 jnz     short loc_DCAC
.text:000000000000DC97
.text:000000000000DC97 loc_DC97:                               ; CODE XREF: sift_states_backward+167↑j
.text:000000000000DC97                 mov     rdi, [rsp+98h+var_88]
.text:000000000000DC9C                 mov     rsi, rbp
.text:000000000000DC9F                 call    re_node_set_insert
.text:000000000000DCA4                 test    al, al
.text:000000000000DCA6                 jz      loc_DE00
.text:000000000000DCAC
.text:000000000000DCAC loc_DCAC:                               ; CODE XREF: sift_states_backward+12E↑j
.text:000000000000DCAC                                         ; sift_states_backward+140↑j ...
.text:000000000000DCAC                 add     rbx, 1
.text:000000000000DCB0                 cmp     rbx, [r12+28h]
.text:000000000000DCB5                 jge     loc_DD80
.text:000000000000DCBB
.text:000000000000DCBB loc_DCBB:                               ; CODE XREF: sift_states_backward+114↑j
.text:000000000000DCBB                 mov     rax, [r12+30h]
.text:000000000000DCC0                 mov     rsi, [r14]
.text:000000000000DCC3                 mov     rbp, [rax+rbx*8]
.text:000000000000DCC7                 mov     r9, rbp
.text:000000000000DCCA                 shl     r9, 4
.text:000000000000DCCE                 add     rsi, r9
.text:000000000000DCD1                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000DCD5                 jz      loc_DC20
.text:000000000000DCDB                 mov     rcx, [rsp+98h+var_98]
.text:000000000000DCDF                 mov     rax, [r13+18h]
.text:000000000000DCE3                 mov     r8, r15
.text:000000000000DCE6                 mov     rdx, rbp
.text:000000000000DCE9                 mov     [rsp+98h+var_80], r9
.text:000000000000DCEE                 mov     r11, [rcx+98h]
.text:000000000000DCF5                 mov     [rsp+98h+var_78], rax
.text:000000000000DCFA                 mov     rdi, [r11]
.text:000000000000DCFD                 lea     rsi, [r11+0D8h]
.text:000000000000DD04                 mov     [rsp+98h+var_68], r11
.text:000000000000DD09                 call    check_node_accept_bytes_isra_31
.text:000000000000DD0E                 movsxd  r10, eax
.text:000000000000DD11                 mov     r9, [rsp+98h+var_80]
.text:000000000000DD16                 cmp     r10d, 0
.text:000000000000DD1A                 jle     loc_DDB0
.text:000000000000DD20                 movsxd  rax, r10d
.text:000000000000DD23                 add     rax, r15
.text:000000000000DD26                 cmp     [rsp+98h+var_78], rax
.text:000000000000DD2B                 jl      loc_DC62
.text:000000000000DD31                 mov     rdx, [r13+0]
.text:000000000000DD35                 mov     r11, [rsp+98h+var_68]
.text:000000000000DD3A                 mov     rax, [rdx+rax*8]
.text:000000000000DD3E                 test    rax, rax
.text:000000000000DD41                 jz      short loc_DDB6
.text:000000000000DD43                 mov     rdx, [r11+18h]
.text:000000000000DD47                 mov     rdi, [rax+10h]
.text:000000000000DD4B                 lea     rsi, [rax+18h]
.text:000000000000DD4F                 mov     [rsp+98h+var_80], r9
.text:000000000000DD54                 mov     rdx, [rdx+rbp*8]
.text:000000000000DD58                 call    re_node_set_contains_isra_3
.text:000000000000DD5D                 test    rax, rax
.text:000000000000DD60                 jnz     loc_DC62
.text:000000000000DD66                 mov     r9, [rsp+98h+var_80]
.text:000000000000DD6B                 mov     rsi, [r14]
.text:000000000000DD6E                 add     rsi, r9
.text:000000000000DD71                 jmp     loc_DC20
.text:000000000000DD71 ; ---------------------------------------------------------------------------
.text:000000000000DD76                 align 20h
.text:000000000000DD80
.text:000000000000DD80 loc_DD80:                               ; CODE XREF: sift_states_backward+F9↑j
.text:000000000000DD80                                         ; sift_states_backward+10C↑j ...
.text:000000000000DD80                 mov     rcx, [rsp+98h+var_88]
.text:000000000000DD85                 mov     rdi, [rsp+98h+var_98]
.text:000000000000DD89                 mov     rdx, r15
.text:000000000000DD8C                 mov     rsi, r13
.text:000000000000DD8F                 call    update_cur_sifted_state
.text:000000000000DD94                 test    eax, eax
.text:000000000000DD96                 jnz     short loc_DE05
.text:000000000000DD98                 sub     [rsp+98h+n], 8
.text:000000000000DD9E                 test    r15, r15
.text:000000000000DDA1                 jnz     loc_DBA4
.text:000000000000DDA7
.text:000000000000DDA7 loc_DDA7:                               ; CODE XREF: sift_states_backward+9E↑j
.text:000000000000DDA7                 xor     eax, eax
.text:000000000000DDA9                 jmp     short loc_DE05
.text:000000000000DDA9 ; ---------------------------------------------------------------------------
.text:000000000000DDAB                 align 10h
.text:000000000000DDB0
.text:000000000000DDB0 loc_DDB0:                               ; CODE XREF: sift_states_backward+21A↑j
.text:000000000000DDB0                 jnz     loc_DC62
.text:000000000000DDB6
.text:000000000000DDB6 loc_DDB6:                               ; CODE XREF: sift_states_backward+241↑j
.text:000000000000DDB6                 mov     rsi, [r14]
.text:000000000000DDB9                 add     rsi, r9
.text:000000000000DDBC                 jmp     loc_DC20
.text:000000000000DDBC ; ---------------------------------------------------------------------------
.text:000000000000DDC1                 align 8
.text:000000000000DDC8
.text:000000000000DDC8 loc_DDC8:                               ; CODE XREF: sift_states_backward+B2↑j
.text:000000000000DDC8                 mov     rax, [rsp+98h+var_98]
.text:000000000000DDCC                 add     [rsp+98h+var_6C], 1
.text:000000000000DDD1                 mov     ecx, [rsp+98h+var_6C]
.text:000000000000DDD5                 cmp     [rax+0E0h], ecx
.text:000000000000DDDB                 jge     loc_DBD4
.text:000000000000DDE1
.text:000000000000DDE1 loc_DDE1:                               ; CODE XREF: sift_states_backward+CE↑j
.text:000000000000DDE1                 mov     rdx, [rsp+98h+n] ; n
.text:000000000000DDE6                 xor     esi, esi        ; c
.text:000000000000DDE8                 call    _memset
.text:000000000000DDED                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000DDF2                 call    _free
.text:000000000000DDF7                 xor     eax, eax
.text:000000000000DDF9                 jmp     short loc_DE15
.text:000000000000DDF9 ; ---------------------------------------------------------------------------
.text:000000000000DDFB                 align 20h
.text:000000000000DE00
.text:000000000000DE00 loc_DE00:                               ; CODE XREF: sift_states_backward+1A6↑j
.text:000000000000DE00                 mov     eax, 0Ch
.text:000000000000DE05
.text:000000000000DE05 loc_DE05:                               ; CODE XREF: sift_states_backward+77↑j
.text:000000000000DE05                                         ; sift_states_backward+296↑j ...
.text:000000000000DE05                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000DE0A                 mov     dword ptr [rsp+98h+var_98], eax
.text:000000000000DE0D                 call    _free
.text:000000000000DE12                 mov     eax, dword ptr [rsp+98h+var_98]
.text:000000000000DE15
.text:000000000000DE15 loc_DE15:                               ; CODE XREF: sift_states_backward+2F9↑j
.text:000000000000DE15                                         ; sift_states_backward+339↓j
.text:000000000000DE15                 mov     rdx, [rsp+98h+var_40]
.text:000000000000DE1A                 xor     rdx, fs:28h
.text:000000000000DE23                 jnz     short loc_DE3B
.text:000000000000DE25                 add     rsp, 68h
.text:000000000000DE29                 pop     rbx
.text:000000000000DE2A                 pop     rbp
.text:000000000000DE2B                 pop     r12
.text:000000000000DE2D                 pop     r13
.text:000000000000DE2F                 pop     r14
.text:000000000000DE31                 pop     r15
.text:000000000000DE33                 retn
.text:000000000000DE34 ; ---------------------------------------------------------------------------
.text:000000000000DE34
.text:000000000000DE34 loc_DE34:                               ; CODE XREF: sift_states_backward+54↑j
.text:000000000000DE34                 mov     eax, 0Ch
.text:000000000000DE39                 jmp     short loc_DE15
.text:000000000000DE3B ; ---------------------------------------------------------------------------
.text:000000000000DE3B
.text:000000000000DE3B loc_DE3B:                               ; CODE XREF: sift_states_backward+323↑j
.text:000000000000DE3B                 call    ___stack_chk_fail
.text:000000000000DE3B ; } // starts at DB00
.text:000000000000DE3B sift_states_backward endp
.text:000000000000DE3B
.text:000000000000DE40
.text:000000000000DE40 ; =============== S U B R O U T I N E =======================================
.text:000000000000DE40
.text:000000000000DE40
.text:000000000000DE40 re_search_internal proc near            ; CODE XREF: re_search_stub+10A↓p
.text:000000000000DE40                                         ; rpl_regexec+58↓p
.text:000000000000DE40
.text:000000000000DE40 var_268         = qword ptr -268h
.text:000000000000DE40 var_260         = qword ptr -260h
.text:000000000000DE40 var_258         = qword ptr -258h
.text:000000000000DE40 var_250         = qword ptr -250h
.text:000000000000DE40 var_248         = qword ptr -248h
.text:000000000000DE40 var_240         = qword ptr -240h
.text:000000000000DE40 var_238         = qword ptr -238h
.text:000000000000DE40 var_230         = qword ptr -230h
.text:000000000000DE40 var_228         = qword ptr -228h
.text:000000000000DE40 var_220         = qword ptr -220h
.text:000000000000DE40 var_218         = qword ptr -218h
.text:000000000000DE40 var_210         = dword ptr -210h
.text:000000000000DE40 var_20C         = dword ptr -20Ch
.text:000000000000DE40 var_208         = qword ptr -208h
.text:000000000000DE40 var_200         = qword ptr -200h
.text:000000000000DE40 var_1F8         = qword ptr -1F8h
.text:000000000000DE40 var_1F0         = qword ptr -1F0h
.text:000000000000DE40 var_1E8         = qword ptr -1E8h
.text:000000000000DE40 var_1E0         = qword ptr -1E0h
.text:000000000000DE40 var_1D8         = qword ptr -1D8h
.text:000000000000DE40 var_1D0         = qword ptr -1D0h
.text:000000000000DE40 var_1C8         = qword ptr -1C8h
.text:000000000000DE40 var_1C0         = dword ptr -1C0h
.text:000000000000DE40 var_1BC         = dword ptr -1BCh
.text:000000000000DE40 var_1B8         = qword ptr -1B8h
.text:000000000000DE40 var_1B0         = qword ptr -1B0h
.text:000000000000DE40 var_1A8         = qword ptr -1A8h
.text:000000000000DE40 var_1A0         = dword ptr -1A0h
.text:000000000000DE40 var_19A         = byte ptr -19Ah
.text:000000000000DE40 var_199         = byte ptr -199h
.text:000000000000DE40 var_198         = dword ptr -198h
.text:000000000000DE40 var_194         = dword ptr -194h
.text:000000000000DE40 var_190         = qword ptr -190h
.text:000000000000DE40 var_188         = xmmword ptr -188h
.text:000000000000DE40 var_178         = qword ptr -178h
.text:000000000000DE40 var_170         = qword ptr -170h
.text:000000000000DE40 var_168         = xmmword ptr -168h
.text:000000000000DE40 ptr             = qword ptr -158h
.text:000000000000DE40 var_148         = qword ptr -148h
.text:000000000000DE40 var_140         = qword ptr -140h
.text:000000000000DE40 var_138         = qword ptr -138h
.text:000000000000DE40 var_130         = qword ptr -130h
.text:000000000000DE40 var_120         = qword ptr -120h
.text:000000000000DE40 var_118         = qword ptr -118h
.text:000000000000DE40 var_110         = qword ptr -110h
.text:000000000000DE40 var_108         = qword ptr -108h
.text:000000000000DE40 var_100         = qword ptr -100h
.text:000000000000DE40 var_F8          = qword ptr -0F8h
.text:000000000000DE40 var_F0          = qword ptr -0F0h
.text:000000000000DE40 var_E8          = qword ptr -0E8h
.text:000000000000DE40 var_E0          = qword ptr -0E0h
.text:000000000000DE40 var_D8          = dword ptr -0D8h
.text:000000000000DE40 var_D0          = qword ptr -0D0h
.text:000000000000DE40 var_C8          = qword ptr -0C8h
.text:000000000000DE40 var_C0          = byte ptr -0C0h
.text:000000000000DE40 var_BF          = byte ptr -0BFh
.text:000000000000DE40 var_BE          = byte ptr -0BEh
.text:000000000000DE40 var_BD          = byte ptr -0BDh
.text:000000000000DE40 var_BC          = byte ptr -0BCh
.text:000000000000DE40 var_BB          = byte ptr -0BBh
.text:000000000000DE40 var_BA          = byte ptr -0BAh
.text:000000000000DE40 var_B8          = dword ptr -0B8h
.text:000000000000DE40 var_B0          = qword ptr -0B0h
.text:000000000000DE40 var_A8          = dword ptr -0A8h
.text:000000000000DE40 var_A0          = qword ptr -0A0h
.text:000000000000DE40 var_98          = qword ptr -98h
.text:000000000000DE40 var_90          = qword ptr -90h
.text:000000000000DE40 var_88          = qword ptr -88h
.text:000000000000DE40 var_80          = qword ptr -80h
.text:000000000000DE40 var_78          = qword ptr -78h
.text:000000000000DE40 var_70          = qword ptr -70h
.text:000000000000DE40 var_68          = dword ptr -68h
.text:000000000000DE40 var_58          = qword ptr -58h
.text:000000000000DE40 var_50          = qword ptr -50h
.text:000000000000DE40 var_40          = qword ptr -40h
.text:000000000000DE40 arg_0           = qword ptr  8
.text:000000000000DE40 arg_8           = qword ptr  10h
.text:000000000000DE40 arg_10          = dword ptr  18h
.text:000000000000DE40
.text:000000000000DE40 ; __unwind {
.text:000000000000DE40                 push    r15
.text:000000000000DE42                 push    r14
.text:000000000000DE44                 push    r13
.text:000000000000DE46                 push    r12
.text:000000000000DE48                 mov     r13, r9
.text:000000000000DE4B                 push    rbp
.text:000000000000DE4C                 push    rbx
.text:000000000000DE4D                 mov     rbp, rcx
.text:000000000000DE50                 mov     ecx, 20h ; ' '
.text:000000000000DE55                 mov     r12, r8
.text:000000000000DE58                 sub     rsp, 238h
.text:000000000000DE5F                 mov     rbx, [rdi]
.text:000000000000DE62                 mov     rax, [rsp+268h+arg_8]
.text:000000000000DE6A                 mov     [rsp+268h+var_220], rdi
.text:000000000000DE6F                 mov     [rsp+268h+var_1F0], rsi
.text:000000000000DE74                 mov     rsi, rdi
.text:000000000000DE77                 lea     rdi, [rsp+268h+var_148]
.text:000000000000DE7F                 mov     [rsp+268h+var_1E0], rdx
.text:000000000000DE87                 mov     [rsp+268h+var_230], rbx
.text:000000000000DE8C                 mov     [rsp+268h+var_1B0], rax
.text:000000000000DE94                 mov     [rsp+268h+var_268], rdi
.text:000000000000DE98                 mov     rax, fs:28h
.text:000000000000DEA1                 mov     [rsp+268h+var_40], rax
.text:000000000000DEA9                 xor     eax, eax
.text:000000000000DEAB                 rep stosq
.text:000000000000DEAE                 mov     rdi, [rsi+20h]
.text:000000000000DEB2                 mov     [rsp+268h+var_B0], rbx
.text:000000000000DEBA                 test    rdi, rdi
.text:000000000000DEBD                 mov     [rsp+268h+var_200], rdi
.text:000000000000DEC2                 jz      short loc_DEE6
.text:000000000000DEC4                 movzx   edx, byte ptr [rsi+38h]
.text:000000000000DEC8                 test    dl, 8
.text:000000000000DECB                 jz      loc_E360
.text:000000000000DED1                 cmp     rbp, r8
.text:000000000000DED4                 jz      loc_E360
.text:000000000000DEDA                 and     edx, 1
.text:000000000000DEDD                 cmovz   rax, rdi
.text:000000000000DEE1                 mov     [rsp+268h+var_200], rax
.text:000000000000DEE6
.text:000000000000DEE6 loc_DEE6:                               ; CODE XREF: re_search_internal+82↑j
.text:000000000000DEE6                                         ; re_search_internal+529↓j
.text:000000000000DEE6                 mov     rax, [rsp+268h+var_220]
.text:000000000000DEEB                 mov     [rsp+268h+var_1D0], 0
.text:000000000000DEF7                 mov     rax, [rax+30h]
.text:000000000000DEFB                 cmp     rax, [rsp+268h+arg_0]
.text:000000000000DF03                 jnb     short loc_DF24
.text:000000000000DF05                 mov     rcx, [rsp+268h+arg_0]
.text:000000000000DF0D                 lea     rdx, [rcx-1]
.text:000000000000DF11                 sub     rdx, rax
.text:000000000000DF14                 sub     [rsp+268h+arg_0], rdx
.text:000000000000DF1C                 mov     [rsp+268h+var_1D0], rdx
.text:000000000000DF24
.text:000000000000DF24 loc_DF24:                               ; CODE XREF: re_search_internal+C3↑j
.text:000000000000DF24                 mov     rsi, [rsp+268h+var_220]
.text:000000000000DF29                 cmp     qword ptr [rsi+10h], 0
.text:000000000000DF2E                 jz      loc_EDC0
.text:000000000000DF34                 mov     rdi, [rsp+268h+var_230]
.text:000000000000DF39                 mov     rax, [rdi+48h]
.text:000000000000DF3D                 test    rax, rax
.text:000000000000DF40                 jz      loc_EDC0
.text:000000000000DF46                 mov     rdx, [rdi+50h]
.text:000000000000DF4A                 test    rdx, rdx
.text:000000000000DF4D                 jz      loc_EDC0
.text:000000000000DF53                 mov     rcx, [rdi+58h]
.text:000000000000DF57                 test    rcx, rcx
.text:000000000000DF5A                 jz      loc_EDC0
.text:000000000000DF60                 cmp     qword ptr [rdi+60h], 0
.text:000000000000DF65                 jz      loc_EDC0
.text:000000000000DF6B                 cmp     qword ptr [rax+10h], 0
.text:000000000000DF70                 jnz     short loc_DFA8
.text:000000000000DF72                 cmp     qword ptr [rdx+10h], 0
.text:000000000000DF77                 jnz     short loc_DFA8
.text:000000000000DF79                 cmp     qword ptr [rcx+10h], 0
.text:000000000000DF7E                 jz      short loc_DF86
.text:000000000000DF80                 cmp     byte ptr [rsi+38h], 0
.text:000000000000DF84                 js      short loc_DFA8
.text:000000000000DF86
.text:000000000000DF86 loc_DF86:                               ; CODE XREF: re_search_internal+13E↑j
.text:000000000000DF86                 test    rbp, rbp
.text:000000000000DF89                 jz      short loc_DF9C
.text:000000000000DF8B                 test    r12, r12
.text:000000000000DF8E                 mov     [rsp+268h+var_20C], 1
.text:000000000000DF96                 jnz     loc_E9B9
.text:000000000000DF9C
.text:000000000000DF9C loc_DF9C:                               ; CODE XREF: re_search_internal+149↑j
.text:000000000000DF9C                 xor     r12d, r12d
.text:000000000000DF9F                 xor     ebp, ebp
.text:000000000000DFA1                 nop     dword ptr [rax+00000000h]
.text:000000000000DFA8
.text:000000000000DFA8 loc_DFA8:                               ; CODE XREF: re_search_internal+130↑j
.text:000000000000DFA8                                         ; re_search_internal+137↑j ...
.text:000000000000DFA8                 cmp     [rsp+268h+arg_0], 0
.text:000000000000DFB1                 mov     [rsp+268h+var_210], 1
.text:000000000000DFB9                 jz      loc_E340
.text:000000000000DFBF
.text:000000000000DFBF loc_DFBF:                               ; CODE XREF: re_search_internal+517↓j
.text:000000000000DFBF                 mov     r11, [rsp+268h+var_230]
.text:000000000000DFC4                 mov     rax, [rsp+268h+var_220]
.text:000000000000DFC9                 mov     rdi, [rsp+268h+var_1E0]
.text:000000000000DFD1                 mov     rsi, [r11+10h]
.text:000000000000DFD5                 mov     rbx, [rax+28h]
.text:000000000000DFD9                 mov     edx, [r11+0B4h]
.text:000000000000DFE0                 mov     rax, [rax+18h]
.text:000000000000DFE4                 mov     [rsp+268h+var_F0], rdi
.text:000000000000DFEC                 mov     [rsp+268h+var_F8], rdi
.text:000000000000DFF4                 mov     [rsp+268h+var_260], rsi
.text:000000000000DFF9                 lea     rsi, [rsi+1]
.text:000000000000DFFD                 mov     [rsp+268h+var_1B8], rbx
.text:000000000000E005                 movsxd  rcx, edx
.text:000000000000E008                 shr     rax, 16h
.text:000000000000E00C                 mov     [rsp+268h+var_D0], rbx
.text:000000000000E014                 and     eax, 1
.text:000000000000E017                 cmp     rsi, rcx
.text:000000000000E01A                 mov     [rsp+268h+var_B8], edx
.text:000000000000E021                 cmovl   rsi, rcx
.text:000000000000E025                 lea     rcx, [rdi+1]
.text:000000000000E029                 mov     [rsp+268h+var_C0], al
.text:000000000000E030                 mov     [rsp+268h+var_E0], rdi
.text:000000000000E038                 mov     [rsp+268h+var_E8], rdi
.text:000000000000E040                 cmp     rsi, rcx
.text:000000000000E043                 mov     rdi, [rsp+268h+var_268]
.text:000000000000E047                 cmovg   rsi, rcx
.text:000000000000E04B                 test    rbx, rbx
.text:000000000000E04E                 mov     rcx, [rsp+268h+var_1F0]
.text:000000000000E053                 setnz   bl
.text:000000000000E056                 or      eax, ebx
.text:000000000000E058                 mov     [rsp+268h+var_BD], al
.text:000000000000E05F                 movzx   eax, byte ptr [r11+0B0h]
.text:000000000000E067                 mov     [rsp+268h+var_148], rcx
.text:000000000000E06F                 mov     edx, eax
.text:000000000000E071                 shr     al, 3
.text:000000000000E074                 shr     dl, 2
.text:000000000000E077                 and     eax, 1
.text:000000000000E07A                 and     edx, 1
.text:000000000000E07D                 mov     [rsp+268h+var_BE], al
.text:000000000000E084                 mov     [rsp+268h+var_BF], dl
.text:000000000000E08B                 call    re_string_realloc_buffers
.text:000000000000E090                 test    eax, eax
.text:000000000000E092                 mov     [rsp+268h+var_20C], eax
.text:000000000000E096                 jnz     loc_E990
.text:000000000000E09C                 mov     rdi, [rsp+268h+var_230]
.text:000000000000E0A1                 lea     rax, [rdi+0B8h]
.text:000000000000E0A8                 mov     [rsp+268h+var_C8], rax
.text:000000000000E0B0                 movzx   eax, byte ptr [rdi+0B0h]
.text:000000000000E0B7                 mov     byte ptr [rsp+268h+var_260], al
.text:000000000000E0BB                 shr     al, 4
.text:000000000000E0BE                 and     eax, 1
.text:000000000000E0C1                 cmp     [rsp+268h+var_BD], 0
.text:000000000000E0C9                 mov     [rsp+268h+var_BA], al
.text:000000000000E0D0                 jnz     short loc_E0F5
.text:000000000000E0D2                 mov     rsi, [rsp+268h+var_230]
.text:000000000000E0D7                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000E0DC                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000E0E3                 mov     [rsp+268h+var_140], rax
.text:000000000000E0EB                 mov     rax, [rsp+268h+var_1E0]
.text:000000000000E0F3                 jle     short loc_E0F7
.text:000000000000E0F5
.text:000000000000E0F5 loc_E0F5:                               ; CODE XREF: re_search_internal+290↑j
.text:000000000000E0F5                 xor     eax, eax
.text:000000000000E0F7
.text:000000000000E0F7 loc_E0F7:                               ; CODE XREF: re_search_internal+2B3↑j
.text:000000000000E0F7                 mov     [rsp+268h+var_118], rax
.text:000000000000E0FF                 mov     [rsp+268h+var_110], rax
.text:000000000000E107                 mov     rax, [rsp+268h+var_220]
.text:000000000000E10C                 mov     [rsp+268h+var_E0], r13
.text:000000000000E114                 mov     [rsp+268h+var_E8], r13
.text:000000000000E11C                 movzx   eax, byte ptr [rax+38h]
.text:000000000000E120                 mov     byte ptr [rsp+268h+var_260], al
.text:000000000000E124                 shr     al, 7
.text:000000000000E127                 mov     [rsp+268h+var_BB], al
.text:000000000000E12E                 mov     rax, [rsp+268h+var_230]
.text:000000000000E133                 mov     r14, [rax+98h]
.text:000000000000E13A                 mov     eax, [rsp+268h+arg_10]
.text:000000000000E141                 mov     [rsp+268h+var_A0], 0FFFFFFFFFFFFFFFFh
.text:000000000000E14D                 lea     r13, [r14+r14]
.text:000000000000E151                 mov     [rsp+268h+var_A8], eax
.text:000000000000E158                 test    r13, r13
.text:000000000000E15B                 jle     short loc_E1AF
.text:000000000000E15D                 mov     rax, 666666666666666h
.text:000000000000E167                 cmp     r13, rax
.text:000000000000E16A                 jg      loc_EEB0
.text:000000000000E170                 lea     rdi, [r13+r14*8+0]
.text:000000000000E175                 shl     rdi, 3          ; size
.text:000000000000E179                 call    _malloc
.text:000000000000E17E                 mov     rdi, r14
.text:000000000000E181                 mov     r15, rax
.text:000000000000E184                 mov     [rsp+268h+var_70], rax
.text:000000000000E18C                 shl     rdi, 4          ; size
.text:000000000000E190                 call    _malloc
.text:000000000000E195                 test    rax, rax
.text:000000000000E198                 mov     [rsp+268h+var_50], rax
.text:000000000000E1A0                 jz      loc_EEB0
.text:000000000000E1A6                 test    r15, r15
.text:000000000000E1A9                 jz      loc_EEB0
.text:000000000000E1AF
.text:000000000000E1AF loc_E1AF:                               ; CODE XREF: re_search_internal+31B↑j
.text:000000000000E1AF                 cmp     [rsp+268h+arg_0], 1
.text:000000000000E1B8                 mov     [rsp+268h+var_78], r13
.text:000000000000E1C0                 mov     [rsp+268h+var_68], 1
.text:000000000000E1CB                 mov     [rsp+268h+var_58], r13
.text:000000000000E1D3                 jbe     loc_F2F8
.text:000000000000E1D9
.text:000000000000E1D9 loc_E1D9:                               ; CODE XREF: re_search_internal+14C4↓j
.text:000000000000E1D9                 mov     rax, [rsp+268h+var_108]
.text:000000000000E1E1                 mov     rdx, 1FFFFFFFFFFFFFFEh
.text:000000000000E1EB                 cmp     rax, rdx
.text:000000000000E1EE                 ja      loc_EEB0
.text:000000000000E1F4                 lea     rdi, ds:8[rax*8] ; size
.text:000000000000E1FC                 call    _malloc
.text:000000000000E201                 test    rax, rax
.text:000000000000E204                 mov     rdi, rax
.text:000000000000E207                 mov     [rsp+268h+var_90], rax
.text:000000000000E20F                 jz      loc_EF00
.text:000000000000E215
.text:000000000000E215 loc_E215:                               ; CODE XREF: re_search_internal+14D6↓j
.text:000000000000E215                 mov     eax, [rsp+268h+arg_10]
.text:000000000000E21C                 mov     [rsp+268h+var_190], rbp
.text:000000000000E224                 and     eax, 1
.text:000000000000E227                 cmp     eax, 1
.text:000000000000E22A                 sbb     eax, eax
.text:000000000000E22C                 and     eax, 2
.text:000000000000E22F                 add     eax, 4
.text:000000000000E232                 mov     [rsp+268h+var_D8], eax
.text:000000000000E239                 xor     eax, eax
.text:000000000000E23B                 cmp     rbp, r12
.text:000000000000E23E                 setle   al
.text:000000000000E241                 lea     eax, [rax+rax-1]
.text:000000000000E245                 mov     [rsp+268h+var_1BC], eax
.text:000000000000E24C                 mov     rax, r12
.text:000000000000E24F                 cmovle  rax, rbp
.text:000000000000E253                 mov     [rsp+268h+var_1D8], rax
.text:000000000000E25B                 mov     rax, r12
.text:000000000000E25E                 cmovge  rax, rbp
.text:000000000000E262                 cmp     [rsp+268h+var_200], 0
.text:000000000000E268                 mov     [rsp+268h+var_1F8], rax
.text:000000000000E26D                 mov     rax, [rsp+268h+var_230]
.text:000000000000E272                 mov     esi, [rax+0B4h]
.text:000000000000E278                 mov     eax, 8
.text:000000000000E27D                 mov     [rsp+268h+var_1A0], esi
.text:000000000000E284                 jz      short loc_E2BF
.text:000000000000E286                 cmp     esi, 1
.text:000000000000E289                 mov     ecx, 4
.text:000000000000E28E                 jz      short loc_E2AE
.text:000000000000E290                 mov     rax, [rsp+268h+var_220]
.text:000000000000E295                 test    byte ptr [rax+1Ah], 40h
.text:000000000000E299                 jnz     loc_F01E
.text:000000000000E29F                 cmp     [rsp+268h+var_1B8], 0
.text:000000000000E2A8                 jnz     loc_F01E
.text:000000000000E2AE
.text:000000000000E2AE loc_E2AE:                               ; CODE XREF: re_search_internal+44E↑j
.text:000000000000E2AE                                         ; re_search_internal+11E0↓j
.text:000000000000E2AE                 xor     edx, edx
.text:000000000000E2B0                 cmp     rbp, r12
.text:000000000000E2B3                 movzx   eax, bl
.text:000000000000E2B6                 setle   dl
.text:000000000000E2B9                 or      eax, ecx
.text:000000000000E2BB                 add     edx, edx
.text:000000000000E2BD                 or      eax, edx
.text:000000000000E2BF
.text:000000000000E2BF loc_E2BF:                               ; CODE XREF: re_search_internal+444↑j
.text:000000000000E2BF                 cmp     rbp, [rsp+268h+var_1F8]
.text:000000000000E2C4                 setnle  cl
.text:000000000000E2C7                 cmp     rbp, [rsp+268h+var_1D8]
.text:000000000000E2CF                 setl    dl
.text:000000000000E2D2                 or      cl, dl
.text:000000000000E2D4                 jnz     loc_EDA9
.text:000000000000E2DA                 lea     rcx, [rsp+268h+var_190]
.text:000000000000E2E2                 cmp     rbp, r12
.text:000000000000E2E5                 mov     edx, 0
.text:000000000000E2EA                 cmovle  rdx, rcx
.text:000000000000E2EE                 test    rdx, rdx
.text:000000000000E2F1                 mov     [rsp+268h+var_1A8], rdx
.text:000000000000E2F9                 setnz   [rsp+268h+var_199]
.text:000000000000E301                 sub     eax, 4
.text:000000000000E304                 mov     [rsp+268h+var_1C0], eax
.text:000000000000E30B                 lea     rax, [rsp+268h+var_198]
.text:000000000000E313                 mov     [rsp+268h+var_240], rax
.text:000000000000E318
.text:000000000000E318 loc_E318:                               ; CODE XREF: re_search_internal+F63↓j
.text:000000000000E318                 mov     eax, [rsp+268h+var_1C0]
.text:000000000000E31F                 cmp     eax, 4          ; switch 5 cases
.text:000000000000E322                 ja      def_E336        ; jumptable 000000000000E336 default case
.text:000000000000E328                 lea     rcx, jpt_E336
.text:000000000000E32F                 movsxd  rax, ds:(jpt_E336 - 15060h)[rcx+rax*4]
.text:000000000000E333                 add     rax, rcx
.text:000000000000E336                 jmp     rax             ; switch jump
.text:000000000000E336 ; ---------------------------------------------------------------------------
.text:000000000000E338                 align 20h
.text:000000000000E340
.text:000000000000E340 loc_E340:                               ; CODE XREF: re_search_internal+179↑j
.text:000000000000E340                 mov     rax, [rsp+268h+var_230]
.text:000000000000E345                 cmp     qword ptr [rax+98h], 0
.text:000000000000E34D                 setnz   al
.text:000000000000E350                 movzx   eax, al
.text:000000000000E353                 mov     [rsp+268h+var_210], eax
.text:000000000000E357                 jmp     loc_DFBF
.text:000000000000E357 ; ---------------------------------------------------------------------------
.text:000000000000E35C                 align 20h
.text:000000000000E360
.text:000000000000E360 loc_E360:                               ; CODE XREF: re_search_internal+8B↑j
.text:000000000000E360                                         ; re_search_internal+94↑j
.text:000000000000E360                 mov     [rsp+268h+var_200], 0
.text:000000000000E369                 jmp     loc_DEE6
.text:000000000000E36E ; ---------------------------------------------------------------------------
.text:000000000000E36E
.text:000000000000E36E loc_E36E:                               ; CODE XREF: re_search_internal+4F6↑j
.text:000000000000E36E                                         ; DATA XREF: .rodata:jpt_E336↓o
.text:000000000000E36E                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 000000000000E336 case 2
.text:000000000000E373                 jle     short loc_E3CF
.text:000000000000E375                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000E37A                 mov     rdi, [rsp+268h+var_200]
.text:000000000000E37F                 movzx   edx, byte ptr [rax+rbp]
.text:000000000000E383                 lea     rax, [rbp+1]
.text:000000000000E387                 cmp     byte ptr [rdi+rdx], 0
.text:000000000000E38B                 jnz     loc_E418        ; jumptable 000000000000E336 case 4
.text:000000000000E391                 mov     rsi, [rsp+268h+var_200]
.text:000000000000E396                 mov     rcx, [rsp+268h+var_1F8]
.text:000000000000E39B                 mov     rdi, [rsp+268h+var_1F0]
.text:000000000000E3A0                 jmp     short loc_E3BA
.text:000000000000E3A0 ; ---------------------------------------------------------------------------
.text:000000000000E3A2                 align 8
.text:000000000000E3A8
.text:000000000000E3A8 loc_E3A8:                               ; CODE XREF: re_search_internal+580↓j
.text:000000000000E3A8                 movzx   edx, byte ptr [rdi+rax]
.text:000000000000E3AC                 lea     rax, [rax+1]
.text:000000000000E3B0                 cmp     byte ptr [rsi+rdx], 0
.text:000000000000E3B4                 jnz     loc_F551
.text:000000000000E3BA
.text:000000000000E3BA loc_E3BA:                               ; CODE XREF: re_search_internal+560↑j
.text:000000000000E3BA                 cmp     rcx, rax
.text:000000000000E3BD                 mov     rbp, rax
.text:000000000000E3C0                 jnz     short loc_E3A8
.text:000000000000E3C2
.text:000000000000E3C2 loc_E3C2:                               ; CODE XREF: re_search_internal+ABF↓j
.text:000000000000E3C2                 mov     rax, [rsp+268h+var_1F8]
.text:000000000000E3C7                 mov     [rsp+268h+var_190], rax
.text:000000000000E3CF
.text:000000000000E3CF loc_E3CF:                               ; CODE XREF: re_search_internal+533↑j
.text:000000000000E3CF                                         ; re_search_internal+A57↓j
.text:000000000000E3CF                 cmp     [rsp+268h+var_1F8], rbp
.text:000000000000E3D4                 jnz     short loc_E418  ; jumptable 000000000000E336 case 4
.text:000000000000E3D6                 xor     eax, eax
.text:000000000000E3D8                 mov     rsi, [rsp+268h+var_1F8]
.text:000000000000E3DD                 cmp     [rsp+268h+var_1E0], rsi
.text:000000000000E3E5                 jle     short loc_E3F0
.text:000000000000E3E7                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000E3EC                 movzx   eax, byte ptr [rax+rsi]
.text:000000000000E3F0
.text:000000000000E3F0 loc_E3F0:                               ; CODE XREF: re_search_internal+5A5↑j
.text:000000000000E3F0                 mov     rsi, [rsp+268h+var_1B8]
.text:000000000000E3F8                 test    rsi, rsi
.text:000000000000E3FB                 jz      short loc_E401
.text:000000000000E3FD                 movzx   eax, byte ptr [rsi+rax]
.text:000000000000E401
.text:000000000000E401 loc_E401:                               ; CODE XREF: re_search_internal+5BB↑j
.text:000000000000E401                 mov     rdi, [rsp+268h+var_200]
.text:000000000000E406                 cmp     byte ptr [rdi+rax], 0
.text:000000000000E40A                 jz      loc_EDA9
.text:000000000000E410                 mov     rbp, [rsp+268h+var_1F8]
.text:000000000000E415                 nop     dword ptr [rax]
.text:000000000000E418
.text:000000000000E418 loc_E418:                               ; CODE XREF: re_search_internal+4F6↑j
.text:000000000000E418                                         ; re_search_internal+54B↑j ...
.text:000000000000E418                 mov     edx, [rsp+268h+arg_10] ; jumptable 000000000000E336 case 4
.text:000000000000E41F                 mov     rdi, [rsp+268h+var_268]
.text:000000000000E423                 mov     rsi, rbp
.text:000000000000E426                 call    re_string_reconstruct
.text:000000000000E42B                 test    eax, eax
.text:000000000000E42D                 mov     [rsp+268h+var_20C], eax
.text:000000000000E431                 jnz     loc_E990
.text:000000000000E437                 cmp     [rsp+268h+var_1A0], 1
.text:000000000000E43F                 jz      short loc_E45D
.text:000000000000E441                 cmp     [rsp+268h+var_118], 0
.text:000000000000E44A                 jz      short loc_E45D
.text:000000000000E44C                 mov     rax, [rsp+268h+var_138]
.text:000000000000E454                 cmp     dword ptr [rax], 0FFFFFFFFh
.text:000000000000E457                 jz      loc_ED81
.text:000000000000E45D
.text:000000000000E45D loc_E45D:                               ; CODE XREF: re_search_internal+5FF↑j
.text:000000000000E45D                                         ; re_search_internal+60A↑j
.text:000000000000E45D                 mov     rbx, [rsp+268h+var_B0]
.text:000000000000E465                 movzx   eax, byte ptr [rsp+268h+var_210]
.text:000000000000E46A                 mov     [rsp+268h+var_68], 0
.text:000000000000E475                 mov     [rsp+268h+var_80], 0
.text:000000000000E481                 mov     [rsp+268h+var_88], 0
.text:000000000000E48D                 mov     [rsp+268h+var_198], 0
.text:000000000000E498                 mov     r14, [rbx+48h]
.text:000000000000E49C                 and     eax, 1
.text:000000000000E49F                 mov     [rsp+268h+var_19A], al
.text:000000000000E4A6                 mov     rax, [rsp+268h+var_100]
.text:000000000000E4AE                 cmp     byte ptr [r14+68h], 0
.text:000000000000E4B3                 mov     [rsp+268h+var_260], rax
.text:000000000000E4B8                 js      loc_EE30
.text:000000000000E4BE
.text:000000000000E4BE loc_E4BE:                               ; CODE XREF: re_search_internal+1013↓j
.text:000000000000E4BE                                         ; re_search_internal+1177↓j ...
.text:000000000000E4BE                 mov     rax, [rsp+268h+var_90]
.text:000000000000E4C6                 test    rax, rax
.text:000000000000E4C9                 jz      short loc_E4E2
.text:000000000000E4CB                 cmp     qword ptr [rbx+98h], 0
.text:000000000000E4D3                 mov     rdi, [rsp+268h+var_260]
.text:000000000000E4D8                 mov     [rax+rdi*8], r14
.text:000000000000E4DC                 jnz     loc_F3CB
.text:000000000000E4E2
.text:000000000000E4E2 loc_E4E2:                               ; CODE XREF: re_search_internal+689↑j
.text:000000000000E4E2                 movzx   eax, [rsp+268h+var_199]
.text:000000000000E4EA                 mov     byte ptr [rsp+268h+var_250], al
.text:000000000000E4EE                 movzx   eax, byte ptr [r14+68h]
.text:000000000000E4F3
.text:000000000000E4F3 loc_E4F3:                               ; CODE XREF: re_search_internal+15C1↓j
.text:000000000000E4F3                 test    al, 10h
.text:000000000000E4F5                 mov     [rsp+268h+var_248], 0FFFFFFFFFFFFFFFFh
.text:000000000000E4FE                 mov     [rsp+268h+var_238], 0
.text:000000000000E507                 jnz     loc_F390
.text:000000000000E50D
.text:000000000000E50D loc_E50D:                               ; CODE XREF: re_search_internal+1576↓j
.text:000000000000E50D                                         ; re_search_internal+15E4↓j
.text:000000000000E50D                 mov     rax, [rsp+268h+var_1A8]
.text:000000000000E515                 mov     r8, [rsp+268h+var_100]
.text:000000000000E51D                 mov     [rsp+268h+var_218], rax
.text:000000000000E522                 lea     rax, [rsp+268h+var_188]
.text:000000000000E52A                 mov     [rsp+268h+var_208], rax
.text:000000000000E52F                 lea     rax, [rsp+268h+var_194]
.text:000000000000E537                 mov     [rsp+268h+var_1E8], rax
.text:000000000000E53F                 jmp     short loc_E59C
.text:000000000000E53F ; ---------------------------------------------------------------------------
.text:000000000000E541                 align 8
.text:000000000000E548
.text:000000000000E548 loc_E548:                               ; CODE XREF: re_search_internal+7E7↓j
.text:000000000000E548                                         ; re_search_internal+1513↓j ...
.text:000000000000E548                 cmp     r14, r13
.text:000000000000E54B                 mov     r8, [rsp+268h+var_100]
.text:000000000000E553                 setz    al
.text:000000000000E556                 and     byte ptr [rsp+268h+var_250], al
.text:000000000000E55A                 movzx   eax, byte ptr [r13+68h]
.text:000000000000E55F                 cmovz   rbx, [rsp+268h+var_260]
.text:000000000000E565                 test    al, 10h
.text:000000000000E567                 mov     [rsp+268h+var_260], rbx
.text:000000000000E56C                 jz      short loc_E599
.text:000000000000E56E                 test    al, al
.text:000000000000E570                 js      loc_EA30
.text:000000000000E576
.text:000000000000E576 loc_E576:                               ; CODE XREF: re_search_internal+C17↓j
.text:000000000000E576                 mov     eax, [rsp+268h+var_210]
.text:000000000000E57A                 mov     [rsp+268h+var_248], r8
.text:000000000000E57F                 test    eax, eax
.text:000000000000E581                 jz      loc_E6A6
.text:000000000000E587                 mov     [rsp+268h+var_238], 1
.text:000000000000E590                 mov     [rsp+268h+var_218], 0
.text:000000000000E599
.text:000000000000E599 loc_E599:                               ; CODE XREF: re_search_internal+72C↑j
.text:000000000000E599                                         ; re_search_internal+C11↓j
.text:000000000000E599                 mov     r14, r13
.text:000000000000E59C
.text:000000000000E59C loc_E59C:                               ; CODE XREF: re_search_internal+6FF↑j
.text:000000000000E59C                 cmp     [rsp+268h+var_E0], r8
.text:000000000000E5A4                 jle     loc_E694
.text:000000000000E5AA                 mov     rax, [rsp+268h+var_108]
.text:000000000000E5B2                 lea     rbx, [r8+1]
.text:000000000000E5B6                 cmp     rbx, rax
.text:000000000000E5B9                 jge     loc_EA60
.text:000000000000E5BF
.text:000000000000E5BF loc_E5BF:                               ; CODE XREF: re_search_internal+C28↓j
.text:000000000000E5BF                 mov     rax, [rsp+268h+var_118]
.text:000000000000E5C7                 cmp     rbx, rax
.text:000000000000E5CA                 jge     loc_ED50
.text:000000000000E5D0
.text:000000000000E5D0 loc_E5D0:                               ; CODE XREF: re_search_internal+F18↓j
.text:000000000000E5D0                 test    byte ptr [r14+68h], 20h
.text:000000000000E5D5                 jnz     loc_EAA0
.text:000000000000E5DB
.text:000000000000E5DB loc_E5DB:                               ; CODE XREF: re_search_internal+C56↓j
.text:000000000000E5DB                                         ; re_search_internal+FA6↓j
.text:000000000000E5DB                 lea     rax, [r8+1]
.text:000000000000E5DF                 mov     [rsp+268h+var_100], rax
.text:000000000000E5E7                 mov     rax, [rsp+268h+var_140]
.text:000000000000E5EF                 movzx   r13d, byte ptr [rax+r8]
.text:000000000000E5F4
.text:000000000000E5F4 loc_E5F4:                               ; CODE XREF: re_search_internal+1097↓j
.text:000000000000E5F4                 mov     rax, [r14+58h]
.text:000000000000E5F8                 test    rax, rax
.text:000000000000E5FB                 jz      loc_ED10
.text:000000000000E601                 mov     r13, [rax+r13*8]
.text:000000000000E605
.text:000000000000E605 loc_E605:                               ; CODE XREF: re_search_internal+F09↓j
.text:000000000000E605                                         ; re_search_internal+FB5↓j
.text:000000000000E605                 cmp     [rsp+268h+var_90], 0
.text:000000000000E60E                 jz      short loc_E624
.text:000000000000E610
.text:000000000000E610 loc_E610:                               ; CODE XREF: re_search_internal+FE3↓j
.text:000000000000E610                 mov     rsi, [rsp+268h+var_268]
.text:000000000000E614                 mov     rdi, [rsp+268h+var_240]
.text:000000000000E619                 mov     rdx, r13
.text:000000000000E61C                 call    merge_state_with_log
.text:000000000000E621                 mov     r13, rax
.text:000000000000E624
.text:000000000000E624 loc_E624:                               ; CODE XREF: re_search_internal+7CE↑j
.text:000000000000E624                 test    r13, r13
.text:000000000000E627                 jnz     loc_E548
.text:000000000000E62D                 mov     ecx, [rsp+268h+var_198]
.text:000000000000E634                 mov     rdi, [rsp+268h+var_90]
.text:000000000000E63C                 test    ecx, ecx
.text:000000000000E63E                 jnz     loc_EF00
.text:000000000000E644                 test    rdi, rdi
.text:000000000000E647                 jz      short loc_E694
.text:000000000000E649                 movzx   eax, [rsp+268h+var_19A]
.text:000000000000E651                 xor     eax, 1
.text:000000000000E654                 test    byte ptr [rsp+268h+var_238], al
.text:000000000000E658                 jnz     short loc_E694
.text:000000000000E65A
.text:000000000000E65A loc_E65A:                               ; CODE XREF: re_search_internal+BE8↓j
.text:000000000000E65A                 mov     rsi, [rsp+268h+var_88]
.text:000000000000E662                 mov     rax, [rsp+268h+var_100]
.text:000000000000E66A                 xor     ecx, ecx
.text:000000000000E66C                 jmp     short loc_E683
.text:000000000000E66C ; ---------------------------------------------------------------------------
.text:000000000000E66E                 align 10h
.text:000000000000E670
.text:000000000000E670 loc_E670:                               ; CODE XREF: re_search_internal+84A↓j
.text:000000000000E670                 cmp     qword ptr [rdi+rdx*8], 0
.text:000000000000E675                 mov     rax, rdx
.text:000000000000E678                 mov     ecx, 1
.text:000000000000E67D                 jnz     loc_E9F0
.text:000000000000E683
.text:000000000000E683 loc_E683:                               ; CODE XREF: re_search_internal+82C↑j
.text:000000000000E683                 lea     rdx, [rax+1]
.text:000000000000E687                 cmp     rsi, rdx
.text:000000000000E68A                 jge     short loc_E670
.text:000000000000E68C                 test    cl, cl
.text:000000000000E68E                 jnz     loc_F55E
.text:000000000000E694
.text:000000000000E694 loc_E694:                               ; CODE XREF: re_search_internal+764↑j
.text:000000000000E694                                         ; re_search_internal+807↑j ...
.text:000000000000E694                 mov     rax, [rsp+268h+var_218]
.text:000000000000E699                 test    rax, rax
.text:000000000000E69C                 jz      short loc_E6A6
.text:000000000000E69E                 mov     rdi, [rsp+268h+var_260]
.text:000000000000E6A3                 add     [rax], rdi
.text:000000000000E6A6
.text:000000000000E6A6 loc_E6A6:                               ; CODE XREF: re_search_internal+741↑j
.text:000000000000E6A6                                         ; re_search_internal+85C↑j ...
.text:000000000000E6A6                 mov     rax, [rsp+268h+var_248]
.text:000000000000E6AB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000E6AF                 jz      loc_ED70
.text:000000000000E6B5                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000E6B9                 jz      loc_EEB0
.text:000000000000E6BF                 mov     rax, [rsp+268h+var_248]
.text:000000000000E6C4                 mov     [rsp+268h+var_A0], rax
.text:000000000000E6CC                 mov     rax, [rsp+268h+var_220]
.text:000000000000E6D1                 test    byte ptr [rax+38h], 10h
.text:000000000000E6D5                 jnz     loc_EE90
.text:000000000000E6DB                 cmp     [rsp+268h+arg_0], 1
.text:000000000000E6E4                 jbe     loc_EFDC
.text:000000000000E6EA                 mov     rcx, [rsp+268h+var_248]
.text:000000000000E6EF                 mov     rbx, [rsp+268h+var_90]
.text:000000000000E6F7                 mov     rdi, [rsp+268h+var_268]
.text:000000000000E6FB                 mov     rax, [rbx+rcx*8]
.text:000000000000E6FF                 mov     rsi, [rax+10h]
.text:000000000000E703                 lea     rdx, [rax+18h]
.text:000000000000E707                 call    check_halt_state_context_isra_20
.text:000000000000E70C                 mov     r13, rax
.text:000000000000E70F                 mov     [rsp+268h+var_98], rax
.text:000000000000E717                 mov     rax, [rsp+268h+var_230]
.text:000000000000E71C                 test    byte ptr [rax+0B0h], 1
.text:000000000000E723                 jnz     short loc_E740
.text:000000000000E725                 mov     rax, [rsp+268h+var_230]
.text:000000000000E72A                 cmp     qword ptr [rax+98h], 0
.text:000000000000E732                 jz      loc_F0CC
.text:000000000000E738
.text:000000000000E738 loc_E738:                               ; CODE XREF: re_search_internal+11D9↓j
.text:000000000000E738                 mov     r13, [rsp+268h+var_98]
.text:000000000000E740
.text:000000000000E740 loc_E740:                               ; CODE XREF: re_search_internal+8E3↑j
.text:000000000000E740                 mov     rsi, 1FFFFFFFFFFFFFFEh
.text:000000000000E74A                 cmp     [rsp+268h+var_248], rsi
.text:000000000000E74F                 mov     r15, [rsp+268h+var_B0]
.text:000000000000E757                 ja      loc_F3BB
.text:000000000000E75D                 mov     rax, [rsp+268h+var_248]
.text:000000000000E762                 add     rax, 1
.text:000000000000E766                 lea     rbx, ds:0[rax*8]
.text:000000000000E76E                 mov     [rsp+268h+var_260], rax
.text:000000000000E773                 mov     rdi, rbx        ; size
.text:000000000000E776                 call    _malloc
.text:000000000000E77B                 test    rax, rax
.text:000000000000E77E                 mov     r12, rax
.text:000000000000E781                 jz      loc_EEB0
.text:000000000000E787                 cmp     qword ptr [r15+98h], 0
.text:000000000000E78F                 jz      loc_F025
.text:000000000000E795                 mov     rdi, rbx        ; size
.text:000000000000E798                 call    _malloc
.text:000000000000E79D                 test    rax, rax
.text:000000000000E7A0                 mov     rbp, rax
.text:000000000000E7A3                 jz      loc_EEA8
.text:000000000000E7A9                 mov     r14, [rsp+268h+var_248]
.text:000000000000E7AE                 lea     rbx, [rsp+268h+var_188]
.text:000000000000E7B6                 mov     [rsp+268h+var_258], r15
.text:000000000000E7BB                 mov     [rsp+268h+var_250], rax
.text:000000000000E7C0
.text:000000000000E7C0 loc_E7C0:                               ; CODE XREF: re_search_internal+A4D↓j
.text:000000000000E7C0                 mov     rax, [rsp+268h+var_260]
.text:000000000000E7C5                 xor     esi, esi        ; c
.text:000000000000E7C7                 mov     rdi, rbp        ; s
.text:000000000000E7CA                 lea     rdx, ds:0[rax*8] ; n
.text:000000000000E7D2                 call    _memset
.text:000000000000E7D7                 pxor    xmm0, xmm0
.text:000000000000E7DB                 mov     qword ptr [rsp+268h+var_188], r12
.text:000000000000E7E3                 mov     qword ptr [rsp+268h+var_188+8], rbp
.text:000000000000E7EB                 mov     [rsp+268h+var_178], r13
.text:000000000000E7F3                 mov     rsi, rbx
.text:000000000000E7F6                 mov     [rsp+268h+var_170], r14
.text:000000000000E7FE                 mov     rdi, [rsp+268h+var_268]
.text:000000000000E802                 movaps  xmmword ptr [rbx+20h], xmm0
.text:000000000000E806                 mov     qword ptr [rbx+30h], 0
.text:000000000000E80E                 call    sift_states_backward
.text:000000000000E813                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:000000000000E81B                 mov     r15d, eax
.text:000000000000E81E                 call    _free
.text:000000000000E823                 test    r15d, r15d
.text:000000000000E826                 jnz     loc_F444
.text:000000000000E82C                 cmp     qword ptr [r12], 0
.text:000000000000E831                 jnz     loc_F4A3
.text:000000000000E837                 cmp     qword ptr [rbp+0], 0
.text:000000000000E83C                 jnz     loc_F4A3
.text:000000000000E842                 mov     rdx, [rsp+268h+var_90]
.text:000000000000E84A                 nop     word ptr [rax+rax+00h]
.text:000000000000E850
.text:000000000000E850 loc_E850:                               ; CODE XREF: re_search_internal+A25↓j
.text:000000000000E850                                         ; re_search_internal+A2B↓j
.text:000000000000E850                 sub     r14, 1
.text:000000000000E854                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:000000000000E858                 jz      loc_F31B
.text:000000000000E85E                 mov     rax, [rdx+r14*8]
.text:000000000000E862                 test    rax, rax
.text:000000000000E865                 jz      short loc_E850
.text:000000000000E867                 test    byte ptr [rax+68h], 10h
.text:000000000000E86B                 jz      short loc_E850
.text:000000000000E86D                 mov     rsi, [rax+10h]
.text:000000000000E871                 mov     rdi, [rsp+268h+var_268]
.text:000000000000E875                 lea     rdx, [rax+18h]
.text:000000000000E879                 mov     rcx, r14
.text:000000000000E87C                 call    check_halt_state_context_isra_20
.text:000000000000E881                 mov     r13, rax
.text:000000000000E884                 lea     rax, [r14+1]
.text:000000000000E888                 mov     [rsp+268h+var_260], rax
.text:000000000000E88D                 jmp     loc_E7C0
.text:000000000000E892 ; ---------------------------------------------------------------------------
.text:000000000000E892
.text:000000000000E892 loc_E892:                               ; CODE XREF: re_search_internal+4F6↑j
.text:000000000000E892                                         ; DATA XREF: .rodata:jpt_E336↓o
.text:000000000000E892                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 000000000000E336 case 3
.text:000000000000E897                 jle     loc_E3CF
.text:000000000000E89D                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000E8A2                 mov     rdi, [rsp+268h+var_1B8]
.text:000000000000E8AA                 mov     rsi, [rsp+268h+var_200]
.text:000000000000E8AF                 movzx   eax, byte ptr [rax+rbp]
.text:000000000000E8B3                 movzx   edx, byte ptr [rdi+rax]
.text:000000000000E8B7                 lea     rax, [rbp+1]
.text:000000000000E8BB                 cmp     byte ptr [rsi+rdx], 0
.text:000000000000E8BF                 jnz     loc_E418        ; jumptable 000000000000E336 case 4
.text:000000000000E8C5                 mov     rsi, [rsp+268h+var_200]
.text:000000000000E8CA                 mov     rdi, [rsp+268h+var_1B8]
.text:000000000000E8D2                 mov     rcx, [rsp+268h+var_1F8]
.text:000000000000E8D7                 mov     r8, [rsp+268h+var_1F0]
.text:000000000000E8DC                 jmp     short loc_E8F7
.text:000000000000E8DC ; ---------------------------------------------------------------------------
.text:000000000000E8DE                 align 20h
.text:000000000000E8E0
.text:000000000000E8E0 loc_E8E0:                               ; CODE XREF: re_search_internal+ABD↓j
.text:000000000000E8E0                 movzx   eax, byte ptr [r8+rax]
.text:000000000000E8E5                 movzx   edx, byte ptr [rdi+rax]
.text:000000000000E8E9                 lea     rax, [rbp+1]
.text:000000000000E8ED                 cmp     byte ptr [rsi+rdx], 0
.text:000000000000E8F1                 jnz     loc_F551
.text:000000000000E8F7
.text:000000000000E8F7 loc_E8F7:                               ; CODE XREF: re_search_internal+A9C↑j
.text:000000000000E8F7                 cmp     rcx, rax
.text:000000000000E8FA                 mov     rbp, rax
.text:000000000000E8FD                 jnz     short loc_E8E0
.text:000000000000E8FF                 jmp     loc_E3C2
.text:000000000000E904 ; ---------------------------------------------------------------------------
.text:000000000000E904
.text:000000000000E904 loc_E904:                               ; CODE XREF: re_search_internal+4F6↑j
.text:000000000000E904                                         ; DATA XREF: .rodata:jpt_E336↓o
.text:000000000000E904                 cmp     [rsp+268h+var_1D8], rbp ; jumptable 000000000000E336 cases 0,1
.text:000000000000E90C                 jg      loc_EDA9
.text:000000000000E912                 xor     ecx, ecx
.text:000000000000E914                 mov     rax, rbp
.text:000000000000E917                 mov     rdi, [rsp+268h+var_200]
.text:000000000000E91C                 mov     rsi, [rsp+268h+var_1B8]
.text:000000000000E924                 mov     r9, [rsp+268h+var_1D8]
.text:000000000000E92C                 mov     r10, [rsp+268h+var_1F0]
.text:000000000000E931                 mov     r8, [rsp+268h+var_1E0]
.text:000000000000E939                 jmp     short loc_E952
.text:000000000000E939 ; ---------------------------------------------------------------------------
.text:000000000000E93B                 align 20h
.text:000000000000E940
.text:000000000000E940 loc_E940:                               ; CODE XREF: re_search_internal+B2B↓j
.text:000000000000E940                 sub     rax, 1
.text:000000000000E944                 mov     ecx, 1
.text:000000000000E949                 cmp     rax, r9
.text:000000000000E94C                 jl      loc_F330
.text:000000000000E952
.text:000000000000E952 loc_E952:                               ; CODE XREF: re_search_internal+AF9↑j
.text:000000000000E952                 xor     edx, edx
.text:000000000000E954                 cmp     r8, rax
.text:000000000000E957                 jle     short loc_E95E
.text:000000000000E959                 movzx   edx, byte ptr [r10+rax]
.text:000000000000E95E
.text:000000000000E95E loc_E95E:                               ; CODE XREF: re_search_internal+B17↑j
.text:000000000000E95E                 test    rsi, rsi
.text:000000000000E961                 jz      short loc_E967
.text:000000000000E963                 movzx   edx, byte ptr [rsi+rdx]
.text:000000000000E967
.text:000000000000E967 loc_E967:                               ; CODE XREF: re_search_internal+B21↑j
.text:000000000000E967                 cmp     byte ptr [rdi+rdx], 0
.text:000000000000E96B                 jz      short loc_E940
.text:000000000000E96D                 test    cl, cl
.text:000000000000E96F                 jz      loc_E418        ; jumptable 000000000000E336 case 4
.text:000000000000E975                 mov     [rsp+268h+var_190], rax
.text:000000000000E97D                 mov     rbp, rax
.text:000000000000E980                 jmp     loc_E418        ; jumptable 000000000000E336 case 4
.text:000000000000E980 ; ---------------------------------------------------------------------------
.text:000000000000E985                 align 8
.text:000000000000E988
.text:000000000000E988 loc_E988:                               ; CODE XREF: re_search_internal+1162↓j
.text:000000000000E988                 mov     [rsp+268h+var_20C], eax
.text:000000000000E98C                 nop     dword ptr [rax+00h]
.text:000000000000E990
.text:000000000000E990 loc_E990:                               ; CODE XREF: re_search_internal+256↑j
.text:000000000000E990                                         ; re_search_internal+5F1↑j ...
.text:000000000000E990                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:000000000000E998
.text:000000000000E998 loc_E998:                               ; CODE XREF: re_search_internal+F79↓j
.text:000000000000E998                                         ; re_search_internal+1080↓j ...
.text:000000000000E998                 call    _free
.text:000000000000E99D                 mov     rax, [rsp+268h+var_230]
.text:000000000000E9A2                 cmp     qword ptr [rax+98h], 0
.text:000000000000E9AA                 jnz     loc_F2D0
.text:000000000000E9B0
.text:000000000000E9B0 loc_E9B0:                               ; CODE XREF: re_search_internal+14B3↓j
.text:000000000000E9B0                 mov     rdi, [rsp+268h+var_268]
.text:000000000000E9B4                 call    re_string_destruct
.text:000000000000E9B9
.text:000000000000E9B9 loc_E9B9:                               ; CODE XREF: re_search_internal+156↑j
.text:000000000000E9B9                                         ; re_search_internal+F88↓j
.text:000000000000E9B9                 mov     rsi, [rsp+268h+var_40]
.text:000000000000E9C1                 xor     rsi, fs:28h
.text:000000000000E9CA                 mov     eax, [rsp+268h+var_20C]
.text:000000000000E9CE                 jnz     loc_F56B
.text:000000000000E9D4                 add     rsp, 238h
.text:000000000000E9DB                 pop     rbx
.text:000000000000E9DC                 pop     rbp
.text:000000000000E9DD                 pop     r12
.text:000000000000E9DF                 pop     r13
.text:000000000000E9E1                 pop     r14
.text:000000000000E9E3                 pop     r15
.text:000000000000E9E5                 retn
.text:000000000000E9E5 ; ---------------------------------------------------------------------------
.text:000000000000E9E6                 align 10h
.text:000000000000E9F0
.text:000000000000E9F0 loc_E9F0:                               ; CODE XREF: re_search_internal+83D↑j
.text:000000000000E9F0                 mov     rsi, [rsp+268h+var_268]
.text:000000000000E9F4                 mov     rdi, [rsp+268h+var_240]
.text:000000000000E9F9                 mov     [rsp+268h+var_100], rdx
.text:000000000000EA01                 xor     edx, edx
.text:000000000000EA03                 call    merge_state_with_log
.text:000000000000EA08                 mov     edx, [rsp+268h+var_198]
.text:000000000000EA0F                 test    edx, edx
.text:000000000000EA11                 jnz     loc_F34D
.text:000000000000EA17                 test    rax, rax
.text:000000000000EA1A                 jnz     loc_F360
.text:000000000000EA20                 mov     rdi, [rsp+268h+var_90]
.text:000000000000EA28                 jmp     loc_E65A
.text:000000000000EA28 ; ---------------------------------------------------------------------------
.text:000000000000EA2D                 align 10h
.text:000000000000EA30
.text:000000000000EA30 loc_EA30:                               ; CODE XREF: re_search_internal+730↑j
.text:000000000000EA30                 mov     rsi, [r13+10h]
.text:000000000000EA34                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EA38                 lea     rdx, [r13+18h]
.text:000000000000EA3C                 mov     rcx, r8
.text:000000000000EA3F                 mov     [rsp+268h+var_258], r8
.text:000000000000EA44                 call    check_halt_state_context_isra_20
.text:000000000000EA49                 test    rax, rax
.text:000000000000EA4C                 mov     r8, [rsp+268h+var_258]
.text:000000000000EA51                 jz      loc_E599
.text:000000000000EA57                 jmp     loc_E576
.text:000000000000EA57 ; ---------------------------------------------------------------------------
.text:000000000000EA5C                 align 20h
.text:000000000000EA60
.text:000000000000EA60 loc_EA60:                               ; CODE XREF: re_search_internal+779↑j
.text:000000000000EA60                 cmp     rax, [rsp+268h+var_F0]
.text:000000000000EA68                 jge     loc_E5BF
.text:000000000000EA6E
.text:000000000000EA6E loc_EA6E:                               ; CODE XREF: re_search_internal+F1E↓j
.text:000000000000EA6E                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EA72                 lea     esi, [rbx+1]
.text:000000000000EA75                 call    extend_buffers
.text:000000000000EA7A                 test    eax, eax
.text:000000000000EA7C                 mov     [rsp+268h+var_198], eax
.text:000000000000EA83                 jnz     loc_F368
.text:000000000000EA89                 test    byte ptr [r14+68h], 20h
.text:000000000000EA8E                 mov     r8, [rsp+268h+var_100]
.text:000000000000EA96                 jz      loc_E5DB
.text:000000000000EA9C                 nop     dword ptr [rax+00h]
.text:000000000000EAA0
.text:000000000000EAA0 loc_EAA0:                               ; CODE XREF: re_search_internal+795↑j
.text:000000000000EAA0                 cmp     qword ptr [r14+10h], 0
.text:000000000000EAA5                 mov     r13, [rsp+268h+var_B0]
.text:000000000000EAAD                 jle     loc_EDDB
.text:000000000000EAB3                 lea     rax, [r13+0D8h]
.text:000000000000EABA                 xor     r12d, r12d
.text:000000000000EABD                 mov     [rsp+268h+var_1C8], rbx
.text:000000000000EAC5                 mov     rbx, r12
.text:000000000000EAC8                 mov     r12, r8
.text:000000000000EACB                 mov     [rsp+268h+var_228], rax
.text:000000000000EAD0                 jmp     loc_EC28
.text:000000000000EAD0 ; ---------------------------------------------------------------------------
.text:000000000000EAD5                 align 8
.text:000000000000EAD8
.text:000000000000EAD8 loc_EAD8:                               ; CODE XREF: re_search_internal+E3B↓j
.text:000000000000EAD8                 test    al, 1
.text:000000000000EADA                 jz      loc_EC1A
.text:000000000000EAE0                 and     ecx, 8
.text:000000000000EAE3                 jnz     loc_EC1A
.text:000000000000EAE9
.text:000000000000EAE9 loc_EAE9:                               ; CODE XREF: re_search_internal+E44↓j
.text:000000000000EAE9                                         ; re_search_internal+E4C↓j
.text:000000000000EAE9                 test    dl, 20h
.text:000000000000EAEC                 jz      short loc_EAF6
.text:000000000000EAEE                 test    al, 2
.text:000000000000EAF0                 jz      loc_EC1A
.text:000000000000EAF6
.text:000000000000EAF6 loc_EAF6:                               ; CODE XREF: re_search_internal+CAC↑j
.text:000000000000EAF6                 and     edx, 80h
.text:000000000000EAFC                 jz      short loc_EB10
.text:000000000000EAFE                 test    al, 8
.text:000000000000EB00                 jz      loc_EC1A
.text:000000000000EB06                 db      2Eh
.text:000000000000EB06                 nop     word ptr [rax+rax+00000000h]
.text:000000000000EB10
.text:000000000000EB10 loc_EB10:                               ; CODE XREF: re_search_internal+CBC↑j
.text:000000000000EB10                                         ; re_search_internal+E11↓j
.text:000000000000EB10                 mov     rcx, [rsp+268h+var_268]
.text:000000000000EB14                 mov     rsi, [rsp+268h+var_228]
.text:000000000000EB19                 mov     r8, r12
.text:000000000000EB1C                 mov     rdx, r15
.text:000000000000EB1F                 mov     rdi, rbp
.text:000000000000EB22                 call    check_node_accept_bytes_isra_31
.text:000000000000EB27                 test    eax, eax
.text:000000000000EB29                 jz      loc_EC12
.text:000000000000EB2F                 movsxd  rbp, eax
.text:000000000000EB32                 add     rbp, [rsp+268h+var_100]
.text:000000000000EB3A                 cmp     [rsp+268h+var_68], eax
.text:000000000000EB41                 cmovge  eax, [rsp+268h+var_68]
.text:000000000000EB49                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EB4D                 mov     rsi, rbp
.text:000000000000EB50                 mov     [rsp+268h+var_68], eax
.text:000000000000EB57                 call    clean_state_log_if_needed
.text:000000000000EB5C                 test    eax, eax
.text:000000000000EB5E                 mov     [rsp+268h+var_194], eax
.text:000000000000EB65                 jnz     loc_EE00
.text:000000000000EB6B                 mov     rax, [r13+18h]
.text:000000000000EB6F                 lea     r12, ds:0[rbp*8]
.text:000000000000EB77                 mov     rax, [rax+r15*8]
.text:000000000000EB7B                 mov     r15, [rsp+268h+var_90]
.text:000000000000EB83                 lea     rdx, [rax+rax*2]
.text:000000000000EB87                 mov     rax, [r13+30h]
.text:000000000000EB8B                 add     r15, r12
.text:000000000000EB8E                 lea     rdx, [rax+rdx*8]
.text:000000000000EB92                 mov     rax, [r15]
.text:000000000000EB95                 test    rax, rax
.text:000000000000EB98                 jz      loc_EC98
.text:000000000000EB9E                 mov     rsi, [rax+50h]
.text:000000000000EBA2                 mov     rdi, [rsp+268h+var_208]
.text:000000000000EBA7                 call    re_node_set_init_union
.text:000000000000EBAC                 test    eax, eax
.text:000000000000EBAE                 mov     [rsp+268h+var_194], eax
.text:000000000000EBB5                 jnz     loc_EE00
.text:000000000000EBBB                 mov     edx, [rsp+268h+var_A8]
.text:000000000000EBC2                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EBC6                 lea     rsi, [rbp-1]
.text:000000000000EBCA                 call    re_string_context_at
.text:000000000000EBCF                 mov     rdx, [rsp+268h+var_208]
.text:000000000000EBD4                 mov     rdi, [rsp+268h+var_1E8]
.text:000000000000EBDC                 mov     ecx, eax
.text:000000000000EBDE                 add     r12, [rsp+268h+var_90]
.text:000000000000EBE6                 mov     rsi, r13
.text:000000000000EBE9                 call    re_acquire_state_context
.text:000000000000EBEE                 mov     rdi, [rsp+268h+var_178] ; ptr
.text:000000000000EBF6                 mov     [r12], rax
.text:000000000000EBFA                 call    _free
.text:000000000000EBFF                 mov     rdi, [rsp+268h+var_90]
.text:000000000000EC07                 cmp     qword ptr [rdi+rbp*8], 0
.text:000000000000EC0C                 jz      loc_ECF1
.text:000000000000EC12
.text:000000000000EC12 loc_EC12:                               ; CODE XREF: re_search_internal+CE9↑j
.text:000000000000EC12                                         ; re_search_internal+EAB↓j ...
.text:000000000000EC12                 mov     r12, [rsp+268h+var_100]
.text:000000000000EC1A
.text:000000000000EC1A loc_EC1A:                               ; CODE XREF: re_search_internal+C9A↑j
.text:000000000000EC1A                                         ; re_search_internal+CA3↑j ...
.text:000000000000EC1A                 add     rbx, 1
.text:000000000000EC1E                 cmp     rbx, [r14+10h]
.text:000000000000EC22                 jge     loc_EDD0
.text:000000000000EC28
.text:000000000000EC28 loc_EC28:                               ; CODE XREF: re_search_internal+C90↑j
.text:000000000000EC28                 mov     rax, [r14+18h]
.text:000000000000EC2C                 mov     rbp, [r13+0]
.text:000000000000EC30                 mov     r15, [rax+rbx*8]
.text:000000000000EC34                 mov     rax, r15
.text:000000000000EC37                 shl     rax, 4
.text:000000000000EC3B                 add     rax, rbp
.text:000000000000EC3E                 test    byte ptr [rax+0Ah], 10h
.text:000000000000EC42                 jz      short loc_EC1A
.text:000000000000EC44                 mov     ecx, [rax+8]
.text:000000000000EC47                 test    ecx, 3FF00h
.text:000000000000EC4D                 mov     dword ptr [rsp+268h+var_258], ecx
.text:000000000000EC51                 jz      loc_EB10
.text:000000000000EC57                 mov     edx, [rsp+268h+var_A8]
.text:000000000000EC5E                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EC62                 mov     rsi, r12
.text:000000000000EC65                 call    re_string_context_at
.text:000000000000EC6A                 mov     ecx, dword ptr [rsp+268h+var_258]
.text:000000000000EC6E                 shr     ecx, 8
.text:000000000000EC71                 mov     edx, ecx
.text:000000000000EC73                 and     dx, 3FFh
.text:000000000000EC78                 test    cl, 4
.text:000000000000EC7B                 jnz     loc_EAD8
.text:000000000000EC81                 and     ecx, 8
.text:000000000000EC84                 jz      loc_EAE9
.text:000000000000EC8A                 test    al, 1
.text:000000000000EC8C                 jz      loc_EAE9
.text:000000000000EC92                 jmp     short loc_EC1A
.text:000000000000EC92 ; ---------------------------------------------------------------------------
.text:000000000000EC94                 align 8
.text:000000000000EC98
.text:000000000000EC98 loc_EC98:                               ; CODE XREF: re_search_internal+D58↑j
.text:000000000000EC98                 movdqu  xmm0, xmmword ptr [rdx]
.text:000000000000EC9C                 lea     rsi, [rbp-1]
.text:000000000000ECA0                 mov     rdi, [rsp+268h+var_268]
.text:000000000000ECA4                 movaps  [rsp+268h+var_188], xmm0
.text:000000000000ECAC                 mov     rax, [rdx+10h]
.text:000000000000ECB0                 mov     edx, [rsp+268h+var_A8]
.text:000000000000ECB7                 mov     [rsp+268h+var_178], rax
.text:000000000000ECBF                 call    re_string_context_at
.text:000000000000ECC4                 mov     rdi, [rsp+268h+var_1E8]
.text:000000000000ECCC                 mov     rdx, [rsp+268h+var_208]
.text:000000000000ECD1                 mov     ecx, eax
.text:000000000000ECD3                 mov     rsi, r13
.text:000000000000ECD6                 call    re_acquire_state_context
.text:000000000000ECDB                 mov     rdi, [rsp+268h+var_90]
.text:000000000000ECE3                 mov     [r15], rax
.text:000000000000ECE6                 cmp     qword ptr [rdi+rbp*8], 0
.text:000000000000ECEB                 jnz     loc_EC12
.text:000000000000ECF1
.text:000000000000ECF1 loc_ECF1:                               ; CODE XREF: re_search_internal+DCC↑j
.text:000000000000ECF1                 mov     eax, [rsp+268h+var_194]
.text:000000000000ECF8                 test    eax, eax
.text:000000000000ECFA                 jz      loc_EC12
.text:000000000000ED00                 mov     rbx, [rsp+268h+var_1C8]
.text:000000000000ED08                 jmp     loc_EE10
.text:000000000000ED08 ; ---------------------------------------------------------------------------
.text:000000000000ED0D                 align 10h
.text:000000000000ED10
.text:000000000000ED10 loc_ED10:                               ; CODE XREF: re_search_internal+7BB↑j
.text:000000000000ED10                 mov     rbp, [r14+60h]
.text:000000000000ED14                 test    rbp, rbp
.text:000000000000ED17                 jz      loc_EEC5
.text:000000000000ED1D                 mov     rax, [rsp+268h+var_100]
.text:000000000000ED25                 mov     edx, [rsp+268h+var_A8]
.text:000000000000ED2C                 mov     rdi, [rsp+268h+var_268]
.text:000000000000ED30                 lea     rsi, [rax-1]
.text:000000000000ED34                 call    re_string_context_at
.text:000000000000ED39                 test    al, 1
.text:000000000000ED3B                 jz      loc_EDF0
.text:000000000000ED41                 mov     r13, [rbp+r13*8+800h]
.text:000000000000ED49                 jmp     loc_E605
.text:000000000000ED49 ; ---------------------------------------------------------------------------
.text:000000000000ED4E                 align 10h
.text:000000000000ED50
.text:000000000000ED50 loc_ED50:                               ; CODE XREF: re_search_internal+78A↑j
.text:000000000000ED50                 cmp     rax, [rsp+268h+var_F0]
.text:000000000000ED58                 jge     loc_E5D0
.text:000000000000ED5E                 jmp     loc_EA6E
.text:000000000000ED63 ; ---------------------------------------------------------------------------
.text:000000000000ED63
.text:000000000000ED63 loc_ED63:                               ; CODE XREF: re_search_internal+125C↓j
.text:000000000000ED63                 mov     rdi, r12        ; ptr
.text:000000000000ED66                 call    _free
.text:000000000000ED6B                 nop     dword ptr [rax+rax+00h]
.text:000000000000ED70
.text:000000000000ED70 loc_ED70:                               ; CODE XREF: re_search_internal+86F↑j
.text:000000000000ED70                                         ; re_search_internal+14EB↓j ...
.text:000000000000ED70                 mov     rdi, [rsp+268h+var_268]
.text:000000000000ED74                 call    match_ctx_clean
.text:000000000000ED79                 mov     rbp, [rsp+268h+var_190]
.text:000000000000ED81
.text:000000000000ED81 loc_ED81:                               ; CODE XREF: re_search_internal+617↑j
.text:000000000000ED81                 movsxd  rax, [rsp+268h+var_1BC]
.text:000000000000ED89                 add     rbp, rax
.text:000000000000ED8C                 cmp     rbp, [rsp+268h+var_1D8]
.text:000000000000ED94                 mov     [rsp+268h+var_190], rbp
.text:000000000000ED9C                 jl      short loc_EDA9
.text:000000000000ED9E                 cmp     rbp, [rsp+268h+var_1F8]
.text:000000000000EDA3                 jle     loc_E318
.text:000000000000EDA9
.text:000000000000EDA9 loc_EDA9:                               ; CODE XREF: re_search_internal+494↑j
.text:000000000000EDA9                                         ; re_search_internal+5CA↑j ...
.text:000000000000EDA9                 mov     rdi, [rsp+268h+var_90]
.text:000000000000EDB1                 mov     [rsp+268h+var_20C], 1
.text:000000000000EDB9                 jmp     loc_E998
.text:000000000000EDB9 ; ---------------------------------------------------------------------------
.text:000000000000EDBE                 align 20h
.text:000000000000EDC0
.text:000000000000EDC0 loc_EDC0:                               ; CODE XREF: re_search_internal+EE↑j
.text:000000000000EDC0                                         ; re_search_internal+100↑j ...
.text:000000000000EDC0                 mov     [rsp+268h+var_20C], 1
.text:000000000000EDC8                 jmp     loc_E9B9
.text:000000000000EDC8 ; ---------------------------------------------------------------------------
.text:000000000000EDCD                 align 10h
.text:000000000000EDD0
.text:000000000000EDD0 loc_EDD0:                               ; CODE XREF: re_search_internal+DE2↑j
.text:000000000000EDD0                 mov     rbx, [rsp+268h+var_1C8]
.text:000000000000EDD8                 mov     r8, r12
.text:000000000000EDDB
.text:000000000000EDDB loc_EDDB:                               ; CODE XREF: re_search_internal+C6D↑j
.text:000000000000EDDB                 mov     [rsp+268h+var_198], 0
.text:000000000000EDE6                 jmp     loc_E5DB
.text:000000000000EDE6 ; ---------------------------------------------------------------------------
.text:000000000000EDEB                 align 10h
.text:000000000000EDF0
.text:000000000000EDF0 loc_EDF0:                               ; CODE XREF: re_search_internal+EFB↑j
.text:000000000000EDF0                 mov     r13, [rbp+r13*8+0]
.text:000000000000EDF5                 jmp     loc_E605
.text:000000000000EDF5 ; ---------------------------------------------------------------------------
.text:000000000000EDFA                 align 20h
.text:000000000000EE00
.text:000000000000EE00 loc_EE00:                               ; CODE XREF: re_search_internal+D25↑j
.text:000000000000EE00                                         ; re_search_internal+D75↑j
.text:000000000000EE00                 mov     rbx, [rsp+268h+var_1C8]
.text:000000000000EE08                 mov     rdi, [rsp+268h+var_90]
.text:000000000000EE10
.text:000000000000EE10 loc_EE10:                               ; CODE XREF: re_search_internal+EC8↑j
.text:000000000000EE10                 test    rdi, rdi
.text:000000000000EE13                 mov     [rsp+268h+var_198], eax
.text:000000000000EE1A                 jz      loc_EF00
.text:000000000000EE20
.text:000000000000EE20 loc_EE20:                               ; CODE XREF: re_search_internal+10B3↓j
.text:000000000000EE20                 xor     r13d, r13d
.text:000000000000EE23                 jmp     loc_E610
.text:000000000000EE23 ; ---------------------------------------------------------------------------
.text:000000000000EE28                 align 10h
.text:000000000000EE30
.text:000000000000EE30 loc_EE30:                               ; CODE XREF: re_search_internal+678↑j
.text:000000000000EE30                 mov     edx, [rsp+268h+var_A8]
.text:000000000000EE37                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EE3B                 lea     rsi, [rax-1]
.text:000000000000EE3F                 call    re_string_context_at
.text:000000000000EE44                 test    al, 1
.text:000000000000EE46                 jz      loc_EFB5
.text:000000000000EE4C                 mov     r14, [rbx+50h]
.text:000000000000EE50
.text:000000000000EE50 loc_EE50:                               ; CODE XREF: re_search_internal+1197↓j
.text:000000000000EE50                                         ; re_search_internal+15F3↓j ...
.text:000000000000EE50                 test    r14, r14
.text:000000000000EE53                 jnz     loc_E4BE
.text:000000000000EE59                 mov     eax, [rsp+268h+var_198]
.text:000000000000EE60                 cmp     eax, 0Ch
.text:000000000000EE63                 mov     [rsp+268h+var_20C], eax
.text:000000000000EE67                 jz      loc_E990
.text:000000000000EE6D                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:000000000000EE74                 lea     rsi, file       ; "../coreutils-8.31/lib/regexec.c"
.text:000000000000EE7B                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:000000000000EE82                 mov     edx, 435h       ; line
.text:000000000000EE87                 call    ___assert_fail
.text:000000000000EE87 ; ---------------------------------------------------------------------------
.text:000000000000EE8C                 align 10h
.text:000000000000EE90
.text:000000000000EE90 loc_EE90:                               ; CODE XREF: re_search_internal+895↑j
.text:000000000000EE90                 mov     rax, [rsp+268h+var_230]
.text:000000000000EE95                 cmp     qword ptr [rax+98h], 0
.text:000000000000EE9D                 jz      loc_F0CC
.text:000000000000EEA3                 jmp     loc_EFEF
.text:000000000000EEA8 ; ---------------------------------------------------------------------------
.text:000000000000EEA8
.text:000000000000EEA8 loc_EEA8:                               ; CODE XREF: re_search_internal+963↑j
.text:000000000000EEA8                 mov     rdi, r12        ; ptr
.text:000000000000EEAB                 call    _free
.text:000000000000EEB0
.text:000000000000EEB0 loc_EEB0:                               ; CODE XREF: re_search_internal+32A↑j
.text:000000000000EEB0                                         ; re_search_internal+360↑j ...
.text:000000000000EEB0                 mov     rdi, [rsp+268h+var_90]
.text:000000000000EEB8                 mov     [rsp+268h+var_20C], 0Ch
.text:000000000000EEC0                 jmp     loc_E998
.text:000000000000EEC5 ; ---------------------------------------------------------------------------
.text:000000000000EEC5
.text:000000000000EEC5 loc_EEC5:                               ; CODE XREF: re_search_internal+ED7↑j
.text:000000000000EEC5                 mov     rdi, [rsp+268h+var_B0]
.text:000000000000EECD                 mov     rsi, r14
.text:000000000000EED0                 call    build_trtable
.text:000000000000EED5                 test    al, al
.text:000000000000EED7                 jnz     loc_E5F4
.text:000000000000EEDD                 mov     rdi, [rsp+268h+var_90]
.text:000000000000EEE5                 mov     [rsp+268h+var_198], 0Ch
.text:000000000000EEF0                 test    rdi, rdi
.text:000000000000EEF3                 jnz     loc_EE20
.text:000000000000EEF9                 nop     dword ptr [rax+00000000h]
.text:000000000000EF00
.text:000000000000EF00 loc_EF00:                               ; CODE XREF: re_search_internal+3CF↑j
.text:000000000000EF00                                         ; re_search_internal+7FE↑j ...
.text:000000000000EF00                 mov     [rsp+268h+var_20C], 0Ch
.text:000000000000EF08                 jmp     loc_E998
.text:000000000000EF0D ; ---------------------------------------------------------------------------
.text:000000000000EF0D
.text:000000000000EF0D def_E336:                               ; CODE XREF: re_search_internal+4E2↑j
.text:000000000000EF0D                 mov     rbx, [rsp+268h+var_200] ; jumptable 000000000000E336 default case
.text:000000000000EF12                 mov     r13d, [rsp+268h+var_1BC]
.text:000000000000EF1A                 mov     r14, [rsp+268h+var_1D8]
.text:000000000000EF22                 mov     r15, [rsp+268h+var_1F8]
.text:000000000000EF27                 mov     r12, [rsp+268h+var_1E0]
.text:000000000000EF2F                 jmp     short loc_EF78
.text:000000000000EF2F ; ---------------------------------------------------------------------------
.text:000000000000EF31                 align 8
.text:000000000000EF38
.text:000000000000EF38 loc_EF38:                               ; CODE XREF: re_search_internal+114B↓j
.text:000000000000EF38                                         ; re_search_internal+1173↓j
.text:000000000000EF38                 cmp     r12, rbp
.text:000000000000EF3B                 mov     rax, rbx
.text:000000000000EF3E                 jle     short loc_EF4F
.text:000000000000EF40                 mov     rax, [rsp+268h+var_140]
.text:000000000000EF48                 movzx   eax, byte ptr [rax+rdx]
.text:000000000000EF4C                 add     rax, rbx
.text:000000000000EF4F
.text:000000000000EF4F loc_EF4F:                               ; CODE XREF: re_search_internal+10FE↑j
.text:000000000000EF4F                 cmp     byte ptr [rax], 0
.text:000000000000EF52                 jnz     loc_E418        ; jumptable 000000000000E336 case 4
.text:000000000000EF58                 movsxd  rax, r13d
.text:000000000000EF5B                 add     rbp, rax
.text:000000000000EF5E                 cmp     rbp, r14
.text:000000000000EF61                 mov     [rsp+268h+var_190], rbp
.text:000000000000EF69                 jl      loc_EDA9
.text:000000000000EF6F                 cmp     rbp, r15
.text:000000000000EF72                 jg      loc_EDA9
.text:000000000000EF78
.text:000000000000EF78 loc_EF78:                               ; CODE XREF: re_search_internal+10EF↑j
.text:000000000000EF78                 mov     rdx, rbp
.text:000000000000EF7B                 sub     rdx, [rsp+268h+var_120]
.text:000000000000EF83                 cmp     [rsp+268h+var_110], rdx
.text:000000000000EF8B                 ja      short loc_EF38
.text:000000000000EF8D                 mov     edx, [rsp+268h+arg_10]
.text:000000000000EF94                 mov     rdi, [rsp+268h+var_268]
.text:000000000000EF98                 mov     rsi, rbp
.text:000000000000EF9B                 call    re_string_reconstruct
.text:000000000000EFA0                 test    eax, eax
.text:000000000000EFA2                 jnz     loc_E988
.text:000000000000EFA8                 mov     rdx, rbp
.text:000000000000EFAB                 sub     rdx, [rsp+268h+var_120]
.text:000000000000EFB3                 jmp     short loc_EF38
.text:000000000000EFB5 ; ---------------------------------------------------------------------------
.text:000000000000EFB5
.text:000000000000EFB5 loc_EFB5:                               ; CODE XREF: re_search_internal+1006↑j
.text:000000000000EFB5                 test    eax, eax
.text:000000000000EFB7                 jz      loc_E4BE
.text:000000000000EFBD                 mov     edx, eax
.text:000000000000EFBF                 and     edx, 6
.text:000000000000EFC2                 cmp     edx, 6
.text:000000000000EFC5                 jz      loc_F42F
.text:000000000000EFCB                 test    al, 2
.text:000000000000EFCD                 jz      loc_F480
.text:000000000000EFD3                 mov     r14, [rbx+58h]
.text:000000000000EFD7                 jmp     loc_EE50
.text:000000000000EFDC ; ---------------------------------------------------------------------------
.text:000000000000EFDC
.text:000000000000EFDC loc_EFDC:                               ; CODE XREF: re_search_internal+8A4↑j
.text:000000000000EFDC                 mov     rax, [rsp+268h+var_230]
.text:000000000000EFE1                 cmp     qword ptr [rax+98h], 0
.text:000000000000EFE9                 jz      loc_F0CC
.text:000000000000EFEF
.text:000000000000EFEF loc_EFEF:                               ; CODE XREF: re_search_internal+1063↑j
.text:000000000000EFEF                 mov     rcx, [rsp+268h+var_248]
.text:000000000000EFF4                 mov     rbx, [rsp+268h+var_90]
.text:000000000000EFFC                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F000                 mov     rax, [rbx+rcx*8]
.text:000000000000F004                 mov     rsi, [rax+10h]
.text:000000000000F008                 lea     rdx, [rax+18h]
.text:000000000000F00C                 call    check_halt_state_context_isra_20
.text:000000000000F011                 mov     [rsp+268h+var_98], rax
.text:000000000000F019                 jmp     loc_E738
.text:000000000000F01E ; ---------------------------------------------------------------------------
.text:000000000000F01E
.text:000000000000F01E loc_F01E:                               ; CODE XREF: re_search_internal+459↑j
.text:000000000000F01E                                         ; re_search_internal+468↑j
.text:000000000000F01E                 xor     ecx, ecx
.text:000000000000F020                 jmp     loc_E2AE
.text:000000000000F025 ; ---------------------------------------------------------------------------
.text:000000000000F025
.text:000000000000F025 loc_F025:                               ; CODE XREF: re_search_internal+94F↑j
.text:000000000000F025                 pxor    xmm0, xmm0
.text:000000000000F029                 mov     qword ptr [rsp+268h+var_188], rax
.text:000000000000F031                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F035                 mov     rax, [rsp+268h+var_248]
.text:000000000000F03A                 lea     rbx, [rsp+268h+var_188]
.text:000000000000F042                 mov     qword ptr [rsp+268h+var_188+8], 0
.text:000000000000F04E                 mov     [rsp+268h+var_178], r13
.text:000000000000F056                 mov     rsi, rbx
.text:000000000000F059                 mov     [rsp+268h+ptr], 0
.text:000000000000F065                 movaps  [rsp+268h+var_168], xmm0
.text:000000000000F06D                 mov     [rsp+268h+var_170], rax
.text:000000000000F075                 call    sift_states_backward
.text:000000000000F07A                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:000000000000F082                 mov     dword ptr [rsp+268h+var_260], eax
.text:000000000000F086                 call    _free
.text:000000000000F08B                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000000F08F                 test    eax, eax
.text:000000000000F091                 jnz     loc_F4D8
.text:000000000000F097                 cmp     qword ptr [r12], 0
.text:000000000000F09C                 jz      loc_ED63
.text:000000000000F0A2
.text:000000000000F0A2 loc_F0A2:                               ; CODE XREF: re_search_internal+1692↓j
.text:000000000000F0A2                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:000000000000F0AA                 call    _free
.text:000000000000F0AF                 mov     rax, [rsp+268h+var_248]
.text:000000000000F0B4                 mov     [rsp+268h+var_90], r12
.text:000000000000F0BC                 mov     [rsp+268h+var_98], r13
.text:000000000000F0C4                 mov     [rsp+268h+var_A0], rax
.text:000000000000F0CC
.text:000000000000F0CC loc_F0CC:                               ; CODE XREF: re_search_internal+8F2↑j
.text:000000000000F0CC                                         ; re_search_internal+105D↑j ...
.text:000000000000F0CC                 cmp     [rsp+268h+arg_0], 0
.text:000000000000F0D5                 jz      loc_E990
.text:000000000000F0DB                 cmp     [rsp+268h+arg_0], 1
.text:000000000000F0E4                 jz      loc_F508
.text:000000000000F0EA                 mov     rsi, [rsp+268h+var_1B0]
.text:000000000000F0F2                 mov     rcx, [rsp+268h+arg_0]
.text:000000000000F0FA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F101                 shl     rcx, 4
.text:000000000000F105                 lea     rax, [rsi+10h]
.text:000000000000F109                 add     rcx, rsi
.text:000000000000F10C
.text:000000000000F10C loc_F10C:                               ; CODE XREF: re_search_internal+12DA↓j
.text:000000000000F10C                 mov     [rax+8], rdx
.text:000000000000F110                 mov     [rax], rdx
.text:000000000000F113                 add     rax, 10h
.text:000000000000F117                 cmp     rcx, rax
.text:000000000000F11A                 jnz     short loc_F10C
.text:000000000000F11C                 mov     rdi, [rsp+268h+var_1B0]
.text:000000000000F124                 mov     rax, [rsp+268h+var_A0]
.text:000000000000F12C                 mov     [rdi+8], rax
.text:000000000000F130                 mov     rax, [rsp+268h+var_220]
.text:000000000000F135                 mov     qword ptr [rdi], 0
.text:000000000000F13C                 test    byte ptr [rax+38h], 10h
.text:000000000000F140                 jnz     loc_F523
.text:000000000000F146                 cmp     [rsp+268h+arg_0], 1
.text:000000000000F14F                 jz      loc_F523
.text:000000000000F155                 mov     rax, [rsp+268h+var_230]
.text:000000000000F15A                 xor     r8d, r8d
.text:000000000000F15D                 test    byte ptr [rax+0B0h], 1
.text:000000000000F164                 jz      short loc_F175
.text:000000000000F166                 xor     r8d, r8d
.text:000000000000F169                 cmp     qword ptr [rax+98h], 0
.text:000000000000F171                 setnle  r8b
.text:000000000000F175
.text:000000000000F175 loc_F175:                               ; CODE XREF: re_search_internal+1324↑j
.text:000000000000F175                 mov     rbx, [rsp+268h+var_1B0]
.text:000000000000F17D                 mov     rdx, [rsp+268h+arg_0]
.text:000000000000F185                 mov     rsi, [rsp+268h+var_268]
.text:000000000000F189                 mov     rdi, [rsp+268h+var_220]
.text:000000000000F18E                 mov     rcx, rbx
.text:000000000000F191                 call    set_regs
.text:000000000000F196                 test    eax, eax
.text:000000000000F198                 jnz     loc_F46D
.text:000000000000F19E                 mov     rax, [rbx]
.text:000000000000F1A1
.text:000000000000F1A1 loc_F1A1:                               ; CODE XREF: re_search_internal+16E5↓j
.text:000000000000F1A1                 movzx   r11d, [rsp+268h+var_BC]
.text:000000000000F1AA                 mov     r10, [rsp+268h+var_118]
.text:000000000000F1B2                 xor     ecx, ecx
.text:000000000000F1B4                 mov     r9, [rsp+268h+var_130]
.text:000000000000F1BC                 mov     r8, [rsp+268h+var_110]
.text:000000000000F1C4                 mov     rdi, [rsp+268h+var_190]
.text:000000000000F1CC                 mov     rdx, [rsp+268h+var_1B0]
.text:000000000000F1D4                 jmp     short loc_F1D9
.text:000000000000F1D6 ; ---------------------------------------------------------------------------
.text:000000000000F1D6
.text:000000000000F1D6 loc_F1D6:                               ; CODE XREF: re_search_internal+13C9↓j
.text:000000000000F1D6                 mov     rax, [rdx]
.text:000000000000F1D9
.text:000000000000F1D9 loc_F1D9:                               ; CODE XREF: re_search_internal+1394↑j
.text:000000000000F1D9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000F1DD                 jz      short loc_F1F9
.text:000000000000F1DF                 test    r11b, r11b
.text:000000000000F1E2                 mov     rsi, [rdx+8]
.text:000000000000F1E6                 jnz     loc_F52A
.text:000000000000F1EC
.text:000000000000F1EC loc_F1EC:                               ; CODE XREF: re_search_internal+16FF↓j
.text:000000000000F1EC                                         ; re_search_internal+1707↓j
.text:000000000000F1EC                 add     rax, rdi
.text:000000000000F1EF                 add     rsi, rdi
.text:000000000000F1F2                 mov     [rdx], rax
.text:000000000000F1F5                 mov     [rdx+8], rsi
.text:000000000000F1F9
.text:000000000000F1F9 loc_F1F9:                               ; CODE XREF: re_search_internal+139D↑j
.text:000000000000F1F9                 add     rcx, 1
.text:000000000000F1FD                 add     rdx, 10h
.text:000000000000F201                 cmp     rcx, [rsp+268h+arg_0]
.text:000000000000F209                 jnz     short loc_F1D6
.text:000000000000F20B                 cmp     [rsp+268h+var_1D0], 0
.text:000000000000F214                 jle     short loc_F255
.text:000000000000F216                 mov     rdx, [rsp+268h+var_1D0]
.text:000000000000F21E                 mov     rdi, [rsp+268h+var_1B0]
.text:000000000000F226                 mov     rax, rcx
.text:000000000000F229                 shl     rax, 4
.text:000000000000F22D                 add     rdx, rcx
.text:000000000000F230                 lea     rax, [rdi+rax+8]
.text:000000000000F235                 shl     rdx, 4
.text:000000000000F239                 lea     rsi, [rdi+rdx+8]
.text:000000000000F23E                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F245
.text:000000000000F245 loc_F245:                               ; CODE XREF: re_search_internal+1413↓j
.text:000000000000F245                 mov     [rax-8], rdx
.text:000000000000F249                 mov     [rax], rdx
.text:000000000000F24C                 add     rax, 10h
.text:000000000000F250                 cmp     rsi, rax
.text:000000000000F253                 jnz     short loc_F245
.text:000000000000F255
.text:000000000000F255 loc_F255:                               ; CODE XREF: re_search_internal+13D4↑j
.text:000000000000F255                 mov     rax, [rsp+268h+var_230]
.text:000000000000F25A                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F262                 mov     r9, [rax+0E0h]
.text:000000000000F269                 test    r9, r9
.text:000000000000F26C                 jz      loc_E998
.text:000000000000F272                 mov     r10, [rsp+268h+var_1B0]
.text:000000000000F27A                 xor     r8d, r8d
.text:000000000000F27D                 lea     rdx, [r10+10h]
.text:000000000000F281                 jmp     short loc_F2B9
.text:000000000000F283 ; ---------------------------------------------------------------------------
.text:000000000000F283
.text:000000000000F283 loc_F283:                               ; CODE XREF: re_search_internal+1480↓j
.text:000000000000F283                 mov     rax, [r9+rsi*8-8]
.text:000000000000F288                 cmp     rax, r8
.text:000000000000F28B                 jz      short loc_F2B2
.text:000000000000F28D                 add     rax, 1
.text:000000000000F291                 shl     rax, 4
.text:000000000000F295                 mov     rax, [r10+rax]
.text:000000000000F299                 mov     [rdx], rax
.text:000000000000F29C                 mov     rax, [r9+rsi*8-8]
.text:000000000000F2A1                 add     rax, 1
.text:000000000000F2A5                 shl     rax, 4
.text:000000000000F2A9                 mov     rax, [r10+rax+8]
.text:000000000000F2AE                 mov     [rdx+8], rax
.text:000000000000F2B2
.text:000000000000F2B2 loc_F2B2:                               ; CODE XREF: re_search_internal+144B↑j
.text:000000000000F2B2                 add     rdx, 10h
.text:000000000000F2B6                 mov     r8, rsi
.text:000000000000F2B9
.text:000000000000F2B9 loc_F2B9:                               ; CODE XREF: re_search_internal+1441↑j
.text:000000000000F2B9                 lea     rsi, [r8+1]
.text:000000000000F2BD                 cmp     rsi, rcx
.text:000000000000F2C0                 jnz     short loc_F283
.text:000000000000F2C2                 jmp     loc_E998
.text:000000000000F2C2 ; ---------------------------------------------------------------------------
.text:000000000000F2C7                 align 10h
.text:000000000000F2D0
.text:000000000000F2D0 loc_F2D0:                               ; CODE XREF: re_search_internal+B6A↑j
.text:000000000000F2D0                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F2D4                 call    match_ctx_clean
.text:000000000000F2D9                 mov     rdi, [rsp+268h+var_50] ; ptr
.text:000000000000F2E1                 call    _free
.text:000000000000F2E6                 mov     rdi, [rsp+268h+var_70] ; ptr
.text:000000000000F2EE                 call    _free
.text:000000000000F2F3                 jmp     loc_E9B0
.text:000000000000F2F8 ; ---------------------------------------------------------------------------
.text:000000000000F2F8
.text:000000000000F2F8 loc_F2F8:                               ; CODE XREF: re_search_internal+393↑j
.text:000000000000F2F8                 mov     rax, [rsp+268h+var_230]
.text:000000000000F2FD                 test    byte ptr [rax+0B0h], 2
.text:000000000000F304                 jnz     loc_E1D9
.text:000000000000F30A                 mov     [rsp+268h+var_90], 0
.text:000000000000F316                 jmp     loc_E215
.text:000000000000F31B ; ---------------------------------------------------------------------------
.text:000000000000F31B
.text:000000000000F31B loc_F31B:                               ; CODE XREF: re_search_internal+A18↑j
.text:000000000000F31B                 mov     rdi, r12        ; ptr
.text:000000000000F31E                 call    _free
.text:000000000000F323                 mov     rdi, rbp        ; ptr
.text:000000000000F326                 call    _free
.text:000000000000F32B                 jmp     loc_ED70
.text:000000000000F330 ; ---------------------------------------------------------------------------
.text:000000000000F330
.text:000000000000F330 loc_F330:                               ; CODE XREF: re_search_internal+B0C↑j
.text:000000000000F330                 mov     [rsp+268h+var_190], rax
.text:000000000000F338                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F340                 mov     [rsp+268h+var_20C], 1
.text:000000000000F348                 jmp     loc_E998
.text:000000000000F34D ; ---------------------------------------------------------------------------
.text:000000000000F34D
.text:000000000000F34D loc_F34D:                               ; CODE XREF: re_search_internal+BD1↑j
.text:000000000000F34D                 test    rax, rax
.text:000000000000F350                 mov     r13, rax
.text:000000000000F353                 jnz     loc_E548
.text:000000000000F359                 jmp     loc_E694
.text:000000000000F359 ; ---------------------------------------------------------------------------
.text:000000000000F35E                 align 20h
.text:000000000000F360
.text:000000000000F360 loc_F360:                               ; CODE XREF: re_search_internal+BDA↑j
.text:000000000000F360                 mov     r13, rax
.text:000000000000F363                 jmp     loc_E548
.text:000000000000F368 ; ---------------------------------------------------------------------------
.text:000000000000F368
.text:000000000000F368 loc_F368:                               ; CODE XREF: re_search_internal+C43↑j
.text:000000000000F368                 cmp     eax, 0Ch
.text:000000000000F36B                 jz      loc_EEB0
.text:000000000000F371                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:000000000000F378                 lea     rsi, file       ; "../coreutils-8.31/lib/regexec.c"
.text:000000000000F37F                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:000000000000F386                 mov     edx, 46Ch       ; line
.text:000000000000F38B                 call    ___assert_fail
.text:000000000000F390 ; ---------------------------------------------------------------------------
.text:000000000000F390
.text:000000000000F390 loc_F390:                               ; CODE XREF: re_search_internal+6C7↑j
.text:000000000000F390                 cmp     byte ptr [r14+68h], 0
.text:000000000000F395                 js      short loc_F406
.text:000000000000F397
.text:000000000000F397 loc_F397:                               ; CODE XREF: re_search_internal+15EA↓j
.text:000000000000F397                 mov     esi, [rsp+268h+var_210]
.text:000000000000F39B                 mov     rax, [rsp+268h+var_260]
.text:000000000000F3A0                 test    esi, esi
.text:000000000000F3A2                 mov     [rsp+268h+var_248], rax
.text:000000000000F3A7                 jz      loc_E6A6
.text:000000000000F3AD                 mov     [rsp+268h+var_238], 1
.text:000000000000F3B6                 jmp     loc_E50D
.text:000000000000F3BB ; ---------------------------------------------------------------------------
.text:000000000000F3BB
.text:000000000000F3BB loc_F3BB:                               ; CODE XREF: re_search_internal+917↑j
.text:000000000000F3BB                 mov     rdi, rbx
.text:000000000000F3BE                 mov     [rsp+268h+var_20C], 0Ch
.text:000000000000F3C6                 jmp     loc_E998
.text:000000000000F3CB ; ---------------------------------------------------------------------------
.text:000000000000F3CB
.text:000000000000F3CB loc_F3CB:                               ; CODE XREF: re_search_internal+69C↑j
.text:000000000000F3CB                 lea     rbx, [r14+10h]
.text:000000000000F3CF                 lea     rbp, [r14+18h]
.text:000000000000F3D3                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F3D7                 xor     ecx, ecx
.text:000000000000F3D9                 mov     rdx, rbp
.text:000000000000F3DC                 mov     rsi, rbx
.text:000000000000F3DF                 call    check_subexp_matching_top_isra_18
.text:000000000000F3E4                 test    eax, eax
.text:000000000000F3E6                 mov     [rsp+268h+var_198], eax
.text:000000000000F3ED                 jnz     short loc_F438
.text:000000000000F3EF                 movzx   eax, byte ptr [r14+68h]
.text:000000000000F3F4                 test    al, 40h
.text:000000000000F3F6                 jnz     loc_F4E0
.text:000000000000F3FC
.text:000000000000F3FC loc_F3FC:                               ; CODE XREF: re_search_internal+16C3↓j
.text:000000000000F3FC                 mov     byte ptr [rsp+268h+var_250], 0
.text:000000000000F401                 jmp     loc_E4F3
.text:000000000000F406 ; ---------------------------------------------------------------------------
.text:000000000000F406
.text:000000000000F406 loc_F406:                               ; CODE XREF: re_search_internal+1555↑j
.text:000000000000F406                 mov     rsi, [r14+10h]
.text:000000000000F40A                 mov     rcx, [rsp+268h+var_260]
.text:000000000000F40F                 lea     rdx, [r14+18h]
.text:000000000000F413                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F417                 call    check_halt_state_context_isra_20
.text:000000000000F41C                 test    rax, rax
.text:000000000000F41F                 mov     [rsp+268h+var_238], rax
.text:000000000000F424                 jz      loc_E50D
.text:000000000000F42A                 jmp     loc_F397
.text:000000000000F42F ; ---------------------------------------------------------------------------
.text:000000000000F42F
.text:000000000000F42F loc_F42F:                               ; CODE XREF: re_search_internal+1185↑j
.text:000000000000F42F                 mov     r14, [rbx+60h]
.text:000000000000F433                 jmp     loc_EE50
.text:000000000000F438 ; ---------------------------------------------------------------------------
.text:000000000000F438
.text:000000000000F438 loc_F438:                               ; CODE XREF: re_search_internal+15AD↑j
.text:000000000000F438                                         ; re_search_internal+16B8↓j
.text:000000000000F438                 cdqe
.text:000000000000F43A                 mov     [rsp+268h+var_248], rax
.text:000000000000F43F                 jmp     loc_E6A6
.text:000000000000F444 ; ---------------------------------------------------------------------------
.text:000000000000F444
.text:000000000000F444 loc_F444:                               ; CODE XREF: re_search_internal+9E6↑j
.text:000000000000F444                 mov     r14, [rsp+268h+var_250]
.text:000000000000F449                 mov     eax, r15d
.text:000000000000F44C
.text:000000000000F44C loc_F44C:                               ; CODE XREF: re_search_internal+169B↓j
.text:000000000000F44C                 mov     rdi, r12        ; ptr
.text:000000000000F44F                 mov     dword ptr [rsp+268h+var_260], eax
.text:000000000000F453                 call    _free
.text:000000000000F458                 mov     rdi, r14        ; ptr
.text:000000000000F45B                 call    _free
.text:000000000000F460                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000000F464                 cmp     eax, 1
.text:000000000000F467                 jz      loc_ED70
.text:000000000000F46D
.text:000000000000F46D loc_F46D:                               ; CODE XREF: re_search_internal+1358↑j
.text:000000000000F46D                 mov     rdi, [rsp+268h+var_90]
.text:000000000000F475                 mov     [rsp+268h+var_20C], eax
.text:000000000000F479                 jmp     loc_E998
.text:000000000000F479 ; ---------------------------------------------------------------------------
.text:000000000000F47E                 align 20h
.text:000000000000F480
.text:000000000000F480 loc_F480:                               ; CODE XREF: re_search_internal+118D↑j
.text:000000000000F480                 test    al, 4
.text:000000000000F482                 jz      loc_E4BE
.text:000000000000F488                 mov     rdx, [r14+50h]
.text:000000000000F48C                 mov     rdi, [rsp+268h+var_240]
.text:000000000000F491                 mov     ecx, eax
.text:000000000000F493                 mov     rsi, rbx
.text:000000000000F496                 call    re_acquire_state_context
.text:000000000000F49B                 mov     r14, rax
.text:000000000000F49E                 jmp     loc_EE50
.text:000000000000F4A3 ; ---------------------------------------------------------------------------
.text:000000000000F4A3
.text:000000000000F4A3 loc_F4A3:                               ; CODE XREF: re_search_internal+9F1↑j
.text:000000000000F4A3                                         ; re_search_internal+9FC↑j
.text:000000000000F4A3                 mov     r15, [rsp+268h+var_258]
.text:000000000000F4A8                 mov     rcx, [rsp+268h+var_260]
.text:000000000000F4AD                 mov     rdx, rbp
.text:000000000000F4B0                 mov     rsi, r12
.text:000000000000F4B3                 mov     [rsp+268h+var_248], r14
.text:000000000000F4B8                 mov     rdi, r15
.text:000000000000F4BB                 call    merge_state_array
.text:000000000000F4C0                 mov     rdi, rbp        ; ptr
.text:000000000000F4C3                 mov     dword ptr [rsp+268h+var_260], eax
.text:000000000000F4C7                 call    _free
.text:000000000000F4CC                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000000F4D0                 test    eax, eax
.text:000000000000F4D2                 jz      loc_F0A2
.text:000000000000F4D8
.text:000000000000F4D8 loc_F4D8:                               ; CODE XREF: re_search_internal+1251↑j
.text:000000000000F4D8                 xor     r14d, r14d
.text:000000000000F4DB                 jmp     loc_F44C
.text:000000000000F4E0 ; ---------------------------------------------------------------------------
.text:000000000000F4E0
.text:000000000000F4E0 loc_F4E0:                               ; CODE XREF: re_search_internal+15B6↑j
.text:000000000000F4E0                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F4E4                 mov     rdx, rbp
.text:000000000000F4E7                 mov     rsi, rbx
.text:000000000000F4EA                 call    transit_state_bkref_isra_34
.text:000000000000F4EF                 test    eax, eax
.text:000000000000F4F1                 mov     [rsp+268h+var_198], eax
.text:000000000000F4F8                 jnz     loc_F438
.text:000000000000F4FE                 movzx   eax, byte ptr [r14+68h]
.text:000000000000F503                 jmp     loc_F3FC
.text:000000000000F508 ; ---------------------------------------------------------------------------
.text:000000000000F508
.text:000000000000F508 loc_F508:                               ; CODE XREF: re_search_internal+12A4↑j
.text:000000000000F508                 mov     rsi, [rsp+268h+var_1B0]
.text:000000000000F510                 mov     rax, [rsp+268h+var_A0]
.text:000000000000F518                 mov     qword ptr [rsi], 0
.text:000000000000F51F                 mov     [rsi+8], rax
.text:000000000000F523
.text:000000000000F523 loc_F523:                               ; CODE XREF: re_search_internal+1300↑j
.text:000000000000F523                                         ; re_search_internal+130F↑j
.text:000000000000F523                 xor     eax, eax
.text:000000000000F525                 jmp     loc_F1A1
.text:000000000000F52A ; ---------------------------------------------------------------------------
.text:000000000000F52A
.text:000000000000F52A loc_F52A:                               ; CODE XREF: re_search_internal+13A6↑j
.text:000000000000F52A                 cmp     r10, rax
.text:000000000000F52D                 jz      short loc_F54C
.text:000000000000F52F                 mov     rax, [r9+rax*8]
.text:000000000000F533
.text:000000000000F533 loc_F533:                               ; CODE XREF: re_search_internal+170F↓j
.text:000000000000F533                 cmp     r10, rsi
.text:000000000000F536                 mov     [rdx], rax
.text:000000000000F539                 jz      short loc_F544
.text:000000000000F53B                 mov     rsi, [r9+rsi*8]
.text:000000000000F53F                 jmp     loc_F1EC
.text:000000000000F544 ; ---------------------------------------------------------------------------
.text:000000000000F544
.text:000000000000F544 loc_F544:                               ; CODE XREF: re_search_internal+16F9↑j
.text:000000000000F544                 mov     rsi, r8
.text:000000000000F547                 jmp     loc_F1EC
.text:000000000000F54C ; ---------------------------------------------------------------------------
.text:000000000000F54C
.text:000000000000F54C loc_F54C:                               ; CODE XREF: re_search_internal+16ED↑j
.text:000000000000F54C                 mov     rax, r8
.text:000000000000F54F                 jmp     short loc_F533
.text:000000000000F551 ; ---------------------------------------------------------------------------
.text:000000000000F551
.text:000000000000F551 loc_F551:                               ; CODE XREF: re_search_internal+574↑j
.text:000000000000F551                                         ; re_search_internal+AB1↑j
.text:000000000000F551                 mov     [rsp+268h+var_190], rbp
.text:000000000000F559                 jmp     loc_E418        ; jumptable 000000000000E336 case 4
.text:000000000000F55E ; ---------------------------------------------------------------------------
.text:000000000000F55E
.text:000000000000F55E loc_F55E:                               ; CODE XREF: re_search_internal+84E↑j
.text:000000000000F55E                 mov     [rsp+268h+var_100], rax
.text:000000000000F566                 jmp     loc_E694
.text:000000000000F56B ; ---------------------------------------------------------------------------
.text:000000000000F56B
.text:000000000000F56B loc_F56B:                               ; CODE XREF: re_search_internal+B8E↑j
.text:000000000000F56B                 call    ___stack_chk_fail
.text:000000000000F56B ; } // starts at DE40
.text:000000000000F56B re_search_internal endp
.text:000000000000F56B
.text:000000000000F570
.text:000000000000F570 ; =============== S U B R O U T I N E =======================================
.text:000000000000F570
.text:000000000000F570
.text:000000000000F570 update_cur_sifted_state proc near       ; CODE XREF: sift_states_backward+70↑p
.text:000000000000F570                                         ; sift_states_backward+28F↑p
.text:000000000000F570
.text:000000000000F570 var_D0          = qword ptr -0D0h
.text:000000000000F570 var_C8          = qword ptr -0C8h
.text:000000000000F570 var_C0          = qword ptr -0C0h
.text:000000000000F570 var_B8          = qword ptr -0B8h
.text:000000000000F570 var_B0          = qword ptr -0B0h
.text:000000000000F570 var_A8          = qword ptr -0A8h
.text:000000000000F570 var_A0          = qword ptr -0A0h
.text:000000000000F570 var_98          = qword ptr -98h
.text:000000000000F570 var_90          = qword ptr -90h
.text:000000000000F570 var_7C          = dword ptr -7Ch
.text:000000000000F570 var_78          = xmmword ptr -78h
.text:000000000000F570 var_68          = xmmword ptr -68h
.text:000000000000F570 var_50          = qword ptr -50h
.text:000000000000F570 ptr             = qword ptr -48h
.text:000000000000F570 var_40          = qword ptr -40h
.text:000000000000F570
.text:000000000000F570 ; __unwind {
.text:000000000000F570                 push    r15
.text:000000000000F572                 push    r14
.text:000000000000F574                 mov     rax, rdi
.text:000000000000F577                 push    r13
.text:000000000000F579                 push    r12
.text:000000000000F57B                 mov     r13, rsi
.text:000000000000F57E                 push    rbp
.text:000000000000F57F                 push    rbx
.text:000000000000F580                 mov     rbp, rdx
.text:000000000000F583                 mov     rbx, rcx
.text:000000000000F586                 lea     rcx, ds:0[rdx*8]
.text:000000000000F58E                 sub     rsp, 0A8h
.text:000000000000F595                 mov     r12, [rax+98h]
.text:000000000000F59C                 mov     rax, [rax+0B8h]
.text:000000000000F5A3                 mov     [rsp+0D8h+var_D0], rdi
.text:000000000000F5A8                 mov     [rsp+0D8h+var_C0], rcx
.text:000000000000F5AD                 mov     rdi, fs:28h
.text:000000000000F5B6                 mov     [rsp+0D8h+var_40], rdi
.text:000000000000F5BE                 xor     edi, edi
.text:000000000000F5C0                 mov     rdx, [rax+rdx*8]
.text:000000000000F5C4                 mov     [rsp+0D8h+var_7C], 0
.text:000000000000F5CC                 mov     rcx, [rbx+8]
.text:000000000000F5D0                 test    rdx, rdx
.text:000000000000F5D3                 jz      loc_F828
.text:000000000000F5D9                 lea     rdi, [rdx+8]
.text:000000000000F5DD                 test    rcx, rcx
.text:000000000000F5E0                 mov     [rsp+0D8h+var_C8], rdi
.text:000000000000F5E5                 jnz     short loc_F638
.text:000000000000F5E7                 mov     rdx, [rsi]
.text:000000000000F5EA                 mov     qword ptr [rdx+rbp*8], 0
.text:000000000000F5F2                 mov     rdx, [rax+rbp*8]
.text:000000000000F5F6                 xor     eax, eax
.text:000000000000F5F8                 test    byte ptr [rdx+68h], 40h
.text:000000000000F5FC                 jnz     loc_F6DF
.text:000000000000F602                 nop     word ptr [rax+rax+00h]
.text:000000000000F608
.text:000000000000F608 loc_F608:                               ; CODE XREF: update_cur_sifted_state+E9↓j
.text:000000000000F608                                         ; update_cur_sifted_state+112↓j ...
.text:000000000000F608                 mov     rdi, [rsp+0D8h+var_40]
.text:000000000000F610                 xor     rdi, fs:28h
.text:000000000000F619                 jnz     loc_FDBB
.text:000000000000F61F                 add     rsp, 0A8h
.text:000000000000F626                 pop     rbx
.text:000000000000F627                 pop     rbp
.text:000000000000F628                 pop     r12
.text:000000000000F62A                 pop     r13
.text:000000000000F62C                 pop     r14
.text:000000000000F62E                 pop     r15
.text:000000000000F630                 retn
.text:000000000000F630 ; ---------------------------------------------------------------------------
.text:000000000000F631                 align 8
.text:000000000000F638
.text:000000000000F638 loc_F638:                               ; CODE XREF: update_cur_sifted_state+75↑j
.text:000000000000F638                 lea     rdi, [rsp+0D8h+var_78]
.text:000000000000F63D                 mov     rdx, rbx
.text:000000000000F640                 mov     rsi, r12
.text:000000000000F643                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:000000000000F64B                 call    re_acquire_state
.text:000000000000F650                 mov     rdx, rax
.text:000000000000F653                 mov     eax, dword ptr [rsp+0D8h+var_78]
.text:000000000000F657                 test    eax, eax
.text:000000000000F659                 jnz     short loc_F608
.text:000000000000F65B                 mov     r15, [rdx+38h]
.text:000000000000F65F                 lea     r14, [rdx+38h]
.text:000000000000F663                 test    r15, r15
.text:000000000000F666                 jz      loc_F870
.text:000000000000F66C
.text:000000000000F66C loc_F66C:                               ; CODE XREF: update_cur_sifted_state+33B↓j
.text:000000000000F66C                                         ; update_cur_sifted_state+348↓j
.text:000000000000F66C                 mov     rsi, [rsp+0D8h+var_C8]
.text:000000000000F671                 mov     rdx, r14
.text:000000000000F674                 mov     rdi, rbx
.text:000000000000F677                 call    re_node_set_add_intersect
.text:000000000000F67C                 test    eax, eax
.text:000000000000F67E                 mov     [rsp+0D8h+var_7C], eax
.text:000000000000F682                 jnz     short loc_F608
.text:000000000000F684                 cmp     qword ptr [r13+28h], 0
.text:000000000000F689                 jnz     loc_F900
.text:000000000000F68F
.text:000000000000F68F loc_F68F:                               ; CODE XREF: update_cur_sifted_state+483↓j
.text:000000000000F68F                 mov     r14, [rsp+0D8h+var_C0]
.text:000000000000F694                 add     r14, [r13+0]
.text:000000000000F698
.text:000000000000F698 loc_F698:                               ; CODE XREF: update_cur_sifted_state+389↓j
.text:000000000000F698                 lea     rdi, [rsp+0D8h+var_7C]
.text:000000000000F69D                 mov     rdx, rbx
.text:000000000000F6A0                 mov     rsi, r12
.text:000000000000F6A3                 call    re_acquire_state
.text:000000000000F6A8                 mov     [r14], rax
.text:000000000000F6AB                 mov     eax, [rsp+0D8h+var_7C]
.text:000000000000F6AF                 test    eax, eax
.text:000000000000F6B1                 jnz     loc_F608
.text:000000000000F6B7                 cmp     [rsp+0D8h+var_C8], 0
.text:000000000000F6BD                 jz      loc_F608
.text:000000000000F6C3                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000F6C8                 mov     rax, [rax+0B8h]
.text:000000000000F6CF                 mov     rdx, [rax+rbp*8]
.text:000000000000F6D3                 xor     eax, eax
.text:000000000000F6D5                 test    byte ptr [rdx+68h], 40h
.text:000000000000F6D9                 jz      loc_F608
.text:000000000000F6DF
.text:000000000000F6DF loc_F6DF:                               ; CODE XREF: update_cur_sifted_state+8C↑j
.text:000000000000F6DF                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000F6E4                 xor     ebx, ebx
.text:000000000000F6E6                 mov     rsi, [rax+0C8h]
.text:000000000000F6ED                 mov     rdx, rsi
.text:000000000000F6F0
.text:000000000000F6F0 loc_F6F0:                               ; CODE XREF: update_cur_sifted_state+2F7↓j
.text:000000000000F6F0                 cmp     rbx, rdx
.text:000000000000F6F3                 jge     short loc_F753
.text:000000000000F6F5                 lea     rax, [rbx+rdx]
.text:000000000000F6F9                 mov     rcx, rax
.text:000000000000F6FC                 shr     rcx, 3Fh
.text:000000000000F700                 add     rcx, rax
.text:000000000000F703                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000F708                 sar     rcx, 1
.text:000000000000F70B                 mov     rdi, [rax+0D8h]
.text:000000000000F712                 lea     rax, [rcx+rcx*4]
.text:000000000000F716                 cmp     rbp, [rdi+rax*8+8]
.text:000000000000F71B                 jle     short loc_F74E
.text:000000000000F71D                 jmp     loc_F857
.text:000000000000F71D ; ---------------------------------------------------------------------------
.text:000000000000F722                 align 8
.text:000000000000F728
.text:000000000000F728 loc_F728:                               ; CODE XREF: update_cur_sifted_state+1E1↓j
.text:000000000000F728                 lea     rdx, [rbx+rcx]
.text:000000000000F72C                 mov     rax, rdx
.text:000000000000F72F                 shr     rax, 3Fh
.text:000000000000F733                 add     rax, rdx
.text:000000000000F736                 sar     rax, 1
.text:000000000000F739                 lea     rdx, [rax+rax*4]
.text:000000000000F73D                 mov     r8, rax
.text:000000000000F740                 cmp     rbp, [rdi+rdx*8+8]
.text:000000000000F745                 jg      loc_F860
.text:000000000000F74B                 mov     rcx, rax
.text:000000000000F74E
.text:000000000000F74E loc_F74E:                               ; CODE XREF: update_cur_sifted_state+1AB↑j
.text:000000000000F74E                 cmp     rbx, rcx
.text:000000000000F751                 jl      short loc_F728
.text:000000000000F753
.text:000000000000F753 loc_F753:                               ; CODE XREF: update_cur_sifted_state+183↑j
.text:000000000000F753                 cmp     rsi, rbx
.text:000000000000F756                 jle     loc_F850
.text:000000000000F75C                 lea     rax, [rbx+rbx*4]
.text:000000000000F760                 lea     rsi, ds:0[rax*8]
.text:000000000000F768                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000F76D                 mov     [rsp+0D8h+var_98], rsi
.text:000000000000F772                 mov     rax, [rax+0D8h]
.text:000000000000F779                 cmp     rbp, [rax+rsi+8]
.text:000000000000F77E                 jnz     loc_F850
.text:000000000000F784                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F788                 jz      loc_F850
.text:000000000000F78E                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000F793                 mov     qword ptr [rsp+0D8h+var_78], 0
.text:000000000000F79C                 mov     r12, [rax+98h]
.text:000000000000F7A3                 mov     rax, [rsp+0D8h+var_C8]
.text:000000000000F7A8                 cmp     qword ptr [rax+8], 0
.text:000000000000F7AD                 jle     loc_F850
.text:000000000000F7B3                 lea     rax, [rsp+0D8h+var_78]
.text:000000000000F7B8                 mov     [rsp+0D8h+var_B8], 0
.text:000000000000F7C1                 mov     [rsp+0D8h+var_90], rbx
.text:000000000000F7C6                 mov     r15, r13
.text:000000000000F7C9                 mov     [rsp+0D8h+var_A0], rax
.text:000000000000F7CE                 jmp     short loc_F7F2
.text:000000000000F7D0 ; ---------------------------------------------------------------------------
.text:000000000000F7D0
.text:000000000000F7D0 loc_F7D0:                               ; CODE XREF: update_cur_sifted_state+2A7↓j
.text:000000000000F7D0                                         ; update_cur_sifted_state+2AD↓j
.text:000000000000F7D0                 cmp     al, 4
.text:000000000000F7D2                 jz      loc_FB58
.text:000000000000F7D8
.text:000000000000F7D8 loc_F7D8:                               ; CODE XREF: update_cur_sifted_state+2AF↓j
.text:000000000000F7D8                                         ; update_cur_sifted_state+7C3↓j
.text:000000000000F7D8                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000000F7DD                 add     [rsp+0D8h+var_B8], 1
.text:000000000000F7E3                 mov     rax, [rsp+0D8h+var_B8]
.text:000000000000F7E8                 cmp     rax, [rcx+8]
.text:000000000000F7EC                 jge     loc_FDAB
.text:000000000000F7F2
.text:000000000000F7F2 loc_F7F2:                               ; CODE XREF: update_cur_sifted_state+25E↑j
.text:000000000000F7F2                 mov     rax, [rsp+0D8h+var_C8]
.text:000000000000F7F7                 mov     rdi, [rsp+0D8h+var_B8]
.text:000000000000F7FC                 mov     rax, [rax+10h]
.text:000000000000F800                 mov     r14, [rax+rdi*8]
.text:000000000000F804                 mov     rax, r14
.text:000000000000F807                 shl     rax, 4
.text:000000000000F80B                 add     rax, [r12]
.text:000000000000F80F                 cmp     r14, [r15+10h]
.text:000000000000F813                 movzx   eax, byte ptr [rax+8]
.text:000000000000F817                 jnz     short loc_F7D0
.text:000000000000F819                 cmp     rbp, [r15+18h]
.text:000000000000F81D                 jnz     short loc_F7D0
.text:000000000000F81F                 jmp     short loc_F7D8
.text:000000000000F81F ; ---------------------------------------------------------------------------
.text:000000000000F821                 align 8
.text:000000000000F828
.text:000000000000F828 loc_F828:                               ; CODE XREF: update_cur_sifted_state+63↑j
.text:000000000000F828                 lea     r14, ds:0[rbp*8]
.text:000000000000F830                 add     r14, [rsi]
.text:000000000000F833                 test    rcx, rcx
.text:000000000000F836                 jnz     loc_F8F0
.text:000000000000F83C                 mov     qword ptr [r14], 0
.text:000000000000F843                 xor     eax, eax
.text:000000000000F845                 jmp     loc_F608
.text:000000000000F845 ; ---------------------------------------------------------------------------
.text:000000000000F84A                 align 10h
.text:000000000000F850
.text:000000000000F850 loc_F850:                               ; CODE XREF: update_cur_sifted_state+1E6↑j
.text:000000000000F850                                         ; update_cur_sifted_state+20E↑j ...
.text:000000000000F850                 xor     eax, eax
.text:000000000000F852                 jmp     loc_F608
.text:000000000000F857 ; ---------------------------------------------------------------------------
.text:000000000000F857
.text:000000000000F857 loc_F857:                               ; CODE XREF: update_cur_sifted_state+1AD↑j
.text:000000000000F857                 mov     r8, rcx
.text:000000000000F85A                 mov     rcx, rdx
.text:000000000000F85D                 nop     dword ptr [rax]
.text:000000000000F860
.text:000000000000F860 loc_F860:                               ; CODE XREF: update_cur_sifted_state+1D5↑j
.text:000000000000F860                 lea     rbx, [r8+1]
.text:000000000000F864                 mov     rdx, rcx
.text:000000000000F867                 jmp     loc_F6F0
.text:000000000000F867 ; ---------------------------------------------------------------------------
.text:000000000000F86C                 align 10h
.text:000000000000F870
.text:000000000000F870 loc_F870:                               ; CODE XREF: update_cur_sifted_state+F6↑j
.text:000000000000F870                 mov     rdi, [rbx+8]
.text:000000000000F874                 mov     qword ptr [rdx+40h], 0
.text:000000000000F87C                 mov     [rsp+0D8h+var_B8], rdx
.text:000000000000F881                 mov     [rdx+38h], rdi
.text:000000000000F885                 shl     rdi, 3          ; size
.text:000000000000F889                 call    _malloc
.text:000000000000F88E                 mov     rdx, [rsp+0D8h+var_B8]
.text:000000000000F893                 test    rax, rax
.text:000000000000F896                 mov     [rdx+48h], rax
.text:000000000000F89A                 jz      short loc_F8E3
.text:000000000000F89C                 cmp     qword ptr [rbx+8], 0
.text:000000000000F8A1                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:000000000000F8A9                 jg      short loc_F8BE
.text:000000000000F8AB                 jmp     loc_F66C
.text:000000000000F8B0 ; ---------------------------------------------------------------------------
.text:000000000000F8B0
.text:000000000000F8B0 loc_F8B0:                               ; CODE XREF: update_cur_sifted_state+371↓j
.text:000000000000F8B0                 add     r15, 1
.text:000000000000F8B4                 cmp     r15, [rbx+8]
.text:000000000000F8B8                 jge     loc_F66C
.text:000000000000F8BE
.text:000000000000F8BE loc_F8BE:                               ; CODE XREF: update_cur_sifted_state+339↑j
.text:000000000000F8BE                 mov     rax, [rbx+10h]
.text:000000000000F8C2                 mov     rdi, r14
.text:000000000000F8C5                 mov     rax, [rax+r15*8]
.text:000000000000F8C9                 lea     rdx, [rax+rax*2]
.text:000000000000F8CD                 mov     rax, [r12+38h]
.text:000000000000F8D2                 lea     rsi, [rax+rdx*8]
.text:000000000000F8D6                 call    re_node_set_merge
.text:000000000000F8DB                 test    eax, eax
.text:000000000000F8DD                 mov     dword ptr [rsp+0D8h+var_78], eax
.text:000000000000F8E1                 jz      short loc_F8B0
.text:000000000000F8E3
.text:000000000000F8E3 loc_F8E3:                               ; CODE XREF: update_cur_sifted_state+32A↑j
.text:000000000000F8E3                 mov     eax, 0Ch
.text:000000000000F8E8                 jmp     loc_F608
.text:000000000000F8E8 ; ---------------------------------------------------------------------------
.text:000000000000F8ED                 align 10h
.text:000000000000F8F0
.text:000000000000F8F0 loc_F8F0:                               ; CODE XREF: update_cur_sifted_state+2C6↑j
.text:000000000000F8F0                 mov     [rsp+0D8h+var_C8], 0
.text:000000000000F8F9                 jmp     loc_F698
.text:000000000000F8F9 ; ---------------------------------------------------------------------------
.text:000000000000F8FE                 align 20h
.text:000000000000F900
.text:000000000000F900 loc_F900:                               ; CODE XREF: update_cur_sifted_state+119↑j
.text:000000000000F900                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000F905                 mov     rax, [rax+0D8h]
.text:000000000000F90C                 mov     [rsp+0D8h+var_B8], rax
.text:000000000000F911                 jle     loc_F9EB
.text:000000000000F917                 xor     r15d, r15d
.text:000000000000F91A                 nop     word ptr [rax+rax+00h]
.text:000000000000F920
.text:000000000000F920 loc_F920:                               ; CODE XREF: update_cur_sifted_state+475↓j
.text:000000000000F920                 mov     rax, [r13+30h]
.text:000000000000F924                 mov     rdi, [rsp+0D8h+var_B8]
.text:000000000000F929                 mov     rax, [rax+r15*8]
.text:000000000000F92D                 lea     rax, [rax+rax*4]
.text:000000000000F931                 lea     rdx, [rdi+rax*8]
.text:000000000000F935                 cmp     rbp, [rdx+10h]
.text:000000000000F939                 jle     loc_F9DD
.text:000000000000F93F                 cmp     rbp, [rdx+8]
.text:000000000000F943                 jg      loc_F9DD
.text:000000000000F949                 mov     rcx, [rdx]
.text:000000000000F94C                 mov     rax, [r12]
.text:000000000000F950                 mov     rsi, [rbx+8]
.text:000000000000F954                 shl     rcx, 4
.text:000000000000F958                 cmp     rbp, [rdx+18h]
.text:000000000000F95C                 mov     r8, [rax+rcx]
.text:000000000000F960                 jz      loc_FA00
.text:000000000000F966                 xor     r14d, r14d
.text:000000000000F969                 test    rsi, rsi
.text:000000000000F96C                 jle     short loc_F9DD
.text:000000000000F96E                 mov     [rsp+0D8h+var_B0], rbp
.text:000000000000F973                 mov     rbp, r8
.text:000000000000F976                 jmp     short loc_F98E
.text:000000000000F976 ; ---------------------------------------------------------------------------
.text:000000000000F978                 align 20h
.text:000000000000F980
.text:000000000000F980 loc_F980:                               ; CODE XREF: update_cur_sifted_state+43A↓j
.text:000000000000F980                                         ; update_cur_sifted_state+43F↓j
.text:000000000000F980                 add     r14, 1
.text:000000000000F984                 cmp     r14, [rbx+8]
.text:000000000000F988                 jge     short loc_F9D8
.text:000000000000F98A
.text:000000000000F98A loc_F98A:                               ; CODE XREF: update_cur_sifted_state+461↓j
.text:000000000000F98A                 mov     rax, [r12]
.text:000000000000F98E
.text:000000000000F98E loc_F98E:                               ; CODE XREF: update_cur_sifted_state+406↑j
.text:000000000000F98E                 mov     rdx, [rbx+10h]
.text:000000000000F992                 mov     rsi, [rdx+r14*8]
.text:000000000000F996                 mov     rdx, rsi
.text:000000000000F999                 shl     rdx, 4
.text:000000000000F99D                 add     rax, rdx
.text:000000000000F9A0                 movzx   edx, byte ptr [rax+8]
.text:000000000000F9A4                 sub     edx, 8
.text:000000000000F9A7                 cmp     edx, 1
.text:000000000000F9AA                 ja      short loc_F980
.text:000000000000F9AC                 cmp     rbp, [rax]
.text:000000000000F9AF                 jnz     short loc_F980
.text:000000000000F9B1                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000000F9B6                 mov     rdx, rbx
.text:000000000000F9B9                 mov     rdi, r12
.text:000000000000F9BC                 call    _sub_epsilon_src_nodes
.text:000000000000F9C1                 test    eax, eax
.text:000000000000F9C3                 jnz     loc_F608
.text:000000000000F9C9                 add     r14, 1
.text:000000000000F9CD                 cmp     r14, [rbx+8]
.text:000000000000F9D1                 jl      short loc_F98A
.text:000000000000F9D3                 nop     dword ptr [rax+rax+00h]
.text:000000000000F9D8
.text:000000000000F9D8 loc_F9D8:                               ; CODE XREF: update_cur_sifted_state+418↑j
.text:000000000000F9D8                 mov     rbp, [rsp+0D8h+var_B0]
.text:000000000000F9DD
.text:000000000000F9DD loc_F9DD:                               ; CODE XREF: update_cur_sifted_state+3C9↑j
.text:000000000000F9DD                                         ; update_cur_sifted_state+3D3↑j ...
.text:000000000000F9DD                 add     r15, 1
.text:000000000000F9E1                 cmp     r15, [r13+28h]
.text:000000000000F9E5                 jl      loc_F920
.text:000000000000F9EB
.text:000000000000F9EB loc_F9EB:                               ; CODE XREF: update_cur_sifted_state+3A1↑j
.text:000000000000F9EB                 mov     [rsp+0D8h+var_7C], 0
.text:000000000000F9F3                 jmp     loc_F68F
.text:000000000000F9F3 ; ---------------------------------------------------------------------------
.text:000000000000F9F8                 align 20h
.text:000000000000FA00
.text:000000000000FA00 loc_FA00:                               ; CODE XREF: update_cur_sifted_state+3F0↑j
.text:000000000000FA00                 test    rsi, rsi
.text:000000000000FA03                 jle     short loc_F9DD
.text:000000000000FA05                 mov     r10, [rbx+10h]
.text:000000000000FA09                 mov     r9, 0FFFFFFFFFFFFFFFFh
.text:000000000000FA10                 lea     r11, [r10+rsi*8]
.text:000000000000FA14                 mov     rcx, r10
.text:000000000000FA17                 mov     rsi, r9
.text:000000000000FA1A                 jmp     short loc_FA36
.text:000000000000FA1A ; ---------------------------------------------------------------------------
.text:000000000000FA1C                 align 20h
.text:000000000000FA20
.text:000000000000FA20 loc_FA20:                               ; CODE XREF: update_cur_sifted_state+4DC↓j
.text:000000000000FA20                 cmp     r14d, 9
.text:000000000000FA24                 jnz     short loc_FA2D
.text:000000000000FA26                 cmp     r8, [rdx]
.text:000000000000FA29                 cmovz   r9, rdi
.text:000000000000FA2D
.text:000000000000FA2D loc_FA2D:                               ; CODE XREF: update_cur_sifted_state+4B4↑j
.text:000000000000FA2D                 add     rcx, 8
.text:000000000000FA31                 cmp     r11, rcx
.text:000000000000FA34                 jz      short loc_FA5E
.text:000000000000FA36
.text:000000000000FA36 loc_FA36:                               ; CODE XREF: update_cur_sifted_state+4AA↑j
.text:000000000000FA36                                         ; update_cur_sifted_state+4EC↓j
.text:000000000000FA36                 mov     rdi, [rcx]
.text:000000000000FA39                 mov     rdx, rdi
.text:000000000000FA3C                 shl     rdx, 4
.text:000000000000FA40                 add     rdx, rax
.text:000000000000FA43                 movzx   r14d, byte ptr [rdx+8]
.text:000000000000FA48                 cmp     r14d, 8
.text:000000000000FA4C                 jnz     short loc_FA20
.text:000000000000FA4E                 cmp     r8, [rdx]
.text:000000000000FA51                 cmovz   rsi, rdi
.text:000000000000FA55                 add     rcx, 8
.text:000000000000FA59                 cmp     r11, rcx
.text:000000000000FA5C                 jnz     short loc_FA36
.text:000000000000FA5E
.text:000000000000FA5E loc_FA5E:                               ; CODE XREF: update_cur_sifted_state+4C4↑j
.text:000000000000FA5E                 test    rsi, rsi
.text:000000000000FA61                 mov     r14, r9
.text:000000000000FA64                 mov     [rsp+0D8h+var_B0], r9
.text:000000000000FA69                 js      loc_FB30
.text:000000000000FA6F                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000000FA74                 mov     rdx, rbx
.text:000000000000FA77                 mov     rdi, r12
.text:000000000000FA7A                 call    _sub_epsilon_src_nodes
.text:000000000000FA7F                 test    eax, eax
.text:000000000000FA81                 jnz     loc_F608
.text:000000000000FA87                 test    r14, r14
.text:000000000000FA8A                 js      loc_F9DD
.text:000000000000FA90                 cmp     qword ptr [rbx+8], 0
.text:000000000000FA95                 jle     loc_F9DD
.text:000000000000FA9B                 mov     r10, [rbx+10h]
.text:000000000000FA9F
.text:000000000000FA9F loc_FA9F:                               ; CODE XREF: update_cur_sifted_state+5C6↓j
.text:000000000000FA9F                 xor     r14d, r14d
.text:000000000000FAA2                 mov     [rsp+0D8h+var_A8], rbp
.text:000000000000FAA7                 mov     rbp, r14
.text:000000000000FAAA                 mov     r14, [rsp+0D8h+var_B0]
.text:000000000000FAAF                 jmp     short loc_FACA
.text:000000000000FAAF ; ---------------------------------------------------------------------------
.text:000000000000FAB1                 align 8
.text:000000000000FAB8
.text:000000000000FAB8 loc_FAB8:                               ; CODE XREF: update_cur_sifted_state+581↓j
.text:000000000000FAB8                                         ; update_cur_sifted_state+598↓j ...
.text:000000000000FAB8                 add     rbp, 1
.text:000000000000FABC                 cmp     rbp, [rbx+8]
.text:000000000000FAC0                 jge     loc_FB48
.text:000000000000FAC6                 mov     r10, [rbx+10h]
.text:000000000000FACA
.text:000000000000FACA loc_FACA:                               ; CODE XREF: update_cur_sifted_state+53F↑j
.text:000000000000FACA                 mov     r10, [r10+rbp*8]
.text:000000000000FACE                 mov     rax, [r12+38h]
.text:000000000000FAD3                 mov     rdx, r14
.text:000000000000FAD6                 lea     r9, [r10+r10*2]
.text:000000000000FADA                 shl     r9, 3
.text:000000000000FADE                 add     rax, r9
.text:000000000000FAE1                 mov     rdi, [rax+8]
.text:000000000000FAE5                 lea     rsi, [rax+10h]
.text:000000000000FAE9                 call    re_node_set_contains_isra_3
.text:000000000000FAEE                 test    rax, rax
.text:000000000000FAF1                 jnz     short loc_FAB8
.text:000000000000FAF3                 add     r9, [r12+30h]
.text:000000000000FAF8                 mov     rdi, [r9+8]
.text:000000000000FAFC                 lea     rsi, [r9+10h]
.text:000000000000FB00                 call    re_node_set_contains_isra_3
.text:000000000000FB05                 test    rax, rax
.text:000000000000FB08                 jnz     short loc_FAB8
.text:000000000000FB0A                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000000FB0F                 mov     rdx, rbx
.text:000000000000FB12                 mov     rsi, r10
.text:000000000000FB15                 mov     rdi, r12
.text:000000000000FB18                 call    _sub_epsilon_src_nodes
.text:000000000000FB1D                 test    eax, eax
.text:000000000000FB1F                 jnz     loc_F608
.text:000000000000FB25                 sub     rbp, 1
.text:000000000000FB29                 jmp     short loc_FAB8
.text:000000000000FB29 ; ---------------------------------------------------------------------------
.text:000000000000FB2B                 align 10h
.text:000000000000FB30
.text:000000000000FB30 loc_FB30:                               ; CODE XREF: update_cur_sifted_state+4F9↑j
.text:000000000000FB30                 cmp     [rsp+0D8h+var_B0], 0
.text:000000000000FB36                 jns     loc_FA9F
.text:000000000000FB3C                 jmp     loc_F9DD
.text:000000000000FB3C ; ---------------------------------------------------------------------------
.text:000000000000FB41                 align 8
.text:000000000000FB48
.text:000000000000FB48 loc_FB48:                               ; CODE XREF: update_cur_sifted_state+550↑j
.text:000000000000FB48                 mov     rbp, [rsp+0D8h+var_A8]
.text:000000000000FB4D                 jmp     loc_F9DD
.text:000000000000FB4D ; ---------------------------------------------------------------------------
.text:000000000000FB52                 align 8
.text:000000000000FB58
.text:000000000000FB58 loc_FB58:                               ; CODE XREF: update_cur_sifted_state+262↑j
.text:000000000000FB58                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000000FB5D                 mov     r13, [rsp+0D8h+var_98]
.text:000000000000FB62                 mov     rbx, [rsp+0D8h+var_90]
.text:000000000000FB67                 add     r13, [rax+0D8h]
.text:000000000000FB6E                 lea     rax, [r14+r14*2]
.text:000000000000FB72                 shl     rax, 3
.text:000000000000FB76                 mov     [rsp+0D8h+var_A8], rax
.text:000000000000FB7B                 lea     rax, ds:0[r14*8]
.text:000000000000FB83                 mov     [rsp+0D8h+var_B0], rax
.text:000000000000FB88                 mov     rax, r15
.text:000000000000FB8B                 mov     r15, r13
.text:000000000000FB8E                 mov     r13, rbx
.text:000000000000FB91                 mov     rbx, rax
.text:000000000000FB94                 jmp     loc_FCFE
.text:000000000000FB94 ; ---------------------------------------------------------------------------
.text:000000000000FB99                 align 20h
.text:000000000000FBA0
.text:000000000000FBA0 loc_FBA0:                               ; CODE XREF: update_cur_sifted_state+791↓j
.text:000000000000FBA0                 mov     rax, [r15+18h]
.text:000000000000FBA4                 sub     rax, [r15+10h]
.text:000000000000FBA8                 test    rax, rax
.text:000000000000FBAB                 lea     r9, [rbp+rax+0]
.text:000000000000FBB0                 jz      loc_FD10
.text:000000000000FBB6                 mov     rax, [r12+18h]
.text:000000000000FBBB                 mov     rsi, [rsp+0D8h+var_B0]
.text:000000000000FBC0                 mov     r10, [rax+rsi]
.text:000000000000FBC4
.text:000000000000FBC4 loc_FBC4:                               ; CODE XREF: update_cur_sifted_state+7B2↓j
.text:000000000000FBC4                 cmp     r9, [rbx+18h]
.text:000000000000FBC8                 jg      loc_FD07
.text:000000000000FBCE                 mov     rax, [rbx]
.text:000000000000FBD1                 mov     rax, [rax+r9*8]
.text:000000000000FBD5                 test    rax, rax
.text:000000000000FBD8                 jz      loc_FD07
.text:000000000000FBDE                 mov     rdi, [rax+10h]
.text:000000000000FBE2                 lea     rsi, [rax+18h]
.text:000000000000FBE6                 mov     rdx, r10
.text:000000000000FBE9                 call    re_node_set_contains_isra_3
.text:000000000000FBEE                 test    rax, rax
.text:000000000000FBF1                 jz      loc_FD07
.text:000000000000FBF7                 sub     rsp, 8
.text:000000000000FBFB                 lea     rdx, [rbx+30h]
.text:000000000000FBFF                 lea     rsi, [rbx+28h]
.text:000000000000FC03                 push    r9
.text:000000000000FC05                 mov     rdi, [rsp+0E8h+var_D0]
.text:000000000000FC0A                 mov     rcx, r14
.text:000000000000FC0D                 mov     r9, r10
.text:000000000000FC10                 mov     r8, rbp
.text:000000000000FC13                 call    check_dst_limits_isra_13
.text:000000000000FC18                 test    al, al
.text:000000000000FC1A                 pop     rdx
.text:000000000000FC1B                 pop     rcx
.text:000000000000FC1C                 jnz     loc_FD07
.text:000000000000FC22                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:000000000000FC28                 jz      loc_FD38
.text:000000000000FC2E
.text:000000000000FC2E loc_FC2E:                               ; CODE XREF: update_cur_sifted_state+808↓j
.text:000000000000FC2E                 mov     rax, [rsp+0D8h+var_A0]
.text:000000000000FC33                 mov     rsi, r13
.text:000000000000FC36                 mov     qword ptr [rsp+0D8h+var_68], r14
.text:000000000000FC3B                 mov     qword ptr [rsp+0D8h+var_68+8], rbp
.text:000000000000FC40                 lea     rdi, [rax+20h]
.text:000000000000FC44                 call    re_node_set_insert
.text:000000000000FC49                 test    al, al
.text:000000000000FC4B                 jz      loc_FDA4
.text:000000000000FC51                 mov     rdi, [rsp+0D8h+var_C0]
.text:000000000000FC56                 mov     rax, qword ptr [rsp+0D8h+var_78]
.text:000000000000FC5B                 mov     rsi, [rsp+0D8h+var_A0]
.text:000000000000FC60                 mov     r15, [rax+rdi]
.text:000000000000FC64                 mov     rdi, [rsp+0D8h+var_D0]
.text:000000000000FC69                 call    sift_states_backward
.text:000000000000FC6E                 test    eax, eax
.text:000000000000FC70                 jnz     loc_FD7E
.text:000000000000FC76                 mov     rsi, [rbx+8]
.text:000000000000FC7A                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:000000000000FC7F                 test    rsi, rsi
.text:000000000000FC82                 jz      short loc_FC9D
.text:000000000000FC84                 lea     rcx, [rbp+1]
.text:000000000000FC88                 mov     rdi, r12
.text:000000000000FC8B                 call    merge_state_array
.text:000000000000FC90                 test    eax, eax
.text:000000000000FC92                 jnz     loc_FD7E
.text:000000000000FC98                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:000000000000FC9D
.text:000000000000FC9D loc_FC9D:                               ; CODE XREF: update_cur_sifted_state+712↑j
.text:000000000000FC9D                 mov     r11, [rsp+0D8h+var_A0]
.text:000000000000FCA2                 mov     rax, [rsp+0D8h+var_C0]
.text:000000000000FCA7                 mov     rdi, [rsp+0D8h+var_50]
.text:000000000000FCAF                 lea     r9, [r11+30h]
.text:000000000000FCB3                 mov     [rdx+rax], r15
.text:000000000000FCB7                 mov     rdx, r13
.text:000000000000FCBA                 mov     rsi, r9
.text:000000000000FCBD                 call    re_node_set_contains_isra_3
.text:000000000000FCC2                 sub     rax, 1
.text:000000000000FCC6                 mov     rdx, rax
.text:000000000000FCC9                 js      short loc_FCD7
.text:000000000000FCCB                 lea     rdi, [r11+28h]
.text:000000000000FCCF                 mov     rsi, r9
.text:000000000000FCD2                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000000FCD7
.text:000000000000FCD7 loc_FCD7:                               ; CODE XREF: update_cur_sifted_state+759↑j
.text:000000000000FCD7                 mov     rcx, [rsp+0D8h+var_D0]
.text:000000000000FCDC                 lea     rax, [r13+r13*4+0]
.text:000000000000FCE1                 mov     rdx, [rcx+0D8h]
.text:000000000000FCE8                 lea     rax, [rdx+rax*8]
.text:000000000000FCEC                 nop     dword ptr [rax+00h]
.text:000000000000FCF0
.text:000000000000FCF0 loc_FCF0:                               ; CODE XREF: update_cur_sifted_state+79A↓j
.text:000000000000FCF0                 add     r13, 1
.text:000000000000FCF4                 cmp     byte ptr [rax+20h], 0
.text:000000000000FCF8                 lea     r15, [rax+28h]
.text:000000000000FCFC                 jz      short loc_FD30
.text:000000000000FCFE
.text:000000000000FCFE loc_FCFE:                               ; CODE XREF: update_cur_sifted_state+624↑j
.text:000000000000FCFE                 cmp     r14, [r15]
.text:000000000000FD01                 jz      loc_FBA0
.text:000000000000FD07
.text:000000000000FD07 loc_FD07:                               ; CODE XREF: update_cur_sifted_state+658↑j
.text:000000000000FD07                                         ; update_cur_sifted_state+668↑j ...
.text:000000000000FD07                 mov     rax, r15
.text:000000000000FD0A                 jmp     short loc_FCF0
.text:000000000000FD0A ; ---------------------------------------------------------------------------
.text:000000000000FD0C                 align 10h
.text:000000000000FD10
.text:000000000000FD10 loc_FD10:                               ; CODE XREF: update_cur_sifted_state+640↑j
.text:000000000000FD10                 mov     rax, [r12+28h]
.text:000000000000FD15                 mov     rdi, [rsp+0D8h+var_A8]
.text:000000000000FD1A                 mov     rax, [rax+rdi+10h]
.text:000000000000FD1F                 mov     r10, [rax]
.text:000000000000FD22                 jmp     loc_FBC4
.text:000000000000FD22 ; ---------------------------------------------------------------------------
.text:000000000000FD27                 align 10h
.text:000000000000FD30
.text:000000000000FD30 loc_FD30:                               ; CODE XREF: update_cur_sifted_state+78C↑j
.text:000000000000FD30                 mov     r15, rbx
.text:000000000000FD33                 jmp     loc_F7D8
.text:000000000000FD38 ; ---------------------------------------------------------------------------
.text:000000000000FD38
.text:000000000000FD38 loc_FD38:                               ; CODE XREF: update_cur_sifted_state+6B8↑j
.text:000000000000FD38                 mov     rax, [rbx+30h]
.text:000000000000FD3C                 lea     rsi, [rbx+20h]
.text:000000000000FD40                 movdqa  xmm0, xmmword ptr [rbx]
.text:000000000000FD44                 mov     [rsp+0D8h+ptr], rax
.text:000000000000FD4C                 mov     rax, [rsp+0D8h+var_A0]
.text:000000000000FD51                 movaps  [rsp+0D8h+var_78], xmm0
.text:000000000000FD56                 lea     rdi, [rax+20h]
.text:000000000000FD5A                 movdqa  xmm0, xmmword ptr [rbx+10h]
.text:000000000000FD5F                 movaps  [rsp+0D8h+var_68], xmm0
.text:000000000000FD64                 movdqa  xmm0, xmmword ptr [rbx+20h]
.text:000000000000FD69                 movaps  xmmword ptr [rsp+80h], xmm0
.text:000000000000FD71                 call    re_node_set_init_copy
.text:000000000000FD76                 test    eax, eax
.text:000000000000FD78                 jz      loc_FC2E
.text:000000000000FD7E
.text:000000000000FD7E loc_FD7E:                               ; CODE XREF: update_cur_sifted_state+700↑j
.text:000000000000FD7E                                         ; update_cur_sifted_state+722↑j ...
.text:000000000000FD7E                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:000000000000FD84                 jz      loc_F608
.text:000000000000FD8A
.text:000000000000FD8A loc_FD8A:                               ; CODE XREF: update_cur_sifted_state+849↓j
.text:000000000000FD8A                 mov     rdi, [rsp+0D8h+ptr] ; ptr
.text:000000000000FD92                 mov     dword ptr [rsp+0D8h+var_D0], eax
.text:000000000000FD96                 call    _free
.text:000000000000FD9B                 mov     eax, dword ptr [rsp+0D8h+var_D0]
.text:000000000000FD9F                 jmp     loc_F608
.text:000000000000FDA4 ; ---------------------------------------------------------------------------
.text:000000000000FDA4
.text:000000000000FDA4 loc_FDA4:                               ; CODE XREF: update_cur_sifted_state+6DB↑j
.text:000000000000FDA4                 mov     eax, 0Ch
.text:000000000000FDA9                 jmp     short loc_FD7E
.text:000000000000FDAB ; ---------------------------------------------------------------------------
.text:000000000000FDAB
.text:000000000000FDAB loc_FDAB:                               ; CODE XREF: update_cur_sifted_state+27C↑j
.text:000000000000FDAB                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:000000000000FDB1                 jz      loc_F850
.text:000000000000FDB7                 xor     eax, eax
.text:000000000000FDB9                 jmp     short loc_FD8A
.text:000000000000FDBB ; ---------------------------------------------------------------------------
.text:000000000000FDBB
.text:000000000000FDBB loc_FDBB:                               ; CODE XREF: update_cur_sifted_state+A9↑j
.text:000000000000FDBB                 call    ___stack_chk_fail
.text:000000000000FDBB ; } // starts at F570
.text:000000000000FDBB update_cur_sifted_state endp
.text:000000000000FDBB
.text:000000000000FDC0
.text:000000000000FDC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FDC0
.text:000000000000FDC0
.text:000000000000FDC0 parse_bracket_element_constprop_37 proc near
.text:000000000000FDC0                                         ; CODE XREF: parse_expression+90F↓p
.text:000000000000FDC0                                         ; parse_expression+E67↓p
.text:000000000000FDC0
.text:000000000000FDC0 var_40          = byte ptr -40h
.text:000000000000FDC0 var_30          = qword ptr -30h
.text:000000000000FDC0
.text:000000000000FDC0 ; __unwind {
.text:000000000000FDC0                 push    r14
.text:000000000000FDC2                 push    r13
.text:000000000000FDC4                 mov     r10, rsi
.text:000000000000FDC7                 push    r12
.text:000000000000FDC9                 push    rbp
.text:000000000000FDCA                 movsxd  r11, ecx
.text:000000000000FDCD                 push    rbx
.text:000000000000FDCE                 mov     rbp, rdx
.text:000000000000FDD1                 mov     rbx, rdi
.text:000000000000FDD4                 sub     rsp, 20h
.text:000000000000FDD8                 mov     r12, [rsi+48h]
.text:000000000000FDDC                 mov     rax, fs:28h
.text:000000000000FDE5                 mov     [rsp+48h+var_30], rax
.text:000000000000FDEA                 xor     eax, eax
.text:000000000000FDEC                 cmp     dword ptr [rsi+90h], 1
.text:000000000000FDF3                 jz      short loc_FE48
.text:000000000000FDF5                 mov     rsi, r12
.text:000000000000FDF8                 mov     rdi, r10
.text:000000000000FDFB                 call    re_string_char_size_at_part_0
.text:000000000000FE00                 cmp     eax, 1
.text:000000000000FE03                 jle     short loc_FE48
.text:000000000000FE05                 mov     rdx, [r10+10h]
.text:000000000000FE09                 cdqe
.text:000000000000FE0B                 mov     dword ptr [rbx], 1
.text:000000000000FE11                 add     rax, r12
.text:000000000000FE14                 mov     edx, [rdx+r12*4]
.text:000000000000FE18                 mov     [rbx+8], edx
.text:000000000000FE1B                 mov     [r10+48h], rax
.text:000000000000FE1F                 xor     eax, eax
.text:000000000000FE21
.text:000000000000FE21 loc_FE21:                               ; CODE XREF: parse_bracket_element_constprop_37+BD↓j
.text:000000000000FE21                                         ; parse_bracket_element_constprop_37+161↓j ...
.text:000000000000FE21                 mov     rcx, [rsp+48h+var_30]
.text:000000000000FE26                 xor     rcx, fs:28h
.text:000000000000FE2F                 jnz     loc_10018
.text:000000000000FE35                 add     rsp, 20h
.text:000000000000FE39                 pop     rbx
.text:000000000000FE3A                 pop     rbp
.text:000000000000FE3B                 pop     r12
.text:000000000000FE3D                 pop     r13
.text:000000000000FE3F                 pop     r14
.text:000000000000FE41                 retn
.text:000000000000FE41 ; ---------------------------------------------------------------------------
.text:000000000000FE42                 align 8
.text:000000000000FE48
.text:000000000000FE48 loc_FE48:                               ; CODE XREF: parse_bracket_element_constprop_37+33↑j
.text:000000000000FE48                                         ; parse_bracket_element_constprop_37+43↑j
.text:000000000000FE48                 movzx   eax, byte ptr [rbp+8]
.text:000000000000FE4C                 add     r11, r12
.text:000000000000FE4F                 mov     [r10+48h], r11
.text:000000000000FE53                 mov     edx, eax
.text:000000000000FE55                 and     edx, 0FFFFFFFBh
.text:000000000000FE58                 cmp     dl, 1Ah
.text:000000000000FE5B                 jz      short loc_FE80
.text:000000000000FE5D                 cmp     al, 1Ch
.text:000000000000FE5F                 jz      short loc_FE80
.text:000000000000FE61                 cmp     al, 16h
.text:000000000000FE63                 jnz     short loc_FE6E
.text:000000000000FE65                 test    r9b, r9b
.text:000000000000FE68                 jz      loc_FFB2
.text:000000000000FE6E
.text:000000000000FE6E loc_FE6E:                               ; CODE XREF: parse_bracket_element_constprop_37+A3↑j
.text:000000000000FE6E                                         ; parse_bracket_element_constprop_37+20A↓j
.text:000000000000FE6E                 movzx   eax, byte ptr [rbp+0]
.text:000000000000FE72                 mov     dword ptr [rbx], 0
.text:000000000000FE78                 mov     [rbx+8], al
.text:000000000000FE7B                 xor     eax, eax
.text:000000000000FE7D                 jmp     short loc_FE21
.text:000000000000FE7D ; ---------------------------------------------------------------------------
.text:000000000000FE7F                 align 20h
.text:000000000000FE80
.text:000000000000FE80 loc_FE80:                               ; CODE XREF: parse_bracket_element_constprop_37+9B↑j
.text:000000000000FE80                                         ; parse_bracket_element_constprop_37+9F↑j
.text:000000000000FE80                 mov     r12, [r10+68h]
.text:000000000000FE84                 cmp     r11, r12
.text:000000000000FE87                 jge     loc_FFA8
.text:000000000000FE8D                 movzx   r13d, byte ptr [rbp+0]
.text:000000000000FE92                 xor     r8d, r8d
.text:000000000000FE95                 jmp     short loc_FEC2
.text:000000000000FE95 ; ---------------------------------------------------------------------------
.text:000000000000FE97                 align 20h
.text:000000000000FEA0
.text:000000000000FEA0 loc_FEA0:                               ; CODE XREF: parse_bracket_element_constprop_37+126↓j
.text:000000000000FEA0                                         ; parse_bracket_element_constprop_37+130↓j
.text:000000000000FEA0                 mov     rax, [rbx+8]
.text:000000000000FEA4                 mov     [rax+r8], r9b
.text:000000000000FEA8                 add     r8, 1
.text:000000000000FEAC                 cmp     r8, 20h ; ' '
.text:000000000000FEB0                 jz      loc_FFA8
.text:000000000000FEB6                 movzx   eax, byte ptr [rbp+8]
.text:000000000000FEBA                 mov     r11, [r10+48h]
.text:000000000000FEBE                 mov     r12, [r10+68h]
.text:000000000000FEC2
.text:000000000000FEC2 loc_FEC2:                               ; CODE XREF: parse_bracket_element_constprop_37+D5↑j
.text:000000000000FEC2                 cmp     al, 1Eh
.text:000000000000FEC4                 movsxd  r14, r8d
.text:000000000000FEC7                 jz      short loc_FF30
.text:000000000000FEC9
.text:000000000000FEC9 loc_FEC9:                               ; CODE XREF: parse_bracket_element_constprop_37+178↓j
.text:000000000000FEC9                                         ; parse_bracket_element_constprop_37+197↓j ...
.text:000000000000FEC9                 mov     rdx, [r10+8]
.text:000000000000FECD                 lea     rax, [r11+1]
.text:000000000000FED1                 mov     [r10+48h], rax
.text:000000000000FED5                 movzx   r9d, byte ptr [rdx+r11]
.text:000000000000FEDA
.text:000000000000FEDA loc_FEDA:                               ; CODE XREF: parse_bracket_element_constprop_37+1DD↓j
.text:000000000000FEDA                                         ; parse_bracket_element_constprop_37+22C↓j
.text:000000000000FEDA                 cmp     rax, r12
.text:000000000000FEDD                 jge     loc_FFA8
.text:000000000000FEE3                 cmp     r13b, r9b
.text:000000000000FEE6                 jnz     short loc_FEA0
.text:000000000000FEE8                 mov     rdx, [r10+8]
.text:000000000000FEEC                 cmp     byte ptr [rdx+rax], 5Dh ; ']'
.text:000000000000FEF0                 jnz     short loc_FEA0
.text:000000000000FEF2                 add     rax, 1
.text:000000000000FEF6                 mov     [r10+48h], rax
.text:000000000000FEFA                 mov     rax, [rbx+8]
.text:000000000000FEFE                 mov     byte ptr [rax+r14], 0
.text:000000000000FF03                 movzx   eax, byte ptr [rbp+8]
.text:000000000000FF07                 cmp     al, 1Ch
.text:000000000000FF09                 jz      loc_1000B
.text:000000000000FF0F                 cmp     al, 1Eh
.text:000000000000FF11                 jz      loc_FFFE
.text:000000000000FF17                 cmp     al, 1Ah
.text:000000000000FF19                 jz      loc_FFF1
.text:000000000000FF1F                 xor     eax, eax
.text:000000000000FF21                 jmp     loc_FE21
.text:000000000000FF21 ; ---------------------------------------------------------------------------
.text:000000000000FF26                 align 10h
.text:000000000000FF30
.text:000000000000FF30 loc_FF30:                               ; CODE XREF: parse_bracket_element_constprop_37+107↑j
.text:000000000000FF30                 cmp     byte ptr [r10+8Bh], 0
.text:000000000000FF38                 jz      short loc_FEC9
.text:000000000000FF3A                 cmp     byte ptr [r10+8Ch], 0
.text:000000000000FF42                 jz      loc_FFD8
.text:000000000000FF48                 cmp     r11, [r10+30h]
.text:000000000000FF4C                 jz      short loc_FF5D
.text:000000000000FF4E                 mov     rax, [r10+10h]
.text:000000000000FF52                 cmp     dword ptr [rax+r11*4], 0FFFFFFFFh
.text:000000000000FF57                 jz      loc_FEC9
.text:000000000000FF5D
.text:000000000000FF5D loc_FF5D:                               ; CODE XREF: parse_bracket_element_constprop_37+18C↑j
.text:000000000000FF5D                 mov     rax, [r10+18h]
.text:000000000000FF61                 mov     rax, [rax+r11*8]
.text:000000000000FF65                 add     rax, [r10]
.text:000000000000FF68                 add     rax, [r10+28h]
.text:000000000000FF6C                 movzx   r9d, byte ptr [rax]
.text:000000000000FF70                 test    r9b, 80h
.text:000000000000FF74                 jnz     loc_FEC9
.text:000000000000FF7A                 cmp     dword ptr [r10+90h], 1
.text:000000000000FF82                 mov     eax, 1
.text:000000000000FF87                 jz      short loc_FF96
.text:000000000000FF89                 mov     rsi, r11
.text:000000000000FF8C                 mov     rdi, r10
.text:000000000000FF8F                 call    re_string_char_size_at_part_0
.text:000000000000FF94                 cdqe
.text:000000000000FF96
.text:000000000000FF96 loc_FF96:                               ; CODE XREF: parse_bracket_element_constprop_37+1C7↑j
.text:000000000000FF96                 add     rax, r11
.text:000000000000FF99                 mov     [r10+48h], rax
.text:000000000000FF9D                 jmp     loc_FEDA
.text:000000000000FF9D ; ---------------------------------------------------------------------------
.text:000000000000FFA2                 align 8
.text:000000000000FFA8
.text:000000000000FFA8 loc_FFA8:                               ; CODE XREF: parse_bracket_element_constprop_37+C7↑j
.text:000000000000FFA8                                         ; parse_bracket_element_constprop_37+F0↑j ...
.text:000000000000FFA8                 mov     eax, 7
.text:000000000000FFAD                 jmp     loc_FE21
.text:000000000000FFB2 ; ---------------------------------------------------------------------------
.text:000000000000FFB2
.text:000000000000FFB2 loc_FFB2:                               ; CODE XREF: parse_bracket_element_constprop_37+A8↑j
.text:000000000000FFB2                 mov     rdi, rsp
.text:000000000000FFB5                 mov     rdx, r8
.text:000000000000FFB8                 mov     rsi, r10
.text:000000000000FFBB                 call    peek_token_bracket
.text:000000000000FFC0                 cmp     [rsp+48h+var_40], 15h
.text:000000000000FFC5                 mov     eax, 0Bh
.text:000000000000FFCA                 jz      loc_FE6E
.text:000000000000FFD0                 jmp     loc_FE21
.text:000000000000FFD0 ; ---------------------------------------------------------------------------
.text:000000000000FFD5                 align 8
.text:000000000000FFD8
.text:000000000000FFD8 loc_FFD8:                               ; CODE XREF: parse_bracket_element_constprop_37+182↑j
.text:000000000000FFD8                 lea     rax, [r11+1]
.text:000000000000FFDC                 add     r11, [r10]
.text:000000000000FFDF                 mov     rdx, [r10+28h]
.text:000000000000FFE3                 mov     [r10+48h], rax
.text:000000000000FFE7                 movzx   r9d, byte ptr [r11+rdx]
.text:000000000000FFEC                 jmp     loc_FEDA
.text:000000000000FFF1 ; ---------------------------------------------------------------------------
.text:000000000000FFF1
.text:000000000000FFF1 loc_FFF1:                               ; CODE XREF: parse_bracket_element_constprop_37+159↑j
.text:000000000000FFF1                 mov     dword ptr [rbx], 3
.text:000000000000FFF7                 xor     eax, eax
.text:000000000000FFF9                 jmp     loc_FE21
.text:000000000000FFFE ; ---------------------------------------------------------------------------
.text:000000000000FFFE
.text:000000000000FFFE loc_FFFE:                               ; CODE XREF: parse_bracket_element_constprop_37+151↑j
.text:000000000000FFFE                 mov     dword ptr [rbx], 4
.text:0000000000010004                 xor     eax, eax
.text:0000000000010006                 jmp     loc_FE21
.text:000000000001000B ; ---------------------------------------------------------------------------
.text:000000000001000B
.text:000000000001000B loc_1000B:                              ; CODE XREF: parse_bracket_element_constprop_37+149↑j
.text:000000000001000B                 mov     dword ptr [rbx], 2
.text:0000000000010011                 xor     eax, eax
.text:0000000000010013                 jmp     loc_FE21
.text:0000000000010018 ; ---------------------------------------------------------------------------
.text:0000000000010018
.text:0000000000010018 loc_10018:                              ; CODE XREF: parse_bracket_element_constprop_37+6F↑j
.text:0000000000010018                 call    ___stack_chk_fail
.text:0000000000010018 ; } // starts at FDC0
.text:0000000000010018 parse_bracket_element_constprop_37 endp
.text:0000000000010018
.text:0000000000010018 ; ---------------------------------------------------------------------------
.text:000000000001001D                 align 20h
.text:0000000000010020
.text:0000000000010020 ; =============== S U B R O U T I N E =======================================
.text:0000000000010020
.text:0000000000010020
.text:0000000000010020 peek_token      proc near               ; CODE XREF: peek_token+6BA↓p
.text:0000000000010020                                         ; fetch_number+29↓p ...
.text:0000000000010020
.text:0000000000010020 var_68          = qword ptr -68h
.text:0000000000010020 var_60          = qword ptr -60h
.text:0000000000010020 var_58          = byte ptr -58h
.text:0000000000010020 var_50          = byte ptr -50h
.text:0000000000010020 var_40          = qword ptr -40h
.text:0000000000010020
.text:0000000000010020 ; __unwind {
.text:0000000000010020                 push    r15
.text:0000000000010022                 push    r14
.text:0000000000010024                 push    r13
.text:0000000000010026                 push    r12
.text:0000000000010028                 push    rbp
.text:0000000000010029                 push    rbx
.text:000000000001002A                 mov     rbp, rdi
.text:000000000001002D                 sub     rsp, 38h
.text:0000000000010031                 mov     r14, [rsi+48h]
.text:0000000000010035                 mov     rax, fs:28h
.text:000000000001003E                 mov     [rsp+68h+var_40], rax
.text:0000000000010043                 xor     eax, eax
.text:0000000000010045                 cmp     [rsi+68h], r14
.text:0000000000010049                 jle     loc_100E0
.text:000000000001004F                 movzx   r13d, byte ptr [rdi+0Ah]
.text:0000000000010054                 mov     r15, rdx
.text:0000000000010057                 mov     rdx, [rsi+8]
.text:000000000001005B                 mov     rbx, rsi
.text:000000000001005E                 movzx   r12d, byte ptr [rdx+r14]
.text:0000000000010063                 and     r13d, 0FFFFFF9Fh
.text:0000000000010067                 mov     [rdi+0Ah], r13b
.text:000000000001006B                 mov     eax, [rsi+90h]
.text:0000000000010071                 mov     [rdi], r12b
.text:0000000000010074                 cmp     eax, 1
.text:0000000000010077                 jle     loc_10110
.text:000000000001007D                 cmp     r14, [rsi+30h]
.text:0000000000010081                 jz      loc_10220
.text:0000000000010087                 mov     rcx, [rsi+10h]
.text:000000000001008B                 mov     ecx, [rcx+r14*4]
.text:000000000001008F                 cmp     ecx, 0FFFFFFFFh
.text:0000000000010092                 jz      loc_10170
.text:0000000000010098                 cmp     r12b, 5Ch ; '\'
.text:000000000001009C                 jz      loc_10190
.text:00000000000100A2                 mov     byte ptr [rdi+8], 1
.text:00000000000100A6
.text:00000000000100A6 loc_100A6:                              ; CODE XREF: peek_token+216↓j
.text:00000000000100A6                 mov     edi, ecx        ; wc
.text:00000000000100A8                 mov     [rsp+68h+var_60], rdx
.text:00000000000100AD                 mov     dword ptr [rsp+68h+var_68], ecx
.text:00000000000100B0                 call    _iswalnum
.text:00000000000100B5                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:00000000000100B8                 test    eax, eax
.text:00000000000100BA                 setnz   al
.text:00000000000100BD                 cmp     ecx, 5Fh ; '_'
.text:00000000000100C0                 setz    cl
.text:00000000000100C3                 or      eax, ecx
.text:00000000000100C5                 shl     eax, 6
.text:00000000000100C8                 or      r13d, eax
.text:00000000000100CB                 mov     [rbp+0Ah], r13b
.text:00000000000100CF                 mov     rdx, [rsp+68h+var_60]
.text:00000000000100D4                 jmp     short loc_1014C
.text:00000000000100D4 ; ---------------------------------------------------------------------------
.text:00000000000100D6                 align 20h
.text:00000000000100E0
.text:00000000000100E0 loc_100E0:                              ; CODE XREF: peek_token+29↑j
.text:00000000000100E0                 mov     byte ptr [rdi+8], 2
.text:00000000000100E4
.text:00000000000100E4 loc_100E4:                              ; CODE XREF: peek_token+161↓j
.text:00000000000100E4                                         ; peek_token+229↓j ...
.text:00000000000100E4                 mov     rdi, [rsp+68h+var_40]
.text:00000000000100E9                 xor     rdi, fs:28h
.text:00000000000100F2                 jnz     loc_10718
.text:00000000000100F8                 add     rsp, 38h
.text:00000000000100FC                 pop     rbx
.text:00000000000100FD                 pop     rbp
.text:00000000000100FE                 pop     r12
.text:0000000000010100                 pop     r13
.text:0000000000010102                 pop     r14
.text:0000000000010104                 pop     r15
.text:0000000000010106                 retn
.text:0000000000010106 ; ---------------------------------------------------------------------------
.text:0000000000010107                 align 10h
.text:0000000000010110
.text:0000000000010110 loc_10110:                              ; CODE XREF: peek_token+57↑j
.text:0000000000010110                 cmp     r12b, 5Ch ; '\'
.text:0000000000010114                 jz      short loc_10190
.text:0000000000010116                 mov     byte ptr [rbp+8], 1
.text:000000000001011A                 mov     [rsp+68h+var_68], rdx
.text:000000000001011E                 call    ___ctype_b_loc
.text:0000000000010123                 mov     rsi, [rax]
.text:0000000000010126                 movzx   ecx, r12b
.text:000000000001012A                 movzx   eax, word ptr [rsi+rcx*2]
.text:000000000001012E                 shr     ax, 3
.text:0000000000010132                 and     eax, 1
.text:0000000000010135                 cmp     r12b, 5Fh ; '_'
.text:0000000000010139                 setz    cl
.text:000000000001013C                 or      eax, ecx
.text:000000000001013E                 shl     eax, 6
.text:0000000000010141                 or      r13d, eax
.text:0000000000010144                 mov     [rbp+0Ah], r13b
.text:0000000000010148                 mov     rdx, [rsp+68h+var_68]
.text:000000000001014C
.text:000000000001014C loc_1014C:                              ; CODE XREF: peek_token+B4↑j
.text:000000000001014C                 sub     r12d, 0Ah       ; switch 116 cases
.text:0000000000010150                 cmp     r12b, 73h
.text:0000000000010154                 ja      def_1016C       ; jumptable 000000000001016C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:000000000001015A                 lea     rcx, jpt_1016C
.text:0000000000010161                 movzx   r12d, r12b
.text:0000000000010165                 movsxd  rax, ds:(jpt_1016C - 15074h)[rcx+r12*4]
.text:0000000000010169                 add     rax, rcx
.text:000000000001016C                 jmp     rax             ; switch jump
.text:000000000001016C ; ---------------------------------------------------------------------------
.text:000000000001016E                 align 10h
.text:0000000000010170
.text:0000000000010170 loc_10170:                              ; CODE XREF: peek_token+72↑j
.text:0000000000010170                 or      r13d, 20h
.text:0000000000010174                 mov     byte ptr [rdi+8], 1
.text:0000000000010178                 mov     eax, 1
.text:000000000001017D                 mov     [rdi+0Ah], r13b
.text:0000000000010181                 jmp     loc_100E4
.text:0000000000010181 ; ---------------------------------------------------------------------------
.text:0000000000010186                 align 10h
.text:0000000000010190
.text:0000000000010190 loc_10190:                              ; CODE XREF: peek_token+7C↑j
.text:0000000000010190                                         ; peek_token+F4↑j ...
.text:0000000000010190                 lea     rsi, [r14+1]
.text:0000000000010194                 cmp     rsi, [rbx+58h]
.text:0000000000010198                 jge     loc_10240
.text:000000000001019E                 cmp     byte ptr [rbx+8Bh], 0
.text:00000000000101A5                 jnz     loc_10630
.text:00000000000101AB
.text:00000000000101AB loc_101AB:                              ; CODE XREF: peek_token+66F↓j
.text:00000000000101AB                 movzx   edi, byte ptr [rdx+r14+1]
.text:00000000000101B1                 mov     r12d, edi
.text:00000000000101B4                 mov     dword ptr [rsp+68h+var_60], edi
.text:00000000000101B8
.text:00000000000101B8 loc_101B8:                              ; CODE XREF: peek_token+675↓j
.text:00000000000101B8                                         ; peek_token+6A6↓j
.text:00000000000101B8                 cmp     eax, 1
.text:00000000000101BB                 mov     [rbp+0], r12b
.text:00000000000101BF                 mov     byte ptr [rbp+8], 1
.text:00000000000101C3                 jle     loc_10610
.text:00000000000101C9                 mov     rax, [rbx+10h]
.text:00000000000101CD                 mov     r8d, [rax+rsi*4]
.text:00000000000101D1
.text:00000000000101D1 loc_101D1:                              ; CODE XREF: peek_token+6F3↓j
.text:00000000000101D1                 mov     edi, r8d        ; wc
.text:00000000000101D4                 mov     dword ptr [rsp+68h+var_68], r8d
.text:00000000000101D8                 call    _iswalnum
.text:00000000000101DD                 mov     r8d, dword ptr [rsp+68h+var_68]
.text:00000000000101E1                 test    eax, eax
.text:00000000000101E3                 setnz   al
.text:00000000000101E6                 cmp     r8d, 5Fh ; '_'
.text:00000000000101EA
.text:00000000000101EA loc_101EA:                              ; CODE XREF: peek_token+60B↓j
.text:00000000000101EA                 setz    dl
.text:00000000000101ED                 lea     ecx, [r12-27h]  ; switch 87 cases
.text:00000000000101F2                 or      eax, edx
.text:00000000000101F4                 shl     eax, 6
.text:00000000000101F7                 or      r13d, eax
.text:00000000000101FA                 cmp     cl, 56h
.text:00000000000101FD                 mov     [rbp+0Ah], r13b
.text:0000000000010201                 ja      def_10218       ; jumptable 0000000000010218 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:0000000000010207                 lea     rdx, jpt_10218
.text:000000000001020E                 movzx   ecx, cl
.text:0000000000010211                 movsxd  rax, ds:(jpt_10218 - 15244h)[rdx+rcx*4]
.text:0000000000010215                 add     rax, rdx
.text:0000000000010218                 jmp     rax             ; switch jump
.text:0000000000010218 ; ---------------------------------------------------------------------------
.text:000000000001021A                 align 20h
.text:0000000000010220
.text:0000000000010220 loc_10220:                              ; CODE XREF: peek_token+61↑j
.text:0000000000010220                 cmp     r12b, 5Ch ; '\'
.text:0000000000010224                 jz      loc_10190
.text:000000000001022A                 mov     rax, [rbx+10h]
.text:000000000001022E                 mov     byte ptr [rbp+8], 1
.text:0000000000010232                 mov     ecx, [rax+r14*4]
.text:0000000000010236                 jmp     loc_100A6
.text:0000000000010236 ; ---------------------------------------------------------------------------
.text:000000000001023B                 align 20h
.text:0000000000010240
.text:0000000000010240 loc_10240:                              ; CODE XREF: peek_token+178↑j
.text:0000000000010240                 mov     byte ptr [rbp+8], 24h ; '$'
.text:0000000000010244                 mov     eax, 1
.text:0000000000010249                 jmp     loc_100E4
.text:0000000000010249 ; ---------------------------------------------------------------------------
.text:000000000001024E                 align 10h
.text:0000000000010250
.text:0000000000010250 loc_10250:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010250                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:0000000000010250                 and     r15d, 1200h     ; jumptable 000000000001016C case 125
.text:0000000000010257                 mov     eax, 1
.text:000000000001025C                 cmp     r15, 1200h
.text:0000000000010263                 jnz     loc_100E4
.text:0000000000010269
.text:0000000000010269 loc_10269:                              ; CODE XREF: peek_token+451↓j
.text:0000000000010269                 mov     byte ptr [rbp+8], 18h
.text:000000000001026D                 jmp     loc_100E4
.text:000000000001026D ; ---------------------------------------------------------------------------
.text:0000000000010272                 align 8
.text:0000000000010278
.text:0000000000010278 loc_10278:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010278                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:0000000000010278                 and     r15d, 8400h     ; jumptable 000000000001016C case 124
.text:000000000001027F                 cmp     r15, 8000h
.text:0000000000010286                 jz      loc_10362
.text:000000000001028C
.text:000000000001028C def_1016C:                              ; CODE XREF: peek_token+134↑j
.text:000000000001028C                                         ; peek_token+14C↑j ...
.text:000000000001028C                 mov     eax, 1          ; jumptable 000000000001016C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000010291                 jmp     loc_100E4
.text:0000000000010291 ; ---------------------------------------------------------------------------
.text:0000000000010296                 align 20h
.text:00000000000102A0
.text:00000000000102A0 loc_102A0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000102A0                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:00000000000102A0                 and     r15d, 1200h     ; jumptable 000000000001016C case 123
.text:00000000000102A7                 mov     eax, 1
.text:00000000000102AC                 cmp     r15, 1200h
.text:00000000000102B3                 jnz     loc_100E4
.text:00000000000102B9
.text:00000000000102B9 loc_102B9:                              ; CODE XREF: peek_token+3FD↓j
.text:00000000000102B9                 mov     byte ptr [rbp+8], 17h
.text:00000000000102BD                 jmp     loc_100E4
.text:00000000000102BD ; ---------------------------------------------------------------------------
.text:00000000000102C2                 align 8
.text:00000000000102C8
.text:00000000000102C8 loc_102C8:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000102C8                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:00000000000102C8                 test    r15d, 800008h   ; jumptable 000000000001016C case 94
.text:00000000000102CF                 jnz     short loc_102DA
.text:00000000000102D1                 test    r14, r14
.text:00000000000102D4                 jnz     loc_1069A
.text:00000000000102DA
.text:00000000000102DA loc_102DA:                              ; CODE XREF: peek_token+2AF↑j
.text:00000000000102DA                                         ; peek_token+693↓j
.text:00000000000102DA                 mov     byte ptr [rbp+8], 0Ch
.text:00000000000102DE                 mov     dword ptr [rbp+0], 10h
.text:00000000000102E5                 mov     eax, 1
.text:00000000000102EA                 jmp     loc_100E4
.text:00000000000102EA ; ---------------------------------------------------------------------------
.text:00000000000102EF                 align 10h
.text:00000000000102F0
.text:00000000000102F0 loc_102F0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000102F0                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:00000000000102F0                 mov     byte ptr [rbp+8], 14h ; jumptable 000000000001016C case 91
.text:00000000000102F4                 mov     eax, 1
.text:00000000000102F9                 jmp     loc_100E4
.text:00000000000102F9 ; ---------------------------------------------------------------------------
.text:00000000000102FE                 align 20h
.text:0000000000010300
.text:0000000000010300 loc_10300:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010300                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:0000000000010300                 test    r15d, 402h      ; jumptable 000000000001016C case 63
.text:0000000000010307                 mov     eax, 1
.text:000000000001030C                 jnz     loc_100E4
.text:0000000000010312
.text:0000000000010312 loc_10312:                              ; CODE XREF: peek_token+508↓j
.text:0000000000010312                 mov     byte ptr [rbp+8], 13h
.text:0000000000010316                 jmp     loc_100E4
.text:0000000000010316 ; ---------------------------------------------------------------------------
.text:000000000001031B                 align 20h
.text:0000000000010320
.text:0000000000010320 loc_10320:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010320                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:0000000000010320                 mov     byte ptr [rbp+8], 5 ; jumptable 000000000001016C case 46
.text:0000000000010324                 mov     eax, 1
.text:0000000000010329                 jmp     loc_100E4
.text:0000000000010329 ; ---------------------------------------------------------------------------
.text:000000000001032E                 align 10h
.text:0000000000010330
.text:0000000000010330 loc_10330:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010330                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:0000000000010330                 test    r15d, 402h      ; jumptable 000000000001016C case 43
.text:0000000000010337                 mov     eax, 1
.text:000000000001033C                 jnz     loc_100E4
.text:0000000000010342
.text:0000000000010342 loc_10342:                              ; CODE XREF: peek_token+590↓j
.text:0000000000010342                 mov     byte ptr [rbp+8], 12h
.text:0000000000010346                 jmp     loc_100E4
.text:0000000000010346 ; ---------------------------------------------------------------------------
.text:000000000001034B                 align 10h
.text:0000000000010350
.text:0000000000010350 loc_10350:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010350                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:0000000000010350                 test    r15d, 800h      ; jumptable 000000000001016C case 10
.text:0000000000010357                 mov     eax, 1
.text:000000000001035C                 jz      loc_100E4
.text:0000000000010362
.text:0000000000010362 loc_10362:                              ; CODE XREF: peek_token+266↑j
.text:0000000000010362                 mov     byte ptr [rbp+8], 0Ah
.text:0000000000010366                 mov     eax, 1
.text:000000000001036B                 jmp     loc_100E4
.text:0000000000010370 ; ---------------------------------------------------------------------------
.text:0000000000010370
.text:0000000000010370 loc_10370:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010370                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:0000000000010370                 mov     byte ptr [rbp+8], 0Bh ; jumptable 000000000001016C case 42
.text:0000000000010374                 mov     eax, 1
.text:0000000000010379                 jmp     loc_100E4
.text:0000000000010379 ; ---------------------------------------------------------------------------
.text:000000000001037E                 align 20h
.text:0000000000010380
.text:0000000000010380 loc_10380:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000010380                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:0000000000010380                 test    r15d, 2000h     ; jumptable 000000000001016C case 41
.text:0000000000010387                 mov     eax, 1
.text:000000000001038C                 jz      loc_100E4
.text:0000000000010392
.text:0000000000010392 loc_10392:                              ; CODE XREF: peek_token+5A7↓j
.text:0000000000010392                 mov     byte ptr [rbp+8], 9
.text:0000000000010396                 jmp     loc_100E4
.text:0000000000010396 ; ---------------------------------------------------------------------------
.text:000000000001039B                 align 20h
.text:00000000000103A0
.text:00000000000103A0 loc_103A0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000103A0                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:00000000000103A0                 test    r15d, 2000h     ; jumptable 000000000001016C case 40
.text:00000000000103A7                 mov     eax, 1
.text:00000000000103AC                 jz      loc_100E4
.text:00000000000103B2
.text:00000000000103B2 loc_103B2:                              ; CODE XREF: peek_token+5BE↓j
.text:00000000000103B2                 mov     byte ptr [rbp+8], 8
.text:00000000000103B6                 jmp     loc_100E4
.text:00000000000103B6 ; ---------------------------------------------------------------------------
.text:00000000000103BB                 align 20h
.text:00000000000103C0
.text:00000000000103C0 loc_103C0:                              ; CODE XREF: peek_token+14C↑j
.text:00000000000103C0                                         ; DATA XREF: .rodata:jpt_1016C↓o
.text:00000000000103C0                 test    r15b, 8         ; jumptable 000000000001016C case 36
.text:00000000000103C4                 jnz     short loc_103D4
.text:00000000000103C6                 add     r14, 1
.text:00000000000103CA                 cmp     r14, [rbx+58h]
.text:00000000000103CE                 jnz     loc_106CB
.text:00000000000103D4
.text:00000000000103D4 loc_103D4:                              ; CODE XREF: peek_token+3A4↑j
.text:00000000000103D4                                         ; peek_token+6DA↓j
.text:00000000000103D4                 mov     byte ptr [rbp+8], 0Ch
.text:00000000000103D8                 mov     dword ptr [rbp+0], 20h ; ' '
.text:00000000000103DF                 mov     eax, 1
.text:00000000000103E4                 jmp     loc_100E4
.text:00000000000103E9 ; ---------------------------------------------------------------------------
.text:00000000000103E9
.text:00000000000103E9 loc_103E9:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000103E9                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:00000000000103E9                 test    r15d, 8400h     ; jumptable 0000000000010218 case 124
.text:00000000000103F0                 mov     eax, 2
.text:00000000000103F5                 jnz     loc_100E4
.text:00000000000103FB                 mov     byte ptr [rbp+8], 0Ah
.text:00000000000103FF                 jmp     loc_100E4
.text:0000000000010404 ; ---------------------------------------------------------------------------
.text:0000000000010404
.text:0000000000010404 loc_10404:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010404                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:0000000000010404                 and     r15d, 1200h     ; jumptable 0000000000010218 case 123
.text:000000000001040B                 mov     eax, 2
.text:0000000000010410                 cmp     r15, 200h
.text:0000000000010417                 jnz     loc_100E4
.text:000000000001041D                 jmp     loc_102B9
.text:0000000000010422 ; ---------------------------------------------------------------------------
.text:0000000000010422
.text:0000000000010422 loc_10422:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010422                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:0000000000010422                 test    r15d, 80000h    ; jumptable 0000000000010218 case 119
.text:0000000000010429                 mov     eax, 2
.text:000000000001042E                 jnz     loc_100E4
.text:0000000000010434                 mov     byte ptr [rbp+8], 20h ; ' '
.text:0000000000010438                 jmp     loc_100E4
.text:000000000001043D ; ---------------------------------------------------------------------------
.text:000000000001043D
.text:000000000001043D loc_1043D:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001043D                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:000000000001043D                 test    r15d, 80000h    ; jumptable 0000000000010218 case 115
.text:0000000000010444                 mov     eax, 2
.text:0000000000010449                 jnz     loc_100E4
.text:000000000001044F                 mov     byte ptr [rbp+8], 22h ; '"'
.text:0000000000010453                 jmp     loc_100E4
.text:0000000000010458 ; ---------------------------------------------------------------------------
.text:0000000000010458
.text:0000000000010458 loc_10458:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010458                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:0000000000010458                 and     r15d, 1200h     ; jumptable 0000000000010218 case 125
.text:000000000001045F                 mov     eax, 2
.text:0000000000010464                 cmp     r15, 200h
.text:000000000001046B                 jnz     loc_100E4
.text:0000000000010471                 jmp     loc_10269
.text:0000000000010476 ; ---------------------------------------------------------------------------
.text:0000000000010476
.text:0000000000010476 loc_10476:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010476                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:0000000000010476                 test    r15d, 80000h    ; jumptable 0000000000010218 case 98
.text:000000000001047D                 mov     eax, 2
.text:0000000000010482                 jnz     loc_100E4
.text:0000000000010488                 mov     byte ptr [rbp+8], 0Ch
.text:000000000001048C                 mov     dword ptr [rbp+0], 100h
.text:0000000000010493                 jmp     loc_100E4
.text:0000000000010498 ; ---------------------------------------------------------------------------
.text:0000000000010498
.text:0000000000010498 loc_10498:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010498                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:0000000000010498                 test    r15d, 80000h    ; jumptable 0000000000010218 case 96
.text:000000000001049F                 mov     eax, 2
.text:00000000000104A4                 jnz     loc_100E4
.text:00000000000104AA                 mov     byte ptr [rbp+8], 0Ch
.text:00000000000104AE                 mov     dword ptr [rbp+0], 40h ; '@'
.text:00000000000104B5                 jmp     loc_100E4
.text:00000000000104BA ; ---------------------------------------------------------------------------
.text:00000000000104BA
.text:00000000000104BA loc_104BA:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000104BA                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:00000000000104BA                 test    r15d, 80000h    ; jumptable 0000000000010218 case 87
.text:00000000000104C1                 mov     eax, 2
.text:00000000000104C6                 jnz     loc_100E4
.text:00000000000104CC                 mov     byte ptr [rbp+8], 21h ; '!'
.text:00000000000104D0                 jmp     loc_100E4
.text:00000000000104D5 ; ---------------------------------------------------------------------------
.text:00000000000104D5
.text:00000000000104D5 loc_104D5:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000104D5                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:00000000000104D5                 test    r15d, 80000h    ; jumptable 0000000000010218 case 83
.text:00000000000104DC                 mov     eax, 2
.text:00000000000104E1                 jnz     loc_100E4
.text:00000000000104E7                 mov     byte ptr [rbp+8], 23h ; '#'
.text:00000000000104EB                 jmp     loc_100E4
.text:00000000000104F0 ; ---------------------------------------------------------------------------
.text:00000000000104F0
.text:00000000000104F0 loc_104F0:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000104F0                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:00000000000104F0                 test    r15d, 80000h    ; jumptable 0000000000010218 case 66
.text:00000000000104F7                 mov     eax, 2
.text:00000000000104FC                 jnz     loc_100E4
.text:0000000000010502                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000010506                 mov     dword ptr [rbp+0], 200h
.text:000000000001050D                 jmp     loc_100E4
.text:0000000000010512 ; ---------------------------------------------------------------------------
.text:0000000000010512
.text:0000000000010512 loc_10512:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010512                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:0000000000010512                 and     r15d, 402h      ; jumptable 0000000000010218 case 63
.text:0000000000010519                 mov     eax, 2
.text:000000000001051E                 cmp     r15, 2
.text:0000000000010522                 jnz     loc_100E4
.text:0000000000010528                 jmp     loc_10312
.text:000000000001052D ; ---------------------------------------------------------------------------
.text:000000000001052D
.text:000000000001052D loc_1052D:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001052D                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:000000000001052D                 test    r15d, 80000h    ; jumptable 0000000000010218 case 62
.text:0000000000010534                 mov     eax, 2
.text:0000000000010539                 jnz     loc_100E4
.text:000000000001053F                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000010543                 mov     dword ptr [rbp+0], 9
.text:000000000001054A                 jmp     loc_100E4
.text:000000000001054F ; ---------------------------------------------------------------------------
.text:000000000001054F
.text:000000000001054F loc_1054F:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001054F                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:000000000001054F                 test    r15d, 80000h    ; jumptable 0000000000010218 case 60
.text:0000000000010556                 mov     eax, 2
.text:000000000001055B                 jnz     loc_100E4
.text:0000000000010561                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000010565                 mov     dword ptr [rbp+0], 6
.text:000000000001056C                 jmp     loc_100E4
.text:0000000000010571 ; ---------------------------------------------------------------------------
.text:0000000000010571
.text:0000000000010571 loc_10571:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000010571                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:0000000000010571                 test    r15d, 4000h     ; jumptable 0000000000010218 cases 49-57
.text:0000000000010578                 mov     eax, 2
.text:000000000001057D                 jnz     loc_100E4
.text:0000000000010583                 mov     edx, dword ptr [rsp+68h+var_60]
.text:0000000000010587                 mov     byte ptr [rbp+8], 4
.text:000000000001058B                 sub     edx, 31h ; '1'
.text:000000000001058E                 movsxd  rdx, edx
.text:0000000000010591                 mov     [rbp+0], rdx
.text:0000000000010595                 jmp     loc_100E4
.text:000000000001059A ; ---------------------------------------------------------------------------
.text:000000000001059A
.text:000000000001059A loc_1059A:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001059A                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:000000000001059A                 and     r15d, 402h      ; jumptable 0000000000010218 case 43
.text:00000000000105A1                 mov     eax, 2
.text:00000000000105A6                 cmp     r15, 2
.text:00000000000105AA                 jnz     loc_100E4
.text:00000000000105B0                 jmp     loc_10342
.text:00000000000105B5 ; ---------------------------------------------------------------------------
.text:00000000000105B5
.text:00000000000105B5 loc_105B5:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000105B5                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:00000000000105B5                 test    r15d, 2000h     ; jumptable 0000000000010218 case 41
.text:00000000000105BC                 mov     eax, 2
.text:00000000000105C1                 jnz     loc_100E4
.text:00000000000105C7                 jmp     loc_10392
.text:00000000000105CC ; ---------------------------------------------------------------------------
.text:00000000000105CC
.text:00000000000105CC loc_105CC:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000105CC                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:00000000000105CC                 test    r15d, 2000h     ; jumptable 0000000000010218 case 40
.text:00000000000105D3                 mov     eax, 2
.text:00000000000105D8                 jnz     loc_100E4
.text:00000000000105DE                 jmp     loc_103B2
.text:00000000000105E3 ; ---------------------------------------------------------------------------
.text:00000000000105E3
.text:00000000000105E3 loc_105E3:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000105E3                                         ; DATA XREF: .rodata:jpt_10218↓o
.text:00000000000105E3                 test    r15d, 80000h    ; jumptable 0000000000010218 case 39
.text:00000000000105EA                 mov     eax, 2
.text:00000000000105EF                 jnz     loc_100E4
.text:00000000000105F5                 mov     byte ptr [rbp+8], 0Ch
.text:00000000000105F9                 mov     dword ptr [rbp+0], 80h
.text:0000000000010600                 jmp     loc_100E4
.text:0000000000010605 ; ---------------------------------------------------------------------------
.text:0000000000010605
.text:0000000000010605 def_10218:                              ; CODE XREF: peek_token+1E1↑j
.text:0000000000010605                                         ; peek_token+1F8↑j
.text:0000000000010605                                         ; DATA XREF: ...
.text:0000000000010605                 mov     eax, 2          ; jumptable 0000000000010218 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:000000000001060A                 jmp     loc_100E4
.text:000000000001060A ; ---------------------------------------------------------------------------
.text:000000000001060F                 align 10h
.text:0000000000010610
.text:0000000000010610 loc_10610:                              ; CODE XREF: peek_token+1A3↑j
.text:0000000000010610                 call    ___ctype_b_loc
.text:0000000000010615                 mov     rsi, [rax]
.text:0000000000010618                 movzx   edx, r12b
.text:000000000001061C                 movzx   eax, word ptr [rsi+rdx*2]
.text:0000000000010620                 shr     ax, 3
.text:0000000000010624                 and     eax, 1
.text:0000000000010627                 cmp     r12b, 5Fh ; '_'
.text:000000000001062B                 jmp     loc_101EA
.text:0000000000010630 ; ---------------------------------------------------------------------------
.text:0000000000010630
.text:0000000000010630 loc_10630:                              ; CODE XREF: peek_token+185↑j
.text:0000000000010630                 cmp     eax, 1
.text:0000000000010633                 jle     short loc_10664
.text:0000000000010635                 mov     rcx, [rbx+10h]
.text:0000000000010639                 lea     rdi, ds:0[rsi*4]
.text:0000000000010641                 mov     r8d, [rcx+rsi*4]
.text:0000000000010645                 cmp     r8d, 0FFFFFFFFh
.text:0000000000010649                 jz      loc_106FF
.text:000000000001064F                 lea     r9, [r14+2]
.text:0000000000010653                 cmp     [rbx+30h], r9
.text:0000000000010657                 jz      short loc_10664
.text:0000000000010659                 cmp     dword ptr [rcx+rdi+4], 0FFFFFFFFh
.text:000000000001065E                 jz      loc_106FF
.text:0000000000010664
.text:0000000000010664 loc_10664:                              ; CODE XREF: peek_token+613↑j
.text:0000000000010664                                         ; peek_token+637↑j
.text:0000000000010664                 cmp     byte ptr [rbx+8Ch], 0
.text:000000000001066B                 mov     rcx, [rbx]
.text:000000000001066E                 mov     rdi, [rbx+28h]
.text:0000000000010672                 jz      short loc_106B8
.text:0000000000010674                 mov     r8, [rbx+18h]
.text:0000000000010678                 add     rcx, rdi
.text:000000000001067B                 add     rcx, [r8+rsi*8]
.text:000000000001067F                 movzx   edi, byte ptr [rcx]
.text:0000000000010682                 mov     r12d, edi
.text:0000000000010685                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000010689                 and     edi, 80h
.text:000000000001068F                 jnz     loc_101AB
.text:0000000000010695                 jmp     loc_101B8
.text:000000000001069A ; ---------------------------------------------------------------------------
.text:000000000001069A
.text:000000000001069A loc_1069A:                              ; CODE XREF: peek_token+2B4↑j
.text:000000000001069A                 cmp     byte ptr [rdx+r14-1], 0Ah
.text:00000000000106A0                 jnz     def_1016C       ; jumptable 000000000001016C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:00000000000106A6                 test    r15d, 800h
.text:00000000000106AD                 jz      def_1016C       ; jumptable 000000000001016C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:00000000000106B3                 jmp     loc_102DA
.text:00000000000106B8 ; ---------------------------------------------------------------------------
.text:00000000000106B8
.text:00000000000106B8 loc_106B8:                              ; CODE XREF: peek_token+652↑j
.text:00000000000106B8                 add     rcx, rsi
.text:00000000000106BB                 movzx   edi, byte ptr [rcx+rdi]
.text:00000000000106BF                 mov     r12d, edi
.text:00000000000106C2                 mov     dword ptr [rsp+68h+var_60], edi
.text:00000000000106C6                 jmp     loc_101B8
.text:00000000000106CB ; ---------------------------------------------------------------------------
.text:00000000000106CB
.text:00000000000106CB loc_106CB:                              ; CODE XREF: peek_token+3AE↑j
.text:00000000000106CB                 lea     rdi, [rsp+68h+var_58]
.text:00000000000106D0                 mov     rdx, r15
.text:00000000000106D3                 mov     [rbx+48h], r14
.text:00000000000106D7                 mov     rsi, rbx
.text:00000000000106DA                 call    peek_token
.text:00000000000106DF                 movzx   eax, [rsp+68h+var_50]
.text:00000000000106E4                 sub     qword ptr [rbx+48h], 1
.text:00000000000106E9                 lea     edx, [rax-9]
.text:00000000000106EC                 mov     eax, 1
.text:00000000000106F1                 cmp     dl, 1
.text:00000000000106F4                 ja      loc_100E4
.text:00000000000106FA                 jmp     loc_103D4
.text:00000000000106FF ; ---------------------------------------------------------------------------
.text:00000000000106FF
.text:00000000000106FF loc_106FF:                              ; CODE XREF: peek_token+629↑j
.text:00000000000106FF                                         ; peek_token+63E↑j
.text:00000000000106FF                 movzx   eax, byte ptr [rdx+r14+1]
.text:0000000000010705                 mov     byte ptr [rbp+8], 1
.text:0000000000010709                 mov     r12d, eax
.text:000000000001070C                 mov     [rbp+0], al
.text:000000000001070F                 mov     dword ptr [rsp+68h+var_60], eax
.text:0000000000010713                 jmp     loc_101D1
.text:0000000000010718 ; ---------------------------------------------------------------------------
.text:0000000000010718
.text:0000000000010718 loc_10718:                              ; CODE XREF: peek_token+D2↑j
.text:0000000000010718                 call    ___stack_chk_fail
.text:0000000000010718 ; } // starts at 10020
.text:0000000000010718 peek_token      endp
.text:0000000000010718
.text:0000000000010718 ; ---------------------------------------------------------------------------
.text:000000000001071D                 align 20h
.text:0000000000010720
.text:0000000000010720 ; =============== S U B R O U T I N E =======================================
.text:0000000000010720
.text:0000000000010720
.text:0000000000010720 fetch_number    proc near               ; CODE XREF: parse_expression+527↓p
.text:0000000000010720                                         ; parse_expression+611↓p
.text:0000000000010720 ; __unwind {
.text:0000000000010720                 push    r14
.text:0000000000010722                 mov     r14, rdi
.text:0000000000010725                 push    r13
.text:0000000000010727                 mov     r13, rsi
.text:000000000001072A                 push    r12
.text:000000000001072C                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000010733                 push    rbp
.text:0000000000010734                 mov     rbp, rdx
.text:0000000000010737                 push    rbx
.text:0000000000010738                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001073F                 nop
.text:0000000000010740
.text:0000000000010740 loc_10740:                              ; CODE XREF: fetch_number+52↓j
.text:0000000000010740                                         ; fetch_number+87↓j ...
.text:0000000000010740                 mov     rdx, rbp
.text:0000000000010743                 mov     rsi, r14
.text:0000000000010746                 mov     rdi, r13
.text:0000000000010749                 call    peek_token
.text:000000000001074E                 cdqe
.text:0000000000010750                 add     [r14+48h], rax
.text:0000000000010754                 movzx   eax, byte ptr [r13+8]
.text:0000000000010759                 movzx   edx, byte ptr [r13+0]
.text:000000000001075E                 cmp     al, 2
.text:0000000000010760                 jz      short loc_107B0
.text:0000000000010762                 cmp     al, 18h
.text:0000000000010764                 jz      short loc_107B7
.text:0000000000010766                 cmp     dl, 2Ch ; ','
.text:0000000000010769                 jz      short loc_107B7
.text:000000000001076B                 cmp     al, 1
.text:000000000001076D                 jz      short loc_10778
.text:000000000001076F
.text:000000000001076F loc_1076F:                              ; CODE XREF: fetch_number+5D↓j
.text:000000000001076F                                         ; fetch_number+63↓j
.text:000000000001076F                 mov     rbx, r12
.text:0000000000010772                 jmp     short loc_10740
.text:0000000000010772 ; ---------------------------------------------------------------------------
.text:0000000000010774                 align 8
.text:0000000000010778
.text:0000000000010778 loc_10778:                              ; CODE XREF: fetch_number+4D↑j
.text:0000000000010778                 lea     eax, [rdx-30h]
.text:000000000001077B                 cmp     al, 9
.text:000000000001077D                 ja      short loc_1076F
.text:000000000001077F                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000010783                 jz      short loc_1076F
.text:0000000000010785                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000010789                 jz      short loc_107C8
.text:000000000001078B                 lea     rax, [rbx+rbx*4]
.text:000000000001078F                 lea     rbx, [rdx+rax*2]
.text:0000000000010793                 mov     eax, 8030h
.text:0000000000010798                 cmp     rbx, 8030h
.text:000000000001079F                 cmovg   rbx, rax
.text:00000000000107A3                 sub     rbx, 30h ; '0'
.text:00000000000107A7                 jmp     short loc_10740
.text:00000000000107A7 ; ---------------------------------------------------------------------------
.text:00000000000107A9                 align 10h
.text:00000000000107B0
.text:00000000000107B0 loc_107B0:                              ; CODE XREF: fetch_number+40↑j
.text:00000000000107B0                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:00000000000107B7
.text:00000000000107B7 loc_107B7:                              ; CODE XREF: fetch_number+44↑j
.text:00000000000107B7                                         ; fetch_number+49↑j
.text:00000000000107B7                 mov     rax, rbx
.text:00000000000107BA                 pop     rbx
.text:00000000000107BB                 pop     rbp
.text:00000000000107BC                 pop     r12
.text:00000000000107BE                 pop     r13
.text:00000000000107C0                 pop     r14
.text:00000000000107C2                 retn
.text:00000000000107C2 ; ---------------------------------------------------------------------------
.text:00000000000107C3                 align 8
.text:00000000000107C8
.text:00000000000107C8 loc_107C8:                              ; CODE XREF: fetch_number+69↑j
.text:00000000000107C8                 movzx   ebx, dl
.text:00000000000107CB                 sub     ebx, 30h ; '0'
.text:00000000000107CE                 movsxd  rbx, ebx
.text:00000000000107D1                 jmp     loc_10740
.text:00000000000107D1 ; } // starts at 10720
.text:00000000000107D1 fetch_number    endp
.text:00000000000107D1
.text:00000000000107D1 ; ---------------------------------------------------------------------------
.text:00000000000107D6                 align 20h
.text:00000000000107E0
.text:00000000000107E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000107E0
.text:00000000000107E0
.text:00000000000107E0 parse_expression proc near              ; CODE XREF: parse_expression+FFA↓p
.text:00000000000107E0                                         ; parse_branch+39↓p ...
.text:00000000000107E0
.text:00000000000107E0 var_158         = qword ptr -158h
.text:00000000000107E0 var_148         = qword ptr -148h
.text:00000000000107E0 var_140         = qword ptr -140h
.text:00000000000107E0 var_138         = qword ptr -138h
.text:00000000000107E0 var_130         = qword ptr -130h
.text:00000000000107E0 var_128         = xmmword ptr -128h
.text:00000000000107E0 var_118         = qword ptr -118h
.text:00000000000107E0 var_110         = qword ptr -110h
.text:00000000000107E0 var_101         = byte ptr -101h
.text:00000000000107E0 var_100         = qword ptr -100h
.text:00000000000107E0 var_F8          = qword ptr -0F8h
.text:00000000000107E0 var_F0          = qword ptr -0F0h
.text:00000000000107E0 var_E8          = qword ptr -0E8h
.text:00000000000107E0 ptr             = qword ptr -0E0h
.text:00000000000107E0 size            = qword ptr -0D8h
.text:00000000000107E0 var_D0          = dword ptr -0D0h
.text:00000000000107E0 var_CC          = dword ptr -0CCh
.text:00000000000107E0 var_C0          = qword ptr -0C0h
.text:00000000000107E0 var_B8          = dword ptr -0B8h
.text:00000000000107E0 var_B0          = qword ptr -0B0h
.text:00000000000107E0 var_A8          = qword ptr -0A8h
.text:00000000000107E0 var_A0          = qword ptr -0A0h
.text:00000000000107E0 var_98          = byte ptr -98h
.text:00000000000107E0 var_90          = byte ptr -90h
.text:00000000000107E0 var_88          = byte ptr -88h
.text:00000000000107E0 var_68          = byte ptr -68h
.text:00000000000107E0 var_40          = qword ptr -40h
.text:00000000000107E0
.text:00000000000107E0 ; __unwind {
.text:00000000000107E0                 push    r15
.text:00000000000107E2                 push    r14
.text:00000000000107E4                 push    r13
.text:00000000000107E6                 push    r12
.text:00000000000107E8                 push    rbp
.text:00000000000107E9                 push    rbx
.text:00000000000107EA                 sub     rsp, 128h
.text:00000000000107F1                 mov     [rsp+158h+var_138], rcx
.text:00000000000107F6                 movzx   ecx, byte ptr [rdx+8]
.text:00000000000107FA                 mov     rax, fs:28h
.text:0000000000010803                 mov     [rsp+158h+var_40], rax
.text:000000000001080B                 xor     eax, eax
.text:000000000001080D                 mov     rax, [rsi]
.text:0000000000010810                 mov     [rsp+158h+var_140], rdx
.text:0000000000010815                 mov     [rsp+158h+var_118], r9
.text:000000000001081A                 cmp     cl, 24h         ; switch 37 cases
.text:000000000001081D                 mov     [rsp+158h+var_148], rax
.text:0000000000010822                 ja      def_1083F       ; jumptable 000000000001083F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000010828                 mov     rbp, rsi
.text:000000000001082B                 lea     rsi, jpt_1083F
.text:0000000000010832                 movzx   edx, cl
.text:0000000000010835                 mov     r14, rdi
.text:0000000000010838                 movsxd  rax, ds:(jpt_1083F - 153A0h)[rsi+rdx*4]
.text:000000000001083C                 add     rax, rsi
.text:000000000001083F                 jmp     rax             ; switch jump
.text:0000000000010841 ; ---------------------------------------------------------------------------
.text:0000000000010841
.text:0000000000010841 loc_10841:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000010841                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:0000000000010841                 mov     rbx, [rbp+30h]  ; jumptable 000000000001083F case 8
.text:0000000000010845                 mov     r15, [rsp+158h+var_138]
.text:000000000001084A                 mov     rsi, rdi
.text:000000000001084D                 mov     r13, [rsp+158h+var_140]
.text:0000000000010852                 mov     [rsp+158h+var_158], r8
.text:0000000000010856                 lea     rax, [rbx+1]
.text:000000000001085A                 mov     rdx, r15
.text:000000000001085D                 or      rdx, 800000h
.text:0000000000010864                 mov     rdi, r13
.text:0000000000010867                 mov     [rbp+30h], rax
.text:000000000001086B                 call    peek_token
.text:0000000000010870                 cdqe
.text:0000000000010872                 add     [r14+48h], rax
.text:0000000000010876                 xor     eax, eax
.text:0000000000010878                 cmp     byte ptr [r13+8], 9
.text:000000000001087D                 mov     rdx, r13
.text:0000000000010880                 jz      loc_11380
.text:0000000000010886                 mov     r13, [rsp+158h+var_118]
.text:000000000001088B                 mov     r8, [rsp+158h+var_158]
.text:000000000001088F                 mov     rcx, r15
.text:0000000000010892                 mov     rsi, rbp
.text:0000000000010895                 mov     rdi, r14
.text:0000000000010898                 add     r8, 1
.text:000000000001089C                 mov     r9, r13
.text:000000000001089F                 call    parse_reg_exp
.text:00000000000108A4                 mov     r11d, [r13+0]
.text:00000000000108A8                 test    r11d, r11d
.text:00000000000108AB                 jnz     short def_1083F ; jumptable 000000000001083F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:00000000000108AD                 mov     rdx, [rsp+158h+var_140]
.text:00000000000108B2                 cmp     byte ptr [rdx+8], 9
.text:00000000000108B6                 jz      loc_11380
.text:00000000000108BC                 test    rax, rax
.text:00000000000108BF                 jz      short loc_108D2
.text:00000000000108C1                 lea     rsi, free_tree
.text:00000000000108C8                 xor     edx, edx
.text:00000000000108CA                 mov     rdi, rax
.text:00000000000108CD                 call    postorder
.text:00000000000108D2
.text:00000000000108D2 loc_108D2:                              ; CODE XREF: parse_expression+DF↑j
.text:00000000000108D2                 mov     rax, [rsp+158h+var_118]
.text:00000000000108D7                 mov     dword ptr [rax], 8
.text:00000000000108DD                 nop     dword ptr [rax]
.text:00000000000108E0
.text:00000000000108E0 def_1083F:                              ; CODE XREF: parse_expression+42↑j
.text:00000000000108E0                                         ; parse_expression+5F↑j ...
.text:00000000000108E0                 mov     [rsp+158h+var_130], 0 ; jumptable 000000000001083F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:00000000000108E9                 nop     dword ptr [rax+00000000h]
.text:00000000000108F0
.text:00000000000108F0 loc_108F0:                              ; CODE XREF: parse_expression+1CA↓j
.text:00000000000108F0                                         ; parse_expression+1DE↓j ...
.text:00000000000108F0                 mov     rdi, [rsp+158h+var_40]
.text:00000000000108F8                 xor     rdi, fs:28h
.text:0000000000010901                 mov     rax, [rsp+158h+var_130]
.text:0000000000010906                 jnz     loc_11C7E
.text:000000000001090C                 add     rsp, 128h
.text:0000000000010913                 pop     rbx
.text:0000000000010914                 pop     rbp
.text:0000000000010915                 pop     r12
.text:0000000000010917                 pop     r13
.text:0000000000010919                 pop     r14
.text:000000000001091B                 pop     r15
.text:000000000001091D                 retn
.text:000000000001091E ; ---------------------------------------------------------------------------
.text:000000000001091E
.text:000000000001091E loc_1091E:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001091E                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:000000000001091E                 test    [rsp+158h+var_138], 1000000h ; jumptable 000000000001083F case 23
.text:0000000000010927                 jnz     loc_10B7D
.text:000000000001092D
.text:000000000001092D loc_1092D:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001092D                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:000000000001092D                 mov     rax, [rsp+158h+var_138] ; jumptable 000000000001083F cases 11,18,19
.text:0000000000010932                 test    al, 20h
.text:0000000000010934                 jnz     loc_10B7D
.text:000000000001093A                 test    al, 10h
.text:000000000001093C                 jnz     loc_117A5
.text:0000000000010942                 cmp     cl, 9
.text:0000000000010945                 jz      loc_11358       ; jumptable 000000000001083F case 9
.text:000000000001094B
.text:000000000001094B loc_1094B:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001094B                                         ; parse_expression+B81↓j
.text:000000000001094B                                         ; DATA XREF: ...
.text:000000000001094B                 mov     rax, [rsp+158h+var_148] ; jumptable 000000000001083F case 24
.text:0000000000010950                 mov     r8, [rsp+158h+var_140]
.text:0000000000010955                 xor     ecx, ecx
.text:0000000000010957                 xor     edx, edx
.text:0000000000010959                 lea     rsi, [rax+80h]
.text:0000000000010960                 lea     rdi, [rax+70h]
.text:0000000000010964                 mov     byte ptr [r8+8], 1
.text:0000000000010969                 call    create_token_tree_isra_16
.text:000000000001096E                 test    rax, rax
.text:0000000000010971                 mov     [rsp+158h+var_130], rax
.text:0000000000010976                 jz      loc_11348
.text:000000000001097C
.text:000000000001097C loc_1097C:                              ; CODE XREF: parse_expression+9A0↓j
.text:000000000001097C                                         ; parse_expression+9A9↓j ...
.text:000000000001097C                 mov     rbx, [rsp+158h+var_140]
.text:0000000000010981                 mov     rdx, [rsp+158h+var_138]
.text:0000000000010986                 mov     rsi, r14
.text:0000000000010989                 lea     r15, [rsp+158h+var_98]
.text:0000000000010991                 mov     rdi, rbx
.text:0000000000010994                 call    peek_token
.text:0000000000010999                 cdqe
.text:000000000001099B                 add     [r14+48h], rax
.text:000000000001099F                 movzx   eax, byte ptr [rbx+8]
.text:00000000000109A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000109A8
.text:00000000000109A8 loc_109A8:                              ; CODE XREF: parse_expression+370↓j
.text:00000000000109A8                                         ; parse_expression+37C↓j
.text:00000000000109A8                 cmp     al, 17h
.text:00000000000109AA                 ja      loc_108F0
.text:00000000000109B0                 cmp     al, 12h
.text:00000000000109B2                 mov     ecx, 8C0800h
.text:00000000000109B7                 setz    bl
.text:00000000000109BA                 bt      rcx, rax
.text:00000000000109BE                 jnb     loc_108F0
.text:00000000000109C4                 mov     rcx, [rsp+158h+var_140]
.text:00000000000109C9                 cmp     al, 17h
.text:00000000000109CB                 mov     rbp, [r14+48h]
.text:00000000000109CF                 movdqa  xmm0, xmmword ptr [rcx]
.text:00000000000109D3                 jz      loc_10CF8
.text:00000000000109D9                 cmp     al, 13h
.text:00000000000109DB                 movzx   ebx, bl
.text:00000000000109DE                 jz      loc_10C90
.text:00000000000109E4                 mov     rdx, [rsp+158h+var_138]
.text:00000000000109E9                 mov     rdi, [rsp+158h+var_140]
.text:00000000000109EE                 mov     rsi, r14
.text:00000000000109F1                 call    peek_token
.text:00000000000109F6                 cdqe
.text:00000000000109F8                 add     [r14+48h], rax
.text:00000000000109FC                 cmp     [rsp+158h+var_130], 0
.text:0000000000010A02                 jz      loc_10D90
.text:0000000000010A08                 mov     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:0000000000010A10
.text:0000000000010A10 loc_10A10:                              ; CODE XREF: parse_expression+4E3↓j
.text:0000000000010A10                 test    rbx, rbx
.text:0000000000010A13                 mov     rbp, [rsp+158h+var_130]
.text:0000000000010A18                 mov     qword ptr [rsp+158h+var_128], 0
.text:0000000000010A21                 jg      loc_10BA0
.text:0000000000010A27
.text:0000000000010A27 loc_10A27:                              ; CODE XREF: parse_expression+471↓j
.text:0000000000010A27                 cmp     byte ptr [rbp+30h], 11h
.text:0000000000010A2B                 jz      loc_10D70
.text:0000000000010A31
.text:0000000000010A31 loc_10A31:                              ; CODE XREF: parse_expression+5A3↓j
.text:0000000000010A31                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:0000000000010A36                 mov     rdx, rbp
.text:0000000000010A39                 mov     r8, r15
.text:0000000000010A3C                 setz    al
.text:0000000000010A3F                 xor     ecx, ecx
.text:0000000000010A41                 add     eax, 0Ah
.text:0000000000010A44                 mov     [rsp+158h+var_90], al
.text:0000000000010A4B                 mov     rax, [rsp+158h+var_148]
.text:0000000000010A50                 lea     r12, [rax+70h]
.text:0000000000010A54                 lea     r13, [rax+80h]
.text:0000000000010A5B                 mov     rdi, r12
.text:0000000000010A5E                 mov     rsi, r13
.text:0000000000010A61                 call    create_token_tree_isra_16
.text:0000000000010A66                 test    rax, rax
.text:0000000000010A69                 mov     rdx, rax
.text:0000000000010A6C                 jz      loc_10C60
.text:0000000000010A72                 add     rbx, 2
.text:0000000000010A76                 cmp     rbx, [rsp+158h+var_158]
.text:0000000000010A7A                 jg      short loc_10AFB
.text:0000000000010A7C                 mov     [rsp+158h+var_110], r14
.text:0000000000010A81                 mov     r14, rax
.text:0000000000010A84
.text:0000000000010A84 loc_10A84:                              ; CODE XREF: parse_expression+311↓j
.text:0000000000010A84                 mov     rsi, [rsp+158h+var_148]
.text:0000000000010A89                 mov     rdi, rbp
.text:0000000000010A8C                 call    duplicate_tree
.text:0000000000010A91                 mov     r8, r15
.text:0000000000010A94                 mov     rbp, rax
.text:0000000000010A97                 mov     rcx, rax
.text:0000000000010A9A                 mov     rdx, r14
.text:0000000000010A9D                 mov     rsi, r13
.text:0000000000010AA0                 mov     rdi, r12
.text:0000000000010AA3                 mov     [rsp+158h+var_90], 10h
.text:0000000000010AAB                 call    create_token_tree_isra_16
.text:0000000000010AB0                 test    rbp, rbp
.text:0000000000010AB3                 jz      loc_10C60
.text:0000000000010AB9                 test    rax, rax
.text:0000000000010ABC                 jz      loc_10C60
.text:0000000000010AC2                 xor     ecx, ecx
.text:0000000000010AC4                 mov     r8, r15
.text:0000000000010AC7                 mov     rdx, rax
.text:0000000000010ACA                 mov     rsi, r13
.text:0000000000010ACD                 mov     rdi, r12
.text:0000000000010AD0                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000010AD8                 call    create_token_tree_isra_16
.text:0000000000010ADD                 test    rax, rax
.text:0000000000010AE0                 mov     r14, rax
.text:0000000000010AE3                 jz      loc_10C60
.text:0000000000010AE9                 add     rbx, 1
.text:0000000000010AED                 cmp     rbx, [rsp+158h+var_158]
.text:0000000000010AF1                 jle     short loc_10A84
.text:0000000000010AF3                 mov     r14, [rsp+158h+var_110]
.text:0000000000010AF8                 mov     rdx, rax
.text:0000000000010AFB
.text:0000000000010AFB loc_10AFB:                              ; CODE XREF: parse_expression+29A↑j
.text:0000000000010AFB                 mov     rax, qword ptr [rsp+158h+var_128]
.text:0000000000010B00                 test    rax, rax
.text:0000000000010B03                 jz      loc_10DB0
.text:0000000000010B09                 mov     rcx, rdx
.text:0000000000010B0C                 mov     r8, r15
.text:0000000000010B0F                 mov     rdx, rax
.text:0000000000010B12                 mov     rsi, r13
.text:0000000000010B15                 mov     rdi, r12
.text:0000000000010B18                 mov     [rsp+158h+var_90], 10h
.text:0000000000010B20                 call    create_token_tree_isra_16
.text:0000000000010B25
.text:0000000000010B25 loc_10B25:                              ; CODE XREF: parse_expression+581↓j
.text:0000000000010B25                 mov     rdi, [rsp+158h+var_118]
.text:0000000000010B2A                 mov     edx, [rdi]
.text:0000000000010B2C                 test    edx, edx
.text:0000000000010B2E                 jz      short loc_10B39
.text:0000000000010B30                 test    rax, rax
.text:0000000000010B33                 jz      loc_10E8B
.text:0000000000010B39
.text:0000000000010B39 loc_10B39:                              ; CODE XREF: parse_expression+34E↑j
.text:0000000000010B39                 mov     [rsp+158h+var_130], rax
.text:0000000000010B3E
.text:0000000000010B3E loc_10B3E:                              ; CODE XREF: parse_expression+510↓j
.text:0000000000010B3E                                         ; parse_expression+5D5↓j
.text:0000000000010B3E                 test    [rsp+158h+var_138], 1000000h
.text:0000000000010B47                 mov     rax, [rsp+158h+var_140]
.text:0000000000010B4C                 movzx   eax, byte ptr [rax+8]
.text:0000000000010B50                 jz      loc_109A8
.text:0000000000010B56                 cmp     al, 0Bh
.text:0000000000010B58                 jz      short loc_10B62
.text:0000000000010B5A                 cmp     al, 17h
.text:0000000000010B5C                 jnz     loc_109A8
.text:0000000000010B62
.text:0000000000010B62 loc_10B62:                              ; CODE XREF: parse_expression+378↑j
.text:0000000000010B62                 mov     rax, [rsp+158h+var_130]
.text:0000000000010B67                 test    rax, rax
.text:0000000000010B6A                 jz      short loc_10B7D
.text:0000000000010B6C                 lea     rsi, free_tree
.text:0000000000010B73                 xor     edx, edx
.text:0000000000010B75                 mov     rdi, rax
.text:0000000000010B78                 call    postorder
.text:0000000000010B7D
.text:0000000000010B7D loc_10B7D:                              ; CODE XREF: parse_expression+147↑j
.text:0000000000010B7D                                         ; parse_expression+154↑j ...
.text:0000000000010B7D                 mov     rax, [rsp+158h+var_118]
.text:0000000000010B82                 mov     [rsp+158h+var_130], 0
.text:0000000000010B8B                 mov     dword ptr [rax], 0Dh
.text:0000000000010B91                 jmp     loc_108F0
.text:0000000000010B91 ; ---------------------------------------------------------------------------
.text:0000000000010B96                 align 20h
.text:0000000000010BA0
.text:0000000000010BA0 loc_10BA0:                              ; CODE XREF: parse_expression+241↑j
.text:0000000000010BA0                 cmp     rbx, 1
.text:0000000000010BA4                 jz      loc_113DC
.text:0000000000010BAA                 mov     rax, [rsp+158h+var_148]
.text:0000000000010BAF                 mov     r13, rbp
.text:0000000000010BB2                 mov     [rsp+158h+var_110], r14
.text:0000000000010BB7                 lea     r12, [rax+80h]
.text:0000000000010BBE                 lea     rdi, [rax+70h]
.text:0000000000010BC2                 mov     rax, rbp
.text:0000000000010BC5                 mov     r14, rax
.text:0000000000010BC8                 mov     ebp, 2
.text:0000000000010BCD                 mov     rsi, r12
.text:0000000000010BD0                 mov     qword ptr [rsp+158h+var_128], rdi
.text:0000000000010BD5                 mov     r12, r13
.text:0000000000010BD8                 mov     r13, rbx
.text:0000000000010BDB                 mov     rbx, rsi
.text:0000000000010BDE                 xchg    ax, ax
.text:0000000000010BE0
.text:0000000000010BE0 loc_10BE0:                              ; CODE XREF: parse_expression+442↓j
.text:0000000000010BE0                 mov     rsi, [rsp+158h+var_148]
.text:0000000000010BE5                 mov     rdi, r12
.text:0000000000010BE8                 call    duplicate_tree
.text:0000000000010BED                 mov     rdi, qword ptr [rsp+158h+var_128]
.text:0000000000010BF2                 mov     r12, rax
.text:0000000000010BF5                 mov     rdx, r14
.text:0000000000010BF8                 mov     r8, r15
.text:0000000000010BFB                 mov     rcx, rax
.text:0000000000010BFE                 mov     rsi, rbx
.text:0000000000010C01                 mov     [rsp+158h+var_90], 10h
.text:0000000000010C09                 call    create_token_tree_isra_16
.text:0000000000010C0E                 test    r12, r12
.text:0000000000010C11                 mov     r14, rax
.text:0000000000010C14                 jz      short loc_10C60
.text:0000000000010C16                 test    rax, rax
.text:0000000000010C19                 jz      short loc_10C60
.text:0000000000010C1B                 add     rbp, 1
.text:0000000000010C1F                 cmp     rbp, r13
.text:0000000000010C22                 jle     short loc_10BE0
.text:0000000000010C24                 mov     r14, [rsp+158h+var_110]
.text:0000000000010C29                 mov     rbx, r13
.text:0000000000010C2C                 mov     qword ptr [rsp+158h+var_128], rax
.text:0000000000010C31                 mov     r13, r12
.text:0000000000010C34
.text:0000000000010C34 loc_10C34:                              ; CODE XREF: parse_expression+C06↓j
.text:0000000000010C34                 cmp     [rsp+158h+var_158], rbx
.text:0000000000010C38                 jz      loc_10DA4
.text:0000000000010C3E                 mov     rsi, [rsp+158h+var_148]
.text:0000000000010C43                 mov     rdi, r13
.text:0000000000010C46                 call    duplicate_tree
.text:0000000000010C4B                 test    rax, rax
.text:0000000000010C4E                 mov     rbp, rax
.text:0000000000010C51                 jnz     loc_10A27
.text:0000000000010C57                 nop     word ptr [rax+rax+00000000h]
.text:0000000000010C60
.text:0000000000010C60 loc_10C60:                              ; CODE XREF: parse_expression+28C↑j
.text:0000000000010C60                                         ; parse_expression+2D3↑j ...
.text:0000000000010C60                 mov     rax, [rsp+158h+var_118]
.text:0000000000010C65                 mov     dword ptr [rax], 0Ch
.text:0000000000010C6B
.text:0000000000010C6B loc_10C6B:                              ; CODE XREF: parse_expression+505↓j
.text:0000000000010C6B                                         ; parse_expression+6B1↓j
.text:0000000000010C6B                 mov     rdi, [rsp+158h+var_130]
.text:0000000000010C70                 lea     rsi, free_tree
.text:0000000000010C77                 xor     edx, edx
.text:0000000000010C79                 call    postorder
.text:0000000000010C7E                 mov     [rsp+158h+var_130], 0
.text:0000000000010C87                 jmp     loc_108F0
.text:0000000000010C87 ; ---------------------------------------------------------------------------
.text:0000000000010C8C                 align 10h
.text:0000000000010C90
.text:0000000000010C90 loc_10C90:                              ; CODE XREF: parse_expression+1FE↑j
.text:0000000000010C90                 mov     [rsp+158h+var_158], 1
.text:0000000000010C98
.text:0000000000010C98 loc_10C98:                              ; CODE XREF: parse_expression+65A↓j
.text:0000000000010C98                 mov     rdx, [rsp+158h+var_138]
.text:0000000000010C9D                 mov     rdi, [rsp+158h+var_140]
.text:0000000000010CA2                 mov     rsi, r14
.text:0000000000010CA5                 call    peek_token
.text:0000000000010CAA                 cdqe
.text:0000000000010CAC                 add     [r14+48h], rax
.text:0000000000010CB0                 cmp     [rsp+158h+var_130], 0
.text:0000000000010CB6                 jz      loc_10D90
.text:0000000000010CBC                 mov     rax, [rsp+158h+var_158]
.text:0000000000010CC0                 or      rax, rbx
.text:0000000000010CC3                 jnz     loc_10A10
.text:0000000000010CC9                 mov     rdi, [rsp+158h+var_130]
.text:0000000000010CCE                 lea     rsi, free_tree
.text:0000000000010CD5                 xor     edx, edx
.text:0000000000010CD7                 call    postorder
.text:0000000000010CDC                 mov     rax, [rsp+158h+var_118]
.text:0000000000010CE1                 mov     esi, [rax]
.text:0000000000010CE3                 test    esi, esi
.text:0000000000010CE5                 jnz     short loc_10C6B
.text:0000000000010CE7
.text:0000000000010CE7 loc_10CE7:                              ; CODE XREF: parse_expression+5B9↓j
.text:0000000000010CE7                 mov     [rsp+158h+var_130], 0
.text:0000000000010CF0                 jmp     loc_10B3E
.text:0000000000010CF0 ; ---------------------------------------------------------------------------
.text:0000000000010CF5                 align 8
.text:0000000000010CF8
.text:0000000000010CF8 loc_10CF8:                              ; CODE XREF: parse_expression+1F3↑j
.text:0000000000010CF8                 mov     rdx, [rsp+158h+var_138]
.text:0000000000010CFD                 mov     rsi, rcx
.text:0000000000010D00                 mov     rdi, r14
.text:0000000000010D03                 movaps  xmmword ptr [rsp+158h+var_158], xmm0
.text:0000000000010D07                 call    fetch_number
.text:0000000000010D0C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000010D10                 mov     rbx, rax
.text:0000000000010D13                 movdqa  xmm0, xmmword ptr [rsp+158h+var_158]
.text:0000000000010D18                 jz      loc_10DC0
.text:0000000000010D1E                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000010D22                 jz      short loc_10D3D
.text:0000000000010D24                 mov     rax, [rsp+158h+var_140]
.text:0000000000010D29                 movzx   eax, byte ptr [rax+8]
.text:0000000000010D2D                 cmp     al, 18h
.text:0000000000010D2F                 jz      loc_10E50
.text:0000000000010D35                 cmp     al, 1
.text:0000000000010D37                 jz      loc_10E63
.text:0000000000010D3D
.text:0000000000010D3D loc_10D3D:                              ; CODE XREF: parse_expression+542↑j
.text:0000000000010D3D                                         ; parse_expression+624↓j
.text:0000000000010D3D                 test    [rsp+158h+var_138], 200000h
.text:0000000000010D46                 jz      loc_11C83
.text:0000000000010D4C
.text:0000000000010D4C loc_10D4C:                              ; CODE XREF: parse_expression+69A↓j
.text:0000000000010D4C                 mov     rax, [rsp+158h+var_140]
.text:0000000000010D51                 mov     [r14+48h], rbp
.text:0000000000010D55                 movaps  xmmword ptr [rax], xmm0
.text:0000000000010D58                 mov     byte ptr [rax+8], 1
.text:0000000000010D5C                 mov     rax, [rsp+158h+var_130]
.text:0000000000010D61                 jmp     loc_10B25
.text:0000000000010D61 ; ---------------------------------------------------------------------------
.text:0000000000010D66                 align 10h
.text:0000000000010D70
.text:0000000000010D70 loc_10D70:                              ; CODE XREF: parse_expression+24B↑j
.text:0000000000010D70                 mov     rdx, [rbp+28h]
.text:0000000000010D74                 lea     rsi, mark_opt_subexp
.text:0000000000010D7B                 mov     rdi, rbp
.text:0000000000010D7E                 call    postorder
.text:0000000000010D83                 jmp     loc_10A31
.text:0000000000010D83 ; ---------------------------------------------------------------------------
.text:0000000000010D88                 align 10h
.text:0000000000010D90
.text:0000000000010D90 loc_10D90:                              ; CODE XREF: parse_expression+222↑j
.text:0000000000010D90                                         ; parse_expression+4D6↑j
.text:0000000000010D90                 mov     rax, [rsp+158h+var_118]
.text:0000000000010D95                 mov     ecx, [rax]
.text:0000000000010D97                 test    ecx, ecx
.text:0000000000010D99                 jz      loc_10CE7
.text:0000000000010D9F                 jmp     def_1083F       ; jumptable 000000000001083F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000010DA4 ; ---------------------------------------------------------------------------
.text:0000000000010DA4
.text:0000000000010DA4 loc_10DA4:                              ; CODE XREF: parse_expression+458↑j
.text:0000000000010DA4                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000010DA9                 nop     dword ptr [rax+00000000h]
.text:0000000000010DB0
.text:0000000000010DB0 loc_10DB0:                              ; CODE XREF: parse_expression+323↑j
.text:0000000000010DB0                 mov     [rsp+158h+var_130], rdx
.text:0000000000010DB5                 jmp     loc_10B3E
.text:0000000000010DB5 ; ---------------------------------------------------------------------------
.text:0000000000010DBA                 align 20h
.text:0000000000010DC0
.text:0000000000010DC0 loc_10DC0:                              ; CODE XREF: parse_expression+538↑j
.text:0000000000010DC0                 mov     rax, [rsp+158h+var_140]
.text:0000000000010DC5                 cmp     byte ptr [rax+8], 1
.text:0000000000010DC9                 jnz     loc_10E80
.text:0000000000010DCF                 mov     rax, [rsp+158h+var_140]
.text:0000000000010DD4                 cmp     byte ptr [rax], 2Ch ; ','
.text:0000000000010DD7                 jnz     loc_10E80
.text:0000000000010DDD                 xor     ebx, ebx
.text:0000000000010DDF
.text:0000000000010DDF loc_10DDF:                              ; CODE XREF: parse_expression+68B↓j
.text:0000000000010DDF                 mov     rdx, [rsp+158h+var_138]
.text:0000000000010DE4                 mov     rsi, [rsp+158h+var_140]
.text:0000000000010DE9                 mov     rdi, r14
.text:0000000000010DEC                 movaps  [rsp+158h+var_128], xmm0
.text:0000000000010DF1                 call    fetch_number
.text:0000000000010DF6                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000010DFA                 mov     [rsp+158h+var_158], rax
.text:0000000000010DFE                 movdqa  xmm0, [rsp+158h+var_128]
.text:0000000000010E04                 jz      loc_10D3D
.text:0000000000010E0A                 mov     rax, [rsp+158h+var_158]
.text:0000000000010E0E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000010E12                 jz      short loc_10E19
.text:0000000000010E14                 cmp     rax, rbx
.text:0000000000010E17                 jl      short loc_10E80
.text:0000000000010E19
.text:0000000000010E19 loc_10E19:                              ; CODE XREF: parse_expression+632↑j
.text:0000000000010E19                 mov     rax, [rsp+158h+var_140]
.text:0000000000010E1E                 cmp     byte ptr [rax+8], 18h
.text:0000000000010E22                 jnz     short loc_10E80
.text:0000000000010E24                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:0000000000010E29                 jnz     short loc_10E54
.text:0000000000010E2B                 xor     eax, eax
.text:0000000000010E2D                 cmp     rbx, 7FFFh
.text:0000000000010E34                 setnle  al
.text:0000000000010E37
.text:0000000000010E37 loc_10E37:                              ; CODE XREF: parse_expression+681↓j
.text:0000000000010E37                 test    rax, rax
.text:0000000000010E3A                 jz      loc_10C98
.text:0000000000010E40                 mov     rax, [rsp+158h+var_118]
.text:0000000000010E45                 mov     dword ptr [rax], 0Fh
.text:0000000000010E4B                 jmp     short loc_10E8B
.text:0000000000010E4B ; ---------------------------------------------------------------------------
.text:0000000000010E4D                 align 10h
.text:0000000000010E50
.text:0000000000010E50 loc_10E50:                              ; CODE XREF: parse_expression+54F↑j
.text:0000000000010E50                 mov     [rsp+158h+var_158], rbx
.text:0000000000010E54
.text:0000000000010E54 loc_10E54:                              ; CODE XREF: parse_expression+649↑j
.text:0000000000010E54                 xor     eax, eax
.text:0000000000010E56                 cmp     [rsp+158h+var_158], 7FFFh
.text:0000000000010E5E                 setnle  al
.text:0000000000010E61                 jmp     short loc_10E37
.text:0000000000010E63 ; ---------------------------------------------------------------------------
.text:0000000000010E63
.text:0000000000010E63 loc_10E63:                              ; CODE XREF: parse_expression+557↑j
.text:0000000000010E63                 mov     rax, [rsp+158h+var_140]
.text:0000000000010E68                 cmp     byte ptr [rax], 2Ch ; ','
.text:0000000000010E6B                 jz      loc_10DDF
.text:0000000000010E71                 test    [rsp+158h+var_138], 200000h
.text:0000000000010E7A                 jnz     loc_10D4C
.text:0000000000010E80
.text:0000000000010E80 loc_10E80:                              ; CODE XREF: parse_expression+5E9↑j
.text:0000000000010E80                                         ; parse_expression+5F7↑j ...
.text:0000000000010E80                 mov     rax, [rsp+158h+var_118]
.text:0000000000010E85                 mov     dword ptr [rax], 0Ah
.text:0000000000010E8B
.text:0000000000010E8B loc_10E8B:                              ; CODE XREF: parse_expression+353↑j
.text:0000000000010E8B                                         ; parse_expression+66B↑j ...
.text:0000000000010E8B                 cmp     [rsp+158h+var_130], 0
.text:0000000000010E91                 jnz     loc_10C6B
.text:0000000000010E97                 jmp     def_1083F       ; jumptable 000000000001083F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000010E97 ; ---------------------------------------------------------------------------
.text:0000000000010E9C                 align 20h
.text:0000000000010EA0
.text:0000000000010EA0 loc_10EA0:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000010EA0                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:0000000000010EA0                 mov     rax, [rsp+158h+var_140] ; jumptable 000000000001083F case 12
.text:0000000000010EA5                 mov     ebp, [rax]
.text:0000000000010EA7                 test    ebp, 30Fh
.text:0000000000010EAD                 jz      short loc_10F11
.text:0000000000010EAF                 mov     rax, [rsp+158h+var_148]
.text:0000000000010EB4                 movzx   eax, byte ptr [rax+0B0h]
.text:0000000000010EBB                 test    al, 10h
.text:0000000000010EBD                 jnz     short loc_10F11
.text:0000000000010EBF                 mov     rdi, [rsp+158h+var_148]
.text:0000000000010EC4                 or      eax, 10h
.text:0000000000010EC7                 test    al, 8
.text:0000000000010EC9                 mov     [rdi+0B0h], al
.text:0000000000010ECF                 jnz     loc_11AD3
.text:0000000000010ED5                 mov     rdx, 3FF000000000000h
.text:0000000000010EDF                 test    al, 4
.text:0000000000010EE1                 mov     [rdi+0B8h], rdx
.text:0000000000010EE8                 mov     rdx, 7FFFFFE87FFFFFEh
.text:0000000000010EF2                 mov     [rdi+0C0h], rdx
.text:0000000000010EF9                 jz      loc_11A58
.text:0000000000010EFF                 pxor    xmm0, xmm0
.text:0000000000010F03                 mov     rax, [rsp+158h+var_140]
.text:0000000000010F08                 movups  xmmword ptr [rdi+0C8h], xmm0
.text:0000000000010F0F                 mov     ebp, [rax]
.text:0000000000010F11
.text:0000000000010F11 loc_10F11:                              ; CODE XREF: parse_expression+6CD↑j
.text:0000000000010F11                                         ; parse_expression+6DD↑j ...
.text:0000000000010F11                 mov     rax, [rsp+158h+var_148]
.text:0000000000010F16                 lea     rbx, [rax+70h]
.text:0000000000010F1A                 lea     r12, [rax+80h]
.text:0000000000010F21                 lea     eax, [rbp-100h]
.text:0000000000010F27                 test    eax, 0FFFFFEFFh
.text:0000000000010F2C                 jnz     loc_1159A
.text:0000000000010F32                 cmp     ebp, 100h
.text:0000000000010F38                 mov     r15, [rsp+158h+var_140]
.text:0000000000010F3D                 jz      loc_11572
.text:0000000000010F43                 mov     dword ptr [r15], 5
.text:0000000000010F4A                 mov     r8, r15
.text:0000000000010F4D                 xor     ecx, ecx
.text:0000000000010F4F                 xor     edx, edx
.text:0000000000010F51                 mov     rsi, r12
.text:0000000000010F54                 mov     rdi, rbx
.text:0000000000010F57                 call    create_token_tree_isra_16
.text:0000000000010F5C                 mov     dword ptr [r15], 0Ah
.text:0000000000010F63                 mov     rbp, rax
.text:0000000000010F66
.text:0000000000010F66 loc_10F66:                              ; CODE XREF: parse_expression+DB5↓j
.text:0000000000010F66                 mov     r8, [rsp+158h+var_140]
.text:0000000000010F6B                 xor     ecx, ecx
.text:0000000000010F6D                 xor     edx, edx
.text:0000000000010F6F                 mov     rsi, r12
.text:0000000000010F72                 mov     rdi, rbx
.text:0000000000010F75                 call    create_token_tree_isra_16
.text:0000000000010F7A                 lea     r8, [rsp+158h+var_98]
.text:0000000000010F82                 mov     rdx, rbp
.text:0000000000010F85                 mov     rdi, rbx
.text:0000000000010F88                 mov     rcx, rax
.text:0000000000010F8B                 mov     rsi, r12
.text:0000000000010F8E                 mov     r13, rax
.text:0000000000010F91                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000010F99                 call    create_token_tree_isra_16
.text:0000000000010F9E                 test    rbp, rbp
.text:0000000000010FA1                 mov     rdi, rax
.text:0000000000010FA4                 mov     [rsp+158h+var_130], rax
.text:0000000000010FA9                 setz    dl
.text:0000000000010FAC                 test    r13, r13
.text:0000000000010FAF                 setz    al
.text:0000000000010FB2                 or      dl, al
.text:0000000000010FB4                 jnz     loc_11348
.text:0000000000010FBA                 test    rdi, rdi
.text:0000000000010FBD                 jz      loc_11348
.text:0000000000010FC3
.text:0000000000010FC3 loc_10FC3:                              ; CODE XREF: parse_expression+DD6↓j
.text:0000000000010FC3                 mov     rdx, [rsp+158h+var_138]
.text:0000000000010FC8                 mov     rdi, [rsp+158h+var_140]
.text:0000000000010FCD                 mov     rsi, r14
.text:0000000000010FD0                 call    peek_token
.text:0000000000010FD5                 cdqe
.text:0000000000010FD7                 add     [r14+48h], rax
.text:0000000000010FDB                 jmp     loc_108F0
.text:0000000000010FE0 ; ---------------------------------------------------------------------------
.text:0000000000010FE0
.text:0000000000010FE0 loc_10FE0:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000010FE0                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:0000000000010FE0                 mov     esi, 1          ; jumptable 000000000001083F case 20
.text:0000000000010FE5                 mov     edi, 20h ; ' '  ; nmemb
.text:0000000000010FEA                 mov     [rsp+158h+var_C0], 0
.text:0000000000010FF6                 call    _calloc
.text:0000000000010FFB                 mov     esi, 1          ; size
.text:0000000000011000                 mov     r12, rax
.text:0000000000011003                 mov     edi, 50h ; 'P'  ; nmemb
.text:0000000000011008                 call    _calloc
.text:000000000001100D                 test    r12, r12
.text:0000000000011010                 mov     r13, rax
.text:0000000000011013                 setz    dl
.text:0000000000011016                 test    rax, rax
.text:0000000000011019                 setz    al
.text:000000000001101C                 or      dl, al
.text:000000000001101E                 jnz     loc_117F9
.text:0000000000011024                 mov     r10, [rsp+158h+var_140]
.text:0000000000011029                 mov     rdx, [rsp+158h+var_138]
.text:000000000001102E                 mov     rsi, r14
.text:0000000000011031                 mov     rdi, r10
.text:0000000000011034                 call    peek_token_bracket
.text:0000000000011039                 movsxd  rbx, eax
.text:000000000001103C                 movzx   eax, byte ptr [r10+8]
.text:0000000000011041                 cmp     al, 2
.text:0000000000011043                 jz      loc_117E9
.text:0000000000011049                 cmp     al, 19h
.text:000000000001104B                 mov     [rsp+158h+var_101], 0
.text:0000000000011050                 jz      loc_1151A
.text:0000000000011056
.text:0000000000011056 loc_11056:                              ; CODE XREF: parse_expression+D7F↓j
.text:0000000000011056                 cmp     al, 15h
.text:0000000000011058                 jz      loc_11564
.text:000000000001105E
.text:000000000001105E loc_1105E:                              ; CODE XREF: parse_expression+D8D↓j
.text:000000000001105E                 lea     rax, [rsp+158h+var_88]
.text:0000000000011066                 mov     r15, [rsp+158h+var_140]
.text:000000000001106B                 lea     rbp, jpt_11146
.text:0000000000011072                 mov     [rsp+158h+var_110], 0
.text:000000000001107B                 mov     r9d, 1
.text:0000000000011081                 mov     qword ptr [rsp+158h+var_128], 0
.text:000000000001108A                 mov     [rsp+158h+var_130], rax
.text:000000000001108F                 lea     rax, [rsp+158h+var_B8]
.text:0000000000011097                 mov     [rsp+158h+var_158], rax
.text:000000000001109B                 lea     rax, [rsp+158h+var_C0]
.text:00000000000110A3                 mov     [rsp+158h+var_100], rax
.text:00000000000110A8                 lea     rax, [rsp+158h+var_98]
.text:00000000000110B0                 mov     [rsp+158h+var_F8], rax
.text:00000000000110B5                 lea     rax, [rsp+158h+var_68]
.text:00000000000110BD                 mov     [rsp+158h+var_F0], rax
.text:00000000000110C2
.text:00000000000110C2 loc_110C2:                              ; CODE XREF: parse_expression+C58↓j
.text:00000000000110C2                 mov     rax, [rsp+158h+var_130]
.text:00000000000110C7                 mov     r8, [rsp+158h+var_138]
.text:00000000000110CC                 and     r9d, 1
.text:00000000000110D0                 mov     rdi, [rsp+158h+var_158]
.text:00000000000110D4                 mov     ecx, ebx
.text:00000000000110D6                 mov     rdx, r15
.text:00000000000110D9                 mov     rsi, r14
.text:00000000000110DC                 mov     [rsp+158h+var_B8], 3
.text:00000000000110E7                 mov     [rsp+158h+var_B0], rax
.text:00000000000110EF                 call    parse_bracket_element_constprop_37
.text:00000000000110F4                 test    eax, eax
.text:00000000000110F6                 jnz     loc_115DB
.text:00000000000110FC                 mov     rdx, [rsp+158h+var_138]
.text:0000000000011101                 mov     rsi, r14
.text:0000000000011104                 mov     rdi, r15
.text:0000000000011107                 call    peek_token_bracket
.text:000000000001110C                 movsxd  rbx, eax
.text:000000000001110F                 mov     eax, [rsp+158h+var_B8]
.text:0000000000011116                 lea     edx, [rax-2]
.text:0000000000011119                 and     edx, 0FFFFFFFDh
.text:000000000001111C                 jz      short loc_11135
.text:000000000001111E                 movzx   edx, byte ptr [r15+8]
.text:0000000000011123                 cmp     dl, 2
.text:0000000000011126                 jz      loc_115C1
.text:000000000001112C                 cmp     dl, 16h
.text:000000000001112F                 jz      loc_115E7
.text:0000000000011135
.text:0000000000011135 loc_11135:                              ; CODE XREF: parse_expression+93C↑j
.text:0000000000011135                                         ; parse_expression+105D↓j
.text:0000000000011135                 cmp     eax, 4          ; switch 5 cases
.text:0000000000011138                 ja      def_11146       ; jumptable 0000000000011146 default case
.text:000000000001113E                 movsxd  rax, ss:(jpt_11146 - 15434h)[rbp+rax*4]
.text:0000000000011143                 add     rax, rbp
.text:0000000000011146                 jmp     rax             ; switch jump
.text:0000000000011148 ; ---------------------------------------------------------------------------
.text:0000000000011148
.text:0000000000011148 loc_11148:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000011148                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:0000000000011148                 mov     rbx, [rsp+158h+var_118] ; jumptable 000000000001083F cases 34,35
.text:000000000001114D                 cmp     cl, 23h ; '#'
.text:0000000000011150                 mov     rsi, [rdi+78h]
.text:0000000000011154                 setz    r8b
.text:0000000000011158                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:000000000001115F                 lea     rdx, aSpace     ; "space"
.text:0000000000011166                 movzx   r8d, r8b
.text:000000000001116A                 mov     r9, rbx
.text:000000000001116D
.text:000000000001116D loc_1116D:                              ; CODE XREF: parse_expression+9DD↓j
.text:000000000001116D                 mov     rdi, [rsp+158h+var_148]
.text:0000000000011172                 call    build_charclass_op
.text:0000000000011177                 mov     edi, [rbx]
.text:0000000000011179                 mov     [rsp+158h+var_130], rax
.text:000000000001117E                 test    edi, edi
.text:0000000000011180                 jz      loc_1097C
.text:0000000000011186                 test    rax, rax
.text:0000000000011189                 jnz     loc_1097C
.text:000000000001118F                 jmp     def_1083F       ; jumptable 000000000001083F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001118F ; ---------------------------------------------------------------------------
.text:0000000000011194                 align 8
.text:0000000000011198
.text:0000000000011198 loc_11198:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000011198                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:0000000000011198                 mov     rbx, [rsp+158h+var_118] ; jumptable 000000000001083F cases 32,33
.text:000000000001119D                 cmp     cl, 21h ; '!'
.text:00000000000111A0                 mov     rsi, [rdi+78h]
.text:00000000000111A4                 setz    r8b
.text:00000000000111A8                 lea     rcx, s2+2       ; "_"
.text:00000000000111AF                 lea     rdx, aAlnum     ; "alnum"
.text:00000000000111B6                 movzx   r8d, r8b
.text:00000000000111BA                 mov     r9, rbx
.text:00000000000111BD                 jmp     short loc_1116D
.text:00000000000111BF ; ---------------------------------------------------------------------------
.text:00000000000111BF
.text:00000000000111BF loc_111BF:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000111BF                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:00000000000111BF                 mov     rax, [rsp+158h+var_140] ; jumptable 000000000001083F case 4
.text:00000000000111C4                 mov     rdi, [rsp+158h+var_148]
.text:00000000000111C9                 mov     rcx, [rax]
.text:00000000000111CC                 mov     eax, 1
.text:00000000000111D1                 shl     eax, cl
.text:00000000000111D3                 cdqe
.text:00000000000111D5                 test    [rdi+0A8h], rax
.text:00000000000111DC                 jz      loc_1180E
.text:00000000000111E2                 mov     rbx, [rsp+158h+var_148]
.text:00000000000111E7                 mov     r8, [rsp+158h+var_140]
.text:00000000000111EC                 xor     ecx, ecx
.text:00000000000111EE                 xor     edx, edx
.text:00000000000111F0                 or      [rbx+0A0h], rax
.text:00000000000111F7                 lea     rsi, [rbx+80h]
.text:00000000000111FE                 lea     rdi, [rbx+70h]
.text:0000000000011202                 call    create_token_tree_isra_16
.text:0000000000011207                 test    rax, rax
.text:000000000001120A                 mov     [rsp+158h+var_130], rax
.text:000000000001120F                 jz      loc_11348
.text:0000000000011215                 add     qword ptr [rbx+98h], 1
.text:000000000001121D                 or      byte ptr [rbx+0B0h], 2
.text:0000000000011224                 jmp     loc_1097C
.text:0000000000011229 ; ---------------------------------------------------------------------------
.text:0000000000011229
.text:0000000000011229 loc_11229:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000011229                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:0000000000011229                 mov     rbx, [rsp+158h+var_148] ; jumptable 000000000001083F case 5
.text:000000000001122E                 mov     r8, [rsp+158h+var_140]
.text:0000000000011233                 xor     ecx, ecx
.text:0000000000011235                 xor     edx, edx
.text:0000000000011237                 lea     rsi, [rbx+80h]
.text:000000000001123E                 lea     rdi, [rbx+70h]
.text:0000000000011242                 call    create_token_tree_isra_16
.text:0000000000011247                 test    rax, rax
.text:000000000001124A                 mov     [rsp+158h+var_130], rax
.text:000000000001124F                 jz      loc_11348
.text:0000000000011255                 cmp     dword ptr [rbx+0B4h], 1
.text:000000000001125C                 jle     loc_1097C
.text:0000000000011262                 or      byte ptr [rbx+0B0h], 2
.text:0000000000011269                 jmp     loc_1097C
.text:000000000001126E ; ---------------------------------------------------------------------------
.text:000000000001126E
.text:000000000001126E loc_1126E:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001126E                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:000000000001126E                 mov     rax, [rsp+158h+var_148] ; jumptable 000000000001083F case 1
.text:0000000000011273                 mov     r8, [rsp+158h+var_140]
.text:0000000000011278                 xor     ecx, ecx
.text:000000000001127A                 xor     edx, edx
.text:000000000001127C                 lea     rbx, [rax+70h]
.text:0000000000011280                 lea     rbp, [rax+80h]
.text:0000000000011287                 mov     rdi, rbx
.text:000000000001128A                 mov     rsi, rbp
.text:000000000001128D                 call    create_token_tree_isra_16
.text:0000000000011292                 test    rax, rax
.text:0000000000011295                 mov     [rsp+158h+var_130], rax
.text:000000000001129A                 jz      loc_11348
.text:00000000000112A0                 mov     rax, [rsp+158h+var_148]
.text:00000000000112A5                 lea     r12, [rsp+158h+var_98]
.text:00000000000112AD                 mov     r15, [rsp+158h+var_130]
.text:00000000000112B2                 cmp     dword ptr [rax+0B4h], 1
.text:00000000000112B9                 jle     loc_1097C
.text:00000000000112BF
.text:00000000000112BF loc_112BF:                              ; CODE XREF: parse_expression+B62↓j
.text:00000000000112BF                 mov     rax, [r14+48h]
.text:00000000000112C3                 cmp     [r14+68h], rax
.text:00000000000112C7                 jle     loc_115D1
.text:00000000000112CD                 cmp     rax, [r14+30h]
.text:00000000000112D1                 jz      loc_115D1
.text:00000000000112D7                 mov     rdx, [r14+10h]
.text:00000000000112DB                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:00000000000112DF                 jnz     loc_115D1
.text:00000000000112E5                 mov     r13, [rsp+158h+var_140]
.text:00000000000112EA                 mov     rdx, [rsp+158h+var_138]
.text:00000000000112EF                 mov     rsi, r14
.text:00000000000112F2                 mov     rdi, r13
.text:00000000000112F5                 call    peek_token
.text:00000000000112FA                 cdqe
.text:00000000000112FC                 add     [r14+48h], rax
.text:0000000000011300                 mov     r8, r13
.text:0000000000011303                 xor     ecx, ecx
.text:0000000000011305                 xor     edx, edx
.text:0000000000011307                 mov     rsi, rbp
.text:000000000001130A                 mov     rdi, rbx
.text:000000000001130D                 call    create_token_tree_isra_16
.text:0000000000011312                 mov     rdx, r15
.text:0000000000011315                 mov     r13, rax
.text:0000000000011318                 mov     r8, r12
.text:000000000001131B                 mov     rcx, rax
.text:000000000001131E                 mov     rsi, rbp
.text:0000000000011321                 mov     rdi, rbx
.text:0000000000011324                 mov     [rsp+158h+var_90], 10h
.text:000000000001132C                 call    create_token_tree_isra_16
.text:0000000000011331                 test    r13, r13
.text:0000000000011334                 mov     r15, rax
.text:0000000000011337                 setz    dl
.text:000000000001133A                 test    rax, rax
.text:000000000001133D                 setz    al
.text:0000000000011340                 or      dl, al
.text:0000000000011342                 jz      loc_112BF
.text:0000000000011348
.text:0000000000011348 loc_11348:                              ; CODE XREF: parse_expression+196↑j
.text:0000000000011348                                         ; parse_expression+7D4↑j ...
.text:0000000000011348                 mov     rax, [rsp+158h+var_118]
.text:000000000001134D                 mov     dword ptr [rax], 0Ch
.text:0000000000011353                 jmp     def_1083F       ; jumptable 000000000001083F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000011358 ; ---------------------------------------------------------------------------
.text:0000000000011358
.text:0000000000011358 loc_11358:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000011358                                         ; parse_expression+165↑j
.text:0000000000011358                                         ; DATA XREF: ...
.text:0000000000011358                 test    [rsp+158h+var_138], 20000h ; jumptable 000000000001083F case 9
.text:0000000000011361                 jnz     loc_1094B       ; jumptable 000000000001083F case 24
.text:0000000000011367                 mov     rax, [rsp+158h+var_118]
.text:000000000001136C                 mov     [rsp+158h+var_130], 0
.text:0000000000011375                 mov     dword ptr [rax], 10h
.text:000000000001137B                 jmp     loc_108F0
.text:0000000000011380 ; ---------------------------------------------------------------------------
.text:0000000000011380
.text:0000000000011380 loc_11380:                              ; CODE XREF: parse_expression+A0↑j
.text:0000000000011380                                         ; parse_expression+D6↑j
.text:0000000000011380                 cmp     rbx, 8
.text:0000000000011384                 jbe     short loc_113EB
.text:0000000000011386
.text:0000000000011386 loc_11386:                              ; CODE XREF: parse_expression+C23↓j
.text:0000000000011386                 mov     rdi, [rsp+158h+var_148]
.text:000000000001138B                 lea     r8, [rsp+158h+var_98]
.text:0000000000011393                 xor     ecx, ecx
.text:0000000000011395                 mov     rdx, rax
.text:0000000000011398                 mov     [rsp+158h+var_90], 11h
.text:00000000000113A0                 lea     rsi, [rdi+80h]
.text:00000000000113A7                 add     rdi, 70h ; 'p'
.text:00000000000113AB                 call    create_token_tree_isra_16
.text:00000000000113B0                 test    rax, rax
.text:00000000000113B3                 mov     [rsp+158h+var_130], rax
.text:00000000000113B8                 jz      short loc_11348
.text:00000000000113BA                 mov     [rax+28h], rbx
.text:00000000000113BE                 jmp     loc_1097C
.text:00000000000113C3 ; ---------------------------------------------------------------------------
.text:00000000000113C3
.text:00000000000113C3 loc_113C3:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000113C3                                         ; DATA XREF: .rodata:jpt_1083F↓o
.text:00000000000113C3                 mov     rax, [rsp+158h+var_118] ; jumptable 000000000001083F case 36
.text:00000000000113C8                 mov     [rsp+158h+var_130], 0
.text:00000000000113D1                 mov     dword ptr [rax], 5
.text:00000000000113D7                 jmp     loc_108F0
.text:00000000000113DC ; ---------------------------------------------------------------------------
.text:00000000000113DC
.text:00000000000113DC loc_113DC:                              ; CODE XREF: parse_expression+3C4↑j
.text:00000000000113DC                 mov     r13, [rsp+158h+var_130]
.text:00000000000113E1                 mov     qword ptr [rsp+158h+var_128], r13
.text:00000000000113E6                 jmp     loc_10C34
.text:00000000000113EB ; ---------------------------------------------------------------------------
.text:00000000000113EB
.text:00000000000113EB loc_113EB:                              ; CODE XREF: parse_expression+BA4↑j
.text:00000000000113EB                 mov     rsi, [rsp+158h+var_148]
.text:00000000000113F0                 mov     edx, 1
.text:00000000000113F5                 mov     ecx, ebx
.text:00000000000113F7                 shl     edx, cl
.text:00000000000113F9                 movsxd  rdx, edx
.text:00000000000113FC                 or      [rsi+0A8h], rdx
.text:0000000000011403                 jmp     short loc_11386
.text:0000000000011405 ; ---------------------------------------------------------------------------
.text:0000000000011405
.text:0000000000011405 loc_11405:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000011405                                         ; DATA XREF: .rodata:jpt_11146↓o
.text:0000000000011405                 mov     rsi, [rsp+158h+var_B0] ; jumptable 0000000000011146 case 3
.text:000000000001140D                 mov     rdi, r12
.text:0000000000011410                 call    build_equiv_class_isra_27
.text:0000000000011415                 mov     rdx, [rsp+158h+var_118]
.text:000000000001141A                 test    eax, eax
.text:000000000001141C                 mov     [rdx], eax
.text:000000000001141E                 jnz     short loc_11458
.text:0000000000011420
.text:0000000000011420 loc_11420:                              ; CODE XREF: parse_expression+C76↓j
.text:0000000000011420                                         ; parse_expression+CCC↓j ...
.text:0000000000011420                 movzx   eax, byte ptr [r15+8]
.text:0000000000011425                 cmp     al, 2
.text:0000000000011427                 jz      loc_115C1
.text:000000000001142D                 cmp     al, 15h
.text:000000000001142F                 jz      loc_11842
.text:0000000000011435                 xor     r9d, r9d
.text:0000000000011438                 jmp     loc_110C2
.text:000000000001143D ; ---------------------------------------------------------------------------
.text:000000000001143D
.text:000000000001143D loc_1143D:                              ; CODE XREF: parse_expression+966↑j
.text:000000000001143D                                         ; DATA XREF: .rodata:jpt_11146↓o
.text:000000000001143D                 mov     rsi, [rsp+158h+var_B0] ; jumptable 0000000000011146 case 2
.text:0000000000011445                 mov     rdi, r12
.text:0000000000011448                 call    build_equiv_class_isra_27
.text:000000000001144D                 mov     rdx, [rsp+158h+var_118]
.text:0000000000011452                 test    eax, eax
.text:0000000000011454                 mov     [rdx], eax
.text:0000000000011456                 jz      short loc_11420
.text:0000000000011458
.text:0000000000011458 loc_11458:                              ; CODE XREF: parse_expression+C3E↑j
.text:0000000000011458                                         ; parse_expression+D35↓j ...
.text:0000000000011458                 mov     rdi, r12        ; ptr
.text:000000000001145B                 call    _free
.text:0000000000011460                 mov     rdi, r13        ; ptr
.text:0000000000011463                 call    isl_union_flow_free_0
.text:0000000000011468                 mov     rax, [rsp+158h+var_118]
.text:000000000001146D                 mov     r8d, [rax]
.text:0000000000011470                 test    r8d, r8d
.text:0000000000011473                 jnz     def_1083F       ; jumptable 000000000001083F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000011479                 mov     [rsp+158h+var_130], 0
.text:0000000000011482                 jmp     loc_1097C
.text:0000000000011487 ; ---------------------------------------------------------------------------
.text:0000000000011487
.text:0000000000011487 loc_11487:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000011487                                         ; DATA XREF: .rodata:jpt_11146↓o
.text:0000000000011487                 mov     rdx, [r13+28h]  ; jumptable 0000000000011146 case 1
.text:000000000001148B                 cmp     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000011490                 mov     rax, [r13+0]
.text:0000000000011494                 jz      loc_1198E
.text:000000000001149A
.text:000000000001149A loc_1149A:                              ; CODE XREF: parse_expression+11DE↓j
.text:000000000001149A                 lea     rcx, [rdx+1]
.text:000000000001149E                 mov     [r13+28h], rcx
.text:00000000000114A2                 mov     ecx, dword ptr [rsp+158h+var_B0]
.text:00000000000114A9                 mov     [rax+rdx*4], ecx
.text:00000000000114AC                 jmp     loc_11420
.text:00000000000114B1 ; ---------------------------------------------------------------------------
.text:00000000000114B1
.text:00000000000114B1 loc_114B1:                              ; CODE XREF: parse_expression+966↑j
.text:00000000000114B1                                         ; DATA XREF: .rodata:jpt_11146↓o
.text:00000000000114B1                 movzx   edx, byte ptr [rsp+158h+var_B0] ; jumptable 0000000000011146 case 0
.text:00000000000114B9                 mov     esi, 1
.text:00000000000114BE                 mov     rax, rdx
.text:00000000000114C1                 and     edx, 3Fh
.text:00000000000114C4                 shr     rax, 3
.text:00000000000114C8                 mov     ecx, edx
.text:00000000000114CA                 and     eax, 18h
.text:00000000000114CD                 shl     rsi, cl
.text:00000000000114D0                 or      [r12+rax], rsi
.text:00000000000114D4                 jmp     loc_11420
.text:00000000000114D9 ; ---------------------------------------------------------------------------
.text:00000000000114D9
.text:00000000000114D9 loc_114D9:                              ; CODE XREF: parse_expression+966↑j
.text:00000000000114D9                                         ; DATA XREF: .rodata:jpt_11146↓o
.text:00000000000114D9                 sub     rsp, 8          ; jumptable 0000000000011146 case 4
.text:00000000000114DD                 mov     rdi, [r14+78h]
.text:00000000000114E1                 lea     rdx, [r13+18h]
.text:00000000000114E5                 push    [rsp+160h+var_138]
.text:00000000000114E9                 mov     r9, [rsp+168h+var_B0]
.text:00000000000114F1                 lea     rcx, [r13+48h]
.text:00000000000114F5                 mov     r8, [rsp+168h+var_100]
.text:00000000000114FA                 mov     rsi, r12
.text:00000000000114FD                 call    build_charclass_isra_29
.text:0000000000011502                 mov     rdx, [rsp+168h+var_118]
.text:0000000000011507                 test    eax, eax
.text:0000000000011509                 mov     [rdx], eax
.text:000000000001150B                 pop     r9
.text:000000000001150D                 pop     r10
.text:000000000001150F                 jz      loc_11420
.text:0000000000011515                 jmp     loc_11458
.text:000000000001151A ; ---------------------------------------------------------------------------
.text:000000000001151A
.text:000000000001151A loc_1151A:                              ; CODE XREF: parse_expression+870↑j
.text:000000000001151A                 or      byte ptr [r13+20h], 1
.text:000000000001151F                 test    [rsp+158h+var_138], 100h
.text:0000000000011528                 jz      short loc_11532
.text:000000000001152A                 or      qword ptr [r12], 400h
.text:0000000000011532
.text:0000000000011532 loc_11532:                              ; CODE XREF: parse_expression+D48↑j
.text:0000000000011532                 add     [r14+48h], rbx
.text:0000000000011536                 mov     r11, [rsp+158h+var_140]
.text:000000000001153B                 mov     rsi, r14
.text:000000000001153E                 mov     rdx, [rsp+158h+var_138]
.text:0000000000011543                 mov     rdi, r11
.text:0000000000011546                 call    peek_token_bracket
.text:000000000001154B                 mov     ebx, eax
.text:000000000001154D                 movzx   eax, byte ptr [r11+8]
.text:0000000000011552                 cmp     al, 2
.text:0000000000011554                 jz      loc_117E9
.text:000000000001155A                 mov     [rsp+158h+var_101], 1
.text:000000000001155F                 jmp     loc_11056
.text:0000000000011564 ; ---------------------------------------------------------------------------
.text:0000000000011564
.text:0000000000011564 loc_11564:                              ; CODE XREF: parse_expression+878↑j
.text:0000000000011564                 mov     rax, [rsp+158h+var_140]
.text:0000000000011569                 mov     byte ptr [rax+8], 1
.text:000000000001156D                 jmp     loc_1105E
.text:0000000000011572 ; ---------------------------------------------------------------------------
.text:0000000000011572
.text:0000000000011572 loc_11572:                              ; CODE XREF: parse_expression+75D↑j
.text:0000000000011572                 mov     dword ptr [r15], 6
.text:0000000000011579                 mov     r8, r15
.text:000000000001157C                 xor     ecx, ecx
.text:000000000001157E                 xor     edx, edx
.text:0000000000011580                 mov     rsi, r12
.text:0000000000011583                 mov     rdi, rbx
.text:0000000000011586                 call    create_token_tree_isra_16
.text:000000000001158B                 mov     dword ptr [r15], 9
.text:0000000000011592                 mov     rbp, rax
.text:0000000000011595                 jmp     loc_10F66
.text:000000000001159A ; ---------------------------------------------------------------------------
.text:000000000001159A
.text:000000000001159A loc_1159A:                              ; CODE XREF: parse_expression+74C↑j
.text:000000000001159A                 mov     r8, [rsp+158h+var_140]
.text:000000000001159F                 xor     ecx, ecx
.text:00000000000115A1                 xor     edx, edx
.text:00000000000115A3                 mov     rsi, r12
.text:00000000000115A6                 mov     rdi, rbx
.text:00000000000115A9                 call    create_token_tree_isra_16
.text:00000000000115AE                 test    rax, rax
.text:00000000000115B1                 mov     [rsp+158h+var_130], rax
.text:00000000000115B6                 jnz     loc_10FC3
.text:00000000000115BC                 jmp     loc_11348
.text:00000000000115C1 ; ---------------------------------------------------------------------------
.text:00000000000115C1
.text:00000000000115C1 loc_115C1:                              ; CODE XREF: parse_expression+946↑j
.text:00000000000115C1                                         ; parse_expression+C47↑j ...
.text:00000000000115C1                 mov     rax, [rsp+158h+var_118]
.text:00000000000115C6                 mov     dword ptr [rax], 7
.text:00000000000115CC                 jmp     loc_11458
.text:00000000000115D1 ; ---------------------------------------------------------------------------
.text:00000000000115D1
.text:00000000000115D1 loc_115D1:                              ; CODE XREF: parse_expression+AE7↑j
.text:00000000000115D1                                         ; parse_expression+AF1↑j ...
.text:00000000000115D1                 mov     [rsp+158h+var_130], r15
.text:00000000000115D6                 jmp     loc_1097C
.text:00000000000115DB ; ---------------------------------------------------------------------------
.text:00000000000115DB
.text:00000000000115DB loc_115DB:                              ; CODE XREF: parse_expression+916↑j
.text:00000000000115DB                                         ; parse_expression+E6E↓j
.text:00000000000115DB                 mov     rdx, [rsp+158h+var_118]
.text:00000000000115E0                 mov     [rdx], eax
.text:00000000000115E2                 jmp     loc_11458
.text:00000000000115E7 ; ---------------------------------------------------------------------------
.text:00000000000115E7
.text:00000000000115E7 loc_115E7:                              ; CODE XREF: parse_expression+94F↑j
.text:00000000000115E7                 movsxd  rax, ebx
.text:00000000000115EA                 mov     r11, [rsp+158h+var_138]
.text:00000000000115EF                 add     [r14+48h], rax
.text:00000000000115F3                 mov     r10, [rsp+158h+var_F8]
.text:00000000000115F8                 mov     rdx, r11
.text:00000000000115FB                 mov     rdi, r10
.text:00000000000115FE                 call    peek_token_bracket
.text:0000000000011603                 movzx   edx, [rsp+158h+var_90]
.text:000000000001160B                 cmp     dl, 2
.text:000000000001160E                 jz      short loc_115C1
.text:0000000000011610                 cmp     dl, 15h
.text:0000000000011613                 jz      loc_11827
.text:0000000000011619                 mov     rdx, [rsp+158h+var_F0]
.text:000000000001161E                 lea     rdi, [rsp+158h+var_A8]
.text:0000000000011626                 mov     r9d, 1
.text:000000000001162C                 mov     r8, r11
.text:000000000001162F                 mov     ecx, eax
.text:0000000000011631                 mov     dword ptr [rsp+158h+var_A8], 3
.text:000000000001163C                 mov     [rsp+158h+var_A0], rdx
.text:0000000000011644                 mov     rdx, r10
.text:0000000000011647                 call    parse_bracket_element_constprop_37
.text:000000000001164C                 test    eax, eax
.text:000000000001164E                 jnz     short loc_115DB
.text:0000000000011650                 mov     rdx, [rsp+158h+var_138]
.text:0000000000011655                 mov     rsi, r14
.text:0000000000011658                 mov     rdi, r15
.text:000000000001165B                 call    peek_token_bracket
.text:0000000000011660                 movsxd  rbx, eax
.text:0000000000011663                 mov     rax, [rsp+158h+var_148]
.text:0000000000011668                 mov     esi, [rsp+158h+var_B8]
.text:000000000001166F                 mov     r9d, 0
.text:0000000000011675                 cmp     dword ptr [rax+0B4h], 1
.text:000000000001167C                 lea     eax, [rsi-2]
.text:000000000001167F                 cmovg   r9, r13
.text:0000000000011683                 and     eax, 0FFFFFFFDh
.text:0000000000011686                 jz      loc_11AF9
.text:000000000001168C                 mov     r10d, dword ptr [rsp+158h+var_A8]
.text:0000000000011694                 lea     eax, [r10-2]
.text:0000000000011698                 and     eax, 0FFFFFFFDh
.text:000000000001169B                 jz      loc_11AF9
.text:00000000000116A1                 cmp     esi, 3
.text:00000000000116A4                 setz    r11b
.text:00000000000116A8                 jz      loc_11B3D
.text:00000000000116AE
.text:00000000000116AE loc_116AE:                              ; CODE XREF: parse_expression+137B↓j
.text:00000000000116AE                 cmp     r10d, 3
.text:00000000000116B2                 jz      loc_11B09
.text:00000000000116B8
.text:00000000000116B8 loc_116B8:                              ; CODE XREF: parse_expression+1347↓j
.text:00000000000116B8                 test    esi, esi
.text:00000000000116BA                 jnz     loc_11A29
.text:00000000000116C0                 movzx   edx, byte ptr [rsp+158h+var_B0]
.text:00000000000116C8
.text:00000000000116C8 loc_116C8:                              ; CODE XREF: parse_expression+124E↓j
.text:00000000000116C8                                         ; parse_expression+125F↓j
.text:00000000000116C8                 test    r10d, r10d
.text:00000000000116CB                 jnz     loc_11A0D
.text:00000000000116D1                 movzx   r8d, byte ptr [rsp+158h+var_A0]
.text:00000000000116DA
.text:00000000000116DA loc_116DA:                              ; CODE XREF: parse_expression+14CE↓j
.text:00000000000116DA                 test    esi, esi
.text:00000000000116DC                 jz      loc_119C6
.text:00000000000116E2                 test    r11b, r11b
.text:00000000000116E5                 jnz     loc_119C6
.text:00000000000116EB                 test    r9, r9
.text:00000000000116EE                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:00000000000116F5                 jz      short loc_11714
.text:00000000000116F7
.text:00000000000116F7 loc_116F7:                              ; CODE XREF: parse_expression+1212↓j
.text:00000000000116F7                                         ; parse_expression+121A↓j
.text:00000000000116F7                 mov     edi, r8d        ; c
.text:00000000000116FA                 mov     dword ptr [rsp+158h+ptr], edx
.text:00000000000116FE                 mov     [rsp+158h+var_E8], r9
.text:0000000000011703                 call    _btowc
.text:0000000000011708                 mov     r9, [rsp+158h+var_E8]
.text:000000000001170D                 mov     edx, dword ptr [rsp+158h+ptr]
.text:0000000000011711                 mov     r8d, eax
.text:0000000000011714
.text:0000000000011714 loc_11714:                              ; CODE XREF: parse_expression+F15↑j
.text:0000000000011714                                         ; parse_expression+1228↓j
.text:0000000000011714                 cmp     edx, 0FFFFFFFFh
.text:0000000000011717                 jz      loc_11B2D
.text:000000000001171D                 cmp     r8d, 0FFFFFFFFh
.text:0000000000011721                 jz      loc_11B2D
.text:0000000000011727
.text:0000000000011727 loc_11727:                              ; CODE XREF: parse_expression+1267↓j
.text:0000000000011727                                         ; parse_expression+1273↓j
.text:0000000000011727                 test    [rsp+158h+var_138], 10000h
.text:0000000000011730                 jz      short loc_1173B
.text:0000000000011732                 cmp     r8d, edx
.text:0000000000011735                 jb      loc_11AF9
.text:000000000001173B
.text:000000000001173B loc_1173B:                              ; CODE XREF: parse_expression+F50↑j
.text:000000000001173B                 test    r9, r9
.text:000000000001173E                 jz      short loc_11766
.text:0000000000011740                 mov     rax, [r9+40h]
.text:0000000000011744                 cmp     rax, [rsp+158h+var_110]
.text:0000000000011749                 mov     rcx, [r9+8]
.text:000000000001174D                 jz      loc_11B63
.text:0000000000011753
.text:0000000000011753 loc_11753:                              ; CODE XREF: parse_expression+1410↓j
.text:0000000000011753                 mov     [rcx+rax*4], edx
.text:0000000000011756                 mov     rcx, [r9+10h]
.text:000000000001175A                 lea     rsi, [rax+1]
.text:000000000001175E                 mov     [r9+40h], rsi
.text:0000000000011762                 mov     [rcx+rax*4], r8d
.text:0000000000011766
.text:0000000000011766 loc_11766:                              ; CODE XREF: parse_expression+F5E↑j
.text:0000000000011766                 xor     eax, eax
.text:0000000000011768                 mov     edi, 1
.text:000000000001176D
.text:000000000001176D loc_1176D:                              ; CODE XREF: parse_expression+FB3↓j
.text:000000000001176D                 cmp     edx, eax
.text:000000000001176F                 mov     ecx, eax
.text:0000000000011771                 ja      short loc_11789
.text:0000000000011773                 cmp     r8d, eax
.text:0000000000011776                 jb      short loc_11789
.text:0000000000011778                 mov     rsi, rax
.text:000000000001177B                 mov     r11, rdi
.text:000000000001177E                 sar     rsi, 6
.text:0000000000011782                 shl     r11, cl
.text:0000000000011785                 or      [r12+rsi*8], r11
.text:0000000000011789
.text:0000000000011789 loc_11789:                              ; CODE XREF: parse_expression+F91↑j
.text:0000000000011789                                         ; parse_expression+F96↑j
.text:0000000000011789                 add     rax, 1
.text:000000000001178D                 cmp     rax, 100h
.text:0000000000011793                 jnz     short loc_1176D
.text:0000000000011795                 mov     rax, [rsp+158h+var_118]
.text:000000000001179A                 mov     dword ptr [rax], 0
.text:00000000000117A0                 jmp     loc_11420
.text:00000000000117A5 ; ---------------------------------------------------------------------------
.text:00000000000117A5
.text:00000000000117A5 loc_117A5:                              ; CODE XREF: parse_expression+15C↑j
.text:00000000000117A5                 mov     rbx, [rsp+158h+var_140]
.text:00000000000117AA                 mov     rdx, rax
.text:00000000000117AD                 mov     rsi, r14
.text:00000000000117B0                 mov     [rsp+158h+var_158], r8
.text:00000000000117B4                 mov     r15, rax
.text:00000000000117B7                 mov     rdi, rbx
.text:00000000000117BA                 call    peek_token
.text:00000000000117BF                 cdqe
.text:00000000000117C1                 add     [r14+48h], rax
.text:00000000000117C5                 mov     r9, [rsp+158h+var_118]
.text:00000000000117CA                 mov     r8, [rsp+158h+var_158]
.text:00000000000117CE                 mov     rcx, r15
.text:00000000000117D1                 mov     rdx, rbx
.text:00000000000117D4                 mov     rsi, rbp
.text:00000000000117D7                 mov     rdi, r14
.text:00000000000117DA                 call    parse_expression
.text:00000000000117DF                 mov     [rsp+158h+var_130], rax
.text:00000000000117E4                 jmp     loc_108F0
.text:00000000000117E9 ; ---------------------------------------------------------------------------
.text:00000000000117E9
.text:00000000000117E9 loc_117E9:                              ; CODE XREF: parse_expression+863↑j
.text:00000000000117E9                                         ; parse_expression+D74↑j
.text:00000000000117E9                 mov     rax, [rsp+158h+var_118]
.text:00000000000117EE                 mov     dword ptr [rax], 2
.text:00000000000117F4                 jmp     loc_11458
.text:00000000000117F9 ; ---------------------------------------------------------------------------
.text:00000000000117F9
.text:00000000000117F9 loc_117F9:                              ; CODE XREF: parse_expression+83E↑j
.text:00000000000117F9                 mov     rdi, r12        ; ptr
.text:00000000000117FC                 call    _free
.text:0000000000011801                 mov     rdi, r13        ; ptr
.text:0000000000011804                 call    _free
.text:0000000000011809                 jmp     loc_11348
.text:000000000001180E ; ---------------------------------------------------------------------------
.text:000000000001180E
.text:000000000001180E loc_1180E:                              ; CODE XREF: parse_expression+9FC↑j
.text:000000000001180E                 mov     rax, [rsp+158h+var_118]
.text:0000000000011813                 mov     [rsp+158h+var_130], 0
.text:000000000001181C                 mov     dword ptr [rax], 6
.text:0000000000011822                 jmp     loc_108F0
.text:0000000000011827 ; ---------------------------------------------------------------------------
.text:0000000000011827
.text:0000000000011827 loc_11827:                              ; CODE XREF: parse_expression+E33↑j
.text:0000000000011827                 mov     eax, ebx
.text:0000000000011829                 neg     eax
.text:000000000001182B                 cdqe
.text:000000000001182D                 add     [r14+48h], rax
.text:0000000000011831                 mov     byte ptr [r15+8], 1
.text:0000000000011836                 mov     eax, [rsp+158h+var_B8]
.text:000000000001183D                 jmp     loc_11135
.text:0000000000011842 ; ---------------------------------------------------------------------------
.text:0000000000011842
.text:0000000000011842 loc_11842:                              ; CODE XREF: parse_expression+C4F↑j
.text:0000000000011842                 add     [r14+48h], rbx
.text:0000000000011846                 cmp     [rsp+158h+var_101], 0
.text:000000000001184B                 jz      short loc_11861
.text:000000000001184D                 lea     rdx, [r12+20h]
.text:0000000000011852                 mov     rax, r12
.text:0000000000011855
.text:0000000000011855 loc_11855:                              ; CODE XREF: parse_expression+107F↓j
.text:0000000000011855                 not     qword ptr [rax]
.text:0000000000011858                 add     rax, 8
.text:000000000001185C                 cmp     rdx, rax
.text:000000000001185F                 jnz     short loc_11855
.text:0000000000011861
.text:0000000000011861 loc_11861:                              ; CODE XREF: parse_expression+106B↑j
.text:0000000000011861                 mov     rax, [rsp+158h+var_148]
.text:0000000000011866                 mov     edx, [rax+0B4h]
.text:000000000001186C                 cmp     edx, 1
.text:000000000001186F                 jle     short loc_11889
.text:0000000000011871                 mov     rcx, [rax+78h]
.text:0000000000011875                 xor     eax, eax
.text:0000000000011877
.text:0000000000011877 loc_11877:                              ; CODE XREF: parse_expression+10A7↓j
.text:0000000000011877                 mov     rsi, [rcx+rax]
.text:000000000001187B                 and     [r12+rax], rsi
.text:000000000001187F                 add     rax, 8
.text:0000000000011883                 cmp     rax, 20h ; ' '
.text:0000000000011887                 jnz     short loc_11877
.text:0000000000011889
.text:0000000000011889 loc_11889:                              ; CODE XREF: parse_expression+108F↑j
.text:0000000000011889                 cmp     qword ptr [r13+28h], 0
.text:000000000001188E                 jnz     loc_11918
.text:0000000000011894                 cmp     qword ptr [r13+30h], 0
.text:0000000000011899                 jnz     short loc_11918
.text:000000000001189B                 cmp     qword ptr [r13+38h], 0
.text:00000000000118A0                 jnz     short loc_11918
.text:00000000000118A2                 cmp     qword ptr [r13+40h], 0
.text:00000000000118A7                 jnz     short loc_11918
.text:00000000000118A9                 sub     edx, 1
.text:00000000000118AC                 jle     short loc_118BC
.text:00000000000118AE                 cmp     qword ptr [r13+48h], 0
.text:00000000000118B3                 jnz     short loc_11918
.text:00000000000118B5                 test    byte ptr [r13+20h], 1
.text:00000000000118BA                 jnz     short loc_11918
.text:00000000000118BC
.text:00000000000118BC loc_118BC:                              ; CODE XREF: parse_expression+10CC↑j
.text:00000000000118BC                 mov     rdi, r13        ; ptr
.text:00000000000118BF                 call    isl_union_flow_free_0
.text:00000000000118C4                 mov     rax, [rsp+158h+var_148]
.text:00000000000118C9                 lea     r8, [rsp+158h+var_A8]
.text:00000000000118D1                 xor     ecx, ecx
.text:00000000000118D3                 xor     edx, edx
.text:00000000000118D5                 mov     byte ptr [rsp+158h+var_A0], 3
.text:00000000000118DD                 mov     [rsp+158h+var_A8], r12
.text:00000000000118E5                 lea     rsi, [rax+80h]
.text:00000000000118EC                 lea     rdi, [rax+70h]
.text:00000000000118F0                 call    create_token_tree_isra_16
.text:00000000000118F5                 test    rax, rax
.text:00000000000118F8                 mov     [rsp+158h+var_130], rax
.text:00000000000118FD                 jnz     loc_1097C
.text:0000000000011903
.text:0000000000011903 loc_11903:                              ; CODE XREF: parse_expression+118C↓j
.text:0000000000011903                                         ; parse_expression+11D0↓j ...
.text:0000000000011903                 mov     rax, [rsp+158h+var_118]
.text:0000000000011908                 mov     dword ptr [rax], 0Ch
.text:000000000001190E                 jmp     loc_11458
.text:000000000001190E ; ---------------------------------------------------------------------------
.text:0000000000011913                 align 8
.text:0000000000011918
.text:0000000000011918 loc_11918:                              ; CODE XREF: parse_expression+10AE↑j
.text:0000000000011918                                         ; parse_expression+10B9↑j ...
.text:0000000000011918                 mov     rax, [rsp+158h+var_148]
.text:000000000001191D                 lea     r15, [rsp+158h+var_A8]
.text:0000000000011925                 xor     edx, edx
.text:0000000000011927                 xor     ecx, ecx
.text:0000000000011929                 mov     r8, r15
.text:000000000001192C                 or      byte ptr [rax+0B0h], 2
.text:0000000000011933                 lea     rbx, [rax+70h]
.text:0000000000011937                 lea     rbp, [rax+80h]
.text:000000000001193E                 mov     byte ptr [rsp+158h+var_A0], 6
.text:0000000000011946                 mov     [rsp+158h+var_A8], r13
.text:000000000001194E                 mov     rdi, rbx
.text:0000000000011951                 mov     rsi, rbp
.text:0000000000011954                 call    create_token_tree_isra_16
.text:0000000000011959                 mov     rdi, rax
.text:000000000001195C                 mov     [rsp+158h+var_130], rax
.text:0000000000011961                 lea     rdx, [r12+20h]
.text:0000000000011966                 test    rdi, rdi
.text:0000000000011969                 mov     rax, r12
.text:000000000001196C                 jz      short loc_11903
.text:000000000001196E
.text:000000000001196E loc_1196E:                              ; CODE XREF: parse_expression+119F↓j
.text:000000000001196E                 cmp     qword ptr [rax], 0
.text:0000000000011972                 jnz     loc_11C1D
.text:0000000000011978                 add     rax, 8
.text:000000000001197C                 cmp     rdx, rax
.text:000000000001197F                 jnz     short loc_1196E
.text:0000000000011981                 mov     rdi, r12        ; ptr
.text:0000000000011984                 call    _free
.text:0000000000011989                 jmp     loc_1097C
.text:000000000001198E ; ---------------------------------------------------------------------------
.text:000000000001198E
.text:000000000001198E loc_1198E:                              ; CODE XREF: parse_expression+CB4↑j
.text:000000000001198E                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000011993                 lea     rdi, [rdx+rdx+1]
.text:0000000000011998                 lea     rsi, ds:0[rdi*4] ; size
.text:00000000000119A0                 mov     qword ptr [rsp+158h+var_128], rdi
.text:00000000000119A5                 mov     rdi, rax        ; ptr
.text:00000000000119A8                 call    _realloc
.text:00000000000119AD                 test    rax, rax
.text:00000000000119B0                 jz      loc_11903
.text:00000000000119B6                 mov     [r13+0], rax
.text:00000000000119BA                 mov     rdx, [r13+28h]
.text:00000000000119BE                 jmp     loc_1149A
.text:00000000000119C3 ; ---------------------------------------------------------------------------
.text:00000000000119C3
.text:00000000000119C3 loc_119C3:                              ; CODE XREF: parse_expression+1239↓j
.text:00000000000119C3                                         ; parse_expression+123E↓j
.text:00000000000119C3                 xor     r8d, r8d
.text:00000000000119C6
.text:00000000000119C6 loc_119C6:                              ; CODE XREF: parse_expression+EFC↑j
.text:00000000000119C6                                         ; parse_expression+F05↑j
.text:00000000000119C6                 test    r9, r9
.text:00000000000119C9                 jz      short loc_11A44
.text:00000000000119CB                 mov     edi, edx        ; c
.text:00000000000119CD                 mov     dword ptr [rsp+158h+ptr], r8d
.text:00000000000119D2                 mov     [rsp+158h+var_E8], r9
.text:00000000000119D7                 call    _btowc
.text:00000000000119DC                 mov     edx, eax
.text:00000000000119DE                 mov     eax, dword ptr [rsp+158h+var_A8]
.text:00000000000119E5                 mov     r9, [rsp+158h+var_E8]
.text:00000000000119EA                 mov     r8d, dword ptr [rsp+158h+ptr]
.text:00000000000119EF                 cmp     eax, 3
.text:00000000000119F2                 jz      loc_116F7
.text:00000000000119F8                 test    eax, eax
.text:00000000000119FA                 jz      loc_116F7
.text:0000000000011A00
.text:0000000000011A00 loc_11A00:                              ; CODE XREF: parse_expression+1247↓j
.text:0000000000011A00                                         ; parse_expression+1271↓j
.text:0000000000011A00                 mov     r8d, dword ptr [rsp+158h+var_A0]
.text:0000000000011A08                 jmp     loc_11714
.text:0000000000011A0D ; ---------------------------------------------------------------------------
.text:0000000000011A0D
.text:0000000000011A0D loc_11A0D:                              ; CODE XREF: parse_expression+EEB↑j
.text:0000000000011A0D                 cmp     r10d, 3
.text:0000000000011A11                 jz      loc_11CA2
.text:0000000000011A17                 test    esi, esi
.text:0000000000011A19                 jz      short loc_119C3
.text:0000000000011A1B                 test    r11b, r11b
.text:0000000000011A1E                 jnz     short loc_119C3
.text:0000000000011A20                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:0000000000011A27                 jmp     short loc_11A00
.text:0000000000011A29 ; ---------------------------------------------------------------------------
.text:0000000000011A29
.text:0000000000011A29 loc_11A29:                              ; CODE XREF: parse_expression+EDA↑j
.text:0000000000011A29                 xor     edx, edx
.text:0000000000011A2B                 cmp     esi, 3
.text:0000000000011A2E                 jnz     loc_116C8
.text:0000000000011A34                 mov     rax, [rsp+158h+var_B0]
.text:0000000000011A3C                 movzx   edx, byte ptr [rax]
.text:0000000000011A3F                 jmp     loc_116C8
.text:0000000000011A44 ; ---------------------------------------------------------------------------
.text:0000000000011A44
.text:0000000000011A44 loc_11A44:                              ; CODE XREF: parse_expression+11E9↑j
.text:0000000000011A44                 test    r10d, r10d
.text:0000000000011A47                 jz      loc_11727
.text:0000000000011A4D                 cmp     r10d, 3
.text:0000000000011A51                 jnz     short loc_11A00
.text:0000000000011A53                 jmp     loc_11727
.text:0000000000011A58 ; ---------------------------------------------------------------------------
.text:0000000000011A58
.text:0000000000011A58 loc_11A58:                              ; CODE XREF: parse_expression+719↑j
.text:0000000000011A58                 mov     ebx, 80h
.text:0000000000011A5D                 mov     r12d, 2
.text:0000000000011A63
.text:0000000000011A63 loc_11A63:                              ; CODE XREF: parse_expression+12F8↓j
.text:0000000000011A63                 call    ___ctype_b_loc
.text:0000000000011A68                 movsxd  rdx, ebx
.text:0000000000011A6B                 movsxd  r9, r12d
.text:0000000000011A6E                 mov     r8d, 1
.text:0000000000011A74                 add     rdx, rdx
.text:0000000000011A77                 add     rdx, [rax]
.text:0000000000011A7A                 mov     rax, [rsp+158h+var_148]
.text:0000000000011A7F                 lea     rdi, [rax+r9*8]
.text:0000000000011A83
.text:0000000000011A83 loc_11A83:                              ; CODE XREF: parse_expression+12EC↓j
.text:0000000000011A83                 xor     eax, eax
.text:0000000000011A85                 jmp     short loc_11AA2
.text:0000000000011A85 ; ---------------------------------------------------------------------------
.text:0000000000011A87                 align 10h
.text:0000000000011A90
.text:0000000000011A90 loc_11A90:                              ; CODE XREF: parse_expression+12C8↓j
.text:0000000000011A90                 lea     esi, [rbx+rax]
.text:0000000000011A93                 cmp     esi, 5Fh ; '_'
.text:0000000000011A96                 jz      short loc_11AAA
.text:0000000000011A98
.text:0000000000011A98 loc_11A98:                              ; CODE XREF: parse_expression+12D7↓j
.text:0000000000011A98                 add     rax, 1
.text:0000000000011A9C                 cmp     rax, 40h ; '@'
.text:0000000000011AA0                 jz      short loc_11AB9
.text:0000000000011AA2
.text:0000000000011AA2 loc_11AA2:                              ; CODE XREF: parse_expression+12A5↑j
.text:0000000000011AA2                 test    byte ptr [rdx+rax*2], 8
.text:0000000000011AA6                 mov     ecx, eax
.text:0000000000011AA8                 jz      short loc_11A90
.text:0000000000011AAA
.text:0000000000011AAA loc_11AAA:                              ; CODE XREF: parse_expression+12B6↑j
.text:0000000000011AAA                 mov     rsi, r8
.text:0000000000011AAD                 shl     rsi, cl
.text:0000000000011AB0                 or      [rdi+0B8h], rsi
.text:0000000000011AB7                 jmp     short loc_11A98
.text:0000000000011AB9 ; ---------------------------------------------------------------------------
.text:0000000000011AB9
.text:0000000000011AB9 loc_11AB9:                              ; CODE XREF: parse_expression+12C0↑j
.text:0000000000011AB9                 add     r9, 1
.text:0000000000011ABD                 add     ebx, 40h ; '@'
.text:0000000000011AC0                 sub     rdx, 0FFFFFFFFFFFFFF80h
.text:0000000000011AC4                 add     rdi, 8
.text:0000000000011AC8                 cmp     r9d, 3
.text:0000000000011ACC                 jle     short loc_11A83
.text:0000000000011ACE                 jmp     loc_10F11
.text:0000000000011AD3 ; ---------------------------------------------------------------------------
.text:0000000000011AD3
.text:0000000000011AD3 loc_11AD3:                              ; CODE XREF: parse_expression+6EF↑j
.text:0000000000011AD3                 xor     ebx, ebx
.text:0000000000011AD5                 xor     r12d, r12d
.text:0000000000011AD8                 jmp     short loc_11A63
.text:0000000000011ADA ; ---------------------------------------------------------------------------
.text:0000000000011ADA
.text:0000000000011ADA def_11146:                              ; CODE XREF: parse_expression+958↑j
.text:0000000000011ADA                 lea     rcx, __PRETTY_FUNCTION___7327 ; jumptable 0000000000011146 default case
.text:0000000000011AE1                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000011AE8                 lea     rdi, assertion+7 ; assertion
.text:0000000000011AEF                 mov     edx, 0CEDh      ; line
.text:0000000000011AF4                 call    ___assert_fail
.text:0000000000011AF9 ; ---------------------------------------------------------------------------
.text:0000000000011AF9
.text:0000000000011AF9 loc_11AF9:                              ; CODE XREF: parse_expression+EA6↑j
.text:0000000000011AF9                                         ; parse_expression+EBB↑j ...
.text:0000000000011AF9                 mov     rax, [rsp+158h+var_118]
.text:0000000000011AFE                 mov     dword ptr [rax], 0Bh
.text:0000000000011B04                 jmp     loc_11458
.text:0000000000011B09 ; ---------------------------------------------------------------------------
.text:0000000000011B09
.text:0000000000011B09 loc_11B09:                              ; CODE XREF: parse_expression+ED2↑j
.text:0000000000011B09                 mov     rdi, [rsp+158h+var_A0]
.text:0000000000011B11                 xor     eax, eax
.text:0000000000011B13                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000011B17                 repne scasb
.text:0000000000011B19                 mov     rax, rcx
.text:0000000000011B1C                 not     rax
.text:0000000000011B1F                 sub     rax, 1
.text:0000000000011B23                 cmp     rax, 1
.text:0000000000011B27                 jbe     loc_116B8
.text:0000000000011B2D
.text:0000000000011B2D loc_11B2D:                              ; CODE XREF: parse_expression+F37↑j
.text:0000000000011B2D                                         ; parse_expression+F41↑j ...
.text:0000000000011B2D                 mov     rax, [rsp+158h+var_118]
.text:0000000000011B32                 mov     dword ptr [rax], 3
.text:0000000000011B38                 jmp     loc_11458
.text:0000000000011B3D ; ---------------------------------------------------------------------------
.text:0000000000011B3D
.text:0000000000011B3D loc_11B3D:                              ; CODE XREF: parse_expression+EC8↑j
.text:0000000000011B3D                 mov     rdi, [rsp+158h+var_B0]
.text:0000000000011B45                 xor     eax, eax
.text:0000000000011B47                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000011B4B                 repne scasb
.text:0000000000011B4D                 mov     rax, rcx
.text:0000000000011B50                 not     rax
.text:0000000000011B53                 sub     rax, 1
.text:0000000000011B57                 cmp     rax, 1
.text:0000000000011B5B                 jbe     loc_116AE
.text:0000000000011B61                 jmp     short loc_11B2D
.text:0000000000011B63 ; ---------------------------------------------------------------------------
.text:0000000000011B63
.text:0000000000011B63 loc_11B63:                              ; CODE XREF: parse_expression+F6D↑j
.text:0000000000011B63                 mov     rax, [rsp+158h+var_110]
.text:0000000000011B68                 mov     rdi, rcx        ; ptr
.text:0000000000011B6B                 mov     [rsp+158h+var_CC], r8d
.text:0000000000011B73                 mov     [rsp+158h+var_D0], edx
.text:0000000000011B7A                 mov     [rsp+158h+var_E8], r9
.text:0000000000011B7F                 add     rax, rax
.text:0000000000011B82                 add     rax, 1
.text:0000000000011B86                 lea     r10, ds:0[rax*4]
.text:0000000000011B8E                 mov     [rsp+158h+var_110], rax
.text:0000000000011B93                 mov     rsi, r10        ; size
.text:0000000000011B96                 mov     [rsp+158h+size], r10
.text:0000000000011B9E                 call    _realloc
.text:0000000000011BA3                 mov     r9, [rsp+158h+var_E8]
.text:0000000000011BA8                 mov     r10, [rsp+158h+size]
.text:0000000000011BB0                 mov     [rsp+158h+ptr], rax
.text:0000000000011BB5                 mov     rdi, [r9+10h]   ; ptr
.text:0000000000011BB9                 mov     rsi, r10        ; size
.text:0000000000011BBC                 call    _realloc
.text:0000000000011BC1                 mov     rcx, [rsp+158h+ptr]
.text:0000000000011BC6                 test    rcx, rcx
.text:0000000000011BC9                 jz      short loc_11BF5
.text:0000000000011BCB                 test    rax, rax
.text:0000000000011BCE                 mov     r9, [rsp+158h+var_E8]
.text:0000000000011BD3                 mov     edx, [rsp+158h+var_D0]
.text:0000000000011BDA                 mov     r8d, [rsp+158h+var_CC]
.text:0000000000011BE2                 jz      short loc_11BF5
.text:0000000000011BE4                 mov     [r9+10h], rax
.text:0000000000011BE8                 mov     [r9+8], rcx
.text:0000000000011BEC                 mov     rax, [r9+40h]
.text:0000000000011BF0                 jmp     loc_11753
.text:0000000000011BF5 ; ---------------------------------------------------------------------------
.text:0000000000011BF5
.text:0000000000011BF5 loc_11BF5:                              ; CODE XREF: parse_expression+13E9↑j
.text:0000000000011BF5                                         ; parse_expression+1402↑j
.text:0000000000011BF5                 mov     rdi, rcx        ; ptr
.text:0000000000011BF8                 mov     [rsp+158h+var_158], rax
.text:0000000000011BFC                 call    _free
.text:0000000000011C01                 mov     rax, [rsp+158h+var_158]
.text:0000000000011C05                 mov     rdi, rax        ; ptr
.text:0000000000011C08                 call    _free
.text:0000000000011C0D                 mov     rax, [rsp+158h+var_118]
.text:0000000000011C12                 mov     dword ptr [rax], 0Ch
.text:0000000000011C18                 jmp     loc_11458
.text:0000000000011C1D ; ---------------------------------------------------------------------------
.text:0000000000011C1D
.text:0000000000011C1D loc_11C1D:                              ; CODE XREF: parse_expression+1192↑j
.text:0000000000011C1D                 xor     ecx, ecx
.text:0000000000011C1F                 xor     edx, edx
.text:0000000000011C21                 mov     r8, r15
.text:0000000000011C24                 mov     rsi, rbp
.text:0000000000011C27                 mov     rdi, rbx
.text:0000000000011C2A                 mov     byte ptr [rsp+158h+var_A0], 3
.text:0000000000011C32                 mov     [rsp+158h+var_A8], r12
.text:0000000000011C3A                 call    create_token_tree_isra_16
.text:0000000000011C3F                 test    rax, rax
.text:0000000000011C42                 jz      loc_11903
.text:0000000000011C48                 mov     rcx, [rsp+158h+var_130]
.text:0000000000011C4D                 lea     r8, [rsp+158h+var_98]
.text:0000000000011C55                 mov     rdx, rax
.text:0000000000011C58                 mov     rsi, rbp
.text:0000000000011C5B                 mov     rdi, rbx
.text:0000000000011C5E                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000011C66                 call    create_token_tree_isra_16
.text:0000000000011C6B                 test    rax, rax
.text:0000000000011C6E                 mov     [rsp+158h+var_130], rax
.text:0000000000011C73                 jnz     loc_1097C
.text:0000000000011C79                 jmp     loc_11903
.text:0000000000011C7E ; ---------------------------------------------------------------------------
.text:0000000000011C7E
.text:0000000000011C7E loc_11C7E:                              ; CODE XREF: parse_expression+126↑j
.text:0000000000011C7E                 call    ___stack_chk_fail
.text:0000000000011C83 ; ---------------------------------------------------------------------------
.text:0000000000011C83
.text:0000000000011C83 loc_11C83:                              ; CODE XREF: parse_expression+566↑j
.text:0000000000011C83                 mov     rax, [rsp+158h+var_140]
.text:0000000000011C88                 cmp     byte ptr [rax+8], 2
.text:0000000000011C8C                 jnz     loc_10E80
.text:0000000000011C92                 mov     rax, [rsp+158h+var_118]
.text:0000000000011C97                 mov     dword ptr [rax], 9
.text:0000000000011C9D                 jmp     loc_10E8B
.text:0000000000011CA2 ; ---------------------------------------------------------------------------
.text:0000000000011CA2
.text:0000000000011CA2 loc_11CA2:                              ; CODE XREF: parse_expression+1231↑j
.text:0000000000011CA2                 mov     rax, [rsp+158h+var_A0]
.text:0000000000011CAA                 movzx   r8d, byte ptr [rax]
.text:0000000000011CAE                 jmp     loc_116DA
.text:0000000000011CAE ; } // starts at 107E0
.text:0000000000011CAE parse_expression endp
.text:0000000000011CAE
.text:0000000000011CAE ; ---------------------------------------------------------------------------
.text:0000000000011CB3                 align 20h
.text:0000000000011CC0
.text:0000000000011CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011CC0
.text:0000000000011CC0
.text:0000000000011CC0 parse_branch    proc near               ; CODE XREF: parse_reg_exp+43↓p
.text:0000000000011CC0                                         ; parse_reg_exp+AE↓p
.text:0000000000011CC0
.text:0000000000011CC0 var_78          = qword ptr -78h
.text:0000000000011CC0 var_70          = qword ptr -70h
.text:0000000000011CC0 var_68          = qword ptr -68h
.text:0000000000011CC0 var_60          = qword ptr -60h
.text:0000000000011CC0 var_58          = byte ptr -58h
.text:0000000000011CC0 var_50          = byte ptr -50h
.text:0000000000011CC0 var_40          = qword ptr -40h
.text:0000000000011CC0
.text:0000000000011CC0 ; __unwind {
.text:0000000000011CC0                 push    r15
.text:0000000000011CC2                 push    r14
.text:0000000000011CC4                 mov     r15, rcx
.text:0000000000011CC7                 push    r13
.text:0000000000011CC9                 push    r12
.text:0000000000011CCB                 mov     r13, rsi
.text:0000000000011CCE                 push    rbp
.text:0000000000011CCF                 push    rbx
.text:0000000000011CD0                 mov     rbx, r9
.text:0000000000011CD3                 mov     rbp, rdx
.text:0000000000011CD6                 mov     r12, r8
.text:0000000000011CD9                 sub     rsp, 48h
.text:0000000000011CDD                 mov     rax, fs:28h
.text:0000000000011CE6                 mov     [rsp+78h+var_40], rax
.text:0000000000011CEB                 xor     eax, eax
.text:0000000000011CED                 mov     rax, [rsi]
.text:0000000000011CF0                 mov     [rsp+78h+var_78], rdi
.text:0000000000011CF4                 mov     [rsp+78h+var_68], rax
.text:0000000000011CF9                 call    parse_expression
.text:0000000000011CFE                 mov     edx, [rbx]
.text:0000000000011D00                 mov     r14, rax
.text:0000000000011D03                 test    edx, edx
.text:0000000000011D05                 jz      short loc_11D10
.text:0000000000011D07                 test    rax, rax
.text:0000000000011D0A                 jz      loc_11E0A
.text:0000000000011D10
.text:0000000000011D10 loc_11D10:                              ; CODE XREF: parse_branch+45↑j
.text:0000000000011D10                 lea     rax, [rsp+78h+var_58]
.text:0000000000011D15                 mov     [rsp+78h+var_60], rax
.text:0000000000011D1A                 nop     word ptr [rax+rax+00h]
.text:0000000000011D20
.text:0000000000011D20 loc_11D20:                              ; CODE XREF: parse_branch+12F↓j
.text:0000000000011D20                 movzx   eax, byte ptr [rbp+8]
.text:0000000000011D24                 mov     edx, eax
.text:0000000000011D26                 and     edx, 0FFFFFFF7h
.text:0000000000011D29                 cmp     dl, 2
.text:0000000000011D2C                 jz      loc_11DC0
.text:0000000000011D32
.text:0000000000011D32 loc_11D32:                              ; CODE XREF: parse_branch+F6↓j
.text:0000000000011D32                 cmp     al, 9
.text:0000000000011D34                 jnz     short loc_11D3F
.text:0000000000011D36                 test    r12, r12
.text:0000000000011D39                 jnz     loc_11DC0
.text:0000000000011D3F
.text:0000000000011D3F loc_11D3F:                              ; CODE XREF: parse_branch+74↑j
.text:0000000000011D3F                 mov     rdi, [rsp+78h+var_78]
.text:0000000000011D43                 mov     r9, rbx
.text:0000000000011D46                 mov     r8, r12
.text:0000000000011D49                 mov     rcx, r15
.text:0000000000011D4C                 mov     rdx, rbp
.text:0000000000011D4F                 mov     rsi, r13
.text:0000000000011D52                 call    parse_expression
.text:0000000000011D57                 mov     r9, rax
.text:0000000000011D5A                 mov     eax, [rbx]
.text:0000000000011D5C                 test    eax, eax
.text:0000000000011D5E                 jz      short loc_11D69
.text:0000000000011D60                 test    r9, r9
.text:0000000000011D63                 jz      loc_11DF4
.text:0000000000011D69
.text:0000000000011D69 loc_11D69:                              ; CODE XREF: parse_branch+9E↑j
.text:0000000000011D69                 test    r14, r14
.text:0000000000011D6C                 jz      short loc_11DE8
.text:0000000000011D6E                 test    r9, r9
.text:0000000000011D71                 jz      short loc_11DE8
.text:0000000000011D73                 mov     rax, [rsp+78h+var_68]
.text:0000000000011D78                 mov     r8, [rsp+78h+var_60]
.text:0000000000011D7D                 mov     rcx, r9
.text:0000000000011D80                 mov     rdx, r14
.text:0000000000011D83                 mov     [rsp+78h+var_70], r9
.text:0000000000011D88                 mov     [rsp+78h+var_50], 10h
.text:0000000000011D8D                 lea     rsi, [rax+80h]
.text:0000000000011D94                 lea     rdi, [rax+70h]
.text:0000000000011D98                 call    create_token_tree_isra_16
.text:0000000000011D9D                 test    rax, rax
.text:0000000000011DA0                 mov     r9, [rsp+78h+var_70]
.text:0000000000011DA5                 jz      short loc_11E10
.text:0000000000011DA7                 mov     r14, rax
.text:0000000000011DAA                 movzx   eax, byte ptr [rbp+8]
.text:0000000000011DAE                 mov     edx, eax
.text:0000000000011DB0                 and     edx, 0FFFFFFF7h
.text:0000000000011DB3                 cmp     dl, 2
.text:0000000000011DB6                 jnz     loc_11D32
.text:0000000000011DBC                 nop     dword ptr [rax+00h]
.text:0000000000011DC0
.text:0000000000011DC0 loc_11DC0:                              ; CODE XREF: parse_branch+6C↑j
.text:0000000000011DC0                                         ; parse_branch+79↑j ...
.text:0000000000011DC0                 mov     rcx, [rsp+78h+var_40]
.text:0000000000011DC5                 xor     rcx, fs:28h
.text:0000000000011DCE                 mov     rax, r14
.text:0000000000011DD1                 jnz     short loc_11E3D
.text:0000000000011DD3                 add     rsp, 48h
.text:0000000000011DD7                 pop     rbx
.text:0000000000011DD8                 pop     rbp
.text:0000000000011DD9                 pop     r12
.text:0000000000011DDB                 pop     r13
.text:0000000000011DDD                 pop     r14
.text:0000000000011DDF                 pop     r15
.text:0000000000011DE1                 retn
.text:0000000000011DE1 ; ---------------------------------------------------------------------------
.text:0000000000011DE2                 align 8
.text:0000000000011DE8
.text:0000000000011DE8 loc_11DE8:                              ; CODE XREF: parse_branch+AC↑j
.text:0000000000011DE8                                         ; parse_branch+B1↑j
.text:0000000000011DE8                 test    r14, r14
.text:0000000000011DEB                 cmovz   r14, r9
.text:0000000000011DEF                 jmp     loc_11D20
.text:0000000000011DF4 ; ---------------------------------------------------------------------------
.text:0000000000011DF4
.text:0000000000011DF4 loc_11DF4:                              ; CODE XREF: parse_branch+A3↑j
.text:0000000000011DF4                 test    r14, r14
.text:0000000000011DF7                 jz      short loc_11E0A
.text:0000000000011DF9                 lea     rsi, free_tree
.text:0000000000011E00                 xor     edx, edx
.text:0000000000011E02                 mov     rdi, r14
.text:0000000000011E05                 call    postorder
.text:0000000000011E0A
.text:0000000000011E0A loc_11E0A:                              ; CODE XREF: parse_branch+4A↑j
.text:0000000000011E0A                                         ; parse_branch+137↑j
.text:0000000000011E0A                 xor     r14d, r14d
.text:0000000000011E0D                 jmp     short loc_11DC0
.text:0000000000011E0D ; ---------------------------------------------------------------------------
.text:0000000000011E0F                 align 10h
.text:0000000000011E10
.text:0000000000011E10 loc_11E10:                              ; CODE XREF: parse_branch+E5↑j
.text:0000000000011E10                 lea     rsi, free_tree
.text:0000000000011E17                 mov     rdi, r9
.text:0000000000011E1A                 xor     edx, edx
.text:0000000000011E1C                 call    postorder
.text:0000000000011E21                 lea     rsi, free_tree
.text:0000000000011E28                 mov     rdi, r14
.text:0000000000011E2B                 xor     edx, edx
.text:0000000000011E2D                 xor     r14d, r14d
.text:0000000000011E30                 call    postorder
.text:0000000000011E35                 mov     dword ptr [rbx], 0Ch
.text:0000000000011E3B                 jmp     short loc_11DC0
.text:0000000000011E3D ; ---------------------------------------------------------------------------
.text:0000000000011E3D
.text:0000000000011E3D loc_11E3D:                              ; CODE XREF: parse_branch+111↑j
.text:0000000000011E3D                 call    ___stack_chk_fail
.text:0000000000011E3D ; } // starts at 11CC0
.text:0000000000011E3D parse_branch    endp
.text:0000000000011E3D
.text:0000000000011E3D ; ---------------------------------------------------------------------------
.text:0000000000011E42                 align 10h
.text:0000000000011E50
.text:0000000000011E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000011E50
.text:0000000000011E50
.text:0000000000011E50 parse_reg_exp   proc near               ; CODE XREF: parse_expression+BF↑p
.text:0000000000011E50                                         ; re_compile_internal+4B3↓p
.text:0000000000011E50
.text:0000000000011E50 var_80          = qword ptr -80h
.text:0000000000011E50 var_78          = qword ptr -78h
.text:0000000000011E50 var_70          = qword ptr -70h
.text:0000000000011E50 var_68          = qword ptr -68h
.text:0000000000011E50 var_60          = qword ptr -60h
.text:0000000000011E50 var_58          = byte ptr -58h
.text:0000000000011E50 var_50          = byte ptr -50h
.text:0000000000011E50 var_40          = qword ptr -40h
.text:0000000000011E50
.text:0000000000011E50 ; __unwind {
.text:0000000000011E50                 push    r15
.text:0000000000011E52                 push    r14
.text:0000000000011E54                 mov     r14, rcx
.text:0000000000011E57                 push    r13
.text:0000000000011E59                 push    r12
.text:0000000000011E5B                 mov     r13, r9
.text:0000000000011E5E                 push    rbp
.text:0000000000011E5F                 push    rbx
.text:0000000000011E60                 mov     rbp, rdx
.text:0000000000011E63                 mov     r12, rdi
.text:0000000000011E66                 sub     rsp, 58h
.text:0000000000011E6A                 mov     rbx, [rsi]
.text:0000000000011E6D                 mov     rax, fs:28h
.text:0000000000011E76                 mov     [rsp+88h+var_40], rax
.text:0000000000011E7B                 xor     eax, eax
.text:0000000000011E7D                 mov     [rsp+88h+var_60], rsi
.text:0000000000011E82                 mov     [rsp+88h+var_78], r8
.text:0000000000011E87                 mov     rax, [rbx+0A8h]
.text:0000000000011E8E                 mov     [rsp+88h+var_68], rax
.text:0000000000011E93                 call    parse_branch
.text:0000000000011E98                 mov     edx, [r13+0]
.text:0000000000011E9C                 mov     r15, rax
.text:0000000000011E9F                 test    edx, edx
.text:0000000000011EA1                 jz      short loc_11EAC
.text:0000000000011EA3                 test    rax, rax
.text:0000000000011EA6                 jz      loc_11F92
.text:0000000000011EAC
.text:0000000000011EAC loc_11EAC:                              ; CODE XREF: parse_reg_exp+51↑j
.text:0000000000011EAC                 lea     rax, [rsp+88h+var_58]
.text:0000000000011EB1                 mov     [rsp+88h+var_80], rax
.text:0000000000011EB6                 jmp     loc_11F44
.text:0000000000011EB6 ; ---------------------------------------------------------------------------
.text:0000000000011EBB                 align 20h
.text:0000000000011EC0
.text:0000000000011EC0 loc_11EC0:                              ; CODE XREF: parse_reg_exp+122↓j
.text:0000000000011EC0                 cmp     al, 9
.text:0000000000011EC2                 jnz     short loc_11ED0
.text:0000000000011EC4                 cmp     [rsp+88h+var_78], 0
.text:0000000000011ECA                 jnz     loc_11F78
.text:0000000000011ED0
.text:0000000000011ED0 loc_11ED0:                              ; CODE XREF: parse_reg_exp+72↑j
.text:0000000000011ED0                 mov     rax, [rbx+0A8h]
.text:0000000000011ED7                 mov     r8, [rsp+88h+var_78]
.text:0000000000011EDC                 mov     rcx, r14
.text:0000000000011EDF                 mov     rsi, [rsp+88h+var_60]
.text:0000000000011EE4                 mov     r9, r13
.text:0000000000011EE7                 mov     rdx, rbp
.text:0000000000011EEA                 mov     rdi, r12
.text:0000000000011EED                 mov     [rsp+88h+var_70], rax
.text:0000000000011EF2                 mov     rax, [rsp+88h+var_68]
.text:0000000000011EF7                 mov     [rbx+0A8h], rax
.text:0000000000011EFE                 call    parse_branch
.text:0000000000011F03                 mov     rcx, rax
.text:0000000000011F06                 mov     eax, [r13+0]
.text:0000000000011F0A                 test    eax, eax
.text:0000000000011F0C                 jz      short loc_11F13
.text:0000000000011F0E                 test    rcx, rcx
.text:0000000000011F11                 jz      short loc_11F7C
.text:0000000000011F13
.text:0000000000011F13 loc_11F13:                              ; CODE XREF: parse_reg_exp+BC↑j
.text:0000000000011F13                 mov     rax, [rsp+88h+var_70]
.text:0000000000011F18                 or      [rbx+0A8h], rax
.text:0000000000011F1F
.text:0000000000011F1F loc_11F1F:                              ; CODE XREF: parse_reg_exp+12A↓j
.text:0000000000011F1F                 mov     r8, [rsp+88h+var_80]
.text:0000000000011F24                 lea     rsi, [rbx+80h]
.text:0000000000011F2B                 lea     rdi, [rbx+70h]
.text:0000000000011F2F                 mov     rdx, r15
.text:0000000000011F32                 mov     [rsp+88h+var_50], 0Ah
.text:0000000000011F37                 call    create_token_tree_isra_16
.text:0000000000011F3C                 test    rax, rax
.text:0000000000011F3F                 mov     r15, rax
.text:0000000000011F42                 jz      short loc_11FC0
.text:0000000000011F44
.text:0000000000011F44 loc_11F44:                              ; CODE XREF: parse_reg_exp+66↑j
.text:0000000000011F44                 cmp     byte ptr [rbp+8], 0Ah
.text:0000000000011F48                 jnz     short loc_11F98
.text:0000000000011F4A                 mov     rdx, r14
.text:0000000000011F4D                 mov     rsi, r12
.text:0000000000011F50                 mov     rdi, rbp
.text:0000000000011F53                 or      rdx, 800000h
.text:0000000000011F5A                 call    peek_token
.text:0000000000011F5F                 cdqe
.text:0000000000011F61                 add     [r12+48h], rax
.text:0000000000011F66                 movzx   eax, byte ptr [rbp+8]
.text:0000000000011F6A                 mov     edx, eax
.text:0000000000011F6C                 and     edx, 0FFFFFFF7h
.text:0000000000011F6F                 cmp     dl, 2
.text:0000000000011F72                 jnz     loc_11EC0
.text:0000000000011F78
.text:0000000000011F78 loc_11F78:                              ; CODE XREF: parse_reg_exp+7A↑j
.text:0000000000011F78                 xor     ecx, ecx
.text:0000000000011F7A                 jmp     short loc_11F1F
.text:0000000000011F7C ; ---------------------------------------------------------------------------
.text:0000000000011F7C
.text:0000000000011F7C loc_11F7C:                              ; CODE XREF: parse_reg_exp+C1↑j
.text:0000000000011F7C                 test    r15, r15
.text:0000000000011F7F                 jz      short loc_11F92
.text:0000000000011F81                 lea     rsi, free_tree
.text:0000000000011F88                 xor     edx, edx
.text:0000000000011F8A                 mov     rdi, r15
.text:0000000000011F8D                 call    postorder
.text:0000000000011F92
.text:0000000000011F92 loc_11F92:                              ; CODE XREF: parse_reg_exp+56↑j
.text:0000000000011F92                                         ; parse_reg_exp+12F↑j
.text:0000000000011F92                 xor     r15d, r15d
.text:0000000000011F95                 nop     dword ptr [rax]
.text:0000000000011F98
.text:0000000000011F98 loc_11F98:                              ; CODE XREF: parse_reg_exp+F8↑j
.text:0000000000011F98                                         ; parse_reg_exp+178↓j
.text:0000000000011F98                 mov     rcx, [rsp+88h+var_40]
.text:0000000000011F9D                 xor     rcx, fs:28h
.text:0000000000011FA6                 mov     rax, r15
.text:0000000000011FA9                 jnz     short loc_11FCA
.text:0000000000011FAB                 add     rsp, 58h
.text:0000000000011FAF                 pop     rbx
.text:0000000000011FB0                 pop     rbp
.text:0000000000011FB1                 pop     r12
.text:0000000000011FB3                 pop     r13
.text:0000000000011FB5                 pop     r14
.text:0000000000011FB7                 pop     r15
.text:0000000000011FB9                 retn
.text:0000000000011FB9 ; ---------------------------------------------------------------------------
.text:0000000000011FBA                 align 20h
.text:0000000000011FC0
.text:0000000000011FC0 loc_11FC0:                              ; CODE XREF: parse_reg_exp+F2↑j
.text:0000000000011FC0                 mov     dword ptr [r13+0], 0Ch
.text:0000000000011FC8                 jmp     short loc_11F98
.text:0000000000011FCA ; ---------------------------------------------------------------------------
.text:0000000000011FCA
.text:0000000000011FCA loc_11FCA:                              ; CODE XREF: parse_reg_exp+159↑j
.text:0000000000011FCA                 call    ___stack_chk_fail
.text:0000000000011FCA ; } // starts at 11E50
.text:0000000000011FCA parse_reg_exp   endp
.text:0000000000011FCA
.text:0000000000011FCA ; ---------------------------------------------------------------------------
.text:0000000000011FCF                 align 10h
.text:0000000000011FD0
.text:0000000000011FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011FD0
.text:0000000000011FD0
.text:0000000000011FD0 re_compile_internal proc near           ; CODE XREF: rpl_re_compile_pattern+35↓p
.text:0000000000011FD0                                         ; rpl_regcomp+A4↓p
.text:0000000000011FD0
.text:0000000000011FD0 size            = qword ptr -158h
.text:0000000000011FD0 var_150         = qword ptr -150h
.text:0000000000011FD0 var_148         = qword ptr -148h
.text:0000000000011FD0 var_140         = qword ptr -140h
.text:0000000000011FD0 var_138         = qword ptr -138h
.text:0000000000011FD0 var_130         = qword ptr -130h
.text:0000000000011FD0 var_128         = qword ptr -128h
.text:0000000000011FD0 var_120         = qword ptr -120h
.text:0000000000011FD0 var_10C         = dword ptr -10Ch
.text:0000000000011FD0 var_108         = dword ptr -108h
.text:0000000000011FD0 var_F8          = byte ptr -0F8h
.text:0000000000011FD0 var_F0          = qword ptr -0F0h
.text:0000000000011FD0 ptr             = qword ptr -0E8h
.text:0000000000011FD0 var_D8          = qword ptr -0D8h
.text:0000000000011FD0 var_D0          = qword ptr -0D0h
.text:0000000000011FD0 var_B0          = qword ptr -0B0h
.text:0000000000011FD0 var_A8          = qword ptr -0A8h
.text:0000000000011FD0 var_A0          = qword ptr -0A0h
.text:0000000000011FD0 var_98          = qword ptr -98h
.text:0000000000011FD0 var_90          = qword ptr -90h
.text:0000000000011FD0 var_88          = qword ptr -88h
.text:0000000000011FD0 var_80          = qword ptr -80h
.text:0000000000011FD0 var_78          = qword ptr -78h
.text:0000000000011FD0 var_70          = qword ptr -70h
.text:0000000000011FD0 var_60          = qword ptr -60h
.text:0000000000011FD0 var_50          = byte ptr -50h
.text:0000000000011FD0 var_4F          = byte ptr -4Fh
.text:0000000000011FD0 var_4E          = byte ptr -4Eh
.text:0000000000011FD0 var_4D          = byte ptr -4Dh
.text:0000000000011FD0 var_48          = dword ptr -48h
.text:0000000000011FD0 var_40          = qword ptr -40h
.text:0000000000011FD0
.text:0000000000011FD0 ; __unwind {
.text:0000000000011FD0                 push    r15
.text:0000000000011FD2                 push    r14
.text:0000000000011FD4                 push    r13
.text:0000000000011FD6                 push    r12
.text:0000000000011FD8                 push    rbp
.text:0000000000011FD9                 push    rbx
.text:0000000000011FDA                 sub     rsp, 128h
.text:0000000000011FE1                 mov     [rdi+18h], rcx
.text:0000000000011FE5                 mov     qword ptr [rdi+10h], 0
.text:0000000000011FED                 mov     rax, fs:28h
.text:0000000000011FF6                 mov     [rsp+158h+var_40], rax
.text:0000000000011FFE                 xor     eax, eax
.text:0000000000012000                 movzx   eax, byte ptr [rdi+38h]
.text:0000000000012004                 mov     [rsp+158h+var_150], rdi
.text:0000000000012009                 mov     [rsp+158h+var_148], rsi
.text:000000000001200E                 mov     [rsp+158h+size], rdx
.text:0000000000012012                 mov     [rsp+158h+var_140], rcx
.text:0000000000012017                 mov     [rsp+158h+var_10C], 0
.text:000000000001201F                 mov     qword ptr [rdi+30h], 0
.text:0000000000012027                 mov     rbx, [rdi]
.text:000000000001202A                 mov     byte ptr [rsp+158h+var_138], al
.text:000000000001202E                 and     eax, 0FFFFFF90h
.text:0000000000012031                 cmp     qword ptr [rdi+8], 0E7h
.text:0000000000012039                 mov     [rdi+38h], al
.text:000000000001203C                 jbe     loc_12E36
.text:0000000000012042
.text:0000000000012042 loc_12042:                              ; CODE XREF: re_compile_internal+E8F↓j
.text:0000000000012042                 lea     rdi, [rbx+8]
.text:0000000000012046                 mov     rax, [rsp+158h+var_150]
.text:000000000001204B                 mov     rcx, rbx
.text:000000000001204E                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000012052                 sub     rcx, rdi
.text:0000000000012055                 mov     qword ptr [rax+10h], 0E8h
.text:000000000001205D                 xor     eax, eax
.text:000000000001205F                 add     ecx, 0E8h
.text:0000000000012065                 mov     qword ptr [rbx], 0
.text:000000000001206C                 mov     qword ptr [rbx+0E0h], 0
.text:0000000000012077                 shr     ecx, 3
.text:000000000001207A                 rep stosq
.text:000000000001207D                 mov     rax, 555555555555554h
.text:0000000000012087                 mov     dword ptr [rbx+80h], 0Fh
.text:0000000000012091                 cmp     [rsp+158h+size], rax
.text:0000000000012095                 ja      loc_126D6
.text:000000000001209B                 mov     r14, [rsp+158h+size]
.text:000000000001209F                 lea     rax, [r14+1]
.text:00000000000120A3                 mov     rdi, rax
.text:00000000000120A6                 mov     [rbx+8], rax
.text:00000000000120AA                 mov     [rsp+158h+var_130], rax
.text:00000000000120AF                 shl     rdi, 4          ; size
.text:00000000000120B3                 call    _malloc
.text:00000000000120B8                 test    r14, r14
.text:00000000000120BB                 mov     [rbx], rax
.text:00000000000120BE                 jz      loc_12DA5
.text:00000000000120C4                 mov     esi, 1
.text:00000000000120C9                 nop     dword ptr [rax+00000000h]
.text:00000000000120D0
.text:00000000000120D0 loc_120D0:                              ; CODE XREF: re_compile_internal+107↓j
.text:00000000000120D0                 add     rsi, rsi        ; size
.text:00000000000120D3                 cmp     [rsp+158h+size], rsi
.text:00000000000120D7                 jnb     short loc_120D0
.text:00000000000120D9                 lea     rbp, [rsi-1]
.text:00000000000120DD
.text:00000000000120DD loc_120DD:                              ; CODE XREF: re_compile_internal+DDC↓j
.text:00000000000120DD                 mov     edi, 18h        ; nmemb
.text:00000000000120E2                 call    _calloc
.text:00000000000120E7                 mov     [rbx+88h], rbp
.text:00000000000120EE                 mov     [rbx+40h], rax
.text:00000000000120F2                 call    ___ctype_get_mb_cur_max
.text:00000000000120F7                 mov     edi, 0Eh        ; item
.text:00000000000120FC                 mov     [rbx+0B4h], eax
.text:0000000000012102                 call    _nl_langinfo
.text:0000000000012107                 movzx   edx, byte ptr [rax]
.text:000000000001210A                 and     edx, 0FFFFFFDFh
.text:000000000001210D                 cmp     dl, 55h ; 'U'
.text:0000000000012110                 jnz     short loc_12160
.text:0000000000012112                 movzx   edx, byte ptr [rax+1]
.text:0000000000012116                 and     edx, 0FFFFFFDFh
.text:0000000000012119                 cmp     dl, 54h ; 'T'
.text:000000000001211C                 jnz     short loc_12160
.text:000000000001211E                 movzx   edx, byte ptr [rax+2]
.text:0000000000012122                 and     edx, 0FFFFFFDFh
.text:0000000000012125                 cmp     dl, 46h ; 'F'
.text:0000000000012128                 jnz     short loc_12160
.text:000000000001212A                 xor     edx, edx
.text:000000000001212C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000012130                 lea     rdi, a8         ; "8"
.text:0000000000012137                 mov     ecx, 2
.text:000000000001213C                 setz    dl
.text:000000000001213F                 lea     rsi, [rax+rdx+3]
.text:0000000000012144                 repe cmpsb
.text:0000000000012146                 setnbe  al
.text:0000000000012149                 sbb     al, 0
.text:000000000001214B                 test    al, al
.text:000000000001214D                 jnz     short loc_12160
.text:000000000001214F                 or      byte ptr [rbx+0B0h], 4
.text:0000000000012156                 db      2Eh
.text:0000000000012156                 nop     word ptr [rax+rax+00000000h]
.text:0000000000012160
.text:0000000000012160 loc_12160:                              ; CODE XREF: re_compile_internal+140↑j
.text:0000000000012160                                         ; re_compile_internal+14C↑j ...
.text:0000000000012160                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000012167                 mov     edx, eax
.text:0000000000012169                 and     edx, 0FFFFFFF7h
.text:000000000001216C                 cmp     dword ptr [rbx+0B4h], 1
.text:0000000000012173                 mov     [rbx+0B0h], dl
.text:0000000000012179                 jle     short loc_1218E
.text:000000000001217B                 test    al, 4
.text:000000000001217D                 jz      loc_126E3
.text:0000000000012183                 lea     rax, utf8_sb_map
.text:000000000001218A                 mov     [rbx+78h], rax
.text:000000000001218E
.text:000000000001218E loc_1218E:                              ; CODE XREF: re_compile_internal+1A9↑j
.text:000000000001218E                                         ; re_compile_internal+793↓j
.text:000000000001218E                 cmp     qword ptr [rbx], 0
.text:0000000000012192                 jz      loc_126D6
.text:0000000000012198                 cmp     qword ptr [rbx+40h], 0
.text:000000000001219D                 jz      loc_126D6
.text:00000000000121A3                 mov     rax, [rsp+158h+var_140]
.text:00000000000121A8                 lea     rbp, [rsp+158h+var_D8]
.text:00000000000121B0                 mov     ecx, 12h
.text:00000000000121B5                 mov     [rsp+158h+var_10C], 0
.text:00000000000121BD                 lea     r8, [rbp+8]
.text:00000000000121C1                 and     eax, 400000h
.text:00000000000121C6                 mov     [rsp+158h+var_138], rax
.text:00000000000121CB                 mov     rax, [rsp+158h+var_150]
.text:00000000000121D0                 setnz   dl
.text:00000000000121D3                 mov     rdi, r8
.text:00000000000121D6                 mov     rsi, [rax+28h]
.text:00000000000121DA                 xor     eax, eax
.text:00000000000121DC                 rep stosq
.text:00000000000121DF                 mov     rax, [rsp+158h+var_148]
.text:00000000000121E4                 mov     rdi, [rsp+158h+size]
.text:00000000000121E8                 test    rsi, rsi
.text:00000000000121EB                 mov     [rsp+158h+var_50], dl
.text:00000000000121F2                 mov     ecx, [rbx+0B4h]
.text:00000000000121F8                 setnz   r12b
.text:00000000000121FC                 mov     [rsp+158h+var_60], rsi
.text:0000000000012204                 mov     [rsp+158h+var_D8], rax
.text:000000000001220C                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000012213                 or      r12d, edx
.text:0000000000012216                 mov     [rsp+158h+var_80], rdi
.text:000000000001221E                 mov     [rsp+158h+var_88], rdi
.text:0000000000012226                 mov     esi, r12d
.text:0000000000012229                 mov     [rsp+158h+var_4D], r12b
.text:0000000000012231                 mov     [rsp+158h+var_48], ecx
.text:0000000000012238                 mov     [rsp+158h+var_70], rdi
.text:0000000000012240                 mov     [rsp+158h+var_78], rdi
.text:0000000000012248                 mov     edx, eax
.text:000000000001224A                 shr     al, 3
.text:000000000001224D                 shr     dl, 2
.text:0000000000012250                 and     eax, 1
.text:0000000000012253                 and     edx, 1
.text:0000000000012256                 test    rdi, rdi
.text:0000000000012259                 mov     [rsp+158h+var_4E], al
.text:0000000000012260                 mov     [rsp+158h+var_4F], dl
.text:0000000000012267                 jnz     loc_126A5
.text:000000000001226D                 test    sil, sil
.text:0000000000012270                 jz      short loc_1227F
.text:0000000000012272
.text:0000000000012272 loc_12272:                              ; CODE XREF: re_compile_internal+701↓j
.text:0000000000012272                 mov     rax, [rsp+158h+var_D0]
.text:000000000001227A                 mov     [rsp+158h+var_148], rax
.text:000000000001227F
.text:000000000001227F loc_1227F:                              ; CODE XREF: re_compile_internal+2A0↑j
.text:000000000001227F                                         ; re_compile_internal+6FB↓j
.text:000000000001227F                 cmp     [rsp+158h+var_138], 0
.text:0000000000012285                 mov     rax, [rsp+158h+var_148]
.text:000000000001228A                 mov     [rsp+158h+var_D0], rax
.text:0000000000012292                 jz      loc_12395
.text:0000000000012298                 cmp     ecx, 1
.text:000000000001229B                 jle     loc_12E8D
.text:00000000000122A1
.text:00000000000122A1 loc_122A1:                              ; CODE XREF: re_compile_internal+31C↓j
.text:00000000000122A1                 mov     rdi, rbp
.text:00000000000122A4                 call    build_wcs_upper_buffer
.text:00000000000122A9                 test    eax, eax
.text:00000000000122AB                 jnz     short loc_122F0
.text:00000000000122AD                 mov     rax, [rsp+158h+size]
.text:00000000000122B1                 cmp     rax, [rsp+158h+var_A0]
.text:00000000000122B9                 jle     loc_12E70
.text:00000000000122BF                 movsxd  rax, dword ptr [rbx+0B4h]
.text:00000000000122C6                 mov     rsi, [rsp+158h+var_98]
.text:00000000000122CE                 add     rax, [rsp+158h+var_A8]
.text:00000000000122D6                 cmp     rsi, rax
.text:00000000000122D9                 jg      loc_12E70
.text:00000000000122DF                 add     rsi, rsi
.text:00000000000122E2                 mov     rdi, rbp
.text:00000000000122E5                 call    re_string_realloc_buffers
.text:00000000000122EA                 test    eax, eax
.text:00000000000122EC                 jz      short loc_122A1
.text:00000000000122EE                 xchg    ax, ax
.text:00000000000122F0
.text:00000000000122F0 loc_122F0:                              ; CODE XREF: re_compile_internal+2DB↑j
.text:00000000000122F0                                         ; re_compile_internal+674↓j ...
.text:00000000000122F0                 mov     [rsp+158h+var_10C], eax
.text:00000000000122F4                 mov     rax, [rsp+158h+var_150]
.text:00000000000122F9                 mov     r13, [rax]
.text:00000000000122FC
.text:00000000000122FC loc_122FC:                              ; CODE XREF: re_compile_internal+D75↓j
.text:00000000000122FC                                         ; re_compile_internal+EE2↓j ...
.text:00000000000122FC                 mov     rdi, [r13+70h]  ; ptr
.text:0000000000012300                 test    rdi, rdi
.text:0000000000012303                 jz      short loc_12318
.text:0000000000012305                 nop     dword ptr [rax]
.text:0000000000012308
.text:0000000000012308 loc_12308:                              ; CODE XREF: re_compile_internal+346↓j
.text:0000000000012308                 mov     r12, [rdi]
.text:000000000001230B                 call    _free
.text:0000000000012310                 test    r12, r12
.text:0000000000012313                 mov     rdi, r12
.text:0000000000012316                 jnz     short loc_12308
.text:0000000000012318
.text:0000000000012318 loc_12318:                              ; CODE XREF: re_compile_internal+333↑j
.text:0000000000012318                 mov     rdi, [r13+20h]  ; ptr
.text:000000000001231C                 mov     qword ptr [r13+70h], 0
.text:0000000000012324                 mov     dword ptr [r13+80h], 0Fh
.text:000000000001232F                 mov     qword ptr [r13+68h], 0
.text:0000000000012337                 call    _free
.text:000000000001233C                 mov     qword ptr [r13+20h], 0
.text:0000000000012344                 mov     rdi, rbp
.text:0000000000012347                 call    re_string_destruct
.text:000000000001234C
.text:000000000001234C loc_1234C:                              ; CODE XREF: re_compile_internal+70E↓j
.text:000000000001234C                                         ; re_compile_internal+D68↓j
.text:000000000001234C                 mov     rdi, rbx        ; ptr
.text:000000000001234F                 call    free_dfa_content
.text:0000000000012354                 mov     rax, [rsp+158h+var_150]
.text:0000000000012359                 mov     qword ptr [rax], 0
.text:0000000000012360                 mov     qword ptr [rax+8], 0
.text:0000000000012368                 mov     eax, [rsp+158h+var_10C]
.text:000000000001236C
.text:000000000001236C loc_1236C:                              ; CODE XREF: re_compile_internal+D62↓j
.text:000000000001236C                                         ; re_compile_internal+1016↓j
.text:000000000001236C                 mov     rbx, [rsp+158h+var_40]
.text:0000000000012374                 xor     rbx, fs:28h
.text:000000000001237D                 jnz     loc_130C0
.text:0000000000012383                 add     rsp, 128h
.text:000000000001238A                 pop     rbx
.text:000000000001238B                 pop     rbp
.text:000000000001238C                 pop     r12
.text:000000000001238E                 pop     r13
.text:0000000000012390                 pop     r14
.text:0000000000012392                 pop     r15
.text:0000000000012394                 retn
.text:0000000000012395 ; ---------------------------------------------------------------------------
.text:0000000000012395
.text:0000000000012395 loc_12395:                              ; CODE XREF: re_compile_internal+2C2↑j
.text:0000000000012395                 cmp     ecx, 1
.text:0000000000012398                 jg      loc_12D4A
.text:000000000001239E                 test    r12b, r12b
.text:00000000000123A1                 mov     rsi, [rsp+158h+var_98]
.text:00000000000123A9                 jz      loc_129C4
.text:00000000000123AF                 cmp     [rsp+158h+var_80], rsi
.text:00000000000123B7                 mov     rax, [rsp+158h+var_A8]
.text:00000000000123BF                 cmovle  rsi, [rsp+158h+var_80]
.text:00000000000123C8                 cmp     rsi, rax
.text:00000000000123CB                 jg      short loc_123DD
.text:00000000000123CD                 jmp     short loc_12410
.text:00000000000123CD ; ---------------------------------------------------------------------------
.text:00000000000123CF                 align 10h
.text:00000000000123D0
.text:00000000000123D0 loc_123D0:                              ; CODE XREF: re_compile_internal+43E↓j
.text:00000000000123D0                 mov     rdx, [rsp+158h+var_D0]
.text:00000000000123D8                 mov     [rsp+158h+var_148], rdx
.text:00000000000123DD
.text:00000000000123DD loc_123DD:                              ; CODE XREF: re_compile_internal+3FB↑j
.text:00000000000123DD                 mov     rdx, [rsp+158h+var_D8]
.text:00000000000123E5                 mov     rcx, [rsp+158h+var_60]
.text:00000000000123ED                 add     rdx, rax
.text:00000000000123F0                 add     rdx, [rsp+158h+var_B0]
.text:00000000000123F8                 movzx   edx, byte ptr [rdx]
.text:00000000000123FB                 movzx   edx, byte ptr [rcx+rdx]
.text:00000000000123FF                 mov     rcx, [rsp+158h+var_148]
.text:0000000000012404                 mov     [rcx+rax], dl
.text:0000000000012407                 add     rax, 1
.text:000000000001240B                 cmp     rsi, rax
.text:000000000001240E                 jnz     short loc_123D0
.text:0000000000012410
.text:0000000000012410 loc_12410:                              ; CODE XREF: re_compile_internal+3FD↑j
.text:0000000000012410                 mov     [rsp+158h+var_A8], rax
.text:0000000000012418                 mov     [rsp+158h+var_A0], rax
.text:0000000000012420                 mov     [rsp+158h+var_10C], 0
.text:0000000000012428
.text:0000000000012428 loc_12428:                              ; CODE XREF: re_compile_internal+A0C↓j
.text:0000000000012428                                         ; re_compile_internal+D8A↓j ...
.text:0000000000012428                 mov     r12, [rsp+158h+var_150]
.text:000000000001242D                 mov     r14, [rsp+158h+var_140]
.text:0000000000012432                 lea     r13, [rsp+158h+var_108]
.text:0000000000012437                 mov     rsi, rbp
.text:000000000001243A                 mov     rdi, r13
.text:000000000001243D                 mov     [rsp+158h+var_130], r13
.text:0000000000012442                 mov     r15, [r12]
.text:0000000000012446                 mov     rdx, r14
.text:0000000000012449                 mov     qword ptr [r12+30h], 0
.text:0000000000012452                 or      rdx, 800000h
.text:0000000000012459                 mov     [r15+0D8h], r14
.text:0000000000012460                 call    peek_token
.text:0000000000012465                 lea     r9, [rsp+158h+var_10C]
.text:000000000001246A                 xor     r8d, r8d
.text:000000000001246D                 mov     rcx, r14
.text:0000000000012470                 mov     rdx, r13
.text:0000000000012473                 mov     rsi, r12
.text:0000000000012476                 mov     rdi, rbp
.text:0000000000012479                 cdqe
.text:000000000001247B                 add     [rsp+158h+var_90], rax
.text:0000000000012483                 call    parse_reg_exp
.text:0000000000012488                 mov     ecx, [rsp+158h+var_10C]
.text:000000000001248C                 test    ecx, ecx
.text:000000000001248E                 jnz     loc_12EB7
.text:0000000000012494                 lea     r13, [r15+70h]
.text:0000000000012498                 lea     r12, [rsp+158h+var_F8]
.text:000000000001249D                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:00000000000124A1                 xor     edx, edx
.text:00000000000124A3                 xor     ecx, ecx
.text:00000000000124A5                 mov     rsi, r15
.text:00000000000124A8                 mov     r8, r12
.text:00000000000124AB                 mov     rdi, r13
.text:00000000000124AE                 mov     [rsp+158h+size], rax
.text:00000000000124B2                 mov     byte ptr [rsp+158h+var_F0], 2
.text:00000000000124B7                 call    create_token_tree_isra_16
.text:00000000000124BC                 mov     r9, [rsp+158h+size]
.text:00000000000124C0                 mov     r11, rax
.text:00000000000124C3                 mov     rdx, rax
.text:00000000000124C6                 test    r9, r9
.text:00000000000124C9                 jz      short loc_124F2
.text:00000000000124CB
.text:00000000000124CB loc_124CB:                              ; CODE XREF: re_compile_internal+F1F↓j
.text:00000000000124CB                 mov     rcx, r11
.text:00000000000124CE                 mov     rdx, r9
.text:00000000000124D1                 mov     r8, r12
.text:00000000000124D4                 mov     rsi, r15
.text:00000000000124D7                 mov     rdi, r13
.text:00000000000124DA                 mov     [rsp+158h+size], r11
.text:00000000000124DE                 mov     byte ptr [rsp+158h+var_F0], 10h
.text:00000000000124E3                 call    create_token_tree_isra_16
.text:00000000000124E8                 mov     r11, [rsp+158h+size]
.text:00000000000124EC                 mov     rdx, r11
.text:00000000000124EF                 mov     r11, rax
.text:00000000000124F2
.text:00000000000124F2 loc_124F2:                              ; CODE XREF: re_compile_internal+4F9↑j
.text:00000000000124F2                 test    rdx, rdx
.text:00000000000124F5                 mov     rcx, [rsp+158h+var_150]
.text:00000000000124FA                 setz    dl
.text:00000000000124FD                 test    r11, r11
.text:0000000000012500                 setz    al
.text:0000000000012503                 or      dl, al
.text:0000000000012505                 mov     r13, [rcx]
.text:0000000000012508                 jnz     loc_12EA2
.text:000000000001250E                 mov     r15, [r13+8]
.text:0000000000012512                 mov     [rbx+68h], r11
.text:0000000000012516                 lea     rcx, ds:0[r15*8]
.text:000000000001251E                 lea     r15, [r15+r15*2]
.text:0000000000012522                 mov     rdi, rcx        ; size
.text:0000000000012525                 mov     [rsp+158h+size], rcx
.text:0000000000012529                 shl     r15, 3
.text:000000000001252D                 call    _malloc
.text:0000000000012532                 mov     rcx, [rsp+158h+size]
.text:0000000000012536                 mov     [r13+18h], rax
.text:000000000001253A                 mov     [rsp+158h+var_140], rax
.text:000000000001253F                 mov     rdi, rcx        ; size
.text:0000000000012542                 call    _malloc
.text:0000000000012547                 mov     rdi, r15        ; size
.text:000000000001254A                 mov     [r13+20h], rax
.text:000000000001254E                 mov     [rsp+158h+var_148], rax
.text:0000000000012553                 call    _malloc
.text:0000000000012558                 mov     rdi, r15        ; size
.text:000000000001255B                 mov     [r13+28h], rax
.text:000000000001255F                 mov     [rsp+158h+size], rax
.text:0000000000012563                 call    _malloc
.text:0000000000012568                 mov     rdx, [rsp+158h+var_140]
.text:000000000001256D                 mov     [r13+30h], rax
.text:0000000000012571                 mov     rsi, [rsp+158h+size]
.text:0000000000012575                 mov     rcx, [rsp+158h+var_148]
.text:000000000001257A                 test    rdx, rdx
.text:000000000001257D                 jz      loc_12D3D
.text:0000000000012583                 test    rcx, rcx
.text:0000000000012586                 jz      loc_12D3D
.text:000000000001258C                 test    rsi, rsi
.text:000000000001258F                 jz      loc_12D3D
.text:0000000000012595                 test    rax, rax
.text:0000000000012598                 jz      loc_12D3D
.text:000000000001259E                 mov     rax, [rsp+158h+var_150]
.text:00000000000125A3                 mov     r15, [rax+30h]
.text:00000000000125A7                 lea     rdi, ds:0[r15*8] ; size
.text:00000000000125AF                 call    _malloc
.text:00000000000125B4                 test    rax, rax
.text:00000000000125B7                 mov     [r13+0E0h], rax
.text:00000000000125BE                 jz      short loc_1262D
.text:00000000000125C0                 test    r15, r15
.text:00000000000125C3                 jz      short loc_125DD
.text:00000000000125C5                 xor     edx, edx
.text:00000000000125C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000125D0
.text:00000000000125D0 loc_125D0:                              ; CODE XREF: re_compile_internal+60B↓j
.text:00000000000125D0                 mov     [rax+rdx*8], rdx
.text:00000000000125D4                 add     rdx, 1
.text:00000000000125D8                 cmp     rdx, r15
.text:00000000000125DB                 jnz     short loc_125D0
.text:00000000000125DD
.text:00000000000125DD loc_125DD:                              ; CODE XREF: re_compile_internal+5F3↑j
.text:00000000000125DD                 mov     rdi, [r13+68h]
.text:00000000000125E1                 lea     rsi, optimize_subexps
.text:00000000000125E8                 mov     rdx, r13
.text:00000000000125EB                 call    preorder
.text:00000000000125F0                 mov     rax, [rsp+158h+var_150]
.text:00000000000125F5                 mov     rdi, [r13+0E0h] ; ptr
.text:00000000000125FC                 mov     rdx, [rax+30h]
.text:0000000000012600                 test    rdx, rdx
.text:0000000000012603                 jz      loc_12EF4
.text:0000000000012609                 mov     rax, [rdi]
.text:000000000001260C                 test    rax, rax
.text:000000000001260F                 jz      short loc_1261E
.text:0000000000012611                 jmp     short loc_1262D
.text:0000000000012611 ; ---------------------------------------------------------------------------
.text:0000000000012613                 align 8
.text:0000000000012618
.text:0000000000012618 loc_12618:                              ; CODE XREF: re_compile_internal+655↓j
.text:0000000000012618                 cmp     [rdi+rax*8], rax
.text:000000000001261C                 jnz     short loc_1262D
.text:000000000001261E
.text:000000000001261E loc_1261E:                              ; CODE XREF: re_compile_internal+63F↑j
.text:000000000001261E                 add     rax, 1
.text:0000000000012622                 cmp     rdx, rax
.text:0000000000012625                 ja      short loc_12618
.text:0000000000012627                 jz      loc_12EF4
.text:000000000001262D
.text:000000000001262D loc_1262D:                              ; CODE XREF: re_compile_internal+5EE↑j
.text:000000000001262D                                         ; re_compile_internal+641↑j ...
.text:000000000001262D                 mov     rdi, [r13+68h]
.text:0000000000012631                 mov     rdx, [rsp+158h+var_150]
.text:0000000000012636                 lea     rsi, lower_subexps
.text:000000000001263D                 call    postorder
.text:0000000000012642                 test    eax, eax
.text:0000000000012644                 jnz     loc_122F0
.text:000000000001264A                 mov     rdi, [r13+68h]
.text:000000000001264E                 lea     rsi, calc_first
.text:0000000000012655                 mov     rdx, r13
.text:0000000000012658                 call    postorder
.text:000000000001265D                 test    eax, eax
.text:000000000001265F                 jnz     loc_122F0
.text:0000000000012665                 mov     rdi, [r13+68h]
.text:0000000000012669                 lea     rsi, calc_next
.text:0000000000012670                 mov     rdx, r13
.text:0000000000012673                 call    preorder
.text:0000000000012678                 mov     rdx, [r13+68h]
.text:000000000001267C                 lea     rsi, jpt_126A3
.text:0000000000012683                 nop     dword ptr [rax+rax+00h]
.text:0000000000012688
.text:0000000000012688 loc_12688:                              ; CODE XREF: re_compile_internal+7BF↓j
.text:0000000000012688                 movzx   ecx, byte ptr [rdx+30h]
.text:000000000001268C                 mov     rdi, [rdx+38h]
.text:0000000000012690                 cmp     cl, 10h         ; switch 17 cases
.text:0000000000012693                 ja      def_126A3       ; jumptable 00000000000126A3 default case, cases 0,1,3,5-7,13-15
.text:0000000000012699                 movzx   eax, cl
.text:000000000001269C                 movsxd  rax, ds:(jpt_126A3 - 15448h)[rsi+rax*4]
.text:00000000000126A0                 add     rax, rsi
.text:00000000000126A3                 jmp     rax             ; switch jump
.text:00000000000126A5 ; ---------------------------------------------------------------------------
.text:00000000000126A5
.text:00000000000126A5 loc_126A5:                              ; CODE XREF: re_compile_internal+297↑j
.text:00000000000126A5                 mov     rsi, [rsp+158h+var_130]
.text:00000000000126AA                 mov     rdi, rbp
.text:00000000000126AD                 call    re_string_realloc_buffers
.text:00000000000126B2                 test    eax, eax
.text:00000000000126B4                 jnz     loc_122F0
.text:00000000000126BA                 movzx   esi, [rsp+158h+var_4D]
.text:00000000000126C2                 mov     ecx, [rbx+0B4h]
.text:00000000000126C8                 test    sil, sil
.text:00000000000126CB                 jz      loc_1227F
.text:00000000000126D1                 jmp     loc_12272
.text:00000000000126D6 ; ---------------------------------------------------------------------------
.text:00000000000126D6
.text:00000000000126D6 loc_126D6:                              ; CODE XREF: re_compile_internal+C5↑j
.text:00000000000126D6                                         ; re_compile_internal+1C2↑j ...
.text:00000000000126D6                 mov     [rsp+158h+var_10C], 0Ch
.text:00000000000126DE                 jmp     loc_1234C
.text:00000000000126E3 ; ---------------------------------------------------------------------------
.text:00000000000126E3
.text:00000000000126E3 loc_126E3:                              ; CODE XREF: re_compile_internal+1AD↑j
.text:00000000000126E3                 mov     esi, 1          ; size
.text:00000000000126E8                 mov     edi, 20h ; ' '  ; nmemb
.text:00000000000126ED                 call    _calloc
.text:00000000000126F2                 test    rax, rax
.text:00000000000126F5                 mov     [rbx+78h], rax
.text:00000000000126F9                 jz      short loc_126D6
.text:00000000000126FB                 xor     r12d, r12d
.text:00000000000126FE                 xor     ebp, ebp
.text:0000000000012700                 mov     r13d, 1
.text:0000000000012706
.text:0000000000012706 loc_12706:                              ; CODE XREF: re_compile_internal+791↓j
.text:0000000000012706                 xor     r15d, r15d
.text:0000000000012709                 nop     dword ptr [rax+00000000h]
.text:0000000000012710
.text:0000000000012710 loc_12710:                              ; CODE XREF: re_compile_internal+782↓j
.text:0000000000012710                 lea     r14d, [rbp+r15+0]
.text:0000000000012715                 mov     edi, r14d       ; c
.text:0000000000012718                 call    _btowc
.text:000000000001271D                 cmp     eax, 0FFFFFFFFh
.text:0000000000012720                 jz      short loc_12735
.text:0000000000012722                 mov     rsi, [rbx+78h]
.text:0000000000012726                 mov     rdi, r13
.text:0000000000012729                 mov     ecx, r15d
.text:000000000001272C                 shl     rdi, cl
.text:000000000001272F                 add     rsi, r12
.text:0000000000012732                 or      [rsi], rdi
.text:0000000000012735
.text:0000000000012735 loc_12735:                              ; CODE XREF: re_compile_internal+750↑j
.text:0000000000012735                 test    r14d, 0FFFFFF80h
.text:000000000001273C                 jnz     short loc_1274A
.text:000000000001273E                 cmp     eax, r14d
.text:0000000000012741                 jz      short loc_1274A
.text:0000000000012743                 or      byte ptr [rbx+0B0h], 8
.text:000000000001274A
.text:000000000001274A loc_1274A:                              ; CODE XREF: re_compile_internal+76C↑j
.text:000000000001274A                                         ; re_compile_internal+771↑j
.text:000000000001274A                 add     r15, 1
.text:000000000001274E                 cmp     r15, 40h ; '@'
.text:0000000000012752                 jnz     short loc_12710
.text:0000000000012754                 add     ebp, 40h ; '@'
.text:0000000000012757                 add     r12, 8
.text:000000000001275B                 cmp     ebp, 100h
.text:0000000000012761                 jnz     short loc_12706
.text:0000000000012763                 jmp     loc_1218E
.text:0000000000012768 ; ---------------------------------------------------------------------------
.text:0000000000012768
.text:0000000000012768 def_126A3:                              ; CODE XREF: re_compile_internal+6C3↑j
.text:0000000000012768                                         ; re_compile_internal+6D3↑j
.text:0000000000012768                                         ; DATA XREF: ...
.text:0000000000012768                 and     ecx, 8          ; jumptable 00000000000126A3 default case, cases 0,1,3,5-7,13-15
.text:000000000001276B                 jnz     loc_13082
.text:0000000000012771                 mov     rax, [rdx+20h]
.text:0000000000012775                 mov     rcx, [rax+38h]
.text:0000000000012779                 mov     rax, [r13+18h]
.text:000000000001277D                 mov     [rax+rdi*8], rcx
.text:0000000000012781
.text:0000000000012781 loc_12781:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000012781                                         ; re_compile_internal+955↓j ...
.text:0000000000012781                 mov     r15, [rdx+8]    ; jumptable 00000000000126A3 case 16
.text:0000000000012785
.text:0000000000012785 loc_12785:                              ; CODE XREF: re_compile_internal+8F3↓j
.text:0000000000012785                                         ; re_compile_internal+94B↓j ...
.text:0000000000012785                 xor     edi, edi
.text:0000000000012787                 test    r15, r15
.text:000000000001278A                 jz      short loc_1279B
.text:000000000001278C
.text:000000000001278C loc_1278C:                              ; CODE XREF: re_compile_internal+7E1↓j
.text:000000000001278C                 mov     rdx, r15
.text:000000000001278F                 jmp     loc_12688
.text:000000000001278F ; ---------------------------------------------------------------------------
.text:0000000000012794                 align 8
.text:0000000000012798
.text:0000000000012798 loc_12798:                              ; CODE XREF: re_compile_internal+7EC↓j
.text:0000000000012798                 mov     rdx, rax
.text:000000000001279B
.text:000000000001279B loc_1279B:                              ; CODE XREF: re_compile_internal+7BA↑j
.text:000000000001279B                 mov     r15, [rdx+10h]
.text:000000000001279F                 test    r15, r15
.text:00000000000127A2                 setz    cl
.text:00000000000127A5                 cmp     r15, rdi
.text:00000000000127A8                 setz    al
.text:00000000000127AB                 or      cl, al
.text:00000000000127AD                 mov     byte ptr [rsp+158h+var_148], cl
.text:00000000000127B1                 jz      short loc_1278C
.text:00000000000127B3                 mov     rax, [rdx]
.text:00000000000127B6                 mov     rdi, rdx
.text:00000000000127B9                 test    rax, rax
.text:00000000000127BC                 jnz     short loc_12798
.text:00000000000127BE                 xor     r14d, r14d
.text:00000000000127C1                 xor     r15d, r15d
.text:00000000000127C4                 nop     dword ptr [rax+00h]
.text:00000000000127C8
.text:00000000000127C8 loc_127C8:                              ; CODE XREF: re_compile_internal+A49↓j
.text:00000000000127C8                 mov     rdx, [r13+10h]
.text:00000000000127CC                 cmp     rdx, r15
.text:00000000000127CF                 jz      short loc_127F6
.text:00000000000127D1
.text:00000000000127D1 loc_127D1:                              ; CODE XREF: re_compile_internal+824↓j
.text:00000000000127D1                                         ; re_compile_internal+835↓j ...
.text:00000000000127D1                 lea     r10, [r15+r15*2]
.text:00000000000127D5                 mov     rax, [r13+30h]
.text:00000000000127D9                 shl     r10, 3
.text:00000000000127DD                 cmp     qword ptr [rax+r10+8], 0
.text:00000000000127E3                 jz      loc_129E8
.text:00000000000127E9                 mov     rdx, [r13+10h]
.text:00000000000127ED                 add     r15, 1
.text:00000000000127F1                 cmp     rdx, r15
.text:00000000000127F4                 jnz     short loc_127D1
.text:00000000000127F6
.text:00000000000127F6 loc_127F6:                              ; CODE XREF: re_compile_internal+7FF↑j
.text:00000000000127F6                 test    r14b, r14b
.text:00000000000127F9                 jz      loc_12A3E
.text:00000000000127FF
.text:00000000000127FF loc_127FF:                              ; CODE XREF: re_compile_internal+A5D↓j
.text:00000000000127FF                 xor     r14d, r14d
.text:0000000000012802                 xor     r15d, r15d
.text:0000000000012805                 jmp     short loc_127D1
.text:0000000000012807 ; ---------------------------------------------------------------------------
.text:0000000000012807
.text:0000000000012807 loc_12807:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000012807                                         ; DATA XREF: .rodata:jpt_126A3↓o
.text:0000000000012807                 or      byte ptr [r13+0B0h], 1 ; jumptable 00000000000126A3 cases 10,11
.text:000000000001280F                 mov     r15, [rdx+8]
.text:0000000000012813                 test    r15, r15
.text:0000000000012816                 jz      loc_12E29
.text:000000000001281C                 mov     rax, [r15+18h]
.text:0000000000012820                 mov     rcx, [rax+38h]
.text:0000000000012824
.text:0000000000012824 loc_12824:                              ; CODE XREF: re_compile_internal+E61↓j
.text:0000000000012824                 mov     rax, [rdx+10h]
.text:0000000000012828                 test    rax, rax
.text:000000000001282B                 jz      loc_12E1C
.text:0000000000012831                 mov     rax, [rax+18h]
.text:0000000000012835                 mov     r9, [rax+38h]
.text:0000000000012839
.text:0000000000012839 loc_12839:                              ; CODE XREF: re_compile_internal+E54↓j
.text:0000000000012839                 test    rcx, rcx
.text:000000000001283C                 js      loc_130A1
.text:0000000000012842                 test    r9, r9
.text:0000000000012845                 js      loc_13063
.text:000000000001284B                 mov     rax, [r13+28h]
.text:000000000001284F                 lea     rdi, [rdi+rdi*2]
.text:0000000000012853                 mov     [rsp+158h+var_120], rsi
.text:0000000000012858                 mov     [rsp+158h+var_128], r9
.text:000000000001285D                 mov     [rsp+158h+var_140], rcx
.text:0000000000012862                 mov     [rsp+158h+var_148], rdx
.text:0000000000012867                 lea     r10, [rax+rdi*8]
.text:000000000001286B                 mov     edi, 10h        ; size
.text:0000000000012870                 mov     qword ptr [r10], 2
.text:0000000000012877                 mov     [rsp+158h+size], r10
.text:000000000001287B                 call    _malloc
.text:0000000000012880                 mov     r10, [rsp+158h+size]
.text:0000000000012884                 test    rax, rax
.text:0000000000012887                 mov     rdx, [rsp+158h+var_148]
.text:000000000001288C                 mov     rcx, [rsp+158h+var_140]
.text:0000000000012891                 mov     r9, [rsp+158h+var_128]
.text:0000000000012896                 mov     rsi, [rsp+158h+var_120]
.text:000000000001289B                 mov     [r10+10h], rax
.text:000000000001289F                 jz      loc_12B3A
.text:00000000000128A5                 cmp     rcx, r9
.text:00000000000128A8                 jz      loc_12E7D
.text:00000000000128AE                 mov     qword ptr [r10+8], 2
.text:00000000000128B6                 jl      loc_12E64
.text:00000000000128BC                 mov     [rax], r9
.text:00000000000128BF                 mov     [rax+8], rcx
.text:00000000000128C3                 jmp     loc_12785
.text:00000000000128C8 ; ---------------------------------------------------------------------------
.text:00000000000128C8
.text:00000000000128C8 loc_128C8:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:00000000000128C8                                         ; DATA XREF: .rodata:jpt_126A3↓o
.text:00000000000128C8                 mov     rax, [rdx+20h]  ; jumptable 00000000000126A3 cases 8,9,12
.text:00000000000128CC                 lea     rcx, [rdi+rdi*2]
.text:00000000000128D0                 mov     edi, 8          ; size
.text:00000000000128D5                 mov     [rsp+158h+var_148], rsi
.text:00000000000128DA                 mov     [rsp+158h+size], rdx
.text:00000000000128DE                 mov     r14, [rax+38h]
.text:00000000000128E2                 mov     rax, [r13+28h]
.text:00000000000128E6                 lea     r15, [rax+rcx*8]
.text:00000000000128EA                 mov     qword ptr [r15], 1
.text:00000000000128F1                 mov     qword ptr [r15+8], 1
.text:00000000000128F9                 call    _malloc
.text:00000000000128FE                 test    rax, rax
.text:0000000000012901                 mov     [r15+10h], rax
.text:0000000000012905                 mov     rdx, [rsp+158h+size]
.text:0000000000012909                 mov     rsi, [rsp+158h+var_148]
.text:000000000001290E                 jz      loc_12FB8
.text:0000000000012914                 mov     [rax], r14
.text:0000000000012917                 mov     r15, [rdx+8]
.text:000000000001291B                 jmp     loc_12785
.text:0000000000012920 ; ---------------------------------------------------------------------------
.text:0000000000012920
.text:0000000000012920 loc_12920:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000012920                                         ; DATA XREF: .rodata:jpt_126A3↓o
.text:0000000000012920                 cmp     qword ptr [rdx+20h], 0 ; jumptable 00000000000126A3 case 2
.text:0000000000012925                 jz      loc_12781       ; jumptable 00000000000126A3 case 16
.text:000000000001292B                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000012932                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000012939                 lea     rdi, aNodeNextNull ; "node->next == NULL"
.text:0000000000012940                 mov     edx, 59Fh       ; line
.text:0000000000012945                 call    ___assert_fail
.text:0000000000012945 ; ---------------------------------------------------------------------------
.text:000000000001294A                 align 10h
.text:0000000000012950
.text:0000000000012950 loc_12950:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000012950                                         ; DATA XREF: .rodata:jpt_126A3↓o
.text:0000000000012950                 mov     rax, [rdx+20h]  ; jumptable 00000000000126A3 case 4
.text:0000000000012954                 mov     r15, [rax+38h]
.text:0000000000012958                 mov     rax, [r13+18h]
.text:000000000001295C                 mov     [rax+rdi*8], r15
.text:0000000000012960                 cmp     byte ptr [rdx+30h], 4
.text:0000000000012964                 jnz     loc_12781       ; jumptable 00000000000126A3 case 16
.text:000000000001296A                 mov     rax, [r13+28h]
.text:000000000001296E                 lea     rcx, [rdi+rdi*2]
.text:0000000000012972                 mov     edi, 8          ; size
.text:0000000000012977                 mov     [rsp+158h+var_140], rsi
.text:000000000001297C                 mov     [rsp+158h+var_148], rdx
.text:0000000000012981                 lea     rcx, [rax+rcx*8]
.text:0000000000012985                 mov     qword ptr [rcx], 1
.text:000000000001298C                 mov     qword ptr [rcx+8], 1
.text:0000000000012994                 mov     [rsp+158h+size], rcx
.text:0000000000012998                 call    _malloc
.text:000000000001299D                 mov     rcx, [rsp+158h+size]
.text:00000000000129A1                 test    rax, rax
.text:00000000000129A4                 mov     rdx, [rsp+158h+var_148]
.text:00000000000129A9                 mov     rsi, [rsp+158h+var_140]
.text:00000000000129AE                 mov     [rcx+10h], rax
.text:00000000000129B2                 jz      loc_13000
.text:00000000000129B8                 mov     [rax], r15
.text:00000000000129BB                 mov     r15, [rdx+8]
.text:00000000000129BF                 jmp     loc_12785
.text:00000000000129C4 ; ---------------------------------------------------------------------------
.text:00000000000129C4
.text:00000000000129C4 loc_129C4:                              ; CODE XREF: re_compile_internal+3D9↑j
.text:00000000000129C4                 mov     [rsp+158h+var_A8], rsi
.text:00000000000129CC                 mov     [rsp+158h+var_A0], rsi
.text:00000000000129D4                 mov     [rsp+158h+var_10C], 0
.text:00000000000129DC                 jmp     loc_12428
.text:00000000000129DC ; ---------------------------------------------------------------------------
.text:00000000000129E1                 align 8
.text:00000000000129E8
.text:00000000000129E8 loc_129E8:                              ; CODE XREF: re_compile_internal+813↑j
.text:00000000000129E8                 mov     ecx, 1
.text:00000000000129ED                 mov     rdx, r15
.text:00000000000129F0                 mov     rsi, r13
.text:00000000000129F3                 mov     rdi, r12
.text:00000000000129F6                 mov     [rsp+158h+size], r10
.text:00000000000129FA                 call    calc_eclosure_iter
.text:00000000000129FF                 test    eax, eax
.text:0000000000012A01                 jnz     loc_122F0
.text:0000000000012A07                 mov     rax, [r13+30h]
.text:0000000000012A0B                 mov     r10, [rsp+158h+size]
.text:0000000000012A0F                 add     r15, 1
.text:0000000000012A13                 cmp     qword ptr [rax+r10+8], 0
.text:0000000000012A19                 jnz     loc_127C8
.text:0000000000012A1F                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:0000000000012A24                 call    _free
.text:0000000000012A29                 cmp     [r13+10h], r15
.text:0000000000012A2D                 jz      loc_127FF
.text:0000000000012A33                 movzx   r14d, byte ptr [rsp+158h+var_148]
.text:0000000000012A39                 jmp     loc_127D1
.text:0000000000012A3E ; ---------------------------------------------------------------------------
.text:0000000000012A3E
.text:0000000000012A3E loc_12A3E:                              ; CODE XREF: re_compile_internal+829↑j
.text:0000000000012A3E                 mov     rax, [rsp+158h+var_150]
.text:0000000000012A43                 test    byte ptr [rax+38h], 10h
.text:0000000000012A47                 jnz     short loc_12A5A
.text:0000000000012A49                 cmp     qword ptr [rax+30h], 0
.text:0000000000012A4E                 jz      short loc_12A5A
.text:0000000000012A50                 test    byte ptr [r13+0B0h], 1
.text:0000000000012A58                 jnz     short loc_12A68
.text:0000000000012A5A
.text:0000000000012A5A loc_12A5A:                              ; CODE XREF: re_compile_internal+A77↑j
.text:0000000000012A5A                                         ; re_compile_internal+A7E↑j
.text:0000000000012A5A                 cmp     qword ptr [r13+98h], 0
.text:0000000000012A62                 jz      loc_12B5B
.text:0000000000012A68
.text:0000000000012A68 loc_12A68:                              ; CODE XREF: re_compile_internal+A88↑j
.text:0000000000012A68                 lea     rdi, [rdx+rdx*2]
.text:0000000000012A6C                 mov     [rsp+158h+size], rdx
.text:0000000000012A70                 shl     rdi, 3          ; size
.text:0000000000012A74                 call    _malloc
.text:0000000000012A79                 test    rax, rax
.text:0000000000012A7C                 mov     [r13+38h], rax
.text:0000000000012A80                 jz      loc_12FCC
.text:0000000000012A86                 mov     rdx, [rsp+158h+size]
.text:0000000000012A8A                 xor     esi, esi
.text:0000000000012A8C                 xor     ecx, ecx
.text:0000000000012A8E                 test    rdx, rdx
.text:0000000000012A91                 jnz     short loc_12AA4
.text:0000000000012A93                 jmp     loc_12B5B
.text:0000000000012A93 ; ---------------------------------------------------------------------------
.text:0000000000012A98                 align 20h
.text:0000000000012AA0
.text:0000000000012AA0 loc_12AA0:                              ; CODE XREF: re_compile_internal+AF5↓j
.text:0000000000012AA0                 mov     rax, [r13+38h]
.text:0000000000012AA4
.text:0000000000012AA4 loc_12AA4:                              ; CODE XREF: re_compile_internal+AC1↑j
.text:0000000000012AA4                 pxor    xmm0, xmm0
.text:0000000000012AA8                 add     rax, rsi
.text:0000000000012AAB                 add     rcx, 1
.text:0000000000012AAF                 mov     qword ptr [rax+10h], 0
.text:0000000000012AB7                 add     rsi, 18h
.text:0000000000012ABB                 movups  xmmword ptr [rax], xmm0
.text:0000000000012ABE                 mov     rax, [r13+10h]
.text:0000000000012AC2                 cmp     rcx, rax
.text:0000000000012AC5                 jb      short loc_12AA0
.text:0000000000012AC7                 test    rax, rax
.text:0000000000012ACA                 jz      loc_12B5B
.text:0000000000012AD0                 mov     rax, [r13+30h]
.text:0000000000012AD4                 mov     [rsp+158h+var_140], 0
.text:0000000000012ADD                 mov     [rsp+158h+var_148], 0
.text:0000000000012AE6
.text:0000000000012AE6 loc_12AE6:                              ; CODE XREF: re_compile_internal+B89↓j
.text:0000000000012AE6                 mov     rcx, [rsp+158h+var_140]
.text:0000000000012AEB                 lea     rdx, [rax+rcx]
.text:0000000000012AEF                 cmp     qword ptr [rdx+8], 0
.text:0000000000012AF4                 mov     rcx, [rdx+10h]
.text:0000000000012AF8                 jle     short loc_12B44
.text:0000000000012AFA                 xor     r15d, r15d
.text:0000000000012AFD                 jmp     short loc_12B18
.text:0000000000012AFD ; ---------------------------------------------------------------------------
.text:0000000000012AFF                 align 20h
.text:0000000000012B00
.text:0000000000012B00 loc_12B00:                              ; CODE XREF: re_compile_internal+B68↓j
.text:0000000000012B00                 mov     rax, [r13+30h]
.text:0000000000012B04                 mov     rdx, [rsp+158h+var_140]
.text:0000000000012B09                 add     r15, 1
.text:0000000000012B0D                 mov     rcx, [rsp+158h+size]
.text:0000000000012B11                 cmp     r15, [rax+rdx+8]
.text:0000000000012B16                 jge     short loc_12B44
.text:0000000000012B18
.text:0000000000012B18 loc_12B18:                              ; CODE XREF: re_compile_internal+B2D↑j
.text:0000000000012B18                 mov     rax, [rcx+r15*8]
.text:0000000000012B1C                 mov     [rsp+158h+size], rcx
.text:0000000000012B20                 lea     rsi, [rax+rax*2]
.text:0000000000012B24                 mov     rax, [r13+38h]
.text:0000000000012B28                 lea     rdi, [rax+rsi*8]
.text:0000000000012B2C                 mov     rsi, [rsp+158h+var_148]
.text:0000000000012B31                 call    re_node_set_insert_last
.text:0000000000012B36                 test    al, al
.text:0000000000012B38                 jnz     short loc_12B00
.text:0000000000012B3A
.text:0000000000012B3A loc_12B3A:                              ; CODE XREF: re_compile_internal+8CF↑j
.text:0000000000012B3A                                         ; re_compile_internal+FF7↓j
.text:0000000000012B3A                 mov     eax, 0Ch
.text:0000000000012B3F                 jmp     loc_122F0
.text:0000000000012B44 ; ---------------------------------------------------------------------------
.text:0000000000012B44
.text:0000000000012B44 loc_12B44:                              ; CODE XREF: re_compile_internal+B28↑j
.text:0000000000012B44                                         ; re_compile_internal+B46↑j
.text:0000000000012B44                 add     [rsp+158h+var_148], 1
.text:0000000000012B4A                 add     [rsp+158h+var_140], 18h
.text:0000000000012B50                 mov     rdx, [rsp+158h+var_148]
.text:0000000000012B55                 cmp     rdx, [r13+10h]
.text:0000000000012B59                 jb      short loc_12AE6
.text:0000000000012B5B
.text:0000000000012B5B loc_12B5B:                              ; CODE XREF: re_compile_internal+A92↑j
.text:0000000000012B5B                                         ; re_compile_internal+AC3↑j ...
.text:0000000000012B5B                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000012B62                 mov     [rsp+158h+var_10C], 0
.text:0000000000012B6A                 shr     al, 2
.text:0000000000012B6D                 cmp     [rsp+158h+var_138], 0
.text:0000000000012B73                 setz    dl
.text:0000000000012B76                 and     al, dl
.text:0000000000012B78                 jnz     loc_12D5F
.text:0000000000012B7E
.text:0000000000012B7E loc_12B7E:                              ; CODE XREF: re_compile_internal+D99↓j
.text:0000000000012B7E                                         ; re_compile_internal+DD3↓j ...
.text:0000000000012B7E                 mov     rax, [rbx+68h]  ; jumptable 0000000000012DA3 case 6
.text:0000000000012B82                 mov     rdi, r12
.text:0000000000012B85                 mov     rax, [rax+18h]
.text:0000000000012B89                 mov     rax, [rax+38h]
.text:0000000000012B8D                 lea     rdx, [rax+rax*2]
.text:0000000000012B91                 mov     [rbx+90h], rax
.text:0000000000012B98                 mov     rax, [rbx+30h]
.text:0000000000012B9C                 lea     rsi, [rax+rdx*8]
.text:0000000000012BA0                 call    re_node_set_init_copy
.text:0000000000012BA5                 test    eax, eax
.text:0000000000012BA7                 mov     r15d, eax
.text:0000000000012BAA                 mov     [rsp+158h+var_108], eax
.text:0000000000012BAE                 jnz     loc_12CCF
.text:0000000000012BB4                 cmp     qword ptr [rbx+98h], 0
.text:0000000000012BBC                 jle     loc_12C90
.text:0000000000012BC2                 mov     r9, [rsp+158h+var_F0]
.text:0000000000012BC7                 test    r9, r9
.text:0000000000012BCA                 jle     loc_12C90
.text:0000000000012BD0                 xor     r10d, r10d
.text:0000000000012BD3                 lea     r13, [r12+10h]
.text:0000000000012BD8                 jmp     short loc_12BED
.text:0000000000012BD8 ; ---------------------------------------------------------------------------
.text:0000000000012BDA                 align 20h
.text:0000000000012BE0
.text:0000000000012BE0 loc_12BE0:                              ; CODE XREF: re_compile_internal+C37↓j
.text:0000000000012BE0                                         ; re_compile_internal+C47↓j ...
.text:0000000000012BE0                 add     r10, 1
.text:0000000000012BE4                 cmp     r9, r10
.text:0000000000012BE7                 jle     loc_12C90
.text:0000000000012BED
.text:0000000000012BED loc_12BED:                              ; CODE XREF: re_compile_internal+C08↑j
.text:0000000000012BED                                         ; re_compile_internal+CB2↓j
.text:0000000000012BED                 mov     rcx, [rsp+158h+ptr]
.text:0000000000012BF2                 mov     rsi, [rbx]
.text:0000000000012BF5                 mov     r8, [rcx+r10*8]
.text:0000000000012BF9                 mov     rdi, r8
.text:0000000000012BFC                 shl     rdi, 4
.text:0000000000012C00                 add     rdi, rsi
.text:0000000000012C03                 cmp     byte ptr [rdi+8], 4
.text:0000000000012C07                 jnz     short loc_12BE0
.text:0000000000012C09                 xor     edx, edx
.text:0000000000012C0B                 jmp     short loc_12C19
.text:0000000000012C0B ; ---------------------------------------------------------------------------
.text:0000000000012C0D                 align 10h
.text:0000000000012C10
.text:0000000000012C10 loc_12C10:                              ; CODE XREF: re_compile_internal+C58↓j
.text:0000000000012C10                                         ; re_compile_internal+C60↓j
.text:0000000000012C10                 add     rdx, 1
.text:0000000000012C14                 cmp     r9, rdx
.text:0000000000012C17                 jz      short loc_12BE0
.text:0000000000012C19
.text:0000000000012C19 loc_12C19:                              ; CODE XREF: re_compile_internal+C3B↑j
.text:0000000000012C19                 mov     rax, [rcx+rdx*8]
.text:0000000000012C1D                 shl     rax, 4
.text:0000000000012C21                 add     rax, rsi
.text:0000000000012C24                 cmp     byte ptr [rax+8], 9
.text:0000000000012C28                 jnz     short loc_12C10
.text:0000000000012C2A                 mov     r11, [rdi]
.text:0000000000012C2D                 cmp     [rax], r11
.text:0000000000012C30                 jnz     short loc_12C10
.text:0000000000012C32                 mov     rdx, [rbx+28h]
.text:0000000000012C36                 lea     rax, [r8+r8*2]
.text:0000000000012C3A                 mov     rsi, r13
.text:0000000000012C3D                 mov     rdi, r9
.text:0000000000012C40                 lea     rax, [rdx+rax*8]
.text:0000000000012C44                 mov     rax, [rax+10h]
.text:0000000000012C48                 mov     r11, [rax]
.text:0000000000012C4B                 mov     rdx, r11
.text:0000000000012C4E                 call    re_node_set_contains_isra_3
.text:0000000000012C53                 test    rax, rax
.text:0000000000012C56                 jnz     short loc_12BE0
.text:0000000000012C58                 mov     rax, [rbx+30h]
.text:0000000000012C5C                 lea     rdx, [r11+r11*2]
.text:0000000000012C60                 mov     rdi, r12
.text:0000000000012C63                 lea     rsi, [rax+rdx*8]
.text:0000000000012C67                 call    re_node_set_merge
.text:0000000000012C6C                 test    eax, eax
.text:0000000000012C6E                 jnz     loc_12FB0
.text:0000000000012C74                 mov     r9, [rsp+158h+var_F0]
.text:0000000000012C79                 mov     r10d, 1
.text:0000000000012C7F                 cmp     r9, r10
.text:0000000000012C82                 jg      loc_12BED
.text:0000000000012C88                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000012C90
.text:0000000000012C90 loc_12C90:                              ; CODE XREF: re_compile_internal+BEC↑j
.text:0000000000012C90                                         ; re_compile_internal+BFA↑j ...
.text:0000000000012C90                 mov     rdi, [rsp+158h+var_130]
.text:0000000000012C95                 xor     ecx, ecx
.text:0000000000012C97                 mov     rdx, r12
.text:0000000000012C9A                 mov     rsi, rbx
.text:0000000000012C9D                 call    re_acquire_state_context
.text:0000000000012CA2                 test    rax, rax
.text:0000000000012CA5                 mov     [rbx+48h], rax
.text:0000000000012CA9                 jz      loc_12E12
.text:0000000000012CAF                 cmp     byte ptr [rax+68h], 0
.text:0000000000012CB3                 js      loc_12DB1
.text:0000000000012CB9                 mov     [rbx+60h], rax
.text:0000000000012CBD                 mov     [rbx+58h], rax
.text:0000000000012CC1                 mov     [rbx+50h], rax
.text:0000000000012CC5
.text:0000000000012CC5 loc_12CC5:                              ; CODE XREF: re_compile_internal+E3C↓j
.text:0000000000012CC5                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:0000000000012CCA                 call    _free
.text:0000000000012CCF
.text:0000000000012CCF loc_12CCF:                              ; CODE XREF: re_compile_internal+BDE↑j
.text:0000000000012CCF                                         ; re_compile_internal+E47↓j ...
.text:0000000000012CCF                 mov     rax, [rsp+158h+var_150]
.text:0000000000012CD4                 mov     [rsp+158h+var_10C], r15d
.text:0000000000012CD9                 mov     r13, [rax]
.text:0000000000012CDC                 mov     rdi, [r13+70h]  ; ptr
.text:0000000000012CE0                 test    rdi, rdi
.text:0000000000012CE3                 jz      short loc_12CF8
.text:0000000000012CE5                 nop     dword ptr [rax]
.text:0000000000012CE8
.text:0000000000012CE8 loc_12CE8:                              ; CODE XREF: re_compile_internal+D26↓j
.text:0000000000012CE8                 mov     r12, [rdi]
.text:0000000000012CEB                 call    _free
.text:0000000000012CF0                 test    r12, r12
.text:0000000000012CF3                 mov     rdi, r12
.text:0000000000012CF6                 jnz     short loc_12CE8
.text:0000000000012CF8
.text:0000000000012CF8 loc_12CF8:                              ; CODE XREF: re_compile_internal+D13↑j
.text:0000000000012CF8                 mov     rdi, [r13+20h]  ; ptr
.text:0000000000012CFC                 mov     qword ptr [r13+70h], 0
.text:0000000000012D04                 mov     dword ptr [r13+80h], 0Fh
.text:0000000000012D0F                 mov     qword ptr [r13+68h], 0
.text:0000000000012D17                 call    _free
.text:0000000000012D1C                 mov     qword ptr [r13+20h], 0
.text:0000000000012D24                 mov     rdi, rbp
.text:0000000000012D27                 call    re_string_destruct
.text:0000000000012D2C                 mov     eax, [rsp+158h+var_10C]
.text:0000000000012D30                 test    eax, eax
.text:0000000000012D32                 jz      loc_1236C
.text:0000000000012D38                 jmp     loc_1234C
.text:0000000000012D3D ; ---------------------------------------------------------------------------
.text:0000000000012D3D
.text:0000000000012D3D loc_12D3D:                              ; CODE XREF: re_compile_internal+5AD↑j
.text:0000000000012D3D                                         ; re_compile_internal+5B6↑j ...
.text:0000000000012D3D                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000012D45                 jmp     loc_122FC
.text:0000000000012D4A ; ---------------------------------------------------------------------------
.text:0000000000012D4A
.text:0000000000012D4A loc_12D4A:                              ; CODE XREF: re_compile_internal+3C8↑j
.text:0000000000012D4A                 mov     rdi, rbp
.text:0000000000012D4D                 call    build_wcs_buffer
.text:0000000000012D52                 mov     [rsp+158h+var_10C], 0
.text:0000000000012D5A                 jmp     loc_12428
.text:0000000000012D5F ; ---------------------------------------------------------------------------
.text:0000000000012D5F
.text:0000000000012D5F loc_12D5F:                              ; CODE XREF: re_compile_internal+BA8↑j
.text:0000000000012D5F                 mov     rcx, [rsp+158h+var_150]
.text:0000000000012D64                 cmp     qword ptr [rcx+28h], 0
.text:0000000000012D69                 jnz     loc_12B7E       ; jumptable 0000000000012DA3 case 6
.text:0000000000012D6F                 mov     r10, [rbx+10h]
.text:0000000000012D73                 test    r10, r10
.text:0000000000012D76                 jz      loc_1302A
.text:0000000000012D7C                 mov     rsi, [rbx]
.text:0000000000012D7F                 lea     r9, jpt_12DA3
.text:0000000000012D86                 xor     r8d, r8d
.text:0000000000012D89                 xor     edx, edx
.text:0000000000012D8B                 mov     rcx, rsi
.text:0000000000012D8E
.text:0000000000012D8E loc_12D8E:                              ; CODE XREF: re_compile_internal+F47↓j
.text:0000000000012D8E                 cmp     byte ptr [rcx+8], 0Ch ; switch 13 cases
.text:0000000000012D92                 ja      def_12DA3       ; jumptable 0000000000012DA3 default case, cases 0,7
.text:0000000000012D98                 movzx   edi, byte ptr [rcx+8]
.text:0000000000012D9C                 movsxd  rdi, ds:(jpt_12DA3 - 1548Ch)[r9+rdi*4]
.text:0000000000012DA0                 add     rdi, r9
.text:0000000000012DA3                 jmp     rdi             ; switch jump
.text:0000000000012DA5 ; ---------------------------------------------------------------------------
.text:0000000000012DA5
.text:0000000000012DA5 loc_12DA5:                              ; CODE XREF: re_compile_internal+EE↑j
.text:0000000000012DA5                 xor     ebp, ebp
.text:0000000000012DA7                 mov     esi, 1
.text:0000000000012DAC                 jmp     loc_120DD
.text:0000000000012DB1 ; ---------------------------------------------------------------------------
.text:0000000000012DB1
.text:0000000000012DB1 loc_12DB1:                              ; CODE XREF: re_compile_internal+CE3↑j
.text:0000000000012DB1                 mov     r14, [rsp+158h+var_130]
.text:0000000000012DB6                 mov     ecx, 1
.text:0000000000012DBB                 mov     rdx, r12
.text:0000000000012DBE                 mov     rsi, rbx
.text:0000000000012DC1                 mov     rdi, r14
.text:0000000000012DC4                 call    re_acquire_state_context
.text:0000000000012DC9                 mov     ecx, 2
.text:0000000000012DCE                 mov     rdx, r12
.text:0000000000012DD1                 mov     rsi, rbx
.text:0000000000012DD4                 mov     rdi, r14
.text:0000000000012DD7                 mov     [rbx+50h], rax
.text:0000000000012DDB                 call    re_acquire_state_context
.text:0000000000012DE0                 mov     ecx, 6
.text:0000000000012DE5                 mov     [rbx+58h], rax
.text:0000000000012DE9                 mov     rdx, r12
.text:0000000000012DEC                 mov     rsi, rbx
.text:0000000000012DEF                 mov     rdi, r14
.text:0000000000012DF2                 call    re_acquire_state_context
.text:0000000000012DF7                 cmp     qword ptr [rbx+50h], 0
.text:0000000000012DFC                 mov     [rbx+60h], rax
.text:0000000000012E00                 jz      short loc_12E12
.text:0000000000012E02                 cmp     qword ptr [rbx+58h], 0
.text:0000000000012E07                 jz      short loc_12E12
.text:0000000000012E09                 test    rax, rax
.text:0000000000012E0C                 jnz     loc_12CC5
.text:0000000000012E12
.text:0000000000012E12 loc_12E12:                              ; CODE XREF: re_compile_internal+CD9↑j
.text:0000000000012E12                                         ; re_compile_internal+E30↑j ...
.text:0000000000012E12                 mov     r15d, [rsp+158h+var_108]
.text:0000000000012E17                 jmp     loc_12CCF
.text:0000000000012E1C ; ---------------------------------------------------------------------------
.text:0000000000012E1C
.text:0000000000012E1C loc_12E1C:                              ; CODE XREF: re_compile_internal+85B↑j
.text:0000000000012E1C                 mov     rax, [rdx+20h]
.text:0000000000012E20                 mov     r9, [rax+38h]
.text:0000000000012E24                 jmp     loc_12839
.text:0000000000012E29 ; ---------------------------------------------------------------------------
.text:0000000000012E29
.text:0000000000012E29 loc_12E29:                              ; CODE XREF: re_compile_internal+846↑j
.text:0000000000012E29                 mov     rax, [rdx+20h]
.text:0000000000012E2D                 mov     rcx, [rax+38h]
.text:0000000000012E31                 jmp     loc_12824
.text:0000000000012E36 ; ---------------------------------------------------------------------------
.text:0000000000012E36
.text:0000000000012E36 loc_12E36:                              ; CODE XREF: re_compile_internal+6C↑j
.text:0000000000012E36                 mov     rdi, rbx        ; ptr
.text:0000000000012E39                 mov     esi, 0E8h       ; size
.text:0000000000012E3E                 call    _realloc
.text:0000000000012E43                 test    rax, rax
.text:0000000000012E46                 mov     rbx, rax
.text:0000000000012E49                 jz      loc_12FE1
.text:0000000000012E4F                 mov     rax, [rsp+158h+var_150]
.text:0000000000012E54                 mov     qword ptr [rax+8], 0E8h
.text:0000000000012E5C                 mov     [rax], rbx
.text:0000000000012E5F                 jmp     loc_12042
.text:0000000000012E64 ; ---------------------------------------------------------------------------
.text:0000000000012E64
.text:0000000000012E64 loc_12E64:                              ; CODE XREF: re_compile_internal+8E6↑j
.text:0000000000012E64                 mov     [rax], rcx
.text:0000000000012E67                 mov     [rax+8], r9
.text:0000000000012E6B                 jmp     loc_12785
.text:0000000000012E70 ; ---------------------------------------------------------------------------
.text:0000000000012E70
.text:0000000000012E70 loc_12E70:                              ; CODE XREF: re_compile_internal+2E9↑j
.text:0000000000012E70                                         ; re_compile_internal+309↑j
.text:0000000000012E70                 mov     [rsp+158h+var_10C], 0
.text:0000000000012E78                 jmp     loc_12428
.text:0000000000012E7D ; ---------------------------------------------------------------------------
.text:0000000000012E7D
.text:0000000000012E7D loc_12E7D:                              ; CODE XREF: re_compile_internal+8D8↑j
.text:0000000000012E7D                 mov     qword ptr [r10+8], 1
.text:0000000000012E85                 mov     [rax], rcx
.text:0000000000012E88                 jmp     loc_12785
.text:0000000000012E8D ; ---------------------------------------------------------------------------
.text:0000000000012E8D
.text:0000000000012E8D loc_12E8D:                              ; CODE XREF: re_compile_internal+2CB↑j
.text:0000000000012E8D                 mov     rdi, rbp
.text:0000000000012E90                 call    build_upper_buffer
.text:0000000000012E95                 mov     [rsp+158h+var_10C], 0
.text:0000000000012E9D                 jmp     loc_12428
.text:0000000000012EA2 ; ---------------------------------------------------------------------------
.text:0000000000012EA2
.text:0000000000012EA2 loc_12EA2:                              ; CODE XREF: re_compile_internal+538↑j
.text:0000000000012EA2                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000012EAA                 mov     qword ptr [rbx+68h], 0
.text:0000000000012EB2                 jmp     loc_122FC
.text:0000000000012EB7 ; ---------------------------------------------------------------------------
.text:0000000000012EB7
.text:0000000000012EB7 loc_12EB7:                              ; CODE XREF: re_compile_internal+4BE↑j
.text:0000000000012EB7                 test    rax, rax
.text:0000000000012EBA                 jz      loc_12FEB
.text:0000000000012EC0                 lea     r13, [r15+70h]
.text:0000000000012EC4                 lea     r12, [rsp+158h+var_F8]
.text:0000000000012EC9                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:0000000000012ECD                 xor     ecx, ecx
.text:0000000000012ECF                 xor     edx, edx
.text:0000000000012ED1                 mov     rsi, r15
.text:0000000000012ED4                 mov     r8, r12
.text:0000000000012ED7                 mov     rdi, r13
.text:0000000000012EDA                 mov     [rsp+158h+size], rax
.text:0000000000012EDE                 mov     byte ptr [rsp+158h+var_F0], 2
.text:0000000000012EE3                 call    create_token_tree_isra_16
.text:0000000000012EE8                 mov     r9, [rsp+158h+size]
.text:0000000000012EEC                 mov     r11, rax
.text:0000000000012EEF                 jmp     loc_124CB
.text:0000000000012EF4 ; ---------------------------------------------------------------------------
.text:0000000000012EF4
.text:0000000000012EF4 loc_12EF4:                              ; CODE XREF: re_compile_internal+633↑j
.text:0000000000012EF4                                         ; re_compile_internal+657↑j
.text:0000000000012EF4                 call    _free
.text:0000000000012EF9                 mov     qword ptr [r13+0E0h], 0
.text:0000000000012F04                 jmp     loc_1262D
.text:0000000000012F09 ; ---------------------------------------------------------------------------
.text:0000000000012F09
.text:0000000000012F09 loc_12F09:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000012F09                                         ; DATA XREF: .rodata:jpt_12DA3↓o
.text:0000000000012F09                 mov     r8d, eax        ; jumptable 0000000000012DA3 case 5
.text:0000000000012F0C
.text:0000000000012F0C loc_12F0C:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000012F0C                                         ; re_compile_internal+F97↓j ...
.text:0000000000012F0C                 add     rdx, 1          ; jumptable 0000000000012DA3 cases 2,4,8-11
.text:0000000000012F10                 add     rcx, 10h
.text:0000000000012F14                 cmp     rdx, r10
.text:0000000000012F17                 jnz     loc_12D8E
.text:0000000000012F1D                 or      r14b, r8b
.text:0000000000012F20                 jz      loc_1302A
.text:0000000000012F26                 mov     rax, rdx
.text:0000000000012F29                 shl     rax, 4
.text:0000000000012F2D                 add     rax, rsi
.text:0000000000012F30                 jmp     short loc_12F48
.text:0000000000012F32 ; ---------------------------------------------------------------------------
.text:0000000000012F32
.text:0000000000012F32 loc_12F32:                              ; CODE XREF: re_compile_internal+F7F↓j
.text:0000000000012F32                 cmp     dl, 5
.text:0000000000012F35                 jnz     short loc_12F3B
.text:0000000000012F37                 mov     byte ptr [rsi+8], 7
.text:0000000000012F3B
.text:0000000000012F3B loc_12F3B:                              ; CODE XREF: re_compile_internal+F65↑j
.text:0000000000012F3B                                         ; re_compile_internal+F84↓j ...
.text:0000000000012F3B                 add     rsi, 10h
.text:0000000000012F3F                 cmp     rax, rsi
.text:0000000000012F42                 jz      loc_13027
.text:0000000000012F48
.text:0000000000012F48 loc_12F48:                              ; CODE XREF: re_compile_internal+F60↑j
.text:0000000000012F48                 movzx   edx, byte ptr [rsi+8]
.text:0000000000012F4C                 cmp     dl, 1
.text:0000000000012F4F                 jnz     short loc_12F32
.text:0000000000012F51                 cmp     byte ptr [rsi], 0
.text:0000000000012F54                 jns     short loc_12F3B
.text:0000000000012F56                 and     byte ptr [rsi+0Ah], 0DFh
.text:0000000000012F5A                 jmp     short loc_12F3B
.text:0000000000012F5A ; ---------------------------------------------------------------------------
.text:0000000000012F5C                 align 20h
.text:0000000000012F60
.text:0000000000012F60 loc_12F60:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000012F60                                         ; DATA XREF: .rodata:jpt_12DA3↓o
.text:0000000000012F60                 cmp     byte ptr [rcx], 0 ; jumptable 0000000000012DA3 case 1
.text:0000000000012F63                 cmovs   r14d, eax
.text:0000000000012F67                 jmp     short loc_12F0C ; jumptable 0000000000012DA3 cases 2,4,8-11
.text:0000000000012F69 ; ---------------------------------------------------------------------------
.text:0000000000012F69
.text:0000000000012F69 loc_12F69:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000012F69                                         ; DATA XREF: .rodata:jpt_12DA3↓o
.text:0000000000012F69                 mov     edi, [rcx]      ; jumptable 0000000000012DA3 case 12
.text:0000000000012F6B                 cmp     edi, 20h ; ' '
.text:0000000000012F6E                 jz      short loc_12F0C ; jumptable 0000000000012DA3 cases 2,4,8-11
.text:0000000000012F70                 jbe     loc_13019
.text:0000000000012F76                 cmp     edi, 40h ; '@'
.text:0000000000012F79                 jz      short loc_12F0C ; jumptable 0000000000012DA3 cases 2,4,8-11
.text:0000000000012F7B                 add     edi, 0FFFFFF80h
.text:0000000000012F7E                 jz      short loc_12F0C ; jumptable 0000000000012DA3 cases 2,4,8-11
.text:0000000000012F80                 jmp     loc_12B7E       ; jumptable 0000000000012DA3 case 6
.text:0000000000012F80 ; ---------------------------------------------------------------------------
.text:0000000000012F85                 align 8
.text:0000000000012F88
.text:0000000000012F88 loc_12F88:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000012F88                                         ; DATA XREF: .rodata:jpt_12DA3↓o
.text:0000000000012F88                 mov     rdi, [rcx]      ; jumptable 0000000000012DA3 case 3
.text:0000000000012F8B                 cmp     qword ptr [rdi+10h], 0
.text:0000000000012F90                 jnz     loc_12B7E       ; jumptable 0000000000012DA3 case 6
.text:0000000000012F96                 cmp     qword ptr [rdi+18h], 0
.text:0000000000012F9B                 jz      loc_12F0C       ; jumptable 0000000000012DA3 cases 2,4,8-11
.text:0000000000012FA1                 jmp     loc_12B7E       ; jumptable 0000000000012DA3 case 6
.text:0000000000012FA1 ; ---------------------------------------------------------------------------
.text:0000000000012FA6                 align 10h
.text:0000000000012FB0
.text:0000000000012FB0 loc_12FB0:                              ; CODE XREF: re_compile_internal+C9E↑j
.text:0000000000012FB0                 mov     r15d, eax
.text:0000000000012FB3                 jmp     loc_12CCF
.text:0000000000012FB8 ; ---------------------------------------------------------------------------
.text:0000000000012FB8
.text:0000000000012FB8 loc_12FB8:                              ; CODE XREF: re_compile_internal+93E↑j
.text:0000000000012FB8                 mov     qword ptr [r15+8], 0
.text:0000000000012FC0                 mov     qword ptr [r15], 0
.text:0000000000012FC7                 jmp     loc_12B3A
.text:0000000000012FCC ; ---------------------------------------------------------------------------
.text:0000000000012FCC
.text:0000000000012FCC loc_12FCC:                              ; CODE XREF: re_compile_internal+AB0↑j
.text:0000000000012FCC                 mov     rax, [rsp+158h+var_150]
.text:0000000000012FD1                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000012FD9                 mov     r13, [rax]
.text:0000000000012FDC                 jmp     loc_122FC
.text:0000000000012FE1 ; ---------------------------------------------------------------------------
.text:0000000000012FE1
.text:0000000000012FE1 loc_12FE1:                              ; CODE XREF: re_compile_internal+E79↑j
.text:0000000000012FE1                 mov     eax, 0Ch
.text:0000000000012FE6                 jmp     loc_1236C
.text:0000000000012FEB ; ---------------------------------------------------------------------------
.text:0000000000012FEB
.text:0000000000012FEB loc_12FEB:                              ; CODE XREF: re_compile_internal+EEA↑j
.text:0000000000012FEB                 mov     rax, [rsp+158h+var_150]
.text:0000000000012FF0                 mov     qword ptr [rbx+68h], 0
.text:0000000000012FF8                 mov     r13, [rax]
.text:0000000000012FFB                 jmp     loc_122FC
.text:0000000000013000 ; ---------------------------------------------------------------------------
.text:0000000000013000
.text:0000000000013000 loc_13000:                              ; CODE XREF: re_compile_internal+9E2↑j
.text:0000000000013000                 mov     qword ptr [rcx+8], 0
.text:0000000000013008                 mov     qword ptr [rcx], 0
.text:000000000001300F                 mov     eax, 0Ch
.text:0000000000013014                 jmp     loc_122F0
.text:0000000000013019 ; ---------------------------------------------------------------------------
.text:0000000000013019
.text:0000000000013019 loc_13019:                              ; CODE XREF: re_compile_internal+FA0↑j
.text:0000000000013019                 cmp     edi, 10h
.text:000000000001301C                 jz      loc_12F0C       ; jumptable 0000000000012DA3 cases 2,4,8-11
.text:0000000000013022                 jmp     loc_12B7E       ; jumptable 0000000000012DA3 case 6
.text:0000000000013027 ; ---------------------------------------------------------------------------
.text:0000000000013027
.text:0000000000013027 loc_13027:                              ; CODE XREF: re_compile_internal+F72↑j
.text:0000000000013027                 mov     r14d, r8d
.text:000000000001302A
.text:000000000001302A loc_1302A:                              ; CODE XREF: re_compile_internal+DA6↑j
.text:000000000001302A                                         ; re_compile_internal+F50↑j
.text:000000000001302A                 cmp     qword ptr [rbx+98h], 0
.text:0000000000013032                 movzx   edx, byte ptr [rbx+0B0h]
.text:0000000000013039                 mov     dword ptr [rbx+0B4h], 1
.text:0000000000013043                 setnle  al
.text:0000000000013046                 and     edx, 0FFFFFFF9h
.text:0000000000013049                 or      eax, r14d
.text:000000000001304C                 and     eax, 1
.text:000000000001304F                 add     eax, eax
.text:0000000000013051                 or      eax, edx
.text:0000000000013053                 mov     [rbx+0B0h], al
.text:0000000000013059                 jmp     loc_12B7E       ; jumptable 0000000000012DA3 case 6
.text:000000000001305E ; ---------------------------------------------------------------------------
.text:000000000001305E
.text:000000000001305E def_12DA3:                              ; CODE XREF: re_compile_internal+DC2↑j
.text:000000000001305E                                         ; re_compile_internal+DD3↑j
.text:000000000001305E                                         ; DATA XREF: ...
.text:000000000001305E                 call    _abort          ; jumptable 0000000000012DA3 default case, cases 0,7
.text:0000000000013063 ; ---------------------------------------------------------------------------
.text:0000000000013063
.text:0000000000013063 loc_13063:                              ; CODE XREF: re_compile_internal+875↑j
.text:0000000000013063                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:000000000001306A                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000013071                 lea     rdi, aRight1    ; "right > -1"
.text:0000000000013078                 mov     edx, 5B0h       ; line
.text:000000000001307D                 call    ___assert_fail
.text:0000000000013082 ; ---------------------------------------------------------------------------
.text:0000000000013082
.text:0000000000013082 loc_13082:                              ; CODE XREF: re_compile_internal+79B↑j
.text:0000000000013082                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000013089                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000013090                 lea     rdi, aIsEpsilonNodeN ; "!IS_EPSILON_NODE (node->token.type)"
.text:0000000000013097                 mov     edx, 5C2h       ; line
.text:000000000001309C                 call    ___assert_fail
.text:00000000000130A1 ; ---------------------------------------------------------------------------
.text:00000000000130A1
.text:00000000000130A1 loc_130A1:                              ; CODE XREF: re_compile_internal+86C↑j
.text:00000000000130A1                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:00000000000130A8                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regcomp.c"
.text:00000000000130AF                 lea     rdi, aLeft1     ; "left > -1"
.text:00000000000130B6                 mov     edx, 5AFh       ; line
.text:00000000000130BB                 call    ___assert_fail
.text:00000000000130C0 ; ---------------------------------------------------------------------------
.text:00000000000130C0
.text:00000000000130C0 loc_130C0:                              ; CODE XREF: re_compile_internal+3AD↑j
.text:00000000000130C0                 call    ___stack_chk_fail
.text:00000000000130C0 ; } // starts at 11FD0
.text:00000000000130C0 re_compile_internal endp
.text:00000000000130C0
.text:00000000000130C0 ; ---------------------------------------------------------------------------
.text:00000000000130C5                 align 10h
.text:00000000000130D0
.text:00000000000130D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000130D0
.text:00000000000130D0
.text:00000000000130D0                 public rpl_re_compile_pattern
.text:00000000000130D0 rpl_re_compile_pattern proc near        ; CODE XREF: main+1A7↑p
.text:00000000000130D0 ; __unwind {
.text:00000000000130D0                 sub     rsp, 8
.text:00000000000130D4                 mov     rcx, cs:rpl_re_syntax_options
.text:00000000000130DB                 mov     r8, rdi
.text:00000000000130DE                 mov     rdi, rdx
.text:00000000000130E1                 mov     rax, rcx
.text:00000000000130E4                 shr     rax, 19h
.text:00000000000130E8                 and     eax, 1
.text:00000000000130EB                 shl     eax, 4
.text:00000000000130EE                 mov     edx, eax
.text:00000000000130F0                 movzx   eax, byte ptr [rdi+38h]
.text:00000000000130F4                 and     eax, 0FFFFFFEFh
.text:00000000000130F7                 or      eax, edx
.text:00000000000130F9                 mov     rdx, rsi
.text:00000000000130FC                 mov     rsi, r8
.text:00000000000130FF                 or      eax, 0FFFFFF80h
.text:0000000000013102                 mov     [rdi+38h], al
.text:0000000000013105                 call    re_compile_internal
.text:000000000001310A                 test    eax, eax
.text:000000000001310C                 jz      short loc_13138
.text:000000000001310E                 lea     rdx, __re_error_msgid_idx
.text:0000000000013115                 cdqe
.text:0000000000013117                 lea     rsi, __re_error_msgid ; "Success"
.text:000000000001311E                 xor     edi, edi        ; domainname
.text:0000000000013120                 add     rsi, [rdx+rax*8] ; msgid
.text:0000000000013124                 mov     edx, 5          ; category
.text:0000000000013129                 add     rsp, 8
.text:000000000001312D                 jmp     _dcgettext
.text:000000000001312D ; ---------------------------------------------------------------------------
.text:0000000000013132                 align 8
.text:0000000000013138
.text:0000000000013138 loc_13138:                              ; CODE XREF: rpl_re_compile_pattern+3C↑j
.text:0000000000013138                 xor     eax, eax
.text:000000000001313A                 add     rsp, 8
.text:000000000001313E                 retn
.text:000000000001313E ; } // starts at 130D0
.text:000000000001313E rpl_re_compile_pattern endp
.text:000000000001313E
.text:000000000001313E ; ---------------------------------------------------------------------------
.text:000000000001313F                 align 20h
.text:0000000000013140
.text:0000000000013140 ; =============== S U B R O U T I N E =======================================
.text:0000000000013140
.text:0000000000013140
.text:0000000000013140                 public rpl_re_set_syntax
.text:0000000000013140 rpl_re_set_syntax proc near
.text:0000000000013140 ; __unwind {
.text:0000000000013140                 mov     rax, cs:rpl_re_syntax_options
.text:0000000000013147                 mov     cs:rpl_re_syntax_options, rdi
.text:000000000001314E                 retn
.text:000000000001314E ; } // starts at 13140
.text:000000000001314E rpl_re_set_syntax endp
.text:000000000001314E
.text:000000000001314E ; ---------------------------------------------------------------------------
.text:000000000001314F                 align 10h
.text:0000000000013150
.text:0000000000013150 ; =============== S U B R O U T I N E =======================================
.text:0000000000013150
.text:0000000000013150
.text:0000000000013150                 public rpl_re_compile_fastmap
.text:0000000000013150 rpl_re_compile_fastmap proc near        ; CODE XREF: re_search_stub+297↓p
.text:0000000000013150                                         ; rpl_regcomp+B7↓p
.text:0000000000013150 ; __unwind {
.text:0000000000013150                 push    r12
.text:0000000000013152                 push    rbp
.text:0000000000013153                 xor     eax, eax
.text:0000000000013155                 push    rbx
.text:0000000000013156                 mov     rbp, [rdi+20h]
.text:000000000001315A                 mov     rbx, rdi
.text:000000000001315D                 mov     r12, [rdi]
.text:0000000000013160                 lea     rdi, [rbp+8]
.text:0000000000013164                 mov     rcx, rbp
.text:0000000000013167                 mov     qword ptr [rbp+0], 0
.text:000000000001316F                 mov     qword ptr [rbp+0F8h], 0
.text:000000000001317A                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000001317E                 sub     rcx, rdi
.text:0000000000013181                 add     ecx, 100h
.text:0000000000013187                 shr     ecx, 3
.text:000000000001318A                 rep stosq
.text:000000000001318D                 mov     rcx, rbp
.text:0000000000013190                 mov     rdi, rbx
.text:0000000000013193                 mov     rsi, [r12+48h]
.text:0000000000013198                 lea     rdx, [rsi+18h]
.text:000000000001319C                 add     rsi, 10h
.text:00000000000131A0                 call    re_compile_fastmap_iter_isra_30
.text:00000000000131A5                 mov     rax, [r12+50h]
.text:00000000000131AA                 cmp     [r12+48h], rax
.text:00000000000131AF                 jz      short loc_131C9
.text:00000000000131B1                 lea     rdx, [rax+18h]
.text:00000000000131B5                 lea     rsi, [rax+10h]
.text:00000000000131B9                 mov     rcx, rbp
.text:00000000000131BC                 mov     rdi, rbx
.text:00000000000131BF                 call    re_compile_fastmap_iter_isra_30
.text:00000000000131C4                 mov     rax, [r12+48h]
.text:00000000000131C9
.text:00000000000131C9 loc_131C9:                              ; CODE XREF: rpl_re_compile_fastmap+5F↑j
.text:00000000000131C9                 mov     rsi, [r12+58h]
.text:00000000000131CE                 cmp     rsi, rax
.text:00000000000131D1                 jz      short loc_131EB
.text:00000000000131D3                 lea     rdx, [rsi+18h]
.text:00000000000131D7                 mov     rcx, rbp
.text:00000000000131DA                 add     rsi, 10h
.text:00000000000131DE                 mov     rdi, rbx
.text:00000000000131E1                 call    re_compile_fastmap_iter_isra_30
.text:00000000000131E6                 mov     rax, [r12+48h]
.text:00000000000131EB
.text:00000000000131EB loc_131EB:                              ; CODE XREF: rpl_re_compile_fastmap+81↑j
.text:00000000000131EB                 mov     rsi, [r12+60h]
.text:00000000000131F0                 cmp     rsi, rax
.text:00000000000131F3                 jz      short loc_13208
.text:00000000000131F5                 lea     rdx, [rsi+18h]
.text:00000000000131F9                 mov     rcx, rbp
.text:00000000000131FC                 add     rsi, 10h
.text:0000000000013200                 mov     rdi, rbx
.text:0000000000013203                 call    re_compile_fastmap_iter_isra_30
.text:0000000000013208
.text:0000000000013208 loc_13208:                              ; CODE XREF: rpl_re_compile_fastmap+A3↑j
.text:0000000000013208                 or      byte ptr [rbx+38h], 8
.text:000000000001320C                 xor     eax, eax
.text:000000000001320E                 pop     rbx
.text:000000000001320F                 pop     rbp
.text:0000000000013210                 pop     r12
.text:0000000000013212                 retn
.text:0000000000013212 ; } // starts at 13150
.text:0000000000013212 rpl_re_compile_fastmap endp
.text:0000000000013212
.text:0000000000013212 ; ---------------------------------------------------------------------------
.text:0000000000013213                 align 20h
.text:0000000000013220
.text:0000000000013220 ; =============== S U B R O U T I N E =======================================
.text:0000000000013220
.text:0000000000013220
.text:0000000000013220 re_search_stub  proc near               ; CODE XREF: re_search_2_stub+88↓p
.text:0000000000013220                                         ; rpl_re_match+E↓p ...
.text:0000000000013220
.text:0000000000013220 size            = qword ptr -60h
.text:0000000000013220 ptr             = qword ptr -58h
.text:0000000000013220 var_50          = qword ptr -50h
.text:0000000000013220 var_48          = qword ptr -48h
.text:0000000000013220 var_40          = dword ptr -40h
.text:0000000000013220 var_3C          = dword ptr -3Ch
.text:0000000000013220 arg_0           = qword ptr  8
.text:0000000000013220 arg_8           = dword ptr  10h
.text:0000000000013220
.text:0000000000013220 ; __unwind {
.text:0000000000013220                 push    r15
.text:0000000000013222                 push    r14
.text:0000000000013224                 mov     rax, r8
.text:0000000000013227                 push    r13
.text:0000000000013229                 push    r12
.text:000000000001322B                 add     r8, rcx
.text:000000000001322E                 push    rbp
.text:000000000001322F                 push    rbx
.text:0000000000013230                 sub     rsp, 38h
.text:0000000000013234                 test    rcx, rcx
.text:0000000000013237                 mov     ebx, [rsp+68h+arg_8]
.text:000000000001323B                 mov     r12, [rsp+68h+arg_0]
.text:0000000000013240                 mov     [rsp+68h+var_40], ebx
.text:0000000000013244                 js      loc_13580
.text:000000000001324A                 cmp     rcx, rdx
.text:000000000001324D                 jg      loc_13580
.text:0000000000013253                 cmp     r8, rdx
.text:0000000000013256                 mov     rbx, rcx
.text:0000000000013259                 mov     r15, rdi
.text:000000000001325C                 jg      loc_134E0
.text:0000000000013262                 test    rax, rax
.text:0000000000013265                 js      short loc_13270
.text:0000000000013267                 cmp     rcx, r8
.text:000000000001326A                 jg      loc_134E0
.text:0000000000013270
.text:0000000000013270 loc_13270:                              ; CODE XREF: re_search_stub+45↑j
.text:0000000000013270                 test    r8, r8
.text:0000000000013273                 js      loc_13558
.text:0000000000013279                 test    rax, rax
.text:000000000001327C                 jns     short loc_13287
.text:000000000001327E                 cmp     rbx, r8
.text:0000000000013281                 jle     loc_13558
.text:0000000000013287
.text:0000000000013287 loc_13287:                              ; CODE XREF: re_search_stub+5C↑j
.text:0000000000013287                                         ; re_search_stub+2C3↓j
.text:0000000000013287                 movzx   eax, byte ptr [r15+38h]
.text:000000000001328C                 mov     r13d, eax
.text:000000000001328F                 shr     r13b, 5
.text:0000000000013293                 mov     edi, r13d
.text:0000000000013296                 and     edi, 3
.text:0000000000013299                 cmp     r8, rbx
.text:000000000001329C                 mov     [rsp+68h+var_3C], edi
.text:00000000000132A0                 jle     short loc_132B1
.text:00000000000132A2                 cmp     qword ptr [r15+20h], 0
.text:00000000000132A7                 jz      short loc_132B1
.text:00000000000132A9                 test    al, 8
.text:00000000000132AB                 jz      loc_134A0
.text:00000000000132B1
.text:00000000000132B1 loc_132B1:                              ; CODE XREF: re_search_stub+80↑j
.text:00000000000132B1                                         ; re_search_stub+87↑j ...
.text:00000000000132B1                 test    al, 10h
.text:00000000000132B3                 jnz     loc_13480
.text:00000000000132B9                 test    r12, r12
.text:00000000000132BC                 jz      loc_13480
.text:00000000000132C2                 and     eax, 6
.text:00000000000132C5                 mov     rcx, [r15+30h]
.text:00000000000132C9                 cmp     al, 4
.text:00000000000132CB                 jz      loc_13460
.text:00000000000132D1
.text:00000000000132D1 loc_132D1:                              ; CODE XREF: re_search_stub+247↓j
.text:00000000000132D1                 lea     r14, [rcx+1]
.text:00000000000132D5                 mov     r13, r14
.text:00000000000132D8
.text:00000000000132D8 loc_132D8:                              ; CODE XREF: re_search_stub+253↓j
.text:00000000000132D8                 mov     rdi, r14
.text:00000000000132DB                 shl     rdi, 4          ; size
.text:00000000000132DF
.text:00000000000132DF loc_132DF:                              ; CODE XREF: re_search_stub+274↓j
.text:00000000000132DF                 mov     [rsp+68h+var_48], r9
.text:00000000000132E4                 mov     [rsp+68h+var_50], rdx
.text:00000000000132E9                 mov     [rsp+68h+ptr], rsi
.text:00000000000132EE                 mov     [rsp+68h+size], r8
.text:00000000000132F3                 call    _malloc
.text:00000000000132F8                 test    rax, rax
.text:00000000000132FB                 mov     rbp, rax
.text:00000000000132FE                 jz      loc_13590
.text:0000000000013304                 sub     rsp, 8
.text:0000000000013308                 mov     rcx, rbx
.text:000000000001330B                 mov     rdi, r15
.text:000000000001330E                 mov     eax, [rsp+70h+var_3C]
.text:0000000000013312                 push    rax
.text:0000000000013313                 push    rbp
.text:0000000000013314                 push    r14
.text:0000000000013316                 mov     r9, [rsp+88h+var_48]
.text:000000000001331B                 mov     r8, [rsp+88h+size]
.text:0000000000013320                 mov     rdx, [rsp+88h+var_50]
.text:0000000000013325                 mov     rsi, [rsp+88h+ptr]
.text:000000000001332A                 call    re_search_internal
.text:000000000001332F                 add     rsp, 20h
.text:0000000000013333                 test    eax, eax
.text:0000000000013335                 jz      short loc_13368
.text:0000000000013337                 cmp     eax, 1
.text:000000000001333A                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000013341                 jz      short loc_1334A
.text:0000000000013343
.text:0000000000013343 loc_13343:                              ; CODE XREF: re_search_stub+212↓j
.text:0000000000013343                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:000000000001334A
.text:000000000001334A loc_1334A:                              ; CODE XREF: re_search_stub+121↑j
.text:000000000001334A                                         ; re_search_stub+221↓j ...
.text:000000000001334A                 mov     rdi, rbp        ; ptr
.text:000000000001334D                 call    _free
.text:0000000000013352
.text:0000000000013352 loc_13352:                              ; CODE XREF: re_search_stub+367↓j
.text:0000000000013352                                         ; re_search_stub+377↓j
.text:0000000000013352                 add     rsp, 38h
.text:0000000000013356                 mov     rax, r12
.text:0000000000013359                 pop     rbx
.text:000000000001335A                 pop     rbp
.text:000000000001335B                 pop     r12
.text:000000000001335D                 pop     r13
.text:000000000001335F                 pop     r14
.text:0000000000013361                 pop     r15
.text:0000000000013363                 retn
.text:0000000000013363 ; ---------------------------------------------------------------------------
.text:0000000000013364                 align 8
.text:0000000000013368
.text:0000000000013368 loc_13368:                              ; CODE XREF: re_search_stub+115↑j
.text:0000000000013368                 test    r12, r12
.text:000000000001336B                 jz      loc_13438
.text:0000000000013371                 movzx   eax, byte ptr [r15+38h]
.text:0000000000013376                 lea     rdx, [r13+1]
.text:000000000001337A                 shr     al, 1
.text:000000000001337C                 and     eax, 3
.text:000000000001337F                 jz      loc_134F0
.text:0000000000013385                 cmp     eax, 1
.text:0000000000013388                 jz      loc_135A0
.text:000000000001338E                 cmp     eax, 2
.text:0000000000013391                 jnz     loc_13680
.text:0000000000013397                 cmp     r14, [r12]
.text:000000000001339B                 ja      loc_13661
.text:00000000000133A1                 mov     r9d, 2
.text:00000000000133A7
.text:00000000000133A7 loc_133A7:                              ; CODE XREF: re_search_stub+32C↓j
.text:00000000000133A7                                         ; re_search_stub+38A↓j ...
.text:00000000000133A7                 test    r13, r13
.text:00000000000133AA                 jle     loc_13618
.text:00000000000133B0                 mov     r8, [r12+8]
.text:00000000000133B5                 mov     rdi, [r12+10h]
.text:00000000000133BA                 lea     rsi, ds:0[r13*8]
.text:00000000000133C2                 mov     rdx, r13
.text:00000000000133C5                 xor     eax, eax
.text:00000000000133C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000133D0
.text:00000000000133D0 loc_133D0:                              ; CODE XREF: re_search_stub+1C9↓j
.text:00000000000133D0                 mov     rcx, [rbp+rax*2+0]
.text:00000000000133D5                 mov     [r8+rax], rcx
.text:00000000000133D9                 mov     rcx, [rbp+rax*2+8]
.text:00000000000133DE                 mov     [rdi+rax], rcx
.text:00000000000133E2                 add     rax, 8
.text:00000000000133E6                 cmp     rsi, rax
.text:00000000000133E9                 jnz     short loc_133D0
.text:00000000000133EB
.text:00000000000133EB loc_133EB:                              ; CODE XREF: re_search_stub+3FD↓j
.text:00000000000133EB                 cmp     [r12], rdx
.text:00000000000133EF                 jbe     short loc_1341D
.text:00000000000133F1                 mov     rsi, [r12+10h]
.text:00000000000133F6                 mov     rcx, [r12+8]
.text:00000000000133FB                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000013402                 nop     word ptr [rax+rax+00h]
.text:0000000000013408
.text:0000000000013408 loc_13408:                              ; CODE XREF: re_search_stub+1FB↓j
.text:0000000000013408                 mov     [rsi+rdx*8], rax
.text:000000000001340C                 add     r13, 1
.text:0000000000013410                 mov     [rcx+rdx*8], rax
.text:0000000000013414                 cmp     r13, [r12]
.text:0000000000013418                 mov     rdx, r13
.text:000000000001341B                 jb      short loc_13408
.text:000000000001341D
.text:000000000001341D loc_1341D:                              ; CODE XREF: re_search_stub+1CF↑j
.text:000000000001341D                                         ; re_search_stub+40D↓j ...
.text:000000000001341D                 movzx   eax, byte ptr [r15+38h]
.text:0000000000013422                 lea     r13d, [r9+r9]
.text:0000000000013426                 and     eax, 0FFFFFFF9h
.text:0000000000013429                 or      eax, r13d
.text:000000000001342C                 test    al, 6
.text:000000000001342E                 mov     [r15+38h], al
.text:0000000000013432                 jz      loc_13343
.text:0000000000013438
.text:0000000000013438 loc_13438:                              ; CODE XREF: re_search_stub+14B↑j
.text:0000000000013438                 cmp     byte ptr [rsp+68h+var_40], 0
.text:000000000001343D                 mov     r12, [rbp+0]
.text:0000000000013441                 jz      loc_1334A
.text:0000000000013447                 cmp     r12, rbx
.text:000000000001344A                 jnz     loc_13642
.text:0000000000013450                 mov     r12, [rbp+8]
.text:0000000000013454                 sub     r12, rbx
.text:0000000000013457                 jmp     loc_1334A
.text:0000000000013457 ; ---------------------------------------------------------------------------
.text:000000000001345C                 align 20h
.text:0000000000013460
.text:0000000000013460 loc_13460:                              ; CODE XREF: re_search_stub+AB↑j
.text:0000000000013460                 mov     r14, [r12]
.text:0000000000013464                 cmp     r14, rcx
.text:0000000000013467                 ja      loc_132D1
.text:000000000001346D                 test    r14, r14
.text:0000000000013470                 mov     r13, r14
.text:0000000000013473                 jg      loc_132D8
.text:0000000000013479                 nop     dword ptr [rax+00000000h]
.text:0000000000013480
.text:0000000000013480 loc_13480:                              ; CODE XREF: re_search_stub+93↑j
.text:0000000000013480                                         ; re_search_stub+9C↑j
.text:0000000000013480                 mov     edi, 10h
.text:0000000000013485                 mov     r14d, 1
.text:000000000001348B                 mov     r13d, 1
.text:0000000000013491                 xor     r12d, r12d
.text:0000000000013494                 jmp     loc_132DF
.text:0000000000013494 ; ---------------------------------------------------------------------------
.text:0000000000013499                 align 20h
.text:00000000000134A0
.text:00000000000134A0 loc_134A0:                              ; CODE XREF: re_search_stub+8B↑j
.text:00000000000134A0                 mov     rdi, r15
.text:00000000000134A3                 mov     [rsp+68h+var_48], r9
.text:00000000000134A8                 mov     [rsp+68h+var_50], rdx
.text:00000000000134AD                 mov     [rsp+68h+ptr], rsi
.text:00000000000134B2                 mov     [rsp+68h+size], r8
.text:00000000000134B7                 call    rpl_re_compile_fastmap
.text:00000000000134BC                 movzx   eax, byte ptr [r15+38h]
.text:00000000000134C1                 mov     r9, [rsp+68h+var_48]
.text:00000000000134C6                 mov     rdx, [rsp+68h+var_50]
.text:00000000000134CB                 mov     rsi, [rsp+68h+ptr]
.text:00000000000134D0                 mov     r8, [rsp+68h+size]
.text:00000000000134D5                 jmp     loc_132B1
.text:00000000000134D5 ; ---------------------------------------------------------------------------
.text:00000000000134DA                 align 20h
.text:00000000000134E0
.text:00000000000134E0 loc_134E0:                              ; CODE XREF: re_search_stub+3C↑j
.text:00000000000134E0                                         ; re_search_stub+4A↑j
.text:00000000000134E0                 mov     r8, rdx
.text:00000000000134E3                 jmp     loc_13287
.text:00000000000134E3 ; ---------------------------------------------------------------------------
.text:00000000000134E8                 align 10h
.text:00000000000134F0
.text:00000000000134F0 loc_134F0:                              ; CODE XREF: re_search_stub+15F↑j
.text:00000000000134F0                 lea     r14, ds:0[rdx*8]
.text:00000000000134F8                 mov     [rsp+68h+size], rdx
.text:00000000000134FD                 mov     rdi, r14        ; size
.text:0000000000013500                 call    _malloc
.text:0000000000013505                 test    rax, rax
.text:0000000000013508                 mov     [r12+8], rax
.text:000000000001350D                 mov     rdx, [rsp+68h+size]
.text:0000000000013512                 jz      loc_1362A
.text:0000000000013518                 mov     rdi, r14        ; size
.text:000000000001351B                 mov     [rsp+68h+size], rdx
.text:0000000000013520                 mov     [rsp+68h+ptr], rax
.text:0000000000013525                 call    _malloc
.text:000000000001352A                 test    rax, rax
.text:000000000001352D                 mov     [r12+10h], rax
.text:0000000000013532                 mov     rdx, [rsp+68h+size]
.text:0000000000013537                 mov     rcx, [rsp+68h+ptr]
.text:000000000001353C                 jz      loc_13622
.text:0000000000013542                 mov     [r12], rdx
.text:0000000000013546                 mov     r9d, 1
.text:000000000001354C                 jmp     loc_133A7
.text:000000000001354C ; ---------------------------------------------------------------------------
.text:0000000000013551                 align 8
.text:0000000000013558
.text:0000000000013558 loc_13558:                              ; CODE XREF: re_search_stub+53↑j
.text:0000000000013558                                         ; re_search_stub+61↑j
.text:0000000000013558                 movzx   eax, byte ptr [r15+38h]
.text:000000000001355D                 xor     r8d, r8d
.text:0000000000013560                 mov     r13d, eax
.text:0000000000013563                 shr     r13b, 5
.text:0000000000013567                 mov     edi, r13d
.text:000000000001356A                 and     edi, 3
.text:000000000001356D                 mov     [rsp+68h+var_3C], edi
.text:0000000000013571                 jmp     loc_132B1
.text:0000000000013571 ; ---------------------------------------------------------------------------
.text:0000000000013576                 align 20h
.text:0000000000013580
.text:0000000000013580 loc_13580:                              ; CODE XREF: re_search_stub+24↑j
.text:0000000000013580                                         ; re_search_stub+2D↑j
.text:0000000000013580                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000013587                 jmp     loc_13352
.text:0000000000013587 ; ---------------------------------------------------------------------------
.text:000000000001358C                 align 10h
.text:0000000000013590
.text:0000000000013590 loc_13590:                              ; CODE XREF: re_search_stub+DE↑j
.text:0000000000013590                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000013597                 jmp     loc_13352
.text:0000000000013597 ; ---------------------------------------------------------------------------
.text:000000000001359C                 align 20h
.text:00000000000135A0
.text:00000000000135A0 loc_135A0:                              ; CODE XREF: re_search_stub+168↑j
.text:00000000000135A0                 cmp     [r12], rdx
.text:00000000000135A4                 mov     r9d, 1
.text:00000000000135AA                 jnb     loc_133A7
.text:00000000000135B0                 lea     rcx, ds:0[rdx*8]
.text:00000000000135B8                 mov     rdi, [r12+8]    ; ptr
.text:00000000000135BD                 mov     byte ptr [rsp+68h+var_50], r9b
.text:00000000000135C2                 mov     [rsp+68h+ptr], rdx
.text:00000000000135C7                 mov     rsi, rcx        ; size
.text:00000000000135CA                 mov     [rsp+68h+size], rcx
.text:00000000000135CF                 call    _realloc
.text:00000000000135D4                 test    rax, rax
.text:00000000000135D7                 mov     r14, rax
.text:00000000000135DA                 jz      short loc_1362A
.text:00000000000135DC                 mov     rcx, [rsp+68h+size]
.text:00000000000135E1                 mov     rdi, [r12+10h]  ; ptr
.text:00000000000135E6                 mov     rsi, rcx        ; size
.text:00000000000135E9                 call    _realloc
.text:00000000000135EE                 test    rax, rax
.text:00000000000135F1                 mov     rdx, [rsp+68h+ptr]
.text:00000000000135F6                 movzx   r9d, byte ptr [rsp+68h+var_50]
.text:00000000000135FC                 jz      short loc_13632
.text:00000000000135FE                 mov     [r12+8], r14
.text:0000000000013603                 mov     [r12+10h], rax
.text:0000000000013608                 mov     [r12], rdx
.text:000000000001360C                 jmp     loc_133A7
.text:000000000001360C ; ---------------------------------------------------------------------------
.text:0000000000013611                 align 8
.text:0000000000013618
.text:0000000000013618 loc_13618:                              ; CODE XREF: re_search_stub+18A↑j
.text:0000000000013618                 xor     edx, edx
.text:000000000001361A                 xor     r13d, r13d
.text:000000000001361D                 jmp     loc_133EB
.text:0000000000013622 ; ---------------------------------------------------------------------------
.text:0000000000013622
.text:0000000000013622 loc_13622:                              ; CODE XREF: re_search_stub+31C↑j
.text:0000000000013622                 mov     rdi, rcx        ; ptr
.text:0000000000013625                 call    _free
.text:000000000001362A
.text:000000000001362A loc_1362A:                              ; CODE XREF: re_search_stub+2F2↑j
.text:000000000001362A                                         ; re_search_stub+3BA↑j
.text:000000000001362A                 xor     r9d, r9d
.text:000000000001362D                 jmp     loc_1341D
.text:0000000000013632 ; ---------------------------------------------------------------------------
.text:0000000000013632
.text:0000000000013632 loc_13632:                              ; CODE XREF: re_search_stub+3DC↑j
.text:0000000000013632                 mov     rdi, r14        ; ptr
.text:0000000000013635                 call    _free
.text:000000000001363A                 xor     r9d, r9d
.text:000000000001363D                 jmp     loc_1341D
.text:0000000000013642 ; ---------------------------------------------------------------------------
.text:0000000000013642
.text:0000000000013642 loc_13642:                              ; CODE XREF: re_search_stub+22A↑j
.text:0000000000013642                 lea     rcx, __PRETTY_FUNCTION___7847 ; "re_search_stub"
.text:0000000000013649                 lea     rsi, file       ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000013650                 lea     rdi, aPmatch0RmSoSta ; "pmatch[0].rm_so == start"
.text:0000000000013657                 mov     edx, 1BEh       ; line
.text:000000000001365C                 call    ___assert_fail
.text:0000000000013661 ; ---------------------------------------------------------------------------
.text:0000000000013661
.text:0000000000013661 loc_13661:                              ; CODE XREF: re_search_stub+17B↑j
.text:0000000000013661                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:0000000000013668                 lea     rsi, file       ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001366F                 lea     rdi, aRegsNumRegsNre ; "regs->num_regs >= nregs"
.text:0000000000013676                 mov     edx, 1FBh       ; line
.text:000000000001367B                 call    ___assert_fail
.text:0000000000013680 ; ---------------------------------------------------------------------------
.text:0000000000013680
.text:0000000000013680 loc_13680:                              ; CODE XREF: re_search_stub+171↑j
.text:0000000000013680                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:0000000000013687                 lea     rsi, file       ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001368E                 lea     rdi, aRegsAllocatedR ; "regs_allocated == REGS_FIXED"
.text:0000000000013695                 mov     edx, 1F9h       ; line
.text:000000000001369A                 call    ___assert_fail
.text:000000000001369A ; } // starts at 13220
.text:000000000001369A re_search_stub  endp
.text:000000000001369A
.text:000000000001369A ; ---------------------------------------------------------------------------
.text:000000000001369F                 align 20h
.text:00000000000136A0
.text:00000000000136A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000136A0
.text:00000000000136A0
.text:00000000000136A0 re_search_2_stub proc near              ; CODE XREF: rpl_re_match_2+10↓p
.text:00000000000136A0                                         ; rpl_re_search_2+12↓p
.text:00000000000136A0
.text:00000000000136A0 src             = qword ptr -50h
.text:00000000000136A0 var_48          = qword ptr -48h
.text:00000000000136A0 var_3C          = dword ptr -3Ch
.text:00000000000136A0 arg_0           = qword ptr  8
.text:00000000000136A0 arg_8           = qword ptr  10h
.text:00000000000136A0 arg_10          = qword ptr  18h
.text:00000000000136A0 arg_18          = dword ptr  20h
.text:00000000000136A0
.text:00000000000136A0 ; __unwind {
.text:00000000000136A0                 push    r15
.text:00000000000136A2                 push    r14
.text:00000000000136A4                 push    r13
.text:00000000000136A6                 push    r12
.text:00000000000136A8                 mov     r12, rdi
.text:00000000000136AB                 push    rbp
.text:00000000000136AC                 push    rbx
.text:00000000000136AD                 mov     rbp, r8
.text:00000000000136B0                 mov     rbx, rdx
.text:00000000000136B3                 mov     rdx, rbp
.text:00000000000136B6                 sub     rsp, 28h
.text:00000000000136BA                 shr     rdx, 3Fh
.text:00000000000136BE                 mov     rax, [rsp+58h+arg_10]
.text:00000000000136C3                 mov     edi, edx
.text:00000000000136C5                 mov     r8d, [rsp+58h+arg_18]
.text:00000000000136CA                 shr     rax, 3Fh
.text:00000000000136CE                 or      dil, al
.text:00000000000136D1                 jnz     loc_137A0
.text:00000000000136D7                 test    rbx, rbx
.text:00000000000136DA                 js      loc_137A0
.text:00000000000136E0                 mov     r15, rbx
.text:00000000000136E3                 add     r15, rbp
.text:00000000000136E6                 jo      loc_137A0
.text:00000000000136EC                 test    rbp, rbp
.text:00000000000136EF                 mov     r14, rcx
.text:00000000000136F2                 mov     rcx, r9
.text:00000000000136F5                 jz      loc_137B0
.text:00000000000136FB                 xor     r13d, r13d
.text:00000000000136FE                 test    rbx, rbx
.text:0000000000013701                 mov     [rsp+58h+src], rsi
.text:0000000000013706                 jnz     short loc_13750
.text:0000000000013708
.text:0000000000013708 loc_13708:                              ; CODE XREF: re_search_2_stub+F7↓j
.text:0000000000013708                                         ; re_search_2_stub+116↓j
.text:0000000000013708                 movzx   r8d, r8b
.text:000000000001370C                 mov     rdx, r15
.text:000000000001370F                 mov     rsi, r14
.text:0000000000013712                 push    r8
.text:0000000000013714                 push    [rsp+60h+arg_8]
.text:0000000000013718                 mov     rdi, r12
.text:000000000001371B                 mov     r9, [rsp+68h+arg_10]
.text:0000000000013723                 mov     r8, [rsp+68h+arg_0]
.text:0000000000013728                 call    re_search_stub
.text:000000000001372D                 mov     rdi, r13        ; ptr
.text:0000000000013730                 mov     rbx, rax
.text:0000000000013733                 call    _free
.text:0000000000013738                 pop     rax
.text:0000000000013739                 pop     rdx
.text:000000000001373A
.text:000000000001373A loc_1373A:                              ; CODE XREF: re_search_2_stub+107↓j
.text:000000000001373A                 add     rsp, 28h
.text:000000000001373E                 mov     rax, rbx
.text:0000000000013741                 pop     rbx
.text:0000000000013742                 pop     rbp
.text:0000000000013743                 pop     r12
.text:0000000000013745                 pop     r13
.text:0000000000013747                 pop     r14
.text:0000000000013749                 pop     r15
.text:000000000001374B                 retn
.text:000000000001374B ; ---------------------------------------------------------------------------
.text:000000000001374C                 align 10h
.text:0000000000013750
.text:0000000000013750 loc_13750:                              ; CODE XREF: re_search_2_stub+66↑j
.text:0000000000013750                 mov     rdi, r15        ; size
.text:0000000000013753                 mov     [rsp+58h+var_3C], r8d
.text:0000000000013758                 mov     [rsp+58h+var_48], r9
.text:000000000001375D                 call    _malloc
.text:0000000000013762                 test    rax, rax
.text:0000000000013765                 mov     r13, rax
.text:0000000000013768                 jz      short loc_137A0
.text:000000000001376A                 mov     rsi, [rsp+58h+src] ; src
.text:000000000001376F                 mov     rdx, rbx        ; n
.text:0000000000013772                 mov     rdi, rax        ; dest
.text:0000000000013775                 call    _memcpy
.text:000000000001377A                 lea     rdi, [r13+rbx+0] ; dest
.text:000000000001377F                 mov     rsi, r14        ; src
.text:0000000000013782                 mov     rdx, rbp        ; n
.text:0000000000013785                 mov     r14, r13
.text:0000000000013788                 call    _memcpy
.text:000000000001378D                 mov     rcx, [rsp+58h+var_48]
.text:0000000000013792                 mov     r8d, [rsp+58h+var_3C]
.text:0000000000013797                 jmp     loc_13708
.text:0000000000013797 ; ---------------------------------------------------------------------------
.text:000000000001379C                 align 20h
.text:00000000000137A0
.text:00000000000137A0 loc_137A0:                              ; CODE XREF: re_search_2_stub+31↑j
.text:00000000000137A0                                         ; re_search_2_stub+3A↑j ...
.text:00000000000137A0                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:00000000000137A7                 jmp     short loc_1373A
.text:00000000000137A7 ; ---------------------------------------------------------------------------
.text:00000000000137A9                 align 10h
.text:00000000000137B0
.text:00000000000137B0 loc_137B0:                              ; CODE XREF: re_search_2_stub+55↑j
.text:00000000000137B0                 mov     r14, rsi
.text:00000000000137B3                 xor     r13d, r13d
.text:00000000000137B6                 jmp     loc_13708
.text:00000000000137B6 ; } // starts at 136A0
.text:00000000000137B6 re_search_2_stub endp
.text:00000000000137B6
.text:00000000000137B6 ; ---------------------------------------------------------------------------
.text:00000000000137BB                 align 20h
.text:00000000000137C0
.text:00000000000137C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000137C0
.text:00000000000137C0
.text:00000000000137C0                 public rpl_regcomp
.text:00000000000137C0 rpl_regcomp     proc near
.text:00000000000137C0 ; __unwind {
.text:00000000000137C0                 mov     eax, edx
.text:00000000000137C2                 push    r14
.text:00000000000137C4                 push    r13
.text:00000000000137C6                 and     eax, 1
.text:00000000000137C9                 push    r12
.text:00000000000137CB                 push    rbp
.text:00000000000137CC                 cmp     eax, 1
.text:00000000000137CF                 push    rbx
.text:00000000000137D0                 mov     rbx, rdi
.text:00000000000137D3                 sbb     r14, r14
.text:00000000000137D6                 mov     qword ptr [rdi], 0
.text:00000000000137DD                 mov     qword ptr [rdi+8], 0
.text:00000000000137E5                 and     r14d, 0FD4FCAh
.text:00000000000137EC                 mov     qword ptr [rdi+10h], 0
.text:00000000000137F4                 mov     edi, 100h       ; size
.text:00000000000137F9                 mov     r12, rsi
.text:00000000000137FC                 mov     ebp, edx
.text:00000000000137FE                 add     r14, 3B2FCh
.text:0000000000013805                 call    _malloc
.text:000000000001380A                 test    rax, rax
.text:000000000001380D                 mov     [rbx+20h], rax
.text:0000000000013811                 jz      loc_138C0
.text:0000000000013817                 mov     r13, rbp
.text:000000000001381A                 shl     r13, 15h
.text:000000000001381E                 and     r13d, 400000h
.text:0000000000013825                 or      r13, r14
.text:0000000000013828                 test    bpl, 4
.text:000000000001382C                 jnz     short loc_13890
.text:000000000001382E                 and     byte ptr [rbx+38h], 7Fh
.text:0000000000013832
.text:0000000000013832 loc_13832:                              ; CODE XREF: rpl_regcomp+DF↓j
.text:0000000000013832                 movzx   edx, byte ptr [rbx+38h]
.text:0000000000013836                 shr     ebp, 3
.text:0000000000013839                 mov     rdi, r12        ; s
.text:000000000001383C                 and     ebp, 1
.text:000000000001383F                 mov     qword ptr [rbx+28h], 0
.text:0000000000013847                 shl     ebp, 4
.text:000000000001384A                 and     edx, 0FFFFFFEFh
.text:000000000001384D                 or      ebp, edx
.text:000000000001384F                 mov     [rbx+38h], bpl
.text:0000000000013853                 call    _strlen
.text:0000000000013858                 mov     rcx, r13
.text:000000000001385B                 mov     rdx, rax
.text:000000000001385E                 mov     rsi, r12
.text:0000000000013861                 mov     rdi, rbx
.text:0000000000013864                 call    re_compile_internal
.text:0000000000013869                 cmp     eax, 10h
.text:000000000001386C                 mov     ebp, eax
.text:000000000001386E                 jz      short loc_138A8
.text:0000000000013870                 test    eax, eax
.text:0000000000013872                 jnz     short loc_138AD
.text:0000000000013874                 mov     rdi, rbx
.text:0000000000013877                 call    rpl_re_compile_fastmap
.text:000000000001387C
.text:000000000001387C loc_1387C:                              ; CODE XREF: rpl_regcomp+FE↓j
.text:000000000001387C                 pop     rbx
.text:000000000001387D                 mov     eax, ebp
.text:000000000001387F                 pop     rbp
.text:0000000000013880                 pop     r12
.text:0000000000013882                 pop     r13
.text:0000000000013884                 pop     r14
.text:0000000000013886                 retn
.text:0000000000013886 ; ---------------------------------------------------------------------------
.text:0000000000013887                 align 10h
.text:0000000000013890
.text:0000000000013890 loc_13890:                              ; CODE XREF: rpl_regcomp+6C↑j
.text:0000000000013890                 and     r13, 0FFFFFFFFFFFFFFBFh
.text:0000000000013894                 or      byte ptr [rbx+38h], 80h
.text:0000000000013898                 or      r13, 100h
.text:000000000001389F                 jmp     short loc_13832
.text:000000000001389F ; ---------------------------------------------------------------------------
.text:00000000000138A1                 align 8
.text:00000000000138A8
.text:00000000000138A8 loc_138A8:                              ; CODE XREF: rpl_regcomp+AE↑j
.text:00000000000138A8                 mov     ebp, 8
.text:00000000000138AD
.text:00000000000138AD loc_138AD:                              ; CODE XREF: rpl_regcomp+B2↑j
.text:00000000000138AD                 mov     rdi, [rbx+20h]  ; ptr
.text:00000000000138B1                 call    _free
.text:00000000000138B6                 mov     qword ptr [rbx+20h], 0
.text:00000000000138BE                 jmp     short loc_1387C
.text:00000000000138C0 ; ---------------------------------------------------------------------------
.text:00000000000138C0
.text:00000000000138C0 loc_138C0:                              ; CODE XREF: rpl_regcomp+51↑j
.text:00000000000138C0                 mov     ebp, 0Ch
.text:00000000000138C5                 pop     rbx
.text:00000000000138C6                 mov     eax, ebp
.text:00000000000138C8                 pop     rbp
.text:00000000000138C9                 pop     r12
.text:00000000000138CB                 pop     r13
.text:00000000000138CD                 pop     r14
.text:00000000000138CF                 retn
.text:00000000000138CF ; } // starts at 137C0
.text:00000000000138CF rpl_regcomp     endp
.text:00000000000138CF
.text:00000000000138D0
.text:00000000000138D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000138D0
.text:00000000000138D0
.text:00000000000138D0                 public rpl_regerror
.text:00000000000138D0 rpl_regerror    proc near
.text:00000000000138D0 ; __unwind {
.text:00000000000138D0                 push    r13
.text:00000000000138D2                 push    r12
.text:00000000000138D4                 push    rbp
.text:00000000000138D5                 push    rbx
.text:00000000000138D6                 sub     rsp, 8
.text:00000000000138DA                 cmp     edi, 10h
.text:00000000000138DD                 ja      short loc_13940
.text:00000000000138DF                 lea     rax, __re_error_msgid_idx
.text:00000000000138E6                 movsxd  rdi, edi
.text:00000000000138E9                 lea     rsi, __re_error_msgid ; "Success"
.text:00000000000138F0                 mov     rbp, rdx
.text:00000000000138F3                 mov     edx, 5          ; category
.text:00000000000138F8                 mov     r12, rcx
.text:00000000000138FB                 add     rsi, [rax+rdi*8] ; msgid
.text:00000000000138FF                 xor     edi, edi        ; domainname
.text:0000000000013901                 call    _dcgettext
.text:0000000000013906                 mov     rdi, rax        ; s
.text:0000000000013909                 mov     r13, rax
.text:000000000001390C                 call    _strlen
.text:0000000000013911                 test    r12, r12
.text:0000000000013914                 lea     rbx, [rax+1]
.text:0000000000013918                 jz      short loc_1392D
.text:000000000001391A                 cmp     rbx, r12
.text:000000000001391D                 mov     rdx, rbx        ; n
.text:0000000000013920                 ja      short loc_13948
.text:0000000000013922
.text:0000000000013922 loc_13922:                              ; CODE XREF: rpl_regerror+83↓j
.text:0000000000013922                 mov     rsi, r13        ; src
.text:0000000000013925                 mov     rdi, rbp        ; dest
.text:0000000000013928                 call    _memcpy
.text:000000000001392D
.text:000000000001392D loc_1392D:                              ; CODE XREF: rpl_regerror+48↑j
.text:000000000001392D                 add     rsp, 8
.text:0000000000013931                 mov     rax, rbx
.text:0000000000013934                 pop     rbx
.text:0000000000013935                 pop     rbp
.text:0000000000013936                 pop     r12
.text:0000000000013938                 pop     r13
.text:000000000001393A                 retn
.text:000000000001393A ; ---------------------------------------------------------------------------
.text:000000000001393B                 align 20h
.text:0000000000013940
.text:0000000000013940 loc_13940:                              ; CODE XREF: rpl_regerror+D↑j
.text:0000000000013940                 call    _abort
.text:0000000000013940 ; ---------------------------------------------------------------------------
.text:0000000000013945                 align 8
.text:0000000000013948
.text:0000000000013948 loc_13948:                              ; CODE XREF: rpl_regerror+50↑j
.text:0000000000013948                 lea     rdx, [r12-1]
.text:000000000001394D                 mov     byte ptr [rbp+r12-1], 0
.text:0000000000013953                 jmp     short loc_13922
.text:0000000000013953 ; } // starts at 138D0
.text:0000000000013953 rpl_regerror    endp
.text:0000000000013953
.text:0000000000013953 ; ---------------------------------------------------------------------------
.text:0000000000013955                 align 20h
.text:0000000000013960
.text:0000000000013960 ; =============== S U B R O U T I N E =======================================
.text:0000000000013960
.text:0000000000013960 ; Attributes: info_from_lumina
.text:0000000000013960
.text:0000000000013960                 public regfree
.text:0000000000013960 regfree         proc near
.text:0000000000013960 ; __unwind {
.text:0000000000013960                 push    rbx
.text:0000000000013961                 mov     rbx, rdi
.text:0000000000013964                 mov     rdi, [rdi]      ; ptr
.text:0000000000013967                 test    rdi, rdi
.text:000000000001396A                 jz      short loc_13971
.text:000000000001396C                 call    free_dfa_content
.text:0000000000013971
.text:0000000000013971 loc_13971:                              ; CODE XREF: regfree+A↑j
.text:0000000000013971                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000013975                 mov     qword ptr [rbx], 0
.text:000000000001397C                 mov     qword ptr [rbx+8], 0
.text:0000000000013984                 call    _free
.text:0000000000013989                 mov     rdi, [rbx+28h]  ; ptr
.text:000000000001398D                 mov     qword ptr [rbx+20h], 0
.text:0000000000013995                 call    _free
.text:000000000001399A                 mov     qword ptr [rbx+28h], 0
.text:00000000000139A2                 pop     rbx
.text:00000000000139A3                 retn
.text:00000000000139A3 ; } // starts at 13960
.text:00000000000139A3 regfree         endp
.text:00000000000139A3
.text:00000000000139A3 ; ---------------------------------------------------------------------------
.text:00000000000139A4                 align 10h
.text:00000000000139B0
.text:00000000000139B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000139B0
.text:00000000000139B0
.text:00000000000139B0                 public rpl_regexec
.text:00000000000139B0 rpl_regexec     proc near
.text:00000000000139B0
.text:00000000000139B0 var_30          = qword ptr -30h
.text:00000000000139B0
.text:00000000000139B0 ; __unwind {
.text:00000000000139B0                 test    r8d, 0FFFFFFF8h
.text:00000000000139B7                 jnz     loc_13A48
.text:00000000000139BD                 push    r13
.text:00000000000139BF                 push    r12
.text:00000000000139C1                 mov     r13, rdx
.text:00000000000139C4                 push    rbp
.text:00000000000139C5                 push    rbx
.text:00000000000139C6                 mov     r12, rcx
.text:00000000000139C9                 mov     ebx, r8d
.text:00000000000139CC                 mov     rbp, rdi
.text:00000000000139CF                 sub     rsp, 18h
.text:00000000000139D3                 test    r8b, 4
.text:00000000000139D7                 jnz     short loc_13A28
.text:00000000000139D9                 mov     rdi, rsi        ; s
.text:00000000000139DC                 mov     [rsp+38h+var_30], rsi
.text:00000000000139E1                 call    _strlen
.text:00000000000139E6                 xor     ecx, ecx
.text:00000000000139E8                 test    byte ptr [rbp+38h], 10h
.text:00000000000139EC                 mov     rdx, rax
.text:00000000000139EF                 mov     rsi, [rsp+38h+var_30]
.text:00000000000139F4                 jz      short loc_13A36
.text:00000000000139F6
.text:00000000000139F6 loc_139F6:                              ; CODE XREF: rpl_regexec+84↓j
.text:00000000000139F6                 sub     rsp, 8
.text:00000000000139FA                 push    rbx
.text:00000000000139FB                 push    0
.text:00000000000139FD                 push    0
.text:00000000000139FF
.text:00000000000139FF loc_139FF:                              ; CODE XREF: rpl_regexec+8F↓j
.text:00000000000139FF                 mov     rdi, rbp
.text:0000000000013A02                 mov     r9, rdx
.text:0000000000013A05                 mov     r8, rdx
.text:0000000000013A08                 call    re_search_internal
.text:0000000000013A0D                 add     rsp, 20h
.text:0000000000013A11                 test    eax, eax
.text:0000000000013A13                 setnz   al
.text:0000000000013A16                 add     rsp, 18h
.text:0000000000013A1A                 pop     rbx
.text:0000000000013A1B                 movzx   eax, al
.text:0000000000013A1E                 pop     rbp
.text:0000000000013A1F                 pop     r12
.text:0000000000013A21                 pop     r13
.text:0000000000013A23                 retn
.text:0000000000013A23 ; ---------------------------------------------------------------------------
.text:0000000000013A24                 align 8
.text:0000000000013A28
.text:0000000000013A28 loc_13A28:                              ; CODE XREF: rpl_regexec+27↑j
.text:0000000000013A28                 test    byte ptr [rbp+38h], 10h
.text:0000000000013A2C                 mov     rcx, [rcx]
.text:0000000000013A2F                 mov     rdx, [r12+8]
.text:0000000000013A34                 jnz     short loc_139F6
.text:0000000000013A36
.text:0000000000013A36 loc_13A36:                              ; CODE XREF: rpl_regexec+44↑j
.text:0000000000013A36                 sub     rsp, 8
.text:0000000000013A3A                 push    rbx
.text:0000000000013A3B                 push    r12
.text:0000000000013A3D                 push    r13
.text:0000000000013A3F                 jmp     short loc_139FF
.text:0000000000013A3F ; ---------------------------------------------------------------------------
.text:0000000000013A41                 align 8
.text:0000000000013A48
.text:0000000000013A48 loc_13A48:                              ; CODE XREF: rpl_regexec+7↑j
.text:0000000000013A48                 mov     eax, 2
.text:0000000000013A4D                 retn
.text:0000000000013A4D ; } // starts at 139B0
.text:0000000000013A4D rpl_regexec     endp
.text:0000000000013A4D
.text:0000000000013A4D ; ---------------------------------------------------------------------------
.text:0000000000013A4E                 align 10h
.text:0000000000013A50
.text:0000000000013A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000013A50
.text:0000000000013A50
.text:0000000000013A50                 public rpl_re_match
.text:0000000000013A50 rpl_re_match    proc near
.text:0000000000013A50 ; __unwind {
.text:0000000000013A50                 sub     rsp, 8
.text:0000000000013A54                 mov     r9, rdx
.text:0000000000013A57                 push    1
.text:0000000000013A59                 push    r8
.text:0000000000013A5B                 xor     r8d, r8d
.text:0000000000013A5E                 call    re_search_stub
.text:0000000000013A63                 add     rsp, 18h
.text:0000000000013A67                 retn
.text:0000000000013A67 ; } // starts at 13A50
.text:0000000000013A67 rpl_re_match    endp
.text:0000000000013A67
.text:0000000000013A67 ; ---------------------------------------------------------------------------
.text:0000000000013A68                 align 10h
.text:0000000000013A70
.text:0000000000013A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000013A70
.text:0000000000013A70
.text:0000000000013A70                 public rpl_re_search
.text:0000000000013A70 rpl_re_search   proc near               ; CODE XREF: tac_seekable+1AD↑p
.text:0000000000013A70 ; __unwind {
.text:0000000000013A70                 sub     rsp, 8
.text:0000000000013A74                 push    0
.text:0000000000013A76                 push    r9
.text:0000000000013A78                 mov     r9, rdx
.text:0000000000013A7B                 call    re_search_stub
.text:0000000000013A80                 add     rsp, 18h
.text:0000000000013A84                 retn
.text:0000000000013A84 ; } // starts at 13A70
.text:0000000000013A84 rpl_re_search   endp
.text:0000000000013A84
.text:0000000000013A84 ; ---------------------------------------------------------------------------
.text:0000000000013A85                 align 10h
.text:0000000000013A90
.text:0000000000013A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000013A90
.text:0000000000013A90
.text:0000000000013A90                 public rpl_re_match_2
.text:0000000000013A90 rpl_re_match_2  proc near
.text:0000000000013A90
.text:0000000000013A90 arg_0           = qword ptr  8
.text:0000000000013A90 arg_8           = qword ptr  10h
.text:0000000000013A90
.text:0000000000013A90 ; __unwind {
.text:0000000000013A90                 sub     rsp, 8
.text:0000000000013A94                 push    1
.text:0000000000013A96                 push    [rsp+10h+arg_8]
.text:0000000000013A9A                 push    [rsp+18h+arg_0]
.text:0000000000013A9E                 push    0
.text:0000000000013AA0                 call    re_search_2_stub
.text:0000000000013AA5                 add     rsp, 28h
.text:0000000000013AA9                 retn
.text:0000000000013AA9 ; } // starts at 13A90
.text:0000000000013AA9 rpl_re_match_2  endp
.text:0000000000013AA9
.text:0000000000013AA9 ; ---------------------------------------------------------------------------
.text:0000000000013AAA                 align 10h
.text:0000000000013AB0
.text:0000000000013AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013AB0
.text:0000000000013AB0
.text:0000000000013AB0                 public rpl_re_search_2
.text:0000000000013AB0 rpl_re_search_2 proc near
.text:0000000000013AB0
.text:0000000000013AB0 arg_0           = qword ptr  8
.text:0000000000013AB0 arg_8           = qword ptr  10h
.text:0000000000013AB0 arg_10          = qword ptr  18h
.text:0000000000013AB0
.text:0000000000013AB0 ; __unwind {
.text:0000000000013AB0                 sub     rsp, 8
.text:0000000000013AB4                 push    0
.text:0000000000013AB6                 push    [rsp+10h+arg_10]
.text:0000000000013ABA                 push    [rsp+18h+arg_8]
.text:0000000000013ABE                 push    [rsp+20h+arg_0]
.text:0000000000013AC2                 call    re_search_2_stub
.text:0000000000013AC7                 add     rsp, 28h
.text:0000000000013ACB                 retn
.text:0000000000013ACB ; } // starts at 13AB0
.text:0000000000013ACB rpl_re_search_2 endp
.text:0000000000013ACB
.text:0000000000013ACB ; ---------------------------------------------------------------------------
.text:0000000000013ACC                 align 10h
.text:0000000000013AD0
.text:0000000000013AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013AD0
.text:0000000000013AD0
.text:0000000000013AD0                 public rpl_re_set_registers
.text:0000000000013AD0 rpl_re_set_registers proc near
.text:0000000000013AD0 ; __unwind {
.text:0000000000013AD0                 test    rdx, rdx
.text:0000000000013AD3                 jnz     short loc_13AF8
.text:0000000000013AD5                 and     byte ptr [rdi+38h], 0F9h
.text:0000000000013AD9                 mov     qword ptr [rsi], 0
.text:0000000000013AE0                 mov     qword ptr [rsi+10h], 0
.text:0000000000013AE8                 mov     qword ptr [rsi+8], 0
.text:0000000000013AF0                 retn
.text:0000000000013AF0 ; ---------------------------------------------------------------------------
.text:0000000000013AF1                 align 8
.text:0000000000013AF8
.text:0000000000013AF8 loc_13AF8:                              ; CODE XREF: rpl_re_set_registers+3↑j
.text:0000000000013AF8                 movzx   eax, byte ptr [rdi+38h]
.text:0000000000013AFC                 and     eax, 0FFFFFFF9h
.text:0000000000013AFF                 or      eax, 2
.text:0000000000013B02                 mov     [rdi+38h], al
.text:0000000000013B05                 mov     [rsi], rdx
.text:0000000000013B08                 mov     [rsi+8], rcx
.text:0000000000013B0C                 mov     [rsi+10h], r8
.text:0000000000013B10                 retn
.text:0000000000013B10 ; } // starts at 13AD0
.text:0000000000013B10 rpl_re_set_registers endp
.text:0000000000013B10
.text:0000000000013B10 ; ---------------------------------------------------------------------------
.text:0000000000013B11                 align 20h
.text:0000000000013B20
.text:0000000000013B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000013B20
.text:0000000000013B20 ; Attributes: info_from_lumina
.text:0000000000013B20
.text:0000000000013B20 ; int __fastcall close_stream(FILE *stream)
.text:0000000000013B20                 public close_stream
.text:0000000000013B20 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000013B20                                         ; close_stdout+33↑p
.text:0000000000013B20 ; __unwind {
.text:0000000000013B20                 push    r12
.text:0000000000013B22                 push    rbp
.text:0000000000013B23                 mov     rbp, rdi
.text:0000000000013B26                 push    rbx
.text:0000000000013B27                 call    ___fpending
.text:0000000000013B2C                 mov     ebx, [rbp+0]
.text:0000000000013B2F                 mov     rdi, rbp        ; stream
.text:0000000000013B32                 mov     r12, rax
.text:0000000000013B35                 call    rpl_fclose
.text:0000000000013B3A                 and     ebx, 20h
.text:0000000000013B3D                 test    ebx, ebx
.text:0000000000013B3F                 jnz     short loc_13B58
.text:0000000000013B41                 test    eax, eax
.text:0000000000013B43                 jz      short loc_13B4F
.text:0000000000013B45                 test    r12, r12
.text:0000000000013B48                 mov     eax, 0FFFFFFFFh
.text:0000000000013B4D                 jz      short loc_13B88
.text:0000000000013B4F
.text:0000000000013B4F loc_13B4F:                              ; CODE XREF: close_stream+23↑j
.text:0000000000013B4F                 pop     rbx
.text:0000000000013B50                 pop     rbp
.text:0000000000013B51                 pop     r12
.text:0000000000013B53                 retn
.text:0000000000013B53 ; ---------------------------------------------------------------------------
.text:0000000000013B54                 align 8
.text:0000000000013B58
.text:0000000000013B58 loc_13B58:                              ; CODE XREF: close_stream+1F↑j
.text:0000000000013B58                 test    eax, eax
.text:0000000000013B5A                 jnz     short loc_13B78
.text:0000000000013B5C                 call    ___errno_location
.text:0000000000013B61                 mov     dword ptr [rax], 0
.text:0000000000013B67                 mov     eax, 0FFFFFFFFh
.text:0000000000013B6C                 pop     rbx
.text:0000000000013B6D                 pop     rbp
.text:0000000000013B6E                 pop     r12
.text:0000000000013B70                 retn
.text:0000000000013B70 ; ---------------------------------------------------------------------------
.text:0000000000013B71                 align 8
.text:0000000000013B78
.text:0000000000013B78 loc_13B78:                              ; CODE XREF: close_stream+3A↑j
.text:0000000000013B78                 pop     rbx
.text:0000000000013B79                 mov     eax, 0FFFFFFFFh
.text:0000000000013B7E                 pop     rbp
.text:0000000000013B7F                 pop     r12
.text:0000000000013B81                 retn
.text:0000000000013B81 ; ---------------------------------------------------------------------------
.text:0000000000013B82                 align 8
.text:0000000000013B88
.text:0000000000013B88 loc_13B88:                              ; CODE XREF: close_stream+2D↑j
.text:0000000000013B88                 call    ___errno_location
.text:0000000000013B8D                 cmp     dword ptr [rax], 9
.text:0000000000013B90                 pop     rbx
.text:0000000000013B91                 pop     rbp
.text:0000000000013B92                 pop     r12
.text:0000000000013B94                 setnz   al
.text:0000000000013B97                 movzx   eax, al
.text:0000000000013B9A                 neg     eax
.text:0000000000013B9C                 retn
.text:0000000000013B9C ; } // starts at 13B20
.text:0000000000013B9C close_stream    endp
.text:0000000000013B9C
.text:0000000000013B9C ; ---------------------------------------------------------------------------
.text:0000000000013B9D                 align 20h
.text:0000000000013BA0
.text:0000000000013BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013BA0
.text:0000000000013BA0 ; Attributes: info_from_lumina
.text:0000000000013BA0
.text:0000000000013BA0 ; char *__fastcall last_component(const char *name)
.text:0000000000013BA0                 public last_component
.text:0000000000013BA0 last_component  proc near               ; CODE XREF: mfile_name_concat+17↑p
.text:0000000000013BA0 ; __unwind {
.text:0000000000013BA0                 movzx   edx, byte ptr [rdi]
.text:0000000000013BA3                 mov     rax, rdi
.text:0000000000013BA6                 cmp     dl, 2Fh ; '/'
.text:0000000000013BA9                 jnz     short loc_13BBC
.text:0000000000013BAB                 nop     dword ptr [rax+rax+00h]
.text:0000000000013BB0
.text:0000000000013BB0 loc_13BB0:                              ; CODE XREF: last_component+1A↓j
.text:0000000000013BB0                 add     rax, 1
.text:0000000000013BB4                 movzx   edx, byte ptr [rax]
.text:0000000000013BB7                 cmp     dl, 2Fh ; '/'
.text:0000000000013BBA                 jz      short loc_13BB0
.text:0000000000013BBC
.text:0000000000013BBC loc_13BBC:                              ; CODE XREF: last_component+9↑j
.text:0000000000013BBC                 test    dl, dl
.text:0000000000013BBE                 jz      short locret_13BFA
.text:0000000000013BC0                 mov     rcx, rax
.text:0000000000013BC3                 xor     esi, esi
.text:0000000000013BC5                 jmp     short loc_13BE5
.text:0000000000013BC5 ; ---------------------------------------------------------------------------
.text:0000000000013BC7                 align 10h
.text:0000000000013BD0
.text:0000000000013BD0 loc_13BD0:                              ; CODE XREF: last_component+48↓j
.text:0000000000013BD0                 test    sil, sil
.text:0000000000013BD3                 jz      short loc_13BDA
.text:0000000000013BD5                 mov     rax, rcx
.text:0000000000013BD8                 xor     esi, esi
.text:0000000000013BDA
.text:0000000000013BDA loc_13BDA:                              ; CODE XREF: last_component+33↑j
.text:0000000000013BDA                 add     rcx, 1
.text:0000000000013BDE                 movzx   edx, byte ptr [rcx]
.text:0000000000013BE1                 test    dl, dl
.text:0000000000013BE3                 jz      short locret_13BFA
.text:0000000000013BE5
.text:0000000000013BE5 loc_13BE5:                              ; CODE XREF: last_component+25↑j
.text:0000000000013BE5                                         ; last_component+58↓j
.text:0000000000013BE5                 cmp     dl, 2Fh ; '/'
.text:0000000000013BE8                 jnz     short loc_13BD0
.text:0000000000013BEA                 add     rcx, 1
.text:0000000000013BEE                 movzx   edx, byte ptr [rcx]
.text:0000000000013BF1                 mov     esi, 1
.text:0000000000013BF6                 test    dl, dl
.text:0000000000013BF8                 jnz     short loc_13BE5
.text:0000000000013BFA
.text:0000000000013BFA locret_13BFA:                           ; CODE XREF: last_component+1E↑j
.text:0000000000013BFA                                         ; last_component+43↑j
.text:0000000000013BFA                 rep retn
.text:0000000000013BFA ; } // starts at 13BA0
.text:0000000000013BFA last_component  endp
.text:0000000000013BFA
.text:0000000000013BFA ; ---------------------------------------------------------------------------
.text:0000000000013BFC                 align 20h
.text:0000000000013C00
.text:0000000000013C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000013C00
.text:0000000000013C00 ; Attributes: info_from_lumina
.text:0000000000013C00
.text:0000000000013C00 ; size_t __fastcall base_len(const char *name)
.text:0000000000013C00                 public base_len
.text:0000000000013C00 base_len        proc near               ; CODE XREF: mfile_name_concat+22↑p
.text:0000000000013C00 ; __unwind {
.text:0000000000013C00                 push    rbx
.text:0000000000013C01                 mov     rbx, rdi
.text:0000000000013C04                 call    _strlen
.text:0000000000013C09                 cmp     rax, 1
.text:0000000000013C0D                 jbe     short loc_13C1A
.text:0000000000013C0F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000013C14                 lea     rdx, [rax-1]
.text:0000000000013C18                 jz      short loc_13C28
.text:0000000000013C1A
.text:0000000000013C1A loc_13C1A:                              ; CODE XREF: base_len+D↑j
.text:0000000000013C1A                 pop     rbx
.text:0000000000013C1B                 retn
.text:0000000000013C1B ; ---------------------------------------------------------------------------
.text:0000000000013C1C                 align 20h
.text:0000000000013C20
.text:0000000000013C20 loc_13C20:                              ; CODE XREF: base_len+37↓j
.text:0000000000013C20                 mov     rdx, rax
.text:0000000000013C23                 nop     dword ptr [rax+rax+00h]
.text:0000000000013C28
.text:0000000000013C28 loc_13C28:                              ; CODE XREF: base_len+18↑j
.text:0000000000013C28                 cmp     rdx, 1
.text:0000000000013C2C                 jz      short loc_13C40
.text:0000000000013C2E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000013C33                 lea     rax, [rdx-1]
.text:0000000000013C37                 jz      short loc_13C20
.text:0000000000013C39                 mov     rax, rdx
.text:0000000000013C3C                 pop     rbx
.text:0000000000013C3D                 retn
.text:0000000000013C3D ; ---------------------------------------------------------------------------
.text:0000000000013C3E                 align 20h
.text:0000000000013C40
.text:0000000000013C40 loc_13C40:                              ; CODE XREF: base_len+2C↑j
.text:0000000000013C40                 mov     eax, 1
.text:0000000000013C45                 pop     rbx
.text:0000000000013C46                 retn
.text:0000000000013C46 ; } // starts at 13C00
.text:0000000000013C46 base_len        endp
.text:0000000000013C46
.text:0000000000013C46 ; ---------------------------------------------------------------------------
.text:0000000000013C47                 align 10h
.text:0000000000013C50
.text:0000000000013C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000013C50
.text:0000000000013C50 ; Attributes: info_from_lumina
.text:0000000000013C50
.text:0000000000013C50 ; __int64 __fastcall fd_safer_flag(int fd)
.text:0000000000013C50                 public fd_safer_flag
.text:0000000000013C50 fd_safer_flag   proc near               ; CODE XREF: mkostemp_safer+D↑j
.text:0000000000013C50 ; __unwind {
.text:0000000000013C50                 push    r13
.text:0000000000013C52                 push    r12
.text:0000000000013C54                 push    rbp
.text:0000000000013C55                 push    rbx
.text:0000000000013C56                 mov     ebx, edi
.text:0000000000013C58                 sub     rsp, 8
.text:0000000000013C5C                 cmp     edi, 2
.text:0000000000013C5F                 ja      short loc_13C82
.text:0000000000013C61                 call    dup_safer_flag
.text:0000000000013C66                 mov     r12d, eax
.text:0000000000013C69                 call    ___errno_location
.text:0000000000013C6E                 mov     r13d, [rax]
.text:0000000000013C71                 mov     rbp, rax
.text:0000000000013C74                 mov     edi, ebx        ; fd
.text:0000000000013C76                 call    _close
.text:0000000000013C7B                 mov     ebx, r12d
.text:0000000000013C7E                 mov     [rbp+0], r13d
.text:0000000000013C82
.text:0000000000013C82 loc_13C82:                              ; CODE XREF: fd_safer_flag+F↑j
.text:0000000000013C82                 add     rsp, 8
.text:0000000000013C86                 mov     eax, ebx
.text:0000000000013C88                 pop     rbx
.text:0000000000013C89                 pop     rbp
.text:0000000000013C8A                 pop     r12
.text:0000000000013C8C                 pop     r13
.text:0000000000013C8E                 retn
.text:0000000000013C8E ; } // starts at 13C50
.text:0000000000013C8E fd_safer_flag   endp
.text:0000000000013C8E
.text:0000000000013C8E ; ---------------------------------------------------------------------------
.text:0000000000013C8F                 align 10h
.text:0000000000013C90
.text:0000000000013C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000013C90
.text:0000000000013C90
.text:0000000000013C90                 public dup_safer_flag
.text:0000000000013C90 dup_safer_flag  proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:0000000000013C90 ; __unwind {
.text:0000000000013C90                 and     esi, 80000h
.text:0000000000013C96                 mov     eax, 406h
.text:0000000000013C9B                 mov     edx, 3
.text:0000000000013CA0                 cmovnz  esi, eax
.text:0000000000013CA3                 xor     eax, eax
.text:0000000000013CA5                 jmp     rpl_fcntl
.text:0000000000013CA5 ; } // starts at 13C90
.text:0000000000013CA5 dup_safer_flag  endp
.text:0000000000013CA5
.text:0000000000013CA5 ; ---------------------------------------------------------------------------
.text:0000000000013CAA                 align 10h
.text:0000000000013CB0
.text:0000000000013CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013CB0
.text:0000000000013CB0
.text:0000000000013CB0                 public hard_locale
.text:0000000000013CB0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000013CB0 ; __unwind {
.text:0000000000013CB0                 sub     rsp, 8
.text:0000000000013CB4                 xor     esi, esi        ; locale
.text:0000000000013CB6                 call    _setlocale
.text:0000000000013CBB                 mov     rdx, rax
.text:0000000000013CBE                 mov     eax, 1
.text:0000000000013CC3                 test    rdx, rdx
.text:0000000000013CC6                 jz      short loc_13CE5
.text:0000000000013CC8                 lea     rdi, unk_15790
.text:0000000000013CCF                 mov     ecx, 2
.text:0000000000013CD4                 mov     rsi, rdx
.text:0000000000013CD7                 repe cmpsb
.text:0000000000013CD9                 setnbe  cl
.text:0000000000013CDC                 sbb     cl, 0
.text:0000000000013CDF                 xor     eax, eax
.text:0000000000013CE1                 test    cl, cl
.text:0000000000013CE3                 jnz     short loc_13CF0
.text:0000000000013CE5
.text:0000000000013CE5 loc_13CE5:                              ; CODE XREF: hard_locale+16↑j
.text:0000000000013CE5                 add     rsp, 8
.text:0000000000013CE9                 retn
.text:0000000000013CE9 ; ---------------------------------------------------------------------------
.text:0000000000013CEA                 align 10h
.text:0000000000013CF0
.text:0000000000013CF0 loc_13CF0:                              ; CODE XREF: hard_locale+33↑j
.text:0000000000013CF0                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000013CF7                 mov     ecx, 6
.text:0000000000013CFC                 mov     rsi, rdx
.text:0000000000013CFF                 repe cmpsb
.text:0000000000013D01                 setnbe  al
.text:0000000000013D04                 sbb     al, 0
.text:0000000000013D06                 test    al, al
.text:0000000000013D08                 setnz   al
.text:0000000000013D0B                 add     rsp, 8
.text:0000000000013D0F                 retn
.text:0000000000013D0F ; } // starts at 13CB0
.text:0000000000013D0F hard_locale     endp
.text:0000000000013D0F
.text:0000000000013D10
.text:0000000000013D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D10
.text:0000000000013D10
.text:0000000000013D10                 public locale_charset
.text:0000000000013D10 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000013D10 ; __unwind {
.text:0000000000013D10                 sub     rsp, 8
.text:0000000000013D14                 mov     edi, 0Eh        ; item
.text:0000000000013D19                 call    _nl_langinfo
.text:0000000000013D1E                 test    rax, rax
.text:0000000000013D21                 jz      short loc_13D40
.text:0000000000013D23                 cmp     byte ptr [rax], 0
.text:0000000000013D26                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000013D2D                 cmovz   rax, rdx
.text:0000000000013D31                 add     rsp, 8
.text:0000000000013D35                 retn
.text:0000000000013D35 ; ---------------------------------------------------------------------------
.text:0000000000013D36                 align 20h
.text:0000000000013D40
.text:0000000000013D40 loc_13D40:                              ; CODE XREF: locale_charset+11↑j
.text:0000000000013D40                 lea     rax, aAscii     ; "ASCII"
.text:0000000000013D47                 add     rsp, 8
.text:0000000000013D4B                 retn
.text:0000000000013D4B ; } // starts at 13D10
.text:0000000000013D4B locale_charset  endp
.text:0000000000013D4B
.text:0000000000013D4B ; ---------------------------------------------------------------------------
.text:0000000000013D4C                 align 10h
.text:0000000000013D50
.text:0000000000013D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D50
.text:0000000000013D50
.text:0000000000013D50                 public dup_safer
.text:0000000000013D50 dup_safer       proc near               ; CODE XREF: fd_safer_flag_0+11↑p
.text:0000000000013D50 ; __unwind {
.text:0000000000013D50                 mov     edx, 3
.text:0000000000013D55                 xor     esi, esi
.text:0000000000013D57                 xor     eax, eax
.text:0000000000013D59                 jmp     rpl_fcntl
.text:0000000000013D59 ; } // starts at 13D50
.text:0000000000013D59 dup_safer       endp
.text:0000000000013D59
.text:0000000000013D59 ; ---------------------------------------------------------------------------
.text:0000000000013D5E                 align 20h
.text:0000000000013D60
.text:0000000000013D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D60
.text:0000000000013D60 ; Attributes: info_from_lumina
.text:0000000000013D60
.text:0000000000013D60 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000013D60                 public rpl_fclose
.text:0000000000013D60 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000013D60 ; __unwind {
.text:0000000000013D60                 push    r12
.text:0000000000013D62                 push    rbp
.text:0000000000013D63                 push    rbx
.text:0000000000013D64                 mov     rbx, rdi
.text:0000000000013D67                 call    _fileno
.text:0000000000013D6C                 test    eax, eax
.text:0000000000013D6E                 mov     rdi, rbx        ; fp
.text:0000000000013D71                 js      short loc_13DC7
.text:0000000000013D73                 call    ___freading
.text:0000000000013D78                 test    eax, eax
.text:0000000000013D7A                 jnz     short loc_13DA8
.text:0000000000013D7C
.text:0000000000013D7C loc_13D7C:                              ; CODE XREF: rpl_fclose+62↓j
.text:0000000000013D7C                 mov     rdi, rbx        ; stream
.text:0000000000013D7F                 call    rpl_fflush
.text:0000000000013D84                 test    eax, eax
.text:0000000000013D86                 jz      short loc_13DC4
.text:0000000000013D88                 call    ___errno_location
.text:0000000000013D8D                 mov     r12d, [rax]
.text:0000000000013D90                 mov     rdi, rbx        ; stream
.text:0000000000013D93                 mov     rbp, rax
.text:0000000000013D96                 call    _fclose
.text:0000000000013D9B                 test    r12d, r12d
.text:0000000000013D9E                 jnz     short loc_13DD0
.text:0000000000013DA0
.text:0000000000013DA0 loc_13DA0:                              ; CODE XREF: rpl_fclose+79↓j
.text:0000000000013DA0                 pop     rbx
.text:0000000000013DA1                 pop     rbp
.text:0000000000013DA2                 pop     r12
.text:0000000000013DA4                 retn
.text:0000000000013DA4 ; ---------------------------------------------------------------------------
.text:0000000000013DA5                 align 8
.text:0000000000013DA8
.text:0000000000013DA8 loc_13DA8:                              ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000013DA8                 mov     rdi, rbx        ; stream
.text:0000000000013DAB                 call    _fileno
.text:0000000000013DB0                 xor     esi, esi        ; offset
.text:0000000000013DB2                 mov     edx, 1          ; whence
.text:0000000000013DB7                 mov     edi, eax        ; fd
.text:0000000000013DB9                 call    _lseek
.text:0000000000013DBE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000013DC2                 jnz     short loc_13D7C
.text:0000000000013DC4
.text:0000000000013DC4 loc_13DC4:                              ; CODE XREF: rpl_fclose+26↑j
.text:0000000000013DC4                 mov     rdi, rbx        ; stream
.text:0000000000013DC7
.text:0000000000013DC7 loc_13DC7:                              ; CODE XREF: rpl_fclose+11↑j
.text:0000000000013DC7                 pop     rbx
.text:0000000000013DC8                 pop     rbp
.text:0000000000013DC9                 pop     r12
.text:0000000000013DCB                 jmp     _fclose
.text:0000000000013DD0 ; ---------------------------------------------------------------------------
.text:0000000000013DD0
.text:0000000000013DD0 loc_13DD0:                              ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000013DD0                 mov     [rbp+0], r12d
.text:0000000000013DD4                 mov     eax, 0FFFFFFFFh
.text:0000000000013DD9                 jmp     short loc_13DA0
.text:0000000000013DD9 ; } // starts at 13D60
.text:0000000000013DD9 rpl_fclose      endp
.text:0000000000013DD9
.text:0000000000013DD9 ; ---------------------------------------------------------------------------
.text:0000000000013DDB                 align 20h
.text:0000000000013DE0
.text:0000000000013DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013DE0
.text:0000000000013DE0
.text:0000000000013DE0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000013DE0                 public rpl_fcntl
.text:0000000000013DE0 rpl_fcntl       proc near               ; CODE XREF: dup_safer_flag+15↑j
.text:0000000000013DE0                                         ; dup_safer+9↑j
.text:0000000000013DE0
.text:0000000000013DE0 var_68          = dword ptr -68h
.text:0000000000013DE0 var_60          = qword ptr -60h
.text:0000000000013DE0 var_58          = qword ptr -58h
.text:0000000000013DE0 var_50          = qword ptr -50h
.text:0000000000013DE0 var_48          = byte ptr -48h
.text:0000000000013DE0 var_38          = qword ptr -38h
.text:0000000000013DE0 var_30          = qword ptr -30h
.text:0000000000013DE0 var_28          = qword ptr -28h
.text:0000000000013DE0 var_20          = qword ptr -20h
.text:0000000000013DE0 arg_0           = byte ptr  8
.text:0000000000013DE0
.text:0000000000013DE0 ; __unwind {
.text:0000000000013DE0                 push    r12
.text:0000000000013DE2                 push    rbp
.text:0000000000013DE3                 mov     ebp, edi
.text:0000000000013DE5                 push    rbx
.text:0000000000013DE6                 sub     rsp, 50h
.text:0000000000013DEA                 mov     rax, fs:28h
.text:0000000000013DF3                 mov     [rsp+68h+var_50], rax
.text:0000000000013DF8                 xor     eax, eax
.text:0000000000013DFA                 lea     rax, [rsp+68h+arg_0]
.text:0000000000013DFF                 test    esi, esi
.text:0000000000013E01                 mov     [rsp+68h+var_38], rdx
.text:0000000000013E06                 mov     [rsp+68h+var_30], rcx
.text:0000000000013E0B                 mov     [rsp+68h+var_28], r8
.text:0000000000013E10                 mov     [rsp+68h+var_60], rax
.text:0000000000013E15                 lea     rax, [rsp+68h+var_48]
.text:0000000000013E1A                 mov     [rsp+68h+var_20], r9
.text:0000000000013E1F                 mov     [rsp+68h+var_68], 10h
.text:0000000000013E26                 mov     [rsp+68h+var_58], rax
.text:0000000000013E2B                 jz      loc_14032
.text:0000000000013E31                 cmp     esi, 406h
.text:0000000000013E37                 jnz     short loc_13E80
.text:0000000000013E39                 mov     rax, [rsp+68h+var_58]
.text:0000000000013E3E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000013E45                 mov     [rsp+68h+var_68], 18h
.text:0000000000013E4C                 mov     r12d, [rax+10h]
.text:0000000000013E50                 mov     edx, r12d
.text:0000000000013E53                 js      loc_13F83
.text:0000000000013E59                 xor     eax, eax
.text:0000000000013E5B                 mov     esi, 406h       ; cmd
.text:0000000000013E60                 call    _fcntl
.text:0000000000013E65                 test    eax, eax
.text:0000000000013E67                 mov     ebx, eax
.text:0000000000013E69                 js      loc_13FF8
.text:0000000000013E6F
.text:0000000000013E6F loc_13E6F:                              ; CODE XREF: rpl_fcntl+220↓j
.text:0000000000013E6F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000013E79                 jmp     short loc_13EC0
.text:0000000000013E79 ; ---------------------------------------------------------------------------
.text:0000000000013E7B                 align 20h
.text:0000000000013E80
.text:0000000000013E80 loc_13E80:                              ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000013E80                 cmp     esi, 0Bh
.text:0000000000013E83                 jz      short loc_13EB0
.text:0000000000013E85                 jg      short loc_13EE0
.text:0000000000013E87                 cmp     esi, 4
.text:0000000000013E8A                 jz      loc_13F60
.text:0000000000013E90                 jg      loc_13F50
.text:0000000000013E96                 cmp     esi, 2
.text:0000000000013E99                 jz      loc_13F60
.text:0000000000013E9F                 jg      short loc_13EB0
.text:0000000000013EA1                 cmp     esi, 1
.text:0000000000013EA4                 jnz     short loc_13F08
.text:0000000000013EA6                 db      2Eh
.text:0000000000013EA6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000013EB0
.text:0000000000013EB0 loc_13EB0:                              ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000013EB0                                         ; rpl_fcntl+BF↑j ...
.text:0000000000013EB0                 mov     edi, ebp        ; fd
.text:0000000000013EB2                 xor     eax, eax
.text:0000000000013EB4                 call    _fcntl
.text:0000000000013EB9                 mov     ebx, eax
.text:0000000000013EBB                 nop     dword ptr [rax+rax+00h]
.text:0000000000013EC0
.text:0000000000013EC0 loc_13EC0:                              ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000013EC0                                         ; rpl_fcntl+147↓j ...
.text:0000000000013EC0                 mov     rcx, [rsp+68h+var_50]
.text:0000000000013EC5                 xor     rcx, fs:28h
.text:0000000000013ECE                 mov     eax, ebx
.text:0000000000013ED0                 jnz     loc_1402D
.text:0000000000013ED6                 add     rsp, 50h
.text:0000000000013EDA                 pop     rbx
.text:0000000000013EDB                 pop     rbp
.text:0000000000013EDC                 pop     r12
.text:0000000000013EDE                 retn
.text:0000000000013EDE ; ---------------------------------------------------------------------------
.text:0000000000013EDF                 align 20h
.text:0000000000013EE0
.text:0000000000013EE0 loc_13EE0:                              ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000013EE0                 cmp     esi, 407h
.text:0000000000013EE6                 jg      short loc_13F30
.text:0000000000013EE8                 cmp     esi, 406h
.text:0000000000013EEE                 jge     short loc_13F60
.text:0000000000013EF0                 cmp     esi, 401h
.text:0000000000013EF6                 jz      short loc_13EB0
.text:0000000000013EF8                 cmp     esi, 402h
.text:0000000000013EFE                 jz      short loc_13F60
.text:0000000000013F00                 cmp     esi, 400h
.text:0000000000013F06                 jz      short loc_13F60
.text:0000000000013F08
.text:0000000000013F08 loc_13F08:                              ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000013F08                                         ; rpl_fcntl+164↓j ...
.text:0000000000013F08                 mov     eax, [rsp+68h+var_68]
.text:0000000000013F0B                 cmp     eax, 2Fh ; '/'
.text:0000000000013F0E                 ja      loc_1404A
.text:0000000000013F14                 add     rax, [rsp+68h+var_58]
.text:0000000000013F19
.text:0000000000013F19 loc_13F19:                              ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000013F19                 mov     rdx, [rax]
.text:0000000000013F1C                 mov     edi, ebp        ; fd
.text:0000000000013F1E                 xor     eax, eax
.text:0000000000013F20                 call    _fcntl
.text:0000000000013F25                 mov     ebx, eax
.text:0000000000013F27                 jmp     short loc_13EC0
.text:0000000000013F27 ; ---------------------------------------------------------------------------
.text:0000000000013F29                 align 10h
.text:0000000000013F30
.text:0000000000013F30 loc_13F30:                              ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000013F30                 cmp     esi, 409h
.text:0000000000013F36                 jz      short loc_13F60
.text:0000000000013F38                 jl      loc_13EB0
.text:0000000000013F3E                 cmp     esi, 40Ah
.text:0000000000013F44                 jnz     short loc_13F08
.text:0000000000013F46                 jmp     loc_13EB0
.text:0000000000013F46 ; ---------------------------------------------------------------------------
.text:0000000000013F4B                 align 10h
.text:0000000000013F50
.text:0000000000013F50 loc_13F50:                              ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000013F50                 cmp     esi, 9
.text:0000000000013F53                 jz      loc_13EB0
.text:0000000000013F59                 jg      short loc_13F60
.text:0000000000013F5B                 cmp     esi, 8
.text:0000000000013F5E                 jnz     short loc_13F08
.text:0000000000013F60
.text:0000000000013F60 loc_13F60:                              ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000013F60                                         ; rpl_fcntl+B9↑j ...
.text:0000000000013F60                 mov     eax, [rsp+68h+var_68]
.text:0000000000013F63                 cmp     eax, 2Fh ; '/'
.text:0000000000013F66                 ja      loc_14054
.text:0000000000013F6C                 add     rax, [rsp+68h+var_58]
.text:0000000000013F71
.text:0000000000013F71 loc_13F71:                              ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000013F71                 mov     edx, [rax]
.text:0000000000013F73                 mov     edi, ebp        ; fd
.text:0000000000013F75                 xor     eax, eax
.text:0000000000013F77                 call    _fcntl
.text:0000000000013F7C                 mov     ebx, eax
.text:0000000000013F7E                 jmp     loc_13EC0
.text:0000000000013F83 ; ---------------------------------------------------------------------------
.text:0000000000013F83
.text:0000000000013F83 loc_13F83:                              ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000013F83                 xor     esi, esi        ; cmd
.text:0000000000013F85                 xor     eax, eax
.text:0000000000013F87                 call    _fcntl
.text:0000000000013F8C                 test    eax, eax
.text:0000000000013F8E                 mov     ebx, eax
.text:0000000000013F90                 js      loc_13EC0
.text:0000000000013F96                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000013F9D                 jnz     loc_13EC0
.text:0000000000013FA3
.text:0000000000013FA3 loc_13FA3:                              ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000013FA3                 xor     eax, eax
.text:0000000000013FA5                 mov     esi, 1          ; cmd
.text:0000000000013FAA                 mov     edi, ebx        ; fd
.text:0000000000013FAC                 call    _fcntl
.text:0000000000013FB1                 test    eax, eax
.text:0000000000013FB3                 js      short loc_13FD1
.text:0000000000013FB5                 or      eax, 1
.text:0000000000013FB8                 mov     esi, 2          ; cmd
.text:0000000000013FBD                 mov     edi, ebx        ; fd
.text:0000000000013FBF                 mov     edx, eax
.text:0000000000013FC1                 xor     eax, eax
.text:0000000000013FC3                 call    _fcntl
.text:0000000000013FC8                 cmp     eax, 0FFFFFFFFh
.text:0000000000013FCB                 jnz     loc_13EC0
.text:0000000000013FD1
.text:0000000000013FD1 loc_13FD1:                              ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000013FD1                 call    ___errno_location
.text:0000000000013FD6                 mov     r12d, [rax]
.text:0000000000013FD9                 mov     rbp, rax
.text:0000000000013FDC                 mov     edi, ebx        ; fd
.text:0000000000013FDE                 call    _close
.text:0000000000013FE3                 mov     ebx, 0FFFFFFFFh
.text:0000000000013FE8                 mov     [rbp+0], r12d
.text:0000000000013FEC                 jmp     loc_13EC0
.text:0000000000013FEC ; ---------------------------------------------------------------------------
.text:0000000000013FF1                 align 8
.text:0000000000013FF8
.text:0000000000013FF8 loc_13FF8:                              ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000013FF8                 call    ___errno_location
.text:0000000000013FFD                 cmp     dword ptr [rax], 16h
.text:0000000000014000                 jnz     loc_13E6F
.text:0000000000014006                 xor     esi, esi        ; cmd
.text:0000000000014008                 xor     eax, eax
.text:000000000001400A                 mov     edx, r12d
.text:000000000001400D                 mov     edi, ebp        ; fd
.text:000000000001400F                 call    _fcntl
.text:0000000000014014                 test    eax, eax
.text:0000000000014016                 mov     ebx, eax
.text:0000000000014018                 js      loc_13EC0
.text:000000000001401E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000014028                 jmp     loc_13FA3
.text:000000000001402D ; ---------------------------------------------------------------------------
.text:000000000001402D
.text:000000000001402D loc_1402D:                              ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000001402D                 call    ___stack_chk_fail
.text:0000000000014032 ; ---------------------------------------------------------------------------
.text:0000000000014032
.text:0000000000014032 loc_14032:                              ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000014032                 mov     rax, [rsp+68h+var_58]
.text:0000000000014037                 xor     esi, esi        ; cmd
.text:0000000000014039                 mov     edx, [rax+10h]
.text:000000000001403C                 xor     eax, eax
.text:000000000001403E                 call    _fcntl
.text:0000000000014043                 mov     ebx, eax
.text:0000000000014045                 jmp     loc_13EC0
.text:000000000001404A ; ---------------------------------------------------------------------------
.text:000000000001404A
.text:000000000001404A loc_1404A:                              ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000001404A                 mov     rax, [rsp+68h+var_60]
.text:000000000001404F                 jmp     loc_13F19
.text:0000000000014054 ; ---------------------------------------------------------------------------
.text:0000000000014054
.text:0000000000014054 loc_14054:                              ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000014054                 mov     rax, [rsp+68h+var_60]
.text:0000000000014059                 jmp     loc_13F71
.text:0000000000014059 ; } // starts at 13DE0
.text:0000000000014059 rpl_fcntl       endp
.text:0000000000014059
.text:0000000000014059 ; ---------------------------------------------------------------------------
.text:000000000001405E                 align 20h
.text:0000000000014060
.text:0000000000014060 ; =============== S U B R O U T I N E =======================================
.text:0000000000014060
.text:0000000000014060 ; Attributes: info_from_lumina
.text:0000000000014060
.text:0000000000014060 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000014060                 public rpl_fflush
.text:0000000000014060 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000014060 ; __unwind {
.text:0000000000014060                 test    rdi, rdi
.text:0000000000014063                 push    rbx
.text:0000000000014064                 mov     rbx, rdi
.text:0000000000014067                 jz      short loc_1407A
.text:0000000000014069                 call    ___freading
.text:000000000001406E                 test    eax, eax
.text:0000000000014070                 jz      short loc_1407A
.text:0000000000014072                 test    dword ptr [rbx], 100h
.text:0000000000014078                 jnz     short loc_14088
.text:000000000001407A
.text:000000000001407A loc_1407A:                              ; CODE XREF: rpl_fflush+7↑j
.text:000000000001407A                                         ; rpl_fflush+10↑j
.text:000000000001407A                 mov     rdi, rbx        ; stream
.text:000000000001407D                 pop     rbx
.text:000000000001407E                 jmp     _fflush
.text:000000000001407E ; ---------------------------------------------------------------------------
.text:0000000000014083                 align 8
.text:0000000000014088
.text:0000000000014088 loc_14088:                              ; CODE XREF: rpl_fflush+18↑j
.text:0000000000014088                 mov     rdi, rbx
.text:000000000001408B                 mov     edx, 1
.text:0000000000014090                 xor     esi, esi
.text:0000000000014092                 call    rpl_fseeko
.text:0000000000014097                 mov     rdi, rbx        ; stream
.text:000000000001409A                 pop     rbx
.text:000000000001409B                 jmp     _fflush
.text:000000000001409B ; } // starts at 14060
.text:000000000001409B rpl_fflush      endp
.text:000000000001409B
.text:00000000000140A0
.text:00000000000140A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000140A0
.text:00000000000140A0 ; Attributes: info_from_lumina
.text:00000000000140A0
.text:00000000000140A0 ; void _libc_csu_init(void)
.text:00000000000140A0                 public __libc_csu_init
.text:00000000000140A0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000140A0 ; __unwind {
.text:00000000000140A0                 push    r15
.text:00000000000140A2                 push    r14
.text:00000000000140A4                 mov     r15, rdx
.text:00000000000140A7                 push    r13
.text:00000000000140A9                 push    r12
.text:00000000000140AB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000140B2                 push    rbp
.text:00000000000140B3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000140BA                 push    rbx
.text:00000000000140BB                 mov     r13d, edi
.text:00000000000140BE                 mov     r14, rsi
.text:00000000000140C1                 sub     rbp, r12
.text:00000000000140C4                 sub     rsp, 8
.text:00000000000140C8                 sar     rbp, 3
.text:00000000000140CC                 call    _init_proc
.text:00000000000140D1                 test    rbp, rbp
.text:00000000000140D4                 jz      short loc_140F6
.text:00000000000140D6                 xor     ebx, ebx
.text:00000000000140D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000140E0
.text:00000000000140E0 loc_140E0:                              ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000140E0                 mov     rdx, r15
.text:00000000000140E3                 mov     rsi, r14
.text:00000000000140E6                 mov     edi, r13d
.text:00000000000140E9                 call    ds:(__frame_dummy_init_array_entry - 218A70h)[r12+rbx*8]
.text:00000000000140ED                 add     rbx, 1
.text:00000000000140F1                 cmp     rbp, rbx
.text:00000000000140F4                 jnz     short loc_140E0
.text:00000000000140F6
.text:00000000000140F6 loc_140F6:                              ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000140F6                 add     rsp, 8
.text:00000000000140FA                 pop     rbx
.text:00000000000140FB                 pop     rbp
.text:00000000000140FC                 pop     r12
.text:00000000000140FE                 pop     r13
.text:0000000000014100                 pop     r14
.text:0000000000014102                 pop     r15
.text:0000000000014104                 retn
.text:0000000000014104 ; } // starts at 140A0
.text:0000000000014104 __libc_csu_init endp
.text:0000000000014104
.text:0000000000014104 ; ---------------------------------------------------------------------------
.text:0000000000014105                 align 10h
.text:0000000000014110
.text:0000000000014110 ; =============== S U B R O U T I N E =======================================
.text:0000000000014110
.text:0000000000014110
.text:0000000000014110 ; void _libc_csu_fini(void)
.text:0000000000014110                 public __libc_csu_fini
.text:0000000000014110 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000014110 ; __unwind {
.text:0000000000014110                 rep retn
.text:0000000000014110 ; } // starts at 14110
.text:0000000000014110 __libc_csu_fini endp
.text:0000000000014110
.text:0000000000014110 ; ---------------------------------------------------------------------------
.text:0000000000014112                 align 20h
.text:0000000000014120
.text:0000000000014120 ; =============== S U B R O U T I N E =======================================
.text:0000000000014120
.text:0000000000014120
.text:0000000000014120 atexit          proc near               ; CODE XREF: main+59↑p
.text:0000000000014120 ; __unwind {
.text:0000000000014120                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000014127                 xor     esi, esi        ; obj
.text:0000000000014129                 jmp     ___cxa_atexit
.text:0000000000014129 ; } // starts at 14120
.text:0000000000014129 atexit          endp
.text:0000000000014129
.text:0000000000014129 _text           ends
.text:0000000000014129
LOAD:000000000001412E ; ===========================================================================
LOAD:000000000001412E
LOAD:000000000001412E ; Segment type: Pure code
LOAD:000000000001412E ; Segment permissions: Read/Execute
LOAD:000000000001412E LOAD            segment byte public 'CODE' use64
LOAD:000000000001412E                 assume cs:LOAD
LOAD:000000000001412E                 ;org 1412Eh
LOAD:000000000001412E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001412E                 align 10h
LOAD:000000000001412E LOAD            ends
LOAD:000000000001412E
.fini:0000000000014130 ; ===========================================================================
.fini:0000000000014130
.fini:0000000000014130 ; Segment type: Pure code
.fini:0000000000014130 ; Segment permissions: Read/Execute
.fini:0000000000014130 _fini           segment dword public 'CODE' use64
.fini:0000000000014130                 assume cs:_fini
.fini:0000000000014130                 ;org 14130h
.fini:0000000000014130                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000014130
.fini:0000000000014130 ; =============== S U B R O U T I N E =======================================
.fini:0000000000014130
.fini:0000000000014130
.fini:0000000000014130                 public _term_proc
.fini:0000000000014130 _term_proc      proc near
.fini:0000000000014130                 sub     rsp, 8          ; _fini
.fini:0000000000014134                 add     rsp, 8
.fini:0000000000014138                 retn
.fini:0000000000014138 _term_proc      endp
.fini:0000000000014138
.fini:0000000000014138 _fini           ends
.fini:0000000000014138
LOAD:0000000000014139 ; ===========================================================================
LOAD:0000000000014139
LOAD:0000000000014139 ; Segment type: Pure code
LOAD:0000000000014139 ; Segment permissions: Read/Execute
LOAD:0000000000014139 LOAD            segment byte public 'CODE' use64
LOAD:0000000000014139                 assume cs:LOAD
LOAD:0000000000014139                 ;org 14139h
LOAD:0000000000014139                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000014139                 align 20h
LOAD:0000000000014139 LOAD            ends
LOAD:0000000000014139
.rodata:0000000000014140 ; ===========================================================================
.rodata:0000000000014140
.rodata:0000000000014140 ; Segment type: Pure data
.rodata:0000000000014140 ; Segment permissions: Read
.rodata:0000000000014140 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000014140                 assume cs:_rodata
.rodata:0000000000014140                 ;org 14140h
.rodata:0000000000014140                 public _IO_stdin_used
.rodata:0000000000014140 _IO_stdin_used  db    1
.rodata:0000000000014141                 db    0
.rodata:0000000000014142                 db    2
.rodata:0000000000014143                 db    0
.rodata:0000000000014144 ; const char aSSeekFailed[]
.rodata:0000000000014144 aSSeekFailed    db '%s: seek failed',0  ; DATA XREF: tac_seekable:loc_2686↑o
.rodata:0000000000014144                                         ; tac_seekable+429↑o ...
.rodata:0000000000014154 ; const char aSReadError[]
.rodata:0000000000014154 aSReadError     db '%s: read error',0   ; DATA XREF: main+535↑o
.rodata:0000000000014154                                         ; main+555↑o ...
.rodata:0000000000014163 ; const char aRecordTooLarge[]
.rodata:0000000000014163 aRecordTooLarge db 'record too large',0 ; DATA XREF: tac_seekable:loc_2BAC↑o
.rodata:0000000000014174 aTac            db 'tac',0              ; DATA XREF: main+FC↑o
.rodata:0000000000014174                                         ; usage+156↑o ...
.rodata:0000000000014178 asc_14178       db '[',0                ; DATA XREF: usage+162↑o
.rodata:000000000001417A aTestInvocation db 'test invocation',0  ; DATA XREF: usage+189↑o
.rodata:000000000001418A aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000001418A                                         ; DATA XREF: usage+1B9↑o
.rodata:000000000001418A                                         ; usage+2B4↑o ...
.rodata:00000000000141A0 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1CA↑o
.rodata:00000000000141AA aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1D6↑o
.rodata:00000000000141B9 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+169↑o
.rodata:00000000000141C3 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+195↑o
.rodata:00000000000141CD aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1AD↑o
.rodata:00000000000141D7 ; const char aSOnlineHelpS[]
.rodata:00000000000141D7 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+222↑o
.rodata:00000000000141D7                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000141EE unk_141EE       db  47h ; G             ; DATA XREF: main+F5↑o
.rodata:00000000000141EE                                         ; usage+23E↑o ...
.rodata:00000000000141EF                 db  4Eh ; N
.rodata:00000000000141F0                 db  55h ; U
.rodata:00000000000141F1                 db  20h
.rodata:00000000000141F2 ; const char domainname[]
.rodata:00000000000141F2 domainname      db 'coreutils',0        ; DATA XREF: main+3A↑o
.rodata:00000000000141F2                                         ; main+46↑o ...
.rodata:00000000000141FC ; const char s2[]
.rodata:00000000000141FC s2              db 'en_',0              ; DATA XREF: usage+265↑o
.rodata:00000000000141FC                                         ; usage+326↑o ...
.rodata:0000000000014200 ; const char aFullDocumentat[]
.rodata:0000000000014200 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000014200                                         ; DATA XREF: usage:loc_2E51↑o
.rodata:0000000000014200                                         ; usage:loc_2F0E↑o
.rodata:000000000001421B aTmp            db '/tmp',0             ; DATA XREF: main+598↑o
.rodata:0000000000014220 ; const char dirname[]
.rodata:0000000000014220 dirname         db '/usr/local/share/locale',0
.rodata:0000000000014220                                         ; DATA XREF: main+33↑o
.rodata:0000000000014238 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+E7↑o
.rodata:0000000000014248 aJayLepreau     db 'Jay Lepreau',0      ; DATA XREF: main+EE↑o
.rodata:0000000000014254 ; const char shortopts[]
.rodata:0000000000014254 shortopts       db 'brs:',0             ; DATA XREF: main:loc_1D0E↑o
.rodata:0000000000014259 ; const char aSeparatorCanno[]
.rodata:0000000000014259 aSeparatorCanno db 'separator cannot be empty',0
.rodata:0000000000014259                                         ; DATA XREF: main:loc_23D5↑o
.rodata:0000000000014273 ; const char msgid[]
.rodata:0000000000014273 msgid           db 'standard input',0   ; DATA XREF: main+2F4↑o
.rodata:0000000000014282 ; const char aFailedToOpenSF[]
.rodata:0000000000014282 aFailedToOpenSF db 'failed to open %s for reading',0
.rodata:0000000000014282                                         ; DATA XREF: main+4D9↑o
.rodata:00000000000142A0 ; const char name[]
.rodata:00000000000142A0 name            db 'TMPDIR',0           ; DATA XREF: main:loc_2216↑o
.rodata:00000000000142A7 ; const char modes[]
.rodata:00000000000142A7 modes           db 'w+',0               ; DATA XREF: main+5CE↑o
.rodata:00000000000142AA ; const char aFailedToOpenSF_0[]
.rodata:00000000000142AA aFailedToOpenSF_0 db 'failed to open %s for writing',0
.rodata:00000000000142AA                                         ; DATA XREF: main+6D8↑o
.rodata:00000000000142C8 aSWriteError    db '%s: write error',0  ; DATA XREF: main+57A↑o
.rodata:00000000000142C8                                         ; close_stdout:loc_2FF3↑o
.rodata:00000000000142D8 aTacxxxxxx      db 'tacXXXXXX',0        ; DATA XREF: main+59F↑o
.rodata:00000000000142E2 aBefore         db 'before',0           ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:00000000000142E9 aRegex          db 'regex',0            ; DATA XREF: .data.rel.ro:0000000000218AC0↓o
.rodata:00000000000142EF aSeparator      db 'separator',0        ; DATA XREF: .data.rel.ro:0000000000218AE0↓o
.rodata:00000000000142F9 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000218B00↓o
.rodata:00000000000142FE aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000218B20↓o
.rodata:0000000000014306                 align 8
.rodata:0000000000014308 ; const char aErrorInRegular[]
.rodata:0000000000014308 aErrorInRegular db 'error in regular expression search',0
.rodata:0000000000014308                                         ; DATA XREF: tac_seekable:loc_2B88↑o
.rodata:000000000001432B                 align 10h
.rodata:0000000000014330 ; const char aTrySHelpForMor[]
.rodata:0000000000014330 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000014330                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000014357                 align 8
.rodata:0000000000014358 ; const char aUsageSOptionFi[]
.rodata:0000000000014358 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:0000000000014358                                         ; DATA XREF: usage:loc_2C2D↑o
.rodata:0000000000014379                 align 20h
.rodata:0000000000014380 ; const char aWriteEachFileT[]
.rodata:0000000000014380 aWriteEachFileT db 'Write each FILE to standard output, last line first.',0Ah,0
.rodata:0000000000014380                                         ; DATA XREF: usage+84↑o
.rodata:00000000000143B6                 align 8
.rodata:00000000000143B8 ; const char aWithNoFileOrWh[]
.rodata:00000000000143B8 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:00000000000143B8                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:00000000000143F0 ; const char aMandatoryArgum[]
.rodata:00000000000143F0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:00000000000143F0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:00000000000143F0                 db 'ns too.',0Ah,0
.rodata:000000000001443B                 align 20h
.rodata:0000000000014440 ; const char aBBeforeAttachT[]
.rodata:0000000000014440 aBBeforeAttachT db '  -b, --before             attach the separator before instead of'
.rodata:0000000000014440                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000014440                 db ' after',0Ah
.rodata:0000000000014440                 db '  -r, --regex              interpret the separator as a regular e'
.rodata:0000000000014440                 db 'xpression',0Ah
.rodata:0000000000014440                 db '  -s, --separator=STRING   use STRING as the separator instead of'
.rodata:0000000000014440                 db ' newline',0Ah,0
.rodata:000000000001451E                 align 20h
.rodata:0000000000014520 ; const char aHelpDisplayThi[]
.rodata:0000000000014520 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000014520                                         ; DATA XREF: usage+118↑o
.rodata:000000000001454D                 align 10h
.rodata:0000000000014550 ; const char aVersionOutputV[]
.rodata:0000000000014550 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000014550                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000014586                 align 8
.rodata:0000000000014588 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000014588                                         ; DATA XREF: usage+237↑o
.rodata:0000000000014588                                         ; usage+29B↑o ...
.rodata:00000000000145B0 ; const char aReportAnyTrans[]
.rodata:00000000000145B0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000145B0                                         ; DATA XREF: usage+38F↑o
.rodata:00000000000145B0                 db 'am/>',0Ah,0
.rodata:00000000000145F7                 align 8
.rodata:00000000000145F8 ; const char aOrAvailableLoc[]
.rodata:00000000000145F8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000145F8                                         ; DATA XREF: usage:loc_2E96↑o
.rodata:000000000001462B                 align 10h
.rodata:0000000000014630 ; const char aFailedToCreate[]
.rodata:0000000000014630 aFailedToCreate db 'failed to create temporary file in %s',0
.rodata:0000000000014630                                         ; DATA XREF: main+67E↑o
.rodata:0000000000014656                 align 8
.rodata:0000000000014658 ; const char aFailedToRewind[]
.rodata:0000000000014658 aFailedToRewind db 'failed to rewind stream for %s',0
.rodata:0000000000014658                                         ; DATA XREF: main+480↑o
.rodata:0000000000014677 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000001467C ; const char aS[4]
.rodata:000000000001467C aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000014680 ; const char format[]
.rodata:0000000000014680 format          dq offset loc_7325      ; DATA XREF: main:loc_23F9↑o
.rodata:0000000000014680                                         ; close_stdout+8F↑o ...
.rodata:0000000000014688 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000014688                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000146C0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000146C8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000146C8                                         ; main+267↑o ...
.rodata:00000000000146CC unk_146CC       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000146CD                 db  80h
.rodata:00000000000146CE                 db  98h
.rodata:00000000000146CF                 db    0
.rodata:00000000000146D0 unk_146D0       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000146D1                 db  80h
.rodata:00000000000146D2                 db  99h
.rodata:00000000000146D3                 db    0
.rodata:00000000000146D4 unk_146D4       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000146D5                 db    7
.rodata:00000000000146D6                 db  65h ; e
.rodata:00000000000146D7                 db    0
.rodata:00000000000146D8 unk_146D8       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000146D9                 db 0AFh
.rodata:00000000000146DA                 db    0
.rodata:00000000000146DB unk_146DB       db  22h ; "             ; DATA XREF: gettext_quote:loc_3220↑o
.rodata:00000000000146DB                                         ; quotearg_buffer_restyled:loc_3FDB↑o ...
.rodata:00000000000146DC                 db    0
.rodata:00000000000146DD ; const char asc_146DD[2]
.rodata:00000000000146DD asc_146DD       db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000146DD                                         ; quotearg_buffer_restyled:loc_33A3↑o ...
.rodata:00000000000146DF ; const char asc_146DF[2]
.rodata:00000000000146DF asc_146DF       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000146DF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000146E1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000146E9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000218B68↓o
.rodata:00000000000146EF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000218B70↓o
.rodata:00000000000146FC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000218B78↓o
.rodata:00000000000146FC                                         ; .data.rel.ro:0000000000218B98↓o
.rodata:0000000000014709 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000014709                                         ; DATA XREF: .data.rel.ro:0000000000218B80↓o
.rodata:000000000001471D aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000218B90↓o
.rodata:0000000000014725 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000218BA8↓o
.rodata:000000000001472D                 align 20h
.rodata:0000000000014740 jpt_3381        dd offset loc_412A - 14740h
.rodata:0000000000014740                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000014740                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000014740                 dd offset loc_3383 - 14740h ; jump table for switch statement
.rodata:0000000000014740                 dd offset loc_4358 - 14740h
.rodata:0000000000014740                 dd offset loc_4164 - 14740h
.rodata:0000000000014740                 dd offset loc_3F54 - 14740h
.rodata:0000000000014740                 dd offset loc_3FB0 - 14740h
.rodata:0000000000014740                 dd offset loc_4005 - 14740h
.rodata:0000000000014740                 dd offset loc_404A - 14740h
.rodata:0000000000014740                 dd offset loc_4084 - 14740h
.rodata:0000000000014740                 dd offset loc_4084 - 14740h
.rodata:0000000000014740                 dd offset loc_4084 - 14740h
.rodata:000000000001476C jpt_34DE        dd offset loc_3700 - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000001476C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch ; jump table for switch statement
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset loc_3740 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3648 - 1476Ch, offset loc_3608 - 1476Ch
.rodata:000000000001476C                 dd offset loc_37D0 - 1476Ch, offset loc_37C0 - 1476Ch
.rodata:000000000001476C                 dd offset loc_37B0 - 1476Ch, offset loc_37A0 - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset def_34DE - 1476Ch
.rodata:000000000001476C                 dd offset loc_3790 - 1476Ch, offset loc_3780 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3780 - 1476Ch, offset loc_3750 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3780 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3780 - 1476Ch, offset loc_35E3 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3780 - 1476Ch, offset loc_3780 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3780 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3780 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3780 - 1476Ch, offset loc_3780 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3780 - 1476Ch, offset loc_35B3 - 1476Ch
.rodata:000000000001476C                 dd offset def_34DE - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3780 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3658 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3780 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3780 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_3728 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3728 - 1476Ch, offset loc_34E3 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3780 - 1476Ch, offset loc_34E3 - 1476Ch
.rodata:000000000001476C                 dd offset loc_3750 - 1476Ch
.rodata:0000000000014968 jpt_386A        dd offset loc_38D0 - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000014968                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h ; jump table for switch statement
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset loc_38C0 - 14968h
.rodata:0000000000014968                 dd offset loc_3A10 - 14968h, offset loc_39F8 - 14968h
.rodata:0000000000014968                 dd offset loc_38A8 - 14968h, offset loc_39E8 - 14968h
.rodata:0000000000014968                 dd offset loc_3890 - 14968h, offset loc_39D0 - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset def_386A - 14968h
.rodata:0000000000014968                 dd offset loc_39B8 - 14968h, offset loc_39A0 - 14968h
.rodata:0000000000014968                 dd offset loc_39A0 - 14968h, offset loc_3988 - 14968h
.rodata:0000000000014968                 dd offset loc_39A0 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_39A0 - 14968h, offset loc_35E0 - 14968h
.rodata:0000000000014968                 dd offset loc_39A0 - 14968h, offset loc_39A0 - 14968h
.rodata:0000000000014968                 dd offset loc_39A0 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_39A0 - 14968h
.rodata:0000000000014968                 dd offset loc_39A0 - 14968h, offset loc_39A0 - 14968h
.rodata:0000000000014968                 dd offset loc_39A0 - 14968h, offset loc_35B0 - 14968h
.rodata:0000000000014968                 dd offset def_386A - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_39A0 - 14968h
.rodata:0000000000014968                 dd offset loc_3870 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_39A0 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_39A0 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_3970 - 14968h
.rodata:0000000000014968                 dd offset loc_3970 - 14968h, offset loc_34E0 - 14968h
.rodata:0000000000014968                 dd offset loc_39A0 - 14968h, offset loc_34E0 - 14968h
.rodata:0000000000014968                 dd offset loc_3988 - 14968h
.rodata:0000000000014B64                 align 20h
.rodata:0000000000014B80                 public quoting_style_vals
.rodata:0000000000014B80 quoting_style_vals db    0
.rodata:0000000000014B81                 db    0
.rodata:0000000000014B82                 db    0
.rodata:0000000000014B83                 db    0
.rodata:0000000000014B84                 db    1
.rodata:0000000000014B85                 db    0
.rodata:0000000000014B86                 db    0
.rodata:0000000000014B87                 db    0
.rodata:0000000000014B88                 db    2
.rodata:0000000000014B89                 db    0
.rodata:0000000000014B8A                 db    0
.rodata:0000000000014B8B                 db    0
.rodata:0000000000014B8C                 db    3
.rodata:0000000000014B8D                 db    0
.rodata:0000000000014B8E                 db    0
.rodata:0000000000014B8F                 db    0
.rodata:0000000000014B90                 db    4
.rodata:0000000000014B91                 db    0
.rodata:0000000000014B92                 db    0
.rodata:0000000000014B93                 db    0
.rodata:0000000000014B94                 db    5
.rodata:0000000000014B95                 db    0
.rodata:0000000000014B96                 db    0
.rodata:0000000000014B97                 db    0
.rodata:0000000000014B98                 db    6
.rodata:0000000000014B99                 db    0
.rodata:0000000000014B9A                 db    0
.rodata:0000000000014B9B                 db    0
.rodata:0000000000014B9C                 db    7
.rodata:0000000000014B9D                 db    0
.rodata:0000000000014B9E                 db    0
.rodata:0000000000014B9F                 db    0
.rodata:0000000000014BA0                 db    8
.rodata:0000000000014BA1                 db    0
.rodata:0000000000014BA2                 db    0
.rodata:0000000000014BA3                 db    0
.rodata:0000000000014BA4                 db    9
.rodata:0000000000014BA5                 db    0
.rodata:0000000000014BA6                 db    0
.rodata:0000000000014BA7                 db    0
.rodata:0000000000014BA8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000014BB4 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000014BBB ; const char aC[]
.rodata:0000000000014BBB aC              db '(C)',0              ; DATA XREF: version_etc_arn:loc_4FAC↑o
.rodata:0000000000014BBF ; const char aWrittenByS[]
.rodata:0000000000014BBF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000014BBF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000014BCF ; const char aWrittenBySAndS[]
.rodata:0000000000014BCF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000014BCF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000014BE6 ; const char aWrittenBySSAnd[]
.rodata:0000000000014BE6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000014BE6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000014C02 ; const char aReportBugsToS[]
.rodata:0000000000014C02 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000014C02                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000014C17 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000014C17                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000014C2D ; const char aSHomePageS[]
.rodata:0000000000014C2D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000014C2D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000014C41                 align 8
.rodata:0000000000014C48 ; const char aLicenseGplv3Gn[]
.rodata:0000000000014C48 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000014C48                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000014C48                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000014C48                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000014C48                 db '.',0Ah
.rodata:0000000000014C48                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000014C48                 db 0Ah,0
.rodata:0000000000014D14                 align 8
.rodata:0000000000014D18 ; const char aWrittenBySSSAn[]
.rodata:0000000000014D18 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014D18                                         ; DATA XREF: version_etc_arn:loc_5200↑o
.rodata:0000000000014D18                 db 'and %s.',0Ah,0
.rodata:0000000000014D38 ; const char aWrittenBySSSSA[]
.rodata:0000000000014D38 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014D38                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000014D38                 db '%s, and %s.',0Ah,0
.rodata:0000000000014D5C                 align 20h
.rodata:0000000000014D60 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000014D60 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014D60                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000014D60                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000014D88 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000014D88 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014D88                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000014D88                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000014DB4                 align 8
.rodata:0000000000014DB8 ; const char aWrittenBySSSSS[]
.rodata:0000000000014DB8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014DB8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000014DB8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000014DB8                 db 'and %s.',0Ah,0
.rodata:0000000000014DE8 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000014DE8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014DE8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000014DE8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000014DE8                 db '%s, and %s.',0Ah,0
.rodata:0000000000014E1C                 align 20h
.rodata:0000000000014E20 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014E20                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000014E20                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000014E20                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000014E5C                 align 20h
.rodata:0000000000014E60 ; const char aGeneralHelpUsi[]
.rodata:0000000000014E60 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000014E60                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000014E60                 db 0
.rodata:0000000000014EA1                 align 4
.rodata:0000000000014EA4 jpt_5014        dd offset loc_5096 - 14EA4h
.rodata:0000000000014EA4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000014EA4                                         ; version_etc_arn+9D↑r
.rodata:0000000000014EA4                 dd offset loc_5128 - 14EA4h ; jump table for switch statement
.rodata:0000000000014EA4                 dd offset loc_5168 - 14EA4h
.rodata:0000000000014EA4                 dd offset loc_51B0 - 14EA4h
.rodata:0000000000014EA4                 dd offset loc_5200 - 14EA4h
.rodata:0000000000014EA4                 dd offset loc_5258 - 14EA4h
.rodata:0000000000014EA4                 dd offset loc_5288 - 14EA4h
.rodata:0000000000014EA4                 dd offset loc_52F0 - 14EA4h
.rodata:0000000000014EA4                 dd offset loc_5020 - 14EA4h
.rodata:0000000000014EA4                 dd offset loc_50D0 - 14EA4h
.rodata:0000000000014ECC                 align 20h
.rodata:0000000000014EE0                 public version_etc_copyright
.rodata:0000000000014EE0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000014EE0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000014F0F ; const char aMemoryExhauste[]
.rodata:0000000000014F0F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000014F20 ; const char file[]
.rodata:0000000000014F20 file            db '../coreutils-8.31/lib/regexec.c',0
.rodata:0000000000014F20                                         ; DATA XREF: pop_fail_stack_isra_25+7C↑o
.rodata:0000000000014F20                                         ; re_search_internal+1034↑o ...
.rodata:0000000000014F40 ; const char aCoreutils831Li_0[]
.rodata:0000000000014F40 aCoreutils831Li_0 db '../coreutils-8.31/lib/regcomp.c',0
.rodata:0000000000014F40                                         ; DATA XREF: parse_expression+1301↑o
.rodata:0000000000014F40                                         ; re_compile_internal+962↑o ...
.rodata:0000000000014F60 ; const char aIsEpsilonNodeN[]
.rodata:0000000000014F60 aIsEpsilonNodeN db '!IS_EPSILON_NODE (node->token.type)',0
.rodata:0000000000014F60                                         ; DATA XREF: re_compile_internal+10C0↑o
.rodata:0000000000014F84                 align 8
.rodata:0000000000014F88 ; const char assertion[]
.rodata:0000000000014F88 assertion       db 'num >= 0',0         ; DATA XREF: pop_fail_stack_isra_25+83↑o
.rodata:0000000000014F88                                         ; parse_expression+1308↑o
.rodata:0000000000014F91 aAlpha          db 'alpha',0            ; DATA XREF: build_charclass_isra_29+41↑o
.rodata:0000000000014F91                                         ; build_charclass_isra_29+152↑o ...
.rodata:0000000000014F97 aUpper          db 'upper',0            ; DATA XREF: build_charclass_isra_29+23↑o
.rodata:0000000000014F97                                         ; build_charclass_isra_29:loc_B06C↑o
.rodata:0000000000014F9D aLower          db 'lower',0            ; DATA XREF: build_charclass_isra_29:loc_AD56↑o
.rodata:0000000000014F9D                                         ; build_charclass_isra_29:loc_ADC8↑o
.rodata:0000000000014FA3 aAlnum          db 'alnum',0            ; DATA XREF: build_charclass_isra_29+6C↑o
.rodata:0000000000014FA3                                         ; parse_expression+9CF↑o
.rodata:0000000000014FA9 aCntrl          db 'cntrl',0            ; DATA XREF: build_charclass_isra_29+8A↑o
.rodata:0000000000014FAF aSpace          db 'space',0            ; DATA XREF: build_charclass_isra_29+1C2↑o
.rodata:0000000000014FAF                                         ; parse_expression+97F↑o
.rodata:0000000000014FB5 aPrint          db 'print',0            ; DATA XREF: build_charclass_isra_29:loc_AFD3↑o
.rodata:0000000000014FBB aBlank          db 'blank',0            ; DATA XREF: build_charclass_isra_29:loc_B0D2↑o
.rodata:0000000000014FC1 ; const char aGraph[]
.rodata:0000000000014FC1 aGraph          db 'graph',0            ; DATA XREF: build_charclass_isra_29:loc_B1DE↑o
.rodata:0000000000014FC7 ; const char aPunct[]
.rodata:0000000000014FC7 aPunct          db 'punct',0            ; DATA XREF: build_charclass_isra_29:loc_B26A↑o
.rodata:0000000000014FCD ; const char asc_14FCD[1]
.rodata:0000000000014FCD asc_14FCD       db 'x'                  ; DATA XREF: build_charclass_isra_29:loc_B2F4↑o
.rodata:0000000000014FCE aDigit          db 'digit',0            ; DATA XREF: build_charclass_isra_29+290↑o
.rodata:0000000000014FD4 ; const char aErrRegEspace[]
.rodata:0000000000014FD4 aErrRegEspace   db 'err == REG_ESPACE',0
.rodata:0000000000014FD4                                         ; DATA XREF: re_search_internal+103B↑o
.rodata:0000000000014FD4                                         ; re_search_internal+153F↑o
.rodata:0000000000014FE6 a8              db '8',0                ; DATA XREF: re_compile_internal+160↑o
.rodata:0000000000014FE8 ; const char aNodeNextNull[]
.rodata:0000000000014FE8 aNodeNextNull   db 'node->next == NULL',0
.rodata:0000000000014FE8                                         ; DATA XREF: re_compile_internal+969↑o
.rodata:0000000000014FFB ; const char aLeft1[]
.rodata:0000000000014FFB aLeft1          db 'left > -1',0        ; DATA XREF: re_compile_internal+10DF↑o
.rodata:0000000000015005 ; const char aRight1[]
.rodata:0000000000015005 aRight1         db 'right > -1',0       ; DATA XREF: re_compile_internal+10A1↑o
.rodata:0000000000015010 ; const char aRegsAllocatedR[]
.rodata:0000000000015010 aRegsAllocatedR db 'regs_allocated == REGS_FIXED',0
.rodata:0000000000015010                                         ; DATA XREF: re_search_stub+46E↑o
.rodata:000000000001502D ; const char aRegsNumRegsNre[]
.rodata:000000000001502D aRegsNumRegsNre db 'regs->num_regs >= nregs',0
.rodata:000000000001502D                                         ; DATA XREF: re_search_stub+44F↑o
.rodata:0000000000015045 ; const char aPmatch0RmSoSta[]
.rodata:0000000000015045 aPmatch0RmSoSta db 'pmatch[0].rm_so == start',0
.rodata:0000000000015045                                         ; DATA XREF: re_search_stub+430↑o
.rodata:000000000001505E                 align 20h
.rodata:0000000000015060 jpt_E336        dd offset loc_E904 - 15060h
.rodata:0000000000015060                                         ; DATA XREF: re_search_internal+4E8↑o
.rodata:0000000000015060                                         ; re_search_internal+4EF↑r
.rodata:0000000000015060                 dd offset loc_E904 - 15060h ; jump table for switch statement
.rodata:0000000000015060                 dd offset loc_E36E - 15060h
.rodata:0000000000015060                 dd offset loc_E892 - 15060h
.rodata:0000000000015060                 dd offset loc_E418 - 15060h
.rodata:0000000000015074 jpt_1016C       dd offset loc_10350 - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                                         ; DATA XREF: peek_token+13A↑o
.rodata:0000000000015074                                         ; peek_token+145↑r
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h ; jump table for switch statement
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset loc_103C0 - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset loc_103A0 - 15074h, offset loc_10380 - 15074h
.rodata:0000000000015074                 dd offset loc_10370 - 15074h, offset loc_10330 - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset loc_10320 - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset loc_10300 - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset loc_102F0 - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset loc_102C8 - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset def_1016C - 15074h
.rodata:0000000000015074                 dd offset def_1016C - 15074h, offset loc_102A0 - 15074h
.rodata:0000000000015074                 dd offset loc_10278 - 15074h, offset loc_10250 - 15074h
.rodata:0000000000015244 jpt_10218       dd offset loc_105E3 - 15244h, offset loc_105CC - 15244h
.rodata:0000000000015244                                         ; DATA XREF: peek_token+1E7↑o
.rodata:0000000000015244                                         ; peek_token+1F1↑r
.rodata:0000000000015244                 dd offset loc_105B5 - 15244h, offset def_10218 - 15244h ; jump table for switch statement
.rodata:0000000000015244                 dd offset loc_1059A - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset loc_10571 - 15244h, offset loc_10571 - 15244h
.rodata:0000000000015244                 dd offset loc_10571 - 15244h, offset loc_10571 - 15244h
.rodata:0000000000015244                 dd offset loc_10571 - 15244h, offset loc_10571 - 15244h
.rodata:0000000000015244                 dd offset loc_10571 - 15244h, offset loc_10571 - 15244h
.rodata:0000000000015244                 dd offset loc_10571 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset loc_1054F - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset loc_1052D - 15244h
.rodata:0000000000015244                 dd offset loc_10512 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset loc_104F0 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset loc_104D5 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset loc_104BA - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset loc_10498 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset loc_10476 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset loc_1043D - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset loc_10422 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset def_10218 - 15244h, offset def_10218 - 15244h
.rodata:0000000000015244                 dd offset loc_10404 - 15244h, offset loc_103E9 - 15244h
.rodata:0000000000015244                 dd offset loc_10458 - 15244h
.rodata:00000000000153A0 jpt_1083F       dd offset def_1083F - 153A0h
.rodata:00000000000153A0                                         ; DATA XREF: parse_expression+4B↑o
.rodata:00000000000153A0                                         ; parse_expression+58↑r
.rodata:00000000000153A0                 dd offset loc_1126E - 153A0h ; jump table for switch statement
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset loc_111BF - 153A0h
.rodata:00000000000153A0                 dd offset loc_11229 - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset loc_10841 - 153A0h
.rodata:00000000000153A0                 dd offset loc_11358 - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset loc_1092D - 153A0h
.rodata:00000000000153A0                 dd offset loc_10EA0 - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset loc_1092D - 153A0h
.rodata:00000000000153A0                 dd offset loc_1092D - 153A0h
.rodata:00000000000153A0                 dd offset loc_10FE0 - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset loc_1091E - 153A0h
.rodata:00000000000153A0                 dd offset loc_1094B - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset def_1083F - 153A0h
.rodata:00000000000153A0                 dd offset loc_11198 - 153A0h
.rodata:00000000000153A0                 dd offset loc_11198 - 153A0h
.rodata:00000000000153A0                 dd offset loc_11148 - 153A0h
.rodata:00000000000153A0                 dd offset loc_11148 - 153A0h
.rodata:00000000000153A0                 dd offset loc_113C3 - 153A0h
.rodata:0000000000015434 jpt_11146       dd offset loc_114B1 - 15434h
.rodata:0000000000015434                                         ; DATA XREF: parse_expression+88B↑o
.rodata:0000000000015434                                         ; parse_expression+95E↑r
.rodata:0000000000015434                 dd offset loc_11487 - 15434h ; jump table for switch statement
.rodata:0000000000015434                 dd offset loc_1143D - 15434h
.rodata:0000000000015434                 dd offset loc_11405 - 15434h
.rodata:0000000000015434                 dd offset loc_114D9 - 15434h
.rodata:0000000000015448 jpt_126A3       dd offset def_126A3 - 15448h
.rodata:0000000000015448                                         ; DATA XREF: re_compile_internal+6AC↑o
.rodata:0000000000015448                                         ; re_compile_internal+6CC↑r
.rodata:0000000000015448                 dd offset def_126A3 - 15448h ; jump table for switch statement
.rodata:0000000000015448                 dd offset loc_12920 - 15448h
.rodata:0000000000015448                 dd offset def_126A3 - 15448h
.rodata:0000000000015448                 dd offset loc_12950 - 15448h
.rodata:0000000000015448                 dd offset def_126A3 - 15448h
.rodata:0000000000015448                 dd offset def_126A3 - 15448h
.rodata:0000000000015448                 dd offset def_126A3 - 15448h
.rodata:0000000000015448                 dd offset loc_128C8 - 15448h
.rodata:0000000000015448                 dd offset loc_128C8 - 15448h
.rodata:0000000000015448                 dd offset loc_12807 - 15448h
.rodata:0000000000015448                 dd offset loc_12807 - 15448h
.rodata:0000000000015448                 dd offset loc_128C8 - 15448h
.rodata:0000000000015448                 dd offset def_126A3 - 15448h
.rodata:0000000000015448                 dd offset def_126A3 - 15448h
.rodata:0000000000015448                 dd offset def_126A3 - 15448h
.rodata:0000000000015448                 dd offset loc_12781 - 15448h
.rodata:000000000001548C jpt_12DA3       dd offset def_12DA3 - 1548Ch
.rodata:000000000001548C                                         ; DATA XREF: re_compile_internal+DAF↑o
.rodata:000000000001548C                                         ; re_compile_internal+DCC↑r
.rodata:000000000001548C                 dd offset loc_12F60 - 1548Ch ; jump table for switch statement
.rodata:000000000001548C                 dd offset loc_12F0C - 1548Ch
.rodata:000000000001548C                 dd offset loc_12F88 - 1548Ch
.rodata:000000000001548C                 dd offset loc_12F0C - 1548Ch
.rodata:000000000001548C                 dd offset loc_12F09 - 1548Ch
.rodata:000000000001548C                 dd offset loc_12B7E - 1548Ch
.rodata:000000000001548C                 dd offset def_12DA3 - 1548Ch
.rodata:000000000001548C                 dd offset loc_12F0C - 1548Ch
.rodata:000000000001548C                 dd offset loc_12F0C - 1548Ch
.rodata:000000000001548C                 dd offset loc_12F0C - 1548Ch
.rodata:000000000001548C                 dd offset loc_12F0C - 1548Ch
.rodata:000000000001548C                 dd offset loc_12F69 - 1548Ch
.rodata:00000000000154C0 ; const char _PRETTY_FUNCTION___7859[]
.rodata:00000000000154C0 __PRETTY_FUNCTION___7859 db 're_copy_regs',0
.rodata:00000000000154C0                                         ; DATA XREF: re_search_stub:loc_13661↑o
.rodata:00000000000154C0                                         ; re_search_stub:loc_13680↑o
.rodata:00000000000154CD                 align 10h
.rodata:00000000000154D0 ; const char _PRETTY_FUNCTION___7847[]
.rodata:00000000000154D0 __PRETTY_FUNCTION___7847 db 're_search_stub',0
.rodata:00000000000154D0                                         ; DATA XREF: re_search_stub:loc_13642↑o
.rodata:00000000000154DF                 align 20h
.rodata:00000000000154E0 ; const char _PRETTY_FUNCTION___8040[]
.rodata:00000000000154E0 __PRETTY_FUNCTION___8040 db 'pop_fail_stack',0
.rodata:00000000000154E0                                         ; DATA XREF: pop_fail_stack_isra_25:loc_ABA5↑o
.rodata:00000000000154EF                 align 10h
.rodata:00000000000154F0 ; const char _PRETTY_FUNCTION___7972[]
.rodata:00000000000154F0 __PRETTY_FUNCTION___7972 db 'check_matching',0
.rodata:00000000000154F0                                         ; DATA XREF: re_search_internal+102D↑o
.rodata:00000000000154F0                                         ; re_search_internal+1531↑o
.rodata:00000000000154FF                 align 20h
.rodata:0000000000015500 ; const char _PRETTY_FUNCTION___6981[]
.rodata:0000000000015500 __PRETTY_FUNCTION___6981 db 'link_nfa_nodes',0
.rodata:0000000000015500                                         ; DATA XREF: re_compile_internal+95B↑o
.rodata:0000000000015500                                         ; re_compile_internal:loc_13063↑o ...
.rodata:000000000001550F                 align 10h
.rodata:0000000000015510 ; const char _PRETTY_FUNCTION___7327[]
.rodata:0000000000015510 __PRETTY_FUNCTION___7327 db 'parse_bracket_exp',0
.rodata:0000000000015510                                         ; DATA XREF: parse_expression:def_11146↑o
.rodata:0000000000015522                 align 20h
.rodata:0000000000015540 utf8_sb_map     db 0FFh                 ; DATA XREF: free_dfa_content+131↑o
.rodata:0000000000015540                                         ; re_compile_internal+1B3↑o
.rodata:0000000000015541                 db 0FFh
.rodata:0000000000015542                 db 0FFh
.rodata:0000000000015543                 db 0FFh
.rodata:0000000000015544                 db 0FFh
.rodata:0000000000015545                 db 0FFh
.rodata:0000000000015546                 db 0FFh
.rodata:0000000000015547                 db 0FFh
.rodata:0000000000015548                 db 0FFh
.rodata:0000000000015549                 db 0FFh
.rodata:000000000001554A                 db 0FFh
.rodata:000000000001554B                 db 0FFh
.rodata:000000000001554C                 db 0FFh
.rodata:000000000001554D                 db 0FFh
.rodata:000000000001554E                 db 0FFh
.rodata:000000000001554F                 db 0FFh
.rodata:0000000000015550                 db    0
.rodata:0000000000015551                 db    0
.rodata:0000000000015552                 db    0
.rodata:0000000000015553                 db    0
.rodata:0000000000015554                 db    0
.rodata:0000000000015555                 db    0
.rodata:0000000000015556                 db    0
.rodata:0000000000015557                 db    0
.rodata:0000000000015558                 db    0
.rodata:0000000000015559                 db    0
.rodata:000000000001555A                 db    0
.rodata:000000000001555B                 db    0
.rodata:000000000001555C                 db    0
.rodata:000000000001555D                 db    0
.rodata:000000000001555E                 db    0
.rodata:000000000001555F                 db    0
.rodata:0000000000015560 __re_error_msgid_idx db    0            ; DATA XREF: rpl_re_compile_pattern+3E↑o
.rodata:0000000000015560                                         ; rpl_regerror+F↑o
.rodata:0000000000015561                 db    0
.rodata:0000000000015562                 db    0
.rodata:0000000000015563                 db    0
.rodata:0000000000015564                 db    0
.rodata:0000000000015565                 db    0
.rodata:0000000000015566                 db    0
.rodata:0000000000015567                 db    0
.rodata:0000000000015568                 db    8
.rodata:0000000000015569                 db    0
.rodata:000000000001556A                 db    0
.rodata:000000000001556B                 db    0
.rodata:000000000001556C                 db    0
.rodata:000000000001556D                 db    0
.rodata:000000000001556E                 db    0
.rodata:000000000001556F                 db    0
.rodata:0000000000015570                 db  11h
.rodata:0000000000015571                 db    0
.rodata:0000000000015572                 db    0
.rodata:0000000000015573                 db    0
.rodata:0000000000015574                 db    0
.rodata:0000000000015575                 db    0
.rodata:0000000000015576                 db    0
.rodata:0000000000015577                 db    0
.rodata:0000000000015578                 db  2Ch ; ,
.rodata:0000000000015579                 db    0
.rodata:000000000001557A                 db    0
.rodata:000000000001557B                 db    0
.rodata:000000000001557C                 db    0
.rodata:000000000001557D                 db    0
.rodata:000000000001557E                 db    0
.rodata:000000000001557F                 db    0
.rodata:0000000000015580                 db  48h ; H
.rodata:0000000000015581                 db    0
.rodata:0000000000015582                 db    0
.rodata:0000000000015583                 db    0
.rodata:0000000000015584                 db    0
.rodata:0000000000015585                 db    0
.rodata:0000000000015586                 db    0
.rodata:0000000000015587                 db    0
.rodata:0000000000015588                 db  65h ; e
.rodata:0000000000015589                 db    0
.rodata:000000000001558A                 db    0
.rodata:000000000001558B                 db    0
.rodata:000000000001558C                 db    0
.rodata:000000000001558D                 db    0
.rodata:000000000001558E                 db    0
.rodata:000000000001558F                 db    0
.rodata:0000000000015590                 db  78h ; x
.rodata:0000000000015591                 db    0
.rodata:0000000000015592                 db    0
.rodata:0000000000015593                 db    0
.rodata:0000000000015594                 db    0
.rodata:0000000000015595                 db    0
.rodata:0000000000015596                 db    0
.rodata:0000000000015597                 db    0
.rodata:0000000000015598                 db  8Fh
.rodata:0000000000015599                 db    0
.rodata:000000000001559A                 db    0
.rodata:000000000001559B                 db    0
.rodata:000000000001559C                 db    0
.rodata:000000000001559D                 db    0
.rodata:000000000001559E                 db    0
.rodata:000000000001559F                 db    0
.rodata:00000000000155A0                 db 0AEh
.rodata:00000000000155A1                 db    0
.rodata:00000000000155A2                 db    0
.rodata:00000000000155A3                 db    0
.rodata:00000000000155A4                 db    0
.rodata:00000000000155A5                 db    0
.rodata:00000000000155A6                 db    0
.rodata:00000000000155A7                 db    0
.rodata:00000000000155A8                 db 0C0h
.rodata:00000000000155A9                 db    0
.rodata:00000000000155AA                 db    0
.rodata:00000000000155AB                 db    0
.rodata:00000000000155AC                 db    0
.rodata:00000000000155AD                 db    0
.rodata:00000000000155AE                 db    0
.rodata:00000000000155AF                 db    0
.rodata:00000000000155B0                 db 0CDh
.rodata:00000000000155B1                 db    0
.rodata:00000000000155B2                 db    0
.rodata:00000000000155B3                 db    0
.rodata:00000000000155B4                 db    0
.rodata:00000000000155B5                 db    0
.rodata:00000000000155B6                 db    0
.rodata:00000000000155B7                 db    0
.rodata:00000000000155B8                 db 0E5h
.rodata:00000000000155B9                 db    0
.rodata:00000000000155BA                 db    0
.rodata:00000000000155BB                 db    0
.rodata:00000000000155BC                 db    0
.rodata:00000000000155BD                 db    0
.rodata:00000000000155BE                 db    0
.rodata:00000000000155BF                 db    0
.rodata:00000000000155C0                 db 0F7h
.rodata:00000000000155C1                 db    0
.rodata:00000000000155C2                 db    0
.rodata:00000000000155C3                 db    0
.rodata:00000000000155C4                 db    0
.rodata:00000000000155C5                 db    0
.rodata:00000000000155C6                 db    0
.rodata:00000000000155C7                 db    0
.rodata:00000000000155C8                 db    8
.rodata:00000000000155C9                 db    1
.rodata:00000000000155CA                 db    0
.rodata:00000000000155CB                 db    0
.rodata:00000000000155CC                 db    0
.rodata:00000000000155CD                 db    0
.rodata:00000000000155CE                 db    0
.rodata:00000000000155CF                 db    0
.rodata:00000000000155D0                 db  2Dh ; -
.rodata:00000000000155D1                 db    1
.rodata:00000000000155D2                 db    0
.rodata:00000000000155D3                 db    0
.rodata:00000000000155D4                 db    0
.rodata:00000000000155D5                 db    0
.rodata:00000000000155D6                 db    0
.rodata:00000000000155D7                 db    0
.rodata:00000000000155D8                 db  51h ; Q
.rodata:00000000000155D9                 db    1
.rodata:00000000000155DA                 db    0
.rodata:00000000000155DB                 db    0
.rodata:00000000000155DC                 db    0
.rodata:00000000000155DD                 db    0
.rodata:00000000000155DE                 db    0
.rodata:00000000000155DF                 db    0
.rodata:00000000000155E0                 db  6Ch ; l
.rodata:00000000000155E1                 db    1
.rodata:00000000000155E2                 db    0
.rodata:00000000000155E3                 db    0
.rodata:00000000000155E4                 db    0
.rodata:00000000000155E5                 db    0
.rodata:00000000000155E6                 db    0
.rodata:00000000000155E7                 db    0
.rodata:00000000000155E8                 db    0
.rodata:00000000000155E9                 db    0
.rodata:00000000000155EA                 db    0
.rodata:00000000000155EB                 db    0
.rodata:00000000000155EC                 db    0
.rodata:00000000000155ED                 db    0
.rodata:00000000000155EE                 db    0
.rodata:00000000000155EF                 db    0
.rodata:00000000000155F0                 db    0
.rodata:00000000000155F1                 db    0
.rodata:00000000000155F2                 db    0
.rodata:00000000000155F3                 db    0
.rodata:00000000000155F4                 db    0
.rodata:00000000000155F5                 db    0
.rodata:00000000000155F6                 db    0
.rodata:00000000000155F7                 db    0
.rodata:00000000000155F8                 db    0
.rodata:00000000000155F9                 db    0
.rodata:00000000000155FA                 db    0
.rodata:00000000000155FB                 db    0
.rodata:00000000000155FC                 db    0
.rodata:00000000000155FD                 db    0
.rodata:00000000000155FE                 db    0
.rodata:00000000000155FF                 db    0
.rodata:0000000000015600 __re_error_msgid db 'Success',0         ; DATA XREF: rpl_re_compile_pattern+47↑o
.rodata:0000000000015600                                         ; rpl_regerror+19↑o
.rodata:0000000000015608 aNoMatch        db 'No match',0
.rodata:0000000000015611 aInvalidRegular db 'Invalid regular expression',0
.rodata:000000000001562C aInvalidCollati db 'Invalid collation character',0
.rodata:0000000000015648 aInvalidCharact db 'Invalid character class name',0
.rodata:0000000000015665 aTrailingBacksl db 'Trailing backslash',0
.rodata:0000000000015678 aInvalidBackRef db 'Invalid back reference',0
.rodata:000000000001568F aUnmatchedOr    db 'Unmatched [, [^, [:, [., or [=',0
.rodata:00000000000156AE aUnmatchedOr_0  db 'Unmatched ( or \(',0
.rodata:00000000000156C0 aUnmatched      db 'Unmatched \{',0
.rodata:00000000000156CD aInvalidContent db 'Invalid content of \{\}',0
.rodata:00000000000156E5 aInvalidRangeEn db 'Invalid range end',0
.rodata:00000000000156F7 aMemoryExhauste_0 db 'Memory exhausted',0
.rodata:0000000000015708 aInvalidPrecedi db 'Invalid preceding regular expression',0
.rodata:000000000001572D aPrematureEndOf db 'Premature end of regular expression',0
.rodata:0000000000015751 aRegularExpress db 'Regular expression too big',0
.rodata:000000000001576C aUnmatchedOr_1  db 'Unmatched ) or \)',0
.rodata:000000000001577E                 align 20h
.rodata:0000000000015780 xmmword_15780   xmmword 1010101010101010101010101010101h
.rodata:0000000000015780                                         ; DATA XREF: re_compile_fastmap_iter_isra_30:loc_BAB4↑r
.rodata:0000000000015780                                         ; re_compile_fastmap_iter_isra_30:loc_BB54↑r
.rodata:0000000000015790 unk_15790       db  43h ; C             ; DATA XREF: hard_locale+18↑o
.rodata:0000000000015791                 db    0
.rodata:0000000000015792 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_13CF0↑o
.rodata:0000000000015798 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000015798                                         ; locale_charset:loc_13D40↑o
.rodata:0000000000015798 _rodata         ends
.rodata:0000000000015798
LOAD:000000000001579E ; ===========================================================================
LOAD:000000000001579E
LOAD:000000000001579E ; Segment type: Pure code
LOAD:000000000001579E ; Segment permissions: Read/Execute
LOAD:000000000001579E LOAD            segment byte public 'CODE' use64
LOAD:000000000001579E                 assume cs:LOAD
LOAD:000000000001579E                 ;org 1579Eh
LOAD:000000000001579E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001579E                 align 20h
LOAD:000000000001579E LOAD            ends
LOAD:000000000001579E
.eh_frame_hdr:00000000000157A0 ; ===========================================================================
.eh_frame_hdr:00000000000157A0
.eh_frame_hdr:00000000000157A0 ; Segment type: Pure data
.eh_frame_hdr:00000000000157A0 ; Segment permissions: Read
.eh_frame_hdr:00000000000157A0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000157A0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000157A0                 ;org 157A0h
.eh_frame_hdr:00000000000157A0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000157A1                 db  1Bh
.eh_frame_hdr:00000000000157A2                 db    3
.eh_frame_hdr:00000000000157A3                 db  3Bh ; ;
.eh_frame_hdr:00000000000157A4                 db  7Ch ; |
.eh_frame_hdr:00000000000157A5                 db    5
.eh_frame_hdr:00000000000157A6                 db    0
.eh_frame_hdr:00000000000157A7                 db    0
.eh_frame_hdr:00000000000157A8                 db 0AEh
.eh_frame_hdr:00000000000157A9                 db    0
.eh_frame_hdr:00000000000157AA                 db    0
.eh_frame_hdr:00000000000157AB                 db    0
.eh_frame_hdr:00000000000157AC                 db 0B0h
.eh_frame_hdr:00000000000157AD                 db 0C0h
.eh_frame_hdr:00000000000157AE                 db 0FEh
.eh_frame_hdr:00000000000157AF                 db 0FFh
.eh_frame_hdr:00000000000157B0                 db 0C8h
.eh_frame_hdr:00000000000157B1                 db    5
.eh_frame_hdr:00000000000157B2                 db    0
.eh_frame_hdr:00000000000157B3                 db    0
.eh_frame_hdr:00000000000157B4                 db 0E0h
.eh_frame_hdr:00000000000157B5                 db 0C4h
.eh_frame_hdr:00000000000157B6                 db 0FEh
.eh_frame_hdr:00000000000157B7                 db 0FFh
.eh_frame_hdr:00000000000157B8                 db 0F0h
.eh_frame_hdr:00000000000157B9                 db    5
.eh_frame_hdr:00000000000157BA                 db    0
.eh_frame_hdr:00000000000157BB                 db    0
.eh_frame_hdr:00000000000157BC                 db 0F0h
.eh_frame_hdr:00000000000157BD                 db 0C4h
.eh_frame_hdr:00000000000157BE                 db 0FEh
.eh_frame_hdr:00000000000157BF                 db 0FFh
.eh_frame_hdr:00000000000157C0                 db 0FCh
.eh_frame_hdr:00000000000157C1                 db    6
.eh_frame_hdr:00000000000157C2                 db    0
.eh_frame_hdr:00000000000157C3                 db    0
.eh_frame_hdr:00000000000157C4                 db  80h
.eh_frame_hdr:00000000000157C5                 db 0CCh
.eh_frame_hdr:00000000000157C6                 db 0FEh
.eh_frame_hdr:00000000000157C7                 db 0FFh
.eh_frame_hdr:00000000000157C8                 db  98h
.eh_frame_hdr:00000000000157C9                 db    5
.eh_frame_hdr:00000000000157CA                 db    0
.eh_frame_hdr:00000000000157CB                 db    0
.eh_frame_hdr:00000000000157CC                 db  90h
.eh_frame_hdr:00000000000157CD                 db 0CDh
.eh_frame_hdr:00000000000157CE                 db 0FEh
.eh_frame_hdr:00000000000157CF                 db 0FFh
.eh_frame_hdr:00000000000157D0                 db    8
.eh_frame_hdr:00000000000157D1                 db    6
.eh_frame_hdr:00000000000157D2                 db    0
.eh_frame_hdr:00000000000157D3                 db    0
.eh_frame_hdr:00000000000157D4                 db  90h
.eh_frame_hdr:00000000000157D5                 db 0CEh
.eh_frame_hdr:00000000000157D6                 db 0FEh
.eh_frame_hdr:00000000000157D7                 db 0FFh
.eh_frame_hdr:00000000000157D8                 db  6Ch ; l
.eh_frame_hdr:00000000000157D9                 db    6
.eh_frame_hdr:00000000000157DA                 db    0
.eh_frame_hdr:00000000000157DB                 db    0
.eh_frame_hdr:00000000000157DC                 db  30h ; 0
.eh_frame_hdr:00000000000157DD                 db 0D4h
.eh_frame_hdr:00000000000157DE                 db 0FEh
.eh_frame_hdr:00000000000157DF                 db 0FFh
.eh_frame_hdr:00000000000157E0                 db 0D0h
.eh_frame_hdr:00000000000157E1                 db    6
.eh_frame_hdr:00000000000157E2                 db    0
.eh_frame_hdr:00000000000157E3                 db    0
.eh_frame_hdr:00000000000157E4                 db 0F0h
.eh_frame_hdr:00000000000157E5                 db 0D7h
.eh_frame_hdr:00000000000157E6                 db 0FEh
.eh_frame_hdr:00000000000157E7                 db 0FFh
.eh_frame_hdr:00000000000157E8                 db  58h ; X
.eh_frame_hdr:00000000000157E9                 db    7
.eh_frame_hdr:00000000000157EA                 db    0
.eh_frame_hdr:00000000000157EB                 db    0
.eh_frame_hdr:00000000000157EC                 db    0
.eh_frame_hdr:00000000000157ED                 db 0D8h
.eh_frame_hdr:00000000000157EE                 db 0FEh
.eh_frame_hdr:00000000000157EF                 db 0FFh
.eh_frame_hdr:00000000000157F0                 db  6Ch ; l
.eh_frame_hdr:00000000000157F1                 db    7
.eh_frame_hdr:00000000000157F2                 db    0
.eh_frame_hdr:00000000000157F3                 db    0
.eh_frame_hdr:00000000000157F4                 db  10h
.eh_frame_hdr:00000000000157F5                 db 0D8h
.eh_frame_hdr:00000000000157F6                 db 0FEh
.eh_frame_hdr:00000000000157F7                 db 0FFh
.eh_frame_hdr:00000000000157F8                 db  80h
.eh_frame_hdr:00000000000157F9                 db    7
.eh_frame_hdr:00000000000157FA                 db    0
.eh_frame_hdr:00000000000157FB                 db    0
.eh_frame_hdr:00000000000157FC                 db 0C0h
.eh_frame_hdr:00000000000157FD                 db 0D8h
.eh_frame_hdr:00000000000157FE                 db 0FEh
.eh_frame_hdr:00000000000157FF                 db 0FFh
.eh_frame_hdr:0000000000015800                 db 0B0h
.eh_frame_hdr:0000000000015801                 db    7
.eh_frame_hdr:0000000000015802                 db    0
.eh_frame_hdr:0000000000015803                 db    0
.eh_frame_hdr:0000000000015804                 db 0C0h
.eh_frame_hdr:0000000000015805                 db 0D9h
.eh_frame_hdr:0000000000015806                 db 0FEh
.eh_frame_hdr:0000000000015807                 db 0FFh
.eh_frame_hdr:0000000000015808                 db    0
.eh_frame_hdr:0000000000015809                 db    8
.eh_frame_hdr:000000000001580A                 db    0
.eh_frame_hdr:000000000001580B                 db    0
.eh_frame_hdr:000000000001580C                 db  60h ; `
.eh_frame_hdr:000000000001580D                 db 0DAh
.eh_frame_hdr:000000000001580E                 db 0FEh
.eh_frame_hdr:000000000001580F                 db 0FFh
.eh_frame_hdr:0000000000015810                 db  20h
.eh_frame_hdr:0000000000015811                 db    8
.eh_frame_hdr:0000000000015812                 db    0
.eh_frame_hdr:0000000000015813                 db    0
.eh_frame_hdr:0000000000015814                 db  50h ; P
.eh_frame_hdr:0000000000015815                 db 0DBh
.eh_frame_hdr:0000000000015816                 db 0FEh
.eh_frame_hdr:0000000000015817                 db 0FFh
.eh_frame_hdr:0000000000015818                 db  64h ; d
.eh_frame_hdr:0000000000015819                 db    8
.eh_frame_hdr:000000000001581A                 db    0
.eh_frame_hdr:000000000001581B                 db    0
.eh_frame_hdr:000000000001581C                 db  90h
.eh_frame_hdr:000000000001581D                 db 0EDh
.eh_frame_hdr:000000000001581E                 db 0FEh
.eh_frame_hdr:000000000001581F                 db 0FFh
.eh_frame_hdr:0000000000015820                 db 0DCh
.eh_frame_hdr:0000000000015821                 db    8
.eh_frame_hdr:0000000000015822                 db    0
.eh_frame_hdr:0000000000015823                 db    0
.eh_frame_hdr:0000000000015824                 db  40h ; @
.eh_frame_hdr:0000000000015825                 db 0EFh
.eh_frame_hdr:0000000000015826                 db 0FEh
.eh_frame_hdr:0000000000015827                 db 0FFh
.eh_frame_hdr:0000000000015828                 db  48h ; H
.eh_frame_hdr:0000000000015829                 db    9
.eh_frame_hdr:000000000001582A                 db    0
.eh_frame_hdr:000000000001582B                 db    0
.eh_frame_hdr:000000000001582C                 db  80h
.eh_frame_hdr:000000000001582D                 db 0EFh
.eh_frame_hdr:000000000001582E                 db 0FEh
.eh_frame_hdr:000000000001582F                 db 0FFh
.eh_frame_hdr:0000000000015830                 db  74h ; t
.eh_frame_hdr:0000000000015831                 db    9
.eh_frame_hdr:0000000000015832                 db    0
.eh_frame_hdr:0000000000015833                 db    0
.eh_frame_hdr:0000000000015834                 db 0A0h
.eh_frame_hdr:0000000000015835                 db 0EFh
.eh_frame_hdr:0000000000015836                 db 0FEh
.eh_frame_hdr:0000000000015837                 db 0FFh
.eh_frame_hdr:0000000000015838                 db  88h
.eh_frame_hdr:0000000000015839                 db    9
.eh_frame_hdr:000000000001583A                 db    0
.eh_frame_hdr:000000000001583B                 db    0
.eh_frame_hdr:000000000001583C                 db 0C0h
.eh_frame_hdr:000000000001583D                 db 0EFh
.eh_frame_hdr:000000000001583E                 db 0FEh
.eh_frame_hdr:000000000001583F                 db 0FFh
.eh_frame_hdr:0000000000015840                 db  9Ch
.eh_frame_hdr:0000000000015841                 db    9
.eh_frame_hdr:0000000000015842                 db    0
.eh_frame_hdr:0000000000015843                 db    0
.eh_frame_hdr:0000000000015844                 db    0
.eh_frame_hdr:0000000000015845                 db 0F0h
.eh_frame_hdr:0000000000015846                 db 0FEh
.eh_frame_hdr:0000000000015847                 db 0FFh
.eh_frame_hdr:0000000000015848                 db 0B0h
.eh_frame_hdr:0000000000015849                 db    9
.eh_frame_hdr:000000000001584A                 db    0
.eh_frame_hdr:000000000001584B                 db    0
.eh_frame_hdr:000000000001584C                 db  20h
.eh_frame_hdr:000000000001584D                 db 0F0h
.eh_frame_hdr:000000000001584E                 db 0FEh
.eh_frame_hdr:000000000001584F                 db 0FFh
.eh_frame_hdr:0000000000015850                 db 0C4h
.eh_frame_hdr:0000000000015851                 db    9
.eh_frame_hdr:0000000000015852                 db    0
.eh_frame_hdr:0000000000015853                 db    0
.eh_frame_hdr:0000000000015854                 db  50h ; P
.eh_frame_hdr:0000000000015855                 db 0F0h
.eh_frame_hdr:0000000000015856                 db 0FEh
.eh_frame_hdr:0000000000015857                 db 0FFh
.eh_frame_hdr:0000000000015858                 db 0D8h
.eh_frame_hdr:0000000000015859                 db    9
.eh_frame_hdr:000000000001585A                 db    0
.eh_frame_hdr:000000000001585B                 db    0
.eh_frame_hdr:000000000001585C                 db 0D0h
.eh_frame_hdr:000000000001585D                 db 0F0h
.eh_frame_hdr:000000000001585E                 db 0FEh
.eh_frame_hdr:000000000001585F                 db 0FFh
.eh_frame_hdr:0000000000015860                 db  2Ch ; ,
.eh_frame_hdr:0000000000015861                 db  0Ah
.eh_frame_hdr:0000000000015862                 db    0
.eh_frame_hdr:0000000000015863                 db    0
.eh_frame_hdr:0000000000015864                 db 0C0h
.eh_frame_hdr:0000000000015865                 db 0F1h
.eh_frame_hdr:0000000000015866                 db 0FEh
.eh_frame_hdr:0000000000015867                 db 0FFh
.eh_frame_hdr:0000000000015868                 db  98h
.eh_frame_hdr:0000000000015869                 db  0Ah
.eh_frame_hdr:000000000001586A                 db    0
.eh_frame_hdr:000000000001586B                 db    0
.eh_frame_hdr:000000000001586C                 db 0D0h
.eh_frame_hdr:000000000001586D                 db 0F1h
.eh_frame_hdr:000000000001586E                 db 0FEh
.eh_frame_hdr:000000000001586F                 db 0FFh
.eh_frame_hdr:0000000000015870                 db 0ACh
.eh_frame_hdr:0000000000015871                 db  0Ah
.eh_frame_hdr:0000000000015872                 db    0
.eh_frame_hdr:0000000000015873                 db    0
.eh_frame_hdr:0000000000015874                 db  70h ; p
.eh_frame_hdr:0000000000015875                 db 0F2h
.eh_frame_hdr:0000000000015876                 db 0FEh
.eh_frame_hdr:0000000000015877                 db 0FFh
.eh_frame_hdr:0000000000015878                 db 0D8h
.eh_frame_hdr:0000000000015879                 db  0Ah
.eh_frame_hdr:000000000001587A                 db    0
.eh_frame_hdr:000000000001587B                 db    0
.eh_frame_hdr:000000000001587C                 db  90h
.eh_frame_hdr:000000000001587D                 db 0F2h
.eh_frame_hdr:000000000001587E                 db 0FEh
.eh_frame_hdr:000000000001587F                 db 0FFh
.eh_frame_hdr:0000000000015880                 db 0ECh
.eh_frame_hdr:0000000000015881                 db  0Ah
.eh_frame_hdr:0000000000015882                 db    0
.eh_frame_hdr:0000000000015883                 db    0
.eh_frame_hdr:0000000000015884                 db 0A0h
.eh_frame_hdr:0000000000015885                 db 0F2h
.eh_frame_hdr:0000000000015886                 db 0FEh
.eh_frame_hdr:0000000000015887                 db 0FFh
.eh_frame_hdr:0000000000015888                 db    0
.eh_frame_hdr:0000000000015889                 db  0Bh
.eh_frame_hdr:000000000001588A                 db    0
.eh_frame_hdr:000000000001588B                 db    0
.eh_frame_hdr:000000000001588C                 db 0C0h
.eh_frame_hdr:000000000001588D                 db 0F2h
.eh_frame_hdr:000000000001588E                 db 0FEh
.eh_frame_hdr:000000000001588F                 db 0FFh
.eh_frame_hdr:0000000000015890                 db  14h
.eh_frame_hdr:0000000000015891                 db  0Bh
.eh_frame_hdr:0000000000015892                 db    0
.eh_frame_hdr:0000000000015893                 db    0
.eh_frame_hdr:0000000000015894                 db 0E0h
.eh_frame_hdr:0000000000015895                 db 0F2h
.eh_frame_hdr:0000000000015896                 db 0FEh
.eh_frame_hdr:0000000000015897                 db 0FFh
.eh_frame_hdr:0000000000015898                 db  28h ; (
.eh_frame_hdr:0000000000015899                 db  0Bh
.eh_frame_hdr:000000000001589A                 db    0
.eh_frame_hdr:000000000001589B                 db    0
.eh_frame_hdr:000000000001589C                 db  70h ; p
.eh_frame_hdr:000000000001589D                 db 0F3h
.eh_frame_hdr:000000000001589E                 db 0FEh
.eh_frame_hdr:000000000001589F                 db 0FFh
.eh_frame_hdr:00000000000158A0                 db  44h ; D
.eh_frame_hdr:00000000000158A1                 db  0Bh
.eh_frame_hdr:00000000000158A2                 db    0
.eh_frame_hdr:00000000000158A3                 db    0
.eh_frame_hdr:00000000000158A4                 db    0
.eh_frame_hdr:00000000000158A5                 db 0F4h
.eh_frame_hdr:00000000000158A6                 db 0FEh
.eh_frame_hdr:00000000000158A7                 db 0FFh
.eh_frame_hdr:00000000000158A8                 db  60h ; `
.eh_frame_hdr:00000000000158A9                 db  0Bh
.eh_frame_hdr:00000000000158AA                 db    0
.eh_frame_hdr:00000000000158AB                 db    0
.eh_frame_hdr:00000000000158AC                 db  10h
.eh_frame_hdr:00000000000158AD                 db 0F4h
.eh_frame_hdr:00000000000158AE                 db 0FEh
.eh_frame_hdr:00000000000158AF                 db 0FFh
.eh_frame_hdr:00000000000158B0                 db  74h ; t
.eh_frame_hdr:00000000000158B1                 db  0Bh
.eh_frame_hdr:00000000000158B2                 db    0
.eh_frame_hdr:00000000000158B3                 db    0
.eh_frame_hdr:00000000000158B4                 db  20h
.eh_frame_hdr:00000000000158B5                 db 0F4h
.eh_frame_hdr:00000000000158B6                 db 0FEh
.eh_frame_hdr:00000000000158B7                 db 0FFh
.eh_frame_hdr:00000000000158B8                 db  88h
.eh_frame_hdr:00000000000158B9                 db  0Bh
.eh_frame_hdr:00000000000158BA                 db    0
.eh_frame_hdr:00000000000158BB                 db    0
.eh_frame_hdr:00000000000158BC                 db 0C0h
.eh_frame_hdr:00000000000158BD                 db 0F4h
.eh_frame_hdr:00000000000158BE                 db 0FEh
.eh_frame_hdr:00000000000158BF                 db 0FFh
.eh_frame_hdr:00000000000158C0                 db 0A4h
.eh_frame_hdr:00000000000158C1                 db  0Bh
.eh_frame_hdr:00000000000158C2                 db    0
.eh_frame_hdr:00000000000158C3                 db    0
.eh_frame_hdr:00000000000158C4                 db 0D0h
.eh_frame_hdr:00000000000158C5                 db 0F4h
.eh_frame_hdr:00000000000158C6                 db 0FEh
.eh_frame_hdr:00000000000158C7                 db 0FFh
.eh_frame_hdr:00000000000158C8                 db 0B8h
.eh_frame_hdr:00000000000158C9                 db  0Bh
.eh_frame_hdr:00000000000158CA                 db    0
.eh_frame_hdr:00000000000158CB                 db    0
.eh_frame_hdr:00000000000158CC                 db 0F0h
.eh_frame_hdr:00000000000158CD                 db 0F4h
.eh_frame_hdr:00000000000158CE                 db 0FEh
.eh_frame_hdr:00000000000158CF                 db 0FFh
.eh_frame_hdr:00000000000158D0                 db 0CCh
.eh_frame_hdr:00000000000158D1                 db  0Bh
.eh_frame_hdr:00000000000158D2                 db    0
.eh_frame_hdr:00000000000158D3                 db    0
.eh_frame_hdr:00000000000158D4                 db    0
.eh_frame_hdr:00000000000158D5                 db 0F5h
.eh_frame_hdr:00000000000158D6                 db 0FEh
.eh_frame_hdr:00000000000158D7                 db 0FFh
.eh_frame_hdr:00000000000158D8                 db 0E0h
.eh_frame_hdr:00000000000158D9                 db  0Bh
.eh_frame_hdr:00000000000158DA                 db    0
.eh_frame_hdr:00000000000158DB                 db    0
.eh_frame_hdr:00000000000158DC                 db  90h
.eh_frame_hdr:00000000000158DD                 db 0F5h
.eh_frame_hdr:00000000000158DE                 db 0FEh
.eh_frame_hdr:00000000000158DF                 db 0FFh
.eh_frame_hdr:00000000000158E0                 db 0FCh
.eh_frame_hdr:00000000000158E1                 db  0Bh
.eh_frame_hdr:00000000000158E2                 db    0
.eh_frame_hdr:00000000000158E3                 db    0
.eh_frame_hdr:00000000000158E4                 db  30h ; 0
.eh_frame_hdr:00000000000158E5                 db 0F6h
.eh_frame_hdr:00000000000158E6                 db 0FEh
.eh_frame_hdr:00000000000158E7                 db 0FFh
.eh_frame_hdr:00000000000158E8                 db  18h
.eh_frame_hdr:00000000000158E9                 db  0Ch
.eh_frame_hdr:00000000000158EA                 db    0
.eh_frame_hdr:00000000000158EB                 db    0
.eh_frame_hdr:00000000000158EC                 db  40h ; @
.eh_frame_hdr:00000000000158ED                 db 0F6h
.eh_frame_hdr:00000000000158EE                 db 0FEh
.eh_frame_hdr:00000000000158EF                 db 0FFh
.eh_frame_hdr:00000000000158F0                 db  2Ch ; ,
.eh_frame_hdr:00000000000158F1                 db  0Ch
.eh_frame_hdr:00000000000158F2                 db    0
.eh_frame_hdr:00000000000158F3                 db    0
.eh_frame_hdr:00000000000158F4                 db  60h ; `
.eh_frame_hdr:00000000000158F5                 db 0F6h
.eh_frame_hdr:00000000000158F6                 db 0FEh
.eh_frame_hdr:00000000000158F7                 db 0FFh
.eh_frame_hdr:00000000000158F8                 db  40h ; @
.eh_frame_hdr:00000000000158F9                 db  0Ch
.eh_frame_hdr:00000000000158FA                 db    0
.eh_frame_hdr:00000000000158FB                 db    0
.eh_frame_hdr:00000000000158FC                 db  80h
.eh_frame_hdr:00000000000158FD                 db 0F6h
.eh_frame_hdr:00000000000158FE                 db 0FEh
.eh_frame_hdr:00000000000158FF                 db 0FFh
.eh_frame_hdr:0000000000015900                 db  54h ; T
.eh_frame_hdr:0000000000015901                 db  0Ch
.eh_frame_hdr:0000000000015902                 db    0
.eh_frame_hdr:0000000000015903                 db    0
.eh_frame_hdr:0000000000015904                 db  90h
.eh_frame_hdr:0000000000015905                 db 0F6h
.eh_frame_hdr:0000000000015906                 db 0FEh
.eh_frame_hdr:0000000000015907                 db 0FFh
.eh_frame_hdr:0000000000015908                 db  68h ; h
.eh_frame_hdr:0000000000015909                 db  0Ch
.eh_frame_hdr:000000000001590A                 db    0
.eh_frame_hdr:000000000001590B                 db    0
.eh_frame_hdr:000000000001590C                 db 0B0h
.eh_frame_hdr:000000000001590D                 db 0F6h
.eh_frame_hdr:000000000001590E                 db 0FEh
.eh_frame_hdr:000000000001590F                 db 0FFh
.eh_frame_hdr:0000000000015910                 db  7Ch ; |
.eh_frame_hdr:0000000000015911                 db  0Ch
.eh_frame_hdr:0000000000015912                 db    0
.eh_frame_hdr:0000000000015913                 db    0
.eh_frame_hdr:0000000000015914                 db 0D0h
.eh_frame_hdr:0000000000015915                 db 0F6h
.eh_frame_hdr:0000000000015916                 db 0FEh
.eh_frame_hdr:0000000000015917                 db 0FFh
.eh_frame_hdr:0000000000015918                 db  90h
.eh_frame_hdr:0000000000015919                 db  0Ch
.eh_frame_hdr:000000000001591A                 db    0
.eh_frame_hdr:000000000001591B                 db    0
.eh_frame_hdr:000000000001591C                 db 0F0h
.eh_frame_hdr:000000000001591D                 db 0F6h
.eh_frame_hdr:000000000001591E                 db 0FEh
.eh_frame_hdr:000000000001591F                 db 0FFh
.eh_frame_hdr:0000000000015920                 db 0A8h
.eh_frame_hdr:0000000000015921                 db  0Ch
.eh_frame_hdr:0000000000015922                 db    0
.eh_frame_hdr:0000000000015923                 db    0
.eh_frame_hdr:0000000000015924                 db  50h ; P
.eh_frame_hdr:0000000000015925                 db 0F7h
.eh_frame_hdr:0000000000015926                 db 0FEh
.eh_frame_hdr:0000000000015927                 db 0FFh
.eh_frame_hdr:0000000000015928                 db 0E0h
.eh_frame_hdr:0000000000015929                 db  0Ch
.eh_frame_hdr:000000000001592A                 db    0
.eh_frame_hdr:000000000001592B                 db    0
.eh_frame_hdr:000000000001592C                 db  70h ; p
.eh_frame_hdr:000000000001592D                 db 0F7h
.eh_frame_hdr:000000000001592E                 db 0FEh
.eh_frame_hdr:000000000001592F                 db 0FFh
.eh_frame_hdr:0000000000015930                 db 0F8h
.eh_frame_hdr:0000000000015931                 db  0Ch
.eh_frame_hdr:0000000000015932                 db    0
.eh_frame_hdr:0000000000015933                 db    0
.eh_frame_hdr:0000000000015934                 db  90h
.eh_frame_hdr:0000000000015935                 db 0F7h
.eh_frame_hdr:0000000000015936                 db 0FEh
.eh_frame_hdr:0000000000015937                 db 0FFh
.eh_frame_hdr:0000000000015938                 db  18h
.eh_frame_hdr:0000000000015939                 db  0Dh
.eh_frame_hdr:000000000001593A                 db    0
.eh_frame_hdr:000000000001593B                 db    0
.eh_frame_hdr:000000000001593C                 db 0D0h
.eh_frame_hdr:000000000001593D                 db 0F7h
.eh_frame_hdr:000000000001593E                 db 0FEh
.eh_frame_hdr:000000000001593F                 db 0FFh
.eh_frame_hdr:0000000000015940                 db  50h ; P
.eh_frame_hdr:0000000000015941                 db  0Dh
.eh_frame_hdr:0000000000015942                 db    0
.eh_frame_hdr:0000000000015943                 db    0
.eh_frame_hdr:0000000000015944                 db 0F0h
.eh_frame_hdr:0000000000015945                 db 0FBh
.eh_frame_hdr:0000000000015946                 db 0FEh
.eh_frame_hdr:0000000000015947                 db 0FFh
.eh_frame_hdr:0000000000015948                 db  64h ; d
.eh_frame_hdr:0000000000015949                 db  0Eh
.eh_frame_hdr:000000000001594A                 db    0
.eh_frame_hdr:000000000001594B                 db    0
.eh_frame_hdr:000000000001594C                 db  10h
.eh_frame_hdr:000000000001594D                 db 0FCh
.eh_frame_hdr:000000000001594E                 db 0FEh
.eh_frame_hdr:000000000001594F                 db 0FFh
.eh_frame_hdr:0000000000015950                 db  78h ; x
.eh_frame_hdr:0000000000015951                 db  0Eh
.eh_frame_hdr:0000000000015952                 db    0
.eh_frame_hdr:0000000000015953                 db    0
.eh_frame_hdr:0000000000015954                 db  90h
.eh_frame_hdr:0000000000015955                 db 0FCh
.eh_frame_hdr:0000000000015956                 db 0FEh
.eh_frame_hdr:0000000000015957                 db 0FFh
.eh_frame_hdr:0000000000015958                 db  94h
.eh_frame_hdr:0000000000015959                 db  0Eh
.eh_frame_hdr:000000000001595A                 db    0
.eh_frame_hdr:000000000001595B                 db    0
.eh_frame_hdr:000000000001595C                 db  70h ; p
.eh_frame_hdr:000000000001595D                 db 0FDh
.eh_frame_hdr:000000000001595E                 db 0FEh
.eh_frame_hdr:000000000001595F                 db 0FFh
.eh_frame_hdr:0000000000015960                 db 0C0h
.eh_frame_hdr:0000000000015961                 db  0Eh
.eh_frame_hdr:0000000000015962                 db    0
.eh_frame_hdr:0000000000015963                 db    0
.eh_frame_hdr:0000000000015964                 db 0F0h
.eh_frame_hdr:0000000000015965                 db 0FDh
.eh_frame_hdr:0000000000015966                 db 0FEh
.eh_frame_hdr:0000000000015967                 db 0FFh
.eh_frame_hdr:0000000000015968                 db 0E0h
.eh_frame_hdr:0000000000015969                 db  0Eh
.eh_frame_hdr:000000000001596A                 db    0
.eh_frame_hdr:000000000001596B                 db    0
.eh_frame_hdr:000000000001596C                 db  10h
.eh_frame_hdr:000000000001596D                 db 0FEh
.eh_frame_hdr:000000000001596E                 db 0FEh
.eh_frame_hdr:000000000001596F                 db 0FFh
.eh_frame_hdr:0000000000015970                 db 0FCh
.eh_frame_hdr:0000000000015971                 db  0Eh
.eh_frame_hdr:0000000000015972                 db    0
.eh_frame_hdr:0000000000015973                 db    0
.eh_frame_hdr:0000000000015974                 db  40h ; @
.eh_frame_hdr:0000000000015975                 db 0FEh
.eh_frame_hdr:0000000000015976                 db 0FEh
.eh_frame_hdr:0000000000015977                 db 0FFh
.eh_frame_hdr:0000000000015978                 db  10h
.eh_frame_hdr:0000000000015979                 db  0Fh
.eh_frame_hdr:000000000001597A                 db    0
.eh_frame_hdr:000000000001597B                 db    0
.eh_frame_hdr:000000000001597C                 db  50h ; P
.eh_frame_hdr:000000000001597D                 db 0FEh
.eh_frame_hdr:000000000001597E                 db 0FEh
.eh_frame_hdr:000000000001597F                 db 0FFh
.eh_frame_hdr:0000000000015980                 db  24h ; $
.eh_frame_hdr:0000000000015981                 db  0Fh
.eh_frame_hdr:0000000000015982                 db    0
.eh_frame_hdr:0000000000015983                 db    0
.eh_frame_hdr:0000000000015984                 db  90h
.eh_frame_hdr:0000000000015985                 db 0FEh
.eh_frame_hdr:0000000000015986                 db 0FEh
.eh_frame_hdr:0000000000015987                 db 0FFh
.eh_frame_hdr:0000000000015988                 db  48h ; H
.eh_frame_hdr:0000000000015989                 db  0Fh
.eh_frame_hdr:000000000001598A                 db    0
.eh_frame_hdr:000000000001598B                 db    0
.eh_frame_hdr:000000000001598C                 db 0C0h
.eh_frame_hdr:000000000001598D                 db 0FEh
.eh_frame_hdr:000000000001598E                 db 0FEh
.eh_frame_hdr:000000000001598F                 db 0FFh
.eh_frame_hdr:0000000000015990                 db  5Ch ; \
.eh_frame_hdr:0000000000015991                 db  0Fh
.eh_frame_hdr:0000000000015992                 db    0
.eh_frame_hdr:0000000000015993                 db    0
.eh_frame_hdr:0000000000015994                 db  50h ; P
.eh_frame_hdr:0000000000015995                 db 0FFh
.eh_frame_hdr:0000000000015996                 db 0FEh
.eh_frame_hdr:0000000000015997                 db 0FFh
.eh_frame_hdr:0000000000015998                 db  74h ; t
.eh_frame_hdr:0000000000015999                 db  0Fh
.eh_frame_hdr:000000000001599A                 db    0
.eh_frame_hdr:000000000001599B                 db    0
.eh_frame_hdr:000000000001599C                 db 0A0h
.eh_frame_hdr:000000000001599D                 db 0FFh
.eh_frame_hdr:000000000001599E                 db 0FEh
.eh_frame_hdr:000000000001599F                 db 0FFh
.eh_frame_hdr:00000000000159A0                 db  8Ch
.eh_frame_hdr:00000000000159A1                 db  0Fh
.eh_frame_hdr:00000000000159A2                 db    0
.eh_frame_hdr:00000000000159A3                 db    0
.eh_frame_hdr:00000000000159A4                 db 0C0h
.eh_frame_hdr:00000000000159A5                 db 0FFh
.eh_frame_hdr:00000000000159A6                 db 0FEh
.eh_frame_hdr:00000000000159A7                 db 0FFh
.eh_frame_hdr:00000000000159A8                 db 0A8h
.eh_frame_hdr:00000000000159A9                 db  0Fh
.eh_frame_hdr:00000000000159AA                 db    0
.eh_frame_hdr:00000000000159AB                 db    0
.eh_frame_hdr:00000000000159AC                 db 0F0h
.eh_frame_hdr:00000000000159AD                 db 0FFh
.eh_frame_hdr:00000000000159AE                 db 0FEh
.eh_frame_hdr:00000000000159AF                 db 0FFh
.eh_frame_hdr:00000000000159B0                 db 0C4h
.eh_frame_hdr:00000000000159B1                 db  0Fh
.eh_frame_hdr:00000000000159B2                 db    0
.eh_frame_hdr:00000000000159B3                 db    0
.eh_frame_hdr:00000000000159B4                 db  20h
.eh_frame_hdr:00000000000159B5                 db    0
.eh_frame_hdr:00000000000159B6                 db 0FFh
.eh_frame_hdr:00000000000159B7                 db 0FFh
.eh_frame_hdr:00000000000159B8                 db 0ECh
.eh_frame_hdr:00000000000159B9                 db  0Fh
.eh_frame_hdr:00000000000159BA                 db    0
.eh_frame_hdr:00000000000159BB                 db    0
.eh_frame_hdr:00000000000159BC                 db  40h ; @
.eh_frame_hdr:00000000000159BD                 db    0
.eh_frame_hdr:00000000000159BE                 db 0FFh
.eh_frame_hdr:00000000000159BF                 db 0FFh
.eh_frame_hdr:00000000000159C0                 db    8
.eh_frame_hdr:00000000000159C1                 db  10h
.eh_frame_hdr:00000000000159C2                 db    0
.eh_frame_hdr:00000000000159C3                 db    0
.eh_frame_hdr:00000000000159C4                 db  80h
.eh_frame_hdr:00000000000159C5                 db    0
.eh_frame_hdr:00000000000159C6                 db 0FFh
.eh_frame_hdr:00000000000159C7                 db 0FFh
.eh_frame_hdr:00000000000159C8                 db  20h
.eh_frame_hdr:00000000000159C9                 db  10h
.eh_frame_hdr:00000000000159CA                 db    0
.eh_frame_hdr:00000000000159CB                 db    0
.eh_frame_hdr:00000000000159CC                 db 0E0h
.eh_frame_hdr:00000000000159CD                 db    0
.eh_frame_hdr:00000000000159CE                 db 0FFh
.eh_frame_hdr:00000000000159CF                 db 0FFh
.eh_frame_hdr:00000000000159D0                 db  50h ; P
.eh_frame_hdr:00000000000159D1                 db  10h
.eh_frame_hdr:00000000000159D2                 db    0
.eh_frame_hdr:00000000000159D3                 db    0
.eh_frame_hdr:00000000000159D4                 db  70h ; p
.eh_frame_hdr:00000000000159D5                 db    1
.eh_frame_hdr:00000000000159D6                 db 0FFh
.eh_frame_hdr:00000000000159D7                 db 0FFh
.eh_frame_hdr:00000000000159D8                 db  90h
.eh_frame_hdr:00000000000159D9                 db  10h
.eh_frame_hdr:00000000000159DA                 db    0
.eh_frame_hdr:00000000000159DB                 db    0
.eh_frame_hdr:00000000000159DC                 db 0A0h
.eh_frame_hdr:00000000000159DD                 db    2
.eh_frame_hdr:00000000000159DE                 db 0FFh
.eh_frame_hdr:00000000000159DF                 db 0FFh
.eh_frame_hdr:00000000000159E0                 db 0A4h
.eh_frame_hdr:00000000000159E1                 db  10h
.eh_frame_hdr:00000000000159E2                 db    0
.eh_frame_hdr:00000000000159E3                 db    0
.eh_frame_hdr:00000000000159E4                 db 0C0h
.eh_frame_hdr:00000000000159E5                 db    2
.eh_frame_hdr:00000000000159E6                 db 0FFh
.eh_frame_hdr:00000000000159E7                 db 0FFh
.eh_frame_hdr:00000000000159E8                 db 0B8h
.eh_frame_hdr:00000000000159E9                 db  10h
.eh_frame_hdr:00000000000159EA                 db    0
.eh_frame_hdr:00000000000159EB                 db    0
.eh_frame_hdr:00000000000159EC                 db 0F0h
.eh_frame_hdr:00000000000159ED                 db    4
.eh_frame_hdr:00000000000159EE                 db 0FFh
.eh_frame_hdr:00000000000159EF                 db 0FFh
.eh_frame_hdr:00000000000159F0                 db  4Ch ; L
.eh_frame_hdr:00000000000159F1                 db  11h
.eh_frame_hdr:00000000000159F2                 db    0
.eh_frame_hdr:00000000000159F3                 db    0
.eh_frame_hdr:00000000000159F4                 db  60h ; `
.eh_frame_hdr:00000000000159F5                 db    5
.eh_frame_hdr:00000000000159F6                 db 0FFh
.eh_frame_hdr:00000000000159F7                 db 0FFh
.eh_frame_hdr:00000000000159F8                 db  60h ; `
.eh_frame_hdr:00000000000159F9                 db  11h
.eh_frame_hdr:00000000000159FA                 db    0
.eh_frame_hdr:00000000000159FB                 db    0
.eh_frame_hdr:00000000000159FC                 db 0D0h
.eh_frame_hdr:00000000000159FD                 db    5
.eh_frame_hdr:00000000000159FE                 db 0FFh
.eh_frame_hdr:00000000000159FF                 db 0FFh
.eh_frame_hdr:0000000000015A00                 db  8Ch
.eh_frame_hdr:0000000000015A01                 db  11h
.eh_frame_hdr:0000000000015A02                 db    0
.eh_frame_hdr:0000000000015A03                 db    0
.eh_frame_hdr:0000000000015A04                 db  30h ; 0
.eh_frame_hdr:0000000000015A05                 db    6
.eh_frame_hdr:0000000000015A06                 db 0FFh
.eh_frame_hdr:0000000000015A07                 db 0FFh
.eh_frame_hdr:0000000000015A08                 db 0B8h
.eh_frame_hdr:0000000000015A09                 db  11h
.eh_frame_hdr:0000000000015A0A                 db    0
.eh_frame_hdr:0000000000015A0B                 db    0
.eh_frame_hdr:0000000000015A0C                 db 0D0h
.eh_frame_hdr:0000000000015A0D                 db    6
.eh_frame_hdr:0000000000015A0E                 db 0FFh
.eh_frame_hdr:0000000000015A0F                 db 0FFh
.eh_frame_hdr:0000000000015A10                 db 0ECh
.eh_frame_hdr:0000000000015A11                 db  11h
.eh_frame_hdr:0000000000015A12                 db    0
.eh_frame_hdr:0000000000015A13                 db    0
.eh_frame_hdr:0000000000015A14                 db  40h ; @
.eh_frame_hdr:0000000000015A15                 db    7
.eh_frame_hdr:0000000000015A16                 db 0FFh
.eh_frame_hdr:0000000000015A17                 db 0FFh
.eh_frame_hdr:0000000000015A18                 db  18h
.eh_frame_hdr:0000000000015A19                 db  12h
.eh_frame_hdr:0000000000015A1A                 db    0
.eh_frame_hdr:0000000000015A1B                 db    0
.eh_frame_hdr:0000000000015A1C                 db  70h ; p
.eh_frame_hdr:0000000000015A1D                 db    8
.eh_frame_hdr:0000000000015A1E                 db 0FFh
.eh_frame_hdr:0000000000015A1F                 db 0FFh
.eh_frame_hdr:0000000000015A20                 db  50h ; P
.eh_frame_hdr:0000000000015A21                 db  12h
.eh_frame_hdr:0000000000015A22                 db    0
.eh_frame_hdr:0000000000015A23                 db    0
.eh_frame_hdr:0000000000015A24                 db  60h ; `
.eh_frame_hdr:0000000000015A25                 db    9
.eh_frame_hdr:0000000000015A26                 db 0FFh
.eh_frame_hdr:0000000000015A27                 db 0FFh
.eh_frame_hdr:0000000000015A28                 db 0A0h
.eh_frame_hdr:0000000000015A29                 db  12h
.eh_frame_hdr:0000000000015A2A                 db    0
.eh_frame_hdr:0000000000015A2B                 db    0
.eh_frame_hdr:0000000000015A2C                 db 0D0h
.eh_frame_hdr:0000000000015A2D                 db    9
.eh_frame_hdr:0000000000015A2E                 db 0FFh
.eh_frame_hdr:0000000000015A2F                 db 0FFh
.eh_frame_hdr:0000000000015A30                 db 0D0h
.eh_frame_hdr:0000000000015A31                 db  12h
.eh_frame_hdr:0000000000015A32                 db    0
.eh_frame_hdr:0000000000015A33                 db    0
.eh_frame_hdr:0000000000015A34                 db 0A0h
.eh_frame_hdr:0000000000015A35                 db  0Bh
.eh_frame_hdr:0000000000015A36                 db 0FFh
.eh_frame_hdr:0000000000015A37                 db 0FFh
.eh_frame_hdr:0000000000015A38                 db  1Ch
.eh_frame_hdr:0000000000015A39                 db  13h
.eh_frame_hdr:0000000000015A3A                 db    0
.eh_frame_hdr:0000000000015A3B                 db    0
.eh_frame_hdr:0000000000015A3C                 db 0C0h
.eh_frame_hdr:0000000000015A3D                 db  11h
.eh_frame_hdr:0000000000015A3E                 db 0FFh
.eh_frame_hdr:0000000000015A3F                 db 0FFh
.eh_frame_hdr:0000000000015A40                 db  68h ; h
.eh_frame_hdr:0000000000015A41                 db  13h
.eh_frame_hdr:0000000000015A42                 db    0
.eh_frame_hdr:0000000000015A43                 db    0
.eh_frame_hdr:0000000000015A44                 db  10h
.eh_frame_hdr:0000000000015A45                 db  13h
.eh_frame_hdr:0000000000015A46                 db 0FFh
.eh_frame_hdr:0000000000015A47                 db 0FFh
.eh_frame_hdr:0000000000015A48                 db 0C4h
.eh_frame_hdr:0000000000015A49                 db  13h
.eh_frame_hdr:0000000000015A4A                 db    0
.eh_frame_hdr:0000000000015A4B                 db    0
.eh_frame_hdr:0000000000015A4C                 db 0A0h
.eh_frame_hdr:0000000000015A4D                 db  13h
.eh_frame_hdr:0000000000015A4E                 db 0FFh
.eh_frame_hdr:0000000000015A4F                 db 0FFh
.eh_frame_hdr:0000000000015A50                 db 0F0h
.eh_frame_hdr:0000000000015A51                 db  13h
.eh_frame_hdr:0000000000015A52                 db    0
.eh_frame_hdr:0000000000015A53                 db    0
.eh_frame_hdr:0000000000015A54                 db 0D0h
.eh_frame_hdr:0000000000015A55                 db  13h
.eh_frame_hdr:0000000000015A56                 db 0FFh
.eh_frame_hdr:0000000000015A57                 db 0FFh
.eh_frame_hdr:0000000000015A58                 db  0Ch
.eh_frame_hdr:0000000000015A59                 db  14h
.eh_frame_hdr:0000000000015A5A                 db    0
.eh_frame_hdr:0000000000015A5B                 db    0
.eh_frame_hdr:0000000000015A5C                 db    0
.eh_frame_hdr:0000000000015A5D                 db  14h
.eh_frame_hdr:0000000000015A5E                 db 0FFh
.eh_frame_hdr:0000000000015A5F                 db 0FFh
.eh_frame_hdr:0000000000015A60                 db  20h
.eh_frame_hdr:0000000000015A61                 db  14h
.eh_frame_hdr:0000000000015A62                 db    0
.eh_frame_hdr:0000000000015A63                 db    0
.eh_frame_hdr:0000000000015A64                 db  20h
.eh_frame_hdr:0000000000015A65                 db  14h
.eh_frame_hdr:0000000000015A66                 db 0FFh
.eh_frame_hdr:0000000000015A67                 db 0FFh
.eh_frame_hdr:0000000000015A68                 db  38h ; 8
.eh_frame_hdr:0000000000015A69                 db  14h
.eh_frame_hdr:0000000000015A6A                 db    0
.eh_frame_hdr:0000000000015A6B                 db    0
.eh_frame_hdr:0000000000015A6C                 db 0F0h
.eh_frame_hdr:0000000000015A6D                 db  15h
.eh_frame_hdr:0000000000015A6E                 db 0FFh
.eh_frame_hdr:0000000000015A6F                 db 0FFh
.eh_frame_hdr:0000000000015A70                 db  84h
.eh_frame_hdr:0000000000015A71                 db  14h
.eh_frame_hdr:0000000000015A72                 db    0
.eh_frame_hdr:0000000000015A73                 db    0
.eh_frame_hdr:0000000000015A74                 db  90h
.eh_frame_hdr:0000000000015A75                 db  16h
.eh_frame_hdr:0000000000015A76                 db 0FFh
.eh_frame_hdr:0000000000015A77                 db 0FFh
.eh_frame_hdr:0000000000015A78                 db 0BCh
.eh_frame_hdr:0000000000015A79                 db  14h
.eh_frame_hdr:0000000000015A7A                 db    0
.eh_frame_hdr:0000000000015A7B                 db    0
.eh_frame_hdr:0000000000015A7C                 db  10h
.eh_frame_hdr:0000000000015A7D                 db  19h
.eh_frame_hdr:0000000000015A7E                 db 0FFh
.eh_frame_hdr:0000000000015A7F                 db 0FFh
.eh_frame_hdr:0000000000015A80                 db    8
.eh_frame_hdr:0000000000015A81                 db  15h
.eh_frame_hdr:0000000000015A82                 db    0
.eh_frame_hdr:0000000000015A83                 db    0
.eh_frame_hdr:0000000000015A84                 db  70h ; p
.eh_frame_hdr:0000000000015A85                 db  19h
.eh_frame_hdr:0000000000015A86                 db 0FFh
.eh_frame_hdr:0000000000015A87                 db 0FFh
.eh_frame_hdr:0000000000015A88                 db  24h ; $
.eh_frame_hdr:0000000000015A89                 db  15h
.eh_frame_hdr:0000000000015A8A                 db    0
.eh_frame_hdr:0000000000015A8B                 db    0
.eh_frame_hdr:0000000000015A8C                 db 0B0h
.eh_frame_hdr:0000000000015A8D                 db  19h
.eh_frame_hdr:0000000000015A8E                 db 0FFh
.eh_frame_hdr:0000000000015A8F                 db 0FFh
.eh_frame_hdr:0000000000015A90                 db  44h ; D
.eh_frame_hdr:0000000000015A91                 db  15h
.eh_frame_hdr:0000000000015A92                 db    0
.eh_frame_hdr:0000000000015A93                 db    0
.eh_frame_hdr:0000000000015A94                 db  10h
.eh_frame_hdr:0000000000015A95                 db  1Bh
.eh_frame_hdr:0000000000015A96                 db 0FFh
.eh_frame_hdr:0000000000015A97                 db 0FFh
.eh_frame_hdr:0000000000015A98                 db  80h
.eh_frame_hdr:0000000000015A99                 db  15h
.eh_frame_hdr:0000000000015A9A                 db    0
.eh_frame_hdr:0000000000015A9B                 db    0
.eh_frame_hdr:0000000000015A9C                 db 0D0h
.eh_frame_hdr:0000000000015A9D                 db  1Bh
.eh_frame_hdr:0000000000015A9E                 db 0FFh
.eh_frame_hdr:0000000000015A9F                 db 0FFh
.eh_frame_hdr:0000000000015AA0                 db 0BCh
.eh_frame_hdr:0000000000015AA1                 db  15h
.eh_frame_hdr:0000000000015AA2                 db    0
.eh_frame_hdr:0000000000015AA3                 db    0
.eh_frame_hdr:0000000000015AA4                 db  20h
.eh_frame_hdr:0000000000015AA5                 db  1Ch
.eh_frame_hdr:0000000000015AA6                 db 0FFh
.eh_frame_hdr:0000000000015AA7                 db 0FFh
.eh_frame_hdr:0000000000015AA8                 db 0D0h
.eh_frame_hdr:0000000000015AA9                 db  15h
.eh_frame_hdr:0000000000015AAA                 db    0
.eh_frame_hdr:0000000000015AAB                 db    0
.eh_frame_hdr:0000000000015AAC                 db  80h
.eh_frame_hdr:0000000000015AAD                 db  1Ch
.eh_frame_hdr:0000000000015AAE                 db 0FFh
.eh_frame_hdr:0000000000015AAF                 db 0FFh
.eh_frame_hdr:0000000000015AB0                 db 0E4h
.eh_frame_hdr:0000000000015AB1                 db  15h
.eh_frame_hdr:0000000000015AB2                 db    0
.eh_frame_hdr:0000000000015AB3                 db    0
.eh_frame_hdr:0000000000015AB4                 db    0
.eh_frame_hdr:0000000000015AB5                 db  1Dh
.eh_frame_hdr:0000000000015AB6                 db 0FFh
.eh_frame_hdr:0000000000015AB7                 db 0FFh
.eh_frame_hdr:0000000000015AB8                 db 0F8h
.eh_frame_hdr:0000000000015AB9                 db  15h
.eh_frame_hdr:0000000000015ABA                 db    0
.eh_frame_hdr:0000000000015ABB                 db    0
.eh_frame_hdr:0000000000015ABC                 db    0
.eh_frame_hdr:0000000000015ABD                 db  1Eh
.eh_frame_hdr:0000000000015ABE                 db 0FFh
.eh_frame_hdr:0000000000015ABF                 db 0FFh
.eh_frame_hdr:0000000000015AC0                 db  5Ch ; \
.eh_frame_hdr:0000000000015AC1                 db  16h
.eh_frame_hdr:0000000000015AC2                 db    0
.eh_frame_hdr:0000000000015AC3                 db    0
.eh_frame_hdr:0000000000015AC4                 db  40h ; @
.eh_frame_hdr:0000000000015AC5                 db  1Eh
.eh_frame_hdr:0000000000015AC6                 db 0FFh
.eh_frame_hdr:0000000000015AC7                 db 0FFh
.eh_frame_hdr:0000000000015AC8                 db  70h ; p
.eh_frame_hdr:0000000000015AC9                 db  16h
.eh_frame_hdr:0000000000015ACA                 db    0
.eh_frame_hdr:0000000000015ACB                 db    0
.eh_frame_hdr:0000000000015ACC                 db 0D0h
.eh_frame_hdr:0000000000015ACD                 db  1Eh
.eh_frame_hdr:0000000000015ACE                 db 0FFh
.eh_frame_hdr:0000000000015ACF                 db 0FFh
.eh_frame_hdr:0000000000015AD0                 db  84h
.eh_frame_hdr:0000000000015AD1                 db  16h
.eh_frame_hdr:0000000000015AD2                 db    0
.eh_frame_hdr:0000000000015AD3                 db    0
.eh_frame_hdr:0000000000015AD4                 db  30h ; 0
.eh_frame_hdr:0000000000015AD5                 db  1Fh
.eh_frame_hdr:0000000000015AD6                 db 0FFh
.eh_frame_hdr:0000000000015AD7                 db 0FFh
.eh_frame_hdr:0000000000015AD8                 db  98h
.eh_frame_hdr:0000000000015AD9                 db  16h
.eh_frame_hdr:0000000000015ADA                 db    0
.eh_frame_hdr:0000000000015ADB                 db    0
.eh_frame_hdr:0000000000015ADC                 db 0A0h
.eh_frame_hdr:0000000000015ADD                 db  21h ; !
.eh_frame_hdr:0000000000015ADE                 db 0FFh
.eh_frame_hdr:0000000000015ADF                 db 0FFh
.eh_frame_hdr:0000000000015AE0                 db 0E8h
.eh_frame_hdr:0000000000015AE1                 db  16h
.eh_frame_hdr:0000000000015AE2                 db    0
.eh_frame_hdr:0000000000015AE3                 db    0
.eh_frame_hdr:0000000000015AE4                 db  80h
.eh_frame_hdr:0000000000015AE5                 db  23h ; #
.eh_frame_hdr:0000000000015AE6                 db 0FFh
.eh_frame_hdr:0000000000015AE7                 db 0FFh
.eh_frame_hdr:0000000000015AE8                 db  20h
.eh_frame_hdr:0000000000015AE9                 db  17h
.eh_frame_hdr:0000000000015AEA                 db    0
.eh_frame_hdr:0000000000015AEB                 db    0
.eh_frame_hdr:0000000000015AEC                 db  30h ; 0
.eh_frame_hdr:0000000000015AED                 db  26h ; &
.eh_frame_hdr:0000000000015AEE                 db 0FFh
.eh_frame_hdr:0000000000015AEF                 db 0FFh
.eh_frame_hdr:0000000000015AF0                 db  70h ; p
.eh_frame_hdr:0000000000015AF1                 db  17h
.eh_frame_hdr:0000000000015AF2                 db    0
.eh_frame_hdr:0000000000015AF3                 db    0
.eh_frame_hdr:0000000000015AF4                 db  90h
.eh_frame_hdr:0000000000015AF5                 db  27h ; '
.eh_frame_hdr:0000000000015AF6                 db 0FFh
.eh_frame_hdr:0000000000015AF7                 db 0FFh
.eh_frame_hdr:0000000000015AF8                 db 0BCh
.eh_frame_hdr:0000000000015AF9                 db  17h
.eh_frame_hdr:0000000000015AFA                 db    0
.eh_frame_hdr:0000000000015AFB                 db    0
.eh_frame_hdr:0000000000015AFC                 db  40h ; @
.eh_frame_hdr:0000000000015AFD                 db  29h ; )
.eh_frame_hdr:0000000000015AFE                 db 0FFh
.eh_frame_hdr:0000000000015AFF                 db 0FFh
.eh_frame_hdr:0000000000015B00                 db  0Ch
.eh_frame_hdr:0000000000015B01                 db  18h
.eh_frame_hdr:0000000000015B02                 db    0
.eh_frame_hdr:0000000000015B03                 db    0
.eh_frame_hdr:0000000000015B04                 db  20h
.eh_frame_hdr:0000000000015B05                 db  2Ah ; *
.eh_frame_hdr:0000000000015B06                 db 0FFh
.eh_frame_hdr:0000000000015B07                 db 0FFh
.eh_frame_hdr:0000000000015B08                 db  30h ; 0
.eh_frame_hdr:0000000000015B09                 db  18h
.eh_frame_hdr:0000000000015B0A                 db    0
.eh_frame_hdr:0000000000015B0B                 db    0
.eh_frame_hdr:0000000000015B0C                 db    0
.eh_frame_hdr:0000000000015B0D                 db  2Bh ; +
.eh_frame_hdr:0000000000015B0E                 db 0FFh
.eh_frame_hdr:0000000000015B0F                 db 0FFh
.eh_frame_hdr:0000000000015B10                 db  74h ; t
.eh_frame_hdr:0000000000015B11                 db  18h
.eh_frame_hdr:0000000000015B12                 db    0
.eh_frame_hdr:0000000000015B13                 db    0
.eh_frame_hdr:0000000000015B14                 db  40h ; @
.eh_frame_hdr:0000000000015B15                 db  2Dh ; -
.eh_frame_hdr:0000000000015B16                 db 0FFh
.eh_frame_hdr:0000000000015B17                 db 0FFh
.eh_frame_hdr:0000000000015B18                 db 0C4h
.eh_frame_hdr:0000000000015B19                 db  18h
.eh_frame_hdr:0000000000015B1A                 db    0
.eh_frame_hdr:0000000000015B1B                 db    0
.eh_frame_hdr:0000000000015B1C                 db 0E0h
.eh_frame_hdr:0000000000015B1D                 db  2Dh ; -
.eh_frame_hdr:0000000000015B1E                 db 0FFh
.eh_frame_hdr:0000000000015B1F                 db 0FFh
.eh_frame_hdr:0000000000015B20                 db 0F0h
.eh_frame_hdr:0000000000015B21                 db  18h
.eh_frame_hdr:0000000000015B22                 db    0
.eh_frame_hdr:0000000000015B23                 db    0
.eh_frame_hdr:0000000000015B24                 db  70h ; p
.eh_frame_hdr:0000000000015B25                 db  2Eh ; .
.eh_frame_hdr:0000000000015B26                 db 0FFh
.eh_frame_hdr:0000000000015B27                 db 0FFh
.eh_frame_hdr:0000000000015B28                 db  2Ch ; ,
.eh_frame_hdr:0000000000015B29                 db  19h
.eh_frame_hdr:0000000000015B2A                 db    0
.eh_frame_hdr:0000000000015B2B                 db    0
.eh_frame_hdr:0000000000015B2C                 db 0D0h
.eh_frame_hdr:0000000000015B2D                 db  2Fh ; /
.eh_frame_hdr:0000000000015B2E                 db 0FFh
.eh_frame_hdr:0000000000015B2F                 db 0FFh
.eh_frame_hdr:0000000000015B30                 db  90h
.eh_frame_hdr:0000000000015B31                 db  19h
.eh_frame_hdr:0000000000015B32                 db    0
.eh_frame_hdr:0000000000015B33                 db    0
.eh_frame_hdr:0000000000015B34                 db  90h
.eh_frame_hdr:0000000000015B35                 db  32h ; 2
.eh_frame_hdr:0000000000015B36                 db 0FFh
.eh_frame_hdr:0000000000015B37                 db 0FFh
.eh_frame_hdr:0000000000015B38                 db 0DCh
.eh_frame_hdr:0000000000015B39                 db  19h
.eh_frame_hdr:0000000000015B3A                 db    0
.eh_frame_hdr:0000000000015B3B                 db    0
.eh_frame_hdr:0000000000015B3C                 db  90h
.eh_frame_hdr:0000000000015B3D                 db  34h ; 4
.eh_frame_hdr:0000000000015B3E                 db 0FFh
.eh_frame_hdr:0000000000015B3F                 db 0FFh
.eh_frame_hdr:0000000000015B40                 db  28h ; (
.eh_frame_hdr:0000000000015B41                 db  1Ah
.eh_frame_hdr:0000000000015B42                 db    0
.eh_frame_hdr:0000000000015B43                 db    0
.eh_frame_hdr:0000000000015B44                 db  70h ; p
.eh_frame_hdr:0000000000015B45                 db  35h ; 5
.eh_frame_hdr:0000000000015B46                 db 0FFh
.eh_frame_hdr:0000000000015B47                 db 0FFh
.eh_frame_hdr:0000000000015B48                 db  74h ; t
.eh_frame_hdr:0000000000015B49                 db  1Ah
.eh_frame_hdr:0000000000015B4A                 db    0
.eh_frame_hdr:0000000000015B4B                 db    0
.eh_frame_hdr:0000000000015B4C                 db  10h
.eh_frame_hdr:0000000000015B4D                 db  39h ; 9
.eh_frame_hdr:0000000000015B4E                 db 0FFh
.eh_frame_hdr:0000000000015B4F                 db 0FFh
.eh_frame_hdr:0000000000015B50                 db 0C0h
.eh_frame_hdr:0000000000015B51                 db  1Ah
.eh_frame_hdr:0000000000015B52                 db    0
.eh_frame_hdr:0000000000015B53                 db    0
.eh_frame_hdr:0000000000015B54                 db  60h ; `
.eh_frame_hdr:0000000000015B55                 db  3Ah ; :
.eh_frame_hdr:0000000000015B56                 db 0FFh
.eh_frame_hdr:0000000000015B57                 db 0FFh
.eh_frame_hdr:0000000000015B58                 db  0Ch
.eh_frame_hdr:0000000000015B59                 db  1Bh
.eh_frame_hdr:0000000000015B5A                 db    0
.eh_frame_hdr:0000000000015B5B                 db    0
.eh_frame_hdr:0000000000015B5C                 db  50h ; P
.eh_frame_hdr:0000000000015B5D                 db  3Bh ; ;
.eh_frame_hdr:0000000000015B5E                 db 0FFh
.eh_frame_hdr:0000000000015B5F                 db 0FFh
.eh_frame_hdr:0000000000015B60                 db  50h ; P
.eh_frame_hdr:0000000000015B61                 db  1Bh
.eh_frame_hdr:0000000000015B62                 db    0
.eh_frame_hdr:0000000000015B63                 db    0
.eh_frame_hdr:0000000000015B64                 db  60h ; `
.eh_frame_hdr:0000000000015B65                 db  3Ch ; <
.eh_frame_hdr:0000000000015B66                 db 0FFh
.eh_frame_hdr:0000000000015B67                 db 0FFh
.eh_frame_hdr:0000000000015B68                 db  78h ; x
.eh_frame_hdr:0000000000015B69                 db  1Bh
.eh_frame_hdr:0000000000015B6A                 db    0
.eh_frame_hdr:0000000000015B6B                 db    0
.eh_frame_hdr:0000000000015B6C                 db  30h ; 0
.eh_frame_hdr:0000000000015B6D                 db  3Dh ; =
.eh_frame_hdr:0000000000015B6E                 db 0FFh
.eh_frame_hdr:0000000000015B6F                 db 0FFh
.eh_frame_hdr:0000000000015B70                 db 0B0h
.eh_frame_hdr:0000000000015B71                 db  1Bh
.eh_frame_hdr:0000000000015B72                 db    0
.eh_frame_hdr:0000000000015B73                 db    0
.eh_frame_hdr:0000000000015B74                 db 0D0h
.eh_frame_hdr:0000000000015B75                 db  44h ; D
.eh_frame_hdr:0000000000015B76                 db 0FFh
.eh_frame_hdr:0000000000015B77                 db 0FFh
.eh_frame_hdr:0000000000015B78                 db    0
.eh_frame_hdr:0000000000015B79                 db  1Ch
.eh_frame_hdr:0000000000015B7A                 db    0
.eh_frame_hdr:0000000000015B7B                 db    0
.eh_frame_hdr:0000000000015B7C                 db  10h
.eh_frame_hdr:0000000000015B7D                 db  47h ; G
.eh_frame_hdr:0000000000015B7E                 db 0FFh
.eh_frame_hdr:0000000000015B7F                 db 0FFh
.eh_frame_hdr:0000000000015B80                 db  50h ; P
.eh_frame_hdr:0000000000015B81                 db  1Ch
.eh_frame_hdr:0000000000015B82                 db    0
.eh_frame_hdr:0000000000015B83                 db    0
.eh_frame_hdr:0000000000015B84                 db 0B0h
.eh_frame_hdr:0000000000015B85                 db  52h ; R
.eh_frame_hdr:0000000000015B86                 db 0FFh
.eh_frame_hdr:0000000000015B87                 db 0FFh
.eh_frame_hdr:0000000000015B88                 db 0A0h
.eh_frame_hdr:0000000000015B89                 db  1Ch
.eh_frame_hdr:0000000000015B8A                 db    0
.eh_frame_hdr:0000000000015B8B                 db    0
.eh_frame_hdr:0000000000015B8C                 db  40h ; @
.eh_frame_hdr:0000000000015B8D                 db  53h ; S
.eh_frame_hdr:0000000000015B8E                 db 0FFh
.eh_frame_hdr:0000000000015B8F                 db 0FFh
.eh_frame_hdr:0000000000015B90                 db 0D4h
.eh_frame_hdr:0000000000015B91                 db  1Ch
.eh_frame_hdr:0000000000015B92                 db    0
.eh_frame_hdr:0000000000015B93                 db    0
.eh_frame_hdr:0000000000015B94                 db  90h
.eh_frame_hdr:0000000000015B95                 db  53h ; S
.eh_frame_hdr:0000000000015B96                 db 0FFh
.eh_frame_hdr:0000000000015B97                 db 0FFh
.eh_frame_hdr:0000000000015B98                 db    0
.eh_frame_hdr:0000000000015B99                 db  1Dh
.eh_frame_hdr:0000000000015B9A                 db    0
.eh_frame_hdr:0000000000015B9B                 db    0
.eh_frame_hdr:0000000000015B9C                 db  30h ; 0
.eh_frame_hdr:0000000000015B9D                 db  54h ; T
.eh_frame_hdr:0000000000015B9E                 db 0FFh
.eh_frame_hdr:0000000000015B9F                 db 0FFh
.eh_frame_hdr:0000000000015BA0                 db  30h ; 0
.eh_frame_hdr:0000000000015BA1                 db  1Dh
.eh_frame_hdr:0000000000015BA2                 db    0
.eh_frame_hdr:0000000000015BA3                 db    0
.eh_frame_hdr:0000000000015BA4                 db  80h
.eh_frame_hdr:0000000000015BA5                 db  54h ; T
.eh_frame_hdr:0000000000015BA6                 db 0FFh
.eh_frame_hdr:0000000000015BA7                 db 0FFh
.eh_frame_hdr:0000000000015BA8                 db  64h ; d
.eh_frame_hdr:0000000000015BA9                 db  1Dh
.eh_frame_hdr:0000000000015BAA                 db    0
.eh_frame_hdr:0000000000015BAB                 db    0
.eh_frame_hdr:0000000000015BAC                 db  90h
.eh_frame_hdr:0000000000015BAD                 db  5Ch ; \
.eh_frame_hdr:0000000000015BAE                 db 0FFh
.eh_frame_hdr:0000000000015BAF                 db 0FFh
.eh_frame_hdr:0000000000015BB0                 db 0A8h
.eh_frame_hdr:0000000000015BB1                 db  1Dh
.eh_frame_hdr:0000000000015BB2                 db    0
.eh_frame_hdr:0000000000015BB3                 db    0
.eh_frame_hdr:0000000000015BB4                 db    0
.eh_frame_hdr:0000000000015BB5                 db  5Fh ; _
.eh_frame_hdr:0000000000015BB6                 db 0FFh
.eh_frame_hdr:0000000000015BB7                 db 0FFh
.eh_frame_hdr:0000000000015BB8                 db    8
.eh_frame_hdr:0000000000015BB9                 db  1Eh
.eh_frame_hdr:0000000000015BBA                 db    0
.eh_frame_hdr:0000000000015BBB                 db    0
.eh_frame_hdr:0000000000015BBC                 db  30h ; 0
.eh_frame_hdr:0000000000015BBD                 db  64h ; d
.eh_frame_hdr:0000000000015BBE                 db 0FFh
.eh_frame_hdr:0000000000015BBF                 db 0FFh
.eh_frame_hdr:0000000000015BC0                 db  58h ; X
.eh_frame_hdr:0000000000015BC1                 db  1Eh
.eh_frame_hdr:0000000000015BC2                 db    0
.eh_frame_hdr:0000000000015BC3                 db    0
.eh_frame_hdr:0000000000015BC4                 db  90h
.eh_frame_hdr:0000000000015BC5                 db  66h ; f
.eh_frame_hdr:0000000000015BC6                 db 0FFh
.eh_frame_hdr:0000000000015BC7                 db 0FFh
.eh_frame_hdr:0000000000015BC8                 db  94h
.eh_frame_hdr:0000000000015BC9                 db  1Eh
.eh_frame_hdr:0000000000015BCA                 db    0
.eh_frame_hdr:0000000000015BCB                 db    0
.eh_frame_hdr:0000000000015BCC                 db 0F0h
.eh_frame_hdr:0000000000015BCD                 db  6Dh ; m
.eh_frame_hdr:0000000000015BCE                 db 0FFh
.eh_frame_hdr:0000000000015BCF                 db 0FFh
.eh_frame_hdr:0000000000015BD0                 db 0E4h
.eh_frame_hdr:0000000000015BD1                 db  1Eh
.eh_frame_hdr:0000000000015BD2                 db    0
.eh_frame_hdr:0000000000015BD3                 db    0
.eh_frame_hdr:0000000000015BD4                 db 0E0h
.eh_frame_hdr:0000000000015BD5                 db  76h ; v
.eh_frame_hdr:0000000000015BD6                 db 0FFh
.eh_frame_hdr:0000000000015BD7                 db 0FFh
.eh_frame_hdr:0000000000015BD8                 db  14h
.eh_frame_hdr:0000000000015BD9                 db  1Fh
.eh_frame_hdr:0000000000015BDA                 db    0
.eh_frame_hdr:0000000000015BDB                 db    0
.eh_frame_hdr:0000000000015BDC                 db  80h
.eh_frame_hdr:0000000000015BDD                 db  78h ; x
.eh_frame_hdr:0000000000015BDE                 db 0FFh
.eh_frame_hdr:0000000000015BDF                 db 0FFh
.eh_frame_hdr:0000000000015BE0                 db  80h
.eh_frame_hdr:0000000000015BE1                 db  1Fh
.eh_frame_hdr:0000000000015BE2                 db    0
.eh_frame_hdr:0000000000015BE3                 db    0
.eh_frame_hdr:0000000000015BE4                 db  70h ; p
.eh_frame_hdr:0000000000015BE5                 db  81h
.eh_frame_hdr:0000000000015BE6                 db 0FFh
.eh_frame_hdr:0000000000015BE7                 db 0FFh
.eh_frame_hdr:0000000000015BE8                 db 0E0h
.eh_frame_hdr:0000000000015BE9                 db  1Fh
.eh_frame_hdr:0000000000015BEA                 db    0
.eh_frame_hdr:0000000000015BEB                 db    0
.eh_frame_hdr:0000000000015BEC                 db  60h ; `
.eh_frame_hdr:0000000000015BED                 db  83h
.eh_frame_hdr:0000000000015BEE                 db 0FFh
.eh_frame_hdr:0000000000015BEF                 db 0FFh
.eh_frame_hdr:0000000000015BF0                 db  2Ch ; ,
.eh_frame_hdr:0000000000015BF1                 db  20h
.eh_frame_hdr:0000000000015BF2                 db    0
.eh_frame_hdr:0000000000015BF3                 db    0
.eh_frame_hdr:0000000000015BF4                 db 0A0h
.eh_frame_hdr:0000000000015BF5                 db  86h
.eh_frame_hdr:0000000000015BF6                 db 0FFh
.eh_frame_hdr:0000000000015BF7                 db 0FFh
.eh_frame_hdr:0000000000015BF8                 db  8Ch
.eh_frame_hdr:0000000000015BF9                 db  20h
.eh_frame_hdr:0000000000015BFA                 db    0
.eh_frame_hdr:0000000000015BFB                 db    0
.eh_frame_hdr:0000000000015BFC                 db 0D0h
.eh_frame_hdr:0000000000015BFD                 db  9Dh
.eh_frame_hdr:0000000000015BFE                 db 0FFh
.eh_frame_hdr:0000000000015BFF                 db 0FFh
.eh_frame_hdr:0000000000015C00                 db 0DCh
.eh_frame_hdr:0000000000015C01                 db  20h
.eh_frame_hdr:0000000000015C02                 db    0
.eh_frame_hdr:0000000000015C03                 db    0
.eh_frame_hdr:0000000000015C04                 db  20h
.eh_frame_hdr:0000000000015C05                 db 0A6h
.eh_frame_hdr:0000000000015C06                 db 0FFh
.eh_frame_hdr:0000000000015C07                 db 0FFh
.eh_frame_hdr:0000000000015C08                 db  3Ch ; <
.eh_frame_hdr:0000000000015C09                 db  21h ; !
.eh_frame_hdr:0000000000015C0A                 db    0
.eh_frame_hdr:0000000000015C0B                 db    0
.eh_frame_hdr:0000000000015C0C                 db  80h
.eh_frame_hdr:0000000000015C0D                 db 0A8h
.eh_frame_hdr:0000000000015C0E                 db 0FFh
.eh_frame_hdr:0000000000015C0F                 db 0FFh
.eh_frame_hdr:0000000000015C10                 db  80h
.eh_frame_hdr:0000000000015C11                 db  21h ; !
.eh_frame_hdr:0000000000015C12                 db    0
.eh_frame_hdr:0000000000015C13                 db    0
.eh_frame_hdr:0000000000015C14                 db  80h
.eh_frame_hdr:0000000000015C15                 db 0AFh
.eh_frame_hdr:0000000000015C16                 db 0FFh
.eh_frame_hdr:0000000000015C17                 db 0FFh
.eh_frame_hdr:0000000000015C18                 db 0CCh
.eh_frame_hdr:0000000000015C19                 db  21h ; !
.eh_frame_hdr:0000000000015C1A                 db    0
.eh_frame_hdr:0000000000015C1B                 db    0
.eh_frame_hdr:0000000000015C1C                 db  40h ; @
.eh_frame_hdr:0000000000015C1D                 db 0B0h
.eh_frame_hdr:0000000000015C1E                 db 0FFh
.eh_frame_hdr:0000000000015C1F                 db 0FFh
.eh_frame_hdr:0000000000015C20                 db  0Ch
.eh_frame_hdr:0000000000015C21                 db  22h ; "
.eh_frame_hdr:0000000000015C22                 db    0
.eh_frame_hdr:0000000000015C23                 db    0
.eh_frame_hdr:0000000000015C24                 db  20h
.eh_frame_hdr:0000000000015C25                 db 0C5h
.eh_frame_hdr:0000000000015C26                 db 0FFh
.eh_frame_hdr:0000000000015C27                 db 0FFh
.eh_frame_hdr:0000000000015C28                 db  6Ch ; l
.eh_frame_hdr:0000000000015C29                 db  22h ; "
.eh_frame_hdr:0000000000015C2A                 db    0
.eh_frame_hdr:0000000000015C2B                 db    0
.eh_frame_hdr:0000000000015C2C                 db 0B0h
.eh_frame_hdr:0000000000015C2D                 db 0C6h
.eh_frame_hdr:0000000000015C2E                 db 0FFh
.eh_frame_hdr:0000000000015C2F                 db 0FFh
.eh_frame_hdr:0000000000015C30                 db 0B8h
.eh_frame_hdr:0000000000015C31                 db  22h ; "
.eh_frame_hdr:0000000000015C32                 db    0
.eh_frame_hdr:0000000000015C33                 db    0
.eh_frame_hdr:0000000000015C34                 db  30h ; 0
.eh_frame_hdr:0000000000015C35                 db 0C8h
.eh_frame_hdr:0000000000015C36                 db 0FFh
.eh_frame_hdr:0000000000015C37                 db 0FFh
.eh_frame_hdr:0000000000015C38                 db    8
.eh_frame_hdr:0000000000015C39                 db  23h ; #
.eh_frame_hdr:0000000000015C3A                 db    0
.eh_frame_hdr:0000000000015C3B                 db    0
.eh_frame_hdr:0000000000015C3C                 db  30h ; 0
.eh_frame_hdr:0000000000015C3D                 db 0D9h
.eh_frame_hdr:0000000000015C3E                 db 0FFh
.eh_frame_hdr:0000000000015C3F                 db 0FFh
.eh_frame_hdr:0000000000015C40                 db  58h ; X
.eh_frame_hdr:0000000000015C41                 db  23h ; #
.eh_frame_hdr:0000000000015C42                 db    0
.eh_frame_hdr:0000000000015C43                 db    0
.eh_frame_hdr:0000000000015C44                 db 0A0h
.eh_frame_hdr:0000000000015C45                 db 0D9h
.eh_frame_hdr:0000000000015C46                 db 0FFh
.eh_frame_hdr:0000000000015C47                 db 0FFh
.eh_frame_hdr:0000000000015C48                 db  78h ; x
.eh_frame_hdr:0000000000015C49                 db  23h ; #
.eh_frame_hdr:0000000000015C4A                 db    0
.eh_frame_hdr:0000000000015C4B                 db    0
.eh_frame_hdr:0000000000015C4C                 db 0B0h
.eh_frame_hdr:0000000000015C4D                 db 0D9h
.eh_frame_hdr:0000000000015C4E                 db 0FFh
.eh_frame_hdr:0000000000015C4F                 db 0FFh
.eh_frame_hdr:0000000000015C50                 db  8Ch
.eh_frame_hdr:0000000000015C51                 db  23h ; #
.eh_frame_hdr:0000000000015C52                 db    0
.eh_frame_hdr:0000000000015C53                 db    0
.eh_frame_hdr:0000000000015C54                 db  80h
.eh_frame_hdr:0000000000015C55                 db 0DAh
.eh_frame_hdr:0000000000015C56                 db 0FFh
.eh_frame_hdr:0000000000015C57                 db 0FFh
.eh_frame_hdr:0000000000015C58                 db 0B8h
.eh_frame_hdr:0000000000015C59                 db  23h ; #
.eh_frame_hdr:0000000000015C5A                 db    0
.eh_frame_hdr:0000000000015C5B                 db    0
.eh_frame_hdr:0000000000015C5C                 db    0
.eh_frame_hdr:0000000000015C5D                 db 0DFh
.eh_frame_hdr:0000000000015C5E                 db 0FFh
.eh_frame_hdr:0000000000015C5F                 db 0FFh
.eh_frame_hdr:0000000000015C60                 db  18h
.eh_frame_hdr:0000000000015C61                 db  24h ; $
.eh_frame_hdr:0000000000015C62                 db    0
.eh_frame_hdr:0000000000015C63                 db    0
.eh_frame_hdr:0000000000015C64                 db  20h
.eh_frame_hdr:0000000000015C65                 db 0E0h
.eh_frame_hdr:0000000000015C66                 db 0FFh
.eh_frame_hdr:0000000000015C67                 db 0FFh
.eh_frame_hdr:0000000000015C68                 db  70h ; p
.eh_frame_hdr:0000000000015C69                 db  24h ; $
.eh_frame_hdr:0000000000015C6A                 db    0
.eh_frame_hdr:0000000000015C6B                 db    0
.eh_frame_hdr:0000000000015C6C                 db  30h ; 0
.eh_frame_hdr:0000000000015C6D                 db 0E1h
.eh_frame_hdr:0000000000015C6E                 db 0FFh
.eh_frame_hdr:0000000000015C6F                 db 0FFh
.eh_frame_hdr:0000000000015C70                 db 0BCh
.eh_frame_hdr:0000000000015C71                 db  24h ; $
.eh_frame_hdr:0000000000015C72                 db    0
.eh_frame_hdr:0000000000015C73                 db    0
.eh_frame_hdr:0000000000015C74                 db 0C0h
.eh_frame_hdr:0000000000015C75                 db 0E1h
.eh_frame_hdr:0000000000015C76                 db 0FFh
.eh_frame_hdr:0000000000015C77                 db 0FFh
.eh_frame_hdr:0000000000015C78                 db 0F8h
.eh_frame_hdr:0000000000015C79                 db  24h ; $
.eh_frame_hdr:0000000000015C7A                 db    0
.eh_frame_hdr:0000000000015C7B                 db    0
.eh_frame_hdr:0000000000015C7C                 db  10h
.eh_frame_hdr:0000000000015C7D                 db 0E2h
.eh_frame_hdr:0000000000015C7E                 db 0FFh
.eh_frame_hdr:0000000000015C7F                 db 0FFh
.eh_frame_hdr:0000000000015C80                 db  14h
.eh_frame_hdr:0000000000015C81                 db  25h ; %
.eh_frame_hdr:0000000000015C82                 db    0
.eh_frame_hdr:0000000000015C83                 db    0
.eh_frame_hdr:0000000000015C84                 db 0B0h
.eh_frame_hdr:0000000000015C85                 db 0E2h
.eh_frame_hdr:0000000000015C86                 db 0FFh
.eh_frame_hdr:0000000000015C87                 db 0FFh
.eh_frame_hdr:0000000000015C88                 db  70h ; p
.eh_frame_hdr:0000000000015C89                 db  25h ; %
.eh_frame_hdr:0000000000015C8A                 db    0
.eh_frame_hdr:0000000000015C8B                 db    0
.eh_frame_hdr:0000000000015C8C                 db 0D0h
.eh_frame_hdr:0000000000015C8D                 db 0E2h
.eh_frame_hdr:0000000000015C8E                 db 0FFh
.eh_frame_hdr:0000000000015C8F                 db 0FFh
.eh_frame_hdr:0000000000015C90                 db  90h
.eh_frame_hdr:0000000000015C91                 db  25h ; %
.eh_frame_hdr:0000000000015C92                 db    0
.eh_frame_hdr:0000000000015C93                 db    0
.eh_frame_hdr:0000000000015C94                 db 0F0h
.eh_frame_hdr:0000000000015C95                 db 0E2h
.eh_frame_hdr:0000000000015C96                 db 0FFh
.eh_frame_hdr:0000000000015C97                 db 0FFh
.eh_frame_hdr:0000000000015C98                 db 0B0h
.eh_frame_hdr:0000000000015C99                 db  25h ; %
.eh_frame_hdr:0000000000015C9A                 db    0
.eh_frame_hdr:0000000000015C9B                 db    0
.eh_frame_hdr:0000000000015C9C                 db  10h
.eh_frame_hdr:0000000000015C9D                 db 0E3h
.eh_frame_hdr:0000000000015C9E                 db 0FFh
.eh_frame_hdr:0000000000015C9F                 db 0FFh
.eh_frame_hdr:0000000000015CA0                 db 0D4h
.eh_frame_hdr:0000000000015CA1                 db  25h ; %
.eh_frame_hdr:0000000000015CA2                 db    0
.eh_frame_hdr:0000000000015CA3                 db    0
.eh_frame_hdr:0000000000015CA4                 db  30h ; 0
.eh_frame_hdr:0000000000015CA5                 db 0E3h
.eh_frame_hdr:0000000000015CA6                 db 0FFh
.eh_frame_hdr:0000000000015CA7                 db 0FFh
.eh_frame_hdr:0000000000015CA8                 db 0F8h
.eh_frame_hdr:0000000000015CA9                 db  25h ; %
.eh_frame_hdr:0000000000015CAA                 db    0
.eh_frame_hdr:0000000000015CAB                 db    0
.eh_frame_hdr:0000000000015CAC                 db  80h
.eh_frame_hdr:0000000000015CAD                 db 0E3h
.eh_frame_hdr:0000000000015CAE                 db 0FFh
.eh_frame_hdr:0000000000015CAF                 db 0FFh
.eh_frame_hdr:0000000000015CB0                 db  10h
.eh_frame_hdr:0000000000015CB1                 db  26h ; &
.eh_frame_hdr:0000000000015CB2                 db    0
.eh_frame_hdr:0000000000015CB3                 db    0
.eh_frame_hdr:0000000000015CB4                 db    0
.eh_frame_hdr:0000000000015CB5                 db 0E4h
.eh_frame_hdr:0000000000015CB6                 db 0FFh
.eh_frame_hdr:0000000000015CB7                 db 0FFh
.eh_frame_hdr:0000000000015CB8                 db  60h ; `
.eh_frame_hdr:0000000000015CB9                 db  26h ; &
.eh_frame_hdr:0000000000015CBA                 db    0
.eh_frame_hdr:0000000000015CBB                 db    0
.eh_frame_hdr:0000000000015CBC                 db  60h ; `
.eh_frame_hdr:0000000000015CBD                 db 0E4h
.eh_frame_hdr:0000000000015CBE                 db 0FFh
.eh_frame_hdr:0000000000015CBF                 db 0FFh
.eh_frame_hdr:0000000000015CC0                 db  74h ; t
.eh_frame_hdr:0000000000015CC1                 db  26h ; &
.eh_frame_hdr:0000000000015CC2                 db    0
.eh_frame_hdr:0000000000015CC3                 db    0
.eh_frame_hdr:0000000000015CC4                 db 0B0h
.eh_frame_hdr:0000000000015CC5                 db 0E4h
.eh_frame_hdr:0000000000015CC6                 db 0FFh
.eh_frame_hdr:0000000000015CC7                 db 0FFh
.eh_frame_hdr:0000000000015CC8                 db 0A0h
.eh_frame_hdr:0000000000015CC9                 db  26h ; &
.eh_frame_hdr:0000000000015CCA                 db    0
.eh_frame_hdr:0000000000015CCB                 db    0
.eh_frame_hdr:0000000000015CCC                 db 0F0h
.eh_frame_hdr:0000000000015CCD                 db 0E4h
.eh_frame_hdr:0000000000015CCE                 db 0FFh
.eh_frame_hdr:0000000000015CCF                 db 0FFh
.eh_frame_hdr:0000000000015CD0                 db 0D8h
.eh_frame_hdr:0000000000015CD1                 db  26h ; &
.eh_frame_hdr:0000000000015CD2                 db    0
.eh_frame_hdr:0000000000015CD3                 db    0
.eh_frame_hdr:0000000000015CD4                 db  10h
.eh_frame_hdr:0000000000015CD5                 db 0E5h
.eh_frame_hdr:0000000000015CD6                 db 0FFh
.eh_frame_hdr:0000000000015CD7                 db 0FFh
.eh_frame_hdr:0000000000015CD8                 db 0F0h
.eh_frame_hdr:0000000000015CD9                 db  26h ; &
.eh_frame_hdr:0000000000015CDA                 db    0
.eh_frame_hdr:0000000000015CDB                 db    0
.eh_frame_hdr:0000000000015CDC                 db  70h ; p
.eh_frame_hdr:0000000000015CDD                 db 0E5h
.eh_frame_hdr:0000000000015CDE                 db 0FFh
.eh_frame_hdr:0000000000015CDF                 db 0FFh
.eh_frame_hdr:0000000000015CE0                 db  10h
.eh_frame_hdr:0000000000015CE1                 db  27h ; '
.eh_frame_hdr:0000000000015CE2                 db    0
.eh_frame_hdr:0000000000015CE3                 db    0
.eh_frame_hdr:0000000000015CE4                 db 0B0h
.eh_frame_hdr:0000000000015CE5                 db 0E5h
.eh_frame_hdr:0000000000015CE6                 db 0FFh
.eh_frame_hdr:0000000000015CE7                 db 0FFh
.eh_frame_hdr:0000000000015CE8                 db  30h ; 0
.eh_frame_hdr:0000000000015CE9                 db  27h ; '
.eh_frame_hdr:0000000000015CEA                 db    0
.eh_frame_hdr:0000000000015CEB                 db    0
.eh_frame_hdr:0000000000015CEC                 db 0C0h
.eh_frame_hdr:0000000000015CED                 db 0E5h
.eh_frame_hdr:0000000000015CEE                 db 0FFh
.eh_frame_hdr:0000000000015CEF                 db 0FFh
.eh_frame_hdr:0000000000015CF0                 db  48h ; H
.eh_frame_hdr:0000000000015CF1                 db  27h ; '
.eh_frame_hdr:0000000000015CF2                 db    0
.eh_frame_hdr:0000000000015CF3                 db    0
.eh_frame_hdr:0000000000015CF4                 db  40h ; @
.eh_frame_hdr:0000000000015CF5                 db 0E6h
.eh_frame_hdr:0000000000015CF6                 db 0FFh
.eh_frame_hdr:0000000000015CF7                 db 0FFh
.eh_frame_hdr:0000000000015CF8                 db  80h
.eh_frame_hdr:0000000000015CF9                 db  27h ; '
.eh_frame_hdr:0000000000015CFA                 db    0
.eh_frame_hdr:0000000000015CFB                 db    0
.eh_frame_hdr:0000000000015CFC                 db 0C0h
.eh_frame_hdr:0000000000015CFD                 db 0E8h
.eh_frame_hdr:0000000000015CFE                 db 0FFh
.eh_frame_hdr:0000000000015CFF                 db 0FFh
.eh_frame_hdr:0000000000015D00                 db 0B8h
.eh_frame_hdr:0000000000015D01                 db  27h ; '
.eh_frame_hdr:0000000000015D02                 db    0
.eh_frame_hdr:0000000000015D03                 db    0
.eh_frame_hdr:0000000000015D04                 db    0
.eh_frame_hdr:0000000000015D05                 db 0E9h
.eh_frame_hdr:0000000000015D06                 db 0FFh
.eh_frame_hdr:0000000000015D07                 db 0FFh
.eh_frame_hdr:0000000000015D08                 db 0D8h
.eh_frame_hdr:0000000000015D09                 db  27h ; '
.eh_frame_hdr:0000000000015D0A                 db    0
.eh_frame_hdr:0000000000015D0B                 db    0
.eh_frame_hdr:0000000000015D0C                 db  70h ; p
.eh_frame_hdr:0000000000015D0D                 db 0E9h
.eh_frame_hdr:0000000000015D0E                 db 0FFh
.eh_frame_hdr:0000000000015D0F                 db 0FFh
.eh_frame_hdr:0000000000015D10                 db  20h
.eh_frame_hdr:0000000000015D11                 db  28h ; (
.eh_frame_hdr:0000000000015D12                 db    0
.eh_frame_hdr:0000000000015D13                 db    0
.eh_frame_hdr:0000000000015D14                 db  80h
.eh_frame_hdr:0000000000015D15                 db 0E9h
.eh_frame_hdr:0000000000015D16                 db 0FFh
.eh_frame_hdr:0000000000015D17                 db 0FFh
.eh_frame_hdr:0000000000015D18                 db  38h ; 8
.eh_frame_hdr:0000000000015D19                 db  28h ; (
.eh_frame_hdr:0000000000015D1A                 db    0
.eh_frame_hdr:0000000000015D1B                 db    0
.eh_frame_hdr:0000000000015D1B _eh_frame_hdr   ends
.eh_frame_hdr:0000000000015D1B
LOAD:0000000000015D1C ; ===========================================================================
LOAD:0000000000015D1C
LOAD:0000000000015D1C ; Segment type: Pure code
LOAD:0000000000015D1C ; Segment permissions: Read/Execute
LOAD:0000000000015D1C LOAD            segment byte public 'CODE' use64
LOAD:0000000000015D1C                 assume cs:LOAD
LOAD:0000000000015D1C                 ;org 15D1Ch
LOAD:0000000000015D1C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000015D1C                 align 20h
LOAD:0000000000015D1C LOAD            ends
LOAD:0000000000015D1C
.eh_frame:0000000000015D20 ; ===========================================================================
.eh_frame:0000000000015D20
.eh_frame:0000000000015D20 ; Segment type: Pure data
.eh_frame:0000000000015D20 ; Segment permissions: Read
.eh_frame:0000000000015D20 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000015D20                 assume cs:_eh_frame
.eh_frame:0000000000015D20                 ;org 15D20h
.eh_frame:0000000000015D20                 db  14h
.eh_frame:0000000000015D21                 db    0
.eh_frame:0000000000015D22                 db    0
.eh_frame:0000000000015D23                 db    0
.eh_frame:0000000000015D24                 db    0
.eh_frame:0000000000015D25                 db    0
.eh_frame:0000000000015D26                 db    0
.eh_frame:0000000000015D27                 db    0
.eh_frame:0000000000015D28                 db    1
.eh_frame:0000000000015D29                 db  7Ah ; z
.eh_frame:0000000000015D2A                 db  52h ; R
.eh_frame:0000000000015D2B                 db    0
.eh_frame:0000000000015D2C                 db    1
.eh_frame:0000000000015D2D                 db  78h ; x
.eh_frame:0000000000015D2E                 db  10h
.eh_frame:0000000000015D2F                 db    1
.eh_frame:0000000000015D30                 db  1Bh
.eh_frame:0000000000015D31                 db  0Ch
.eh_frame:0000000000015D32                 db    7
.eh_frame:0000000000015D33                 db    8
.eh_frame:0000000000015D34                 db  90h
.eh_frame:0000000000015D35                 db    1
.eh_frame:0000000000015D36                 db    7
.eh_frame:0000000000015D37                 db  10h
.eh_frame:0000000000015D38                 db  14h
.eh_frame:0000000000015D39                 db    0
.eh_frame:0000000000015D3A                 db    0
.eh_frame:0000000000015D3B                 db    0
.eh_frame:0000000000015D3C                 db  1Ch
.eh_frame:0000000000015D3D                 db    0
.eh_frame:0000000000015D3E                 db    0
.eh_frame:0000000000015D3F                 db    0
.eh_frame:0000000000015D40                 db 0E0h
.eh_frame:0000000000015D41                 db 0C6h
.eh_frame:0000000000015D42                 db 0FEh
.eh_frame:0000000000015D43                 db 0FFh
.eh_frame:0000000000015D44                 db  2Bh ; +
.eh_frame:0000000000015D45                 db    0
.eh_frame:0000000000015D46                 db    0
.eh_frame:0000000000015D47                 db    0
.eh_frame:0000000000015D48                 db    0
.eh_frame:0000000000015D49                 db    0
.eh_frame:0000000000015D4A                 db    0
.eh_frame:0000000000015D4B                 db    0
.eh_frame:0000000000015D4C                 db    0
.eh_frame:0000000000015D4D                 db    0
.eh_frame:0000000000015D4E                 db    0
.eh_frame:0000000000015D4F                 db    0
.eh_frame:0000000000015D50                 db  14h
.eh_frame:0000000000015D51                 db    0
.eh_frame:0000000000015D52                 db    0
.eh_frame:0000000000015D53                 db    0
.eh_frame:0000000000015D54                 db    0
.eh_frame:0000000000015D55                 db    0
.eh_frame:0000000000015D56                 db    0
.eh_frame:0000000000015D57                 db    0
.eh_frame:0000000000015D58                 db    1
.eh_frame:0000000000015D59                 db  7Ah ; z
.eh_frame:0000000000015D5A                 db  52h ; R
.eh_frame:0000000000015D5B                 db    0
.eh_frame:0000000000015D5C                 db    1
.eh_frame:0000000000015D5D                 db  78h ; x
.eh_frame:0000000000015D5E                 db  10h
.eh_frame:0000000000015D5F                 db    1
.eh_frame:0000000000015D60                 db  1Bh
.eh_frame:0000000000015D61                 db  0Ch
.eh_frame:0000000000015D62                 db    7
.eh_frame:0000000000015D63                 db    8
.eh_frame:0000000000015D64                 db  90h
.eh_frame:0000000000015D65                 db    1
.eh_frame:0000000000015D66                 db    0
.eh_frame:0000000000015D67                 db    0
.eh_frame:0000000000015D68                 db  24h ; $
.eh_frame:0000000000015D69                 db    0
.eh_frame:0000000000015D6A                 db    0
.eh_frame:0000000000015D6B                 db    0
.eh_frame:0000000000015D6C                 db  1Ch
.eh_frame:0000000000015D6D                 db    0
.eh_frame:0000000000015D6E                 db    0
.eh_frame:0000000000015D6F                 db    0
.eh_frame:0000000000015D70                 db 0E0h
.eh_frame:0000000000015D71                 db 0BAh
.eh_frame:0000000000015D72                 db 0FEh
.eh_frame:0000000000015D73                 db 0FFh
.eh_frame:0000000000015D74                 db  30h ; 0
.eh_frame:0000000000015D75                 db    4
.eh_frame:0000000000015D76                 db    0
.eh_frame:0000000000015D77                 db    0
.eh_frame:0000000000015D78                 db    0
.eh_frame:0000000000015D79                 db  0Eh
.eh_frame:0000000000015D7A                 db  10h
.eh_frame:0000000000015D7B                 db  46h ; F
.eh_frame:0000000000015D7C                 db  0Eh
.eh_frame:0000000000015D7D                 db  18h
.eh_frame:0000000000015D7E                 db  4Ah ; J
.eh_frame:0000000000015D7F                 db  0Fh
.eh_frame:0000000000015D80                 db  0Bh
.eh_frame:0000000000015D81                 db  77h ; w
.eh_frame:0000000000015D82                 db    8
.eh_frame:0000000000015D83                 db  80h
.eh_frame:0000000000015D84                 db    0
.eh_frame:0000000000015D85                 db  3Fh ; ?
.eh_frame:0000000000015D86                 db  1Ah
.eh_frame:0000000000015D87                 db  3Bh ; ;
.eh_frame:0000000000015D88                 db  2Ah ; *
.eh_frame:0000000000015D89                 db  33h ; 3
.eh_frame:0000000000015D8A                 db  24h ; $
.eh_frame:0000000000015D8B                 db  22h ; "
.eh_frame:0000000000015D8C                 db    0
.eh_frame:0000000000015D8D                 db    0
.eh_frame:0000000000015D8E                 db    0
.eh_frame:0000000000015D8F                 db    0
.eh_frame:0000000000015D90                 db  14h
.eh_frame:0000000000015D91                 db    0
.eh_frame:0000000000015D92                 db    0
.eh_frame:0000000000015D93                 db    0
.eh_frame:0000000000015D94                 db  44h ; D
.eh_frame:0000000000015D95                 db    0
.eh_frame:0000000000015D96                 db    0
.eh_frame:0000000000015D97                 db    0
.eh_frame:0000000000015D98                 db 0E8h
.eh_frame:0000000000015D99                 db 0BEh
.eh_frame:0000000000015D9A                 db 0FEh
.eh_frame:0000000000015D9B                 db 0FFh
.eh_frame:0000000000015D9C                 db    8
.eh_frame:0000000000015D9D                 db    0
.eh_frame:0000000000015D9E                 db    0
.eh_frame:0000000000015D9F                 db    0
.eh_frame:0000000000015DA0                 db    0
.eh_frame:0000000000015DA1                 db    0
.eh_frame:0000000000015DA2                 db    0
.eh_frame:0000000000015DA3                 db    0
.eh_frame:0000000000015DA4                 db    0
.eh_frame:0000000000015DA5                 db    0
.eh_frame:0000000000015DA6                 db    0
.eh_frame:0000000000015DA7                 db    0
.eh_frame:0000000000015DA8                 db  60h ; `
.eh_frame:0000000000015DA9                 db    0
.eh_frame:0000000000015DAA                 db    0
.eh_frame:0000000000015DAB                 db    0
.eh_frame:0000000000015DAC                 db  5Ch ; \
.eh_frame:0000000000015DAD                 db    0
.eh_frame:0000000000015DAE                 db    0
.eh_frame:0000000000015DAF                 db    0
.eh_frame:0000000000015DB0                 db  80h
.eh_frame:0000000000015DB1                 db 0C7h
.eh_frame:0000000000015DB2                 db 0FEh
.eh_frame:0000000000015DB3                 db 0FFh
.eh_frame:0000000000015DB4                 db 0FEh
.eh_frame:0000000000015DB5                 db    0
.eh_frame:0000000000015DB6                 db    0
.eh_frame:0000000000015DB7                 db    0
.eh_frame:0000000000015DB8                 db    0
.eh_frame:0000000000015DB9                 db  42h ; B
.eh_frame:0000000000015DBA                 db  0Eh
.eh_frame:0000000000015DBB                 db  10h
.eh_frame:0000000000015DBC                 db  8Fh
.eh_frame:0000000000015DBD                 db    2
.eh_frame:0000000000015DBE                 db  42h ; B
.eh_frame:0000000000015DBF                 db  0Eh
.eh_frame:0000000000015DC0                 db  18h
.eh_frame:0000000000015DC1                 db  8Eh
.eh_frame:0000000000015DC2                 db    3
.eh_frame:0000000000015DC3                 db  42h ; B
.eh_frame:0000000000015DC4                 db  0Eh
.eh_frame:0000000000015DC5                 db  20h
.eh_frame:0000000000015DC6                 db  8Dh
.eh_frame:0000000000015DC7                 db    4
.eh_frame:0000000000015DC8                 db  42h ; B
.eh_frame:0000000000015DC9                 db  0Eh
.eh_frame:0000000000015DCA                 db  28h ; (
.eh_frame:0000000000015DCB                 db  8Ch
.eh_frame:0000000000015DCC                 db    5
.eh_frame:0000000000015DCD                 db  41h ; A
.eh_frame:0000000000015DCE                 db  0Eh
.eh_frame:0000000000015DCF                 db  30h ; 0
.eh_frame:0000000000015DD0                 db  86h
.eh_frame:0000000000015DD1                 db    6
.eh_frame:0000000000015DD2                 db  41h ; A
.eh_frame:0000000000015DD3                 db  0Eh
.eh_frame:0000000000015DD4                 db  38h ; 8
.eh_frame:0000000000015DD5                 db  83h
.eh_frame:0000000000015DD6                 db    7
.eh_frame:0000000000015DD7                 db  44h ; D
.eh_frame:0000000000015DD8                 db  0Eh
.eh_frame:0000000000015DD9                 db  40h ; @
.eh_frame:0000000000015DDA                 db    2
.eh_frame:0000000000015DDB                 db 0A5h
.eh_frame:0000000000015DDC                 db  0Ah
.eh_frame:0000000000015DDD                 db  0Eh
.eh_frame:0000000000015DDE                 db  38h ; 8
.eh_frame:0000000000015DDF                 db  41h ; A
.eh_frame:0000000000015DE0                 db  0Eh
.eh_frame:0000000000015DE1                 db  30h ; 0
.eh_frame:0000000000015DE2                 db  41h ; A
.eh_frame:0000000000015DE3                 db  0Eh
.eh_frame:0000000000015DE4                 db  28h ; (
.eh_frame:0000000000015DE5                 db  42h ; B
.eh_frame:0000000000015DE6                 db  0Eh
.eh_frame:0000000000015DE7                 db  20h
.eh_frame:0000000000015DE8                 db  42h ; B
.eh_frame:0000000000015DE9                 db  0Eh
.eh_frame:0000000000015DEA                 db  18h
.eh_frame:0000000000015DEB                 db  42h ; B
.eh_frame:0000000000015DEC                 db  0Eh
.eh_frame:0000000000015DED                 db  10h
.eh_frame:0000000000015DEE                 db  42h ; B
.eh_frame:0000000000015DEF                 db  0Eh
.eh_frame:0000000000015DF0                 db    8
.eh_frame:0000000000015DF1                 db  43h ; C
.eh_frame:0000000000015DF2                 db  0Bh
.eh_frame:0000000000015DF3                 db  6Ah ; j
.eh_frame:0000000000015DF4                 db  0Ah
.eh_frame:0000000000015DF5                 db  0Eh
.eh_frame:0000000000015DF6                 db  38h ; 8
.eh_frame:0000000000015DF7                 db  41h ; A
.eh_frame:0000000000015DF8                 db  0Eh
.eh_frame:0000000000015DF9                 db  30h ; 0
.eh_frame:0000000000015DFA                 db  41h ; A
.eh_frame:0000000000015DFB                 db  0Eh
.eh_frame:0000000000015DFC                 db  28h ; (
.eh_frame:0000000000015DFD                 db  42h ; B
.eh_frame:0000000000015DFE                 db  0Eh
.eh_frame:0000000000015DFF                 db  20h
.eh_frame:0000000000015E00                 db  42h ; B
.eh_frame:0000000000015E01                 db  0Eh
.eh_frame:0000000000015E02                 db  18h
.eh_frame:0000000000015E03                 db  42h ; B
.eh_frame:0000000000015E04                 db  0Eh
.eh_frame:0000000000015E05                 db  10h
.eh_frame:0000000000015E06                 db  42h ; B
.eh_frame:0000000000015E07                 db  0Eh
.eh_frame:0000000000015E08                 db    8
.eh_frame:0000000000015E09                 db  44h ; D
.eh_frame:0000000000015E0A                 db  0Bh
.eh_frame:0000000000015E0B                 db    0
.eh_frame:0000000000015E0C                 db  60h ; `
.eh_frame:0000000000015E0D                 db    0
.eh_frame:0000000000015E0E                 db    0
.eh_frame:0000000000015E0F                 db    0
.eh_frame:0000000000015E10                 db 0C0h
.eh_frame:0000000000015E11                 db    0
.eh_frame:0000000000015E12                 db    0
.eh_frame:0000000000015E13                 db    0
.eh_frame:0000000000015E14                 db  1Ch
.eh_frame:0000000000015E15                 db 0C8h
.eh_frame:0000000000015E16                 db 0FEh
.eh_frame:0000000000015E17                 db 0FFh
.eh_frame:0000000000015E18                 db 0A0h
.eh_frame:0000000000015E19                 db    5
.eh_frame:0000000000015E1A                 db    0
.eh_frame:0000000000015E1B                 db    0
.eh_frame:0000000000015E1C                 db    0
.eh_frame:0000000000015E1D                 db  42h ; B
.eh_frame:0000000000015E1E                 db  0Eh
.eh_frame:0000000000015E1F                 db  10h
.eh_frame:0000000000015E20                 db  8Fh
.eh_frame:0000000000015E21                 db    2
.eh_frame:0000000000015E22                 db  42h ; B
.eh_frame:0000000000015E23                 db  0Eh
.eh_frame:0000000000015E24                 db  18h
.eh_frame:0000000000015E25                 db  8Eh
.eh_frame:0000000000015E26                 db    3
.eh_frame:0000000000015E27                 db  45h ; E
.eh_frame:0000000000015E28                 db  0Eh
.eh_frame:0000000000015E29                 db  20h
.eh_frame:0000000000015E2A                 db  8Dh
.eh_frame:0000000000015E2B                 db    4
.eh_frame:0000000000015E2C                 db  42h ; B
.eh_frame:0000000000015E2D                 db  0Eh
.eh_frame:0000000000015E2E                 db  28h ; (
.eh_frame:0000000000015E2F                 db  8Ch
.eh_frame:0000000000015E30                 db    5
.eh_frame:0000000000015E31                 db  41h ; A
.eh_frame:0000000000015E32                 db  0Eh
.eh_frame:0000000000015E33                 db  30h ; 0
.eh_frame:0000000000015E34                 db  86h
.eh_frame:0000000000015E35                 db    6
.eh_frame:0000000000015E36                 db  41h ; A
.eh_frame:0000000000015E37                 db  0Eh
.eh_frame:0000000000015E38                 db  38h ; 8
.eh_frame:0000000000015E39                 db  83h
.eh_frame:0000000000015E3A                 db    7
.eh_frame:0000000000015E3B                 db  44h ; D
.eh_frame:0000000000015E3C                 db  0Eh
.eh_frame:0000000000015E3D                 db  70h ; p
.eh_frame:0000000000015E3E                 db    3
.eh_frame:0000000000015E3F                 db  90h
.eh_frame:0000000000015E40                 db    4
.eh_frame:0000000000015E41                 db  0Ah
.eh_frame:0000000000015E42                 db  0Eh
.eh_frame:0000000000015E43                 db  38h ; 8
.eh_frame:0000000000015E44                 db  43h ; C
.eh_frame:0000000000015E45                 db  0Eh
.eh_frame:0000000000015E46                 db  30h ; 0
.eh_frame:0000000000015E47                 db  41h ; A
.eh_frame:0000000000015E48                 db  0Eh
.eh_frame:0000000000015E49                 db  28h ; (
.eh_frame:0000000000015E4A                 db  42h ; B
.eh_frame:0000000000015E4B                 db  0Eh
.eh_frame:0000000000015E4C                 db  20h
.eh_frame:0000000000015E4D                 db  42h ; B
.eh_frame:0000000000015E4E                 db  0Eh
.eh_frame:0000000000015E4F                 db  18h
.eh_frame:0000000000015E50                 db  42h ; B
.eh_frame:0000000000015E51                 db  0Eh
.eh_frame:0000000000015E52                 db  10h
.eh_frame:0000000000015E53                 db  42h ; B
.eh_frame:0000000000015E54                 db  0Eh
.eh_frame:0000000000015E55                 db    8
.eh_frame:0000000000015E56                 db  41h ; A
.eh_frame:0000000000015E57                 db  0Bh
.eh_frame:0000000000015E58                 db  6Bh ; k
.eh_frame:0000000000015E59                 db  0Ah
.eh_frame:0000000000015E5A                 db  0Eh
.eh_frame:0000000000015E5B                 db  38h ; 8
.eh_frame:0000000000015E5C                 db  46h ; F
.eh_frame:0000000000015E5D                 db  0Eh
.eh_frame:0000000000015E5E                 db  30h ; 0
.eh_frame:0000000000015E5F                 db  41h ; A
.eh_frame:0000000000015E60                 db  0Eh
.eh_frame:0000000000015E61                 db  28h ; (
.eh_frame:0000000000015E62                 db  42h ; B
.eh_frame:0000000000015E63                 db  0Eh
.eh_frame:0000000000015E64                 db  20h
.eh_frame:0000000000015E65                 db  42h ; B
.eh_frame:0000000000015E66                 db  0Eh
.eh_frame:0000000000015E67                 db  18h
.eh_frame:0000000000015E68                 db  42h ; B
.eh_frame:0000000000015E69                 db  0Eh
.eh_frame:0000000000015E6A                 db  10h
.eh_frame:0000000000015E6B                 db  42h ; B
.eh_frame:0000000000015E6C                 db  0Eh
.eh_frame:0000000000015E6D                 db    8
.eh_frame:0000000000015E6E                 db  41h ; A
.eh_frame:0000000000015E6F                 db  0Bh
.eh_frame:0000000000015E70                 db  28h ; (
.eh_frame:0000000000015E71                 db    0
.eh_frame:0000000000015E72                 db    0
.eh_frame:0000000000015E73                 db    0
.eh_frame:0000000000015E74                 db  24h ; $
.eh_frame:0000000000015E75                 db    1
.eh_frame:0000000000015E76                 db    0
.eh_frame:0000000000015E77                 db    0
.eh_frame:0000000000015E78                 db  58h ; X
.eh_frame:0000000000015E79                 db 0CDh
.eh_frame:0000000000015E7A                 db 0FEh
.eh_frame:0000000000015E7B                 db 0FFh
.eh_frame:0000000000015E7C                 db 0B2h
.eh_frame:0000000000015E7D                 db    3
.eh_frame:0000000000015E7E                 db    0
.eh_frame:0000000000015E7F                 db    0
.eh_frame:0000000000015E80                 db    0
.eh_frame:0000000000015E81                 db  42h ; B
.eh_frame:0000000000015E82                 db  0Eh
.eh_frame:0000000000015E83                 db  10h
.eh_frame:0000000000015E84                 db  8Dh
.eh_frame:0000000000015E85                 db    2
.eh_frame:0000000000015E86                 db  42h ; B
.eh_frame:0000000000015E87                 db  0Eh
.eh_frame:0000000000015E88                 db  18h
.eh_frame:0000000000015E89                 db  8Ch
.eh_frame:0000000000015E8A                 db    3
.eh_frame:0000000000015E8B                 db  46h ; F
.eh_frame:0000000000015E8C                 db  0Eh
.eh_frame:0000000000015E8D                 db  20h
.eh_frame:0000000000015E8E                 db  86h
.eh_frame:0000000000015E8F                 db    4
.eh_frame:0000000000015E90                 db  41h ; A
.eh_frame:0000000000015E91                 db  0Eh
.eh_frame:0000000000015E92                 db  28h ; (
.eh_frame:0000000000015E93                 db  83h
.eh_frame:0000000000015E94                 db    5
.eh_frame:0000000000015E95                 db  49h ; I
.eh_frame:0000000000015E96                 db  0Eh
.eh_frame:0000000000015E97                 db 0B0h
.eh_frame:0000000000015E98                 db    1
.eh_frame:0000000000015E99                 db    0
.eh_frame:0000000000015E9A                 db    0
.eh_frame:0000000000015E9B                 db    0
.eh_frame:0000000000015E9C                 db  58h ; X
.eh_frame:0000000000015E9D                 db    0
.eh_frame:0000000000015E9E                 db    0
.eh_frame:0000000000015E9F                 db    0
.eh_frame:0000000000015EA0                 db  50h ; P
.eh_frame:0000000000015EA1                 db    1
.eh_frame:0000000000015EA2                 db    0
.eh_frame:0000000000015EA3                 db    0
.eh_frame:0000000000015EA4                 db 0ECh
.eh_frame:0000000000015EA5                 db 0BDh
.eh_frame:0000000000015EA6                 db 0FEh
.eh_frame:0000000000015EA7                 db 0FFh
.eh_frame:0000000000015EA8                 db  81h
.eh_frame:0000000000015EA9                 db    7
.eh_frame:0000000000015EAA                 db    0
.eh_frame:0000000000015EAB                 db    0
.eh_frame:0000000000015EAC                 db    0
.eh_frame:0000000000015EAD                 db  42h ; B
.eh_frame:0000000000015EAE                 db  0Eh
.eh_frame:0000000000015EAF                 db  10h
.eh_frame:0000000000015EB0                 db  8Fh
.eh_frame:0000000000015EB1                 db    2
.eh_frame:0000000000015EB2                 db  42h ; B
.eh_frame:0000000000015EB3                 db  0Eh
.eh_frame:0000000000015EB4                 db  18h
.eh_frame:0000000000015EB5                 db  8Eh
.eh_frame:0000000000015EB6                 db    3
.eh_frame:0000000000015EB7                 db  42h ; B
.eh_frame:0000000000015EB8                 db  0Eh
.eh_frame:0000000000015EB9                 db  20h
.eh_frame:0000000000015EBA                 db  8Dh
.eh_frame:0000000000015EBB                 db    4
.eh_frame:0000000000015EBC                 db  42h ; B
.eh_frame:0000000000015EBD                 db  0Eh
.eh_frame:0000000000015EBE                 db  28h ; (
.eh_frame:0000000000015EBF                 db  8Ch
.eh_frame:0000000000015EC0                 db    5
.eh_frame:0000000000015EC1                 db  48h ; H
.eh_frame:0000000000015EC2                 db  0Eh
.eh_frame:0000000000015EC3                 db  30h ; 0
.eh_frame:0000000000015EC4                 db  86h
.eh_frame:0000000000015EC5                 db    6
.eh_frame:0000000000015EC6                 db  41h ; A
.eh_frame:0000000000015EC7                 db  0Eh
.eh_frame:0000000000015EC8                 db  38h ; 8
.eh_frame:0000000000015EC9                 db  83h
.eh_frame:0000000000015ECA                 db    7
.eh_frame:0000000000015ECB                 db  49h ; I
.eh_frame:0000000000015ECC                 db  0Eh
.eh_frame:0000000000015ECD                 db  60h ; `
.eh_frame:0000000000015ECE                 db    2
.eh_frame:0000000000015ECF                 db 0BDh
.eh_frame:0000000000015ED0                 db  0Ah
.eh_frame:0000000000015ED1                 db  0Eh
.eh_frame:0000000000015ED2                 db  68h ; h
.eh_frame:0000000000015ED3                 db  50h ; P
.eh_frame:0000000000015ED4                 db  0Eh
.eh_frame:0000000000015ED5                 db  70h ; p
.eh_frame:0000000000015ED6                 db  71h ; q
.eh_frame:0000000000015ED7                 db  0Bh
.eh_frame:0000000000015ED8                 db    3
.eh_frame:0000000000015ED9                 db  46h ; F
.eh_frame:0000000000015EDA                 db    3
.eh_frame:0000000000015EDB                 db  0Ah
.eh_frame:0000000000015EDC                 db  0Eh
.eh_frame:0000000000015EDD                 db  38h ; 8
.eh_frame:0000000000015EDE                 db  41h ; A
.eh_frame:0000000000015EDF                 db  0Eh
.eh_frame:0000000000015EE0                 db  30h ; 0
.eh_frame:0000000000015EE1                 db  41h ; A
.eh_frame:0000000000015EE2                 db  0Eh
.eh_frame:0000000000015EE3                 db  28h ; (
.eh_frame:0000000000015EE4                 db  42h ; B
.eh_frame:0000000000015EE5                 db  0Eh
.eh_frame:0000000000015EE6                 db  20h
.eh_frame:0000000000015EE7                 db  45h ; E
.eh_frame:0000000000015EE8                 db  0Eh
.eh_frame:0000000000015EE9                 db  18h
.eh_frame:0000000000015EEA                 db  45h ; E
.eh_frame:0000000000015EEB                 db  0Eh
.eh_frame:0000000000015EEC                 db  10h
.eh_frame:0000000000015EED                 db  42h ; B
.eh_frame:0000000000015EEE                 db  0Eh
.eh_frame:0000000000015EEF                 db    8
.eh_frame:0000000000015EF0                 db  41h ; A
.eh_frame:0000000000015EF1                 db  0Bh
.eh_frame:0000000000015EF2                 db    0
.eh_frame:0000000000015EF3                 db    0
.eh_frame:0000000000015EF4                 db    0
.eh_frame:0000000000015EF5                 db    0
.eh_frame:0000000000015EF6                 db    0
.eh_frame:0000000000015EF7                 db    0
.eh_frame:0000000000015EF8                 db  10h
.eh_frame:0000000000015EF9                 db    0
.eh_frame:0000000000015EFA                 db    0
.eh_frame:0000000000015EFB                 db    0
.eh_frame:0000000000015EFC                 db 0ACh
.eh_frame:0000000000015EFD                 db    1
.eh_frame:0000000000015EFE                 db    0
.eh_frame:0000000000015EFF                 db    0
.eh_frame:0000000000015F00                 db  90h
.eh_frame:0000000000015F01                 db 0D0h
.eh_frame:0000000000015F02                 db 0FEh
.eh_frame:0000000000015F03                 db 0FFh
.eh_frame:0000000000015F04                 db    8
.eh_frame:0000000000015F05                 db    0
.eh_frame:0000000000015F06                 db    0
.eh_frame:0000000000015F07                 db    0
.eh_frame:0000000000015F08                 db    0
.eh_frame:0000000000015F09                 db    0
.eh_frame:0000000000015F0A                 db    0
.eh_frame:0000000000015F0B                 db    0
.eh_frame:0000000000015F0C                 db  10h
.eh_frame:0000000000015F0D                 db    0
.eh_frame:0000000000015F0E                 db    0
.eh_frame:0000000000015F0F                 db    0
.eh_frame:0000000000015F10                 db 0C0h
.eh_frame:0000000000015F11                 db    1
.eh_frame:0000000000015F12                 db    0
.eh_frame:0000000000015F13                 db    0
.eh_frame:0000000000015F14                 db  8Ch
.eh_frame:0000000000015F15                 db 0D0h
.eh_frame:0000000000015F16                 db 0FEh
.eh_frame:0000000000015F17                 db 0FFh
.eh_frame:0000000000015F18                 db    8
.eh_frame:0000000000015F19                 db    0
.eh_frame:0000000000015F1A                 db    0
.eh_frame:0000000000015F1B                 db    0
.eh_frame:0000000000015F1C                 db    0
.eh_frame:0000000000015F1D                 db    0
.eh_frame:0000000000015F1E                 db    0
.eh_frame:0000000000015F1F                 db    0
.eh_frame:0000000000015F20                 db  2Ch ; ,
.eh_frame:0000000000015F21                 db    0
.eh_frame:0000000000015F22                 db    0
.eh_frame:0000000000015F23                 db    0
.eh_frame:0000000000015F24                 db 0D4h
.eh_frame:0000000000015F25                 db    1
.eh_frame:0000000000015F26                 db    0
.eh_frame:0000000000015F27                 db    0
.eh_frame:0000000000015F28                 db  88h
.eh_frame:0000000000015F29                 db 0D0h
.eh_frame:0000000000015F2A                 db 0FEh
.eh_frame:0000000000015F2B                 db 0FFh
.eh_frame:0000000000015F2C                 db 0A4h
.eh_frame:0000000000015F2D                 db    0
.eh_frame:0000000000015F2E                 db    0
.eh_frame:0000000000015F2F                 db    0
.eh_frame:0000000000015F30                 db    0
.eh_frame:0000000000015F31                 db  41h ; A
.eh_frame:0000000000015F32                 db  0Eh
.eh_frame:0000000000015F33                 db  10h
.eh_frame:0000000000015F34                 db  86h
.eh_frame:0000000000015F35                 db    2
.eh_frame:0000000000015F36                 db  41h ; A
.eh_frame:0000000000015F37                 db  0Eh
.eh_frame:0000000000015F38                 db  18h
.eh_frame:0000000000015F39                 db  83h
.eh_frame:0000000000015F3A                 db    3
.eh_frame:0000000000015F3B                 db  44h ; D
.eh_frame:0000000000015F3C                 db  0Eh
.eh_frame:0000000000015F3D                 db  20h
.eh_frame:0000000000015F3E                 db  7Ah ; z
.eh_frame:0000000000015F3F                 db  0Ah
.eh_frame:0000000000015F40                 db  0Eh
.eh_frame:0000000000015F41                 db  18h
.eh_frame:0000000000015F42                 db  41h ; A
.eh_frame:0000000000015F43                 db  0Eh
.eh_frame:0000000000015F44                 db  10h
.eh_frame:0000000000015F45                 db  41h ; A
.eh_frame:0000000000015F46                 db  0Eh
.eh_frame:0000000000015F47                 db    8
.eh_frame:0000000000015F48                 db  41h ; A
.eh_frame:0000000000015F49                 db  0Bh
.eh_frame:0000000000015F4A                 db    0
.eh_frame:0000000000015F4B                 db    0
.eh_frame:0000000000015F4C                 db    0
.eh_frame:0000000000015F4D                 db    0
.eh_frame:0000000000015F4E                 db    0
.eh_frame:0000000000015F4F                 db    0
.eh_frame:0000000000015F50                 db  4Ch ; L
.eh_frame:0000000000015F51                 db    0
.eh_frame:0000000000015F52                 db    0
.eh_frame:0000000000015F53                 db    0
.eh_frame:0000000000015F54                 db    4
.eh_frame:0000000000015F55                 db    2
.eh_frame:0000000000015F56                 db    0
.eh_frame:0000000000015F57                 db    0
.eh_frame:0000000000015F58                 db    8
.eh_frame:0000000000015F59                 db 0D1h
.eh_frame:0000000000015F5A                 db 0FEh
.eh_frame:0000000000015F5B                 db 0FFh
.eh_frame:0000000000015F5C                 db 0FFh
.eh_frame:0000000000015F5D                 db    0
.eh_frame:0000000000015F5E                 db    0
.eh_frame:0000000000015F5F                 db    0
.eh_frame:0000000000015F60                 db    0
.eh_frame:0000000000015F61                 db  42h ; B
.eh_frame:0000000000015F62                 db  0Eh
.eh_frame:0000000000015F63                 db  10h
.eh_frame:0000000000015F64                 db  8Fh
.eh_frame:0000000000015F65                 db    2
.eh_frame:0000000000015F66                 db  42h ; B
.eh_frame:0000000000015F67                 db  0Eh
.eh_frame:0000000000015F68                 db  18h
.eh_frame:0000000000015F69                 db  8Eh
.eh_frame:0000000000015F6A                 db    3
.eh_frame:0000000000015F6B                 db  45h ; E
.eh_frame:0000000000015F6C                 db  0Eh
.eh_frame:0000000000015F6D                 db  20h
.eh_frame:0000000000015F6E                 db  8Dh
.eh_frame:0000000000015F6F                 db    4
.eh_frame:0000000000015F70                 db  42h ; B
.eh_frame:0000000000015F71                 db  0Eh
.eh_frame:0000000000015F72                 db  28h ; (
.eh_frame:0000000000015F73                 db  8Ch
.eh_frame:0000000000015F74                 db    5
.eh_frame:0000000000015F75                 db  44h ; D
.eh_frame:0000000000015F76                 db  0Eh
.eh_frame:0000000000015F77                 db  30h ; 0
.eh_frame:0000000000015F78                 db  86h
.eh_frame:0000000000015F79                 db    6
.eh_frame:0000000000015F7A                 db  41h ; A
.eh_frame:0000000000015F7B                 db  0Eh
.eh_frame:0000000000015F7C                 db  38h ; 8
.eh_frame:0000000000015F7D                 db  83h
.eh_frame:0000000000015F7E                 db    7
.eh_frame:0000000000015F7F                 db  47h ; G
.eh_frame:0000000000015F80                 db  0Eh
.eh_frame:0000000000015F81                 db  50h ; P
.eh_frame:0000000000015F82                 db    2
.eh_frame:0000000000015F83                 db 0C3h
.eh_frame:0000000000015F84                 db  0Ah
.eh_frame:0000000000015F85                 db  0Eh
.eh_frame:0000000000015F86                 db  38h ; 8
.eh_frame:0000000000015F87                 db  44h ; D
.eh_frame:0000000000015F88                 db  0Eh
.eh_frame:0000000000015F89                 db  30h ; 0
.eh_frame:0000000000015F8A                 db  41h ; A
.eh_frame:0000000000015F8B                 db  0Eh
.eh_frame:0000000000015F8C                 db  28h ; (
.eh_frame:0000000000015F8D                 db  42h ; B
.eh_frame:0000000000015F8E                 db  0Eh
.eh_frame:0000000000015F8F                 db  20h
.eh_frame:0000000000015F90                 db  42h ; B
.eh_frame:0000000000015F91                 db  0Eh
.eh_frame:0000000000015F92                 db  18h
.eh_frame:0000000000015F93                 db  42h ; B
.eh_frame:0000000000015F94                 db  0Eh
.eh_frame:0000000000015F95                 db  10h
.eh_frame:0000000000015F96                 db  42h ; B
.eh_frame:0000000000015F97                 db  0Eh
.eh_frame:0000000000015F98                 db    8
.eh_frame:0000000000015F99                 db  49h ; I
.eh_frame:0000000000015F9A                 db  0Bh
.eh_frame:0000000000015F9B                 db    0
.eh_frame:0000000000015F9C                 db    0
.eh_frame:0000000000015F9D                 db    0
.eh_frame:0000000000015F9E                 db    0
.eh_frame:0000000000015F9F                 db    0
.eh_frame:0000000000015FA0                 db  1Ch
.eh_frame:0000000000015FA1                 db    0
.eh_frame:0000000000015FA2                 db    0
.eh_frame:0000000000015FA3                 db    0
.eh_frame:0000000000015FA4                 db  54h ; T
.eh_frame:0000000000015FA5                 db    2
.eh_frame:0000000000015FA6                 db    0
.eh_frame:0000000000015FA7                 db    0
.eh_frame:0000000000015FA8                 db 0B8h
.eh_frame:0000000000015FA9                 db 0D1h
.eh_frame:0000000000015FAA                 db 0FEh
.eh_frame:0000000000015FAB                 db 0FFh
.eh_frame:0000000000015FAC                 db  9Fh
.eh_frame:0000000000015FAD                 db    0
.eh_frame:0000000000015FAE                 db    0
.eh_frame:0000000000015FAF                 db    0
.eh_frame:0000000000015FB0                 db    0
.eh_frame:0000000000015FB1                 db  44h ; D
.eh_frame:0000000000015FB2                 db  0Eh
.eh_frame:0000000000015FB3                 db  10h
.eh_frame:0000000000015FB4                 db  83h
.eh_frame:0000000000015FB5                 db    2
.eh_frame:0000000000015FB6                 db    2
.eh_frame:0000000000015FB7                 db  78h ; x
.eh_frame:0000000000015FB8                 db  0Ah
.eh_frame:0000000000015FB9                 db  0Eh
.eh_frame:0000000000015FBA                 db    8
.eh_frame:0000000000015FBB                 db  41h ; A
.eh_frame:0000000000015FBC                 db  0Bh
.eh_frame:0000000000015FBD                 db    0
.eh_frame:0000000000015FBE                 db    0
.eh_frame:0000000000015FBF                 db    0
.eh_frame:0000000000015FC0                 db  40h ; @
.eh_frame:0000000000015FC1                 db    0
.eh_frame:0000000000015FC2                 db    0
.eh_frame:0000000000015FC3                 db    0
.eh_frame:0000000000015FC4                 db  74h ; t
.eh_frame:0000000000015FC5                 db    2
.eh_frame:0000000000015FC6                 db    0
.eh_frame:0000000000015FC7                 db    0
.eh_frame:0000000000015FC8                 db  38h ; 8
.eh_frame:0000000000015FC9                 db 0D2h
.eh_frame:0000000000015FCA                 db 0FEh
.eh_frame:0000000000015FCB                 db 0FFh
.eh_frame:0000000000015FCC                 db 0E7h
.eh_frame:0000000000015FCD                 db    0
.eh_frame:0000000000015FCE                 db    0
.eh_frame:0000000000015FCF                 db    0
.eh_frame:0000000000015FD0                 db    0
.eh_frame:0000000000015FD1                 db  41h ; A
.eh_frame:0000000000015FD2                 db  0Eh
.eh_frame:0000000000015FD3                 db  10h
.eh_frame:0000000000015FD4                 db  86h
.eh_frame:0000000000015FD5                 db    2
.eh_frame:0000000000015FD6                 db  41h ; A
.eh_frame:0000000000015FD7                 db  0Eh
.eh_frame:0000000000015FD8                 db  18h
.eh_frame:0000000000015FD9                 db  83h
.eh_frame:0000000000015FDA                 db    3
.eh_frame:0000000000015FDB                 db  49h ; I
.eh_frame:0000000000015FDC                 db  0Eh
.eh_frame:0000000000015FDD                 db  20h
.eh_frame:0000000000015FDE                 db  6Eh ; n
.eh_frame:0000000000015FDF                 db  0Ah
.eh_frame:0000000000015FE0                 db  0Eh
.eh_frame:0000000000015FE1                 db  18h
.eh_frame:0000000000015FE2                 db  41h ; A
.eh_frame:0000000000015FE3                 db  0Eh
.eh_frame:0000000000015FE4                 db  10h
.eh_frame:0000000000015FE5                 db  41h ; A
.eh_frame:0000000000015FE6                 db  0Eh
.eh_frame:0000000000015FE7                 db    8
.eh_frame:0000000000015FE8                 db  45h ; E
.eh_frame:0000000000015FE9                 db  0Bh
.eh_frame:0000000000015FEA                 db    2
.eh_frame:0000000000015FEB                 db  4Ah ; J
.eh_frame:0000000000015FEC                 db  0Ah
.eh_frame:0000000000015FED                 db  0Eh
.eh_frame:0000000000015FEE                 db  18h
.eh_frame:0000000000015FEF                 db  41h ; A
.eh_frame:0000000000015FF0                 db  0Eh
.eh_frame:0000000000015FF1                 db  10h
.eh_frame:0000000000015FF2                 db  41h ; A
.eh_frame:0000000000015FF3                 db  0Eh
.eh_frame:0000000000015FF4                 db    8
.eh_frame:0000000000015FF5                 db  44h ; D
.eh_frame:0000000000015FF6                 db  0Bh
.eh_frame:0000000000015FF7                 db    2
.eh_frame:0000000000015FF8                 db  54h ; T
.eh_frame:0000000000015FF9                 db  0Eh
.eh_frame:0000000000015FFA                 db  18h
.eh_frame:0000000000015FFB                 db  41h ; A
.eh_frame:0000000000015FFC                 db  0Eh
.eh_frame:0000000000015FFD                 db  10h
.eh_frame:0000000000015FFE                 db  41h ; A
.eh_frame:0000000000015FFF                 db  0Eh
.eh_frame:0000000000016000                 db    8
.eh_frame:0000000000016001                 db    0
.eh_frame:0000000000016002                 db    0
.eh_frame:0000000000016003                 db    0
.eh_frame:0000000000016004                 db  74h ; t
.eh_frame:0000000000016005                 db    0
.eh_frame:0000000000016006                 db    0
.eh_frame:0000000000016007                 db    0
.eh_frame:0000000000016008                 db 0B8h
.eh_frame:0000000000016009                 db    2
.eh_frame:000000000001600A                 db    0
.eh_frame:000000000001600B                 db    0
.eh_frame:000000000001600C                 db 0E4h
.eh_frame:000000000001600D                 db 0D2h
.eh_frame:000000000001600E                 db 0FEh
.eh_frame:000000000001600F                 db 0FFh
.eh_frame:0000000000016010                 db  34h ; 4
.eh_frame:0000000000016011                 db  12h
.eh_frame:0000000000016012                 db    0
.eh_frame:0000000000016013                 db    0
.eh_frame:0000000000016014                 db    0
.eh_frame:0000000000016015                 db  42h ; B
.eh_frame:0000000000016016                 db  0Eh
.eh_frame:0000000000016017                 db  10h
.eh_frame:0000000000016018                 db  8Fh
.eh_frame:0000000000016019                 db    2
.eh_frame:000000000001601A                 db  42h ; B
.eh_frame:000000000001601B                 db  0Eh
.eh_frame:000000000001601C                 db  18h
.eh_frame:000000000001601D                 db  8Eh
.eh_frame:000000000001601E                 db    3
.eh_frame:000000000001601F                 db  45h ; E
.eh_frame:0000000000016020                 db  0Eh
.eh_frame:0000000000016021                 db  20h
.eh_frame:0000000000016022                 db  8Dh
.eh_frame:0000000000016023                 db    4
.eh_frame:0000000000016024                 db  42h ; B
.eh_frame:0000000000016025                 db  0Eh
.eh_frame:0000000000016026                 db  28h ; (
.eh_frame:0000000000016027                 db  8Ch
.eh_frame:0000000000016028                 db    5
.eh_frame:0000000000016029                 db  44h ; D
.eh_frame:000000000001602A                 db  0Eh
.eh_frame:000000000001602B                 db  30h ; 0
.eh_frame:000000000001602C                 db  86h
.eh_frame:000000000001602D                 db    6
.eh_frame:000000000001602E                 db  41h ; A
.eh_frame:000000000001602F                 db  0Eh
.eh_frame:0000000000016030                 db  38h ; 8
.eh_frame:0000000000016031                 db  83h
.eh_frame:0000000000016032                 db    7
.eh_frame:0000000000016033                 db  53h ; S
.eh_frame:0000000000016034                 db  0Eh
.eh_frame:0000000000016035                 db 0F0h
.eh_frame:0000000000016036                 db    1
.eh_frame:0000000000016037                 db    3
.eh_frame:0000000000016038                 db  81h
.eh_frame:0000000000016039                 db  0Bh
.eh_frame:000000000001603A                 db  0Eh
.eh_frame:000000000001603B                 db 0F8h
.eh_frame:000000000001603C                 db    1
.eh_frame:000000000001603D                 db  4Ah ; J
.eh_frame:000000000001603E                 db  0Eh
.eh_frame:000000000001603F                 db  80h
.eh_frame:0000000000016040                 db    2
.eh_frame:0000000000016041                 db  44h ; D
.eh_frame:0000000000016042                 db  0Eh
.eh_frame:0000000000016043                 db  88h
.eh_frame:0000000000016044                 db    2
.eh_frame:0000000000016045                 db  45h ; E
.eh_frame:0000000000016046                 db  0Eh
.eh_frame:0000000000016047                 db  90h
.eh_frame:0000000000016048                 db    2
.eh_frame:0000000000016049                 db  5Fh ; _
.eh_frame:000000000001604A                 db  0Eh
.eh_frame:000000000001604B                 db 0F0h
.eh_frame:000000000001604C                 db    1
.eh_frame:000000000001604D                 db  64h ; d
.eh_frame:000000000001604E                 db  0Ah
.eh_frame:000000000001604F                 db  0Eh
.eh_frame:0000000000016050                 db  38h ; 8
.eh_frame:0000000000016051                 db  41h ; A
.eh_frame:0000000000016052                 db  0Eh
.eh_frame:0000000000016053                 db  30h ; 0
.eh_frame:0000000000016054                 db  41h ; A
.eh_frame:0000000000016055                 db  0Eh
.eh_frame:0000000000016056                 db  28h ; (
.eh_frame:0000000000016057                 db  42h ; B
.eh_frame:0000000000016058                 db  0Eh
.eh_frame:0000000000016059                 db  20h
.eh_frame:000000000001605A                 db  42h ; B
.eh_frame:000000000001605B                 db  0Eh
.eh_frame:000000000001605C                 db  18h
.eh_frame:000000000001605D                 db  42h ; B
.eh_frame:000000000001605E                 db  0Eh
.eh_frame:000000000001605F                 db  10h
.eh_frame:0000000000016060                 db  42h ; B
.eh_frame:0000000000016061                 db  0Eh
.eh_frame:0000000000016062                 db    8
.eh_frame:0000000000016063                 db  44h ; D
.eh_frame:0000000000016064                 db  0Bh
.eh_frame:0000000000016065                 db    3
.eh_frame:0000000000016066                 db  99h
.eh_frame:0000000000016067                 db    5
.eh_frame:0000000000016068                 db  0Eh
.eh_frame:0000000000016069                 db 0F8h
.eh_frame:000000000001606A                 db    1
.eh_frame:000000000001606B                 db  4Dh ; M
.eh_frame:000000000001606C                 db  0Eh
.eh_frame:000000000001606D                 db  80h
.eh_frame:000000000001606E                 db    2
.eh_frame:000000000001606F                 db  44h ; D
.eh_frame:0000000000016070                 db  0Eh
.eh_frame:0000000000016071                 db  88h
.eh_frame:0000000000016072                 db    2
.eh_frame:0000000000016073                 db  47h ; G
.eh_frame:0000000000016074                 db  0Eh
.eh_frame:0000000000016075                 db  90h
.eh_frame:0000000000016076                 db    2
.eh_frame:0000000000016077                 db  5Bh ; [
.eh_frame:0000000000016078                 db  0Eh
.eh_frame:0000000000016079                 db 0F0h
.eh_frame:000000000001607A                 db    1
.eh_frame:000000000001607B                 db    0
.eh_frame:000000000001607C                 db  68h ; h
.eh_frame:000000000001607D                 db    0
.eh_frame:000000000001607E                 db    0
.eh_frame:000000000001607F                 db    0
.eh_frame:0000000000016080                 db  30h ; 0
.eh_frame:0000000000016081                 db    3
.eh_frame:0000000000016082                 db    0
.eh_frame:0000000000016083                 db    0
.eh_frame:0000000000016084                 db 0ACh
.eh_frame:0000000000016085                 db 0E4h
.eh_frame:0000000000016086                 db 0FEh
.eh_frame:0000000000016087                 db 0FFh
.eh_frame:0000000000016088                 db 0ABh
.eh_frame:0000000000016089                 db    1
.eh_frame:000000000001608A                 db    0
.eh_frame:000000000001608B                 db    0
.eh_frame:000000000001608C                 db    0
.eh_frame:000000000001608D                 db  42h ; B
.eh_frame:000000000001608E                 db  0Eh
.eh_frame:000000000001608F                 db  10h
.eh_frame:0000000000016090                 db  8Fh
.eh_frame:0000000000016091                 db    2
.eh_frame:0000000000016092                 db  42h ; B
.eh_frame:0000000000016093                 db  0Eh
.eh_frame:0000000000016094                 db  18h
.eh_frame:0000000000016095                 db  8Eh
.eh_frame:0000000000016096                 db    3
.eh_frame:0000000000016097                 db  45h ; E
.eh_frame:0000000000016098                 db  0Eh
.eh_frame:0000000000016099                 db  20h
.eh_frame:000000000001609A                 db  8Dh
.eh_frame:000000000001609B                 db    4
.eh_frame:000000000001609C                 db  42h ; B
.eh_frame:000000000001609D                 db  0Eh
.eh_frame:000000000001609E                 db  28h ; (
.eh_frame:000000000001609F                 db  8Ch
.eh_frame:00000000000160A0                 db    5
.eh_frame:00000000000160A1                 db  44h ; D
.eh_frame:00000000000160A2                 db  0Eh
.eh_frame:00000000000160A3                 db  30h ; 0
.eh_frame:00000000000160A4                 db  86h
.eh_frame:00000000000160A5                 db    6
.eh_frame:00000000000160A6                 db  41h ; A
.eh_frame:00000000000160A7                 db  0Eh
.eh_frame:00000000000160A8                 db  38h ; 8
.eh_frame:00000000000160A9                 db  83h
.eh_frame:00000000000160AA                 db    7
.eh_frame:00000000000160AB                 db  47h ; G
.eh_frame:00000000000160AC                 db  0Eh
.eh_frame:00000000000160AD                 db  60h ; `
.eh_frame:00000000000160AE                 db    2
.eh_frame:00000000000160AF                 db  99h
.eh_frame:00000000000160B0                 db  0Eh
.eh_frame:00000000000160B1                 db  68h ; h
.eh_frame:00000000000160B2                 db  5Fh ; _
.eh_frame:00000000000160B3                 db  0Eh
.eh_frame:00000000000160B4                 db  70h ; p
.eh_frame:00000000000160B5                 db  46h ; F
.eh_frame:00000000000160B6                 db  0Eh
.eh_frame:00000000000160B7                 db  78h ; x
.eh_frame:00000000000160B8                 db  42h ; B
.eh_frame:00000000000160B9                 db  0Eh
.eh_frame:00000000000160BA                 db  80h
.eh_frame:00000000000160BB                 db    1
.eh_frame:00000000000160BC                 db  59h ; Y
.eh_frame:00000000000160BD                 db  0Eh
.eh_frame:00000000000160BE                 db  60h ; `
.eh_frame:00000000000160BF                 db    2
.eh_frame:00000000000160C0                 db  40h ; @
.eh_frame:00000000000160C1                 db  0Eh
.eh_frame:00000000000160C2                 db  68h ; h
.eh_frame:00000000000160C3                 db  4Bh ; K
.eh_frame:00000000000160C4                 db  0Eh
.eh_frame:00000000000160C5                 db  70h ; p
.eh_frame:00000000000160C6                 db  43h ; C
.eh_frame:00000000000160C7                 db  0Eh
.eh_frame:00000000000160C8                 db  78h ; x
.eh_frame:00000000000160C9                 db  45h ; E
.eh_frame:00000000000160CA                 db  0Eh
.eh_frame:00000000000160CB                 db  80h
.eh_frame:00000000000160CC                 db    1
.eh_frame:00000000000160CD                 db  5Eh ; ^
.eh_frame:00000000000160CE                 db  0Eh
.eh_frame:00000000000160CF                 db  60h ; `
.eh_frame:00000000000160D0                 db  4Ch ; L
.eh_frame:00000000000160D1                 db  0Ah
.eh_frame:00000000000160D2                 db  0Eh
.eh_frame:00000000000160D3                 db  38h ; 8
.eh_frame:00000000000160D4                 db  44h ; D
.eh_frame:00000000000160D5                 db  0Eh
.eh_frame:00000000000160D6                 db  30h ; 0
.eh_frame:00000000000160D7                 db  41h ; A
.eh_frame:00000000000160D8                 db  0Eh
.eh_frame:00000000000160D9                 db  28h ; (
.eh_frame:00000000000160DA                 db  42h ; B
.eh_frame:00000000000160DB                 db  0Eh
.eh_frame:00000000000160DC                 db  20h
.eh_frame:00000000000160DD                 db  42h ; B
.eh_frame:00000000000160DE                 db  0Eh
.eh_frame:00000000000160DF                 db  18h
.eh_frame:00000000000160E0                 db  42h ; B
.eh_frame:00000000000160E1                 db  0Eh
.eh_frame:00000000000160E2                 db  10h
.eh_frame:00000000000160E3                 db  42h ; B
.eh_frame:00000000000160E4                 db  0Eh
.eh_frame:00000000000160E5                 db    8
.eh_frame:00000000000160E6                 db  46h ; F
.eh_frame:00000000000160E7                 db  0Bh
.eh_frame:00000000000160E8                 db  28h ; (
.eh_frame:00000000000160E9                 db    0
.eh_frame:00000000000160EA                 db    0
.eh_frame:00000000000160EB                 db    0
.eh_frame:00000000000160EC                 db  9Ch
.eh_frame:00000000000160ED                 db    3
.eh_frame:00000000000160EE                 db    0
.eh_frame:00000000000160EF                 db    0
.eh_frame:00000000000160F0                 db 0F0h
.eh_frame:00000000000160F1                 db 0E5h
.eh_frame:00000000000160F2                 db 0FEh
.eh_frame:00000000000160F3                 db 0FFh
.eh_frame:00000000000160F4                 db  36h ; 6
.eh_frame:00000000000160F5                 db    0
.eh_frame:00000000000160F6                 db    0
.eh_frame:00000000000160F7                 db    0
.eh_frame:00000000000160F8                 db    0
.eh_frame:00000000000160F9                 db  42h ; B
.eh_frame:00000000000160FA                 db  0Eh
.eh_frame:00000000000160FB                 db  10h
.eh_frame:00000000000160FC                 db  8Ch
.eh_frame:00000000000160FD                 db    2
.eh_frame:00000000000160FE                 db  41h ; A
.eh_frame:00000000000160FF                 db  0Eh
.eh_frame:0000000000016100                 db  18h
.eh_frame:0000000000016101                 db  86h
.eh_frame:0000000000016102                 db    3
.eh_frame:0000000000016103                 db  41h ; A
.eh_frame:0000000000016104                 db  0Eh
.eh_frame:0000000000016105                 db  20h
.eh_frame:0000000000016106                 db  83h
.eh_frame:0000000000016107                 db    4
.eh_frame:0000000000016108                 db  6Eh ; n
.eh_frame:0000000000016109                 db  0Eh
.eh_frame:000000000001610A                 db  18h
.eh_frame:000000000001610B                 db  41h ; A
.eh_frame:000000000001610C                 db  0Eh
.eh_frame:000000000001610D                 db  10h
.eh_frame:000000000001610E                 db  42h ; B
.eh_frame:000000000001610F                 db  0Eh
.eh_frame:0000000000016110                 db    8
.eh_frame:0000000000016111                 db    0
.eh_frame:0000000000016112                 db    0
.eh_frame:0000000000016113                 db    0
.eh_frame:0000000000016114                 db  10h
.eh_frame:0000000000016115                 db    0
.eh_frame:0000000000016116                 db    0
.eh_frame:0000000000016117                 db    0
.eh_frame:0000000000016118                 db 0C8h
.eh_frame:0000000000016119                 db    3
.eh_frame:000000000001611A                 db    0
.eh_frame:000000000001611B                 db    0
.eh_frame:000000000001611C                 db    4
.eh_frame:000000000001611D                 db 0E6h
.eh_frame:000000000001611E                 db 0FEh
.eh_frame:000000000001611F                 db 0FFh
.eh_frame:0000000000016120                 db  11h
.eh_frame:0000000000016121                 db    0
.eh_frame:0000000000016122                 db    0
.eh_frame:0000000000016123                 db    0
.eh_frame:0000000000016124                 db    0
.eh_frame:0000000000016125                 db    0
.eh_frame:0000000000016126                 db    0
.eh_frame:0000000000016127                 db    0
.eh_frame:0000000000016128                 db  10h
.eh_frame:0000000000016129                 db    0
.eh_frame:000000000001612A                 db    0
.eh_frame:000000000001612B                 db    0
.eh_frame:000000000001612C                 db 0DCh
.eh_frame:000000000001612D                 db    3
.eh_frame:000000000001612E                 db    0
.eh_frame:000000000001612F                 db    0
.eh_frame:0000000000016130                 db  10h
.eh_frame:0000000000016131                 db 0E6h
.eh_frame:0000000000016132                 db 0FEh
.eh_frame:0000000000016133                 db 0FFh
.eh_frame:0000000000016134                 db  11h
.eh_frame:0000000000016135                 db    0
.eh_frame:0000000000016136                 db    0
.eh_frame:0000000000016137                 db    0
.eh_frame:0000000000016138                 db    0
.eh_frame:0000000000016139                 db    0
.eh_frame:000000000001613A                 db    0
.eh_frame:000000000001613B                 db    0
.eh_frame:000000000001613C                 db  10h
.eh_frame:000000000001613D                 db    0
.eh_frame:000000000001613E                 db    0
.eh_frame:000000000001613F                 db    0
.eh_frame:0000000000016140                 db 0F0h
.eh_frame:0000000000016141                 db    3
.eh_frame:0000000000016142                 db    0
.eh_frame:0000000000016143                 db    0
.eh_frame:0000000000016144                 db  1Ch
.eh_frame:0000000000016145                 db 0E6h
.eh_frame:0000000000016146                 db 0FEh
.eh_frame:0000000000016147                 db 0FFh
.eh_frame:0000000000016148                 db  35h ; 5
.eh_frame:0000000000016149                 db    0
.eh_frame:000000000001614A                 db    0
.eh_frame:000000000001614B                 db    0
.eh_frame:000000000001614C                 db    0
.eh_frame:000000000001614D                 db    0
.eh_frame:000000000001614E                 db    0
.eh_frame:000000000001614F                 db    0
.eh_frame:0000000000016150                 db  10h
.eh_frame:0000000000016151                 db    0
.eh_frame:0000000000016152                 db    0
.eh_frame:0000000000016153                 db    0
.eh_frame:0000000000016154                 db    4
.eh_frame:0000000000016155                 db    4
.eh_frame:0000000000016156                 db    0
.eh_frame:0000000000016157                 db    0
.eh_frame:0000000000016158                 db  48h ; H
.eh_frame:0000000000016159                 db 0E6h
.eh_frame:000000000001615A                 db 0FEh
.eh_frame:000000000001615B                 db 0FFh
.eh_frame:000000000001615C                 db  15h
.eh_frame:000000000001615D                 db    0
.eh_frame:000000000001615E                 db    0
.eh_frame:000000000001615F                 db    0
.eh_frame:0000000000016160                 db    0
.eh_frame:0000000000016161                 db    0
.eh_frame:0000000000016162                 db    0
.eh_frame:0000000000016163                 db    0
.eh_frame:0000000000016164                 db  10h
.eh_frame:0000000000016165                 db    0
.eh_frame:0000000000016166                 db    0
.eh_frame:0000000000016167                 db    0
.eh_frame:0000000000016168                 db  18h
.eh_frame:0000000000016169                 db    4
.eh_frame:000000000001616A                 db    0
.eh_frame:000000000001616B                 db    0
.eh_frame:000000000001616C                 db  54h ; T
.eh_frame:000000000001616D                 db 0E6h
.eh_frame:000000000001616E                 db 0FEh
.eh_frame:000000000001616F                 db 0FFh
.eh_frame:0000000000016170                 db  30h ; 0
.eh_frame:0000000000016171                 db    0
.eh_frame:0000000000016172                 db    0
.eh_frame:0000000000016173                 db    0
.eh_frame:0000000000016174                 db    0
.eh_frame:0000000000016175                 db  6Bh ; k
.eh_frame:0000000000016176                 db  0Eh
.eh_frame:0000000000016177                 db  10h
.eh_frame:0000000000016178                 db  50h ; P
.eh_frame:0000000000016179                 db    0
.eh_frame:000000000001617A                 db    0
.eh_frame:000000000001617B                 db    0
.eh_frame:000000000001617C                 db  2Ch ; ,
.eh_frame:000000000001617D                 db    4
.eh_frame:000000000001617E                 db    0
.eh_frame:000000000001617F                 db    0
.eh_frame:0000000000016180                 db  70h ; p
.eh_frame:0000000000016181                 db 0E6h
.eh_frame:0000000000016182                 db 0FEh
.eh_frame:0000000000016183                 db 0FFh
.eh_frame:0000000000016184                 db  74h ; t
.eh_frame:0000000000016185                 db    0
.eh_frame:0000000000016186                 db    0
.eh_frame:0000000000016187                 db    0
.eh_frame:0000000000016188                 db    0
.eh_frame:0000000000016189                 db  42h ; B
.eh_frame:000000000001618A                 db  0Eh
.eh_frame:000000000001618B                 db  10h
.eh_frame:000000000001618C                 db  8Fh
.eh_frame:000000000001618D                 db    2
.eh_frame:000000000001618E                 db  42h ; B
.eh_frame:000000000001618F                 db  0Eh
.eh_frame:0000000000016190                 db  18h
.eh_frame:0000000000016191                 db  8Eh
.eh_frame:0000000000016192                 db    3
.eh_frame:0000000000016193                 db  49h ; I
.eh_frame:0000000000016194                 db  0Eh
.eh_frame:0000000000016195                 db  20h
.eh_frame:0000000000016196                 db  8Dh
.eh_frame:0000000000016197                 db    4
.eh_frame:0000000000016198                 db  42h ; B
.eh_frame:0000000000016199                 db  0Eh
.eh_frame:000000000001619A                 db  28h ; (
.eh_frame:000000000001619B                 db  8Ch
.eh_frame:000000000001619C                 db    5
.eh_frame:000000000001619D                 db  44h ; D
.eh_frame:000000000001619E                 db  0Eh
.eh_frame:000000000001619F                 db  30h ; 0
.eh_frame:00000000000161A0                 db  86h
.eh_frame:00000000000161A1                 db    6
.eh_frame:00000000000161A2                 db  41h ; A
.eh_frame:00000000000161A3                 db  0Eh
.eh_frame:00000000000161A4                 db  38h ; 8
.eh_frame:00000000000161A5                 db  83h
.eh_frame:00000000000161A6                 db    7
.eh_frame:00000000000161A7                 db  4Dh ; M
.eh_frame:00000000000161A8                 db  0Eh
.eh_frame:00000000000161A9                 db  50h ; P
.eh_frame:00000000000161AA                 db  5Fh ; _
.eh_frame:00000000000161AB                 db  0Eh
.eh_frame:00000000000161AC                 db  58h ; X
.eh_frame:00000000000161AD                 db  47h ; G
.eh_frame:00000000000161AE                 db  0Eh
.eh_frame:00000000000161AF                 db  60h ; `
.eh_frame:00000000000161B0                 db  46h ; F
.eh_frame:00000000000161B1                 db  0Eh
.eh_frame:00000000000161B2                 db  68h ; h
.eh_frame:00000000000161B3                 db  44h ; D
.eh_frame:00000000000161B4                 db  0Eh
.eh_frame:00000000000161B5                 db  70h ; p
.eh_frame:00000000000161B6                 db  58h ; X
.eh_frame:00000000000161B7                 db  0Eh
.eh_frame:00000000000161B8                 db  38h ; 8
.eh_frame:00000000000161B9                 db  41h ; A
.eh_frame:00000000000161BA                 db  0Eh
.eh_frame:00000000000161BB                 db  30h ; 0
.eh_frame:00000000000161BC                 db  41h ; A
.eh_frame:00000000000161BD                 db  0Eh
.eh_frame:00000000000161BE                 db  28h ; (
.eh_frame:00000000000161BF                 db  42h ; B
.eh_frame:00000000000161C0                 db  0Eh
.eh_frame:00000000000161C1                 db  20h
.eh_frame:00000000000161C2                 db  42h ; B
.eh_frame:00000000000161C3                 db  0Eh
.eh_frame:00000000000161C4                 db  18h
.eh_frame:00000000000161C5                 db  42h ; B
.eh_frame:00000000000161C6                 db  0Eh
.eh_frame:00000000000161C7                 db  10h
.eh_frame:00000000000161C8                 db  42h ; B
.eh_frame:00000000000161C9                 db  0Eh
.eh_frame:00000000000161CA                 db    8
.eh_frame:00000000000161CB                 db    0
.eh_frame:00000000000161CC                 db  68h ; h
.eh_frame:00000000000161CD                 db    0
.eh_frame:00000000000161CE                 db    0
.eh_frame:00000000000161CF                 db    0
.eh_frame:00000000000161D0                 db  80h
.eh_frame:00000000000161D1                 db    4
.eh_frame:00000000000161D2                 db    0
.eh_frame:00000000000161D3                 db    0
.eh_frame:00000000000161D4                 db  9Ch
.eh_frame:00000000000161D5                 db 0E6h
.eh_frame:00000000000161D6                 db 0FEh
.eh_frame:00000000000161D7                 db 0FFh
.eh_frame:00000000000161D8                 db 0E3h
.eh_frame:00000000000161D9                 db    0
.eh_frame:00000000000161DA                 db    0
.eh_frame:00000000000161DB                 db    0
.eh_frame:00000000000161DC                 db    0
.eh_frame:00000000000161DD                 db  42h ; B
.eh_frame:00000000000161DE                 db  0Eh
.eh_frame:00000000000161DF                 db  10h
.eh_frame:00000000000161E0                 db  8Fh
.eh_frame:00000000000161E1                 db    2
.eh_frame:00000000000161E2                 db  42h ; B
.eh_frame:00000000000161E3                 db  0Eh
.eh_frame:00000000000161E4                 db  18h
.eh_frame:00000000000161E5                 db  8Eh
.eh_frame:00000000000161E6                 db    3
.eh_frame:00000000000161E7                 db  49h ; I
.eh_frame:00000000000161E8                 db  0Eh
.eh_frame:00000000000161E9                 db  20h
.eh_frame:00000000000161EA                 db  8Dh
.eh_frame:00000000000161EB                 db    4
.eh_frame:00000000000161EC                 db  42h ; B
.eh_frame:00000000000161ED                 db  0Eh
.eh_frame:00000000000161EE                 db  28h ; (
.eh_frame:00000000000161EF                 db  8Ch
.eh_frame:00000000000161F0                 db    5
.eh_frame:00000000000161F1                 db  44h ; D
.eh_frame:00000000000161F2                 db  0Eh
.eh_frame:00000000000161F3                 db  30h ; 0
.eh_frame:00000000000161F4                 db  86h
.eh_frame:00000000000161F5                 db    6
.eh_frame:00000000000161F6                 db  41h ; A
.eh_frame:00000000000161F7                 db  0Eh
.eh_frame:00000000000161F8                 db  38h ; 8
.eh_frame:00000000000161F9                 db  83h
.eh_frame:00000000000161FA                 db    7
.eh_frame:00000000000161FB                 db  4Dh ; M
.eh_frame:00000000000161FC                 db  0Eh
.eh_frame:00000000000161FD                 db  70h ; p
.eh_frame:00000000000161FE                 db  65h ; e
.eh_frame:00000000000161FF                 db  0Eh
.eh_frame:0000000000016200                 db  78h ; x
.eh_frame:0000000000016201                 db  4Dh ; M
.eh_frame:0000000000016202                 db  0Eh
.eh_frame:0000000000016203                 db  80h
.eh_frame:0000000000016204                 db    1
.eh_frame:0000000000016205                 db  46h ; F
.eh_frame:0000000000016206                 db  0Eh
.eh_frame:0000000000016207                 db  88h
.eh_frame:0000000000016208                 db    1
.eh_frame:0000000000016209                 db  42h ; B
.eh_frame:000000000001620A                 db  0Eh
.eh_frame:000000000001620B                 db  90h
.eh_frame:000000000001620C                 db    1
.eh_frame:000000000001620D                 db  5Eh ; ^
.eh_frame:000000000001620E                 db  0Eh
.eh_frame:000000000001620F                 db  70h ; p
.eh_frame:0000000000016210                 db  56h ; V
.eh_frame:0000000000016211                 db  0Eh
.eh_frame:0000000000016212                 db  78h ; x
.eh_frame:0000000000016213                 db  43h ; C
.eh_frame:0000000000016214                 db  0Eh
.eh_frame:0000000000016215                 db  80h
.eh_frame:0000000000016216                 db    1
.eh_frame:0000000000016217                 db  43h ; C
.eh_frame:0000000000016218                 db  0Eh
.eh_frame:0000000000016219                 db  88h
.eh_frame:000000000001621A                 db    1
.eh_frame:000000000001621B                 db  56h ; V
.eh_frame:000000000001621C                 db  0Eh
.eh_frame:000000000001621D                 db  90h
.eh_frame:000000000001621E                 db    1
.eh_frame:000000000001621F                 db  52h ; R
.eh_frame:0000000000016220                 db  0Eh
.eh_frame:0000000000016221                 db  70h ; p
.eh_frame:0000000000016222                 db  5Bh ; [
.eh_frame:0000000000016223                 db  0Eh
.eh_frame:0000000000016224                 db  38h ; 8
.eh_frame:0000000000016225                 db  41h ; A
.eh_frame:0000000000016226                 db  0Eh
.eh_frame:0000000000016227                 db  30h ; 0
.eh_frame:0000000000016228                 db  41h ; A
.eh_frame:0000000000016229                 db  0Eh
.eh_frame:000000000001622A                 db  28h ; (
.eh_frame:000000000001622B                 db  42h ; B
.eh_frame:000000000001622C                 db  0Eh
.eh_frame:000000000001622D                 db  20h
.eh_frame:000000000001622E                 db  42h ; B
.eh_frame:000000000001622F                 db  0Eh
.eh_frame:0000000000016230                 db  18h
.eh_frame:0000000000016231                 db  42h ; B
.eh_frame:0000000000016232                 db  0Eh
.eh_frame:0000000000016233                 db  10h
.eh_frame:0000000000016234                 db  42h ; B
.eh_frame:0000000000016235                 db  0Eh
.eh_frame:0000000000016236                 db    8
.eh_frame:0000000000016237                 db    0
.eh_frame:0000000000016238                 db  10h
.eh_frame:0000000000016239                 db    0
.eh_frame:000000000001623A                 db    0
.eh_frame:000000000001623B                 db    0
.eh_frame:000000000001623C                 db 0ECh
.eh_frame:000000000001623D                 db    4
.eh_frame:000000000001623E                 db    0
.eh_frame:000000000001623F                 db    0
.eh_frame:0000000000016240                 db  20h
.eh_frame:0000000000016241                 db 0E7h
.eh_frame:0000000000016242                 db 0FEh
.eh_frame:0000000000016243                 db 0FFh
.eh_frame:0000000000016244                 db  0Ah
.eh_frame:0000000000016245                 db    0
.eh_frame:0000000000016246                 db    0
.eh_frame:0000000000016247                 db    0
.eh_frame:0000000000016248                 db    0
.eh_frame:0000000000016249                 db    0
.eh_frame:000000000001624A                 db    0
.eh_frame:000000000001624B                 db    0
.eh_frame:000000000001624C                 db  28h ; (
.eh_frame:000000000001624D                 db    0
.eh_frame:000000000001624E                 db    0
.eh_frame:000000000001624F                 db    0
.eh_frame:0000000000016250                 db    0
.eh_frame:0000000000016251                 db    5
.eh_frame:0000000000016252                 db    0
.eh_frame:0000000000016253                 db    0
.eh_frame:0000000000016254                 db  1Ch
.eh_frame:0000000000016255                 db 0E7h
.eh_frame:0000000000016256                 db 0FEh
.eh_frame:0000000000016257                 db 0FFh
.eh_frame:0000000000016258                 db  93h
.eh_frame:0000000000016259                 db    0
.eh_frame:000000000001625A                 db    0
.eh_frame:000000000001625B                 db    0
.eh_frame:000000000001625C                 db    0
.eh_frame:000000000001625D                 db  48h ; H
.eh_frame:000000000001625E                 db  0Eh
.eh_frame:000000000001625F                 db  10h
.eh_frame:0000000000016260                 db  8Ch
.eh_frame:0000000000016261                 db    2
.eh_frame:0000000000016262                 db  48h ; H
.eh_frame:0000000000016263                 db  0Eh
.eh_frame:0000000000016264                 db  18h
.eh_frame:0000000000016265                 db  86h
.eh_frame:0000000000016266                 db    3
.eh_frame:0000000000016267                 db  41h ; A
.eh_frame:0000000000016268                 db  0Eh
.eh_frame:0000000000016269                 db  20h
.eh_frame:000000000001626A                 db  83h
.eh_frame:000000000001626B                 db    4
.eh_frame:000000000001626C                 db    2
.eh_frame:000000000001626D                 db  74h ; t
.eh_frame:000000000001626E                 db  0Eh
.eh_frame:000000000001626F                 db  18h
.eh_frame:0000000000016270                 db  4Bh ; K
.eh_frame:0000000000016271                 db  0Eh
.eh_frame:0000000000016272                 db  10h
.eh_frame:0000000000016273                 db  42h ; B
.eh_frame:0000000000016274                 db  0Eh
.eh_frame:0000000000016275                 db    8
.eh_frame:0000000000016276                 db    0
.eh_frame:0000000000016277                 db    0
.eh_frame:0000000000016278                 db  10h
.eh_frame:0000000000016279                 db    0
.eh_frame:000000000001627A                 db    0
.eh_frame:000000000001627B                 db    0
.eh_frame:000000000001627C                 db  2Ch ; ,
.eh_frame:000000000001627D                 db    5
.eh_frame:000000000001627E                 db    0
.eh_frame:000000000001627F                 db    0
.eh_frame:0000000000016280                 db  90h
.eh_frame:0000000000016281                 db 0E7h
.eh_frame:0000000000016282                 db 0FEh
.eh_frame:0000000000016283                 db 0FFh
.eh_frame:0000000000016284                 db  13h
.eh_frame:0000000000016285                 db    0
.eh_frame:0000000000016286                 db    0
.eh_frame:0000000000016287                 db    0
.eh_frame:0000000000016288                 db    0
.eh_frame:0000000000016289                 db    0
.eh_frame:000000000001628A                 db    0
.eh_frame:000000000001628B                 db    0
.eh_frame:000000000001628C                 db  10h
.eh_frame:000000000001628D                 db    0
.eh_frame:000000000001628E                 db    0
.eh_frame:000000000001628F                 db    0
.eh_frame:0000000000016290                 db  40h ; @
.eh_frame:0000000000016291                 db    5
.eh_frame:0000000000016292                 db    0
.eh_frame:0000000000016293                 db    0
.eh_frame:0000000000016294                 db  9Ch
.eh_frame:0000000000016295                 db 0E7h
.eh_frame:0000000000016296                 db 0FEh
.eh_frame:0000000000016297                 db 0FFh
.eh_frame:0000000000016298                 db  0Ch
.eh_frame:0000000000016299                 db    0
.eh_frame:000000000001629A                 db    0
.eh_frame:000000000001629B                 db    0
.eh_frame:000000000001629C                 db    0
.eh_frame:000000000001629D                 db    0
.eh_frame:000000000001629E                 db    0
.eh_frame:000000000001629F                 db    0
.eh_frame:00000000000162A0                 db  10h
.eh_frame:00000000000162A1                 db    0
.eh_frame:00000000000162A2                 db    0
.eh_frame:00000000000162A3                 db    0
.eh_frame:00000000000162A4                 db  54h ; T
.eh_frame:00000000000162A5                 db    5
.eh_frame:00000000000162A6                 db    0
.eh_frame:00000000000162A7                 db    0
.eh_frame:00000000000162A8                 db  98h
.eh_frame:00000000000162A9                 db 0E7h
.eh_frame:00000000000162AA                 db 0FEh
.eh_frame:00000000000162AB                 db 0FFh
.eh_frame:00000000000162AC                 db  18h
.eh_frame:00000000000162AD                 db    0
.eh_frame:00000000000162AE                 db    0
.eh_frame:00000000000162AF                 db    0
.eh_frame:00000000000162B0                 db    0
.eh_frame:00000000000162B1                 db    0
.eh_frame:00000000000162B2                 db    0
.eh_frame:00000000000162B3                 db    0
.eh_frame:00000000000162B4                 db  10h
.eh_frame:00000000000162B5                 db    0
.eh_frame:00000000000162B6                 db    0
.eh_frame:00000000000162B7                 db    0
.eh_frame:00000000000162B8                 db  68h ; h
.eh_frame:00000000000162B9                 db    5
.eh_frame:00000000000162BA                 db    0
.eh_frame:00000000000162BB                 db    0
.eh_frame:00000000000162BC                 db 0A4h
.eh_frame:00000000000162BD                 db 0E7h
.eh_frame:00000000000162BE                 db 0FEh
.eh_frame:00000000000162BF                 db 0FFh
.eh_frame:00000000000162C0                 db  14h
.eh_frame:00000000000162C1                 db    0
.eh_frame:00000000000162C2                 db    0
.eh_frame:00000000000162C3                 db    0
.eh_frame:00000000000162C4                 db    0
.eh_frame:00000000000162C5                 db    0
.eh_frame:00000000000162C6                 db    0
.eh_frame:00000000000162C7                 db    0
.eh_frame:00000000000162C8                 db  18h
.eh_frame:00000000000162C9                 db    0
.eh_frame:00000000000162CA                 db    0
.eh_frame:00000000000162CB                 db    0
.eh_frame:00000000000162CC                 db  7Ch ; |
.eh_frame:00000000000162CD                 db    5
.eh_frame:00000000000162CE                 db    0
.eh_frame:00000000000162CF                 db    0
.eh_frame:00000000000162D0                 db 0B0h
.eh_frame:00000000000162D1                 db 0E7h
.eh_frame:00000000000162D2                 db 0FEh
.eh_frame:00000000000162D3                 db 0FFh
.eh_frame:00000000000162D4                 db  8Eh
.eh_frame:00000000000162D5                 db    0
.eh_frame:00000000000162D6                 db    0
.eh_frame:00000000000162D7                 db    0
.eh_frame:00000000000162D8                 db    0
.eh_frame:00000000000162D9                 db  44h ; D
.eh_frame:00000000000162DA                 db  0Eh
.eh_frame:00000000000162DB                 db  50h ; P
.eh_frame:00000000000162DC                 db    2
.eh_frame:00000000000162DD                 db  7Fh ; 
.eh_frame:00000000000162DE                 db  0Ah
.eh_frame:00000000000162DF                 db  0Eh
.eh_frame:00000000000162E0                 db    8
.eh_frame:00000000000162E1                 db  41h ; A
.eh_frame:00000000000162E2                 db  0Bh
.eh_frame:00000000000162E3                 db    0
.eh_frame:00000000000162E4                 db  18h
.eh_frame:00000000000162E5                 db    0
.eh_frame:00000000000162E6                 db    0
.eh_frame:00000000000162E7                 db    0
.eh_frame:00000000000162E8                 db  98h
.eh_frame:00000000000162E9                 db    5
.eh_frame:00000000000162EA                 db    0
.eh_frame:00000000000162EB                 db    0
.eh_frame:00000000000162EC                 db  24h ; $
.eh_frame:00000000000162ED                 db 0E8h
.eh_frame:00000000000162EE                 db 0FEh
.eh_frame:00000000000162EF                 db 0FFh
.eh_frame:00000000000162F0                 db  8Ah
.eh_frame:00000000000162F1                 db    0
.eh_frame:00000000000162F2                 db    0
.eh_frame:00000000000162F3                 db    0
.eh_frame:00000000000162F4                 db    0
.eh_frame:00000000000162F5                 db  44h ; D
.eh_frame:00000000000162F6                 db  0Eh
.eh_frame:00000000000162F7                 db  50h ; P
.eh_frame:00000000000162F8                 db    2
.eh_frame:00000000000162F9                 db  7Bh ; {
.eh_frame:00000000000162FA                 db  0Ah
.eh_frame:00000000000162FB                 db  0Eh
.eh_frame:00000000000162FC                 db    8
.eh_frame:00000000000162FD                 db  41h ; A
.eh_frame:00000000000162FE                 db  0Bh
.eh_frame:00000000000162FF                 db    0
.eh_frame:0000000000016300                 db  10h
.eh_frame:0000000000016301                 db    0
.eh_frame:0000000000016302                 db    0
.eh_frame:0000000000016303                 db    0
.eh_frame:0000000000016304                 db 0B4h
.eh_frame:0000000000016305                 db    5
.eh_frame:0000000000016306                 db    0
.eh_frame:0000000000016307                 db    0
.eh_frame:0000000000016308                 db  98h
.eh_frame:0000000000016309                 db 0E8h
.eh_frame:000000000001630A                 db 0FEh
.eh_frame:000000000001630B                 db 0FFh
.eh_frame:000000000001630C                 db  0Ch
.eh_frame:000000000001630D                 db    0
.eh_frame:000000000001630E                 db    0
.eh_frame:000000000001630F                 db    0
.eh_frame:0000000000016310                 db    0
.eh_frame:0000000000016311                 db    0
.eh_frame:0000000000016312                 db    0
.eh_frame:0000000000016313                 db    0
.eh_frame:0000000000016314                 db  10h
.eh_frame:0000000000016315                 db    0
.eh_frame:0000000000016316                 db    0
.eh_frame:0000000000016317                 db    0
.eh_frame:0000000000016318                 db 0C8h
.eh_frame:0000000000016319                 db    5
.eh_frame:000000000001631A                 db    0
.eh_frame:000000000001631B                 db    0
.eh_frame:000000000001631C                 db  94h
.eh_frame:000000000001631D                 db 0E8h
.eh_frame:000000000001631E                 db 0FEh
.eh_frame:000000000001631F                 db 0FFh
.eh_frame:0000000000016320                 db  0Fh
.eh_frame:0000000000016321                 db    0
.eh_frame:0000000000016322                 db    0
.eh_frame:0000000000016323                 db    0
.eh_frame:0000000000016324                 db    0
.eh_frame:0000000000016325                 db    0
.eh_frame:0000000000016326                 db    0
.eh_frame:0000000000016327                 db    0
.eh_frame:0000000000016328                 db  18h
.eh_frame:0000000000016329                 db    0
.eh_frame:000000000001632A                 db    0
.eh_frame:000000000001632B                 db    0
.eh_frame:000000000001632C                 db 0DCh
.eh_frame:000000000001632D                 db    5
.eh_frame:000000000001632E                 db    0
.eh_frame:000000000001632F                 db    0
.eh_frame:0000000000016330                 db  90h
.eh_frame:0000000000016331                 db 0E8h
.eh_frame:0000000000016332                 db 0FEh
.eh_frame:0000000000016333                 db 0FFh
.eh_frame:0000000000016334                 db  98h
.eh_frame:0000000000016335                 db    0
.eh_frame:0000000000016336                 db    0
.eh_frame:0000000000016337                 db    0
.eh_frame:0000000000016338                 db    0
.eh_frame:0000000000016339                 db  44h ; D
.eh_frame:000000000001633A                 db  0Eh
.eh_frame:000000000001633B                 db  50h ; P
.eh_frame:000000000001633C                 db    2
.eh_frame:000000000001633D                 db  8Eh
.eh_frame:000000000001633E                 db  0Ah
.eh_frame:000000000001633F                 db  0Eh
.eh_frame:0000000000016340                 db    8
.eh_frame:0000000000016341                 db  41h ; A
.eh_frame:0000000000016342                 db  0Bh
.eh_frame:0000000000016343                 db    0
.eh_frame:0000000000016344                 db  10h
.eh_frame:0000000000016345                 db    0
.eh_frame:0000000000016346                 db    0
.eh_frame:0000000000016347                 db    0
.eh_frame:0000000000016348                 db 0F8h
.eh_frame:0000000000016349                 db    5
.eh_frame:000000000001634A                 db    0
.eh_frame:000000000001634B                 db    0
.eh_frame:000000000001634C                 db  14h
.eh_frame:000000000001634D                 db 0E9h
.eh_frame:000000000001634E                 db 0FEh
.eh_frame:000000000001634F                 db 0FFh
.eh_frame:0000000000016350                 db  10h
.eh_frame:0000000000016351                 db    0
.eh_frame:0000000000016352                 db    0
.eh_frame:0000000000016353                 db    0
.eh_frame:0000000000016354                 db    0
.eh_frame:0000000000016355                 db    0
.eh_frame:0000000000016356                 db    0
.eh_frame:0000000000016357                 db    0
.eh_frame:0000000000016358                 db  10h
.eh_frame:0000000000016359                 db    0
.eh_frame:000000000001635A                 db    0
.eh_frame:000000000001635B                 db    0
.eh_frame:000000000001635C                 db  0Ch
.eh_frame:000000000001635D                 db    6
.eh_frame:000000000001635E                 db    0
.eh_frame:000000000001635F                 db    0
.eh_frame:0000000000016360                 db  10h
.eh_frame:0000000000016361                 db 0E9h
.eh_frame:0000000000016362                 db 0FEh
.eh_frame:0000000000016363                 db 0FFh
.eh_frame:0000000000016364                 db  11h
.eh_frame:0000000000016365                 db    0
.eh_frame:0000000000016366                 db    0
.eh_frame:0000000000016367                 db    0
.eh_frame:0000000000016368                 db    0
.eh_frame:0000000000016369                 db    0
.eh_frame:000000000001636A                 db    0
.eh_frame:000000000001636B                 db    0
.eh_frame:000000000001636C                 db  10h
.eh_frame:000000000001636D                 db    0
.eh_frame:000000000001636E                 db    0
.eh_frame:000000000001636F                 db    0
.eh_frame:0000000000016370                 db  20h
.eh_frame:0000000000016371                 db    6
.eh_frame:0000000000016372                 db    0
.eh_frame:0000000000016373                 db    0
.eh_frame:0000000000016374                 db  1Ch
.eh_frame:0000000000016375                 db 0E9h
.eh_frame:0000000000016376                 db 0FEh
.eh_frame:0000000000016377                 db 0FFh
.eh_frame:0000000000016378                 db  0Ah
.eh_frame:0000000000016379                 db    0
.eh_frame:000000000001637A                 db    0
.eh_frame:000000000001637B                 db    0
.eh_frame:000000000001637C                 db    0
.eh_frame:000000000001637D                 db    0
.eh_frame:000000000001637E                 db    0
.eh_frame:000000000001637F                 db    0
.eh_frame:0000000000016380                 db  18h
.eh_frame:0000000000016381                 db    0
.eh_frame:0000000000016382                 db    0
.eh_frame:0000000000016383                 db    0
.eh_frame:0000000000016384                 db  34h ; 4
.eh_frame:0000000000016385                 db    6
.eh_frame:0000000000016386                 db    0
.eh_frame:0000000000016387                 db    0
.eh_frame:0000000000016388                 db  18h
.eh_frame:0000000000016389                 db 0E9h
.eh_frame:000000000001638A                 db 0FEh
.eh_frame:000000000001638B                 db 0FFh
.eh_frame:000000000001638C                 db  8Eh
.eh_frame:000000000001638D                 db    0
.eh_frame:000000000001638E                 db    0
.eh_frame:000000000001638F                 db    0
.eh_frame:0000000000016390                 db    0
.eh_frame:0000000000016391                 db  44h ; D
.eh_frame:0000000000016392                 db  0Eh
.eh_frame:0000000000016393                 db  50h ; P
.eh_frame:0000000000016394                 db    2
.eh_frame:0000000000016395                 db  7Fh ; 
.eh_frame:0000000000016396                 db  0Ah
.eh_frame:0000000000016397                 db  0Eh
.eh_frame:0000000000016398                 db    8
.eh_frame:0000000000016399                 db  41h ; A
.eh_frame:000000000001639A                 db  0Bh
.eh_frame:000000000001639B                 db    0
.eh_frame:000000000001639C                 db  18h
.eh_frame:000000000001639D                 db    0
.eh_frame:000000000001639E                 db    0
.eh_frame:000000000001639F                 db    0
.eh_frame:00000000000163A0                 db  50h ; P
.eh_frame:00000000000163A1                 db    6
.eh_frame:00000000000163A2                 db    0
.eh_frame:00000000000163A3                 db    0
.eh_frame:00000000000163A4                 db  8Ch
.eh_frame:00000000000163A5                 db 0E9h
.eh_frame:00000000000163A6                 db 0FEh
.eh_frame:00000000000163A7                 db 0FFh
.eh_frame:00000000000163A8                 db  91h
.eh_frame:00000000000163A9                 db    0
.eh_frame:00000000000163AA                 db    0
.eh_frame:00000000000163AB                 db    0
.eh_frame:00000000000163AC                 db    0
.eh_frame:00000000000163AD                 db  44h ; D
.eh_frame:00000000000163AE                 db  0Eh
.eh_frame:00000000000163AF                 db  50h ; P
.eh_frame:00000000000163B0                 db    2
.eh_frame:00000000000163B1                 db  82h
.eh_frame:00000000000163B2                 db  0Ah
.eh_frame:00000000000163B3                 db  0Eh
.eh_frame:00000000000163B4                 db    8
.eh_frame:00000000000163B5                 db  41h ; A
.eh_frame:00000000000163B6                 db  0Bh
.eh_frame:00000000000163B7                 db    0
.eh_frame:00000000000163B8                 db  10h
.eh_frame:00000000000163B9                 db    0
.eh_frame:00000000000163BA                 db    0
.eh_frame:00000000000163BB                 db    0
.eh_frame:00000000000163BC                 db  6Ch ; l
.eh_frame:00000000000163BD                 db    6
.eh_frame:00000000000163BE                 db    0
.eh_frame:00000000000163BF                 db    0
.eh_frame:00000000000163C0                 db  10h
.eh_frame:00000000000163C1                 db 0EAh
.eh_frame:00000000000163C2                 db 0FEh
.eh_frame:00000000000163C3                 db 0FFh
.eh_frame:00000000000163C4                 db  0Ch
.eh_frame:00000000000163C5                 db    0
.eh_frame:00000000000163C6                 db    0
.eh_frame:00000000000163C7                 db    0
.eh_frame:00000000000163C8                 db    0
.eh_frame:00000000000163C9                 db    0
.eh_frame:00000000000163CA                 db    0
.eh_frame:00000000000163CB                 db    0
.eh_frame:00000000000163CC                 db  10h
.eh_frame:00000000000163CD                 db    0
.eh_frame:00000000000163CE                 db    0
.eh_frame:00000000000163CF                 db    0
.eh_frame:00000000000163D0                 db  80h
.eh_frame:00000000000163D1                 db    6
.eh_frame:00000000000163D2                 db    0
.eh_frame:00000000000163D3                 db    0
.eh_frame:00000000000163D4                 db  0Ch
.eh_frame:00000000000163D5                 db 0EAh
.eh_frame:00000000000163D6                 db 0FEh
.eh_frame:00000000000163D7                 db 0FFh
.eh_frame:00000000000163D8                 db  17h
.eh_frame:00000000000163D9                 db    0
.eh_frame:00000000000163DA                 db    0
.eh_frame:00000000000163DB                 db    0
.eh_frame:00000000000163DC                 db    0
.eh_frame:00000000000163DD                 db    0
.eh_frame:00000000000163DE                 db    0
.eh_frame:00000000000163DF                 db    0
.eh_frame:00000000000163E0                 db  10h
.eh_frame:00000000000163E1                 db    0
.eh_frame:00000000000163E2                 db    0
.eh_frame:00000000000163E3                 db    0
.eh_frame:00000000000163E4                 db  94h
.eh_frame:00000000000163E5                 db    6
.eh_frame:00000000000163E6                 db    0
.eh_frame:00000000000163E7                 db    0
.eh_frame:00000000000163E8                 db  18h
.eh_frame:00000000000163E9                 db 0EAh
.eh_frame:00000000000163EA                 db 0FEh
.eh_frame:00000000000163EB                 db 0FFh
.eh_frame:00000000000163EC                 db  13h
.eh_frame:00000000000163ED                 db    0
.eh_frame:00000000000163EE                 db    0
.eh_frame:00000000000163EF                 db    0
.eh_frame:00000000000163F0                 db    0
.eh_frame:00000000000163F1                 db    0
.eh_frame:00000000000163F2                 db    0
.eh_frame:00000000000163F3                 db    0
.eh_frame:00000000000163F4                 db  10h
.eh_frame:00000000000163F5                 db    0
.eh_frame:00000000000163F6                 db    0
.eh_frame:00000000000163F7                 db    0
.eh_frame:00000000000163F8                 db 0A8h
.eh_frame:00000000000163F9                 db    6
.eh_frame:00000000000163FA                 db    0
.eh_frame:00000000000163FB                 db    0
.eh_frame:00000000000163FC                 db  24h ; $
.eh_frame:00000000000163FD                 db 0EAh
.eh_frame:00000000000163FE                 db 0FEh
.eh_frame:00000000000163FF                 db 0FFh
.eh_frame:0000000000016400                 db  0Ch
.eh_frame:0000000000016401                 db    0
.eh_frame:0000000000016402                 db    0
.eh_frame:0000000000016403                 db    0
.eh_frame:0000000000016404                 db    0
.eh_frame:0000000000016405                 db    0
.eh_frame:0000000000016406                 db    0
.eh_frame:0000000000016407                 db    0
.eh_frame:0000000000016408                 db  10h
.eh_frame:0000000000016409                 db    0
.eh_frame:000000000001640A                 db    0
.eh_frame:000000000001640B                 db    0
.eh_frame:000000000001640C                 db 0BCh
.eh_frame:000000000001640D                 db    6
.eh_frame:000000000001640E                 db    0
.eh_frame:000000000001640F                 db    0
.eh_frame:0000000000016410                 db  20h
.eh_frame:0000000000016411                 db 0EAh
.eh_frame:0000000000016412                 db 0FEh
.eh_frame:0000000000016413                 db 0FFh
.eh_frame:0000000000016414                 db  14h
.eh_frame:0000000000016415                 db    0
.eh_frame:0000000000016416                 db    0
.eh_frame:0000000000016417                 db    0
.eh_frame:0000000000016418                 db    0
.eh_frame:0000000000016419                 db    0
.eh_frame:000000000001641A                 db    0
.eh_frame:000000000001641B                 db    0
.eh_frame:000000000001641C                 db  10h
.eh_frame:000000000001641D                 db    0
.eh_frame:000000000001641E                 db    0
.eh_frame:000000000001641F                 db    0
.eh_frame:0000000000016420                 db 0D0h
.eh_frame:0000000000016421                 db    6
.eh_frame:0000000000016422                 db    0
.eh_frame:0000000000016423                 db    0
.eh_frame:0000000000016424                 db  2Ch ; ,
.eh_frame:0000000000016425                 db 0EAh
.eh_frame:0000000000016426                 db 0FEh
.eh_frame:0000000000016427                 db 0FFh
.eh_frame:0000000000016428                 db  13h
.eh_frame:0000000000016429                 db    0
.eh_frame:000000000001642A                 db    0
.eh_frame:000000000001642B                 db    0
.eh_frame:000000000001642C                 db    0
.eh_frame:000000000001642D                 db    0
.eh_frame:000000000001642E                 db    0
.eh_frame:000000000001642F                 db    0
.eh_frame:0000000000016430                 db  14h
.eh_frame:0000000000016431                 db    0
.eh_frame:0000000000016432                 db    0
.eh_frame:0000000000016433                 db    0
.eh_frame:0000000000016434                 db 0E4h
.eh_frame:0000000000016435                 db    6
.eh_frame:0000000000016436                 db    0
.eh_frame:0000000000016437                 db    0
.eh_frame:0000000000016438                 db  38h ; 8
.eh_frame:0000000000016439                 db 0EAh
.eh_frame:000000000001643A                 db 0FEh
.eh_frame:000000000001643B                 db 0FFh
.eh_frame:000000000001643C                 db  18h
.eh_frame:000000000001643D                 db    0
.eh_frame:000000000001643E                 db    0
.eh_frame:000000000001643F                 db    0
.eh_frame:0000000000016440                 db    0
.eh_frame:0000000000016441                 db    0
.eh_frame:0000000000016442                 db    0
.eh_frame:0000000000016443                 db    0
.eh_frame:0000000000016444                 db    0
.eh_frame:0000000000016445                 db    0
.eh_frame:0000000000016446                 db    0
.eh_frame:0000000000016447                 db    0
.eh_frame:0000000000016448                 db  34h ; 4
.eh_frame:0000000000016449                 db    0
.eh_frame:000000000001644A                 db    0
.eh_frame:000000000001644B                 db    0
.eh_frame:000000000001644C                 db 0FCh
.eh_frame:000000000001644D                 db    6
.eh_frame:000000000001644E                 db    0
.eh_frame:000000000001644F                 db    0
.eh_frame:0000000000016450                 db  40h ; @
.eh_frame:0000000000016451                 db 0EAh
.eh_frame:0000000000016452                 db 0FEh
.eh_frame:0000000000016453                 db 0FFh
.eh_frame:0000000000016454                 db  5Eh ; ^
.eh_frame:0000000000016455                 db    0
.eh_frame:0000000000016456                 db    0
.eh_frame:0000000000016457                 db    0
.eh_frame:0000000000016458                 db    0
.eh_frame:0000000000016459                 db  42h ; B
.eh_frame:000000000001645A                 db  0Eh
.eh_frame:000000000001645B                 db  10h
.eh_frame:000000000001645C                 db  8Dh
.eh_frame:000000000001645D                 db    2
.eh_frame:000000000001645E                 db  42h ; B
.eh_frame:000000000001645F                 db  0Eh
.eh_frame:0000000000016460                 db  18h
.eh_frame:0000000000016461                 db  8Ch
.eh_frame:0000000000016462                 db    3
.eh_frame:0000000000016463                 db  44h ; D
.eh_frame:0000000000016464                 db  0Eh
.eh_frame:0000000000016465                 db  20h
.eh_frame:0000000000016466                 db  86h
.eh_frame:0000000000016467                 db    4
.eh_frame:0000000000016468                 db  41h ; A
.eh_frame:0000000000016469                 db  0Eh
.eh_frame:000000000001646A                 db  28h ; (
.eh_frame:000000000001646B                 db  83h
.eh_frame:000000000001646C                 db    5
.eh_frame:000000000001646D                 db  4Ah ; J
.eh_frame:000000000001646E                 db  0Eh
.eh_frame:000000000001646F                 db  30h ; 0
.eh_frame:0000000000016470                 db    2
.eh_frame:0000000000016471                 db  41h ; A
.eh_frame:0000000000016472                 db  0Eh
.eh_frame:0000000000016473                 db  28h ; (
.eh_frame:0000000000016474                 db  44h ; D
.eh_frame:0000000000016475                 db  0Eh
.eh_frame:0000000000016476                 db  20h
.eh_frame:0000000000016477                 db  41h ; A
.eh_frame:0000000000016478                 db  0Eh
.eh_frame:0000000000016479                 db  18h
.eh_frame:000000000001647A                 db  42h ; B
.eh_frame:000000000001647B                 db  0Eh
.eh_frame:000000000001647C                 db  10h
.eh_frame:000000000001647D                 db  42h ; B
.eh_frame:000000000001647E                 db  0Eh
.eh_frame:000000000001647F                 db    8
.eh_frame:0000000000016480                 db  14h
.eh_frame:0000000000016481                 db    0
.eh_frame:0000000000016482                 db    0
.eh_frame:0000000000016483                 db    0
.eh_frame:0000000000016484                 db  34h ; 4
.eh_frame:0000000000016485                 db    7
.eh_frame:0000000000016486                 db    0
.eh_frame:0000000000016487                 db    0
.eh_frame:0000000000016488                 db  68h ; h
.eh_frame:0000000000016489                 db 0EAh
.eh_frame:000000000001648A                 db 0FEh
.eh_frame:000000000001648B                 db 0FFh
.eh_frame:000000000001648C                 db  14h
.eh_frame:000000000001648D                 db    0
.eh_frame:000000000001648E                 db    0
.eh_frame:000000000001648F                 db    0
.eh_frame:0000000000016490                 db    0
.eh_frame:0000000000016491                 db  44h ; D
.eh_frame:0000000000016492                 db  0Eh
.eh_frame:0000000000016493                 db  10h
.eh_frame:0000000000016494                 db  49h ; I
.eh_frame:0000000000016495                 db  0Eh
.eh_frame:0000000000016496                 db    8
.eh_frame:0000000000016497                 db    0
.eh_frame:0000000000016498                 db  1Ch
.eh_frame:0000000000016499                 db    0
.eh_frame:000000000001649A                 db    0
.eh_frame:000000000001649B                 db    0
.eh_frame:000000000001649C                 db  4Ch ; L
.eh_frame:000000000001649D                 db    7
.eh_frame:000000000001649E                 db    0
.eh_frame:000000000001649F                 db    0
.eh_frame:00000000000164A0                 db  70h ; p
.eh_frame:00000000000164A1                 db 0EAh
.eh_frame:00000000000164A2                 db 0FEh
.eh_frame:00000000000164A3                 db 0FFh
.eh_frame:00000000000164A4                 db  12h
.eh_frame:00000000000164A5                 db    0
.eh_frame:00000000000164A6                 db    0
.eh_frame:00000000000164A7                 db    0
.eh_frame:00000000000164A8                 db    0
.eh_frame:00000000000164A9                 db  41h ; A
.eh_frame:00000000000164AA                 db  0Eh
.eh_frame:00000000000164AB                 db  10h
.eh_frame:00000000000164AC                 db  83h
.eh_frame:00000000000164AD                 db    2
.eh_frame:00000000000164AE                 db  4Ch ; L
.eh_frame:00000000000164AF                 db  0Eh
.eh_frame:00000000000164B0                 db    8
.eh_frame:00000000000164B1                 db    0
.eh_frame:00000000000164B2                 db    0
.eh_frame:00000000000164B3                 db    0
.eh_frame:00000000000164B4                 db    0
.eh_frame:00000000000164B5                 db    0
.eh_frame:00000000000164B6                 db    0
.eh_frame:00000000000164B7                 db    0
.eh_frame:00000000000164B8                 db  34h ; 4
.eh_frame:00000000000164B9                 db    0
.eh_frame:00000000000164BA                 db    0
.eh_frame:00000000000164BB                 db    0
.eh_frame:00000000000164BC                 db  6Ch ; l
.eh_frame:00000000000164BD                 db    7
.eh_frame:00000000000164BE                 db    0
.eh_frame:00000000000164BF                 db    0
.eh_frame:00000000000164C0                 db  70h ; p
.eh_frame:00000000000164C1                 db 0EAh
.eh_frame:00000000000164C2                 db 0FEh
.eh_frame:00000000000164C3                 db 0FFh
.eh_frame:00000000000164C4                 db  3Fh ; ?
.eh_frame:00000000000164C5                 db    0
.eh_frame:00000000000164C6                 db    0
.eh_frame:00000000000164C7                 db    0
.eh_frame:00000000000164C8                 db    0
.eh_frame:00000000000164C9                 db  42h ; B
.eh_frame:00000000000164CA                 db  0Eh
.eh_frame:00000000000164CB                 db  10h
.eh_frame:00000000000164CC                 db  8Dh
.eh_frame:00000000000164CD                 db    2
.eh_frame:00000000000164CE                 db  42h ; B
.eh_frame:00000000000164CF                 db  0Eh
.eh_frame:00000000000164D0                 db  18h
.eh_frame:00000000000164D1                 db  8Ch
.eh_frame:00000000000164D2                 db    3
.eh_frame:00000000000164D3                 db  41h ; A
.eh_frame:00000000000164D4                 db  0Eh
.eh_frame:00000000000164D5                 db  20h
.eh_frame:00000000000164D6                 db  86h
.eh_frame:00000000000164D7                 db    4
.eh_frame:00000000000164D8                 db  41h ; A
.eh_frame:00000000000164D9                 db  0Eh
.eh_frame:00000000000164DA                 db  28h ; (
.eh_frame:00000000000164DB                 db  83h
.eh_frame:00000000000164DC                 db    5
.eh_frame:00000000000164DD                 db  46h ; F
.eh_frame:00000000000164DE                 db  0Eh
.eh_frame:00000000000164DF                 db  30h ; 0
.eh_frame:00000000000164E0                 db  6Ah ; j
.eh_frame:00000000000164E1                 db  0Eh
.eh_frame:00000000000164E2                 db  28h ; (
.eh_frame:00000000000164E3                 db  43h ; C
.eh_frame:00000000000164E4                 db  0Eh
.eh_frame:00000000000164E5                 db  20h
.eh_frame:00000000000164E6                 db  41h ; A
.eh_frame:00000000000164E7                 db  0Eh
.eh_frame:00000000000164E8                 db  18h
.eh_frame:00000000000164E9                 db  42h ; B
.eh_frame:00000000000164EA                 db  0Eh
.eh_frame:00000000000164EB                 db  10h
.eh_frame:00000000000164EC                 db  42h ; B
.eh_frame:00000000000164ED                 db  0Eh
.eh_frame:00000000000164EE                 db    8
.eh_frame:00000000000164EF                 db    0
.eh_frame:00000000000164F0                 db  10h
.eh_frame:00000000000164F1                 db    1
.eh_frame:00000000000164F2                 db    0
.eh_frame:00000000000164F3                 db    0
.eh_frame:00000000000164F4                 db 0A4h
.eh_frame:00000000000164F5                 db    7
.eh_frame:00000000000164F6                 db    0
.eh_frame:00000000000164F7                 db    0
.eh_frame:00000000000164F8                 db  78h ; x
.eh_frame:00000000000164F9                 db 0EAh
.eh_frame:00000000000164FA                 db 0FEh
.eh_frame:00000000000164FB                 db 0FFh
.eh_frame:00000000000164FC                 db  17h
.eh_frame:00000000000164FD                 db    4
.eh_frame:00000000000164FE                 db    0
.eh_frame:00000000000164FF                 db    0
.eh_frame:0000000000016500                 db    0
.eh_frame:0000000000016501                 db  42h ; B
.eh_frame:0000000000016502                 db  0Eh
.eh_frame:0000000000016503                 db  10h
.eh_frame:0000000000016504                 db  8Fh
.eh_frame:0000000000016505                 db    2
.eh_frame:0000000000016506                 db  42h ; B
.eh_frame:0000000000016507                 db  0Eh
.eh_frame:0000000000016508                 db  18h
.eh_frame:0000000000016509                 db  8Eh
.eh_frame:000000000001650A                 db    3
.eh_frame:000000000001650B                 db  42h ; B
.eh_frame:000000000001650C                 db  0Eh
.eh_frame:000000000001650D                 db  20h
.eh_frame:000000000001650E                 db  8Dh
.eh_frame:000000000001650F                 db    4
.eh_frame:0000000000016510                 db  42h ; B
.eh_frame:0000000000016511                 db  0Eh
.eh_frame:0000000000016512                 db  28h ; (
.eh_frame:0000000000016513                 db  8Ch
.eh_frame:0000000000016514                 db    5
.eh_frame:0000000000016515                 db  44h ; D
.eh_frame:0000000000016516                 db  0Eh
.eh_frame:0000000000016517                 db  30h ; 0
.eh_frame:0000000000016518                 db  86h
.eh_frame:0000000000016519                 db    6
.eh_frame:000000000001651A                 db  41h ; A
.eh_frame:000000000001651B                 db  0Eh
.eh_frame:000000000001651C                 db  38h ; 8
.eh_frame:000000000001651D                 db  83h
.eh_frame:000000000001651E                 db    7
.eh_frame:000000000001651F                 db  4Ah ; J
.eh_frame:0000000000016520                 db  0Eh
.eh_frame:0000000000016521                 db  60h ; `
.eh_frame:0000000000016522                 db    2
.eh_frame:0000000000016523                 db 0DDh
.eh_frame:0000000000016524                 db  0Eh
.eh_frame:0000000000016525                 db  68h ; h
.eh_frame:0000000000016526                 db  57h ; W
.eh_frame:0000000000016527                 db  0Eh
.eh_frame:0000000000016528                 db  70h ; p
.eh_frame:0000000000016529                 db  42h ; B
.eh_frame:000000000001652A                 db  0Eh
.eh_frame:000000000001652B                 db  78h ; x
.eh_frame:000000000001652C                 db  42h ; B
.eh_frame:000000000001652D                 db  0Eh
.eh_frame:000000000001652E                 db  80h
.eh_frame:000000000001652F                 db    1
.eh_frame:0000000000016530                 db  42h ; B
.eh_frame:0000000000016531                 db  0Eh
.eh_frame:0000000000016532                 db  88h
.eh_frame:0000000000016533                 db    1
.eh_frame:0000000000016534                 db  42h ; B
.eh_frame:0000000000016535                 db  0Eh
.eh_frame:0000000000016536                 db  90h
.eh_frame:0000000000016537                 db    1
.eh_frame:0000000000016538                 db  53h ; S
.eh_frame:0000000000016539                 db  0Eh
.eh_frame:000000000001653A                 db  60h ; `
.eh_frame:000000000001653B                 db  44h ; D
.eh_frame:000000000001653C                 db  0Ah
.eh_frame:000000000001653D                 db  0Eh
.eh_frame:000000000001653E                 db  38h ; 8
.eh_frame:000000000001653F                 db  41h ; A
.eh_frame:0000000000016540                 db  0Eh
.eh_frame:0000000000016541                 db  30h ; 0
.eh_frame:0000000000016542                 db  41h ; A
.eh_frame:0000000000016543                 db  0Eh
.eh_frame:0000000000016544                 db  28h ; (
.eh_frame:0000000000016545                 db  42h ; B
.eh_frame:0000000000016546                 db  0Eh
.eh_frame:0000000000016547                 db  20h
.eh_frame:0000000000016548                 db  42h ; B
.eh_frame:0000000000016549                 db  0Eh
.eh_frame:000000000001654A                 db  18h
.eh_frame:000000000001654B                 db  42h ; B
.eh_frame:000000000001654C                 db  0Eh
.eh_frame:000000000001654D                 db  10h
.eh_frame:000000000001654E                 db  42h ; B
.eh_frame:000000000001654F                 db  0Eh
.eh_frame:0000000000016550                 db    8
.eh_frame:0000000000016551                 db  44h ; D
.eh_frame:0000000000016552                 db  0Bh
.eh_frame:0000000000016553                 db    2
.eh_frame:0000000000016554                 db  78h ; x
.eh_frame:0000000000016555                 db  0Ah
.eh_frame:0000000000016556                 db  0Eh
.eh_frame:0000000000016557                 db  68h ; h
.eh_frame:0000000000016558                 db  48h ; H
.eh_frame:0000000000016559                 db  0Bh
.eh_frame:000000000001655A                 db  5Ah ; Z
.eh_frame:000000000001655B                 db  0Ah
.eh_frame:000000000001655C                 db  0Eh
.eh_frame:000000000001655D                 db  38h ; 8
.eh_frame:000000000001655E                 db  47h ; G
.eh_frame:000000000001655F                 db  0Eh
.eh_frame:0000000000016560                 db  30h ; 0
.eh_frame:0000000000016561                 db  41h ; A
.eh_frame:0000000000016562                 db  0Eh
.eh_frame:0000000000016563                 db  28h ; (
.eh_frame:0000000000016564                 db  42h ; B
.eh_frame:0000000000016565                 db  0Eh
.eh_frame:0000000000016566                 db  20h
.eh_frame:0000000000016567                 db  42h ; B
.eh_frame:0000000000016568                 db  0Eh
.eh_frame:0000000000016569                 db  18h
.eh_frame:000000000001656A                 db  42h ; B
.eh_frame:000000000001656B                 db  0Eh
.eh_frame:000000000001656C                 db  10h
.eh_frame:000000000001656D                 db  42h ; B
.eh_frame:000000000001656E                 db  0Eh
.eh_frame:000000000001656F                 db    8
.eh_frame:0000000000016570                 db  56h ; V
.eh_frame:0000000000016571                 db  0Bh
.eh_frame:0000000000016572                 db  5Eh ; ^
.eh_frame:0000000000016573                 db  0Ah
.eh_frame:0000000000016574                 db  0Eh
.eh_frame:0000000000016575                 db  38h ; 8
.eh_frame:0000000000016576                 db  52h ; R
.eh_frame:0000000000016577                 db  0Eh
.eh_frame:0000000000016578                 db  30h ; 0
.eh_frame:0000000000016579                 db  41h ; A
.eh_frame:000000000001657A                 db  0Eh
.eh_frame:000000000001657B                 db  28h ; (
.eh_frame:000000000001657C                 db  42h ; B
.eh_frame:000000000001657D                 db  0Eh
.eh_frame:000000000001657E                 db  20h
.eh_frame:000000000001657F                 db  42h ; B
.eh_frame:0000000000016580                 db  0Eh
.eh_frame:0000000000016581                 db  18h
.eh_frame:0000000000016582                 db  42h ; B
.eh_frame:0000000000016583                 db  0Eh
.eh_frame:0000000000016584                 db  10h
.eh_frame:0000000000016585                 db  42h ; B
.eh_frame:0000000000016586                 db  0Eh
.eh_frame:0000000000016587                 db    8
.eh_frame:0000000000016588                 db  4Fh ; O
.eh_frame:0000000000016589                 db  0Bh
.eh_frame:000000000001658A                 db  62h ; b
.eh_frame:000000000001658B                 db  0Ah
.eh_frame:000000000001658C                 db  0Eh
.eh_frame:000000000001658D                 db  38h ; 8
.eh_frame:000000000001658E                 db  50h ; P
.eh_frame:000000000001658F                 db  0Eh
.eh_frame:0000000000016590                 db  30h ; 0
.eh_frame:0000000000016591                 db  41h ; A
.eh_frame:0000000000016592                 db  0Eh
.eh_frame:0000000000016593                 db  28h ; (
.eh_frame:0000000000016594                 db  42h ; B
.eh_frame:0000000000016595                 db  0Eh
.eh_frame:0000000000016596                 db  20h
.eh_frame:0000000000016597                 db  42h ; B
.eh_frame:0000000000016598                 db  0Eh
.eh_frame:0000000000016599                 db  18h
.eh_frame:000000000001659A                 db  42h ; B
.eh_frame:000000000001659B                 db  0Eh
.eh_frame:000000000001659C                 db  10h
.eh_frame:000000000001659D                 db  42h ; B
.eh_frame:000000000001659E                 db  0Eh
.eh_frame:000000000001659F                 db    8
.eh_frame:00000000000165A0                 db  55h ; U
.eh_frame:00000000000165A1                 db  0Bh
.eh_frame:00000000000165A2                 db  66h ; f
.eh_frame:00000000000165A3                 db  0Eh
.eh_frame:00000000000165A4                 db  68h ; h
.eh_frame:00000000000165A5                 db  42h ; B
.eh_frame:00000000000165A6                 db  0Eh
.eh_frame:00000000000165A7                 db  70h ; p
.eh_frame:00000000000165A8                 db  5Ch ; \
.eh_frame:00000000000165A9                 db  0Eh
.eh_frame:00000000000165AA                 db  68h ; h
.eh_frame:00000000000165AB                 db  41h ; A
.eh_frame:00000000000165AC                 db  0Eh
.eh_frame:00000000000165AD                 db  60h ; `
.eh_frame:00000000000165AE                 db  44h ; D
.eh_frame:00000000000165AF                 db  0Ah
.eh_frame:00000000000165B0                 db  0Eh
.eh_frame:00000000000165B1                 db  38h ; 8
.eh_frame:00000000000165B2                 db  41h ; A
.eh_frame:00000000000165B3                 db  0Eh
.eh_frame:00000000000165B4                 db  30h ; 0
.eh_frame:00000000000165B5                 db  41h ; A
.eh_frame:00000000000165B6                 db  0Eh
.eh_frame:00000000000165B7                 db  28h ; (
.eh_frame:00000000000165B8                 db  42h ; B
.eh_frame:00000000000165B9                 db  0Eh
.eh_frame:00000000000165BA                 db  20h
.eh_frame:00000000000165BB                 db  42h ; B
.eh_frame:00000000000165BC                 db  0Eh
.eh_frame:00000000000165BD                 db  18h
.eh_frame:00000000000165BE                 db  42h ; B
.eh_frame:00000000000165BF                 db  0Eh
.eh_frame:00000000000165C0                 db  10h
.eh_frame:00000000000165C1                 db  42h ; B
.eh_frame:00000000000165C2                 db  0Eh
.eh_frame:00000000000165C3                 db    8
.eh_frame:00000000000165C4                 db  45h ; E
.eh_frame:00000000000165C5                 db  0Bh
.eh_frame:00000000000165C6                 db  68h ; h
.eh_frame:00000000000165C7                 db  0Ah
.eh_frame:00000000000165C8                 db  0Eh
.eh_frame:00000000000165C9                 db  68h ; h
.eh_frame:00000000000165CA                 db  48h ; H
.eh_frame:00000000000165CB                 db  0Bh
.eh_frame:00000000000165CC                 db  72h ; r
.eh_frame:00000000000165CD                 db  0Eh
.eh_frame:00000000000165CE                 db  68h ; h
.eh_frame:00000000000165CF                 db  45h ; E
.eh_frame:00000000000165D0                 db  0Eh
.eh_frame:00000000000165D1                 db  70h ; p
.eh_frame:00000000000165D2                 db  42h ; B
.eh_frame:00000000000165D3                 db  0Eh
.eh_frame:00000000000165D4                 db  78h ; x
.eh_frame:00000000000165D5                 db  42h ; B
.eh_frame:00000000000165D6                 db  0Eh
.eh_frame:00000000000165D7                 db  80h
.eh_frame:00000000000165D8                 db    1
.eh_frame:00000000000165D9                 db  5Eh ; ^
.eh_frame:00000000000165DA                 db  0Eh
.eh_frame:00000000000165DB                 db  60h ; `
.eh_frame:00000000000165DC                 db  44h ; D
.eh_frame:00000000000165DD                 db  0Ah
.eh_frame:00000000000165DE                 db  0Eh
.eh_frame:00000000000165DF                 db  38h ; 8
.eh_frame:00000000000165E0                 db  41h ; A
.eh_frame:00000000000165E1                 db  0Eh
.eh_frame:00000000000165E2                 db  30h ; 0
.eh_frame:00000000000165E3                 db  41h ; A
.eh_frame:00000000000165E4                 db  0Eh
.eh_frame:00000000000165E5                 db  28h ; (
.eh_frame:00000000000165E6                 db  42h ; B
.eh_frame:00000000000165E7                 db  0Eh
.eh_frame:00000000000165E8                 db  20h
.eh_frame:00000000000165E9                 db  42h ; B
.eh_frame:00000000000165EA                 db  0Eh
.eh_frame:00000000000165EB                 db  18h
.eh_frame:00000000000165EC                 db  42h ; B
.eh_frame:00000000000165ED                 db  0Eh
.eh_frame:00000000000165EE                 db  10h
.eh_frame:00000000000165EF                 db  42h ; B
.eh_frame:00000000000165F0                 db  0Eh
.eh_frame:00000000000165F1                 db    8
.eh_frame:00000000000165F2                 db  41h ; A
.eh_frame:00000000000165F3                 db  0Bh
.eh_frame:00000000000165F4                 db  79h ; y
.eh_frame:00000000000165F5                 db  0Ah
.eh_frame:00000000000165F6                 db  0Eh
.eh_frame:00000000000165F7                 db  68h ; h
.eh_frame:00000000000165F8                 db  42h ; B
.eh_frame:00000000000165F9                 db  0Eh
.eh_frame:00000000000165FA                 db  70h ; p
.eh_frame:00000000000165FB                 db  42h ; B
.eh_frame:00000000000165FC                 db  0Eh
.eh_frame:00000000000165FD                 db  78h ; x
.eh_frame:00000000000165FE                 db  42h ; B
.eh_frame:00000000000165FF                 db  0Eh
.eh_frame:0000000000016600                 db  80h
.eh_frame:0000000000016601                 db    1
.eh_frame:0000000000016602                 db  51h ; Q
.eh_frame:0000000000016603                 db  0Bh
.eh_frame:0000000000016604                 db  10h
.eh_frame:0000000000016605                 db    0
.eh_frame:0000000000016606                 db    0
.eh_frame:0000000000016607                 db    0
.eh_frame:0000000000016608                 db 0B8h
.eh_frame:0000000000016609                 db    8
.eh_frame:000000000001660A                 db    0
.eh_frame:000000000001660B                 db    0
.eh_frame:000000000001660C                 db  84h
.eh_frame:000000000001660D                 db 0EDh
.eh_frame:000000000001660E                 db 0FEh
.eh_frame:000000000001660F                 db 0FFh
.eh_frame:0000000000016610                 db  20h
.eh_frame:0000000000016611                 db    0
.eh_frame:0000000000016612                 db    0
.eh_frame:0000000000016613                 db    0
.eh_frame:0000000000016614                 db    0
.eh_frame:0000000000016615                 db    0
.eh_frame:0000000000016616                 db    0
.eh_frame:0000000000016617                 db    0
.eh_frame:0000000000016618                 db  18h
.eh_frame:0000000000016619                 db    0
.eh_frame:000000000001661A                 db    0
.eh_frame:000000000001661B                 db    0
.eh_frame:000000000001661C                 db 0CCh
.eh_frame:000000000001661D                 db    8
.eh_frame:000000000001661E                 db    0
.eh_frame:000000000001661F                 db    0
.eh_frame:0000000000016620                 db  90h
.eh_frame:0000000000016621                 db 0EDh
.eh_frame:0000000000016622                 db 0FEh
.eh_frame:0000000000016623                 db 0FFh
.eh_frame:0000000000016624                 db  78h ; x
.eh_frame:0000000000016625                 db    0
.eh_frame:0000000000016626                 db    0
.eh_frame:0000000000016627                 db    0
.eh_frame:0000000000016628                 db    0
.eh_frame:0000000000016629                 db  44h ; D
.eh_frame:000000000001662A                 db  0Eh
.eh_frame:000000000001662B                 db  70h ; p
.eh_frame:000000000001662C                 db    2
.eh_frame:000000000001662D                 db  60h ; `
.eh_frame:000000000001662E                 db  0Ah
.eh_frame:000000000001662F                 db  0Eh
.eh_frame:0000000000016630                 db    8
.eh_frame:0000000000016631                 db  41h ; A
.eh_frame:0000000000016632                 db  0Bh
.eh_frame:0000000000016633                 db    0
.eh_frame:0000000000016634                 db  28h ; (
.eh_frame:0000000000016635                 db    0
.eh_frame:0000000000016636                 db    0
.eh_frame:0000000000016637                 db    0
.eh_frame:0000000000016638                 db 0E8h
.eh_frame:0000000000016639                 db    8
.eh_frame:000000000001663A                 db    0
.eh_frame:000000000001663B                 db    0
.eh_frame:000000000001663C                 db 0F4h
.eh_frame:000000000001663D                 db 0EDh
.eh_frame:000000000001663E                 db 0FEh
.eh_frame:000000000001663F                 db 0FFh
.eh_frame:0000000000016640                 db 0D5h
.eh_frame:0000000000016641                 db    0
.eh_frame:0000000000016642                 db    0
.eh_frame:0000000000016643                 db    0
.eh_frame:0000000000016644                 db    0
.eh_frame:0000000000016645                 db  41h ; A
.eh_frame:0000000000016646                 db  0Eh
.eh_frame:0000000000016647                 db  10h
.eh_frame:0000000000016648                 db  86h
.eh_frame:0000000000016649                 db    2
.eh_frame:000000000001664A                 db  41h ; A
.eh_frame:000000000001664B                 db  0Eh
.eh_frame:000000000001664C                 db  18h
.eh_frame:000000000001664D                 db  83h
.eh_frame:000000000001664E                 db    3
.eh_frame:000000000001664F                 db  50h ; P
.eh_frame:0000000000016650                 db  0Eh
.eh_frame:0000000000016651                 db 0D0h
.eh_frame:0000000000016652                 db    1
.eh_frame:0000000000016653                 db    2
.eh_frame:0000000000016654                 db 0ABh
.eh_frame:0000000000016655                 db  0Ah
.eh_frame:0000000000016656                 db  0Eh
.eh_frame:0000000000016657                 db  18h
.eh_frame:0000000000016658                 db  41h ; A
.eh_frame:0000000000016659                 db  0Eh
.eh_frame:000000000001665A                 db  10h
.eh_frame:000000000001665B                 db  41h ; A
.eh_frame:000000000001665C                 db  0Eh
.eh_frame:000000000001665D                 db    8
.eh_frame:000000000001665E                 db  41h ; A
.eh_frame:000000000001665F                 db  0Bh
.eh_frame:0000000000016660                 db  1Ch
.eh_frame:0000000000016661                 db    0
.eh_frame:0000000000016662                 db    0
.eh_frame:0000000000016663                 db    0
.eh_frame:0000000000016664                 db  14h
.eh_frame:0000000000016665                 db    9
.eh_frame:0000000000016666                 db    0
.eh_frame:0000000000016667                 db    0
.eh_frame:0000000000016668                 db 0A8h
.eh_frame:0000000000016669                 db 0EEh
.eh_frame:000000000001666A                 db 0FEh
.eh_frame:000000000001666B                 db 0FFh
.eh_frame:000000000001666C                 db  80h
.eh_frame:000000000001666D                 db    0
.eh_frame:000000000001666E                 db    0
.eh_frame:000000000001666F                 db    0
.eh_frame:0000000000016670                 db    0
.eh_frame:0000000000016671                 db  41h ; A
.eh_frame:0000000000016672                 db  0Eh
.eh_frame:0000000000016673                 db  10h
.eh_frame:0000000000016674                 db  83h
.eh_frame:0000000000016675                 db    2
.eh_frame:0000000000016676                 db    2
.eh_frame:0000000000016677                 db  7Ah ; z
.eh_frame:0000000000016678                 db  0Eh
.eh_frame:0000000000016679                 db    8
.eh_frame:000000000001667A                 db    0
.eh_frame:000000000001667B                 db    0
.eh_frame:000000000001667C                 db    0
.eh_frame:000000000001667D                 db    0
.eh_frame:000000000001667E                 db    0
.eh_frame:000000000001667F                 db    0
.eh_frame:0000000000016680                 db  18h
.eh_frame:0000000000016681                 db    0
.eh_frame:0000000000016682                 db    0
.eh_frame:0000000000016683                 db    0
.eh_frame:0000000000016684                 db  34h ; 4
.eh_frame:0000000000016685                 db    9
.eh_frame:0000000000016686                 db    0
.eh_frame:0000000000016687                 db    0
.eh_frame:0000000000016688                 db    8
.eh_frame:0000000000016689                 db 0EFh
.eh_frame:000000000001668A                 db 0FEh
.eh_frame:000000000001668B                 db 0FFh
.eh_frame:000000000001668C                 db  1Ah
.eh_frame:000000000001668D                 db    0
.eh_frame:000000000001668E                 db    0
.eh_frame:000000000001668F                 db    0
.eh_frame:0000000000016690                 db    0
.eh_frame:0000000000016691                 db  41h ; A
.eh_frame:0000000000016692                 db  0Eh
.eh_frame:0000000000016693                 db  10h
.eh_frame:0000000000016694                 db  83h
.eh_frame:0000000000016695                 db    2
.eh_frame:0000000000016696                 db  53h ; S
.eh_frame:0000000000016697                 db  0Ah
.eh_frame:0000000000016698                 db  0Eh
.eh_frame:0000000000016699                 db    8
.eh_frame:000000000001669A                 db  41h ; A
.eh_frame:000000000001669B                 db  0Bh
.eh_frame:000000000001669C                 db  10h
.eh_frame:000000000001669D                 db    0
.eh_frame:000000000001669E                 db    0
.eh_frame:000000000001669F                 db    0
.eh_frame:00000000000166A0                 db  50h ; P
.eh_frame:00000000000166A1                 db    9
.eh_frame:00000000000166A2                 db    0
.eh_frame:00000000000166A3                 db    0
.eh_frame:00000000000166A4                 db  0Ch
.eh_frame:00000000000166A5                 db 0EFh
.eh_frame:00000000000166A6                 db 0FEh
.eh_frame:00000000000166A7                 db 0FFh
.eh_frame:00000000000166A8                 db  24h ; $
.eh_frame:00000000000166A9                 db    0
.eh_frame:00000000000166AA                 db    0
.eh_frame:00000000000166AB                 db    0
.eh_frame:00000000000166AC                 db    0
.eh_frame:00000000000166AD                 db  5Fh ; _
.eh_frame:00000000000166AE                 db  0Eh
.eh_frame:00000000000166AF                 db  10h
.eh_frame:00000000000166B0                 db  10h
.eh_frame:00000000000166B1                 db    0
.eh_frame:00000000000166B2                 db    0
.eh_frame:00000000000166B3                 db    0
.eh_frame:00000000000166B4                 db  64h ; d
.eh_frame:00000000000166B5                 db    9
.eh_frame:00000000000166B6                 db    0
.eh_frame:00000000000166B7                 db    0
.eh_frame:00000000000166B8                 db  28h ; (
.eh_frame:00000000000166B9                 db 0EFh
.eh_frame:00000000000166BA                 db 0FEh
.eh_frame:00000000000166BB                 db 0FFh
.eh_frame:00000000000166BC                 db    2
.eh_frame:00000000000166BD                 db    0
.eh_frame:00000000000166BE                 db    0
.eh_frame:00000000000166BF                 db    0
.eh_frame:00000000000166C0                 db    0
.eh_frame:00000000000166C1                 db    0
.eh_frame:00000000000166C2                 db    0
.eh_frame:00000000000166C3                 db    0
.eh_frame:00000000000166C4                 db  20h
.eh_frame:00000000000166C5                 db    0
.eh_frame:00000000000166C6                 db    0
.eh_frame:00000000000166C7                 db    0
.eh_frame:00000000000166C8                 db  78h ; x
.eh_frame:00000000000166C9                 db    9
.eh_frame:00000000000166CA                 db    0
.eh_frame:00000000000166CB                 db    0
.eh_frame:00000000000166CC                 db  24h ; $
.eh_frame:00000000000166CD                 db 0EFh
.eh_frame:00000000000166CE                 db 0FEh
.eh_frame:00000000000166CF                 db 0FFh
.eh_frame:00000000000166D0                 db  36h ; 6
.eh_frame:00000000000166D1                 db    0
.eh_frame:00000000000166D2                 db    0
.eh_frame:00000000000166D3                 db    0
.eh_frame:00000000000166D4                 db    0
.eh_frame:00000000000166D5                 db  44h ; D
.eh_frame:00000000000166D6                 db  0Eh
.eh_frame:00000000000166D7                 db  10h
.eh_frame:00000000000166D8                 db  83h
.eh_frame:00000000000166D9                 db    2
.eh_frame:00000000000166DA                 db  5Dh ; ]
.eh_frame:00000000000166DB                 db  0Ah
.eh_frame:00000000000166DC                 db  0Eh
.eh_frame:00000000000166DD                 db    8
.eh_frame:00000000000166DE                 db  47h ; G
.eh_frame:00000000000166DF                 db  0Bh
.eh_frame:00000000000166E0                 db  48h ; H
.eh_frame:00000000000166E1                 db  0Ah
.eh_frame:00000000000166E2                 db  0Eh
.eh_frame:00000000000166E3                 db    8
.eh_frame:00000000000166E4                 db  41h ; A
.eh_frame:00000000000166E5                 db  0Bh
.eh_frame:00000000000166E6                 db    0
.eh_frame:00000000000166E7                 db    0
.eh_frame:00000000000166E8                 db  10h
.eh_frame:00000000000166E9                 db    0
.eh_frame:00000000000166EA                 db    0
.eh_frame:00000000000166EB                 db    0
.eh_frame:00000000000166EC                 db  9Ch
.eh_frame:00000000000166ED                 db    9
.eh_frame:00000000000166EE                 db    0
.eh_frame:00000000000166EF                 db    0
.eh_frame:00000000000166F0                 db  40h ; @
.eh_frame:00000000000166F1                 db 0EFh
.eh_frame:00000000000166F2                 db 0FEh
.eh_frame:00000000000166F3                 db 0FFh
.eh_frame:00000000000166F4                 db  24h ; $
.eh_frame:00000000000166F5                 db    0
.eh_frame:00000000000166F6                 db    0
.eh_frame:00000000000166F7                 db    0
.eh_frame:00000000000166F8                 db    0
.eh_frame:00000000000166F9                 db  5Fh ; _
.eh_frame:00000000000166FA                 db  0Eh
.eh_frame:00000000000166FB                 db  10h
.eh_frame:00000000000166FC                 db  14h
.eh_frame:00000000000166FD                 db    0
.eh_frame:00000000000166FE                 db    0
.eh_frame:00000000000166FF                 db    0
.eh_frame:0000000000016700                 db 0B0h
.eh_frame:0000000000016701                 db    9
.eh_frame:0000000000016702                 db    0
.eh_frame:0000000000016703                 db    0
.eh_frame:0000000000016704                 db  5Ch ; \
.eh_frame:0000000000016705                 db 0EFh
.eh_frame:0000000000016706                 db 0FEh
.eh_frame:0000000000016707                 db 0FFh
.eh_frame:0000000000016708                 db  82h
.eh_frame:0000000000016709                 db    0
.eh_frame:000000000001670A                 db    0
.eh_frame:000000000001670B                 db    0
.eh_frame:000000000001670C                 db    0
.eh_frame:000000000001670D                 db    2
.eh_frame:000000000001670E                 db  5Fh ; _
.eh_frame:000000000001670F                 db  0Eh
.eh_frame:0000000000016710                 db  10h
.eh_frame:0000000000016711                 db  49h ; I
.eh_frame:0000000000016712                 db  0Eh
.eh_frame:0000000000016713                 db    8
.eh_frame:0000000000016714                 db  14h
.eh_frame:0000000000016715                 db    0
.eh_frame:0000000000016716                 db    0
.eh_frame:0000000000016717                 db    0
.eh_frame:0000000000016718                 db 0C8h
.eh_frame:0000000000016719                 db    9
.eh_frame:000000000001671A                 db    0
.eh_frame:000000000001671B                 db    0
.eh_frame:000000000001671C                 db 0D4h
.eh_frame:000000000001671D                 db 0EFh
.eh_frame:000000000001671E                 db 0FEh
.eh_frame:000000000001671F                 db 0FFh
.eh_frame:0000000000016720                 db  4Ah ; J
.eh_frame:0000000000016721                 db    0
.eh_frame:0000000000016722                 db    0
.eh_frame:0000000000016723                 db    0
.eh_frame:0000000000016724                 db    0
.eh_frame:0000000000016725                 db    2
.eh_frame:0000000000016726                 db  45h ; E
.eh_frame:0000000000016727                 db  0Eh
.eh_frame:0000000000016728                 db  10h
.eh_frame:0000000000016729                 db    0
.eh_frame:000000000001672A                 db    0
.eh_frame:000000000001672B                 db    0
.eh_frame:000000000001672C                 db  18h
.eh_frame:000000000001672D                 db    0
.eh_frame:000000000001672E                 db    0
.eh_frame:000000000001672F                 db    0
.eh_frame:0000000000016730                 db 0E0h
.eh_frame:0000000000016731                 db    9
.eh_frame:0000000000016732                 db    0
.eh_frame:0000000000016733                 db    0
.eh_frame:0000000000016734                 db  0Ch
.eh_frame:0000000000016735                 db 0F0h
.eh_frame:0000000000016736                 db 0FEh
.eh_frame:0000000000016737                 db 0FFh
.eh_frame:0000000000016738                 db  17h
.eh_frame:0000000000016739                 db    0
.eh_frame:000000000001673A                 db    0
.eh_frame:000000000001673B                 db    0
.eh_frame:000000000001673C                 db    0
.eh_frame:000000000001673D                 db  41h ; A
.eh_frame:000000000001673E                 db  0Eh
.eh_frame:000000000001673F                 db  10h
.eh_frame:0000000000016740                 db  83h
.eh_frame:0000000000016741                 db    2
.eh_frame:0000000000016742                 db  51h ; Q
.eh_frame:0000000000016743                 db  0Eh
.eh_frame:0000000000016744                 db    8
.eh_frame:0000000000016745                 db    0
.eh_frame:0000000000016746                 db    0
.eh_frame:0000000000016747                 db    0
.eh_frame:0000000000016748                 db  18h
.eh_frame:0000000000016749                 db    0
.eh_frame:000000000001674A                 db    0
.eh_frame:000000000001674B                 db    0
.eh_frame:000000000001674C                 db 0FCh
.eh_frame:000000000001674D                 db    9
.eh_frame:000000000001674E                 db    0
.eh_frame:000000000001674F                 db    0
.eh_frame:0000000000016750                 db  10h
.eh_frame:0000000000016751                 db 0F0h
.eh_frame:0000000000016752                 db 0FEh
.eh_frame:0000000000016753                 db 0FFh
.eh_frame:0000000000016754                 db  2Eh ; .
.eh_frame:0000000000016755                 db    0
.eh_frame:0000000000016756                 db    0
.eh_frame:0000000000016757                 db    0
.eh_frame:0000000000016758                 db    0
.eh_frame:0000000000016759                 db  47h ; G
.eh_frame:000000000001675A                 db  0Eh
.eh_frame:000000000001675B                 db  10h
.eh_frame:000000000001675C                 db  61h ; a
.eh_frame:000000000001675D                 db  0Ah
.eh_frame:000000000001675E                 db  0Eh
.eh_frame:000000000001675F                 db    8
.eh_frame:0000000000016760                 db  41h ; A
.eh_frame:0000000000016761                 db  0Bh
.eh_frame:0000000000016762                 db    0
.eh_frame:0000000000016763                 db    0
.eh_frame:0000000000016764                 db  24h ; $
.eh_frame:0000000000016765                 db    0
.eh_frame:0000000000016766                 db    0
.eh_frame:0000000000016767                 db    0
.eh_frame:0000000000016768                 db  18h
.eh_frame:0000000000016769                 db  0Ah
.eh_frame:000000000001676A                 db    0
.eh_frame:000000000001676B                 db    0
.eh_frame:000000000001676C                 db  24h ; $
.eh_frame:000000000001676D                 db 0F0h
.eh_frame:000000000001676E                 db 0FEh
.eh_frame:000000000001676F                 db 0FFh
.eh_frame:0000000000016770                 db  28h ; (
.eh_frame:0000000000016771                 db    0
.eh_frame:0000000000016772                 db    0
.eh_frame:0000000000016773                 db    0
.eh_frame:0000000000016774                 db    0
.eh_frame:0000000000016775                 db  41h ; A
.eh_frame:0000000000016776                 db  0Eh
.eh_frame:0000000000016777                 db  10h
.eh_frame:0000000000016778                 db  86h
.eh_frame:0000000000016779                 db    2
.eh_frame:000000000001677A                 db  41h ; A
.eh_frame:000000000001677B                 db  0Eh
.eh_frame:000000000001677C                 db  18h
.eh_frame:000000000001677D                 db  83h
.eh_frame:000000000001677E                 db    3
.eh_frame:000000000001677F                 db  4Dh ; M
.eh_frame:0000000000016780                 db  0Eh
.eh_frame:0000000000016781                 db  20h
.eh_frame:0000000000016782                 db  49h ; I
.eh_frame:0000000000016783                 db  0Eh
.eh_frame:0000000000016784                 db  18h
.eh_frame:0000000000016785                 db  47h ; G
.eh_frame:0000000000016786                 db  0Eh
.eh_frame:0000000000016787                 db  10h
.eh_frame:0000000000016788                 db  41h ; A
.eh_frame:0000000000016789                 db  0Eh
.eh_frame:000000000001678A                 db    8
.eh_frame:000000000001678B                 db    0
.eh_frame:000000000001678C                 db  18h
.eh_frame:000000000001678D                 db    0
.eh_frame:000000000001678E                 db    0
.eh_frame:000000000001678F                 db    0
.eh_frame:0000000000016790                 db  40h ; @
.eh_frame:0000000000016791                 db  0Ah
.eh_frame:0000000000016792                 db    0
.eh_frame:0000000000016793                 db    0
.eh_frame:0000000000016794                 db  2Ch ; ,
.eh_frame:0000000000016795                 db 0F0h
.eh_frame:0000000000016796                 db 0FEh
.eh_frame:0000000000016797                 db 0FFh
.eh_frame:0000000000016798                 db  13h
.eh_frame:0000000000016799                 db    0
.eh_frame:000000000001679A                 db    0
.eh_frame:000000000001679B                 db    0
.eh_frame:000000000001679C                 db    0
.eh_frame:000000000001679D                 db  41h ; A
.eh_frame:000000000001679E                 db  0Eh
.eh_frame:000000000001679F                 db  10h
.eh_frame:00000000000167A0                 db  83h
.eh_frame:00000000000167A1                 db    2
.eh_frame:00000000000167A2                 db  50h ; P
.eh_frame:00000000000167A3                 db  0Eh
.eh_frame:00000000000167A4                 db    8
.eh_frame:00000000000167A5                 db    0
.eh_frame:00000000000167A6                 db    0
.eh_frame:00000000000167A7                 db    0
.eh_frame:00000000000167A8                 db  14h
.eh_frame:00000000000167A9                 db    0
.eh_frame:00000000000167AA                 db    0
.eh_frame:00000000000167AB                 db    0
.eh_frame:00000000000167AC                 db  5Ch ; \
.eh_frame:00000000000167AD                 db  0Ah
.eh_frame:00000000000167AE                 db    0
.eh_frame:00000000000167AF                 db    0
.eh_frame:00000000000167B0                 db  30h ; 0
.eh_frame:00000000000167B1                 db 0F0h
.eh_frame:00000000000167B2                 db 0FEh
.eh_frame:00000000000167B3                 db 0FFh
.eh_frame:00000000000167B4                 db  35h ; 5
.eh_frame:00000000000167B5                 db    0
.eh_frame:00000000000167B6                 db    0
.eh_frame:00000000000167B7                 db    0
.eh_frame:00000000000167B8                 db    0
.eh_frame:00000000000167B9                 db  4Bh ; K
.eh_frame:00000000000167BA                 db  0Eh
.eh_frame:00000000000167BB                 db  10h
.eh_frame:00000000000167BC                 db    0
.eh_frame:00000000000167BD                 db    0
.eh_frame:00000000000167BE                 db    0
.eh_frame:00000000000167BF                 db    0
.eh_frame:00000000000167C0                 db  2Ch ; ,
.eh_frame:00000000000167C1                 db    0
.eh_frame:00000000000167C2                 db    0
.eh_frame:00000000000167C3                 db    0
.eh_frame:00000000000167C4                 db  74h ; t
.eh_frame:00000000000167C5                 db  0Ah
.eh_frame:00000000000167C6                 db    0
.eh_frame:00000000000167C7                 db    0
.eh_frame:00000000000167C8                 db  58h ; X
.eh_frame:00000000000167C9                 db 0F0h
.eh_frame:00000000000167CA                 db 0FEh
.eh_frame:00000000000167CB                 db 0FFh
.eh_frame:00000000000167CC                 db  57h ; W
.eh_frame:00000000000167CD                 db    0
.eh_frame:00000000000167CE                 db    0
.eh_frame:00000000000167CF                 db    0
.eh_frame:00000000000167D0                 db    0
.eh_frame:00000000000167D1                 db  63h ; c
.eh_frame:00000000000167D2                 db  0Eh
.eh_frame:00000000000167D3                 db  10h
.eh_frame:00000000000167D4                 db  8Ch
.eh_frame:00000000000167D5                 db    2
.eh_frame:00000000000167D6                 db  41h ; A
.eh_frame:00000000000167D7                 db  0Eh
.eh_frame:00000000000167D8                 db  18h
.eh_frame:00000000000167D9                 db  86h
.eh_frame:00000000000167DA                 db    3
.eh_frame:00000000000167DB                 db  44h ; D
.eh_frame:00000000000167DC                 db  0Eh
.eh_frame:00000000000167DD                 db  20h
.eh_frame:00000000000167DE                 db  83h
.eh_frame:00000000000167DF                 db    4
.eh_frame:00000000000167E0                 db  6Bh ; k
.eh_frame:00000000000167E1                 db  0Eh
.eh_frame:00000000000167E2                 db  18h
.eh_frame:00000000000167E3                 db  41h ; A
.eh_frame:00000000000167E4                 db  0Eh
.eh_frame:00000000000167E5                 db  10h
.eh_frame:00000000000167E6                 db  42h ; B
.eh_frame:00000000000167E7                 db  0Eh
.eh_frame:00000000000167E8                 db    8
.eh_frame:00000000000167E9                 db    0
.eh_frame:00000000000167EA                 db    0
.eh_frame:00000000000167EB                 db    0
.eh_frame:00000000000167EC                 db    0
.eh_frame:00000000000167ED                 db    0
.eh_frame:00000000000167EE                 db    0
.eh_frame:00000000000167EF                 db    0
.eh_frame:00000000000167F0                 db  3Ch ; <
.eh_frame:00000000000167F1                 db    0
.eh_frame:00000000000167F2                 db    0
.eh_frame:00000000000167F3                 db    0
.eh_frame:00000000000167F4                 db 0A4h
.eh_frame:00000000000167F5                 db  0Ah
.eh_frame:00000000000167F6                 db    0
.eh_frame:00000000000167F7                 db    0
.eh_frame:00000000000167F8                 db  88h
.eh_frame:00000000000167F9                 db 0F0h
.eh_frame:00000000000167FA                 db 0FEh
.eh_frame:00000000000167FB                 db 0FFh
.eh_frame:00000000000167FC                 db  83h
.eh_frame:00000000000167FD                 db    0
.eh_frame:00000000000167FE                 db    0
.eh_frame:00000000000167FF                 db    0
.eh_frame:0000000000016800                 db    0
.eh_frame:0000000000016801                 db  42h ; B
.eh_frame:0000000000016802                 db  0Eh
.eh_frame:0000000000016803                 db  10h
.eh_frame:0000000000016804                 db  8Dh
.eh_frame:0000000000016805                 db    2
.eh_frame:0000000000016806                 db  42h ; B
.eh_frame:0000000000016807                 db  0Eh
.eh_frame:0000000000016808                 db  18h
.eh_frame:0000000000016809                 db  8Ch
.eh_frame:000000000001680A                 db    3
.eh_frame:000000000001680B                 db  44h ; D
.eh_frame:000000000001680C                 db  0Eh
.eh_frame:000000000001680D                 db  20h
.eh_frame:000000000001680E                 db  86h
.eh_frame:000000000001680F                 db    4
.eh_frame:0000000000016810                 db  41h ; A
.eh_frame:0000000000016811                 db  0Eh
.eh_frame:0000000000016812                 db  28h ; (
.eh_frame:0000000000016813                 db  83h
.eh_frame:0000000000016814                 db    5
.eh_frame:0000000000016815                 db  4Ah ; J
.eh_frame:0000000000016816                 db  0Eh
.eh_frame:0000000000016817                 db  40h ; @
.eh_frame:0000000000016818                 db    2
.eh_frame:0000000000016819                 db  64h ; d
.eh_frame:000000000001681A                 db  0Ah
.eh_frame:000000000001681B                 db  0Eh
.eh_frame:000000000001681C                 db  28h ; (
.eh_frame:000000000001681D                 db  41h ; A
.eh_frame:000000000001681E                 db  0Eh
.eh_frame:000000000001681F                 db  20h
.eh_frame:0000000000016820                 db  41h ; A
.eh_frame:0000000000016821                 db  0Eh
.eh_frame:0000000000016822                 db  18h
.eh_frame:0000000000016823                 db  42h ; B
.eh_frame:0000000000016824                 db  0Eh
.eh_frame:0000000000016825                 db  10h
.eh_frame:0000000000016826                 db  42h ; B
.eh_frame:0000000000016827                 db  0Eh
.eh_frame:0000000000016828                 db    8
.eh_frame:0000000000016829                 db  41h ; A
.eh_frame:000000000001682A                 db  0Bh
.eh_frame:000000000001682B                 db    0
.eh_frame:000000000001682C                 db    0
.eh_frame:000000000001682D                 db    0
.eh_frame:000000000001682E                 db    0
.eh_frame:000000000001682F                 db    0
.eh_frame:0000000000016830                 db  10h
.eh_frame:0000000000016831                 db    0
.eh_frame:0000000000016832                 db    0
.eh_frame:0000000000016833                 db    0
.eh_frame:0000000000016834                 db 0E4h
.eh_frame:0000000000016835                 db  0Ah
.eh_frame:0000000000016836                 db    0
.eh_frame:0000000000016837                 db    0
.eh_frame:0000000000016838                 db 0D8h
.eh_frame:0000000000016839                 db 0F0h
.eh_frame:000000000001683A                 db 0FEh
.eh_frame:000000000001683B                 db 0FFh
.eh_frame:000000000001683C                 db  2Fh ; /
.eh_frame:000000000001683D                 db    1
.eh_frame:000000000001683E                 db    0
.eh_frame:000000000001683F                 db    0
.eh_frame:0000000000016840                 db    0
.eh_frame:0000000000016841                 db    0
.eh_frame:0000000000016842                 db    0
.eh_frame:0000000000016843                 db    0
.eh_frame:0000000000016844                 db  10h
.eh_frame:0000000000016845                 db    0
.eh_frame:0000000000016846                 db    0
.eh_frame:0000000000016847                 db    0
.eh_frame:0000000000016848                 db 0F8h
.eh_frame:0000000000016849                 db  0Ah
.eh_frame:000000000001684A                 db    0
.eh_frame:000000000001684B                 db    0
.eh_frame:000000000001684C                 db 0F4h
.eh_frame:000000000001684D                 db 0F1h
.eh_frame:000000000001684E                 db 0FEh
.eh_frame:000000000001684F                 db 0FFh
.eh_frame:0000000000016850                 db  1Dh
.eh_frame:0000000000016851                 db    0
.eh_frame:0000000000016852                 db    0
.eh_frame:0000000000016853                 db    0
.eh_frame:0000000000016854                 db    0
.eh_frame:0000000000016855                 db    0
.eh_frame:0000000000016856                 db    0
.eh_frame:0000000000016857                 db    0
.eh_frame:0000000000016858                 db  90h
.eh_frame:0000000000016859                 db    0
.eh_frame:000000000001685A                 db    0
.eh_frame:000000000001685B                 db    0
.eh_frame:000000000001685C                 db  0Ch
.eh_frame:000000000001685D                 db  0Bh
.eh_frame:000000000001685E                 db    0
.eh_frame:000000000001685F                 db    0
.eh_frame:0000000000016860                 db    0
.eh_frame:0000000000016861                 db 0F2h
.eh_frame:0000000000016862                 db 0FEh
.eh_frame:0000000000016863                 db 0FFh
.eh_frame:0000000000016864                 db  2Ch ; ,
.eh_frame:0000000000016865                 db    2
.eh_frame:0000000000016866                 db    0
.eh_frame:0000000000016867                 db    0
.eh_frame:0000000000016868                 db    0
.eh_frame:0000000000016869                 db  42h ; B
.eh_frame:000000000001686A                 db  0Eh
.eh_frame:000000000001686B                 db  10h
.eh_frame:000000000001686C                 db  8Fh
.eh_frame:000000000001686D                 db    2
.eh_frame:000000000001686E                 db  42h ; B
.eh_frame:000000000001686F                 db  0Eh
.eh_frame:0000000000016870                 db  18h
.eh_frame:0000000000016871                 db  8Eh
.eh_frame:0000000000016872                 db    3
.eh_frame:0000000000016873                 db  45h ; E
.eh_frame:0000000000016874                 db  0Eh
.eh_frame:0000000000016875                 db  20h
.eh_frame:0000000000016876                 db  8Dh
.eh_frame:0000000000016877                 db    4
.eh_frame:0000000000016878                 db  42h ; B
.eh_frame:0000000000016879                 db  0Eh
.eh_frame:000000000001687A                 db  28h ; (
.eh_frame:000000000001687B                 db  8Ch
.eh_frame:000000000001687C                 db    5
.eh_frame:000000000001687D                 db  45h ; E
.eh_frame:000000000001687E                 db  0Eh
.eh_frame:000000000001687F                 db  30h ; 0
.eh_frame:0000000000016880                 db  86h
.eh_frame:0000000000016881                 db    6
.eh_frame:0000000000016882                 db  41h ; A
.eh_frame:0000000000016883                 db  0Eh
.eh_frame:0000000000016884                 db  38h ; 8
.eh_frame:0000000000016885                 db  83h
.eh_frame:0000000000016886                 db    7
.eh_frame:0000000000016887                 db  47h ; G
.eh_frame:0000000000016888                 db  0Eh
.eh_frame:0000000000016889                 db  80h
.eh_frame:000000000001688A                 db    1
.eh_frame:000000000001688B                 db    2
.eh_frame:000000000001688C                 db 0BAh
.eh_frame:000000000001688D                 db  0Ah
.eh_frame:000000000001688E                 db  0Eh
.eh_frame:000000000001688F                 db  38h ; 8
.eh_frame:0000000000016890                 db  46h ; F
.eh_frame:0000000000016891                 db  0Eh
.eh_frame:0000000000016892                 db  30h ; 0
.eh_frame:0000000000016893                 db  41h ; A
.eh_frame:0000000000016894                 db  0Eh
.eh_frame:0000000000016895                 db  28h ; (
.eh_frame:0000000000016896                 db  42h ; B
.eh_frame:0000000000016897                 db  0Eh
.eh_frame:0000000000016898                 db  20h
.eh_frame:0000000000016899                 db  42h ; B
.eh_frame:000000000001689A                 db  0Eh
.eh_frame:000000000001689B                 db  18h
.eh_frame:000000000001689C                 db  42h ; B
.eh_frame:000000000001689D                 db  0Eh
.eh_frame:000000000001689E                 db  10h
.eh_frame:000000000001689F                 db  42h ; B
.eh_frame:00000000000168A0                 db  0Eh
.eh_frame:00000000000168A1                 db    8
.eh_frame:00000000000168A2                 db  47h ; G
.eh_frame:00000000000168A3                 db  0Bh
.eh_frame:00000000000168A4                 db    2
.eh_frame:00000000000168A5                 db 0E1h
.eh_frame:00000000000168A6                 db  0Ah
.eh_frame:00000000000168A7                 db  0Eh
.eh_frame:00000000000168A8                 db  38h ; 8
.eh_frame:00000000000168A9                 db  44h ; D
.eh_frame:00000000000168AA                 db  0Eh
.eh_frame:00000000000168AB                 db  30h ; 0
.eh_frame:00000000000168AC                 db  43h ; C
.eh_frame:00000000000168AD                 db  0Eh
.eh_frame:00000000000168AE                 db  28h ; (
.eh_frame:00000000000168AF                 db  42h ; B
.eh_frame:00000000000168B0                 db  0Eh
.eh_frame:00000000000168B1                 db  20h
.eh_frame:00000000000168B2                 db  42h ; B
.eh_frame:00000000000168B3                 db  0Eh
.eh_frame:00000000000168B4                 db  18h
.eh_frame:00000000000168B5                 db  42h ; B
.eh_frame:00000000000168B6                 db  0Eh
.eh_frame:00000000000168B7                 db  10h
.eh_frame:00000000000168B8                 db  42h ; B
.eh_frame:00000000000168B9                 db  0Eh
.eh_frame:00000000000168BA                 db    8
.eh_frame:00000000000168BB                 db  48h ; H
.eh_frame:00000000000168BC                 db  0Bh
.eh_frame:00000000000168BD                 db  59h ; Y
.eh_frame:00000000000168BE                 db  0Ah
.eh_frame:00000000000168BF                 db  0Eh
.eh_frame:00000000000168C0                 db  38h ; 8
.eh_frame:00000000000168C1                 db  43h ; C
.eh_frame:00000000000168C2                 db  0Eh
.eh_frame:00000000000168C3                 db  30h ; 0
.eh_frame:00000000000168C4                 db  41h ; A
.eh_frame:00000000000168C5                 db  0Eh
.eh_frame:00000000000168C6                 db  28h ; (
.eh_frame:00000000000168C7                 db  42h ; B
.eh_frame:00000000000168C8                 db  0Eh
.eh_frame:00000000000168C9                 db  20h
.eh_frame:00000000000168CA                 db  42h ; B
.eh_frame:00000000000168CB                 db  0Eh
.eh_frame:00000000000168CC                 db  18h
.eh_frame:00000000000168CD                 db  42h ; B
.eh_frame:00000000000168CE                 db  0Eh
.eh_frame:00000000000168CF                 db  10h
.eh_frame:00000000000168D0                 db  42h ; B
.eh_frame:00000000000168D1                 db  0Eh
.eh_frame:00000000000168D2                 db    8
.eh_frame:00000000000168D3                 db  4Bh ; K
.eh_frame:00000000000168D4                 db  0Bh
.eh_frame:00000000000168D5                 db  49h ; I
.eh_frame:00000000000168D6                 db  0Eh
.eh_frame:00000000000168D7                 db  38h ; 8
.eh_frame:00000000000168D8                 db  41h ; A
.eh_frame:00000000000168D9                 db  0Eh
.eh_frame:00000000000168DA                 db  30h ; 0
.eh_frame:00000000000168DB                 db  41h ; A
.eh_frame:00000000000168DC                 db  0Eh
.eh_frame:00000000000168DD                 db  28h ; (
.eh_frame:00000000000168DE                 db  48h ; H
.eh_frame:00000000000168DF                 db  0Eh
.eh_frame:00000000000168E0                 db  20h
.eh_frame:00000000000168E1                 db  44h ; D
.eh_frame:00000000000168E2                 db  0Eh
.eh_frame:00000000000168E3                 db  18h
.eh_frame:00000000000168E4                 db  42h ; B
.eh_frame:00000000000168E5                 db  0Eh
.eh_frame:00000000000168E6                 db  10h
.eh_frame:00000000000168E7                 db  42h ; B
.eh_frame:00000000000168E8                 db  0Eh
.eh_frame:00000000000168E9                 db    8
.eh_frame:00000000000168EA                 db    0
.eh_frame:00000000000168EB                 db    0
.eh_frame:00000000000168EC                 db  10h
.eh_frame:00000000000168ED                 db    0
.eh_frame:00000000000168EE                 db    0
.eh_frame:00000000000168EF                 db    0
.eh_frame:00000000000168F0                 db 0A0h
.eh_frame:00000000000168F1                 db  0Bh
.eh_frame:00000000000168F2                 db    0
.eh_frame:00000000000168F3                 db    0
.eh_frame:00000000000168F4                 db  9Ch
.eh_frame:00000000000168F5                 db 0F3h
.eh_frame:00000000000168F6                 db 0FEh
.eh_frame:00000000000168F7                 db 0FFh
.eh_frame:00000000000168F8                 db  66h ; f
.eh_frame:00000000000168F9                 db    0
.eh_frame:00000000000168FA                 db    0
.eh_frame:00000000000168FB                 db    0
.eh_frame:00000000000168FC                 db    0
.eh_frame:00000000000168FD                 db    0
.eh_frame:00000000000168FE                 db    0
.eh_frame:00000000000168FF                 db    0
.eh_frame:0000000000016900                 db  28h ; (
.eh_frame:0000000000016901                 db    0
.eh_frame:0000000000016902                 db    0
.eh_frame:0000000000016903                 db    0
.eh_frame:0000000000016904                 db 0B4h
.eh_frame:0000000000016905                 db  0Bh
.eh_frame:0000000000016906                 db    0
.eh_frame:0000000000016907                 db    0
.eh_frame:0000000000016908                 db 0F8h
.eh_frame:0000000000016909                 db 0F3h
.eh_frame:000000000001690A                 db 0FEh
.eh_frame:000000000001690B                 db 0FFh
.eh_frame:000000000001690C                 db  6Bh ; k
.eh_frame:000000000001690D                 db    0
.eh_frame:000000000001690E                 db    0
.eh_frame:000000000001690F                 db    0
.eh_frame:0000000000016910                 db    0
.eh_frame:0000000000016911                 db  42h ; B
.eh_frame:0000000000016912                 db  0Eh
.eh_frame:0000000000016913                 db  10h
.eh_frame:0000000000016914                 db  8Ch
.eh_frame:0000000000016915                 db    2
.eh_frame:0000000000016916                 db  44h ; D
.eh_frame:0000000000016917                 db  0Eh
.eh_frame:0000000000016918                 db  18h
.eh_frame:0000000000016919                 db  86h
.eh_frame:000000000001691A                 db    3
.eh_frame:000000000001691B                 db  44h ; D
.eh_frame:000000000001691C                 db  0Eh
.eh_frame:000000000001691D                 db  20h
.eh_frame:000000000001691E                 db  83h
.eh_frame:000000000001691F                 db    4
.eh_frame:0000000000016920                 db    2
.eh_frame:0000000000016921                 db  5Dh ; ]
.eh_frame:0000000000016922                 db  0Eh
.eh_frame:0000000000016923                 db  18h
.eh_frame:0000000000016924                 db  41h ; A
.eh_frame:0000000000016925                 db  0Eh
.eh_frame:0000000000016926                 db  10h
.eh_frame:0000000000016927                 db  42h ; B
.eh_frame:0000000000016928                 db  0Eh
.eh_frame:0000000000016929                 db    8
.eh_frame:000000000001692A                 db    0
.eh_frame:000000000001692B                 db    0
.eh_frame:000000000001692C                 db  28h ; (
.eh_frame:000000000001692D                 db    0
.eh_frame:000000000001692E                 db    0
.eh_frame:000000000001692F                 db    0
.eh_frame:0000000000016930                 db 0E0h
.eh_frame:0000000000016931                 db  0Bh
.eh_frame:0000000000016932                 db    0
.eh_frame:0000000000016933                 db    0
.eh_frame:0000000000016934                 db  3Ch ; <
.eh_frame:0000000000016935                 db 0F4h
.eh_frame:0000000000016936                 db 0FEh
.eh_frame:0000000000016937                 db 0FFh
.eh_frame:0000000000016938                 db  51h ; Q
.eh_frame:0000000000016939                 db    0
.eh_frame:000000000001693A                 db    0
.eh_frame:000000000001693B                 db    0
.eh_frame:000000000001693C                 db    0
.eh_frame:000000000001693D                 db  42h ; B
.eh_frame:000000000001693E                 db  0Eh
.eh_frame:000000000001693F                 db  10h
.eh_frame:0000000000016940                 db  8Ch
.eh_frame:0000000000016941                 db    2
.eh_frame:0000000000016942                 db  44h ; D
.eh_frame:0000000000016943                 db  0Eh
.eh_frame:0000000000016944                 db  18h
.eh_frame:0000000000016945                 db  86h
.eh_frame:0000000000016946                 db    3
.eh_frame:0000000000016947                 db  44h ; D
.eh_frame:0000000000016948                 db  0Eh
.eh_frame:0000000000016949                 db  20h
.eh_frame:000000000001694A                 db  83h
.eh_frame:000000000001694B                 db    4
.eh_frame:000000000001694C                 db    2
.eh_frame:000000000001694D                 db  43h ; C
.eh_frame:000000000001694E                 db  0Eh
.eh_frame:000000000001694F                 db  18h
.eh_frame:0000000000016950                 db  41h ; A
.eh_frame:0000000000016951                 db  0Eh
.eh_frame:0000000000016952                 db  10h
.eh_frame:0000000000016953                 db  42h ; B
.eh_frame:0000000000016954                 db  0Eh
.eh_frame:0000000000016955                 db    8
.eh_frame:0000000000016956                 db    0
.eh_frame:0000000000016957                 db    0
.eh_frame:0000000000016958                 db  30h ; 0
.eh_frame:0000000000016959                 db    0
.eh_frame:000000000001695A                 db    0
.eh_frame:000000000001695B                 db    0
.eh_frame:000000000001695C                 db  0Ch
.eh_frame:000000000001695D                 db  0Ch
.eh_frame:000000000001695E                 db    0
.eh_frame:000000000001695F                 db    0
.eh_frame:0000000000016960                 db  70h ; p
.eh_frame:0000000000016961                 db 0F4h
.eh_frame:0000000000016962                 db 0FEh
.eh_frame:0000000000016963                 db 0FFh
.eh_frame:0000000000016964                 db  9Ch
.eh_frame:0000000000016965                 db    0
.eh_frame:0000000000016966                 db    0
.eh_frame:0000000000016967                 db    0
.eh_frame:0000000000016968                 db    0
.eh_frame:0000000000016969                 db  41h ; A
.eh_frame:000000000001696A                 db  0Eh
.eh_frame:000000000001696B                 db  10h
.eh_frame:000000000001696C                 db  86h
.eh_frame:000000000001696D                 db    2
.eh_frame:000000000001696E                 db  41h ; A
.eh_frame:000000000001696F                 db  0Eh
.eh_frame:0000000000016970                 db  18h
.eh_frame:0000000000016971                 db  83h
.eh_frame:0000000000016972                 db    3
.eh_frame:0000000000016973                 db  4Ah ; J
.eh_frame:0000000000016974                 db  0Eh
.eh_frame:0000000000016975                 db  20h
.eh_frame:0000000000016976                 db    2
.eh_frame:0000000000016977                 db  62h ; b
.eh_frame:0000000000016978                 db  0Ah
.eh_frame:0000000000016979                 db  0Eh
.eh_frame:000000000001697A                 db  18h
.eh_frame:000000000001697B                 db  43h ; C
.eh_frame:000000000001697C                 db  0Eh
.eh_frame:000000000001697D                 db  10h
.eh_frame:000000000001697E                 db  41h ; A
.eh_frame:000000000001697F                 db  0Eh
.eh_frame:0000000000016980                 db    8
.eh_frame:0000000000016981                 db  46h ; F
.eh_frame:0000000000016982                 db  0Bh
.eh_frame:0000000000016983                 db  5Ch ; \
.eh_frame:0000000000016984                 db  0Eh
.eh_frame:0000000000016985                 db  18h
.eh_frame:0000000000016986                 db  46h ; F
.eh_frame:0000000000016987                 db  0Eh
.eh_frame:0000000000016988                 db  10h
.eh_frame:0000000000016989                 db  41h ; A
.eh_frame:000000000001698A                 db  0Eh
.eh_frame:000000000001698B                 db    8
.eh_frame:000000000001698C                 db  28h ; (
.eh_frame:000000000001698D                 db    0
.eh_frame:000000000001698E                 db    0
.eh_frame:000000000001698F                 db    0
.eh_frame:0000000000016990                 db  40h ; @
.eh_frame:0000000000016991                 db  0Ch
.eh_frame:0000000000016992                 db    0
.eh_frame:0000000000016993                 db    0
.eh_frame:0000000000016994                 db 0DCh
.eh_frame:0000000000016995                 db 0F4h
.eh_frame:0000000000016996                 db 0FEh
.eh_frame:0000000000016997                 db 0FFh
.eh_frame:0000000000016998                 db  64h ; d
.eh_frame:0000000000016999                 db    0
.eh_frame:000000000001699A                 db    0
.eh_frame:000000000001699B                 db    0
.eh_frame:000000000001699C                 db    0
.eh_frame:000000000001699D                 db  41h ; A
.eh_frame:000000000001699E                 db  0Eh
.eh_frame:000000000001699F                 db  10h
.eh_frame:00000000000169A0                 db  86h
.eh_frame:00000000000169A1                 db    2
.eh_frame:00000000000169A2                 db  41h ; A
.eh_frame:00000000000169A3                 db  0Eh
.eh_frame:00000000000169A4                 db  18h
.eh_frame:00000000000169A5                 db  83h
.eh_frame:00000000000169A6                 db    3
.eh_frame:00000000000169A7                 db  4Ah ; J
.eh_frame:00000000000169A8                 db  0Eh
.eh_frame:00000000000169A9                 db  20h
.eh_frame:00000000000169AA                 db  62h ; b
.eh_frame:00000000000169AB                 db  0Ah
.eh_frame:00000000000169AC                 db  0Eh
.eh_frame:00000000000169AD                 db  18h
.eh_frame:00000000000169AE                 db  41h ; A
.eh_frame:00000000000169AF                 db  0Eh
.eh_frame:00000000000169B0                 db  10h
.eh_frame:00000000000169B1                 db  41h ; A
.eh_frame:00000000000169B2                 db  0Eh
.eh_frame:00000000000169B3                 db    8
.eh_frame:00000000000169B4                 db  48h ; H
.eh_frame:00000000000169B5                 db  0Bh
.eh_frame:00000000000169B6                 db    0
.eh_frame:00000000000169B7                 db    0
.eh_frame:00000000000169B8                 db  34h ; 4
.eh_frame:00000000000169B9                 db    0
.eh_frame:00000000000169BA                 db    0
.eh_frame:00000000000169BB                 db    0
.eh_frame:00000000000169BC                 db  6Ch ; l
.eh_frame:00000000000169BD                 db  0Ch
.eh_frame:00000000000169BE                 db    0
.eh_frame:00000000000169BF                 db    0
.eh_frame:00000000000169C0                 db  20h
.eh_frame:00000000000169C1                 db 0F5h
.eh_frame:00000000000169C2                 db 0FEh
.eh_frame:00000000000169C3                 db 0FFh
.eh_frame:00000000000169C4                 db  2Ch ; ,
.eh_frame:00000000000169C5                 db    1
.eh_frame:00000000000169C6                 db    0
.eh_frame:00000000000169C7                 db    0
.eh_frame:00000000000169C8                 db    0
.eh_frame:00000000000169C9                 db  41h ; A
.eh_frame:00000000000169CA                 db  0Eh
.eh_frame:00000000000169CB                 db  10h
.eh_frame:00000000000169CC                 db  86h
.eh_frame:00000000000169CD                 db    2
.eh_frame:00000000000169CE                 db  41h ; A
.eh_frame:00000000000169CF                 db  0Eh
.eh_frame:00000000000169D0                 db  18h
.eh_frame:00000000000169D1                 db  83h
.eh_frame:00000000000169D2                 db    3
.eh_frame:00000000000169D3                 db  4Ah ; J
.eh_frame:00000000000169D4                 db  0Eh
.eh_frame:00000000000169D5                 db  20h
.eh_frame:00000000000169D6                 db  66h ; f
.eh_frame:00000000000169D7                 db  0Ah
.eh_frame:00000000000169D8                 db  0Eh
.eh_frame:00000000000169D9                 db  18h
.eh_frame:00000000000169DA                 db  41h ; A
.eh_frame:00000000000169DB                 db  0Eh
.eh_frame:00000000000169DC                 db  10h
.eh_frame:00000000000169DD                 db  41h ; A
.eh_frame:00000000000169DE                 db  0Eh
.eh_frame:00000000000169DF                 db    8
.eh_frame:00000000000169E0                 db  44h ; D
.eh_frame:00000000000169E1                 db  0Bh
.eh_frame:00000000000169E2                 db  6Dh ; m
.eh_frame:00000000000169E3                 db  0Ah
.eh_frame:00000000000169E4                 db  0Eh
.eh_frame:00000000000169E5                 db  18h
.eh_frame:00000000000169E6                 db  46h ; F
.eh_frame:00000000000169E7                 db  0Eh
.eh_frame:00000000000169E8                 db  10h
.eh_frame:00000000000169E9                 db  41h ; A
.eh_frame:00000000000169EA                 db  0Eh
.eh_frame:00000000000169EB                 db    8
.eh_frame:00000000000169EC                 db  44h ; D
.eh_frame:00000000000169ED                 db  0Bh
.eh_frame:00000000000169EE                 db    0
.eh_frame:00000000000169EF                 db    0
.eh_frame:00000000000169F0                 db  4Ch ; L
.eh_frame:00000000000169F1                 db    0
.eh_frame:00000000000169F2                 db    0
.eh_frame:00000000000169F3                 db    0
.eh_frame:00000000000169F4                 db 0A4h
.eh_frame:00000000000169F5                 db  0Ch
.eh_frame:00000000000169F6                 db    0
.eh_frame:00000000000169F7                 db    0
.eh_frame:00000000000169F8                 db  18h
.eh_frame:00000000000169F9                 db 0F6h
.eh_frame:00000000000169FA                 db 0FEh
.eh_frame:00000000000169FB                 db 0FFh
.eh_frame:00000000000169FC                 db 0ECh
.eh_frame:00000000000169FD                 db    0
.eh_frame:00000000000169FE                 db    0
.eh_frame:00000000000169FF                 db    0
.eh_frame:0000000000016A00                 db    0
.eh_frame:0000000000016A01                 db  42h ; B
.eh_frame:0000000000016A02                 db  0Eh
.eh_frame:0000000000016A03                 db  10h
.eh_frame:0000000000016A04                 db  8Eh
.eh_frame:0000000000016A05                 db    2
.eh_frame:0000000000016A06                 db  42h ; B
.eh_frame:0000000000016A07                 db  0Eh
.eh_frame:0000000000016A08                 db  18h
.eh_frame:0000000000016A09                 db  8Dh
.eh_frame:0000000000016A0A                 db    3
.eh_frame:0000000000016A0B                 db  45h ; E
.eh_frame:0000000000016A0C                 db  0Eh
.eh_frame:0000000000016A0D                 db  20h
.eh_frame:0000000000016A0E                 db  8Ch
.eh_frame:0000000000016A0F                 db    4
.eh_frame:0000000000016A10                 db  41h ; A
.eh_frame:0000000000016A11                 db  0Eh
.eh_frame:0000000000016A12                 db  28h ; (
.eh_frame:0000000000016A13                 db  86h
.eh_frame:0000000000016A14                 db    5
.eh_frame:0000000000016A15                 db  44h ; D
.eh_frame:0000000000016A16                 db  0Eh
.eh_frame:0000000000016A17                 db  30h ; 0
.eh_frame:0000000000016A18                 db  83h
.eh_frame:0000000000016A19                 db    6
.eh_frame:0000000000016A1A                 db    2
.eh_frame:0000000000016A1B                 db  71h ; q
.eh_frame:0000000000016A1C                 db  0Ah
.eh_frame:0000000000016A1D                 db  0Eh
.eh_frame:0000000000016A1E                 db  28h ; (
.eh_frame:0000000000016A1F                 db  46h ; F
.eh_frame:0000000000016A20                 db  0Eh
.eh_frame:0000000000016A21                 db  20h
.eh_frame:0000000000016A22                 db  42h ; B
.eh_frame:0000000000016A23                 db  0Eh
.eh_frame:0000000000016A24                 db  18h
.eh_frame:0000000000016A25                 db  42h ; B
.eh_frame:0000000000016A26                 db  0Eh
.eh_frame:0000000000016A27                 db  10h
.eh_frame:0000000000016A28                 db  42h ; B
.eh_frame:0000000000016A29                 db  0Eh
.eh_frame:0000000000016A2A                 db    8
.eh_frame:0000000000016A2B                 db  45h ; E
.eh_frame:0000000000016A2C                 db  0Bh
.eh_frame:0000000000016A2D                 db  6Eh ; n
.eh_frame:0000000000016A2E                 db  0Ah
.eh_frame:0000000000016A2F                 db  0Eh
.eh_frame:0000000000016A30                 db  28h ; (
.eh_frame:0000000000016A31                 db  41h ; A
.eh_frame:0000000000016A32                 db  0Eh
.eh_frame:0000000000016A33                 db  20h
.eh_frame:0000000000016A34                 db  42h ; B
.eh_frame:0000000000016A35                 db  0Eh
.eh_frame:0000000000016A36                 db  18h
.eh_frame:0000000000016A37                 db  42h ; B
.eh_frame:0000000000016A38                 db  0Eh
.eh_frame:0000000000016A39                 db  10h
.eh_frame:0000000000016A3A                 db  42h ; B
.eh_frame:0000000000016A3B                 db  0Eh
.eh_frame:0000000000016A3C                 db    8
.eh_frame:0000000000016A3D                 db  41h ; A
.eh_frame:0000000000016A3E                 db  0Bh
.eh_frame:0000000000016A3F                 db    0
.eh_frame:0000000000016A40                 db  2Ch ; ,
.eh_frame:0000000000016A41                 db    0
.eh_frame:0000000000016A42                 db    0
.eh_frame:0000000000016A43                 db    0
.eh_frame:0000000000016A44                 db 0F4h
.eh_frame:0000000000016A45                 db  0Ch
.eh_frame:0000000000016A46                 db    0
.eh_frame:0000000000016A47                 db    0
.eh_frame:0000000000016A48                 db 0B8h
.eh_frame:0000000000016A49                 db 0F6h
.eh_frame:0000000000016A4A                 db 0FEh
.eh_frame:0000000000016A4B                 db 0FFh
.eh_frame:0000000000016A4C                 db  6Eh ; n
.eh_frame:0000000000016A4D                 db    0
.eh_frame:0000000000016A4E                 db    0
.eh_frame:0000000000016A4F                 db    0
.eh_frame:0000000000016A50                 db    0
.eh_frame:0000000000016A51                 db  42h ; B
.eh_frame:0000000000016A52                 db  0Eh
.eh_frame:0000000000016A53                 db  10h
.eh_frame:0000000000016A54                 db  8Ch
.eh_frame:0000000000016A55                 db    2
.eh_frame:0000000000016A56                 db  49h ; I
.eh_frame:0000000000016A57                 db  0Eh
.eh_frame:0000000000016A58                 db  18h
.eh_frame:0000000000016A59                 db  86h
.eh_frame:0000000000016A5A                 db    3
.eh_frame:0000000000016A5B                 db  49h ; I
.eh_frame:0000000000016A5C                 db  0Eh
.eh_frame:0000000000016A5D                 db  20h
.eh_frame:0000000000016A5E                 db  83h
.eh_frame:0000000000016A5F                 db    4
.eh_frame:0000000000016A60                 db    2
.eh_frame:0000000000016A61                 db  4Ah ; J
.eh_frame:0000000000016A62                 db  0Ah
.eh_frame:0000000000016A63                 db  0Eh
.eh_frame:0000000000016A64                 db  18h
.eh_frame:0000000000016A65                 db  41h ; A
.eh_frame:0000000000016A66                 db  0Eh
.eh_frame:0000000000016A67                 db  10h
.eh_frame:0000000000016A68                 db  42h ; B
.eh_frame:0000000000016A69                 db  0Eh
.eh_frame:0000000000016A6A                 db    8
.eh_frame:0000000000016A6B                 db  47h ; G
.eh_frame:0000000000016A6C                 db  0Bh
.eh_frame:0000000000016A6D                 db    0
.eh_frame:0000000000016A6E                 db    0
.eh_frame:0000000000016A6F                 db    0
.eh_frame:0000000000016A70                 db  48h ; H
.eh_frame:0000000000016A71                 db    0
.eh_frame:0000000000016A72                 db    0
.eh_frame:0000000000016A73                 db    0
.eh_frame:0000000000016A74                 db  24h ; $
.eh_frame:0000000000016A75                 db  0Dh
.eh_frame:0000000000016A76                 db    0
.eh_frame:0000000000016A77                 db    0
.eh_frame:0000000000016A78                 db 0F8h
.eh_frame:0000000000016A79                 db 0F6h
.eh_frame:0000000000016A7A                 db 0FEh
.eh_frame:0000000000016A7B                 db 0FFh
.eh_frame:0000000000016A7C                 db 0C3h
.eh_frame:0000000000016A7D                 db    1
.eh_frame:0000000000016A7E                 db    0
.eh_frame:0000000000016A7F                 db    0
.eh_frame:0000000000016A80                 db    0
.eh_frame:0000000000016A81                 db  42h ; B
.eh_frame:0000000000016A82                 db  0Eh
.eh_frame:0000000000016A83                 db  10h
.eh_frame:0000000000016A84                 db  8Fh
.eh_frame:0000000000016A85                 db    2
.eh_frame:0000000000016A86                 db  42h ; B
.eh_frame:0000000000016A87                 db  0Eh
.eh_frame:0000000000016A88                 db  18h
.eh_frame:0000000000016A89                 db  8Eh
.eh_frame:0000000000016A8A                 db    3
.eh_frame:0000000000016A8B                 db  42h ; B
.eh_frame:0000000000016A8C                 db  0Eh
.eh_frame:0000000000016A8D                 db  20h
.eh_frame:0000000000016A8E                 db  8Dh
.eh_frame:0000000000016A8F                 db    4
.eh_frame:0000000000016A90                 db  42h ; B
.eh_frame:0000000000016A91                 db  0Eh
.eh_frame:0000000000016A92                 db  28h ; (
.eh_frame:0000000000016A93                 db  8Ch
.eh_frame:0000000000016A94                 db    5
.eh_frame:0000000000016A95                 db  41h ; A
.eh_frame:0000000000016A96                 db  0Eh
.eh_frame:0000000000016A97                 db  30h ; 0
.eh_frame:0000000000016A98                 db  86h
.eh_frame:0000000000016A99                 db    6
.eh_frame:0000000000016A9A                 db  41h ; A
.eh_frame:0000000000016A9B                 db  0Eh
.eh_frame:0000000000016A9C                 db  38h ; 8
.eh_frame:0000000000016A9D                 db  83h
.eh_frame:0000000000016A9E                 db    7
.eh_frame:0000000000016A9F                 db  47h ; G
.eh_frame:0000000000016AA0                 db  0Eh
.eh_frame:0000000000016AA1                 db 0A0h
.eh_frame:0000000000016AA2                 db    1
.eh_frame:0000000000016AA3                 db    2
.eh_frame:0000000000016AA4                 db 0D3h
.eh_frame:0000000000016AA5                 db  0Ah
.eh_frame:0000000000016AA6                 db  0Eh
.eh_frame:0000000000016AA7                 db  38h ; 8
.eh_frame:0000000000016AA8                 db  41h ; A
.eh_frame:0000000000016AA9                 db  0Eh
.eh_frame:0000000000016AAA                 db  30h ; 0
.eh_frame:0000000000016AAB                 db  41h ; A
.eh_frame:0000000000016AAC                 db  0Eh
.eh_frame:0000000000016AAD                 db  28h ; (
.eh_frame:0000000000016AAE                 db  42h ; B
.eh_frame:0000000000016AAF                 db  0Eh
.eh_frame:0000000000016AB0                 db  20h
.eh_frame:0000000000016AB1                 db  42h ; B
.eh_frame:0000000000016AB2                 db  0Eh
.eh_frame:0000000000016AB3                 db  18h
.eh_frame:0000000000016AB4                 db  42h ; B
.eh_frame:0000000000016AB5                 db  0Eh
.eh_frame:0000000000016AB6                 db  10h
.eh_frame:0000000000016AB7                 db  42h ; B
.eh_frame:0000000000016AB8                 db  0Eh
.eh_frame:0000000000016AB9                 db    8
.eh_frame:0000000000016ABA                 db  42h ; B
.eh_frame:0000000000016ABB                 db  0Bh
.eh_frame:0000000000016ABC                 db  48h ; H
.eh_frame:0000000000016ABD                 db    0
.eh_frame:0000000000016ABE                 db    0
.eh_frame:0000000000016ABF                 db    0
.eh_frame:0000000000016AC0                 db  70h ; p
.eh_frame:0000000000016AC1                 db  0Dh
.eh_frame:0000000000016AC2                 db    0
.eh_frame:0000000000016AC3                 db    0
.eh_frame:0000000000016AC4                 db  7Ch ; |
.eh_frame:0000000000016AC5                 db 0F8h
.eh_frame:0000000000016AC6                 db 0FEh
.eh_frame:0000000000016AC7                 db 0FFh
.eh_frame:0000000000016AC8                 db  15h
.eh_frame:0000000000016AC9                 db    6
.eh_frame:0000000000016ACA                 db    0
.eh_frame:0000000000016ACB                 db    0
.eh_frame:0000000000016ACC                 db    0
.eh_frame:0000000000016ACD                 db  42h ; B
.eh_frame:0000000000016ACE                 db  0Eh
.eh_frame:0000000000016ACF                 db  10h
.eh_frame:0000000000016AD0                 db  8Fh
.eh_frame:0000000000016AD1                 db    2
.eh_frame:0000000000016AD2                 db  42h ; B
.eh_frame:0000000000016AD3                 db  0Eh
.eh_frame:0000000000016AD4                 db  18h
.eh_frame:0000000000016AD5                 db  8Eh
.eh_frame:0000000000016AD6                 db    3
.eh_frame:0000000000016AD7                 db  45h ; E
.eh_frame:0000000000016AD8                 db  0Eh
.eh_frame:0000000000016AD9                 db  20h
.eh_frame:0000000000016ADA                 db  8Dh
.eh_frame:0000000000016ADB                 db    4
.eh_frame:0000000000016ADC                 db  42h ; B
.eh_frame:0000000000016ADD                 db  0Eh
.eh_frame:0000000000016ADE                 db  28h ; (
.eh_frame:0000000000016ADF                 db  8Ch
.eh_frame:0000000000016AE0                 db    5
.eh_frame:0000000000016AE1                 db  41h ; A
.eh_frame:0000000000016AE2                 db  0Eh
.eh_frame:0000000000016AE3                 db  30h ; 0
.eh_frame:0000000000016AE4                 db  86h
.eh_frame:0000000000016AE5                 db    6
.eh_frame:0000000000016AE6                 db  41h ; A
.eh_frame:0000000000016AE7                 db  0Eh
.eh_frame:0000000000016AE8                 db  38h ; 8
.eh_frame:0000000000016AE9                 db  83h
.eh_frame:0000000000016AEA                 db    7
.eh_frame:0000000000016AEB                 db  47h ; G
.eh_frame:0000000000016AEC                 db  0Eh
.eh_frame:0000000000016AED                 db 0E0h
.eh_frame:0000000000016AEE                 db    1
.eh_frame:0000000000016AEF                 db    2
.eh_frame:0000000000016AF0                 db  69h ; i
.eh_frame:0000000000016AF1                 db  0Ah
.eh_frame:0000000000016AF2                 db  0Eh
.eh_frame:0000000000016AF3                 db  38h ; 8
.eh_frame:0000000000016AF4                 db  41h ; A
.eh_frame:0000000000016AF5                 db  0Eh
.eh_frame:0000000000016AF6                 db  30h ; 0
.eh_frame:0000000000016AF7                 db  41h ; A
.eh_frame:0000000000016AF8                 db  0Eh
.eh_frame:0000000000016AF9                 db  28h ; (
.eh_frame:0000000000016AFA                 db  42h ; B
.eh_frame:0000000000016AFB                 db  0Eh
.eh_frame:0000000000016AFC                 db  20h
.eh_frame:0000000000016AFD                 db  42h ; B
.eh_frame:0000000000016AFE                 db  0Eh
.eh_frame:0000000000016AFF                 db  18h
.eh_frame:0000000000016B00                 db  42h ; B
.eh_frame:0000000000016B01                 db  0Eh
.eh_frame:0000000000016B02                 db  10h
.eh_frame:0000000000016B03                 db  42h ; B
.eh_frame:0000000000016B04                 db  0Eh
.eh_frame:0000000000016B05                 db    8
.eh_frame:0000000000016B06                 db  49h ; I
.eh_frame:0000000000016B07                 db  0Bh
.eh_frame:0000000000016B08                 db  58h ; X
.eh_frame:0000000000016B09                 db    0
.eh_frame:0000000000016B0A                 db    0
.eh_frame:0000000000016B0B                 db    0
.eh_frame:0000000000016B0C                 db 0BCh
.eh_frame:0000000000016B0D                 db  0Dh
.eh_frame:0000000000016B0E                 db    0
.eh_frame:0000000000016B0F                 db    0
.eh_frame:0000000000016B10                 db  50h ; P
.eh_frame:0000000000016B11                 db 0FEh
.eh_frame:0000000000016B12                 db 0FEh
.eh_frame:0000000000016B13                 db 0FFh
.eh_frame:0000000000016B14                 db  4Eh ; N
.eh_frame:0000000000016B15                 db    1
.eh_frame:0000000000016B16                 db    0
.eh_frame:0000000000016B17                 db    0
.eh_frame:0000000000016B18                 db    0
.eh_frame:0000000000016B19                 db  41h ; A
.eh_frame:0000000000016B1A                 db  0Eh
.eh_frame:0000000000016B1B                 db  10h
.eh_frame:0000000000016B1C                 db  86h
.eh_frame:0000000000016B1D                 db    2
.eh_frame:0000000000016B1E                 db  41h ; A
.eh_frame:0000000000016B1F                 db  0Eh
.eh_frame:0000000000016B20                 db  18h
.eh_frame:0000000000016B21                 db  83h
.eh_frame:0000000000016B22                 db    3
.eh_frame:0000000000016B23                 db  4Eh ; N
.eh_frame:0000000000016B24                 db  0Eh
.eh_frame:0000000000016B25                 db  20h
.eh_frame:0000000000016B26                 db    2
.eh_frame:0000000000016B27                 db  83h
.eh_frame:0000000000016B28                 db  0Ah
.eh_frame:0000000000016B29                 db  0Eh
.eh_frame:0000000000016B2A                 db  18h
.eh_frame:0000000000016B2B                 db  41h ; A
.eh_frame:0000000000016B2C                 db  0Eh
.eh_frame:0000000000016B2D                 db  10h
.eh_frame:0000000000016B2E                 db  41h ; A
.eh_frame:0000000000016B2F                 db  0Eh
.eh_frame:0000000000016B30                 db    8
.eh_frame:0000000000016B31                 db  4Bh ; K
.eh_frame:0000000000016B32                 db  0Bh
.eh_frame:0000000000016B33                 db    2
.eh_frame:0000000000016B34                 db  61h ; a
.eh_frame:0000000000016B35                 db  0Ah
.eh_frame:0000000000016B36                 db  0Eh
.eh_frame:0000000000016B37                 db  18h
.eh_frame:0000000000016B38                 db  43h ; C
.eh_frame:0000000000016B39                 db  0Eh
.eh_frame:0000000000016B3A                 db  10h
.eh_frame:0000000000016B3B                 db  41h ; A
.eh_frame:0000000000016B3C                 db  0Eh
.eh_frame:0000000000016B3D                 db    8
.eh_frame:0000000000016B3E                 db  4Bh ; K
.eh_frame:0000000000016B3F                 db  0Bh
.eh_frame:0000000000016B40                 db  4Ch ; L
.eh_frame:0000000000016B41                 db  0Ah
.eh_frame:0000000000016B42                 db  0Eh
.eh_frame:0000000000016B43                 db  18h
.eh_frame:0000000000016B44                 db  43h ; C
.eh_frame:0000000000016B45                 db  0Eh
.eh_frame:0000000000016B46                 db  10h
.eh_frame:0000000000016B47                 db  41h ; A
.eh_frame:0000000000016B48                 db  0Eh
.eh_frame:0000000000016B49                 db    8
.eh_frame:0000000000016B4A                 db  48h ; H
.eh_frame:0000000000016B4B                 db  0Bh
.eh_frame:0000000000016B4C                 db  49h ; I
.eh_frame:0000000000016B4D                 db  0Ah
.eh_frame:0000000000016B4E                 db  0Eh
.eh_frame:0000000000016B4F                 db  18h
.eh_frame:0000000000016B50                 db  43h ; C
.eh_frame:0000000000016B51                 db  0Eh
.eh_frame:0000000000016B52                 db  10h
.eh_frame:0000000000016B53                 db  41h ; A
.eh_frame:0000000000016B54                 db  0Eh
.eh_frame:0000000000016B55                 db    8
.eh_frame:0000000000016B56                 db  4Bh ; K
.eh_frame:0000000000016B57                 db  0Bh
.eh_frame:0000000000016B58                 db  49h ; I
.eh_frame:0000000000016B59                 db  0Eh
.eh_frame:0000000000016B5A                 db  18h
.eh_frame:0000000000016B5B                 db  43h ; C
.eh_frame:0000000000016B5C                 db  0Eh
.eh_frame:0000000000016B5D                 db  10h
.eh_frame:0000000000016B5E                 db  41h ; A
.eh_frame:0000000000016B5F                 db  0Eh
.eh_frame:0000000000016B60                 db    8
.eh_frame:0000000000016B61                 db    0
.eh_frame:0000000000016B62                 db    0
.eh_frame:0000000000016B63                 db    0
.eh_frame:0000000000016B64                 db  28h ; (
.eh_frame:0000000000016B65                 db    0
.eh_frame:0000000000016B66                 db    0
.eh_frame:0000000000016B67                 db    0
.eh_frame:0000000000016B68                 db  18h
.eh_frame:0000000000016B69                 db  0Eh
.eh_frame:0000000000016B6A                 db    0
.eh_frame:0000000000016B6B                 db    0
.eh_frame:0000000000016B6C                 db  44h ; D
.eh_frame:0000000000016B6D                 db 0FFh
.eh_frame:0000000000016B6E                 db 0FEh
.eh_frame:0000000000016B6F                 db 0FFh
.eh_frame:0000000000016B70                 db  86h
.eh_frame:0000000000016B71                 db    0
.eh_frame:0000000000016B72                 db    0
.eh_frame:0000000000016B73                 db    0
.eh_frame:0000000000016B74                 db    0
.eh_frame:0000000000016B75                 db  42h ; B
.eh_frame:0000000000016B76                 db  0Eh
.eh_frame:0000000000016B77                 db  10h
.eh_frame:0000000000016B78                 db  8Ch
.eh_frame:0000000000016B79                 db    2
.eh_frame:0000000000016B7A                 db  41h ; A
.eh_frame:0000000000016B7B                 db  0Eh
.eh_frame:0000000000016B7C                 db  18h
.eh_frame:0000000000016B7D                 db  86h
.eh_frame:0000000000016B7E                 db    3
.eh_frame:0000000000016B7F                 db  44h ; D
.eh_frame:0000000000016B80                 db  0Eh
.eh_frame:0000000000016B81                 db  20h
.eh_frame:0000000000016B82                 db  83h
.eh_frame:0000000000016B83                 db    4
.eh_frame:0000000000016B84                 db  70h ; p
.eh_frame:0000000000016B85                 db  0Ah
.eh_frame:0000000000016B86                 db  0Eh
.eh_frame:0000000000016B87                 db  18h
.eh_frame:0000000000016B88                 db  41h ; A
.eh_frame:0000000000016B89                 db  0Eh
.eh_frame:0000000000016B8A                 db  10h
.eh_frame:0000000000016B8B                 db  42h ; B
.eh_frame:0000000000016B8C                 db  0Eh
.eh_frame:0000000000016B8D                 db    8
.eh_frame:0000000000016B8E                 db  46h ; F
.eh_frame:0000000000016B8F                 db  0Bh
.eh_frame:0000000000016B90                 db  18h
.eh_frame:0000000000016B91                 db    0
.eh_frame:0000000000016B92                 db    0
.eh_frame:0000000000016B93                 db    0
.eh_frame:0000000000016B94                 db  44h ; D
.eh_frame:0000000000016B95                 db  0Eh
.eh_frame:0000000000016B96                 db    0
.eh_frame:0000000000016B97                 db    0
.eh_frame:0000000000016B98                 db 0A8h
.eh_frame:0000000000016B99                 db 0FFh
.eh_frame:0000000000016B9A                 db 0FEh
.eh_frame:0000000000016B9B                 db 0FFh
.eh_frame:0000000000016B9C                 db  30h ; 0
.eh_frame:0000000000016B9D                 db    0
.eh_frame:0000000000016B9E                 db    0
.eh_frame:0000000000016B9F                 db    0
.eh_frame:0000000000016BA0                 db    0
.eh_frame:0000000000016BA1                 db  41h ; A
.eh_frame:0000000000016BA2                 db  0Eh
.eh_frame:0000000000016BA3                 db  10h
.eh_frame:0000000000016BA4                 db  83h
.eh_frame:0000000000016BA5                 db    2
.eh_frame:0000000000016BA6                 db  6Ah ; j
.eh_frame:0000000000016BA7                 db  0Eh
.eh_frame:0000000000016BA8                 db    8
.eh_frame:0000000000016BA9                 db    0
.eh_frame:0000000000016BAA                 db    0
.eh_frame:0000000000016BAB                 db    0
.eh_frame:0000000000016BAC                 db  10h
.eh_frame:0000000000016BAD                 db    0
.eh_frame:0000000000016BAE                 db    0
.eh_frame:0000000000016BAF                 db    0
.eh_frame:0000000000016BB0                 db  60h ; `
.eh_frame:0000000000016BB1                 db  0Eh
.eh_frame:0000000000016BB2                 db    0
.eh_frame:0000000000016BB3                 db    0
.eh_frame:0000000000016BB4                 db 0BCh
.eh_frame:0000000000016BB5                 db 0FFh
.eh_frame:0000000000016BB6                 db 0FEh
.eh_frame:0000000000016BB7                 db 0FFh
.eh_frame:0000000000016BB8                 db  25h ; %
.eh_frame:0000000000016BB9                 db    0
.eh_frame:0000000000016BBA                 db    0
.eh_frame:0000000000016BBB                 db    0
.eh_frame:0000000000016BBC                 db    0
.eh_frame:0000000000016BBD                 db    0
.eh_frame:0000000000016BBE                 db    0
.eh_frame:0000000000016BBF                 db    0
.eh_frame:0000000000016BC0                 db  14h
.eh_frame:0000000000016BC1                 db    0
.eh_frame:0000000000016BC2                 db    0
.eh_frame:0000000000016BC3                 db    0
.eh_frame:0000000000016BC4                 db  74h ; t
.eh_frame:0000000000016BC5                 db  0Eh
.eh_frame:0000000000016BC6                 db    0
.eh_frame:0000000000016BC7                 db    0
.eh_frame:0000000000016BC8                 db 0D8h
.eh_frame:0000000000016BC9                 db 0FFh
.eh_frame:0000000000016BCA                 db 0FEh
.eh_frame:0000000000016BCB                 db 0FFh
.eh_frame:0000000000016BCC                 db  14h
.eh_frame:0000000000016BCD                 db    0
.eh_frame:0000000000016BCE                 db    0
.eh_frame:0000000000016BCF                 db    0
.eh_frame:0000000000016BD0                 db    0
.eh_frame:0000000000016BD1                 db  48h ; H
.eh_frame:0000000000016BD2                 db  0Eh
.eh_frame:0000000000016BD3                 db  10h
.eh_frame:0000000000016BD4                 db  4Bh ; K
.eh_frame:0000000000016BD5                 db  0Eh
.eh_frame:0000000000016BD6                 db    8
.eh_frame:0000000000016BD7                 db    0
.eh_frame:0000000000016BD8                 db  48h ; H
.eh_frame:0000000000016BD9                 db    0
.eh_frame:0000000000016BDA                 db    0
.eh_frame:0000000000016BDB                 db    0
.eh_frame:0000000000016BDC                 db  8Ch
.eh_frame:0000000000016BDD                 db  0Eh
.eh_frame:0000000000016BDE                 db    0
.eh_frame:0000000000016BDF                 db    0
.eh_frame:0000000000016BE0                 db 0E0h
.eh_frame:0000000000016BE1                 db 0FFh
.eh_frame:0000000000016BE2                 db 0FEh
.eh_frame:0000000000016BE3                 db 0FFh
.eh_frame:0000000000016BE4                 db 0CEh
.eh_frame:0000000000016BE5                 db    1
.eh_frame:0000000000016BE6                 db    0
.eh_frame:0000000000016BE7                 db    0
.eh_frame:0000000000016BE8                 db    0
.eh_frame:0000000000016BE9                 db  42h ; B
.eh_frame:0000000000016BEA                 db  0Eh
.eh_frame:0000000000016BEB                 db  10h
.eh_frame:0000000000016BEC                 db  8Fh
.eh_frame:0000000000016BED                 db    2
.eh_frame:0000000000016BEE                 db  42h ; B
.eh_frame:0000000000016BEF                 db  0Eh
.eh_frame:0000000000016BF0                 db  18h
.eh_frame:0000000000016BF1                 db  8Eh
.eh_frame:0000000000016BF2                 db    3
.eh_frame:0000000000016BF3                 db  45h ; E
.eh_frame:0000000000016BF4                 db  0Eh
.eh_frame:0000000000016BF5                 db  20h
.eh_frame:0000000000016BF6                 db  8Dh
.eh_frame:0000000000016BF7                 db    4
.eh_frame:0000000000016BF8                 db  42h ; B
.eh_frame:0000000000016BF9                 db  0Eh
.eh_frame:0000000000016BFA                 db  28h ; (
.eh_frame:0000000000016BFB                 db  8Ch
.eh_frame:0000000000016BFC                 db    5
.eh_frame:0000000000016BFD                 db  41h ; A
.eh_frame:0000000000016BFE                 db  0Eh
.eh_frame:0000000000016BFF                 db  30h ; 0
.eh_frame:0000000000016C00                 db  86h
.eh_frame:0000000000016C01                 db    6
.eh_frame:0000000000016C02                 db  41h ; A
.eh_frame:0000000000016C03                 db  0Eh
.eh_frame:0000000000016C04                 db  38h ; 8
.eh_frame:0000000000016C05                 db  83h
.eh_frame:0000000000016C06                 db    7
.eh_frame:0000000000016C07                 db  47h ; G
.eh_frame:0000000000016C08                 db  0Eh
.eh_frame:0000000000016C09                 db  50h ; P
.eh_frame:0000000000016C0A                 db    2
.eh_frame:0000000000016C0B                 db 0ACh
.eh_frame:0000000000016C0C                 db  0Ah
.eh_frame:0000000000016C0D                 db  0Eh
.eh_frame:0000000000016C0E                 db  38h ; 8
.eh_frame:0000000000016C0F                 db  41h ; A
.eh_frame:0000000000016C10                 db  0Eh
.eh_frame:0000000000016C11                 db  30h ; 0
.eh_frame:0000000000016C12                 db  41h ; A
.eh_frame:0000000000016C13                 db  0Eh
.eh_frame:0000000000016C14                 db  28h ; (
.eh_frame:0000000000016C15                 db  42h ; B
.eh_frame:0000000000016C16                 db  0Eh
.eh_frame:0000000000016C17                 db  20h
.eh_frame:0000000000016C18                 db  42h ; B
.eh_frame:0000000000016C19                 db  0Eh
.eh_frame:0000000000016C1A                 db  18h
.eh_frame:0000000000016C1B                 db  42h ; B
.eh_frame:0000000000016C1C                 db  0Eh
.eh_frame:0000000000016C1D                 db  10h
.eh_frame:0000000000016C1E                 db  42h ; B
.eh_frame:0000000000016C1F                 db  0Eh
.eh_frame:0000000000016C20                 db    8
.eh_frame:0000000000016C21                 db  46h ; F
.eh_frame:0000000000016C22                 db  0Bh
.eh_frame:0000000000016C23                 db    0
.eh_frame:0000000000016C24                 db  34h ; 4
.eh_frame:0000000000016C25                 db    0
.eh_frame:0000000000016C26                 db    0
.eh_frame:0000000000016C27                 db    0
.eh_frame:0000000000016C28                 db 0D8h
.eh_frame:0000000000016C29                 db  0Eh
.eh_frame:0000000000016C2A                 db    0
.eh_frame:0000000000016C2B                 db    0
.eh_frame:0000000000016C2C                 db  64h ; d
.eh_frame:0000000000016C2D                 db    1
.eh_frame:0000000000016C2E                 db 0FFh
.eh_frame:0000000000016C2F                 db 0FFh
.eh_frame:0000000000016C30                 db  9Fh
.eh_frame:0000000000016C31                 db    0
.eh_frame:0000000000016C32                 db    0
.eh_frame:0000000000016C33                 db    0
.eh_frame:0000000000016C34                 db    0
.eh_frame:0000000000016C35                 db  42h ; B
.eh_frame:0000000000016C36                 db  0Eh
.eh_frame:0000000000016C37                 db  10h
.eh_frame:0000000000016C38                 db  8Dh
.eh_frame:0000000000016C39                 db    2
.eh_frame:0000000000016C3A                 db  42h ; B
.eh_frame:0000000000016C3B                 db  0Eh
.eh_frame:0000000000016C3C                 db  18h
.eh_frame:0000000000016C3D                 db  8Ch
.eh_frame:0000000000016C3E                 db    3
.eh_frame:0000000000016C3F                 db  44h ; D
.eh_frame:0000000000016C40                 db  0Eh
.eh_frame:0000000000016C41                 db  20h
.eh_frame:0000000000016C42                 db  86h
.eh_frame:0000000000016C43                 db    4
.eh_frame:0000000000016C44                 db  41h ; A
.eh_frame:0000000000016C45                 db  0Eh
.eh_frame:0000000000016C46                 db  28h ; (
.eh_frame:0000000000016C47                 db  83h
.eh_frame:0000000000016C48                 db    5
.eh_frame:0000000000016C49                 db  51h ; Q
.eh_frame:0000000000016C4A                 db  0Eh
.eh_frame:0000000000016C4B                 db  30h ; 0
.eh_frame:0000000000016C4C                 db    2
.eh_frame:0000000000016C4D                 db  7Eh ; ~
.eh_frame:0000000000016C4E                 db  0Eh
.eh_frame:0000000000016C4F                 db  28h ; (
.eh_frame:0000000000016C50                 db  41h ; A
.eh_frame:0000000000016C51                 db  0Eh
.eh_frame:0000000000016C52                 db  20h
.eh_frame:0000000000016C53                 db  41h ; A
.eh_frame:0000000000016C54                 db  0Eh
.eh_frame:0000000000016C55                 db  18h
.eh_frame:0000000000016C56                 db  42h ; B
.eh_frame:0000000000016C57                 db  0Eh
.eh_frame:0000000000016C58                 db  10h
.eh_frame:0000000000016C59                 db  42h ; B
.eh_frame:0000000000016C5A                 db  0Eh
.eh_frame:0000000000016C5B                 db    8
.eh_frame:0000000000016C5C                 db  48h ; H
.eh_frame:0000000000016C5D                 db    0
.eh_frame:0000000000016C5E                 db    0
.eh_frame:0000000000016C5F                 db    0
.eh_frame:0000000000016C60                 db  10h
.eh_frame:0000000000016C61                 db  0Fh
.eh_frame:0000000000016C62                 db    0
.eh_frame:0000000000016C63                 db    0
.eh_frame:0000000000016C64                 db 0CCh
.eh_frame:0000000000016C65                 db    1
.eh_frame:0000000000016C66                 db 0FFh
.eh_frame:0000000000016C67                 db 0FFh
.eh_frame:0000000000016C68                 db  75h ; u
.eh_frame:0000000000016C69                 db    2
.eh_frame:0000000000016C6A                 db    0
.eh_frame:0000000000016C6B                 db    0
.eh_frame:0000000000016C6C                 db    0
.eh_frame:0000000000016C6D                 db  42h ; B
.eh_frame:0000000000016C6E                 db  0Eh
.eh_frame:0000000000016C6F                 db  10h
.eh_frame:0000000000016C70                 db  8Fh
.eh_frame:0000000000016C71                 db    2
.eh_frame:0000000000016C72                 db  42h ; B
.eh_frame:0000000000016C73                 db  0Eh
.eh_frame:0000000000016C74                 db  18h
.eh_frame:0000000000016C75                 db  8Eh
.eh_frame:0000000000016C76                 db    3
.eh_frame:0000000000016C77                 db  45h ; E
.eh_frame:0000000000016C78                 db  0Eh
.eh_frame:0000000000016C79                 db  20h
.eh_frame:0000000000016C7A                 db  8Dh
.eh_frame:0000000000016C7B                 db    4
.eh_frame:0000000000016C7C                 db  42h ; B
.eh_frame:0000000000016C7D                 db  0Eh
.eh_frame:0000000000016C7E                 db  28h ; (
.eh_frame:0000000000016C7F                 db  8Ch
.eh_frame:0000000000016C80                 db    5
.eh_frame:0000000000016C81                 db  44h ; D
.eh_frame:0000000000016C82                 db  0Eh
.eh_frame:0000000000016C83                 db  30h ; 0
.eh_frame:0000000000016C84                 db  86h
.eh_frame:0000000000016C85                 db    6
.eh_frame:0000000000016C86                 db  41h ; A
.eh_frame:0000000000016C87                 db  0Eh
.eh_frame:0000000000016C88                 db  38h ; 8
.eh_frame:0000000000016C89                 db  83h
.eh_frame:0000000000016C8A                 db    7
.eh_frame:0000000000016C8B                 db  4Ah ; J
.eh_frame:0000000000016C8C                 db  0Eh
.eh_frame:0000000000016C8D                 db  50h ; P
.eh_frame:0000000000016C8E                 db    3
.eh_frame:0000000000016C8F                 db  1Ah
.eh_frame:0000000000016C90                 db    1
.eh_frame:0000000000016C91                 db  0Ah
.eh_frame:0000000000016C92                 db  0Eh
.eh_frame:0000000000016C93                 db  38h ; 8
.eh_frame:0000000000016C94                 db  41h ; A
.eh_frame:0000000000016C95                 db  0Eh
.eh_frame:0000000000016C96                 db  30h ; 0
.eh_frame:0000000000016C97                 db  41h ; A
.eh_frame:0000000000016C98                 db  0Eh
.eh_frame:0000000000016C99                 db  28h ; (
.eh_frame:0000000000016C9A                 db  42h ; B
.eh_frame:0000000000016C9B                 db  0Eh
.eh_frame:0000000000016C9C                 db  20h
.eh_frame:0000000000016C9D                 db  42h ; B
.eh_frame:0000000000016C9E                 db  0Eh
.eh_frame:0000000000016C9F                 db  18h
.eh_frame:0000000000016CA0                 db  42h ; B
.eh_frame:0000000000016CA1                 db  0Eh
.eh_frame:0000000000016CA2                 db  10h
.eh_frame:0000000000016CA3                 db  42h ; B
.eh_frame:0000000000016CA4                 db  0Eh
.eh_frame:0000000000016CA5                 db    8
.eh_frame:0000000000016CA6                 db  42h ; B
.eh_frame:0000000000016CA7                 db  0Bh
.eh_frame:0000000000016CA8                 db  18h
.eh_frame:0000000000016CA9                 db    0
.eh_frame:0000000000016CAA                 db    0
.eh_frame:0000000000016CAB                 db    0
.eh_frame:0000000000016CAC                 db  5Ch ; \
.eh_frame:0000000000016CAD                 db  0Fh
.eh_frame:0000000000016CAE                 db    0
.eh_frame:0000000000016CAF                 db    0
.eh_frame:0000000000016CB0                 db    0
.eh_frame:0000000000016CB1                 db    4
.eh_frame:0000000000016CB2                 db 0FFh
.eh_frame:0000000000016CB3                 db 0FFh
.eh_frame:0000000000016CB4                 db  59h ; Y
.eh_frame:0000000000016CB5                 db    0
.eh_frame:0000000000016CB6                 db    0
.eh_frame:0000000000016CB7                 db    0
.eh_frame:0000000000016CB8                 db    0
.eh_frame:0000000000016CB9                 db  41h ; A
.eh_frame:0000000000016CBA                 db  0Eh
.eh_frame:0000000000016CBB                 db  10h
.eh_frame:0000000000016CBC                 db  83h
.eh_frame:0000000000016CBD                 db    2
.eh_frame:0000000000016CBE                 db    2
.eh_frame:0000000000016CBF                 db  53h ; S
.eh_frame:0000000000016CC0                 db  0Eh
.eh_frame:0000000000016CC1                 db    8
.eh_frame:0000000000016CC2                 db    0
.eh_frame:0000000000016CC3                 db    0
.eh_frame:0000000000016CC4                 db  1Ch
.eh_frame:0000000000016CC5                 db    0
.eh_frame:0000000000016CC6                 db    0
.eh_frame:0000000000016CC7                 db    0
.eh_frame:0000000000016CC8                 db  78h ; x
.eh_frame:0000000000016CC9                 db  0Fh
.eh_frame:0000000000016CCA                 db    0
.eh_frame:0000000000016CCB                 db    0
.eh_frame:0000000000016CCC                 db  44h ; D
.eh_frame:0000000000016CCD                 db    4
.eh_frame:0000000000016CCE                 db 0FFh
.eh_frame:0000000000016CCF                 db 0FFh
.eh_frame:0000000000016CD0                 db  32h ; 2
.eh_frame:0000000000016CD1                 db    0
.eh_frame:0000000000016CD2                 db    0
.eh_frame:0000000000016CD3                 db    0
.eh_frame:0000000000016CD4                 db    0
.eh_frame:0000000000016CD5                 db  41h ; A
.eh_frame:0000000000016CD6                 db  0Eh
.eh_frame:0000000000016CD7                 db  10h
.eh_frame:0000000000016CD8                 db  83h
.eh_frame:0000000000016CD9                 db    2
.eh_frame:0000000000016CDA                 db  5Fh ; _
.eh_frame:0000000000016CDB                 db  0Ah
.eh_frame:0000000000016CDC                 db  0Eh
.eh_frame:0000000000016CDD                 db    8
.eh_frame:0000000000016CDE                 db  48h ; H
.eh_frame:0000000000016CDF                 db  0Bh
.eh_frame:0000000000016CE0                 db  45h ; E
.eh_frame:0000000000016CE1                 db  0Eh
.eh_frame:0000000000016CE2                 db    8
.eh_frame:0000000000016CE3                 db    0
.eh_frame:0000000000016CE4                 db  38h ; 8
.eh_frame:0000000000016CE5                 db    0
.eh_frame:0000000000016CE6                 db    0
.eh_frame:0000000000016CE7                 db    0
.eh_frame:0000000000016CE8                 db  98h
.eh_frame:0000000000016CE9                 db  0Fh
.eh_frame:0000000000016CEA                 db    0
.eh_frame:0000000000016CEB                 db    0
.eh_frame:0000000000016CEC                 db  64h ; d
.eh_frame:0000000000016CED                 db    4
.eh_frame:0000000000016CEE                 db 0FFh
.eh_frame:0000000000016CEF                 db 0FFh
.eh_frame:0000000000016CF0                 db  5Fh ; _
.eh_frame:0000000000016CF1                 db    1
.eh_frame:0000000000016CF2                 db    0
.eh_frame:0000000000016CF3                 db    0
.eh_frame:0000000000016CF4                 db    0
.eh_frame:0000000000016CF5                 db  42h ; B
.eh_frame:0000000000016CF6                 db  0Eh
.eh_frame:0000000000016CF7                 db  10h
.eh_frame:0000000000016CF8                 db  8Eh
.eh_frame:0000000000016CF9                 db    2
.eh_frame:0000000000016CFA                 db  42h ; B
.eh_frame:0000000000016CFB                 db  0Eh
.eh_frame:0000000000016CFC                 db  18h
.eh_frame:0000000000016CFD                 db  8Dh
.eh_frame:0000000000016CFE                 db    3
.eh_frame:0000000000016CFF                 db  42h ; B
.eh_frame:0000000000016D00                 db  0Eh
.eh_frame:0000000000016D01                 db  20h
.eh_frame:0000000000016D02                 db  8Ch
.eh_frame:0000000000016D03                 db    4
.eh_frame:0000000000016D04                 db  44h ; D
.eh_frame:0000000000016D05                 db  0Eh
.eh_frame:0000000000016D06                 db  28h ; (
.eh_frame:0000000000016D07                 db  86h
.eh_frame:0000000000016D08                 db    5
.eh_frame:0000000000016D09                 db  41h ; A
.eh_frame:0000000000016D0A                 db  0Eh
.eh_frame:0000000000016D0B                 db  30h ; 0
.eh_frame:0000000000016D0C                 db  83h
.eh_frame:0000000000016D0D                 db    6
.eh_frame:0000000000016D0E                 db    3
.eh_frame:0000000000016D0F                 db  45h ; E
.eh_frame:0000000000016D10                 db    1
.eh_frame:0000000000016D11                 db  0Eh
.eh_frame:0000000000016D12                 db  28h ; (
.eh_frame:0000000000016D13                 db  44h ; D
.eh_frame:0000000000016D14                 db  0Eh
.eh_frame:0000000000016D15                 db  20h
.eh_frame:0000000000016D16                 db  42h ; B
.eh_frame:0000000000016D17                 db  0Eh
.eh_frame:0000000000016D18                 db  18h
.eh_frame:0000000000016D19                 db  42h ; B
.eh_frame:0000000000016D1A                 db  0Eh
.eh_frame:0000000000016D1B                 db  10h
.eh_frame:0000000000016D1C                 db  42h ; B
.eh_frame:0000000000016D1D                 db  0Eh
.eh_frame:0000000000016D1E                 db    8
.eh_frame:0000000000016D1F                 db    0
.eh_frame:0000000000016D20                 db  38h ; 8
.eh_frame:0000000000016D21                 db    0
.eh_frame:0000000000016D22                 db    0
.eh_frame:0000000000016D23                 db    0
.eh_frame:0000000000016D24                 db 0D4h
.eh_frame:0000000000016D25                 db  0Fh
.eh_frame:0000000000016D26                 db    0
.eh_frame:0000000000016D27                 db    0
.eh_frame:0000000000016D28                 db  88h
.eh_frame:0000000000016D29                 db    5
.eh_frame:0000000000016D2A                 db 0FFh
.eh_frame:0000000000016D2B                 db 0FFh
.eh_frame:0000000000016D2C                 db 0B8h
.eh_frame:0000000000016D2D                 db    0
.eh_frame:0000000000016D2E                 db    0
.eh_frame:0000000000016D2F                 db    0
.eh_frame:0000000000016D30                 db    0
.eh_frame:0000000000016D31                 db  42h ; B
.eh_frame:0000000000016D32                 db  0Eh
.eh_frame:0000000000016D33                 db  10h
.eh_frame:0000000000016D34                 db  8Eh
.eh_frame:0000000000016D35                 db    2
.eh_frame:0000000000016D36                 db  42h ; B
.eh_frame:0000000000016D37                 db  0Eh
.eh_frame:0000000000016D38                 db  18h
.eh_frame:0000000000016D39                 db  8Dh
.eh_frame:0000000000016D3A                 db    3
.eh_frame:0000000000016D3B                 db  45h ; E
.eh_frame:0000000000016D3C                 db  0Eh
.eh_frame:0000000000016D3D                 db  20h
.eh_frame:0000000000016D3E                 db  8Ch
.eh_frame:0000000000016D3F                 db    4
.eh_frame:0000000000016D40                 db  41h ; A
.eh_frame:0000000000016D41                 db  0Eh
.eh_frame:0000000000016D42                 db  28h ; (
.eh_frame:0000000000016D43                 db  86h
.eh_frame:0000000000016D44                 db    5
.eh_frame:0000000000016D45                 db  41h ; A
.eh_frame:0000000000016D46                 db  0Eh
.eh_frame:0000000000016D47                 db  30h ; 0
.eh_frame:0000000000016D48                 db  83h
.eh_frame:0000000000016D49                 db    6
.eh_frame:0000000000016D4A                 db    2
.eh_frame:0000000000016D4B                 db  8Fh
.eh_frame:0000000000016D4C                 db  0Eh
.eh_frame:0000000000016D4D                 db  28h ; (
.eh_frame:0000000000016D4E                 db  57h ; W
.eh_frame:0000000000016D4F                 db  0Eh
.eh_frame:0000000000016D50                 db  20h
.eh_frame:0000000000016D51                 db  42h ; B
.eh_frame:0000000000016D52                 db  0Eh
.eh_frame:0000000000016D53                 db  18h
.eh_frame:0000000000016D54                 db  42h ; B
.eh_frame:0000000000016D55                 db  0Eh
.eh_frame:0000000000016D56                 db  10h
.eh_frame:0000000000016D57                 db  42h ; B
.eh_frame:0000000000016D58                 db  0Eh
.eh_frame:0000000000016D59                 db    8
.eh_frame:0000000000016D5A                 db    0
.eh_frame:0000000000016D5B                 db    0
.eh_frame:0000000000016D5C                 db  10h
.eh_frame:0000000000016D5D                 db    0
.eh_frame:0000000000016D5E                 db    0
.eh_frame:0000000000016D5F                 db    0
.eh_frame:0000000000016D60                 db  10h
.eh_frame:0000000000016D61                 db  10h
.eh_frame:0000000000016D62                 db    0
.eh_frame:0000000000016D63                 db    0
.eh_frame:0000000000016D64                 db  0Ch
.eh_frame:0000000000016D65                 db    6
.eh_frame:0000000000016D66                 db 0FFh
.eh_frame:0000000000016D67                 db 0FFh
.eh_frame:0000000000016D68                 db  4Fh ; O
.eh_frame:0000000000016D69                 db    0
.eh_frame:0000000000016D6A                 db    0
.eh_frame:0000000000016D6B                 db    0
.eh_frame:0000000000016D6C                 db    0
.eh_frame:0000000000016D6D                 db    0
.eh_frame:0000000000016D6E                 db    0
.eh_frame:0000000000016D6F                 db    0
.eh_frame:0000000000016D70                 db  10h
.eh_frame:0000000000016D71                 db    0
.eh_frame:0000000000016D72                 db    0
.eh_frame:0000000000016D73                 db    0
.eh_frame:0000000000016D74                 db  24h ; $
.eh_frame:0000000000016D75                 db  10h
.eh_frame:0000000000016D76                 db    0
.eh_frame:0000000000016D77                 db    0
.eh_frame:0000000000016D78                 db  48h ; H
.eh_frame:0000000000016D79                 db    6
.eh_frame:0000000000016D7A                 db 0FFh
.eh_frame:0000000000016D7B                 db 0FFh
.eh_frame:0000000000016D7C                 db  53h ; S
.eh_frame:0000000000016D7D                 db    0
.eh_frame:0000000000016D7E                 db    0
.eh_frame:0000000000016D7F                 db    0
.eh_frame:0000000000016D80                 db    0
.eh_frame:0000000000016D81                 db    0
.eh_frame:0000000000016D82                 db    0
.eh_frame:0000000000016D83                 db    0
.eh_frame:0000000000016D84                 db  10h
.eh_frame:0000000000016D85                 db    0
.eh_frame:0000000000016D86                 db    0
.eh_frame:0000000000016D87                 db    0
.eh_frame:0000000000016D88                 db  38h ; 8
.eh_frame:0000000000016D89                 db  10h
.eh_frame:0000000000016D8A                 db    0
.eh_frame:0000000000016D8B                 db    0
.eh_frame:0000000000016D8C                 db  94h
.eh_frame:0000000000016D8D                 db    6
.eh_frame:0000000000016D8E                 db 0FFh
.eh_frame:0000000000016D8F                 db 0FFh
.eh_frame:0000000000016D90                 db  75h ; u
.eh_frame:0000000000016D91                 db    0
.eh_frame:0000000000016D92                 db    0
.eh_frame:0000000000016D93                 db    0
.eh_frame:0000000000016D94                 db    0
.eh_frame:0000000000016D95                 db    0
.eh_frame:0000000000016D96                 db    0
.eh_frame:0000000000016D97                 db    0
.eh_frame:0000000000016D98                 db  60h ; `
.eh_frame:0000000000016D99                 db    0
.eh_frame:0000000000016D9A                 db    0
.eh_frame:0000000000016D9B                 db    0
.eh_frame:0000000000016D9C                 db  4Ch ; L
.eh_frame:0000000000016D9D                 db  10h
.eh_frame:0000000000016D9E                 db    0
.eh_frame:0000000000016D9F                 db    0
.eh_frame:0000000000016DA0                 db    0
.eh_frame:0000000000016DA1                 db    7
.eh_frame:0000000000016DA2                 db 0FFh
.eh_frame:0000000000016DA3                 db 0FFh
.eh_frame:0000000000016DA4                 db 0F5h
.eh_frame:0000000000016DA5                 db    0
.eh_frame:0000000000016DA6                 db    0
.eh_frame:0000000000016DA7                 db    0
.eh_frame:0000000000016DA8                 db    0
.eh_frame:0000000000016DA9                 db  42h ; B
.eh_frame:0000000000016DAA                 db  0Eh
.eh_frame:0000000000016DAB                 db  10h
.eh_frame:0000000000016DAC                 db  8Fh
.eh_frame:0000000000016DAD                 db    2
.eh_frame:0000000000016DAE                 db  42h ; B
.eh_frame:0000000000016DAF                 db  0Eh
.eh_frame:0000000000016DB0                 db  18h
.eh_frame:0000000000016DB1                 db  8Eh
.eh_frame:0000000000016DB2                 db    3
.eh_frame:0000000000016DB3                 db  46h ; F
.eh_frame:0000000000016DB4                 db  0Eh
.eh_frame:0000000000016DB5                 db  20h
.eh_frame:0000000000016DB6                 db  8Dh
.eh_frame:0000000000016DB7                 db    4
.eh_frame:0000000000016DB8                 db  42h ; B
.eh_frame:0000000000016DB9                 db  0Eh
.eh_frame:0000000000016DBA                 db  28h ; (
.eh_frame:0000000000016DBB                 db  8Ch
.eh_frame:0000000000016DBC                 db    5
.eh_frame:0000000000016DBD                 db  44h ; D
.eh_frame:0000000000016DBE                 db  0Eh
.eh_frame:0000000000016DBF                 db  30h ; 0
.eh_frame:0000000000016DC0                 db  86h
.eh_frame:0000000000016DC1                 db    6
.eh_frame:0000000000016DC2                 db  41h ; A
.eh_frame:0000000000016DC3                 db  0Eh
.eh_frame:0000000000016DC4                 db  38h ; 8
.eh_frame:0000000000016DC5                 db  83h
.eh_frame:0000000000016DC6                 db    7
.eh_frame:0000000000016DC7                 db  50h ; P
.eh_frame:0000000000016DC8                 db  0Eh
.eh_frame:0000000000016DC9                 db  40h ; @
.eh_frame:0000000000016DCA                 db    2
.eh_frame:0000000000016DCB                 db  85h
.eh_frame:0000000000016DCC                 db  0Ah
.eh_frame:0000000000016DCD                 db  0Eh
.eh_frame:0000000000016DCE                 db  38h ; 8
.eh_frame:0000000000016DCF                 db  41h ; A
.eh_frame:0000000000016DD0                 db  0Eh
.eh_frame:0000000000016DD1                 db  30h ; 0
.eh_frame:0000000000016DD2                 db  41h ; A
.eh_frame:0000000000016DD3                 db  0Eh
.eh_frame:0000000000016DD4                 db  28h ; (
.eh_frame:0000000000016DD5                 db  42h ; B
.eh_frame:0000000000016DD6                 db  0Eh
.eh_frame:0000000000016DD7                 db  20h
.eh_frame:0000000000016DD8                 db  42h ; B
.eh_frame:0000000000016DD9                 db  0Eh
.eh_frame:0000000000016DDA                 db  18h
.eh_frame:0000000000016DDB                 db  42h ; B
.eh_frame:0000000000016DDC                 db  0Eh
.eh_frame:0000000000016DDD                 db  10h
.eh_frame:0000000000016DDE                 db  42h ; B
.eh_frame:0000000000016DDF                 db  0Eh
.eh_frame:0000000000016DE0                 db    8
.eh_frame:0000000000016DE1                 db  48h ; H
.eh_frame:0000000000016DE2                 db  0Bh
.eh_frame:0000000000016DE3                 db  44h ; D
.eh_frame:0000000000016DE4                 db  0Ah
.eh_frame:0000000000016DE5                 db  0Eh
.eh_frame:0000000000016DE6                 db  38h ; 8
.eh_frame:0000000000016DE7                 db  46h ; F
.eh_frame:0000000000016DE8                 db  0Eh
.eh_frame:0000000000016DE9                 db  30h ; 0
.eh_frame:0000000000016DEA                 db  41h ; A
.eh_frame:0000000000016DEB                 db  0Eh
.eh_frame:0000000000016DEC                 db  28h ; (
.eh_frame:0000000000016DED                 db  42h ; B
.eh_frame:0000000000016DEE                 db  0Eh
.eh_frame:0000000000016DEF                 db  20h
.eh_frame:0000000000016DF0                 db  42h ; B
.eh_frame:0000000000016DF1                 db  0Eh
.eh_frame:0000000000016DF2                 db  18h
.eh_frame:0000000000016DF3                 db  42h ; B
.eh_frame:0000000000016DF4                 db  0Eh
.eh_frame:0000000000016DF5                 db  10h
.eh_frame:0000000000016DF6                 db  42h ; B
.eh_frame:0000000000016DF7                 db  0Eh
.eh_frame:0000000000016DF8                 db    8
.eh_frame:0000000000016DF9                 db  45h ; E
.eh_frame:0000000000016DFA                 db  0Bh
.eh_frame:0000000000016DFB                 db    0
.eh_frame:0000000000016DFC                 db  10h
.eh_frame:0000000000016DFD                 db    0
.eh_frame:0000000000016DFE                 db    0
.eh_frame:0000000000016DFF                 db    0
.eh_frame:0000000000016E00                 db 0B0h
.eh_frame:0000000000016E01                 db  10h
.eh_frame:0000000000016E02                 db    0
.eh_frame:0000000000016E03                 db    0
.eh_frame:0000000000016E04                 db  9Ch
.eh_frame:0000000000016E05                 db    7
.eh_frame:0000000000016E06                 db 0FFh
.eh_frame:0000000000016E07                 db 0FFh
.eh_frame:0000000000016E08                 db  34h ; 4
.eh_frame:0000000000016E09                 db    0
.eh_frame:0000000000016E0A                 db    0
.eh_frame:0000000000016E0B                 db    0
.eh_frame:0000000000016E0C                 db    0
.eh_frame:0000000000016E0D                 db    0
.eh_frame:0000000000016E0E                 db    0
.eh_frame:0000000000016E0F                 db    0
.eh_frame:0000000000016E10                 db  10h
.eh_frame:0000000000016E11                 db    0
.eh_frame:0000000000016E12                 db    0
.eh_frame:0000000000016E13                 db    0
.eh_frame:0000000000016E14                 db 0C4h
.eh_frame:0000000000016E15                 db  10h
.eh_frame:0000000000016E16                 db    0
.eh_frame:0000000000016E17                 db    0
.eh_frame:0000000000016E18                 db 0C8h
.eh_frame:0000000000016E19                 db    7
.eh_frame:0000000000016E1A                 db 0FFh
.eh_frame:0000000000016E1B                 db 0FFh
.eh_frame:0000000000016E1C                 db  8Bh
.eh_frame:0000000000016E1D                 db    0
.eh_frame:0000000000016E1E                 db    0
.eh_frame:0000000000016E1F                 db    0
.eh_frame:0000000000016E20                 db    0
.eh_frame:0000000000016E21                 db    0
.eh_frame:0000000000016E22                 db    0
.eh_frame:0000000000016E23                 db    0
.eh_frame:0000000000016E24                 db  10h
.eh_frame:0000000000016E25                 db    0
.eh_frame:0000000000016E26                 db    0
.eh_frame:0000000000016E27                 db    0
.eh_frame:0000000000016E28                 db 0D8h
.eh_frame:0000000000016E29                 db  10h
.eh_frame:0000000000016E2A                 db    0
.eh_frame:0000000000016E2B                 db    0
.eh_frame:0000000000016E2C                 db  44h ; D
.eh_frame:0000000000016E2D                 db    8
.eh_frame:0000000000016E2E                 db 0FFh
.eh_frame:0000000000016E2F                 db 0FFh
.eh_frame:0000000000016E30                 db  57h ; W
.eh_frame:0000000000016E31                 db    0
.eh_frame:0000000000016E32                 db    0
.eh_frame:0000000000016E33                 db    0
.eh_frame:0000000000016E34                 db    0
.eh_frame:0000000000016E35                 db    0
.eh_frame:0000000000016E36                 db    0
.eh_frame:0000000000016E37                 db    0
.eh_frame:0000000000016E38                 db  4Ch ; L
.eh_frame:0000000000016E39                 db    0
.eh_frame:0000000000016E3A                 db    0
.eh_frame:0000000000016E3B                 db    0
.eh_frame:0000000000016E3C                 db 0ECh
.eh_frame:0000000000016E3D                 db  10h
.eh_frame:0000000000016E3E                 db    0
.eh_frame:0000000000016E3F                 db    0
.eh_frame:0000000000016E40                 db  90h
.eh_frame:0000000000016E41                 db    8
.eh_frame:0000000000016E42                 db 0FFh
.eh_frame:0000000000016E43                 db 0FFh
.eh_frame:0000000000016E44                 db  69h ; i
.eh_frame:0000000000016E45                 db    2
.eh_frame:0000000000016E46                 db    0
.eh_frame:0000000000016E47                 db    0
.eh_frame:0000000000016E48                 db    0
.eh_frame:0000000000016E49                 db  42h ; B
.eh_frame:0000000000016E4A                 db  0Eh
.eh_frame:0000000000016E4B                 db  10h
.eh_frame:0000000000016E4C                 db  8Fh
.eh_frame:0000000000016E4D                 db    2
.eh_frame:0000000000016E4E                 db  42h ; B
.eh_frame:0000000000016E4F                 db  0Eh
.eh_frame:0000000000016E50                 db  18h
.eh_frame:0000000000016E51                 db  8Eh
.eh_frame:0000000000016E52                 db    3
.eh_frame:0000000000016E53                 db  42h ; B
.eh_frame:0000000000016E54                 db  0Eh
.eh_frame:0000000000016E55                 db  20h
.eh_frame:0000000000016E56                 db  8Dh
.eh_frame:0000000000016E57                 db    4
.eh_frame:0000000000016E58                 db  42h ; B
.eh_frame:0000000000016E59                 db  0Eh
.eh_frame:0000000000016E5A                 db  28h ; (
.eh_frame:0000000000016E5B                 db  8Ch
.eh_frame:0000000000016E5C                 db    5
.eh_frame:0000000000016E5D                 db  41h ; A
.eh_frame:0000000000016E5E                 db  0Eh
.eh_frame:0000000000016E5F                 db  30h ; 0
.eh_frame:0000000000016E60                 db  86h
.eh_frame:0000000000016E61                 db    6
.eh_frame:0000000000016E62                 db  41h ; A
.eh_frame:0000000000016E63                 db  0Eh
.eh_frame:0000000000016E64                 db  38h ; 8
.eh_frame:0000000000016E65                 db  83h
.eh_frame:0000000000016E66                 db    7
.eh_frame:0000000000016E67                 db  46h ; F
.eh_frame:0000000000016E68                 db  0Eh
.eh_frame:0000000000016E69                 db  80h
.eh_frame:0000000000016E6A                 db    1
.eh_frame:0000000000016E6B                 db    3
.eh_frame:0000000000016E6C                 db 0D2h
.eh_frame:0000000000016E6D                 db    1
.eh_frame:0000000000016E6E                 db  0Ah
.eh_frame:0000000000016E6F                 db  0Eh
.eh_frame:0000000000016E70                 db  38h ; 8
.eh_frame:0000000000016E71                 db  41h ; A
.eh_frame:0000000000016E72                 db  0Eh
.eh_frame:0000000000016E73                 db  30h ; 0
.eh_frame:0000000000016E74                 db  41h ; A
.eh_frame:0000000000016E75                 db  0Eh
.eh_frame:0000000000016E76                 db  28h ; (
.eh_frame:0000000000016E77                 db  42h ; B
.eh_frame:0000000000016E78                 db  0Eh
.eh_frame:0000000000016E79                 db  20h
.eh_frame:0000000000016E7A                 db  42h ; B
.eh_frame:0000000000016E7B                 db  0Eh
.eh_frame:0000000000016E7C                 db  18h
.eh_frame:0000000000016E7D                 db  42h ; B
.eh_frame:0000000000016E7E                 db  0Eh
.eh_frame:0000000000016E7F                 db  10h
.eh_frame:0000000000016E80                 db  42h ; B
.eh_frame:0000000000016E81                 db  0Eh
.eh_frame:0000000000016E82                 db    8
.eh_frame:0000000000016E83                 db  44h ; D
.eh_frame:0000000000016E84                 db  0Bh
.eh_frame:0000000000016E85                 db    0
.eh_frame:0000000000016E86                 db    0
.eh_frame:0000000000016E87                 db    0
.eh_frame:0000000000016E88                 db  34h ; 4
.eh_frame:0000000000016E89                 db    0
.eh_frame:0000000000016E8A                 db    0
.eh_frame:0000000000016E8B                 db    0
.eh_frame:0000000000016E8C                 db  3Ch ; <
.eh_frame:0000000000016E8D                 db  11h
.eh_frame:0000000000016E8E                 db    0
.eh_frame:0000000000016E8F                 db    0
.eh_frame:0000000000016E90                 db 0B0h
.eh_frame:0000000000016E91                 db  0Ah
.eh_frame:0000000000016E92                 db 0FFh
.eh_frame:0000000000016E93                 db 0FFh
.eh_frame:0000000000016E94                 db 0DEh
.eh_frame:0000000000016E95                 db    1
.eh_frame:0000000000016E96                 db    0
.eh_frame:0000000000016E97                 db    0
.eh_frame:0000000000016E98                 db    0
.eh_frame:0000000000016E99                 db  58h ; X
.eh_frame:0000000000016E9A                 db  0Eh
.eh_frame:0000000000016E9B                 db  10h
.eh_frame:0000000000016E9C                 db  8Ch
.eh_frame:0000000000016E9D                 db    2
.eh_frame:0000000000016E9E                 db  41h ; A
.eh_frame:0000000000016E9F                 db  0Eh
.eh_frame:0000000000016EA0                 db  18h
.eh_frame:0000000000016EA1                 db  86h
.eh_frame:0000000000016EA2                 db    3
.eh_frame:0000000000016EA3                 db  44h ; D
.eh_frame:0000000000016EA4                 db  0Eh
.eh_frame:0000000000016EA5                 db  20h
.eh_frame:0000000000016EA6                 db  83h
.eh_frame:0000000000016EA7                 db    4
.eh_frame:0000000000016EA8                 db    2
.eh_frame:0000000000016EA9                 db 0D0h
.eh_frame:0000000000016EAA                 db  0Eh
.eh_frame:0000000000016EAB                 db  18h
.eh_frame:0000000000016EAC                 db  41h ; A
.eh_frame:0000000000016EAD                 db  0Eh
.eh_frame:0000000000016EAE                 db  10h
.eh_frame:0000000000016EAF                 db  42h ; B
.eh_frame:0000000000016EB0                 db  0Eh
.eh_frame:0000000000016EB1                 db    8
.eh_frame:0000000000016EB2                 db  48h ; H
.eh_frame:0000000000016EB3                 db 0C3h
.eh_frame:0000000000016EB4                 db 0C6h
.eh_frame:0000000000016EB5                 db 0CCh
.eh_frame:0000000000016EB6                 db  48h ; H
.eh_frame:0000000000016EB7                 db  0Eh
.eh_frame:0000000000016EB8                 db  20h
.eh_frame:0000000000016EB9                 db  83h
.eh_frame:0000000000016EBA                 db    4
.eh_frame:0000000000016EBB                 db  86h
.eh_frame:0000000000016EBC                 db    3
.eh_frame:0000000000016EBD                 db  8Ch
.eh_frame:0000000000016EBE                 db    2
.eh_frame:0000000000016EBF                 db    0
.eh_frame:0000000000016EC0                 db  4Ch ; L
.eh_frame:0000000000016EC1                 db    0
.eh_frame:0000000000016EC2                 db    0
.eh_frame:0000000000016EC3                 db    0
.eh_frame:0000000000016EC4                 db  74h ; t
.eh_frame:0000000000016EC5                 db  11h
.eh_frame:0000000000016EC6                 db    0
.eh_frame:0000000000016EC7                 db    0
.eh_frame:0000000000016EC8                 db  58h ; X
.eh_frame:0000000000016EC9                 db  0Ch
.eh_frame:0000000000016ECA                 db 0FFh
.eh_frame:0000000000016ECB                 db 0FFh
.eh_frame:0000000000016ECC                 db 0AFh
.eh_frame:0000000000016ECD                 db    2
.eh_frame:0000000000016ECE                 db    0
.eh_frame:0000000000016ECF                 db    0
.eh_frame:0000000000016ED0                 db    0
.eh_frame:0000000000016ED1                 db  42h ; B
.eh_frame:0000000000016ED2                 db  0Eh
.eh_frame:0000000000016ED3                 db  10h
.eh_frame:0000000000016ED4                 db  8Fh
.eh_frame:0000000000016ED5                 db    2
.eh_frame:0000000000016ED6                 db  42h ; B
.eh_frame:0000000000016ED7                 db  0Eh
.eh_frame:0000000000016ED8                 db  18h
.eh_frame:0000000000016ED9                 db  8Eh
.eh_frame:0000000000016EDA                 db    3
.eh_frame:0000000000016EDB                 db  45h ; E
.eh_frame:0000000000016EDC                 db  0Eh
.eh_frame:0000000000016EDD                 db  20h
.eh_frame:0000000000016EDE                 db  8Dh
.eh_frame:0000000000016EDF                 db    4
.eh_frame:0000000000016EE0                 db  42h ; B
.eh_frame:0000000000016EE1                 db  0Eh
.eh_frame:0000000000016EE2                 db  28h ; (
.eh_frame:0000000000016EE3                 db  8Ch
.eh_frame:0000000000016EE4                 db    5
.eh_frame:0000000000016EE5                 db  41h ; A
.eh_frame:0000000000016EE6                 db  0Eh
.eh_frame:0000000000016EE7                 db  30h ; 0
.eh_frame:0000000000016EE8                 db  86h
.eh_frame:0000000000016EE9                 db    6
.eh_frame:0000000000016EEA                 db  41h ; A
.eh_frame:0000000000016EEB                 db  0Eh
.eh_frame:0000000000016EEC                 db  38h ; 8
.eh_frame:0000000000016EED                 db  83h
.eh_frame:0000000000016EEE                 db    7
.eh_frame:0000000000016EEF                 db  4Bh ; K
.eh_frame:0000000000016EF0                 db  0Eh
.eh_frame:0000000000016EF1                 db 0A0h
.eh_frame:0000000000016EF2                 db    1
.eh_frame:0000000000016EF3                 db    3
.eh_frame:0000000000016EF4                 db 0A6h
.eh_frame:0000000000016EF5                 db    1
.eh_frame:0000000000016EF6                 db  0Ah
.eh_frame:0000000000016EF7                 db  0Eh
.eh_frame:0000000000016EF8                 db  38h ; 8
.eh_frame:0000000000016EF9                 db  41h ; A
.eh_frame:0000000000016EFA                 db  0Eh
.eh_frame:0000000000016EFB                 db  30h ; 0
.eh_frame:0000000000016EFC                 db  41h ; A
.eh_frame:0000000000016EFD                 db  0Eh
.eh_frame:0000000000016EFE                 db  28h ; (
.eh_frame:0000000000016EFF                 db  42h ; B
.eh_frame:0000000000016F00                 db  0Eh
.eh_frame:0000000000016F01                 db  20h
.eh_frame:0000000000016F02                 db  42h ; B
.eh_frame:0000000000016F03                 db  0Eh
.eh_frame:0000000000016F04                 db  18h
.eh_frame:0000000000016F05                 db  42h ; B
.eh_frame:0000000000016F06                 db  0Eh
.eh_frame:0000000000016F07                 db  10h
.eh_frame:0000000000016F08                 db  42h ; B
.eh_frame:0000000000016F09                 db  0Eh
.eh_frame:0000000000016F0A                 db    8
.eh_frame:0000000000016F0B                 db  48h ; H
.eh_frame:0000000000016F0C                 db  0Bh
.eh_frame:0000000000016F0D                 db    0
.eh_frame:0000000000016F0E                 db    0
.eh_frame:0000000000016F0F                 db    0
.eh_frame:0000000000016F10                 db  48h ; H
.eh_frame:0000000000016F11                 db    0
.eh_frame:0000000000016F12                 db    0
.eh_frame:0000000000016F13                 db    0
.eh_frame:0000000000016F14                 db 0C4h
.eh_frame:0000000000016F15                 db  11h
.eh_frame:0000000000016F16                 db    0
.eh_frame:0000000000016F17                 db    0
.eh_frame:0000000000016F18                 db 0B8h
.eh_frame:0000000000016F19                 db  0Eh
.eh_frame:0000000000016F1A                 db 0FFh
.eh_frame:0000000000016F1B                 db 0FFh
.eh_frame:0000000000016F1C                 db  59h ; Y
.eh_frame:0000000000016F1D                 db    1
.eh_frame:0000000000016F1E                 db    0
.eh_frame:0000000000016F1F                 db    0
.eh_frame:0000000000016F20                 db    0
.eh_frame:0000000000016F21                 db  42h ; B
.eh_frame:0000000000016F22                 db  0Eh
.eh_frame:0000000000016F23                 db  10h
.eh_frame:0000000000016F24                 db  8Fh
.eh_frame:0000000000016F25                 db    2
.eh_frame:0000000000016F26                 db  42h ; B
.eh_frame:0000000000016F27                 db  0Eh
.eh_frame:0000000000016F28                 db  18h
.eh_frame:0000000000016F29                 db  8Eh
.eh_frame:0000000000016F2A                 db    3
.eh_frame:0000000000016F2B                 db  45h ; E
.eh_frame:0000000000016F2C                 db  0Eh
.eh_frame:0000000000016F2D                 db  20h
.eh_frame:0000000000016F2E                 db  8Dh
.eh_frame:0000000000016F2F                 db    4
.eh_frame:0000000000016F30                 db  42h ; B
.eh_frame:0000000000016F31                 db  0Eh
.eh_frame:0000000000016F32                 db  28h ; (
.eh_frame:0000000000016F33                 db  8Ch
.eh_frame:0000000000016F34                 db    5
.eh_frame:0000000000016F35                 db  44h ; D
.eh_frame:0000000000016F36                 db  0Eh
.eh_frame:0000000000016F37                 db  30h ; 0
.eh_frame:0000000000016F38                 db  86h
.eh_frame:0000000000016F39                 db    6
.eh_frame:0000000000016F3A                 db  41h ; A
.eh_frame:0000000000016F3B                 db  0Eh
.eh_frame:0000000000016F3C                 db  38h ; 8
.eh_frame:0000000000016F3D                 db  83h
.eh_frame:0000000000016F3E                 db    7
.eh_frame:0000000000016F3F                 db  49h ; I
.eh_frame:0000000000016F40                 db  0Eh
.eh_frame:0000000000016F41                 db  70h ; p
.eh_frame:0000000000016F42                 db    3
.eh_frame:0000000000016F43                 db  29h ; )
.eh_frame:0000000000016F44                 db    1
.eh_frame:0000000000016F45                 db  0Ah
.eh_frame:0000000000016F46                 db  0Eh
.eh_frame:0000000000016F47                 db  38h ; 8
.eh_frame:0000000000016F48                 db  41h ; A
.eh_frame:0000000000016F49                 db  0Eh
.eh_frame:0000000000016F4A                 db  30h ; 0
.eh_frame:0000000000016F4B                 db  41h ; A
.eh_frame:0000000000016F4C                 db  0Eh
.eh_frame:0000000000016F4D                 db  28h ; (
.eh_frame:0000000000016F4E                 db  42h ; B
.eh_frame:0000000000016F4F                 db  0Eh
.eh_frame:0000000000016F50                 db  20h
.eh_frame:0000000000016F51                 db  42h ; B
.eh_frame:0000000000016F52                 db  0Eh
.eh_frame:0000000000016F53                 db  18h
.eh_frame:0000000000016F54                 db  42h ; B
.eh_frame:0000000000016F55                 db  0Eh
.eh_frame:0000000000016F56                 db  10h
.eh_frame:0000000000016F57                 db  42h ; B
.eh_frame:0000000000016F58                 db  0Eh
.eh_frame:0000000000016F59                 db    8
.eh_frame:0000000000016F5A                 db  41h ; A
.eh_frame:0000000000016F5B                 db  0Bh
.eh_frame:0000000000016F5C                 db  4Ch ; L
.eh_frame:0000000000016F5D                 db    0
.eh_frame:0000000000016F5E                 db    0
.eh_frame:0000000000016F5F                 db    0
.eh_frame:0000000000016F60                 db  10h
.eh_frame:0000000000016F61                 db  12h
.eh_frame:0000000000016F62                 db    0
.eh_frame:0000000000016F63                 db    0
.eh_frame:0000000000016F64                 db 0CCh
.eh_frame:0000000000016F65                 db  0Fh
.eh_frame:0000000000016F66                 db 0FFh
.eh_frame:0000000000016F67                 db 0FFh
.eh_frame:0000000000016F68                 db 0A8h
.eh_frame:0000000000016F69                 db    1
.eh_frame:0000000000016F6A                 db    0
.eh_frame:0000000000016F6B                 db    0
.eh_frame:0000000000016F6C                 db    0
.eh_frame:0000000000016F6D                 db  5Eh ; ^
.eh_frame:0000000000016F6E                 db  0Eh
.eh_frame:0000000000016F6F                 db  10h
.eh_frame:0000000000016F70                 db  8Dh
.eh_frame:0000000000016F71                 db    2
.eh_frame:0000000000016F72                 db  42h ; B
.eh_frame:0000000000016F73                 db  0Eh
.eh_frame:0000000000016F74                 db  18h
.eh_frame:0000000000016F75                 db  8Ch
.eh_frame:0000000000016F76                 db    3
.eh_frame:0000000000016F77                 db  45h ; E
.eh_frame:0000000000016F78                 db  0Eh
.eh_frame:0000000000016F79                 db  20h
.eh_frame:0000000000016F7A                 db  86h
.eh_frame:0000000000016F7B                 db    4
.eh_frame:0000000000016F7C                 db  41h ; A
.eh_frame:0000000000016F7D                 db  0Eh
.eh_frame:0000000000016F7E                 db  28h ; (
.eh_frame:0000000000016F7F                 db  83h
.eh_frame:0000000000016F80                 db    5
.eh_frame:0000000000016F81                 db  4Dh ; M
.eh_frame:0000000000016F82                 db  0Eh
.eh_frame:0000000000016F83                 db  30h ; 0
.eh_frame:0000000000016F84                 db    2
.eh_frame:0000000000016F85                 db  95h
.eh_frame:0000000000016F86                 db  0Eh
.eh_frame:0000000000016F87                 db    8
.eh_frame:0000000000016F88                 db 0C3h
.eh_frame:0000000000016F89                 db 0C6h
.eh_frame:0000000000016F8A                 db 0CCh
.eh_frame:0000000000016F8B                 db 0CDh
.eh_frame:0000000000016F8C                 db  48h ; H
.eh_frame:0000000000016F8D                 db  0Eh
.eh_frame:0000000000016F8E                 db  30h ; 0
.eh_frame:0000000000016F8F                 db  83h
.eh_frame:0000000000016F90                 db    5
.eh_frame:0000000000016F91                 db  86h
.eh_frame:0000000000016F92                 db    4
.eh_frame:0000000000016F93                 db  8Ch
.eh_frame:0000000000016F94                 db    3
.eh_frame:0000000000016F95                 db  8Dh
.eh_frame:0000000000016F96                 db    2
.eh_frame:0000000000016F97                 db    2
.eh_frame:0000000000016F98                 db  90h
.eh_frame:0000000000016F99                 db  0Ah
.eh_frame:0000000000016F9A                 db  0Eh
.eh_frame:0000000000016F9B                 db  28h ; (
.eh_frame:0000000000016F9C                 db  41h ; A
.eh_frame:0000000000016F9D                 db  0Eh
.eh_frame:0000000000016F9E                 db  20h
.eh_frame:0000000000016F9F                 db  41h ; A
.eh_frame:0000000000016FA0                 db  0Eh
.eh_frame:0000000000016FA1                 db  18h
.eh_frame:0000000000016FA2                 db  42h ; B
.eh_frame:0000000000016FA3                 db  0Eh
.eh_frame:0000000000016FA4                 db  10h
.eh_frame:0000000000016FA5                 db  42h ; B
.eh_frame:0000000000016FA6                 db  0Eh
.eh_frame:0000000000016FA7                 db    8
.eh_frame:0000000000016FA8                 db  4Ah ; J
.eh_frame:0000000000016FA9                 db  0Bh
.eh_frame:0000000000016FAA                 db    0
.eh_frame:0000000000016FAB                 db    0
.eh_frame:0000000000016FAC                 db  20h
.eh_frame:0000000000016FAD                 db    0
.eh_frame:0000000000016FAE                 db    0
.eh_frame:0000000000016FAF                 db    0
.eh_frame:0000000000016FB0                 db  60h ; `
.eh_frame:0000000000016FB1                 db  12h
.eh_frame:0000000000016FB2                 db    0
.eh_frame:0000000000016FB3                 db    0
.eh_frame:0000000000016FB4                 db  2Ch ; ,
.eh_frame:0000000000016FB5                 db  11h
.eh_frame:0000000000016FB6                 db 0FFh
.eh_frame:0000000000016FB7                 db 0FFh
.eh_frame:0000000000016FB8                 db 0E0h
.eh_frame:0000000000016FB9                 db    0
.eh_frame:0000000000016FBA                 db    0
.eh_frame:0000000000016FBB                 db    0
.eh_frame:0000000000016FBC                 db    0
.eh_frame:0000000000016FBD                 db  41h ; A
.eh_frame:0000000000016FBE                 db  0Eh
.eh_frame:0000000000016FBF                 db  10h
.eh_frame:0000000000016FC0                 db  83h
.eh_frame:0000000000016FC1                 db    2
.eh_frame:0000000000016FC2                 db  47h ; G
.eh_frame:0000000000016FC3                 db  0Eh
.eh_frame:0000000000016FC4                 db  30h ; 0
.eh_frame:0000000000016FC5                 db    2
.eh_frame:0000000000016FC6                 db  77h ; w
.eh_frame:0000000000016FC7                 db  0Ah
.eh_frame:0000000000016FC8                 db  0Eh
.eh_frame:0000000000016FC9                 db  10h
.eh_frame:0000000000016FCA                 db  41h ; A
.eh_frame:0000000000016FCB                 db  0Eh
.eh_frame:0000000000016FCC                 db    8
.eh_frame:0000000000016FCD                 db  48h ; H
.eh_frame:0000000000016FCE                 db  0Bh
.eh_frame:0000000000016FCF                 db    0
.eh_frame:0000000000016FD0                 db  40h ; @
.eh_frame:0000000000016FD1                 db    0
.eh_frame:0000000000016FD2                 db    0
.eh_frame:0000000000016FD3                 db    0
.eh_frame:0000000000016FD4                 db  84h
.eh_frame:0000000000016FD5                 db  12h
.eh_frame:0000000000016FD6                 db    0
.eh_frame:0000000000016FD7                 db    0
.eh_frame:0000000000016FD8                 db 0E8h
.eh_frame:0000000000016FD9                 db  11h
.eh_frame:0000000000016FDA                 db 0FFh
.eh_frame:0000000000016FDB                 db 0FFh
.eh_frame:0000000000016FDC                 db 0D1h
.eh_frame:0000000000016FDD                 db    0
.eh_frame:0000000000016FDE                 db    0
.eh_frame:0000000000016FDF                 db    0
.eh_frame:0000000000016FE0                 db    0
.eh_frame:0000000000016FE1                 db  42h ; B
.eh_frame:0000000000016FE2                 db  0Eh
.eh_frame:0000000000016FE3                 db  10h
.eh_frame:0000000000016FE4                 db  8Eh
.eh_frame:0000000000016FE5                 db    2
.eh_frame:0000000000016FE6                 db  42h ; B
.eh_frame:0000000000016FE7                 db  0Eh
.eh_frame:0000000000016FE8                 db  18h
.eh_frame:0000000000016FE9                 db  8Dh
.eh_frame:0000000000016FEA                 db    3
.eh_frame:0000000000016FEB                 db  46h ; F
.eh_frame:0000000000016FEC                 db  0Eh
.eh_frame:0000000000016FED                 db  20h
.eh_frame:0000000000016FEE                 db  8Ch
.eh_frame:0000000000016FEF                 db    4
.eh_frame:0000000000016FF0                 db  41h ; A
.eh_frame:0000000000016FF1                 db  0Eh
.eh_frame:0000000000016FF2                 db  28h ; (
.eh_frame:0000000000016FF3                 db  86h
.eh_frame:0000000000016FF4                 db    5
.eh_frame:0000000000016FF5                 db  48h ; H
.eh_frame:0000000000016FF6                 db  0Eh
.eh_frame:0000000000016FF7                 db  30h ; 0
.eh_frame:0000000000016FF8                 db  83h
.eh_frame:0000000000016FF9                 db    6
.eh_frame:0000000000016FFA                 db  47h ; G
.eh_frame:0000000000016FFB                 db  0Eh
.eh_frame:0000000000016FFC                 db  40h ; @
.eh_frame:0000000000016FFD                 db    2
.eh_frame:0000000000016FFE                 db  96h
.eh_frame:0000000000016FFF                 db  0Ah
.eh_frame:0000000000017000                 db  0Eh
.eh_frame:0000000000017001                 db  30h ; 0
.eh_frame:0000000000017002                 db  41h ; A
.eh_frame:0000000000017003                 db  0Eh
.eh_frame:0000000000017004                 db  28h ; (
.eh_frame:0000000000017005                 db  41h ; A
.eh_frame:0000000000017006                 db  0Eh
.eh_frame:0000000000017007                 db  20h
.eh_frame:0000000000017008                 db  42h ; B
.eh_frame:0000000000017009                 db  0Eh
.eh_frame:000000000001700A                 db  18h
.eh_frame:000000000001700B                 db  42h ; B
.eh_frame:000000000001700C                 db  0Eh
.eh_frame:000000000001700D                 db  10h
.eh_frame:000000000001700E                 db  42h ; B
.eh_frame:000000000001700F                 db  0Eh
.eh_frame:0000000000017010                 db    8
.eh_frame:0000000000017011                 db  48h ; H
.eh_frame:0000000000017012                 db  0Bh
.eh_frame:0000000000017013                 db    0
.eh_frame:0000000000017014                 db  4Ch ; L
.eh_frame:0000000000017015                 db    0
.eh_frame:0000000000017016                 db    0
.eh_frame:0000000000017017                 db    0
.eh_frame:0000000000017018                 db 0C8h
.eh_frame:0000000000017019                 db  12h
.eh_frame:000000000001701A                 db    0
.eh_frame:000000000001701B                 db    0
.eh_frame:000000000001701C                 db  84h
.eh_frame:000000000001701D                 db  12h
.eh_frame:000000000001701E                 db 0FFh
.eh_frame:000000000001701F                 db 0FFh
.eh_frame:0000000000017020                 db  37h ; 7
.eh_frame:0000000000017021                 db    2
.eh_frame:0000000000017022                 db    0
.eh_frame:0000000000017023                 db    0
.eh_frame:0000000000017024                 db    0
.eh_frame:0000000000017025                 db  42h ; B
.eh_frame:0000000000017026                 db  0Eh
.eh_frame:0000000000017027                 db  10h
.eh_frame:0000000000017028                 db  8Fh
.eh_frame:0000000000017029                 db    2
.eh_frame:000000000001702A                 db  42h ; B
.eh_frame:000000000001702B                 db  0Eh
.eh_frame:000000000001702C                 db  18h
.eh_frame:000000000001702D                 db  8Eh
.eh_frame:000000000001702E                 db    3
.eh_frame:000000000001702F                 db  42h ; B
.eh_frame:0000000000017030                 db  0Eh
.eh_frame:0000000000017031                 db  20h
.eh_frame:0000000000017032                 db  8Dh
.eh_frame:0000000000017033                 db    4
.eh_frame:0000000000017034                 db  42h ; B
.eh_frame:0000000000017035                 db  0Eh
.eh_frame:0000000000017036                 db  28h ; (
.eh_frame:0000000000017037                 db  8Ch
.eh_frame:0000000000017038                 db    5
.eh_frame:0000000000017039                 db  44h ; D
.eh_frame:000000000001703A                 db  0Eh
.eh_frame:000000000001703B                 db  30h ; 0
.eh_frame:000000000001703C                 db  86h
.eh_frame:000000000001703D                 db    6
.eh_frame:000000000001703E                 db  41h ; A
.eh_frame:000000000001703F                 db  0Eh
.eh_frame:0000000000017040                 db  38h ; 8
.eh_frame:0000000000017041                 db  83h
.eh_frame:0000000000017042                 db    7
.eh_frame:0000000000017043                 db  44h ; D
.eh_frame:0000000000017044                 db  0Eh
.eh_frame:0000000000017045                 db  80h
.eh_frame:0000000000017046                 db    1
.eh_frame:0000000000017047                 db    3
.eh_frame:0000000000017048                 db  87h
.eh_frame:0000000000017049                 db    1
.eh_frame:000000000001704A                 db  0Ah
.eh_frame:000000000001704B                 db  0Eh
.eh_frame:000000000001704C                 db  38h ; 8
.eh_frame:000000000001704D                 db  41h ; A
.eh_frame:000000000001704E                 db  0Eh
.eh_frame:000000000001704F                 db  30h ; 0
.eh_frame:0000000000017050                 db  41h ; A
.eh_frame:0000000000017051                 db  0Eh
.eh_frame:0000000000017052                 db  28h ; (
.eh_frame:0000000000017053                 db  42h ; B
.eh_frame:0000000000017054                 db  0Eh
.eh_frame:0000000000017055                 db  20h
.eh_frame:0000000000017056                 db  42h ; B
.eh_frame:0000000000017057                 db  0Eh
.eh_frame:0000000000017058                 db  18h
.eh_frame:0000000000017059                 db  42h ; B
.eh_frame:000000000001705A                 db  0Eh
.eh_frame:000000000001705B                 db  10h
.eh_frame:000000000001705C                 db  42h ; B
.eh_frame:000000000001705D                 db  0Eh
.eh_frame:000000000001705E                 db    8
.eh_frame:000000000001705F                 db  46h ; F
.eh_frame:0000000000017060                 db  0Bh
.eh_frame:0000000000017061                 db    0
.eh_frame:0000000000017062                 db    0
.eh_frame:0000000000017063                 db    0
.eh_frame:0000000000017064                 db  28h ; (
.eh_frame:0000000000017065                 db    0
.eh_frame:0000000000017066                 db    0
.eh_frame:0000000000017067                 db    0
.eh_frame:0000000000017068                 db  18h
.eh_frame:0000000000017069                 db  13h
.eh_frame:000000000001706A                 db    0
.eh_frame:000000000001706B                 db    0
.eh_frame:000000000001706C                 db  74h ; t
.eh_frame:000000000001706D                 db  14h
.eh_frame:000000000001706E                 db 0FFh
.eh_frame:000000000001706F                 db 0FFh
.eh_frame:0000000000017070                 db 0A0h
.eh_frame:0000000000017071                 db    0
.eh_frame:0000000000017072                 db    0
.eh_frame:0000000000017073                 db    0
.eh_frame:0000000000017074                 db    0
.eh_frame:0000000000017075                 db  41h ; A
.eh_frame:0000000000017076                 db  0Eh
.eh_frame:0000000000017077                 db  10h
.eh_frame:0000000000017078                 db  86h
.eh_frame:0000000000017079                 db    2
.eh_frame:000000000001707A                 db  41h ; A
.eh_frame:000000000001707B                 db  0Eh
.eh_frame:000000000001707C                 db  18h
.eh_frame:000000000001707D                 db  83h
.eh_frame:000000000001707E                 db    3
.eh_frame:000000000001707F                 db  4Ah ; J
.eh_frame:0000000000017080                 db  0Eh
.eh_frame:0000000000017081                 db  30h ; 0
.eh_frame:0000000000017082                 db    2
.eh_frame:0000000000017083                 db  4Eh ; N
.eh_frame:0000000000017084                 db  0Ah
.eh_frame:0000000000017085                 db  0Eh
.eh_frame:0000000000017086                 db  18h
.eh_frame:0000000000017087                 db  41h ; A
.eh_frame:0000000000017088                 db  0Eh
.eh_frame:0000000000017089                 db  10h
.eh_frame:000000000001708A                 db  41h ; A
.eh_frame:000000000001708B                 db  0Eh
.eh_frame:000000000001708C                 db    8
.eh_frame:000000000001708D                 db  44h ; D
.eh_frame:000000000001708E                 db  0Bh
.eh_frame:000000000001708F                 db    0
.eh_frame:0000000000017090                 db  38h ; 8
.eh_frame:0000000000017091                 db    0
.eh_frame:0000000000017092                 db    0
.eh_frame:0000000000017093                 db    0
.eh_frame:0000000000017094                 db  44h ; D
.eh_frame:0000000000017095                 db  13h
.eh_frame:0000000000017096                 db    0
.eh_frame:0000000000017097                 db    0
.eh_frame:0000000000017098                 db 0E8h
.eh_frame:0000000000017099                 db  14h
.eh_frame:000000000001709A                 db 0FFh
.eh_frame:000000000001709B                 db 0FFh
.eh_frame:000000000001709C                 db  86h
.eh_frame:000000000001709D                 db    0
.eh_frame:000000000001709E                 db    0
.eh_frame:000000000001709F                 db    0
.eh_frame:00000000000170A0                 db    0
.eh_frame:00000000000170A1                 db  42h ; B
.eh_frame:00000000000170A2                 db  0Eh
.eh_frame:00000000000170A3                 db  10h
.eh_frame:00000000000170A4                 db  8Ch
.eh_frame:00000000000170A5                 db    2
.eh_frame:00000000000170A6                 db  41h ; A
.eh_frame:00000000000170A7                 db  0Eh
.eh_frame:00000000000170A8                 db  18h
.eh_frame:00000000000170A9                 db  86h
.eh_frame:00000000000170AA                 db    3
.eh_frame:00000000000170AB                 db  41h ; A
.eh_frame:00000000000170AC                 db  0Eh
.eh_frame:00000000000170AD                 db  20h
.eh_frame:00000000000170AE                 db  83h
.eh_frame:00000000000170AF                 db    4
.eh_frame:00000000000170B0                 db    2
.eh_frame:00000000000170B1                 db  47h ; G
.eh_frame:00000000000170B2                 db  0Ah
.eh_frame:00000000000170B3                 db  0Eh
.eh_frame:00000000000170B4                 db  18h
.eh_frame:00000000000170B5                 db  41h ; A
.eh_frame:00000000000170B6                 db  0Eh
.eh_frame:00000000000170B7                 db  10h
.eh_frame:00000000000170B8                 db  42h ; B
.eh_frame:00000000000170B9                 db  0Eh
.eh_frame:00000000000170BA                 db    8
.eh_frame:00000000000170BB                 db  42h ; B
.eh_frame:00000000000170BC                 db  0Bh
.eh_frame:00000000000170BD                 db  52h ; R
.eh_frame:00000000000170BE                 db  0Ah
.eh_frame:00000000000170BF                 db  0Eh
.eh_frame:00000000000170C0                 db  18h
.eh_frame:00000000000170C1                 db  41h ; A
.eh_frame:00000000000170C2                 db  0Eh
.eh_frame:00000000000170C3                 db  10h
.eh_frame:00000000000170C4                 db  42h ; B
.eh_frame:00000000000170C5                 db  0Eh
.eh_frame:00000000000170C6                 db    8
.eh_frame:00000000000170C7                 db  4Bh ; K
.eh_frame:00000000000170C8                 db  0Bh
.eh_frame:00000000000170C9                 db    0
.eh_frame:00000000000170CA                 db    0
.eh_frame:00000000000170CB                 db    0
.eh_frame:00000000000170CC                 db  60h ; `
.eh_frame:00000000000170CD                 db    0
.eh_frame:00000000000170CE                 db    0
.eh_frame:00000000000170CF                 db    0
.eh_frame:00000000000170D0                 db  80h
.eh_frame:00000000000170D1                 db  13h
.eh_frame:00000000000170D2                 db    0
.eh_frame:00000000000170D3                 db    0
.eh_frame:00000000000170D4                 db  3Ch ; <
.eh_frame:00000000000170D5                 db  15h
.eh_frame:00000000000170D6                 db 0FFh
.eh_frame:00000000000170D7                 db 0FFh
.eh_frame:00000000000170D8                 db  52h ; R
.eh_frame:00000000000170D9                 db    1
.eh_frame:00000000000170DA                 db    0
.eh_frame:00000000000170DB                 db    0
.eh_frame:00000000000170DC                 db    0
.eh_frame:00000000000170DD                 db  45h ; E
.eh_frame:00000000000170DE                 db  0Eh
.eh_frame:00000000000170DF                 db  10h
.eh_frame:00000000000170E0                 db  8Eh
.eh_frame:00000000000170E1                 db    2
.eh_frame:00000000000170E2                 db  42h ; B
.eh_frame:00000000000170E3                 db  0Eh
.eh_frame:00000000000170E4                 db  18h
.eh_frame:00000000000170E5                 db  8Dh
.eh_frame:00000000000170E6                 db    3
.eh_frame:00000000000170E7                 db  42h ; B
.eh_frame:00000000000170E8                 db  0Eh
.eh_frame:00000000000170E9                 db  20h
.eh_frame:00000000000170EA                 db  8Ch
.eh_frame:00000000000170EB                 db    4
.eh_frame:00000000000170EC                 db  41h ; A
.eh_frame:00000000000170ED                 db  0Eh
.eh_frame:00000000000170EE                 db  28h ; (
.eh_frame:00000000000170EF                 db  86h
.eh_frame:00000000000170F0                 db    5
.eh_frame:00000000000170F1                 db  41h ; A
.eh_frame:00000000000170F2                 db  0Eh
.eh_frame:00000000000170F3                 db  30h ; 0
.eh_frame:00000000000170F4                 db  83h
.eh_frame:00000000000170F5                 db    6
.eh_frame:00000000000170F6                 db    2
.eh_frame:00000000000170F7                 db 0C8h
.eh_frame:00000000000170F8                 db  0Ah
.eh_frame:00000000000170F9                 db  0Eh
.eh_frame:00000000000170FA                 db  28h ; (
.eh_frame:00000000000170FB                 db  41h ; A
.eh_frame:00000000000170FC                 db  0Eh
.eh_frame:00000000000170FD                 db  20h
.eh_frame:00000000000170FE                 db  42h ; B
.eh_frame:00000000000170FF                 db  0Eh
.eh_frame:0000000000017100                 db  18h
.eh_frame:0000000000017101                 db  42h ; B
.eh_frame:0000000000017102                 db  0Eh
.eh_frame:0000000000017103                 db  10h
.eh_frame:0000000000017104                 db  42h ; B
.eh_frame:0000000000017105                 db  0Eh
.eh_frame:0000000000017106                 db    8
.eh_frame:0000000000017107                 db  46h ; F
.eh_frame:0000000000017108                 db  0Bh
.eh_frame:0000000000017109                 db  44h ; D
.eh_frame:000000000001710A                 db  0Ah
.eh_frame:000000000001710B                 db  0Eh
.eh_frame:000000000001710C                 db  28h ; (
.eh_frame:000000000001710D                 db  41h ; A
.eh_frame:000000000001710E                 db  0Eh
.eh_frame:000000000001710F                 db  20h
.eh_frame:0000000000017110                 db  42h ; B
.eh_frame:0000000000017111                 db  0Eh
.eh_frame:0000000000017112                 db  18h
.eh_frame:0000000000017113                 db  42h ; B
.eh_frame:0000000000017114                 db  0Eh
.eh_frame:0000000000017115                 db  10h
.eh_frame:0000000000017116                 db  42h ; B
.eh_frame:0000000000017117                 db  0Eh
.eh_frame:0000000000017118                 db    8
.eh_frame:0000000000017119                 db  45h ; E
.eh_frame:000000000001711A                 db  0Bh
.eh_frame:000000000001711B                 db  4Dh ; M
.eh_frame:000000000001711C                 db  0Ah
.eh_frame:000000000001711D                 db  0Eh
.eh_frame:000000000001711E                 db  28h ; (
.eh_frame:000000000001711F                 db  41h ; A
.eh_frame:0000000000017120                 db  0Eh
.eh_frame:0000000000017121                 db  20h
.eh_frame:0000000000017122                 db  42h ; B
.eh_frame:0000000000017123                 db  0Eh
.eh_frame:0000000000017124                 db  18h
.eh_frame:0000000000017125                 db  42h ; B
.eh_frame:0000000000017126                 db  0Eh
.eh_frame:0000000000017127                 db  10h
.eh_frame:0000000000017128                 db  42h ; B
.eh_frame:0000000000017129                 db  0Eh
.eh_frame:000000000001712A                 db    8
.eh_frame:000000000001712B                 db  44h ; D
.eh_frame:000000000001712C                 db  0Bh
.eh_frame:000000000001712D                 db    0
.eh_frame:000000000001712E                 db    0
.eh_frame:000000000001712F                 db    0
.eh_frame:0000000000017130                 db  48h ; H
.eh_frame:0000000000017131                 db    0
.eh_frame:0000000000017132                 db    0
.eh_frame:0000000000017133                 db    0
.eh_frame:0000000000017134                 db 0E4h
.eh_frame:0000000000017135                 db  13h
.eh_frame:0000000000017136                 db    0
.eh_frame:0000000000017137                 db    0
.eh_frame:0000000000017138                 db  38h ; 8
.eh_frame:0000000000017139                 db  16h
.eh_frame:000000000001713A                 db 0FFh
.eh_frame:000000000001713B                 db 0FFh
.eh_frame:000000000001713C                 db 0BAh
.eh_frame:000000000001713D                 db    2
.eh_frame:000000000001713E                 db    0
.eh_frame:000000000001713F                 db    0
.eh_frame:0000000000017140                 db    0
.eh_frame:0000000000017141                 db  42h ; B
.eh_frame:0000000000017142                 db  0Eh
.eh_frame:0000000000017143                 db  10h
.eh_frame:0000000000017144                 db  8Fh
.eh_frame:0000000000017145                 db    2
.eh_frame:0000000000017146                 db  42h ; B
.eh_frame:0000000000017147                 db  0Eh
.eh_frame:0000000000017148                 db  18h
.eh_frame:0000000000017149                 db  8Eh
.eh_frame:000000000001714A                 db    3
.eh_frame:000000000001714B                 db  42h ; B
.eh_frame:000000000001714C                 db  0Eh
.eh_frame:000000000001714D                 db  20h
.eh_frame:000000000001714E                 db  8Dh
.eh_frame:000000000001714F                 db    4
.eh_frame:0000000000017150                 db  42h ; B
.eh_frame:0000000000017151                 db  0Eh
.eh_frame:0000000000017152                 db  28h ; (
.eh_frame:0000000000017153                 db  8Ch
.eh_frame:0000000000017154                 db    5
.eh_frame:0000000000017155                 db  41h ; A
.eh_frame:0000000000017156                 db  0Eh
.eh_frame:0000000000017157                 db  30h ; 0
.eh_frame:0000000000017158                 db  86h
.eh_frame:0000000000017159                 db    6
.eh_frame:000000000001715A                 db  41h ; A
.eh_frame:000000000001715B                 db  0Eh
.eh_frame:000000000001715C                 db  38h ; 8
.eh_frame:000000000001715D                 db  83h
.eh_frame:000000000001715E                 db    7
.eh_frame:000000000001715F                 db  44h ; D
.eh_frame:0000000000017160                 db  0Eh
.eh_frame:0000000000017161                 db  60h ; `
.eh_frame:0000000000017162                 db    2
.eh_frame:0000000000017163                 db 0A2h
.eh_frame:0000000000017164                 db  0Ah
.eh_frame:0000000000017165                 db  0Eh
.eh_frame:0000000000017166                 db  38h ; 8
.eh_frame:0000000000017167                 db  44h ; D
.eh_frame:0000000000017168                 db  0Eh
.eh_frame:0000000000017169                 db  30h ; 0
.eh_frame:000000000001716A                 db  41h ; A
.eh_frame:000000000001716B                 db  0Eh
.eh_frame:000000000001716C                 db  28h ; (
.eh_frame:000000000001716D                 db  42h ; B
.eh_frame:000000000001716E                 db  0Eh
.eh_frame:000000000001716F                 db  20h
.eh_frame:0000000000017170                 db  42h ; B
.eh_frame:0000000000017171                 db  0Eh
.eh_frame:0000000000017172                 db  18h
.eh_frame:0000000000017173                 db  42h ; B
.eh_frame:0000000000017174                 db  0Eh
.eh_frame:0000000000017175                 db  10h
.eh_frame:0000000000017176                 db  42h ; B
.eh_frame:0000000000017177                 db  0Eh
.eh_frame:0000000000017178                 db    8
.eh_frame:0000000000017179                 db  43h ; C
.eh_frame:000000000001717A                 db  0Bh
.eh_frame:000000000001717B                 db    0
.eh_frame:000000000001717C                 db  48h ; H
.eh_frame:000000000001717D                 db    0
.eh_frame:000000000001717E                 db    0
.eh_frame:000000000001717F                 db    0
.eh_frame:0000000000017180                 db  30h ; 0
.eh_frame:0000000000017181                 db  14h
.eh_frame:0000000000017182                 db    0
.eh_frame:0000000000017183                 db    0
.eh_frame:0000000000017184                 db 0ACh
.eh_frame:0000000000017185                 db  18h
.eh_frame:0000000000017186                 db 0FFh
.eh_frame:0000000000017187                 db 0FFh
.eh_frame:0000000000017188                 db 0FAh
.eh_frame:0000000000017189                 db    1
.eh_frame:000000000001718A                 db    0
.eh_frame:000000000001718B                 db    0
.eh_frame:000000000001718C                 db    0
.eh_frame:000000000001718D                 db  42h ; B
.eh_frame:000000000001718E                 db  0Eh
.eh_frame:000000000001718F                 db  10h
.eh_frame:0000000000017190                 db  8Fh
.eh_frame:0000000000017191                 db    2
.eh_frame:0000000000017192                 db  42h ; B
.eh_frame:0000000000017193                 db  0Eh
.eh_frame:0000000000017194                 db  18h
.eh_frame:0000000000017195                 db  8Eh
.eh_frame:0000000000017196                 db    3
.eh_frame:0000000000017197                 db  42h ; B
.eh_frame:0000000000017198                 db  0Eh
.eh_frame:0000000000017199                 db  20h
.eh_frame:000000000001719A                 db  8Dh
.eh_frame:000000000001719B                 db    4
.eh_frame:000000000001719C                 db  42h ; B
.eh_frame:000000000001719D                 db  0Eh
.eh_frame:000000000001719E                 db  28h ; (
.eh_frame:000000000001719F                 db  8Ch
.eh_frame:00000000000171A0                 db    5
.eh_frame:00000000000171A1                 db  41h ; A
.eh_frame:00000000000171A2                 db  0Eh
.eh_frame:00000000000171A3                 db  30h ; 0
.eh_frame:00000000000171A4                 db  86h
.eh_frame:00000000000171A5                 db    6
.eh_frame:00000000000171A6                 db  41h ; A
.eh_frame:00000000000171A7                 db  0Eh
.eh_frame:00000000000171A8                 db  38h ; 8
.eh_frame:00000000000171A9                 db  83h
.eh_frame:00000000000171AA                 db    7
.eh_frame:00000000000171AB                 db  44h ; D
.eh_frame:00000000000171AC                 db  0Eh
.eh_frame:00000000000171AD                 db  40h ; @
.eh_frame:00000000000171AE                 db    3
.eh_frame:00000000000171AF                 db  85h
.eh_frame:00000000000171B0                 db    1
.eh_frame:00000000000171B1                 db  0Ah
.eh_frame:00000000000171B2                 db  0Eh
.eh_frame:00000000000171B3                 db  38h ; 8
.eh_frame:00000000000171B4                 db  44h ; D
.eh_frame:00000000000171B5                 db  0Eh
.eh_frame:00000000000171B6                 db  30h ; 0
.eh_frame:00000000000171B7                 db  41h ; A
.eh_frame:00000000000171B8                 db  0Eh
.eh_frame:00000000000171B9                 db  28h ; (
.eh_frame:00000000000171BA                 db  42h ; B
.eh_frame:00000000000171BB                 db  0Eh
.eh_frame:00000000000171BC                 db  20h
.eh_frame:00000000000171BD                 db  42h ; B
.eh_frame:00000000000171BE                 db  0Eh
.eh_frame:00000000000171BF                 db  18h
.eh_frame:00000000000171C0                 db  42h ; B
.eh_frame:00000000000171C1                 db  0Eh
.eh_frame:00000000000171C2                 db  10h
.eh_frame:00000000000171C3                 db  42h ; B
.eh_frame:00000000000171C4                 db  0Eh
.eh_frame:00000000000171C5                 db    8
.eh_frame:00000000000171C6                 db  48h ; H
.eh_frame:00000000000171C7                 db  0Bh
.eh_frame:00000000000171C8                 db  48h ; H
.eh_frame:00000000000171C9                 db    0
.eh_frame:00000000000171CA                 db    0
.eh_frame:00000000000171CB                 db    0
.eh_frame:00000000000171CC                 db  7Ch ; |
.eh_frame:00000000000171CD                 db  14h
.eh_frame:00000000000171CE                 db    0
.eh_frame:00000000000171CF                 db    0
.eh_frame:00000000000171D0                 db  60h ; `
.eh_frame:00000000000171D1                 db  1Ah
.eh_frame:00000000000171D2                 db 0FFh
.eh_frame:00000000000171D3                 db 0FFh
.eh_frame:00000000000171D4                 db 0DCh
.eh_frame:00000000000171D5                 db    0
.eh_frame:00000000000171D6                 db    0
.eh_frame:00000000000171D7                 db    0
.eh_frame:00000000000171D8                 db    0
.eh_frame:00000000000171D9                 db  42h ; B
.eh_frame:00000000000171DA                 db  0Eh
.eh_frame:00000000000171DB                 db  10h
.eh_frame:00000000000171DC                 db  8Fh
.eh_frame:00000000000171DD                 db    2
.eh_frame:00000000000171DE                 db  42h ; B
.eh_frame:00000000000171DF                 db  0Eh
.eh_frame:00000000000171E0                 db  18h
.eh_frame:00000000000171E1                 db  8Eh
.eh_frame:00000000000171E2                 db    3
.eh_frame:00000000000171E3                 db  42h ; B
.eh_frame:00000000000171E4                 db  0Eh
.eh_frame:00000000000171E5                 db  20h
.eh_frame:00000000000171E6                 db  8Dh
.eh_frame:00000000000171E7                 db    4
.eh_frame:00000000000171E8                 db  42h ; B
.eh_frame:00000000000171E9                 db  0Eh
.eh_frame:00000000000171EA                 db  28h ; (
.eh_frame:00000000000171EB                 db  8Ch
.eh_frame:00000000000171EC                 db    5
.eh_frame:00000000000171ED                 db  41h ; A
.eh_frame:00000000000171EE                 db  0Eh
.eh_frame:00000000000171EF                 db  30h ; 0
.eh_frame:00000000000171F0                 db  86h
.eh_frame:00000000000171F1                 db    6
.eh_frame:00000000000171F2                 db  41h ; A
.eh_frame:00000000000171F3                 db  0Eh
.eh_frame:00000000000171F4                 db  38h ; 8
.eh_frame:00000000000171F5                 db  83h
.eh_frame:00000000000171F6                 db    7
.eh_frame:00000000000171F7                 db  44h ; D
.eh_frame:00000000000171F8                 db  0Eh
.eh_frame:00000000000171F9                 db  80h
.eh_frame:00000000000171FA                 db    1
.eh_frame:00000000000171FB                 db    2
.eh_frame:00000000000171FC                 db 0BEh
.eh_frame:00000000000171FD                 db  0Ah
.eh_frame:00000000000171FE                 db  0Eh
.eh_frame:00000000000171FF                 db  38h ; 8
.eh_frame:0000000000017200                 db  41h ; A
.eh_frame:0000000000017201                 db  0Eh
.eh_frame:0000000000017202                 db  30h ; 0
.eh_frame:0000000000017203                 db  41h ; A
.eh_frame:0000000000017204                 db  0Eh
.eh_frame:0000000000017205                 db  28h ; (
.eh_frame:0000000000017206                 db  42h ; B
.eh_frame:0000000000017207                 db  0Eh
.eh_frame:0000000000017208                 db  20h
.eh_frame:0000000000017209                 db  42h ; B
.eh_frame:000000000001720A                 db  0Eh
.eh_frame:000000000001720B                 db  18h
.eh_frame:000000000001720C                 db  42h ; B
.eh_frame:000000000001720D                 db  0Eh
.eh_frame:000000000001720E                 db  10h
.eh_frame:000000000001720F                 db  42h ; B
.eh_frame:0000000000017210                 db  0Eh
.eh_frame:0000000000017211                 db    8
.eh_frame:0000000000017212                 db  41h ; A
.eh_frame:0000000000017213                 db  0Bh
.eh_frame:0000000000017214                 db  48h ; H
.eh_frame:0000000000017215                 db    0
.eh_frame:0000000000017216                 db    0
.eh_frame:0000000000017217                 db    0
.eh_frame:0000000000017218                 db 0C8h
.eh_frame:0000000000017219                 db  14h
.eh_frame:000000000001721A                 db    0
.eh_frame:000000000001721B                 db    0
.eh_frame:000000000001721C                 db 0F4h
.eh_frame:000000000001721D                 db  1Ah
.eh_frame:000000000001721E                 db 0FFh
.eh_frame:000000000001721F                 db 0FFh
.eh_frame:0000000000017220                 db  9Eh
.eh_frame:0000000000017221                 db    3
.eh_frame:0000000000017222                 db    0
.eh_frame:0000000000017223                 db    0
.eh_frame:0000000000017224                 db    0
.eh_frame:0000000000017225                 db  42h ; B
.eh_frame:0000000000017226                 db  0Eh
.eh_frame:0000000000017227                 db  10h
.eh_frame:0000000000017228                 db  8Fh
.eh_frame:0000000000017229                 db    2
.eh_frame:000000000001722A                 db  42h ; B
.eh_frame:000000000001722B                 db  0Eh
.eh_frame:000000000001722C                 db  18h
.eh_frame:000000000001722D                 db  8Eh
.eh_frame:000000000001722E                 db    3
.eh_frame:000000000001722F                 db  42h ; B
.eh_frame:0000000000017230                 db  0Eh
.eh_frame:0000000000017231                 db  20h
.eh_frame:0000000000017232                 db  8Dh
.eh_frame:0000000000017233                 db    4
.eh_frame:0000000000017234                 db  42h ; B
.eh_frame:0000000000017235                 db  0Eh
.eh_frame:0000000000017236                 db  28h ; (
.eh_frame:0000000000017237                 db  8Ch
.eh_frame:0000000000017238                 db    5
.eh_frame:0000000000017239                 db  44h ; D
.eh_frame:000000000001723A                 db  0Eh
.eh_frame:000000000001723B                 db  30h ; 0
.eh_frame:000000000001723C                 db  86h
.eh_frame:000000000001723D                 db    6
.eh_frame:000000000001723E                 db  41h ; A
.eh_frame:000000000001723F                 db  0Eh
.eh_frame:0000000000017240                 db  38h ; 8
.eh_frame:0000000000017241                 db  83h
.eh_frame:0000000000017242                 db    7
.eh_frame:0000000000017243                 db  4Ch ; L
.eh_frame:0000000000017244                 db  0Eh
.eh_frame:0000000000017245                 db 0B0h
.eh_frame:0000000000017246                 db    1
.eh_frame:0000000000017247                 db    2
.eh_frame:0000000000017248                 db 0BEh
.eh_frame:0000000000017249                 db  0Ah
.eh_frame:000000000001724A                 db  0Eh
.eh_frame:000000000001724B                 db  38h ; 8
.eh_frame:000000000001724C                 db  41h ; A
.eh_frame:000000000001724D                 db  0Eh
.eh_frame:000000000001724E                 db  30h ; 0
.eh_frame:000000000001724F                 db  41h ; A
.eh_frame:0000000000017250                 db  0Eh
.eh_frame:0000000000017251                 db  28h ; (
.eh_frame:0000000000017252                 db  42h ; B
.eh_frame:0000000000017253                 db  0Eh
.eh_frame:0000000000017254                 db  20h
.eh_frame:0000000000017255                 db  42h ; B
.eh_frame:0000000000017256                 db  0Eh
.eh_frame:0000000000017257                 db  18h
.eh_frame:0000000000017258                 db  42h ; B
.eh_frame:0000000000017259                 db  0Eh
.eh_frame:000000000001725A                 db  10h
.eh_frame:000000000001725B                 db  42h ; B
.eh_frame:000000000001725C                 db  0Eh
.eh_frame:000000000001725D                 db    8
.eh_frame:000000000001725E                 db  47h ; G
.eh_frame:000000000001725F                 db  0Bh
.eh_frame:0000000000017260                 db  48h ; H
.eh_frame:0000000000017261                 db    0
.eh_frame:0000000000017262                 db    0
.eh_frame:0000000000017263                 db    0
.eh_frame:0000000000017264                 db  14h
.eh_frame:0000000000017265                 db  15h
.eh_frame:0000000000017266                 db    0
.eh_frame:0000000000017267                 db    0
.eh_frame:0000000000017268                 db  48h ; H
.eh_frame:0000000000017269                 db  1Eh
.eh_frame:000000000001726A                 db 0FFh
.eh_frame:000000000001726B                 db 0FFh
.eh_frame:000000000001726C                 db  41h ; A
.eh_frame:000000000001726D                 db    1
.eh_frame:000000000001726E                 db    0
.eh_frame:000000000001726F                 db    0
.eh_frame:0000000000017270                 db    0
.eh_frame:0000000000017271                 db  42h ; B
.eh_frame:0000000000017272                 db  0Eh
.eh_frame:0000000000017273                 db  10h
.eh_frame:0000000000017274                 db  8Fh
.eh_frame:0000000000017275                 db    2
.eh_frame:0000000000017276                 db  42h ; B
.eh_frame:0000000000017277                 db  0Eh
.eh_frame:0000000000017278                 db  18h
.eh_frame:0000000000017279                 db  8Eh
.eh_frame:000000000001727A                 db    3
.eh_frame:000000000001727B                 db  42h ; B
.eh_frame:000000000001727C                 db  0Eh
.eh_frame:000000000001727D                 db  20h
.eh_frame:000000000001727E                 db  8Dh
.eh_frame:000000000001727F                 db    4
.eh_frame:0000000000017280                 db  42h ; B
.eh_frame:0000000000017281                 db  0Eh
.eh_frame:0000000000017282                 db  28h ; (
.eh_frame:0000000000017283                 db  8Ch
.eh_frame:0000000000017284                 db    5
.eh_frame:0000000000017285                 db  41h ; A
.eh_frame:0000000000017286                 db  0Eh
.eh_frame:0000000000017287                 db  30h ; 0
.eh_frame:0000000000017288                 db  86h
.eh_frame:0000000000017289                 db    6
.eh_frame:000000000001728A                 db  41h ; A
.eh_frame:000000000001728B                 db  0Eh
.eh_frame:000000000001728C                 db  38h ; 8
.eh_frame:000000000001728D                 db  83h
.eh_frame:000000000001728E                 db    7
.eh_frame:000000000001728F                 db  44h ; D
.eh_frame:0000000000017290                 db  0Eh
.eh_frame:0000000000017291                 db  60h ; `
.eh_frame:0000000000017292                 db    2
.eh_frame:0000000000017293                 db 0D8h
.eh_frame:0000000000017294                 db  0Ah
.eh_frame:0000000000017295                 db  0Eh
.eh_frame:0000000000017296                 db  38h ; 8
.eh_frame:0000000000017297                 db  41h ; A
.eh_frame:0000000000017298                 db  0Eh
.eh_frame:0000000000017299                 db  30h ; 0
.eh_frame:000000000001729A                 db  41h ; A
.eh_frame:000000000001729B                 db  0Eh
.eh_frame:000000000001729C                 db  28h ; (
.eh_frame:000000000001729D                 db  42h ; B
.eh_frame:000000000001729E                 db  0Eh
.eh_frame:000000000001729F                 db  20h
.eh_frame:00000000000172A0                 db  42h ; B
.eh_frame:00000000000172A1                 db  0Eh
.eh_frame:00000000000172A2                 db  18h
.eh_frame:00000000000172A3                 db  42h ; B
.eh_frame:00000000000172A4                 db  0Eh
.eh_frame:00000000000172A5                 db  10h
.eh_frame:00000000000172A6                 db  42h ; B
.eh_frame:00000000000172A7                 db  0Eh
.eh_frame:00000000000172A8                 db    8
.eh_frame:00000000000172A9                 db  41h ; A
.eh_frame:00000000000172AA                 db  0Bh
.eh_frame:00000000000172AB                 db    0
.eh_frame:00000000000172AC                 db  40h ; @
.eh_frame:00000000000172AD                 db    0
.eh_frame:00000000000172AE                 db    0
.eh_frame:00000000000172AF                 db    0
.eh_frame:00000000000172B0                 db  60h ; `
.eh_frame:00000000000172B1                 db  15h
.eh_frame:00000000000172B2                 db    0
.eh_frame:00000000000172B3                 db    0
.eh_frame:00000000000172B4                 db  4Ch ; L
.eh_frame:00000000000172B5                 db  1Fh
.eh_frame:00000000000172B6                 db 0FFh
.eh_frame:00000000000172B7                 db 0FFh
.eh_frame:00000000000172B8                 db 0E6h
.eh_frame:00000000000172B9                 db    0
.eh_frame:00000000000172BA                 db    0
.eh_frame:00000000000172BB                 db    0
.eh_frame:00000000000172BC                 db    0
.eh_frame:00000000000172BD                 db  41h ; A
.eh_frame:00000000000172BE                 db  0Eh
.eh_frame:00000000000172BF                 db  10h
.eh_frame:00000000000172C0                 db  86h
.eh_frame:00000000000172C1                 db    2
.eh_frame:00000000000172C2                 db  41h ; A
.eh_frame:00000000000172C3                 db  0Eh
.eh_frame:00000000000172C4                 db  18h
.eh_frame:00000000000172C5                 db  83h
.eh_frame:00000000000172C6                 db    3
.eh_frame:00000000000172C7                 db  47h ; G
.eh_frame:00000000000172C8                 db  0Eh
.eh_frame:00000000000172C9                 db  20h
.eh_frame:00000000000172CA                 db    2
.eh_frame:00000000000172CB                 db  4Dh ; M
.eh_frame:00000000000172CC                 db  0Ah
.eh_frame:00000000000172CD                 db  0Eh
.eh_frame:00000000000172CE                 db  18h
.eh_frame:00000000000172CF                 db  41h ; A
.eh_frame:00000000000172D0                 db  0Eh
.eh_frame:00000000000172D1                 db  10h
.eh_frame:00000000000172D2                 db  41h ; A
.eh_frame:00000000000172D3                 db  0Eh
.eh_frame:00000000000172D4                 db    8
.eh_frame:00000000000172D5                 db  48h ; H
.eh_frame:00000000000172D6                 db  0Bh
.eh_frame:00000000000172D7                 db  47h ; G
.eh_frame:00000000000172D8                 db  0Ah
.eh_frame:00000000000172D9                 db  0Eh
.eh_frame:00000000000172DA                 db  18h
.eh_frame:00000000000172DB                 db  41h ; A
.eh_frame:00000000000172DC                 db  0Eh
.eh_frame:00000000000172DD                 db  10h
.eh_frame:00000000000172DE                 db  41h ; A
.eh_frame:00000000000172DF                 db  0Eh
.eh_frame:00000000000172E0                 db    8
.eh_frame:00000000000172E1                 db  47h ; G
.eh_frame:00000000000172E2                 db  0Bh
.eh_frame:00000000000172E3                 db  7Ch ; |
.eh_frame:00000000000172E4                 db  0Ah
.eh_frame:00000000000172E5                 db  0Eh
.eh_frame:00000000000172E6                 db  18h
.eh_frame:00000000000172E7                 db  43h ; C
.eh_frame:00000000000172E8                 db  0Eh
.eh_frame:00000000000172E9                 db  10h
.eh_frame:00000000000172EA                 db  41h ; A
.eh_frame:00000000000172EB                 db  0Eh
.eh_frame:00000000000172EC                 db    8
.eh_frame:00000000000172ED                 db  48h ; H
.eh_frame:00000000000172EE                 db  0Bh
.eh_frame:00000000000172EF                 db    0
.eh_frame:00000000000172F0                 db  24h ; $
.eh_frame:00000000000172F1                 db    0
.eh_frame:00000000000172F2                 db    0
.eh_frame:00000000000172F3                 db    0
.eh_frame:00000000000172F4                 db 0A4h
.eh_frame:00000000000172F5                 db  15h
.eh_frame:00000000000172F6                 db    0
.eh_frame:00000000000172F7                 db    0
.eh_frame:00000000000172F8                 db 0F8h
.eh_frame:00000000000172F9                 db  1Fh
.eh_frame:00000000000172FA                 db 0FFh
.eh_frame:00000000000172FB                 db 0FFh
.eh_frame:00000000000172FC                 db  10h
.eh_frame:00000000000172FD                 db    1
.eh_frame:00000000000172FE                 db    0
.eh_frame:00000000000172FF                 db    0
.eh_frame:0000000000017300                 db    0
.eh_frame:0000000000017301                 db    2
.eh_frame:0000000000017302                 db  51h ; Q
.eh_frame:0000000000017303                 db  0Eh
.eh_frame:0000000000017304                 db  10h
.eh_frame:0000000000017305                 db  83h
.eh_frame:0000000000017306                 db    2
.eh_frame:0000000000017307                 db    2
.eh_frame:0000000000017308                 db  5Ch ; \
.eh_frame:0000000000017309                 db  0Eh
.eh_frame:000000000001730A                 db    8
.eh_frame:000000000001730B                 db  43h ; C
.eh_frame:000000000001730C                 db 0C3h
.eh_frame:000000000001730D                 db  78h ; x
.eh_frame:000000000001730E                 db  0Eh
.eh_frame:000000000001730F                 db  10h
.eh_frame:0000000000017310                 db  83h
.eh_frame:0000000000017311                 db    2
.eh_frame:0000000000017312                 db  4Ch ; L
.eh_frame:0000000000017313                 db  0Eh
.eh_frame:0000000000017314                 db    8
.eh_frame:0000000000017315                 db  44h ; D
.eh_frame:0000000000017316                 db 0C3h
.eh_frame:0000000000017317                 db    0
.eh_frame:0000000000017318                 db  34h ; 4
.eh_frame:0000000000017319                 db    0
.eh_frame:000000000001731A                 db    0
.eh_frame:000000000001731B                 db    0
.eh_frame:000000000001731C                 db 0CCh
.eh_frame:000000000001731D                 db  15h
.eh_frame:000000000001731E                 db    0
.eh_frame:000000000001731F                 db    0
.eh_frame:0000000000017320                 db 0E0h
.eh_frame:0000000000017321                 db  20h
.eh_frame:0000000000017322                 db 0FFh
.eh_frame:0000000000017323                 db 0FFh
.eh_frame:0000000000017324                 db 0CFh
.eh_frame:0000000000017325                 db    0
.eh_frame:0000000000017326                 db    0
.eh_frame:0000000000017327                 db    0
.eh_frame:0000000000017328                 db    0
.eh_frame:0000000000017329                 db  42h ; B
.eh_frame:000000000001732A                 db  0Eh
.eh_frame:000000000001732B                 db  10h
.eh_frame:000000000001732C                 db  8Ch
.eh_frame:000000000001732D                 db    2
.eh_frame:000000000001732E                 db  44h ; D
.eh_frame:000000000001732F                 db  0Eh
.eh_frame:0000000000017330                 db  18h
.eh_frame:0000000000017331                 db  86h
.eh_frame:0000000000017332                 db    3
.eh_frame:0000000000017333                 db  41h ; A
.eh_frame:0000000000017334                 db  0Eh
.eh_frame:0000000000017335                 db  20h
.eh_frame:0000000000017336                 db  83h
.eh_frame:0000000000017337                 db    4
.eh_frame:0000000000017338                 db    2
.eh_frame:0000000000017339                 db  9Fh
.eh_frame:000000000001733A                 db  0Ah
.eh_frame:000000000001733B                 db  0Eh
.eh_frame:000000000001733C                 db  18h
.eh_frame:000000000001733D                 db  41h ; A
.eh_frame:000000000001733E                 db  0Eh
.eh_frame:000000000001733F                 db  10h
.eh_frame:0000000000017340                 db  42h ; B
.eh_frame:0000000000017341                 db  0Eh
.eh_frame:0000000000017342                 db    8
.eh_frame:0000000000017343                 db  47h ; G
.eh_frame:0000000000017344                 db  0Bh
.eh_frame:0000000000017345                 db  59h ; Y
.eh_frame:0000000000017346                 db  0Eh
.eh_frame:0000000000017347                 db  18h
.eh_frame:0000000000017348                 db  43h ; C
.eh_frame:0000000000017349                 db  0Eh
.eh_frame:000000000001734A                 db  10h
.eh_frame:000000000001734B                 db  42h ; B
.eh_frame:000000000001734C                 db  0Eh
.eh_frame:000000000001734D                 db    8
.eh_frame:000000000001734E                 db    0
.eh_frame:000000000001734F                 db    0
.eh_frame:0000000000017350                 db  4Ch ; L
.eh_frame:0000000000017351                 db    0
.eh_frame:0000000000017352                 db    0
.eh_frame:0000000000017353                 db    0
.eh_frame:0000000000017354                 db    4
.eh_frame:0000000000017355                 db  16h
.eh_frame:0000000000017356                 db    0
.eh_frame:0000000000017357                 db    0
.eh_frame:0000000000017358                 db  78h ; x
.eh_frame:0000000000017359                 db  21h ; !
.eh_frame:000000000001735A                 db 0FFh
.eh_frame:000000000001735B                 db 0FFh
.eh_frame:000000000001735C                 db  9Fh
.eh_frame:000000000001735D                 db    7
.eh_frame:000000000001735E                 db    0
.eh_frame:000000000001735F                 db    0
.eh_frame:0000000000017360                 db    0
.eh_frame:0000000000017361                 db  42h ; B
.eh_frame:0000000000017362                 db  0Eh
.eh_frame:0000000000017363                 db  10h
.eh_frame:0000000000017364                 db  8Fh
.eh_frame:0000000000017365                 db    2
.eh_frame:0000000000017366                 db  42h ; B
.eh_frame:0000000000017367                 db  0Eh
.eh_frame:0000000000017368                 db  18h
.eh_frame:0000000000017369                 db  8Eh
.eh_frame:000000000001736A                 db    3
.eh_frame:000000000001736B                 db  45h ; E
.eh_frame:000000000001736C                 db  0Eh
.eh_frame:000000000001736D                 db  20h
.eh_frame:000000000001736E                 db  8Dh
.eh_frame:000000000001736F                 db    4
.eh_frame:0000000000017370                 db  42h ; B
.eh_frame:0000000000017371                 db  0Eh
.eh_frame:0000000000017372                 db  28h ; (
.eh_frame:0000000000017373                 db  8Ch
.eh_frame:0000000000017374                 db    5
.eh_frame:0000000000017375                 db  44h ; D
.eh_frame:0000000000017376                 db  0Eh
.eh_frame:0000000000017377                 db  30h ; 0
.eh_frame:0000000000017378                 db  86h
.eh_frame:0000000000017379                 db    6
.eh_frame:000000000001737A                 db  41h ; A
.eh_frame:000000000001737B                 db  0Eh
.eh_frame:000000000001737C                 db  38h ; 8
.eh_frame:000000000001737D                 db  83h
.eh_frame:000000000001737E                 db    7
.eh_frame:000000000001737F                 db  4Ah ; J
.eh_frame:0000000000017380                 db  0Eh
.eh_frame:0000000000017381                 db  80h
.eh_frame:0000000000017382                 db    1
.eh_frame:0000000000017383                 db    3
.eh_frame:0000000000017384                 db  3Bh ; ;
.eh_frame:0000000000017385                 db    1
.eh_frame:0000000000017386                 db  0Ah
.eh_frame:0000000000017387                 db  0Eh
.eh_frame:0000000000017388                 db  38h ; 8
.eh_frame:0000000000017389                 db  41h ; A
.eh_frame:000000000001738A                 db  0Eh
.eh_frame:000000000001738B                 db  30h ; 0
.eh_frame:000000000001738C                 db  41h ; A
.eh_frame:000000000001738D                 db  0Eh
.eh_frame:000000000001738E                 db  28h ; (
.eh_frame:000000000001738F                 db  42h ; B
.eh_frame:0000000000017390                 db  0Eh
.eh_frame:0000000000017391                 db  20h
.eh_frame:0000000000017392                 db  42h ; B
.eh_frame:0000000000017393                 db  0Eh
.eh_frame:0000000000017394                 db  18h
.eh_frame:0000000000017395                 db  42h ; B
.eh_frame:0000000000017396                 db  0Eh
.eh_frame:0000000000017397                 db  10h
.eh_frame:0000000000017398                 db  42h ; B
.eh_frame:0000000000017399                 db  0Eh
.eh_frame:000000000001739A                 db    8
.eh_frame:000000000001739B                 db  41h ; A
.eh_frame:000000000001739C                 db  0Bh
.eh_frame:000000000001739D                 db    0
.eh_frame:000000000001739E                 db    0
.eh_frame:000000000001739F                 db    0
.eh_frame:00000000000173A0                 db  4Ch ; L
.eh_frame:00000000000173A1                 db    0
.eh_frame:00000000000173A2                 db    0
.eh_frame:00000000000173A3                 db    0
.eh_frame:00000000000173A4                 db  54h ; T
.eh_frame:00000000000173A5                 db  16h
.eh_frame:00000000000173A6                 db    0
.eh_frame:00000000000173A7                 db    0
.eh_frame:00000000000173A8                 db 0C8h
.eh_frame:00000000000173A9                 db  28h ; (
.eh_frame:00000000000173AA                 db 0FFh
.eh_frame:00000000000173AB                 db 0FFh
.eh_frame:00000000000173AC                 db  3Bh ; ;
.eh_frame:00000000000173AD                 db    2
.eh_frame:00000000000173AE                 db    0
.eh_frame:00000000000173AF                 db    0
.eh_frame:00000000000173B0                 db    0
.eh_frame:00000000000173B1                 db  42h ; B
.eh_frame:00000000000173B2                 db  0Eh
.eh_frame:00000000000173B3                 db  10h
.eh_frame:00000000000173B4                 db  8Fh
.eh_frame:00000000000173B5                 db    2
.eh_frame:00000000000173B6                 db  42h ; B
.eh_frame:00000000000173B7                 db  0Eh
.eh_frame:00000000000173B8                 db  18h
.eh_frame:00000000000173B9                 db  8Eh
.eh_frame:00000000000173BA                 db    3
.eh_frame:00000000000173BB                 db  45h ; E
.eh_frame:00000000000173BC                 db  0Eh
.eh_frame:00000000000173BD                 db  20h
.eh_frame:00000000000173BE                 db  8Dh
.eh_frame:00000000000173BF                 db    4
.eh_frame:00000000000173C0                 db  42h ; B
.eh_frame:00000000000173C1                 db  0Eh
.eh_frame:00000000000173C2                 db  28h ; (
.eh_frame:00000000000173C3                 db  8Ch
.eh_frame:00000000000173C4                 db    5
.eh_frame:00000000000173C5                 db  45h ; E
.eh_frame:00000000000173C6                 db  0Eh
.eh_frame:00000000000173C7                 db  30h ; 0
.eh_frame:00000000000173C8                 db  86h
.eh_frame:00000000000173C9                 db    6
.eh_frame:00000000000173CA                 db  41h ; A
.eh_frame:00000000000173CB                 db  0Eh
.eh_frame:00000000000173CC                 db  38h ; 8
.eh_frame:00000000000173CD                 db  83h
.eh_frame:00000000000173CE                 db    7
.eh_frame:00000000000173CF                 db  48h ; H
.eh_frame:00000000000173D0                 db  0Eh
.eh_frame:00000000000173D1                 db  80h
.eh_frame:00000000000173D2                 db    1
.eh_frame:00000000000173D3                 db    3
.eh_frame:00000000000173D4                 db 0F3h
.eh_frame:00000000000173D5                 db    1
.eh_frame:00000000000173D6                 db  0Ah
.eh_frame:00000000000173D7                 db  0Eh
.eh_frame:00000000000173D8                 db  38h ; 8
.eh_frame:00000000000173D9                 db  41h ; A
.eh_frame:00000000000173DA                 db  0Eh
.eh_frame:00000000000173DB                 db  30h ; 0
.eh_frame:00000000000173DC                 db  41h ; A
.eh_frame:00000000000173DD                 db  0Eh
.eh_frame:00000000000173DE                 db  28h ; (
.eh_frame:00000000000173DF                 db  42h ; B
.eh_frame:00000000000173E0                 db  0Eh
.eh_frame:00000000000173E1                 db  20h
.eh_frame:00000000000173E2                 db  42h ; B
.eh_frame:00000000000173E3                 db  0Eh
.eh_frame:00000000000173E4                 db  18h
.eh_frame:00000000000173E5                 db  42h ; B
.eh_frame:00000000000173E6                 db  0Eh
.eh_frame:00000000000173E7                 db  10h
.eh_frame:00000000000173E8                 db  42h ; B
.eh_frame:00000000000173E9                 db  0Eh
.eh_frame:00000000000173EA                 db    8
.eh_frame:00000000000173EB                 db  4Ah ; J
.eh_frame:00000000000173EC                 db  0Bh
.eh_frame:00000000000173ED                 db    0
.eh_frame:00000000000173EE                 db    0
.eh_frame:00000000000173EF                 db    0
.eh_frame:00000000000173F0                 db  4Ch ; L
.eh_frame:00000000000173F1                 db    0
.eh_frame:00000000000173F2                 db    0
.eh_frame:00000000000173F3                 db    0
.eh_frame:00000000000173F4                 db 0A4h
.eh_frame:00000000000173F5                 db  16h
.eh_frame:00000000000173F6                 db    0
.eh_frame:00000000000173F7                 db    0
.eh_frame:00000000000173F8                 db 0B8h
.eh_frame:00000000000173F9                 db  2Ah ; *
.eh_frame:00000000000173FA                 db 0FFh
.eh_frame:00000000000173FB                 db 0FFh
.eh_frame:00000000000173FC                 db  91h
.eh_frame:00000000000173FD                 db  0Bh
.eh_frame:00000000000173FE                 db    0
.eh_frame:00000000000173FF                 db    0
.eh_frame:0000000000017400                 db    0
.eh_frame:0000000000017401                 db  42h ; B
.eh_frame:0000000000017402                 db  0Eh
.eh_frame:0000000000017403                 db  10h
.eh_frame:0000000000017404                 db  8Fh
.eh_frame:0000000000017405                 db    2
.eh_frame:0000000000017406                 db  42h ; B
.eh_frame:0000000000017407                 db  0Eh
.eh_frame:0000000000017408                 db  18h
.eh_frame:0000000000017409                 db  8Eh
.eh_frame:000000000001740A                 db    3
.eh_frame:000000000001740B                 db  45h ; E
.eh_frame:000000000001740C                 db  0Eh
.eh_frame:000000000001740D                 db  20h
.eh_frame:000000000001740E                 db  8Dh
.eh_frame:000000000001740F                 db    4
.eh_frame:0000000000017410                 db  42h ; B
.eh_frame:0000000000017411                 db  0Eh
.eh_frame:0000000000017412                 db  28h ; (
.eh_frame:0000000000017413                 db  8Ch
.eh_frame:0000000000017414                 db    5
.eh_frame:0000000000017415                 db  46h ; F
.eh_frame:0000000000017416                 db  0Eh
.eh_frame:0000000000017417                 db  30h ; 0
.eh_frame:0000000000017418                 db  86h
.eh_frame:0000000000017419                 db    6
.eh_frame:000000000001741A                 db  41h ; A
.eh_frame:000000000001741B                 db  0Eh
.eh_frame:000000000001741C                 db  38h ; 8
.eh_frame:000000000001741D                 db  83h
.eh_frame:000000000001741E                 db    7
.eh_frame:000000000001741F                 db  47h ; G
.eh_frame:0000000000017420                 db  0Eh
.eh_frame:0000000000017421                 db 0C0h
.eh_frame:0000000000017422                 db    2
.eh_frame:0000000000017423                 db    3
.eh_frame:0000000000017424                 db  17h
.eh_frame:0000000000017425                 db    4
.eh_frame:0000000000017426                 db  0Ah
.eh_frame:0000000000017427                 db  0Eh
.eh_frame:0000000000017428                 db  38h ; 8
.eh_frame:0000000000017429                 db  41h ; A
.eh_frame:000000000001742A                 db  0Eh
.eh_frame:000000000001742B                 db  30h ; 0
.eh_frame:000000000001742C                 db  41h ; A
.eh_frame:000000000001742D                 db  0Eh
.eh_frame:000000000001742E                 db  28h ; (
.eh_frame:000000000001742F                 db  42h ; B
.eh_frame:0000000000017430                 db  0Eh
.eh_frame:0000000000017431                 db  20h
.eh_frame:0000000000017432                 db  42h ; B
.eh_frame:0000000000017433                 db  0Eh
.eh_frame:0000000000017434                 db  18h
.eh_frame:0000000000017435                 db  42h ; B
.eh_frame:0000000000017436                 db  0Eh
.eh_frame:0000000000017437                 db  10h
.eh_frame:0000000000017438                 db  42h ; B
.eh_frame:0000000000017439                 db  0Eh
.eh_frame:000000000001743A                 db    8
.eh_frame:000000000001743B                 db  46h ; F
.eh_frame:000000000001743C                 db  0Bh
.eh_frame:000000000001743D                 db    0
.eh_frame:000000000001743E                 db    0
.eh_frame:000000000001743F                 db    0
.eh_frame:0000000000017440                 db  30h ; 0
.eh_frame:0000000000017441                 db    0
.eh_frame:0000000000017442                 db    0
.eh_frame:0000000000017443                 db    0
.eh_frame:0000000000017444                 db 0F4h
.eh_frame:0000000000017445                 db  16h
.eh_frame:0000000000017446                 db    0
.eh_frame:0000000000017447                 db    0
.eh_frame:0000000000017448                 db    8
.eh_frame:0000000000017449                 db  36h ; 6
.eh_frame:000000000001744A                 db 0FFh
.eh_frame:000000000001744B                 db 0FFh
.eh_frame:000000000001744C                 db  87h
.eh_frame:000000000001744D                 db    0
.eh_frame:000000000001744E                 db    0
.eh_frame:000000000001744F                 db    0
.eh_frame:0000000000017450                 db    0
.eh_frame:0000000000017451                 db  47h ; G
.eh_frame:0000000000017452                 db  0Eh
.eh_frame:0000000000017453                 db  10h
.eh_frame:0000000000017454                 db  86h
.eh_frame:0000000000017455                 db    2
.eh_frame:0000000000017456                 db  41h ; A
.eh_frame:0000000000017457                 db  0Eh
.eh_frame:0000000000017458                 db  18h
.eh_frame:0000000000017459                 db  83h
.eh_frame:000000000001745A                 db    3
.eh_frame:000000000001745B                 db  4Ah ; J
.eh_frame:000000000001745C                 db  0Eh
.eh_frame:000000000001745D                 db  20h
.eh_frame:000000000001745E                 db    2
.eh_frame:000000000001745F                 db  4Eh ; N
.eh_frame:0000000000017460                 db  0Eh
.eh_frame:0000000000017461                 db  18h
.eh_frame:0000000000017462                 db  41h ; A
.eh_frame:0000000000017463                 db  0Eh
.eh_frame:0000000000017464                 db  10h
.eh_frame:0000000000017465                 db  41h ; A
.eh_frame:0000000000017466                 db  0Eh
.eh_frame:0000000000017467                 db    8
.eh_frame:0000000000017468                 db  46h ; F
.eh_frame:0000000000017469                 db 0C3h
.eh_frame:000000000001746A                 db 0C6h
.eh_frame:000000000001746B                 db  58h ; X
.eh_frame:000000000001746C                 db  0Eh
.eh_frame:000000000001746D                 db  20h
.eh_frame:000000000001746E                 db  83h
.eh_frame:000000000001746F                 db    3
.eh_frame:0000000000017470                 db  86h
.eh_frame:0000000000017471                 db    2
.eh_frame:0000000000017472                 db    0
.eh_frame:0000000000017473                 db    0
.eh_frame:0000000000017474                 db  28h ; (
.eh_frame:0000000000017475                 db    0
.eh_frame:0000000000017476                 db    0
.eh_frame:0000000000017477                 db    0
.eh_frame:0000000000017478                 db  28h ; (
.eh_frame:0000000000017479                 db  17h
.eh_frame:000000000001747A                 db    0
.eh_frame:000000000001747B                 db    0
.eh_frame:000000000001747C                 db  64h ; d
.eh_frame:000000000001747D                 db  36h ; 6
.eh_frame:000000000001747E                 db 0FFh
.eh_frame:000000000001747F                 db 0FFh
.eh_frame:0000000000017480                 db  4Fh ; O
.eh_frame:0000000000017481                 db    0
.eh_frame:0000000000017482                 db    0
.eh_frame:0000000000017483                 db    0
.eh_frame:0000000000017484                 db    0
.eh_frame:0000000000017485                 db  42h ; B
.eh_frame:0000000000017486                 db  0Eh
.eh_frame:0000000000017487                 db  10h
.eh_frame:0000000000017488                 db  8Ch
.eh_frame:0000000000017489                 db    2
.eh_frame:000000000001748A                 db  41h ; A
.eh_frame:000000000001748B                 db  0Eh
.eh_frame:000000000001748C                 db  18h
.eh_frame:000000000001748D                 db  86h
.eh_frame:000000000001748E                 db    3
.eh_frame:000000000001748F                 db  44h ; D
.eh_frame:0000000000017490                 db  0Eh
.eh_frame:0000000000017491                 db  20h
.eh_frame:0000000000017492                 db  83h
.eh_frame:0000000000017493                 db    4
.eh_frame:0000000000017494                 db  7Ch ; |
.eh_frame:0000000000017495                 db  0Eh
.eh_frame:0000000000017496                 db  18h
.eh_frame:0000000000017497                 db  45h ; E
.eh_frame:0000000000017498                 db  0Eh
.eh_frame:0000000000017499                 db  10h
.eh_frame:000000000001749A                 db  42h ; B
.eh_frame:000000000001749B                 db  0Eh
.eh_frame:000000000001749C                 db    8
.eh_frame:000000000001749D                 db    0
.eh_frame:000000000001749E                 db    0
.eh_frame:000000000001749F                 db    0
.eh_frame:00000000000174A0                 db  2Ch ; ,
.eh_frame:00000000000174A1                 db    0
.eh_frame:00000000000174A2                 db    0
.eh_frame:00000000000174A3                 db    0
.eh_frame:00000000000174A4                 db  54h ; T
.eh_frame:00000000000174A5                 db  17h
.eh_frame:00000000000174A6                 db    0
.eh_frame:00000000000174A7                 db    0
.eh_frame:00000000000174A8                 db  88h
.eh_frame:00000000000174A9                 db  36h ; 6
.eh_frame:00000000000174AA                 db 0FFh
.eh_frame:00000000000174AB                 db 0FFh
.eh_frame:00000000000174AC                 db  94h
.eh_frame:00000000000174AD                 db    0
.eh_frame:00000000000174AE                 db    0
.eh_frame:00000000000174AF                 db    0
.eh_frame:00000000000174B0                 db    0
.eh_frame:00000000000174B1                 db  42h ; B
.eh_frame:00000000000174B2                 db  0Eh
.eh_frame:00000000000174B3                 db  10h
.eh_frame:00000000000174B4                 db  8Ch
.eh_frame:00000000000174B5                 db    2
.eh_frame:00000000000174B6                 db  41h ; A
.eh_frame:00000000000174B7                 db  0Eh
.eh_frame:00000000000174B8                 db  18h
.eh_frame:00000000000174B9                 db  86h
.eh_frame:00000000000174BA                 db    3
.eh_frame:00000000000174BB                 db  41h ; A
.eh_frame:00000000000174BC                 db  0Eh
.eh_frame:00000000000174BD                 db  20h
.eh_frame:00000000000174BE                 db  83h
.eh_frame:00000000000174BF                 db    4
.eh_frame:00000000000174C0                 db    2
.eh_frame:00000000000174C1                 db  6Dh ; m
.eh_frame:00000000000174C2                 db  0Ah
.eh_frame:00000000000174C3                 db  0Eh
.eh_frame:00000000000174C4                 db  18h
.eh_frame:00000000000174C5                 db  41h ; A
.eh_frame:00000000000174C6                 db  0Eh
.eh_frame:00000000000174C7                 db  10h
.eh_frame:00000000000174C8                 db  42h ; B
.eh_frame:00000000000174C9                 db  0Eh
.eh_frame:00000000000174CA                 db    8
.eh_frame:00000000000174CB                 db  41h ; A
.eh_frame:00000000000174CC                 db  0Bh
.eh_frame:00000000000174CD                 db    0
.eh_frame:00000000000174CE                 db    0
.eh_frame:00000000000174CF                 db    0
.eh_frame:00000000000174D0                 db  30h ; 0
.eh_frame:00000000000174D1                 db    0
.eh_frame:00000000000174D2                 db    0
.eh_frame:00000000000174D3                 db    0
.eh_frame:00000000000174D4                 db  84h
.eh_frame:00000000000174D5                 db  17h
.eh_frame:00000000000174D6                 db    0
.eh_frame:00000000000174D7                 db    0
.eh_frame:00000000000174D8                 db 0F8h
.eh_frame:00000000000174D9                 db  36h ; 6
.eh_frame:00000000000174DA                 db 0FFh
.eh_frame:00000000000174DB                 db 0FFh
.eh_frame:00000000000174DC                 db  4Ch ; L
.eh_frame:00000000000174DD                 db    0
.eh_frame:00000000000174DE                 db    0
.eh_frame:00000000000174DF                 db    0
.eh_frame:00000000000174E0                 db    0
.eh_frame:00000000000174E1                 db  41h ; A
.eh_frame:00000000000174E2                 db  0Eh
.eh_frame:00000000000174E3                 db  10h
.eh_frame:00000000000174E4                 db  86h
.eh_frame:00000000000174E5                 db    2
.eh_frame:00000000000174E6                 db  41h ; A
.eh_frame:00000000000174E7                 db  0Eh
.eh_frame:00000000000174E8                 db  18h
.eh_frame:00000000000174E9                 db  83h
.eh_frame:00000000000174EA                 db    3
.eh_frame:00000000000174EB                 db  4Dh ; M
.eh_frame:00000000000174EC                 db  0Eh
.eh_frame:00000000000174ED                 db  20h
.eh_frame:00000000000174EE                 db  67h ; g
.eh_frame:00000000000174EF                 db  0Ah
.eh_frame:00000000000174F0                 db  0Eh
.eh_frame:00000000000174F1                 db  18h
.eh_frame:00000000000174F2                 db  43h ; C
.eh_frame:00000000000174F3                 db  0Eh
.eh_frame:00000000000174F4                 db  10h
.eh_frame:00000000000174F5                 db  41h ; A
.eh_frame:00000000000174F6                 db  0Eh
.eh_frame:00000000000174F7                 db    8
.eh_frame:00000000000174F8                 db  46h ; F
.eh_frame:00000000000174F9                 db  0Bh
.eh_frame:00000000000174FA                 db  44h ; D
.eh_frame:00000000000174FB                 db  0Eh
.eh_frame:00000000000174FC                 db  18h
.eh_frame:00000000000174FD                 db  46h ; F
.eh_frame:00000000000174FE                 db  0Eh
.eh_frame:00000000000174FF                 db  10h
.eh_frame:0000000000017500                 db  41h ; A
.eh_frame:0000000000017501                 db  0Eh
.eh_frame:0000000000017502                 db    8
.eh_frame:0000000000017503                 db    0
.eh_frame:0000000000017504                 db  40h ; @
.eh_frame:0000000000017505                 db    0
.eh_frame:0000000000017506                 db    0
.eh_frame:0000000000017507                 db    0
.eh_frame:0000000000017508                 db 0B8h
.eh_frame:0000000000017509                 db  17h
.eh_frame:000000000001750A                 db    0
.eh_frame:000000000001750B                 db    0
.eh_frame:000000000001750C                 db  14h
.eh_frame:000000000001750D                 db  37h ; 7
.eh_frame:000000000001750E                 db 0FFh
.eh_frame:000000000001750F                 db 0FFh
.eh_frame:0000000000017510                 db  0Dh
.eh_frame:0000000000017511                 db    8
.eh_frame:0000000000017512                 db    0
.eh_frame:0000000000017513                 db    0
.eh_frame:0000000000017514                 db    0
.eh_frame:0000000000017515                 db  42h ; B
.eh_frame:0000000000017516                 db  0Eh
.eh_frame:0000000000017517                 db  10h
.eh_frame:0000000000017518                 db  8Eh
.eh_frame:0000000000017519                 db    2
.eh_frame:000000000001751A                 db  42h ; B
.eh_frame:000000000001751B                 db  0Eh
.eh_frame:000000000001751C                 db  18h
.eh_frame:000000000001751D                 db  8Dh
.eh_frame:000000000001751E                 db    3
.eh_frame:000000000001751F                 db  45h ; E
.eh_frame:0000000000017520                 db  0Eh
.eh_frame:0000000000017521                 db  20h
.eh_frame:0000000000017522                 db  8Ch
.eh_frame:0000000000017523                 db    4
.eh_frame:0000000000017524                 db  41h ; A
.eh_frame:0000000000017525                 db  0Eh
.eh_frame:0000000000017526                 db  28h ; (
.eh_frame:0000000000017527                 db  86h
.eh_frame:0000000000017528                 db    5
.eh_frame:0000000000017529                 db  44h ; D
.eh_frame:000000000001752A                 db  0Eh
.eh_frame:000000000001752B                 db  30h ; 0
.eh_frame:000000000001752C                 db  83h
.eh_frame:000000000001752D                 db    6
.eh_frame:000000000001752E                 db  4Ah ; J
.eh_frame:000000000001752F                 db  0Eh
.eh_frame:0000000000017530                 db  40h ; @
.eh_frame:0000000000017531                 db    2
.eh_frame:0000000000017532                 db 0D2h
.eh_frame:0000000000017533                 db  0Ah
.eh_frame:0000000000017534                 db  0Eh
.eh_frame:0000000000017535                 db  30h ; 0
.eh_frame:0000000000017536                 db  41h ; A
.eh_frame:0000000000017537                 db  0Eh
.eh_frame:0000000000017538                 db  28h ; (
.eh_frame:0000000000017539                 db  41h ; A
.eh_frame:000000000001753A                 db  0Eh
.eh_frame:000000000001753B                 db  20h
.eh_frame:000000000001753C                 db  42h ; B
.eh_frame:000000000001753D                 db  0Eh
.eh_frame:000000000001753E                 db  18h
.eh_frame:000000000001753F                 db  42h ; B
.eh_frame:0000000000017540                 db  0Eh
.eh_frame:0000000000017541                 db  10h
.eh_frame:0000000000017542                 db  42h ; B
.eh_frame:0000000000017543                 db  0Eh
.eh_frame:0000000000017544                 db    8
.eh_frame:0000000000017545                 db  46h ; F
.eh_frame:0000000000017546                 db  0Bh
.eh_frame:0000000000017547                 db    0
.eh_frame:0000000000017548                 db  5Ch ; \
.eh_frame:0000000000017549                 db    0
.eh_frame:000000000001754A                 db    0
.eh_frame:000000000001754B                 db    0
.eh_frame:000000000001754C                 db 0FCh
.eh_frame:000000000001754D                 db  17h
.eh_frame:000000000001754E                 db    0
.eh_frame:000000000001754F                 db    0
.eh_frame:0000000000017550                 db 0E0h
.eh_frame:0000000000017551                 db  3Eh ; >
.eh_frame:0000000000017552                 db 0FFh
.eh_frame:0000000000017553                 db 0FFh
.eh_frame:0000000000017554                 db  6Ah ; j
.eh_frame:0000000000017555                 db    2
.eh_frame:0000000000017556                 db    0
.eh_frame:0000000000017557                 db    0
.eh_frame:0000000000017558                 db    0
.eh_frame:0000000000017559                 db  42h ; B
.eh_frame:000000000001755A                 db  0Eh
.eh_frame:000000000001755B                 db  10h
.eh_frame:000000000001755C                 db  8Fh
.eh_frame:000000000001755D                 db    2
.eh_frame:000000000001755E                 db  42h ; B
.eh_frame:000000000001755F                 db  0Eh
.eh_frame:0000000000017560                 db  18h
.eh_frame:0000000000017561                 db  8Eh
.eh_frame:0000000000017562                 db    3
.eh_frame:0000000000017563                 db  45h ; E
.eh_frame:0000000000017564                 db  0Eh
.eh_frame:0000000000017565                 db  20h
.eh_frame:0000000000017566                 db  8Dh
.eh_frame:0000000000017567                 db    4
.eh_frame:0000000000017568                 db  42h ; B
.eh_frame:0000000000017569                 db  0Eh
.eh_frame:000000000001756A                 db  28h ; (
.eh_frame:000000000001756B                 db  8Ch
.eh_frame:000000000001756C                 db    5
.eh_frame:000000000001756D                 db  44h ; D
.eh_frame:000000000001756E                 db  0Eh
.eh_frame:000000000001756F                 db  30h ; 0
.eh_frame:0000000000017570                 db  86h
.eh_frame:0000000000017571                 db    6
.eh_frame:0000000000017572                 db  41h ; A
.eh_frame:0000000000017573                 db  0Eh
.eh_frame:0000000000017574                 db  38h ; 8
.eh_frame:0000000000017575                 db  83h
.eh_frame:0000000000017576                 db    7
.eh_frame:0000000000017577                 db  4Fh ; O
.eh_frame:0000000000017578                 db  0Eh
.eh_frame:0000000000017579                 db  90h
.eh_frame:000000000001757A                 db    1
.eh_frame:000000000001757B                 db    2
.eh_frame:000000000001757C                 db  5Bh ; [
.eh_frame:000000000001757D                 db  0Eh
.eh_frame:000000000001757E                 db  98h
.eh_frame:000000000001757F                 db    1
.eh_frame:0000000000017580                 db  45h ; E
.eh_frame:0000000000017581                 db  0Eh
.eh_frame:0000000000017582                 db 0A0h
.eh_frame:0000000000017583                 db    1
.eh_frame:0000000000017584                 db  6Ch ; l
.eh_frame:0000000000017585                 db  0Eh
.eh_frame:0000000000017586                 db  98h
.eh_frame:0000000000017587                 db    1
.eh_frame:0000000000017588                 db  41h ; A
.eh_frame:0000000000017589                 db  0Eh
.eh_frame:000000000001758A                 db  90h
.eh_frame:000000000001758B                 db    1
.eh_frame:000000000001758C                 db    3
.eh_frame:000000000001758D                 db  31h ; 1
.eh_frame:000000000001758E                 db    1
.eh_frame:000000000001758F                 db  0Ah
.eh_frame:0000000000017590                 db  0Eh
.eh_frame:0000000000017591                 db  38h ; 8
.eh_frame:0000000000017592                 db  41h ; A
.eh_frame:0000000000017593                 db  0Eh
.eh_frame:0000000000017594                 db  30h ; 0
.eh_frame:0000000000017595                 db  41h ; A
.eh_frame:0000000000017596                 db  0Eh
.eh_frame:0000000000017597                 db  28h ; (
.eh_frame:0000000000017598                 db  42h ; B
.eh_frame:0000000000017599                 db  0Eh
.eh_frame:000000000001759A                 db  20h
.eh_frame:000000000001759B                 db  42h ; B
.eh_frame:000000000001759C                 db  0Eh
.eh_frame:000000000001759D                 db  18h
.eh_frame:000000000001759E                 db  42h ; B
.eh_frame:000000000001759F                 db  0Eh
.eh_frame:00000000000175A0                 db  10h
.eh_frame:00000000000175A1                 db  42h ; B
.eh_frame:00000000000175A2                 db  0Eh
.eh_frame:00000000000175A3                 db    8
.eh_frame:00000000000175A4                 db  49h ; I
.eh_frame:00000000000175A5                 db  0Bh
.eh_frame:00000000000175A6                 db    0
.eh_frame:00000000000175A7                 db    0
.eh_frame:00000000000175A8                 db  4Ch ; L
.eh_frame:00000000000175A9                 db    0
.eh_frame:00000000000175AA                 db    0
.eh_frame:00000000000175AB                 db    0
.eh_frame:00000000000175AC                 db  5Ch ; \
.eh_frame:00000000000175AD                 db  18h
.eh_frame:00000000000175AE                 db    0
.eh_frame:00000000000175AF                 db    0
.eh_frame:00000000000175B0                 db 0F0h
.eh_frame:00000000000175B1                 db  40h ; @
.eh_frame:00000000000175B2                 db 0FFh
.eh_frame:00000000000175B3                 db 0FFh
.eh_frame:00000000000175B4                 db  27h ; '
.eh_frame:00000000000175B5                 db    5
.eh_frame:00000000000175B6                 db    0
.eh_frame:00000000000175B7                 db    0
.eh_frame:00000000000175B8                 db    0
.eh_frame:00000000000175B9                 db  42h ; B
.eh_frame:00000000000175BA                 db  0Eh
.eh_frame:00000000000175BB                 db  10h
.eh_frame:00000000000175BC                 db  8Fh
.eh_frame:00000000000175BD                 db    2
.eh_frame:00000000000175BE                 db  42h ; B
.eh_frame:00000000000175BF                 db  0Eh
.eh_frame:00000000000175C0                 db  18h
.eh_frame:00000000000175C1                 db  8Eh
.eh_frame:00000000000175C2                 db    3
.eh_frame:00000000000175C3                 db  45h ; E
.eh_frame:00000000000175C4                 db  0Eh
.eh_frame:00000000000175C5                 db  20h
.eh_frame:00000000000175C6                 db  8Dh
.eh_frame:00000000000175C7                 db    4
.eh_frame:00000000000175C8                 db  42h ; B
.eh_frame:00000000000175C9                 db  0Eh
.eh_frame:00000000000175CA                 db  28h ; (
.eh_frame:00000000000175CB                 db  8Ch
.eh_frame:00000000000175CC                 db    5
.eh_frame:00000000000175CD                 db  41h ; A
.eh_frame:00000000000175CE                 db  0Eh
.eh_frame:00000000000175CF                 db  30h ; 0
.eh_frame:00000000000175D0                 db  86h
.eh_frame:00000000000175D1                 db    6
.eh_frame:00000000000175D2                 db  41h ; A
.eh_frame:00000000000175D3                 db  0Eh
.eh_frame:00000000000175D4                 db  38h ; 8
.eh_frame:00000000000175D5                 db  83h
.eh_frame:00000000000175D6                 db    7
.eh_frame:00000000000175D7                 db  4Ch ; L
.eh_frame:00000000000175D8                 db  0Eh
.eh_frame:00000000000175D9                 db 0B0h
.eh_frame:00000000000175DA                 db    3
.eh_frame:00000000000175DB                 db    3
.eh_frame:00000000000175DC                 db  82h
.eh_frame:00000000000175DD                 db    4
.eh_frame:00000000000175DE                 db  0Ah
.eh_frame:00000000000175DF                 db  0Eh
.eh_frame:00000000000175E0                 db  38h ; 8
.eh_frame:00000000000175E1                 db  41h ; A
.eh_frame:00000000000175E2                 db  0Eh
.eh_frame:00000000000175E3                 db  30h ; 0
.eh_frame:00000000000175E4                 db  41h ; A
.eh_frame:00000000000175E5                 db  0Eh
.eh_frame:00000000000175E6                 db  28h ; (
.eh_frame:00000000000175E7                 db  42h ; B
.eh_frame:00000000000175E8                 db  0Eh
.eh_frame:00000000000175E9                 db  20h
.eh_frame:00000000000175EA                 db  42h ; B
.eh_frame:00000000000175EB                 db  0Eh
.eh_frame:00000000000175EC                 db  18h
.eh_frame:00000000000175ED                 db  42h ; B
.eh_frame:00000000000175EE                 db  0Eh
.eh_frame:00000000000175EF                 db  10h
.eh_frame:00000000000175F0                 db  42h ; B
.eh_frame:00000000000175F1                 db  0Eh
.eh_frame:00000000000175F2                 db    8
.eh_frame:00000000000175F3                 db  41h ; A
.eh_frame:00000000000175F4                 db  0Bh
.eh_frame:00000000000175F5                 db    0
.eh_frame:00000000000175F6                 db    0
.eh_frame:00000000000175F7                 db    0
.eh_frame:00000000000175F8                 db  38h ; 8
.eh_frame:00000000000175F9                 db    0
.eh_frame:00000000000175FA                 db    0
.eh_frame:00000000000175FB                 db    0
.eh_frame:00000000000175FC                 db 0ACh
.eh_frame:00000000000175FD                 db  18h
.eh_frame:00000000000175FE                 db    0
.eh_frame:00000000000175FF                 db    0
.eh_frame:0000000000017600                 db 0D0h
.eh_frame:0000000000017601                 db  45h ; E
.eh_frame:0000000000017602                 db 0FFh
.eh_frame:0000000000017603                 db 0FFh
.eh_frame:0000000000017604                 db  54h ; T
.eh_frame:0000000000017605                 db    2
.eh_frame:0000000000017606                 db    0
.eh_frame:0000000000017607                 db    0
.eh_frame:0000000000017608                 db    0
.eh_frame:0000000000017609                 db  46h ; F
.eh_frame:000000000001760A                 db  0Eh
.eh_frame:000000000001760B                 db  10h
.eh_frame:000000000001760C                 db  8Dh
.eh_frame:000000000001760D                 db    2
.eh_frame:000000000001760E                 db  42h ; B
.eh_frame:000000000001760F                 db  0Eh
.eh_frame:0000000000017610                 db  18h
.eh_frame:0000000000017611                 db  8Ch
.eh_frame:0000000000017612                 db    3
.eh_frame:0000000000017613                 db  45h ; E
.eh_frame:0000000000017614                 db  0Eh
.eh_frame:0000000000017615                 db  20h
.eh_frame:0000000000017616                 db  86h
.eh_frame:0000000000017617                 db    4
.eh_frame:0000000000017618                 db  41h ; A
.eh_frame:0000000000017619                 db  0Eh
.eh_frame:000000000001761A                 db  28h ; (
.eh_frame:000000000001761B                 db  83h
.eh_frame:000000000001761C                 db    5
.eh_frame:000000000001761D                 db  44h ; D
.eh_frame:000000000001761E                 db  0Eh
.eh_frame:000000000001761F                 db  30h ; 0
.eh_frame:0000000000017620                 db    2
.eh_frame:0000000000017621                 db 0E4h
.eh_frame:0000000000017622                 db  0Ah
.eh_frame:0000000000017623                 db  0Eh
.eh_frame:0000000000017624                 db  28h ; (
.eh_frame:0000000000017625                 db  43h ; C
.eh_frame:0000000000017626                 db  0Eh
.eh_frame:0000000000017627                 db  20h
.eh_frame:0000000000017628                 db  41h ; A
.eh_frame:0000000000017629                 db  0Eh
.eh_frame:000000000001762A                 db  18h
.eh_frame:000000000001762B                 db  42h ; B
.eh_frame:000000000001762C                 db  0Eh
.eh_frame:000000000001762D                 db  10h
.eh_frame:000000000001762E                 db  42h ; B
.eh_frame:000000000001762F                 db  0Eh
.eh_frame:0000000000017630                 db    8
.eh_frame:0000000000017631                 db  42h ; B
.eh_frame:0000000000017632                 db  0Bh
.eh_frame:0000000000017633                 db    0
.eh_frame:0000000000017634                 db  4Ch ; L
.eh_frame:0000000000017635                 db    0
.eh_frame:0000000000017636                 db    0
.eh_frame:0000000000017637                 db    0
.eh_frame:0000000000017638                 db 0E8h
.eh_frame:0000000000017639                 db  18h
.eh_frame:000000000001763A                 db    0
.eh_frame:000000000001763B                 db    0
.eh_frame:000000000001763C                 db 0F4h
.eh_frame:000000000001763D                 db  47h ; G
.eh_frame:000000000001763E                 db 0FFh
.eh_frame:000000000001763F                 db 0FFh
.eh_frame:0000000000017640                 db  51h ; Q
.eh_frame:0000000000017641                 db    7
.eh_frame:0000000000017642                 db    0
.eh_frame:0000000000017643                 db    0
.eh_frame:0000000000017644                 db    0
.eh_frame:0000000000017645                 db  42h ; B
.eh_frame:0000000000017646                 db  0Eh
.eh_frame:0000000000017647                 db  10h
.eh_frame:0000000000017648                 db  8Fh
.eh_frame:0000000000017649                 db    2
.eh_frame:000000000001764A                 db  42h ; B
.eh_frame:000000000001764B                 db  0Eh
.eh_frame:000000000001764C                 db  18h
.eh_frame:000000000001764D                 db  8Eh
.eh_frame:000000000001764E                 db    3
.eh_frame:000000000001764F                 db  45h ; E
.eh_frame:0000000000017650                 db  0Eh
.eh_frame:0000000000017651                 db  20h
.eh_frame:0000000000017652                 db  8Dh
.eh_frame:0000000000017653                 db    4
.eh_frame:0000000000017654                 db  42h ; B
.eh_frame:0000000000017655                 db  0Eh
.eh_frame:0000000000017656                 db  28h ; (
.eh_frame:0000000000017657                 db  8Ch
.eh_frame:0000000000017658                 db    5
.eh_frame:0000000000017659                 db  41h ; A
.eh_frame:000000000001765A                 db  0Eh
.eh_frame:000000000001765B                 db  30h ; 0
.eh_frame:000000000001765C                 db  86h
.eh_frame:000000000001765D                 db    6
.eh_frame:000000000001765E                 db  41h ; A
.eh_frame:000000000001765F                 db  0Eh
.eh_frame:0000000000017660                 db  38h ; 8
.eh_frame:0000000000017661                 db  83h
.eh_frame:0000000000017662                 db    7
.eh_frame:0000000000017663                 db  4Dh ; M
.eh_frame:0000000000017664                 db  0Eh
.eh_frame:0000000000017665                 db  90h
.eh_frame:0000000000017666                 db    2
.eh_frame:0000000000017667                 db    3
.eh_frame:0000000000017668                 db  88h
.eh_frame:0000000000017669                 db    5
.eh_frame:000000000001766A                 db  0Ah
.eh_frame:000000000001766B                 db  0Eh
.eh_frame:000000000001766C                 db  38h ; 8
.eh_frame:000000000001766D                 db  41h ; A
.eh_frame:000000000001766E                 db  0Eh
.eh_frame:000000000001766F                 db  30h ; 0
.eh_frame:0000000000017670                 db  41h ; A
.eh_frame:0000000000017671                 db  0Eh
.eh_frame:0000000000017672                 db  28h ; (
.eh_frame:0000000000017673                 db  42h ; B
.eh_frame:0000000000017674                 db  0Eh
.eh_frame:0000000000017675                 db  20h
.eh_frame:0000000000017676                 db  42h ; B
.eh_frame:0000000000017677                 db  0Eh
.eh_frame:0000000000017678                 db  18h
.eh_frame:0000000000017679                 db  42h ; B
.eh_frame:000000000001767A                 db  0Eh
.eh_frame:000000000001767B                 db  10h
.eh_frame:000000000001767C                 db  42h ; B
.eh_frame:000000000001767D                 db  0Eh
.eh_frame:000000000001767E                 db    8
.eh_frame:000000000001767F                 db  44h ; D
.eh_frame:0000000000017680                 db  0Bh
.eh_frame:0000000000017681                 db    0
.eh_frame:0000000000017682                 db    0
.eh_frame:0000000000017683                 db    0
.eh_frame:0000000000017684                 db  2Ch ; ,
.eh_frame:0000000000017685                 db    0
.eh_frame:0000000000017686                 db    0
.eh_frame:0000000000017687                 db    0
.eh_frame:0000000000017688                 db  38h ; 8
.eh_frame:0000000000017689                 db  19h
.eh_frame:000000000001768A                 db    0
.eh_frame:000000000001768B                 db    0
.eh_frame:000000000001768C                 db    4
.eh_frame:000000000001768D                 db  4Fh ; O
.eh_frame:000000000001768E                 db 0FFh
.eh_frame:000000000001768F                 db 0FFh
.eh_frame:0000000000017690                 db 0EAh
.eh_frame:0000000000017691                 db    8
.eh_frame:0000000000017692                 db    0
.eh_frame:0000000000017693                 db    0
.eh_frame:0000000000017694                 db    0
.eh_frame:0000000000017695                 db  41h ; A
.eh_frame:0000000000017696                 db  0Eh
.eh_frame:0000000000017697                 db  10h
.eh_frame:0000000000017698                 db  86h
.eh_frame:0000000000017699                 db    2
.eh_frame:000000000001769A                 db  43h ; C
.eh_frame:000000000001769B                 db  0Dh
.eh_frame:000000000001769C                 db    6
.eh_frame:000000000001769D                 db  48h ; H
.eh_frame:000000000001769E                 db  8Fh
.eh_frame:000000000001769F                 db    3
.eh_frame:00000000000176A0                 db  8Eh
.eh_frame:00000000000176A1                 db    4
.eh_frame:00000000000176A2                 db  8Dh
.eh_frame:00000000000176A3                 db    5
.eh_frame:00000000000176A4                 db  8Ch
.eh_frame:00000000000176A5                 db    6
.eh_frame:00000000000176A6                 db  4Eh ; N
.eh_frame:00000000000176A7                 db  83h
.eh_frame:00000000000176A8                 db    7
.eh_frame:00000000000176A9                 db    3
.eh_frame:00000000000176AA                 db  20h
.eh_frame:00000000000176AB                 db    7
.eh_frame:00000000000176AC                 db  0Ah
.eh_frame:00000000000176AD                 db  0Ch
.eh_frame:00000000000176AE                 db    7
.eh_frame:00000000000176AF                 db    8
.eh_frame:00000000000176B0                 db  41h ; A
.eh_frame:00000000000176B1                 db  0Bh
.eh_frame:00000000000176B2                 db    0
.eh_frame:00000000000176B3                 db    0
.eh_frame:00000000000176B4                 db  68h ; h
.eh_frame:00000000000176B5                 db    0
.eh_frame:00000000000176B6                 db    0
.eh_frame:00000000000176B7                 db    0
.eh_frame:00000000000176B8                 db  68h ; h
.eh_frame:00000000000176B9                 db  19h
.eh_frame:00000000000176BA                 db    0
.eh_frame:00000000000176BB                 db    0
.eh_frame:00000000000176BC                 db 0C4h
.eh_frame:00000000000176BD                 db  57h ; W
.eh_frame:00000000000176BE                 db 0FFh
.eh_frame:00000000000176BF                 db 0FFh
.eh_frame:00000000000176C0                 db  96h
.eh_frame:00000000000176C1                 db    1
.eh_frame:00000000000176C2                 db    0
.eh_frame:00000000000176C3                 db    0
.eh_frame:00000000000176C4                 db    0
.eh_frame:00000000000176C5                 db  42h ; B
.eh_frame:00000000000176C6                 db  0Eh
.eh_frame:00000000000176C7                 db  10h
.eh_frame:00000000000176C8                 db  8Fh
.eh_frame:00000000000176C9                 db    2
.eh_frame:00000000000176CA                 db  42h ; B
.eh_frame:00000000000176CB                 db  0Eh
.eh_frame:00000000000176CC                 db  18h
.eh_frame:00000000000176CD                 db  8Eh
.eh_frame:00000000000176CE                 db    3
.eh_frame:00000000000176CF                 db  45h ; E
.eh_frame:00000000000176D0                 db  0Eh
.eh_frame:00000000000176D1                 db  20h
.eh_frame:00000000000176D2                 db  8Dh
.eh_frame:00000000000176D3                 db    4
.eh_frame:00000000000176D4                 db  42h ; B
.eh_frame:00000000000176D5                 db  0Eh
.eh_frame:00000000000176D6                 db  28h ; (
.eh_frame:00000000000176D7                 db  8Ch
.eh_frame:00000000000176D8                 db    5
.eh_frame:00000000000176D9                 db  44h ; D
.eh_frame:00000000000176DA                 db  0Eh
.eh_frame:00000000000176DB                 db  30h ; 0
.eh_frame:00000000000176DC                 db  86h
.eh_frame:00000000000176DD                 db    6
.eh_frame:00000000000176DE                 db  41h ; A
.eh_frame:00000000000176DF                 db  0Eh
.eh_frame:00000000000176E0                 db  38h ; 8
.eh_frame:00000000000176E1                 db  83h
.eh_frame:00000000000176E2                 db    7
.eh_frame:00000000000176E3                 db  51h ; Q
.eh_frame:00000000000176E4                 db  0Eh
.eh_frame:00000000000176E5                 db  58h ; X
.eh_frame:00000000000176E6                 db  49h ; I
.eh_frame:00000000000176E7                 db  0Eh
.eh_frame:00000000000176E8                 db  60h ; `
.eh_frame:00000000000176E9                 db  4Eh ; N
.eh_frame:00000000000176EA                 db  0Eh
.eh_frame:00000000000176EB                 db  58h ; X
.eh_frame:00000000000176EC                 db  41h ; A
.eh_frame:00000000000176ED                 db  0Eh
.eh_frame:00000000000176EE                 db  50h ; P
.eh_frame:00000000000176EF                 db  46h ; F
.eh_frame:00000000000176F0                 db  0Ah
.eh_frame:00000000000176F1                 db  0Eh
.eh_frame:00000000000176F2                 db  38h ; 8
.eh_frame:00000000000176F3                 db  41h ; A
.eh_frame:00000000000176F4                 db  0Eh
.eh_frame:00000000000176F5                 db  30h ; 0
.eh_frame:00000000000176F6                 db  41h ; A
.eh_frame:00000000000176F7                 db  0Eh
.eh_frame:00000000000176F8                 db  28h ; (
.eh_frame:00000000000176F9                 db  42h ; B
.eh_frame:00000000000176FA                 db  0Eh
.eh_frame:00000000000176FB                 db  20h
.eh_frame:00000000000176FC                 db  42h ; B
.eh_frame:00000000000176FD                 db  0Eh
.eh_frame:00000000000176FE                 db  18h
.eh_frame:00000000000176FF                 db  42h ; B
.eh_frame:0000000000017700                 db  0Eh
.eh_frame:0000000000017701                 db  10h
.eh_frame:0000000000017702                 db  42h ; B
.eh_frame:0000000000017703                 db  0Eh
.eh_frame:0000000000017704                 db    8
.eh_frame:0000000000017705                 db  47h ; G
.eh_frame:0000000000017706                 db  0Bh
.eh_frame:0000000000017707                 db    2
.eh_frame:0000000000017708                 db  97h
.eh_frame:0000000000017709                 db  0Ah
.eh_frame:000000000001770A                 db  0Eh
.eh_frame:000000000001770B                 db  38h ; 8
.eh_frame:000000000001770C                 db  44h ; D
.eh_frame:000000000001770D                 db  0Eh
.eh_frame:000000000001770E                 db  30h ; 0
.eh_frame:000000000001770F                 db  41h ; A
.eh_frame:0000000000017710                 db  0Eh
.eh_frame:0000000000017711                 db  28h ; (
.eh_frame:0000000000017712                 db  42h ; B
.eh_frame:0000000000017713                 db  0Eh
.eh_frame:0000000000017714                 db  20h
.eh_frame:0000000000017715                 db  42h ; B
.eh_frame:0000000000017716                 db  0Eh
.eh_frame:0000000000017717                 db  18h
.eh_frame:0000000000017718                 db  42h ; B
.eh_frame:0000000000017719                 db  0Eh
.eh_frame:000000000001771A                 db  10h
.eh_frame:000000000001771B                 db  42h ; B
.eh_frame:000000000001771C                 db  0Eh
.eh_frame:000000000001771D                 db    8
.eh_frame:000000000001771E                 db  4Ch ; L
.eh_frame:000000000001771F                 db  0Bh
.eh_frame:0000000000017720                 db  5Ch ; \
.eh_frame:0000000000017721                 db    0
.eh_frame:0000000000017722                 db    0
.eh_frame:0000000000017723                 db    0
.eh_frame:0000000000017724                 db 0D4h
.eh_frame:0000000000017725                 db  19h
.eh_frame:0000000000017726                 db    0
.eh_frame:0000000000017727                 db    0
.eh_frame:0000000000017728                 db 0F8h
.eh_frame:0000000000017729                 db  58h ; X
.eh_frame:000000000001772A                 db 0FFh
.eh_frame:000000000001772B                 db 0FFh
.eh_frame:000000000001772C                 db 0E1h
.eh_frame:000000000001772D                 db    8
.eh_frame:000000000001772E                 db    0
.eh_frame:000000000001772F                 db    0
.eh_frame:0000000000017730                 db    0
.eh_frame:0000000000017731                 db  42h ; B
.eh_frame:0000000000017732                 db  0Eh
.eh_frame:0000000000017733                 db  10h
.eh_frame:0000000000017734                 db  8Fh
.eh_frame:0000000000017735                 db    2
.eh_frame:0000000000017736                 db  42h ; B
.eh_frame:0000000000017737                 db  0Eh
.eh_frame:0000000000017738                 db  18h
.eh_frame:0000000000017739                 db  8Eh
.eh_frame:000000000001773A                 db    3
.eh_frame:000000000001773B                 db  42h ; B
.eh_frame:000000000001773C                 db  0Eh
.eh_frame:000000000001773D                 db  20h
.eh_frame:000000000001773E                 db  8Dh
.eh_frame:000000000001773F                 db    4
.eh_frame:0000000000017740                 db  42h ; B
.eh_frame:0000000000017741                 db  0Eh
.eh_frame:0000000000017742                 db  28h ; (
.eh_frame:0000000000017743                 db  8Ch
.eh_frame:0000000000017744                 db    5
.eh_frame:0000000000017745                 db  41h ; A
.eh_frame:0000000000017746                 db  0Eh
.eh_frame:0000000000017747                 db  30h ; 0
.eh_frame:0000000000017748                 db  86h
.eh_frame:0000000000017749                 db    6
.eh_frame:000000000001774A                 db  41h ; A
.eh_frame:000000000001774B                 db  0Eh
.eh_frame:000000000001774C                 db  38h ; 8
.eh_frame:000000000001774D                 db  83h
.eh_frame:000000000001774E                 db    7
.eh_frame:000000000001774F                 db  47h ; G
.eh_frame:0000000000017750                 db  0Eh
.eh_frame:0000000000017751                 db 0F0h
.eh_frame:0000000000017752                 db    1
.eh_frame:0000000000017753                 db    3
.eh_frame:0000000000017754                 db  85h
.eh_frame:0000000000017755                 db    3
.eh_frame:0000000000017756                 db  0Ah
.eh_frame:0000000000017757                 db  0Eh
.eh_frame:0000000000017758                 db  38h ; 8
.eh_frame:0000000000017759                 db  41h ; A
.eh_frame:000000000001775A                 db  0Eh
.eh_frame:000000000001775B                 db  30h ; 0
.eh_frame:000000000001775C                 db  41h ; A
.eh_frame:000000000001775D                 db  0Eh
.eh_frame:000000000001775E                 db  28h ; (
.eh_frame:000000000001775F                 db  42h ; B
.eh_frame:0000000000017760                 db  0Eh
.eh_frame:0000000000017761                 db  20h
.eh_frame:0000000000017762                 db  42h ; B
.eh_frame:0000000000017763                 db  0Eh
.eh_frame:0000000000017764                 db  18h
.eh_frame:0000000000017765                 db  42h ; B
.eh_frame:0000000000017766                 db  0Eh
.eh_frame:0000000000017767                 db  10h
.eh_frame:0000000000017768                 db  42h ; B
.eh_frame:0000000000017769                 db  0Eh
.eh_frame:000000000001776A                 db    8
.eh_frame:000000000001776B                 db  48h ; H
.eh_frame:000000000001776C                 db  0Bh
.eh_frame:000000000001776D                 db    3
.eh_frame:000000000001776E                 db 0D8h
.eh_frame:000000000001776F                 db    2
.eh_frame:0000000000017770                 db  0Eh
.eh_frame:0000000000017771                 db 0F8h
.eh_frame:0000000000017772                 db    1
.eh_frame:0000000000017773                 db  42h ; B
.eh_frame:0000000000017774                 db  0Eh
.eh_frame:0000000000017775                 db  80h
.eh_frame:0000000000017776                 db    2
.eh_frame:0000000000017777                 db  4Fh ; O
.eh_frame:0000000000017778                 db  0Eh
.eh_frame:0000000000017779                 db 0F8h
.eh_frame:000000000001777A                 db    1
.eh_frame:000000000001777B                 db  44h ; D
.eh_frame:000000000001777C                 db  0Eh
.eh_frame:000000000001777D                 db 0F0h
.eh_frame:000000000001777E                 db    1
.eh_frame:000000000001777F                 db    0
.eh_frame:0000000000017780                 db  48h ; H
.eh_frame:0000000000017781                 db    0
.eh_frame:0000000000017782                 db    0
.eh_frame:0000000000017783                 db    0
.eh_frame:0000000000017784                 db  34h ; 4
.eh_frame:0000000000017785                 db  1Ah
.eh_frame:0000000000017786                 db    0
.eh_frame:0000000000017787                 db    0
.eh_frame:0000000000017788                 db  88h
.eh_frame:0000000000017789                 db  61h ; a
.eh_frame:000000000001778A                 db 0FFh
.eh_frame:000000000001778B                 db 0FFh
.eh_frame:000000000001778C                 db 0ECh
.eh_frame:000000000001778D                 db    1
.eh_frame:000000000001778E                 db    0
.eh_frame:000000000001778F                 db    0
.eh_frame:0000000000017790                 db    0
.eh_frame:0000000000017791                 db  42h ; B
.eh_frame:0000000000017792                 db  0Eh
.eh_frame:0000000000017793                 db  10h
.eh_frame:0000000000017794                 db  8Fh
.eh_frame:0000000000017795                 db    2
.eh_frame:0000000000017796                 db  42h ; B
.eh_frame:0000000000017797                 db  0Eh
.eh_frame:0000000000017798                 db  18h
.eh_frame:0000000000017799                 db  8Eh
.eh_frame:000000000001779A                 db    3
.eh_frame:000000000001779B                 db  42h ; B
.eh_frame:000000000001779C                 db  0Eh
.eh_frame:000000000001779D                 db  20h
.eh_frame:000000000001779E                 db  8Dh
.eh_frame:000000000001779F                 db    4
.eh_frame:00000000000177A0                 db  42h ; B
.eh_frame:00000000000177A1                 db  0Eh
.eh_frame:00000000000177A2                 db  28h ; (
.eh_frame:00000000000177A3                 db  8Ch
.eh_frame:00000000000177A4                 db    5
.eh_frame:00000000000177A5                 db  44h ; D
.eh_frame:00000000000177A6                 db  0Eh
.eh_frame:00000000000177A7                 db  30h ; 0
.eh_frame:00000000000177A8                 db  86h
.eh_frame:00000000000177A9                 db    6
.eh_frame:00000000000177AA                 db  41h ; A
.eh_frame:00000000000177AB                 db  0Eh
.eh_frame:00000000000177AC                 db  38h ; 8
.eh_frame:00000000000177AD                 db  83h
.eh_frame:00000000000177AE                 db    7
.eh_frame:00000000000177AF                 db  47h ; G
.eh_frame:00000000000177B0                 db  0Eh
.eh_frame:00000000000177B1                 db  70h ; p
.eh_frame:00000000000177B2                 db    2
.eh_frame:00000000000177B3                 db  6Ch ; l
.eh_frame:00000000000177B4                 db  0Ah
.eh_frame:00000000000177B5                 db  0Eh
.eh_frame:00000000000177B6                 db  38h ; 8
.eh_frame:00000000000177B7                 db  41h ; A
.eh_frame:00000000000177B8                 db  0Eh
.eh_frame:00000000000177B9                 db  30h ; 0
.eh_frame:00000000000177BA                 db  41h ; A
.eh_frame:00000000000177BB                 db  0Eh
.eh_frame:00000000000177BC                 db  28h ; (
.eh_frame:00000000000177BD                 db  42h ; B
.eh_frame:00000000000177BE                 db  0Eh
.eh_frame:00000000000177BF                 db  20h
.eh_frame:00000000000177C0                 db  42h ; B
.eh_frame:00000000000177C1                 db  0Eh
.eh_frame:00000000000177C2                 db  18h
.eh_frame:00000000000177C3                 db  42h ; B
.eh_frame:00000000000177C4                 db  0Eh
.eh_frame:00000000000177C5                 db  10h
.eh_frame:00000000000177C6                 db  42h ; B
.eh_frame:00000000000177C7                 db  0Eh
.eh_frame:00000000000177C8                 db    8
.eh_frame:00000000000177C9                 db  46h ; F
.eh_frame:00000000000177CA                 db  0Bh
.eh_frame:00000000000177CB                 db    0
.eh_frame:00000000000177CC                 db  5Ch ; \
.eh_frame:00000000000177CD                 db    0
.eh_frame:00000000000177CE                 db    0
.eh_frame:00000000000177CF                 db    0
.eh_frame:00000000000177D0                 db  80h
.eh_frame:00000000000177D1                 db  1Ah
.eh_frame:00000000000177D2                 db    0
.eh_frame:00000000000177D3                 db    0
.eh_frame:00000000000177D4                 db  2Ch ; ,
.eh_frame:00000000000177D5                 db  63h ; c
.eh_frame:00000000000177D6                 db 0FFh
.eh_frame:00000000000177D7                 db 0FFh
.eh_frame:00000000000177D8                 db  40h ; @
.eh_frame:00000000000177D9                 db    3
.eh_frame:00000000000177DA                 db    0
.eh_frame:00000000000177DB                 db    0
.eh_frame:00000000000177DC                 db    0
.eh_frame:00000000000177DD                 db  42h ; B
.eh_frame:00000000000177DE                 db  0Eh
.eh_frame:00000000000177DF                 db  10h
.eh_frame:00000000000177E0                 db  8Fh
.eh_frame:00000000000177E1                 db    2
.eh_frame:00000000000177E2                 db  42h ; B
.eh_frame:00000000000177E3                 db  0Eh
.eh_frame:00000000000177E4                 db  18h
.eh_frame:00000000000177E5                 db  8Eh
.eh_frame:00000000000177E6                 db    3
.eh_frame:00000000000177E7                 db  45h ; E
.eh_frame:00000000000177E8                 db  0Eh
.eh_frame:00000000000177E9                 db  20h
.eh_frame:00000000000177EA                 db  8Dh
.eh_frame:00000000000177EB                 db    4
.eh_frame:00000000000177EC                 db  42h ; B
.eh_frame:00000000000177ED                 db  0Eh
.eh_frame:00000000000177EE                 db  28h ; (
.eh_frame:00000000000177EF                 db  8Ch
.eh_frame:00000000000177F0                 db    5
.eh_frame:00000000000177F1                 db  44h ; D
.eh_frame:00000000000177F2                 db  0Eh
.eh_frame:00000000000177F3                 db  30h ; 0
.eh_frame:00000000000177F4                 db  86h
.eh_frame:00000000000177F5                 db    6
.eh_frame:00000000000177F6                 db  41h ; A
.eh_frame:00000000000177F7                 db  0Eh
.eh_frame:00000000000177F8                 db  38h ; 8
.eh_frame:00000000000177F9                 db  83h
.eh_frame:00000000000177FA                 db    7
.eh_frame:00000000000177FB                 db  44h ; D
.eh_frame:00000000000177FC                 db  0Eh
.eh_frame:00000000000177FD                 db 0A0h
.eh_frame:00000000000177FE                 db    1
.eh_frame:00000000000177FF                 db    3
.eh_frame:0000000000017800                 db  5Dh ; ]
.eh_frame:0000000000017801                 db    1
.eh_frame:0000000000017802                 db  0Eh
.eh_frame:0000000000017803                 db 0A8h
.eh_frame:0000000000017804                 db    1
.eh_frame:0000000000017805                 db  51h ; Q
.eh_frame:0000000000017806                 db  0Eh
.eh_frame:0000000000017807                 db 0B0h
.eh_frame:0000000000017808                 db    1
.eh_frame:0000000000017809                 db  52h ; R
.eh_frame:000000000001780A                 db  0Eh
.eh_frame:000000000001780B                 db 0A8h
.eh_frame:000000000001780C                 db    1
.eh_frame:000000000001780D                 db  41h ; A
.eh_frame:000000000001780E                 db  0Eh
.eh_frame:000000000001780F                 db 0A0h
.eh_frame:0000000000017810                 db    1
.eh_frame:0000000000017811                 db    3
.eh_frame:0000000000017812                 db  94h
.eh_frame:0000000000017813                 db    1
.eh_frame:0000000000017814                 db  0Ah
.eh_frame:0000000000017815                 db  0Eh
.eh_frame:0000000000017816                 db  38h ; 8
.eh_frame:0000000000017817                 db  41h ; A
.eh_frame:0000000000017818                 db  0Eh
.eh_frame:0000000000017819                 db  30h ; 0
.eh_frame:000000000001781A                 db  41h ; A
.eh_frame:000000000001781B                 db  0Eh
.eh_frame:000000000001781C                 db  28h ; (
.eh_frame:000000000001781D                 db  42h ; B
.eh_frame:000000000001781E                 db  0Eh
.eh_frame:000000000001781F                 db  20h
.eh_frame:0000000000017820                 db  42h ; B
.eh_frame:0000000000017821                 db  0Eh
.eh_frame:0000000000017822                 db  18h
.eh_frame:0000000000017823                 db  42h ; B
.eh_frame:0000000000017824                 db  0Eh
.eh_frame:0000000000017825                 db  10h
.eh_frame:0000000000017826                 db  42h ; B
.eh_frame:0000000000017827                 db  0Eh
.eh_frame:0000000000017828                 db    8
.eh_frame:0000000000017829                 db  41h ; A
.eh_frame:000000000001782A                 db  0Bh
.eh_frame:000000000001782B                 db    0
.eh_frame:000000000001782C                 db  4Ch ; L
.eh_frame:000000000001782D                 db    0
.eh_frame:000000000001782E                 db    0
.eh_frame:000000000001782F                 db    0
.eh_frame:0000000000017830                 db 0E0h
.eh_frame:0000000000017831                 db  1Ah
.eh_frame:0000000000017832                 db    0
.eh_frame:0000000000017833                 db    0
.eh_frame:0000000000017834                 db  0Ch
.eh_frame:0000000000017835                 db  66h ; f
.eh_frame:0000000000017836                 db 0FFh
.eh_frame:0000000000017837                 db 0FFh
.eh_frame:0000000000017838                 db  30h ; 0
.eh_frame:0000000000017839                 db  17h
.eh_frame:000000000001783A                 db    0
.eh_frame:000000000001783B                 db    0
.eh_frame:000000000001783C                 db    0
.eh_frame:000000000001783D                 db  42h ; B
.eh_frame:000000000001783E                 db  0Eh
.eh_frame:000000000001783F                 db  10h
.eh_frame:0000000000017840                 db  8Fh
.eh_frame:0000000000017841                 db    2
.eh_frame:0000000000017842                 db  42h ; B
.eh_frame:0000000000017843                 db  0Eh
.eh_frame:0000000000017844                 db  18h
.eh_frame:0000000000017845                 db  8Eh
.eh_frame:0000000000017846                 db    3
.eh_frame:0000000000017847                 db  42h ; B
.eh_frame:0000000000017848                 db  0Eh
.eh_frame:0000000000017849                 db  20h
.eh_frame:000000000001784A                 db  8Dh
.eh_frame:000000000001784B                 db    4
.eh_frame:000000000001784C                 db  42h ; B
.eh_frame:000000000001784D                 db  0Eh
.eh_frame:000000000001784E                 db  28h ; (
.eh_frame:000000000001784F                 db  8Ch
.eh_frame:0000000000017850                 db    5
.eh_frame:0000000000017851                 db  44h ; D
.eh_frame:0000000000017852                 db  0Eh
.eh_frame:0000000000017853                 db  30h ; 0
.eh_frame:0000000000017854                 db  86h
.eh_frame:0000000000017855                 db    6
.eh_frame:0000000000017856                 db  41h ; A
.eh_frame:0000000000017857                 db  0Eh
.eh_frame:0000000000017858                 db  38h ; 8
.eh_frame:0000000000017859                 db  83h
.eh_frame:000000000001785A                 db    7
.eh_frame:000000000001785B                 db  52h ; R
.eh_frame:000000000001785C                 db  0Eh
.eh_frame:000000000001785D                 db 0F0h
.eh_frame:000000000001785E                 db    4
.eh_frame:000000000001785F                 db    3
.eh_frame:0000000000017860                 db  7Ch ; |
.eh_frame:0000000000017861                 db  0Bh
.eh_frame:0000000000017862                 db  0Ah
.eh_frame:0000000000017863                 db  0Eh
.eh_frame:0000000000017864                 db  38h ; 8
.eh_frame:0000000000017865                 db  41h ; A
.eh_frame:0000000000017866                 db  0Eh
.eh_frame:0000000000017867                 db  30h ; 0
.eh_frame:0000000000017868                 db  41h ; A
.eh_frame:0000000000017869                 db  0Eh
.eh_frame:000000000001786A                 db  28h ; (
.eh_frame:000000000001786B                 db  42h ; B
.eh_frame:000000000001786C                 db  0Eh
.eh_frame:000000000001786D                 db  20h
.eh_frame:000000000001786E                 db  42h ; B
.eh_frame:000000000001786F                 db  0Eh
.eh_frame:0000000000017870                 db  18h
.eh_frame:0000000000017871                 db  42h ; B
.eh_frame:0000000000017872                 db  0Eh
.eh_frame:0000000000017873                 db  10h
.eh_frame:0000000000017874                 db  42h ; B
.eh_frame:0000000000017875                 db  0Eh
.eh_frame:0000000000017876                 db    8
.eh_frame:0000000000017877                 db  4Bh ; K
.eh_frame:0000000000017878                 db  0Bh
.eh_frame:0000000000017879                 db    0
.eh_frame:000000000001787A                 db    0
.eh_frame:000000000001787B                 db    0
.eh_frame:000000000001787C                 db  5Ch ; \
.eh_frame:000000000001787D                 db    0
.eh_frame:000000000001787E                 db    0
.eh_frame:000000000001787F                 db    0
.eh_frame:0000000000017880                 db  30h ; 0
.eh_frame:0000000000017881                 db  1Bh
.eh_frame:0000000000017882                 db    0
.eh_frame:0000000000017883                 db    0
.eh_frame:0000000000017884                 db 0ECh
.eh_frame:0000000000017885                 db  7Ch ; |
.eh_frame:0000000000017886                 db 0FFh
.eh_frame:0000000000017887                 db 0FFh
.eh_frame:0000000000017888                 db  50h ; P
.eh_frame:0000000000017889                 db    8
.eh_frame:000000000001788A                 db    0
.eh_frame:000000000001788B                 db    0
.eh_frame:000000000001788C                 db    0
.eh_frame:000000000001788D                 db  42h ; B
.eh_frame:000000000001788E                 db  0Eh
.eh_frame:000000000001788F                 db  10h
.eh_frame:0000000000017890                 db  8Fh
.eh_frame:0000000000017891                 db    2
.eh_frame:0000000000017892                 db  42h ; B
.eh_frame:0000000000017893                 db  0Eh
.eh_frame:0000000000017894                 db  18h
.eh_frame:0000000000017895                 db  8Eh
.eh_frame:0000000000017896                 db    3
.eh_frame:0000000000017897                 db  45h ; E
.eh_frame:0000000000017898                 db  0Eh
.eh_frame:0000000000017899                 db  20h
.eh_frame:000000000001789A                 db  8Dh
.eh_frame:000000000001789B                 db    4
.eh_frame:000000000001789C                 db  42h ; B
.eh_frame:000000000001789D                 db  0Eh
.eh_frame:000000000001789E                 db  28h ; (
.eh_frame:000000000001789F                 db  8Ch
.eh_frame:00000000000178A0                 db    5
.eh_frame:00000000000178A1                 db  44h ; D
.eh_frame:00000000000178A2                 db  0Eh
.eh_frame:00000000000178A3                 db  30h ; 0
.eh_frame:00000000000178A4                 db  86h
.eh_frame:00000000000178A5                 db    6
.eh_frame:00000000000178A6                 db  41h ; A
.eh_frame:00000000000178A7                 db  0Eh
.eh_frame:00000000000178A8                 db  38h ; 8
.eh_frame:00000000000178A9                 db  83h
.eh_frame:00000000000178AA                 db    7
.eh_frame:00000000000178AB                 db  55h ; U
.eh_frame:00000000000178AC                 db  0Eh
.eh_frame:00000000000178AD                 db 0E0h
.eh_frame:00000000000178AE                 db    1
.eh_frame:00000000000178AF                 db    2
.eh_frame:00000000000178B0                 db  91h
.eh_frame:00000000000178B1                 db  0Ah
.eh_frame:00000000000178B2                 db  0Eh
.eh_frame:00000000000178B3                 db  38h ; 8
.eh_frame:00000000000178B4                 db  41h ; A
.eh_frame:00000000000178B5                 db  0Eh
.eh_frame:00000000000178B6                 db  30h ; 0
.eh_frame:00000000000178B7                 db  41h ; A
.eh_frame:00000000000178B8                 db  0Eh
.eh_frame:00000000000178B9                 db  28h ; (
.eh_frame:00000000000178BA                 db  42h ; B
.eh_frame:00000000000178BB                 db  0Eh
.eh_frame:00000000000178BC                 db  20h
.eh_frame:00000000000178BD                 db  42h ; B
.eh_frame:00000000000178BE                 db  0Eh
.eh_frame:00000000000178BF                 db  18h
.eh_frame:00000000000178C0                 db  42h ; B
.eh_frame:00000000000178C1                 db  0Eh
.eh_frame:00000000000178C2                 db  10h
.eh_frame:00000000000178C3                 db  42h ; B
.eh_frame:00000000000178C4                 db  0Eh
.eh_frame:00000000000178C5                 db    8
.eh_frame:00000000000178C6                 db  48h ; H
.eh_frame:00000000000178C7                 db  0Bh
.eh_frame:00000000000178C8                 db    3
.eh_frame:00000000000178C9                 db 0C3h
.eh_frame:00000000000178CA                 db    5
.eh_frame:00000000000178CB                 db  0Eh
.eh_frame:00000000000178CC                 db 0E8h
.eh_frame:00000000000178CD                 db    1
.eh_frame:00000000000178CE                 db  4Ah ; J
.eh_frame:00000000000178CF                 db  0Eh
.eh_frame:00000000000178D0                 db 0F0h
.eh_frame:00000000000178D1                 db    1
.eh_frame:00000000000178D2                 db  56h ; V
.eh_frame:00000000000178D3                 db  0Eh
.eh_frame:00000000000178D4                 db 0E8h
.eh_frame:00000000000178D5                 db    1
.eh_frame:00000000000178D6                 db  41h ; A
.eh_frame:00000000000178D7                 db  0Eh
.eh_frame:00000000000178D8                 db 0E0h
.eh_frame:00000000000178D9                 db    1
.eh_frame:00000000000178DA                 db    0
.eh_frame:00000000000178DB                 db    0
.eh_frame:00000000000178DC                 db  40h ; @
.eh_frame:00000000000178DD                 db    0
.eh_frame:00000000000178DE                 db    0
.eh_frame:00000000000178DF                 db    0
.eh_frame:00000000000178E0                 db  90h
.eh_frame:00000000000178E1                 db  1Bh
.eh_frame:00000000000178E2                 db    0
.eh_frame:00000000000178E3                 db    0
.eh_frame:00000000000178E4                 db 0DCh
.eh_frame:00000000000178E5                 db  84h
.eh_frame:00000000000178E6                 db 0FFh
.eh_frame:00000000000178E7                 db 0FFh
.eh_frame:00000000000178E8                 db  5Dh ; ]
.eh_frame:00000000000178E9                 db    2
.eh_frame:00000000000178EA                 db    0
.eh_frame:00000000000178EB                 db    0
.eh_frame:00000000000178EC                 db    0
.eh_frame:00000000000178ED                 db  42h ; B
.eh_frame:00000000000178EE                 db  0Eh
.eh_frame:00000000000178EF                 db  10h
.eh_frame:00000000000178F0                 db  8Eh
.eh_frame:00000000000178F1                 db    2
.eh_frame:00000000000178F2                 db  42h ; B
.eh_frame:00000000000178F3                 db  0Eh
.eh_frame:00000000000178F4                 db  18h
.eh_frame:00000000000178F5                 db  8Dh
.eh_frame:00000000000178F6                 db    3
.eh_frame:00000000000178F7                 db  45h ; E
.eh_frame:00000000000178F8                 db  0Eh
.eh_frame:00000000000178F9                 db  20h
.eh_frame:00000000000178FA                 db  8Ch
.eh_frame:00000000000178FB                 db    4
.eh_frame:00000000000178FC                 db  41h ; A
.eh_frame:00000000000178FD                 db  0Eh
.eh_frame:00000000000178FE                 db  28h ; (
.eh_frame:00000000000178FF                 db  86h
.eh_frame:0000000000017900                 db    5
.eh_frame:0000000000017901                 db  44h ; D
.eh_frame:0000000000017902                 db  0Eh
.eh_frame:0000000000017903                 db  30h ; 0
.eh_frame:0000000000017904                 db  83h
.eh_frame:0000000000017905                 db    6
.eh_frame:0000000000017906                 db  4Ah ; J
.eh_frame:0000000000017907                 db  0Eh
.eh_frame:0000000000017908                 db  50h ; P
.eh_frame:0000000000017909                 db    2
.eh_frame:000000000001790A                 db  61h ; a
.eh_frame:000000000001790B                 db  0Ah
.eh_frame:000000000001790C                 db  0Eh
.eh_frame:000000000001790D                 db  30h ; 0
.eh_frame:000000000001790E                 db  41h ; A
.eh_frame:000000000001790F                 db  0Eh
.eh_frame:0000000000017910                 db  28h ; (
.eh_frame:0000000000017911                 db  41h ; A
.eh_frame:0000000000017912                 db  0Eh
.eh_frame:0000000000017913                 db  20h
.eh_frame:0000000000017914                 db  42h ; B
.eh_frame:0000000000017915                 db  0Eh
.eh_frame:0000000000017916                 db  18h
.eh_frame:0000000000017917                 db  42h ; B
.eh_frame:0000000000017918                 db  0Eh
.eh_frame:0000000000017919                 db  10h
.eh_frame:000000000001791A                 db  42h ; B
.eh_frame:000000000001791B                 db  0Eh
.eh_frame:000000000001791C                 db    8
.eh_frame:000000000001791D                 db  47h ; G
.eh_frame:000000000001791E                 db  0Bh
.eh_frame:000000000001791F                 db    0
.eh_frame:0000000000017920                 db  48h ; H
.eh_frame:0000000000017921                 db    0
.eh_frame:0000000000017922                 db    0
.eh_frame:0000000000017923                 db    0
.eh_frame:0000000000017924                 db 0D4h
.eh_frame:0000000000017925                 db  1Bh
.eh_frame:0000000000017926                 db    0
.eh_frame:0000000000017927                 db    0
.eh_frame:0000000000017928                 db 0F8h
.eh_frame:0000000000017929                 db  86h
.eh_frame:000000000001792A                 db 0FFh
.eh_frame:000000000001792B                 db 0FFh
.eh_frame:000000000001792C                 db 0FDh
.eh_frame:000000000001792D                 db    6
.eh_frame:000000000001792E                 db    0
.eh_frame:000000000001792F                 db    0
.eh_frame:0000000000017930                 db    0
.eh_frame:0000000000017931                 db  42h ; B
.eh_frame:0000000000017932                 db  0Eh
.eh_frame:0000000000017933                 db  10h
.eh_frame:0000000000017934                 db  8Fh
.eh_frame:0000000000017935                 db    2
.eh_frame:0000000000017936                 db  42h ; B
.eh_frame:0000000000017937                 db  0Eh
.eh_frame:0000000000017938                 db  18h
.eh_frame:0000000000017939                 db  8Eh
.eh_frame:000000000001793A                 db    3
.eh_frame:000000000001793B                 db  42h ; B
.eh_frame:000000000001793C                 db  0Eh
.eh_frame:000000000001793D                 db  20h
.eh_frame:000000000001793E                 db  8Dh
.eh_frame:000000000001793F                 db    4
.eh_frame:0000000000017940                 db  42h ; B
.eh_frame:0000000000017941                 db  0Eh
.eh_frame:0000000000017942                 db  28h ; (
.eh_frame:0000000000017943                 db  8Ch
.eh_frame:0000000000017944                 db    5
.eh_frame:0000000000017945                 db  41h ; A
.eh_frame:0000000000017946                 db  0Eh
.eh_frame:0000000000017947                 db  30h ; 0
.eh_frame:0000000000017948                 db  86h
.eh_frame:0000000000017949                 db    6
.eh_frame:000000000001794A                 db  41h ; A
.eh_frame:000000000001794B                 db  0Eh
.eh_frame:000000000001794C                 db  38h ; 8
.eh_frame:000000000001794D                 db  83h
.eh_frame:000000000001794E                 db    7
.eh_frame:000000000001794F                 db  47h ; G
.eh_frame:0000000000017950                 db  0Eh
.eh_frame:0000000000017951                 db  70h ; p
.eh_frame:0000000000017952                 db    2
.eh_frame:0000000000017953                 db 0CBh
.eh_frame:0000000000017954                 db  0Ah
.eh_frame:0000000000017955                 db  0Eh
.eh_frame:0000000000017956                 db  38h ; 8
.eh_frame:0000000000017957                 db  41h ; A
.eh_frame:0000000000017958                 db  0Eh
.eh_frame:0000000000017959                 db  30h ; 0
.eh_frame:000000000001795A                 db  41h ; A
.eh_frame:000000000001795B                 db  0Eh
.eh_frame:000000000001795C                 db  28h ; (
.eh_frame:000000000001795D                 db  42h ; B
.eh_frame:000000000001795E                 db  0Eh
.eh_frame:000000000001795F                 db  20h
.eh_frame:0000000000017960                 db  42h ; B
.eh_frame:0000000000017961                 db  0Eh
.eh_frame:0000000000017962                 db  18h
.eh_frame:0000000000017963                 db  42h ; B
.eh_frame:0000000000017964                 db  0Eh
.eh_frame:0000000000017965                 db  10h
.eh_frame:0000000000017966                 db  42h ; B
.eh_frame:0000000000017967                 db  0Eh
.eh_frame:0000000000017968                 db    8
.eh_frame:0000000000017969                 db  4Ah ; J
.eh_frame:000000000001796A                 db  0Bh
.eh_frame:000000000001796B                 db    0
.eh_frame:000000000001796C                 db  3Ch ; <
.eh_frame:000000000001796D                 db    0
.eh_frame:000000000001796E                 db    0
.eh_frame:000000000001796F                 db    0
.eh_frame:0000000000017970                 db  20h
.eh_frame:0000000000017971                 db  1Ch
.eh_frame:0000000000017972                 db    0
.eh_frame:0000000000017973                 db    0
.eh_frame:0000000000017974                 db 0ACh
.eh_frame:0000000000017975                 db  8Dh
.eh_frame:0000000000017976                 db 0FFh
.eh_frame:0000000000017977                 db 0FFh
.eh_frame:0000000000017978                 db 0B6h
.eh_frame:0000000000017979                 db    0
.eh_frame:000000000001797A                 db    0
.eh_frame:000000000001797B                 db    0
.eh_frame:000000000001797C                 db    0
.eh_frame:000000000001797D                 db  42h ; B
.eh_frame:000000000001797E                 db  0Eh
.eh_frame:000000000001797F                 db  10h
.eh_frame:0000000000017980                 db  8Eh
.eh_frame:0000000000017981                 db    2
.eh_frame:0000000000017982                 db  45h ; E
.eh_frame:0000000000017983                 db  0Eh
.eh_frame:0000000000017984                 db  18h
.eh_frame:0000000000017985                 db  8Dh
.eh_frame:0000000000017986                 db    3
.eh_frame:0000000000017987                 db  45h ; E
.eh_frame:0000000000017988                 db  0Eh
.eh_frame:0000000000017989                 db  20h
.eh_frame:000000000001798A                 db  8Ch
.eh_frame:000000000001798B                 db    4
.eh_frame:000000000001798C                 db  48h ; H
.eh_frame:000000000001798D                 db  0Eh
.eh_frame:000000000001798E                 db  28h ; (
.eh_frame:000000000001798F                 db  86h
.eh_frame:0000000000017990                 db    5
.eh_frame:0000000000017991                 db  44h ; D
.eh_frame:0000000000017992                 db  0Eh
.eh_frame:0000000000017993                 db  30h ; 0
.eh_frame:0000000000017994                 db  83h
.eh_frame:0000000000017995                 db    6
.eh_frame:0000000000017996                 db    2
.eh_frame:0000000000017997                 db  83h
.eh_frame:0000000000017998                 db  0Ah
.eh_frame:0000000000017999                 db  0Eh
.eh_frame:000000000001799A                 db  28h ; (
.eh_frame:000000000001799B                 db  41h ; A
.eh_frame:000000000001799C                 db  0Eh
.eh_frame:000000000001799D                 db  20h
.eh_frame:000000000001799E                 db  42h ; B
.eh_frame:000000000001799F                 db  0Eh
.eh_frame:00000000000179A0                 db  18h
.eh_frame:00000000000179A1                 db  42h ; B
.eh_frame:00000000000179A2                 db  0Eh
.eh_frame:00000000000179A3                 db  10h
.eh_frame:00000000000179A4                 db  42h ; B
.eh_frame:00000000000179A5                 db  0Eh
.eh_frame:00000000000179A6                 db    8
.eh_frame:00000000000179A7                 db  46h ; F
.eh_frame:00000000000179A8                 db  0Bh
.eh_frame:00000000000179A9                 db    0
.eh_frame:00000000000179AA                 db    0
.eh_frame:00000000000179AB                 db    0
.eh_frame:00000000000179AC                 db  5Ch ; \
.eh_frame:00000000000179AD                 db    0
.eh_frame:00000000000179AE                 db    0
.eh_frame:00000000000179AF                 db    0
.eh_frame:00000000000179B0                 db  60h ; `
.eh_frame:00000000000179B1                 db  1Ch
.eh_frame:00000000000179B2                 db    0
.eh_frame:00000000000179B3                 db    0
.eh_frame:00000000000179B4                 db  2Ch ; ,
.eh_frame:00000000000179B5                 db  8Eh
.eh_frame:00000000000179B6                 db 0FFh
.eh_frame:00000000000179B7                 db 0FFh
.eh_frame:00000000000179B8                 db 0D3h
.eh_frame:00000000000179B9                 db  14h
.eh_frame:00000000000179BA                 db    0
.eh_frame:00000000000179BB                 db    0
.eh_frame:00000000000179BC                 db    0
.eh_frame:00000000000179BD                 db  42h ; B
.eh_frame:00000000000179BE                 db  0Eh
.eh_frame:00000000000179BF                 db  10h
.eh_frame:00000000000179C0                 db  8Fh
.eh_frame:00000000000179C1                 db    2
.eh_frame:00000000000179C2                 db  42h ; B
.eh_frame:00000000000179C3                 db  0Eh
.eh_frame:00000000000179C4                 db  18h
.eh_frame:00000000000179C5                 db  8Eh
.eh_frame:00000000000179C6                 db    3
.eh_frame:00000000000179C7                 db  42h ; B
.eh_frame:00000000000179C8                 db  0Eh
.eh_frame:00000000000179C9                 db  20h
.eh_frame:00000000000179CA                 db  8Dh
.eh_frame:00000000000179CB                 db    4
.eh_frame:00000000000179CC                 db  42h ; B
.eh_frame:00000000000179CD                 db  0Eh
.eh_frame:00000000000179CE                 db  28h ; (
.eh_frame:00000000000179CF                 db  8Ch
.eh_frame:00000000000179D0                 db    5
.eh_frame:00000000000179D1                 db  41h ; A
.eh_frame:00000000000179D2                 db  0Eh
.eh_frame:00000000000179D3                 db  30h ; 0
.eh_frame:00000000000179D4                 db  86h
.eh_frame:00000000000179D5                 db    6
.eh_frame:00000000000179D6                 db  41h ; A
.eh_frame:00000000000179D7                 db  0Eh
.eh_frame:00000000000179D8                 db  38h ; 8
.eh_frame:00000000000179D9                 db  83h
.eh_frame:00000000000179DA                 db    7
.eh_frame:00000000000179DB                 db  47h ; G
.eh_frame:00000000000179DC                 db  0Eh
.eh_frame:00000000000179DD                 db 0E0h
.eh_frame:00000000000179DE                 db    2
.eh_frame:00000000000179DF                 db    3
.eh_frame:00000000000179E0                 db  22h ; "
.eh_frame:00000000000179E1                 db    1
.eh_frame:00000000000179E2                 db  0Ah
.eh_frame:00000000000179E3                 db  0Eh
.eh_frame:00000000000179E4                 db  38h ; 8
.eh_frame:00000000000179E5                 db  41h ; A
.eh_frame:00000000000179E6                 db  0Eh
.eh_frame:00000000000179E7                 db  30h ; 0
.eh_frame:00000000000179E8                 db  41h ; A
.eh_frame:00000000000179E9                 db  0Eh
.eh_frame:00000000000179EA                 db  28h ; (
.eh_frame:00000000000179EB                 db  42h ; B
.eh_frame:00000000000179EC                 db  0Eh
.eh_frame:00000000000179ED                 db  20h
.eh_frame:00000000000179EE                 db  42h ; B
.eh_frame:00000000000179EF                 db  0Eh
.eh_frame:00000000000179F0                 db  18h
.eh_frame:00000000000179F1                 db  42h ; B
.eh_frame:00000000000179F2                 db  0Eh
.eh_frame:00000000000179F3                 db  10h
.eh_frame:00000000000179F4                 db  42h ; B
.eh_frame:00000000000179F5                 db  0Eh
.eh_frame:00000000000179F6                 db    8
.eh_frame:00000000000179F7                 db  41h ; A
.eh_frame:00000000000179F8                 db  0Bh
.eh_frame:00000000000179F9                 db    3
.eh_frame:00000000000179FA                 db 0BFh
.eh_frame:00000000000179FB                 db  0Bh
.eh_frame:00000000000179FC                 db  0Eh
.eh_frame:00000000000179FD                 db 0E8h
.eh_frame:00000000000179FE                 db    2
.eh_frame:00000000000179FF                 db  4Ch ; L
.eh_frame:0000000000017A00                 db  0Eh
.eh_frame:0000000000017A01                 db 0F0h
.eh_frame:0000000000017A02                 db    2
.eh_frame:0000000000017A03                 db  64h ; d
.eh_frame:0000000000017A04                 db  0Eh
.eh_frame:0000000000017A05                 db 0E8h
.eh_frame:0000000000017A06                 db    2
.eh_frame:0000000000017A07                 db  42h ; B
.eh_frame:0000000000017A08                 db  0Eh
.eh_frame:0000000000017A09                 db 0E0h
.eh_frame:0000000000017A0A                 db    2
.eh_frame:0000000000017A0B                 db    0
.eh_frame:0000000000017A0C                 db  48h ; H
.eh_frame:0000000000017A0D                 db    0
.eh_frame:0000000000017A0E                 db    0
.eh_frame:0000000000017A0F                 db    0
.eh_frame:0000000000017A10                 db 0C0h
.eh_frame:0000000000017A11                 db  1Ch
.eh_frame:0000000000017A12                 db    0
.eh_frame:0000000000017A13                 db    0
.eh_frame:0000000000017A14                 db 0ACh
.eh_frame:0000000000017A15                 db 0A2h
.eh_frame:0000000000017A16                 db 0FFh
.eh_frame:0000000000017A17                 db 0FFh
.eh_frame:0000000000017A18                 db  82h
.eh_frame:0000000000017A19                 db    1
.eh_frame:0000000000017A1A                 db    0
.eh_frame:0000000000017A1B                 db    0
.eh_frame:0000000000017A1C                 db    0
.eh_frame:0000000000017A1D                 db  42h ; B
.eh_frame:0000000000017A1E                 db  0Eh
.eh_frame:0000000000017A1F                 db  10h
.eh_frame:0000000000017A20                 db  8Fh
.eh_frame:0000000000017A21                 db    2
.eh_frame:0000000000017A22                 db  42h ; B
.eh_frame:0000000000017A23                 db  0Eh
.eh_frame:0000000000017A24                 db  18h
.eh_frame:0000000000017A25                 db  8Eh
.eh_frame:0000000000017A26                 db    3
.eh_frame:0000000000017A27                 db  45h ; E
.eh_frame:0000000000017A28                 db  0Eh
.eh_frame:0000000000017A29                 db  20h
.eh_frame:0000000000017A2A                 db  8Dh
.eh_frame:0000000000017A2B                 db    4
.eh_frame:0000000000017A2C                 db  42h ; B
.eh_frame:0000000000017A2D                 db  0Eh
.eh_frame:0000000000017A2E                 db  28h ; (
.eh_frame:0000000000017A2F                 db  8Ch
.eh_frame:0000000000017A30                 db    5
.eh_frame:0000000000017A31                 db  44h ; D
.eh_frame:0000000000017A32                 db  0Eh
.eh_frame:0000000000017A33                 db  30h ; 0
.eh_frame:0000000000017A34                 db  86h
.eh_frame:0000000000017A35                 db    6
.eh_frame:0000000000017A36                 db  41h ; A
.eh_frame:0000000000017A37                 db  0Eh
.eh_frame:0000000000017A38                 db  38h ; 8
.eh_frame:0000000000017A39                 db  83h
.eh_frame:0000000000017A3A                 db    7
.eh_frame:0000000000017A3B                 db  4Dh ; M
.eh_frame:0000000000017A3C                 db  0Eh
.eh_frame:0000000000017A3D                 db  80h
.eh_frame:0000000000017A3E                 db    1
.eh_frame:0000000000017A3F                 db    2
.eh_frame:0000000000017A40                 db 0FAh
.eh_frame:0000000000017A41                 db  0Ah
.eh_frame:0000000000017A42                 db  0Eh
.eh_frame:0000000000017A43                 db  38h ; 8
.eh_frame:0000000000017A44                 db  41h ; A
.eh_frame:0000000000017A45                 db  0Eh
.eh_frame:0000000000017A46                 db  30h ; 0
.eh_frame:0000000000017A47                 db  41h ; A
.eh_frame:0000000000017A48                 db  0Eh
.eh_frame:0000000000017A49                 db  28h ; (
.eh_frame:0000000000017A4A                 db  42h ; B
.eh_frame:0000000000017A4B                 db  0Eh
.eh_frame:0000000000017A4C                 db  20h
.eh_frame:0000000000017A4D                 db  42h ; B
.eh_frame:0000000000017A4E                 db  0Eh
.eh_frame:0000000000017A4F                 db  18h
.eh_frame:0000000000017A50                 db  42h ; B
.eh_frame:0000000000017A51                 db  0Eh
.eh_frame:0000000000017A52                 db  10h
.eh_frame:0000000000017A53                 db  42h ; B
.eh_frame:0000000000017A54                 db  0Eh
.eh_frame:0000000000017A55                 db    8
.eh_frame:0000000000017A56                 db  47h ; G
.eh_frame:0000000000017A57                 db  0Bh
.eh_frame:0000000000017A58                 db  4Ch ; L
.eh_frame:0000000000017A59                 db    0
.eh_frame:0000000000017A5A                 db    0
.eh_frame:0000000000017A5B                 db    0
.eh_frame:0000000000017A5C                 db  0Ch
.eh_frame:0000000000017A5D                 db  1Dh
.eh_frame:0000000000017A5E                 db    0
.eh_frame:0000000000017A5F                 db    0
.eh_frame:0000000000017A60                 db 0F0h
.eh_frame:0000000000017A61                 db 0A3h
.eh_frame:0000000000017A62                 db 0FFh
.eh_frame:0000000000017A63                 db 0FFh
.eh_frame:0000000000017A64                 db  7Fh ; 
.eh_frame:0000000000017A65                 db    1
.eh_frame:0000000000017A66                 db    0
.eh_frame:0000000000017A67                 db    0
.eh_frame:0000000000017A68                 db    0
.eh_frame:0000000000017A69                 db  42h ; B
.eh_frame:0000000000017A6A                 db  0Eh
.eh_frame:0000000000017A6B                 db  10h
.eh_frame:0000000000017A6C                 db  8Fh
.eh_frame:0000000000017A6D                 db    2
.eh_frame:0000000000017A6E                 db  42h ; B
.eh_frame:0000000000017A6F                 db  0Eh
.eh_frame:0000000000017A70                 db  18h
.eh_frame:0000000000017A71                 db  8Eh
.eh_frame:0000000000017A72                 db    3
.eh_frame:0000000000017A73                 db  45h ; E
.eh_frame:0000000000017A74                 db  0Eh
.eh_frame:0000000000017A75                 db  20h
.eh_frame:0000000000017A76                 db  8Dh
.eh_frame:0000000000017A77                 db    4
.eh_frame:0000000000017A78                 db  42h ; B
.eh_frame:0000000000017A79                 db  0Eh
.eh_frame:0000000000017A7A                 db  28h ; (
.eh_frame:0000000000017A7B                 db  8Ch
.eh_frame:0000000000017A7C                 db    5
.eh_frame:0000000000017A7D                 db  44h ; D
.eh_frame:0000000000017A7E                 db  0Eh
.eh_frame:0000000000017A7F                 db  30h ; 0
.eh_frame:0000000000017A80                 db  86h
.eh_frame:0000000000017A81                 db    6
.eh_frame:0000000000017A82                 db  41h ; A
.eh_frame:0000000000017A83                 db  0Eh
.eh_frame:0000000000017A84                 db  38h ; 8
.eh_frame:0000000000017A85                 db  83h
.eh_frame:0000000000017A86                 db    7
.eh_frame:0000000000017A87                 db  4Ah ; J
.eh_frame:0000000000017A88                 db  0Eh
.eh_frame:0000000000017A89                 db  90h
.eh_frame:0000000000017A8A                 db    1
.eh_frame:0000000000017A8B                 db    3
.eh_frame:0000000000017A8C                 db  45h ; E
.eh_frame:0000000000017A8D                 db    1
.eh_frame:0000000000017A8E                 db  0Ah
.eh_frame:0000000000017A8F                 db  0Eh
.eh_frame:0000000000017A90                 db  38h ; 8
.eh_frame:0000000000017A91                 db  41h ; A
.eh_frame:0000000000017A92                 db  0Eh
.eh_frame:0000000000017A93                 db  30h ; 0
.eh_frame:0000000000017A94                 db  41h ; A
.eh_frame:0000000000017A95                 db  0Eh
.eh_frame:0000000000017A96                 db  28h ; (
.eh_frame:0000000000017A97                 db  42h ; B
.eh_frame:0000000000017A98                 db  0Eh
.eh_frame:0000000000017A99                 db  20h
.eh_frame:0000000000017A9A                 db  42h ; B
.eh_frame:0000000000017A9B                 db  0Eh
.eh_frame:0000000000017A9C                 db  18h
.eh_frame:0000000000017A9D                 db  42h ; B
.eh_frame:0000000000017A9E                 db  0Eh
.eh_frame:0000000000017A9F                 db  10h
.eh_frame:0000000000017AA0                 db  42h ; B
.eh_frame:0000000000017AA1                 db  0Eh
.eh_frame:0000000000017AA2                 db    8
.eh_frame:0000000000017AA3                 db  47h ; G
.eh_frame:0000000000017AA4                 db  0Bh
.eh_frame:0000000000017AA5                 db    0
.eh_frame:0000000000017AA6                 db    0
.eh_frame:0000000000017AA7                 db    0
.eh_frame:0000000000017AA8                 db  4Ch ; L
.eh_frame:0000000000017AA9                 db    0
.eh_frame:0000000000017AAA                 db    0
.eh_frame:0000000000017AAB                 db    0
.eh_frame:0000000000017AAC                 db  5Ch ; \
.eh_frame:0000000000017AAD                 db  1Dh
.eh_frame:0000000000017AAE                 db    0
.eh_frame:0000000000017AAF                 db    0
.eh_frame:0000000000017AB0                 db  20h
.eh_frame:0000000000017AB1                 db 0A5h
.eh_frame:0000000000017AB2                 db 0FFh
.eh_frame:0000000000017AB3                 db 0FFh
.eh_frame:0000000000017AB4                 db 0F5h
.eh_frame:0000000000017AB5                 db  10h
.eh_frame:0000000000017AB6                 db    0
.eh_frame:0000000000017AB7                 db    0
.eh_frame:0000000000017AB8                 db    0
.eh_frame:0000000000017AB9                 db  42h ; B
.eh_frame:0000000000017ABA                 db  0Eh
.eh_frame:0000000000017ABB                 db  10h
.eh_frame:0000000000017ABC                 db  8Fh
.eh_frame:0000000000017ABD                 db    2
.eh_frame:0000000000017ABE                 db  42h ; B
.eh_frame:0000000000017ABF                 db  0Eh
.eh_frame:0000000000017AC0                 db  18h
.eh_frame:0000000000017AC1                 db  8Eh
.eh_frame:0000000000017AC2                 db    3
.eh_frame:0000000000017AC3                 db  42h ; B
.eh_frame:0000000000017AC4                 db  0Eh
.eh_frame:0000000000017AC5                 db  20h
.eh_frame:0000000000017AC6                 db  8Dh
.eh_frame:0000000000017AC7                 db    4
.eh_frame:0000000000017AC8                 db  42h ; B
.eh_frame:0000000000017AC9                 db  0Eh
.eh_frame:0000000000017ACA                 db  28h ; (
.eh_frame:0000000000017ACB                 db  8Ch
.eh_frame:0000000000017ACC                 db    5
.eh_frame:0000000000017ACD                 db  41h ; A
.eh_frame:0000000000017ACE                 db  0Eh
.eh_frame:0000000000017ACF                 db  30h ; 0
.eh_frame:0000000000017AD0                 db  86h
.eh_frame:0000000000017AD1                 db    6
.eh_frame:0000000000017AD2                 db  41h ; A
.eh_frame:0000000000017AD3                 db  0Eh
.eh_frame:0000000000017AD4                 db  38h ; 8
.eh_frame:0000000000017AD5                 db  83h
.eh_frame:0000000000017AD6                 db    7
.eh_frame:0000000000017AD7                 db  47h ; G
.eh_frame:0000000000017AD8                 db  0Eh
.eh_frame:0000000000017AD9                 db 0E0h
.eh_frame:0000000000017ADA                 db    2
.eh_frame:0000000000017ADB                 db    3
.eh_frame:0000000000017ADC                 db 0A9h
.eh_frame:0000000000017ADD                 db    3
.eh_frame:0000000000017ADE                 db  0Ah
.eh_frame:0000000000017ADF                 db  0Eh
.eh_frame:0000000000017AE0                 db  38h ; 8
.eh_frame:0000000000017AE1                 db  41h ; A
.eh_frame:0000000000017AE2                 db  0Eh
.eh_frame:0000000000017AE3                 db  30h ; 0
.eh_frame:0000000000017AE4                 db  41h ; A
.eh_frame:0000000000017AE5                 db  0Eh
.eh_frame:0000000000017AE6                 db  28h ; (
.eh_frame:0000000000017AE7                 db  42h ; B
.eh_frame:0000000000017AE8                 db  0Eh
.eh_frame:0000000000017AE9                 db  20h
.eh_frame:0000000000017AEA                 db  42h ; B
.eh_frame:0000000000017AEB                 db  0Eh
.eh_frame:0000000000017AEC                 db  18h
.eh_frame:0000000000017AED                 db  42h ; B
.eh_frame:0000000000017AEE                 db  0Eh
.eh_frame:0000000000017AEF                 db  10h
.eh_frame:0000000000017AF0                 db  42h ; B
.eh_frame:0000000000017AF1                 db  0Eh
.eh_frame:0000000000017AF2                 db    8
.eh_frame:0000000000017AF3                 db  41h ; A
.eh_frame:0000000000017AF4                 db  0Bh
.eh_frame:0000000000017AF5                 db    0
.eh_frame:0000000000017AF6                 db    0
.eh_frame:0000000000017AF7                 db    0
.eh_frame:0000000000017AF8                 db  1Ch
.eh_frame:0000000000017AF9                 db    0
.eh_frame:0000000000017AFA                 db    0
.eh_frame:0000000000017AFB                 db    0
.eh_frame:0000000000017AFC                 db 0ACh
.eh_frame:0000000000017AFD                 db  1Dh
.eh_frame:0000000000017AFE                 db    0
.eh_frame:0000000000017AFF                 db    0
.eh_frame:0000000000017B00                 db 0D0h
.eh_frame:0000000000017B01                 db 0B5h
.eh_frame:0000000000017B02                 db 0FFh
.eh_frame:0000000000017B03                 db 0FFh
.eh_frame:0000000000017B04                 db  6Fh ; o
.eh_frame:0000000000017B05                 db    0
.eh_frame:0000000000017B06                 db    0
.eh_frame:0000000000017B07                 db    0
.eh_frame:0000000000017B08                 db    0
.eh_frame:0000000000017B09                 db  44h ; D
.eh_frame:0000000000017B0A                 db  0Eh
.eh_frame:0000000000017B0B                 db  10h
.eh_frame:0000000000017B0C                 db    2
.eh_frame:0000000000017B0D                 db  59h ; Y
.eh_frame:0000000000017B0E                 db  0Ah
.eh_frame:0000000000017B0F                 db  0Eh
.eh_frame:0000000000017B10                 db    8
.eh_frame:0000000000017B11                 db  4Bh ; K
.eh_frame:0000000000017B12                 db  0Bh
.eh_frame:0000000000017B13                 db  46h ; F
.eh_frame:0000000000017B14                 db  0Eh
.eh_frame:0000000000017B15                 db    8
.eh_frame:0000000000017B16                 db    0
.eh_frame:0000000000017B17                 db    0
.eh_frame:0000000000017B18                 db  10h
.eh_frame:0000000000017B19                 db    0
.eh_frame:0000000000017B1A                 db    0
.eh_frame:0000000000017B1B                 db    0
.eh_frame:0000000000017B1C                 db 0CCh
.eh_frame:0000000000017B1D                 db  1Dh
.eh_frame:0000000000017B1E                 db    0
.eh_frame:0000000000017B1F                 db    0
.eh_frame:0000000000017B20                 db  20h
.eh_frame:0000000000017B21                 db 0B6h
.eh_frame:0000000000017B22                 db 0FFh
.eh_frame:0000000000017B23                 db 0FFh
.eh_frame:0000000000017B24                 db  0Fh
.eh_frame:0000000000017B25                 db    0
.eh_frame:0000000000017B26                 db    0
.eh_frame:0000000000017B27                 db    0
.eh_frame:0000000000017B28                 db    0
.eh_frame:0000000000017B29                 db    0
.eh_frame:0000000000017B2A                 db    0
.eh_frame:0000000000017B2B                 db    0
.eh_frame:0000000000017B2C                 db  28h ; (
.eh_frame:0000000000017B2D                 db    0
.eh_frame:0000000000017B2E                 db    0
.eh_frame:0000000000017B2F                 db    0
.eh_frame:0000000000017B30                 db 0E0h
.eh_frame:0000000000017B31                 db  1Dh
.eh_frame:0000000000017B32                 db    0
.eh_frame:0000000000017B33                 db    0
.eh_frame:0000000000017B34                 db  1Ch
.eh_frame:0000000000017B35                 db 0B6h
.eh_frame:0000000000017B36                 db 0FFh
.eh_frame:0000000000017B37                 db 0FFh
.eh_frame:0000000000017B38                 db 0C3h
.eh_frame:0000000000017B39                 db    0
.eh_frame:0000000000017B3A                 db    0
.eh_frame:0000000000017B3B                 db    0
.eh_frame:0000000000017B3C                 db    0
.eh_frame:0000000000017B3D                 db  42h ; B
.eh_frame:0000000000017B3E                 db  0Eh
.eh_frame:0000000000017B3F                 db  10h
.eh_frame:0000000000017B40                 db  8Ch
.eh_frame:0000000000017B41                 db    2
.eh_frame:0000000000017B42                 db  41h ; A
.eh_frame:0000000000017B43                 db  0Eh
.eh_frame:0000000000017B44                 db  18h
.eh_frame:0000000000017B45                 db  86h
.eh_frame:0000000000017B46                 db    3
.eh_frame:0000000000017B47                 db  43h ; C
.eh_frame:0000000000017B48                 db  0Eh
.eh_frame:0000000000017B49                 db  20h
.eh_frame:0000000000017B4A                 db  83h
.eh_frame:0000000000017B4B                 db    4
.eh_frame:0000000000017B4C                 db    2
.eh_frame:0000000000017B4D                 db 0B9h
.eh_frame:0000000000017B4E                 db  0Eh
.eh_frame:0000000000017B4F                 db  18h
.eh_frame:0000000000017B50                 db  41h ; A
.eh_frame:0000000000017B51                 db  0Eh
.eh_frame:0000000000017B52                 db  10h
.eh_frame:0000000000017B53                 db  42h ; B
.eh_frame:0000000000017B54                 db  0Eh
.eh_frame:0000000000017B55                 db    8
.eh_frame:0000000000017B56                 db    0
.eh_frame:0000000000017B57                 db    0
.eh_frame:0000000000017B58                 db  5Ch ; \
.eh_frame:0000000000017B59                 db    0
.eh_frame:0000000000017B5A                 db    0
.eh_frame:0000000000017B5B                 db    0
.eh_frame:0000000000017B5C                 db  0Ch
.eh_frame:0000000000017B5D                 db  1Eh
.eh_frame:0000000000017B5E                 db    0
.eh_frame:0000000000017B5F                 db    0
.eh_frame:0000000000017B60                 db 0C0h
.eh_frame:0000000000017B61                 db 0B6h
.eh_frame:0000000000017B62                 db 0FFh
.eh_frame:0000000000017B63                 db 0FFh
.eh_frame:0000000000017B64                 db  7Fh ; 
.eh_frame:0000000000017B65                 db    4
.eh_frame:0000000000017B66                 db    0
.eh_frame:0000000000017B67                 db    0
.eh_frame:0000000000017B68                 db    0
.eh_frame:0000000000017B69                 db  42h ; B
.eh_frame:0000000000017B6A                 db  0Eh
.eh_frame:0000000000017B6B                 db  10h
.eh_frame:0000000000017B6C                 db  8Fh
.eh_frame:0000000000017B6D                 db    2
.eh_frame:0000000000017B6E                 db  42h ; B
.eh_frame:0000000000017B6F                 db  0Eh
.eh_frame:0000000000017B70                 db  18h
.eh_frame:0000000000017B71                 db  8Eh
.eh_frame:0000000000017B72                 db    3
.eh_frame:0000000000017B73                 db  45h ; E
.eh_frame:0000000000017B74                 db  0Eh
.eh_frame:0000000000017B75                 db  20h
.eh_frame:0000000000017B76                 db  8Dh
.eh_frame:0000000000017B77                 db    4
.eh_frame:0000000000017B78                 db  42h ; B
.eh_frame:0000000000017B79                 db  0Eh
.eh_frame:0000000000017B7A                 db  28h ; (
.eh_frame:0000000000017B7B                 db  8Ch
.eh_frame:0000000000017B7C                 db    5
.eh_frame:0000000000017B7D                 db  44h ; D
.eh_frame:0000000000017B7E                 db  0Eh
.eh_frame:0000000000017B7F                 db  30h ; 0
.eh_frame:0000000000017B80                 db  86h
.eh_frame:0000000000017B81                 db    6
.eh_frame:0000000000017B82                 db  41h ; A
.eh_frame:0000000000017B83                 db  0Eh
.eh_frame:0000000000017B84                 db  38h ; 8
.eh_frame:0000000000017B85                 db  83h
.eh_frame:0000000000017B86                 db    7
.eh_frame:0000000000017B87                 db  44h ; D
.eh_frame:0000000000017B88                 db  0Eh
.eh_frame:0000000000017B89                 db  70h ; p
.eh_frame:0000000000017B8A                 db    2
.eh_frame:0000000000017B8B                 db 0D4h
.eh_frame:0000000000017B8C                 db  0Eh
.eh_frame:0000000000017B8D                 db  78h ; x
.eh_frame:0000000000017B8E                 db  4Bh ; K
.eh_frame:0000000000017B8F                 db  0Eh
.eh_frame:0000000000017B90                 db  80h
.eh_frame:0000000000017B91                 db    1
.eh_frame:0000000000017B92                 db  41h ; A
.eh_frame:0000000000017B93                 db  0Eh
.eh_frame:0000000000017B94                 db  88h
.eh_frame:0000000000017B95                 db    1
.eh_frame:0000000000017B96                 db  42h ; B
.eh_frame:0000000000017B97                 db  0Eh
.eh_frame:0000000000017B98                 db  90h
.eh_frame:0000000000017B99                 db    1
.eh_frame:0000000000017B9A                 db  5Dh ; ]
.eh_frame:0000000000017B9B                 db  0Eh
.eh_frame:0000000000017B9C                 db  70h ; p
.eh_frame:0000000000017B9D                 db  63h ; c
.eh_frame:0000000000017B9E                 db  0Ah
.eh_frame:0000000000017B9F                 db  0Eh
.eh_frame:0000000000017BA0                 db  38h ; 8
.eh_frame:0000000000017BA1                 db  44h ; D
.eh_frame:0000000000017BA2                 db  0Eh
.eh_frame:0000000000017BA3                 db  30h ; 0
.eh_frame:0000000000017BA4                 db  41h ; A
.eh_frame:0000000000017BA5                 db  0Eh
.eh_frame:0000000000017BA6                 db  28h ; (
.eh_frame:0000000000017BA7                 db  42h ; B
.eh_frame:0000000000017BA8                 db  0Eh
.eh_frame:0000000000017BA9                 db  20h
.eh_frame:0000000000017BAA                 db  42h ; B
.eh_frame:0000000000017BAB                 db  0Eh
.eh_frame:0000000000017BAC                 db  18h
.eh_frame:0000000000017BAD                 db  42h ; B
.eh_frame:0000000000017BAE                 db  0Eh
.eh_frame:0000000000017BAF                 db  10h
.eh_frame:0000000000017BB0                 db  42h ; B
.eh_frame:0000000000017BB1                 db  0Eh
.eh_frame:0000000000017BB2                 db    8
.eh_frame:0000000000017BB3                 db  45h ; E
.eh_frame:0000000000017BB4                 db  0Bh
.eh_frame:0000000000017BB5                 db    0
.eh_frame:0000000000017BB6                 db    0
.eh_frame:0000000000017BB7                 db    0
.eh_frame:0000000000017BB8                 db  54h ; T
.eh_frame:0000000000017BB9                 db    0
.eh_frame:0000000000017BBA                 db    0
.eh_frame:0000000000017BBB                 db    0
.eh_frame:0000000000017BBC                 db  6Ch ; l
.eh_frame:0000000000017BBD                 db  1Eh
.eh_frame:0000000000017BBE                 db    0
.eh_frame:0000000000017BBF                 db    0
.eh_frame:0000000000017BC0                 db 0E0h
.eh_frame:0000000000017BC1                 db 0BAh
.eh_frame:0000000000017BC2                 db 0FFh
.eh_frame:0000000000017BC3                 db 0FFh
.eh_frame:0000000000017BC4                 db  1Bh
.eh_frame:0000000000017BC5                 db    1
.eh_frame:0000000000017BC6                 db    0
.eh_frame:0000000000017BC7                 db    0
.eh_frame:0000000000017BC8                 db    0
.eh_frame:0000000000017BC9                 db  42h ; B
.eh_frame:0000000000017BCA                 db  0Eh
.eh_frame:0000000000017BCB                 db  10h
.eh_frame:0000000000017BCC                 db  8Fh
.eh_frame:0000000000017BCD                 db    2
.eh_frame:0000000000017BCE                 db  42h ; B
.eh_frame:0000000000017BCF                 db  0Eh
.eh_frame:0000000000017BD0                 db  18h
.eh_frame:0000000000017BD1                 db  8Eh
.eh_frame:0000000000017BD2                 db    3
.eh_frame:0000000000017BD3                 db  42h ; B
.eh_frame:0000000000017BD4                 db  0Eh
.eh_frame:0000000000017BD5                 db  20h
.eh_frame:0000000000017BD6                 db  8Dh
.eh_frame:0000000000017BD7                 db    4
.eh_frame:0000000000017BD8                 db  42h ; B
.eh_frame:0000000000017BD9                 db  0Eh
.eh_frame:0000000000017BDA                 db  28h ; (
.eh_frame:0000000000017BDB                 db  8Ch
.eh_frame:0000000000017BDC                 db    5
.eh_frame:0000000000017BDD                 db  44h ; D
.eh_frame:0000000000017BDE                 db  0Eh
.eh_frame:0000000000017BDF                 db  30h ; 0
.eh_frame:0000000000017BE0                 db  86h
.eh_frame:0000000000017BE1                 db    6
.eh_frame:0000000000017BE2                 db  41h ; A
.eh_frame:0000000000017BE3                 db  0Eh
.eh_frame:0000000000017BE4                 db  38h ; 8
.eh_frame:0000000000017BE5                 db  83h
.eh_frame:0000000000017BE6                 db    7
.eh_frame:0000000000017BE7                 db  4Dh ; M
.eh_frame:0000000000017BE8                 db  0Eh
.eh_frame:0000000000017BE9                 db  60h ; `
.eh_frame:0000000000017BEA                 db    2
.eh_frame:0000000000017BEB                 db  5Ah ; Z
.eh_frame:0000000000017BEC                 db  0Eh
.eh_frame:0000000000017BED                 db  68h ; h
.eh_frame:0000000000017BEE                 db  44h ; D
.eh_frame:0000000000017BEF                 db  0Eh
.eh_frame:0000000000017BF0                 db  70h ; p
.eh_frame:0000000000017BF1                 db  61h ; a
.eh_frame:0000000000017BF2                 db  0Eh
.eh_frame:0000000000017BF3                 db  68h ; h
.eh_frame:0000000000017BF4                 db  41h ; A
.eh_frame:0000000000017BF5                 db  0Eh
.eh_frame:0000000000017BF6                 db  60h ; `
.eh_frame:0000000000017BF7                 db  44h ; D
.eh_frame:0000000000017BF8                 db  0Ah
.eh_frame:0000000000017BF9                 db  0Eh
.eh_frame:0000000000017BFA                 db  38h ; 8
.eh_frame:0000000000017BFB                 db  44h ; D
.eh_frame:0000000000017BFC                 db  0Eh
.eh_frame:0000000000017BFD                 db  30h ; 0
.eh_frame:0000000000017BFE                 db  41h ; A
.eh_frame:0000000000017BFF                 db  0Eh
.eh_frame:0000000000017C00                 db  28h ; (
.eh_frame:0000000000017C01                 db  42h ; B
.eh_frame:0000000000017C02                 db  0Eh
.eh_frame:0000000000017C03                 db  20h
.eh_frame:0000000000017C04                 db  42h ; B
.eh_frame:0000000000017C05                 db  0Eh
.eh_frame:0000000000017C06                 db  18h
.eh_frame:0000000000017C07                 db  42h ; B
.eh_frame:0000000000017C08                 db  0Eh
.eh_frame:0000000000017C09                 db  10h
.eh_frame:0000000000017C0A                 db  42h ; B
.eh_frame:0000000000017C0B                 db  0Eh
.eh_frame:0000000000017C0C                 db    8
.eh_frame:0000000000017C0D                 db  45h ; E
.eh_frame:0000000000017C0E                 db  0Bh
.eh_frame:0000000000017C0F                 db    0
.eh_frame:0000000000017C10                 db  48h ; H
.eh_frame:0000000000017C11                 db    0
.eh_frame:0000000000017C12                 db    0
.eh_frame:0000000000017C13                 db    0
.eh_frame:0000000000017C14                 db 0C4h
.eh_frame:0000000000017C15                 db  1Eh
.eh_frame:0000000000017C16                 db    0
.eh_frame:0000000000017C17                 db    0
.eh_frame:0000000000017C18                 db 0A8h
.eh_frame:0000000000017C19                 db 0BBh
.eh_frame:0000000000017C1A                 db 0FFh
.eh_frame:0000000000017C1B                 db 0FFh
.eh_frame:0000000000017C1C                 db  10h
.eh_frame:0000000000017C1D                 db    1
.eh_frame:0000000000017C1E                 db    0
.eh_frame:0000000000017C1F                 db    0
.eh_frame:0000000000017C20                 db    0
.eh_frame:0000000000017C21                 db  44h ; D
.eh_frame:0000000000017C22                 db  0Eh
.eh_frame:0000000000017C23                 db  10h
.eh_frame:0000000000017C24                 db  8Eh
.eh_frame:0000000000017C25                 db    2
.eh_frame:0000000000017C26                 db  42h ; B
.eh_frame:0000000000017C27                 db  0Eh
.eh_frame:0000000000017C28                 db  18h
.eh_frame:0000000000017C29                 db  8Dh
.eh_frame:0000000000017C2A                 db    3
.eh_frame:0000000000017C2B                 db  45h ; E
.eh_frame:0000000000017C2C                 db  0Eh
.eh_frame:0000000000017C2D                 db  20h
.eh_frame:0000000000017C2E                 db  8Ch
.eh_frame:0000000000017C2F                 db    4
.eh_frame:0000000000017C30                 db  41h ; A
.eh_frame:0000000000017C31                 db  0Eh
.eh_frame:0000000000017C32                 db  28h ; (
.eh_frame:0000000000017C33                 db  86h
.eh_frame:0000000000017C34                 db    5
.eh_frame:0000000000017C35                 db  44h ; D
.eh_frame:0000000000017C36                 db  0Eh
.eh_frame:0000000000017C37                 db  30h ; 0
.eh_frame:0000000000017C38                 db  83h
.eh_frame:0000000000017C39                 db    6
.eh_frame:0000000000017C3A                 db    2
.eh_frame:0000000000017C3B                 db 0ADh
.eh_frame:0000000000017C3C                 db  0Ah
.eh_frame:0000000000017C3D                 db  0Eh
.eh_frame:0000000000017C3E                 db  28h ; (
.eh_frame:0000000000017C3F                 db  43h ; C
.eh_frame:0000000000017C40                 db  0Eh
.eh_frame:0000000000017C41                 db  20h
.eh_frame:0000000000017C42                 db  42h ; B
.eh_frame:0000000000017C43                 db  0Eh
.eh_frame:0000000000017C44                 db  18h
.eh_frame:0000000000017C45                 db  42h ; B
.eh_frame:0000000000017C46                 db  0Eh
.eh_frame:0000000000017C47                 db  10h
.eh_frame:0000000000017C48                 db  42h ; B
.eh_frame:0000000000017C49                 db  0Eh
.eh_frame:0000000000017C4A                 db    8
.eh_frame:0000000000017C4B                 db  4Ah ; J
.eh_frame:0000000000017C4C                 db  0Bh
.eh_frame:0000000000017C4D                 db  76h ; v
.eh_frame:0000000000017C4E                 db  0Eh
.eh_frame:0000000000017C4F                 db  28h ; (
.eh_frame:0000000000017C50                 db  43h ; C
.eh_frame:0000000000017C51                 db  0Eh
.eh_frame:0000000000017C52                 db  20h
.eh_frame:0000000000017C53                 db  42h ; B
.eh_frame:0000000000017C54                 db  0Eh
.eh_frame:0000000000017C55                 db  18h
.eh_frame:0000000000017C56                 db  42h ; B
.eh_frame:0000000000017C57                 db  0Eh
.eh_frame:0000000000017C58                 db  10h
.eh_frame:0000000000017C59                 db  42h ; B
.eh_frame:0000000000017C5A                 db  0Eh
.eh_frame:0000000000017C5B                 db    8
.eh_frame:0000000000017C5C                 db  38h ; 8
.eh_frame:0000000000017C5D                 db    0
.eh_frame:0000000000017C5E                 db    0
.eh_frame:0000000000017C5F                 db    0
.eh_frame:0000000000017C60                 db  10h
.eh_frame:0000000000017C61                 db  1Fh
.eh_frame:0000000000017C62                 db    0
.eh_frame:0000000000017C63                 db    0
.eh_frame:0000000000017C64                 db  6Ch ; l
.eh_frame:0000000000017C65                 db 0BCh
.eh_frame:0000000000017C66                 db 0FFh
.eh_frame:0000000000017C67                 db 0FFh
.eh_frame:0000000000017C68                 db  85h
.eh_frame:0000000000017C69                 db    0
.eh_frame:0000000000017C6A                 db    0
.eh_frame:0000000000017C6B                 db    0
.eh_frame:0000000000017C6C                 db    0
.eh_frame:0000000000017C6D                 db  42h ; B
.eh_frame:0000000000017C6E                 db  0Eh
.eh_frame:0000000000017C6F                 db  10h
.eh_frame:0000000000017C70                 db  8Dh
.eh_frame:0000000000017C71                 db    2
.eh_frame:0000000000017C72                 db  42h ; B
.eh_frame:0000000000017C73                 db  0Eh
.eh_frame:0000000000017C74                 db  18h
.eh_frame:0000000000017C75                 db  8Ch
.eh_frame:0000000000017C76                 db    3
.eh_frame:0000000000017C77                 db  41h ; A
.eh_frame:0000000000017C78                 db  0Eh
.eh_frame:0000000000017C79                 db  20h
.eh_frame:0000000000017C7A                 db  86h
.eh_frame:0000000000017C7B                 db    4
.eh_frame:0000000000017C7C                 db  41h ; A
.eh_frame:0000000000017C7D                 db  0Eh
.eh_frame:0000000000017C7E                 db  28h ; (
.eh_frame:0000000000017C7F                 db  83h
.eh_frame:0000000000017C80                 db    5
.eh_frame:0000000000017C81                 db  44h ; D
.eh_frame:0000000000017C82                 db  0Eh
.eh_frame:0000000000017C83                 db  30h ; 0
.eh_frame:0000000000017C84                 db    2
.eh_frame:0000000000017C85                 db  57h ; W
.eh_frame:0000000000017C86                 db  0Ah
.eh_frame:0000000000017C87                 db  0Eh
.eh_frame:0000000000017C88                 db  28h ; (
.eh_frame:0000000000017C89                 db  44h ; D
.eh_frame:0000000000017C8A                 db  0Eh
.eh_frame:0000000000017C8B                 db  20h
.eh_frame:0000000000017C8C                 db  41h ; A
.eh_frame:0000000000017C8D                 db  0Eh
.eh_frame:0000000000017C8E                 db  18h
.eh_frame:0000000000017C8F                 db  42h ; B
.eh_frame:0000000000017C90                 db  0Eh
.eh_frame:0000000000017C91                 db  10h
.eh_frame:0000000000017C92                 db  42h ; B
.eh_frame:0000000000017C93                 db  0Eh
.eh_frame:0000000000017C94                 db    8
.eh_frame:0000000000017C95                 db  46h ; F
.eh_frame:0000000000017C96                 db  0Bh
.eh_frame:0000000000017C97                 db    0
.eh_frame:0000000000017C98                 db  18h
.eh_frame:0000000000017C99                 db    0
.eh_frame:0000000000017C9A                 db    0
.eh_frame:0000000000017C9B                 db    0
.eh_frame:0000000000017C9C                 db  4Ch ; L
.eh_frame:0000000000017C9D                 db  1Fh
.eh_frame:0000000000017C9E                 db    0
.eh_frame:0000000000017C9F                 db    0
.eh_frame:0000000000017CA0                 db 0C0h
.eh_frame:0000000000017CA1                 db 0BCh
.eh_frame:0000000000017CA2                 db 0FFh
.eh_frame:0000000000017CA3                 db 0FFh
.eh_frame:0000000000017CA4                 db  44h ; D
.eh_frame:0000000000017CA5                 db    0
.eh_frame:0000000000017CA6                 db    0
.eh_frame:0000000000017CA7                 db    0
.eh_frame:0000000000017CA8                 db    0
.eh_frame:0000000000017CA9                 db  41h ; A
.eh_frame:0000000000017CAA                 db  0Eh
.eh_frame:0000000000017CAB                 db  10h
.eh_frame:0000000000017CAC                 db  83h
.eh_frame:0000000000017CAD                 db    2
.eh_frame:0000000000017CAE                 db    2
.eh_frame:0000000000017CAF                 db  42h ; B
.eh_frame:0000000000017CB0                 db  0Eh
.eh_frame:0000000000017CB1                 db    8
.eh_frame:0000000000017CB2                 db    0
.eh_frame:0000000000017CB3                 db    0
.eh_frame:0000000000017CB4                 db  58h ; X
.eh_frame:0000000000017CB5                 db    0
.eh_frame:0000000000017CB6                 db    0
.eh_frame:0000000000017CB7                 db    0
.eh_frame:0000000000017CB8                 db  68h ; h
.eh_frame:0000000000017CB9                 db  1Fh
.eh_frame:0000000000017CBA                 db    0
.eh_frame:0000000000017CBB                 db    0
.eh_frame:0000000000017CBC                 db 0F4h
.eh_frame:0000000000017CBD                 db 0BCh
.eh_frame:0000000000017CBE                 db 0FFh
.eh_frame:0000000000017CBF                 db 0FFh
.eh_frame:0000000000017CC0                 db  9Eh
.eh_frame:0000000000017CC1                 db    0
.eh_frame:0000000000017CC2                 db    0
.eh_frame:0000000000017CC3                 db    0
.eh_frame:0000000000017CC4                 db    0
.eh_frame:0000000000017CC5                 db  4Fh ; O
.eh_frame:0000000000017CC6                 db  0Eh
.eh_frame:0000000000017CC7                 db  10h
.eh_frame:0000000000017CC8                 db  8Dh
.eh_frame:0000000000017CC9                 db    2
.eh_frame:0000000000017CCA                 db  42h ; B
.eh_frame:0000000000017CCB                 db  0Eh
.eh_frame:0000000000017CCC                 db  18h
.eh_frame:0000000000017CCD                 db  8Ch
.eh_frame:0000000000017CCE                 db    3
.eh_frame:0000000000017CCF                 db  44h ; D
.eh_frame:0000000000017CD0                 db  0Eh
.eh_frame:0000000000017CD1                 db  20h
.eh_frame:0000000000017CD2                 db  86h
.eh_frame:0000000000017CD3                 db    4
.eh_frame:0000000000017CD4                 db  41h ; A
.eh_frame:0000000000017CD5                 db  0Eh
.eh_frame:0000000000017CD6                 db  28h ; (
.eh_frame:0000000000017CD7                 db  83h
.eh_frame:0000000000017CD8                 db    5
.eh_frame:0000000000017CD9                 db  4Dh ; M
.eh_frame:0000000000017CDA                 db  0Eh
.eh_frame:0000000000017CDB                 db  40h ; @
.eh_frame:0000000000017CDC                 db  67h ; g
.eh_frame:0000000000017CDD                 db  0Eh
.eh_frame:0000000000017CDE                 db  48h ; H
.eh_frame:0000000000017CDF                 db  41h ; A
.eh_frame:0000000000017CE0                 db  0Eh
.eh_frame:0000000000017CE1                 db  50h ; P
.eh_frame:0000000000017CE2                 db  42h ; B
.eh_frame:0000000000017CE3                 db  0Eh
.eh_frame:0000000000017CE4                 db  58h ; X
.eh_frame:0000000000017CE5                 db  42h ; B
.eh_frame:0000000000017CE6                 db  0Eh
.eh_frame:0000000000017CE7                 db  60h ; `
.eh_frame:0000000000017CE8                 db  52h ; R
.eh_frame:0000000000017CE9                 db  0Eh
.eh_frame:0000000000017CEA                 db  40h ; @
.eh_frame:0000000000017CEB                 db  49h ; I
.eh_frame:0000000000017CEC                 db  0Ah
.eh_frame:0000000000017CED                 db  0Eh
.eh_frame:0000000000017CEE                 db  28h ; (
.eh_frame:0000000000017CEF                 db  41h ; A
.eh_frame:0000000000017CF0                 db  0Eh
.eh_frame:0000000000017CF1                 db  20h
.eh_frame:0000000000017CF2                 db  44h ; D
.eh_frame:0000000000017CF3                 db  0Eh
.eh_frame:0000000000017CF4                 db  18h
.eh_frame:0000000000017CF5                 db  42h ; B
.eh_frame:0000000000017CF6                 db  0Eh
.eh_frame:0000000000017CF7                 db  10h
.eh_frame:0000000000017CF8                 db  42h ; B
.eh_frame:0000000000017CF9                 db  0Eh
.eh_frame:0000000000017CFA                 db    8
.eh_frame:0000000000017CFB                 db  45h ; E
.eh_frame:0000000000017CFC                 db  0Bh
.eh_frame:0000000000017CFD                 db  52h ; R
.eh_frame:0000000000017CFE                 db  0Eh
.eh_frame:0000000000017CFF                 db  48h ; H
.eh_frame:0000000000017D00                 db  41h ; A
.eh_frame:0000000000017D01                 db  0Eh
.eh_frame:0000000000017D02                 db  50h ; P
.eh_frame:0000000000017D03                 db  42h ; B
.eh_frame:0000000000017D04                 db  0Eh
.eh_frame:0000000000017D05                 db  58h ; X
.eh_frame:0000000000017D06                 db  42h ; B
.eh_frame:0000000000017D07                 db  0Eh
.eh_frame:0000000000017D08                 db  60h ; `
.eh_frame:0000000000017D09                 db  49h ; I
.eh_frame:0000000000017D0A                 db  0Eh
.eh_frame:0000000000017D0B                 db    8
.eh_frame:0000000000017D0C                 db 0C3h
.eh_frame:0000000000017D0D                 db 0C6h
.eh_frame:0000000000017D0E                 db 0CCh
.eh_frame:0000000000017D0F                 db 0CDh
.eh_frame:0000000000017D10                 db  1Ch
.eh_frame:0000000000017D11                 db    0
.eh_frame:0000000000017D12                 db    0
.eh_frame:0000000000017D13                 db    0
.eh_frame:0000000000017D14                 db 0C4h
.eh_frame:0000000000017D15                 db  1Fh
.eh_frame:0000000000017D16                 db    0
.eh_frame:0000000000017D17                 db    0
.eh_frame:0000000000017D18                 db  38h ; 8
.eh_frame:0000000000017D19                 db 0BDh
.eh_frame:0000000000017D1A                 db 0FFh
.eh_frame:0000000000017D1B                 db 0FFh
.eh_frame:0000000000017D1C                 db  18h
.eh_frame:0000000000017D1D                 db    0
.eh_frame:0000000000017D1E                 db    0
.eh_frame:0000000000017D1F                 db    0
.eh_frame:0000000000017D20                 db    0
.eh_frame:0000000000017D21                 db  44h ; D
.eh_frame:0000000000017D22                 db  0Eh
.eh_frame:0000000000017D23                 db  10h
.eh_frame:0000000000017D24                 db  45h ; E
.eh_frame:0000000000017D25                 db  0Eh
.eh_frame:0000000000017D26                 db  18h
.eh_frame:0000000000017D27                 db  42h ; B
.eh_frame:0000000000017D28                 db  0Eh
.eh_frame:0000000000017D29                 db  20h
.eh_frame:0000000000017D2A                 db  4Ch ; L
.eh_frame:0000000000017D2B                 db  0Eh
.eh_frame:0000000000017D2C                 db    8
.eh_frame:0000000000017D2D                 db    0
.eh_frame:0000000000017D2E                 db    0
.eh_frame:0000000000017D2F                 db    0
.eh_frame:0000000000017D30                 db  1Ch
.eh_frame:0000000000017D31                 db    0
.eh_frame:0000000000017D32                 db    0
.eh_frame:0000000000017D33                 db    0
.eh_frame:0000000000017D34                 db 0E4h
.eh_frame:0000000000017D35                 db  1Fh
.eh_frame:0000000000017D36                 db    0
.eh_frame:0000000000017D37                 db    0
.eh_frame:0000000000017D38                 db  38h ; 8
.eh_frame:0000000000017D39                 db 0BDh
.eh_frame:0000000000017D3A                 db 0FFh
.eh_frame:0000000000017D3B                 db 0FFh
.eh_frame:0000000000017D3C                 db  15h
.eh_frame:0000000000017D3D                 db    0
.eh_frame:0000000000017D3E                 db    0
.eh_frame:0000000000017D3F                 db    0
.eh_frame:0000000000017D40                 db    0
.eh_frame:0000000000017D41                 db  44h ; D
.eh_frame:0000000000017D42                 db  0Eh
.eh_frame:0000000000017D43                 db  10h
.eh_frame:0000000000017D44                 db  42h ; B
.eh_frame:0000000000017D45                 db  0Eh
.eh_frame:0000000000017D46                 db  18h
.eh_frame:0000000000017D47                 db  42h ; B
.eh_frame:0000000000017D48                 db  0Eh
.eh_frame:0000000000017D49                 db  20h
.eh_frame:0000000000017D4A                 db  4Ch ; L
.eh_frame:0000000000017D4B                 db  0Eh
.eh_frame:0000000000017D4C                 db    8
.eh_frame:0000000000017D4D                 db    0
.eh_frame:0000000000017D4E                 db    0
.eh_frame:0000000000017D4F                 db    0
.eh_frame:0000000000017D50                 db  20h
.eh_frame:0000000000017D51                 db    0
.eh_frame:0000000000017D52                 db    0
.eh_frame:0000000000017D53                 db    0
.eh_frame:0000000000017D54                 db    4
.eh_frame:0000000000017D55                 db  20h
.eh_frame:0000000000017D56                 db    0
.eh_frame:0000000000017D57                 db    0
.eh_frame:0000000000017D58                 db  38h ; 8
.eh_frame:0000000000017D59                 db 0BDh
.eh_frame:0000000000017D5A                 db 0FFh
.eh_frame:0000000000017D5B                 db 0FFh
.eh_frame:0000000000017D5C                 db  1Ah
.eh_frame:0000000000017D5D                 db    0
.eh_frame:0000000000017D5E                 db    0
.eh_frame:0000000000017D5F                 db    0
.eh_frame:0000000000017D60                 db    0
.eh_frame:0000000000017D61                 db  44h ; D
.eh_frame:0000000000017D62                 db  0Eh
.eh_frame:0000000000017D63                 db  10h
.eh_frame:0000000000017D64                 db  42h ; B
.eh_frame:0000000000017D65                 db  0Eh
.eh_frame:0000000000017D66                 db  18h
.eh_frame:0000000000017D67                 db  44h ; D
.eh_frame:0000000000017D68                 db  0Eh
.eh_frame:0000000000017D69                 db  20h
.eh_frame:0000000000017D6A                 db  44h ; D
.eh_frame:0000000000017D6B                 db  0Eh
.eh_frame:0000000000017D6C                 db  28h ; (
.eh_frame:0000000000017D6D                 db  42h ; B
.eh_frame:0000000000017D6E                 db  0Eh
.eh_frame:0000000000017D6F                 db  30h ; 0
.eh_frame:0000000000017D70                 db  49h ; I
.eh_frame:0000000000017D71                 db  0Eh
.eh_frame:0000000000017D72                 db    8
.eh_frame:0000000000017D73                 db    0
.eh_frame:0000000000017D74                 db  20h
.eh_frame:0000000000017D75                 db    0
.eh_frame:0000000000017D76                 db    0
.eh_frame:0000000000017D77                 db    0
.eh_frame:0000000000017D78                 db  28h ; (
.eh_frame:0000000000017D79                 db  20h
.eh_frame:0000000000017D7A                 db    0
.eh_frame:0000000000017D7B                 db    0
.eh_frame:0000000000017D7C                 db  34h ; 4
.eh_frame:0000000000017D7D                 db 0BDh
.eh_frame:0000000000017D7E                 db 0FFh
.eh_frame:0000000000017D7F                 db 0FFh
.eh_frame:0000000000017D80                 db  1Ch
.eh_frame:0000000000017D81                 db    0
.eh_frame:0000000000017D82                 db    0
.eh_frame:0000000000017D83                 db    0
.eh_frame:0000000000017D84                 db    0
.eh_frame:0000000000017D85                 db  44h ; D
.eh_frame:0000000000017D86                 db  0Eh
.eh_frame:0000000000017D87                 db  10h
.eh_frame:0000000000017D88                 db  42h ; B
.eh_frame:0000000000017D89                 db  0Eh
.eh_frame:0000000000017D8A                 db  18h
.eh_frame:0000000000017D8B                 db  44h ; D
.eh_frame:0000000000017D8C                 db  0Eh
.eh_frame:0000000000017D8D                 db  20h
.eh_frame:0000000000017D8E                 db  44h ; D
.eh_frame:0000000000017D8F                 db  0Eh
.eh_frame:0000000000017D90                 db  28h ; (
.eh_frame:0000000000017D91                 db  44h ; D
.eh_frame:0000000000017D92                 db  0Eh
.eh_frame:0000000000017D93                 db  30h ; 0
.eh_frame:0000000000017D94                 db  49h ; I
.eh_frame:0000000000017D95                 db  0Eh
.eh_frame:0000000000017D96                 db    8
.eh_frame:0000000000017D97                 db    0
.eh_frame:0000000000017D98                 db  14h
.eh_frame:0000000000017D99                 db    0
.eh_frame:0000000000017D9A                 db    0
.eh_frame:0000000000017D9B                 db    0
.eh_frame:0000000000017D9C                 db  4Ch ; L
.eh_frame:0000000000017D9D                 db  20h
.eh_frame:0000000000017D9E                 db    0
.eh_frame:0000000000017D9F                 db    0
.eh_frame:0000000000017DA0                 db  30h ; 0
.eh_frame:0000000000017DA1                 db 0BDh
.eh_frame:0000000000017DA2                 db 0FFh
.eh_frame:0000000000017DA3                 db 0FFh
.eh_frame:0000000000017DA4                 db  41h ; A
.eh_frame:0000000000017DA5                 db    0
.eh_frame:0000000000017DA6                 db    0
.eh_frame:0000000000017DA7                 db    0
.eh_frame:0000000000017DA8                 db    0
.eh_frame:0000000000017DA9                 db    0
.eh_frame:0000000000017DAA                 db    0
.eh_frame:0000000000017DAB                 db    0
.eh_frame:0000000000017DAC                 db    0
.eh_frame:0000000000017DAD                 db    0
.eh_frame:0000000000017DAE                 db    0
.eh_frame:0000000000017DAF                 db    0
.eh_frame:0000000000017DB0                 db  4Ch ; L
.eh_frame:0000000000017DB1                 db    0
.eh_frame:0000000000017DB2                 db    0
.eh_frame:0000000000017DB3                 db    0
.eh_frame:0000000000017DB4                 db  64h ; d
.eh_frame:0000000000017DB5                 db  20h
.eh_frame:0000000000017DB6                 db    0
.eh_frame:0000000000017DB7                 db    0
.eh_frame:0000000000017DB8                 db  68h ; h
.eh_frame:0000000000017DB9                 db 0BDh
.eh_frame:0000000000017DBA                 db 0FFh
.eh_frame:0000000000017DBB                 db 0FFh
.eh_frame:0000000000017DBC                 db  7Dh ; }
.eh_frame:0000000000017DBD                 db    0
.eh_frame:0000000000017DBE                 db    0
.eh_frame:0000000000017DBF                 db    0
.eh_frame:0000000000017DC0                 db    0
.eh_frame:0000000000017DC1                 db  42h ; B
.eh_frame:0000000000017DC2                 db  0Eh
.eh_frame:0000000000017DC3                 db  10h
.eh_frame:0000000000017DC4                 db  8Ch
.eh_frame:0000000000017DC5                 db    2
.eh_frame:0000000000017DC6                 db  41h ; A
.eh_frame:0000000000017DC7                 db  0Eh
.eh_frame:0000000000017DC8                 db  18h
.eh_frame:0000000000017DC9                 db  86h
.eh_frame:0000000000017DCA                 db    3
.eh_frame:0000000000017DCB                 db  44h ; D
.eh_frame:0000000000017DCC                 db  0Eh
.eh_frame:0000000000017DCD                 db  20h
.eh_frame:0000000000017DCE                 db  83h
.eh_frame:0000000000017DCF                 db    4
.eh_frame:0000000000017DD0                 db  69h ; i
.eh_frame:0000000000017DD1                 db  0Ah
.eh_frame:0000000000017DD2                 db  0Eh
.eh_frame:0000000000017DD3                 db  18h
.eh_frame:0000000000017DD4                 db  41h ; A
.eh_frame:0000000000017DD5                 db  0Eh
.eh_frame:0000000000017DD6                 db  10h
.eh_frame:0000000000017DD7                 db  42h ; B
.eh_frame:0000000000017DD8                 db  0Eh
.eh_frame:0000000000017DD9                 db    8
.eh_frame:0000000000017DDA                 db  45h ; E
.eh_frame:0000000000017DDB                 db  0Bh
.eh_frame:0000000000017DDC                 db  55h ; U
.eh_frame:0000000000017DDD                 db  0Ah
.eh_frame:0000000000017DDE                 db  0Eh
.eh_frame:0000000000017DDF                 db  18h
.eh_frame:0000000000017DE0                 db  41h ; A
.eh_frame:0000000000017DE1                 db  0Eh
.eh_frame:0000000000017DE2                 db  10h
.eh_frame:0000000000017DE3                 db  42h ; B
.eh_frame:0000000000017DE4                 db  0Eh
.eh_frame:0000000000017DE5                 db    8
.eh_frame:0000000000017DE6                 db  48h ; H
.eh_frame:0000000000017DE7                 db  0Bh
.eh_frame:0000000000017DE8                 db  41h ; A
.eh_frame:0000000000017DE9                 db  0Ah
.eh_frame:0000000000017DEA                 db  0Eh
.eh_frame:0000000000017DEB                 db  18h
.eh_frame:0000000000017DEC                 db  46h ; F
.eh_frame:0000000000017DED                 db  0Eh
.eh_frame:0000000000017DEE                 db  10h
.eh_frame:0000000000017DEF                 db  42h ; B
.eh_frame:0000000000017DF0                 db  0Eh
.eh_frame:0000000000017DF1                 db    8
.eh_frame:0000000000017DF2                 db  47h ; G
.eh_frame:0000000000017DF3                 db  0Bh
.eh_frame:0000000000017DF4                 db  49h ; I
.eh_frame:0000000000017DF5                 db  0Eh
.eh_frame:0000000000017DF6                 db  18h
.eh_frame:0000000000017DF7                 db  41h ; A
.eh_frame:0000000000017DF8                 db  0Eh
.eh_frame:0000000000017DF9                 db  10h
.eh_frame:0000000000017DFA                 db  42h ; B
.eh_frame:0000000000017DFB                 db  0Eh
.eh_frame:0000000000017DFC                 db    8
.eh_frame:0000000000017DFD                 db    0
.eh_frame:0000000000017DFE                 db    0
.eh_frame:0000000000017DFF                 db    0
.eh_frame:0000000000017E00                 db  10h
.eh_frame:0000000000017E01                 db    0
.eh_frame:0000000000017E02                 db    0
.eh_frame:0000000000017E03                 db    0
.eh_frame:0000000000017E04                 db 0B4h
.eh_frame:0000000000017E05                 db  20h
.eh_frame:0000000000017E06                 db    0
.eh_frame:0000000000017E07                 db    0
.eh_frame:0000000000017E08                 db  98h
.eh_frame:0000000000017E09                 db 0BDh
.eh_frame:0000000000017E0A                 db 0FFh
.eh_frame:0000000000017E0B                 db 0FFh
.eh_frame:0000000000017E0C                 db  5Ch ; \
.eh_frame:0000000000017E0D                 db    0
.eh_frame:0000000000017E0E                 db    0
.eh_frame:0000000000017E0F                 db    0
.eh_frame:0000000000017E10                 db    0
.eh_frame:0000000000017E11                 db    0
.eh_frame:0000000000017E12                 db    0
.eh_frame:0000000000017E13                 db    0
.eh_frame:0000000000017E14                 db  28h ; (
.eh_frame:0000000000017E15                 db    0
.eh_frame:0000000000017E16                 db    0
.eh_frame:0000000000017E17                 db    0
.eh_frame:0000000000017E18                 db 0C8h
.eh_frame:0000000000017E19                 db  20h
.eh_frame:0000000000017E1A                 db    0
.eh_frame:0000000000017E1B                 db    0
.eh_frame:0000000000017E1C                 db 0E4h
.eh_frame:0000000000017E1D                 db 0BDh
.eh_frame:0000000000017E1E                 db 0FFh
.eh_frame:0000000000017E1F                 db 0FFh
.eh_frame:0000000000017E20                 db  47h ; G
.eh_frame:0000000000017E21                 db    0
.eh_frame:0000000000017E22                 db    0
.eh_frame:0000000000017E23                 db    0
.eh_frame:0000000000017E24                 db    0
.eh_frame:0000000000017E25                 db  41h ; A
.eh_frame:0000000000017E26                 db  0Eh
.eh_frame:0000000000017E27                 db  10h
.eh_frame:0000000000017E28                 db  83h
.eh_frame:0000000000017E29                 db    2
.eh_frame:0000000000017E2A                 db  5Ah ; Z
.eh_frame:0000000000017E2B                 db  0Ah
.eh_frame:0000000000017E2C                 db  0Eh
.eh_frame:0000000000017E2D                 db    8
.eh_frame:0000000000017E2E                 db  45h ; E
.eh_frame:0000000000017E2F                 db  0Bh
.eh_frame:0000000000017E30                 db  5Dh ; ]
.eh_frame:0000000000017E31                 db  0Ah
.eh_frame:0000000000017E32                 db  0Eh
.eh_frame:0000000000017E33                 db    8
.eh_frame:0000000000017E34                 db  43h ; C
.eh_frame:0000000000017E35                 db  0Bh
.eh_frame:0000000000017E36                 db  46h ; F
.eh_frame:0000000000017E37                 db  0Eh
.eh_frame:0000000000017E38                 db    8
.eh_frame:0000000000017E39                 db    0
.eh_frame:0000000000017E3A                 db    0
.eh_frame:0000000000017E3B                 db    0
.eh_frame:0000000000017E3C                 db    0
.eh_frame:0000000000017E3D                 db    0
.eh_frame:0000000000017E3E                 db    0
.eh_frame:0000000000017E3F                 db    0
.eh_frame:0000000000017E40                 db  34h ; 4
.eh_frame:0000000000017E41                 db    0
.eh_frame:0000000000017E42                 db    0
.eh_frame:0000000000017E43                 db    0
.eh_frame:0000000000017E44                 db 0F4h
.eh_frame:0000000000017E45                 db  20h
.eh_frame:0000000000017E46                 db    0
.eh_frame:0000000000017E47                 db    0
.eh_frame:0000000000017E48                 db    8
.eh_frame:0000000000017E49                 db 0BEh
.eh_frame:0000000000017E4A                 db 0FFh
.eh_frame:0000000000017E4B                 db 0FFh
.eh_frame:0000000000017E4C                 db  3Fh ; ?
.eh_frame:0000000000017E4D                 db    0
.eh_frame:0000000000017E4E                 db    0
.eh_frame:0000000000017E4F                 db    0
.eh_frame:0000000000017E50                 db    0
.eh_frame:0000000000017E51                 db  42h ; B
.eh_frame:0000000000017E52                 db  0Eh
.eh_frame:0000000000017E53                 db  10h
.eh_frame:0000000000017E54                 db  8Dh
.eh_frame:0000000000017E55                 db    2
.eh_frame:0000000000017E56                 db  42h ; B
.eh_frame:0000000000017E57                 db  0Eh
.eh_frame:0000000000017E58                 db  18h
.eh_frame:0000000000017E59                 db  8Ch
.eh_frame:0000000000017E5A                 db    3
.eh_frame:0000000000017E5B                 db  41h ; A
.eh_frame:0000000000017E5C                 db  0Eh
.eh_frame:0000000000017E5D                 db  20h
.eh_frame:0000000000017E5E                 db  86h
.eh_frame:0000000000017E5F                 db    4
.eh_frame:0000000000017E60                 db  41h ; A
.eh_frame:0000000000017E61                 db  0Eh
.eh_frame:0000000000017E62                 db  28h ; (
.eh_frame:0000000000017E63                 db  83h
.eh_frame:0000000000017E64                 db    5
.eh_frame:0000000000017E65                 db  46h ; F
.eh_frame:0000000000017E66                 db  0Eh
.eh_frame:0000000000017E67                 db  30h ; 0
.eh_frame:0000000000017E68                 db  6Ah ; j
.eh_frame:0000000000017E69                 db  0Eh
.eh_frame:0000000000017E6A                 db  28h ; (
.eh_frame:0000000000017E6B                 db  43h ; C
.eh_frame:0000000000017E6C                 db  0Eh
.eh_frame:0000000000017E6D                 db  20h
.eh_frame:0000000000017E6E                 db  41h ; A
.eh_frame:0000000000017E6F                 db  0Eh
.eh_frame:0000000000017E70                 db  18h
.eh_frame:0000000000017E71                 db  42h ; B
.eh_frame:0000000000017E72                 db  0Eh
.eh_frame:0000000000017E73                 db  10h
.eh_frame:0000000000017E74                 db  42h ; B
.eh_frame:0000000000017E75                 db  0Eh
.eh_frame:0000000000017E76                 db    8
.eh_frame:0000000000017E77                 db    0
.eh_frame:0000000000017E78                 db  14h
.eh_frame:0000000000017E79                 db    0
.eh_frame:0000000000017E7A                 db    0
.eh_frame:0000000000017E7B                 db    0
.eh_frame:0000000000017E7C                 db  2Ch ; ,
.eh_frame:0000000000017E7D                 db  21h ; !
.eh_frame:0000000000017E7E                 db    0
.eh_frame:0000000000017E7F                 db    0
.eh_frame:0000000000017E80                 db  10h
.eh_frame:0000000000017E81                 db 0BEh
.eh_frame:0000000000017E82                 db 0FFh
.eh_frame:0000000000017E83                 db 0FFh
.eh_frame:0000000000017E84                 db  1Ah
.eh_frame:0000000000017E85                 db    0
.eh_frame:0000000000017E86                 db    0
.eh_frame:0000000000017E87                 db    0
.eh_frame:0000000000017E88                 db    0
.eh_frame:0000000000017E89                 db    0
.eh_frame:0000000000017E8A                 db    0
.eh_frame:0000000000017E8B                 db    0
.eh_frame:0000000000017E8C                 db    0
.eh_frame:0000000000017E8D                 db    0
.eh_frame:0000000000017E8E                 db    0
.eh_frame:0000000000017E8F                 db    0
.eh_frame:0000000000017E90                 db  1Ch
.eh_frame:0000000000017E91                 db    0
.eh_frame:0000000000017E92                 db    0
.eh_frame:0000000000017E93                 db    0
.eh_frame:0000000000017E94                 db  44h ; D
.eh_frame:0000000000017E95                 db  21h ; !
.eh_frame:0000000000017E96                 db    0
.eh_frame:0000000000017E97                 db    0
.eh_frame:0000000000017E98                 db  18h
.eh_frame:0000000000017E99                 db 0BEh
.eh_frame:0000000000017E9A                 db 0FFh
.eh_frame:0000000000017E9B                 db 0FFh
.eh_frame:0000000000017E9C                 db  60h ; `
.eh_frame:0000000000017E9D                 db    0
.eh_frame:0000000000017E9E                 db    0
.eh_frame:0000000000017E9F                 db    0
.eh_frame:0000000000017EA0                 db    0
.eh_frame:0000000000017EA1                 db  44h ; D
.eh_frame:0000000000017EA2                 db  0Eh
.eh_frame:0000000000017EA3                 db  10h
.eh_frame:0000000000017EA4                 db  75h ; u
.eh_frame:0000000000017EA5                 db  0Ah
.eh_frame:0000000000017EA6                 db  0Eh
.eh_frame:0000000000017EA7                 db    8
.eh_frame:0000000000017EA8                 db  47h ; G
.eh_frame:0000000000017EA9                 db  0Bh
.eh_frame:0000000000017EAA                 db  5Fh ; _
.eh_frame:0000000000017EAB                 db  0Eh
.eh_frame:0000000000017EAC                 db    8
.eh_frame:0000000000017EAD                 db    0
.eh_frame:0000000000017EAE                 db    0
.eh_frame:0000000000017EAF                 db    0
.eh_frame:0000000000017EB0                 db  1Ch
.eh_frame:0000000000017EB1                 db    0
.eh_frame:0000000000017EB2                 db    0
.eh_frame:0000000000017EB3                 db    0
.eh_frame:0000000000017EB4                 db  64h ; d
.eh_frame:0000000000017EB5                 db  21h ; !
.eh_frame:0000000000017EB6                 db    0
.eh_frame:0000000000017EB7                 db    0
.eh_frame:0000000000017EB8                 db  58h ; X
.eh_frame:0000000000017EB9                 db 0BEh
.eh_frame:0000000000017EBA                 db 0FFh
.eh_frame:0000000000017EBB                 db 0FFh
.eh_frame:0000000000017EBC                 db  3Ch ; <
.eh_frame:0000000000017EBD                 db    0
.eh_frame:0000000000017EBE                 db    0
.eh_frame:0000000000017EBF                 db    0
.eh_frame:0000000000017EC0                 db    0
.eh_frame:0000000000017EC1                 db  44h ; D
.eh_frame:0000000000017EC2                 db  0Eh
.eh_frame:0000000000017EC3                 db  10h
.eh_frame:0000000000017EC4                 db  61h ; a
.eh_frame:0000000000017EC5                 db  0Ah
.eh_frame:0000000000017EC6                 db  0Eh
.eh_frame:0000000000017EC7                 db    8
.eh_frame:0000000000017EC8                 db  4Bh ; K
.eh_frame:0000000000017EC9                 db  0Bh
.eh_frame:0000000000017ECA                 db  4Bh ; K
.eh_frame:0000000000017ECB                 db  0Eh
.eh_frame:0000000000017ECC                 db    8
.eh_frame:0000000000017ECD                 db    0
.eh_frame:0000000000017ECE                 db    0
.eh_frame:0000000000017ECF                 db    0
.eh_frame:0000000000017ED0                 db  14h
.eh_frame:0000000000017ED1                 db    0
.eh_frame:0000000000017ED2                 db    0
.eh_frame:0000000000017ED3                 db    0
.eh_frame:0000000000017ED4                 db  84h
.eh_frame:0000000000017ED5                 db  21h ; !
.eh_frame:0000000000017ED6                 db    0
.eh_frame:0000000000017ED7                 db    0
.eh_frame:0000000000017ED8                 db  78h ; x
.eh_frame:0000000000017ED9                 db 0BEh
.eh_frame:0000000000017EDA                 db 0FFh
.eh_frame:0000000000017EDB                 db 0FFh
.eh_frame:0000000000017EDC                 db  0Eh
.eh_frame:0000000000017EDD                 db    0
.eh_frame:0000000000017EDE                 db    0
.eh_frame:0000000000017EDF                 db    0
.eh_frame:0000000000017EE0                 db    0
.eh_frame:0000000000017EE1                 db    0
.eh_frame:0000000000017EE2                 db    0
.eh_frame:0000000000017EE3                 db    0
.eh_frame:0000000000017EE4                 db    0
.eh_frame:0000000000017EE5                 db    0
.eh_frame:0000000000017EE6                 db    0
.eh_frame:0000000000017EE7                 db    0
.eh_frame:0000000000017EE8                 db  34h ; 4
.eh_frame:0000000000017EE9                 db    0
.eh_frame:0000000000017EEA                 db    0
.eh_frame:0000000000017EEB                 db    0
.eh_frame:0000000000017EEC                 db  9Ch
.eh_frame:0000000000017EED                 db  21h ; !
.eh_frame:0000000000017EEE                 db    0
.eh_frame:0000000000017EEF                 db    0
.eh_frame:0000000000017EF0                 db  70h ; p
.eh_frame:0000000000017EF1                 db 0BEh
.eh_frame:0000000000017EF2                 db 0FFh
.eh_frame:0000000000017EF3                 db 0FFh
.eh_frame:0000000000017EF4                 db  7Bh ; {
.eh_frame:0000000000017EF5                 db    0
.eh_frame:0000000000017EF6                 db    0
.eh_frame:0000000000017EF7                 db    0
.eh_frame:0000000000017EF8                 db    0
.eh_frame:0000000000017EF9                 db  42h ; B
.eh_frame:0000000000017EFA                 db  0Eh
.eh_frame:0000000000017EFB                 db  10h
.eh_frame:0000000000017EFC                 db  8Ch
.eh_frame:0000000000017EFD                 db    2
.eh_frame:0000000000017EFE                 db  41h ; A
.eh_frame:0000000000017EFF                 db  0Eh
.eh_frame:0000000000017F00                 db  18h
.eh_frame:0000000000017F01                 db  86h
.eh_frame:0000000000017F02                 db    3
.eh_frame:0000000000017F03                 db  41h ; A
.eh_frame:0000000000017F04                 db  0Eh
.eh_frame:0000000000017F05                 db  20h
.eh_frame:0000000000017F06                 db  83h
.eh_frame:0000000000017F07                 db    4
.eh_frame:0000000000017F08                 db  7Dh ; }
.eh_frame:0000000000017F09                 db  0Ah
.eh_frame:0000000000017F0A                 db  0Eh
.eh_frame:0000000000017F0B                 db  18h
.eh_frame:0000000000017F0C                 db  41h ; A
.eh_frame:0000000000017F0D                 db  0Eh
.eh_frame:0000000000017F0E                 db  10h
.eh_frame:0000000000017F0F                 db  42h ; B
.eh_frame:0000000000017F10                 db  0Eh
.eh_frame:0000000000017F11                 db    8
.eh_frame:0000000000017F12                 db  44h ; D
.eh_frame:0000000000017F13                 db  0Bh
.eh_frame:0000000000017F14                 db  60h ; `
.eh_frame:0000000000017F15                 db  0Ah
.eh_frame:0000000000017F16                 db  0Eh
.eh_frame:0000000000017F17                 db  18h
.eh_frame:0000000000017F18                 db  41h ; A
.eh_frame:0000000000017F19                 db  0Eh
.eh_frame:0000000000017F1A                 db  10h
.eh_frame:0000000000017F1B                 db  42h ; B
.eh_frame:0000000000017F1C                 db  0Eh
.eh_frame:0000000000017F1D                 db    8
.eh_frame:0000000000017F1E                 db  45h ; E
.eh_frame:0000000000017F1F                 db  0Bh
.eh_frame:0000000000017F20                 db  34h ; 4
.eh_frame:0000000000017F21                 db    0
.eh_frame:0000000000017F22                 db    0
.eh_frame:0000000000017F23                 db    0
.eh_frame:0000000000017F24                 db 0D4h
.eh_frame:0000000000017F25                 db  21h ; !
.eh_frame:0000000000017F26                 db    0
.eh_frame:0000000000017F27                 db    0
.eh_frame:0000000000017F28                 db 0B8h
.eh_frame:0000000000017F29                 db 0BEh
.eh_frame:0000000000017F2A                 db 0FFh
.eh_frame:0000000000017F2B                 db 0FFh
.eh_frame:0000000000017F2C                 db  7Eh ; ~
.eh_frame:0000000000017F2D                 db    2
.eh_frame:0000000000017F2E                 db    0
.eh_frame:0000000000017F2F                 db    0
.eh_frame:0000000000017F30                 db    0
.eh_frame:0000000000017F31                 db  42h ; B
.eh_frame:0000000000017F32                 db  0Eh
.eh_frame:0000000000017F33                 db  10h
.eh_frame:0000000000017F34                 db  8Ch
.eh_frame:0000000000017F35                 db    2
.eh_frame:0000000000017F36                 db  41h ; A
.eh_frame:0000000000017F37                 db  0Eh
.eh_frame:0000000000017F38                 db  18h
.eh_frame:0000000000017F39                 db  86h
.eh_frame:0000000000017F3A                 db    3
.eh_frame:0000000000017F3B                 db  43h ; C
.eh_frame:0000000000017F3C                 db  0Eh
.eh_frame:0000000000017F3D                 db  20h
.eh_frame:0000000000017F3E                 db  83h
.eh_frame:0000000000017F3F                 db    4
.eh_frame:0000000000017F40                 db  44h ; D
.eh_frame:0000000000017F41                 db  0Eh
.eh_frame:0000000000017F42                 db  70h ; p
.eh_frame:0000000000017F43                 db    2
.eh_frame:0000000000017F44                 db 0F0h
.eh_frame:0000000000017F45                 db  0Ah
.eh_frame:0000000000017F46                 db  0Eh
.eh_frame:0000000000017F47                 db  20h
.eh_frame:0000000000017F48                 db  41h ; A
.eh_frame:0000000000017F49                 db  0Eh
.eh_frame:0000000000017F4A                 db  18h
.eh_frame:0000000000017F4B                 db  41h ; A
.eh_frame:0000000000017F4C                 db  0Eh
.eh_frame:0000000000017F4D                 db  10h
.eh_frame:0000000000017F4E                 db  42h ; B
.eh_frame:0000000000017F4F                 db  0Eh
.eh_frame:0000000000017F50                 db    8
.eh_frame:0000000000017F51                 db  42h ; B
.eh_frame:0000000000017F52                 db  0Bh
.eh_frame:0000000000017F53                 db    0
.eh_frame:0000000000017F54                 db    0
.eh_frame:0000000000017F55                 db    0
.eh_frame:0000000000017F56                 db    0
.eh_frame:0000000000017F57                 db    0
.eh_frame:0000000000017F58                 db  1Ch
.eh_frame:0000000000017F59                 db    0
.eh_frame:0000000000017F5A                 db    0
.eh_frame:0000000000017F5B                 db    0
.eh_frame:0000000000017F5C                 db  0Ch
.eh_frame:0000000000017F5D                 db  22h ; "
.eh_frame:0000000000017F5E                 db    0
.eh_frame:0000000000017F5F                 db    0
.eh_frame:0000000000017F60                 db    0
.eh_frame:0000000000017F61                 db 0C1h
.eh_frame:0000000000017F62                 db 0FFh
.eh_frame:0000000000017F63                 db 0FFh
.eh_frame:0000000000017F64                 db  40h ; @
.eh_frame:0000000000017F65                 db    0
.eh_frame:0000000000017F66                 db    0
.eh_frame:0000000000017F67                 db    0
.eh_frame:0000000000017F68                 db    0
.eh_frame:0000000000017F69                 db  44h ; D
.eh_frame:0000000000017F6A                 db  0Eh
.eh_frame:0000000000017F6B                 db  10h
.eh_frame:0000000000017F6C                 db  83h
.eh_frame:0000000000017F6D                 db    2
.eh_frame:0000000000017F6E                 db  5Ah ; Z
.eh_frame:0000000000017F6F                 db  0Ah
.eh_frame:0000000000017F70                 db  0Eh
.eh_frame:0000000000017F71                 db    8
.eh_frame:0000000000017F72                 db  4Ah ; J
.eh_frame:0000000000017F73                 db  0Bh
.eh_frame:0000000000017F74                 db  53h ; S
.eh_frame:0000000000017F75                 db  0Eh
.eh_frame:0000000000017F76                 db    8
.eh_frame:0000000000017F77                 db    0
.eh_frame:0000000000017F78                 db  44h ; D
.eh_frame:0000000000017F79                 db    0
.eh_frame:0000000000017F7A                 db    0
.eh_frame:0000000000017F7B                 db    0
.eh_frame:0000000000017F7C                 db  2Ch ; ,
.eh_frame:0000000000017F7D                 db  22h ; "
.eh_frame:0000000000017F7E                 db    0
.eh_frame:0000000000017F7F                 db    0
.eh_frame:0000000000017F80                 db  20h
.eh_frame:0000000000017F81                 db 0C1h
.eh_frame:0000000000017F82                 db 0FFh
.eh_frame:0000000000017F83                 db 0FFh
.eh_frame:0000000000017F84                 db  65h ; e
.eh_frame:0000000000017F85                 db    0
.eh_frame:0000000000017F86                 db    0
.eh_frame:0000000000017F87                 db    0
.eh_frame:0000000000017F88                 db    0
.eh_frame:0000000000017F89                 db  42h ; B
.eh_frame:0000000000017F8A                 db  0Eh
.eh_frame:0000000000017F8B                 db  10h
.eh_frame:0000000000017F8C                 db  8Fh
.eh_frame:0000000000017F8D                 db    2
.eh_frame:0000000000017F8E                 db  42h ; B
.eh_frame:0000000000017F8F                 db  0Eh
.eh_frame:0000000000017F90                 db  18h
.eh_frame:0000000000017F91                 db  8Eh
.eh_frame:0000000000017F92                 db    3
.eh_frame:0000000000017F93                 db  45h ; E
.eh_frame:0000000000017F94                 db  0Eh
.eh_frame:0000000000017F95                 db  20h
.eh_frame:0000000000017F96                 db  8Dh
.eh_frame:0000000000017F97                 db    4
.eh_frame:0000000000017F98                 db  42h ; B
.eh_frame:0000000000017F99                 db  0Eh
.eh_frame:0000000000017F9A                 db  28h ; (
.eh_frame:0000000000017F9B                 db  8Ch
.eh_frame:0000000000017F9C                 db    5
.eh_frame:0000000000017F9D                 db  48h ; H
.eh_frame:0000000000017F9E                 db  0Eh
.eh_frame:0000000000017F9F                 db  30h ; 0
.eh_frame:0000000000017FA0                 db  86h
.eh_frame:0000000000017FA1                 db    6
.eh_frame:0000000000017FA2                 db  48h ; H
.eh_frame:0000000000017FA3                 db  0Eh
.eh_frame:0000000000017FA4                 db  38h ; 8
.eh_frame:0000000000017FA5                 db  83h
.eh_frame:0000000000017FA6                 db    7
.eh_frame:0000000000017FA7                 db  4Dh ; M
.eh_frame:0000000000017FA8                 db  0Eh
.eh_frame:0000000000017FA9                 db  40h ; @
.eh_frame:0000000000017FAA                 db  72h ; r
.eh_frame:0000000000017FAB                 db  0Eh
.eh_frame:0000000000017FAC                 db  38h ; 8
.eh_frame:0000000000017FAD                 db  41h ; A
.eh_frame:0000000000017FAE                 db  0Eh
.eh_frame:0000000000017FAF                 db  30h ; 0
.eh_frame:0000000000017FB0                 db  41h ; A
.eh_frame:0000000000017FB1                 db  0Eh
.eh_frame:0000000000017FB2                 db  28h ; (
.eh_frame:0000000000017FB3                 db  42h ; B
.eh_frame:0000000000017FB4                 db  0Eh
.eh_frame:0000000000017FB5                 db  20h
.eh_frame:0000000000017FB6                 db  42h ; B
.eh_frame:0000000000017FB7                 db  0Eh
.eh_frame:0000000000017FB8                 db  18h
.eh_frame:0000000000017FB9                 db  42h ; B
.eh_frame:0000000000017FBA                 db  0Eh
.eh_frame:0000000000017FBB                 db  10h
.eh_frame:0000000000017FBC                 db  42h ; B
.eh_frame:0000000000017FBD                 db  0Eh
.eh_frame:0000000000017FBE                 db    8
.eh_frame:0000000000017FBF                 db    0
.eh_frame:0000000000017FC0                 db  14h
.eh_frame:0000000000017FC1                 db    0
.eh_frame:0000000000017FC2                 db    0
.eh_frame:0000000000017FC3                 db    0
.eh_frame:0000000000017FC4                 db  74h ; t
.eh_frame:0000000000017FC5                 db  22h ; "
.eh_frame:0000000000017FC6                 db    0
.eh_frame:0000000000017FC7                 db    0
.eh_frame:0000000000017FC8                 db  48h ; H
.eh_frame:0000000000017FC9                 db 0C1h
.eh_frame:0000000000017FCA                 db 0FFh
.eh_frame:0000000000017FCB                 db 0FFh
.eh_frame:0000000000017FCC                 db    2
.eh_frame:0000000000017FCD                 db    0
.eh_frame:0000000000017FCE                 db    0
.eh_frame:0000000000017FCF                 db    0
.eh_frame:0000000000017FD0                 db    0
.eh_frame:0000000000017FD1                 db    0
.eh_frame:0000000000017FD2                 db    0
.eh_frame:0000000000017FD3                 db    0
.eh_frame:0000000000017FD4                 db    0
.eh_frame:0000000000017FD5                 db    0
.eh_frame:0000000000017FD6                 db    0
.eh_frame:0000000000017FD7                 db    0
.eh_frame:0000000000017FD8                 db  10h
.eh_frame:0000000000017FD9                 db    0
.eh_frame:0000000000017FDA                 db    0
.eh_frame:0000000000017FDB                 db    0
.eh_frame:0000000000017FDC                 db  8Ch
.eh_frame:0000000000017FDD                 db  22h ; "
.eh_frame:0000000000017FDE                 db    0
.eh_frame:0000000000017FDF                 db    0
.eh_frame:0000000000017FE0                 db  40h ; @
.eh_frame:0000000000017FE1                 db 0C1h
.eh_frame:0000000000017FE2                 db 0FFh
.eh_frame:0000000000017FE3                 db 0FFh
.eh_frame:0000000000017FE4                 db  0Eh
.eh_frame:0000000000017FE5                 db    0
.eh_frame:0000000000017FE6                 db    0
.eh_frame:0000000000017FE7                 db    0
.eh_frame:0000000000017FE8                 db    0
.eh_frame:0000000000017FE9                 db    0
.eh_frame:0000000000017FEA                 db    0
.eh_frame:0000000000017FEB                 db    0
.eh_frame:0000000000017FEC __FRAME_END__   db    0
.eh_frame:0000000000017FED                 db    0
.eh_frame:0000000000017FEE                 db    0
.eh_frame:0000000000017FEF                 db    0
.eh_frame:0000000000017FEF _eh_frame       ends
.eh_frame:0000000000017FEF
.init_array:0000000000218A70 ; ELF Initialization Function Table
.init_array:0000000000218A70 ; ===========================================================================
.init_array:0000000000218A70
.init_array:0000000000218A70 ; Segment type: Pure data
.init_array:0000000000218A70 ; Segment permissions: Read/Write
.init_array:0000000000218A70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000218A70                 assume cs:_init_array
.init_array:0000000000218A70                 ;org 218A70h
.init_array:0000000000218A70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000218A70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000218A70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000218A70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000218A70
.fini_array:0000000000218A78 ; ELF Termination Function Table
.fini_array:0000000000218A78 ; ===========================================================================
.fini_array:0000000000218A78
.fini_array:0000000000218A78 ; Segment type: Pure data
.fini_array:0000000000218A78 ; Segment permissions: Read/Write
.fini_array:0000000000218A78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000218A78                 assume cs:_fini_array
.fini_array:0000000000218A78                 ;org 218A78h
.fini_array:0000000000218A78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000218A78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000218A78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000218A78
.data.rel.ro:0000000000218A80 ; ===========================================================================
.data.rel.ro:0000000000218A80
.data.rel.ro:0000000000218A80 ; Segment type: Pure data
.data.rel.ro:0000000000218A80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000218A80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000218A80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000218A80                 ;org 218A80h
.data.rel.ro:0000000000218A80 default_file_list_7113 dq offset aLt+2  ; DATA XREF: main+2AD↑o
.data.rel.ro:0000000000218A80                                         ; "-"
.data.rel.ro:0000000000218A88                 align 20h
.data.rel.ro:0000000000218AA0 ; struct option longopts
.data.rel.ro:0000000000218AA0 longopts        dq offset aBefore       ; name
.data.rel.ro:0000000000218AA0                                         ; DATA XREF: main+8↑o
.data.rel.ro:0000000000218AA0                 dd 0                    ; has_arg ; "before"
.data.rel.ro:0000000000218AA0                 db 4 dup(0)
.data.rel.ro:0000000000218AA0                 dq 0                    ; flag
.data.rel.ro:0000000000218AA0                 dd 62h                  ; val
.data.rel.ro:0000000000218AA0                 db 4 dup(0)
.data.rel.ro:0000000000218AC0                 dq offset aRegex        ; "regex"
.data.rel.ro:0000000000218AC8                 db    0
.data.rel.ro:0000000000218AC9                 db    0
.data.rel.ro:0000000000218ACA                 db    0
.data.rel.ro:0000000000218ACB                 db    0
.data.rel.ro:0000000000218ACC                 db    0
.data.rel.ro:0000000000218ACD                 db    0
.data.rel.ro:0000000000218ACE                 db    0
.data.rel.ro:0000000000218ACF                 db    0
.data.rel.ro:0000000000218AD0                 db    0
.data.rel.ro:0000000000218AD1                 db    0
.data.rel.ro:0000000000218AD2                 db    0
.data.rel.ro:0000000000218AD3                 db    0
.data.rel.ro:0000000000218AD4                 db    0
.data.rel.ro:0000000000218AD5                 db    0
.data.rel.ro:0000000000218AD6                 db    0
.data.rel.ro:0000000000218AD7                 db    0
.data.rel.ro:0000000000218AD8                 db  72h ; r
.data.rel.ro:0000000000218AD9                 db    0
.data.rel.ro:0000000000218ADA                 db    0
.data.rel.ro:0000000000218ADB                 db    0
.data.rel.ro:0000000000218ADC                 db    0
.data.rel.ro:0000000000218ADD                 db    0
.data.rel.ro:0000000000218ADE                 db    0
.data.rel.ro:0000000000218ADF                 db    0
.data.rel.ro:0000000000218AE0                 dq offset aSeparator    ; "separator"
.data.rel.ro:0000000000218AE8                 db    1
.data.rel.ro:0000000000218AE9                 db    0
.data.rel.ro:0000000000218AEA                 db    0
.data.rel.ro:0000000000218AEB                 db    0
.data.rel.ro:0000000000218AEC                 db    0
.data.rel.ro:0000000000218AED                 db    0
.data.rel.ro:0000000000218AEE                 db    0
.data.rel.ro:0000000000218AEF                 db    0
.data.rel.ro:0000000000218AF0                 db    0
.data.rel.ro:0000000000218AF1                 db    0
.data.rel.ro:0000000000218AF2                 db    0
.data.rel.ro:0000000000218AF3                 db    0
.data.rel.ro:0000000000218AF4                 db    0
.data.rel.ro:0000000000218AF5                 db    0
.data.rel.ro:0000000000218AF6                 db    0
.data.rel.ro:0000000000218AF7                 db    0
.data.rel.ro:0000000000218AF8                 db  73h ; s
.data.rel.ro:0000000000218AF9                 db    0
.data.rel.ro:0000000000218AFA                 db    0
.data.rel.ro:0000000000218AFB                 db    0
.data.rel.ro:0000000000218AFC                 db    0
.data.rel.ro:0000000000218AFD                 db    0
.data.rel.ro:0000000000218AFE                 db    0
.data.rel.ro:0000000000218AFF                 db    0
.data.rel.ro:0000000000218B00                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000218B08                 db    0
.data.rel.ro:0000000000218B09                 db    0
.data.rel.ro:0000000000218B0A                 db    0
.data.rel.ro:0000000000218B0B                 db    0
.data.rel.ro:0000000000218B0C                 db    0
.data.rel.ro:0000000000218B0D                 db    0
.data.rel.ro:0000000000218B0E                 db    0
.data.rel.ro:0000000000218B0F                 db    0
.data.rel.ro:0000000000218B10                 db    0
.data.rel.ro:0000000000218B11                 db    0
.data.rel.ro:0000000000218B12                 db    0
.data.rel.ro:0000000000218B13                 db    0
.data.rel.ro:0000000000218B14                 db    0
.data.rel.ro:0000000000218B15                 db    0
.data.rel.ro:0000000000218B16                 db    0
.data.rel.ro:0000000000218B17                 db    0
.data.rel.ro:0000000000218B18                 db  7Eh ; ~
.data.rel.ro:0000000000218B19                 db 0FFh
.data.rel.ro:0000000000218B1A                 db 0FFh
.data.rel.ro:0000000000218B1B                 db 0FFh
.data.rel.ro:0000000000218B1C                 db    0
.data.rel.ro:0000000000218B1D                 db    0
.data.rel.ro:0000000000218B1E                 db    0
.data.rel.ro:0000000000218B1F                 db    0
.data.rel.ro:0000000000218B20                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000218B28                 db    0
.data.rel.ro:0000000000218B29                 db    0
.data.rel.ro:0000000000218B2A                 db    0
.data.rel.ro:0000000000218B2B                 db    0
.data.rel.ro:0000000000218B2C                 db    0
.data.rel.ro:0000000000218B2D                 db    0
.data.rel.ro:0000000000218B2E                 db    0
.data.rel.ro:0000000000218B2F                 db    0
.data.rel.ro:0000000000218B30                 db    0
.data.rel.ro:0000000000218B31                 db    0
.data.rel.ro:0000000000218B32                 db    0
.data.rel.ro:0000000000218B33                 db    0
.data.rel.ro:0000000000218B34                 db    0
.data.rel.ro:0000000000218B35                 db    0
.data.rel.ro:0000000000218B36                 db    0
.data.rel.ro:0000000000218B37                 db    0
.data.rel.ro:0000000000218B38                 db  7Dh ; }
.data.rel.ro:0000000000218B39                 db 0FFh
.data.rel.ro:0000000000218B3A                 db 0FFh
.data.rel.ro:0000000000218B3B                 db 0FFh
.data.rel.ro:0000000000218B3C                 db    0
.data.rel.ro:0000000000218B3D                 db    0
.data.rel.ro:0000000000218B3E                 db    0
.data.rel.ro:0000000000218B3F                 db    0
.data.rel.ro:0000000000218B40                 db    0
.data.rel.ro:0000000000218B41                 db    0
.data.rel.ro:0000000000218B42                 db    0
.data.rel.ro:0000000000218B43                 db    0
.data.rel.ro:0000000000218B44                 db    0
.data.rel.ro:0000000000218B45                 db    0
.data.rel.ro:0000000000218B46                 db    0
.data.rel.ro:0000000000218B47                 db    0
.data.rel.ro:0000000000218B48                 db    0
.data.rel.ro:0000000000218B49                 db    0
.data.rel.ro:0000000000218B4A                 db    0
.data.rel.ro:0000000000218B4B                 db    0
.data.rel.ro:0000000000218B4C                 db    0
.data.rel.ro:0000000000218B4D                 db    0
.data.rel.ro:0000000000218B4E                 db    0
.data.rel.ro:0000000000218B4F                 db    0
.data.rel.ro:0000000000218B50                 db    0
.data.rel.ro:0000000000218B51                 db    0
.data.rel.ro:0000000000218B52                 db    0
.data.rel.ro:0000000000218B53                 db    0
.data.rel.ro:0000000000218B54                 db    0
.data.rel.ro:0000000000218B55                 db    0
.data.rel.ro:0000000000218B56                 db    0
.data.rel.ro:0000000000218B57                 db    0
.data.rel.ro:0000000000218B58                 db    0
.data.rel.ro:0000000000218B59                 db    0
.data.rel.ro:0000000000218B5A                 db    0
.data.rel.ro:0000000000218B5B                 db    0
.data.rel.ro:0000000000218B5C                 db    0
.data.rel.ro:0000000000218B5D                 db    0
.data.rel.ro:0000000000218B5E                 db    0
.data.rel.ro:0000000000218B5F                 db    0
.data.rel.ro:0000000000218B60                 public quoting_style_args
.data.rel.ro:0000000000218B60 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000218B68                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000218B70                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000218B78                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000218B80                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000218B88                 dq offset aTac+2        ; "c"
.data.rel.ro:0000000000218B90                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000218B98                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000218BA0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000218BA8                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000218BB0                 db    0
.data.rel.ro:0000000000218BB1                 db    0
.data.rel.ro:0000000000218BB2                 db    0
.data.rel.ro:0000000000218BB3                 db    0
.data.rel.ro:0000000000218BB4                 db    0
.data.rel.ro:0000000000218BB5                 db    0
.data.rel.ro:0000000000218BB6                 db    0
.data.rel.ro:0000000000218BB7                 db    0
.data.rel.ro:0000000000218BB7 _data_rel_ro    ends
.data.rel.ro:0000000000218BB7
LOAD:0000000000218BB8 ; ELF Dynamic Information
LOAD:0000000000218BB8 ; ===========================================================================
LOAD:0000000000218BB8
LOAD:0000000000218BB8 ; Segment type: Pure data
LOAD:0000000000218BB8 ; Segment permissions: Read/Write
LOAD:0000000000218BB8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000218BB8                 assume cs:LOAD
LOAD:0000000000218BB8                 ;org 218BB8h
LOAD:0000000000218BB8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000218BB8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000218BB8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000218BC8                 Elf64_Dyn <0Ch, 1838h>  ; DT_INIT
LOAD:0000000000218BD8                 Elf64_Dyn <0Dh, 14130h> ; DT_FINI
LOAD:0000000000218BE8                 Elf64_Dyn <19h, 218A70h> ; DT_INIT_ARRAY
LOAD:0000000000218BF8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000218C08                 Elf64_Dyn <1Ah, 218A78h> ; DT_FINI_ARRAY
LOAD:0000000000218C18                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000218C28                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000218C38                 Elf64_Dyn <5, 0A60h>    ; DT_STRTAB
LOAD:0000000000218C48                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000218C58                 Elf64_Dyn <0Ah, 37Ch>   ; DT_STRSZ
LOAD:0000000000218C68                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000218C78                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000218C88                 Elf64_Dyn <3, 218DA8h>  ; DT_PLTGOT
LOAD:0000000000218C98                 Elf64_Dyn <2, 630h>     ; DT_PLTRELSZ
LOAD:0000000000218CA8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000218CB8                 Elf64_Dyn <17h, 1208h>  ; DT_JMPREL
LOAD:0000000000218CC8                 Elf64_Dyn <7, 0EF0h>    ; DT_RELA
LOAD:0000000000218CD8                 Elf64_Dyn <8, 318h>     ; DT_RELASZ
LOAD:0000000000218CE8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000218CF8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000218D08                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000218D18                 Elf64_Dyn <6FFFFFFEh, 0E80h> ; DT_VERNEED
LOAD:0000000000218D28                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000218D38                 Elf64_Dyn <6FFFFFF0h, 0DDCh> ; DT_VERSYM
LOAD:0000000000218D48                 Elf64_Dyn <6FFFFFF9h, 16h> ; DT_RELACOUNT
LOAD:0000000000218D58                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000218D68                 db    0
LOAD:0000000000218D69                 db    0
LOAD:0000000000218D6A                 db    0
LOAD:0000000000218D6B                 db    0
LOAD:0000000000218D6C                 db    0
LOAD:0000000000218D6D                 db    0
LOAD:0000000000218D6E                 db    0
LOAD:0000000000218D6F                 db    0
LOAD:0000000000218D70                 db    0
LOAD:0000000000218D71                 db    0
LOAD:0000000000218D72                 db    0
LOAD:0000000000218D73                 db    0
LOAD:0000000000218D74                 db    0
LOAD:0000000000218D75                 db    0
LOAD:0000000000218D76                 db    0
LOAD:0000000000218D77                 db    0
LOAD:0000000000218D78                 db    0
LOAD:0000000000218D79                 db    0
LOAD:0000000000218D7A                 db    0
LOAD:0000000000218D7B                 db    0
LOAD:0000000000218D7C                 db    0
LOAD:0000000000218D7D                 db    0
LOAD:0000000000218D7E                 db    0
LOAD:0000000000218D7F                 db    0
LOAD:0000000000218D80                 db    0
LOAD:0000000000218D81                 db    0
LOAD:0000000000218D82                 db    0
LOAD:0000000000218D83                 db    0
LOAD:0000000000218D84                 db    0
LOAD:0000000000218D85                 db    0
LOAD:0000000000218D86                 db    0
LOAD:0000000000218D87                 db    0
LOAD:0000000000218D88                 db    0
LOAD:0000000000218D89                 db    0
LOAD:0000000000218D8A                 db    0
LOAD:0000000000218D8B                 db    0
LOAD:0000000000218D8C                 db    0
LOAD:0000000000218D8D                 db    0
LOAD:0000000000218D8E                 db    0
LOAD:0000000000218D8F                 db    0
LOAD:0000000000218D90                 db    0
LOAD:0000000000218D91                 db    0
LOAD:0000000000218D92                 db    0
LOAD:0000000000218D93                 db    0
LOAD:0000000000218D94                 db    0
LOAD:0000000000218D95                 db    0
LOAD:0000000000218D96                 db    0
LOAD:0000000000218D97                 db    0
LOAD:0000000000218D98                 db    0
LOAD:0000000000218D99                 db    0
LOAD:0000000000218D9A                 db    0
LOAD:0000000000218D9B                 db    0
LOAD:0000000000218D9C                 db    0
LOAD:0000000000218D9D                 db    0
LOAD:0000000000218D9E                 db    0
LOAD:0000000000218D9F                 db    0
LOAD:0000000000218DA0                 db    0
LOAD:0000000000218DA1                 db    0
LOAD:0000000000218DA2                 db    0
LOAD:0000000000218DA3                 db    0
LOAD:0000000000218DA4                 db    0
LOAD:0000000000218DA5                 db    0
LOAD:0000000000218DA6                 db    0
LOAD:0000000000218DA7                 db    0
LOAD:0000000000218DA7 LOAD            ends
LOAD:0000000000218DA7
.got:0000000000218DA8 ; ===========================================================================
.got:0000000000218DA8
.got:0000000000218DA8 ; Segment type: Pure data
.got:0000000000218DA8 ; Segment permissions: Read/Write
.got:0000000000218DA8 _got            segment qword public 'DATA' use64
.got:0000000000218DA8                 assume cs:_got
.got:0000000000218DA8                 ;org 218DA8h
.got:0000000000218DA8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000218DB0 qword_218DB0    dq 0                    ; DATA XREF: sub_1850↑r
.got:0000000000218DB8 qword_218DB8    dq 0                    ; DATA XREF: sub_1850+6↑r
.got:0000000000218DC0 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000218DC0                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000218DC8 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000218DD0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000218DD8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000218DE0 __errno_location_ptr dq offset __errno_location
.got:0000000000218DE0                                         ; DATA XREF: ___errno_location↑r
.got:0000000000218DE8 unlink_ptr      dq offset unlink        ; DATA XREF: _unlink↑r
.got:0000000000218DF0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000218DF8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000218E00 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000218E08 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:0000000000218E10 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000218E18 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:0000000000218E18                                         ; DATA XREF: _clearerr_unlocked↑r
.got:0000000000218E20 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000218E28 iswctype_ptr    dq offset iswctype      ; DATA XREF: _iswctype↑r
.got:0000000000218E30 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000218E38 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000218E38                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000218E40 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000218E48 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000218E48                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000218E50 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000218E58 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000218E58                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000218E60 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000218E68 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000218E70 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000218E78 ftruncate_ptr   dq offset ftruncate     ; DATA XREF: _ftruncate↑r
.got:0000000000218E80 mkostemp_ptr    dq offset mkostemp      ; DATA XREF: _mkostemp↑r
.got:0000000000218E88 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000218E90 __assert_fail_ptr dq offset __assert_fail
.got:0000000000218E90                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000218E98 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000218EA0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000218EA8 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:0000000000218EB0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000218EB8 wctype_ptr      dq offset wctype        ; DATA XREF: _wctype↑r
.got:0000000000218EC0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000218EC0                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000218EC8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000218ED0 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000218ED8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000218EE0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000218EE8 iswalnum_ptr    dq offset iswalnum      ; DATA XREF: _iswalnum↑r
.got:0000000000218EF0 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000218EF8 wcrtomb_ptr     dq offset wcrtomb       ; DATA XREF: _wcrtomb↑r
.got:0000000000218F00 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000218F08 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000218F10 mkstemp_ptr     dq offset mkstemp       ; DATA XREF: _mkstemp↑r
.got:0000000000218F18 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000218F20 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000218F20                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000218F28 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000218F30 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:0000000000218F38 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000218F40 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000218F48 btowc_ptr       dq offset btowc         ; DATA XREF: _btowc↑r
.got:0000000000218F50 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:0000000000218F58 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000218F60 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000218F68 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000218F70 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000218F78 towlower_ptr    dq offset towlower      ; DATA XREF: _towlower↑r
.got:0000000000218F80 towupper_ptr    dq offset towupper      ; DATA XREF: _towupper↑r
.got:0000000000218F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000218F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000218F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000218FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000218FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000218FA8 fflush_unlocked_ptr dq offset fflush_unlocked
.got:0000000000218FA8                                         ; DATA XREF: _fflush_unlocked↑r
.got:0000000000218FB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000218FB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000218FC0 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000218FC0                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000218FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000218FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000218FD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000218FD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000218FD8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000218FD8                                         ; DATA XREF: start+24↑r
.got:0000000000218FE0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000218FE0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000218FE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000218FE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000218FF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000218FF0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000218FF0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000218FF0 _got            ends
.got:0000000000218FF0
LOAD:0000000000218FF8 ; ===========================================================================
LOAD:0000000000218FF8
LOAD:0000000000218FF8 ; Segment type: Pure data
LOAD:0000000000218FF8 ; Segment permissions: Read/Write
LOAD:0000000000218FF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000218FF8                 assume cs:LOAD
LOAD:0000000000218FF8                 ;org 218FF8h
LOAD:0000000000218FF8                 align 20h
LOAD:0000000000218FF8 LOAD            ends
LOAD:0000000000218FF8
.data:0000000000219000 ; ===========================================================================
.data:0000000000219000
.data:0000000000219000 ; Segment type: Pure data
.data:0000000000219000 ; Segment permissions: Read/Write
.data:0000000000219000 _data           segment align_32 public 'DATA' use64
.data:0000000000219000                 assume cs:_data
.data:0000000000219000                 ;org 219000h
.data:0000000000219000                 public __data_start ; weak
.data:0000000000219000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000219000                                         ; data_start
.data:0000000000219001                 db    0
.data:0000000000219002                 db    0
.data:0000000000219003                 db    0
.data:0000000000219004                 db    0
.data:0000000000219005                 db    0
.data:0000000000219006                 db    0
.data:0000000000219007                 db    0
.data:0000000000219008                 public __dso_handle
.data:0000000000219008 ; void *_dso_handle
.data:0000000000219008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000219008                                         ; atexit↑r ...
.data:0000000000219010                 public Version
.data:0000000000219010 Version         dq offset a831          ; DATA XREF: main+DE↑r
.data:0000000000219010                                         ; "8.31"
.data:0000000000219018                 public exit_failure
.data:0000000000219018 ; int exit_failure
.data:0000000000219018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3032↑r
.data:0000000000219018                                         ; xalloc_die+17↑r
.data:000000000021901C                 align 20h
.data:0000000000219020                 public quote_quoting_options
.data:0000000000219020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000219020                                         ; quote_mem↑o ...
.data:0000000000219021                 db    0
.data:0000000000219022                 db    0
.data:0000000000219023                 db    0
.data:0000000000219024                 db    0
.data:0000000000219025                 db    0
.data:0000000000219026                 db    0
.data:0000000000219027                 db    0
.data:0000000000219028                 db    0
.data:0000000000219029                 db    0
.data:000000000021902A                 db    0
.data:000000000021902B                 db    0
.data:000000000021902C                 db    0
.data:000000000021902D                 db    0
.data:000000000021902E                 db    0
.data:000000000021902F                 db    0
.data:0000000000219030                 db    0
.data:0000000000219031                 db    0
.data:0000000000219032                 db    0
.data:0000000000219033                 db    0
.data:0000000000219034                 db    0
.data:0000000000219035                 db    0
.data:0000000000219036                 db    0
.data:0000000000219037                 db    0
.data:0000000000219038                 db    0
.data:0000000000219039                 db    0
.data:000000000021903A                 db    0
.data:000000000021903B                 db    0
.data:000000000021903C                 db    0
.data:000000000021903D                 db    0
.data:000000000021903E                 db    0
.data:000000000021903F                 db    0
.data:0000000000219040                 db    0
.data:0000000000219041                 db    0
.data:0000000000219042                 db    0
.data:0000000000219043                 db    0
.data:0000000000219044                 db    0
.data:0000000000219045                 db    0
.data:0000000000219046                 db    0
.data:0000000000219047                 db    0
.data:0000000000219048                 db    0
.data:0000000000219049                 db    0
.data:000000000021904A                 db    0
.data:000000000021904B                 db    0
.data:000000000021904C                 db    0
.data:000000000021904D                 db    0
.data:000000000021904E                 db    0
.data:000000000021904F                 db    0
.data:0000000000219050                 db    0
.data:0000000000219051                 db    0
.data:0000000000219052                 db    0
.data:0000000000219053                 db    0
.data:0000000000219054                 db    0
.data:0000000000219055                 db    0
.data:0000000000219056                 db    0
.data:0000000000219057                 db    0
.data:0000000000219058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000219058                                         ; quotearg_n_options:loc_45AD↑r ...
.data:000000000021905C                 align 20h
.data:0000000000219060 ; void *slotvec
.data:0000000000219060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000219060                                         ; quotearg_n_options+76↑w ...
.data:0000000000219068                 align 10h
.data:0000000000219070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000219070                                         ; quotearg_n_options+187↑r ...
.data:0000000000219078 off_219078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000219078 _data           ends
.data:0000000000219078
.bss:0000000000219080 ; ===========================================================================
.bss:0000000000219080
.bss:0000000000219080 ; Segment type: Uninitialized
.bss:0000000000219080 ; Segment permissions: Read/Write
.bss:0000000000219080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000219080                 assume cs:_bss
.bss:0000000000219080                 ;org 219080h
.bss:0000000000219080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000219080                 public __bss_start ; weak
.bss:0000000000219080 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000009B8↑o
.bss:0000000000219080                                         ; LOAD:0000000000000A00↑o ...
.bss:0000000000219080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000219080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000219080                                         ; _edata
.bss:0000000000219080                                         ; Copy of shared data
.bss:0000000000219088                 public stdout@@GLIBC_2_2_5
.bss:0000000000219088 ; FILE *stdout
.bss:0000000000219088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009A0↑o
.bss:0000000000219088                                         ; main+D7↑r ...
.bss:0000000000219088                                         ; Alternative name is 'stdout'
.bss:0000000000219088                                         ; Copy of shared data
.bss:0000000000219090                 public optind@@GLIBC_2_2_5
.bss:0000000000219090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A30↑o
.bss:0000000000219090                                         ; main:loc_1EDC↑r
.bss:0000000000219090                                         ; Alternative name is 'optind'
.bss:0000000000219090                                         ; Copy of shared data
.bss:0000000000219094                 align 8
.bss:0000000000219098                 public optarg@@GLIBC_2_2_5
.bss:0000000000219098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A48↑o
.bss:0000000000219098                                         ; main+B3↑r
.bss:0000000000219098                                         ; Alternative name is 'optarg'
.bss:0000000000219098                                         ; Copy of shared data
.bss:00000000002190A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002190A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002190A0                                         ; DATA XREF: LOAD:00000000000009D0↑o
.bss:00000000002190A0                                         ; LOAD:00000000000009E8↑o ...
.bss:00000000002190A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002190A0                                         ; Copy of shared data
.bss:00000000002190A8                 align 20h
.bss:00000000002190C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002190C0 ; FILE *stderr
.bss:00000000002190C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A18↑o
.bss:00000000002190C0                                         ; usage+3D↑r ...
.bss:00000000002190C0                                         ; Alternative name is 'stderr'
.bss:00000000002190C0                                         ; Copy of shared data
.bss:00000000002190C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002190C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002190C9                 align 20h
.bss:00000000002190E0 buffer_6999     db    ? ;               ; DATA XREF: output+27↑o
.bss:00000000002190E0                                         ; output+93↑o ...
.bss:00000000002190E1                 db    ? ;
.bss:00000000002190E2                 db    ? ;
.bss:00000000002190E3                 db    ? ;
.bss:00000000002190E4                 db    ? ;
.bss:00000000002190E5                 db    ? ;
.bss:00000000002190E6                 db    ? ;
.bss:00000000002190E7                 db    ? ;
.bss:00000000002190E8                 db    ? ;
.bss:00000000002190E9                 db    ? ;
.bss:00000000002190EA                 db    ? ;
.bss:00000000002190EB                 db    ? ;
.bss:00000000002190EC                 db    ? ;
.bss:00000000002190ED                 db    ? ;
.bss:00000000002190EE                 db    ? ;
.bss:00000000002190EF                 db    ? ;
.bss:00000000002190F0                 db    ? ;
.bss:00000000002190F1                 db    ? ;
.bss:00000000002190F2                 db    ? ;
.bss:00000000002190F3                 db    ? ;
.bss:00000000002190F4                 db    ? ;
.bss:00000000002190F5                 db    ? ;
.bss:00000000002190F6                 db    ? ;
.bss:00000000002190F7                 db    ? ;
.bss:00000000002190F8                 db    ? ;
.bss:00000000002190F9                 db    ? ;
.bss:00000000002190FA                 db    ? ;
.bss:00000000002190FB                 db    ? ;
.bss:00000000002190FC                 db    ? ;
.bss:00000000002190FD                 db    ? ;
.bss:00000000002190FE                 db    ? ;
.bss:00000000002190FF                 db    ? ;
.bss:0000000000219100                 db    ? ;
.bss:0000000000219101                 db    ? ;
.bss:0000000000219102                 db    ? ;
.bss:0000000000219103                 db    ? ;
.bss:0000000000219104                 db    ? ;
.bss:0000000000219105                 db    ? ;
.bss:0000000000219106                 db    ? ;
.bss:0000000000219107                 db    ? ;
.bss:0000000000219108                 db    ? ;
.bss:0000000000219109                 db    ? ;
.bss:000000000021910A                 db    ? ;
.bss:000000000021910B                 db    ? ;
.bss:000000000021910C                 db    ? ;
.bss:000000000021910D                 db    ? ;
.bss:000000000021910E                 db    ? ;
.bss:000000000021910F                 db    ? ;
.bss:0000000000219110                 db    ? ;
.bss:0000000000219111                 db    ? ;
.bss:0000000000219112                 db    ? ;
.bss:0000000000219113                 db    ? ;
.bss:0000000000219114                 db    ? ;
.bss:0000000000219115                 db    ? ;
.bss:0000000000219116                 db    ? ;
.bss:0000000000219117                 db    ? ;
.bss:0000000000219118                 db    ? ;
.bss:0000000000219119                 db    ? ;
.bss:000000000021911A                 db    ? ;
.bss:000000000021911B                 db    ? ;
.bss:000000000021911C                 db    ? ;
.bss:000000000021911D                 db    ? ;
.bss:000000000021911E                 db    ? ;
.bss:000000000021911F                 db    ? ;
.bss:0000000000219120                 db    ? ;
.bss:0000000000219121                 db    ? ;
.bss:0000000000219122                 db    ? ;
.bss:0000000000219123                 db    ? ;
.bss:0000000000219124                 db    ? ;
.bss:0000000000219125                 db    ? ;
.bss:0000000000219126                 db    ? ;
.bss:0000000000219127                 db    ? ;
.bss:0000000000219128                 db    ? ;
.bss:0000000000219129                 db    ? ;
.bss:000000000021912A                 db    ? ;
.bss:000000000021912B                 db    ? ;
.bss:000000000021912C                 db    ? ;
.bss:000000000021912D                 db    ? ;
.bss:000000000021912E                 db    ? ;
.bss:000000000021912F                 db    ? ;
.bss:0000000000219130                 db    ? ;
.bss:0000000000219131                 db    ? ;
.bss:0000000000219132                 db    ? ;
.bss:0000000000219133                 db    ? ;
.bss:0000000000219134                 db    ? ;
.bss:0000000000219135                 db    ? ;
.bss:0000000000219136                 db    ? ;
.bss:0000000000219137                 db    ? ;
.bss:0000000000219138                 db    ? ;
.bss:0000000000219139                 db    ? ;
.bss:000000000021913A                 db    ? ;
.bss:000000000021913B                 db    ? ;
.bss:000000000021913C                 db    ? ;
.bss:000000000021913D                 db    ? ;
.bss:000000000021913E                 db    ? ;
.bss:000000000021913F                 db    ? ;
.bss:0000000000219140                 db    ? ;
.bss:0000000000219141                 db    ? ;
.bss:0000000000219142                 db    ? ;
.bss:0000000000219143                 db    ? ;
.bss:0000000000219144                 db    ? ;
.bss:0000000000219145                 db    ? ;
.bss:0000000000219146                 db    ? ;
.bss:0000000000219147                 db    ? ;
.bss:0000000000219148                 db    ? ;
.bss:0000000000219149                 db    ? ;
.bss:000000000021914A                 db    ? ;
.bss:000000000021914B                 db    ? ;
.bss:000000000021914C                 db    ? ;
.bss:000000000021914D                 db    ? ;
.bss:000000000021914E                 db    ? ;
.bss:000000000021914F                 db    ? ;
.bss:0000000000219150                 db    ? ;
.bss:0000000000219151                 db    ? ;
.bss:0000000000219152                 db    ? ;
.bss:0000000000219153                 db    ? ;
.bss:0000000000219154                 db    ? ;
.bss:0000000000219155                 db    ? ;
.bss:0000000000219156                 db    ? ;
.bss:0000000000219157                 db    ? ;
.bss:0000000000219158                 db    ? ;
.bss:0000000000219159                 db    ? ;
.bss:000000000021915A                 db    ? ;
.bss:000000000021915B                 db    ? ;
.bss:000000000021915C                 db    ? ;
.bss:000000000021915D                 db    ? ;
.bss:000000000021915E                 db    ? ;
.bss:000000000021915F                 db    ? ;
.bss:0000000000219160                 db    ? ;
.bss:0000000000219161                 db    ? ;
.bss:0000000000219162                 db    ? ;
.bss:0000000000219163                 db    ? ;
.bss:0000000000219164                 db    ? ;
.bss:0000000000219165                 db    ? ;
.bss:0000000000219166                 db    ? ;
.bss:0000000000219167                 db    ? ;
.bss:0000000000219168                 db    ? ;
.bss:0000000000219169                 db    ? ;
.bss:000000000021916A                 db    ? ;
.bss:000000000021916B                 db    ? ;
.bss:000000000021916C                 db    ? ;
.bss:000000000021916D                 db    ? ;
.bss:000000000021916E                 db    ? ;
.bss:000000000021916F                 db    ? ;
.bss:0000000000219170                 db    ? ;
.bss:0000000000219171                 db    ? ;
.bss:0000000000219172                 db    ? ;
.bss:0000000000219173                 db    ? ;
.bss:0000000000219174                 db    ? ;
.bss:0000000000219175                 db    ? ;
.bss:0000000000219176                 db    ? ;
.bss:0000000000219177                 db    ? ;
.bss:0000000000219178                 db    ? ;
.bss:0000000000219179                 db    ? ;
.bss:000000000021917A                 db    ? ;
.bss:000000000021917B                 db    ? ;
.bss:000000000021917C                 db    ? ;
.bss:000000000021917D                 db    ? ;
.bss:000000000021917E                 db    ? ;
.bss:000000000021917F                 db    ? ;
.bss:0000000000219180                 db    ? ;
.bss:0000000000219181                 db    ? ;
.bss:0000000000219182                 db    ? ;
.bss:0000000000219183                 db    ? ;
.bss:0000000000219184                 db    ? ;
.bss:0000000000219185                 db    ? ;
.bss:0000000000219186                 db    ? ;
.bss:0000000000219187                 db    ? ;
.bss:0000000000219188                 db    ? ;
.bss:0000000000219189                 db    ? ;
.bss:000000000021918A                 db    ? ;
.bss:000000000021918B                 db    ? ;
.bss:000000000021918C                 db    ? ;
.bss:000000000021918D                 db    ? ;
.bss:000000000021918E                 db    ? ;
.bss:000000000021918F                 db    ? ;
.bss:0000000000219190                 db    ? ;
.bss:0000000000219191                 db    ? ;
.bss:0000000000219192                 db    ? ;
.bss:0000000000219193                 db    ? ;
.bss:0000000000219194                 db    ? ;
.bss:0000000000219195                 db    ? ;
.bss:0000000000219196                 db    ? ;
.bss:0000000000219197                 db    ? ;
.bss:0000000000219198                 db    ? ;
.bss:0000000000219199                 db    ? ;
.bss:000000000021919A                 db    ? ;
.bss:000000000021919B                 db    ? ;
.bss:000000000021919C                 db    ? ;
.bss:000000000021919D                 db    ? ;
.bss:000000000021919E                 db    ? ;
.bss:000000000021919F                 db    ? ;
.bss:00000000002191A0                 db    ? ;
.bss:00000000002191A1                 db    ? ;
.bss:00000000002191A2                 db    ? ;
.bss:00000000002191A3                 db    ? ;
.bss:00000000002191A4                 db    ? ;
.bss:00000000002191A5                 db    ? ;
.bss:00000000002191A6                 db    ? ;
.bss:00000000002191A7                 db    ? ;
.bss:00000000002191A8                 db    ? ;
.bss:00000000002191A9                 db    ? ;
.bss:00000000002191AA                 db    ? ;
.bss:00000000002191AB                 db    ? ;
.bss:00000000002191AC                 db    ? ;
.bss:00000000002191AD                 db    ? ;
.bss:00000000002191AE                 db    ? ;
.bss:00000000002191AF                 db    ? ;
.bss:00000000002191B0                 db    ? ;
.bss:00000000002191B1                 db    ? ;
.bss:00000000002191B2                 db    ? ;
.bss:00000000002191B3                 db    ? ;
.bss:00000000002191B4                 db    ? ;
.bss:00000000002191B5                 db    ? ;
.bss:00000000002191B6                 db    ? ;
.bss:00000000002191B7                 db    ? ;
.bss:00000000002191B8                 db    ? ;
.bss:00000000002191B9                 db    ? ;
.bss:00000000002191BA                 db    ? ;
.bss:00000000002191BB                 db    ? ;
.bss:00000000002191BC                 db    ? ;
.bss:00000000002191BD                 db    ? ;
.bss:00000000002191BE                 db    ? ;
.bss:00000000002191BF                 db    ? ;
.bss:00000000002191C0                 db    ? ;
.bss:00000000002191C1                 db    ? ;
.bss:00000000002191C2                 db    ? ;
.bss:00000000002191C3                 db    ? ;
.bss:00000000002191C4                 db    ? ;
.bss:00000000002191C5                 db    ? ;
.bss:00000000002191C6                 db    ? ;
.bss:00000000002191C7                 db    ? ;
.bss:00000000002191C8                 db    ? ;
.bss:00000000002191C9                 db    ? ;
.bss:00000000002191CA                 db    ? ;
.bss:00000000002191CB                 db    ? ;
.bss:00000000002191CC                 db    ? ;
.bss:00000000002191CD                 db    ? ;
.bss:00000000002191CE                 db    ? ;
.bss:00000000002191CF                 db    ? ;
.bss:00000000002191D0                 db    ? ;
.bss:00000000002191D1                 db    ? ;
.bss:00000000002191D2                 db    ? ;
.bss:00000000002191D3                 db    ? ;
.bss:00000000002191D4                 db    ? ;
.bss:00000000002191D5                 db    ? ;
.bss:00000000002191D6                 db    ? ;
.bss:00000000002191D7                 db    ? ;
.bss:00000000002191D8                 db    ? ;
.bss:00000000002191D9                 db    ? ;
.bss:00000000002191DA                 db    ? ;
.bss:00000000002191DB                 db    ? ;
.bss:00000000002191DC                 db    ? ;
.bss:00000000002191DD                 db    ? ;
.bss:00000000002191DE                 db    ? ;
.bss:00000000002191DF                 db    ? ;
.bss:00000000002191E0                 db    ? ;
.bss:00000000002191E1                 db    ? ;
.bss:00000000002191E2                 db    ? ;
.bss:00000000002191E3                 db    ? ;
.bss:00000000002191E4                 db    ? ;
.bss:00000000002191E5                 db    ? ;
.bss:00000000002191E6                 db    ? ;
.bss:00000000002191E7                 db    ? ;
.bss:00000000002191E8                 db    ? ;
.bss:00000000002191E9                 db    ? ;
.bss:00000000002191EA                 db    ? ;
.bss:00000000002191EB                 db    ? ;
.bss:00000000002191EC                 db    ? ;
.bss:00000000002191ED                 db    ? ;
.bss:00000000002191EE                 db    ? ;
.bss:00000000002191EF                 db    ? ;
.bss:00000000002191F0                 db    ? ;
.bss:00000000002191F1                 db    ? ;
.bss:00000000002191F2                 db    ? ;
.bss:00000000002191F3                 db    ? ;
.bss:00000000002191F4                 db    ? ;
.bss:00000000002191F5                 db    ? ;
.bss:00000000002191F6                 db    ? ;
.bss:00000000002191F7                 db    ? ;
.bss:00000000002191F8                 db    ? ;
.bss:00000000002191F9                 db    ? ;
.bss:00000000002191FA                 db    ? ;
.bss:00000000002191FB                 db    ? ;
.bss:00000000002191FC                 db    ? ;
.bss:00000000002191FD                 db    ? ;
.bss:00000000002191FE                 db    ? ;
.bss:00000000002191FF                 db    ? ;
.bss:0000000000219200                 db    ? ;
.bss:0000000000219201                 db    ? ;
.bss:0000000000219202                 db    ? ;
.bss:0000000000219203                 db    ? ;
.bss:0000000000219204                 db    ? ;
.bss:0000000000219205                 db    ? ;
.bss:0000000000219206                 db    ? ;
.bss:0000000000219207                 db    ? ;
.bss:0000000000219208                 db    ? ;
.bss:0000000000219209                 db    ? ;
.bss:000000000021920A                 db    ? ;
.bss:000000000021920B                 db    ? ;
.bss:000000000021920C                 db    ? ;
.bss:000000000021920D                 db    ? ;
.bss:000000000021920E                 db    ? ;
.bss:000000000021920F                 db    ? ;
.bss:0000000000219210                 db    ? ;
.bss:0000000000219211                 db    ? ;
.bss:0000000000219212                 db    ? ;
.bss:0000000000219213                 db    ? ;
.bss:0000000000219214                 db    ? ;
.bss:0000000000219215                 db    ? ;
.bss:0000000000219216                 db    ? ;
.bss:0000000000219217                 db    ? ;
.bss:0000000000219218                 db    ? ;
.bss:0000000000219219                 db    ? ;
.bss:000000000021921A                 db    ? ;
.bss:000000000021921B                 db    ? ;
.bss:000000000021921C                 db    ? ;
.bss:000000000021921D                 db    ? ;
.bss:000000000021921E                 db    ? ;
.bss:000000000021921F                 db    ? ;
.bss:0000000000219220                 db    ? ;
.bss:0000000000219221                 db    ? ;
.bss:0000000000219222                 db    ? ;
.bss:0000000000219223                 db    ? ;
.bss:0000000000219224                 db    ? ;
.bss:0000000000219225                 db    ? ;
.bss:0000000000219226                 db    ? ;
.bss:0000000000219227                 db    ? ;
.bss:0000000000219228                 db    ? ;
.bss:0000000000219229                 db    ? ;
.bss:000000000021922A                 db    ? ;
.bss:000000000021922B                 db    ? ;
.bss:000000000021922C                 db    ? ;
.bss:000000000021922D                 db    ? ;
.bss:000000000021922E                 db    ? ;
.bss:000000000021922F                 db    ? ;
.bss:0000000000219230                 db    ? ;
.bss:0000000000219231                 db    ? ;
.bss:0000000000219232                 db    ? ;
.bss:0000000000219233                 db    ? ;
.bss:0000000000219234                 db    ? ;
.bss:0000000000219235                 db    ? ;
.bss:0000000000219236                 db    ? ;
.bss:0000000000219237                 db    ? ;
.bss:0000000000219238                 db    ? ;
.bss:0000000000219239                 db    ? ;
.bss:000000000021923A                 db    ? ;
.bss:000000000021923B                 db    ? ;
.bss:000000000021923C                 db    ? ;
.bss:000000000021923D                 db    ? ;
.bss:000000000021923E                 db    ? ;
.bss:000000000021923F                 db    ? ;
.bss:0000000000219240                 db    ? ;
.bss:0000000000219241                 db    ? ;
.bss:0000000000219242                 db    ? ;
.bss:0000000000219243                 db    ? ;
.bss:0000000000219244                 db    ? ;
.bss:0000000000219245                 db    ? ;
.bss:0000000000219246                 db    ? ;
.bss:0000000000219247                 db    ? ;
.bss:0000000000219248                 db    ? ;
.bss:0000000000219249                 db    ? ;
.bss:000000000021924A                 db    ? ;
.bss:000000000021924B                 db    ? ;
.bss:000000000021924C                 db    ? ;
.bss:000000000021924D                 db    ? ;
.bss:000000000021924E                 db    ? ;
.bss:000000000021924F                 db    ? ;
.bss:0000000000219250                 db    ? ;
.bss:0000000000219251                 db    ? ;
.bss:0000000000219252                 db    ? ;
.bss:0000000000219253                 db    ? ;
.bss:0000000000219254                 db    ? ;
.bss:0000000000219255                 db    ? ;
.bss:0000000000219256                 db    ? ;
.bss:0000000000219257                 db    ? ;
.bss:0000000000219258                 db    ? ;
.bss:0000000000219259                 db    ? ;
.bss:000000000021925A                 db    ? ;
.bss:000000000021925B                 db    ? ;
.bss:000000000021925C                 db    ? ;
.bss:000000000021925D                 db    ? ;
.bss:000000000021925E                 db    ? ;
.bss:000000000021925F                 db    ? ;
.bss:0000000000219260                 db    ? ;
.bss:0000000000219261                 db    ? ;
.bss:0000000000219262                 db    ? ;
.bss:0000000000219263                 db    ? ;
.bss:0000000000219264                 db    ? ;
.bss:0000000000219265                 db    ? ;
.bss:0000000000219266                 db    ? ;
.bss:0000000000219267                 db    ? ;
.bss:0000000000219268                 db    ? ;
.bss:0000000000219269                 db    ? ;
.bss:000000000021926A                 db    ? ;
.bss:000000000021926B                 db    ? ;
.bss:000000000021926C                 db    ? ;
.bss:000000000021926D                 db    ? ;
.bss:000000000021926E                 db    ? ;
.bss:000000000021926F                 db    ? ;
.bss:0000000000219270                 db    ? ;
.bss:0000000000219271                 db    ? ;
.bss:0000000000219272                 db    ? ;
.bss:0000000000219273                 db    ? ;
.bss:0000000000219274                 db    ? ;
.bss:0000000000219275                 db    ? ;
.bss:0000000000219276                 db    ? ;
.bss:0000000000219277                 db    ? ;
.bss:0000000000219278                 db    ? ;
.bss:0000000000219279                 db    ? ;
.bss:000000000021927A                 db    ? ;
.bss:000000000021927B                 db    ? ;
.bss:000000000021927C                 db    ? ;
.bss:000000000021927D                 db    ? ;
.bss:000000000021927E                 db    ? ;
.bss:000000000021927F                 db    ? ;
.bss:0000000000219280                 db    ? ;
.bss:0000000000219281                 db    ? ;
.bss:0000000000219282                 db    ? ;
.bss:0000000000219283                 db    ? ;
.bss:0000000000219284                 db    ? ;
.bss:0000000000219285                 db    ? ;
.bss:0000000000219286                 db    ? ;
.bss:0000000000219287                 db    ? ;
.bss:0000000000219288                 db    ? ;
.bss:0000000000219289                 db    ? ;
.bss:000000000021928A                 db    ? ;
.bss:000000000021928B                 db    ? ;
.bss:000000000021928C                 db    ? ;
.bss:000000000021928D                 db    ? ;
.bss:000000000021928E                 db    ? ;
.bss:000000000021928F                 db    ? ;
.bss:0000000000219290                 db    ? ;
.bss:0000000000219291                 db    ? ;
.bss:0000000000219292                 db    ? ;
.bss:0000000000219293                 db    ? ;
.bss:0000000000219294                 db    ? ;
.bss:0000000000219295                 db    ? ;
.bss:0000000000219296                 db    ? ;
.bss:0000000000219297                 db    ? ;
.bss:0000000000219298                 db    ? ;
.bss:0000000000219299                 db    ? ;
.bss:000000000021929A                 db    ? ;
.bss:000000000021929B                 db    ? ;
.bss:000000000021929C                 db    ? ;
.bss:000000000021929D                 db    ? ;
.bss:000000000021929E                 db    ? ;
.bss:000000000021929F                 db    ? ;
.bss:00000000002192A0                 db    ? ;
.bss:00000000002192A1                 db    ? ;
.bss:00000000002192A2                 db    ? ;
.bss:00000000002192A3                 db    ? ;
.bss:00000000002192A4                 db    ? ;
.bss:00000000002192A5                 db    ? ;
.bss:00000000002192A6                 db    ? ;
.bss:00000000002192A7                 db    ? ;
.bss:00000000002192A8                 db    ? ;
.bss:00000000002192A9                 db    ? ;
.bss:00000000002192AA                 db    ? ;
.bss:00000000002192AB                 db    ? ;
.bss:00000000002192AC                 db    ? ;
.bss:00000000002192AD                 db    ? ;
.bss:00000000002192AE                 db    ? ;
.bss:00000000002192AF                 db    ? ;
.bss:00000000002192B0                 db    ? ;
.bss:00000000002192B1                 db    ? ;
.bss:00000000002192B2                 db    ? ;
.bss:00000000002192B3                 db    ? ;
.bss:00000000002192B4                 db    ? ;
.bss:00000000002192B5                 db    ? ;
.bss:00000000002192B6                 db    ? ;
.bss:00000000002192B7                 db    ? ;
.bss:00000000002192B8                 db    ? ;
.bss:00000000002192B9                 db    ? ;
.bss:00000000002192BA                 db    ? ;
.bss:00000000002192BB                 db    ? ;
.bss:00000000002192BC                 db    ? ;
.bss:00000000002192BD                 db    ? ;
.bss:00000000002192BE                 db    ? ;
.bss:00000000002192BF                 db    ? ;
.bss:00000000002192C0                 db    ? ;
.bss:00000000002192C1                 db    ? ;
.bss:00000000002192C2                 db    ? ;
.bss:00000000002192C3                 db    ? ;
.bss:00000000002192C4                 db    ? ;
.bss:00000000002192C5                 db    ? ;
.bss:00000000002192C6                 db    ? ;
.bss:00000000002192C7                 db    ? ;
.bss:00000000002192C8                 db    ? ;
.bss:00000000002192C9                 db    ? ;
.bss:00000000002192CA                 db    ? ;
.bss:00000000002192CB                 db    ? ;
.bss:00000000002192CC                 db    ? ;
.bss:00000000002192CD                 db    ? ;
.bss:00000000002192CE                 db    ? ;
.bss:00000000002192CF                 db    ? ;
.bss:00000000002192D0                 db    ? ;
.bss:00000000002192D1                 db    ? ;
.bss:00000000002192D2                 db    ? ;
.bss:00000000002192D3                 db    ? ;
.bss:00000000002192D4                 db    ? ;
.bss:00000000002192D5                 db    ? ;
.bss:00000000002192D6                 db    ? ;
.bss:00000000002192D7                 db    ? ;
.bss:00000000002192D8                 db    ? ;
.bss:00000000002192D9                 db    ? ;
.bss:00000000002192DA                 db    ? ;
.bss:00000000002192DB                 db    ? ;
.bss:00000000002192DC                 db    ? ;
.bss:00000000002192DD                 db    ? ;
.bss:00000000002192DE                 db    ? ;
.bss:00000000002192DF                 db    ? ;
.bss:00000000002192E0                 db    ? ;
.bss:00000000002192E1                 db    ? ;
.bss:00000000002192E2                 db    ? ;
.bss:00000000002192E3                 db    ? ;
.bss:00000000002192E4                 db    ? ;
.bss:00000000002192E5                 db    ? ;
.bss:00000000002192E6                 db    ? ;
.bss:00000000002192E7                 db    ? ;
.bss:00000000002192E8                 db    ? ;
.bss:00000000002192E9                 db    ? ;
.bss:00000000002192EA                 db    ? ;
.bss:00000000002192EB                 db    ? ;
.bss:00000000002192EC                 db    ? ;
.bss:00000000002192ED                 db    ? ;
.bss:00000000002192EE                 db    ? ;
.bss:00000000002192EF                 db    ? ;
.bss:00000000002192F0                 db    ? ;
.bss:00000000002192F1                 db    ? ;
.bss:00000000002192F2                 db    ? ;
.bss:00000000002192F3                 db    ? ;
.bss:00000000002192F4                 db    ? ;
.bss:00000000002192F5                 db    ? ;
.bss:00000000002192F6                 db    ? ;
.bss:00000000002192F7                 db    ? ;
.bss:00000000002192F8                 db    ? ;
.bss:00000000002192F9                 db    ? ;
.bss:00000000002192FA                 db    ? ;
.bss:00000000002192FB                 db    ? ;
.bss:00000000002192FC                 db    ? ;
.bss:00000000002192FD                 db    ? ;
.bss:00000000002192FE                 db    ? ;
.bss:00000000002192FF                 db    ? ;
.bss:0000000000219300                 db    ? ;
.bss:0000000000219301                 db    ? ;
.bss:0000000000219302                 db    ? ;
.bss:0000000000219303                 db    ? ;
.bss:0000000000219304                 db    ? ;
.bss:0000000000219305                 db    ? ;
.bss:0000000000219306                 db    ? ;
.bss:0000000000219307                 db    ? ;
.bss:0000000000219308                 db    ? ;
.bss:0000000000219309                 db    ? ;
.bss:000000000021930A                 db    ? ;
.bss:000000000021930B                 db    ? ;
.bss:000000000021930C                 db    ? ;
.bss:000000000021930D                 db    ? ;
.bss:000000000021930E                 db    ? ;
.bss:000000000021930F                 db    ? ;
.bss:0000000000219310                 db    ? ;
.bss:0000000000219311                 db    ? ;
.bss:0000000000219312                 db    ? ;
.bss:0000000000219313                 db    ? ;
.bss:0000000000219314                 db    ? ;
.bss:0000000000219315                 db    ? ;
.bss:0000000000219316                 db    ? ;
.bss:0000000000219317                 db    ? ;
.bss:0000000000219318                 db    ? ;
.bss:0000000000219319                 db    ? ;
.bss:000000000021931A                 db    ? ;
.bss:000000000021931B                 db    ? ;
.bss:000000000021931C                 db    ? ;
.bss:000000000021931D                 db    ? ;
.bss:000000000021931E                 db    ? ;
.bss:000000000021931F                 db    ? ;
.bss:0000000000219320                 db    ? ;
.bss:0000000000219321                 db    ? ;
.bss:0000000000219322                 db    ? ;
.bss:0000000000219323                 db    ? ;
.bss:0000000000219324                 db    ? ;
.bss:0000000000219325                 db    ? ;
.bss:0000000000219326                 db    ? ;
.bss:0000000000219327                 db    ? ;
.bss:0000000000219328                 db    ? ;
.bss:0000000000219329                 db    ? ;
.bss:000000000021932A                 db    ? ;
.bss:000000000021932B                 db    ? ;
.bss:000000000021932C                 db    ? ;
.bss:000000000021932D                 db    ? ;
.bss:000000000021932E                 db    ? ;
.bss:000000000021932F                 db    ? ;
.bss:0000000000219330                 db    ? ;
.bss:0000000000219331                 db    ? ;
.bss:0000000000219332                 db    ? ;
.bss:0000000000219333                 db    ? ;
.bss:0000000000219334                 db    ? ;
.bss:0000000000219335                 db    ? ;
.bss:0000000000219336                 db    ? ;
.bss:0000000000219337                 db    ? ;
.bss:0000000000219338                 db    ? ;
.bss:0000000000219339                 db    ? ;
.bss:000000000021933A                 db    ? ;
.bss:000000000021933B                 db    ? ;
.bss:000000000021933C                 db    ? ;
.bss:000000000021933D                 db    ? ;
.bss:000000000021933E                 db    ? ;
.bss:000000000021933F                 db    ? ;
.bss:0000000000219340                 db    ? ;
.bss:0000000000219341                 db    ? ;
.bss:0000000000219342                 db    ? ;
.bss:0000000000219343                 db    ? ;
.bss:0000000000219344                 db    ? ;
.bss:0000000000219345                 db    ? ;
.bss:0000000000219346                 db    ? ;
.bss:0000000000219347                 db    ? ;
.bss:0000000000219348                 db    ? ;
.bss:0000000000219349                 db    ? ;
.bss:000000000021934A                 db    ? ;
.bss:000000000021934B                 db    ? ;
.bss:000000000021934C                 db    ? ;
.bss:000000000021934D                 db    ? ;
.bss:000000000021934E                 db    ? ;
.bss:000000000021934F                 db    ? ;
.bss:0000000000219350                 db    ? ;
.bss:0000000000219351                 db    ? ;
.bss:0000000000219352                 db    ? ;
.bss:0000000000219353                 db    ? ;
.bss:0000000000219354                 db    ? ;
.bss:0000000000219355                 db    ? ;
.bss:0000000000219356                 db    ? ;
.bss:0000000000219357                 db    ? ;
.bss:0000000000219358                 db    ? ;
.bss:0000000000219359                 db    ? ;
.bss:000000000021935A                 db    ? ;
.bss:000000000021935B                 db    ? ;
.bss:000000000021935C                 db    ? ;
.bss:000000000021935D                 db    ? ;
.bss:000000000021935E                 db    ? ;
.bss:000000000021935F                 db    ? ;
.bss:0000000000219360                 db    ? ;
.bss:0000000000219361                 db    ? ;
.bss:0000000000219362                 db    ? ;
.bss:0000000000219363                 db    ? ;
.bss:0000000000219364                 db    ? ;
.bss:0000000000219365                 db    ? ;
.bss:0000000000219366                 db    ? ;
.bss:0000000000219367                 db    ? ;
.bss:0000000000219368                 db    ? ;
.bss:0000000000219369                 db    ? ;
.bss:000000000021936A                 db    ? ;
.bss:000000000021936B                 db    ? ;
.bss:000000000021936C                 db    ? ;
.bss:000000000021936D                 db    ? ;
.bss:000000000021936E                 db    ? ;
.bss:000000000021936F                 db    ? ;
.bss:0000000000219370                 db    ? ;
.bss:0000000000219371                 db    ? ;
.bss:0000000000219372                 db    ? ;
.bss:0000000000219373                 db    ? ;
.bss:0000000000219374                 db    ? ;
.bss:0000000000219375                 db    ? ;
.bss:0000000000219376                 db    ? ;
.bss:0000000000219377                 db    ? ;
.bss:0000000000219378                 db    ? ;
.bss:0000000000219379                 db    ? ;
.bss:000000000021937A                 db    ? ;
.bss:000000000021937B                 db    ? ;
.bss:000000000021937C                 db    ? ;
.bss:000000000021937D                 db    ? ;
.bss:000000000021937E                 db    ? ;
.bss:000000000021937F                 db    ? ;
.bss:0000000000219380                 db    ? ;
.bss:0000000000219381                 db    ? ;
.bss:0000000000219382                 db    ? ;
.bss:0000000000219383                 db    ? ;
.bss:0000000000219384                 db    ? ;
.bss:0000000000219385                 db    ? ;
.bss:0000000000219386                 db    ? ;
.bss:0000000000219387                 db    ? ;
.bss:0000000000219388                 db    ? ;
.bss:0000000000219389                 db    ? ;
.bss:000000000021938A                 db    ? ;
.bss:000000000021938B                 db    ? ;
.bss:000000000021938C                 db    ? ;
.bss:000000000021938D                 db    ? ;
.bss:000000000021938E                 db    ? ;
.bss:000000000021938F                 db    ? ;
.bss:0000000000219390                 db    ? ;
.bss:0000000000219391                 db    ? ;
.bss:0000000000219392                 db    ? ;
.bss:0000000000219393                 db    ? ;
.bss:0000000000219394                 db    ? ;
.bss:0000000000219395                 db    ? ;
.bss:0000000000219396                 db    ? ;
.bss:0000000000219397                 db    ? ;
.bss:0000000000219398                 db    ? ;
.bss:0000000000219399                 db    ? ;
.bss:000000000021939A                 db    ? ;
.bss:000000000021939B                 db    ? ;
.bss:000000000021939C                 db    ? ;
.bss:000000000021939D                 db    ? ;
.bss:000000000021939E                 db    ? ;
.bss:000000000021939F                 db    ? ;
.bss:00000000002193A0                 db    ? ;
.bss:00000000002193A1                 db    ? ;
.bss:00000000002193A2                 db    ? ;
.bss:00000000002193A3                 db    ? ;
.bss:00000000002193A4                 db    ? ;
.bss:00000000002193A5                 db    ? ;
.bss:00000000002193A6                 db    ? ;
.bss:00000000002193A7                 db    ? ;
.bss:00000000002193A8                 db    ? ;
.bss:00000000002193A9                 db    ? ;
.bss:00000000002193AA                 db    ? ;
.bss:00000000002193AB                 db    ? ;
.bss:00000000002193AC                 db    ? ;
.bss:00000000002193AD                 db    ? ;
.bss:00000000002193AE                 db    ? ;
.bss:00000000002193AF                 db    ? ;
.bss:00000000002193B0                 db    ? ;
.bss:00000000002193B1                 db    ? ;
.bss:00000000002193B2                 db    ? ;
.bss:00000000002193B3                 db    ? ;
.bss:00000000002193B4                 db    ? ;
.bss:00000000002193B5                 db    ? ;
.bss:00000000002193B6                 db    ? ;
.bss:00000000002193B7                 db    ? ;
.bss:00000000002193B8                 db    ? ;
.bss:00000000002193B9                 db    ? ;
.bss:00000000002193BA                 db    ? ;
.bss:00000000002193BB                 db    ? ;
.bss:00000000002193BC                 db    ? ;
.bss:00000000002193BD                 db    ? ;
.bss:00000000002193BE                 db    ? ;
.bss:00000000002193BF                 db    ? ;
.bss:00000000002193C0                 db    ? ;
.bss:00000000002193C1                 db    ? ;
.bss:00000000002193C2                 db    ? ;
.bss:00000000002193C3                 db    ? ;
.bss:00000000002193C4                 db    ? ;
.bss:00000000002193C5                 db    ? ;
.bss:00000000002193C6                 db    ? ;
.bss:00000000002193C7                 db    ? ;
.bss:00000000002193C8                 db    ? ;
.bss:00000000002193C9                 db    ? ;
.bss:00000000002193CA                 db    ? ;
.bss:00000000002193CB                 db    ? ;
.bss:00000000002193CC                 db    ? ;
.bss:00000000002193CD                 db    ? ;
.bss:00000000002193CE                 db    ? ;
.bss:00000000002193CF                 db    ? ;
.bss:00000000002193D0                 db    ? ;
.bss:00000000002193D1                 db    ? ;
.bss:00000000002193D2                 db    ? ;
.bss:00000000002193D3                 db    ? ;
.bss:00000000002193D4                 db    ? ;
.bss:00000000002193D5                 db    ? ;
.bss:00000000002193D6                 db    ? ;
.bss:00000000002193D7                 db    ? ;
.bss:00000000002193D8                 db    ? ;
.bss:00000000002193D9                 db    ? ;
.bss:00000000002193DA                 db    ? ;
.bss:00000000002193DB                 db    ? ;
.bss:00000000002193DC                 db    ? ;
.bss:00000000002193DD                 db    ? ;
.bss:00000000002193DE                 db    ? ;
.bss:00000000002193DF                 db    ? ;
.bss:00000000002193E0                 db    ? ;
.bss:00000000002193E1                 db    ? ;
.bss:00000000002193E2                 db    ? ;
.bss:00000000002193E3                 db    ? ;
.bss:00000000002193E4                 db    ? ;
.bss:00000000002193E5                 db    ? ;
.bss:00000000002193E6                 db    ? ;
.bss:00000000002193E7                 db    ? ;
.bss:00000000002193E8                 db    ? ;
.bss:00000000002193E9                 db    ? ;
.bss:00000000002193EA                 db    ? ;
.bss:00000000002193EB                 db    ? ;
.bss:00000000002193EC                 db    ? ;
.bss:00000000002193ED                 db    ? ;
.bss:00000000002193EE                 db    ? ;
.bss:00000000002193EF                 db    ? ;
.bss:00000000002193F0                 db    ? ;
.bss:00000000002193F1                 db    ? ;
.bss:00000000002193F2                 db    ? ;
.bss:00000000002193F3                 db    ? ;
.bss:00000000002193F4                 db    ? ;
.bss:00000000002193F5                 db    ? ;
.bss:00000000002193F6                 db    ? ;
.bss:00000000002193F7                 db    ? ;
.bss:00000000002193F8                 db    ? ;
.bss:00000000002193F9                 db    ? ;
.bss:00000000002193FA                 db    ? ;
.bss:00000000002193FB                 db    ? ;
.bss:00000000002193FC                 db    ? ;
.bss:00000000002193FD                 db    ? ;
.bss:00000000002193FE                 db    ? ;
.bss:00000000002193FF                 db    ? ;
.bss:0000000000219400                 db    ? ;
.bss:0000000000219401                 db    ? ;
.bss:0000000000219402                 db    ? ;
.bss:0000000000219403                 db    ? ;
.bss:0000000000219404                 db    ? ;
.bss:0000000000219405                 db    ? ;
.bss:0000000000219406                 db    ? ;
.bss:0000000000219407                 db    ? ;
.bss:0000000000219408                 db    ? ;
.bss:0000000000219409                 db    ? ;
.bss:000000000021940A                 db    ? ;
.bss:000000000021940B                 db    ? ;
.bss:000000000021940C                 db    ? ;
.bss:000000000021940D                 db    ? ;
.bss:000000000021940E                 db    ? ;
.bss:000000000021940F                 db    ? ;
.bss:0000000000219410                 db    ? ;
.bss:0000000000219411                 db    ? ;
.bss:0000000000219412                 db    ? ;
.bss:0000000000219413                 db    ? ;
.bss:0000000000219414                 db    ? ;
.bss:0000000000219415                 db    ? ;
.bss:0000000000219416                 db    ? ;
.bss:0000000000219417                 db    ? ;
.bss:0000000000219418                 db    ? ;
.bss:0000000000219419                 db    ? ;
.bss:000000000021941A                 db    ? ;
.bss:000000000021941B                 db    ? ;
.bss:000000000021941C                 db    ? ;
.bss:000000000021941D                 db    ? ;
.bss:000000000021941E                 db    ? ;
.bss:000000000021941F                 db    ? ;
.bss:0000000000219420                 db    ? ;
.bss:0000000000219421                 db    ? ;
.bss:0000000000219422                 db    ? ;
.bss:0000000000219423                 db    ? ;
.bss:0000000000219424                 db    ? ;
.bss:0000000000219425                 db    ? ;
.bss:0000000000219426                 db    ? ;
.bss:0000000000219427                 db    ? ;
.bss:0000000000219428                 db    ? ;
.bss:0000000000219429                 db    ? ;
.bss:000000000021942A                 db    ? ;
.bss:000000000021942B                 db    ? ;
.bss:000000000021942C                 db    ? ;
.bss:000000000021942D                 db    ? ;
.bss:000000000021942E                 db    ? ;
.bss:000000000021942F                 db    ? ;
.bss:0000000000219430                 db    ? ;
.bss:0000000000219431                 db    ? ;
.bss:0000000000219432                 db    ? ;
.bss:0000000000219433                 db    ? ;
.bss:0000000000219434                 db    ? ;
.bss:0000000000219435                 db    ? ;
.bss:0000000000219436                 db    ? ;
.bss:0000000000219437                 db    ? ;
.bss:0000000000219438                 db    ? ;
.bss:0000000000219439                 db    ? ;
.bss:000000000021943A                 db    ? ;
.bss:000000000021943B                 db    ? ;
.bss:000000000021943C                 db    ? ;
.bss:000000000021943D                 db    ? ;
.bss:000000000021943E                 db    ? ;
.bss:000000000021943F                 db    ? ;
.bss:0000000000219440                 db    ? ;
.bss:0000000000219441                 db    ? ;
.bss:0000000000219442                 db    ? ;
.bss:0000000000219443                 db    ? ;
.bss:0000000000219444                 db    ? ;
.bss:0000000000219445                 db    ? ;
.bss:0000000000219446                 db    ? ;
.bss:0000000000219447                 db    ? ;
.bss:0000000000219448                 db    ? ;
.bss:0000000000219449                 db    ? ;
.bss:000000000021944A                 db    ? ;
.bss:000000000021944B                 db    ? ;
.bss:000000000021944C                 db    ? ;
.bss:000000000021944D                 db    ? ;
.bss:000000000021944E                 db    ? ;
.bss:000000000021944F                 db    ? ;
.bss:0000000000219450                 db    ? ;
.bss:0000000000219451                 db    ? ;
.bss:0000000000219452                 db    ? ;
.bss:0000000000219453                 db    ? ;
.bss:0000000000219454                 db    ? ;
.bss:0000000000219455                 db    ? ;
.bss:0000000000219456                 db    ? ;
.bss:0000000000219457                 db    ? ;
.bss:0000000000219458                 db    ? ;
.bss:0000000000219459                 db    ? ;
.bss:000000000021945A                 db    ? ;
.bss:000000000021945B                 db    ? ;
.bss:000000000021945C                 db    ? ;
.bss:000000000021945D                 db    ? ;
.bss:000000000021945E                 db    ? ;
.bss:000000000021945F                 db    ? ;
.bss:0000000000219460                 db    ? ;
.bss:0000000000219461                 db    ? ;
.bss:0000000000219462                 db    ? ;
.bss:0000000000219463                 db    ? ;
.bss:0000000000219464                 db    ? ;
.bss:0000000000219465                 db    ? ;
.bss:0000000000219466                 db    ? ;
.bss:0000000000219467                 db    ? ;
.bss:0000000000219468                 db    ? ;
.bss:0000000000219469                 db    ? ;
.bss:000000000021946A                 db    ? ;
.bss:000000000021946B                 db    ? ;
.bss:000000000021946C                 db    ? ;
.bss:000000000021946D                 db    ? ;
.bss:000000000021946E                 db    ? ;
.bss:000000000021946F                 db    ? ;
.bss:0000000000219470                 db    ? ;
.bss:0000000000219471                 db    ? ;
.bss:0000000000219472                 db    ? ;
.bss:0000000000219473                 db    ? ;
.bss:0000000000219474                 db    ? ;
.bss:0000000000219475                 db    ? ;
.bss:0000000000219476                 db    ? ;
.bss:0000000000219477                 db    ? ;
.bss:0000000000219478                 db    ? ;
.bss:0000000000219479                 db    ? ;
.bss:000000000021947A                 db    ? ;
.bss:000000000021947B                 db    ? ;
.bss:000000000021947C                 db    ? ;
.bss:000000000021947D                 db    ? ;
.bss:000000000021947E                 db    ? ;
.bss:000000000021947F                 db    ? ;
.bss:0000000000219480                 db    ? ;
.bss:0000000000219481                 db    ? ;
.bss:0000000000219482                 db    ? ;
.bss:0000000000219483                 db    ? ;
.bss:0000000000219484                 db    ? ;
.bss:0000000000219485                 db    ? ;
.bss:0000000000219486                 db    ? ;
.bss:0000000000219487                 db    ? ;
.bss:0000000000219488                 db    ? ;
.bss:0000000000219489                 db    ? ;
.bss:000000000021948A                 db    ? ;
.bss:000000000021948B                 db    ? ;
.bss:000000000021948C                 db    ? ;
.bss:000000000021948D                 db    ? ;
.bss:000000000021948E                 db    ? ;
.bss:000000000021948F                 db    ? ;
.bss:0000000000219490                 db    ? ;
.bss:0000000000219491                 db    ? ;
.bss:0000000000219492                 db    ? ;
.bss:0000000000219493                 db    ? ;
.bss:0000000000219494                 db    ? ;
.bss:0000000000219495                 db    ? ;
.bss:0000000000219496                 db    ? ;
.bss:0000000000219497                 db    ? ;
.bss:0000000000219498                 db    ? ;
.bss:0000000000219499                 db    ? ;
.bss:000000000021949A                 db    ? ;
.bss:000000000021949B                 db    ? ;
.bss:000000000021949C                 db    ? ;
.bss:000000000021949D                 db    ? ;
.bss:000000000021949E                 db    ? ;
.bss:000000000021949F                 db    ? ;
.bss:00000000002194A0                 db    ? ;
.bss:00000000002194A1                 db    ? ;
.bss:00000000002194A2                 db    ? ;
.bss:00000000002194A3                 db    ? ;
.bss:00000000002194A4                 db    ? ;
.bss:00000000002194A5                 db    ? ;
.bss:00000000002194A6                 db    ? ;
.bss:00000000002194A7                 db    ? ;
.bss:00000000002194A8                 db    ? ;
.bss:00000000002194A9                 db    ? ;
.bss:00000000002194AA                 db    ? ;
.bss:00000000002194AB                 db    ? ;
.bss:00000000002194AC                 db    ? ;
.bss:00000000002194AD                 db    ? ;
.bss:00000000002194AE                 db    ? ;
.bss:00000000002194AF                 db    ? ;
.bss:00000000002194B0                 db    ? ;
.bss:00000000002194B1                 db    ? ;
.bss:00000000002194B2                 db    ? ;
.bss:00000000002194B3                 db    ? ;
.bss:00000000002194B4                 db    ? ;
.bss:00000000002194B5                 db    ? ;
.bss:00000000002194B6                 db    ? ;
.bss:00000000002194B7                 db    ? ;
.bss:00000000002194B8                 db    ? ;
.bss:00000000002194B9                 db    ? ;
.bss:00000000002194BA                 db    ? ;
.bss:00000000002194BB                 db    ? ;
.bss:00000000002194BC                 db    ? ;
.bss:00000000002194BD                 db    ? ;
.bss:00000000002194BE                 db    ? ;
.bss:00000000002194BF                 db    ? ;
.bss:00000000002194C0                 db    ? ;
.bss:00000000002194C1                 db    ? ;
.bss:00000000002194C2                 db    ? ;
.bss:00000000002194C3                 db    ? ;
.bss:00000000002194C4                 db    ? ;
.bss:00000000002194C5                 db    ? ;
.bss:00000000002194C6                 db    ? ;
.bss:00000000002194C7                 db    ? ;
.bss:00000000002194C8                 db    ? ;
.bss:00000000002194C9                 db    ? ;
.bss:00000000002194CA                 db    ? ;
.bss:00000000002194CB                 db    ? ;
.bss:00000000002194CC                 db    ? ;
.bss:00000000002194CD                 db    ? ;
.bss:00000000002194CE                 db    ? ;
.bss:00000000002194CF                 db    ? ;
.bss:00000000002194D0                 db    ? ;
.bss:00000000002194D1                 db    ? ;
.bss:00000000002194D2                 db    ? ;
.bss:00000000002194D3                 db    ? ;
.bss:00000000002194D4                 db    ? ;
.bss:00000000002194D5                 db    ? ;
.bss:00000000002194D6                 db    ? ;
.bss:00000000002194D7                 db    ? ;
.bss:00000000002194D8                 db    ? ;
.bss:00000000002194D9                 db    ? ;
.bss:00000000002194DA                 db    ? ;
.bss:00000000002194DB                 db    ? ;
.bss:00000000002194DC                 db    ? ;
.bss:00000000002194DD                 db    ? ;
.bss:00000000002194DE                 db    ? ;
.bss:00000000002194DF                 db    ? ;
.bss:00000000002194E0                 db    ? ;
.bss:00000000002194E1                 db    ? ;
.bss:00000000002194E2                 db    ? ;
.bss:00000000002194E3                 db    ? ;
.bss:00000000002194E4                 db    ? ;
.bss:00000000002194E5                 db    ? ;
.bss:00000000002194E6                 db    ? ;
.bss:00000000002194E7                 db    ? ;
.bss:00000000002194E8                 db    ? ;
.bss:00000000002194E9                 db    ? ;
.bss:00000000002194EA                 db    ? ;
.bss:00000000002194EB                 db    ? ;
.bss:00000000002194EC                 db    ? ;
.bss:00000000002194ED                 db    ? ;
.bss:00000000002194EE                 db    ? ;
.bss:00000000002194EF                 db    ? ;
.bss:00000000002194F0                 db    ? ;
.bss:00000000002194F1                 db    ? ;
.bss:00000000002194F2                 db    ? ;
.bss:00000000002194F3                 db    ? ;
.bss:00000000002194F4                 db    ? ;
.bss:00000000002194F5                 db    ? ;
.bss:00000000002194F6                 db    ? ;
.bss:00000000002194F7                 db    ? ;
.bss:00000000002194F8                 db    ? ;
.bss:00000000002194F9                 db    ? ;
.bss:00000000002194FA                 db    ? ;
.bss:00000000002194FB                 db    ? ;
.bss:00000000002194FC                 db    ? ;
.bss:00000000002194FD                 db    ? ;
.bss:00000000002194FE                 db    ? ;
.bss:00000000002194FF                 db    ? ;
.bss:0000000000219500                 db    ? ;
.bss:0000000000219501                 db    ? ;
.bss:0000000000219502                 db    ? ;
.bss:0000000000219503                 db    ? ;
.bss:0000000000219504                 db    ? ;
.bss:0000000000219505                 db    ? ;
.bss:0000000000219506                 db    ? ;
.bss:0000000000219507                 db    ? ;
.bss:0000000000219508                 db    ? ;
.bss:0000000000219509                 db    ? ;
.bss:000000000021950A                 db    ? ;
.bss:000000000021950B                 db    ? ;
.bss:000000000021950C                 db    ? ;
.bss:000000000021950D                 db    ? ;
.bss:000000000021950E                 db    ? ;
.bss:000000000021950F                 db    ? ;
.bss:0000000000219510                 db    ? ;
.bss:0000000000219511                 db    ? ;
.bss:0000000000219512                 db    ? ;
.bss:0000000000219513                 db    ? ;
.bss:0000000000219514                 db    ? ;
.bss:0000000000219515                 db    ? ;
.bss:0000000000219516                 db    ? ;
.bss:0000000000219517                 db    ? ;
.bss:0000000000219518                 db    ? ;
.bss:0000000000219519                 db    ? ;
.bss:000000000021951A                 db    ? ;
.bss:000000000021951B                 db    ? ;
.bss:000000000021951C                 db    ? ;
.bss:000000000021951D                 db    ? ;
.bss:000000000021951E                 db    ? ;
.bss:000000000021951F                 db    ? ;
.bss:0000000000219520                 db    ? ;
.bss:0000000000219521                 db    ? ;
.bss:0000000000219522                 db    ? ;
.bss:0000000000219523                 db    ? ;
.bss:0000000000219524                 db    ? ;
.bss:0000000000219525                 db    ? ;
.bss:0000000000219526                 db    ? ;
.bss:0000000000219527                 db    ? ;
.bss:0000000000219528                 db    ? ;
.bss:0000000000219529                 db    ? ;
.bss:000000000021952A                 db    ? ;
.bss:000000000021952B                 db    ? ;
.bss:000000000021952C                 db    ? ;
.bss:000000000021952D                 db    ? ;
.bss:000000000021952E                 db    ? ;
.bss:000000000021952F                 db    ? ;
.bss:0000000000219530                 db    ? ;
.bss:0000000000219531                 db    ? ;
.bss:0000000000219532                 db    ? ;
.bss:0000000000219533                 db    ? ;
.bss:0000000000219534                 db    ? ;
.bss:0000000000219535                 db    ? ;
.bss:0000000000219536                 db    ? ;
.bss:0000000000219537                 db    ? ;
.bss:0000000000219538                 db    ? ;
.bss:0000000000219539                 db    ? ;
.bss:000000000021953A                 db    ? ;
.bss:000000000021953B                 db    ? ;
.bss:000000000021953C                 db    ? ;
.bss:000000000021953D                 db    ? ;
.bss:000000000021953E                 db    ? ;
.bss:000000000021953F                 db    ? ;
.bss:0000000000219540                 db    ? ;
.bss:0000000000219541                 db    ? ;
.bss:0000000000219542                 db    ? ;
.bss:0000000000219543                 db    ? ;
.bss:0000000000219544                 db    ? ;
.bss:0000000000219545                 db    ? ;
.bss:0000000000219546                 db    ? ;
.bss:0000000000219547                 db    ? ;
.bss:0000000000219548                 db    ? ;
.bss:0000000000219549                 db    ? ;
.bss:000000000021954A                 db    ? ;
.bss:000000000021954B                 db    ? ;
.bss:000000000021954C                 db    ? ;
.bss:000000000021954D                 db    ? ;
.bss:000000000021954E                 db    ? ;
.bss:000000000021954F                 db    ? ;
.bss:0000000000219550                 db    ? ;
.bss:0000000000219551                 db    ? ;
.bss:0000000000219552                 db    ? ;
.bss:0000000000219553                 db    ? ;
.bss:0000000000219554                 db    ? ;
.bss:0000000000219555                 db    ? ;
.bss:0000000000219556                 db    ? ;
.bss:0000000000219557                 db    ? ;
.bss:0000000000219558                 db    ? ;
.bss:0000000000219559                 db    ? ;
.bss:000000000021955A                 db    ? ;
.bss:000000000021955B                 db    ? ;
.bss:000000000021955C                 db    ? ;
.bss:000000000021955D                 db    ? ;
.bss:000000000021955E                 db    ? ;
.bss:000000000021955F                 db    ? ;
.bss:0000000000219560                 db    ? ;
.bss:0000000000219561                 db    ? ;
.bss:0000000000219562                 db    ? ;
.bss:0000000000219563                 db    ? ;
.bss:0000000000219564                 db    ? ;
.bss:0000000000219565                 db    ? ;
.bss:0000000000219566                 db    ? ;
.bss:0000000000219567                 db    ? ;
.bss:0000000000219568                 db    ? ;
.bss:0000000000219569                 db    ? ;
.bss:000000000021956A                 db    ? ;
.bss:000000000021956B                 db    ? ;
.bss:000000000021956C                 db    ? ;
.bss:000000000021956D                 db    ? ;
.bss:000000000021956E                 db    ? ;
.bss:000000000021956F                 db    ? ;
.bss:0000000000219570                 db    ? ;
.bss:0000000000219571                 db    ? ;
.bss:0000000000219572                 db    ? ;
.bss:0000000000219573                 db    ? ;
.bss:0000000000219574                 db    ? ;
.bss:0000000000219575                 db    ? ;
.bss:0000000000219576                 db    ? ;
.bss:0000000000219577                 db    ? ;
.bss:0000000000219578                 db    ? ;
.bss:0000000000219579                 db    ? ;
.bss:000000000021957A                 db    ? ;
.bss:000000000021957B                 db    ? ;
.bss:000000000021957C                 db    ? ;
.bss:000000000021957D                 db    ? ;
.bss:000000000021957E                 db    ? ;
.bss:000000000021957F                 db    ? ;
.bss:0000000000219580                 db    ? ;
.bss:0000000000219581                 db    ? ;
.bss:0000000000219582                 db    ? ;
.bss:0000000000219583                 db    ? ;
.bss:0000000000219584                 db    ? ;
.bss:0000000000219585                 db    ? ;
.bss:0000000000219586                 db    ? ;
.bss:0000000000219587                 db    ? ;
.bss:0000000000219588                 db    ? ;
.bss:0000000000219589                 db    ? ;
.bss:000000000021958A                 db    ? ;
.bss:000000000021958B                 db    ? ;
.bss:000000000021958C                 db    ? ;
.bss:000000000021958D                 db    ? ;
.bss:000000000021958E                 db    ? ;
.bss:000000000021958F                 db    ? ;
.bss:0000000000219590                 db    ? ;
.bss:0000000000219591                 db    ? ;
.bss:0000000000219592                 db    ? ;
.bss:0000000000219593                 db    ? ;
.bss:0000000000219594                 db    ? ;
.bss:0000000000219595                 db    ? ;
.bss:0000000000219596                 db    ? ;
.bss:0000000000219597                 db    ? ;
.bss:0000000000219598                 db    ? ;
.bss:0000000000219599                 db    ? ;
.bss:000000000021959A                 db    ? ;
.bss:000000000021959B                 db    ? ;
.bss:000000000021959C                 db    ? ;
.bss:000000000021959D                 db    ? ;
.bss:000000000021959E                 db    ? ;
.bss:000000000021959F                 db    ? ;
.bss:00000000002195A0                 db    ? ;
.bss:00000000002195A1                 db    ? ;
.bss:00000000002195A2                 db    ? ;
.bss:00000000002195A3                 db    ? ;
.bss:00000000002195A4                 db    ? ;
.bss:00000000002195A5                 db    ? ;
.bss:00000000002195A6                 db    ? ;
.bss:00000000002195A7                 db    ? ;
.bss:00000000002195A8                 db    ? ;
.bss:00000000002195A9                 db    ? ;
.bss:00000000002195AA                 db    ? ;
.bss:00000000002195AB                 db    ? ;
.bss:00000000002195AC                 db    ? ;
.bss:00000000002195AD                 db    ? ;
.bss:00000000002195AE                 db    ? ;
.bss:00000000002195AF                 db    ? ;
.bss:00000000002195B0                 db    ? ;
.bss:00000000002195B1                 db    ? ;
.bss:00000000002195B2                 db    ? ;
.bss:00000000002195B3                 db    ? ;
.bss:00000000002195B4                 db    ? ;
.bss:00000000002195B5                 db    ? ;
.bss:00000000002195B6                 db    ? ;
.bss:00000000002195B7                 db    ? ;
.bss:00000000002195B8                 db    ? ;
.bss:00000000002195B9                 db    ? ;
.bss:00000000002195BA                 db    ? ;
.bss:00000000002195BB                 db    ? ;
.bss:00000000002195BC                 db    ? ;
.bss:00000000002195BD                 db    ? ;
.bss:00000000002195BE                 db    ? ;
.bss:00000000002195BF                 db    ? ;
.bss:00000000002195C0                 db    ? ;
.bss:00000000002195C1                 db    ? ;
.bss:00000000002195C2                 db    ? ;
.bss:00000000002195C3                 db    ? ;
.bss:00000000002195C4                 db    ? ;
.bss:00000000002195C5                 db    ? ;
.bss:00000000002195C6                 db    ? ;
.bss:00000000002195C7                 db    ? ;
.bss:00000000002195C8                 db    ? ;
.bss:00000000002195C9                 db    ? ;
.bss:00000000002195CA                 db    ? ;
.bss:00000000002195CB                 db    ? ;
.bss:00000000002195CC                 db    ? ;
.bss:00000000002195CD                 db    ? ;
.bss:00000000002195CE                 db    ? ;
.bss:00000000002195CF                 db    ? ;
.bss:00000000002195D0                 db    ? ;
.bss:00000000002195D1                 db    ? ;
.bss:00000000002195D2                 db    ? ;
.bss:00000000002195D3                 db    ? ;
.bss:00000000002195D4                 db    ? ;
.bss:00000000002195D5                 db    ? ;
.bss:00000000002195D6                 db    ? ;
.bss:00000000002195D7                 db    ? ;
.bss:00000000002195D8                 db    ? ;
.bss:00000000002195D9                 db    ? ;
.bss:00000000002195DA                 db    ? ;
.bss:00000000002195DB                 db    ? ;
.bss:00000000002195DC                 db    ? ;
.bss:00000000002195DD                 db    ? ;
.bss:00000000002195DE                 db    ? ;
.bss:00000000002195DF                 db    ? ;
.bss:00000000002195E0                 db    ? ;
.bss:00000000002195E1                 db    ? ;
.bss:00000000002195E2                 db    ? ;
.bss:00000000002195E3                 db    ? ;
.bss:00000000002195E4                 db    ? ;
.bss:00000000002195E5                 db    ? ;
.bss:00000000002195E6                 db    ? ;
.bss:00000000002195E7                 db    ? ;
.bss:00000000002195E8                 db    ? ;
.bss:00000000002195E9                 db    ? ;
.bss:00000000002195EA                 db    ? ;
.bss:00000000002195EB                 db    ? ;
.bss:00000000002195EC                 db    ? ;
.bss:00000000002195ED                 db    ? ;
.bss:00000000002195EE                 db    ? ;
.bss:00000000002195EF                 db    ? ;
.bss:00000000002195F0                 db    ? ;
.bss:00000000002195F1                 db    ? ;
.bss:00000000002195F2                 db    ? ;
.bss:00000000002195F3                 db    ? ;
.bss:00000000002195F4                 db    ? ;
.bss:00000000002195F5                 db    ? ;
.bss:00000000002195F6                 db    ? ;
.bss:00000000002195F7                 db    ? ;
.bss:00000000002195F8                 db    ? ;
.bss:00000000002195F9                 db    ? ;
.bss:00000000002195FA                 db    ? ;
.bss:00000000002195FB                 db    ? ;
.bss:00000000002195FC                 db    ? ;
.bss:00000000002195FD                 db    ? ;
.bss:00000000002195FE                 db    ? ;
.bss:00000000002195FF                 db    ? ;
.bss:0000000000219600                 db    ? ;
.bss:0000000000219601                 db    ? ;
.bss:0000000000219602                 db    ? ;
.bss:0000000000219603                 db    ? ;
.bss:0000000000219604                 db    ? ;
.bss:0000000000219605                 db    ? ;
.bss:0000000000219606                 db    ? ;
.bss:0000000000219607                 db    ? ;
.bss:0000000000219608                 db    ? ;
.bss:0000000000219609                 db    ? ;
.bss:000000000021960A                 db    ? ;
.bss:000000000021960B                 db    ? ;
.bss:000000000021960C                 db    ? ;
.bss:000000000021960D                 db    ? ;
.bss:000000000021960E                 db    ? ;
.bss:000000000021960F                 db    ? ;
.bss:0000000000219610                 db    ? ;
.bss:0000000000219611                 db    ? ;
.bss:0000000000219612                 db    ? ;
.bss:0000000000219613                 db    ? ;
.bss:0000000000219614                 db    ? ;
.bss:0000000000219615                 db    ? ;
.bss:0000000000219616                 db    ? ;
.bss:0000000000219617                 db    ? ;
.bss:0000000000219618                 db    ? ;
.bss:0000000000219619                 db    ? ;
.bss:000000000021961A                 db    ? ;
.bss:000000000021961B                 db    ? ;
.bss:000000000021961C                 db    ? ;
.bss:000000000021961D                 db    ? ;
.bss:000000000021961E                 db    ? ;
.bss:000000000021961F                 db    ? ;
.bss:0000000000219620                 db    ? ;
.bss:0000000000219621                 db    ? ;
.bss:0000000000219622                 db    ? ;
.bss:0000000000219623                 db    ? ;
.bss:0000000000219624                 db    ? ;
.bss:0000000000219625                 db    ? ;
.bss:0000000000219626                 db    ? ;
.bss:0000000000219627                 db    ? ;
.bss:0000000000219628                 db    ? ;
.bss:0000000000219629                 db    ? ;
.bss:000000000021962A                 db    ? ;
.bss:000000000021962B                 db    ? ;
.bss:000000000021962C                 db    ? ;
.bss:000000000021962D                 db    ? ;
.bss:000000000021962E                 db    ? ;
.bss:000000000021962F                 db    ? ;
.bss:0000000000219630                 db    ? ;
.bss:0000000000219631                 db    ? ;
.bss:0000000000219632                 db    ? ;
.bss:0000000000219633                 db    ? ;
.bss:0000000000219634                 db    ? ;
.bss:0000000000219635                 db    ? ;
.bss:0000000000219636                 db    ? ;
.bss:0000000000219637                 db    ? ;
.bss:0000000000219638                 db    ? ;
.bss:0000000000219639                 db    ? ;
.bss:000000000021963A                 db    ? ;
.bss:000000000021963B                 db    ? ;
.bss:000000000021963C                 db    ? ;
.bss:000000000021963D                 db    ? ;
.bss:000000000021963E                 db    ? ;
.bss:000000000021963F                 db    ? ;
.bss:0000000000219640                 db    ? ;
.bss:0000000000219641                 db    ? ;
.bss:0000000000219642                 db    ? ;
.bss:0000000000219643                 db    ? ;
.bss:0000000000219644                 db    ? ;
.bss:0000000000219645                 db    ? ;
.bss:0000000000219646                 db    ? ;
.bss:0000000000219647                 db    ? ;
.bss:0000000000219648                 db    ? ;
.bss:0000000000219649                 db    ? ;
.bss:000000000021964A                 db    ? ;
.bss:000000000021964B                 db    ? ;
.bss:000000000021964C                 db    ? ;
.bss:000000000021964D                 db    ? ;
.bss:000000000021964E                 db    ? ;
.bss:000000000021964F                 db    ? ;
.bss:0000000000219650                 db    ? ;
.bss:0000000000219651                 db    ? ;
.bss:0000000000219652                 db    ? ;
.bss:0000000000219653                 db    ? ;
.bss:0000000000219654                 db    ? ;
.bss:0000000000219655                 db    ? ;
.bss:0000000000219656                 db    ? ;
.bss:0000000000219657                 db    ? ;
.bss:0000000000219658                 db    ? ;
.bss:0000000000219659                 db    ? ;
.bss:000000000021965A                 db    ? ;
.bss:000000000021965B                 db    ? ;
.bss:000000000021965C                 db    ? ;
.bss:000000000021965D                 db    ? ;
.bss:000000000021965E                 db    ? ;
.bss:000000000021965F                 db    ? ;
.bss:0000000000219660                 db    ? ;
.bss:0000000000219661                 db    ? ;
.bss:0000000000219662                 db    ? ;
.bss:0000000000219663                 db    ? ;
.bss:0000000000219664                 db    ? ;
.bss:0000000000219665                 db    ? ;
.bss:0000000000219666                 db    ? ;
.bss:0000000000219667                 db    ? ;
.bss:0000000000219668                 db    ? ;
.bss:0000000000219669                 db    ? ;
.bss:000000000021966A                 db    ? ;
.bss:000000000021966B                 db    ? ;
.bss:000000000021966C                 db    ? ;
.bss:000000000021966D                 db    ? ;
.bss:000000000021966E                 db    ? ;
.bss:000000000021966F                 db    ? ;
.bss:0000000000219670                 db    ? ;
.bss:0000000000219671                 db    ? ;
.bss:0000000000219672                 db    ? ;
.bss:0000000000219673                 db    ? ;
.bss:0000000000219674                 db    ? ;
.bss:0000000000219675                 db    ? ;
.bss:0000000000219676                 db    ? ;
.bss:0000000000219677                 db    ? ;
.bss:0000000000219678                 db    ? ;
.bss:0000000000219679                 db    ? ;
.bss:000000000021967A                 db    ? ;
.bss:000000000021967B                 db    ? ;
.bss:000000000021967C                 db    ? ;
.bss:000000000021967D                 db    ? ;
.bss:000000000021967E                 db    ? ;
.bss:000000000021967F                 db    ? ;
.bss:0000000000219680                 db    ? ;
.bss:0000000000219681                 db    ? ;
.bss:0000000000219682                 db    ? ;
.bss:0000000000219683                 db    ? ;
.bss:0000000000219684                 db    ? ;
.bss:0000000000219685                 db    ? ;
.bss:0000000000219686                 db    ? ;
.bss:0000000000219687                 db    ? ;
.bss:0000000000219688                 db    ? ;
.bss:0000000000219689                 db    ? ;
.bss:000000000021968A                 db    ? ;
.bss:000000000021968B                 db    ? ;
.bss:000000000021968C                 db    ? ;
.bss:000000000021968D                 db    ? ;
.bss:000000000021968E                 db    ? ;
.bss:000000000021968F                 db    ? ;
.bss:0000000000219690                 db    ? ;
.bss:0000000000219691                 db    ? ;
.bss:0000000000219692                 db    ? ;
.bss:0000000000219693                 db    ? ;
.bss:0000000000219694                 db    ? ;
.bss:0000000000219695                 db    ? ;
.bss:0000000000219696                 db    ? ;
.bss:0000000000219697                 db    ? ;
.bss:0000000000219698                 db    ? ;
.bss:0000000000219699                 db    ? ;
.bss:000000000021969A                 db    ? ;
.bss:000000000021969B                 db    ? ;
.bss:000000000021969C                 db    ? ;
.bss:000000000021969D                 db    ? ;
.bss:000000000021969E                 db    ? ;
.bss:000000000021969F                 db    ? ;
.bss:00000000002196A0                 db    ? ;
.bss:00000000002196A1                 db    ? ;
.bss:00000000002196A2                 db    ? ;
.bss:00000000002196A3                 db    ? ;
.bss:00000000002196A4                 db    ? ;
.bss:00000000002196A5                 db    ? ;
.bss:00000000002196A6                 db    ? ;
.bss:00000000002196A7                 db    ? ;
.bss:00000000002196A8                 db    ? ;
.bss:00000000002196A9                 db    ? ;
.bss:00000000002196AA                 db    ? ;
.bss:00000000002196AB                 db    ? ;
.bss:00000000002196AC                 db    ? ;
.bss:00000000002196AD                 db    ? ;
.bss:00000000002196AE                 db    ? ;
.bss:00000000002196AF                 db    ? ;
.bss:00000000002196B0                 db    ? ;
.bss:00000000002196B1                 db    ? ;
.bss:00000000002196B2                 db    ? ;
.bss:00000000002196B3                 db    ? ;
.bss:00000000002196B4                 db    ? ;
.bss:00000000002196B5                 db    ? ;
.bss:00000000002196B6                 db    ? ;
.bss:00000000002196B7                 db    ? ;
.bss:00000000002196B8                 db    ? ;
.bss:00000000002196B9                 db    ? ;
.bss:00000000002196BA                 db    ? ;
.bss:00000000002196BB                 db    ? ;
.bss:00000000002196BC                 db    ? ;
.bss:00000000002196BD                 db    ? ;
.bss:00000000002196BE                 db    ? ;
.bss:00000000002196BF                 db    ? ;
.bss:00000000002196C0                 db    ? ;
.bss:00000000002196C1                 db    ? ;
.bss:00000000002196C2                 db    ? ;
.bss:00000000002196C3                 db    ? ;
.bss:00000000002196C4                 db    ? ;
.bss:00000000002196C5                 db    ? ;
.bss:00000000002196C6                 db    ? ;
.bss:00000000002196C7                 db    ? ;
.bss:00000000002196C8                 db    ? ;
.bss:00000000002196C9                 db    ? ;
.bss:00000000002196CA                 db    ? ;
.bss:00000000002196CB                 db    ? ;
.bss:00000000002196CC                 db    ? ;
.bss:00000000002196CD                 db    ? ;
.bss:00000000002196CE                 db    ? ;
.bss:00000000002196CF                 db    ? ;
.bss:00000000002196D0                 db    ? ;
.bss:00000000002196D1                 db    ? ;
.bss:00000000002196D2                 db    ? ;
.bss:00000000002196D3                 db    ? ;
.bss:00000000002196D4                 db    ? ;
.bss:00000000002196D5                 db    ? ;
.bss:00000000002196D6                 db    ? ;
.bss:00000000002196D7                 db    ? ;
.bss:00000000002196D8                 db    ? ;
.bss:00000000002196D9                 db    ? ;
.bss:00000000002196DA                 db    ? ;
.bss:00000000002196DB                 db    ? ;
.bss:00000000002196DC                 db    ? ;
.bss:00000000002196DD                 db    ? ;
.bss:00000000002196DE                 db    ? ;
.bss:00000000002196DF                 db    ? ;
.bss:00000000002196E0                 db    ? ;
.bss:00000000002196E1                 db    ? ;
.bss:00000000002196E2                 db    ? ;
.bss:00000000002196E3                 db    ? ;
.bss:00000000002196E4                 db    ? ;
.bss:00000000002196E5                 db    ? ;
.bss:00000000002196E6                 db    ? ;
.bss:00000000002196E7                 db    ? ;
.bss:00000000002196E8                 db    ? ;
.bss:00000000002196E9                 db    ? ;
.bss:00000000002196EA                 db    ? ;
.bss:00000000002196EB                 db    ? ;
.bss:00000000002196EC                 db    ? ;
.bss:00000000002196ED                 db    ? ;
.bss:00000000002196EE                 db    ? ;
.bss:00000000002196EF                 db    ? ;
.bss:00000000002196F0                 db    ? ;
.bss:00000000002196F1                 db    ? ;
.bss:00000000002196F2                 db    ? ;
.bss:00000000002196F3                 db    ? ;
.bss:00000000002196F4                 db    ? ;
.bss:00000000002196F5                 db    ? ;
.bss:00000000002196F6                 db    ? ;
.bss:00000000002196F7                 db    ? ;
.bss:00000000002196F8                 db    ? ;
.bss:00000000002196F9                 db    ? ;
.bss:00000000002196FA                 db    ? ;
.bss:00000000002196FB                 db    ? ;
.bss:00000000002196FC                 db    ? ;
.bss:00000000002196FD                 db    ? ;
.bss:00000000002196FE                 db    ? ;
.bss:00000000002196FF                 db    ? ;
.bss:0000000000219700                 db    ? ;
.bss:0000000000219701                 db    ? ;
.bss:0000000000219702                 db    ? ;
.bss:0000000000219703                 db    ? ;
.bss:0000000000219704                 db    ? ;
.bss:0000000000219705                 db    ? ;
.bss:0000000000219706                 db    ? ;
.bss:0000000000219707                 db    ? ;
.bss:0000000000219708                 db    ? ;
.bss:0000000000219709                 db    ? ;
.bss:000000000021970A                 db    ? ;
.bss:000000000021970B                 db    ? ;
.bss:000000000021970C                 db    ? ;
.bss:000000000021970D                 db    ? ;
.bss:000000000021970E                 db    ? ;
.bss:000000000021970F                 db    ? ;
.bss:0000000000219710                 db    ? ;
.bss:0000000000219711                 db    ? ;
.bss:0000000000219712                 db    ? ;
.bss:0000000000219713                 db    ? ;
.bss:0000000000219714                 db    ? ;
.bss:0000000000219715                 db    ? ;
.bss:0000000000219716                 db    ? ;
.bss:0000000000219717                 db    ? ;
.bss:0000000000219718                 db    ? ;
.bss:0000000000219719                 db    ? ;
.bss:000000000021971A                 db    ? ;
.bss:000000000021971B                 db    ? ;
.bss:000000000021971C                 db    ? ;
.bss:000000000021971D                 db    ? ;
.bss:000000000021971E                 db    ? ;
.bss:000000000021971F                 db    ? ;
.bss:0000000000219720                 db    ? ;
.bss:0000000000219721                 db    ? ;
.bss:0000000000219722                 db    ? ;
.bss:0000000000219723                 db    ? ;
.bss:0000000000219724                 db    ? ;
.bss:0000000000219725                 db    ? ;
.bss:0000000000219726                 db    ? ;
.bss:0000000000219727                 db    ? ;
.bss:0000000000219728                 db    ? ;
.bss:0000000000219729                 db    ? ;
.bss:000000000021972A                 db    ? ;
.bss:000000000021972B                 db    ? ;
.bss:000000000021972C                 db    ? ;
.bss:000000000021972D                 db    ? ;
.bss:000000000021972E                 db    ? ;
.bss:000000000021972F                 db    ? ;
.bss:0000000000219730                 db    ? ;
.bss:0000000000219731                 db    ? ;
.bss:0000000000219732                 db    ? ;
.bss:0000000000219733                 db    ? ;
.bss:0000000000219734                 db    ? ;
.bss:0000000000219735                 db    ? ;
.bss:0000000000219736                 db    ? ;
.bss:0000000000219737                 db    ? ;
.bss:0000000000219738                 db    ? ;
.bss:0000000000219739                 db    ? ;
.bss:000000000021973A                 db    ? ;
.bss:000000000021973B                 db    ? ;
.bss:000000000021973C                 db    ? ;
.bss:000000000021973D                 db    ? ;
.bss:000000000021973E                 db    ? ;
.bss:000000000021973F                 db    ? ;
.bss:0000000000219740                 db    ? ;
.bss:0000000000219741                 db    ? ;
.bss:0000000000219742                 db    ? ;
.bss:0000000000219743                 db    ? ;
.bss:0000000000219744                 db    ? ;
.bss:0000000000219745                 db    ? ;
.bss:0000000000219746                 db    ? ;
.bss:0000000000219747                 db    ? ;
.bss:0000000000219748                 db    ? ;
.bss:0000000000219749                 db    ? ;
.bss:000000000021974A                 db    ? ;
.bss:000000000021974B                 db    ? ;
.bss:000000000021974C                 db    ? ;
.bss:000000000021974D                 db    ? ;
.bss:000000000021974E                 db    ? ;
.bss:000000000021974F                 db    ? ;
.bss:0000000000219750                 db    ? ;
.bss:0000000000219751                 db    ? ;
.bss:0000000000219752                 db    ? ;
.bss:0000000000219753                 db    ? ;
.bss:0000000000219754                 db    ? ;
.bss:0000000000219755                 db    ? ;
.bss:0000000000219756                 db    ? ;
.bss:0000000000219757                 db    ? ;
.bss:0000000000219758                 db    ? ;
.bss:0000000000219759                 db    ? ;
.bss:000000000021975A                 db    ? ;
.bss:000000000021975B                 db    ? ;
.bss:000000000021975C                 db    ? ;
.bss:000000000021975D                 db    ? ;
.bss:000000000021975E                 db    ? ;
.bss:000000000021975F                 db    ? ;
.bss:0000000000219760                 db    ? ;
.bss:0000000000219761                 db    ? ;
.bss:0000000000219762                 db    ? ;
.bss:0000000000219763                 db    ? ;
.bss:0000000000219764                 db    ? ;
.bss:0000000000219765                 db    ? ;
.bss:0000000000219766                 db    ? ;
.bss:0000000000219767                 db    ? ;
.bss:0000000000219768                 db    ? ;
.bss:0000000000219769                 db    ? ;
.bss:000000000021976A                 db    ? ;
.bss:000000000021976B                 db    ? ;
.bss:000000000021976C                 db    ? ;
.bss:000000000021976D                 db    ? ;
.bss:000000000021976E                 db    ? ;
.bss:000000000021976F                 db    ? ;
.bss:0000000000219770                 db    ? ;
.bss:0000000000219771                 db    ? ;
.bss:0000000000219772                 db    ? ;
.bss:0000000000219773                 db    ? ;
.bss:0000000000219774                 db    ? ;
.bss:0000000000219775                 db    ? ;
.bss:0000000000219776                 db    ? ;
.bss:0000000000219777                 db    ? ;
.bss:0000000000219778                 db    ? ;
.bss:0000000000219779                 db    ? ;
.bss:000000000021977A                 db    ? ;
.bss:000000000021977B                 db    ? ;
.bss:000000000021977C                 db    ? ;
.bss:000000000021977D                 db    ? ;
.bss:000000000021977E                 db    ? ;
.bss:000000000021977F                 db    ? ;
.bss:0000000000219780                 db    ? ;
.bss:0000000000219781                 db    ? ;
.bss:0000000000219782                 db    ? ;
.bss:0000000000219783                 db    ? ;
.bss:0000000000219784                 db    ? ;
.bss:0000000000219785                 db    ? ;
.bss:0000000000219786                 db    ? ;
.bss:0000000000219787                 db    ? ;
.bss:0000000000219788                 db    ? ;
.bss:0000000000219789                 db    ? ;
.bss:000000000021978A                 db    ? ;
.bss:000000000021978B                 db    ? ;
.bss:000000000021978C                 db    ? ;
.bss:000000000021978D                 db    ? ;
.bss:000000000021978E                 db    ? ;
.bss:000000000021978F                 db    ? ;
.bss:0000000000219790                 db    ? ;
.bss:0000000000219791                 db    ? ;
.bss:0000000000219792                 db    ? ;
.bss:0000000000219793                 db    ? ;
.bss:0000000000219794                 db    ? ;
.bss:0000000000219795                 db    ? ;
.bss:0000000000219796                 db    ? ;
.bss:0000000000219797                 db    ? ;
.bss:0000000000219798                 db    ? ;
.bss:0000000000219799                 db    ? ;
.bss:000000000021979A                 db    ? ;
.bss:000000000021979B                 db    ? ;
.bss:000000000021979C                 db    ? ;
.bss:000000000021979D                 db    ? ;
.bss:000000000021979E                 db    ? ;
.bss:000000000021979F                 db    ? ;
.bss:00000000002197A0                 db    ? ;
.bss:00000000002197A1                 db    ? ;
.bss:00000000002197A2                 db    ? ;
.bss:00000000002197A3                 db    ? ;
.bss:00000000002197A4                 db    ? ;
.bss:00000000002197A5                 db    ? ;
.bss:00000000002197A6                 db    ? ;
.bss:00000000002197A7                 db    ? ;
.bss:00000000002197A8                 db    ? ;
.bss:00000000002197A9                 db    ? ;
.bss:00000000002197AA                 db    ? ;
.bss:00000000002197AB                 db    ? ;
.bss:00000000002197AC                 db    ? ;
.bss:00000000002197AD                 db    ? ;
.bss:00000000002197AE                 db    ? ;
.bss:00000000002197AF                 db    ? ;
.bss:00000000002197B0                 db    ? ;
.bss:00000000002197B1                 db    ? ;
.bss:00000000002197B2                 db    ? ;
.bss:00000000002197B3                 db    ? ;
.bss:00000000002197B4                 db    ? ;
.bss:00000000002197B5                 db    ? ;
.bss:00000000002197B6                 db    ? ;
.bss:00000000002197B7                 db    ? ;
.bss:00000000002197B8                 db    ? ;
.bss:00000000002197B9                 db    ? ;
.bss:00000000002197BA                 db    ? ;
.bss:00000000002197BB                 db    ? ;
.bss:00000000002197BC                 db    ? ;
.bss:00000000002197BD                 db    ? ;
.bss:00000000002197BE                 db    ? ;
.bss:00000000002197BF                 db    ? ;
.bss:00000000002197C0                 db    ? ;
.bss:00000000002197C1                 db    ? ;
.bss:00000000002197C2                 db    ? ;
.bss:00000000002197C3                 db    ? ;
.bss:00000000002197C4                 db    ? ;
.bss:00000000002197C5                 db    ? ;
.bss:00000000002197C6                 db    ? ;
.bss:00000000002197C7                 db    ? ;
.bss:00000000002197C8                 db    ? ;
.bss:00000000002197C9                 db    ? ;
.bss:00000000002197CA                 db    ? ;
.bss:00000000002197CB                 db    ? ;
.bss:00000000002197CC                 db    ? ;
.bss:00000000002197CD                 db    ? ;
.bss:00000000002197CE                 db    ? ;
.bss:00000000002197CF                 db    ? ;
.bss:00000000002197D0                 db    ? ;
.bss:00000000002197D1                 db    ? ;
.bss:00000000002197D2                 db    ? ;
.bss:00000000002197D3                 db    ? ;
.bss:00000000002197D4                 db    ? ;
.bss:00000000002197D5                 db    ? ;
.bss:00000000002197D6                 db    ? ;
.bss:00000000002197D7                 db    ? ;
.bss:00000000002197D8                 db    ? ;
.bss:00000000002197D9                 db    ? ;
.bss:00000000002197DA                 db    ? ;
.bss:00000000002197DB                 db    ? ;
.bss:00000000002197DC                 db    ? ;
.bss:00000000002197DD                 db    ? ;
.bss:00000000002197DE                 db    ? ;
.bss:00000000002197DF                 db    ? ;
.bss:00000000002197E0                 db    ? ;
.bss:00000000002197E1                 db    ? ;
.bss:00000000002197E2                 db    ? ;
.bss:00000000002197E3                 db    ? ;
.bss:00000000002197E4                 db    ? ;
.bss:00000000002197E5                 db    ? ;
.bss:00000000002197E6                 db    ? ;
.bss:00000000002197E7                 db    ? ;
.bss:00000000002197E8                 db    ? ;
.bss:00000000002197E9                 db    ? ;
.bss:00000000002197EA                 db    ? ;
.bss:00000000002197EB                 db    ? ;
.bss:00000000002197EC                 db    ? ;
.bss:00000000002197ED                 db    ? ;
.bss:00000000002197EE                 db    ? ;
.bss:00000000002197EF                 db    ? ;
.bss:00000000002197F0                 db    ? ;
.bss:00000000002197F1                 db    ? ;
.bss:00000000002197F2                 db    ? ;
.bss:00000000002197F3                 db    ? ;
.bss:00000000002197F4                 db    ? ;
.bss:00000000002197F5                 db    ? ;
.bss:00000000002197F6                 db    ? ;
.bss:00000000002197F7                 db    ? ;
.bss:00000000002197F8                 db    ? ;
.bss:00000000002197F9                 db    ? ;
.bss:00000000002197FA                 db    ? ;
.bss:00000000002197FB                 db    ? ;
.bss:00000000002197FC                 db    ? ;
.bss:00000000002197FD                 db    ? ;
.bss:00000000002197FE                 db    ? ;
.bss:00000000002197FF                 db    ? ;
.bss:0000000000219800                 db    ? ;
.bss:0000000000219801                 db    ? ;
.bss:0000000000219802                 db    ? ;
.bss:0000000000219803                 db    ? ;
.bss:0000000000219804                 db    ? ;
.bss:0000000000219805                 db    ? ;
.bss:0000000000219806                 db    ? ;
.bss:0000000000219807                 db    ? ;
.bss:0000000000219808                 db    ? ;
.bss:0000000000219809                 db    ? ;
.bss:000000000021980A                 db    ? ;
.bss:000000000021980B                 db    ? ;
.bss:000000000021980C                 db    ? ;
.bss:000000000021980D                 db    ? ;
.bss:000000000021980E                 db    ? ;
.bss:000000000021980F                 db    ? ;
.bss:0000000000219810                 db    ? ;
.bss:0000000000219811                 db    ? ;
.bss:0000000000219812                 db    ? ;
.bss:0000000000219813                 db    ? ;
.bss:0000000000219814                 db    ? ;
.bss:0000000000219815                 db    ? ;
.bss:0000000000219816                 db    ? ;
.bss:0000000000219817                 db    ? ;
.bss:0000000000219818                 db    ? ;
.bss:0000000000219819                 db    ? ;
.bss:000000000021981A                 db    ? ;
.bss:000000000021981B                 db    ? ;
.bss:000000000021981C                 db    ? ;
.bss:000000000021981D                 db    ? ;
.bss:000000000021981E                 db    ? ;
.bss:000000000021981F                 db    ? ;
.bss:0000000000219820                 db    ? ;
.bss:0000000000219821                 db    ? ;
.bss:0000000000219822                 db    ? ;
.bss:0000000000219823                 db    ? ;
.bss:0000000000219824                 db    ? ;
.bss:0000000000219825                 db    ? ;
.bss:0000000000219826                 db    ? ;
.bss:0000000000219827                 db    ? ;
.bss:0000000000219828                 db    ? ;
.bss:0000000000219829                 db    ? ;
.bss:000000000021982A                 db    ? ;
.bss:000000000021982B                 db    ? ;
.bss:000000000021982C                 db    ? ;
.bss:000000000021982D                 db    ? ;
.bss:000000000021982E                 db    ? ;
.bss:000000000021982F                 db    ? ;
.bss:0000000000219830                 db    ? ;
.bss:0000000000219831                 db    ? ;
.bss:0000000000219832                 db    ? ;
.bss:0000000000219833                 db    ? ;
.bss:0000000000219834                 db    ? ;
.bss:0000000000219835                 db    ? ;
.bss:0000000000219836                 db    ? ;
.bss:0000000000219837                 db    ? ;
.bss:0000000000219838                 db    ? ;
.bss:0000000000219839                 db    ? ;
.bss:000000000021983A                 db    ? ;
.bss:000000000021983B                 db    ? ;
.bss:000000000021983C                 db    ? ;
.bss:000000000021983D                 db    ? ;
.bss:000000000021983E                 db    ? ;
.bss:000000000021983F                 db    ? ;
.bss:0000000000219840                 db    ? ;
.bss:0000000000219841                 db    ? ;
.bss:0000000000219842                 db    ? ;
.bss:0000000000219843                 db    ? ;
.bss:0000000000219844                 db    ? ;
.bss:0000000000219845                 db    ? ;
.bss:0000000000219846                 db    ? ;
.bss:0000000000219847                 db    ? ;
.bss:0000000000219848                 db    ? ;
.bss:0000000000219849                 db    ? ;
.bss:000000000021984A                 db    ? ;
.bss:000000000021984B                 db    ? ;
.bss:000000000021984C                 db    ? ;
.bss:000000000021984D                 db    ? ;
.bss:000000000021984E                 db    ? ;
.bss:000000000021984F                 db    ? ;
.bss:0000000000219850                 db    ? ;
.bss:0000000000219851                 db    ? ;
.bss:0000000000219852                 db    ? ;
.bss:0000000000219853                 db    ? ;
.bss:0000000000219854                 db    ? ;
.bss:0000000000219855                 db    ? ;
.bss:0000000000219856                 db    ? ;
.bss:0000000000219857                 db    ? ;
.bss:0000000000219858                 db    ? ;
.bss:0000000000219859                 db    ? ;
.bss:000000000021985A                 db    ? ;
.bss:000000000021985B                 db    ? ;
.bss:000000000021985C                 db    ? ;
.bss:000000000021985D                 db    ? ;
.bss:000000000021985E                 db    ? ;
.bss:000000000021985F                 db    ? ;
.bss:0000000000219860                 db    ? ;
.bss:0000000000219861                 db    ? ;
.bss:0000000000219862                 db    ? ;
.bss:0000000000219863                 db    ? ;
.bss:0000000000219864                 db    ? ;
.bss:0000000000219865                 db    ? ;
.bss:0000000000219866                 db    ? ;
.bss:0000000000219867                 db    ? ;
.bss:0000000000219868                 db    ? ;
.bss:0000000000219869                 db    ? ;
.bss:000000000021986A                 db    ? ;
.bss:000000000021986B                 db    ? ;
.bss:000000000021986C                 db    ? ;
.bss:000000000021986D                 db    ? ;
.bss:000000000021986E                 db    ? ;
.bss:000000000021986F                 db    ? ;
.bss:0000000000219870                 db    ? ;
.bss:0000000000219871                 db    ? ;
.bss:0000000000219872                 db    ? ;
.bss:0000000000219873                 db    ? ;
.bss:0000000000219874                 db    ? ;
.bss:0000000000219875                 db    ? ;
.bss:0000000000219876                 db    ? ;
.bss:0000000000219877                 db    ? ;
.bss:0000000000219878                 db    ? ;
.bss:0000000000219879                 db    ? ;
.bss:000000000021987A                 db    ? ;
.bss:000000000021987B                 db    ? ;
.bss:000000000021987C                 db    ? ;
.bss:000000000021987D                 db    ? ;
.bss:000000000021987E                 db    ? ;
.bss:000000000021987F                 db    ? ;
.bss:0000000000219880                 db    ? ;
.bss:0000000000219881                 db    ? ;
.bss:0000000000219882                 db    ? ;
.bss:0000000000219883                 db    ? ;
.bss:0000000000219884                 db    ? ;
.bss:0000000000219885                 db    ? ;
.bss:0000000000219886                 db    ? ;
.bss:0000000000219887                 db    ? ;
.bss:0000000000219888                 db    ? ;
.bss:0000000000219889                 db    ? ;
.bss:000000000021988A                 db    ? ;
.bss:000000000021988B                 db    ? ;
.bss:000000000021988C                 db    ? ;
.bss:000000000021988D                 db    ? ;
.bss:000000000021988E                 db    ? ;
.bss:000000000021988F                 db    ? ;
.bss:0000000000219890                 db    ? ;
.bss:0000000000219891                 db    ? ;
.bss:0000000000219892                 db    ? ;
.bss:0000000000219893                 db    ? ;
.bss:0000000000219894                 db    ? ;
.bss:0000000000219895                 db    ? ;
.bss:0000000000219896                 db    ? ;
.bss:0000000000219897                 db    ? ;
.bss:0000000000219898                 db    ? ;
.bss:0000000000219899                 db    ? ;
.bss:000000000021989A                 db    ? ;
.bss:000000000021989B                 db    ? ;
.bss:000000000021989C                 db    ? ;
.bss:000000000021989D                 db    ? ;
.bss:000000000021989E                 db    ? ;
.bss:000000000021989F                 db    ? ;
.bss:00000000002198A0                 db    ? ;
.bss:00000000002198A1                 db    ? ;
.bss:00000000002198A2                 db    ? ;
.bss:00000000002198A3                 db    ? ;
.bss:00000000002198A4                 db    ? ;
.bss:00000000002198A5                 db    ? ;
.bss:00000000002198A6                 db    ? ;
.bss:00000000002198A7                 db    ? ;
.bss:00000000002198A8                 db    ? ;
.bss:00000000002198A9                 db    ? ;
.bss:00000000002198AA                 db    ? ;
.bss:00000000002198AB                 db    ? ;
.bss:00000000002198AC                 db    ? ;
.bss:00000000002198AD                 db    ? ;
.bss:00000000002198AE                 db    ? ;
.bss:00000000002198AF                 db    ? ;
.bss:00000000002198B0                 db    ? ;
.bss:00000000002198B1                 db    ? ;
.bss:00000000002198B2                 db    ? ;
.bss:00000000002198B3                 db    ? ;
.bss:00000000002198B4                 db    ? ;
.bss:00000000002198B5                 db    ? ;
.bss:00000000002198B6                 db    ? ;
.bss:00000000002198B7                 db    ? ;
.bss:00000000002198B8                 db    ? ;
.bss:00000000002198B9                 db    ? ;
.bss:00000000002198BA                 db    ? ;
.bss:00000000002198BB                 db    ? ;
.bss:00000000002198BC                 db    ? ;
.bss:00000000002198BD                 db    ? ;
.bss:00000000002198BE                 db    ? ;
.bss:00000000002198BF                 db    ? ;
.bss:00000000002198C0                 db    ? ;
.bss:00000000002198C1                 db    ? ;
.bss:00000000002198C2                 db    ? ;
.bss:00000000002198C3                 db    ? ;
.bss:00000000002198C4                 db    ? ;
.bss:00000000002198C5                 db    ? ;
.bss:00000000002198C6                 db    ? ;
.bss:00000000002198C7                 db    ? ;
.bss:00000000002198C8                 db    ? ;
.bss:00000000002198C9                 db    ? ;
.bss:00000000002198CA                 db    ? ;
.bss:00000000002198CB                 db    ? ;
.bss:00000000002198CC                 db    ? ;
.bss:00000000002198CD                 db    ? ;
.bss:00000000002198CE                 db    ? ;
.bss:00000000002198CF                 db    ? ;
.bss:00000000002198D0                 db    ? ;
.bss:00000000002198D1                 db    ? ;
.bss:00000000002198D2                 db    ? ;
.bss:00000000002198D3                 db    ? ;
.bss:00000000002198D4                 db    ? ;
.bss:00000000002198D5                 db    ? ;
.bss:00000000002198D6                 db    ? ;
.bss:00000000002198D7                 db    ? ;
.bss:00000000002198D8                 db    ? ;
.bss:00000000002198D9                 db    ? ;
.bss:00000000002198DA                 db    ? ;
.bss:00000000002198DB                 db    ? ;
.bss:00000000002198DC                 db    ? ;
.bss:00000000002198DD                 db    ? ;
.bss:00000000002198DE                 db    ? ;
.bss:00000000002198DF                 db    ? ;
.bss:00000000002198E0                 db    ? ;
.bss:00000000002198E1                 db    ? ;
.bss:00000000002198E2                 db    ? ;
.bss:00000000002198E3                 db    ? ;
.bss:00000000002198E4                 db    ? ;
.bss:00000000002198E5                 db    ? ;
.bss:00000000002198E6                 db    ? ;
.bss:00000000002198E7                 db    ? ;
.bss:00000000002198E8                 db    ? ;
.bss:00000000002198E9                 db    ? ;
.bss:00000000002198EA                 db    ? ;
.bss:00000000002198EB                 db    ? ;
.bss:00000000002198EC                 db    ? ;
.bss:00000000002198ED                 db    ? ;
.bss:00000000002198EE                 db    ? ;
.bss:00000000002198EF                 db    ? ;
.bss:00000000002198F0                 db    ? ;
.bss:00000000002198F1                 db    ? ;
.bss:00000000002198F2                 db    ? ;
.bss:00000000002198F3                 db    ? ;
.bss:00000000002198F4                 db    ? ;
.bss:00000000002198F5                 db    ? ;
.bss:00000000002198F6                 db    ? ;
.bss:00000000002198F7                 db    ? ;
.bss:00000000002198F8                 db    ? ;
.bss:00000000002198F9                 db    ? ;
.bss:00000000002198FA                 db    ? ;
.bss:00000000002198FB                 db    ? ;
.bss:00000000002198FC                 db    ? ;
.bss:00000000002198FD                 db    ? ;
.bss:00000000002198FE                 db    ? ;
.bss:00000000002198FF                 db    ? ;
.bss:0000000000219900                 db    ? ;
.bss:0000000000219901                 db    ? ;
.bss:0000000000219902                 db    ? ;
.bss:0000000000219903                 db    ? ;
.bss:0000000000219904                 db    ? ;
.bss:0000000000219905                 db    ? ;
.bss:0000000000219906                 db    ? ;
.bss:0000000000219907                 db    ? ;
.bss:0000000000219908                 db    ? ;
.bss:0000000000219909                 db    ? ;
.bss:000000000021990A                 db    ? ;
.bss:000000000021990B                 db    ? ;
.bss:000000000021990C                 db    ? ;
.bss:000000000021990D                 db    ? ;
.bss:000000000021990E                 db    ? ;
.bss:000000000021990F                 db    ? ;
.bss:0000000000219910                 db    ? ;
.bss:0000000000219911                 db    ? ;
.bss:0000000000219912                 db    ? ;
.bss:0000000000219913                 db    ? ;
.bss:0000000000219914                 db    ? ;
.bss:0000000000219915                 db    ? ;
.bss:0000000000219916                 db    ? ;
.bss:0000000000219917                 db    ? ;
.bss:0000000000219918                 db    ? ;
.bss:0000000000219919                 db    ? ;
.bss:000000000021991A                 db    ? ;
.bss:000000000021991B                 db    ? ;
.bss:000000000021991C                 db    ? ;
.bss:000000000021991D                 db    ? ;
.bss:000000000021991E                 db    ? ;
.bss:000000000021991F                 db    ? ;
.bss:0000000000219920                 db    ? ;
.bss:0000000000219921                 db    ? ;
.bss:0000000000219922                 db    ? ;
.bss:0000000000219923                 db    ? ;
.bss:0000000000219924                 db    ? ;
.bss:0000000000219925                 db    ? ;
.bss:0000000000219926                 db    ? ;
.bss:0000000000219927                 db    ? ;
.bss:0000000000219928                 db    ? ;
.bss:0000000000219929                 db    ? ;
.bss:000000000021992A                 db    ? ;
.bss:000000000021992B                 db    ? ;
.bss:000000000021992C                 db    ? ;
.bss:000000000021992D                 db    ? ;
.bss:000000000021992E                 db    ? ;
.bss:000000000021992F                 db    ? ;
.bss:0000000000219930                 db    ? ;
.bss:0000000000219931                 db    ? ;
.bss:0000000000219932                 db    ? ;
.bss:0000000000219933                 db    ? ;
.bss:0000000000219934                 db    ? ;
.bss:0000000000219935                 db    ? ;
.bss:0000000000219936                 db    ? ;
.bss:0000000000219937                 db    ? ;
.bss:0000000000219938                 db    ? ;
.bss:0000000000219939                 db    ? ;
.bss:000000000021993A                 db    ? ;
.bss:000000000021993B                 db    ? ;
.bss:000000000021993C                 db    ? ;
.bss:000000000021993D                 db    ? ;
.bss:000000000021993E                 db    ? ;
.bss:000000000021993F                 db    ? ;
.bss:0000000000219940                 db    ? ;
.bss:0000000000219941                 db    ? ;
.bss:0000000000219942                 db    ? ;
.bss:0000000000219943                 db    ? ;
.bss:0000000000219944                 db    ? ;
.bss:0000000000219945                 db    ? ;
.bss:0000000000219946                 db    ? ;
.bss:0000000000219947                 db    ? ;
.bss:0000000000219948                 db    ? ;
.bss:0000000000219949                 db    ? ;
.bss:000000000021994A                 db    ? ;
.bss:000000000021994B                 db    ? ;
.bss:000000000021994C                 db    ? ;
.bss:000000000021994D                 db    ? ;
.bss:000000000021994E                 db    ? ;
.bss:000000000021994F                 db    ? ;
.bss:0000000000219950                 db    ? ;
.bss:0000000000219951                 db    ? ;
.bss:0000000000219952                 db    ? ;
.bss:0000000000219953                 db    ? ;
.bss:0000000000219954                 db    ? ;
.bss:0000000000219955                 db    ? ;
.bss:0000000000219956                 db    ? ;
.bss:0000000000219957                 db    ? ;
.bss:0000000000219958                 db    ? ;
.bss:0000000000219959                 db    ? ;
.bss:000000000021995A                 db    ? ;
.bss:000000000021995B                 db    ? ;
.bss:000000000021995C                 db    ? ;
.bss:000000000021995D                 db    ? ;
.bss:000000000021995E                 db    ? ;
.bss:000000000021995F                 db    ? ;
.bss:0000000000219960                 db    ? ;
.bss:0000000000219961                 db    ? ;
.bss:0000000000219962                 db    ? ;
.bss:0000000000219963                 db    ? ;
.bss:0000000000219964                 db    ? ;
.bss:0000000000219965                 db    ? ;
.bss:0000000000219966                 db    ? ;
.bss:0000000000219967                 db    ? ;
.bss:0000000000219968                 db    ? ;
.bss:0000000000219969                 db    ? ;
.bss:000000000021996A                 db    ? ;
.bss:000000000021996B                 db    ? ;
.bss:000000000021996C                 db    ? ;
.bss:000000000021996D                 db    ? ;
.bss:000000000021996E                 db    ? ;
.bss:000000000021996F                 db    ? ;
.bss:0000000000219970                 db    ? ;
.bss:0000000000219971                 db    ? ;
.bss:0000000000219972                 db    ? ;
.bss:0000000000219973                 db    ? ;
.bss:0000000000219974                 db    ? ;
.bss:0000000000219975                 db    ? ;
.bss:0000000000219976                 db    ? ;
.bss:0000000000219977                 db    ? ;
.bss:0000000000219978                 db    ? ;
.bss:0000000000219979                 db    ? ;
.bss:000000000021997A                 db    ? ;
.bss:000000000021997B                 db    ? ;
.bss:000000000021997C                 db    ? ;
.bss:000000000021997D                 db    ? ;
.bss:000000000021997E                 db    ? ;
.bss:000000000021997F                 db    ? ;
.bss:0000000000219980                 db    ? ;
.bss:0000000000219981                 db    ? ;
.bss:0000000000219982                 db    ? ;
.bss:0000000000219983                 db    ? ;
.bss:0000000000219984                 db    ? ;
.bss:0000000000219985                 db    ? ;
.bss:0000000000219986                 db    ? ;
.bss:0000000000219987                 db    ? ;
.bss:0000000000219988                 db    ? ;
.bss:0000000000219989                 db    ? ;
.bss:000000000021998A                 db    ? ;
.bss:000000000021998B                 db    ? ;
.bss:000000000021998C                 db    ? ;
.bss:000000000021998D                 db    ? ;
.bss:000000000021998E                 db    ? ;
.bss:000000000021998F                 db    ? ;
.bss:0000000000219990                 db    ? ;
.bss:0000000000219991                 db    ? ;
.bss:0000000000219992                 db    ? ;
.bss:0000000000219993                 db    ? ;
.bss:0000000000219994                 db    ? ;
.bss:0000000000219995                 db    ? ;
.bss:0000000000219996                 db    ? ;
.bss:0000000000219997                 db    ? ;
.bss:0000000000219998                 db    ? ;
.bss:0000000000219999                 db    ? ;
.bss:000000000021999A                 db    ? ;
.bss:000000000021999B                 db    ? ;
.bss:000000000021999C                 db    ? ;
.bss:000000000021999D                 db    ? ;
.bss:000000000021999E                 db    ? ;
.bss:000000000021999F                 db    ? ;
.bss:00000000002199A0                 db    ? ;
.bss:00000000002199A1                 db    ? ;
.bss:00000000002199A2                 db    ? ;
.bss:00000000002199A3                 db    ? ;
.bss:00000000002199A4                 db    ? ;
.bss:00000000002199A5                 db    ? ;
.bss:00000000002199A6                 db    ? ;
.bss:00000000002199A7                 db    ? ;
.bss:00000000002199A8                 db    ? ;
.bss:00000000002199A9                 db    ? ;
.bss:00000000002199AA                 db    ? ;
.bss:00000000002199AB                 db    ? ;
.bss:00000000002199AC                 db    ? ;
.bss:00000000002199AD                 db    ? ;
.bss:00000000002199AE                 db    ? ;
.bss:00000000002199AF                 db    ? ;
.bss:00000000002199B0                 db    ? ;
.bss:00000000002199B1                 db    ? ;
.bss:00000000002199B2                 db    ? ;
.bss:00000000002199B3                 db    ? ;
.bss:00000000002199B4                 db    ? ;
.bss:00000000002199B5                 db    ? ;
.bss:00000000002199B6                 db    ? ;
.bss:00000000002199B7                 db    ? ;
.bss:00000000002199B8                 db    ? ;
.bss:00000000002199B9                 db    ? ;
.bss:00000000002199BA                 db    ? ;
.bss:00000000002199BB                 db    ? ;
.bss:00000000002199BC                 db    ? ;
.bss:00000000002199BD                 db    ? ;
.bss:00000000002199BE                 db    ? ;
.bss:00000000002199BF                 db    ? ;
.bss:00000000002199C0                 db    ? ;
.bss:00000000002199C1                 db    ? ;
.bss:00000000002199C2                 db    ? ;
.bss:00000000002199C3                 db    ? ;
.bss:00000000002199C4                 db    ? ;
.bss:00000000002199C5                 db    ? ;
.bss:00000000002199C6                 db    ? ;
.bss:00000000002199C7                 db    ? ;
.bss:00000000002199C8                 db    ? ;
.bss:00000000002199C9                 db    ? ;
.bss:00000000002199CA                 db    ? ;
.bss:00000000002199CB                 db    ? ;
.bss:00000000002199CC                 db    ? ;
.bss:00000000002199CD                 db    ? ;
.bss:00000000002199CE                 db    ? ;
.bss:00000000002199CF                 db    ? ;
.bss:00000000002199D0                 db    ? ;
.bss:00000000002199D1                 db    ? ;
.bss:00000000002199D2                 db    ? ;
.bss:00000000002199D3                 db    ? ;
.bss:00000000002199D4                 db    ? ;
.bss:00000000002199D5                 db    ? ;
.bss:00000000002199D6                 db    ? ;
.bss:00000000002199D7                 db    ? ;
.bss:00000000002199D8                 db    ? ;
.bss:00000000002199D9                 db    ? ;
.bss:00000000002199DA                 db    ? ;
.bss:00000000002199DB                 db    ? ;
.bss:00000000002199DC                 db    ? ;
.bss:00000000002199DD                 db    ? ;
.bss:00000000002199DE                 db    ? ;
.bss:00000000002199DF                 db    ? ;
.bss:00000000002199E0                 db    ? ;
.bss:00000000002199E1                 db    ? ;
.bss:00000000002199E2                 db    ? ;
.bss:00000000002199E3                 db    ? ;
.bss:00000000002199E4                 db    ? ;
.bss:00000000002199E5                 db    ? ;
.bss:00000000002199E6                 db    ? ;
.bss:00000000002199E7                 db    ? ;
.bss:00000000002199E8                 db    ? ;
.bss:00000000002199E9                 db    ? ;
.bss:00000000002199EA                 db    ? ;
.bss:00000000002199EB                 db    ? ;
.bss:00000000002199EC                 db    ? ;
.bss:00000000002199ED                 db    ? ;
.bss:00000000002199EE                 db    ? ;
.bss:00000000002199EF                 db    ? ;
.bss:00000000002199F0                 db    ? ;
.bss:00000000002199F1                 db    ? ;
.bss:00000000002199F2                 db    ? ;
.bss:00000000002199F3                 db    ? ;
.bss:00000000002199F4                 db    ? ;
.bss:00000000002199F5                 db    ? ;
.bss:00000000002199F6                 db    ? ;
.bss:00000000002199F7                 db    ? ;
.bss:00000000002199F8                 db    ? ;
.bss:00000000002199F9                 db    ? ;
.bss:00000000002199FA                 db    ? ;
.bss:00000000002199FB                 db    ? ;
.bss:00000000002199FC                 db    ? ;
.bss:00000000002199FD                 db    ? ;
.bss:00000000002199FE                 db    ? ;
.bss:00000000002199FF                 db    ? ;
.bss:0000000000219A00                 db    ? ;
.bss:0000000000219A01                 db    ? ;
.bss:0000000000219A02                 db    ? ;
.bss:0000000000219A03                 db    ? ;
.bss:0000000000219A04                 db    ? ;
.bss:0000000000219A05                 db    ? ;
.bss:0000000000219A06                 db    ? ;
.bss:0000000000219A07                 db    ? ;
.bss:0000000000219A08                 db    ? ;
.bss:0000000000219A09                 db    ? ;
.bss:0000000000219A0A                 db    ? ;
.bss:0000000000219A0B                 db    ? ;
.bss:0000000000219A0C                 db    ? ;
.bss:0000000000219A0D                 db    ? ;
.bss:0000000000219A0E                 db    ? ;
.bss:0000000000219A0F                 db    ? ;
.bss:0000000000219A10                 db    ? ;
.bss:0000000000219A11                 db    ? ;
.bss:0000000000219A12                 db    ? ;
.bss:0000000000219A13                 db    ? ;
.bss:0000000000219A14                 db    ? ;
.bss:0000000000219A15                 db    ? ;
.bss:0000000000219A16                 db    ? ;
.bss:0000000000219A17                 db    ? ;
.bss:0000000000219A18                 db    ? ;
.bss:0000000000219A19                 db    ? ;
.bss:0000000000219A1A                 db    ? ;
.bss:0000000000219A1B                 db    ? ;
.bss:0000000000219A1C                 db    ? ;
.bss:0000000000219A1D                 db    ? ;
.bss:0000000000219A1E                 db    ? ;
.bss:0000000000219A1F                 db    ? ;
.bss:0000000000219A20                 db    ? ;
.bss:0000000000219A21                 db    ? ;
.bss:0000000000219A22                 db    ? ;
.bss:0000000000219A23                 db    ? ;
.bss:0000000000219A24                 db    ? ;
.bss:0000000000219A25                 db    ? ;
.bss:0000000000219A26                 db    ? ;
.bss:0000000000219A27                 db    ? ;
.bss:0000000000219A28                 db    ? ;
.bss:0000000000219A29                 db    ? ;
.bss:0000000000219A2A                 db    ? ;
.bss:0000000000219A2B                 db    ? ;
.bss:0000000000219A2C                 db    ? ;
.bss:0000000000219A2D                 db    ? ;
.bss:0000000000219A2E                 db    ? ;
.bss:0000000000219A2F                 db    ? ;
.bss:0000000000219A30                 db    ? ;
.bss:0000000000219A31                 db    ? ;
.bss:0000000000219A32                 db    ? ;
.bss:0000000000219A33                 db    ? ;
.bss:0000000000219A34                 db    ? ;
.bss:0000000000219A35                 db    ? ;
.bss:0000000000219A36                 db    ? ;
.bss:0000000000219A37                 db    ? ;
.bss:0000000000219A38                 db    ? ;
.bss:0000000000219A39                 db    ? ;
.bss:0000000000219A3A                 db    ? ;
.bss:0000000000219A3B                 db    ? ;
.bss:0000000000219A3C                 db    ? ;
.bss:0000000000219A3D                 db    ? ;
.bss:0000000000219A3E                 db    ? ;
.bss:0000000000219A3F                 db    ? ;
.bss:0000000000219A40                 db    ? ;
.bss:0000000000219A41                 db    ? ;
.bss:0000000000219A42                 db    ? ;
.bss:0000000000219A43                 db    ? ;
.bss:0000000000219A44                 db    ? ;
.bss:0000000000219A45                 db    ? ;
.bss:0000000000219A46                 db    ? ;
.bss:0000000000219A47                 db    ? ;
.bss:0000000000219A48                 db    ? ;
.bss:0000000000219A49                 db    ? ;
.bss:0000000000219A4A                 db    ? ;
.bss:0000000000219A4B                 db    ? ;
.bss:0000000000219A4C                 db    ? ;
.bss:0000000000219A4D                 db    ? ;
.bss:0000000000219A4E                 db    ? ;
.bss:0000000000219A4F                 db    ? ;
.bss:0000000000219A50                 db    ? ;
.bss:0000000000219A51                 db    ? ;
.bss:0000000000219A52                 db    ? ;
.bss:0000000000219A53                 db    ? ;
.bss:0000000000219A54                 db    ? ;
.bss:0000000000219A55                 db    ? ;
.bss:0000000000219A56                 db    ? ;
.bss:0000000000219A57                 db    ? ;
.bss:0000000000219A58                 db    ? ;
.bss:0000000000219A59                 db    ? ;
.bss:0000000000219A5A                 db    ? ;
.bss:0000000000219A5B                 db    ? ;
.bss:0000000000219A5C                 db    ? ;
.bss:0000000000219A5D                 db    ? ;
.bss:0000000000219A5E                 db    ? ;
.bss:0000000000219A5F                 db    ? ;
.bss:0000000000219A60                 db    ? ;
.bss:0000000000219A61                 db    ? ;
.bss:0000000000219A62                 db    ? ;
.bss:0000000000219A63                 db    ? ;
.bss:0000000000219A64                 db    ? ;
.bss:0000000000219A65                 db    ? ;
.bss:0000000000219A66                 db    ? ;
.bss:0000000000219A67                 db    ? ;
.bss:0000000000219A68                 db    ? ;
.bss:0000000000219A69                 db    ? ;
.bss:0000000000219A6A                 db    ? ;
.bss:0000000000219A6B                 db    ? ;
.bss:0000000000219A6C                 db    ? ;
.bss:0000000000219A6D                 db    ? ;
.bss:0000000000219A6E                 db    ? ;
.bss:0000000000219A6F                 db    ? ;
.bss:0000000000219A70                 db    ? ;
.bss:0000000000219A71                 db    ? ;
.bss:0000000000219A72                 db    ? ;
.bss:0000000000219A73                 db    ? ;
.bss:0000000000219A74                 db    ? ;
.bss:0000000000219A75                 db    ? ;
.bss:0000000000219A76                 db    ? ;
.bss:0000000000219A77                 db    ? ;
.bss:0000000000219A78                 db    ? ;
.bss:0000000000219A79                 db    ? ;
.bss:0000000000219A7A                 db    ? ;
.bss:0000000000219A7B                 db    ? ;
.bss:0000000000219A7C                 db    ? ;
.bss:0000000000219A7D                 db    ? ;
.bss:0000000000219A7E                 db    ? ;
.bss:0000000000219A7F                 db    ? ;
.bss:0000000000219A80                 db    ? ;
.bss:0000000000219A81                 db    ? ;
.bss:0000000000219A82                 db    ? ;
.bss:0000000000219A83                 db    ? ;
.bss:0000000000219A84                 db    ? ;
.bss:0000000000219A85                 db    ? ;
.bss:0000000000219A86                 db    ? ;
.bss:0000000000219A87                 db    ? ;
.bss:0000000000219A88                 db    ? ;
.bss:0000000000219A89                 db    ? ;
.bss:0000000000219A8A                 db    ? ;
.bss:0000000000219A8B                 db    ? ;
.bss:0000000000219A8C                 db    ? ;
.bss:0000000000219A8D                 db    ? ;
.bss:0000000000219A8E                 db    ? ;
.bss:0000000000219A8F                 db    ? ;
.bss:0000000000219A90                 db    ? ;
.bss:0000000000219A91                 db    ? ;
.bss:0000000000219A92                 db    ? ;
.bss:0000000000219A93                 db    ? ;
.bss:0000000000219A94                 db    ? ;
.bss:0000000000219A95                 db    ? ;
.bss:0000000000219A96                 db    ? ;
.bss:0000000000219A97                 db    ? ;
.bss:0000000000219A98                 db    ? ;
.bss:0000000000219A99                 db    ? ;
.bss:0000000000219A9A                 db    ? ;
.bss:0000000000219A9B                 db    ? ;
.bss:0000000000219A9C                 db    ? ;
.bss:0000000000219A9D                 db    ? ;
.bss:0000000000219A9E                 db    ? ;
.bss:0000000000219A9F                 db    ? ;
.bss:0000000000219AA0                 db    ? ;
.bss:0000000000219AA1                 db    ? ;
.bss:0000000000219AA2                 db    ? ;
.bss:0000000000219AA3                 db    ? ;
.bss:0000000000219AA4                 db    ? ;
.bss:0000000000219AA5                 db    ? ;
.bss:0000000000219AA6                 db    ? ;
.bss:0000000000219AA7                 db    ? ;
.bss:0000000000219AA8                 db    ? ;
.bss:0000000000219AA9                 db    ? ;
.bss:0000000000219AAA                 db    ? ;
.bss:0000000000219AAB                 db    ? ;
.bss:0000000000219AAC                 db    ? ;
.bss:0000000000219AAD                 db    ? ;
.bss:0000000000219AAE                 db    ? ;
.bss:0000000000219AAF                 db    ? ;
.bss:0000000000219AB0                 db    ? ;
.bss:0000000000219AB1                 db    ? ;
.bss:0000000000219AB2                 db    ? ;
.bss:0000000000219AB3                 db    ? ;
.bss:0000000000219AB4                 db    ? ;
.bss:0000000000219AB5                 db    ? ;
.bss:0000000000219AB6                 db    ? ;
.bss:0000000000219AB7                 db    ? ;
.bss:0000000000219AB8                 db    ? ;
.bss:0000000000219AB9                 db    ? ;
.bss:0000000000219ABA                 db    ? ;
.bss:0000000000219ABB                 db    ? ;
.bss:0000000000219ABC                 db    ? ;
.bss:0000000000219ABD                 db    ? ;
.bss:0000000000219ABE                 db    ? ;
.bss:0000000000219ABF                 db    ? ;
.bss:0000000000219AC0                 db    ? ;
.bss:0000000000219AC1                 db    ? ;
.bss:0000000000219AC2                 db    ? ;
.bss:0000000000219AC3                 db    ? ;
.bss:0000000000219AC4                 db    ? ;
.bss:0000000000219AC5                 db    ? ;
.bss:0000000000219AC6                 db    ? ;
.bss:0000000000219AC7                 db    ? ;
.bss:0000000000219AC8                 db    ? ;
.bss:0000000000219AC9                 db    ? ;
.bss:0000000000219ACA                 db    ? ;
.bss:0000000000219ACB                 db    ? ;
.bss:0000000000219ACC                 db    ? ;
.bss:0000000000219ACD                 db    ? ;
.bss:0000000000219ACE                 db    ? ;
.bss:0000000000219ACF                 db    ? ;
.bss:0000000000219AD0                 db    ? ;
.bss:0000000000219AD1                 db    ? ;
.bss:0000000000219AD2                 db    ? ;
.bss:0000000000219AD3                 db    ? ;
.bss:0000000000219AD4                 db    ? ;
.bss:0000000000219AD5                 db    ? ;
.bss:0000000000219AD6                 db    ? ;
.bss:0000000000219AD7                 db    ? ;
.bss:0000000000219AD8                 db    ? ;
.bss:0000000000219AD9                 db    ? ;
.bss:0000000000219ADA                 db    ? ;
.bss:0000000000219ADB                 db    ? ;
.bss:0000000000219ADC                 db    ? ;
.bss:0000000000219ADD                 db    ? ;
.bss:0000000000219ADE                 db    ? ;
.bss:0000000000219ADF                 db    ? ;
.bss:0000000000219AE0                 db    ? ;
.bss:0000000000219AE1                 db    ? ;
.bss:0000000000219AE2                 db    ? ;
.bss:0000000000219AE3                 db    ? ;
.bss:0000000000219AE4                 db    ? ;
.bss:0000000000219AE5                 db    ? ;
.bss:0000000000219AE6                 db    ? ;
.bss:0000000000219AE7                 db    ? ;
.bss:0000000000219AE8                 db    ? ;
.bss:0000000000219AE9                 db    ? ;
.bss:0000000000219AEA                 db    ? ;
.bss:0000000000219AEB                 db    ? ;
.bss:0000000000219AEC                 db    ? ;
.bss:0000000000219AED                 db    ? ;
.bss:0000000000219AEE                 db    ? ;
.bss:0000000000219AEF                 db    ? ;
.bss:0000000000219AF0                 db    ? ;
.bss:0000000000219AF1                 db    ? ;
.bss:0000000000219AF2                 db    ? ;
.bss:0000000000219AF3                 db    ? ;
.bss:0000000000219AF4                 db    ? ;
.bss:0000000000219AF5                 db    ? ;
.bss:0000000000219AF6                 db    ? ;
.bss:0000000000219AF7                 db    ? ;
.bss:0000000000219AF8                 db    ? ;
.bss:0000000000219AF9                 db    ? ;
.bss:0000000000219AFA                 db    ? ;
.bss:0000000000219AFB                 db    ? ;
.bss:0000000000219AFC                 db    ? ;
.bss:0000000000219AFD                 db    ? ;
.bss:0000000000219AFE                 db    ? ;
.bss:0000000000219AFF                 db    ? ;
.bss:0000000000219B00                 db    ? ;
.bss:0000000000219B01                 db    ? ;
.bss:0000000000219B02                 db    ? ;
.bss:0000000000219B03                 db    ? ;
.bss:0000000000219B04                 db    ? ;
.bss:0000000000219B05                 db    ? ;
.bss:0000000000219B06                 db    ? ;
.bss:0000000000219B07                 db    ? ;
.bss:0000000000219B08                 db    ? ;
.bss:0000000000219B09                 db    ? ;
.bss:0000000000219B0A                 db    ? ;
.bss:0000000000219B0B                 db    ? ;
.bss:0000000000219B0C                 db    ? ;
.bss:0000000000219B0D                 db    ? ;
.bss:0000000000219B0E                 db    ? ;
.bss:0000000000219B0F                 db    ? ;
.bss:0000000000219B10                 db    ? ;
.bss:0000000000219B11                 db    ? ;
.bss:0000000000219B12                 db    ? ;
.bss:0000000000219B13                 db    ? ;
.bss:0000000000219B14                 db    ? ;
.bss:0000000000219B15                 db    ? ;
.bss:0000000000219B16                 db    ? ;
.bss:0000000000219B17                 db    ? ;
.bss:0000000000219B18                 db    ? ;
.bss:0000000000219B19                 db    ? ;
.bss:0000000000219B1A                 db    ? ;
.bss:0000000000219B1B                 db    ? ;
.bss:0000000000219B1C                 db    ? ;
.bss:0000000000219B1D                 db    ? ;
.bss:0000000000219B1E                 db    ? ;
.bss:0000000000219B1F                 db    ? ;
.bss:0000000000219B20                 db    ? ;
.bss:0000000000219B21                 db    ? ;
.bss:0000000000219B22                 db    ? ;
.bss:0000000000219B23                 db    ? ;
.bss:0000000000219B24                 db    ? ;
.bss:0000000000219B25                 db    ? ;
.bss:0000000000219B26                 db    ? ;
.bss:0000000000219B27                 db    ? ;
.bss:0000000000219B28                 db    ? ;
.bss:0000000000219B29                 db    ? ;
.bss:0000000000219B2A                 db    ? ;
.bss:0000000000219B2B                 db    ? ;
.bss:0000000000219B2C                 db    ? ;
.bss:0000000000219B2D                 db    ? ;
.bss:0000000000219B2E                 db    ? ;
.bss:0000000000219B2F                 db    ? ;
.bss:0000000000219B30                 db    ? ;
.bss:0000000000219B31                 db    ? ;
.bss:0000000000219B32                 db    ? ;
.bss:0000000000219B33                 db    ? ;
.bss:0000000000219B34                 db    ? ;
.bss:0000000000219B35                 db    ? ;
.bss:0000000000219B36                 db    ? ;
.bss:0000000000219B37                 db    ? ;
.bss:0000000000219B38                 db    ? ;
.bss:0000000000219B39                 db    ? ;
.bss:0000000000219B3A                 db    ? ;
.bss:0000000000219B3B                 db    ? ;
.bss:0000000000219B3C                 db    ? ;
.bss:0000000000219B3D                 db    ? ;
.bss:0000000000219B3E                 db    ? ;
.bss:0000000000219B3F                 db    ? ;
.bss:0000000000219B40                 db    ? ;
.bss:0000000000219B41                 db    ? ;
.bss:0000000000219B42                 db    ? ;
.bss:0000000000219B43                 db    ? ;
.bss:0000000000219B44                 db    ? ;
.bss:0000000000219B45                 db    ? ;
.bss:0000000000219B46                 db    ? ;
.bss:0000000000219B47                 db    ? ;
.bss:0000000000219B48                 db    ? ;
.bss:0000000000219B49                 db    ? ;
.bss:0000000000219B4A                 db    ? ;
.bss:0000000000219B4B                 db    ? ;
.bss:0000000000219B4C                 db    ? ;
.bss:0000000000219B4D                 db    ? ;
.bss:0000000000219B4E                 db    ? ;
.bss:0000000000219B4F                 db    ? ;
.bss:0000000000219B50                 db    ? ;
.bss:0000000000219B51                 db    ? ;
.bss:0000000000219B52                 db    ? ;
.bss:0000000000219B53                 db    ? ;
.bss:0000000000219B54                 db    ? ;
.bss:0000000000219B55                 db    ? ;
.bss:0000000000219B56                 db    ? ;
.bss:0000000000219B57                 db    ? ;
.bss:0000000000219B58                 db    ? ;
.bss:0000000000219B59                 db    ? ;
.bss:0000000000219B5A                 db    ? ;
.bss:0000000000219B5B                 db    ? ;
.bss:0000000000219B5C                 db    ? ;
.bss:0000000000219B5D                 db    ? ;
.bss:0000000000219B5E                 db    ? ;
.bss:0000000000219B5F                 db    ? ;
.bss:0000000000219B60                 db    ? ;
.bss:0000000000219B61                 db    ? ;
.bss:0000000000219B62                 db    ? ;
.bss:0000000000219B63                 db    ? ;
.bss:0000000000219B64                 db    ? ;
.bss:0000000000219B65                 db    ? ;
.bss:0000000000219B66                 db    ? ;
.bss:0000000000219B67                 db    ? ;
.bss:0000000000219B68                 db    ? ;
.bss:0000000000219B69                 db    ? ;
.bss:0000000000219B6A                 db    ? ;
.bss:0000000000219B6B                 db    ? ;
.bss:0000000000219B6C                 db    ? ;
.bss:0000000000219B6D                 db    ? ;
.bss:0000000000219B6E                 db    ? ;
.bss:0000000000219B6F                 db    ? ;
.bss:0000000000219B70                 db    ? ;
.bss:0000000000219B71                 db    ? ;
.bss:0000000000219B72                 db    ? ;
.bss:0000000000219B73                 db    ? ;
.bss:0000000000219B74                 db    ? ;
.bss:0000000000219B75                 db    ? ;
.bss:0000000000219B76                 db    ? ;
.bss:0000000000219B77                 db    ? ;
.bss:0000000000219B78                 db    ? ;
.bss:0000000000219B79                 db    ? ;
.bss:0000000000219B7A                 db    ? ;
.bss:0000000000219B7B                 db    ? ;
.bss:0000000000219B7C                 db    ? ;
.bss:0000000000219B7D                 db    ? ;
.bss:0000000000219B7E                 db    ? ;
.bss:0000000000219B7F                 db    ? ;
.bss:0000000000219B80                 db    ? ;
.bss:0000000000219B81                 db    ? ;
.bss:0000000000219B82                 db    ? ;
.bss:0000000000219B83                 db    ? ;
.bss:0000000000219B84                 db    ? ;
.bss:0000000000219B85                 db    ? ;
.bss:0000000000219B86                 db    ? ;
.bss:0000000000219B87                 db    ? ;
.bss:0000000000219B88                 db    ? ;
.bss:0000000000219B89                 db    ? ;
.bss:0000000000219B8A                 db    ? ;
.bss:0000000000219B8B                 db    ? ;
.bss:0000000000219B8C                 db    ? ;
.bss:0000000000219B8D                 db    ? ;
.bss:0000000000219B8E                 db    ? ;
.bss:0000000000219B8F                 db    ? ;
.bss:0000000000219B90                 db    ? ;
.bss:0000000000219B91                 db    ? ;
.bss:0000000000219B92                 db    ? ;
.bss:0000000000219B93                 db    ? ;
.bss:0000000000219B94                 db    ? ;
.bss:0000000000219B95                 db    ? ;
.bss:0000000000219B96                 db    ? ;
.bss:0000000000219B97                 db    ? ;
.bss:0000000000219B98                 db    ? ;
.bss:0000000000219B99                 db    ? ;
.bss:0000000000219B9A                 db    ? ;
.bss:0000000000219B9B                 db    ? ;
.bss:0000000000219B9C                 db    ? ;
.bss:0000000000219B9D                 db    ? ;
.bss:0000000000219B9E                 db    ? ;
.bss:0000000000219B9F                 db    ? ;
.bss:0000000000219BA0                 db    ? ;
.bss:0000000000219BA1                 db    ? ;
.bss:0000000000219BA2                 db    ? ;
.bss:0000000000219BA3                 db    ? ;
.bss:0000000000219BA4                 db    ? ;
.bss:0000000000219BA5                 db    ? ;
.bss:0000000000219BA6                 db    ? ;
.bss:0000000000219BA7                 db    ? ;
.bss:0000000000219BA8                 db    ? ;
.bss:0000000000219BA9                 db    ? ;
.bss:0000000000219BAA                 db    ? ;
.bss:0000000000219BAB                 db    ? ;
.bss:0000000000219BAC                 db    ? ;
.bss:0000000000219BAD                 db    ? ;
.bss:0000000000219BAE                 db    ? ;
.bss:0000000000219BAF                 db    ? ;
.bss:0000000000219BB0                 db    ? ;
.bss:0000000000219BB1                 db    ? ;
.bss:0000000000219BB2                 db    ? ;
.bss:0000000000219BB3                 db    ? ;
.bss:0000000000219BB4                 db    ? ;
.bss:0000000000219BB5                 db    ? ;
.bss:0000000000219BB6                 db    ? ;
.bss:0000000000219BB7                 db    ? ;
.bss:0000000000219BB8                 db    ? ;
.bss:0000000000219BB9                 db    ? ;
.bss:0000000000219BBA                 db    ? ;
.bss:0000000000219BBB                 db    ? ;
.bss:0000000000219BBC                 db    ? ;
.bss:0000000000219BBD                 db    ? ;
.bss:0000000000219BBE                 db    ? ;
.bss:0000000000219BBF                 db    ? ;
.bss:0000000000219BC0                 db    ? ;
.bss:0000000000219BC1                 db    ? ;
.bss:0000000000219BC2                 db    ? ;
.bss:0000000000219BC3                 db    ? ;
.bss:0000000000219BC4                 db    ? ;
.bss:0000000000219BC5                 db    ? ;
.bss:0000000000219BC6                 db    ? ;
.bss:0000000000219BC7                 db    ? ;
.bss:0000000000219BC8                 db    ? ;
.bss:0000000000219BC9                 db    ? ;
.bss:0000000000219BCA                 db    ? ;
.bss:0000000000219BCB                 db    ? ;
.bss:0000000000219BCC                 db    ? ;
.bss:0000000000219BCD                 db    ? ;
.bss:0000000000219BCE                 db    ? ;
.bss:0000000000219BCF                 db    ? ;
.bss:0000000000219BD0                 db    ? ;
.bss:0000000000219BD1                 db    ? ;
.bss:0000000000219BD2                 db    ? ;
.bss:0000000000219BD3                 db    ? ;
.bss:0000000000219BD4                 db    ? ;
.bss:0000000000219BD5                 db    ? ;
.bss:0000000000219BD6                 db    ? ;
.bss:0000000000219BD7                 db    ? ;
.bss:0000000000219BD8                 db    ? ;
.bss:0000000000219BD9                 db    ? ;
.bss:0000000000219BDA                 db    ? ;
.bss:0000000000219BDB                 db    ? ;
.bss:0000000000219BDC                 db    ? ;
.bss:0000000000219BDD                 db    ? ;
.bss:0000000000219BDE                 db    ? ;
.bss:0000000000219BDF                 db    ? ;
.bss:0000000000219BE0                 db    ? ;
.bss:0000000000219BE1                 db    ? ;
.bss:0000000000219BE2                 db    ? ;
.bss:0000000000219BE3                 db    ? ;
.bss:0000000000219BE4                 db    ? ;
.bss:0000000000219BE5                 db    ? ;
.bss:0000000000219BE6                 db    ? ;
.bss:0000000000219BE7                 db    ? ;
.bss:0000000000219BE8                 db    ? ;
.bss:0000000000219BE9                 db    ? ;
.bss:0000000000219BEA                 db    ? ;
.bss:0000000000219BEB                 db    ? ;
.bss:0000000000219BEC                 db    ? ;
.bss:0000000000219BED                 db    ? ;
.bss:0000000000219BEE                 db    ? ;
.bss:0000000000219BEF                 db    ? ;
.bss:0000000000219BF0                 db    ? ;
.bss:0000000000219BF1                 db    ? ;
.bss:0000000000219BF2                 db    ? ;
.bss:0000000000219BF3                 db    ? ;
.bss:0000000000219BF4                 db    ? ;
.bss:0000000000219BF5                 db    ? ;
.bss:0000000000219BF6                 db    ? ;
.bss:0000000000219BF7                 db    ? ;
.bss:0000000000219BF8                 db    ? ;
.bss:0000000000219BF9                 db    ? ;
.bss:0000000000219BFA                 db    ? ;
.bss:0000000000219BFB                 db    ? ;
.bss:0000000000219BFC                 db    ? ;
.bss:0000000000219BFD                 db    ? ;
.bss:0000000000219BFE                 db    ? ;
.bss:0000000000219BFF                 db    ? ;
.bss:0000000000219C00                 db    ? ;
.bss:0000000000219C01                 db    ? ;
.bss:0000000000219C02                 db    ? ;
.bss:0000000000219C03                 db    ? ;
.bss:0000000000219C04                 db    ? ;
.bss:0000000000219C05                 db    ? ;
.bss:0000000000219C06                 db    ? ;
.bss:0000000000219C07                 db    ? ;
.bss:0000000000219C08                 db    ? ;
.bss:0000000000219C09                 db    ? ;
.bss:0000000000219C0A                 db    ? ;
.bss:0000000000219C0B                 db    ? ;
.bss:0000000000219C0C                 db    ? ;
.bss:0000000000219C0D                 db    ? ;
.bss:0000000000219C0E                 db    ? ;
.bss:0000000000219C0F                 db    ? ;
.bss:0000000000219C10                 db    ? ;
.bss:0000000000219C11                 db    ? ;
.bss:0000000000219C12                 db    ? ;
.bss:0000000000219C13                 db    ? ;
.bss:0000000000219C14                 db    ? ;
.bss:0000000000219C15                 db    ? ;
.bss:0000000000219C16                 db    ? ;
.bss:0000000000219C17                 db    ? ;
.bss:0000000000219C18                 db    ? ;
.bss:0000000000219C19                 db    ? ;
.bss:0000000000219C1A                 db    ? ;
.bss:0000000000219C1B                 db    ? ;
.bss:0000000000219C1C                 db    ? ;
.bss:0000000000219C1D                 db    ? ;
.bss:0000000000219C1E                 db    ? ;
.bss:0000000000219C1F                 db    ? ;
.bss:0000000000219C20                 db    ? ;
.bss:0000000000219C21                 db    ? ;
.bss:0000000000219C22                 db    ? ;
.bss:0000000000219C23                 db    ? ;
.bss:0000000000219C24                 db    ? ;
.bss:0000000000219C25                 db    ? ;
.bss:0000000000219C26                 db    ? ;
.bss:0000000000219C27                 db    ? ;
.bss:0000000000219C28                 db    ? ;
.bss:0000000000219C29                 db    ? ;
.bss:0000000000219C2A                 db    ? ;
.bss:0000000000219C2B                 db    ? ;
.bss:0000000000219C2C                 db    ? ;
.bss:0000000000219C2D                 db    ? ;
.bss:0000000000219C2E                 db    ? ;
.bss:0000000000219C2F                 db    ? ;
.bss:0000000000219C30                 db    ? ;
.bss:0000000000219C31                 db    ? ;
.bss:0000000000219C32                 db    ? ;
.bss:0000000000219C33                 db    ? ;
.bss:0000000000219C34                 db    ? ;
.bss:0000000000219C35                 db    ? ;
.bss:0000000000219C36                 db    ? ;
.bss:0000000000219C37                 db    ? ;
.bss:0000000000219C38                 db    ? ;
.bss:0000000000219C39                 db    ? ;
.bss:0000000000219C3A                 db    ? ;
.bss:0000000000219C3B                 db    ? ;
.bss:0000000000219C3C                 db    ? ;
.bss:0000000000219C3D                 db    ? ;
.bss:0000000000219C3E                 db    ? ;
.bss:0000000000219C3F                 db    ? ;
.bss:0000000000219C40                 db    ? ;
.bss:0000000000219C41                 db    ? ;
.bss:0000000000219C42                 db    ? ;
.bss:0000000000219C43                 db    ? ;
.bss:0000000000219C44                 db    ? ;
.bss:0000000000219C45                 db    ? ;
.bss:0000000000219C46                 db    ? ;
.bss:0000000000219C47                 db    ? ;
.bss:0000000000219C48                 db    ? ;
.bss:0000000000219C49                 db    ? ;
.bss:0000000000219C4A                 db    ? ;
.bss:0000000000219C4B                 db    ? ;
.bss:0000000000219C4C                 db    ? ;
.bss:0000000000219C4D                 db    ? ;
.bss:0000000000219C4E                 db    ? ;
.bss:0000000000219C4F                 db    ? ;
.bss:0000000000219C50                 db    ? ;
.bss:0000000000219C51                 db    ? ;
.bss:0000000000219C52                 db    ? ;
.bss:0000000000219C53                 db    ? ;
.bss:0000000000219C54                 db    ? ;
.bss:0000000000219C55                 db    ? ;
.bss:0000000000219C56                 db    ? ;
.bss:0000000000219C57                 db    ? ;
.bss:0000000000219C58                 db    ? ;
.bss:0000000000219C59                 db    ? ;
.bss:0000000000219C5A                 db    ? ;
.bss:0000000000219C5B                 db    ? ;
.bss:0000000000219C5C                 db    ? ;
.bss:0000000000219C5D                 db    ? ;
.bss:0000000000219C5E                 db    ? ;
.bss:0000000000219C5F                 db    ? ;
.bss:0000000000219C60                 db    ? ;
.bss:0000000000219C61                 db    ? ;
.bss:0000000000219C62                 db    ? ;
.bss:0000000000219C63                 db    ? ;
.bss:0000000000219C64                 db    ? ;
.bss:0000000000219C65                 db    ? ;
.bss:0000000000219C66                 db    ? ;
.bss:0000000000219C67                 db    ? ;
.bss:0000000000219C68                 db    ? ;
.bss:0000000000219C69                 db    ? ;
.bss:0000000000219C6A                 db    ? ;
.bss:0000000000219C6B                 db    ? ;
.bss:0000000000219C6C                 db    ? ;
.bss:0000000000219C6D                 db    ? ;
.bss:0000000000219C6E                 db    ? ;
.bss:0000000000219C6F                 db    ? ;
.bss:0000000000219C70                 db    ? ;
.bss:0000000000219C71                 db    ? ;
.bss:0000000000219C72                 db    ? ;
.bss:0000000000219C73                 db    ? ;
.bss:0000000000219C74                 db    ? ;
.bss:0000000000219C75                 db    ? ;
.bss:0000000000219C76                 db    ? ;
.bss:0000000000219C77                 db    ? ;
.bss:0000000000219C78                 db    ? ;
.bss:0000000000219C79                 db    ? ;
.bss:0000000000219C7A                 db    ? ;
.bss:0000000000219C7B                 db    ? ;
.bss:0000000000219C7C                 db    ? ;
.bss:0000000000219C7D                 db    ? ;
.bss:0000000000219C7E                 db    ? ;
.bss:0000000000219C7F                 db    ? ;
.bss:0000000000219C80                 db    ? ;
.bss:0000000000219C81                 db    ? ;
.bss:0000000000219C82                 db    ? ;
.bss:0000000000219C83                 db    ? ;
.bss:0000000000219C84                 db    ? ;
.bss:0000000000219C85                 db    ? ;
.bss:0000000000219C86                 db    ? ;
.bss:0000000000219C87                 db    ? ;
.bss:0000000000219C88                 db    ? ;
.bss:0000000000219C89                 db    ? ;
.bss:0000000000219C8A                 db    ? ;
.bss:0000000000219C8B                 db    ? ;
.bss:0000000000219C8C                 db    ? ;
.bss:0000000000219C8D                 db    ? ;
.bss:0000000000219C8E                 db    ? ;
.bss:0000000000219C8F                 db    ? ;
.bss:0000000000219C90                 db    ? ;
.bss:0000000000219C91                 db    ? ;
.bss:0000000000219C92                 db    ? ;
.bss:0000000000219C93                 db    ? ;
.bss:0000000000219C94                 db    ? ;
.bss:0000000000219C95                 db    ? ;
.bss:0000000000219C96                 db    ? ;
.bss:0000000000219C97                 db    ? ;
.bss:0000000000219C98                 db    ? ;
.bss:0000000000219C99                 db    ? ;
.bss:0000000000219C9A                 db    ? ;
.bss:0000000000219C9B                 db    ? ;
.bss:0000000000219C9C                 db    ? ;
.bss:0000000000219C9D                 db    ? ;
.bss:0000000000219C9E                 db    ? ;
.bss:0000000000219C9F                 db    ? ;
.bss:0000000000219CA0                 db    ? ;
.bss:0000000000219CA1                 db    ? ;
.bss:0000000000219CA2                 db    ? ;
.bss:0000000000219CA3                 db    ? ;
.bss:0000000000219CA4                 db    ? ;
.bss:0000000000219CA5                 db    ? ;
.bss:0000000000219CA6                 db    ? ;
.bss:0000000000219CA7                 db    ? ;
.bss:0000000000219CA8                 db    ? ;
.bss:0000000000219CA9                 db    ? ;
.bss:0000000000219CAA                 db    ? ;
.bss:0000000000219CAB                 db    ? ;
.bss:0000000000219CAC                 db    ? ;
.bss:0000000000219CAD                 db    ? ;
.bss:0000000000219CAE                 db    ? ;
.bss:0000000000219CAF                 db    ? ;
.bss:0000000000219CB0                 db    ? ;
.bss:0000000000219CB1                 db    ? ;
.bss:0000000000219CB2                 db    ? ;
.bss:0000000000219CB3                 db    ? ;
.bss:0000000000219CB4                 db    ? ;
.bss:0000000000219CB5                 db    ? ;
.bss:0000000000219CB6                 db    ? ;
.bss:0000000000219CB7                 db    ? ;
.bss:0000000000219CB8                 db    ? ;
.bss:0000000000219CB9                 db    ? ;
.bss:0000000000219CBA                 db    ? ;
.bss:0000000000219CBB                 db    ? ;
.bss:0000000000219CBC                 db    ? ;
.bss:0000000000219CBD                 db    ? ;
.bss:0000000000219CBE                 db    ? ;
.bss:0000000000219CBF                 db    ? ;
.bss:0000000000219CC0                 db    ? ;
.bss:0000000000219CC1                 db    ? ;
.bss:0000000000219CC2                 db    ? ;
.bss:0000000000219CC3                 db    ? ;
.bss:0000000000219CC4                 db    ? ;
.bss:0000000000219CC5                 db    ? ;
.bss:0000000000219CC6                 db    ? ;
.bss:0000000000219CC7                 db    ? ;
.bss:0000000000219CC8                 db    ? ;
.bss:0000000000219CC9                 db    ? ;
.bss:0000000000219CCA                 db    ? ;
.bss:0000000000219CCB                 db    ? ;
.bss:0000000000219CCC                 db    ? ;
.bss:0000000000219CCD                 db    ? ;
.bss:0000000000219CCE                 db    ? ;
.bss:0000000000219CCF                 db    ? ;
.bss:0000000000219CD0                 db    ? ;
.bss:0000000000219CD1                 db    ? ;
.bss:0000000000219CD2                 db    ? ;
.bss:0000000000219CD3                 db    ? ;
.bss:0000000000219CD4                 db    ? ;
.bss:0000000000219CD5                 db    ? ;
.bss:0000000000219CD6                 db    ? ;
.bss:0000000000219CD7                 db    ? ;
.bss:0000000000219CD8                 db    ? ;
.bss:0000000000219CD9                 db    ? ;
.bss:0000000000219CDA                 db    ? ;
.bss:0000000000219CDB                 db    ? ;
.bss:0000000000219CDC                 db    ? ;
.bss:0000000000219CDD                 db    ? ;
.bss:0000000000219CDE                 db    ? ;
.bss:0000000000219CDF                 db    ? ;
.bss:0000000000219CE0                 db    ? ;
.bss:0000000000219CE1                 db    ? ;
.bss:0000000000219CE2                 db    ? ;
.bss:0000000000219CE3                 db    ? ;
.bss:0000000000219CE4                 db    ? ;
.bss:0000000000219CE5                 db    ? ;
.bss:0000000000219CE6                 db    ? ;
.bss:0000000000219CE7                 db    ? ;
.bss:0000000000219CE8                 db    ? ;
.bss:0000000000219CE9                 db    ? ;
.bss:0000000000219CEA                 db    ? ;
.bss:0000000000219CEB                 db    ? ;
.bss:0000000000219CEC                 db    ? ;
.bss:0000000000219CED                 db    ? ;
.bss:0000000000219CEE                 db    ? ;
.bss:0000000000219CEF                 db    ? ;
.bss:0000000000219CF0                 db    ? ;
.bss:0000000000219CF1                 db    ? ;
.bss:0000000000219CF2                 db    ? ;
.bss:0000000000219CF3                 db    ? ;
.bss:0000000000219CF4                 db    ? ;
.bss:0000000000219CF5                 db    ? ;
.bss:0000000000219CF6                 db    ? ;
.bss:0000000000219CF7                 db    ? ;
.bss:0000000000219CF8                 db    ? ;
.bss:0000000000219CF9                 db    ? ;
.bss:0000000000219CFA                 db    ? ;
.bss:0000000000219CFB                 db    ? ;
.bss:0000000000219CFC                 db    ? ;
.bss:0000000000219CFD                 db    ? ;
.bss:0000000000219CFE                 db    ? ;
.bss:0000000000219CFF                 db    ? ;
.bss:0000000000219D00                 db    ? ;
.bss:0000000000219D01                 db    ? ;
.bss:0000000000219D02                 db    ? ;
.bss:0000000000219D03                 db    ? ;
.bss:0000000000219D04                 db    ? ;
.bss:0000000000219D05                 db    ? ;
.bss:0000000000219D06                 db    ? ;
.bss:0000000000219D07                 db    ? ;
.bss:0000000000219D08                 db    ? ;
.bss:0000000000219D09                 db    ? ;
.bss:0000000000219D0A                 db    ? ;
.bss:0000000000219D0B                 db    ? ;
.bss:0000000000219D0C                 db    ? ;
.bss:0000000000219D0D                 db    ? ;
.bss:0000000000219D0E                 db    ? ;
.bss:0000000000219D0F                 db    ? ;
.bss:0000000000219D10                 db    ? ;
.bss:0000000000219D11                 db    ? ;
.bss:0000000000219D12                 db    ? ;
.bss:0000000000219D13                 db    ? ;
.bss:0000000000219D14                 db    ? ;
.bss:0000000000219D15                 db    ? ;
.bss:0000000000219D16                 db    ? ;
.bss:0000000000219D17                 db    ? ;
.bss:0000000000219D18                 db    ? ;
.bss:0000000000219D19                 db    ? ;
.bss:0000000000219D1A                 db    ? ;
.bss:0000000000219D1B                 db    ? ;
.bss:0000000000219D1C                 db    ? ;
.bss:0000000000219D1D                 db    ? ;
.bss:0000000000219D1E                 db    ? ;
.bss:0000000000219D1F                 db    ? ;
.bss:0000000000219D20                 db    ? ;
.bss:0000000000219D21                 db    ? ;
.bss:0000000000219D22                 db    ? ;
.bss:0000000000219D23                 db    ? ;
.bss:0000000000219D24                 db    ? ;
.bss:0000000000219D25                 db    ? ;
.bss:0000000000219D26                 db    ? ;
.bss:0000000000219D27                 db    ? ;
.bss:0000000000219D28                 db    ? ;
.bss:0000000000219D29                 db    ? ;
.bss:0000000000219D2A                 db    ? ;
.bss:0000000000219D2B                 db    ? ;
.bss:0000000000219D2C                 db    ? ;
.bss:0000000000219D2D                 db    ? ;
.bss:0000000000219D2E                 db    ? ;
.bss:0000000000219D2F                 db    ? ;
.bss:0000000000219D30                 db    ? ;
.bss:0000000000219D31                 db    ? ;
.bss:0000000000219D32                 db    ? ;
.bss:0000000000219D33                 db    ? ;
.bss:0000000000219D34                 db    ? ;
.bss:0000000000219D35                 db    ? ;
.bss:0000000000219D36                 db    ? ;
.bss:0000000000219D37                 db    ? ;
.bss:0000000000219D38                 db    ? ;
.bss:0000000000219D39                 db    ? ;
.bss:0000000000219D3A                 db    ? ;
.bss:0000000000219D3B                 db    ? ;
.bss:0000000000219D3C                 db    ? ;
.bss:0000000000219D3D                 db    ? ;
.bss:0000000000219D3E                 db    ? ;
.bss:0000000000219D3F                 db    ? ;
.bss:0000000000219D40                 db    ? ;
.bss:0000000000219D41                 db    ? ;
.bss:0000000000219D42                 db    ? ;
.bss:0000000000219D43                 db    ? ;
.bss:0000000000219D44                 db    ? ;
.bss:0000000000219D45                 db    ? ;
.bss:0000000000219D46                 db    ? ;
.bss:0000000000219D47                 db    ? ;
.bss:0000000000219D48                 db    ? ;
.bss:0000000000219D49                 db    ? ;
.bss:0000000000219D4A                 db    ? ;
.bss:0000000000219D4B                 db    ? ;
.bss:0000000000219D4C                 db    ? ;
.bss:0000000000219D4D                 db    ? ;
.bss:0000000000219D4E                 db    ? ;
.bss:0000000000219D4F                 db    ? ;
.bss:0000000000219D50                 db    ? ;
.bss:0000000000219D51                 db    ? ;
.bss:0000000000219D52                 db    ? ;
.bss:0000000000219D53                 db    ? ;
.bss:0000000000219D54                 db    ? ;
.bss:0000000000219D55                 db    ? ;
.bss:0000000000219D56                 db    ? ;
.bss:0000000000219D57                 db    ? ;
.bss:0000000000219D58                 db    ? ;
.bss:0000000000219D59                 db    ? ;
.bss:0000000000219D5A                 db    ? ;
.bss:0000000000219D5B                 db    ? ;
.bss:0000000000219D5C                 db    ? ;
.bss:0000000000219D5D                 db    ? ;
.bss:0000000000219D5E                 db    ? ;
.bss:0000000000219D5F                 db    ? ;
.bss:0000000000219D60                 db    ? ;
.bss:0000000000219D61                 db    ? ;
.bss:0000000000219D62                 db    ? ;
.bss:0000000000219D63                 db    ? ;
.bss:0000000000219D64                 db    ? ;
.bss:0000000000219D65                 db    ? ;
.bss:0000000000219D66                 db    ? ;
.bss:0000000000219D67                 db    ? ;
.bss:0000000000219D68                 db    ? ;
.bss:0000000000219D69                 db    ? ;
.bss:0000000000219D6A                 db    ? ;
.bss:0000000000219D6B                 db    ? ;
.bss:0000000000219D6C                 db    ? ;
.bss:0000000000219D6D                 db    ? ;
.bss:0000000000219D6E                 db    ? ;
.bss:0000000000219D6F                 db    ? ;
.bss:0000000000219D70                 db    ? ;
.bss:0000000000219D71                 db    ? ;
.bss:0000000000219D72                 db    ? ;
.bss:0000000000219D73                 db    ? ;
.bss:0000000000219D74                 db    ? ;
.bss:0000000000219D75                 db    ? ;
.bss:0000000000219D76                 db    ? ;
.bss:0000000000219D77                 db    ? ;
.bss:0000000000219D78                 db    ? ;
.bss:0000000000219D79                 db    ? ;
.bss:0000000000219D7A                 db    ? ;
.bss:0000000000219D7B                 db    ? ;
.bss:0000000000219D7C                 db    ? ;
.bss:0000000000219D7D                 db    ? ;
.bss:0000000000219D7E                 db    ? ;
.bss:0000000000219D7F                 db    ? ;
.bss:0000000000219D80                 db    ? ;
.bss:0000000000219D81                 db    ? ;
.bss:0000000000219D82                 db    ? ;
.bss:0000000000219D83                 db    ? ;
.bss:0000000000219D84                 db    ? ;
.bss:0000000000219D85                 db    ? ;
.bss:0000000000219D86                 db    ? ;
.bss:0000000000219D87                 db    ? ;
.bss:0000000000219D88                 db    ? ;
.bss:0000000000219D89                 db    ? ;
.bss:0000000000219D8A                 db    ? ;
.bss:0000000000219D8B                 db    ? ;
.bss:0000000000219D8C                 db    ? ;
.bss:0000000000219D8D                 db    ? ;
.bss:0000000000219D8E                 db    ? ;
.bss:0000000000219D8F                 db    ? ;
.bss:0000000000219D90                 db    ? ;
.bss:0000000000219D91                 db    ? ;
.bss:0000000000219D92                 db    ? ;
.bss:0000000000219D93                 db    ? ;
.bss:0000000000219D94                 db    ? ;
.bss:0000000000219D95                 db    ? ;
.bss:0000000000219D96                 db    ? ;
.bss:0000000000219D97                 db    ? ;
.bss:0000000000219D98                 db    ? ;
.bss:0000000000219D99                 db    ? ;
.bss:0000000000219D9A                 db    ? ;
.bss:0000000000219D9B                 db    ? ;
.bss:0000000000219D9C                 db    ? ;
.bss:0000000000219D9D                 db    ? ;
.bss:0000000000219D9E                 db    ? ;
.bss:0000000000219D9F                 db    ? ;
.bss:0000000000219DA0                 db    ? ;
.bss:0000000000219DA1                 db    ? ;
.bss:0000000000219DA2                 db    ? ;
.bss:0000000000219DA3                 db    ? ;
.bss:0000000000219DA4                 db    ? ;
.bss:0000000000219DA5                 db    ? ;
.bss:0000000000219DA6                 db    ? ;
.bss:0000000000219DA7                 db    ? ;
.bss:0000000000219DA8                 db    ? ;
.bss:0000000000219DA9                 db    ? ;
.bss:0000000000219DAA                 db    ? ;
.bss:0000000000219DAB                 db    ? ;
.bss:0000000000219DAC                 db    ? ;
.bss:0000000000219DAD                 db    ? ;
.bss:0000000000219DAE                 db    ? ;
.bss:0000000000219DAF                 db    ? ;
.bss:0000000000219DB0                 db    ? ;
.bss:0000000000219DB1                 db    ? ;
.bss:0000000000219DB2                 db    ? ;
.bss:0000000000219DB3                 db    ? ;
.bss:0000000000219DB4                 db    ? ;
.bss:0000000000219DB5                 db    ? ;
.bss:0000000000219DB6                 db    ? ;
.bss:0000000000219DB7                 db    ? ;
.bss:0000000000219DB8                 db    ? ;
.bss:0000000000219DB9                 db    ? ;
.bss:0000000000219DBA                 db    ? ;
.bss:0000000000219DBB                 db    ? ;
.bss:0000000000219DBC                 db    ? ;
.bss:0000000000219DBD                 db    ? ;
.bss:0000000000219DBE                 db    ? ;
.bss:0000000000219DBF                 db    ? ;
.bss:0000000000219DC0                 db    ? ;
.bss:0000000000219DC1                 db    ? ;
.bss:0000000000219DC2                 db    ? ;
.bss:0000000000219DC3                 db    ? ;
.bss:0000000000219DC4                 db    ? ;
.bss:0000000000219DC5                 db    ? ;
.bss:0000000000219DC6                 db    ? ;
.bss:0000000000219DC7                 db    ? ;
.bss:0000000000219DC8                 db    ? ;
.bss:0000000000219DC9                 db    ? ;
.bss:0000000000219DCA                 db    ? ;
.bss:0000000000219DCB                 db    ? ;
.bss:0000000000219DCC                 db    ? ;
.bss:0000000000219DCD                 db    ? ;
.bss:0000000000219DCE                 db    ? ;
.bss:0000000000219DCF                 db    ? ;
.bss:0000000000219DD0                 db    ? ;
.bss:0000000000219DD1                 db    ? ;
.bss:0000000000219DD2                 db    ? ;
.bss:0000000000219DD3                 db    ? ;
.bss:0000000000219DD4                 db    ? ;
.bss:0000000000219DD5                 db    ? ;
.bss:0000000000219DD6                 db    ? ;
.bss:0000000000219DD7                 db    ? ;
.bss:0000000000219DD8                 db    ? ;
.bss:0000000000219DD9                 db    ? ;
.bss:0000000000219DDA                 db    ? ;
.bss:0000000000219DDB                 db    ? ;
.bss:0000000000219DDC                 db    ? ;
.bss:0000000000219DDD                 db    ? ;
.bss:0000000000219DDE                 db    ? ;
.bss:0000000000219DDF                 db    ? ;
.bss:0000000000219DE0                 db    ? ;
.bss:0000000000219DE1                 db    ? ;
.bss:0000000000219DE2                 db    ? ;
.bss:0000000000219DE3                 db    ? ;
.bss:0000000000219DE4                 db    ? ;
.bss:0000000000219DE5                 db    ? ;
.bss:0000000000219DE6                 db    ? ;
.bss:0000000000219DE7                 db    ? ;
.bss:0000000000219DE8                 db    ? ;
.bss:0000000000219DE9                 db    ? ;
.bss:0000000000219DEA                 db    ? ;
.bss:0000000000219DEB                 db    ? ;
.bss:0000000000219DEC                 db    ? ;
.bss:0000000000219DED                 db    ? ;
.bss:0000000000219DEE                 db    ? ;
.bss:0000000000219DEF                 db    ? ;
.bss:0000000000219DF0                 db    ? ;
.bss:0000000000219DF1                 db    ? ;
.bss:0000000000219DF2                 db    ? ;
.bss:0000000000219DF3                 db    ? ;
.bss:0000000000219DF4                 db    ? ;
.bss:0000000000219DF5                 db    ? ;
.bss:0000000000219DF6                 db    ? ;
.bss:0000000000219DF7                 db    ? ;
.bss:0000000000219DF8                 db    ? ;
.bss:0000000000219DF9                 db    ? ;
.bss:0000000000219DFA                 db    ? ;
.bss:0000000000219DFB                 db    ? ;
.bss:0000000000219DFC                 db    ? ;
.bss:0000000000219DFD                 db    ? ;
.bss:0000000000219DFE                 db    ? ;
.bss:0000000000219DFF                 db    ? ;
.bss:0000000000219E00                 db    ? ;
.bss:0000000000219E01                 db    ? ;
.bss:0000000000219E02                 db    ? ;
.bss:0000000000219E03                 db    ? ;
.bss:0000000000219E04                 db    ? ;
.bss:0000000000219E05                 db    ? ;
.bss:0000000000219E06                 db    ? ;
.bss:0000000000219E07                 db    ? ;
.bss:0000000000219E08                 db    ? ;
.bss:0000000000219E09                 db    ? ;
.bss:0000000000219E0A                 db    ? ;
.bss:0000000000219E0B                 db    ? ;
.bss:0000000000219E0C                 db    ? ;
.bss:0000000000219E0D                 db    ? ;
.bss:0000000000219E0E                 db    ? ;
.bss:0000000000219E0F                 db    ? ;
.bss:0000000000219E10                 db    ? ;
.bss:0000000000219E11                 db    ? ;
.bss:0000000000219E12                 db    ? ;
.bss:0000000000219E13                 db    ? ;
.bss:0000000000219E14                 db    ? ;
.bss:0000000000219E15                 db    ? ;
.bss:0000000000219E16                 db    ? ;
.bss:0000000000219E17                 db    ? ;
.bss:0000000000219E18                 db    ? ;
.bss:0000000000219E19                 db    ? ;
.bss:0000000000219E1A                 db    ? ;
.bss:0000000000219E1B                 db    ? ;
.bss:0000000000219E1C                 db    ? ;
.bss:0000000000219E1D                 db    ? ;
.bss:0000000000219E1E                 db    ? ;
.bss:0000000000219E1F                 db    ? ;
.bss:0000000000219E20                 db    ? ;
.bss:0000000000219E21                 db    ? ;
.bss:0000000000219E22                 db    ? ;
.bss:0000000000219E23                 db    ? ;
.bss:0000000000219E24                 db    ? ;
.bss:0000000000219E25                 db    ? ;
.bss:0000000000219E26                 db    ? ;
.bss:0000000000219E27                 db    ? ;
.bss:0000000000219E28                 db    ? ;
.bss:0000000000219E29                 db    ? ;
.bss:0000000000219E2A                 db    ? ;
.bss:0000000000219E2B                 db    ? ;
.bss:0000000000219E2C                 db    ? ;
.bss:0000000000219E2D                 db    ? ;
.bss:0000000000219E2E                 db    ? ;
.bss:0000000000219E2F                 db    ? ;
.bss:0000000000219E30                 db    ? ;
.bss:0000000000219E31                 db    ? ;
.bss:0000000000219E32                 db    ? ;
.bss:0000000000219E33                 db    ? ;
.bss:0000000000219E34                 db    ? ;
.bss:0000000000219E35                 db    ? ;
.bss:0000000000219E36                 db    ? ;
.bss:0000000000219E37                 db    ? ;
.bss:0000000000219E38                 db    ? ;
.bss:0000000000219E39                 db    ? ;
.bss:0000000000219E3A                 db    ? ;
.bss:0000000000219E3B                 db    ? ;
.bss:0000000000219E3C                 db    ? ;
.bss:0000000000219E3D                 db    ? ;
.bss:0000000000219E3E                 db    ? ;
.bss:0000000000219E3F                 db    ? ;
.bss:0000000000219E40                 db    ? ;
.bss:0000000000219E41                 db    ? ;
.bss:0000000000219E42                 db    ? ;
.bss:0000000000219E43                 db    ? ;
.bss:0000000000219E44                 db    ? ;
.bss:0000000000219E45                 db    ? ;
.bss:0000000000219E46                 db    ? ;
.bss:0000000000219E47                 db    ? ;
.bss:0000000000219E48                 db    ? ;
.bss:0000000000219E49                 db    ? ;
.bss:0000000000219E4A                 db    ? ;
.bss:0000000000219E4B                 db    ? ;
.bss:0000000000219E4C                 db    ? ;
.bss:0000000000219E4D                 db    ? ;
.bss:0000000000219E4E                 db    ? ;
.bss:0000000000219E4F                 db    ? ;
.bss:0000000000219E50                 db    ? ;
.bss:0000000000219E51                 db    ? ;
.bss:0000000000219E52                 db    ? ;
.bss:0000000000219E53                 db    ? ;
.bss:0000000000219E54                 db    ? ;
.bss:0000000000219E55                 db    ? ;
.bss:0000000000219E56                 db    ? ;
.bss:0000000000219E57                 db    ? ;
.bss:0000000000219E58                 db    ? ;
.bss:0000000000219E59                 db    ? ;
.bss:0000000000219E5A                 db    ? ;
.bss:0000000000219E5B                 db    ? ;
.bss:0000000000219E5C                 db    ? ;
.bss:0000000000219E5D                 db    ? ;
.bss:0000000000219E5E                 db    ? ;
.bss:0000000000219E5F                 db    ? ;
.bss:0000000000219E60                 db    ? ;
.bss:0000000000219E61                 db    ? ;
.bss:0000000000219E62                 db    ? ;
.bss:0000000000219E63                 db    ? ;
.bss:0000000000219E64                 db    ? ;
.bss:0000000000219E65                 db    ? ;
.bss:0000000000219E66                 db    ? ;
.bss:0000000000219E67                 db    ? ;
.bss:0000000000219E68                 db    ? ;
.bss:0000000000219E69                 db    ? ;
.bss:0000000000219E6A                 db    ? ;
.bss:0000000000219E6B                 db    ? ;
.bss:0000000000219E6C                 db    ? ;
.bss:0000000000219E6D                 db    ? ;
.bss:0000000000219E6E                 db    ? ;
.bss:0000000000219E6F                 db    ? ;
.bss:0000000000219E70                 db    ? ;
.bss:0000000000219E71                 db    ? ;
.bss:0000000000219E72                 db    ? ;
.bss:0000000000219E73                 db    ? ;
.bss:0000000000219E74                 db    ? ;
.bss:0000000000219E75                 db    ? ;
.bss:0000000000219E76                 db    ? ;
.bss:0000000000219E77                 db    ? ;
.bss:0000000000219E78                 db    ? ;
.bss:0000000000219E79                 db    ? ;
.bss:0000000000219E7A                 db    ? ;
.bss:0000000000219E7B                 db    ? ;
.bss:0000000000219E7C                 db    ? ;
.bss:0000000000219E7D                 db    ? ;
.bss:0000000000219E7E                 db    ? ;
.bss:0000000000219E7F                 db    ? ;
.bss:0000000000219E80                 db    ? ;
.bss:0000000000219E81                 db    ? ;
.bss:0000000000219E82                 db    ? ;
.bss:0000000000219E83                 db    ? ;
.bss:0000000000219E84                 db    ? ;
.bss:0000000000219E85                 db    ? ;
.bss:0000000000219E86                 db    ? ;
.bss:0000000000219E87                 db    ? ;
.bss:0000000000219E88                 db    ? ;
.bss:0000000000219E89                 db    ? ;
.bss:0000000000219E8A                 db    ? ;
.bss:0000000000219E8B                 db    ? ;
.bss:0000000000219E8C                 db    ? ;
.bss:0000000000219E8D                 db    ? ;
.bss:0000000000219E8E                 db    ? ;
.bss:0000000000219E8F                 db    ? ;
.bss:0000000000219E90                 db    ? ;
.bss:0000000000219E91                 db    ? ;
.bss:0000000000219E92                 db    ? ;
.bss:0000000000219E93                 db    ? ;
.bss:0000000000219E94                 db    ? ;
.bss:0000000000219E95                 db    ? ;
.bss:0000000000219E96                 db    ? ;
.bss:0000000000219E97                 db    ? ;
.bss:0000000000219E98                 db    ? ;
.bss:0000000000219E99                 db    ? ;
.bss:0000000000219E9A                 db    ? ;
.bss:0000000000219E9B                 db    ? ;
.bss:0000000000219E9C                 db    ? ;
.bss:0000000000219E9D                 db    ? ;
.bss:0000000000219E9E                 db    ? ;
.bss:0000000000219E9F                 db    ? ;
.bss:0000000000219EA0                 db    ? ;
.bss:0000000000219EA1                 db    ? ;
.bss:0000000000219EA2                 db    ? ;
.bss:0000000000219EA3                 db    ? ;
.bss:0000000000219EA4                 db    ? ;
.bss:0000000000219EA5                 db    ? ;
.bss:0000000000219EA6                 db    ? ;
.bss:0000000000219EA7                 db    ? ;
.bss:0000000000219EA8                 db    ? ;
.bss:0000000000219EA9                 db    ? ;
.bss:0000000000219EAA                 db    ? ;
.bss:0000000000219EAB                 db    ? ;
.bss:0000000000219EAC                 db    ? ;
.bss:0000000000219EAD                 db    ? ;
.bss:0000000000219EAE                 db    ? ;
.bss:0000000000219EAF                 db    ? ;
.bss:0000000000219EB0                 db    ? ;
.bss:0000000000219EB1                 db    ? ;
.bss:0000000000219EB2                 db    ? ;
.bss:0000000000219EB3                 db    ? ;
.bss:0000000000219EB4                 db    ? ;
.bss:0000000000219EB5                 db    ? ;
.bss:0000000000219EB6                 db    ? ;
.bss:0000000000219EB7                 db    ? ;
.bss:0000000000219EB8                 db    ? ;
.bss:0000000000219EB9                 db    ? ;
.bss:0000000000219EBA                 db    ? ;
.bss:0000000000219EBB                 db    ? ;
.bss:0000000000219EBC                 db    ? ;
.bss:0000000000219EBD                 db    ? ;
.bss:0000000000219EBE                 db    ? ;
.bss:0000000000219EBF                 db    ? ;
.bss:0000000000219EC0                 db    ? ;
.bss:0000000000219EC1                 db    ? ;
.bss:0000000000219EC2                 db    ? ;
.bss:0000000000219EC3                 db    ? ;
.bss:0000000000219EC4                 db    ? ;
.bss:0000000000219EC5                 db    ? ;
.bss:0000000000219EC6                 db    ? ;
.bss:0000000000219EC7                 db    ? ;
.bss:0000000000219EC8                 db    ? ;
.bss:0000000000219EC9                 db    ? ;
.bss:0000000000219ECA                 db    ? ;
.bss:0000000000219ECB                 db    ? ;
.bss:0000000000219ECC                 db    ? ;
.bss:0000000000219ECD                 db    ? ;
.bss:0000000000219ECE                 db    ? ;
.bss:0000000000219ECF                 db    ? ;
.bss:0000000000219ED0                 db    ? ;
.bss:0000000000219ED1                 db    ? ;
.bss:0000000000219ED2                 db    ? ;
.bss:0000000000219ED3                 db    ? ;
.bss:0000000000219ED4                 db    ? ;
.bss:0000000000219ED5                 db    ? ;
.bss:0000000000219ED6                 db    ? ;
.bss:0000000000219ED7                 db    ? ;
.bss:0000000000219ED8                 db    ? ;
.bss:0000000000219ED9                 db    ? ;
.bss:0000000000219EDA                 db    ? ;
.bss:0000000000219EDB                 db    ? ;
.bss:0000000000219EDC                 db    ? ;
.bss:0000000000219EDD                 db    ? ;
.bss:0000000000219EDE                 db    ? ;
.bss:0000000000219EDF                 db    ? ;
.bss:0000000000219EE0                 db    ? ;
.bss:0000000000219EE1                 db    ? ;
.bss:0000000000219EE2                 db    ? ;
.bss:0000000000219EE3                 db    ? ;
.bss:0000000000219EE4                 db    ? ;
.bss:0000000000219EE5                 db    ? ;
.bss:0000000000219EE6                 db    ? ;
.bss:0000000000219EE7                 db    ? ;
.bss:0000000000219EE8                 db    ? ;
.bss:0000000000219EE9                 db    ? ;
.bss:0000000000219EEA                 db    ? ;
.bss:0000000000219EEB                 db    ? ;
.bss:0000000000219EEC                 db    ? ;
.bss:0000000000219EED                 db    ? ;
.bss:0000000000219EEE                 db    ? ;
.bss:0000000000219EEF                 db    ? ;
.bss:0000000000219EF0                 db    ? ;
.bss:0000000000219EF1                 db    ? ;
.bss:0000000000219EF2                 db    ? ;
.bss:0000000000219EF3                 db    ? ;
.bss:0000000000219EF4                 db    ? ;
.bss:0000000000219EF5                 db    ? ;
.bss:0000000000219EF6                 db    ? ;
.bss:0000000000219EF7                 db    ? ;
.bss:0000000000219EF8                 db    ? ;
.bss:0000000000219EF9                 db    ? ;
.bss:0000000000219EFA                 db    ? ;
.bss:0000000000219EFB                 db    ? ;
.bss:0000000000219EFC                 db    ? ;
.bss:0000000000219EFD                 db    ? ;
.bss:0000000000219EFE                 db    ? ;
.bss:0000000000219EFF                 db    ? ;
.bss:0000000000219F00                 db    ? ;
.bss:0000000000219F01                 db    ? ;
.bss:0000000000219F02                 db    ? ;
.bss:0000000000219F03                 db    ? ;
.bss:0000000000219F04                 db    ? ;
.bss:0000000000219F05                 db    ? ;
.bss:0000000000219F06                 db    ? ;
.bss:0000000000219F07                 db    ? ;
.bss:0000000000219F08                 db    ? ;
.bss:0000000000219F09                 db    ? ;
.bss:0000000000219F0A                 db    ? ;
.bss:0000000000219F0B                 db    ? ;
.bss:0000000000219F0C                 db    ? ;
.bss:0000000000219F0D                 db    ? ;
.bss:0000000000219F0E                 db    ? ;
.bss:0000000000219F0F                 db    ? ;
.bss:0000000000219F10                 db    ? ;
.bss:0000000000219F11                 db    ? ;
.bss:0000000000219F12                 db    ? ;
.bss:0000000000219F13                 db    ? ;
.bss:0000000000219F14                 db    ? ;
.bss:0000000000219F15                 db    ? ;
.bss:0000000000219F16                 db    ? ;
.bss:0000000000219F17                 db    ? ;
.bss:0000000000219F18                 db    ? ;
.bss:0000000000219F19                 db    ? ;
.bss:0000000000219F1A                 db    ? ;
.bss:0000000000219F1B                 db    ? ;
.bss:0000000000219F1C                 db    ? ;
.bss:0000000000219F1D                 db    ? ;
.bss:0000000000219F1E                 db    ? ;
.bss:0000000000219F1F                 db    ? ;
.bss:0000000000219F20                 db    ? ;
.bss:0000000000219F21                 db    ? ;
.bss:0000000000219F22                 db    ? ;
.bss:0000000000219F23                 db    ? ;
.bss:0000000000219F24                 db    ? ;
.bss:0000000000219F25                 db    ? ;
.bss:0000000000219F26                 db    ? ;
.bss:0000000000219F27                 db    ? ;
.bss:0000000000219F28                 db    ? ;
.bss:0000000000219F29                 db    ? ;
.bss:0000000000219F2A                 db    ? ;
.bss:0000000000219F2B                 db    ? ;
.bss:0000000000219F2C                 db    ? ;
.bss:0000000000219F2D                 db    ? ;
.bss:0000000000219F2E                 db    ? ;
.bss:0000000000219F2F                 db    ? ;
.bss:0000000000219F30                 db    ? ;
.bss:0000000000219F31                 db    ? ;
.bss:0000000000219F32                 db    ? ;
.bss:0000000000219F33                 db    ? ;
.bss:0000000000219F34                 db    ? ;
.bss:0000000000219F35                 db    ? ;
.bss:0000000000219F36                 db    ? ;
.bss:0000000000219F37                 db    ? ;
.bss:0000000000219F38                 db    ? ;
.bss:0000000000219F39                 db    ? ;
.bss:0000000000219F3A                 db    ? ;
.bss:0000000000219F3B                 db    ? ;
.bss:0000000000219F3C                 db    ? ;
.bss:0000000000219F3D                 db    ? ;
.bss:0000000000219F3E                 db    ? ;
.bss:0000000000219F3F                 db    ? ;
.bss:0000000000219F40                 db    ? ;
.bss:0000000000219F41                 db    ? ;
.bss:0000000000219F42                 db    ? ;
.bss:0000000000219F43                 db    ? ;
.bss:0000000000219F44                 db    ? ;
.bss:0000000000219F45                 db    ? ;
.bss:0000000000219F46                 db    ? ;
.bss:0000000000219F47                 db    ? ;
.bss:0000000000219F48                 db    ? ;
.bss:0000000000219F49                 db    ? ;
.bss:0000000000219F4A                 db    ? ;
.bss:0000000000219F4B                 db    ? ;
.bss:0000000000219F4C                 db    ? ;
.bss:0000000000219F4D                 db    ? ;
.bss:0000000000219F4E                 db    ? ;
.bss:0000000000219F4F                 db    ? ;
.bss:0000000000219F50                 db    ? ;
.bss:0000000000219F51                 db    ? ;
.bss:0000000000219F52                 db    ? ;
.bss:0000000000219F53                 db    ? ;
.bss:0000000000219F54                 db    ? ;
.bss:0000000000219F55                 db    ? ;
.bss:0000000000219F56                 db    ? ;
.bss:0000000000219F57                 db    ? ;
.bss:0000000000219F58                 db    ? ;
.bss:0000000000219F59                 db    ? ;
.bss:0000000000219F5A                 db    ? ;
.bss:0000000000219F5B                 db    ? ;
.bss:0000000000219F5C                 db    ? ;
.bss:0000000000219F5D                 db    ? ;
.bss:0000000000219F5E                 db    ? ;
.bss:0000000000219F5F                 db    ? ;
.bss:0000000000219F60                 db    ? ;
.bss:0000000000219F61                 db    ? ;
.bss:0000000000219F62                 db    ? ;
.bss:0000000000219F63                 db    ? ;
.bss:0000000000219F64                 db    ? ;
.bss:0000000000219F65                 db    ? ;
.bss:0000000000219F66                 db    ? ;
.bss:0000000000219F67                 db    ? ;
.bss:0000000000219F68                 db    ? ;
.bss:0000000000219F69                 db    ? ;
.bss:0000000000219F6A                 db    ? ;
.bss:0000000000219F6B                 db    ? ;
.bss:0000000000219F6C                 db    ? ;
.bss:0000000000219F6D                 db    ? ;
.bss:0000000000219F6E                 db    ? ;
.bss:0000000000219F6F                 db    ? ;
.bss:0000000000219F70                 db    ? ;
.bss:0000000000219F71                 db    ? ;
.bss:0000000000219F72                 db    ? ;
.bss:0000000000219F73                 db    ? ;
.bss:0000000000219F74                 db    ? ;
.bss:0000000000219F75                 db    ? ;
.bss:0000000000219F76                 db    ? ;
.bss:0000000000219F77                 db    ? ;
.bss:0000000000219F78                 db    ? ;
.bss:0000000000219F79                 db    ? ;
.bss:0000000000219F7A                 db    ? ;
.bss:0000000000219F7B                 db    ? ;
.bss:0000000000219F7C                 db    ? ;
.bss:0000000000219F7D                 db    ? ;
.bss:0000000000219F7E                 db    ? ;
.bss:0000000000219F7F                 db    ? ;
.bss:0000000000219F80                 db    ? ;
.bss:0000000000219F81                 db    ? ;
.bss:0000000000219F82                 db    ? ;
.bss:0000000000219F83                 db    ? ;
.bss:0000000000219F84                 db    ? ;
.bss:0000000000219F85                 db    ? ;
.bss:0000000000219F86                 db    ? ;
.bss:0000000000219F87                 db    ? ;
.bss:0000000000219F88                 db    ? ;
.bss:0000000000219F89                 db    ? ;
.bss:0000000000219F8A                 db    ? ;
.bss:0000000000219F8B                 db    ? ;
.bss:0000000000219F8C                 db    ? ;
.bss:0000000000219F8D                 db    ? ;
.bss:0000000000219F8E                 db    ? ;
.bss:0000000000219F8F                 db    ? ;
.bss:0000000000219F90                 db    ? ;
.bss:0000000000219F91                 db    ? ;
.bss:0000000000219F92                 db    ? ;
.bss:0000000000219F93                 db    ? ;
.bss:0000000000219F94                 db    ? ;
.bss:0000000000219F95                 db    ? ;
.bss:0000000000219F96                 db    ? ;
.bss:0000000000219F97                 db    ? ;
.bss:0000000000219F98                 db    ? ;
.bss:0000000000219F99                 db    ? ;
.bss:0000000000219F9A                 db    ? ;
.bss:0000000000219F9B                 db    ? ;
.bss:0000000000219F9C                 db    ? ;
.bss:0000000000219F9D                 db    ? ;
.bss:0000000000219F9E                 db    ? ;
.bss:0000000000219F9F                 db    ? ;
.bss:0000000000219FA0                 db    ? ;
.bss:0000000000219FA1                 db    ? ;
.bss:0000000000219FA2                 db    ? ;
.bss:0000000000219FA3                 db    ? ;
.bss:0000000000219FA4                 db    ? ;
.bss:0000000000219FA5                 db    ? ;
.bss:0000000000219FA6                 db    ? ;
.bss:0000000000219FA7                 db    ? ;
.bss:0000000000219FA8                 db    ? ;
.bss:0000000000219FA9                 db    ? ;
.bss:0000000000219FAA                 db    ? ;
.bss:0000000000219FAB                 db    ? ;
.bss:0000000000219FAC                 db    ? ;
.bss:0000000000219FAD                 db    ? ;
.bss:0000000000219FAE                 db    ? ;
.bss:0000000000219FAF                 db    ? ;
.bss:0000000000219FB0                 db    ? ;
.bss:0000000000219FB1                 db    ? ;
.bss:0000000000219FB2                 db    ? ;
.bss:0000000000219FB3                 db    ? ;
.bss:0000000000219FB4                 db    ? ;
.bss:0000000000219FB5                 db    ? ;
.bss:0000000000219FB6                 db    ? ;
.bss:0000000000219FB7                 db    ? ;
.bss:0000000000219FB8                 db    ? ;
.bss:0000000000219FB9                 db    ? ;
.bss:0000000000219FBA                 db    ? ;
.bss:0000000000219FBB                 db    ? ;
.bss:0000000000219FBC                 db    ? ;
.bss:0000000000219FBD                 db    ? ;
.bss:0000000000219FBE                 db    ? ;
.bss:0000000000219FBF                 db    ? ;
.bss:0000000000219FC0                 db    ? ;
.bss:0000000000219FC1                 db    ? ;
.bss:0000000000219FC2                 db    ? ;
.bss:0000000000219FC3                 db    ? ;
.bss:0000000000219FC4                 db    ? ;
.bss:0000000000219FC5                 db    ? ;
.bss:0000000000219FC6                 db    ? ;
.bss:0000000000219FC7                 db    ? ;
.bss:0000000000219FC8                 db    ? ;
.bss:0000000000219FC9                 db    ? ;
.bss:0000000000219FCA                 db    ? ;
.bss:0000000000219FCB                 db    ? ;
.bss:0000000000219FCC                 db    ? ;
.bss:0000000000219FCD                 db    ? ;
.bss:0000000000219FCE                 db    ? ;
.bss:0000000000219FCF                 db    ? ;
.bss:0000000000219FD0                 db    ? ;
.bss:0000000000219FD1                 db    ? ;
.bss:0000000000219FD2                 db    ? ;
.bss:0000000000219FD3                 db    ? ;
.bss:0000000000219FD4                 db    ? ;
.bss:0000000000219FD5                 db    ? ;
.bss:0000000000219FD6                 db    ? ;
.bss:0000000000219FD7                 db    ? ;
.bss:0000000000219FD8                 db    ? ;
.bss:0000000000219FD9                 db    ? ;
.bss:0000000000219FDA                 db    ? ;
.bss:0000000000219FDB                 db    ? ;
.bss:0000000000219FDC                 db    ? ;
.bss:0000000000219FDD                 db    ? ;
.bss:0000000000219FDE                 db    ? ;
.bss:0000000000219FDF                 db    ? ;
.bss:0000000000219FE0                 db    ? ;
.bss:0000000000219FE1                 db    ? ;
.bss:0000000000219FE2                 db    ? ;
.bss:0000000000219FE3                 db    ? ;
.bss:0000000000219FE4                 db    ? ;
.bss:0000000000219FE5                 db    ? ;
.bss:0000000000219FE6                 db    ? ;
.bss:0000000000219FE7                 db    ? ;
.bss:0000000000219FE8                 db    ? ;
.bss:0000000000219FE9                 db    ? ;
.bss:0000000000219FEA                 db    ? ;
.bss:0000000000219FEB                 db    ? ;
.bss:0000000000219FEC                 db    ? ;
.bss:0000000000219FED                 db    ? ;
.bss:0000000000219FEE                 db    ? ;
.bss:0000000000219FEF                 db    ? ;
.bss:0000000000219FF0                 db    ? ;
.bss:0000000000219FF1                 db    ? ;
.bss:0000000000219FF2                 db    ? ;
.bss:0000000000219FF3                 db    ? ;
.bss:0000000000219FF4                 db    ? ;
.bss:0000000000219FF5                 db    ? ;
.bss:0000000000219FF6                 db    ? ;
.bss:0000000000219FF7                 db    ? ;
.bss:0000000000219FF8                 db    ? ;
.bss:0000000000219FF9                 db    ? ;
.bss:0000000000219FFA                 db    ? ;
.bss:0000000000219FFB                 db    ? ;
.bss:0000000000219FFC                 db    ? ;
.bss:0000000000219FFD                 db    ? ;
.bss:0000000000219FFE                 db    ? ;
.bss:0000000000219FFF                 db    ? ;
.bss:000000000021A000                 db    ? ;
.bss:000000000021A001                 db    ? ;
.bss:000000000021A002                 db    ? ;
.bss:000000000021A003                 db    ? ;
.bss:000000000021A004                 db    ? ;
.bss:000000000021A005                 db    ? ;
.bss:000000000021A006                 db    ? ;
.bss:000000000021A007                 db    ? ;
.bss:000000000021A008                 db    ? ;
.bss:000000000021A009                 db    ? ;
.bss:000000000021A00A                 db    ? ;
.bss:000000000021A00B                 db    ? ;
.bss:000000000021A00C                 db    ? ;
.bss:000000000021A00D                 db    ? ;
.bss:000000000021A00E                 db    ? ;
.bss:000000000021A00F                 db    ? ;
.bss:000000000021A010                 db    ? ;
.bss:000000000021A011                 db    ? ;
.bss:000000000021A012                 db    ? ;
.bss:000000000021A013                 db    ? ;
.bss:000000000021A014                 db    ? ;
.bss:000000000021A015                 db    ? ;
.bss:000000000021A016                 db    ? ;
.bss:000000000021A017                 db    ? ;
.bss:000000000021A018                 db    ? ;
.bss:000000000021A019                 db    ? ;
.bss:000000000021A01A                 db    ? ;
.bss:000000000021A01B                 db    ? ;
.bss:000000000021A01C                 db    ? ;
.bss:000000000021A01D                 db    ? ;
.bss:000000000021A01E                 db    ? ;
.bss:000000000021A01F                 db    ? ;
.bss:000000000021A020                 db    ? ;
.bss:000000000021A021                 db    ? ;
.bss:000000000021A022                 db    ? ;
.bss:000000000021A023                 db    ? ;
.bss:000000000021A024                 db    ? ;
.bss:000000000021A025                 db    ? ;
.bss:000000000021A026                 db    ? ;
.bss:000000000021A027                 db    ? ;
.bss:000000000021A028                 db    ? ;
.bss:000000000021A029                 db    ? ;
.bss:000000000021A02A                 db    ? ;
.bss:000000000021A02B                 db    ? ;
.bss:000000000021A02C                 db    ? ;
.bss:000000000021A02D                 db    ? ;
.bss:000000000021A02E                 db    ? ;
.bss:000000000021A02F                 db    ? ;
.bss:000000000021A030                 db    ? ;
.bss:000000000021A031                 db    ? ;
.bss:000000000021A032                 db    ? ;
.bss:000000000021A033                 db    ? ;
.bss:000000000021A034                 db    ? ;
.bss:000000000021A035                 db    ? ;
.bss:000000000021A036                 db    ? ;
.bss:000000000021A037                 db    ? ;
.bss:000000000021A038                 db    ? ;
.bss:000000000021A039                 db    ? ;
.bss:000000000021A03A                 db    ? ;
.bss:000000000021A03B                 db    ? ;
.bss:000000000021A03C                 db    ? ;
.bss:000000000021A03D                 db    ? ;
.bss:000000000021A03E                 db    ? ;
.bss:000000000021A03F                 db    ? ;
.bss:000000000021A040                 db    ? ;
.bss:000000000021A041                 db    ? ;
.bss:000000000021A042                 db    ? ;
.bss:000000000021A043                 db    ? ;
.bss:000000000021A044                 db    ? ;
.bss:000000000021A045                 db    ? ;
.bss:000000000021A046                 db    ? ;
.bss:000000000021A047                 db    ? ;
.bss:000000000021A048                 db    ? ;
.bss:000000000021A049                 db    ? ;
.bss:000000000021A04A                 db    ? ;
.bss:000000000021A04B                 db    ? ;
.bss:000000000021A04C                 db    ? ;
.bss:000000000021A04D                 db    ? ;
.bss:000000000021A04E                 db    ? ;
.bss:000000000021A04F                 db    ? ;
.bss:000000000021A050                 db    ? ;
.bss:000000000021A051                 db    ? ;
.bss:000000000021A052                 db    ? ;
.bss:000000000021A053                 db    ? ;
.bss:000000000021A054                 db    ? ;
.bss:000000000021A055                 db    ? ;
.bss:000000000021A056                 db    ? ;
.bss:000000000021A057                 db    ? ;
.bss:000000000021A058                 db    ? ;
.bss:000000000021A059                 db    ? ;
.bss:000000000021A05A                 db    ? ;
.bss:000000000021A05B                 db    ? ;
.bss:000000000021A05C                 db    ? ;
.bss:000000000021A05D                 db    ? ;
.bss:000000000021A05E                 db    ? ;
.bss:000000000021A05F                 db    ? ;
.bss:000000000021A060                 db    ? ;
.bss:000000000021A061                 db    ? ;
.bss:000000000021A062                 db    ? ;
.bss:000000000021A063                 db    ? ;
.bss:000000000021A064                 db    ? ;
.bss:000000000021A065                 db    ? ;
.bss:000000000021A066                 db    ? ;
.bss:000000000021A067                 db    ? ;
.bss:000000000021A068                 db    ? ;
.bss:000000000021A069                 db    ? ;
.bss:000000000021A06A                 db    ? ;
.bss:000000000021A06B                 db    ? ;
.bss:000000000021A06C                 db    ? ;
.bss:000000000021A06D                 db    ? ;
.bss:000000000021A06E                 db    ? ;
.bss:000000000021A06F                 db    ? ;
.bss:000000000021A070                 db    ? ;
.bss:000000000021A071                 db    ? ;
.bss:000000000021A072                 db    ? ;
.bss:000000000021A073                 db    ? ;
.bss:000000000021A074                 db    ? ;
.bss:000000000021A075                 db    ? ;
.bss:000000000021A076                 db    ? ;
.bss:000000000021A077                 db    ? ;
.bss:000000000021A078                 db    ? ;
.bss:000000000021A079                 db    ? ;
.bss:000000000021A07A                 db    ? ;
.bss:000000000021A07B                 db    ? ;
.bss:000000000021A07C                 db    ? ;
.bss:000000000021A07D                 db    ? ;
.bss:000000000021A07E                 db    ? ;
.bss:000000000021A07F                 db    ? ;
.bss:000000000021A080                 db    ? ;
.bss:000000000021A081                 db    ? ;
.bss:000000000021A082                 db    ? ;
.bss:000000000021A083                 db    ? ;
.bss:000000000021A084                 db    ? ;
.bss:000000000021A085                 db    ? ;
.bss:000000000021A086                 db    ? ;
.bss:000000000021A087                 db    ? ;
.bss:000000000021A088                 db    ? ;
.bss:000000000021A089                 db    ? ;
.bss:000000000021A08A                 db    ? ;
.bss:000000000021A08B                 db    ? ;
.bss:000000000021A08C                 db    ? ;
.bss:000000000021A08D                 db    ? ;
.bss:000000000021A08E                 db    ? ;
.bss:000000000021A08F                 db    ? ;
.bss:000000000021A090                 db    ? ;
.bss:000000000021A091                 db    ? ;
.bss:000000000021A092                 db    ? ;
.bss:000000000021A093                 db    ? ;
.bss:000000000021A094                 db    ? ;
.bss:000000000021A095                 db    ? ;
.bss:000000000021A096                 db    ? ;
.bss:000000000021A097                 db    ? ;
.bss:000000000021A098                 db    ? ;
.bss:000000000021A099                 db    ? ;
.bss:000000000021A09A                 db    ? ;
.bss:000000000021A09B                 db    ? ;
.bss:000000000021A09C                 db    ? ;
.bss:000000000021A09D                 db    ? ;
.bss:000000000021A09E                 db    ? ;
.bss:000000000021A09F                 db    ? ;
.bss:000000000021A0A0                 db    ? ;
.bss:000000000021A0A1                 db    ? ;
.bss:000000000021A0A2                 db    ? ;
.bss:000000000021A0A3                 db    ? ;
.bss:000000000021A0A4                 db    ? ;
.bss:000000000021A0A5                 db    ? ;
.bss:000000000021A0A6                 db    ? ;
.bss:000000000021A0A7                 db    ? ;
.bss:000000000021A0A8                 db    ? ;
.bss:000000000021A0A9                 db    ? ;
.bss:000000000021A0AA                 db    ? ;
.bss:000000000021A0AB                 db    ? ;
.bss:000000000021A0AC                 db    ? ;
.bss:000000000021A0AD                 db    ? ;
.bss:000000000021A0AE                 db    ? ;
.bss:000000000021A0AF                 db    ? ;
.bss:000000000021A0B0                 db    ? ;
.bss:000000000021A0B1                 db    ? ;
.bss:000000000021A0B2                 db    ? ;
.bss:000000000021A0B3                 db    ? ;
.bss:000000000021A0B4                 db    ? ;
.bss:000000000021A0B5                 db    ? ;
.bss:000000000021A0B6                 db    ? ;
.bss:000000000021A0B7                 db    ? ;
.bss:000000000021A0B8                 db    ? ;
.bss:000000000021A0B9                 db    ? ;
.bss:000000000021A0BA                 db    ? ;
.bss:000000000021A0BB                 db    ? ;
.bss:000000000021A0BC                 db    ? ;
.bss:000000000021A0BD                 db    ? ;
.bss:000000000021A0BE                 db    ? ;
.bss:000000000021A0BF                 db    ? ;
.bss:000000000021A0C0                 db    ? ;
.bss:000000000021A0C1                 db    ? ;
.bss:000000000021A0C2                 db    ? ;
.bss:000000000021A0C3                 db    ? ;
.bss:000000000021A0C4                 db    ? ;
.bss:000000000021A0C5                 db    ? ;
.bss:000000000021A0C6                 db    ? ;
.bss:000000000021A0C7                 db    ? ;
.bss:000000000021A0C8                 db    ? ;
.bss:000000000021A0C9                 db    ? ;
.bss:000000000021A0CA                 db    ? ;
.bss:000000000021A0CB                 db    ? ;
.bss:000000000021A0CC                 db    ? ;
.bss:000000000021A0CD                 db    ? ;
.bss:000000000021A0CE                 db    ? ;
.bss:000000000021A0CF                 db    ? ;
.bss:000000000021A0D0                 db    ? ;
.bss:000000000021A0D1                 db    ? ;
.bss:000000000021A0D2                 db    ? ;
.bss:000000000021A0D3                 db    ? ;
.bss:000000000021A0D4                 db    ? ;
.bss:000000000021A0D5                 db    ? ;
.bss:000000000021A0D6                 db    ? ;
.bss:000000000021A0D7                 db    ? ;
.bss:000000000021A0D8                 db    ? ;
.bss:000000000021A0D9                 db    ? ;
.bss:000000000021A0DA                 db    ? ;
.bss:000000000021A0DB                 db    ? ;
.bss:000000000021A0DC                 db    ? ;
.bss:000000000021A0DD                 db    ? ;
.bss:000000000021A0DE                 db    ? ;
.bss:000000000021A0DF                 db    ? ;
.bss:000000000021A0E0                 db    ? ;
.bss:000000000021A0E1                 db    ? ;
.bss:000000000021A0E2                 db    ? ;
.bss:000000000021A0E3                 db    ? ;
.bss:000000000021A0E4                 db    ? ;
.bss:000000000021A0E5                 db    ? ;
.bss:000000000021A0E6                 db    ? ;
.bss:000000000021A0E7                 db    ? ;
.bss:000000000021A0E8                 db    ? ;
.bss:000000000021A0E9                 db    ? ;
.bss:000000000021A0EA                 db    ? ;
.bss:000000000021A0EB                 db    ? ;
.bss:000000000021A0EC                 db    ? ;
.bss:000000000021A0ED                 db    ? ;
.bss:000000000021A0EE                 db    ? ;
.bss:000000000021A0EF                 db    ? ;
.bss:000000000021A0F0                 db    ? ;
.bss:000000000021A0F1                 db    ? ;
.bss:000000000021A0F2                 db    ? ;
.bss:000000000021A0F3                 db    ? ;
.bss:000000000021A0F4                 db    ? ;
.bss:000000000021A0F5                 db    ? ;
.bss:000000000021A0F6                 db    ? ;
.bss:000000000021A0F7                 db    ? ;
.bss:000000000021A0F8                 db    ? ;
.bss:000000000021A0F9                 db    ? ;
.bss:000000000021A0FA                 db    ? ;
.bss:000000000021A0FB                 db    ? ;
.bss:000000000021A0FC                 db    ? ;
.bss:000000000021A0FD                 db    ? ;
.bss:000000000021A0FE                 db    ? ;
.bss:000000000021A0FF                 db    ? ;
.bss:000000000021A100                 db    ? ;
.bss:000000000021A101                 db    ? ;
.bss:000000000021A102                 db    ? ;
.bss:000000000021A103                 db    ? ;
.bss:000000000021A104                 db    ? ;
.bss:000000000021A105                 db    ? ;
.bss:000000000021A106                 db    ? ;
.bss:000000000021A107                 db    ? ;
.bss:000000000021A108                 db    ? ;
.bss:000000000021A109                 db    ? ;
.bss:000000000021A10A                 db    ? ;
.bss:000000000021A10B                 db    ? ;
.bss:000000000021A10C                 db    ? ;
.bss:000000000021A10D                 db    ? ;
.bss:000000000021A10E                 db    ? ;
.bss:000000000021A10F                 db    ? ;
.bss:000000000021A110                 db    ? ;
.bss:000000000021A111                 db    ? ;
.bss:000000000021A112                 db    ? ;
.bss:000000000021A113                 db    ? ;
.bss:000000000021A114                 db    ? ;
.bss:000000000021A115                 db    ? ;
.bss:000000000021A116                 db    ? ;
.bss:000000000021A117                 db    ? ;
.bss:000000000021A118                 db    ? ;
.bss:000000000021A119                 db    ? ;
.bss:000000000021A11A                 db    ? ;
.bss:000000000021A11B                 db    ? ;
.bss:000000000021A11C                 db    ? ;
.bss:000000000021A11D                 db    ? ;
.bss:000000000021A11E                 db    ? ;
.bss:000000000021A11F                 db    ? ;
.bss:000000000021A120                 db    ? ;
.bss:000000000021A121                 db    ? ;
.bss:000000000021A122                 db    ? ;
.bss:000000000021A123                 db    ? ;
.bss:000000000021A124                 db    ? ;
.bss:000000000021A125                 db    ? ;
.bss:000000000021A126                 db    ? ;
.bss:000000000021A127                 db    ? ;
.bss:000000000021A128                 db    ? ;
.bss:000000000021A129                 db    ? ;
.bss:000000000021A12A                 db    ? ;
.bss:000000000021A12B                 db    ? ;
.bss:000000000021A12C                 db    ? ;
.bss:000000000021A12D                 db    ? ;
.bss:000000000021A12E                 db    ? ;
.bss:000000000021A12F                 db    ? ;
.bss:000000000021A130                 db    ? ;
.bss:000000000021A131                 db    ? ;
.bss:000000000021A132                 db    ? ;
.bss:000000000021A133                 db    ? ;
.bss:000000000021A134                 db    ? ;
.bss:000000000021A135                 db    ? ;
.bss:000000000021A136                 db    ? ;
.bss:000000000021A137                 db    ? ;
.bss:000000000021A138                 db    ? ;
.bss:000000000021A139                 db    ? ;
.bss:000000000021A13A                 db    ? ;
.bss:000000000021A13B                 db    ? ;
.bss:000000000021A13C                 db    ? ;
.bss:000000000021A13D                 db    ? ;
.bss:000000000021A13E                 db    ? ;
.bss:000000000021A13F                 db    ? ;
.bss:000000000021A140                 db    ? ;
.bss:000000000021A141                 db    ? ;
.bss:000000000021A142                 db    ? ;
.bss:000000000021A143                 db    ? ;
.bss:000000000021A144                 db    ? ;
.bss:000000000021A145                 db    ? ;
.bss:000000000021A146                 db    ? ;
.bss:000000000021A147                 db    ? ;
.bss:000000000021A148                 db    ? ;
.bss:000000000021A149                 db    ? ;
.bss:000000000021A14A                 db    ? ;
.bss:000000000021A14B                 db    ? ;
.bss:000000000021A14C                 db    ? ;
.bss:000000000021A14D                 db    ? ;
.bss:000000000021A14E                 db    ? ;
.bss:000000000021A14F                 db    ? ;
.bss:000000000021A150                 db    ? ;
.bss:000000000021A151                 db    ? ;
.bss:000000000021A152                 db    ? ;
.bss:000000000021A153                 db    ? ;
.bss:000000000021A154                 db    ? ;
.bss:000000000021A155                 db    ? ;
.bss:000000000021A156                 db    ? ;
.bss:000000000021A157                 db    ? ;
.bss:000000000021A158                 db    ? ;
.bss:000000000021A159                 db    ? ;
.bss:000000000021A15A                 db    ? ;
.bss:000000000021A15B                 db    ? ;
.bss:000000000021A15C                 db    ? ;
.bss:000000000021A15D                 db    ? ;
.bss:000000000021A15E                 db    ? ;
.bss:000000000021A15F                 db    ? ;
.bss:000000000021A160                 db    ? ;
.bss:000000000021A161                 db    ? ;
.bss:000000000021A162                 db    ? ;
.bss:000000000021A163                 db    ? ;
.bss:000000000021A164                 db    ? ;
.bss:000000000021A165                 db    ? ;
.bss:000000000021A166                 db    ? ;
.bss:000000000021A167                 db    ? ;
.bss:000000000021A168                 db    ? ;
.bss:000000000021A169                 db    ? ;
.bss:000000000021A16A                 db    ? ;
.bss:000000000021A16B                 db    ? ;
.bss:000000000021A16C                 db    ? ;
.bss:000000000021A16D                 db    ? ;
.bss:000000000021A16E                 db    ? ;
.bss:000000000021A16F                 db    ? ;
.bss:000000000021A170                 db    ? ;
.bss:000000000021A171                 db    ? ;
.bss:000000000021A172                 db    ? ;
.bss:000000000021A173                 db    ? ;
.bss:000000000021A174                 db    ? ;
.bss:000000000021A175                 db    ? ;
.bss:000000000021A176                 db    ? ;
.bss:000000000021A177                 db    ? ;
.bss:000000000021A178                 db    ? ;
.bss:000000000021A179                 db    ? ;
.bss:000000000021A17A                 db    ? ;
.bss:000000000021A17B                 db    ? ;
.bss:000000000021A17C                 db    ? ;
.bss:000000000021A17D                 db    ? ;
.bss:000000000021A17E                 db    ? ;
.bss:000000000021A17F                 db    ? ;
.bss:000000000021A180                 db    ? ;
.bss:000000000021A181                 db    ? ;
.bss:000000000021A182                 db    ? ;
.bss:000000000021A183                 db    ? ;
.bss:000000000021A184                 db    ? ;
.bss:000000000021A185                 db    ? ;
.bss:000000000021A186                 db    ? ;
.bss:000000000021A187                 db    ? ;
.bss:000000000021A188                 db    ? ;
.bss:000000000021A189                 db    ? ;
.bss:000000000021A18A                 db    ? ;
.bss:000000000021A18B                 db    ? ;
.bss:000000000021A18C                 db    ? ;
.bss:000000000021A18D                 db    ? ;
.bss:000000000021A18E                 db    ? ;
.bss:000000000021A18F                 db    ? ;
.bss:000000000021A190                 db    ? ;
.bss:000000000021A191                 db    ? ;
.bss:000000000021A192                 db    ? ;
.bss:000000000021A193                 db    ? ;
.bss:000000000021A194                 db    ? ;
.bss:000000000021A195                 db    ? ;
.bss:000000000021A196                 db    ? ;
.bss:000000000021A197                 db    ? ;
.bss:000000000021A198                 db    ? ;
.bss:000000000021A199                 db    ? ;
.bss:000000000021A19A                 db    ? ;
.bss:000000000021A19B                 db    ? ;
.bss:000000000021A19C                 db    ? ;
.bss:000000000021A19D                 db    ? ;
.bss:000000000021A19E                 db    ? ;
.bss:000000000021A19F                 db    ? ;
.bss:000000000021A1A0                 db    ? ;
.bss:000000000021A1A1                 db    ? ;
.bss:000000000021A1A2                 db    ? ;
.bss:000000000021A1A3                 db    ? ;
.bss:000000000021A1A4                 db    ? ;
.bss:000000000021A1A5                 db    ? ;
.bss:000000000021A1A6                 db    ? ;
.bss:000000000021A1A7                 db    ? ;
.bss:000000000021A1A8                 db    ? ;
.bss:000000000021A1A9                 db    ? ;
.bss:000000000021A1AA                 db    ? ;
.bss:000000000021A1AB                 db    ? ;
.bss:000000000021A1AC                 db    ? ;
.bss:000000000021A1AD                 db    ? ;
.bss:000000000021A1AE                 db    ? ;
.bss:000000000021A1AF                 db    ? ;
.bss:000000000021A1B0                 db    ? ;
.bss:000000000021A1B1                 db    ? ;
.bss:000000000021A1B2                 db    ? ;
.bss:000000000021A1B3                 db    ? ;
.bss:000000000021A1B4                 db    ? ;
.bss:000000000021A1B5                 db    ? ;
.bss:000000000021A1B6                 db    ? ;
.bss:000000000021A1B7                 db    ? ;
.bss:000000000021A1B8                 db    ? ;
.bss:000000000021A1B9                 db    ? ;
.bss:000000000021A1BA                 db    ? ;
.bss:000000000021A1BB                 db    ? ;
.bss:000000000021A1BC                 db    ? ;
.bss:000000000021A1BD                 db    ? ;
.bss:000000000021A1BE                 db    ? ;
.bss:000000000021A1BF                 db    ? ;
.bss:000000000021A1C0                 db    ? ;
.bss:000000000021A1C1                 db    ? ;
.bss:000000000021A1C2                 db    ? ;
.bss:000000000021A1C3                 db    ? ;
.bss:000000000021A1C4                 db    ? ;
.bss:000000000021A1C5                 db    ? ;
.bss:000000000021A1C6                 db    ? ;
.bss:000000000021A1C7                 db    ? ;
.bss:000000000021A1C8                 db    ? ;
.bss:000000000021A1C9                 db    ? ;
.bss:000000000021A1CA                 db    ? ;
.bss:000000000021A1CB                 db    ? ;
.bss:000000000021A1CC                 db    ? ;
.bss:000000000021A1CD                 db    ? ;
.bss:000000000021A1CE                 db    ? ;
.bss:000000000021A1CF                 db    ? ;
.bss:000000000021A1D0                 db    ? ;
.bss:000000000021A1D1                 db    ? ;
.bss:000000000021A1D2                 db    ? ;
.bss:000000000021A1D3                 db    ? ;
.bss:000000000021A1D4                 db    ? ;
.bss:000000000021A1D5                 db    ? ;
.bss:000000000021A1D6                 db    ? ;
.bss:000000000021A1D7                 db    ? ;
.bss:000000000021A1D8                 db    ? ;
.bss:000000000021A1D9                 db    ? ;
.bss:000000000021A1DA                 db    ? ;
.bss:000000000021A1DB                 db    ? ;
.bss:000000000021A1DC                 db    ? ;
.bss:000000000021A1DD                 db    ? ;
.bss:000000000021A1DE                 db    ? ;
.bss:000000000021A1DF                 db    ? ;
.bss:000000000021A1E0                 db    ? ;
.bss:000000000021A1E1                 db    ? ;
.bss:000000000021A1E2                 db    ? ;
.bss:000000000021A1E3                 db    ? ;
.bss:000000000021A1E4                 db    ? ;
.bss:000000000021A1E5                 db    ? ;
.bss:000000000021A1E6                 db    ? ;
.bss:000000000021A1E7                 db    ? ;
.bss:000000000021A1E8                 db    ? ;
.bss:000000000021A1E9                 db    ? ;
.bss:000000000021A1EA                 db    ? ;
.bss:000000000021A1EB                 db    ? ;
.bss:000000000021A1EC                 db    ? ;
.bss:000000000021A1ED                 db    ? ;
.bss:000000000021A1EE                 db    ? ;
.bss:000000000021A1EF                 db    ? ;
.bss:000000000021A1F0                 db    ? ;
.bss:000000000021A1F1                 db    ? ;
.bss:000000000021A1F2                 db    ? ;
.bss:000000000021A1F3                 db    ? ;
.bss:000000000021A1F4                 db    ? ;
.bss:000000000021A1F5                 db    ? ;
.bss:000000000021A1F6                 db    ? ;
.bss:000000000021A1F7                 db    ? ;
.bss:000000000021A1F8                 db    ? ;
.bss:000000000021A1F9                 db    ? ;
.bss:000000000021A1FA                 db    ? ;
.bss:000000000021A1FB                 db    ? ;
.bss:000000000021A1FC                 db    ? ;
.bss:000000000021A1FD                 db    ? ;
.bss:000000000021A1FE                 db    ? ;
.bss:000000000021A1FF                 db    ? ;
.bss:000000000021A200                 db    ? ;
.bss:000000000021A201                 db    ? ;
.bss:000000000021A202                 db    ? ;
.bss:000000000021A203                 db    ? ;
.bss:000000000021A204                 db    ? ;
.bss:000000000021A205                 db    ? ;
.bss:000000000021A206                 db    ? ;
.bss:000000000021A207                 db    ? ;
.bss:000000000021A208                 db    ? ;
.bss:000000000021A209                 db    ? ;
.bss:000000000021A20A                 db    ? ;
.bss:000000000021A20B                 db    ? ;
.bss:000000000021A20C                 db    ? ;
.bss:000000000021A20D                 db    ? ;
.bss:000000000021A20E                 db    ? ;
.bss:000000000021A20F                 db    ? ;
.bss:000000000021A210                 db    ? ;
.bss:000000000021A211                 db    ? ;
.bss:000000000021A212                 db    ? ;
.bss:000000000021A213                 db    ? ;
.bss:000000000021A214                 db    ? ;
.bss:000000000021A215                 db    ? ;
.bss:000000000021A216                 db    ? ;
.bss:000000000021A217                 db    ? ;
.bss:000000000021A218                 db    ? ;
.bss:000000000021A219                 db    ? ;
.bss:000000000021A21A                 db    ? ;
.bss:000000000021A21B                 db    ? ;
.bss:000000000021A21C                 db    ? ;
.bss:000000000021A21D                 db    ? ;
.bss:000000000021A21E                 db    ? ;
.bss:000000000021A21F                 db    ? ;
.bss:000000000021A220                 db    ? ;
.bss:000000000021A221                 db    ? ;
.bss:000000000021A222                 db    ? ;
.bss:000000000021A223                 db    ? ;
.bss:000000000021A224                 db    ? ;
.bss:000000000021A225                 db    ? ;
.bss:000000000021A226                 db    ? ;
.bss:000000000021A227                 db    ? ;
.bss:000000000021A228                 db    ? ;
.bss:000000000021A229                 db    ? ;
.bss:000000000021A22A                 db    ? ;
.bss:000000000021A22B                 db    ? ;
.bss:000000000021A22C                 db    ? ;
.bss:000000000021A22D                 db    ? ;
.bss:000000000021A22E                 db    ? ;
.bss:000000000021A22F                 db    ? ;
.bss:000000000021A230                 db    ? ;
.bss:000000000021A231                 db    ? ;
.bss:000000000021A232                 db    ? ;
.bss:000000000021A233                 db    ? ;
.bss:000000000021A234                 db    ? ;
.bss:000000000021A235                 db    ? ;
.bss:000000000021A236                 db    ? ;
.bss:000000000021A237                 db    ? ;
.bss:000000000021A238                 db    ? ;
.bss:000000000021A239                 db    ? ;
.bss:000000000021A23A                 db    ? ;
.bss:000000000021A23B                 db    ? ;
.bss:000000000021A23C                 db    ? ;
.bss:000000000021A23D                 db    ? ;
.bss:000000000021A23E                 db    ? ;
.bss:000000000021A23F                 db    ? ;
.bss:000000000021A240                 db    ? ;
.bss:000000000021A241                 db    ? ;
.bss:000000000021A242                 db    ? ;
.bss:000000000021A243                 db    ? ;
.bss:000000000021A244                 db    ? ;
.bss:000000000021A245                 db    ? ;
.bss:000000000021A246                 db    ? ;
.bss:000000000021A247                 db    ? ;
.bss:000000000021A248                 db    ? ;
.bss:000000000021A249                 db    ? ;
.bss:000000000021A24A                 db    ? ;
.bss:000000000021A24B                 db    ? ;
.bss:000000000021A24C                 db    ? ;
.bss:000000000021A24D                 db    ? ;
.bss:000000000021A24E                 db    ? ;
.bss:000000000021A24F                 db    ? ;
.bss:000000000021A250                 db    ? ;
.bss:000000000021A251                 db    ? ;
.bss:000000000021A252                 db    ? ;
.bss:000000000021A253                 db    ? ;
.bss:000000000021A254                 db    ? ;
.bss:000000000021A255                 db    ? ;
.bss:000000000021A256                 db    ? ;
.bss:000000000021A257                 db    ? ;
.bss:000000000021A258                 db    ? ;
.bss:000000000021A259                 db    ? ;
.bss:000000000021A25A                 db    ? ;
.bss:000000000021A25B                 db    ? ;
.bss:000000000021A25C                 db    ? ;
.bss:000000000021A25D                 db    ? ;
.bss:000000000021A25E                 db    ? ;
.bss:000000000021A25F                 db    ? ;
.bss:000000000021A260                 db    ? ;
.bss:000000000021A261                 db    ? ;
.bss:000000000021A262                 db    ? ;
.bss:000000000021A263                 db    ? ;
.bss:000000000021A264                 db    ? ;
.bss:000000000021A265                 db    ? ;
.bss:000000000021A266                 db    ? ;
.bss:000000000021A267                 db    ? ;
.bss:000000000021A268                 db    ? ;
.bss:000000000021A269                 db    ? ;
.bss:000000000021A26A                 db    ? ;
.bss:000000000021A26B                 db    ? ;
.bss:000000000021A26C                 db    ? ;
.bss:000000000021A26D                 db    ? ;
.bss:000000000021A26E                 db    ? ;
.bss:000000000021A26F                 db    ? ;
.bss:000000000021A270                 db    ? ;
.bss:000000000021A271                 db    ? ;
.bss:000000000021A272                 db    ? ;
.bss:000000000021A273                 db    ? ;
.bss:000000000021A274                 db    ? ;
.bss:000000000021A275                 db    ? ;
.bss:000000000021A276                 db    ? ;
.bss:000000000021A277                 db    ? ;
.bss:000000000021A278                 db    ? ;
.bss:000000000021A279                 db    ? ;
.bss:000000000021A27A                 db    ? ;
.bss:000000000021A27B                 db    ? ;
.bss:000000000021A27C                 db    ? ;
.bss:000000000021A27D                 db    ? ;
.bss:000000000021A27E                 db    ? ;
.bss:000000000021A27F                 db    ? ;
.bss:000000000021A280                 db    ? ;
.bss:000000000021A281                 db    ? ;
.bss:000000000021A282                 db    ? ;
.bss:000000000021A283                 db    ? ;
.bss:000000000021A284                 db    ? ;
.bss:000000000021A285                 db    ? ;
.bss:000000000021A286                 db    ? ;
.bss:000000000021A287                 db    ? ;
.bss:000000000021A288                 db    ? ;
.bss:000000000021A289                 db    ? ;
.bss:000000000021A28A                 db    ? ;
.bss:000000000021A28B                 db    ? ;
.bss:000000000021A28C                 db    ? ;
.bss:000000000021A28D                 db    ? ;
.bss:000000000021A28E                 db    ? ;
.bss:000000000021A28F                 db    ? ;
.bss:000000000021A290                 db    ? ;
.bss:000000000021A291                 db    ? ;
.bss:000000000021A292                 db    ? ;
.bss:000000000021A293                 db    ? ;
.bss:000000000021A294                 db    ? ;
.bss:000000000021A295                 db    ? ;
.bss:000000000021A296                 db    ? ;
.bss:000000000021A297                 db    ? ;
.bss:000000000021A298                 db    ? ;
.bss:000000000021A299                 db    ? ;
.bss:000000000021A29A                 db    ? ;
.bss:000000000021A29B                 db    ? ;
.bss:000000000021A29C                 db    ? ;
.bss:000000000021A29D                 db    ? ;
.bss:000000000021A29E                 db    ? ;
.bss:000000000021A29F                 db    ? ;
.bss:000000000021A2A0                 db    ? ;
.bss:000000000021A2A1                 db    ? ;
.bss:000000000021A2A2                 db    ? ;
.bss:000000000021A2A3                 db    ? ;
.bss:000000000021A2A4                 db    ? ;
.bss:000000000021A2A5                 db    ? ;
.bss:000000000021A2A6                 db    ? ;
.bss:000000000021A2A7                 db    ? ;
.bss:000000000021A2A8                 db    ? ;
.bss:000000000021A2A9                 db    ? ;
.bss:000000000021A2AA                 db    ? ;
.bss:000000000021A2AB                 db    ? ;
.bss:000000000021A2AC                 db    ? ;
.bss:000000000021A2AD                 db    ? ;
.bss:000000000021A2AE                 db    ? ;
.bss:000000000021A2AF                 db    ? ;
.bss:000000000021A2B0                 db    ? ;
.bss:000000000021A2B1                 db    ? ;
.bss:000000000021A2B2                 db    ? ;
.bss:000000000021A2B3                 db    ? ;
.bss:000000000021A2B4                 db    ? ;
.bss:000000000021A2B5                 db    ? ;
.bss:000000000021A2B6                 db    ? ;
.bss:000000000021A2B7                 db    ? ;
.bss:000000000021A2B8                 db    ? ;
.bss:000000000021A2B9                 db    ? ;
.bss:000000000021A2BA                 db    ? ;
.bss:000000000021A2BB                 db    ? ;
.bss:000000000021A2BC                 db    ? ;
.bss:000000000021A2BD                 db    ? ;
.bss:000000000021A2BE                 db    ? ;
.bss:000000000021A2BF                 db    ? ;
.bss:000000000021A2C0                 db    ? ;
.bss:000000000021A2C1                 db    ? ;
.bss:000000000021A2C2                 db    ? ;
.bss:000000000021A2C3                 db    ? ;
.bss:000000000021A2C4                 db    ? ;
.bss:000000000021A2C5                 db    ? ;
.bss:000000000021A2C6                 db    ? ;
.bss:000000000021A2C7                 db    ? ;
.bss:000000000021A2C8                 db    ? ;
.bss:000000000021A2C9                 db    ? ;
.bss:000000000021A2CA                 db    ? ;
.bss:000000000021A2CB                 db    ? ;
.bss:000000000021A2CC                 db    ? ;
.bss:000000000021A2CD                 db    ? ;
.bss:000000000021A2CE                 db    ? ;
.bss:000000000021A2CF                 db    ? ;
.bss:000000000021A2D0                 db    ? ;
.bss:000000000021A2D1                 db    ? ;
.bss:000000000021A2D2                 db    ? ;
.bss:000000000021A2D3                 db    ? ;
.bss:000000000021A2D4                 db    ? ;
.bss:000000000021A2D5                 db    ? ;
.bss:000000000021A2D6                 db    ? ;
.bss:000000000021A2D7                 db    ? ;
.bss:000000000021A2D8                 db    ? ;
.bss:000000000021A2D9                 db    ? ;
.bss:000000000021A2DA                 db    ? ;
.bss:000000000021A2DB                 db    ? ;
.bss:000000000021A2DC                 db    ? ;
.bss:000000000021A2DD                 db    ? ;
.bss:000000000021A2DE                 db    ? ;
.bss:000000000021A2DF                 db    ? ;
.bss:000000000021A2E0                 db    ? ;
.bss:000000000021A2E1                 db    ? ;
.bss:000000000021A2E2                 db    ? ;
.bss:000000000021A2E3                 db    ? ;
.bss:000000000021A2E4                 db    ? ;
.bss:000000000021A2E5                 db    ? ;
.bss:000000000021A2E6                 db    ? ;
.bss:000000000021A2E7                 db    ? ;
.bss:000000000021A2E8                 db    ? ;
.bss:000000000021A2E9                 db    ? ;
.bss:000000000021A2EA                 db    ? ;
.bss:000000000021A2EB                 db    ? ;
.bss:000000000021A2EC                 db    ? ;
.bss:000000000021A2ED                 db    ? ;
.bss:000000000021A2EE                 db    ? ;
.bss:000000000021A2EF                 db    ? ;
.bss:000000000021A2F0                 db    ? ;
.bss:000000000021A2F1                 db    ? ;
.bss:000000000021A2F2                 db    ? ;
.bss:000000000021A2F3                 db    ? ;
.bss:000000000021A2F4                 db    ? ;
.bss:000000000021A2F5                 db    ? ;
.bss:000000000021A2F6                 db    ? ;
.bss:000000000021A2F7                 db    ? ;
.bss:000000000021A2F8                 db    ? ;
.bss:000000000021A2F9                 db    ? ;
.bss:000000000021A2FA                 db    ? ;
.bss:000000000021A2FB                 db    ? ;
.bss:000000000021A2FC                 db    ? ;
.bss:000000000021A2FD                 db    ? ;
.bss:000000000021A2FE                 db    ? ;
.bss:000000000021A2FF                 db    ? ;
.bss:000000000021A300                 db    ? ;
.bss:000000000021A301                 db    ? ;
.bss:000000000021A302                 db    ? ;
.bss:000000000021A303                 db    ? ;
.bss:000000000021A304                 db    ? ;
.bss:000000000021A305                 db    ? ;
.bss:000000000021A306                 db    ? ;
.bss:000000000021A307                 db    ? ;
.bss:000000000021A308                 db    ? ;
.bss:000000000021A309                 db    ? ;
.bss:000000000021A30A                 db    ? ;
.bss:000000000021A30B                 db    ? ;
.bss:000000000021A30C                 db    ? ;
.bss:000000000021A30D                 db    ? ;
.bss:000000000021A30E                 db    ? ;
.bss:000000000021A30F                 db    ? ;
.bss:000000000021A310                 db    ? ;
.bss:000000000021A311                 db    ? ;
.bss:000000000021A312                 db    ? ;
.bss:000000000021A313                 db    ? ;
.bss:000000000021A314                 db    ? ;
.bss:000000000021A315                 db    ? ;
.bss:000000000021A316                 db    ? ;
.bss:000000000021A317                 db    ? ;
.bss:000000000021A318                 db    ? ;
.bss:000000000021A319                 db    ? ;
.bss:000000000021A31A                 db    ? ;
.bss:000000000021A31B                 db    ? ;
.bss:000000000021A31C                 db    ? ;
.bss:000000000021A31D                 db    ? ;
.bss:000000000021A31E                 db    ? ;
.bss:000000000021A31F                 db    ? ;
.bss:000000000021A320                 db    ? ;
.bss:000000000021A321                 db    ? ;
.bss:000000000021A322                 db    ? ;
.bss:000000000021A323                 db    ? ;
.bss:000000000021A324                 db    ? ;
.bss:000000000021A325                 db    ? ;
.bss:000000000021A326                 db    ? ;
.bss:000000000021A327                 db    ? ;
.bss:000000000021A328                 db    ? ;
.bss:000000000021A329                 db    ? ;
.bss:000000000021A32A                 db    ? ;
.bss:000000000021A32B                 db    ? ;
.bss:000000000021A32C                 db    ? ;
.bss:000000000021A32D                 db    ? ;
.bss:000000000021A32E                 db    ? ;
.bss:000000000021A32F                 db    ? ;
.bss:000000000021A330                 db    ? ;
.bss:000000000021A331                 db    ? ;
.bss:000000000021A332                 db    ? ;
.bss:000000000021A333                 db    ? ;
.bss:000000000021A334                 db    ? ;
.bss:000000000021A335                 db    ? ;
.bss:000000000021A336                 db    ? ;
.bss:000000000021A337                 db    ? ;
.bss:000000000021A338                 db    ? ;
.bss:000000000021A339                 db    ? ;
.bss:000000000021A33A                 db    ? ;
.bss:000000000021A33B                 db    ? ;
.bss:000000000021A33C                 db    ? ;
.bss:000000000021A33D                 db    ? ;
.bss:000000000021A33E                 db    ? ;
.bss:000000000021A33F                 db    ? ;
.bss:000000000021A340                 db    ? ;
.bss:000000000021A341                 db    ? ;
.bss:000000000021A342                 db    ? ;
.bss:000000000021A343                 db    ? ;
.bss:000000000021A344                 db    ? ;
.bss:000000000021A345                 db    ? ;
.bss:000000000021A346                 db    ? ;
.bss:000000000021A347                 db    ? ;
.bss:000000000021A348                 db    ? ;
.bss:000000000021A349                 db    ? ;
.bss:000000000021A34A                 db    ? ;
.bss:000000000021A34B                 db    ? ;
.bss:000000000021A34C                 db    ? ;
.bss:000000000021A34D                 db    ? ;
.bss:000000000021A34E                 db    ? ;
.bss:000000000021A34F                 db    ? ;
.bss:000000000021A350                 db    ? ;
.bss:000000000021A351                 db    ? ;
.bss:000000000021A352                 db    ? ;
.bss:000000000021A353                 db    ? ;
.bss:000000000021A354                 db    ? ;
.bss:000000000021A355                 db    ? ;
.bss:000000000021A356                 db    ? ;
.bss:000000000021A357                 db    ? ;
.bss:000000000021A358                 db    ? ;
.bss:000000000021A359                 db    ? ;
.bss:000000000021A35A                 db    ? ;
.bss:000000000021A35B                 db    ? ;
.bss:000000000021A35C                 db    ? ;
.bss:000000000021A35D                 db    ? ;
.bss:000000000021A35E                 db    ? ;
.bss:000000000021A35F                 db    ? ;
.bss:000000000021A360                 db    ? ;
.bss:000000000021A361                 db    ? ;
.bss:000000000021A362                 db    ? ;
.bss:000000000021A363                 db    ? ;
.bss:000000000021A364                 db    ? ;
.bss:000000000021A365                 db    ? ;
.bss:000000000021A366                 db    ? ;
.bss:000000000021A367                 db    ? ;
.bss:000000000021A368                 db    ? ;
.bss:000000000021A369                 db    ? ;
.bss:000000000021A36A                 db    ? ;
.bss:000000000021A36B                 db    ? ;
.bss:000000000021A36C                 db    ? ;
.bss:000000000021A36D                 db    ? ;
.bss:000000000021A36E                 db    ? ;
.bss:000000000021A36F                 db    ? ;
.bss:000000000021A370                 db    ? ;
.bss:000000000021A371                 db    ? ;
.bss:000000000021A372                 db    ? ;
.bss:000000000021A373                 db    ? ;
.bss:000000000021A374                 db    ? ;
.bss:000000000021A375                 db    ? ;
.bss:000000000021A376                 db    ? ;
.bss:000000000021A377                 db    ? ;
.bss:000000000021A378                 db    ? ;
.bss:000000000021A379                 db    ? ;
.bss:000000000021A37A                 db    ? ;
.bss:000000000021A37B                 db    ? ;
.bss:000000000021A37C                 db    ? ;
.bss:000000000021A37D                 db    ? ;
.bss:000000000021A37E                 db    ? ;
.bss:000000000021A37F                 db    ? ;
.bss:000000000021A380                 db    ? ;
.bss:000000000021A381                 db    ? ;
.bss:000000000021A382                 db    ? ;
.bss:000000000021A383                 db    ? ;
.bss:000000000021A384                 db    ? ;
.bss:000000000021A385                 db    ? ;
.bss:000000000021A386                 db    ? ;
.bss:000000000021A387                 db    ? ;
.bss:000000000021A388                 db    ? ;
.bss:000000000021A389                 db    ? ;
.bss:000000000021A38A                 db    ? ;
.bss:000000000021A38B                 db    ? ;
.bss:000000000021A38C                 db    ? ;
.bss:000000000021A38D                 db    ? ;
.bss:000000000021A38E                 db    ? ;
.bss:000000000021A38F                 db    ? ;
.bss:000000000021A390                 db    ? ;
.bss:000000000021A391                 db    ? ;
.bss:000000000021A392                 db    ? ;
.bss:000000000021A393                 db    ? ;
.bss:000000000021A394                 db    ? ;
.bss:000000000021A395                 db    ? ;
.bss:000000000021A396                 db    ? ;
.bss:000000000021A397                 db    ? ;
.bss:000000000021A398                 db    ? ;
.bss:000000000021A399                 db    ? ;
.bss:000000000021A39A                 db    ? ;
.bss:000000000021A39B                 db    ? ;
.bss:000000000021A39C                 db    ? ;
.bss:000000000021A39D                 db    ? ;
.bss:000000000021A39E                 db    ? ;
.bss:000000000021A39F                 db    ? ;
.bss:000000000021A3A0                 db    ? ;
.bss:000000000021A3A1                 db    ? ;
.bss:000000000021A3A2                 db    ? ;
.bss:000000000021A3A3                 db    ? ;
.bss:000000000021A3A4                 db    ? ;
.bss:000000000021A3A5                 db    ? ;
.bss:000000000021A3A6                 db    ? ;
.bss:000000000021A3A7                 db    ? ;
.bss:000000000021A3A8                 db    ? ;
.bss:000000000021A3A9                 db    ? ;
.bss:000000000021A3AA                 db    ? ;
.bss:000000000021A3AB                 db    ? ;
.bss:000000000021A3AC                 db    ? ;
.bss:000000000021A3AD                 db    ? ;
.bss:000000000021A3AE                 db    ? ;
.bss:000000000021A3AF                 db    ? ;
.bss:000000000021A3B0                 db    ? ;
.bss:000000000021A3B1                 db    ? ;
.bss:000000000021A3B2                 db    ? ;
.bss:000000000021A3B3                 db    ? ;
.bss:000000000021A3B4                 db    ? ;
.bss:000000000021A3B5                 db    ? ;
.bss:000000000021A3B6                 db    ? ;
.bss:000000000021A3B7                 db    ? ;
.bss:000000000021A3B8                 db    ? ;
.bss:000000000021A3B9                 db    ? ;
.bss:000000000021A3BA                 db    ? ;
.bss:000000000021A3BB                 db    ? ;
.bss:000000000021A3BC                 db    ? ;
.bss:000000000021A3BD                 db    ? ;
.bss:000000000021A3BE                 db    ? ;
.bss:000000000021A3BF                 db    ? ;
.bss:000000000021A3C0                 db    ? ;
.bss:000000000021A3C1                 db    ? ;
.bss:000000000021A3C2                 db    ? ;
.bss:000000000021A3C3                 db    ? ;
.bss:000000000021A3C4                 db    ? ;
.bss:000000000021A3C5                 db    ? ;
.bss:000000000021A3C6                 db    ? ;
.bss:000000000021A3C7                 db    ? ;
.bss:000000000021A3C8                 db    ? ;
.bss:000000000021A3C9                 db    ? ;
.bss:000000000021A3CA                 db    ? ;
.bss:000000000021A3CB                 db    ? ;
.bss:000000000021A3CC                 db    ? ;
.bss:000000000021A3CD                 db    ? ;
.bss:000000000021A3CE                 db    ? ;
.bss:000000000021A3CF                 db    ? ;
.bss:000000000021A3D0                 db    ? ;
.bss:000000000021A3D1                 db    ? ;
.bss:000000000021A3D2                 db    ? ;
.bss:000000000021A3D3                 db    ? ;
.bss:000000000021A3D4                 db    ? ;
.bss:000000000021A3D5                 db    ? ;
.bss:000000000021A3D6                 db    ? ;
.bss:000000000021A3D7                 db    ? ;
.bss:000000000021A3D8                 db    ? ;
.bss:000000000021A3D9                 db    ? ;
.bss:000000000021A3DA                 db    ? ;
.bss:000000000021A3DB                 db    ? ;
.bss:000000000021A3DC                 db    ? ;
.bss:000000000021A3DD                 db    ? ;
.bss:000000000021A3DE                 db    ? ;
.bss:000000000021A3DF                 db    ? ;
.bss:000000000021A3E0                 db    ? ;
.bss:000000000021A3E1                 db    ? ;
.bss:000000000021A3E2                 db    ? ;
.bss:000000000021A3E3                 db    ? ;
.bss:000000000021A3E4                 db    ? ;
.bss:000000000021A3E5                 db    ? ;
.bss:000000000021A3E6                 db    ? ;
.bss:000000000021A3E7                 db    ? ;
.bss:000000000021A3E8                 db    ? ;
.bss:000000000021A3E9                 db    ? ;
.bss:000000000021A3EA                 db    ? ;
.bss:000000000021A3EB                 db    ? ;
.bss:000000000021A3EC                 db    ? ;
.bss:000000000021A3ED                 db    ? ;
.bss:000000000021A3EE                 db    ? ;
.bss:000000000021A3EF                 db    ? ;
.bss:000000000021A3F0                 db    ? ;
.bss:000000000021A3F1                 db    ? ;
.bss:000000000021A3F2                 db    ? ;
.bss:000000000021A3F3                 db    ? ;
.bss:000000000021A3F4                 db    ? ;
.bss:000000000021A3F5                 db    ? ;
.bss:000000000021A3F6                 db    ? ;
.bss:000000000021A3F7                 db    ? ;
.bss:000000000021A3F8                 db    ? ;
.bss:000000000021A3F9                 db    ? ;
.bss:000000000021A3FA                 db    ? ;
.bss:000000000021A3FB                 db    ? ;
.bss:000000000021A3FC                 db    ? ;
.bss:000000000021A3FD                 db    ? ;
.bss:000000000021A3FE                 db    ? ;
.bss:000000000021A3FF                 db    ? ;
.bss:000000000021A400                 db    ? ;
.bss:000000000021A401                 db    ? ;
.bss:000000000021A402                 db    ? ;
.bss:000000000021A403                 db    ? ;
.bss:000000000021A404                 db    ? ;
.bss:000000000021A405                 db    ? ;
.bss:000000000021A406                 db    ? ;
.bss:000000000021A407                 db    ? ;
.bss:000000000021A408                 db    ? ;
.bss:000000000021A409                 db    ? ;
.bss:000000000021A40A                 db    ? ;
.bss:000000000021A40B                 db    ? ;
.bss:000000000021A40C                 db    ? ;
.bss:000000000021A40D                 db    ? ;
.bss:000000000021A40E                 db    ? ;
.bss:000000000021A40F                 db    ? ;
.bss:000000000021A410                 db    ? ;
.bss:000000000021A411                 db    ? ;
.bss:000000000021A412                 db    ? ;
.bss:000000000021A413                 db    ? ;
.bss:000000000021A414                 db    ? ;
.bss:000000000021A415                 db    ? ;
.bss:000000000021A416                 db    ? ;
.bss:000000000021A417                 db    ? ;
.bss:000000000021A418                 db    ? ;
.bss:000000000021A419                 db    ? ;
.bss:000000000021A41A                 db    ? ;
.bss:000000000021A41B                 db    ? ;
.bss:000000000021A41C                 db    ? ;
.bss:000000000021A41D                 db    ? ;
.bss:000000000021A41E                 db    ? ;
.bss:000000000021A41F                 db    ? ;
.bss:000000000021A420                 db    ? ;
.bss:000000000021A421                 db    ? ;
.bss:000000000021A422                 db    ? ;
.bss:000000000021A423                 db    ? ;
.bss:000000000021A424                 db    ? ;
.bss:000000000021A425                 db    ? ;
.bss:000000000021A426                 db    ? ;
.bss:000000000021A427                 db    ? ;
.bss:000000000021A428                 db    ? ;
.bss:000000000021A429                 db    ? ;
.bss:000000000021A42A                 db    ? ;
.bss:000000000021A42B                 db    ? ;
.bss:000000000021A42C                 db    ? ;
.bss:000000000021A42D                 db    ? ;
.bss:000000000021A42E                 db    ? ;
.bss:000000000021A42F                 db    ? ;
.bss:000000000021A430                 db    ? ;
.bss:000000000021A431                 db    ? ;
.bss:000000000021A432                 db    ? ;
.bss:000000000021A433                 db    ? ;
.bss:000000000021A434                 db    ? ;
.bss:000000000021A435                 db    ? ;
.bss:000000000021A436                 db    ? ;
.bss:000000000021A437                 db    ? ;
.bss:000000000021A438                 db    ? ;
.bss:000000000021A439                 db    ? ;
.bss:000000000021A43A                 db    ? ;
.bss:000000000021A43B                 db    ? ;
.bss:000000000021A43C                 db    ? ;
.bss:000000000021A43D                 db    ? ;
.bss:000000000021A43E                 db    ? ;
.bss:000000000021A43F                 db    ? ;
.bss:000000000021A440                 db    ? ;
.bss:000000000021A441                 db    ? ;
.bss:000000000021A442                 db    ? ;
.bss:000000000021A443                 db    ? ;
.bss:000000000021A444                 db    ? ;
.bss:000000000021A445                 db    ? ;
.bss:000000000021A446                 db    ? ;
.bss:000000000021A447                 db    ? ;
.bss:000000000021A448                 db    ? ;
.bss:000000000021A449                 db    ? ;
.bss:000000000021A44A                 db    ? ;
.bss:000000000021A44B                 db    ? ;
.bss:000000000021A44C                 db    ? ;
.bss:000000000021A44D                 db    ? ;
.bss:000000000021A44E                 db    ? ;
.bss:000000000021A44F                 db    ? ;
.bss:000000000021A450                 db    ? ;
.bss:000000000021A451                 db    ? ;
.bss:000000000021A452                 db    ? ;
.bss:000000000021A453                 db    ? ;
.bss:000000000021A454                 db    ? ;
.bss:000000000021A455                 db    ? ;
.bss:000000000021A456                 db    ? ;
.bss:000000000021A457                 db    ? ;
.bss:000000000021A458                 db    ? ;
.bss:000000000021A459                 db    ? ;
.bss:000000000021A45A                 db    ? ;
.bss:000000000021A45B                 db    ? ;
.bss:000000000021A45C                 db    ? ;
.bss:000000000021A45D                 db    ? ;
.bss:000000000021A45E                 db    ? ;
.bss:000000000021A45F                 db    ? ;
.bss:000000000021A460                 db    ? ;
.bss:000000000021A461                 db    ? ;
.bss:000000000021A462                 db    ? ;
.bss:000000000021A463                 db    ? ;
.bss:000000000021A464                 db    ? ;
.bss:000000000021A465                 db    ? ;
.bss:000000000021A466                 db    ? ;
.bss:000000000021A467                 db    ? ;
.bss:000000000021A468                 db    ? ;
.bss:000000000021A469                 db    ? ;
.bss:000000000021A46A                 db    ? ;
.bss:000000000021A46B                 db    ? ;
.bss:000000000021A46C                 db    ? ;
.bss:000000000021A46D                 db    ? ;
.bss:000000000021A46E                 db    ? ;
.bss:000000000021A46F                 db    ? ;
.bss:000000000021A470                 db    ? ;
.bss:000000000021A471                 db    ? ;
.bss:000000000021A472                 db    ? ;
.bss:000000000021A473                 db    ? ;
.bss:000000000021A474                 db    ? ;
.bss:000000000021A475                 db    ? ;
.bss:000000000021A476                 db    ? ;
.bss:000000000021A477                 db    ? ;
.bss:000000000021A478                 db    ? ;
.bss:000000000021A479                 db    ? ;
.bss:000000000021A47A                 db    ? ;
.bss:000000000021A47B                 db    ? ;
.bss:000000000021A47C                 db    ? ;
.bss:000000000021A47D                 db    ? ;
.bss:000000000021A47E                 db    ? ;
.bss:000000000021A47F                 db    ? ;
.bss:000000000021A480                 db    ? ;
.bss:000000000021A481                 db    ? ;
.bss:000000000021A482                 db    ? ;
.bss:000000000021A483                 db    ? ;
.bss:000000000021A484                 db    ? ;
.bss:000000000021A485                 db    ? ;
.bss:000000000021A486                 db    ? ;
.bss:000000000021A487                 db    ? ;
.bss:000000000021A488                 db    ? ;
.bss:000000000021A489                 db    ? ;
.bss:000000000021A48A                 db    ? ;
.bss:000000000021A48B                 db    ? ;
.bss:000000000021A48C                 db    ? ;
.bss:000000000021A48D                 db    ? ;
.bss:000000000021A48E                 db    ? ;
.bss:000000000021A48F                 db    ? ;
.bss:000000000021A490                 db    ? ;
.bss:000000000021A491                 db    ? ;
.bss:000000000021A492                 db    ? ;
.bss:000000000021A493                 db    ? ;
.bss:000000000021A494                 db    ? ;
.bss:000000000021A495                 db    ? ;
.bss:000000000021A496                 db    ? ;
.bss:000000000021A497                 db    ? ;
.bss:000000000021A498                 db    ? ;
.bss:000000000021A499                 db    ? ;
.bss:000000000021A49A                 db    ? ;
.bss:000000000021A49B                 db    ? ;
.bss:000000000021A49C                 db    ? ;
.bss:000000000021A49D                 db    ? ;
.bss:000000000021A49E                 db    ? ;
.bss:000000000021A49F                 db    ? ;
.bss:000000000021A4A0                 db    ? ;
.bss:000000000021A4A1                 db    ? ;
.bss:000000000021A4A2                 db    ? ;
.bss:000000000021A4A3                 db    ? ;
.bss:000000000021A4A4                 db    ? ;
.bss:000000000021A4A5                 db    ? ;
.bss:000000000021A4A6                 db    ? ;
.bss:000000000021A4A7                 db    ? ;
.bss:000000000021A4A8                 db    ? ;
.bss:000000000021A4A9                 db    ? ;
.bss:000000000021A4AA                 db    ? ;
.bss:000000000021A4AB                 db    ? ;
.bss:000000000021A4AC                 db    ? ;
.bss:000000000021A4AD                 db    ? ;
.bss:000000000021A4AE                 db    ? ;
.bss:000000000021A4AF                 db    ? ;
.bss:000000000021A4B0                 db    ? ;
.bss:000000000021A4B1                 db    ? ;
.bss:000000000021A4B2                 db    ? ;
.bss:000000000021A4B3                 db    ? ;
.bss:000000000021A4B4                 db    ? ;
.bss:000000000021A4B5                 db    ? ;
.bss:000000000021A4B6                 db    ? ;
.bss:000000000021A4B7                 db    ? ;
.bss:000000000021A4B8                 db    ? ;
.bss:000000000021A4B9                 db    ? ;
.bss:000000000021A4BA                 db    ? ;
.bss:000000000021A4BB                 db    ? ;
.bss:000000000021A4BC                 db    ? ;
.bss:000000000021A4BD                 db    ? ;
.bss:000000000021A4BE                 db    ? ;
.bss:000000000021A4BF                 db    ? ;
.bss:000000000021A4C0                 db    ? ;
.bss:000000000021A4C1                 db    ? ;
.bss:000000000021A4C2                 db    ? ;
.bss:000000000021A4C3                 db    ? ;
.bss:000000000021A4C4                 db    ? ;
.bss:000000000021A4C5                 db    ? ;
.bss:000000000021A4C6                 db    ? ;
.bss:000000000021A4C7                 db    ? ;
.bss:000000000021A4C8                 db    ? ;
.bss:000000000021A4C9                 db    ? ;
.bss:000000000021A4CA                 db    ? ;
.bss:000000000021A4CB                 db    ? ;
.bss:000000000021A4CC                 db    ? ;
.bss:000000000021A4CD                 db    ? ;
.bss:000000000021A4CE                 db    ? ;
.bss:000000000021A4CF                 db    ? ;
.bss:000000000021A4D0                 db    ? ;
.bss:000000000021A4D1                 db    ? ;
.bss:000000000021A4D2                 db    ? ;
.bss:000000000021A4D3                 db    ? ;
.bss:000000000021A4D4                 db    ? ;
.bss:000000000021A4D5                 db    ? ;
.bss:000000000021A4D6                 db    ? ;
.bss:000000000021A4D7                 db    ? ;
.bss:000000000021A4D8                 db    ? ;
.bss:000000000021A4D9                 db    ? ;
.bss:000000000021A4DA                 db    ? ;
.bss:000000000021A4DB                 db    ? ;
.bss:000000000021A4DC                 db    ? ;
.bss:000000000021A4DD                 db    ? ;
.bss:000000000021A4DE                 db    ? ;
.bss:000000000021A4DF                 db    ? ;
.bss:000000000021A4E0                 db    ? ;
.bss:000000000021A4E1                 db    ? ;
.bss:000000000021A4E2                 db    ? ;
.bss:000000000021A4E3                 db    ? ;
.bss:000000000021A4E4                 db    ? ;
.bss:000000000021A4E5                 db    ? ;
.bss:000000000021A4E6                 db    ? ;
.bss:000000000021A4E7                 db    ? ;
.bss:000000000021A4E8                 db    ? ;
.bss:000000000021A4E9                 db    ? ;
.bss:000000000021A4EA                 db    ? ;
.bss:000000000021A4EB                 db    ? ;
.bss:000000000021A4EC                 db    ? ;
.bss:000000000021A4ED                 db    ? ;
.bss:000000000021A4EE                 db    ? ;
.bss:000000000021A4EF                 db    ? ;
.bss:000000000021A4F0                 db    ? ;
.bss:000000000021A4F1                 db    ? ;
.bss:000000000021A4F2                 db    ? ;
.bss:000000000021A4F3                 db    ? ;
.bss:000000000021A4F4                 db    ? ;
.bss:000000000021A4F5                 db    ? ;
.bss:000000000021A4F6                 db    ? ;
.bss:000000000021A4F7                 db    ? ;
.bss:000000000021A4F8                 db    ? ;
.bss:000000000021A4F9                 db    ? ;
.bss:000000000021A4FA                 db    ? ;
.bss:000000000021A4FB                 db    ? ;
.bss:000000000021A4FC                 db    ? ;
.bss:000000000021A4FD                 db    ? ;
.bss:000000000021A4FE                 db    ? ;
.bss:000000000021A4FF                 db    ? ;
.bss:000000000021A500                 db    ? ;
.bss:000000000021A501                 db    ? ;
.bss:000000000021A502                 db    ? ;
.bss:000000000021A503                 db    ? ;
.bss:000000000021A504                 db    ? ;
.bss:000000000021A505                 db    ? ;
.bss:000000000021A506                 db    ? ;
.bss:000000000021A507                 db    ? ;
.bss:000000000021A508                 db    ? ;
.bss:000000000021A509                 db    ? ;
.bss:000000000021A50A                 db    ? ;
.bss:000000000021A50B                 db    ? ;
.bss:000000000021A50C                 db    ? ;
.bss:000000000021A50D                 db    ? ;
.bss:000000000021A50E                 db    ? ;
.bss:000000000021A50F                 db    ? ;
.bss:000000000021A510                 db    ? ;
.bss:000000000021A511                 db    ? ;
.bss:000000000021A512                 db    ? ;
.bss:000000000021A513                 db    ? ;
.bss:000000000021A514                 db    ? ;
.bss:000000000021A515                 db    ? ;
.bss:000000000021A516                 db    ? ;
.bss:000000000021A517                 db    ? ;
.bss:000000000021A518                 db    ? ;
.bss:000000000021A519                 db    ? ;
.bss:000000000021A51A                 db    ? ;
.bss:000000000021A51B                 db    ? ;
.bss:000000000021A51C                 db    ? ;
.bss:000000000021A51D                 db    ? ;
.bss:000000000021A51E                 db    ? ;
.bss:000000000021A51F                 db    ? ;
.bss:000000000021A520                 db    ? ;
.bss:000000000021A521                 db    ? ;
.bss:000000000021A522                 db    ? ;
.bss:000000000021A523                 db    ? ;
.bss:000000000021A524                 db    ? ;
.bss:000000000021A525                 db    ? ;
.bss:000000000021A526                 db    ? ;
.bss:000000000021A527                 db    ? ;
.bss:000000000021A528                 db    ? ;
.bss:000000000021A529                 db    ? ;
.bss:000000000021A52A                 db    ? ;
.bss:000000000021A52B                 db    ? ;
.bss:000000000021A52C                 db    ? ;
.bss:000000000021A52D                 db    ? ;
.bss:000000000021A52E                 db    ? ;
.bss:000000000021A52F                 db    ? ;
.bss:000000000021A530                 db    ? ;
.bss:000000000021A531                 db    ? ;
.bss:000000000021A532                 db    ? ;
.bss:000000000021A533                 db    ? ;
.bss:000000000021A534                 db    ? ;
.bss:000000000021A535                 db    ? ;
.bss:000000000021A536                 db    ? ;
.bss:000000000021A537                 db    ? ;
.bss:000000000021A538                 db    ? ;
.bss:000000000021A539                 db    ? ;
.bss:000000000021A53A                 db    ? ;
.bss:000000000021A53B                 db    ? ;
.bss:000000000021A53C                 db    ? ;
.bss:000000000021A53D                 db    ? ;
.bss:000000000021A53E                 db    ? ;
.bss:000000000021A53F                 db    ? ;
.bss:000000000021A540                 db    ? ;
.bss:000000000021A541                 db    ? ;
.bss:000000000021A542                 db    ? ;
.bss:000000000021A543                 db    ? ;
.bss:000000000021A544                 db    ? ;
.bss:000000000021A545                 db    ? ;
.bss:000000000021A546                 db    ? ;
.bss:000000000021A547                 db    ? ;
.bss:000000000021A548                 db    ? ;
.bss:000000000021A549                 db    ? ;
.bss:000000000021A54A                 db    ? ;
.bss:000000000021A54B                 db    ? ;
.bss:000000000021A54C                 db    ? ;
.bss:000000000021A54D                 db    ? ;
.bss:000000000021A54E                 db    ? ;
.bss:000000000021A54F                 db    ? ;
.bss:000000000021A550                 db    ? ;
.bss:000000000021A551                 db    ? ;
.bss:000000000021A552                 db    ? ;
.bss:000000000021A553                 db    ? ;
.bss:000000000021A554                 db    ? ;
.bss:000000000021A555                 db    ? ;
.bss:000000000021A556                 db    ? ;
.bss:000000000021A557                 db    ? ;
.bss:000000000021A558                 db    ? ;
.bss:000000000021A559                 db    ? ;
.bss:000000000021A55A                 db    ? ;
.bss:000000000021A55B                 db    ? ;
.bss:000000000021A55C                 db    ? ;
.bss:000000000021A55D                 db    ? ;
.bss:000000000021A55E                 db    ? ;
.bss:000000000021A55F                 db    ? ;
.bss:000000000021A560                 db    ? ;
.bss:000000000021A561                 db    ? ;
.bss:000000000021A562                 db    ? ;
.bss:000000000021A563                 db    ? ;
.bss:000000000021A564                 db    ? ;
.bss:000000000021A565                 db    ? ;
.bss:000000000021A566                 db    ? ;
.bss:000000000021A567                 db    ? ;
.bss:000000000021A568                 db    ? ;
.bss:000000000021A569                 db    ? ;
.bss:000000000021A56A                 db    ? ;
.bss:000000000021A56B                 db    ? ;
.bss:000000000021A56C                 db    ? ;
.bss:000000000021A56D                 db    ? ;
.bss:000000000021A56E                 db    ? ;
.bss:000000000021A56F                 db    ? ;
.bss:000000000021A570                 db    ? ;
.bss:000000000021A571                 db    ? ;
.bss:000000000021A572                 db    ? ;
.bss:000000000021A573                 db    ? ;
.bss:000000000021A574                 db    ? ;
.bss:000000000021A575                 db    ? ;
.bss:000000000021A576                 db    ? ;
.bss:000000000021A577                 db    ? ;
.bss:000000000021A578                 db    ? ;
.bss:000000000021A579                 db    ? ;
.bss:000000000021A57A                 db    ? ;
.bss:000000000021A57B                 db    ? ;
.bss:000000000021A57C                 db    ? ;
.bss:000000000021A57D                 db    ? ;
.bss:000000000021A57E                 db    ? ;
.bss:000000000021A57F                 db    ? ;
.bss:000000000021A580                 db    ? ;
.bss:000000000021A581                 db    ? ;
.bss:000000000021A582                 db    ? ;
.bss:000000000021A583                 db    ? ;
.bss:000000000021A584                 db    ? ;
.bss:000000000021A585                 db    ? ;
.bss:000000000021A586                 db    ? ;
.bss:000000000021A587                 db    ? ;
.bss:000000000021A588                 db    ? ;
.bss:000000000021A589                 db    ? ;
.bss:000000000021A58A                 db    ? ;
.bss:000000000021A58B                 db    ? ;
.bss:000000000021A58C                 db    ? ;
.bss:000000000021A58D                 db    ? ;
.bss:000000000021A58E                 db    ? ;
.bss:000000000021A58F                 db    ? ;
.bss:000000000021A590                 db    ? ;
.bss:000000000021A591                 db    ? ;
.bss:000000000021A592                 db    ? ;
.bss:000000000021A593                 db    ? ;
.bss:000000000021A594                 db    ? ;
.bss:000000000021A595                 db    ? ;
.bss:000000000021A596                 db    ? ;
.bss:000000000021A597                 db    ? ;
.bss:000000000021A598                 db    ? ;
.bss:000000000021A599                 db    ? ;
.bss:000000000021A59A                 db    ? ;
.bss:000000000021A59B                 db    ? ;
.bss:000000000021A59C                 db    ? ;
.bss:000000000021A59D                 db    ? ;
.bss:000000000021A59E                 db    ? ;
.bss:000000000021A59F                 db    ? ;
.bss:000000000021A5A0                 db    ? ;
.bss:000000000021A5A1                 db    ? ;
.bss:000000000021A5A2                 db    ? ;
.bss:000000000021A5A3                 db    ? ;
.bss:000000000021A5A4                 db    ? ;
.bss:000000000021A5A5                 db    ? ;
.bss:000000000021A5A6                 db    ? ;
.bss:000000000021A5A7                 db    ? ;
.bss:000000000021A5A8                 db    ? ;
.bss:000000000021A5A9                 db    ? ;
.bss:000000000021A5AA                 db    ? ;
.bss:000000000021A5AB                 db    ? ;
.bss:000000000021A5AC                 db    ? ;
.bss:000000000021A5AD                 db    ? ;
.bss:000000000021A5AE                 db    ? ;
.bss:000000000021A5AF                 db    ? ;
.bss:000000000021A5B0                 db    ? ;
.bss:000000000021A5B1                 db    ? ;
.bss:000000000021A5B2                 db    ? ;
.bss:000000000021A5B3                 db    ? ;
.bss:000000000021A5B4                 db    ? ;
.bss:000000000021A5B5                 db    ? ;
.bss:000000000021A5B6                 db    ? ;
.bss:000000000021A5B7                 db    ? ;
.bss:000000000021A5B8                 db    ? ;
.bss:000000000021A5B9                 db    ? ;
.bss:000000000021A5BA                 db    ? ;
.bss:000000000021A5BB                 db    ? ;
.bss:000000000021A5BC                 db    ? ;
.bss:000000000021A5BD                 db    ? ;
.bss:000000000021A5BE                 db    ? ;
.bss:000000000021A5BF                 db    ? ;
.bss:000000000021A5C0                 db    ? ;
.bss:000000000021A5C1                 db    ? ;
.bss:000000000021A5C2                 db    ? ;
.bss:000000000021A5C3                 db    ? ;
.bss:000000000021A5C4                 db    ? ;
.bss:000000000021A5C5                 db    ? ;
.bss:000000000021A5C6                 db    ? ;
.bss:000000000021A5C7                 db    ? ;
.bss:000000000021A5C8                 db    ? ;
.bss:000000000021A5C9                 db    ? ;
.bss:000000000021A5CA                 db    ? ;
.bss:000000000021A5CB                 db    ? ;
.bss:000000000021A5CC                 db    ? ;
.bss:000000000021A5CD                 db    ? ;
.bss:000000000021A5CE                 db    ? ;
.bss:000000000021A5CF                 db    ? ;
.bss:000000000021A5D0                 db    ? ;
.bss:000000000021A5D1                 db    ? ;
.bss:000000000021A5D2                 db    ? ;
.bss:000000000021A5D3                 db    ? ;
.bss:000000000021A5D4                 db    ? ;
.bss:000000000021A5D5                 db    ? ;
.bss:000000000021A5D6                 db    ? ;
.bss:000000000021A5D7                 db    ? ;
.bss:000000000021A5D8                 db    ? ;
.bss:000000000021A5D9                 db    ? ;
.bss:000000000021A5DA                 db    ? ;
.bss:000000000021A5DB                 db    ? ;
.bss:000000000021A5DC                 db    ? ;
.bss:000000000021A5DD                 db    ? ;
.bss:000000000021A5DE                 db    ? ;
.bss:000000000021A5DF                 db    ? ;
.bss:000000000021A5E0                 db    ? ;
.bss:000000000021A5E1                 db    ? ;
.bss:000000000021A5E2                 db    ? ;
.bss:000000000021A5E3                 db    ? ;
.bss:000000000021A5E4                 db    ? ;
.bss:000000000021A5E5                 db    ? ;
.bss:000000000021A5E6                 db    ? ;
.bss:000000000021A5E7                 db    ? ;
.bss:000000000021A5E8                 db    ? ;
.bss:000000000021A5E9                 db    ? ;
.bss:000000000021A5EA                 db    ? ;
.bss:000000000021A5EB                 db    ? ;
.bss:000000000021A5EC                 db    ? ;
.bss:000000000021A5ED                 db    ? ;
.bss:000000000021A5EE                 db    ? ;
.bss:000000000021A5EF                 db    ? ;
.bss:000000000021A5F0                 db    ? ;
.bss:000000000021A5F1                 db    ? ;
.bss:000000000021A5F2                 db    ? ;
.bss:000000000021A5F3                 db    ? ;
.bss:000000000021A5F4                 db    ? ;
.bss:000000000021A5F5                 db    ? ;
.bss:000000000021A5F6                 db    ? ;
.bss:000000000021A5F7                 db    ? ;
.bss:000000000021A5F8                 db    ? ;
.bss:000000000021A5F9                 db    ? ;
.bss:000000000021A5FA                 db    ? ;
.bss:000000000021A5FB                 db    ? ;
.bss:000000000021A5FC                 db    ? ;
.bss:000000000021A5FD                 db    ? ;
.bss:000000000021A5FE                 db    ? ;
.bss:000000000021A5FF                 db    ? ;
.bss:000000000021A600                 db    ? ;
.bss:000000000021A601                 db    ? ;
.bss:000000000021A602                 db    ? ;
.bss:000000000021A603                 db    ? ;
.bss:000000000021A604                 db    ? ;
.bss:000000000021A605                 db    ? ;
.bss:000000000021A606                 db    ? ;
.bss:000000000021A607                 db    ? ;
.bss:000000000021A608                 db    ? ;
.bss:000000000021A609                 db    ? ;
.bss:000000000021A60A                 db    ? ;
.bss:000000000021A60B                 db    ? ;
.bss:000000000021A60C                 db    ? ;
.bss:000000000021A60D                 db    ? ;
.bss:000000000021A60E                 db    ? ;
.bss:000000000021A60F                 db    ? ;
.bss:000000000021A610                 db    ? ;
.bss:000000000021A611                 db    ? ;
.bss:000000000021A612                 db    ? ;
.bss:000000000021A613                 db    ? ;
.bss:000000000021A614                 db    ? ;
.bss:000000000021A615                 db    ? ;
.bss:000000000021A616                 db    ? ;
.bss:000000000021A617                 db    ? ;
.bss:000000000021A618                 db    ? ;
.bss:000000000021A619                 db    ? ;
.bss:000000000021A61A                 db    ? ;
.bss:000000000021A61B                 db    ? ;
.bss:000000000021A61C                 db    ? ;
.bss:000000000021A61D                 db    ? ;
.bss:000000000021A61E                 db    ? ;
.bss:000000000021A61F                 db    ? ;
.bss:000000000021A620                 db    ? ;
.bss:000000000021A621                 db    ? ;
.bss:000000000021A622                 db    ? ;
.bss:000000000021A623                 db    ? ;
.bss:000000000021A624                 db    ? ;
.bss:000000000021A625                 db    ? ;
.bss:000000000021A626                 db    ? ;
.bss:000000000021A627                 db    ? ;
.bss:000000000021A628                 db    ? ;
.bss:000000000021A629                 db    ? ;
.bss:000000000021A62A                 db    ? ;
.bss:000000000021A62B                 db    ? ;
.bss:000000000021A62C                 db    ? ;
.bss:000000000021A62D                 db    ? ;
.bss:000000000021A62E                 db    ? ;
.bss:000000000021A62F                 db    ? ;
.bss:000000000021A630                 db    ? ;
.bss:000000000021A631                 db    ? ;
.bss:000000000021A632                 db    ? ;
.bss:000000000021A633                 db    ? ;
.bss:000000000021A634                 db    ? ;
.bss:000000000021A635                 db    ? ;
.bss:000000000021A636                 db    ? ;
.bss:000000000021A637                 db    ? ;
.bss:000000000021A638                 db    ? ;
.bss:000000000021A639                 db    ? ;
.bss:000000000021A63A                 db    ? ;
.bss:000000000021A63B                 db    ? ;
.bss:000000000021A63C                 db    ? ;
.bss:000000000021A63D                 db    ? ;
.bss:000000000021A63E                 db    ? ;
.bss:000000000021A63F                 db    ? ;
.bss:000000000021A640                 db    ? ;
.bss:000000000021A641                 db    ? ;
.bss:000000000021A642                 db    ? ;
.bss:000000000021A643                 db    ? ;
.bss:000000000021A644                 db    ? ;
.bss:000000000021A645                 db    ? ;
.bss:000000000021A646                 db    ? ;
.bss:000000000021A647                 db    ? ;
.bss:000000000021A648                 db    ? ;
.bss:000000000021A649                 db    ? ;
.bss:000000000021A64A                 db    ? ;
.bss:000000000021A64B                 db    ? ;
.bss:000000000021A64C                 db    ? ;
.bss:000000000021A64D                 db    ? ;
.bss:000000000021A64E                 db    ? ;
.bss:000000000021A64F                 db    ? ;
.bss:000000000021A650                 db    ? ;
.bss:000000000021A651                 db    ? ;
.bss:000000000021A652                 db    ? ;
.bss:000000000021A653                 db    ? ;
.bss:000000000021A654                 db    ? ;
.bss:000000000021A655                 db    ? ;
.bss:000000000021A656                 db    ? ;
.bss:000000000021A657                 db    ? ;
.bss:000000000021A658                 db    ? ;
.bss:000000000021A659                 db    ? ;
.bss:000000000021A65A                 db    ? ;
.bss:000000000021A65B                 db    ? ;
.bss:000000000021A65C                 db    ? ;
.bss:000000000021A65D                 db    ? ;
.bss:000000000021A65E                 db    ? ;
.bss:000000000021A65F                 db    ? ;
.bss:000000000021A660                 db    ? ;
.bss:000000000021A661                 db    ? ;
.bss:000000000021A662                 db    ? ;
.bss:000000000021A663                 db    ? ;
.bss:000000000021A664                 db    ? ;
.bss:000000000021A665                 db    ? ;
.bss:000000000021A666                 db    ? ;
.bss:000000000021A667                 db    ? ;
.bss:000000000021A668                 db    ? ;
.bss:000000000021A669                 db    ? ;
.bss:000000000021A66A                 db    ? ;
.bss:000000000021A66B                 db    ? ;
.bss:000000000021A66C                 db    ? ;
.bss:000000000021A66D                 db    ? ;
.bss:000000000021A66E                 db    ? ;
.bss:000000000021A66F                 db    ? ;
.bss:000000000021A670                 db    ? ;
.bss:000000000021A671                 db    ? ;
.bss:000000000021A672                 db    ? ;
.bss:000000000021A673                 db    ? ;
.bss:000000000021A674                 db    ? ;
.bss:000000000021A675                 db    ? ;
.bss:000000000021A676                 db    ? ;
.bss:000000000021A677                 db    ? ;
.bss:000000000021A678                 db    ? ;
.bss:000000000021A679                 db    ? ;
.bss:000000000021A67A                 db    ? ;
.bss:000000000021A67B                 db    ? ;
.bss:000000000021A67C                 db    ? ;
.bss:000000000021A67D                 db    ? ;
.bss:000000000021A67E                 db    ? ;
.bss:000000000021A67F                 db    ? ;
.bss:000000000021A680                 db    ? ;
.bss:000000000021A681                 db    ? ;
.bss:000000000021A682                 db    ? ;
.bss:000000000021A683                 db    ? ;
.bss:000000000021A684                 db    ? ;
.bss:000000000021A685                 db    ? ;
.bss:000000000021A686                 db    ? ;
.bss:000000000021A687                 db    ? ;
.bss:000000000021A688                 db    ? ;
.bss:000000000021A689                 db    ? ;
.bss:000000000021A68A                 db    ? ;
.bss:000000000021A68B                 db    ? ;
.bss:000000000021A68C                 db    ? ;
.bss:000000000021A68D                 db    ? ;
.bss:000000000021A68E                 db    ? ;
.bss:000000000021A68F                 db    ? ;
.bss:000000000021A690                 db    ? ;
.bss:000000000021A691                 db    ? ;
.bss:000000000021A692                 db    ? ;
.bss:000000000021A693                 db    ? ;
.bss:000000000021A694                 db    ? ;
.bss:000000000021A695                 db    ? ;
.bss:000000000021A696                 db    ? ;
.bss:000000000021A697                 db    ? ;
.bss:000000000021A698                 db    ? ;
.bss:000000000021A699                 db    ? ;
.bss:000000000021A69A                 db    ? ;
.bss:000000000021A69B                 db    ? ;
.bss:000000000021A69C                 db    ? ;
.bss:000000000021A69D                 db    ? ;
.bss:000000000021A69E                 db    ? ;
.bss:000000000021A69F                 db    ? ;
.bss:000000000021A6A0                 db    ? ;
.bss:000000000021A6A1                 db    ? ;
.bss:000000000021A6A2                 db    ? ;
.bss:000000000021A6A3                 db    ? ;
.bss:000000000021A6A4                 db    ? ;
.bss:000000000021A6A5                 db    ? ;
.bss:000000000021A6A6                 db    ? ;
.bss:000000000021A6A7                 db    ? ;
.bss:000000000021A6A8                 db    ? ;
.bss:000000000021A6A9                 db    ? ;
.bss:000000000021A6AA                 db    ? ;
.bss:000000000021A6AB                 db    ? ;
.bss:000000000021A6AC                 db    ? ;
.bss:000000000021A6AD                 db    ? ;
.bss:000000000021A6AE                 db    ? ;
.bss:000000000021A6AF                 db    ? ;
.bss:000000000021A6B0                 db    ? ;
.bss:000000000021A6B1                 db    ? ;
.bss:000000000021A6B2                 db    ? ;
.bss:000000000021A6B3                 db    ? ;
.bss:000000000021A6B4                 db    ? ;
.bss:000000000021A6B5                 db    ? ;
.bss:000000000021A6B6                 db    ? ;
.bss:000000000021A6B7                 db    ? ;
.bss:000000000021A6B8                 db    ? ;
.bss:000000000021A6B9                 db    ? ;
.bss:000000000021A6BA                 db    ? ;
.bss:000000000021A6BB                 db    ? ;
.bss:000000000021A6BC                 db    ? ;
.bss:000000000021A6BD                 db    ? ;
.bss:000000000021A6BE                 db    ? ;
.bss:000000000021A6BF                 db    ? ;
.bss:000000000021A6C0                 db    ? ;
.bss:000000000021A6C1                 db    ? ;
.bss:000000000021A6C2                 db    ? ;
.bss:000000000021A6C3                 db    ? ;
.bss:000000000021A6C4                 db    ? ;
.bss:000000000021A6C5                 db    ? ;
.bss:000000000021A6C6                 db    ? ;
.bss:000000000021A6C7                 db    ? ;
.bss:000000000021A6C8                 db    ? ;
.bss:000000000021A6C9                 db    ? ;
.bss:000000000021A6CA                 db    ? ;
.bss:000000000021A6CB                 db    ? ;
.bss:000000000021A6CC                 db    ? ;
.bss:000000000021A6CD                 db    ? ;
.bss:000000000021A6CE                 db    ? ;
.bss:000000000021A6CF                 db    ? ;
.bss:000000000021A6D0                 db    ? ;
.bss:000000000021A6D1                 db    ? ;
.bss:000000000021A6D2                 db    ? ;
.bss:000000000021A6D3                 db    ? ;
.bss:000000000021A6D4                 db    ? ;
.bss:000000000021A6D5                 db    ? ;
.bss:000000000021A6D6                 db    ? ;
.bss:000000000021A6D7                 db    ? ;
.bss:000000000021A6D8                 db    ? ;
.bss:000000000021A6D9                 db    ? ;
.bss:000000000021A6DA                 db    ? ;
.bss:000000000021A6DB                 db    ? ;
.bss:000000000021A6DC                 db    ? ;
.bss:000000000021A6DD                 db    ? ;
.bss:000000000021A6DE                 db    ? ;
.bss:000000000021A6DF                 db    ? ;
.bss:000000000021A6E0                 db    ? ;
.bss:000000000021A6E1                 db    ? ;
.bss:000000000021A6E2                 db    ? ;
.bss:000000000021A6E3                 db    ? ;
.bss:000000000021A6E4                 db    ? ;
.bss:000000000021A6E5                 db    ? ;
.bss:000000000021A6E6                 db    ? ;
.bss:000000000021A6E7                 db    ? ;
.bss:000000000021A6E8                 db    ? ;
.bss:000000000021A6E9                 db    ? ;
.bss:000000000021A6EA                 db    ? ;
.bss:000000000021A6EB                 db    ? ;
.bss:000000000021A6EC                 db    ? ;
.bss:000000000021A6ED                 db    ? ;
.bss:000000000021A6EE                 db    ? ;
.bss:000000000021A6EF                 db    ? ;
.bss:000000000021A6F0                 db    ? ;
.bss:000000000021A6F1                 db    ? ;
.bss:000000000021A6F2                 db    ? ;
.bss:000000000021A6F3                 db    ? ;
.bss:000000000021A6F4                 db    ? ;
.bss:000000000021A6F5                 db    ? ;
.bss:000000000021A6F6                 db    ? ;
.bss:000000000021A6F7                 db    ? ;
.bss:000000000021A6F8                 db    ? ;
.bss:000000000021A6F9                 db    ? ;
.bss:000000000021A6FA                 db    ? ;
.bss:000000000021A6FB                 db    ? ;
.bss:000000000021A6FC                 db    ? ;
.bss:000000000021A6FD                 db    ? ;
.bss:000000000021A6FE                 db    ? ;
.bss:000000000021A6FF                 db    ? ;
.bss:000000000021A700                 db    ? ;
.bss:000000000021A701                 db    ? ;
.bss:000000000021A702                 db    ? ;
.bss:000000000021A703                 db    ? ;
.bss:000000000021A704                 db    ? ;
.bss:000000000021A705                 db    ? ;
.bss:000000000021A706                 db    ? ;
.bss:000000000021A707                 db    ? ;
.bss:000000000021A708                 db    ? ;
.bss:000000000021A709                 db    ? ;
.bss:000000000021A70A                 db    ? ;
.bss:000000000021A70B                 db    ? ;
.bss:000000000021A70C                 db    ? ;
.bss:000000000021A70D                 db    ? ;
.bss:000000000021A70E                 db    ? ;
.bss:000000000021A70F                 db    ? ;
.bss:000000000021A710                 db    ? ;
.bss:000000000021A711                 db    ? ;
.bss:000000000021A712                 db    ? ;
.bss:000000000021A713                 db    ? ;
.bss:000000000021A714                 db    ? ;
.bss:000000000021A715                 db    ? ;
.bss:000000000021A716                 db    ? ;
.bss:000000000021A717                 db    ? ;
.bss:000000000021A718                 db    ? ;
.bss:000000000021A719                 db    ? ;
.bss:000000000021A71A                 db    ? ;
.bss:000000000021A71B                 db    ? ;
.bss:000000000021A71C                 db    ? ;
.bss:000000000021A71D                 db    ? ;
.bss:000000000021A71E                 db    ? ;
.bss:000000000021A71F                 db    ? ;
.bss:000000000021A720                 db    ? ;
.bss:000000000021A721                 db    ? ;
.bss:000000000021A722                 db    ? ;
.bss:000000000021A723                 db    ? ;
.bss:000000000021A724                 db    ? ;
.bss:000000000021A725                 db    ? ;
.bss:000000000021A726                 db    ? ;
.bss:000000000021A727                 db    ? ;
.bss:000000000021A728                 db    ? ;
.bss:000000000021A729                 db    ? ;
.bss:000000000021A72A                 db    ? ;
.bss:000000000021A72B                 db    ? ;
.bss:000000000021A72C                 db    ? ;
.bss:000000000021A72D                 db    ? ;
.bss:000000000021A72E                 db    ? ;
.bss:000000000021A72F                 db    ? ;
.bss:000000000021A730                 db    ? ;
.bss:000000000021A731                 db    ? ;
.bss:000000000021A732                 db    ? ;
.bss:000000000021A733                 db    ? ;
.bss:000000000021A734                 db    ? ;
.bss:000000000021A735                 db    ? ;
.bss:000000000021A736                 db    ? ;
.bss:000000000021A737                 db    ? ;
.bss:000000000021A738                 db    ? ;
.bss:000000000021A739                 db    ? ;
.bss:000000000021A73A                 db    ? ;
.bss:000000000021A73B                 db    ? ;
.bss:000000000021A73C                 db    ? ;
.bss:000000000021A73D                 db    ? ;
.bss:000000000021A73E                 db    ? ;
.bss:000000000021A73F                 db    ? ;
.bss:000000000021A740                 db    ? ;
.bss:000000000021A741                 db    ? ;
.bss:000000000021A742                 db    ? ;
.bss:000000000021A743                 db    ? ;
.bss:000000000021A744                 db    ? ;
.bss:000000000021A745                 db    ? ;
.bss:000000000021A746                 db    ? ;
.bss:000000000021A747                 db    ? ;
.bss:000000000021A748                 db    ? ;
.bss:000000000021A749                 db    ? ;
.bss:000000000021A74A                 db    ? ;
.bss:000000000021A74B                 db    ? ;
.bss:000000000021A74C                 db    ? ;
.bss:000000000021A74D                 db    ? ;
.bss:000000000021A74E                 db    ? ;
.bss:000000000021A74F                 db    ? ;
.bss:000000000021A750                 db    ? ;
.bss:000000000021A751                 db    ? ;
.bss:000000000021A752                 db    ? ;
.bss:000000000021A753                 db    ? ;
.bss:000000000021A754                 db    ? ;
.bss:000000000021A755                 db    ? ;
.bss:000000000021A756                 db    ? ;
.bss:000000000021A757                 db    ? ;
.bss:000000000021A758                 db    ? ;
.bss:000000000021A759                 db    ? ;
.bss:000000000021A75A                 db    ? ;
.bss:000000000021A75B                 db    ? ;
.bss:000000000021A75C                 db    ? ;
.bss:000000000021A75D                 db    ? ;
.bss:000000000021A75E                 db    ? ;
.bss:000000000021A75F                 db    ? ;
.bss:000000000021A760                 db    ? ;
.bss:000000000021A761                 db    ? ;
.bss:000000000021A762                 db    ? ;
.bss:000000000021A763                 db    ? ;
.bss:000000000021A764                 db    ? ;
.bss:000000000021A765                 db    ? ;
.bss:000000000021A766                 db    ? ;
.bss:000000000021A767                 db    ? ;
.bss:000000000021A768                 db    ? ;
.bss:000000000021A769                 db    ? ;
.bss:000000000021A76A                 db    ? ;
.bss:000000000021A76B                 db    ? ;
.bss:000000000021A76C                 db    ? ;
.bss:000000000021A76D                 db    ? ;
.bss:000000000021A76E                 db    ? ;
.bss:000000000021A76F                 db    ? ;
.bss:000000000021A770                 db    ? ;
.bss:000000000021A771                 db    ? ;
.bss:000000000021A772                 db    ? ;
.bss:000000000021A773                 db    ? ;
.bss:000000000021A774                 db    ? ;
.bss:000000000021A775                 db    ? ;
.bss:000000000021A776                 db    ? ;
.bss:000000000021A777                 db    ? ;
.bss:000000000021A778                 db    ? ;
.bss:000000000021A779                 db    ? ;
.bss:000000000021A77A                 db    ? ;
.bss:000000000021A77B                 db    ? ;
.bss:000000000021A77C                 db    ? ;
.bss:000000000021A77D                 db    ? ;
.bss:000000000021A77E                 db    ? ;
.bss:000000000021A77F                 db    ? ;
.bss:000000000021A780                 db    ? ;
.bss:000000000021A781                 db    ? ;
.bss:000000000021A782                 db    ? ;
.bss:000000000021A783                 db    ? ;
.bss:000000000021A784                 db    ? ;
.bss:000000000021A785                 db    ? ;
.bss:000000000021A786                 db    ? ;
.bss:000000000021A787                 db    ? ;
.bss:000000000021A788                 db    ? ;
.bss:000000000021A789                 db    ? ;
.bss:000000000021A78A                 db    ? ;
.bss:000000000021A78B                 db    ? ;
.bss:000000000021A78C                 db    ? ;
.bss:000000000021A78D                 db    ? ;
.bss:000000000021A78E                 db    ? ;
.bss:000000000021A78F                 db    ? ;
.bss:000000000021A790                 db    ? ;
.bss:000000000021A791                 db    ? ;
.bss:000000000021A792                 db    ? ;
.bss:000000000021A793                 db    ? ;
.bss:000000000021A794                 db    ? ;
.bss:000000000021A795                 db    ? ;
.bss:000000000021A796                 db    ? ;
.bss:000000000021A797                 db    ? ;
.bss:000000000021A798                 db    ? ;
.bss:000000000021A799                 db    ? ;
.bss:000000000021A79A                 db    ? ;
.bss:000000000021A79B                 db    ? ;
.bss:000000000021A79C                 db    ? ;
.bss:000000000021A79D                 db    ? ;
.bss:000000000021A79E                 db    ? ;
.bss:000000000021A79F                 db    ? ;
.bss:000000000021A7A0                 db    ? ;
.bss:000000000021A7A1                 db    ? ;
.bss:000000000021A7A2                 db    ? ;
.bss:000000000021A7A3                 db    ? ;
.bss:000000000021A7A4                 db    ? ;
.bss:000000000021A7A5                 db    ? ;
.bss:000000000021A7A6                 db    ? ;
.bss:000000000021A7A7                 db    ? ;
.bss:000000000021A7A8                 db    ? ;
.bss:000000000021A7A9                 db    ? ;
.bss:000000000021A7AA                 db    ? ;
.bss:000000000021A7AB                 db    ? ;
.bss:000000000021A7AC                 db    ? ;
.bss:000000000021A7AD                 db    ? ;
.bss:000000000021A7AE                 db    ? ;
.bss:000000000021A7AF                 db    ? ;
.bss:000000000021A7B0                 db    ? ;
.bss:000000000021A7B1                 db    ? ;
.bss:000000000021A7B2                 db    ? ;
.bss:000000000021A7B3                 db    ? ;
.bss:000000000021A7B4                 db    ? ;
.bss:000000000021A7B5                 db    ? ;
.bss:000000000021A7B6                 db    ? ;
.bss:000000000021A7B7                 db    ? ;
.bss:000000000021A7B8                 db    ? ;
.bss:000000000021A7B9                 db    ? ;
.bss:000000000021A7BA                 db    ? ;
.bss:000000000021A7BB                 db    ? ;
.bss:000000000021A7BC                 db    ? ;
.bss:000000000021A7BD                 db    ? ;
.bss:000000000021A7BE                 db    ? ;
.bss:000000000021A7BF                 db    ? ;
.bss:000000000021A7C0                 db    ? ;
.bss:000000000021A7C1                 db    ? ;
.bss:000000000021A7C2                 db    ? ;
.bss:000000000021A7C3                 db    ? ;
.bss:000000000021A7C4                 db    ? ;
.bss:000000000021A7C5                 db    ? ;
.bss:000000000021A7C6                 db    ? ;
.bss:000000000021A7C7                 db    ? ;
.bss:000000000021A7C8                 db    ? ;
.bss:000000000021A7C9                 db    ? ;
.bss:000000000021A7CA                 db    ? ;
.bss:000000000021A7CB                 db    ? ;
.bss:000000000021A7CC                 db    ? ;
.bss:000000000021A7CD                 db    ? ;
.bss:000000000021A7CE                 db    ? ;
.bss:000000000021A7CF                 db    ? ;
.bss:000000000021A7D0                 db    ? ;
.bss:000000000021A7D1                 db    ? ;
.bss:000000000021A7D2                 db    ? ;
.bss:000000000021A7D3                 db    ? ;
.bss:000000000021A7D4                 db    ? ;
.bss:000000000021A7D5                 db    ? ;
.bss:000000000021A7D6                 db    ? ;
.bss:000000000021A7D7                 db    ? ;
.bss:000000000021A7D8                 db    ? ;
.bss:000000000021A7D9                 db    ? ;
.bss:000000000021A7DA                 db    ? ;
.bss:000000000021A7DB                 db    ? ;
.bss:000000000021A7DC                 db    ? ;
.bss:000000000021A7DD                 db    ? ;
.bss:000000000021A7DE                 db    ? ;
.bss:000000000021A7DF                 db    ? ;
.bss:000000000021A7E0                 db    ? ;
.bss:000000000021A7E1                 db    ? ;
.bss:000000000021A7E2                 db    ? ;
.bss:000000000021A7E3                 db    ? ;
.bss:000000000021A7E4                 db    ? ;
.bss:000000000021A7E5                 db    ? ;
.bss:000000000021A7E6                 db    ? ;
.bss:000000000021A7E7                 db    ? ;
.bss:000000000021A7E8                 db    ? ;
.bss:000000000021A7E9                 db    ? ;
.bss:000000000021A7EA                 db    ? ;
.bss:000000000021A7EB                 db    ? ;
.bss:000000000021A7EC                 db    ? ;
.bss:000000000021A7ED                 db    ? ;
.bss:000000000021A7EE                 db    ? ;
.bss:000000000021A7EF                 db    ? ;
.bss:000000000021A7F0                 db    ? ;
.bss:000000000021A7F1                 db    ? ;
.bss:000000000021A7F2                 db    ? ;
.bss:000000000021A7F3                 db    ? ;
.bss:000000000021A7F4                 db    ? ;
.bss:000000000021A7F5                 db    ? ;
.bss:000000000021A7F6                 db    ? ;
.bss:000000000021A7F7                 db    ? ;
.bss:000000000021A7F8                 db    ? ;
.bss:000000000021A7F9                 db    ? ;
.bss:000000000021A7FA                 db    ? ;
.bss:000000000021A7FB                 db    ? ;
.bss:000000000021A7FC                 db    ? ;
.bss:000000000021A7FD                 db    ? ;
.bss:000000000021A7FE                 db    ? ;
.bss:000000000021A7FF                 db    ? ;
.bss:000000000021A800                 db    ? ;
.bss:000000000021A801                 db    ? ;
.bss:000000000021A802                 db    ? ;
.bss:000000000021A803                 db    ? ;
.bss:000000000021A804                 db    ? ;
.bss:000000000021A805                 db    ? ;
.bss:000000000021A806                 db    ? ;
.bss:000000000021A807                 db    ? ;
.bss:000000000021A808                 db    ? ;
.bss:000000000021A809                 db    ? ;
.bss:000000000021A80A                 db    ? ;
.bss:000000000021A80B                 db    ? ;
.bss:000000000021A80C                 db    ? ;
.bss:000000000021A80D                 db    ? ;
.bss:000000000021A80E                 db    ? ;
.bss:000000000021A80F                 db    ? ;
.bss:000000000021A810                 db    ? ;
.bss:000000000021A811                 db    ? ;
.bss:000000000021A812                 db    ? ;
.bss:000000000021A813                 db    ? ;
.bss:000000000021A814                 db    ? ;
.bss:000000000021A815                 db    ? ;
.bss:000000000021A816                 db    ? ;
.bss:000000000021A817                 db    ? ;
.bss:000000000021A818                 db    ? ;
.bss:000000000021A819                 db    ? ;
.bss:000000000021A81A                 db    ? ;
.bss:000000000021A81B                 db    ? ;
.bss:000000000021A81C                 db    ? ;
.bss:000000000021A81D                 db    ? ;
.bss:000000000021A81E                 db    ? ;
.bss:000000000021A81F                 db    ? ;
.bss:000000000021A820                 db    ? ;
.bss:000000000021A821                 db    ? ;
.bss:000000000021A822                 db    ? ;
.bss:000000000021A823                 db    ? ;
.bss:000000000021A824                 db    ? ;
.bss:000000000021A825                 db    ? ;
.bss:000000000021A826                 db    ? ;
.bss:000000000021A827                 db    ? ;
.bss:000000000021A828                 db    ? ;
.bss:000000000021A829                 db    ? ;
.bss:000000000021A82A                 db    ? ;
.bss:000000000021A82B                 db    ? ;
.bss:000000000021A82C                 db    ? ;
.bss:000000000021A82D                 db    ? ;
.bss:000000000021A82E                 db    ? ;
.bss:000000000021A82F                 db    ? ;
.bss:000000000021A830                 db    ? ;
.bss:000000000021A831                 db    ? ;
.bss:000000000021A832                 db    ? ;
.bss:000000000021A833                 db    ? ;
.bss:000000000021A834                 db    ? ;
.bss:000000000021A835                 db    ? ;
.bss:000000000021A836                 db    ? ;
.bss:000000000021A837                 db    ? ;
.bss:000000000021A838                 db    ? ;
.bss:000000000021A839                 db    ? ;
.bss:000000000021A83A                 db    ? ;
.bss:000000000021A83B                 db    ? ;
.bss:000000000021A83C                 db    ? ;
.bss:000000000021A83D                 db    ? ;
.bss:000000000021A83E                 db    ? ;
.bss:000000000021A83F                 db    ? ;
.bss:000000000021A840                 db    ? ;
.bss:000000000021A841                 db    ? ;
.bss:000000000021A842                 db    ? ;
.bss:000000000021A843                 db    ? ;
.bss:000000000021A844                 db    ? ;
.bss:000000000021A845                 db    ? ;
.bss:000000000021A846                 db    ? ;
.bss:000000000021A847                 db    ? ;
.bss:000000000021A848                 db    ? ;
.bss:000000000021A849                 db    ? ;
.bss:000000000021A84A                 db    ? ;
.bss:000000000021A84B                 db    ? ;
.bss:000000000021A84C                 db    ? ;
.bss:000000000021A84D                 db    ? ;
.bss:000000000021A84E                 db    ? ;
.bss:000000000021A84F                 db    ? ;
.bss:000000000021A850                 db    ? ;
.bss:000000000021A851                 db    ? ;
.bss:000000000021A852                 db    ? ;
.bss:000000000021A853                 db    ? ;
.bss:000000000021A854                 db    ? ;
.bss:000000000021A855                 db    ? ;
.bss:000000000021A856                 db    ? ;
.bss:000000000021A857                 db    ? ;
.bss:000000000021A858                 db    ? ;
.bss:000000000021A859                 db    ? ;
.bss:000000000021A85A                 db    ? ;
.bss:000000000021A85B                 db    ? ;
.bss:000000000021A85C                 db    ? ;
.bss:000000000021A85D                 db    ? ;
.bss:000000000021A85E                 db    ? ;
.bss:000000000021A85F                 db    ? ;
.bss:000000000021A860                 db    ? ;
.bss:000000000021A861                 db    ? ;
.bss:000000000021A862                 db    ? ;
.bss:000000000021A863                 db    ? ;
.bss:000000000021A864                 db    ? ;
.bss:000000000021A865                 db    ? ;
.bss:000000000021A866                 db    ? ;
.bss:000000000021A867                 db    ? ;
.bss:000000000021A868                 db    ? ;
.bss:000000000021A869                 db    ? ;
.bss:000000000021A86A                 db    ? ;
.bss:000000000021A86B                 db    ? ;
.bss:000000000021A86C                 db    ? ;
.bss:000000000021A86D                 db    ? ;
.bss:000000000021A86E                 db    ? ;
.bss:000000000021A86F                 db    ? ;
.bss:000000000021A870                 db    ? ;
.bss:000000000021A871                 db    ? ;
.bss:000000000021A872                 db    ? ;
.bss:000000000021A873                 db    ? ;
.bss:000000000021A874                 db    ? ;
.bss:000000000021A875                 db    ? ;
.bss:000000000021A876                 db    ? ;
.bss:000000000021A877                 db    ? ;
.bss:000000000021A878                 db    ? ;
.bss:000000000021A879                 db    ? ;
.bss:000000000021A87A                 db    ? ;
.bss:000000000021A87B                 db    ? ;
.bss:000000000021A87C                 db    ? ;
.bss:000000000021A87D                 db    ? ;
.bss:000000000021A87E                 db    ? ;
.bss:000000000021A87F                 db    ? ;
.bss:000000000021A880                 db    ? ;
.bss:000000000021A881                 db    ? ;
.bss:000000000021A882                 db    ? ;
.bss:000000000021A883                 db    ? ;
.bss:000000000021A884                 db    ? ;
.bss:000000000021A885                 db    ? ;
.bss:000000000021A886                 db    ? ;
.bss:000000000021A887                 db    ? ;
.bss:000000000021A888                 db    ? ;
.bss:000000000021A889                 db    ? ;
.bss:000000000021A88A                 db    ? ;
.bss:000000000021A88B                 db    ? ;
.bss:000000000021A88C                 db    ? ;
.bss:000000000021A88D                 db    ? ;
.bss:000000000021A88E                 db    ? ;
.bss:000000000021A88F                 db    ? ;
.bss:000000000021A890                 db    ? ;
.bss:000000000021A891                 db    ? ;
.bss:000000000021A892                 db    ? ;
.bss:000000000021A893                 db    ? ;
.bss:000000000021A894                 db    ? ;
.bss:000000000021A895                 db    ? ;
.bss:000000000021A896                 db    ? ;
.bss:000000000021A897                 db    ? ;
.bss:000000000021A898                 db    ? ;
.bss:000000000021A899                 db    ? ;
.bss:000000000021A89A                 db    ? ;
.bss:000000000021A89B                 db    ? ;
.bss:000000000021A89C                 db    ? ;
.bss:000000000021A89D                 db    ? ;
.bss:000000000021A89E                 db    ? ;
.bss:000000000021A89F                 db    ? ;
.bss:000000000021A8A0                 db    ? ;
.bss:000000000021A8A1                 db    ? ;
.bss:000000000021A8A2                 db    ? ;
.bss:000000000021A8A3                 db    ? ;
.bss:000000000021A8A4                 db    ? ;
.bss:000000000021A8A5                 db    ? ;
.bss:000000000021A8A6                 db    ? ;
.bss:000000000021A8A7                 db    ? ;
.bss:000000000021A8A8                 db    ? ;
.bss:000000000021A8A9                 db    ? ;
.bss:000000000021A8AA                 db    ? ;
.bss:000000000021A8AB                 db    ? ;
.bss:000000000021A8AC                 db    ? ;
.bss:000000000021A8AD                 db    ? ;
.bss:000000000021A8AE                 db    ? ;
.bss:000000000021A8AF                 db    ? ;
.bss:000000000021A8B0                 db    ? ;
.bss:000000000021A8B1                 db    ? ;
.bss:000000000021A8B2                 db    ? ;
.bss:000000000021A8B3                 db    ? ;
.bss:000000000021A8B4                 db    ? ;
.bss:000000000021A8B5                 db    ? ;
.bss:000000000021A8B6                 db    ? ;
.bss:000000000021A8B7                 db    ? ;
.bss:000000000021A8B8                 db    ? ;
.bss:000000000021A8B9                 db    ? ;
.bss:000000000021A8BA                 db    ? ;
.bss:000000000021A8BB                 db    ? ;
.bss:000000000021A8BC                 db    ? ;
.bss:000000000021A8BD                 db    ? ;
.bss:000000000021A8BE                 db    ? ;
.bss:000000000021A8BF                 db    ? ;
.bss:000000000021A8C0                 db    ? ;
.bss:000000000021A8C1                 db    ? ;
.bss:000000000021A8C2                 db    ? ;
.bss:000000000021A8C3                 db    ? ;
.bss:000000000021A8C4                 db    ? ;
.bss:000000000021A8C5                 db    ? ;
.bss:000000000021A8C6                 db    ? ;
.bss:000000000021A8C7                 db    ? ;
.bss:000000000021A8C8                 db    ? ;
.bss:000000000021A8C9                 db    ? ;
.bss:000000000021A8CA                 db    ? ;
.bss:000000000021A8CB                 db    ? ;
.bss:000000000021A8CC                 db    ? ;
.bss:000000000021A8CD                 db    ? ;
.bss:000000000021A8CE                 db    ? ;
.bss:000000000021A8CF                 db    ? ;
.bss:000000000021A8D0                 db    ? ;
.bss:000000000021A8D1                 db    ? ;
.bss:000000000021A8D2                 db    ? ;
.bss:000000000021A8D3                 db    ? ;
.bss:000000000021A8D4                 db    ? ;
.bss:000000000021A8D5                 db    ? ;
.bss:000000000021A8D6                 db    ? ;
.bss:000000000021A8D7                 db    ? ;
.bss:000000000021A8D8                 db    ? ;
.bss:000000000021A8D9                 db    ? ;
.bss:000000000021A8DA                 db    ? ;
.bss:000000000021A8DB                 db    ? ;
.bss:000000000021A8DC                 db    ? ;
.bss:000000000021A8DD                 db    ? ;
.bss:000000000021A8DE                 db    ? ;
.bss:000000000021A8DF                 db    ? ;
.bss:000000000021A8E0                 db    ? ;
.bss:000000000021A8E1                 db    ? ;
.bss:000000000021A8E2                 db    ? ;
.bss:000000000021A8E3                 db    ? ;
.bss:000000000021A8E4                 db    ? ;
.bss:000000000021A8E5                 db    ? ;
.bss:000000000021A8E6                 db    ? ;
.bss:000000000021A8E7                 db    ? ;
.bss:000000000021A8E8                 db    ? ;
.bss:000000000021A8E9                 db    ? ;
.bss:000000000021A8EA                 db    ? ;
.bss:000000000021A8EB                 db    ? ;
.bss:000000000021A8EC                 db    ? ;
.bss:000000000021A8ED                 db    ? ;
.bss:000000000021A8EE                 db    ? ;
.bss:000000000021A8EF                 db    ? ;
.bss:000000000021A8F0                 db    ? ;
.bss:000000000021A8F1                 db    ? ;
.bss:000000000021A8F2                 db    ? ;
.bss:000000000021A8F3                 db    ? ;
.bss:000000000021A8F4                 db    ? ;
.bss:000000000021A8F5                 db    ? ;
.bss:000000000021A8F6                 db    ? ;
.bss:000000000021A8F7                 db    ? ;
.bss:000000000021A8F8                 db    ? ;
.bss:000000000021A8F9                 db    ? ;
.bss:000000000021A8FA                 db    ? ;
.bss:000000000021A8FB                 db    ? ;
.bss:000000000021A8FC                 db    ? ;
.bss:000000000021A8FD                 db    ? ;
.bss:000000000021A8FE                 db    ? ;
.bss:000000000021A8FF                 db    ? ;
.bss:000000000021A900                 db    ? ;
.bss:000000000021A901                 db    ? ;
.bss:000000000021A902                 db    ? ;
.bss:000000000021A903                 db    ? ;
.bss:000000000021A904                 db    ? ;
.bss:000000000021A905                 db    ? ;
.bss:000000000021A906                 db    ? ;
.bss:000000000021A907                 db    ? ;
.bss:000000000021A908                 db    ? ;
.bss:000000000021A909                 db    ? ;
.bss:000000000021A90A                 db    ? ;
.bss:000000000021A90B                 db    ? ;
.bss:000000000021A90C                 db    ? ;
.bss:000000000021A90D                 db    ? ;
.bss:000000000021A90E                 db    ? ;
.bss:000000000021A90F                 db    ? ;
.bss:000000000021A910                 db    ? ;
.bss:000000000021A911                 db    ? ;
.bss:000000000021A912                 db    ? ;
.bss:000000000021A913                 db    ? ;
.bss:000000000021A914                 db    ? ;
.bss:000000000021A915                 db    ? ;
.bss:000000000021A916                 db    ? ;
.bss:000000000021A917                 db    ? ;
.bss:000000000021A918                 db    ? ;
.bss:000000000021A919                 db    ? ;
.bss:000000000021A91A                 db    ? ;
.bss:000000000021A91B                 db    ? ;
.bss:000000000021A91C                 db    ? ;
.bss:000000000021A91D                 db    ? ;
.bss:000000000021A91E                 db    ? ;
.bss:000000000021A91F                 db    ? ;
.bss:000000000021A920                 db    ? ;
.bss:000000000021A921                 db    ? ;
.bss:000000000021A922                 db    ? ;
.bss:000000000021A923                 db    ? ;
.bss:000000000021A924                 db    ? ;
.bss:000000000021A925                 db    ? ;
.bss:000000000021A926                 db    ? ;
.bss:000000000021A927                 db    ? ;
.bss:000000000021A928                 db    ? ;
.bss:000000000021A929                 db    ? ;
.bss:000000000021A92A                 db    ? ;
.bss:000000000021A92B                 db    ? ;
.bss:000000000021A92C                 db    ? ;
.bss:000000000021A92D                 db    ? ;
.bss:000000000021A92E                 db    ? ;
.bss:000000000021A92F                 db    ? ;
.bss:000000000021A930                 db    ? ;
.bss:000000000021A931                 db    ? ;
.bss:000000000021A932                 db    ? ;
.bss:000000000021A933                 db    ? ;
.bss:000000000021A934                 db    ? ;
.bss:000000000021A935                 db    ? ;
.bss:000000000021A936                 db    ? ;
.bss:000000000021A937                 db    ? ;
.bss:000000000021A938                 db    ? ;
.bss:000000000021A939                 db    ? ;
.bss:000000000021A93A                 db    ? ;
.bss:000000000021A93B                 db    ? ;
.bss:000000000021A93C                 db    ? ;
.bss:000000000021A93D                 db    ? ;
.bss:000000000021A93E                 db    ? ;
.bss:000000000021A93F                 db    ? ;
.bss:000000000021A940                 db    ? ;
.bss:000000000021A941                 db    ? ;
.bss:000000000021A942                 db    ? ;
.bss:000000000021A943                 db    ? ;
.bss:000000000021A944                 db    ? ;
.bss:000000000021A945                 db    ? ;
.bss:000000000021A946                 db    ? ;
.bss:000000000021A947                 db    ? ;
.bss:000000000021A948                 db    ? ;
.bss:000000000021A949                 db    ? ;
.bss:000000000021A94A                 db    ? ;
.bss:000000000021A94B                 db    ? ;
.bss:000000000021A94C                 db    ? ;
.bss:000000000021A94D                 db    ? ;
.bss:000000000021A94E                 db    ? ;
.bss:000000000021A94F                 db    ? ;
.bss:000000000021A950                 db    ? ;
.bss:000000000021A951                 db    ? ;
.bss:000000000021A952                 db    ? ;
.bss:000000000021A953                 db    ? ;
.bss:000000000021A954                 db    ? ;
.bss:000000000021A955                 db    ? ;
.bss:000000000021A956                 db    ? ;
.bss:000000000021A957                 db    ? ;
.bss:000000000021A958                 db    ? ;
.bss:000000000021A959                 db    ? ;
.bss:000000000021A95A                 db    ? ;
.bss:000000000021A95B                 db    ? ;
.bss:000000000021A95C                 db    ? ;
.bss:000000000021A95D                 db    ? ;
.bss:000000000021A95E                 db    ? ;
.bss:000000000021A95F                 db    ? ;
.bss:000000000021A960                 db    ? ;
.bss:000000000021A961                 db    ? ;
.bss:000000000021A962                 db    ? ;
.bss:000000000021A963                 db    ? ;
.bss:000000000021A964                 db    ? ;
.bss:000000000021A965                 db    ? ;
.bss:000000000021A966                 db    ? ;
.bss:000000000021A967                 db    ? ;
.bss:000000000021A968                 db    ? ;
.bss:000000000021A969                 db    ? ;
.bss:000000000021A96A                 db    ? ;
.bss:000000000021A96B                 db    ? ;
.bss:000000000021A96C                 db    ? ;
.bss:000000000021A96D                 db    ? ;
.bss:000000000021A96E                 db    ? ;
.bss:000000000021A96F                 db    ? ;
.bss:000000000021A970                 db    ? ;
.bss:000000000021A971                 db    ? ;
.bss:000000000021A972                 db    ? ;
.bss:000000000021A973                 db    ? ;
.bss:000000000021A974                 db    ? ;
.bss:000000000021A975                 db    ? ;
.bss:000000000021A976                 db    ? ;
.bss:000000000021A977                 db    ? ;
.bss:000000000021A978                 db    ? ;
.bss:000000000021A979                 db    ? ;
.bss:000000000021A97A                 db    ? ;
.bss:000000000021A97B                 db    ? ;
.bss:000000000021A97C                 db    ? ;
.bss:000000000021A97D                 db    ? ;
.bss:000000000021A97E                 db    ? ;
.bss:000000000021A97F                 db    ? ;
.bss:000000000021A980                 db    ? ;
.bss:000000000021A981                 db    ? ;
.bss:000000000021A982                 db    ? ;
.bss:000000000021A983                 db    ? ;
.bss:000000000021A984                 db    ? ;
.bss:000000000021A985                 db    ? ;
.bss:000000000021A986                 db    ? ;
.bss:000000000021A987                 db    ? ;
.bss:000000000021A988                 db    ? ;
.bss:000000000021A989                 db    ? ;
.bss:000000000021A98A                 db    ? ;
.bss:000000000021A98B                 db    ? ;
.bss:000000000021A98C                 db    ? ;
.bss:000000000021A98D                 db    ? ;
.bss:000000000021A98E                 db    ? ;
.bss:000000000021A98F                 db    ? ;
.bss:000000000021A990                 db    ? ;
.bss:000000000021A991                 db    ? ;
.bss:000000000021A992                 db    ? ;
.bss:000000000021A993                 db    ? ;
.bss:000000000021A994                 db    ? ;
.bss:000000000021A995                 db    ? ;
.bss:000000000021A996                 db    ? ;
.bss:000000000021A997                 db    ? ;
.bss:000000000021A998                 db    ? ;
.bss:000000000021A999                 db    ? ;
.bss:000000000021A99A                 db    ? ;
.bss:000000000021A99B                 db    ? ;
.bss:000000000021A99C                 db    ? ;
.bss:000000000021A99D                 db    ? ;
.bss:000000000021A99E                 db    ? ;
.bss:000000000021A99F                 db    ? ;
.bss:000000000021A9A0                 db    ? ;
.bss:000000000021A9A1                 db    ? ;
.bss:000000000021A9A2                 db    ? ;
.bss:000000000021A9A3                 db    ? ;
.bss:000000000021A9A4                 db    ? ;
.bss:000000000021A9A5                 db    ? ;
.bss:000000000021A9A6                 db    ? ;
.bss:000000000021A9A7                 db    ? ;
.bss:000000000021A9A8                 db    ? ;
.bss:000000000021A9A9                 db    ? ;
.bss:000000000021A9AA                 db    ? ;
.bss:000000000021A9AB                 db    ? ;
.bss:000000000021A9AC                 db    ? ;
.bss:000000000021A9AD                 db    ? ;
.bss:000000000021A9AE                 db    ? ;
.bss:000000000021A9AF                 db    ? ;
.bss:000000000021A9B0                 db    ? ;
.bss:000000000021A9B1                 db    ? ;
.bss:000000000021A9B2                 db    ? ;
.bss:000000000021A9B3                 db    ? ;
.bss:000000000021A9B4                 db    ? ;
.bss:000000000021A9B5                 db    ? ;
.bss:000000000021A9B6                 db    ? ;
.bss:000000000021A9B7                 db    ? ;
.bss:000000000021A9B8                 db    ? ;
.bss:000000000021A9B9                 db    ? ;
.bss:000000000021A9BA                 db    ? ;
.bss:000000000021A9BB                 db    ? ;
.bss:000000000021A9BC                 db    ? ;
.bss:000000000021A9BD                 db    ? ;
.bss:000000000021A9BE                 db    ? ;
.bss:000000000021A9BF                 db    ? ;
.bss:000000000021A9C0                 db    ? ;
.bss:000000000021A9C1                 db    ? ;
.bss:000000000021A9C2                 db    ? ;
.bss:000000000021A9C3                 db    ? ;
.bss:000000000021A9C4                 db    ? ;
.bss:000000000021A9C5                 db    ? ;
.bss:000000000021A9C6                 db    ? ;
.bss:000000000021A9C7                 db    ? ;
.bss:000000000021A9C8                 db    ? ;
.bss:000000000021A9C9                 db    ? ;
.bss:000000000021A9CA                 db    ? ;
.bss:000000000021A9CB                 db    ? ;
.bss:000000000021A9CC                 db    ? ;
.bss:000000000021A9CD                 db    ? ;
.bss:000000000021A9CE                 db    ? ;
.bss:000000000021A9CF                 db    ? ;
.bss:000000000021A9D0                 db    ? ;
.bss:000000000021A9D1                 db    ? ;
.bss:000000000021A9D2                 db    ? ;
.bss:000000000021A9D3                 db    ? ;
.bss:000000000021A9D4                 db    ? ;
.bss:000000000021A9D5                 db    ? ;
.bss:000000000021A9D6                 db    ? ;
.bss:000000000021A9D7                 db    ? ;
.bss:000000000021A9D8                 db    ? ;
.bss:000000000021A9D9                 db    ? ;
.bss:000000000021A9DA                 db    ? ;
.bss:000000000021A9DB                 db    ? ;
.bss:000000000021A9DC                 db    ? ;
.bss:000000000021A9DD                 db    ? ;
.bss:000000000021A9DE                 db    ? ;
.bss:000000000021A9DF                 db    ? ;
.bss:000000000021A9E0                 db    ? ;
.bss:000000000021A9E1                 db    ? ;
.bss:000000000021A9E2                 db    ? ;
.bss:000000000021A9E3                 db    ? ;
.bss:000000000021A9E4                 db    ? ;
.bss:000000000021A9E5                 db    ? ;
.bss:000000000021A9E6                 db    ? ;
.bss:000000000021A9E7                 db    ? ;
.bss:000000000021A9E8                 db    ? ;
.bss:000000000021A9E9                 db    ? ;
.bss:000000000021A9EA                 db    ? ;
.bss:000000000021A9EB                 db    ? ;
.bss:000000000021A9EC                 db    ? ;
.bss:000000000021A9ED                 db    ? ;
.bss:000000000021A9EE                 db    ? ;
.bss:000000000021A9EF                 db    ? ;
.bss:000000000021A9F0                 db    ? ;
.bss:000000000021A9F1                 db    ? ;
.bss:000000000021A9F2                 db    ? ;
.bss:000000000021A9F3                 db    ? ;
.bss:000000000021A9F4                 db    ? ;
.bss:000000000021A9F5                 db    ? ;
.bss:000000000021A9F6                 db    ? ;
.bss:000000000021A9F7                 db    ? ;
.bss:000000000021A9F8                 db    ? ;
.bss:000000000021A9F9                 db    ? ;
.bss:000000000021A9FA                 db    ? ;
.bss:000000000021A9FB                 db    ? ;
.bss:000000000021A9FC                 db    ? ;
.bss:000000000021A9FD                 db    ? ;
.bss:000000000021A9FE                 db    ? ;
.bss:000000000021A9FF                 db    ? ;
.bss:000000000021AA00                 db    ? ;
.bss:000000000021AA01                 db    ? ;
.bss:000000000021AA02                 db    ? ;
.bss:000000000021AA03                 db    ? ;
.bss:000000000021AA04                 db    ? ;
.bss:000000000021AA05                 db    ? ;
.bss:000000000021AA06                 db    ? ;
.bss:000000000021AA07                 db    ? ;
.bss:000000000021AA08                 db    ? ;
.bss:000000000021AA09                 db    ? ;
.bss:000000000021AA0A                 db    ? ;
.bss:000000000021AA0B                 db    ? ;
.bss:000000000021AA0C                 db    ? ;
.bss:000000000021AA0D                 db    ? ;
.bss:000000000021AA0E                 db    ? ;
.bss:000000000021AA0F                 db    ? ;
.bss:000000000021AA10                 db    ? ;
.bss:000000000021AA11                 db    ? ;
.bss:000000000021AA12                 db    ? ;
.bss:000000000021AA13                 db    ? ;
.bss:000000000021AA14                 db    ? ;
.bss:000000000021AA15                 db    ? ;
.bss:000000000021AA16                 db    ? ;
.bss:000000000021AA17                 db    ? ;
.bss:000000000021AA18                 db    ? ;
.bss:000000000021AA19                 db    ? ;
.bss:000000000021AA1A                 db    ? ;
.bss:000000000021AA1B                 db    ? ;
.bss:000000000021AA1C                 db    ? ;
.bss:000000000021AA1D                 db    ? ;
.bss:000000000021AA1E                 db    ? ;
.bss:000000000021AA1F                 db    ? ;
.bss:000000000021AA20                 db    ? ;
.bss:000000000021AA21                 db    ? ;
.bss:000000000021AA22                 db    ? ;
.bss:000000000021AA23                 db    ? ;
.bss:000000000021AA24                 db    ? ;
.bss:000000000021AA25                 db    ? ;
.bss:000000000021AA26                 db    ? ;
.bss:000000000021AA27                 db    ? ;
.bss:000000000021AA28                 db    ? ;
.bss:000000000021AA29                 db    ? ;
.bss:000000000021AA2A                 db    ? ;
.bss:000000000021AA2B                 db    ? ;
.bss:000000000021AA2C                 db    ? ;
.bss:000000000021AA2D                 db    ? ;
.bss:000000000021AA2E                 db    ? ;
.bss:000000000021AA2F                 db    ? ;
.bss:000000000021AA30                 db    ? ;
.bss:000000000021AA31                 db    ? ;
.bss:000000000021AA32                 db    ? ;
.bss:000000000021AA33                 db    ? ;
.bss:000000000021AA34                 db    ? ;
.bss:000000000021AA35                 db    ? ;
.bss:000000000021AA36                 db    ? ;
.bss:000000000021AA37                 db    ? ;
.bss:000000000021AA38                 db    ? ;
.bss:000000000021AA39                 db    ? ;
.bss:000000000021AA3A                 db    ? ;
.bss:000000000021AA3B                 db    ? ;
.bss:000000000021AA3C                 db    ? ;
.bss:000000000021AA3D                 db    ? ;
.bss:000000000021AA3E                 db    ? ;
.bss:000000000021AA3F                 db    ? ;
.bss:000000000021AA40                 db    ? ;
.bss:000000000021AA41                 db    ? ;
.bss:000000000021AA42                 db    ? ;
.bss:000000000021AA43                 db    ? ;
.bss:000000000021AA44                 db    ? ;
.bss:000000000021AA45                 db    ? ;
.bss:000000000021AA46                 db    ? ;
.bss:000000000021AA47                 db    ? ;
.bss:000000000021AA48                 db    ? ;
.bss:000000000021AA49                 db    ? ;
.bss:000000000021AA4A                 db    ? ;
.bss:000000000021AA4B                 db    ? ;
.bss:000000000021AA4C                 db    ? ;
.bss:000000000021AA4D                 db    ? ;
.bss:000000000021AA4E                 db    ? ;
.bss:000000000021AA4F                 db    ? ;
.bss:000000000021AA50                 db    ? ;
.bss:000000000021AA51                 db    ? ;
.bss:000000000021AA52                 db    ? ;
.bss:000000000021AA53                 db    ? ;
.bss:000000000021AA54                 db    ? ;
.bss:000000000021AA55                 db    ? ;
.bss:000000000021AA56                 db    ? ;
.bss:000000000021AA57                 db    ? ;
.bss:000000000021AA58                 db    ? ;
.bss:000000000021AA59                 db    ? ;
.bss:000000000021AA5A                 db    ? ;
.bss:000000000021AA5B                 db    ? ;
.bss:000000000021AA5C                 db    ? ;
.bss:000000000021AA5D                 db    ? ;
.bss:000000000021AA5E                 db    ? ;
.bss:000000000021AA5F                 db    ? ;
.bss:000000000021AA60                 db    ? ;
.bss:000000000021AA61                 db    ? ;
.bss:000000000021AA62                 db    ? ;
.bss:000000000021AA63                 db    ? ;
.bss:000000000021AA64                 db    ? ;
.bss:000000000021AA65                 db    ? ;
.bss:000000000021AA66                 db    ? ;
.bss:000000000021AA67                 db    ? ;
.bss:000000000021AA68                 db    ? ;
.bss:000000000021AA69                 db    ? ;
.bss:000000000021AA6A                 db    ? ;
.bss:000000000021AA6B                 db    ? ;
.bss:000000000021AA6C                 db    ? ;
.bss:000000000021AA6D                 db    ? ;
.bss:000000000021AA6E                 db    ? ;
.bss:000000000021AA6F                 db    ? ;
.bss:000000000021AA70                 db    ? ;
.bss:000000000021AA71                 db    ? ;
.bss:000000000021AA72                 db    ? ;
.bss:000000000021AA73                 db    ? ;
.bss:000000000021AA74                 db    ? ;
.bss:000000000021AA75                 db    ? ;
.bss:000000000021AA76                 db    ? ;
.bss:000000000021AA77                 db    ? ;
.bss:000000000021AA78                 db    ? ;
.bss:000000000021AA79                 db    ? ;
.bss:000000000021AA7A                 db    ? ;
.bss:000000000021AA7B                 db    ? ;
.bss:000000000021AA7C                 db    ? ;
.bss:000000000021AA7D                 db    ? ;
.bss:000000000021AA7E                 db    ? ;
.bss:000000000021AA7F                 db    ? ;
.bss:000000000021AA80                 db    ? ;
.bss:000000000021AA81                 db    ? ;
.bss:000000000021AA82                 db    ? ;
.bss:000000000021AA83                 db    ? ;
.bss:000000000021AA84                 db    ? ;
.bss:000000000021AA85                 db    ? ;
.bss:000000000021AA86                 db    ? ;
.bss:000000000021AA87                 db    ? ;
.bss:000000000021AA88                 db    ? ;
.bss:000000000021AA89                 db    ? ;
.bss:000000000021AA8A                 db    ? ;
.bss:000000000021AA8B                 db    ? ;
.bss:000000000021AA8C                 db    ? ;
.bss:000000000021AA8D                 db    ? ;
.bss:000000000021AA8E                 db    ? ;
.bss:000000000021AA8F                 db    ? ;
.bss:000000000021AA90                 db    ? ;
.bss:000000000021AA91                 db    ? ;
.bss:000000000021AA92                 db    ? ;
.bss:000000000021AA93                 db    ? ;
.bss:000000000021AA94                 db    ? ;
.bss:000000000021AA95                 db    ? ;
.bss:000000000021AA96                 db    ? ;
.bss:000000000021AA97                 db    ? ;
.bss:000000000021AA98                 db    ? ;
.bss:000000000021AA99                 db    ? ;
.bss:000000000021AA9A                 db    ? ;
.bss:000000000021AA9B                 db    ? ;
.bss:000000000021AA9C                 db    ? ;
.bss:000000000021AA9D                 db    ? ;
.bss:000000000021AA9E                 db    ? ;
.bss:000000000021AA9F                 db    ? ;
.bss:000000000021AAA0                 db    ? ;
.bss:000000000021AAA1                 db    ? ;
.bss:000000000021AAA2                 db    ? ;
.bss:000000000021AAA3                 db    ? ;
.bss:000000000021AAA4                 db    ? ;
.bss:000000000021AAA5                 db    ? ;
.bss:000000000021AAA6                 db    ? ;
.bss:000000000021AAA7                 db    ? ;
.bss:000000000021AAA8                 db    ? ;
.bss:000000000021AAA9                 db    ? ;
.bss:000000000021AAAA                 db    ? ;
.bss:000000000021AAAB                 db    ? ;
.bss:000000000021AAAC                 db    ? ;
.bss:000000000021AAAD                 db    ? ;
.bss:000000000021AAAE                 db    ? ;
.bss:000000000021AAAF                 db    ? ;
.bss:000000000021AAB0                 db    ? ;
.bss:000000000021AAB1                 db    ? ;
.bss:000000000021AAB2                 db    ? ;
.bss:000000000021AAB3                 db    ? ;
.bss:000000000021AAB4                 db    ? ;
.bss:000000000021AAB5                 db    ? ;
.bss:000000000021AAB6                 db    ? ;
.bss:000000000021AAB7                 db    ? ;
.bss:000000000021AAB8                 db    ? ;
.bss:000000000021AAB9                 db    ? ;
.bss:000000000021AABA                 db    ? ;
.bss:000000000021AABB                 db    ? ;
.bss:000000000021AABC                 db    ? ;
.bss:000000000021AABD                 db    ? ;
.bss:000000000021AABE                 db    ? ;
.bss:000000000021AABF                 db    ? ;
.bss:000000000021AAC0                 db    ? ;
.bss:000000000021AAC1                 db    ? ;
.bss:000000000021AAC2                 db    ? ;
.bss:000000000021AAC3                 db    ? ;
.bss:000000000021AAC4                 db    ? ;
.bss:000000000021AAC5                 db    ? ;
.bss:000000000021AAC6                 db    ? ;
.bss:000000000021AAC7                 db    ? ;
.bss:000000000021AAC8                 db    ? ;
.bss:000000000021AAC9                 db    ? ;
.bss:000000000021AACA                 db    ? ;
.bss:000000000021AACB                 db    ? ;
.bss:000000000021AACC                 db    ? ;
.bss:000000000021AACD                 db    ? ;
.bss:000000000021AACE                 db    ? ;
.bss:000000000021AACF                 db    ? ;
.bss:000000000021AAD0                 db    ? ;
.bss:000000000021AAD1                 db    ? ;
.bss:000000000021AAD2                 db    ? ;
.bss:000000000021AAD3                 db    ? ;
.bss:000000000021AAD4                 db    ? ;
.bss:000000000021AAD5                 db    ? ;
.bss:000000000021AAD6                 db    ? ;
.bss:000000000021AAD7                 db    ? ;
.bss:000000000021AAD8                 db    ? ;
.bss:000000000021AAD9                 db    ? ;
.bss:000000000021AADA                 db    ? ;
.bss:000000000021AADB                 db    ? ;
.bss:000000000021AADC                 db    ? ;
.bss:000000000021AADD                 db    ? ;
.bss:000000000021AADE                 db    ? ;
.bss:000000000021AADF                 db    ? ;
.bss:000000000021AAE0                 db    ? ;
.bss:000000000021AAE1                 db    ? ;
.bss:000000000021AAE2                 db    ? ;
.bss:000000000021AAE3                 db    ? ;
.bss:000000000021AAE4                 db    ? ;
.bss:000000000021AAE5                 db    ? ;
.bss:000000000021AAE6                 db    ? ;
.bss:000000000021AAE7                 db    ? ;
.bss:000000000021AAE8                 db    ? ;
.bss:000000000021AAE9                 db    ? ;
.bss:000000000021AAEA                 db    ? ;
.bss:000000000021AAEB                 db    ? ;
.bss:000000000021AAEC                 db    ? ;
.bss:000000000021AAED                 db    ? ;
.bss:000000000021AAEE                 db    ? ;
.bss:000000000021AAEF                 db    ? ;
.bss:000000000021AAF0                 db    ? ;
.bss:000000000021AAF1                 db    ? ;
.bss:000000000021AAF2                 db    ? ;
.bss:000000000021AAF3                 db    ? ;
.bss:000000000021AAF4                 db    ? ;
.bss:000000000021AAF5                 db    ? ;
.bss:000000000021AAF6                 db    ? ;
.bss:000000000021AAF7                 db    ? ;
.bss:000000000021AAF8                 db    ? ;
.bss:000000000021AAF9                 db    ? ;
.bss:000000000021AAFA                 db    ? ;
.bss:000000000021AAFB                 db    ? ;
.bss:000000000021AAFC                 db    ? ;
.bss:000000000021AAFD                 db    ? ;
.bss:000000000021AAFE                 db    ? ;
.bss:000000000021AAFF                 db    ? ;
.bss:000000000021AB00                 db    ? ;
.bss:000000000021AB01                 db    ? ;
.bss:000000000021AB02                 db    ? ;
.bss:000000000021AB03                 db    ? ;
.bss:000000000021AB04                 db    ? ;
.bss:000000000021AB05                 db    ? ;
.bss:000000000021AB06                 db    ? ;
.bss:000000000021AB07                 db    ? ;
.bss:000000000021AB08                 db    ? ;
.bss:000000000021AB09                 db    ? ;
.bss:000000000021AB0A                 db    ? ;
.bss:000000000021AB0B                 db    ? ;
.bss:000000000021AB0C                 db    ? ;
.bss:000000000021AB0D                 db    ? ;
.bss:000000000021AB0E                 db    ? ;
.bss:000000000021AB0F                 db    ? ;
.bss:000000000021AB10                 db    ? ;
.bss:000000000021AB11                 db    ? ;
.bss:000000000021AB12                 db    ? ;
.bss:000000000021AB13                 db    ? ;
.bss:000000000021AB14                 db    ? ;
.bss:000000000021AB15                 db    ? ;
.bss:000000000021AB16                 db    ? ;
.bss:000000000021AB17                 db    ? ;
.bss:000000000021AB18                 db    ? ;
.bss:000000000021AB19                 db    ? ;
.bss:000000000021AB1A                 db    ? ;
.bss:000000000021AB1B                 db    ? ;
.bss:000000000021AB1C                 db    ? ;
.bss:000000000021AB1D                 db    ? ;
.bss:000000000021AB1E                 db    ? ;
.bss:000000000021AB1F                 db    ? ;
.bss:000000000021AB20                 db    ? ;
.bss:000000000021AB21                 db    ? ;
.bss:000000000021AB22                 db    ? ;
.bss:000000000021AB23                 db    ? ;
.bss:000000000021AB24                 db    ? ;
.bss:000000000021AB25                 db    ? ;
.bss:000000000021AB26                 db    ? ;
.bss:000000000021AB27                 db    ? ;
.bss:000000000021AB28                 db    ? ;
.bss:000000000021AB29                 db    ? ;
.bss:000000000021AB2A                 db    ? ;
.bss:000000000021AB2B                 db    ? ;
.bss:000000000021AB2C                 db    ? ;
.bss:000000000021AB2D                 db    ? ;
.bss:000000000021AB2E                 db    ? ;
.bss:000000000021AB2F                 db    ? ;
.bss:000000000021AB30                 db    ? ;
.bss:000000000021AB31                 db    ? ;
.bss:000000000021AB32                 db    ? ;
.bss:000000000021AB33                 db    ? ;
.bss:000000000021AB34                 db    ? ;
.bss:000000000021AB35                 db    ? ;
.bss:000000000021AB36                 db    ? ;
.bss:000000000021AB37                 db    ? ;
.bss:000000000021AB38                 db    ? ;
.bss:000000000021AB39                 db    ? ;
.bss:000000000021AB3A                 db    ? ;
.bss:000000000021AB3B                 db    ? ;
.bss:000000000021AB3C                 db    ? ;
.bss:000000000021AB3D                 db    ? ;
.bss:000000000021AB3E                 db    ? ;
.bss:000000000021AB3F                 db    ? ;
.bss:000000000021AB40                 db    ? ;
.bss:000000000021AB41                 db    ? ;
.bss:000000000021AB42                 db    ? ;
.bss:000000000021AB43                 db    ? ;
.bss:000000000021AB44                 db    ? ;
.bss:000000000021AB45                 db    ? ;
.bss:000000000021AB46                 db    ? ;
.bss:000000000021AB47                 db    ? ;
.bss:000000000021AB48                 db    ? ;
.bss:000000000021AB49                 db    ? ;
.bss:000000000021AB4A                 db    ? ;
.bss:000000000021AB4B                 db    ? ;
.bss:000000000021AB4C                 db    ? ;
.bss:000000000021AB4D                 db    ? ;
.bss:000000000021AB4E                 db    ? ;
.bss:000000000021AB4F                 db    ? ;
.bss:000000000021AB50                 db    ? ;
.bss:000000000021AB51                 db    ? ;
.bss:000000000021AB52                 db    ? ;
.bss:000000000021AB53                 db    ? ;
.bss:000000000021AB54                 db    ? ;
.bss:000000000021AB55                 db    ? ;
.bss:000000000021AB56                 db    ? ;
.bss:000000000021AB57                 db    ? ;
.bss:000000000021AB58                 db    ? ;
.bss:000000000021AB59                 db    ? ;
.bss:000000000021AB5A                 db    ? ;
.bss:000000000021AB5B                 db    ? ;
.bss:000000000021AB5C                 db    ? ;
.bss:000000000021AB5D                 db    ? ;
.bss:000000000021AB5E                 db    ? ;
.bss:000000000021AB5F                 db    ? ;
.bss:000000000021AB60                 db    ? ;
.bss:000000000021AB61                 db    ? ;
.bss:000000000021AB62                 db    ? ;
.bss:000000000021AB63                 db    ? ;
.bss:000000000021AB64                 db    ? ;
.bss:000000000021AB65                 db    ? ;
.bss:000000000021AB66                 db    ? ;
.bss:000000000021AB67                 db    ? ;
.bss:000000000021AB68                 db    ? ;
.bss:000000000021AB69                 db    ? ;
.bss:000000000021AB6A                 db    ? ;
.bss:000000000021AB6B                 db    ? ;
.bss:000000000021AB6C                 db    ? ;
.bss:000000000021AB6D                 db    ? ;
.bss:000000000021AB6E                 db    ? ;
.bss:000000000021AB6F                 db    ? ;
.bss:000000000021AB70                 db    ? ;
.bss:000000000021AB71                 db    ? ;
.bss:000000000021AB72                 db    ? ;
.bss:000000000021AB73                 db    ? ;
.bss:000000000021AB74                 db    ? ;
.bss:000000000021AB75                 db    ? ;
.bss:000000000021AB76                 db    ? ;
.bss:000000000021AB77                 db    ? ;
.bss:000000000021AB78                 db    ? ;
.bss:000000000021AB79                 db    ? ;
.bss:000000000021AB7A                 db    ? ;
.bss:000000000021AB7B                 db    ? ;
.bss:000000000021AB7C                 db    ? ;
.bss:000000000021AB7D                 db    ? ;
.bss:000000000021AB7E                 db    ? ;
.bss:000000000021AB7F                 db    ? ;
.bss:000000000021AB80                 db    ? ;
.bss:000000000021AB81                 db    ? ;
.bss:000000000021AB82                 db    ? ;
.bss:000000000021AB83                 db    ? ;
.bss:000000000021AB84                 db    ? ;
.bss:000000000021AB85                 db    ? ;
.bss:000000000021AB86                 db    ? ;
.bss:000000000021AB87                 db    ? ;
.bss:000000000021AB88                 db    ? ;
.bss:000000000021AB89                 db    ? ;
.bss:000000000021AB8A                 db    ? ;
.bss:000000000021AB8B                 db    ? ;
.bss:000000000021AB8C                 db    ? ;
.bss:000000000021AB8D                 db    ? ;
.bss:000000000021AB8E                 db    ? ;
.bss:000000000021AB8F                 db    ? ;
.bss:000000000021AB90                 db    ? ;
.bss:000000000021AB91                 db    ? ;
.bss:000000000021AB92                 db    ? ;
.bss:000000000021AB93                 db    ? ;
.bss:000000000021AB94                 db    ? ;
.bss:000000000021AB95                 db    ? ;
.bss:000000000021AB96                 db    ? ;
.bss:000000000021AB97                 db    ? ;
.bss:000000000021AB98                 db    ? ;
.bss:000000000021AB99                 db    ? ;
.bss:000000000021AB9A                 db    ? ;
.bss:000000000021AB9B                 db    ? ;
.bss:000000000021AB9C                 db    ? ;
.bss:000000000021AB9D                 db    ? ;
.bss:000000000021AB9E                 db    ? ;
.bss:000000000021AB9F                 db    ? ;
.bss:000000000021ABA0                 db    ? ;
.bss:000000000021ABA1                 db    ? ;
.bss:000000000021ABA2                 db    ? ;
.bss:000000000021ABA3                 db    ? ;
.bss:000000000021ABA4                 db    ? ;
.bss:000000000021ABA5                 db    ? ;
.bss:000000000021ABA6                 db    ? ;
.bss:000000000021ABA7                 db    ? ;
.bss:000000000021ABA8                 db    ? ;
.bss:000000000021ABA9                 db    ? ;
.bss:000000000021ABAA                 db    ? ;
.bss:000000000021ABAB                 db    ? ;
.bss:000000000021ABAC                 db    ? ;
.bss:000000000021ABAD                 db    ? ;
.bss:000000000021ABAE                 db    ? ;
.bss:000000000021ABAF                 db    ? ;
.bss:000000000021ABB0                 db    ? ;
.bss:000000000021ABB1                 db    ? ;
.bss:000000000021ABB2                 db    ? ;
.bss:000000000021ABB3                 db    ? ;
.bss:000000000021ABB4                 db    ? ;
.bss:000000000021ABB5                 db    ? ;
.bss:000000000021ABB6                 db    ? ;
.bss:000000000021ABB7                 db    ? ;
.bss:000000000021ABB8                 db    ? ;
.bss:000000000021ABB9                 db    ? ;
.bss:000000000021ABBA                 db    ? ;
.bss:000000000021ABBB                 db    ? ;
.bss:000000000021ABBC                 db    ? ;
.bss:000000000021ABBD                 db    ? ;
.bss:000000000021ABBE                 db    ? ;
.bss:000000000021ABBF                 db    ? ;
.bss:000000000021ABC0                 db    ? ;
.bss:000000000021ABC1                 db    ? ;
.bss:000000000021ABC2                 db    ? ;
.bss:000000000021ABC3                 db    ? ;
.bss:000000000021ABC4                 db    ? ;
.bss:000000000021ABC5                 db    ? ;
.bss:000000000021ABC6                 db    ? ;
.bss:000000000021ABC7                 db    ? ;
.bss:000000000021ABC8                 db    ? ;
.bss:000000000021ABC9                 db    ? ;
.bss:000000000021ABCA                 db    ? ;
.bss:000000000021ABCB                 db    ? ;
.bss:000000000021ABCC                 db    ? ;
.bss:000000000021ABCD                 db    ? ;
.bss:000000000021ABCE                 db    ? ;
.bss:000000000021ABCF                 db    ? ;
.bss:000000000021ABD0                 db    ? ;
.bss:000000000021ABD1                 db    ? ;
.bss:000000000021ABD2                 db    ? ;
.bss:000000000021ABD3                 db    ? ;
.bss:000000000021ABD4                 db    ? ;
.bss:000000000021ABD5                 db    ? ;
.bss:000000000021ABD6                 db    ? ;
.bss:000000000021ABD7                 db    ? ;
.bss:000000000021ABD8                 db    ? ;
.bss:000000000021ABD9                 db    ? ;
.bss:000000000021ABDA                 db    ? ;
.bss:000000000021ABDB                 db    ? ;
.bss:000000000021ABDC                 db    ? ;
.bss:000000000021ABDD                 db    ? ;
.bss:000000000021ABDE                 db    ? ;
.bss:000000000021ABDF                 db    ? ;
.bss:000000000021ABE0                 db    ? ;
.bss:000000000021ABE1                 db    ? ;
.bss:000000000021ABE2                 db    ? ;
.bss:000000000021ABE3                 db    ? ;
.bss:000000000021ABE4                 db    ? ;
.bss:000000000021ABE5                 db    ? ;
.bss:000000000021ABE6                 db    ? ;
.bss:000000000021ABE7                 db    ? ;
.bss:000000000021ABE8                 db    ? ;
.bss:000000000021ABE9                 db    ? ;
.bss:000000000021ABEA                 db    ? ;
.bss:000000000021ABEB                 db    ? ;
.bss:000000000021ABEC                 db    ? ;
.bss:000000000021ABED                 db    ? ;
.bss:000000000021ABEE                 db    ? ;
.bss:000000000021ABEF                 db    ? ;
.bss:000000000021ABF0                 db    ? ;
.bss:000000000021ABF1                 db    ? ;
.bss:000000000021ABF2                 db    ? ;
.bss:000000000021ABF3                 db    ? ;
.bss:000000000021ABF4                 db    ? ;
.bss:000000000021ABF5                 db    ? ;
.bss:000000000021ABF6                 db    ? ;
.bss:000000000021ABF7                 db    ? ;
.bss:000000000021ABF8                 db    ? ;
.bss:000000000021ABF9                 db    ? ;
.bss:000000000021ABFA                 db    ? ;
.bss:000000000021ABFB                 db    ? ;
.bss:000000000021ABFC                 db    ? ;
.bss:000000000021ABFD                 db    ? ;
.bss:000000000021ABFE                 db    ? ;
.bss:000000000021ABFF                 db    ? ;
.bss:000000000021AC00                 db    ? ;
.bss:000000000021AC01                 db    ? ;
.bss:000000000021AC02                 db    ? ;
.bss:000000000021AC03                 db    ? ;
.bss:000000000021AC04                 db    ? ;
.bss:000000000021AC05                 db    ? ;
.bss:000000000021AC06                 db    ? ;
.bss:000000000021AC07                 db    ? ;
.bss:000000000021AC08                 db    ? ;
.bss:000000000021AC09                 db    ? ;
.bss:000000000021AC0A                 db    ? ;
.bss:000000000021AC0B                 db    ? ;
.bss:000000000021AC0C                 db    ? ;
.bss:000000000021AC0D                 db    ? ;
.bss:000000000021AC0E                 db    ? ;
.bss:000000000021AC0F                 db    ? ;
.bss:000000000021AC10                 db    ? ;
.bss:000000000021AC11                 db    ? ;
.bss:000000000021AC12                 db    ? ;
.bss:000000000021AC13                 db    ? ;
.bss:000000000021AC14                 db    ? ;
.bss:000000000021AC15                 db    ? ;
.bss:000000000021AC16                 db    ? ;
.bss:000000000021AC17                 db    ? ;
.bss:000000000021AC18                 db    ? ;
.bss:000000000021AC19                 db    ? ;
.bss:000000000021AC1A                 db    ? ;
.bss:000000000021AC1B                 db    ? ;
.bss:000000000021AC1C                 db    ? ;
.bss:000000000021AC1D                 db    ? ;
.bss:000000000021AC1E                 db    ? ;
.bss:000000000021AC1F                 db    ? ;
.bss:000000000021AC20                 db    ? ;
.bss:000000000021AC21                 db    ? ;
.bss:000000000021AC22                 db    ? ;
.bss:000000000021AC23                 db    ? ;
.bss:000000000021AC24                 db    ? ;
.bss:000000000021AC25                 db    ? ;
.bss:000000000021AC26                 db    ? ;
.bss:000000000021AC27                 db    ? ;
.bss:000000000021AC28                 db    ? ;
.bss:000000000021AC29                 db    ? ;
.bss:000000000021AC2A                 db    ? ;
.bss:000000000021AC2B                 db    ? ;
.bss:000000000021AC2C                 db    ? ;
.bss:000000000021AC2D                 db    ? ;
.bss:000000000021AC2E                 db    ? ;
.bss:000000000021AC2F                 db    ? ;
.bss:000000000021AC30                 db    ? ;
.bss:000000000021AC31                 db    ? ;
.bss:000000000021AC32                 db    ? ;
.bss:000000000021AC33                 db    ? ;
.bss:000000000021AC34                 db    ? ;
.bss:000000000021AC35                 db    ? ;
.bss:000000000021AC36                 db    ? ;
.bss:000000000021AC37                 db    ? ;
.bss:000000000021AC38                 db    ? ;
.bss:000000000021AC39                 db    ? ;
.bss:000000000021AC3A                 db    ? ;
.bss:000000000021AC3B                 db    ? ;
.bss:000000000021AC3C                 db    ? ;
.bss:000000000021AC3D                 db    ? ;
.bss:000000000021AC3E                 db    ? ;
.bss:000000000021AC3F                 db    ? ;
.bss:000000000021AC40                 db    ? ;
.bss:000000000021AC41                 db    ? ;
.bss:000000000021AC42                 db    ? ;
.bss:000000000021AC43                 db    ? ;
.bss:000000000021AC44                 db    ? ;
.bss:000000000021AC45                 db    ? ;
.bss:000000000021AC46                 db    ? ;
.bss:000000000021AC47                 db    ? ;
.bss:000000000021AC48                 db    ? ;
.bss:000000000021AC49                 db    ? ;
.bss:000000000021AC4A                 db    ? ;
.bss:000000000021AC4B                 db    ? ;
.bss:000000000021AC4C                 db    ? ;
.bss:000000000021AC4D                 db    ? ;
.bss:000000000021AC4E                 db    ? ;
.bss:000000000021AC4F                 db    ? ;
.bss:000000000021AC50                 db    ? ;
.bss:000000000021AC51                 db    ? ;
.bss:000000000021AC52                 db    ? ;
.bss:000000000021AC53                 db    ? ;
.bss:000000000021AC54                 db    ? ;
.bss:000000000021AC55                 db    ? ;
.bss:000000000021AC56                 db    ? ;
.bss:000000000021AC57                 db    ? ;
.bss:000000000021AC58                 db    ? ;
.bss:000000000021AC59                 db    ? ;
.bss:000000000021AC5A                 db    ? ;
.bss:000000000021AC5B                 db    ? ;
.bss:000000000021AC5C                 db    ? ;
.bss:000000000021AC5D                 db    ? ;
.bss:000000000021AC5E                 db    ? ;
.bss:000000000021AC5F                 db    ? ;
.bss:000000000021AC60                 db    ? ;
.bss:000000000021AC61                 db    ? ;
.bss:000000000021AC62                 db    ? ;
.bss:000000000021AC63                 db    ? ;
.bss:000000000021AC64                 db    ? ;
.bss:000000000021AC65                 db    ? ;
.bss:000000000021AC66                 db    ? ;
.bss:000000000021AC67                 db    ? ;
.bss:000000000021AC68                 db    ? ;
.bss:000000000021AC69                 db    ? ;
.bss:000000000021AC6A                 db    ? ;
.bss:000000000021AC6B                 db    ? ;
.bss:000000000021AC6C                 db    ? ;
.bss:000000000021AC6D                 db    ? ;
.bss:000000000021AC6E                 db    ? ;
.bss:000000000021AC6F                 db    ? ;
.bss:000000000021AC70                 db    ? ;
.bss:000000000021AC71                 db    ? ;
.bss:000000000021AC72                 db    ? ;
.bss:000000000021AC73                 db    ? ;
.bss:000000000021AC74                 db    ? ;
.bss:000000000021AC75                 db    ? ;
.bss:000000000021AC76                 db    ? ;
.bss:000000000021AC77                 db    ? ;
.bss:000000000021AC78                 db    ? ;
.bss:000000000021AC79                 db    ? ;
.bss:000000000021AC7A                 db    ? ;
.bss:000000000021AC7B                 db    ? ;
.bss:000000000021AC7C                 db    ? ;
.bss:000000000021AC7D                 db    ? ;
.bss:000000000021AC7E                 db    ? ;
.bss:000000000021AC7F                 db    ? ;
.bss:000000000021AC80                 db    ? ;
.bss:000000000021AC81                 db    ? ;
.bss:000000000021AC82                 db    ? ;
.bss:000000000021AC83                 db    ? ;
.bss:000000000021AC84                 db    ? ;
.bss:000000000021AC85                 db    ? ;
.bss:000000000021AC86                 db    ? ;
.bss:000000000021AC87                 db    ? ;
.bss:000000000021AC88                 db    ? ;
.bss:000000000021AC89                 db    ? ;
.bss:000000000021AC8A                 db    ? ;
.bss:000000000021AC8B                 db    ? ;
.bss:000000000021AC8C                 db    ? ;
.bss:000000000021AC8D                 db    ? ;
.bss:000000000021AC8E                 db    ? ;
.bss:000000000021AC8F                 db    ? ;
.bss:000000000021AC90                 db    ? ;
.bss:000000000021AC91                 db    ? ;
.bss:000000000021AC92                 db    ? ;
.bss:000000000021AC93                 db    ? ;
.bss:000000000021AC94                 db    ? ;
.bss:000000000021AC95                 db    ? ;
.bss:000000000021AC96                 db    ? ;
.bss:000000000021AC97                 db    ? ;
.bss:000000000021AC98                 db    ? ;
.bss:000000000021AC99                 db    ? ;
.bss:000000000021AC9A                 db    ? ;
.bss:000000000021AC9B                 db    ? ;
.bss:000000000021AC9C                 db    ? ;
.bss:000000000021AC9D                 db    ? ;
.bss:000000000021AC9E                 db    ? ;
.bss:000000000021AC9F                 db    ? ;
.bss:000000000021ACA0                 db    ? ;
.bss:000000000021ACA1                 db    ? ;
.bss:000000000021ACA2                 db    ? ;
.bss:000000000021ACA3                 db    ? ;
.bss:000000000021ACA4                 db    ? ;
.bss:000000000021ACA5                 db    ? ;
.bss:000000000021ACA6                 db    ? ;
.bss:000000000021ACA7                 db    ? ;
.bss:000000000021ACA8                 db    ? ;
.bss:000000000021ACA9                 db    ? ;
.bss:000000000021ACAA                 db    ? ;
.bss:000000000021ACAB                 db    ? ;
.bss:000000000021ACAC                 db    ? ;
.bss:000000000021ACAD                 db    ? ;
.bss:000000000021ACAE                 db    ? ;
.bss:000000000021ACAF                 db    ? ;
.bss:000000000021ACB0                 db    ? ;
.bss:000000000021ACB1                 db    ? ;
.bss:000000000021ACB2                 db    ? ;
.bss:000000000021ACB3                 db    ? ;
.bss:000000000021ACB4                 db    ? ;
.bss:000000000021ACB5                 db    ? ;
.bss:000000000021ACB6                 db    ? ;
.bss:000000000021ACB7                 db    ? ;
.bss:000000000021ACB8                 db    ? ;
.bss:000000000021ACB9                 db    ? ;
.bss:000000000021ACBA                 db    ? ;
.bss:000000000021ACBB                 db    ? ;
.bss:000000000021ACBC                 db    ? ;
.bss:000000000021ACBD                 db    ? ;
.bss:000000000021ACBE                 db    ? ;
.bss:000000000021ACBF                 db    ? ;
.bss:000000000021ACC0                 db    ? ;
.bss:000000000021ACC1                 db    ? ;
.bss:000000000021ACC2                 db    ? ;
.bss:000000000021ACC3                 db    ? ;
.bss:000000000021ACC4                 db    ? ;
.bss:000000000021ACC5                 db    ? ;
.bss:000000000021ACC6                 db    ? ;
.bss:000000000021ACC7                 db    ? ;
.bss:000000000021ACC8                 db    ? ;
.bss:000000000021ACC9                 db    ? ;
.bss:000000000021ACCA                 db    ? ;
.bss:000000000021ACCB                 db    ? ;
.bss:000000000021ACCC                 db    ? ;
.bss:000000000021ACCD                 db    ? ;
.bss:000000000021ACCE                 db    ? ;
.bss:000000000021ACCF                 db    ? ;
.bss:000000000021ACD0                 db    ? ;
.bss:000000000021ACD1                 db    ? ;
.bss:000000000021ACD2                 db    ? ;
.bss:000000000021ACD3                 db    ? ;
.bss:000000000021ACD4                 db    ? ;
.bss:000000000021ACD5                 db    ? ;
.bss:000000000021ACD6                 db    ? ;
.bss:000000000021ACD7                 db    ? ;
.bss:000000000021ACD8                 db    ? ;
.bss:000000000021ACD9                 db    ? ;
.bss:000000000021ACDA                 db    ? ;
.bss:000000000021ACDB                 db    ? ;
.bss:000000000021ACDC                 db    ? ;
.bss:000000000021ACDD                 db    ? ;
.bss:000000000021ACDE                 db    ? ;
.bss:000000000021ACDF                 db    ? ;
.bss:000000000021ACE0                 db    ? ;
.bss:000000000021ACE1                 db    ? ;
.bss:000000000021ACE2                 db    ? ;
.bss:000000000021ACE3                 db    ? ;
.bss:000000000021ACE4                 db    ? ;
.bss:000000000021ACE5                 db    ? ;
.bss:000000000021ACE6                 db    ? ;
.bss:000000000021ACE7                 db    ? ;
.bss:000000000021ACE8                 db    ? ;
.bss:000000000021ACE9                 db    ? ;
.bss:000000000021ACEA                 db    ? ;
.bss:000000000021ACEB                 db    ? ;
.bss:000000000021ACEC                 db    ? ;
.bss:000000000021ACED                 db    ? ;
.bss:000000000021ACEE                 db    ? ;
.bss:000000000021ACEF                 db    ? ;
.bss:000000000021ACF0                 db    ? ;
.bss:000000000021ACF1                 db    ? ;
.bss:000000000021ACF2                 db    ? ;
.bss:000000000021ACF3                 db    ? ;
.bss:000000000021ACF4                 db    ? ;
.bss:000000000021ACF5                 db    ? ;
.bss:000000000021ACF6                 db    ? ;
.bss:000000000021ACF7                 db    ? ;
.bss:000000000021ACF8                 db    ? ;
.bss:000000000021ACF9                 db    ? ;
.bss:000000000021ACFA                 db    ? ;
.bss:000000000021ACFB                 db    ? ;
.bss:000000000021ACFC                 db    ? ;
.bss:000000000021ACFD                 db    ? ;
.bss:000000000021ACFE                 db    ? ;
.bss:000000000021ACFF                 db    ? ;
.bss:000000000021AD00                 db    ? ;
.bss:000000000021AD01                 db    ? ;
.bss:000000000021AD02                 db    ? ;
.bss:000000000021AD03                 db    ? ;
.bss:000000000021AD04                 db    ? ;
.bss:000000000021AD05                 db    ? ;
.bss:000000000021AD06                 db    ? ;
.bss:000000000021AD07                 db    ? ;
.bss:000000000021AD08                 db    ? ;
.bss:000000000021AD09                 db    ? ;
.bss:000000000021AD0A                 db    ? ;
.bss:000000000021AD0B                 db    ? ;
.bss:000000000021AD0C                 db    ? ;
.bss:000000000021AD0D                 db    ? ;
.bss:000000000021AD0E                 db    ? ;
.bss:000000000021AD0F                 db    ? ;
.bss:000000000021AD10                 db    ? ;
.bss:000000000021AD11                 db    ? ;
.bss:000000000021AD12                 db    ? ;
.bss:000000000021AD13                 db    ? ;
.bss:000000000021AD14                 db    ? ;
.bss:000000000021AD15                 db    ? ;
.bss:000000000021AD16                 db    ? ;
.bss:000000000021AD17                 db    ? ;
.bss:000000000021AD18                 db    ? ;
.bss:000000000021AD19                 db    ? ;
.bss:000000000021AD1A                 db    ? ;
.bss:000000000021AD1B                 db    ? ;
.bss:000000000021AD1C                 db    ? ;
.bss:000000000021AD1D                 db    ? ;
.bss:000000000021AD1E                 db    ? ;
.bss:000000000021AD1F                 db    ? ;
.bss:000000000021AD20                 db    ? ;
.bss:000000000021AD21                 db    ? ;
.bss:000000000021AD22                 db    ? ;
.bss:000000000021AD23                 db    ? ;
.bss:000000000021AD24                 db    ? ;
.bss:000000000021AD25                 db    ? ;
.bss:000000000021AD26                 db    ? ;
.bss:000000000021AD27                 db    ? ;
.bss:000000000021AD28                 db    ? ;
.bss:000000000021AD29                 db    ? ;
.bss:000000000021AD2A                 db    ? ;
.bss:000000000021AD2B                 db    ? ;
.bss:000000000021AD2C                 db    ? ;
.bss:000000000021AD2D                 db    ? ;
.bss:000000000021AD2E                 db    ? ;
.bss:000000000021AD2F                 db    ? ;
.bss:000000000021AD30                 db    ? ;
.bss:000000000021AD31                 db    ? ;
.bss:000000000021AD32                 db    ? ;
.bss:000000000021AD33                 db    ? ;
.bss:000000000021AD34                 db    ? ;
.bss:000000000021AD35                 db    ? ;
.bss:000000000021AD36                 db    ? ;
.bss:000000000021AD37                 db    ? ;
.bss:000000000021AD38                 db    ? ;
.bss:000000000021AD39                 db    ? ;
.bss:000000000021AD3A                 db    ? ;
.bss:000000000021AD3B                 db    ? ;
.bss:000000000021AD3C                 db    ? ;
.bss:000000000021AD3D                 db    ? ;
.bss:000000000021AD3E                 db    ? ;
.bss:000000000021AD3F                 db    ? ;
.bss:000000000021AD40                 db    ? ;
.bss:000000000021AD41                 db    ? ;
.bss:000000000021AD42                 db    ? ;
.bss:000000000021AD43                 db    ? ;
.bss:000000000021AD44                 db    ? ;
.bss:000000000021AD45                 db    ? ;
.bss:000000000021AD46                 db    ? ;
.bss:000000000021AD47                 db    ? ;
.bss:000000000021AD48                 db    ? ;
.bss:000000000021AD49                 db    ? ;
.bss:000000000021AD4A                 db    ? ;
.bss:000000000021AD4B                 db    ? ;
.bss:000000000021AD4C                 db    ? ;
.bss:000000000021AD4D                 db    ? ;
.bss:000000000021AD4E                 db    ? ;
.bss:000000000021AD4F                 db    ? ;
.bss:000000000021AD50                 db    ? ;
.bss:000000000021AD51                 db    ? ;
.bss:000000000021AD52                 db    ? ;
.bss:000000000021AD53                 db    ? ;
.bss:000000000021AD54                 db    ? ;
.bss:000000000021AD55                 db    ? ;
.bss:000000000021AD56                 db    ? ;
.bss:000000000021AD57                 db    ? ;
.bss:000000000021AD58                 db    ? ;
.bss:000000000021AD59                 db    ? ;
.bss:000000000021AD5A                 db    ? ;
.bss:000000000021AD5B                 db    ? ;
.bss:000000000021AD5C                 db    ? ;
.bss:000000000021AD5D                 db    ? ;
.bss:000000000021AD5E                 db    ? ;
.bss:000000000021AD5F                 db    ? ;
.bss:000000000021AD60                 db    ? ;
.bss:000000000021AD61                 db    ? ;
.bss:000000000021AD62                 db    ? ;
.bss:000000000021AD63                 db    ? ;
.bss:000000000021AD64                 db    ? ;
.bss:000000000021AD65                 db    ? ;
.bss:000000000021AD66                 db    ? ;
.bss:000000000021AD67                 db    ? ;
.bss:000000000021AD68                 db    ? ;
.bss:000000000021AD69                 db    ? ;
.bss:000000000021AD6A                 db    ? ;
.bss:000000000021AD6B                 db    ? ;
.bss:000000000021AD6C                 db    ? ;
.bss:000000000021AD6D                 db    ? ;
.bss:000000000021AD6E                 db    ? ;
.bss:000000000021AD6F                 db    ? ;
.bss:000000000021AD70                 db    ? ;
.bss:000000000021AD71                 db    ? ;
.bss:000000000021AD72                 db    ? ;
.bss:000000000021AD73                 db    ? ;
.bss:000000000021AD74                 db    ? ;
.bss:000000000021AD75                 db    ? ;
.bss:000000000021AD76                 db    ? ;
.bss:000000000021AD77                 db    ? ;
.bss:000000000021AD78                 db    ? ;
.bss:000000000021AD79                 db    ? ;
.bss:000000000021AD7A                 db    ? ;
.bss:000000000021AD7B                 db    ? ;
.bss:000000000021AD7C                 db    ? ;
.bss:000000000021AD7D                 db    ? ;
.bss:000000000021AD7E                 db    ? ;
.bss:000000000021AD7F                 db    ? ;
.bss:000000000021AD80                 db    ? ;
.bss:000000000021AD81                 db    ? ;
.bss:000000000021AD82                 db    ? ;
.bss:000000000021AD83                 db    ? ;
.bss:000000000021AD84                 db    ? ;
.bss:000000000021AD85                 db    ? ;
.bss:000000000021AD86                 db    ? ;
.bss:000000000021AD87                 db    ? ;
.bss:000000000021AD88                 db    ? ;
.bss:000000000021AD89                 db    ? ;
.bss:000000000021AD8A                 db    ? ;
.bss:000000000021AD8B                 db    ? ;
.bss:000000000021AD8C                 db    ? ;
.bss:000000000021AD8D                 db    ? ;
.bss:000000000021AD8E                 db    ? ;
.bss:000000000021AD8F                 db    ? ;
.bss:000000000021AD90                 db    ? ;
.bss:000000000021AD91                 db    ? ;
.bss:000000000021AD92                 db    ? ;
.bss:000000000021AD93                 db    ? ;
.bss:000000000021AD94                 db    ? ;
.bss:000000000021AD95                 db    ? ;
.bss:000000000021AD96                 db    ? ;
.bss:000000000021AD97                 db    ? ;
.bss:000000000021AD98                 db    ? ;
.bss:000000000021AD99                 db    ? ;
.bss:000000000021AD9A                 db    ? ;
.bss:000000000021AD9B                 db    ? ;
.bss:000000000021AD9C                 db    ? ;
.bss:000000000021AD9D                 db    ? ;
.bss:000000000021AD9E                 db    ? ;
.bss:000000000021AD9F                 db    ? ;
.bss:000000000021ADA0                 db    ? ;
.bss:000000000021ADA1                 db    ? ;
.bss:000000000021ADA2                 db    ? ;
.bss:000000000021ADA3                 db    ? ;
.bss:000000000021ADA4                 db    ? ;
.bss:000000000021ADA5                 db    ? ;
.bss:000000000021ADA6                 db    ? ;
.bss:000000000021ADA7                 db    ? ;
.bss:000000000021ADA8                 db    ? ;
.bss:000000000021ADA9                 db    ? ;
.bss:000000000021ADAA                 db    ? ;
.bss:000000000021ADAB                 db    ? ;
.bss:000000000021ADAC                 db    ? ;
.bss:000000000021ADAD                 db    ? ;
.bss:000000000021ADAE                 db    ? ;
.bss:000000000021ADAF                 db    ? ;
.bss:000000000021ADB0                 db    ? ;
.bss:000000000021ADB1                 db    ? ;
.bss:000000000021ADB2                 db    ? ;
.bss:000000000021ADB3                 db    ? ;
.bss:000000000021ADB4                 db    ? ;
.bss:000000000021ADB5                 db    ? ;
.bss:000000000021ADB6                 db    ? ;
.bss:000000000021ADB7                 db    ? ;
.bss:000000000021ADB8                 db    ? ;
.bss:000000000021ADB9                 db    ? ;
.bss:000000000021ADBA                 db    ? ;
.bss:000000000021ADBB                 db    ? ;
.bss:000000000021ADBC                 db    ? ;
.bss:000000000021ADBD                 db    ? ;
.bss:000000000021ADBE                 db    ? ;
.bss:000000000021ADBF                 db    ? ;
.bss:000000000021ADC0                 db    ? ;
.bss:000000000021ADC1                 db    ? ;
.bss:000000000021ADC2                 db    ? ;
.bss:000000000021ADC3                 db    ? ;
.bss:000000000021ADC4                 db    ? ;
.bss:000000000021ADC5                 db    ? ;
.bss:000000000021ADC6                 db    ? ;
.bss:000000000021ADC7                 db    ? ;
.bss:000000000021ADC8                 db    ? ;
.bss:000000000021ADC9                 db    ? ;
.bss:000000000021ADCA                 db    ? ;
.bss:000000000021ADCB                 db    ? ;
.bss:000000000021ADCC                 db    ? ;
.bss:000000000021ADCD                 db    ? ;
.bss:000000000021ADCE                 db    ? ;
.bss:000000000021ADCF                 db    ? ;
.bss:000000000021ADD0                 db    ? ;
.bss:000000000021ADD1                 db    ? ;
.bss:000000000021ADD2                 db    ? ;
.bss:000000000021ADD3                 db    ? ;
.bss:000000000021ADD4                 db    ? ;
.bss:000000000021ADD5                 db    ? ;
.bss:000000000021ADD6                 db    ? ;
.bss:000000000021ADD7                 db    ? ;
.bss:000000000021ADD8                 db    ? ;
.bss:000000000021ADD9                 db    ? ;
.bss:000000000021ADDA                 db    ? ;
.bss:000000000021ADDB                 db    ? ;
.bss:000000000021ADDC                 db    ? ;
.bss:000000000021ADDD                 db    ? ;
.bss:000000000021ADDE                 db    ? ;
.bss:000000000021ADDF                 db    ? ;
.bss:000000000021ADE0                 db    ? ;
.bss:000000000021ADE1                 db    ? ;
.bss:000000000021ADE2                 db    ? ;
.bss:000000000021ADE3                 db    ? ;
.bss:000000000021ADE4                 db    ? ;
.bss:000000000021ADE5                 db    ? ;
.bss:000000000021ADE6                 db    ? ;
.bss:000000000021ADE7                 db    ? ;
.bss:000000000021ADE8                 db    ? ;
.bss:000000000021ADE9                 db    ? ;
.bss:000000000021ADEA                 db    ? ;
.bss:000000000021ADEB                 db    ? ;
.bss:000000000021ADEC                 db    ? ;
.bss:000000000021ADED                 db    ? ;
.bss:000000000021ADEE                 db    ? ;
.bss:000000000021ADEF                 db    ? ;
.bss:000000000021ADF0                 db    ? ;
.bss:000000000021ADF1                 db    ? ;
.bss:000000000021ADF2                 db    ? ;
.bss:000000000021ADF3                 db    ? ;
.bss:000000000021ADF4                 db    ? ;
.bss:000000000021ADF5                 db    ? ;
.bss:000000000021ADF6                 db    ? ;
.bss:000000000021ADF7                 db    ? ;
.bss:000000000021ADF8                 db    ? ;
.bss:000000000021ADF9                 db    ? ;
.bss:000000000021ADFA                 db    ? ;
.bss:000000000021ADFB                 db    ? ;
.bss:000000000021ADFC                 db    ? ;
.bss:000000000021ADFD                 db    ? ;
.bss:000000000021ADFE                 db    ? ;
.bss:000000000021ADFF                 db    ? ;
.bss:000000000021AE00                 db    ? ;
.bss:000000000021AE01                 db    ? ;
.bss:000000000021AE02                 db    ? ;
.bss:000000000021AE03                 db    ? ;
.bss:000000000021AE04                 db    ? ;
.bss:000000000021AE05                 db    ? ;
.bss:000000000021AE06                 db    ? ;
.bss:000000000021AE07                 db    ? ;
.bss:000000000021AE08                 db    ? ;
.bss:000000000021AE09                 db    ? ;
.bss:000000000021AE0A                 db    ? ;
.bss:000000000021AE0B                 db    ? ;
.bss:000000000021AE0C                 db    ? ;
.bss:000000000021AE0D                 db    ? ;
.bss:000000000021AE0E                 db    ? ;
.bss:000000000021AE0F                 db    ? ;
.bss:000000000021AE10                 db    ? ;
.bss:000000000021AE11                 db    ? ;
.bss:000000000021AE12                 db    ? ;
.bss:000000000021AE13                 db    ? ;
.bss:000000000021AE14                 db    ? ;
.bss:000000000021AE15                 db    ? ;
.bss:000000000021AE16                 db    ? ;
.bss:000000000021AE17                 db    ? ;
.bss:000000000021AE18                 db    ? ;
.bss:000000000021AE19                 db    ? ;
.bss:000000000021AE1A                 db    ? ;
.bss:000000000021AE1B                 db    ? ;
.bss:000000000021AE1C                 db    ? ;
.bss:000000000021AE1D                 db    ? ;
.bss:000000000021AE1E                 db    ? ;
.bss:000000000021AE1F                 db    ? ;
.bss:000000000021AE20                 db    ? ;
.bss:000000000021AE21                 db    ? ;
.bss:000000000021AE22                 db    ? ;
.bss:000000000021AE23                 db    ? ;
.bss:000000000021AE24                 db    ? ;
.bss:000000000021AE25                 db    ? ;
.bss:000000000021AE26                 db    ? ;
.bss:000000000021AE27                 db    ? ;
.bss:000000000021AE28                 db    ? ;
.bss:000000000021AE29                 db    ? ;
.bss:000000000021AE2A                 db    ? ;
.bss:000000000021AE2B                 db    ? ;
.bss:000000000021AE2C                 db    ? ;
.bss:000000000021AE2D                 db    ? ;
.bss:000000000021AE2E                 db    ? ;
.bss:000000000021AE2F                 db    ? ;
.bss:000000000021AE30                 db    ? ;
.bss:000000000021AE31                 db    ? ;
.bss:000000000021AE32                 db    ? ;
.bss:000000000021AE33                 db    ? ;
.bss:000000000021AE34                 db    ? ;
.bss:000000000021AE35                 db    ? ;
.bss:000000000021AE36                 db    ? ;
.bss:000000000021AE37                 db    ? ;
.bss:000000000021AE38                 db    ? ;
.bss:000000000021AE39                 db    ? ;
.bss:000000000021AE3A                 db    ? ;
.bss:000000000021AE3B                 db    ? ;
.bss:000000000021AE3C                 db    ? ;
.bss:000000000021AE3D                 db    ? ;
.bss:000000000021AE3E                 db    ? ;
.bss:000000000021AE3F                 db    ? ;
.bss:000000000021AE40                 db    ? ;
.bss:000000000021AE41                 db    ? ;
.bss:000000000021AE42                 db    ? ;
.bss:000000000021AE43                 db    ? ;
.bss:000000000021AE44                 db    ? ;
.bss:000000000021AE45                 db    ? ;
.bss:000000000021AE46                 db    ? ;
.bss:000000000021AE47                 db    ? ;
.bss:000000000021AE48                 db    ? ;
.bss:000000000021AE49                 db    ? ;
.bss:000000000021AE4A                 db    ? ;
.bss:000000000021AE4B                 db    ? ;
.bss:000000000021AE4C                 db    ? ;
.bss:000000000021AE4D                 db    ? ;
.bss:000000000021AE4E                 db    ? ;
.bss:000000000021AE4F                 db    ? ;
.bss:000000000021AE50                 db    ? ;
.bss:000000000021AE51                 db    ? ;
.bss:000000000021AE52                 db    ? ;
.bss:000000000021AE53                 db    ? ;
.bss:000000000021AE54                 db    ? ;
.bss:000000000021AE55                 db    ? ;
.bss:000000000021AE56                 db    ? ;
.bss:000000000021AE57                 db    ? ;
.bss:000000000021AE58                 db    ? ;
.bss:000000000021AE59                 db    ? ;
.bss:000000000021AE5A                 db    ? ;
.bss:000000000021AE5B                 db    ? ;
.bss:000000000021AE5C                 db    ? ;
.bss:000000000021AE5D                 db    ? ;
.bss:000000000021AE5E                 db    ? ;
.bss:000000000021AE5F                 db    ? ;
.bss:000000000021AE60                 db    ? ;
.bss:000000000021AE61                 db    ? ;
.bss:000000000021AE62                 db    ? ;
.bss:000000000021AE63                 db    ? ;
.bss:000000000021AE64                 db    ? ;
.bss:000000000021AE65                 db    ? ;
.bss:000000000021AE66                 db    ? ;
.bss:000000000021AE67                 db    ? ;
.bss:000000000021AE68                 db    ? ;
.bss:000000000021AE69                 db    ? ;
.bss:000000000021AE6A                 db    ? ;
.bss:000000000021AE6B                 db    ? ;
.bss:000000000021AE6C                 db    ? ;
.bss:000000000021AE6D                 db    ? ;
.bss:000000000021AE6E                 db    ? ;
.bss:000000000021AE6F                 db    ? ;
.bss:000000000021AE70                 db    ? ;
.bss:000000000021AE71                 db    ? ;
.bss:000000000021AE72                 db    ? ;
.bss:000000000021AE73                 db    ? ;
.bss:000000000021AE74                 db    ? ;
.bss:000000000021AE75                 db    ? ;
.bss:000000000021AE76                 db    ? ;
.bss:000000000021AE77                 db    ? ;
.bss:000000000021AE78                 db    ? ;
.bss:000000000021AE79                 db    ? ;
.bss:000000000021AE7A                 db    ? ;
.bss:000000000021AE7B                 db    ? ;
.bss:000000000021AE7C                 db    ? ;
.bss:000000000021AE7D                 db    ? ;
.bss:000000000021AE7E                 db    ? ;
.bss:000000000021AE7F                 db    ? ;
.bss:000000000021AE80                 db    ? ;
.bss:000000000021AE81                 db    ? ;
.bss:000000000021AE82                 db    ? ;
.bss:000000000021AE83                 db    ? ;
.bss:000000000021AE84                 db    ? ;
.bss:000000000021AE85                 db    ? ;
.bss:000000000021AE86                 db    ? ;
.bss:000000000021AE87                 db    ? ;
.bss:000000000021AE88                 db    ? ;
.bss:000000000021AE89                 db    ? ;
.bss:000000000021AE8A                 db    ? ;
.bss:000000000021AE8B                 db    ? ;
.bss:000000000021AE8C                 db    ? ;
.bss:000000000021AE8D                 db    ? ;
.bss:000000000021AE8E                 db    ? ;
.bss:000000000021AE8F                 db    ? ;
.bss:000000000021AE90                 db    ? ;
.bss:000000000021AE91                 db    ? ;
.bss:000000000021AE92                 db    ? ;
.bss:000000000021AE93                 db    ? ;
.bss:000000000021AE94                 db    ? ;
.bss:000000000021AE95                 db    ? ;
.bss:000000000021AE96                 db    ? ;
.bss:000000000021AE97                 db    ? ;
.bss:000000000021AE98                 db    ? ;
.bss:000000000021AE99                 db    ? ;
.bss:000000000021AE9A                 db    ? ;
.bss:000000000021AE9B                 db    ? ;
.bss:000000000021AE9C                 db    ? ;
.bss:000000000021AE9D                 db    ? ;
.bss:000000000021AE9E                 db    ? ;
.bss:000000000021AE9F                 db    ? ;
.bss:000000000021AEA0                 db    ? ;
.bss:000000000021AEA1                 db    ? ;
.bss:000000000021AEA2                 db    ? ;
.bss:000000000021AEA3                 db    ? ;
.bss:000000000021AEA4                 db    ? ;
.bss:000000000021AEA5                 db    ? ;
.bss:000000000021AEA6                 db    ? ;
.bss:000000000021AEA7                 db    ? ;
.bss:000000000021AEA8                 db    ? ;
.bss:000000000021AEA9                 db    ? ;
.bss:000000000021AEAA                 db    ? ;
.bss:000000000021AEAB                 db    ? ;
.bss:000000000021AEAC                 db    ? ;
.bss:000000000021AEAD                 db    ? ;
.bss:000000000021AEAE                 db    ? ;
.bss:000000000021AEAF                 db    ? ;
.bss:000000000021AEB0                 db    ? ;
.bss:000000000021AEB1                 db    ? ;
.bss:000000000021AEB2                 db    ? ;
.bss:000000000021AEB3                 db    ? ;
.bss:000000000021AEB4                 db    ? ;
.bss:000000000021AEB5                 db    ? ;
.bss:000000000021AEB6                 db    ? ;
.bss:000000000021AEB7                 db    ? ;
.bss:000000000021AEB8                 db    ? ;
.bss:000000000021AEB9                 db    ? ;
.bss:000000000021AEBA                 db    ? ;
.bss:000000000021AEBB                 db    ? ;
.bss:000000000021AEBC                 db    ? ;
.bss:000000000021AEBD                 db    ? ;
.bss:000000000021AEBE                 db    ? ;
.bss:000000000021AEBF                 db    ? ;
.bss:000000000021AEC0                 db    ? ;
.bss:000000000021AEC1                 db    ? ;
.bss:000000000021AEC2                 db    ? ;
.bss:000000000021AEC3                 db    ? ;
.bss:000000000021AEC4                 db    ? ;
.bss:000000000021AEC5                 db    ? ;
.bss:000000000021AEC6                 db    ? ;
.bss:000000000021AEC7                 db    ? ;
.bss:000000000021AEC8                 db    ? ;
.bss:000000000021AEC9                 db    ? ;
.bss:000000000021AECA                 db    ? ;
.bss:000000000021AECB                 db    ? ;
.bss:000000000021AECC                 db    ? ;
.bss:000000000021AECD                 db    ? ;
.bss:000000000021AECE                 db    ? ;
.bss:000000000021AECF                 db    ? ;
.bss:000000000021AED0                 db    ? ;
.bss:000000000021AED1                 db    ? ;
.bss:000000000021AED2                 db    ? ;
.bss:000000000021AED3                 db    ? ;
.bss:000000000021AED4                 db    ? ;
.bss:000000000021AED5                 db    ? ;
.bss:000000000021AED6                 db    ? ;
.bss:000000000021AED7                 db    ? ;
.bss:000000000021AED8                 db    ? ;
.bss:000000000021AED9                 db    ? ;
.bss:000000000021AEDA                 db    ? ;
.bss:000000000021AEDB                 db    ? ;
.bss:000000000021AEDC                 db    ? ;
.bss:000000000021AEDD                 db    ? ;
.bss:000000000021AEDE                 db    ? ;
.bss:000000000021AEDF                 db    ? ;
.bss:000000000021AEE0                 db    ? ;
.bss:000000000021AEE1                 db    ? ;
.bss:000000000021AEE2                 db    ? ;
.bss:000000000021AEE3                 db    ? ;
.bss:000000000021AEE4                 db    ? ;
.bss:000000000021AEE5                 db    ? ;
.bss:000000000021AEE6                 db    ? ;
.bss:000000000021AEE7                 db    ? ;
.bss:000000000021AEE8                 db    ? ;
.bss:000000000021AEE9                 db    ? ;
.bss:000000000021AEEA                 db    ? ;
.bss:000000000021AEEB                 db    ? ;
.bss:000000000021AEEC                 db    ? ;
.bss:000000000021AEED                 db    ? ;
.bss:000000000021AEEE                 db    ? ;
.bss:000000000021AEEF                 db    ? ;
.bss:000000000021AEF0                 db    ? ;
.bss:000000000021AEF1                 db    ? ;
.bss:000000000021AEF2                 db    ? ;
.bss:000000000021AEF3                 db    ? ;
.bss:000000000021AEF4                 db    ? ;
.bss:000000000021AEF5                 db    ? ;
.bss:000000000021AEF6                 db    ? ;
.bss:000000000021AEF7                 db    ? ;
.bss:000000000021AEF8                 db    ? ;
.bss:000000000021AEF9                 db    ? ;
.bss:000000000021AEFA                 db    ? ;
.bss:000000000021AEFB                 db    ? ;
.bss:000000000021AEFC                 db    ? ;
.bss:000000000021AEFD                 db    ? ;
.bss:000000000021AEFE                 db    ? ;
.bss:000000000021AEFF                 db    ? ;
.bss:000000000021AF00                 db    ? ;
.bss:000000000021AF01                 db    ? ;
.bss:000000000021AF02                 db    ? ;
.bss:000000000021AF03                 db    ? ;
.bss:000000000021AF04                 db    ? ;
.bss:000000000021AF05                 db    ? ;
.bss:000000000021AF06                 db    ? ;
.bss:000000000021AF07                 db    ? ;
.bss:000000000021AF08                 db    ? ;
.bss:000000000021AF09                 db    ? ;
.bss:000000000021AF0A                 db    ? ;
.bss:000000000021AF0B                 db    ? ;
.bss:000000000021AF0C                 db    ? ;
.bss:000000000021AF0D                 db    ? ;
.bss:000000000021AF0E                 db    ? ;
.bss:000000000021AF0F                 db    ? ;
.bss:000000000021AF10                 db    ? ;
.bss:000000000021AF11                 db    ? ;
.bss:000000000021AF12                 db    ? ;
.bss:000000000021AF13                 db    ? ;
.bss:000000000021AF14                 db    ? ;
.bss:000000000021AF15                 db    ? ;
.bss:000000000021AF16                 db    ? ;
.bss:000000000021AF17                 db    ? ;
.bss:000000000021AF18                 db    ? ;
.bss:000000000021AF19                 db    ? ;
.bss:000000000021AF1A                 db    ? ;
.bss:000000000021AF1B                 db    ? ;
.bss:000000000021AF1C                 db    ? ;
.bss:000000000021AF1D                 db    ? ;
.bss:000000000021AF1E                 db    ? ;
.bss:000000000021AF1F                 db    ? ;
.bss:000000000021AF20                 db    ? ;
.bss:000000000021AF21                 db    ? ;
.bss:000000000021AF22                 db    ? ;
.bss:000000000021AF23                 db    ? ;
.bss:000000000021AF24                 db    ? ;
.bss:000000000021AF25                 db    ? ;
.bss:000000000021AF26                 db    ? ;
.bss:000000000021AF27                 db    ? ;
.bss:000000000021AF28                 db    ? ;
.bss:000000000021AF29                 db    ? ;
.bss:000000000021AF2A                 db    ? ;
.bss:000000000021AF2B                 db    ? ;
.bss:000000000021AF2C                 db    ? ;
.bss:000000000021AF2D                 db    ? ;
.bss:000000000021AF2E                 db    ? ;
.bss:000000000021AF2F                 db    ? ;
.bss:000000000021AF30                 db    ? ;
.bss:000000000021AF31                 db    ? ;
.bss:000000000021AF32                 db    ? ;
.bss:000000000021AF33                 db    ? ;
.bss:000000000021AF34                 db    ? ;
.bss:000000000021AF35                 db    ? ;
.bss:000000000021AF36                 db    ? ;
.bss:000000000021AF37                 db    ? ;
.bss:000000000021AF38                 db    ? ;
.bss:000000000021AF39                 db    ? ;
.bss:000000000021AF3A                 db    ? ;
.bss:000000000021AF3B                 db    ? ;
.bss:000000000021AF3C                 db    ? ;
.bss:000000000021AF3D                 db    ? ;
.bss:000000000021AF3E                 db    ? ;
.bss:000000000021AF3F                 db    ? ;
.bss:000000000021AF40                 db    ? ;
.bss:000000000021AF41                 db    ? ;
.bss:000000000021AF42                 db    ? ;
.bss:000000000021AF43                 db    ? ;
.bss:000000000021AF44                 db    ? ;
.bss:000000000021AF45                 db    ? ;
.bss:000000000021AF46                 db    ? ;
.bss:000000000021AF47                 db    ? ;
.bss:000000000021AF48                 db    ? ;
.bss:000000000021AF49                 db    ? ;
.bss:000000000021AF4A                 db    ? ;
.bss:000000000021AF4B                 db    ? ;
.bss:000000000021AF4C                 db    ? ;
.bss:000000000021AF4D                 db    ? ;
.bss:000000000021AF4E                 db    ? ;
.bss:000000000021AF4F                 db    ? ;
.bss:000000000021AF50                 db    ? ;
.bss:000000000021AF51                 db    ? ;
.bss:000000000021AF52                 db    ? ;
.bss:000000000021AF53                 db    ? ;
.bss:000000000021AF54                 db    ? ;
.bss:000000000021AF55                 db    ? ;
.bss:000000000021AF56                 db    ? ;
.bss:000000000021AF57                 db    ? ;
.bss:000000000021AF58                 db    ? ;
.bss:000000000021AF59                 db    ? ;
.bss:000000000021AF5A                 db    ? ;
.bss:000000000021AF5B                 db    ? ;
.bss:000000000021AF5C                 db    ? ;
.bss:000000000021AF5D                 db    ? ;
.bss:000000000021AF5E                 db    ? ;
.bss:000000000021AF5F                 db    ? ;
.bss:000000000021AF60                 db    ? ;
.bss:000000000021AF61                 db    ? ;
.bss:000000000021AF62                 db    ? ;
.bss:000000000021AF63                 db    ? ;
.bss:000000000021AF64                 db    ? ;
.bss:000000000021AF65                 db    ? ;
.bss:000000000021AF66                 db    ? ;
.bss:000000000021AF67                 db    ? ;
.bss:000000000021AF68                 db    ? ;
.bss:000000000021AF69                 db    ? ;
.bss:000000000021AF6A                 db    ? ;
.bss:000000000021AF6B                 db    ? ;
.bss:000000000021AF6C                 db    ? ;
.bss:000000000021AF6D                 db    ? ;
.bss:000000000021AF6E                 db    ? ;
.bss:000000000021AF6F                 db    ? ;
.bss:000000000021AF70                 db    ? ;
.bss:000000000021AF71                 db    ? ;
.bss:000000000021AF72                 db    ? ;
.bss:000000000021AF73                 db    ? ;
.bss:000000000021AF74                 db    ? ;
.bss:000000000021AF75                 db    ? ;
.bss:000000000021AF76                 db    ? ;
.bss:000000000021AF77                 db    ? ;
.bss:000000000021AF78                 db    ? ;
.bss:000000000021AF79                 db    ? ;
.bss:000000000021AF7A                 db    ? ;
.bss:000000000021AF7B                 db    ? ;
.bss:000000000021AF7C                 db    ? ;
.bss:000000000021AF7D                 db    ? ;
.bss:000000000021AF7E                 db    ? ;
.bss:000000000021AF7F                 db    ? ;
.bss:000000000021AF80                 db    ? ;
.bss:000000000021AF81                 db    ? ;
.bss:000000000021AF82                 db    ? ;
.bss:000000000021AF83                 db    ? ;
.bss:000000000021AF84                 db    ? ;
.bss:000000000021AF85                 db    ? ;
.bss:000000000021AF86                 db    ? ;
.bss:000000000021AF87                 db    ? ;
.bss:000000000021AF88                 db    ? ;
.bss:000000000021AF89                 db    ? ;
.bss:000000000021AF8A                 db    ? ;
.bss:000000000021AF8B                 db    ? ;
.bss:000000000021AF8C                 db    ? ;
.bss:000000000021AF8D                 db    ? ;
.bss:000000000021AF8E                 db    ? ;
.bss:000000000021AF8F                 db    ? ;
.bss:000000000021AF90                 db    ? ;
.bss:000000000021AF91                 db    ? ;
.bss:000000000021AF92                 db    ? ;
.bss:000000000021AF93                 db    ? ;
.bss:000000000021AF94                 db    ? ;
.bss:000000000021AF95                 db    ? ;
.bss:000000000021AF96                 db    ? ;
.bss:000000000021AF97                 db    ? ;
.bss:000000000021AF98                 db    ? ;
.bss:000000000021AF99                 db    ? ;
.bss:000000000021AF9A                 db    ? ;
.bss:000000000021AF9B                 db    ? ;
.bss:000000000021AF9C                 db    ? ;
.bss:000000000021AF9D                 db    ? ;
.bss:000000000021AF9E                 db    ? ;
.bss:000000000021AF9F                 db    ? ;
.bss:000000000021AFA0                 db    ? ;
.bss:000000000021AFA1                 db    ? ;
.bss:000000000021AFA2                 db    ? ;
.bss:000000000021AFA3                 db    ? ;
.bss:000000000021AFA4                 db    ? ;
.bss:000000000021AFA5                 db    ? ;
.bss:000000000021AFA6                 db    ? ;
.bss:000000000021AFA7                 db    ? ;
.bss:000000000021AFA8                 db    ? ;
.bss:000000000021AFA9                 db    ? ;
.bss:000000000021AFAA                 db    ? ;
.bss:000000000021AFAB                 db    ? ;
.bss:000000000021AFAC                 db    ? ;
.bss:000000000021AFAD                 db    ? ;
.bss:000000000021AFAE                 db    ? ;
.bss:000000000021AFAF                 db    ? ;
.bss:000000000021AFB0                 db    ? ;
.bss:000000000021AFB1                 db    ? ;
.bss:000000000021AFB2                 db    ? ;
.bss:000000000021AFB3                 db    ? ;
.bss:000000000021AFB4                 db    ? ;
.bss:000000000021AFB5                 db    ? ;
.bss:000000000021AFB6                 db    ? ;
.bss:000000000021AFB7                 db    ? ;
.bss:000000000021AFB8                 db    ? ;
.bss:000000000021AFB9                 db    ? ;
.bss:000000000021AFBA                 db    ? ;
.bss:000000000021AFBB                 db    ? ;
.bss:000000000021AFBC                 db    ? ;
.bss:000000000021AFBD                 db    ? ;
.bss:000000000021AFBE                 db    ? ;
.bss:000000000021AFBF                 db    ? ;
.bss:000000000021AFC0                 db    ? ;
.bss:000000000021AFC1                 db    ? ;
.bss:000000000021AFC2                 db    ? ;
.bss:000000000021AFC3                 db    ? ;
.bss:000000000021AFC4                 db    ? ;
.bss:000000000021AFC5                 db    ? ;
.bss:000000000021AFC6                 db    ? ;
.bss:000000000021AFC7                 db    ? ;
.bss:000000000021AFC8                 db    ? ;
.bss:000000000021AFC9                 db    ? ;
.bss:000000000021AFCA                 db    ? ;
.bss:000000000021AFCB                 db    ? ;
.bss:000000000021AFCC                 db    ? ;
.bss:000000000021AFCD                 db    ? ;
.bss:000000000021AFCE                 db    ? ;
.bss:000000000021AFCF                 db    ? ;
.bss:000000000021AFD0                 db    ? ;
.bss:000000000021AFD1                 db    ? ;
.bss:000000000021AFD2                 db    ? ;
.bss:000000000021AFD3                 db    ? ;
.bss:000000000021AFD4                 db    ? ;
.bss:000000000021AFD5                 db    ? ;
.bss:000000000021AFD6                 db    ? ;
.bss:000000000021AFD7                 db    ? ;
.bss:000000000021AFD8                 db    ? ;
.bss:000000000021AFD9                 db    ? ;
.bss:000000000021AFDA                 db    ? ;
.bss:000000000021AFDB                 db    ? ;
.bss:000000000021AFDC                 db    ? ;
.bss:000000000021AFDD                 db    ? ;
.bss:000000000021AFDE                 db    ? ;
.bss:000000000021AFDF                 db    ? ;
.bss:000000000021AFE0                 db    ? ;
.bss:000000000021AFE1                 db    ? ;
.bss:000000000021AFE2                 db    ? ;
.bss:000000000021AFE3                 db    ? ;
.bss:000000000021AFE4                 db    ? ;
.bss:000000000021AFE5                 db    ? ;
.bss:000000000021AFE6                 db    ? ;
.bss:000000000021AFE7                 db    ? ;
.bss:000000000021AFE8                 db    ? ;
.bss:000000000021AFE9                 db    ? ;
.bss:000000000021AFEA                 db    ? ;
.bss:000000000021AFEB                 db    ? ;
.bss:000000000021AFEC                 db    ? ;
.bss:000000000021AFED                 db    ? ;
.bss:000000000021AFEE                 db    ? ;
.bss:000000000021AFEF                 db    ? ;
.bss:000000000021AFF0                 db    ? ;
.bss:000000000021AFF1                 db    ? ;
.bss:000000000021AFF2                 db    ? ;
.bss:000000000021AFF3                 db    ? ;
.bss:000000000021AFF4                 db    ? ;
.bss:000000000021AFF5                 db    ? ;
.bss:000000000021AFF6                 db    ? ;
.bss:000000000021AFF7                 db    ? ;
.bss:000000000021AFF8                 db    ? ;
.bss:000000000021AFF9                 db    ? ;
.bss:000000000021AFFA                 db    ? ;
.bss:000000000021AFFB                 db    ? ;
.bss:000000000021AFFC                 db    ? ;
.bss:000000000021AFFD                 db    ? ;
.bss:000000000021AFFE                 db    ? ;
.bss:000000000021AFFF                 db    ? ;
.bss:000000000021B000                 db    ? ;
.bss:000000000021B001                 db    ? ;
.bss:000000000021B002                 db    ? ;
.bss:000000000021B003                 db    ? ;
.bss:000000000021B004                 db    ? ;
.bss:000000000021B005                 db    ? ;
.bss:000000000021B006                 db    ? ;
.bss:000000000021B007                 db    ? ;
.bss:000000000021B008                 db    ? ;
.bss:000000000021B009                 db    ? ;
.bss:000000000021B00A                 db    ? ;
.bss:000000000021B00B                 db    ? ;
.bss:000000000021B00C                 db    ? ;
.bss:000000000021B00D                 db    ? ;
.bss:000000000021B00E                 db    ? ;
.bss:000000000021B00F                 db    ? ;
.bss:000000000021B010                 db    ? ;
.bss:000000000021B011                 db    ? ;
.bss:000000000021B012                 db    ? ;
.bss:000000000021B013                 db    ? ;
.bss:000000000021B014                 db    ? ;
.bss:000000000021B015                 db    ? ;
.bss:000000000021B016                 db    ? ;
.bss:000000000021B017                 db    ? ;
.bss:000000000021B018                 db    ? ;
.bss:000000000021B019                 db    ? ;
.bss:000000000021B01A                 db    ? ;
.bss:000000000021B01B                 db    ? ;
.bss:000000000021B01C                 db    ? ;
.bss:000000000021B01D                 db    ? ;
.bss:000000000021B01E                 db    ? ;
.bss:000000000021B01F                 db    ? ;
.bss:000000000021B020                 db    ? ;
.bss:000000000021B021                 db    ? ;
.bss:000000000021B022                 db    ? ;
.bss:000000000021B023                 db    ? ;
.bss:000000000021B024                 db    ? ;
.bss:000000000021B025                 db    ? ;
.bss:000000000021B026                 db    ? ;
.bss:000000000021B027                 db    ? ;
.bss:000000000021B028                 db    ? ;
.bss:000000000021B029                 db    ? ;
.bss:000000000021B02A                 db    ? ;
.bss:000000000021B02B                 db    ? ;
.bss:000000000021B02C                 db    ? ;
.bss:000000000021B02D                 db    ? ;
.bss:000000000021B02E                 db    ? ;
.bss:000000000021B02F                 db    ? ;
.bss:000000000021B030                 db    ? ;
.bss:000000000021B031                 db    ? ;
.bss:000000000021B032                 db    ? ;
.bss:000000000021B033                 db    ? ;
.bss:000000000021B034                 db    ? ;
.bss:000000000021B035                 db    ? ;
.bss:000000000021B036                 db    ? ;
.bss:000000000021B037                 db    ? ;
.bss:000000000021B038                 db    ? ;
.bss:000000000021B039                 db    ? ;
.bss:000000000021B03A                 db    ? ;
.bss:000000000021B03B                 db    ? ;
.bss:000000000021B03C                 db    ? ;
.bss:000000000021B03D                 db    ? ;
.bss:000000000021B03E                 db    ? ;
.bss:000000000021B03F                 db    ? ;
.bss:000000000021B040                 db    ? ;
.bss:000000000021B041                 db    ? ;
.bss:000000000021B042                 db    ? ;
.bss:000000000021B043                 db    ? ;
.bss:000000000021B044                 db    ? ;
.bss:000000000021B045                 db    ? ;
.bss:000000000021B046                 db    ? ;
.bss:000000000021B047                 db    ? ;
.bss:000000000021B048                 db    ? ;
.bss:000000000021B049                 db    ? ;
.bss:000000000021B04A                 db    ? ;
.bss:000000000021B04B                 db    ? ;
.bss:000000000021B04C                 db    ? ;
.bss:000000000021B04D                 db    ? ;
.bss:000000000021B04E                 db    ? ;
.bss:000000000021B04F                 db    ? ;
.bss:000000000021B050                 db    ? ;
.bss:000000000021B051                 db    ? ;
.bss:000000000021B052                 db    ? ;
.bss:000000000021B053                 db    ? ;
.bss:000000000021B054                 db    ? ;
.bss:000000000021B055                 db    ? ;
.bss:000000000021B056                 db    ? ;
.bss:000000000021B057                 db    ? ;
.bss:000000000021B058                 db    ? ;
.bss:000000000021B059                 db    ? ;
.bss:000000000021B05A                 db    ? ;
.bss:000000000021B05B                 db    ? ;
.bss:000000000021B05C                 db    ? ;
.bss:000000000021B05D                 db    ? ;
.bss:000000000021B05E                 db    ? ;
.bss:000000000021B05F                 db    ? ;
.bss:000000000021B060                 db    ? ;
.bss:000000000021B061                 db    ? ;
.bss:000000000021B062                 db    ? ;
.bss:000000000021B063                 db    ? ;
.bss:000000000021B064                 db    ? ;
.bss:000000000021B065                 db    ? ;
.bss:000000000021B066                 db    ? ;
.bss:000000000021B067                 db    ? ;
.bss:000000000021B068                 db    ? ;
.bss:000000000021B069                 db    ? ;
.bss:000000000021B06A                 db    ? ;
.bss:000000000021B06B                 db    ? ;
.bss:000000000021B06C                 db    ? ;
.bss:000000000021B06D                 db    ? ;
.bss:000000000021B06E                 db    ? ;
.bss:000000000021B06F                 db    ? ;
.bss:000000000021B070                 db    ? ;
.bss:000000000021B071                 db    ? ;
.bss:000000000021B072                 db    ? ;
.bss:000000000021B073                 db    ? ;
.bss:000000000021B074                 db    ? ;
.bss:000000000021B075                 db    ? ;
.bss:000000000021B076                 db    ? ;
.bss:000000000021B077                 db    ? ;
.bss:000000000021B078                 db    ? ;
.bss:000000000021B079                 db    ? ;
.bss:000000000021B07A                 db    ? ;
.bss:000000000021B07B                 db    ? ;
.bss:000000000021B07C                 db    ? ;
.bss:000000000021B07D                 db    ? ;
.bss:000000000021B07E                 db    ? ;
.bss:000000000021B07F                 db    ? ;
.bss:000000000021B080                 db    ? ;
.bss:000000000021B081                 db    ? ;
.bss:000000000021B082                 db    ? ;
.bss:000000000021B083                 db    ? ;
.bss:000000000021B084                 db    ? ;
.bss:000000000021B085                 db    ? ;
.bss:000000000021B086                 db    ? ;
.bss:000000000021B087                 db    ? ;
.bss:000000000021B088                 db    ? ;
.bss:000000000021B089                 db    ? ;
.bss:000000000021B08A                 db    ? ;
.bss:000000000021B08B                 db    ? ;
.bss:000000000021B08C                 db    ? ;
.bss:000000000021B08D                 db    ? ;
.bss:000000000021B08E                 db    ? ;
.bss:000000000021B08F                 db    ? ;
.bss:000000000021B090                 db    ? ;
.bss:000000000021B091                 db    ? ;
.bss:000000000021B092                 db    ? ;
.bss:000000000021B093                 db    ? ;
.bss:000000000021B094                 db    ? ;
.bss:000000000021B095                 db    ? ;
.bss:000000000021B096                 db    ? ;
.bss:000000000021B097                 db    ? ;
.bss:000000000021B098                 db    ? ;
.bss:000000000021B099                 db    ? ;
.bss:000000000021B09A                 db    ? ;
.bss:000000000021B09B                 db    ? ;
.bss:000000000021B09C                 db    ? ;
.bss:000000000021B09D                 db    ? ;
.bss:000000000021B09E                 db    ? ;
.bss:000000000021B09F                 db    ? ;
.bss:000000000021B0A0                 db    ? ;
.bss:000000000021B0A1                 db    ? ;
.bss:000000000021B0A2                 db    ? ;
.bss:000000000021B0A3                 db    ? ;
.bss:000000000021B0A4                 db    ? ;
.bss:000000000021B0A5                 db    ? ;
.bss:000000000021B0A6                 db    ? ;
.bss:000000000021B0A7                 db    ? ;
.bss:000000000021B0A8                 db    ? ;
.bss:000000000021B0A9                 db    ? ;
.bss:000000000021B0AA                 db    ? ;
.bss:000000000021B0AB                 db    ? ;
.bss:000000000021B0AC                 db    ? ;
.bss:000000000021B0AD                 db    ? ;
.bss:000000000021B0AE                 db    ? ;
.bss:000000000021B0AF                 db    ? ;
.bss:000000000021B0B0                 db    ? ;
.bss:000000000021B0B1                 db    ? ;
.bss:000000000021B0B2                 db    ? ;
.bss:000000000021B0B3                 db    ? ;
.bss:000000000021B0B4                 db    ? ;
.bss:000000000021B0B5                 db    ? ;
.bss:000000000021B0B6                 db    ? ;
.bss:000000000021B0B7                 db    ? ;
.bss:000000000021B0B8                 db    ? ;
.bss:000000000021B0B9                 db    ? ;
.bss:000000000021B0BA                 db    ? ;
.bss:000000000021B0BB                 db    ? ;
.bss:000000000021B0BC                 db    ? ;
.bss:000000000021B0BD                 db    ? ;
.bss:000000000021B0BE                 db    ? ;
.bss:000000000021B0BF                 db    ? ;
.bss:000000000021B0C0                 db    ? ;
.bss:000000000021B0C1                 db    ? ;
.bss:000000000021B0C2                 db    ? ;
.bss:000000000021B0C3                 db    ? ;
.bss:000000000021B0C4                 db    ? ;
.bss:000000000021B0C5                 db    ? ;
.bss:000000000021B0C6                 db    ? ;
.bss:000000000021B0C7                 db    ? ;
.bss:000000000021B0C8                 db    ? ;
.bss:000000000021B0C9                 db    ? ;
.bss:000000000021B0CA                 db    ? ;
.bss:000000000021B0CB                 db    ? ;
.bss:000000000021B0CC                 db    ? ;
.bss:000000000021B0CD                 db    ? ;
.bss:000000000021B0CE                 db    ? ;
.bss:000000000021B0CF                 db    ? ;
.bss:000000000021B0D0                 db    ? ;
.bss:000000000021B0D1                 db    ? ;
.bss:000000000021B0D2                 db    ? ;
.bss:000000000021B0D3                 db    ? ;
.bss:000000000021B0D4                 db    ? ;
.bss:000000000021B0D5                 db    ? ;
.bss:000000000021B0D6                 db    ? ;
.bss:000000000021B0D7                 db    ? ;
.bss:000000000021B0D8                 db    ? ;
.bss:000000000021B0D9                 db    ? ;
.bss:000000000021B0DA                 db    ? ;
.bss:000000000021B0DB                 db    ? ;
.bss:000000000021B0DC                 db    ? ;
.bss:000000000021B0DD                 db    ? ;
.bss:000000000021B0DE                 db    ? ;
.bss:000000000021B0DF                 db    ? ;
.bss:000000000021B0E0 ; size_t bytes_in_buffer_7000
.bss:000000000021B0E0 bytes_in_buffer_7000 dq ?               ; DATA XREF: output+11↑r
.bss:000000000021B0E0                                         ; output+86↑w ...
.bss:000000000021B0E8 ; FILE *tmp_fp_7066
.bss:000000000021B0E8 tmp_fp_7066     dq ?                    ; DATA XREF: main+346↑r
.bss:000000000021B0E8                                         ; main+369↑r ...
.bss:000000000021B0F0 ; char *tempfile_7065
.bss:000000000021B0F0 tempfile_7065   dq ?                    ; DATA XREF: main:loc_1FC8↑r
.bss:000000000021B0F0                                         ; main:loc_2016↑r ...
.bss:000000000021B0F8                 align 20h
.bss:000000000021B100 regs            db    ? ;               ; DATA XREF: tac_seekable+199↑o
.bss:000000000021B101                 db    ? ;
.bss:000000000021B102                 db    ? ;
.bss:000000000021B103                 db    ? ;
.bss:000000000021B104                 db    ? ;
.bss:000000000021B105                 db    ? ;
.bss:000000000021B106                 db    ? ;
.bss:000000000021B107                 db    ? ;
.bss:000000000021B108 qword_21B108    dq ?                    ; DATA XREF: tac_seekable+1C6↑r
.bss:000000000021B110 qword_21B110    dq ?                    ; DATA XREF: tac_seekable+1D7↑r
.bss:000000000021B118                 align 20h
.bss:000000000021B120 compiled_separator_fastmap db    ? ;    ; DATA XREF: main+159↑o
.bss:000000000021B121                 db    ? ;
.bss:000000000021B122                 db    ? ;
.bss:000000000021B123                 db    ? ;
.bss:000000000021B124                 db    ? ;
.bss:000000000021B125                 db    ? ;
.bss:000000000021B126                 db    ? ;
.bss:000000000021B127                 db    ? ;
.bss:000000000021B128                 db    ? ;
.bss:000000000021B129                 db    ? ;
.bss:000000000021B12A                 db    ? ;
.bss:000000000021B12B                 db    ? ;
.bss:000000000021B12C                 db    ? ;
.bss:000000000021B12D                 db    ? ;
.bss:000000000021B12E                 db    ? ;
.bss:000000000021B12F                 db    ? ;
.bss:000000000021B130                 db    ? ;
.bss:000000000021B131                 db    ? ;
.bss:000000000021B132                 db    ? ;
.bss:000000000021B133                 db    ? ;
.bss:000000000021B134                 db    ? ;
.bss:000000000021B135                 db    ? ;
.bss:000000000021B136                 db    ? ;
.bss:000000000021B137                 db    ? ;
.bss:000000000021B138                 db    ? ;
.bss:000000000021B139                 db    ? ;
.bss:000000000021B13A                 db    ? ;
.bss:000000000021B13B                 db    ? ;
.bss:000000000021B13C                 db    ? ;
.bss:000000000021B13D                 db    ? ;
.bss:000000000021B13E                 db    ? ;
.bss:000000000021B13F                 db    ? ;
.bss:000000000021B140                 db    ? ;
.bss:000000000021B141                 db    ? ;
.bss:000000000021B142                 db    ? ;
.bss:000000000021B143                 db    ? ;
.bss:000000000021B144                 db    ? ;
.bss:000000000021B145                 db    ? ;
.bss:000000000021B146                 db    ? ;
.bss:000000000021B147                 db    ? ;
.bss:000000000021B148                 db    ? ;
.bss:000000000021B149                 db    ? ;
.bss:000000000021B14A                 db    ? ;
.bss:000000000021B14B                 db    ? ;
.bss:000000000021B14C                 db    ? ;
.bss:000000000021B14D                 db    ? ;
.bss:000000000021B14E                 db    ? ;
.bss:000000000021B14F                 db    ? ;
.bss:000000000021B150                 db    ? ;
.bss:000000000021B151                 db    ? ;
.bss:000000000021B152                 db    ? ;
.bss:000000000021B153                 db    ? ;
.bss:000000000021B154                 db    ? ;
.bss:000000000021B155                 db    ? ;
.bss:000000000021B156                 db    ? ;
.bss:000000000021B157                 db    ? ;
.bss:000000000021B158                 db    ? ;
.bss:000000000021B159                 db    ? ;
.bss:000000000021B15A                 db    ? ;
.bss:000000000021B15B                 db    ? ;
.bss:000000000021B15C                 db    ? ;
.bss:000000000021B15D                 db    ? ;
.bss:000000000021B15E                 db    ? ;
.bss:000000000021B15F                 db    ? ;
.bss:000000000021B160                 db    ? ;
.bss:000000000021B161                 db    ? ;
.bss:000000000021B162                 db    ? ;
.bss:000000000021B163                 db    ? ;
.bss:000000000021B164                 db    ? ;
.bss:000000000021B165                 db    ? ;
.bss:000000000021B166                 db    ? ;
.bss:000000000021B167                 db    ? ;
.bss:000000000021B168                 db    ? ;
.bss:000000000021B169                 db    ? ;
.bss:000000000021B16A                 db    ? ;
.bss:000000000021B16B                 db    ? ;
.bss:000000000021B16C                 db    ? ;
.bss:000000000021B16D                 db    ? ;
.bss:000000000021B16E                 db    ? ;
.bss:000000000021B16F                 db    ? ;
.bss:000000000021B170                 db    ? ;
.bss:000000000021B171                 db    ? ;
.bss:000000000021B172                 db    ? ;
.bss:000000000021B173                 db    ? ;
.bss:000000000021B174                 db    ? ;
.bss:000000000021B175                 db    ? ;
.bss:000000000021B176                 db    ? ;
.bss:000000000021B177                 db    ? ;
.bss:000000000021B178                 db    ? ;
.bss:000000000021B179                 db    ? ;
.bss:000000000021B17A                 db    ? ;
.bss:000000000021B17B                 db    ? ;
.bss:000000000021B17C                 db    ? ;
.bss:000000000021B17D                 db    ? ;
.bss:000000000021B17E                 db    ? ;
.bss:000000000021B17F                 db    ? ;
.bss:000000000021B180                 db    ? ;
.bss:000000000021B181                 db    ? ;
.bss:000000000021B182                 db    ? ;
.bss:000000000021B183                 db    ? ;
.bss:000000000021B184                 db    ? ;
.bss:000000000021B185                 db    ? ;
.bss:000000000021B186                 db    ? ;
.bss:000000000021B187                 db    ? ;
.bss:000000000021B188                 db    ? ;
.bss:000000000021B189                 db    ? ;
.bss:000000000021B18A                 db    ? ;
.bss:000000000021B18B                 db    ? ;
.bss:000000000021B18C                 db    ? ;
.bss:000000000021B18D                 db    ? ;
.bss:000000000021B18E                 db    ? ;
.bss:000000000021B18F                 db    ? ;
.bss:000000000021B190                 db    ? ;
.bss:000000000021B191                 db    ? ;
.bss:000000000021B192                 db    ? ;
.bss:000000000021B193                 db    ? ;
.bss:000000000021B194                 db    ? ;
.bss:000000000021B195                 db    ? ;
.bss:000000000021B196                 db    ? ;
.bss:000000000021B197                 db    ? ;
.bss:000000000021B198                 db    ? ;
.bss:000000000021B199                 db    ? ;
.bss:000000000021B19A                 db    ? ;
.bss:000000000021B19B                 db    ? ;
.bss:000000000021B19C                 db    ? ;
.bss:000000000021B19D                 db    ? ;
.bss:000000000021B19E                 db    ? ;
.bss:000000000021B19F                 db    ? ;
.bss:000000000021B1A0                 db    ? ;
.bss:000000000021B1A1                 db    ? ;
.bss:000000000021B1A2                 db    ? ;
.bss:000000000021B1A3                 db    ? ;
.bss:000000000021B1A4                 db    ? ;
.bss:000000000021B1A5                 db    ? ;
.bss:000000000021B1A6                 db    ? ;
.bss:000000000021B1A7                 db    ? ;
.bss:000000000021B1A8                 db    ? ;
.bss:000000000021B1A9                 db    ? ;
.bss:000000000021B1AA                 db    ? ;
.bss:000000000021B1AB                 db    ? ;
.bss:000000000021B1AC                 db    ? ;
.bss:000000000021B1AD                 db    ? ;
.bss:000000000021B1AE                 db    ? ;
.bss:000000000021B1AF                 db    ? ;
.bss:000000000021B1B0                 db    ? ;
.bss:000000000021B1B1                 db    ? ;
.bss:000000000021B1B2                 db    ? ;
.bss:000000000021B1B3                 db    ? ;
.bss:000000000021B1B4                 db    ? ;
.bss:000000000021B1B5                 db    ? ;
.bss:000000000021B1B6                 db    ? ;
.bss:000000000021B1B7                 db    ? ;
.bss:000000000021B1B8                 db    ? ;
.bss:000000000021B1B9                 db    ? ;
.bss:000000000021B1BA                 db    ? ;
.bss:000000000021B1BB                 db    ? ;
.bss:000000000021B1BC                 db    ? ;
.bss:000000000021B1BD                 db    ? ;
.bss:000000000021B1BE                 db    ? ;
.bss:000000000021B1BF                 db    ? ;
.bss:000000000021B1C0                 db    ? ;
.bss:000000000021B1C1                 db    ? ;
.bss:000000000021B1C2                 db    ? ;
.bss:000000000021B1C3                 db    ? ;
.bss:000000000021B1C4                 db    ? ;
.bss:000000000021B1C5                 db    ? ;
.bss:000000000021B1C6                 db    ? ;
.bss:000000000021B1C7                 db    ? ;
.bss:000000000021B1C8                 db    ? ;
.bss:000000000021B1C9                 db    ? ;
.bss:000000000021B1CA                 db    ? ;
.bss:000000000021B1CB                 db    ? ;
.bss:000000000021B1CC                 db    ? ;
.bss:000000000021B1CD                 db    ? ;
.bss:000000000021B1CE                 db    ? ;
.bss:000000000021B1CF                 db    ? ;
.bss:000000000021B1D0                 db    ? ;
.bss:000000000021B1D1                 db    ? ;
.bss:000000000021B1D2                 db    ? ;
.bss:000000000021B1D3                 db    ? ;
.bss:000000000021B1D4                 db    ? ;
.bss:000000000021B1D5                 db    ? ;
.bss:000000000021B1D6                 db    ? ;
.bss:000000000021B1D7                 db    ? ;
.bss:000000000021B1D8                 db    ? ;
.bss:000000000021B1D9                 db    ? ;
.bss:000000000021B1DA                 db    ? ;
.bss:000000000021B1DB                 db    ? ;
.bss:000000000021B1DC                 db    ? ;
.bss:000000000021B1DD                 db    ? ;
.bss:000000000021B1DE                 db    ? ;
.bss:000000000021B1DF                 db    ? ;
.bss:000000000021B1E0                 db    ? ;
.bss:000000000021B1E1                 db    ? ;
.bss:000000000021B1E2                 db    ? ;
.bss:000000000021B1E3                 db    ? ;
.bss:000000000021B1E4                 db    ? ;
.bss:000000000021B1E5                 db    ? ;
.bss:000000000021B1E6                 db    ? ;
.bss:000000000021B1E7                 db    ? ;
.bss:000000000021B1E8                 db    ? ;
.bss:000000000021B1E9                 db    ? ;
.bss:000000000021B1EA                 db    ? ;
.bss:000000000021B1EB                 db    ? ;
.bss:000000000021B1EC                 db    ? ;
.bss:000000000021B1ED                 db    ? ;
.bss:000000000021B1EE                 db    ? ;
.bss:000000000021B1EF                 db    ? ;
.bss:000000000021B1F0                 db    ? ;
.bss:000000000021B1F1                 db    ? ;
.bss:000000000021B1F2                 db    ? ;
.bss:000000000021B1F3                 db    ? ;
.bss:000000000021B1F4                 db    ? ;
.bss:000000000021B1F5                 db    ? ;
.bss:000000000021B1F6                 db    ? ;
.bss:000000000021B1F7                 db    ? ;
.bss:000000000021B1F8                 db    ? ;
.bss:000000000021B1F9                 db    ? ;
.bss:000000000021B1FA                 db    ? ;
.bss:000000000021B1FB                 db    ? ;
.bss:000000000021B1FC                 db    ? ;
.bss:000000000021B1FD                 db    ? ;
.bss:000000000021B1FE                 db    ? ;
.bss:000000000021B1FF                 db    ? ;
.bss:000000000021B200                 db    ? ;
.bss:000000000021B201                 db    ? ;
.bss:000000000021B202                 db    ? ;
.bss:000000000021B203                 db    ? ;
.bss:000000000021B204                 db    ? ;
.bss:000000000021B205                 db    ? ;
.bss:000000000021B206                 db    ? ;
.bss:000000000021B207                 db    ? ;
.bss:000000000021B208                 db    ? ;
.bss:000000000021B209                 db    ? ;
.bss:000000000021B20A                 db    ? ;
.bss:000000000021B20B                 db    ? ;
.bss:000000000021B20C                 db    ? ;
.bss:000000000021B20D                 db    ? ;
.bss:000000000021B20E                 db    ? ;
.bss:000000000021B20F                 db    ? ;
.bss:000000000021B210                 db    ? ;
.bss:000000000021B211                 db    ? ;
.bss:000000000021B212                 db    ? ;
.bss:000000000021B213                 db    ? ;
.bss:000000000021B214                 db    ? ;
.bss:000000000021B215                 db    ? ;
.bss:000000000021B216                 db    ? ;
.bss:000000000021B217                 db    ? ;
.bss:000000000021B218                 db    ? ;
.bss:000000000021B219                 db    ? ;
.bss:000000000021B21A                 db    ? ;
.bss:000000000021B21B                 db    ? ;
.bss:000000000021B21C                 db    ? ;
.bss:000000000021B21D                 db    ? ;
.bss:000000000021B21E                 db    ? ;
.bss:000000000021B21F                 db    ? ;
.bss:000000000021B220 compiled_separator dq ?                 ; DATA XREF: main+163↑w
.bss:000000000021B220                                         ; main+191↑o ...
.bss:000000000021B228 qword_21B228    dq ?                    ; DATA XREF: main+16E↑w
.bss:000000000021B230                 align 20h
.bss:000000000021B240 qword_21B240    dq ?                    ; DATA XREF: main+188↑w
.bss:000000000021B248 qword_21B248    dq ?                    ; DATA XREF: main+179↑w
.bss:000000000021B250                 align 20h
.bss:000000000021B260 G_buffer_size   dq ?                    ; DATA XREF: main+210↑w
.bss:000000000021B260                                         ; tac_seekable+220↑r ...
.bss:000000000021B268 ; size_t read_size
.bss:000000000021B268 read_size       dq ?                    ; DATA XREF: main+1BC↑w
.bss:000000000021B268                                         ; main+1F7↑w ...
.bss:000000000021B270 ; void *G_buffer
.bss:000000000021B270 G_buffer        dq ?                    ; DATA XREF: main+231↑w
.bss:000000000021B270                                         ; main+245↑w ...
.bss:000000000021B278 match_length    dq ?                    ; DATA XREF: main+29A↑w
.bss:000000000021B278                                         ; tac_seekable+35↑r ...
.bss:000000000021B280 sentinel_length dq ?                    ; DATA XREF: main+65↑w
.bss:000000000021B280                                         ; main:loc_1DB8↑w ...
.bss:000000000021B288 separator_ends_record db ?              ; DATA XREF: main+70↑w
.bss:000000000021B288                                         ; main:loc_1DA8↑w ...
.bss:000000000021B289 have_read_stdin db ?                    ; DATA XREF: main+302↑w
.bss:000000000021B289                                         ; main+448↑r
.bss:000000000021B28A                 align 10h
.bss:000000000021B290 ; void *separator
.bss:000000000021B290 separator       dq ?                    ; DATA XREF: main+77↑w
.bss:000000000021B290                                         ; main+BA↑w ...
.bss:000000000021B298 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000021B298                                         ; close_stdout+1B↑r
.bss:000000000021B299                 align 20h
.bss:000000000021B2A0 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000021B2A0                                         ; close_stdout+56↑r
.bss:000000000021B2A8                 public program_name
.bss:000000000021B2A8 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000021B2A8                                         ; set_program_name:loc_31CD↑w
.bss:000000000021B2B0                 align 20h
.bss:000000000021B2C0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000021B2C0                                         ; quotearg_free+46↑o ...
.bss:000000000021B2C1                 db    ? ;
.bss:000000000021B2C2                 db    ? ;
.bss:000000000021B2C3                 db    ? ;
.bss:000000000021B2C4                 db    ? ;
.bss:000000000021B2C5                 db    ? ;
.bss:000000000021B2C6                 db    ? ;
.bss:000000000021B2C7                 db    ? ;
.bss:000000000021B2C8                 db    ? ;
.bss:000000000021B2C9                 db    ? ;
.bss:000000000021B2CA                 db    ? ;
.bss:000000000021B2CB                 db    ? ;
.bss:000000000021B2CC                 db    ? ;
.bss:000000000021B2CD                 db    ? ;
.bss:000000000021B2CE                 db    ? ;
.bss:000000000021B2CF                 db    ? ;
.bss:000000000021B2D0                 db    ? ;
.bss:000000000021B2D1                 db    ? ;
.bss:000000000021B2D2                 db    ? ;
.bss:000000000021B2D3                 db    ? ;
.bss:000000000021B2D4                 db    ? ;
.bss:000000000021B2D5                 db    ? ;
.bss:000000000021B2D6                 db    ? ;
.bss:000000000021B2D7                 db    ? ;
.bss:000000000021B2D8                 db    ? ;
.bss:000000000021B2D9                 db    ? ;
.bss:000000000021B2DA                 db    ? ;
.bss:000000000021B2DB                 db    ? ;
.bss:000000000021B2DC                 db    ? ;
.bss:000000000021B2DD                 db    ? ;
.bss:000000000021B2DE                 db    ? ;
.bss:000000000021B2DF                 db    ? ;
.bss:000000000021B2E0                 db    ? ;
.bss:000000000021B2E1                 db    ? ;
.bss:000000000021B2E2                 db    ? ;
.bss:000000000021B2E3                 db    ? ;
.bss:000000000021B2E4                 db    ? ;
.bss:000000000021B2E5                 db    ? ;
.bss:000000000021B2E6                 db    ? ;
.bss:000000000021B2E7                 db    ? ;
.bss:000000000021B2E8                 db    ? ;
.bss:000000000021B2E9                 db    ? ;
.bss:000000000021B2EA                 db    ? ;
.bss:000000000021B2EB                 db    ? ;
.bss:000000000021B2EC                 db    ? ;
.bss:000000000021B2ED                 db    ? ;
.bss:000000000021B2EE                 db    ? ;
.bss:000000000021B2EF                 db    ? ;
.bss:000000000021B2F0                 db    ? ;
.bss:000000000021B2F1                 db    ? ;
.bss:000000000021B2F2                 db    ? ;
.bss:000000000021B2F3                 db    ? ;
.bss:000000000021B2F4                 db    ? ;
.bss:000000000021B2F5                 db    ? ;
.bss:000000000021B2F6                 db    ? ;
.bss:000000000021B2F7                 db    ? ;
.bss:000000000021B2F8                 db    ? ;
.bss:000000000021B2F9                 db    ? ;
.bss:000000000021B2FA                 db    ? ;
.bss:000000000021B2FB                 db    ? ;
.bss:000000000021B2FC                 db    ? ;
.bss:000000000021B2FD                 db    ? ;
.bss:000000000021B2FE                 db    ? ;
.bss:000000000021B2FF                 db    ? ;
.bss:000000000021B300                 db    ? ;
.bss:000000000021B301                 db    ? ;
.bss:000000000021B302                 db    ? ;
.bss:000000000021B303                 db    ? ;
.bss:000000000021B304                 db    ? ;
.bss:000000000021B305                 db    ? ;
.bss:000000000021B306                 db    ? ;
.bss:000000000021B307                 db    ? ;
.bss:000000000021B308                 db    ? ;
.bss:000000000021B309                 db    ? ;
.bss:000000000021B30A                 db    ? ;
.bss:000000000021B30B                 db    ? ;
.bss:000000000021B30C                 db    ? ;
.bss:000000000021B30D                 db    ? ;
.bss:000000000021B30E                 db    ? ;
.bss:000000000021B30F                 db    ? ;
.bss:000000000021B310                 db    ? ;
.bss:000000000021B311                 db    ? ;
.bss:000000000021B312                 db    ? ;
.bss:000000000021B313                 db    ? ;
.bss:000000000021B314                 db    ? ;
.bss:000000000021B315                 db    ? ;
.bss:000000000021B316                 db    ? ;
.bss:000000000021B317                 db    ? ;
.bss:000000000021B318                 db    ? ;
.bss:000000000021B319                 db    ? ;
.bss:000000000021B31A                 db    ? ;
.bss:000000000021B31B                 db    ? ;
.bss:000000000021B31C                 db    ? ;
.bss:000000000021B31D                 db    ? ;
.bss:000000000021B31E                 db    ? ;
.bss:000000000021B31F                 db    ? ;
.bss:000000000021B320                 db    ? ;
.bss:000000000021B321                 db    ? ;
.bss:000000000021B322                 db    ? ;
.bss:000000000021B323                 db    ? ;
.bss:000000000021B324                 db    ? ;
.bss:000000000021B325                 db    ? ;
.bss:000000000021B326                 db    ? ;
.bss:000000000021B327                 db    ? ;
.bss:000000000021B328                 db    ? ;
.bss:000000000021B329                 db    ? ;
.bss:000000000021B32A                 db    ? ;
.bss:000000000021B32B                 db    ? ;
.bss:000000000021B32C                 db    ? ;
.bss:000000000021B32D                 db    ? ;
.bss:000000000021B32E                 db    ? ;
.bss:000000000021B32F                 db    ? ;
.bss:000000000021B330                 db    ? ;
.bss:000000000021B331                 db    ? ;
.bss:000000000021B332                 db    ? ;
.bss:000000000021B333                 db    ? ;
.bss:000000000021B334                 db    ? ;
.bss:000000000021B335                 db    ? ;
.bss:000000000021B336                 db    ? ;
.bss:000000000021B337                 db    ? ;
.bss:000000000021B338                 db    ? ;
.bss:000000000021B339                 db    ? ;
.bss:000000000021B33A                 db    ? ;
.bss:000000000021B33B                 db    ? ;
.bss:000000000021B33C                 db    ? ;
.bss:000000000021B33D                 db    ? ;
.bss:000000000021B33E                 db    ? ;
.bss:000000000021B33F                 db    ? ;
.bss:000000000021B340                 db    ? ;
.bss:000000000021B341                 db    ? ;
.bss:000000000021B342                 db    ? ;
.bss:000000000021B343                 db    ? ;
.bss:000000000021B344                 db    ? ;
.bss:000000000021B345                 db    ? ;
.bss:000000000021B346                 db    ? ;
.bss:000000000021B347                 db    ? ;
.bss:000000000021B348                 db    ? ;
.bss:000000000021B349                 db    ? ;
.bss:000000000021B34A                 db    ? ;
.bss:000000000021B34B                 db    ? ;
.bss:000000000021B34C                 db    ? ;
.bss:000000000021B34D                 db    ? ;
.bss:000000000021B34E                 db    ? ;
.bss:000000000021B34F                 db    ? ;
.bss:000000000021B350                 db    ? ;
.bss:000000000021B351                 db    ? ;
.bss:000000000021B352                 db    ? ;
.bss:000000000021B353                 db    ? ;
.bss:000000000021B354                 db    ? ;
.bss:000000000021B355                 db    ? ;
.bss:000000000021B356                 db    ? ;
.bss:000000000021B357                 db    ? ;
.bss:000000000021B358                 db    ? ;
.bss:000000000021B359                 db    ? ;
.bss:000000000021B35A                 db    ? ;
.bss:000000000021B35B                 db    ? ;
.bss:000000000021B35C                 db    ? ;
.bss:000000000021B35D                 db    ? ;
.bss:000000000021B35E                 db    ? ;
.bss:000000000021B35F                 db    ? ;
.bss:000000000021B360                 db    ? ;
.bss:000000000021B361                 db    ? ;
.bss:000000000021B362                 db    ? ;
.bss:000000000021B363                 db    ? ;
.bss:000000000021B364                 db    ? ;
.bss:000000000021B365                 db    ? ;
.bss:000000000021B366                 db    ? ;
.bss:000000000021B367                 db    ? ;
.bss:000000000021B368                 db    ? ;
.bss:000000000021B369                 db    ? ;
.bss:000000000021B36A                 db    ? ;
.bss:000000000021B36B                 db    ? ;
.bss:000000000021B36C                 db    ? ;
.bss:000000000021B36D                 db    ? ;
.bss:000000000021B36E                 db    ? ;
.bss:000000000021B36F                 db    ? ;
.bss:000000000021B370                 db    ? ;
.bss:000000000021B371                 db    ? ;
.bss:000000000021B372                 db    ? ;
.bss:000000000021B373                 db    ? ;
.bss:000000000021B374                 db    ? ;
.bss:000000000021B375                 db    ? ;
.bss:000000000021B376                 db    ? ;
.bss:000000000021B377                 db    ? ;
.bss:000000000021B378                 db    ? ;
.bss:000000000021B379                 db    ? ;
.bss:000000000021B37A                 db    ? ;
.bss:000000000021B37B                 db    ? ;
.bss:000000000021B37C                 db    ? ;
.bss:000000000021B37D                 db    ? ;
.bss:000000000021B37E                 db    ? ;
.bss:000000000021B37F                 db    ? ;
.bss:000000000021B380                 db    ? ;
.bss:000000000021B381                 db    ? ;
.bss:000000000021B382                 db    ? ;
.bss:000000000021B383                 db    ? ;
.bss:000000000021B384                 db    ? ;
.bss:000000000021B385                 db    ? ;
.bss:000000000021B386                 db    ? ;
.bss:000000000021B387                 db    ? ;
.bss:000000000021B388                 db    ? ;
.bss:000000000021B389                 db    ? ;
.bss:000000000021B38A                 db    ? ;
.bss:000000000021B38B                 db    ? ;
.bss:000000000021B38C                 db    ? ;
.bss:000000000021B38D                 db    ? ;
.bss:000000000021B38E                 db    ? ;
.bss:000000000021B38F                 db    ? ;
.bss:000000000021B390                 db    ? ;
.bss:000000000021B391                 db    ? ;
.bss:000000000021B392                 db    ? ;
.bss:000000000021B393                 db    ? ;
.bss:000000000021B394                 db    ? ;
.bss:000000000021B395                 db    ? ;
.bss:000000000021B396                 db    ? ;
.bss:000000000021B397                 db    ? ;
.bss:000000000021B398                 db    ? ;
.bss:000000000021B399                 db    ? ;
.bss:000000000021B39A                 db    ? ;
.bss:000000000021B39B                 db    ? ;
.bss:000000000021B39C                 db    ? ;
.bss:000000000021B39D                 db    ? ;
.bss:000000000021B39E                 db    ? ;
.bss:000000000021B39F                 db    ? ;
.bss:000000000021B3A0                 db    ? ;
.bss:000000000021B3A1                 db    ? ;
.bss:000000000021B3A2                 db    ? ;
.bss:000000000021B3A3                 db    ? ;
.bss:000000000021B3A4                 db    ? ;
.bss:000000000021B3A5                 db    ? ;
.bss:000000000021B3A6                 db    ? ;
.bss:000000000021B3A7                 db    ? ;
.bss:000000000021B3A8                 db    ? ;
.bss:000000000021B3A9                 db    ? ;
.bss:000000000021B3AA                 db    ? ;
.bss:000000000021B3AB                 db    ? ;
.bss:000000000021B3AC                 db    ? ;
.bss:000000000021B3AD                 db    ? ;
.bss:000000000021B3AE                 db    ? ;
.bss:000000000021B3AF                 db    ? ;
.bss:000000000021B3B0                 db    ? ;
.bss:000000000021B3B1                 db    ? ;
.bss:000000000021B3B2                 db    ? ;
.bss:000000000021B3B3                 db    ? ;
.bss:000000000021B3B4                 db    ? ;
.bss:000000000021B3B5                 db    ? ;
.bss:000000000021B3B6                 db    ? ;
.bss:000000000021B3B7                 db    ? ;
.bss:000000000021B3B8                 db    ? ;
.bss:000000000021B3B9                 db    ? ;
.bss:000000000021B3BA                 db    ? ;
.bss:000000000021B3BB                 db    ? ;
.bss:000000000021B3BC                 db    ? ;
.bss:000000000021B3BD                 db    ? ;
.bss:000000000021B3BE                 db    ? ;
.bss:000000000021B3BF                 db    ? ;
.bss:000000000021B3C0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000021B3C0                                         ; get_quoting_style↑o ...
.bss:000000000021B3D0 xmmword_21B3D0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000021B3D0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000021B3E0 xmmword_21B3E0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000021B3E0                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000021B3F0 qword_21B3F0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000021B3F0                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000021B3F8 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000021B3F8                                         ; rpl_fcntl:loc_13E6F↑w ...
.bss:000000000021B3FC                 align 20h
.bss:000000000021B400                 public rpl_re_syntax_options
.bss:000000000021B400 rpl_re_syntax_options dq ?              ; DATA XREF: rpl_re_compile_pattern+4↑r
.bss:000000000021B400                                         ; rpl_re_set_syntax↑r ...
.bss:000000000021B400 _bss            ends
.bss:000000000021B400
.prgend:000000000021B408 ; ===========================================================================
.prgend:000000000021B408
.prgend:000000000021B408 ; Segment type: Zero-length
.prgend:000000000021B408 _prgend         segment byte public '' use64
.prgend:000000000021B408 _end            label byte
.prgend:000000000021B408 _prgend         ends
.prgend:000000000021B408
extern:000000000021B410 ; ===========================================================================
extern:000000000021B410
extern:000000000021B410 ; Segment type: Externs
extern:000000000021B410 ; extern
extern:000000000021B410 ; const __int32_t **_ctype_toupper_loc(void)
extern:000000000021B410                 extrn __ctype_toupper_loc:near
extern:000000000021B410                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:000000000021B410                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:000000000021B418 ; char *getenv(const char *name)
extern:000000000021B418                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000021B418                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000021B420 ; void free(void *ptr)
extern:000000000021B420                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000021B420                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000021B428 ; void __noreturn abort(void)
extern:000000000021B428                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000021B428                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000021B430 ; int *_errno_location(void)
extern:000000000021B430                 extrn __errno_location:near
extern:000000000021B430                                         ; CODE XREF: ___errno_location↑j
extern:000000000021B430                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000021B438 ; int unlink(const char *name)
extern:000000000021B438                 extrn unlink:near       ; CODE XREF: _unlink↑j
extern:000000000021B438                                         ; DATA XREF: .got:unlink_ptr↑o
extern:000000000021B440 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000021B440                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000021B440                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000021B448 ; void __noreturn exit(int status)
extern:000000000021B448                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000021B448                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000021B450 ; size_t _fpending(FILE *fp)
extern:000000000021B450                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000021B450                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000021B458 ; int isatty(int fd)
extern:000000000021B458                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:000000000021B458                                         ; DATA XREF: .got:isatty_ptr↑o
extern:000000000021B460 ; int fcntl(int fd, int cmd, ...)
extern:000000000021B460                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000021B460                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000021B468 ; void clearerr_unlocked(FILE *stream)
extern:000000000021B468                 extrn clearerr_unlocked:near
extern:000000000021B468                                         ; CODE XREF: _clearerr_unlocked↑j
extern:000000000021B468                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:000000000021B470 ; char *textdomain(const char *domainname)
extern:000000000021B470                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000021B470                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000021B478 ; int iswctype(wint_t wc, wctype_t desc)
extern:000000000021B478                 extrn iswctype:near     ; CODE XREF: _iswctype↑j
extern:000000000021B478                                         ; DATA XREF: .got:iswctype_ptr↑o
extern:000000000021B480 ; int fclose(FILE *stream)
extern:000000000021B480                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000021B480                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000021B488 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000021B488                 extrn bindtextdomain:near
extern:000000000021B488                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000021B488                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000021B490 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000021B490                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000021B490                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000021B498 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000021B498                 extrn __ctype_get_mb_cur_max:near
extern:000000000021B498                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000021B498                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000021B4A0 ; size_t strlen(const char *s)
extern:000000000021B4A0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000021B4A0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000021B4A8                 extrn __stack_chk_fail:near
extern:000000000021B4A8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000021B4A8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000021B4B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000021B4B0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000021B4B0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000021B4B8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000021B4B8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000021B4B8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000021B4C0 ; char *strrchr(const char *s, int c)
extern:000000000021B4C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000021B4C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000021B4C8 ; int ftruncate(int fd, __off_t length)
extern:000000000021B4C8                 extrn ftruncate:near    ; CODE XREF: _ftruncate↑j
extern:000000000021B4C8                                         ; DATA XREF: .got:ftruncate_ptr↑o
extern:000000000021B4D0 ; int mkostemp(char *template, int flags)
extern:000000000021B4D0                 extrn mkostemp:near     ; CODE XREF: _mkostemp↑j
extern:000000000021B4D0                                         ; DATA XREF: .got:mkostemp_ptr↑o
extern:000000000021B4D8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000021B4D8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000021B4D8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000021B4E0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000021B4E0                 extrn __assert_fail:near
extern:000000000021B4E0                                         ; CODE XREF: ___assert_fail↑j
extern:000000000021B4E0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000021B4E8 ; void *memset(void *s, int c, size_t n)
extern:000000000021B4E8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000021B4E8                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000021B4F0 ; int close(int fd)
extern:000000000021B4F0                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000021B4F0                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000021B4F8 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:000000000021B4F8                 extrn read:near         ; CODE XREF: _read↑j
extern:000000000021B4F8                                         ; DATA XREF: .got:read_ptr↑o
extern:000000000021B500 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000021B500                 extrn __libc_start_main:near
extern:000000000021B500                                         ; CODE XREF: start+24↑p
extern:000000000021B500                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000021B508 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000021B508                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000021B508                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000021B510 ; wctype_t wctype(const char *property)
extern:000000000021B510                 extrn wctype:near       ; CODE XREF: _wctype↑j
extern:000000000021B510                                         ; DATA XREF: .got:wctype_ptr↑o
extern:000000000021B518 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000021B518                 extrn fputs_unlocked:near
extern:000000000021B518                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000021B518                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000021B520 ; void *calloc(size_t nmemb, size_t size)
extern:000000000021B520                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000021B520                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000021B528 ; int strcmp(const char *s1, const char *s2)
extern:000000000021B528                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000021B528                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000021B530 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000021B530                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000021B530                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000021B538 ; int fileno(FILE *stream)
extern:000000000021B538                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000021B538                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000021B540 ; int iswalnum(wint_t wc)
extern:000000000021B540                 extrn iswalnum:near     ; CODE XREF: _iswalnum↑j
extern:000000000021B540                                         ; DATA XREF: .got:iswalnum_ptr↑o
extern:000000000021B548 ; void *malloc(size_t size)
extern:000000000021B548                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000021B548                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000021B550 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
extern:000000000021B550                 extrn wcrtomb:near      ; CODE XREF: _wcrtomb↑j
extern:000000000021B550                                         ; DATA XREF: .got:wcrtomb_ptr↑o
extern:000000000021B558 ; int fflush(FILE *stream)
extern:000000000021B558                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000021B558                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000021B560 ; char *nl_langinfo(nl_item item)
extern:000000000021B560                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000021B560                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000021B568 ; int mkstemp(char *template)
extern:000000000021B568                 extrn mkstemp:near      ; CODE XREF: _mkstemp↑j
extern:000000000021B568                                         ; DATA XREF: .got:mkstemp_ptr↑o
extern:000000000021B570 ; int _freading(FILE *fp)
extern:000000000021B570                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000021B570                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000021B578 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000021B578                 extrn fwrite_unlocked:near
extern:000000000021B578                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000021B578                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000021B580 ; void *realloc(void *ptr, size_t size)
extern:000000000021B580                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000021B580                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000021B588 ; FILE *fdopen(int fd, const char *modes)
extern:000000000021B588                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000021B588                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000021B590 ; char *setlocale(int category, const char *locale)
extern:000000000021B590                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000021B590                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000021B598                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000021B598                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000021B5A0 ; wint_t btowc(int c)
extern:000000000021B5A0                 extrn btowc:near        ; CODE XREF: _btowc↑j
extern:000000000021B5A0                                         ; DATA XREF: .got:btowc_ptr↑o
extern:000000000021B5A8 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000021B5A8                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000021B5A8                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000021B5B0 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000021B5B0                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000021B5B0                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000021B5B8 ; void error(int status, int errnum, const char *format, ...)
extern:000000000021B5B8                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000021B5B8                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000021B5C0 ; int open(const char *file, int oflag, ...)
extern:000000000021B5C0                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000021B5C0                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000021B5C8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000021B5C8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000021B5C8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000021B5D0 ; wint_t towlower(wint_t wc)
extern:000000000021B5D0                 extrn towlower:near     ; CODE XREF: _towlower↑j
extern:000000000021B5D0                                         ; DATA XREF: .got:towlower_ptr↑o
extern:000000000021B5D8 ; wint_t towupper(wint_t wc)
extern:000000000021B5D8                 extrn towupper:near     ; CODE XREF: _towupper↑j
extern:000000000021B5D8                                         ; DATA XREF: .got:towupper_ptr↑o
extern:000000000021B5E0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000021B5E0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000021B5E0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000021B5E8 ; void __noreturn exit(int status)
extern:000000000021B5E8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000021B5E8                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000021B5F0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000021B5F0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000021B5F0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000021B5F8                 extrn __fprintf_chk:near
extern:000000000021B5F8                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000021B5F8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000021B600 ; int fflush_unlocked(FILE *stream)
extern:000000000021B600                 extrn fflush_unlocked:near
extern:000000000021B600                                         ; CODE XREF: _fflush_unlocked↑j
extern:000000000021B600                                         ; DATA XREF: .got:fflush_unlocked_ptr↑o
extern:000000000021B608 ; int mbsinit(const mbstate_t *ps)
extern:000000000021B608                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000021B608                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000021B610 ; int iswprint(wint_t wc)
extern:000000000021B610                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000021B610                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000021B618 ; int __fastcall __cxa_finalize(void *)
extern:000000000021B618                 extrn __imp___cxa_finalize:near ; weak
extern:000000000021B618                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000021B618                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000021B620 ; const __int32_t **_ctype_tolower_loc(void)
extern:000000000021B620                 extrn __ctype_tolower_loc:near
extern:000000000021B620                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:000000000021B620                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:000000000021B628 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000021B628                 extrn __ctype_b_loc:near
extern:000000000021B628                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000021B628                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000021B630                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000021B630                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000021B638                 extrn __gmon_start__:near ; weak
extern:000000000021B638                                         ; CODE XREF: _init_proc+10↑p
extern:000000000021B638                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000021B640                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000021B640                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000021B640
extern:000000000021B640
extern:000000000021B640                 end start
