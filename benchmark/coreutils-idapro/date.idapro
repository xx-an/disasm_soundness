LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : FC37E05D16BC915625CF1F6C246C98C941ABABFAAFECC2FFF13D26FD8F15250A
LOAD:0000000000000000 ; Input MD5    : 67A4E02EB7C3AFA29918BADC90E69C2C
LOAD:0000000000000000 ; Input CRC32  : A3D52FF6
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/date
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'parse-datetime.c'
LOAD:0000000000000000 ; Source File : 'date.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fprintftime.c'
LOAD:0000000000000000 ; Source File : 'gettime.c'
LOAD:0000000000000000 ; Source File : 'imaxtostr.c'
LOAD:0000000000000000 ; Source File : 'posixtm.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'settime.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'time_rz.c'
LOAD:0000000000000000 ; Source File : 'vfprintf.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'nstrftime.c'
LOAD:0000000000000000 ; Source File : 'fseterr.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 65720h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 16A28h               ; Size in file image
LOAD:00000000000000D8                 dq 16A28h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 16FF0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 216FF0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 10B0h                ; Size in file image
LOAD:0000000000000110                 dq 1268h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 17B98h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 217B98h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 150ECh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 150ECh               ; Physical address
LOAD:00000000000001B0                 dq 3CCh                 ; Size in file image
LOAD:00000000000001B8                 dq 3CCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 16FF0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 216FF0h              ; Physical address
LOAD:0000000000000220                 dq 1010h                ; Size in file image
LOAD:0000000000000228                 dq 1010h                ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0E1h, 2Bh, 0AFh, 81h, 0B9h, 69h, 0A5h, 0A9h, 4Ch, 92h ; Desc
LOAD:0000000000000284                 db 3, 0E3h, 0DDh, 0D3h, 26h, 24h, 0EAh, 55h, 37h, 78h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 4Ah
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 4Ah, 4Bh, 51h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_AA8, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aGetenv - offset byte_AA8, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aSnprintfChk - offset byte_AA8, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aFree - offset byte_AA8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aLocaltime - offset byte_AA8, 12h, 0, 0, \ ; "localtime"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aAbort - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aErrnoLocation - offset byte_AA8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrncmp - offset byte_AA8, 12h, 0, 0, \ ; "strncmp"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aItmDeregistert - offset byte_AA8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aLocaltimeR - offset byte_AA8, 12h, 0, 0, \ ; "localtime_r"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aExit - offset byte_AA8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003E8                            0>
LOAD:0000000000000400                 Elf64_Sym <offset aFpending - offset byte_AA8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aClockGettime - offset byte_AA8, 12h, 0, 0, \ ; "clock_gettime"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aUnsetenv+2 - offset byte_AA8, 12h, 0, 0, \ ; "setenv"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_AA8, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aFclose - offset byte_AA8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aBindtextdomain - offset byte_AA8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aDcgettext - offset byte_AA8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_AA8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrlen - offset byte_AA8, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStackChkFail - offset byte_AA8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aGetoptLong - offset byte_AA8, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMbrtowc - offset byte_AA8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrchr - offset byte_AA8, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aSnprintf - offset byte_AA8, 12h, 0, 0, \ ; "snprintf"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aOverflow - offset byte_AA8, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aStrrchr - offset byte_AA8, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aGmtimeR - offset byte_AA8, 12h, 0, 0, \ ; "gmtime_r"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aLseek - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000598                            0>
LOAD:00000000000005B0                 Elf64_Sym <offset aFputs - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "fputs"
LOAD:00000000000005B0                            0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMemset - offset byte_AA8, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFputc - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "fputc"
LOAD:00000000000005E0                            0>
LOAD:00000000000005F8                 Elf64_Sym <offset aLibcStartMain - offset byte_AA8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMemcmp - offset byte_AA8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFputsUnlocked - offset byte_AA8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aCalloc - offset byte_AA8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aPutenv - offset byte_AA8, 12h, 0, 0, \ ; "putenv"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aGetdelim - offset byte_AA8, 12h, 0, 0, \ ; "__getdelim"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aStrcmp - offset byte_AA8, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aGmonStart - offset byte_AA8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMemcpy - offset byte_AA8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aTzset - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "tzset"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aStrftime+4 - offset byte_AA8, 12h, 0, 0, \ ; "time"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFileno - offset byte_AA8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aStpcpyChk - offset byte_AA8, 12h, 0, 0, \ ; "__stpcpy_chk"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aSettimeofday - offset byte_AA8, 12h, 0, 0, \ ; "settimeofday"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aXstat - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000748                            0>
LOAD:0000000000000760                 Elf64_Sym <offset aMalloc - offset byte_AA8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFflush - offset byte_AA8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aNlLanginfo - offset byte_AA8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aClockSettime - offset byte_AA8, 12h, 0, 0, \ ; "clock_settime"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aMktime - offset byte_AA8, 12h, 0, 0, \ ; "mktime"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFreading - offset byte_AA8, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aRealloc - offset byte_AA8, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aSetlocale - offset byte_AA8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aPrintfChk - offset byte_AA8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aTimegm - offset byte_AA8, 12h, 0, 0, \ ; "timegm"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aStrftime - offset byte_AA8, 12h, 0, 0, \ ; "strftime"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aError - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000868                            0>
LOAD:0000000000000880                 Elf64_Sym <offset aFseeko - offset byte_AA8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aFopen - offset byte_AA8, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000898                            0>
LOAD:00000000000008B0                 Elf64_Sym <offset aUnsetenv - offset byte_AA8, 12h, 0, 0, \ ; "unsetenv"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aCxaAtexit - offset byte_AA8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aExit+1 - offset byte_AA8, 12h, 0, 0, \ ; "exit"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFwrite - offset byte_AA8, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aFprintfChk - offset byte_AA8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aItmRegistertmc - offset byte_AA8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aMbsinit - offset byte_AA8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aIswprint - offset byte_AA8, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aCxaFinalize - offset byte_AA8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_AA8, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aCtypeBLoc - offset byte_AA8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aSprintfChk - offset byte_AA8, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aStdout - offset byte_AA8, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000009D0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000009E8                 Elf64_Sym <offset aProgname - offset byte_AA8, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000009E8                            offset __bss_start, 8>
LOAD:0000000000000A00                 Elf64_Sym <offset aStdin - offset byte_AA8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000A00                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000A18                 Elf64_Sym <offset aProgramInvocat - offset byte_AA8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000A18                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aPrognameFull - offset byte_AA8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A30                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A48                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_AA8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A48                            offset __bss_start, 8>
LOAD:0000000000000A60                 Elf64_Sym <offset aStderr - offset byte_AA8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A60                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A78                 Elf64_Sym <offset aOptind - offset byte_AA8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A78                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000A90                 Elf64_Sym <offset aOptarg - offset byte_AA8, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000A90                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000AA8 ; ELF String Table
LOAD:0000000000000AA8 byte_AA8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000AA8                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000AA9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000EF8↓o
LOAD:0000000000000AB3 aStpcpyChk      db '__stpcpy_chk',0     ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000AC0 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000AC7 aGmtimeR        db 'gmtime_r',0         ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000AD0 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000ADD aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AE7 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000AEF aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000AF5 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000AFD aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000B04 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B0C aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000B16 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B1C aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000B2D aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000B36 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000B3E aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B44 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000B4A aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000B4A                                         ; LOAD:00000000000008E0↑o
LOAD:0000000000000B50 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000B50                                         ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000B68 aStrftime       db 'strftime',0         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B68                                         ; LOAD:00000000000006E8↑o
LOAD:0000000000000B71 aLocaltimeR     db 'localtime_r',0      ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000B7D aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000B7D                                         ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B94 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000B9B aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000BA2 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000BA9 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000BBA aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000BC1 aUnsetenv       db 'unsetenv',0         ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000BC1                                         ; LOAD:0000000000000430↑o
LOAD:0000000000000BCA aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000BD8 aPutenv         db 'putenv',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000BDF aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000BE6 aFputc          db 'fputc',0            ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BEC aFputs          db 'fputs',0            ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000BF2 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000BF8 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000BFF aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000C06 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000C0D aTimegm         db 'timegm',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000C14 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C1C aTzset          db 'tzset',0            ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000C22 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000C2E aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000C3C aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000C43 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000C4A aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000C55 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000C5C aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000C6B aClockSettime   db 'clock_settime',0    ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000C79 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000C85 aSettimeofday   db 'settimeofday',0     ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000C92 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000C99 aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000CA4 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000CAB aClockGettime   db 'clock_gettime',0    ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000CB9 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000CC4 aLocaltime      db 'localtime',0        ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000CCE aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000CD5 aMktime         db 'mktime',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000CDC aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000CDC                                         ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000CFA aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000CFA                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000D0E aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000D0E                                         ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000D22 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000D31 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000D3F aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000D47 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000D47                                         ; LOAD:0000000000000448↑o
LOAD:0000000000000D56 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000D5D aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000D5D                                         ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000D6F aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000D76 aSnprintf       db 'snprintf',0         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000D7F aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000D8A aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000D99 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000D9E aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000DA9 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000DB9 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000DC6 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000F08↓o
LOAD:0000000000000DD1 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000F18↓o
LOAD:0000000000000DDB aGlibc217       db 'GLIBC_2.17',0       ; DATA XREF: LOAD:0000000000000F28↓o
LOAD:0000000000000DE6 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000F38↓o
LOAD:0000000000000DF2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000F48↓o
LOAD:0000000000000DFE aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000F58↓o
LOAD:0000000000000E08 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000E08                                         ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000E24 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000E33 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000E33                                         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000E4D                 align 2
LOAD:0000000000000E4E ; ELF GNU Symbol Version Table
LOAD:0000000000000E4E                 dw 0
LOAD:0000000000000E50                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000E52                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000E54                 dw 4                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E56                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000E58                 dw 3                    ; localtime@@GLIBC_2.2.5
LOAD:0000000000000E5A                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000E5C                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000E5E                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000E60                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000E62                 dw 3                    ; localtime_r@@GLIBC_2.2.5
LOAD:0000000000000E64                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000E66                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000E68                 dw 5                    ; clock_gettime@@GLIBC_2.17
LOAD:0000000000000E6A                 dw 3                    ; setenv@@GLIBC_2.2.5
LOAD:0000000000000E6C                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000E6E                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000E70                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000E72                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000E74                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000E76                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000E78                 dw 6                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000E7A                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000E7C                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000E7E                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000E80                 dw 3                    ; snprintf@@GLIBC_2.2.5
LOAD:0000000000000E82                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000E84                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000E86                 dw 3                    ; gmtime_r@@GLIBC_2.2.5
LOAD:0000000000000E88                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000E8A                 dw 3                    ; fputs@@GLIBC_2.2.5
LOAD:0000000000000E8C                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000E8E                 dw 3                    ; fputc@@GLIBC_2.2.5
LOAD:0000000000000E90                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000E92                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000E94                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E96                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000E98                 dw 3                    ; putenv@@GLIBC_2.2.5
LOAD:0000000000000E9A                 dw 3                    ; __getdelim@@GLIBC_2.2.5
LOAD:0000000000000E9C                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000E9E                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000EA0                 dw 7                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000EA2                 dw 3                    ; tzset@@GLIBC_2.2.5
LOAD:0000000000000EA4                 dw 3                    ; time@@GLIBC_2.2.5
LOAD:0000000000000EA6                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000EA8                 dw 4                    ; __stpcpy_chk@@GLIBC_2.3.4
LOAD:0000000000000EAA                 dw 3                    ; settimeofday@@GLIBC_2.2.5
LOAD:0000000000000EAC                 dw 3                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000EAE                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000EB0                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000EB2                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000EB4                 dw 5                    ; clock_settime@@GLIBC_2.17
LOAD:0000000000000EB6                 dw 3                    ; mktime@@GLIBC_2.2.5
LOAD:0000000000000EB8                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000EBA                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000EBC                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000EBE                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000EC0                 dw 3                    ; timegm@@GLIBC_2.2.5
LOAD:0000000000000EC2                 dw 3                    ; strftime@@GLIBC_2.2.5
LOAD:0000000000000EC4                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000EC6                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000EC8                 dw 3                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000ECA                 dw 3                    ; unsetenv@@GLIBC_2.2.5
LOAD:0000000000000ECC                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000ECE                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000ED0                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000ED2                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000ED4                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000ED6                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000ED8                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000EDA                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000EDC                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000EDE                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000EE0                 dw 4                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000EE2                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000EE4                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000EE6                 dw 3                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000EE8                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000EEA                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000EEC                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000EEE                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000EF0                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000EF2                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000EF4                 dw 0
LOAD:0000000000000EF6                 dw 0
LOAD:0000000000000EF8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000EF8                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_AA8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000F08                 Elf64_Vernaux <6969194h, 0, 7, offset aGlibc214 - offset byte_AA8, \ ; "GLIBC_2.14"
LOAD:0000000000000F08                                10h>
LOAD:0000000000000F18                 Elf64_Vernaux <0D696914h, 0, 6, offset aGlibc24 - offset byte_AA8, \ ; "GLIBC_2.4"
LOAD:0000000000000F18                                10h>
LOAD:0000000000000F28                 Elf64_Vernaux <6969197h, 0, 5, offset aGlibc217 - offset byte_AA8, \ ; "GLIBC_2.17"
LOAD:0000000000000F28                                10h>
LOAD:0000000000000F38                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_AA8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000F38                                10h>
LOAD:0000000000000F48                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_AA8, \ ; "GLIBC_2.2.5"
LOAD:0000000000000F48                                10h>
LOAD:0000000000000F58                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_AA8, 0> ; "GLIBC_2.3"
LOAD:0000000000000F68 ; ELF RELA Relocation Table
LOAD:0000000000000F68                 Elf64_Rela <216FF0h, 8, 34D0h> ; R_X86_64_RELATIVE +34D0h
LOAD:0000000000000F80                 Elf64_Rela <216FF8h, 8, 3490h> ; R_X86_64_RELATIVE +3490h
LOAD:0000000000000F98                 Elf64_Rela <217000h, 8, 117BBh> ; R_X86_64_RELATIVE +117BBh
LOAD:0000000000000FB0                 Elf64_Rela <217020h, 8, 117C0h> ; R_X86_64_RELATIVE +117C0h
LOAD:0000000000000FC8                 Elf64_Rela <217040h, 8, 117C6h> ; R_X86_64_RELATIVE +117C6h
LOAD:0000000000000FE0                 Elf64_Rela <217060h, 8, 1175Ch> ; R_X86_64_RELATIVE +1175Ch
LOAD:0000000000000FF8                 Elf64_Rela <217080h, 8, 117CBh> ; R_X86_64_RELATIVE +117CBh
LOAD:0000000000001010                 Elf64_Rela <2170A0h, 8, 117D5h> ; R_X86_64_RELATIVE +117D5h
LOAD:0000000000001028                 Elf64_Rela <2170C0h, 8, 117DFh> ; R_X86_64_RELATIVE +117DFh
LOAD:0000000000001040                 Elf64_Rela <2170E0h, 8, 117E7h> ; R_X86_64_RELATIVE +117E7h
LOAD:0000000000001058                 Elf64_Rela <217100h, 8, 11751h> ; R_X86_64_RELATIVE +11751h
LOAD:0000000000001070                 Elf64_Rela <217120h, 8, 117F0h> ; R_X86_64_RELATIVE +117F0h
LOAD:0000000000001088                 Elf64_Rela <217140h, 8, 117F4h> ; R_X86_64_RELATIVE +117F4h
LOAD:00000000000010A0                 Elf64_Rela <217160h, 8, 117F8h> ; R_X86_64_RELATIVE +117F8h
LOAD:00000000000010B8                 Elf64_Rela <217180h, 8, 117FCh> ; R_X86_64_RELATIVE +117FCh
LOAD:00000000000010D0                 Elf64_Rela <2171A0h, 8, 11806h> ; R_X86_64_RELATIVE +11806h
LOAD:00000000000010E8                 Elf64_Rela <2171C0h, 8, 1180Bh> ; R_X86_64_RELATIVE +1180Bh
LOAD:0000000000001100                 Elf64_Rela <217200h, 8, 11813h> ; R_X86_64_RELATIVE +11813h
LOAD:0000000000001118                 Elf64_Rela <217208h, 8, 11819h> ; R_X86_64_RELATIVE +11819h
LOAD:0000000000001130                 Elf64_Rela <217210h, 8, 117BBh> ; R_X86_64_RELATIVE +117BBh
LOAD:0000000000001148                 Elf64_Rela <217218h, 8, 13143h> ; R_X86_64_RELATIVE +13143h
LOAD:0000000000001160                 Elf64_Rela <217220h, 8, 11821h> ; R_X86_64_RELATIVE +11821h
LOAD:0000000000001178                 Elf64_Rela <217240h, 8, 1311Dh> ; R_X86_64_RELATIVE +1311Dh
LOAD:0000000000001190                 Elf64_Rela <217250h, 8, 1340Dh> ; R_X86_64_RELATIVE +1340Dh
LOAD:00000000000011A8                 Elf64_Rela <217260h, 8, 1357Ah> ; R_X86_64_RELATIVE +1357Ah
LOAD:00000000000011C0                 Elf64_Rela <217270h, 8, 13576h> ; R_X86_64_RELATIVE +13576h
LOAD:00000000000011D8                 Elf64_Rela <217280h, 8, 1354Ah> ; R_X86_64_RELATIVE +1354Ah
LOAD:00000000000011F0                 Elf64_Rela <217290h, 8, 1340Fh> ; R_X86_64_RELATIVE +1340Fh
LOAD:0000000000001208                 Elf64_Rela <2172A0h, 8, 13411h> ; R_X86_64_RELATIVE +13411h
LOAD:0000000000001220                 Elf64_Rela <2172B0h, 8, 13589h> ; R_X86_64_RELATIVE +13589h
LOAD:0000000000001238                 Elf64_Rela <2172C0h, 8, 14CCAh> ; R_X86_64_RELATIVE +14CCAh
LOAD:0000000000001250                 Elf64_Rela <2172D0h, 8, 1355Fh> ; R_X86_64_RELATIVE +1355Fh
LOAD:0000000000001268                 Elf64_Rela <2172E0h, 8, 1358Fh> ; R_X86_64_RELATIVE +1358Fh
LOAD:0000000000001280                 Elf64_Rela <2172F0h, 8, 12DFAh> ; R_X86_64_RELATIVE +12DFAh
LOAD:0000000000001298                 Elf64_Rela <217300h, 8, 1356Fh> ; R_X86_64_RELATIVE +1356Fh
LOAD:00000000000012B0                 Elf64_Rela <217310h, 8, 13544h> ; R_X86_64_RELATIVE +13544h
LOAD:00000000000012C8                 Elf64_Rela <217320h, 8, 13413h> ; R_X86_64_RELATIVE +13413h
LOAD:00000000000012E0                 Elf64_Rela <217330h, 8, 13415h> ; R_X86_64_RELATIVE +13415h
LOAD:00000000000012F8                 Elf64_Rela <217340h, 8, 13112h> ; R_X86_64_RELATIVE +13112h
LOAD:0000000000001310                 Elf64_Rela <217350h, 8, 1308Ah> ; R_X86_64_RELATIVE +1308Ah
LOAD:0000000000001328                 Elf64_Rela <217360h, 8, 134A4h> ; R_X86_64_RELATIVE +134A4h
LOAD:0000000000001340                 Elf64_Rela <217370h, 8, 13417h> ; R_X86_64_RELATIVE +13417h
LOAD:0000000000001358                 Elf64_Rela <217380h, 8, 13419h> ; R_X86_64_RELATIVE +13419h
LOAD:0000000000001370                 Elf64_Rela <217390h, 8, 134E6h> ; R_X86_64_RELATIVE +134E6h
LOAD:0000000000001388                 Elf64_Rela <2173A0h, 8, 14CC4h> ; R_X86_64_RELATIVE +14CC4h
LOAD:00000000000013A0                 Elf64_Rela <2173B0h, 8, 11735h> ; R_X86_64_RELATIVE +11735h
LOAD:00000000000013B8                 Elf64_Rela <2173C0h, 8, 1348Dh> ; R_X86_64_RELATIVE +1348Dh
LOAD:00000000000013D0                 Elf64_Rela <2173E0h, 8, 13021h> ; R_X86_64_RELATIVE +13021h
LOAD:00000000000013E8                 Elf64_Rela <2173F0h, 8, 1341Bh> ; R_X86_64_RELATIVE +1341Bh
LOAD:0000000000001400                 Elf64_Rela <217400h, 8, 13420h> ; R_X86_64_RELATIVE +13420h
LOAD:0000000000001418                 Elf64_Rela <217410h, 8, 13424h> ; R_X86_64_RELATIVE +13424h
LOAD:0000000000001430                 Elf64_Rela <217420h, 8, 13428h> ; R_X86_64_RELATIVE +13428h
LOAD:0000000000001448                 Elf64_Rela <217430h, 8, 1342Ch> ; R_X86_64_RELATIVE +1342Ch
LOAD:0000000000001460                 Elf64_Rela <217440h, 8, 13431h> ; R_X86_64_RELATIVE +13431h
LOAD:0000000000001478                 Elf64_Rela <217450h, 8, 13435h> ; R_X86_64_RELATIVE +13435h
LOAD:0000000000001490                 Elf64_Rela <217460h, 8, 1346Dh> ; R_X86_64_RELATIVE +1346Dh
LOAD:00000000000014A8                 Elf64_Rela <217470h, 8, 13472h> ; R_X86_64_RELATIVE +13472h
LOAD:00000000000014C0                 Elf64_Rela <217480h, 8, 13439h> ; R_X86_64_RELATIVE +13439h
LOAD:00000000000014D8                 Elf64_Rela <217490h, 8, 1343Dh> ; R_X86_64_RELATIVE +1343Dh
LOAD:00000000000014F0                 Elf64_Rela <2174A0h, 8, 13483h> ; R_X86_64_RELATIVE +13483h
LOAD:0000000000001508                 Elf64_Rela <2174B0h, 8, 13442h> ; R_X86_64_RELATIVE +13442h
LOAD:0000000000001520                 Elf64_Rela <2174C0h, 8, 13446h> ; R_X86_64_RELATIVE +13446h
LOAD:0000000000001538                 Elf64_Rela <2174D0h, 8, 1344Ah> ; R_X86_64_RELATIVE +1344Ah
LOAD:0000000000001550                 Elf64_Rela <2174E0h, 8, 1344Eh> ; R_X86_64_RELATIVE +1344Eh
LOAD:0000000000001568                 Elf64_Rela <2174F0h, 8, 13452h> ; R_X86_64_RELATIVE +13452h
LOAD:0000000000001580                 Elf64_Rela <217500h, 8, 13456h> ; R_X86_64_RELATIVE +13456h
LOAD:0000000000001598                 Elf64_Rela <217510h, 8, 1345Ah> ; R_X86_64_RELATIVE +1345Ah
LOAD:00000000000015B0                 Elf64_Rela <217520h, 8, 1345Eh> ; R_X86_64_RELATIVE +1345Eh
LOAD:00000000000015C8                 Elf64_Rela <217530h, 8, 13463h> ; R_X86_64_RELATIVE +13463h
LOAD:00000000000015E0                 Elf64_Rela <217540h, 8, 13468h> ; R_X86_64_RELATIVE +13468h
LOAD:00000000000015F8                 Elf64_Rela <217550h, 8, 1346Ch> ; R_X86_64_RELATIVE +1346Ch
LOAD:0000000000001610                 Elf64_Rela <217560h, 8, 13471h> ; R_X86_64_RELATIVE +13471h
LOAD:0000000000001628                 Elf64_Rela <217570h, 8, 13476h> ; R_X86_64_RELATIVE +13476h
LOAD:0000000000001640                 Elf64_Rela <217580h, 8, 1347Ah> ; R_X86_64_RELATIVE +1347Ah
LOAD:0000000000001658                 Elf64_Rela <217590h, 8, 1347Eh> ; R_X86_64_RELATIVE +1347Eh
LOAD:0000000000001670                 Elf64_Rela <2175A0h, 8, 13482h> ; R_X86_64_RELATIVE +13482h
LOAD:0000000000001688                 Elf64_Rela <2175B0h, 8, 13487h> ; R_X86_64_RELATIVE +13487h
LOAD:00000000000016A0                 Elf64_Rela <2175C0h, 8, 1348Bh> ; R_X86_64_RELATIVE +1348Bh
LOAD:00000000000016B8                 Elf64_Rela <2175D0h, 8, 1348Fh> ; R_X86_64_RELATIVE +1348Fh
LOAD:00000000000016D0                 Elf64_Rela <2175E0h, 8, 13494h> ; R_X86_64_RELATIVE +13494h
LOAD:00000000000016E8                 Elf64_Rela <2175F0h, 8, 13499h> ; R_X86_64_RELATIVE +13499h
LOAD:0000000000001700                 Elf64_Rela <217600h, 8, 1349Dh> ; R_X86_64_RELATIVE +1349Dh
LOAD:0000000000001718                 Elf64_Rela <217610h, 8, 134A2h> ; R_X86_64_RELATIVE +134A2h
LOAD:0000000000001730                 Elf64_Rela <217620h, 8, 134A6h> ; R_X86_64_RELATIVE +134A6h
LOAD:0000000000001748                 Elf64_Rela <217630h, 8, 134ABh> ; R_X86_64_RELATIVE +134ABh
LOAD:0000000000001760                 Elf64_Rela <217640h, 8, 134AFh> ; R_X86_64_RELATIVE +134AFh
LOAD:0000000000001778                 Elf64_Rela <217650h, 8, 134B3h> ; R_X86_64_RELATIVE +134B3h
LOAD:0000000000001790                 Elf64_Rela <217660h, 8, 134B7h> ; R_X86_64_RELATIVE +134B7h
LOAD:00000000000017A8                 Elf64_Rela <217670h, 8, 134BBh> ; R_X86_64_RELATIVE +134BBh
LOAD:00000000000017C0                 Elf64_Rela <217680h, 8, 1345Fh> ; R_X86_64_RELATIVE +1345Fh
LOAD:00000000000017D8                 Elf64_Rela <217690h, 8, 134BFh> ; R_X86_64_RELATIVE +134BFh
LOAD:00000000000017F0                 Elf64_Rela <2176A0h, 8, 134C3h> ; R_X86_64_RELATIVE +134C3h
LOAD:0000000000001808                 Elf64_Rela <2176B0h, 8, 134C7h> ; R_X86_64_RELATIVE +134C7h
LOAD:0000000000001820                 Elf64_Rela <2176C0h, 8, 134CCh> ; R_X86_64_RELATIVE +134CCh
LOAD:0000000000001838                 Elf64_Rela <2176E0h, 8, 1301Dh> ; R_X86_64_RELATIVE +1301Dh
LOAD:0000000000001850                 Elf64_Rela <2176F0h, 8, 134D1h> ; R_X86_64_RELATIVE +134D1h
LOAD:0000000000001868                 Elf64_Rela <217700h, 8, 131C4h> ; R_X86_64_RELATIVE +131C4h
LOAD:0000000000001880                 Elf64_Rela <217720h, 8, 13114h> ; R_X86_64_RELATIVE +13114h
LOAD:0000000000001898                 Elf64_Rela <217730h, 8, 134D4h> ; R_X86_64_RELATIVE +134D4h
LOAD:00000000000018B0                 Elf64_Rela <217740h, 8, 134DEh> ; R_X86_64_RELATIVE +134DEh
LOAD:00000000000018C8                 Elf64_Rela <217750h, 8, 134E4h> ; R_X86_64_RELATIVE +134E4h
LOAD:00000000000018E0                 Elf64_Rela <217760h, 8, 134E8h> ; R_X86_64_RELATIVE +134E8h
LOAD:00000000000018F8                 Elf64_Rela <217770h, 8, 134EDh> ; R_X86_64_RELATIVE +134EDh
LOAD:0000000000001910                 Elf64_Rela <217780h, 8, 134F2h> ; R_X86_64_RELATIVE +134F2h
LOAD:0000000000001928                 Elf64_Rela <217790h, 8, 134F7h> ; R_X86_64_RELATIVE +134F7h
LOAD:0000000000001940                 Elf64_Rela <2177A0h, 8, 134FDh> ; R_X86_64_RELATIVE +134FDh
LOAD:0000000000001958                 Elf64_Rela <2177B0h, 8, 13503h> ; R_X86_64_RELATIVE +13503h
LOAD:0000000000001970                 Elf64_Rela <2177C0h, 8, 1350Ah> ; R_X86_64_RELATIVE +1350Ah
LOAD:0000000000001988                 Elf64_Rela <2177D0h, 8, 13510h> ; R_X86_64_RELATIVE +13510h
LOAD:00000000000019A0                 Elf64_Rela <2177E0h, 8, 13516h> ; R_X86_64_RELATIVE +13516h
LOAD:00000000000019B8                 Elf64_Rela <2177F0h, 8, 1351Eh> ; R_X86_64_RELATIVE +1351Eh
LOAD:00000000000019D0                 Elf64_Rela <217800h, 8, 13525h> ; R_X86_64_RELATIVE +13525h
LOAD:00000000000019E8                 Elf64_Rela <217810h, 8, 1352Bh> ; R_X86_64_RELATIVE +1352Bh
LOAD:0000000000001A00                 Elf64_Rela <217820h, 8, 13531h> ; R_X86_64_RELATIVE +13531h
LOAD:0000000000001A18                 Elf64_Rela <217830h, 8, 1353Ah> ; R_X86_64_RELATIVE +1353Ah
LOAD:0000000000001A30                 Elf64_Rela <217840h, 8, 13542h> ; R_X86_64_RELATIVE +13542h
LOAD:0000000000001A48                 Elf64_Rela <217850h, 8, 13546h> ; R_X86_64_RELATIVE +13546h
LOAD:0000000000001A60                 Elf64_Rela <217880h, 8, 1310Fh> ; R_X86_64_RELATIVE +1310Fh
LOAD:0000000000001A78                 Elf64_Rela <217890h, 8, 1354Ch> ; R_X86_64_RELATIVE +1354Ch
LOAD:0000000000001A90                 Elf64_Rela <2178A0h, 8, 13552h> ; R_X86_64_RELATIVE +13552h
LOAD:0000000000001AA8                 Elf64_Rela <2178B0h, 8, 1355Ch> ; R_X86_64_RELATIVE +1355Ch
LOAD:0000000000001AC0                 Elf64_Rela <2178C0h, 8, 13612h> ; R_X86_64_RELATIVE +13612h
LOAD:0000000000001AD8                 Elf64_Rela <2178D0h, 8, 13561h> ; R_X86_64_RELATIVE +13561h
LOAD:0000000000001AF0                 Elf64_Rela <2178E0h, 8, 13566h> ; R_X86_64_RELATIVE +13566h
LOAD:0000000000001B08                 Elf64_Rela <2178F0h, 8, 1356Dh> ; R_X86_64_RELATIVE +1356Dh
LOAD:0000000000001B20                 Elf64_Rela <217900h, 8, 13571h> ; R_X86_64_RELATIVE +13571h
LOAD:0000000000001B38                 Elf64_Rela <217910h, 8, 13578h> ; R_X86_64_RELATIVE +13578h
LOAD:0000000000001B50                 Elf64_Rela <217940h, 8, 13107h> ; R_X86_64_RELATIVE +13107h
LOAD:0000000000001B68                 Elf64_Rela <217950h, 8, 1357Ch> ; R_X86_64_RELATIVE +1357Ch
LOAD:0000000000001B80                 Elf64_Rela <217960h, 8, 13585h> ; R_X86_64_RELATIVE +13585h
LOAD:0000000000001B98                 Elf64_Rela <217970h, 8, 1358Bh> ; R_X86_64_RELATIVE +1358Bh
LOAD:0000000000001BB0                 Elf64_Rela <217980h, 8, 13591h> ; R_X86_64_RELATIVE +13591h
LOAD:0000000000001BC8                 Elf64_Rela <217990h, 8, 13595h> ; R_X86_64_RELATIVE +13595h
LOAD:0000000000001BE0                 Elf64_Rela <2179A0h, 8, 1359Ah> ; R_X86_64_RELATIVE +1359Ah
LOAD:0000000000001BF8                 Elf64_Rela <2179B0h, 8, 1359Fh> ; R_X86_64_RELATIVE +1359Fh
LOAD:0000000000001C10                 Elf64_Rela <2179C0h, 8, 135A6h> ; R_X86_64_RELATIVE +135A6h
LOAD:0000000000001C28                 Elf64_Rela <2179D0h, 8, 135B0h> ; R_X86_64_RELATIVE +135B0h
LOAD:0000000000001C40                 Elf64_Rela <2179E0h, 8, 135B5h> ; R_X86_64_RELATIVE +135B5h
LOAD:0000000000001C58                 Elf64_Rela <2179F0h, 8, 135BDh> ; R_X86_64_RELATIVE +135BDh
LOAD:0000000000001C70                 Elf64_Rela <217A00h, 8, 135C6h> ; R_X86_64_RELATIVE +135C6h
LOAD:0000000000001C88                 Elf64_Rela <217A10h, 8, 135CFh> ; R_X86_64_RELATIVE +135CFh
LOAD:0000000000001CA0                 Elf64_Rela <217A20h, 8, 135D6h> ; R_X86_64_RELATIVE +135D6h
LOAD:0000000000001CB8                 Elf64_Rela <217A30h, 8, 135DDh> ; R_X86_64_RELATIVE +135DDh
LOAD:0000000000001CD0                 Elf64_Rela <217A40h, 8, 135E5h> ; R_X86_64_RELATIVE +135E5h
LOAD:0000000000001CE8                 Elf64_Rela <217A50h, 8, 135EAh> ; R_X86_64_RELATIVE +135EAh
LOAD:0000000000001D00                 Elf64_Rela <217A60h, 8, 135F4h> ; R_X86_64_RELATIVE +135F4h
LOAD:0000000000001D18                 Elf64_Rela <217A70h, 8, 135FBh> ; R_X86_64_RELATIVE +135FBh
LOAD:0000000000001D30                 Elf64_Rela <217A80h, 8, 13604h> ; R_X86_64_RELATIVE +13604h
LOAD:0000000000001D48                 Elf64_Rela <217A90h, 8, 13609h> ; R_X86_64_RELATIVE +13609h
LOAD:0000000000001D60                 Elf64_Rela <217AA0h, 8, 1360Fh> ; R_X86_64_RELATIVE +1360Fh
LOAD:0000000000001D78                 Elf64_Rela <217AB0h, 8, 13616h> ; R_X86_64_RELATIVE +13616h
LOAD:0000000000001D90                 Elf64_Rela <217AD0h, 8, 13094h> ; R_X86_64_RELATIVE +13094h
LOAD:0000000000001DA8                 Elf64_Rela <217AE0h, 8, 13104h> ; R_X86_64_RELATIVE +13104h
LOAD:0000000000001DC0                 Elf64_Rela <217AF0h, 8, 1361Fh> ; R_X86_64_RELATIVE +1361Fh
LOAD:0000000000001DD8                 Elf64_Rela <217B00h, 8, 13624h> ; R_X86_64_RELATIVE +13624h
LOAD:0000000000001DF0                 Elf64_Rela <217B10h, 8, 13627h> ; R_X86_64_RELATIVE +13627h
LOAD:0000000000001E08                 Elf64_Rela <217B40h, 8, 1448Fh> ; R_X86_64_RELATIVE +1448Fh
LOAD:0000000000001E20                 Elf64_Rela <217B48h, 8, 14497h> ; R_X86_64_RELATIVE +14497h
LOAD:0000000000001E38                 Elf64_Rela <217B50h, 8, 1449Dh> ; R_X86_64_RELATIVE +1449Dh
LOAD:0000000000001E50                 Elf64_Rela <217B58h, 8, 144AAh> ; R_X86_64_RELATIVE +144AAh
LOAD:0000000000001E68                 Elf64_Rela <217B60h, 8, 144B7h> ; R_X86_64_RELATIVE +144B7h
LOAD:0000000000001E80                 Elf64_Rela <217B68h, 8, 117FAh> ; R_X86_64_RELATIVE +117FAh
LOAD:0000000000001E98                 Elf64_Rela <217B70h, 8, 144CBh> ; R_X86_64_RELATIVE +144CBh
LOAD:0000000000001EB0                 Elf64_Rela <217B78h, 8, 144B0h> ; R_X86_64_RELATIVE +144B0h
LOAD:0000000000001EC8                 Elf64_Rela <217B80h, 8, 11748h> ; R_X86_64_RELATIVE +11748h
LOAD:0000000000001EE0                 Elf64_Rela <217B88h, 8, 144D3h> ; R_X86_64_RELATIVE +144D3h
LOAD:0000000000001EF8                 Elf64_Rela <218008h, 8, 218008h> ; R_X86_64_RELATIVE +218008h
LOAD:0000000000001F10                 Elf64_Rela <218010h, 8, 12D84h> ; R_X86_64_RELATIVE +12D84h
LOAD:0000000000001F28                 Elf64_Rela <218018h, 8, 3CE0h> ; R_X86_64_RELATIVE +3CE0h
LOAD:0000000000001F40                 Elf64_Rela <218080h, 8, 218090h> ; R_X86_64_RELATIVE +218090h
LOAD:0000000000001F58                 Elf64_Rela <218098h, 8, 218120h> ; R_X86_64_RELATIVE +218120h
LOAD:0000000000001F70                 Elf64_Rela <217FC0h, 900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001F88                 Elf64_Rela <217FC8h, 2100000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001FA0                 Elf64_Rela <217FD0h, 2800000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001FB8                 Elf64_Rela <217FD8h, 4300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001FD0                 Elf64_Rela <217FE0h, 4600000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001FE8                 Elf64_Rela <2180A0h, 4B00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000002000                 Elf64_Rela <2180A8h, 4A00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000002018                 Elf64_Rela <2180B0h, 4C00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000002030                 Elf64_Rela <2180B8h, 5100000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000002048                 Elf64_Rela <2180C0h, 5200000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000002060                 Elf64_Rela <2180C8h, 4E00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000002078                 Elf64_Rela <2180E0h, 5000000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000002090 ; ELF JMPREL Relocation Table
LOAD:0000000000002090                 Elf64_Rela <217DA0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:00000000000020A8                 Elf64_Rela <217DA8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000020C0                 Elf64_Rela <217DB0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:00000000000020D8                 Elf64_Rela <217DB8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000020F0                 Elf64_Rela <217DC0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT localtime
LOAD:0000000000002108                 Elf64_Rela <217DC8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000002120                 Elf64_Rela <217DD0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000002138                 Elf64_Rela <217DD8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000002150                 Elf64_Rela <217DE0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT localtime_r
LOAD:0000000000002168                 Elf64_Rela <217DE8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000002180                 Elf64_Rela <217DF0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000002198                 Elf64_Rela <217DF8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT clock_gettime
LOAD:00000000000021B0                 Elf64_Rela <217E00h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT setenv
LOAD:00000000000021C8                 Elf64_Rela <217E08h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000021E0                 Elf64_Rela <217E10h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000021F8                 Elf64_Rela <217E18h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000002210                 Elf64_Rela <217E20h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000002228                 Elf64_Rela <217E28h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000002240                 Elf64_Rela <217E30h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000002258                 Elf64_Rela <217E38h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000002270                 Elf64_Rela <217E40h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000002288                 Elf64_Rela <217E48h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000022A0                 Elf64_Rela <217E50h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000022B8                 Elf64_Rela <217E58h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT snprintf
LOAD:00000000000022D0                 Elf64_Rela <217E60h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000022E8                 Elf64_Rela <217E68h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000002300                 Elf64_Rela <217E70h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT gmtime_r
LOAD:0000000000002318                 Elf64_Rela <217E78h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000002330                 Elf64_Rela <217E80h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT fputs
LOAD:0000000000002348                 Elf64_Rela <217E88h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000002360                 Elf64_Rela <217E90h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fputc
LOAD:0000000000002378                 Elf64_Rela <217E98h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000002390                 Elf64_Rela <217EA0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000023A8                 Elf64_Rela <217EA8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000023C0                 Elf64_Rela <217EB0h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT putenv
LOAD:00000000000023D8                 Elf64_Rela <217EB8h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:00000000000023F0                 Elf64_Rela <217EC0h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000002408                 Elf64_Rela <217EC8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000002420                 Elf64_Rela <217ED0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT tzset
LOAD:0000000000002438                 Elf64_Rela <217ED8h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT time
LOAD:0000000000002450                 Elf64_Rela <217EE0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000002468                 Elf64_Rela <217EE8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __stpcpy_chk
LOAD:0000000000002480                 Elf64_Rela <217EF0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT settimeofday
LOAD:0000000000002498                 Elf64_Rela <217EF8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:00000000000024B0                 Elf64_Rela <217F00h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000024C8                 Elf64_Rela <217F08h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000024E0                 Elf64_Rela <217F10h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000024F8                 Elf64_Rela <217F18h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT clock_settime
LOAD:0000000000002510                 Elf64_Rela <217F20h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT mktime
LOAD:0000000000002528                 Elf64_Rela <217F28h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000002540                 Elf64_Rela <217F30h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000002558                 Elf64_Rela <217F38h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000002570                 Elf64_Rela <217F40h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000002588                 Elf64_Rela <217F48h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT timegm
LOAD:00000000000025A0                 Elf64_Rela <217F50h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT strftime
LOAD:00000000000025B8                 Elf64_Rela <217F58h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000025D0                 Elf64_Rela <217F60h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000025E8                 Elf64_Rela <217F68h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000002600                 Elf64_Rela <217F70h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT unsetenv
LOAD:0000000000002618                 Elf64_Rela <217F78h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000002630                 Elf64_Rela <217F80h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000002648                 Elf64_Rela <217F88h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000002660                 Elf64_Rela <217F90h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000002678                 Elf64_Rela <217F98h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000002690                 Elf64_Rela <217FA0h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000026A8                 Elf64_Rela <217FA8h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:00000000000026C0                 Elf64_Rela <217FB0h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000026D8                 Elf64_Rela <217FB8h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:00000000000026D8 LOAD            ends
LOAD:00000000000026D8
.init:00000000000026F0 ; ===========================================================================
.init:00000000000026F0
.init:00000000000026F0 ; Segment type: Pure code
.init:00000000000026F0 ; Segment permissions: Read/Execute
.init:00000000000026F0 _init           segment dword public 'CODE' use64
.init:00000000000026F0                 assume cs:_init
.init:00000000000026F0                 ;org 26F0h
.init:00000000000026F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000026F0
.init:00000000000026F0 ; =============== S U B R O U T I N E =======================================
.init:00000000000026F0
.init:00000000000026F0
.init:00000000000026F0                 public _init_proc
.init:00000000000026F0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000026F0                 sub     rsp, 8          ; _init
.init:00000000000026F4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000026FB                 test    rax, rax
.init:00000000000026FE                 jz      short loc_2702
.init:0000000000002700                 call    rax ; __gmon_start__
.init:0000000000002702
.init:0000000000002702 loc_2702:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000002702                 add     rsp, 8
.init:0000000000002706                 retn
.init:0000000000002706 _init_proc      endp
.init:0000000000002706
.init:0000000000002706 _init           ends
.init:0000000000002706
LOAD:0000000000002707 ; ===========================================================================
LOAD:0000000000002707
LOAD:0000000000002707 ; Segment type: Pure code
LOAD:0000000000002707 ; Segment permissions: Read/Execute
LOAD:0000000000002707 LOAD            segment byte public 'CODE' use64
LOAD:0000000000002707                 assume cs:LOAD
LOAD:0000000000002707                 ;org 2707h
LOAD:0000000000002707                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000002707                 align 10h
LOAD:0000000000002707 LOAD            ends
LOAD:0000000000002707
.plt:0000000000002710 ; ===========================================================================
.plt:0000000000002710
.plt:0000000000002710 ; Segment type: Pure code
.plt:0000000000002710 ; Segment permissions: Read/Execute
.plt:0000000000002710 _plt            segment para public 'CODE' use64
.plt:0000000000002710                 assume cs:_plt
.plt:0000000000002710                 ;org 2710h
.plt:0000000000002710                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000002710
.plt:0000000000002710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002710
.plt:0000000000002710
.plt:0000000000002710 sub_2710        proc near               ; CODE XREF: .plt:000000000000272B↓j
.plt:0000000000002710                                         ; .plt:000000000000273B↓j ...
.plt:0000000000002710 ; __unwind {
.plt:0000000000002710                 push    cs:qword_217D90
.plt:0000000000002716                 jmp     cs:qword_217D98
.plt:0000000000002716 sub_2710        endp
.plt:0000000000002716
.plt:0000000000002716 ; ---------------------------------------------------------------------------
.plt:000000000000271C                 align 20h
.plt:0000000000002720
.plt:0000000000002720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002720
.plt:0000000000002720 ; Attributes: thunk
.plt:0000000000002720
.plt:0000000000002720 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000002720 ___ctype_toupper_loc proc near          ; CODE XREF: fwrite_uppcase+1B↓p
.plt:0000000000002720                                         ; memcpy_lowcase_0+13↓p
.plt:0000000000002720                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000002720 ___ctype_toupper_loc endp
.plt:0000000000002720
.plt:0000000000002726 ; ---------------------------------------------------------------------------
.plt:0000000000002726                 push    0
.plt:000000000000272B                 jmp     sub_2710
.plt:0000000000002730
.plt:0000000000002730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002730
.plt:0000000000002730 ; Attributes: thunk
.plt:0000000000002730
.plt:0000000000002730 ; char *getenv(const char *name)
.plt:0000000000002730 _getenv         proc near               ; CODE XREF: main+324↓p
.plt:0000000000002730                                         ; parse_datetime+1C↓p ...
.plt:0000000000002730                 jmp     cs:getenv_ptr
.plt:0000000000002730 _getenv         endp
.plt:0000000000002730
.plt:0000000000002736 ; ---------------------------------------------------------------------------
.plt:0000000000002736                 push    1
.plt:000000000000273B                 jmp     sub_2710
.plt:0000000000002740
.plt:0000000000002740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002740
.plt:0000000000002740 ; Attributes: thunk
.plt:0000000000002740
.plt:0000000000002740 ___snprintf_chk proc near               ; CODE XREF: debug_strfdatetime_constprop_12+A5↓p
.plt:0000000000002740                                         ; str_days_constprop_13+44↓p ...
.plt:0000000000002740                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000002740 ___snprintf_chk endp
.plt:0000000000002740
.plt:0000000000002746 ; ---------------------------------------------------------------------------
.plt:0000000000002746                 push    2
.plt:000000000000274B                 jmp     sub_2710
.plt:0000000000002750
.plt:0000000000002750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002750
.plt:0000000000002750 ; Attributes: thunk
.plt:0000000000002750
.plt:0000000000002750 ; void free(void *ptr)
.plt:0000000000002750 _free           proc near               ; CODE XREF: main+512↓p
.plt:0000000000002750                                         ; parse_datetime2+451↓p ...
.plt:0000000000002750                 jmp     cs:free_ptr
.plt:0000000000002750 _free           endp
.plt:0000000000002750
.plt:0000000000002756 ; ---------------------------------------------------------------------------
.plt:0000000000002756                 push    3
.plt:000000000000275B                 jmp     sub_2710
.plt:0000000000002760
.plt:0000000000002760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002760
.plt:0000000000002760 ; Attributes: thunk
.plt:0000000000002760
.plt:0000000000002760 ; struct tm *localtime(const time_t *timer)
.plt:0000000000002760 _localtime      proc near               ; CODE XREF: year_isra_0+46↓p
.plt:0000000000002760                 jmp     cs:localtime_ptr
.plt:0000000000002760 _localtime      endp
.plt:0000000000002760
.plt:0000000000002766 ; ---------------------------------------------------------------------------
.plt:0000000000002766                 push    4
.plt:000000000000276B                 jmp     sub_2710
.plt:0000000000002770
.plt:0000000000002770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002770
.plt:0000000000002770 ; Attributes: noreturn thunk
.plt:0000000000002770
.plt:0000000000002770 ; void __noreturn abort(void)
.plt:0000000000002770 _abort          proc near               ; CODE XREF: year_isra_0:loc_A721↓p
.plt:0000000000002770                                         ; set_program_name+9A↓p ...
.plt:0000000000002770                 jmp     cs:abort_ptr
.plt:0000000000002770 _abort          endp
.plt:0000000000002770
.plt:0000000000002776 ; ---------------------------------------------------------------------------
.plt:0000000000002776                 push    5
.plt:000000000000277B                 jmp     sub_2710
.plt:0000000000002780
.plt:0000000000002780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002780
.plt:0000000000002780 ; Attributes: thunk
.plt:0000000000002780
.plt:0000000000002780 ; int *__errno_location(void)
.plt:0000000000002780 ___errno_location proc near             ; CODE XREF: main+3BE↓p
.plt:0000000000002780                                         ; main+5EA↓p ...
.plt:0000000000002780                 jmp     cs:__errno_location_ptr
.plt:0000000000002780 ___errno_location endp
.plt:0000000000002780
.plt:0000000000002786 ; ---------------------------------------------------------------------------
.plt:0000000000002786                 push    6
.plt:000000000000278B                 jmp     sub_2710
.plt:0000000000002790
.plt:0000000000002790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002790
.plt:0000000000002790 ; Attributes: thunk
.plt:0000000000002790
.plt:0000000000002790 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000002790 _strncmp        proc near               ; CODE XREF: usage+55C↓p
.plt:0000000000002790                                         ; usage+61D↓p ...
.plt:0000000000002790                 jmp     cs:strncmp_ptr
.plt:0000000000002790 _strncmp        endp
.plt:0000000000002790
.plt:0000000000002796 ; ---------------------------------------------------------------------------
.plt:0000000000002796                 push    7
.plt:000000000000279B                 jmp     sub_2710
.plt:00000000000027A0
.plt:00000000000027A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027A0
.plt:00000000000027A0 ; Attributes: thunk
.plt:00000000000027A0
.plt:00000000000027A0 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
.plt:00000000000027A0 _localtime_r    proc near               ; CODE XREF: localtime_rz+2B↓p
.plt:00000000000027A0                                         ; mktime_z+AA↓p
.plt:00000000000027A0                 jmp     cs:localtime_r_ptr
.plt:00000000000027A0 _localtime_r    endp
.plt:00000000000027A0
.plt:00000000000027A6 ; ---------------------------------------------------------------------------
.plt:00000000000027A6                 push    8
.plt:00000000000027AB                 jmp     sub_2710
.plt:00000000000027B0
.plt:00000000000027B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027B0
.plt:00000000000027B0 ; Attributes: noreturn thunk
.plt:00000000000027B0
.plt:00000000000027B0 ; void __noreturn _exit(int status)
.plt:00000000000027B0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000027B0                 jmp     cs:_exit_ptr
.plt:00000000000027B0 __exit          endp
.plt:00000000000027B0
.plt:00000000000027B6 ; ---------------------------------------------------------------------------
.plt:00000000000027B6                 push    9
.plt:00000000000027BB                 jmp     sub_2710
.plt:00000000000027C0
.plt:00000000000027C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027C0
.plt:00000000000027C0 ; Attributes: thunk
.plt:00000000000027C0
.plt:00000000000027C0 ; size_t __fpending(FILE *fp)
.plt:00000000000027C0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000027C0                 jmp     cs:__fpending_ptr
.plt:00000000000027C0 ___fpending     endp
.plt:00000000000027C0
.plt:00000000000027C6 ; ---------------------------------------------------------------------------
.plt:00000000000027C6                 push    0Ah
.plt:00000000000027CB                 jmp     sub_2710
.plt:00000000000027D0
.plt:00000000000027D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027D0
.plt:00000000000027D0 ; Attributes: thunk
.plt:00000000000027D0
.plt:00000000000027D0 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
.plt:00000000000027D0 _clock_gettime  proc near               ; CODE XREF: gettime+5↓j
.plt:00000000000027D0                                         ; current_timespec+19↓p
.plt:00000000000027D0                 jmp     cs:clock_gettime_ptr
.plt:00000000000027D0 _clock_gettime  endp
.plt:00000000000027D0
.plt:00000000000027D6 ; ---------------------------------------------------------------------------
.plt:00000000000027D6                 push    0Bh
.plt:00000000000027DB                 jmp     sub_2710
.plt:00000000000027E0
.plt:00000000000027E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027E0
.plt:00000000000027E0 ; Attributes: thunk
.plt:00000000000027E0
.plt:00000000000027E0 ; int setenv(const char *name, const char *value, int replace)
.plt:00000000000027E0 _setenv         proc near               ; CODE XREF: setenv_TZ+14↓j
.plt:00000000000027E0                 jmp     cs:setenv_ptr
.plt:00000000000027E0 _setenv         endp
.plt:00000000000027E0
.plt:00000000000027E6 ; ---------------------------------------------------------------------------
.plt:00000000000027E6                 push    0Ch
.plt:00000000000027EB                 jmp     sub_2710
.plt:00000000000027F0
.plt:00000000000027F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027F0
.plt:00000000000027F0 ; Attributes: thunk
.plt:00000000000027F0
.plt:00000000000027F0 ; char *textdomain(const char *domainname)
.plt:00000000000027F0 _textdomain     proc near               ; CODE XREF: main+74↓p
.plt:00000000000027F0                 jmp     cs:textdomain_ptr
.plt:00000000000027F0 _textdomain     endp
.plt:00000000000027F0
.plt:00000000000027F6 ; ---------------------------------------------------------------------------
.plt:00000000000027F6                 push    0Dh
.plt:00000000000027FB                 jmp     sub_2710
.plt:0000000000002800
.plt:0000000000002800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002800
.plt:0000000000002800 ; Attributes: thunk
.plt:0000000000002800
.plt:0000000000002800 ; int fclose(FILE *stream)
.plt:0000000000002800 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000002800                                         ; rpl_fclose+6B↓j
.plt:0000000000002800                 jmp     cs:fclose_ptr
.plt:0000000000002800 _fclose         endp
.plt:0000000000002800
.plt:0000000000002806 ; ---------------------------------------------------------------------------
.plt:0000000000002806                 push    0Eh
.plt:000000000000280B                 jmp     sub_2710
.plt:0000000000002810
.plt:0000000000002810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002810
.plt:0000000000002810 ; Attributes: thunk
.plt:0000000000002810
.plt:0000000000002810 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000002810 _bindtextdomain proc near               ; CODE XREF: main+68↓p
.plt:0000000000002810                 jmp     cs:bindtextdomain_ptr
.plt:0000000000002810 _bindtextdomain endp
.plt:0000000000002810
.plt:0000000000002816 ; ---------------------------------------------------------------------------
.plt:0000000000002816                 push    0Fh
.plt:000000000000281B                 jmp     sub_2710
.plt:0000000000002820
.plt:0000000000002820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002820
.plt:0000000000002820 ; Attributes: thunk
.plt:0000000000002820
.plt:0000000000002820 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000002820 _dcgettext      proc near               ; CODE XREF: main+3B6↓p
.plt:0000000000002820                                         ; main+3FA↓p ...
.plt:0000000000002820                 jmp     cs:dcgettext_ptr
.plt:0000000000002820 _dcgettext      endp
.plt:0000000000002820
.plt:0000000000002826 ; ---------------------------------------------------------------------------
.plt:0000000000002826                 push    10h
.plt:000000000000282B                 jmp     sub_2710
.plt:0000000000002830
.plt:0000000000002830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002830
.plt:0000000000002830 ; Attributes: thunk
.plt:0000000000002830
.plt:0000000000002830 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000002830 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000002830                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000002830 ___ctype_get_mb_cur_max endp
.plt:0000000000002830
.plt:0000000000002836 ; ---------------------------------------------------------------------------
.plt:0000000000002836                 push    11h
.plt:000000000000283B                 jmp     sub_2710
.plt:0000000000002840
.plt:0000000000002840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002840
.plt:0000000000002840 ; Attributes: thunk
.plt:0000000000002840
.plt:0000000000002840 ; size_t strlen(const char *s)
.plt:0000000000002840 _strlen         proc near               ; CODE XREF: argmatch+21↓p
.plt:0000000000002840                                         ; argmatch+AE↓p ...
.plt:0000000000002840                 jmp     cs:strlen_ptr
.plt:0000000000002840 _strlen         endp
.plt:0000000000002840
.plt:0000000000002846 ; ---------------------------------------------------------------------------
.plt:0000000000002846                 push    12h
.plt:000000000000284B                 jmp     sub_2710
.plt:0000000000002850
.plt:0000000000002850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002850
.plt:0000000000002850 ; Attributes: noreturn thunk
.plt:0000000000002850
.plt:0000000000002850 ___stack_chk_fail proc near             ; CODE XREF: main:loc_3333↓p
.plt:0000000000002850                                         ; show_date:loc_3634↓p ...
.plt:0000000000002850                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000002850 ___stack_chk_fail endp
.plt:0000000000002850
.plt:0000000000002856 ; ---------------------------------------------------------------------------
.plt:0000000000002856                 push    13h
.plt:000000000000285B                 jmp     sub_2710
.plt:0000000000002860
.plt:0000000000002860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002860
.plt:0000000000002860 ; Attributes: thunk
.plt:0000000000002860
.plt:0000000000002860 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000002860 _getopt_long    proc near               ; CODE XREF: main+C7↓p
.plt:0000000000002860                 jmp     cs:getopt_long_ptr
.plt:0000000000002860 _getopt_long    endp
.plt:0000000000002860
.plt:0000000000002866 ; ---------------------------------------------------------------------------
.plt:0000000000002866                 push    14h
.plt:000000000000286B                 jmp     sub_2710
.plt:0000000000002870
.plt:0000000000002870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002870
.plt:0000000000002870 ; Attributes: thunk
.plt:0000000000002870
.plt:0000000000002870 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000002870 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000002870                 jmp     cs:mbrtowc_ptr
.plt:0000000000002870 _mbrtowc        endp
.plt:0000000000002870
.plt:0000000000002876 ; ---------------------------------------------------------------------------
.plt:0000000000002876                 push    15h
.plt:000000000000287B                 jmp     sub_2710
.plt:0000000000002880
.plt:0000000000002880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002880
.plt:0000000000002880 ; Attributes: thunk
.plt:0000000000002880
.plt:0000000000002880 ; char *strchr(const char *s, int c)
.plt:0000000000002880 _strchr         proc near               ; CODE XREF: posixtime+49↓p
.plt:0000000000002880                 jmp     cs:strchr_ptr
.plt:0000000000002880 _strchr         endp
.plt:0000000000002880
.plt:0000000000002886 ; ---------------------------------------------------------------------------
.plt:0000000000002886                 push    16h
.plt:000000000000288B                 jmp     sub_2710
.plt:0000000000002890
.plt:0000000000002890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002890
.plt:0000000000002890 ; Attributes: thunk
.plt:0000000000002890
.plt:0000000000002890 ; int snprintf(char *s, size_t maxlen, const char *format, ...)
.plt:0000000000002890 _snprintf       proc near               ; CODE XREF: str_days_constprop_13+DB↓p
.plt:0000000000002890                 jmp     cs:snprintf_ptr
.plt:0000000000002890 _snprintf       endp
.plt:0000000000002890
.plt:0000000000002896 ; ---------------------------------------------------------------------------
.plt:0000000000002896                 push    17h
.plt:000000000000289B                 jmp     sub_2710
.plt:00000000000028A0
.plt:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028A0
.plt:00000000000028A0 ; Attributes: thunk
.plt:00000000000028A0
.plt:00000000000028A0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000028A0 ___overflow     proc near               ; CODE XREF: show_date+145↓p
.plt:00000000000028A0                                         ; argmatch_valid+11B↓j
.plt:00000000000028A0                 jmp     cs:__overflow_ptr
.plt:00000000000028A0 ___overflow     endp
.plt:00000000000028A0
.plt:00000000000028A6 ; ---------------------------------------------------------------------------
.plt:00000000000028A6                 push    18h
.plt:00000000000028AB                 jmp     sub_2710
.plt:00000000000028B0
.plt:00000000000028B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028B0
.plt:00000000000028B0 ; Attributes: thunk
.plt:00000000000028B0
.plt:00000000000028B0 ; char *strrchr(const char *s, int c)
.plt:00000000000028B0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000028B0                 jmp     cs:strrchr_ptr
.plt:00000000000028B0 _strrchr        endp
.plt:00000000000028B0
.plt:00000000000028B6 ; ---------------------------------------------------------------------------
.plt:00000000000028B6                 push    19h
.plt:00000000000028BB                 jmp     sub_2710
.plt:00000000000028C0
.plt:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028C0
.plt:00000000000028C0 ; Attributes: thunk
.plt:00000000000028C0
.plt:00000000000028C0 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
.plt:00000000000028C0 _gmtime_r       proc near               ; CODE XREF: parse_datetime2+811↓p
.plt:00000000000028C0                                         ; localtime_rz+90↓j
.plt:00000000000028C0                 jmp     cs:gmtime_r_ptr
.plt:00000000000028C0 _gmtime_r       endp
.plt:00000000000028C0
.plt:00000000000028C6 ; ---------------------------------------------------------------------------
.plt:00000000000028C6                 push    1Ah
.plt:00000000000028CB                 jmp     sub_2710
.plt:00000000000028D0
.plt:00000000000028D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028D0
.plt:00000000000028D0 ; Attributes: thunk
.plt:00000000000028D0
.plt:00000000000028D0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000028D0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000028D0                                         ; rpl_fseeko+3B↓p
.plt:00000000000028D0                 jmp     cs:lseek_ptr
.plt:00000000000028D0 _lseek          endp
.plt:00000000000028D0
.plt:00000000000028D6 ; ---------------------------------------------------------------------------
.plt:00000000000028D6                 push    1Bh
.plt:00000000000028DB                 jmp     sub_2710
.plt:00000000000028E0
.plt:00000000000028E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028E0
.plt:00000000000028E0 ; Attributes: thunk
.plt:00000000000028E0
.plt:00000000000028E0 ; int fputs(const char *s, FILE *stream)
.plt:00000000000028E0 _fputs          proc near               ; CODE XREF: debug_print_relative_time_part_11+121↓j
.plt:00000000000028E0                 jmp     cs:fputs_ptr
.plt:00000000000028E0 _fputs          endp
.plt:00000000000028E0
.plt:00000000000028E6 ; ---------------------------------------------------------------------------
.plt:00000000000028E6                 push    1Ch
.plt:00000000000028EB                 jmp     sub_2710
.plt:00000000000028F0
.plt:00000000000028F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028F0
.plt:00000000000028F0 ; Attributes: thunk
.plt:00000000000028F0
.plt:00000000000028F0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000028F0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000028F0                                         ; xzalloc+12↓j ...
.plt:00000000000028F0                 jmp     cs:memset_ptr
.plt:00000000000028F0 _memset         endp
.plt:00000000000028F0
.plt:00000000000028F6 ; ---------------------------------------------------------------------------
.plt:00000000000028F6                 push    1Dh
.plt:00000000000028FB                 jmp     sub_2710
.plt:0000000000002900
.plt:0000000000002900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002900
.plt:0000000000002900 ; Attributes: thunk
.plt:0000000000002900
.plt:0000000000002900 ; int fputc(int c, FILE *stream)
.plt:0000000000002900 _fputc          proc near               ; CODE XREF: fwrite_lowcase+39↓p
.plt:0000000000002900                                         ; fwrite_uppcase+39↓p ...
.plt:0000000000002900                 jmp     cs:fputc_ptr
.plt:0000000000002900 _fputc          endp
.plt:0000000000002900
.plt:0000000000002906 ; ---------------------------------------------------------------------------
.plt:0000000000002906                 push    1Eh
.plt:000000000000290B                 jmp     sub_2710
.plt:0000000000002910
.plt:0000000000002910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002910
.plt:0000000000002910 ; Attributes: thunk
.plt:0000000000002910
.plt:0000000000002910 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000002910 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:0000000000002910                                         ; argmatch_valid+96↓p ...
.plt:0000000000002910                 jmp     cs:memcmp_ptr
.plt:0000000000002910 _memcmp         endp
.plt:0000000000002910
.plt:0000000000002916 ; ---------------------------------------------------------------------------
.plt:0000000000002916                 push    1Fh
.plt:000000000000291B                 jmp     sub_2710
.plt:0000000000002920
.plt:0000000000002920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002920
.plt:0000000000002920 ; Attributes: thunk
.plt:0000000000002920
.plt:0000000000002920 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000002920 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000002920                                         ; usage+C5↓p ...
.plt:0000000000002920                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000002920 _fputs_unlocked endp
.plt:0000000000002920
.plt:0000000000002926 ; ---------------------------------------------------------------------------
.plt:0000000000002926                 push    20h ; ' '
.plt:000000000000292B                 jmp     sub_2710
.plt:0000000000002930
.plt:0000000000002930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002930
.plt:0000000000002930 ; Attributes: thunk
.plt:0000000000002930
.plt:0000000000002930 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000002930 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000002930                 jmp     cs:calloc_ptr
.plt:0000000000002930 _calloc         endp
.plt:0000000000002930
.plt:0000000000002936 ; ---------------------------------------------------------------------------
.plt:0000000000002936                 push    21h ; '!'
.plt:000000000000293B                 jmp     sub_2710
.plt:0000000000002940
.plt:0000000000002940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002940
.plt:0000000000002940 ; Attributes: thunk
.plt:0000000000002940
.plt:0000000000002940 ; int putenv(char *string)
.plt:0000000000002940 _putenv         proc near               ; CODE XREF: main+1E7↓p
.plt:0000000000002940                 jmp     cs:putenv_ptr
.plt:0000000000002940 _putenv         endp
.plt:0000000000002940
.plt:0000000000002946 ; ---------------------------------------------------------------------------
.plt:0000000000002946                 push    22h ; '"'
.plt:000000000000294B                 jmp     sub_2710
.plt:0000000000002950
.plt:0000000000002950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002950
.plt:0000000000002950 ; Attributes: thunk
.plt:0000000000002950
.plt:0000000000002950 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000002950 ___getdelim     proc near               ; CODE XREF: main+45A↓p
.plt:0000000000002950                 jmp     cs:__getdelim_ptr
.plt:0000000000002950 ___getdelim     endp
.plt:0000000000002950
.plt:0000000000002956 ; ---------------------------------------------------------------------------
.plt:0000000000002956                 push    23h ; '#'
.plt:000000000000295B                 jmp     sub_2710
.plt:0000000000002960
.plt:0000000000002960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002960
.plt:0000000000002960 ; Attributes: thunk
.plt:0000000000002960
.plt:0000000000002960 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000002960 _strcmp         proc near               ; CODE XREF: main+3DF↓p
.plt:0000000000002960                                         ; lookup_zone+2F↓p ...
.plt:0000000000002960                 jmp     cs:strcmp_ptr
.plt:0000000000002960 _strcmp         endp
.plt:0000000000002960
.plt:0000000000002966 ; ---------------------------------------------------------------------------
.plt:0000000000002966                 push    24h ; '$'
.plt:000000000000296B                 jmp     sub_2710
.plt:0000000000002970
.plt:0000000000002970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002970
.plt:0000000000002970 ; Attributes: thunk
.plt:0000000000002970
.plt:0000000000002970 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000002970 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000002970                                         ; tzalloc+51↓p ...
.plt:0000000000002970                 jmp     cs:memcpy_ptr
.plt:0000000000002970 _memcpy         endp
.plt:0000000000002970
.plt:0000000000002976 ; ---------------------------------------------------------------------------
.plt:0000000000002976                 push    25h ; '%'
.plt:000000000000297B                 jmp     sub_2710
.plt:0000000000002980
.plt:0000000000002980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002980
.plt:0000000000002980 ; Attributes: thunk
.plt:0000000000002980
.plt:0000000000002980 ; void tzset(void)
.plt:0000000000002980 _tzset          proc near               ; CODE XREF: revert_tz:loc_D2F0↓p
.plt:0000000000002980                                         ; set_tz:loc_D5A8↓p
.plt:0000000000002980                 jmp     cs:tzset_ptr
.plt:0000000000002980 _tzset          endp
.plt:0000000000002980
.plt:0000000000002986 ; ---------------------------------------------------------------------------
.plt:0000000000002986                 push    26h ; '&'
.plt:000000000000298B                 jmp     sub_2710
.plt:0000000000002990
.plt:0000000000002990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002990
.plt:0000000000002990 ; Attributes: thunk
.plt:0000000000002990
.plt:0000000000002990 ; time_t time(time_t *timer)
.plt:0000000000002990 _time           proc near               ; CODE XREF: year_isra_0+3E↓p
.plt:0000000000002990                 jmp     cs:time_ptr
.plt:0000000000002990 _time           endp
.plt:0000000000002990
.plt:0000000000002996 ; ---------------------------------------------------------------------------
.plt:0000000000002996                 push    27h ; '''
.plt:000000000000299B                 jmp     sub_2710
.plt:00000000000029A0
.plt:00000000000029A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029A0
.plt:00000000000029A0 ; Attributes: thunk
.plt:00000000000029A0
.plt:00000000000029A0 ; int fileno(FILE *stream)
.plt:00000000000029A0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000029A0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000029A0                 jmp     cs:fileno_ptr
.plt:00000000000029A0 _fileno         endp
.plt:00000000000029A0
.plt:00000000000029A6 ; ---------------------------------------------------------------------------
.plt:00000000000029A6                 push    28h ; '('
.plt:00000000000029AB                 jmp     sub_2710
.plt:00000000000029B0
.plt:00000000000029B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029B0
.plt:00000000000029B0 ; Attributes: thunk
.plt:00000000000029B0
.plt:00000000000029B0 ___stpcpy_chk   proc near               ; CODE XREF: posixtime+238↓p
.plt:00000000000029B0                 jmp     cs:__stpcpy_chk_ptr
.plt:00000000000029B0 ___stpcpy_chk   endp
.plt:00000000000029B0
.plt:00000000000029B6 ; ---------------------------------------------------------------------------
.plt:00000000000029B6                 push    29h ; ')'
.plt:00000000000029BB                 jmp     sub_2710
.plt:00000000000029C0
.plt:00000000000029C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029C0
.plt:00000000000029C0 ; Attributes: thunk
.plt:00000000000029C0
.plt:00000000000029C0 ; int settimeofday(const struct timeval *tv, const struct timezone *tz)
.plt:00000000000029C0 _settimeofday   proc near               ; CODE XREF: settime+64↓p
.plt:00000000000029C0                 jmp     cs:settimeofday_ptr
.plt:00000000000029C0 _settimeofday   endp
.plt:00000000000029C0
.plt:00000000000029C6 ; ---------------------------------------------------------------------------
.plt:00000000000029C6                 push    2Ah ; '*'
.plt:00000000000029CB                 jmp     sub_2710
.plt:00000000000029D0
.plt:00000000000029D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029D0
.plt:00000000000029D0 ; Attributes: thunk
.plt:00000000000029D0
.plt:00000000000029D0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000029D0 ___xstat        proc near               ; CODE XREF: main+55F↓p
.plt:00000000000029D0                 jmp     cs:__xstat_ptr
.plt:00000000000029D0 ___xstat        endp
.plt:00000000000029D0
.plt:00000000000029D6 ; ---------------------------------------------------------------------------
.plt:00000000000029D6                 push    2Bh ; '+'
.plt:00000000000029DB                 jmp     sub_2710
.plt:00000000000029E0
.plt:00000000000029E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029E0
.plt:00000000000029E0 ; Attributes: thunk
.plt:00000000000029E0
.plt:00000000000029E0 ; void *malloc(size_t size)
.plt:00000000000029E0 _malloc         proc near               ; CODE XREF: parse_datetime2+4E3↓p
.plt:00000000000029E0                                         ; xmalloc+4↓p ...
.plt:00000000000029E0                 jmp     cs:malloc_ptr
.plt:00000000000029E0 _malloc         endp
.plt:00000000000029E0
.plt:00000000000029E6 ; ---------------------------------------------------------------------------
.plt:00000000000029E6                 push    2Ch ; ','
.plt:00000000000029EB                 jmp     sub_2710
.plt:00000000000029F0
.plt:00000000000029F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029F0
.plt:00000000000029F0 ; Attributes: thunk
.plt:00000000000029F0
.plt:00000000000029F0 ; int fflush(FILE *stream)
.plt:00000000000029F0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000029F0                                         ; rpl_fflush+3B↓j
.plt:00000000000029F0                 jmp     cs:fflush_ptr
.plt:00000000000029F0 _fflush         endp
.plt:00000000000029F0
.plt:00000000000029F6 ; ---------------------------------------------------------------------------
.plt:00000000000029F6                 push    2Dh ; '-'
.plt:00000000000029FB                 jmp     sub_2710
.plt:0000000000002A00
.plt:0000000000002A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A00
.plt:0000000000002A00 ; Attributes: thunk
.plt:0000000000002A00
.plt:0000000000002A00 ; char *nl_langinfo(nl_item item)
.plt:0000000000002A00 _nl_langinfo    proc near               ; CODE XREF: main+60C↓p
.plt:0000000000002A00                                         ; locale_charset+9↓p
.plt:0000000000002A00                 jmp     cs:nl_langinfo_ptr
.plt:0000000000002A00 _nl_langinfo    endp
.plt:0000000000002A00
.plt:0000000000002A06 ; ---------------------------------------------------------------------------
.plt:0000000000002A06                 push    2Eh ; '.'
.plt:0000000000002A0B                 jmp     sub_2710
.plt:0000000000002A10
.plt:0000000000002A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A10
.plt:0000000000002A10 ; Attributes: thunk
.plt:0000000000002A10
.plt:0000000000002A10 ; int clock_settime(clockid_t clock_id, const struct timespec *tp)
.plt:0000000000002A10 _clock_settime  proc near               ; CODE XREF: settime+1E↓p
.plt:0000000000002A10                 jmp     cs:clock_settime_ptr
.plt:0000000000002A10 _clock_settime  endp
.plt:0000000000002A10
.plt:0000000000002A16 ; ---------------------------------------------------------------------------
.plt:0000000000002A16                 push    2Fh ; '/'
.plt:0000000000002A1B                 jmp     sub_2710
.plt:0000000000002A20
.plt:0000000000002A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A20
.plt:0000000000002A20 ; Attributes: thunk
.plt:0000000000002A20
.plt:0000000000002A20 ; time_t mktime(struct tm *tp)
.plt:0000000000002A20 _mktime         proc near               ; CODE XREF: posixtime+1C8↓p
.plt:0000000000002A20                                         ; mktime_z+3B↓p
.plt:0000000000002A20                 jmp     cs:mktime_ptr
.plt:0000000000002A20 _mktime         endp
.plt:0000000000002A20
.plt:0000000000002A26 ; ---------------------------------------------------------------------------
.plt:0000000000002A26                 push    30h ; '0'
.plt:0000000000002A2B                 jmp     sub_2710
.plt:0000000000002A30
.plt:0000000000002A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A30
.plt:0000000000002A30 ; Attributes: thunk
.plt:0000000000002A30
.plt:0000000000002A30 ; int __freading(FILE *fp)
.plt:0000000000002A30 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000002A30                                         ; rpl_fflush+9↓p
.plt:0000000000002A30                 jmp     cs:__freading_ptr
.plt:0000000000002A30 ___freading     endp
.plt:0000000000002A30
.plt:0000000000002A36 ; ---------------------------------------------------------------------------
.plt:0000000000002A36                 push    31h ; '1'
.plt:0000000000002A3B                 jmp     sub_2710
.plt:0000000000002A40
.plt:0000000000002A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A40
.plt:0000000000002A40 ; Attributes: thunk
.plt:0000000000002A40
.plt:0000000000002A40 ; void *realloc(void *ptr, size_t size)
.plt:0000000000002A40 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000002A40                                         ; vasnprintf+285↓p ...
.plt:0000000000002A40                 jmp     cs:realloc_ptr
.plt:0000000000002A40 _realloc        endp
.plt:0000000000002A40
.plt:0000000000002A46 ; ---------------------------------------------------------------------------
.plt:0000000000002A46                 push    32h ; '2'
.plt:0000000000002A4B                 jmp     sub_2710
.plt:0000000000002A50
.plt:0000000000002A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A50
.plt:0000000000002A50 ; Attributes: thunk
.plt:0000000000002A50
.plt:0000000000002A50 ; char *setlocale(int category, const char *locale)
.plt:0000000000002A50 _setlocale      proc near               ; CODE XREF: main+55↓p
.plt:0000000000002A50                                         ; show_date+104↓p ...
.plt:0000000000002A50                 jmp     cs:setlocale_ptr
.plt:0000000000002A50 _setlocale      endp
.plt:0000000000002A50
.plt:0000000000002A56 ; ---------------------------------------------------------------------------
.plt:0000000000002A56                 push    33h ; '3'
.plt:0000000000002A5B                 jmp     sub_2710
.plt:0000000000002A60
.plt:0000000000002A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A60
.plt:0000000000002A60 ; Attributes: thunk
.plt:0000000000002A60
.plt:0000000000002A60 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000002A60                                         ; usage+537↓p ...
.plt:0000000000002A60                 jmp     cs:__printf_chk_ptr
.plt:0000000000002A60 ___printf_chk   endp
.plt:0000000000002A60
.plt:0000000000002A66 ; ---------------------------------------------------------------------------
.plt:0000000000002A66                 push    34h ; '4'
.plt:0000000000002A6B                 jmp     sub_2710
.plt:0000000000002A70
.plt:0000000000002A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A70
.plt:0000000000002A70 ; Attributes: thunk
.plt:0000000000002A70
.plt:0000000000002A70 ; time_t timegm(struct tm *tp)
.plt:0000000000002A70 _timegm         proc near               ; CODE XREF: mktime_z+123↓p
.plt:0000000000002A70                 jmp     cs:timegm_ptr
.plt:0000000000002A70 _timegm         endp
.plt:0000000000002A70
.plt:0000000000002A76 ; ---------------------------------------------------------------------------
.plt:0000000000002A76                 push    35h ; '5'
.plt:0000000000002A7B                 jmp     sub_2710
.plt:0000000000002A80
.plt:0000000000002A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A80
.plt:0000000000002A80 ; Attributes: thunk
.plt:0000000000002A80
.plt:0000000000002A80 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
.plt:0000000000002A80 _strftime       proc near               ; CODE XREF: __strftime_internal+3FC↓p
.plt:0000000000002A80                                         ; __strftime_internal_0+418↓p
.plt:0000000000002A80                 jmp     cs:strftime_ptr
.plt:0000000000002A80 _strftime       endp
.plt:0000000000002A80
.plt:0000000000002A86 ; ---------------------------------------------------------------------------
.plt:0000000000002A86                 push    36h ; '6'
.plt:0000000000002A8B                 jmp     sub_2710
.plt:0000000000002A90
.plt:0000000000002A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A90
.plt:0000000000002A90 ; Attributes: thunk
.plt:0000000000002A90
.plt:0000000000002A90 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000002A90 _error          proc near               ; CODE XREF: main+3CE↓p
.plt:0000000000002A90                                         ; main+4CE↓p ...
.plt:0000000000002A90                 jmp     cs:error_ptr
.plt:0000000000002A90 _error          endp
.plt:0000000000002A90
.plt:0000000000002A96 ; ---------------------------------------------------------------------------
.plt:0000000000002A96                 push    37h ; '7'
.plt:0000000000002A9B                 jmp     sub_2710
.plt:0000000000002AA0
.plt:0000000000002AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AA0
.plt:0000000000002AA0 ; Attributes: thunk
.plt:0000000000002AA0
.plt:0000000000002AA0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000002AA0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_D15A↓j
.plt:0000000000002AA0                 jmp     cs:fseeko_ptr
.plt:0000000000002AA0 _fseeko         endp
.plt:0000000000002AA0
.plt:0000000000002AA6 ; ---------------------------------------------------------------------------
.plt:0000000000002AA6                 push    38h ; '8'
.plt:0000000000002AAB                 jmp     sub_2710
.plt:0000000000002AB0
.plt:0000000000002AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AB0
.plt:0000000000002AB0 ; Attributes: thunk
.plt:0000000000002AB0
.plt:0000000000002AB0 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000002AB0 _fopen          proc near               ; CODE XREF: main+5C3↓p
.plt:0000000000002AB0                 jmp     cs:fopen_ptr
.plt:0000000000002AB0 _fopen          endp
.plt:0000000000002AB0
.plt:0000000000002AB6 ; ---------------------------------------------------------------------------
.plt:0000000000002AB6                 push    39h ; '9'
.plt:0000000000002ABB                 jmp     sub_2710
.plt:0000000000002AC0
.plt:0000000000002AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AC0
.plt:0000000000002AC0 ; Attributes: thunk
.plt:0000000000002AC0
.plt:0000000000002AC0 ; int unsetenv(const char *name)
.plt:0000000000002AC0 _unsetenv       proc near               ; CODE XREF: setenv_TZ+27↓j
.plt:0000000000002AC0                 jmp     cs:unsetenv_ptr
.plt:0000000000002AC0 _unsetenv       endp
.plt:0000000000002AC0
.plt:0000000000002AC6 ; ---------------------------------------------------------------------------
.plt:0000000000002AC6                 push    3Ah ; ':'
.plt:0000000000002ACB                 jmp     sub_2710
.plt:0000000000002AD0
.plt:0000000000002AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AD0
.plt:0000000000002AD0 ; Attributes: thunk
.plt:0000000000002AD0
.plt:0000000000002AD0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002AD0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002AD0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002AD0 ___cxa_atexit   endp
.plt:0000000000002AD0
.plt:0000000000002AD6 ; ---------------------------------------------------------------------------
.plt:0000000000002AD6                 push    3Bh ; ';'
.plt:0000000000002ADB                 jmp     sub_2710
.plt:0000000000002AE0
.plt:0000000000002AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AE0
.plt:0000000000002AE0 ; Attributes: noreturn thunk
.plt:0000000000002AE0
.plt:0000000000002AE0 ; void __noreturn exit(int status)
.plt:0000000000002AE0 _exit           proc near               ; CODE XREF: main+1A2↓p
.plt:0000000000002AE0                                         ; usage+58↓p
.plt:0000000000002AE0                 jmp     cs:exit_ptr
.plt:0000000000002AE0 _exit           endp
.plt:0000000000002AE0
.plt:0000000000002AE6 ; ---------------------------------------------------------------------------
.plt:0000000000002AE6                 push    3Ch ; '<'
.plt:0000000000002AEB                 jmp     sub_2710
.plt:0000000000002AF0
.plt:0000000000002AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AF0
.plt:0000000000002AF0 ; Attributes: thunk
.plt:0000000000002AF0
.plt:0000000000002AF0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000002AF0 _fwrite         proc near               ; CODE XREF: __strftime_internal+13F8↓p
.plt:0000000000002AF0                                         ; __strftime_internal+141C↓p ...
.plt:0000000000002AF0                 jmp     cs:fwrite_ptr
.plt:0000000000002AF0 _fwrite         endp
.plt:0000000000002AF0
.plt:0000000000002AF6 ; ---------------------------------------------------------------------------
.plt:0000000000002AF6                 push    3Dh ; '='
.plt:0000000000002AFB                 jmp     sub_2710
.plt:0000000000002B00
.plt:0000000000002B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B00
.plt:0000000000002B00 ; Attributes: thunk
.plt:0000000000002B00
.plt:0000000000002B00 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000002B00                                         ; argmatch_valid+7A↓p ...
.plt:0000000000002B00                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000002B00 ___fprintf_chk  endp
.plt:0000000000002B00
.plt:0000000000002B06 ; ---------------------------------------------------------------------------
.plt:0000000000002B06                 push    3Eh ; '>'
.plt:0000000000002B0B                 jmp     sub_2710
.plt:0000000000002B10
.plt:0000000000002B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B10
.plt:0000000000002B10 ; Attributes: thunk
.plt:0000000000002B10
.plt:0000000000002B10 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000002B10 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000002B10                 jmp     cs:mbsinit_ptr
.plt:0000000000002B10 _mbsinit        endp
.plt:0000000000002B10
.plt:0000000000002B16 ; ---------------------------------------------------------------------------
.plt:0000000000002B16                 push    3Fh ; '?'
.plt:0000000000002B1B                 jmp     sub_2710
.plt:0000000000002B20
.plt:0000000000002B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B20
.plt:0000000000002B20 ; Attributes: thunk
.plt:0000000000002B20
.plt:0000000000002B20 ; int iswprint(wint_t wc)
.plt:0000000000002B20 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000002B20                 jmp     cs:iswprint_ptr
.plt:0000000000002B20 _iswprint       endp
.plt:0000000000002B20
.plt:0000000000002B26 ; ---------------------------------------------------------------------------
.plt:0000000000002B26                 push    40h ; '@'
.plt:0000000000002B2B                 jmp     sub_2710
.plt:0000000000002B30
.plt:0000000000002B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B30
.plt:0000000000002B30 ; Attributes: thunk
.plt:0000000000002B30
.plt:0000000000002B30 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000002B30 ___ctype_tolower_loc proc near          ; CODE XREF: fwrite_lowcase+1B↓p
.plt:0000000000002B30                                         ; memcpy_lowcase+13↓p
.plt:0000000000002B30                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000002B30 ___ctype_tolower_loc endp
.plt:0000000000002B30
.plt:0000000000002B36 ; ---------------------------------------------------------------------------
.plt:0000000000002B36                 push    41h ; 'A'
.plt:0000000000002B3B                 jmp     sub_2710
.plt:0000000000002B40
.plt:0000000000002B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B40
.plt:0000000000002B40 ; Attributes: thunk
.plt:0000000000002B40
.plt:0000000000002B40 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000002B40 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000002B40                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000002B40 ___ctype_b_loc  endp
.plt:0000000000002B40
.plt:0000000000002B46 ; ---------------------------------------------------------------------------
.plt:0000000000002B46                 push    42h ; 'B'
.plt:0000000000002B4B                 jmp     sub_2710
.plt:0000000000002B50
.plt:0000000000002B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B50
.plt:0000000000002B50 ; Attributes: thunk
.plt:0000000000002B50
.plt:0000000000002B50 ___sprintf_chk  proc near               ; CODE XREF: tm_year_str+4D↓p
.plt:0000000000002B50                                         ; time_zone_str+57↓p
.plt:0000000000002B50                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000002B50 ___sprintf_chk  endp
.plt:0000000000002B50
.plt:0000000000002B56 ; ---------------------------------------------------------------------------
.plt:0000000000002B56                 push    43h ; 'C'
.plt:0000000000002B5B                 jmp     sub_2710
.plt:0000000000002B5B ; } // starts at 2710
.plt:0000000000002B5B _plt            ends
.plt:0000000000002B5B
.plt.got:0000000000002B60 ; ===========================================================================
.plt.got:0000000000002B60
.plt.got:0000000000002B60 ; Segment type: Pure code
.plt.got:0000000000002B60 ; Segment permissions: Read/Execute
.plt.got:0000000000002B60 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000002B60                 assume cs:_plt_got
.plt.got:0000000000002B60                 ;org 2B60h
.plt.got:0000000000002B60                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000002B60
.plt.got:0000000000002B60 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002B60
.plt.got:0000000000002B60 ; Attributes: thunk
.plt.got:0000000000002B60
.plt.got:0000000000002B60 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000002B60 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000002B60 ; __unwind {
.plt.got:0000000000002B60                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000002B60 __cxa_finalize  endp
.plt.got:0000000000002B60
.plt.got:0000000000002B60 ; ---------------------------------------------------------------------------
.plt.got:0000000000002B66                 align 8
.plt.got:0000000000002B66 ; } // starts at 2B60
.plt.got:0000000000002B66 _plt_got        ends
.plt.got:0000000000002B66
LOAD:0000000000002B68 ; ===========================================================================
LOAD:0000000000002B68
LOAD:0000000000002B68 ; Segment type: Pure code
LOAD:0000000000002B68 ; Segment permissions: Read/Execute
LOAD:0000000000002B68 LOAD            segment byte public 'CODE' use64
LOAD:0000000000002B68                 assume cs:LOAD
LOAD:0000000000002B68                 ;org 2B68h
LOAD:0000000000002B68                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000002B68                 align 10h
LOAD:0000000000002B68 LOAD            ends
LOAD:0000000000002B68
.text:0000000000002B70 ; ===========================================================================
.text:0000000000002B70
.text:0000000000002B70 ; Segment type: Pure code
.text:0000000000002B70 ; Segment permissions: Read/Execute
.text:0000000000002B70 _text           segment para public 'CODE' use64
.text:0000000000002B70                 assume cs:_text
.text:0000000000002B70                 ;org 2B70h
.text:0000000000002B70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000002B70
.text:0000000000002B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B70
.text:0000000000002B70
.text:0000000000002B70 tm_year_str     proc near               ; CODE XREF: parse_datetime2+1778↓p
.text:0000000000002B70                                         ; parse_datetime2+17C5↓p ...
.text:0000000000002B70 ; __unwind {
.text:0000000000002B70                 mov     eax, edi
.text:0000000000002B72                 mov     ecx, 64h ; 'd'
.text:0000000000002B77                 push    rbx
.text:0000000000002B78                 cdq
.text:0000000000002B79                 mov     rbx, rsi
.text:0000000000002B7C                 idiv    ecx
.text:0000000000002B7E                 xor     ecx, ecx
.text:0000000000002B80                 lea     r8d, [rax+13h]
.text:0000000000002B84                 mov     esi, edx
.text:0000000000002B86                 sar     esi, 1Fh
.text:0000000000002B89                 mov     eax, r8d
.text:0000000000002B8C                 xor     edx, esi
.text:0000000000002B8E                 sar     eax, 1Fh
.text:0000000000002B91                 xor     r8d, eax
.text:0000000000002B94                 cmp     edi, 0FFFFF894h
.text:0000000000002B9A                 lea     rdi, a02d02d    ; "-%02d%02d"
.text:0000000000002BA1                 setnl   cl
.text:0000000000002BA4                 sub     edx, esi
.text:0000000000002BA6                 sub     r8d, eax
.text:0000000000002BA9                 add     rcx, rdi
.text:0000000000002BAC                 mov     r9d, edx
.text:0000000000002BAF                 mov     rdi, rbx
.text:0000000000002BB2                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002BB6                 mov     esi, 1
.text:0000000000002BBB                 xor     eax, eax
.text:0000000000002BBD                 call    ___sprintf_chk
.text:0000000000002BC2                 mov     rax, rbx
.text:0000000000002BC5                 pop     rbx
.text:0000000000002BC6                 retn
.text:0000000000002BC6 ; } // starts at 2B70
.text:0000000000002BC6 tm_year_str     endp
.text:0000000000002BC6
.text:0000000000002BC6 ; ---------------------------------------------------------------------------
.text:0000000000002BC7                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BD0
.text:0000000000002BD0
.text:0000000000002BD0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000002BD0                 public main
.text:0000000000002BD0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000002BD0
.text:0000000000002BD0 s1              = qword ptr -120h
.text:0000000000002BD0 stream          = qword ptr -118h
.text:0000000000002BD0 lineptr         = qword ptr -110h
.text:0000000000002BD0 var_108         = qword ptr -108h
.text:0000000000002BD0 var_100         = qword ptr -100h
.text:0000000000002BD0 ptr             = qword ptr -0F8h
.text:0000000000002BD0 n               = qword ptr -0F0h
.text:0000000000002BD0 tp              = timespec ptr -0E8h
.text:0000000000002BD0 stat_buf        = stat ptr -0D8h
.text:0000000000002BD0 var_40          = qword ptr -40h
.text:0000000000002BD0
.text:0000000000002BD0 ; __unwind {
.text:0000000000002BD0                 push    r15
.text:0000000000002BD2                 push    r14
.text:0000000000002BD4                 mov     r15d, edi
.text:0000000000002BD7                 push    r13
.text:0000000000002BD9                 push    r12
.text:0000000000002BDB                 mov     r14, rsi
.text:0000000000002BDE                 push    rbp
.text:0000000000002BDF                 push    rbx
.text:0000000000002BE0                 lea     rbp, time_spec
.text:0000000000002BE7                 lea     r12, rfc_3339_format_7383 ; "%Y-%m-%d"
.text:0000000000002BEE                 lea     r13, iso_8601_format_7386 ; "%Y-%m-%d"
.text:0000000000002BF5                 xor     ebx, ebx
.text:0000000000002BF7                 sub     rsp, 0F8h
.text:0000000000002BFE                 mov     rdi, [rsi]
.text:0000000000002C01                 mov     rax, fs:28h
.text:0000000000002C0A                 mov     [rsp+128h+var_40], rax
.text:0000000000002C12                 xor     eax, eax
.text:0000000000002C14                 call    set_program_name
.text:0000000000002C19                 lea     rsi, aUserProvidedTi+1Dh ; locale
.text:0000000000002C20                 mov     edi, 6          ; category
.text:0000000000002C25                 call    _setlocale
.text:0000000000002C2A                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000002C31                 lea     rdi, domainname ; "coreutils"
.text:0000000000002C38                 call    _bindtextdomain
.text:0000000000002C3D                 lea     rdi, domainname ; "coreutils"
.text:0000000000002C44                 call    _textdomain
.text:0000000000002C49                 lea     rdi, close_stdout
.text:0000000000002C50                 call    atexit
.text:0000000000002C55                 mov     [rsp+128h+lineptr], 0
.text:0000000000002C5E                 mov     [rsp+128h+s1], 0
.text:0000000000002C67                 mov     byte ptr [rsp+128h+stream], 0
.text:0000000000002C6C                 mov     [rsp+128h+var_100], 0
.text:0000000000002C75                 mov     [rsp+128h+var_108], 0
.text:0000000000002C7E                 xchg    ax, ax
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: main+10E↓j
.text:0000000000002C80                                         ; main+139↓j ...
.text:0000000000002C80                 lea     rcx, long_options ; longopts
.text:0000000000002C87                 lea     rdx, short_options ; "d:f:I::r:Rs:u"
.text:0000000000002C8E                 xor     r8d, r8d        ; longind
.text:0000000000002C91                 mov     rsi, r14        ; argv
.text:0000000000002C94                 mov     edi, r15d       ; argc
.text:0000000000002C97                 call    _getopt_long
.text:0000000000002C9C                 cmp     eax, 0FFFFFFFFh
.text:0000000000002C9F                 jz      loc_2E6E
.text:0000000000002CA5                 cmp     eax, 66h ; 'f'
.text:0000000000002CA8                 jz      loc_2D98
.text:0000000000002CAE                 jle     short loc_2CE0
.text:0000000000002CB0                 cmp     eax, 75h ; 'u'
.text:0000000000002CB3                 jz      loc_2DB0
.text:0000000000002CB9                 jg      short loc_2D10
.text:0000000000002CBB                 cmp     eax, 72h ; 'r'
.text:0000000000002CBE                 jz      loc_2D80
.text:0000000000002CC4                 cmp     eax, 73h ; 's'
.text:0000000000002CC7                 jnz     loc_32CB
.text:0000000000002CCD                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002CD4                 mov     byte ptr [rsp+128h+stream], 1
.text:0000000000002CD9                 mov     [rsp+128h+var_100], rax
.text:0000000000002CDE                 jmp     short loc_2C80
.text:0000000000002CE0 ; ---------------------------------------------------------------------------
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: main+DE↑j
.text:0000000000002CE0                 cmp     eax, 49h ; 'I'
.text:0000000000002CE3                 jz      loc_2DF0
.text:0000000000002CE9                 jle     short loc_2D38
.text:0000000000002CEB                 cmp     eax, 52h ; 'R'
.text:0000000000002CEE                 jz      loc_2DD0
.text:0000000000002CF4                 cmp     eax, 64h ; 'd'
.text:0000000000002CF7                 jnz     loc_32CB
.text:0000000000002CFD                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002D04                 mov     [rsp+128h+var_108], rax
.text:0000000000002D09                 jmp     loc_2C80
.text:0000000000002D09 ; ---------------------------------------------------------------------------
.text:0000000000002D0E                 align 10h
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: main+E9↑j
.text:0000000000002D10                 cmp     eax, 80h
.text:0000000000002D15                 jz      loc_2E30
.text:0000000000002D1B                 cmp     eax, 81h
.text:0000000000002D20                 jnz     loc_32CB
.text:0000000000002D26                 or      cs:parse_datetime_flags, 1
.text:0000000000002D2D                 jmp     loc_2C80
.text:0000000000002D2D ; ---------------------------------------------------------------------------
.text:0000000000002D32                 align 8
.text:0000000000002D38
.text:0000000000002D38 loc_2D38:                               ; CODE XREF: main+119↑j
.text:0000000000002D38                 cmp     eax, 0FFFFFF7Dh
.text:0000000000002D3D                 jnz     loc_328C
.text:0000000000002D43                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002D4A                 mov     rcx, cs:Version
.text:0000000000002D51                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000002D58                 lea     rdx, unk_116F2
.text:0000000000002D5F                 lea     rsi, aDate      ; "date"
.text:0000000000002D66                 xor     r9d, r9d
.text:0000000000002D69                 xor     eax, eax
.text:0000000000002D6B                 call    version_etc
.text:0000000000002D70                 xor     edi, edi        ; status
.text:0000000000002D72                 call    _exit
.text:0000000000002D72 ; ---------------------------------------------------------------------------
.text:0000000000002D77                 align 20h
.text:0000000000002D80
.text:0000000000002D80 loc_2D80:                               ; CODE XREF: main+EE↑j
.text:0000000000002D80                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002D87                 mov     [rsp+128h+lineptr], rax
.text:0000000000002D8C                 jmp     loc_2C80
.text:0000000000002D8C ; ---------------------------------------------------------------------------
.text:0000000000002D91                 align 8
.text:0000000000002D98
.text:0000000000002D98 loc_2D98:                               ; CODE XREF: main+D8↑j
.text:0000000000002D98                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002D9F                 mov     [rsp+128h+s1], rax
.text:0000000000002DA4                 jmp     loc_2C80
.text:0000000000002DA4 ; ---------------------------------------------------------------------------
.text:0000000000002DA9                 align 10h
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: main+E3↑j
.text:0000000000002DB0                 lea     rdi, string     ; "TZ=UTC0"
.text:0000000000002DB7                 call    _putenv
.text:0000000000002DBC                 test    eax, eax
.text:0000000000002DBE                 jz      loc_2C80
.text:0000000000002DC4                 call    xalloc_die
.text:0000000000002DC4 ; ---------------------------------------------------------------------------
.text:0000000000002DC9                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: main+11E↑j
.text:0000000000002DD0                 lea     rax, rfc_email_format ; "%a, %d %b %Y %H:%M:%S %z"
.text:0000000000002DD7
.text:0000000000002DD7 loc_2DD7:                               ; CODE XREF: main+25C↓j
.text:0000000000002DD7                                         ; main+299↓j
.text:0000000000002DD7                 test    rbx, rbx
.text:0000000000002DDA                 jnz     loc_32D5
.text:0000000000002DE0                 mov     rbx, rax
.text:0000000000002DE3                 jmp     loc_2C80
.text:0000000000002DE3 ; ---------------------------------------------------------------------------
.text:0000000000002DE8                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: main+113↑j
.text:0000000000002DF0                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002DF7                 xor     eax, eax
.text:0000000000002DF9                 test    rsi, rsi
.text:0000000000002DFC                 jz      short loc_2E25
.text:0000000000002DFE                 mov     r9, cs:argmatch_die
.text:0000000000002E05                 lea     rdx, time_spec_string
.text:0000000000002E0C                 lea     rdi, aIso8601   ; "--iso-8601"
.text:0000000000002E13                 mov     r8d, 4
.text:0000000000002E19                 mov     rcx, rbp
.text:0000000000002E1C                 call    __xargmatch_internal
.text:0000000000002E21                 mov     eax, [rbp+rax*4+0]
.text:0000000000002E25
.text:0000000000002E25 loc_2E25:                               ; CODE XREF: main+22C↑j
.text:0000000000002E25                 shl     rax, 5
.text:0000000000002E29                 add     rax, r13
.text:0000000000002E2C                 jmp     short loc_2DD7
.text:0000000000002E2C ; ---------------------------------------------------------------------------
.text:0000000000002E2E                 align 10h
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: main+145↑j
.text:0000000000002E30                 mov     r9, cs:argmatch_die
.text:0000000000002E37                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002E3E                 lea     rcx, unk_12D78
.text:0000000000002E45                 lea     rdx, off_217210 ; "date"
.text:0000000000002E4C                 lea     rdi, aRfc3339   ; "--rfc-3339"
.text:0000000000002E53                 mov     r8d, 4
.text:0000000000002E59                 call    __xargmatch_internal
.text:0000000000002E5E                 mov     eax, [rbp+rax*4+8]
.text:0000000000002E62                 shl     rax, 5
.text:0000000000002E66                 add     rax, r12
.text:0000000000002E69                 jmp     loc_2DD7
.text:0000000000002E6E ; ---------------------------------------------------------------------------
.text:0000000000002E6E
.text:0000000000002E6E loc_2E6E:                               ; CODE XREF: main+CF↑j
.text:0000000000002E6E                 xor     ebp, ebp
.text:0000000000002E70                 cmp     [rsp+128h+var_108], 0
.text:0000000000002E76                 setnz   bpl
.text:0000000000002E7A                 xor     eax, eax
.text:0000000000002E7C                 cmp     [rsp+128h+s1], 0
.text:0000000000002E82                 setnz   al
.text:0000000000002E85                 add     ebp, eax
.text:0000000000002E87                 xor     eax, eax
.text:0000000000002E89                 cmp     [rsp+128h+lineptr], 0
.text:0000000000002E8F                 setnz   al
.text:0000000000002E92                 add     ebp, eax
.text:0000000000002E94                 cmp     ebp, 1
.text:0000000000002E97                 jg      loc_338F
.text:0000000000002E9D                 mov     edx, ebp
.text:0000000000002E9F                 and     edx, 1
.text:0000000000002EA2                 test    byte ptr [rsp+128h+stream], dl
.text:0000000000002EA6                 jnz     loc_3369
.text:0000000000002EAC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002EB3                 cmp     eax, r15d
.text:0000000000002EB6                 jge     short loc_2EE4
.text:0000000000002EB8                 lea     ecx, [rax+1]
.text:0000000000002EBB                 cmp     ecx, r15d
.text:0000000000002EBE                 jl      loc_329A
.text:0000000000002EC4                 mov     rdi, [r14+rax*8]
.text:0000000000002EC8                 cmp     byte ptr [rdi], 2Bh ; '+'
.text:0000000000002ECB                 jz      loc_3278
.text:0000000000002ED1                 test    dl, dl
.text:0000000000002ED3                 jnz     loc_331D
.text:0000000000002ED9                 cmp     byte ptr [rsp+128h+stream], 0
.text:0000000000002EDE                 jnz     loc_331D
.text:0000000000002EE4
.text:0000000000002EE4 loc_2EE4:                               ; CODE XREF: main+2E6↑j
.text:0000000000002EE4                                         ; main+6B7↓j
.text:0000000000002EE4                 test    rbx, rbx
.text:0000000000002EE7                 jz      loc_31D7
.text:0000000000002EED
.text:0000000000002EED loc_2EED:                               ; CODE XREF: main+617↓j
.text:0000000000002EED                                         ; main+624↓j
.text:0000000000002EED                 lea     rdi, name       ; "TZ"
.text:0000000000002EF4                 call    _getenv
.text:0000000000002EF9                 mov     rdi, rax        ; src
.text:0000000000002EFC                 mov     r13, rax
.text:0000000000002EFF                 call    tzalloc
.text:0000000000002F04                 mov     rdi, [rsp+128h+s1] ; s1
.text:0000000000002F09                 mov     r12, rax
.text:0000000000002F0C                 test    rdi, rdi
.text:0000000000002F0F                 jnz     loc_2FA8
.text:0000000000002F15                 movzx   eax, byte ptr [rsp+128h+stream]
.text:0000000000002F1A                 xor     ebp, 1
.text:0000000000002F1D                 xor     eax, 1
.text:0000000000002F20                 and     bpl, al
.text:0000000000002F23                 jz      loc_3117
.text:0000000000002F29                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002F30                 cmp     eax, r15d
.text:0000000000002F33                 jge     loc_31F9
.text:0000000000002F39                 mov     rax, [r14+rax*8]
.text:0000000000002F3D                 lea     rbp, [rsp+128h+tp]
.text:0000000000002F42                 mov     edx, 7
.text:0000000000002F47                 mov     rdi, rbp
.text:0000000000002F4A                 mov     rsi, rax
.text:0000000000002F4D                 mov     [rsp+128h+var_100], rax
.text:0000000000002F52                 call    posixtime
.text:0000000000002F57                 test    al, al
.text:0000000000002F59                 mov     [rsp+128h+tp.tv_nsec], 0
.text:0000000000002F62                 jz      loc_3244
.text:0000000000002F68
.text:0000000000002F68 loc_2F68:                               ; CODE XREF: main+590↓j
.text:0000000000002F68                 mov     rdi, rbp        ; tp
.text:0000000000002F6B                 call    settime
.text:0000000000002F70                 test    eax, eax
.text:0000000000002F72                 jz      loc_3166
.text:0000000000002F78                 lea     rsi, msgid      ; "cannot set "
.text:0000000000002F7F                 mov     edx, 5          ; category
.text:0000000000002F84                 xor     edi, edi        ; domainname
.text:0000000000002F86                 call    _dcgettext
.text:0000000000002F8B                 mov     rbp, rax
.text:0000000000002F8E                 call    ___errno_location
.text:0000000000002F93                 mov     esi, [rax]      ; errnum
.text:0000000000002F95                 mov     rdx, rbp        ; format
.text:0000000000002F98                 xor     edi, edi        ; status
.text:0000000000002F9A                 xor     eax, eax
.text:0000000000002F9C                 xor     ebp, ebp
.text:0000000000002F9E                 call    _error
.text:0000000000002FA3                 jmp     loc_316B
.text:0000000000002FA8 ; ---------------------------------------------------------------------------
.text:0000000000002FA8
.text:0000000000002FA8 loc_2FA8:                               ; CODE XREF: main+33F↑j
.text:0000000000002FA8                 lea     rsi, asc_1317D+3 ; s2
.text:0000000000002FAF                 call    _strcmp
.text:0000000000002FB4                 test    eax, eax
.text:0000000000002FB6                 jnz     loc_3187
.text:0000000000002FBC                 lea     rsi, aStandardInput ; "standard input"
.text:0000000000002FC3                 mov     edx, 5          ; category
.text:0000000000002FC8                 xor     edi, edi        ; domainname
.text:0000000000002FCA                 call    _dcgettext
.text:0000000000002FCF                 mov     [rsp+128h+s1], rax
.text:0000000000002FD4                 mov     rax, cs:stdin@@GLIBC_2_2_5
.text:0000000000002FDB                 mov     [rsp+128h+stream], rax
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: main+5D0↓j
.text:0000000000002FE0                 lea     rax, [rsp+128h+ptr]
.text:0000000000002FE5                 lea     r15, [rsp+128h+n]
.text:0000000000002FEA                 mov     [rsp+128h+ptr], 0
.text:0000000000002FF3                 mov     [rsp+128h+n], 0
.text:0000000000002FFC                 mov     ebp, 1
.text:0000000000003001                 mov     [rsp+128h+var_100], rbx
.text:0000000000003006                 mov     [rsp+128h+lineptr], rax
.text:000000000000300B                 lea     rax, [rsp+128h+tp]
.text:0000000000003010                 mov     [rsp+128h+var_108], rax
.text:0000000000003015                 nop     dword ptr [rax]
.text:0000000000003018
.text:0000000000003018 loc_3018:                               ; CODE XREF: main+4D3↓j
.text:0000000000003018                                         ; main+4F5↓j
.text:0000000000003018                 mov     rcx, [rsp+128h+stream] ; stream
.text:000000000000301D                 mov     rdi, [rsp+128h+lineptr] ; lineptr
.text:0000000000003022                 mov     edx, 0Ah        ; delimiter
.text:0000000000003027                 mov     rsi, r15        ; n
.text:000000000000302A                 call    ___getdelim
.text:000000000000302F                 test    rax, rax
.text:0000000000003032                 mov     r14, rax
.text:0000000000003035                 js      loc_30CA
.text:000000000000303B                 mov     ecx, cs:parse_datetime_flags
.text:0000000000003041                 mov     rsi, [rsp+128h+ptr]
.text:0000000000003046                 xor     edx, edx
.text:0000000000003048                 mov     rdi, [rsp+128h+var_108]
.text:000000000000304D                 mov     r9, r13
.text:0000000000003050                 mov     r8, r12
.text:0000000000003053                 call    parse_datetime2
.text:0000000000003058                 test    al, al
.text:000000000000305A                 mov     ebx, eax
.text:000000000000305C                 jnz     short loc_30A8
.text:000000000000305E                 mov     rdi, [rsp+128h+ptr]
.text:0000000000003063                 lea     rax, [rdi+r14-1]
.text:0000000000003068                 cmp     byte ptr [rax], 0Ah
.text:000000000000306B                 jnz     short loc_3075
.text:000000000000306D                 mov     byte ptr [rax], 0
.text:0000000000003070                 mov     rdi, [rsp+128h+ptr]
.text:0000000000003075
.text:0000000000003075 loc_3075:                               ; CODE XREF: main+49B↑j
.text:0000000000003075                 call    quote
.text:000000000000307A                 lea     rsi, aInvalidDateS ; "invalid date %s"
.text:0000000000003081                 mov     rbp, rax
.text:0000000000003084                 mov     edx, 5          ; category
.text:0000000000003089                 xor     edi, edi        ; domainname
.text:000000000000308B                 call    _dcgettext
.text:0000000000003090                 mov     rcx, rbp
.text:0000000000003093                 mov     rdx, rax        ; format
.text:0000000000003096                 xor     esi, esi        ; errnum
.text:0000000000003098                 xor     edi, edi        ; status
.text:000000000000309A                 xor     eax, eax
.text:000000000000309C                 mov     ebp, ebx
.text:000000000000309E                 call    _error
.text:00000000000030A3                 jmp     loc_3018
.text:00000000000030A8 ; ---------------------------------------------------------------------------
.text:00000000000030A8
.text:00000000000030A8 loc_30A8:                               ; CODE XREF: main+48C↑j
.text:00000000000030A8                 mov     rsi, [rsp+128h+tp.tv_sec]
.text:00000000000030AD                 mov     rdx, [rsp+128h+tp.tv_nsec]
.text:00000000000030B2                 mov     rcx, r12
.text:00000000000030B5                 mov     rdi, [rsp+128h+var_100]
.text:00000000000030BA                 call    show_date
.text:00000000000030BF                 and     eax, ebp
.text:00000000000030C1                 mov     ebx, eax
.text:00000000000030C3                 mov     ebp, ebx
.text:00000000000030C5                 jmp     loc_3018
.text:00000000000030CA ; ---------------------------------------------------------------------------
.text:00000000000030CA
.text:00000000000030CA loc_30CA:                               ; CODE XREF: main+465↑j
.text:00000000000030CA                 mov     rdi, [rsp+128h+stream] ; stream
.text:00000000000030CF                 call    rpl_fclose
.text:00000000000030D4                 add     eax, 1
.text:00000000000030D7                 jz      loc_3338
.text:00000000000030DD                 mov     rdi, [rsp+128h+ptr] ; ptr
.text:00000000000030E2                 call    _free
.text:00000000000030E7
.text:00000000000030E7 loc_30E7:                               ; CODE XREF: main+5B2↓j
.text:00000000000030E7                 xor     ebp, 1
.text:00000000000030EA                 mov     rcx, [rsp+128h+var_40]
.text:00000000000030F2                 xor     rcx, fs:28h
.text:00000000000030FB                 movzx   eax, bpl
.text:00000000000030FF                 jnz     loc_3333
.text:0000000000003105                 add     rsp, 0F8h
.text:000000000000310C                 pop     rbx
.text:000000000000310D                 pop     rbp
.text:000000000000310E                 pop     r12
.text:0000000000003110                 pop     r13
.text:0000000000003112                 pop     r14
.text:0000000000003114                 pop     r15
.text:0000000000003116                 retn
.text:0000000000003117 ; ---------------------------------------------------------------------------
.text:0000000000003117
.text:0000000000003117 loc_3117:                               ; CODE XREF: main+353↑j
.text:0000000000003117                 mov     rsi, [rsp+128h+lineptr] ; filename
.text:000000000000311C                 test    rsi, rsi
.text:000000000000311F                 jz      loc_3208
.text:0000000000003125                 lea     rdx, [rsp+128h+stat_buf] ; stat_buf
.text:000000000000312A                 mov     edi, 1          ; ver
.text:000000000000312F                 call    ___xstat
.text:0000000000003134                 test    eax, eax
.text:0000000000003136                 jnz     loc_339D
.text:000000000000313C                 mov     rax, [rsp+128h+stat_buf.st_mtim.tv_sec]
.text:0000000000003144                 mov     [rsp+128h+tp.tv_sec], rax
.text:0000000000003149                 mov     rax, [rsp+128h+stat_buf.st_mtim.tv_nsec]
.text:0000000000003151                 mov     [rsp+128h+tp.tv_nsec], rax
.text:0000000000003156
.text:0000000000003156 loc_3156:                               ; CODE XREF: main+66E↓j
.text:0000000000003156                 cmp     byte ptr [rsp+128h+stream], 0
.text:000000000000315B                 lea     rbp, [rsp+128h+tp]
.text:0000000000003160                 jnz     loc_2F68
.text:0000000000003166
.text:0000000000003166 loc_3166:                               ; CODE XREF: main+3A2↑j
.text:0000000000003166                 mov     ebp, 1
.text:000000000000316B
.text:000000000000316B loc_316B:                               ; CODE XREF: main+3D3↑j
.text:000000000000316B                                         ; main+633↓j
.text:000000000000316B                 mov     rsi, [rsp+128h+tp.tv_sec]
.text:0000000000003170                 mov     rdx, [rsp+128h+tp.tv_nsec]
.text:0000000000003175                 mov     rcx, r12
.text:0000000000003178                 mov     rdi, rbx
.text:000000000000317B                 call    show_date
.text:0000000000003180                 and     ebp, eax
.text:0000000000003182                 jmp     loc_30E7
.text:0000000000003187 ; ---------------------------------------------------------------------------
.text:0000000000003187
.text:0000000000003187 loc_3187:                               ; CODE XREF: main+3E6↑j
.text:0000000000003187                 mov     rdi, [rsp+128h+s1] ; filename
.text:000000000000318C                 lea     rsi, aNumber+5  ; modes
.text:0000000000003193                 call    _fopen
.text:0000000000003198                 test    rax, rax
.text:000000000000319B                 mov     [rsp+128h+stream], rax
.text:00000000000031A0                 jnz     loc_2FE0
.text:00000000000031A6                 mov     rdx, [rsp+128h+s1]
.text:00000000000031AB                 mov     esi, 3
.text:00000000000031B0                 xor     edi, edi
.text:00000000000031B2                 call    quotearg_n_style_colon
.text:00000000000031B7                 mov     rbx, rax
.text:00000000000031BA                 call    ___errno_location
.text:00000000000031BF                 mov     esi, [rax]      ; errnum
.text:00000000000031C1                 lea     rdx, aS_0+2     ; format
.text:00000000000031C8                 mov     rcx, rbx
.text:00000000000031CB                 mov     edi, 1          ; status
.text:00000000000031D0                 xor     eax, eax
.text:00000000000031D2                 call    _error
.text:00000000000031D7
.text:00000000000031D7 loc_31D7:                               ; CODE XREF: main+317↑j
.text:00000000000031D7                 mov     edi, 2006Ch     ; item
.text:00000000000031DC                 call    _nl_langinfo
.text:00000000000031E1                 cmp     byte ptr [rax], 0
.text:00000000000031E4                 mov     rbx, rax
.text:00000000000031E7                 jnz     loc_2EED
.text:00000000000031ED                 lea     rbx, aABEHMSZY  ; "%a %b %e %H:%M:%S %Z %Y"
.text:00000000000031F4                 jmp     loc_2EED
.text:00000000000031F9 ; ---------------------------------------------------------------------------
.text:00000000000031F9
.text:00000000000031F9 loc_31F9:                               ; CODE XREF: main+363↑j
.text:00000000000031F9                 lea     rdi, [rsp+128h+tp] ; tp
.text:00000000000031FE                 call    gettime
.text:0000000000003203                 jmp     loc_316B
.text:0000000000003208 ; ---------------------------------------------------------------------------
.text:0000000000003208
.text:0000000000003208 loc_3208:                               ; CODE XREF: main+54F↑j
.text:0000000000003208                 mov     rcx, [rsp+128h+var_100]
.text:000000000000320D                 mov     rax, [rsp+128h+var_108]
.text:0000000000003212                 lea     rbp, [rsp+128h+tp]
.text:0000000000003217                 mov     r9, r13
.text:000000000000321A                 mov     r8, r12
.text:000000000000321D                 mov     rdi, rbp
.text:0000000000003220                 test    rcx, rcx
.text:0000000000003223                 cmovnz  rax, rcx
.text:0000000000003227                 mov     ecx, cs:parse_datetime_flags
.text:000000000000322D                 xor     edx, edx
.text:000000000000322F                 mov     rsi, rax
.text:0000000000003232                 mov     [rsp+128h+var_100], rax
.text:0000000000003237                 call    parse_datetime2
.text:000000000000323C                 test    al, al
.text:000000000000323E                 jnz     loc_3156
.text:0000000000003244
.text:0000000000003244 loc_3244:                               ; CODE XREF: main+392↑j
.text:0000000000003244                 mov     rdi, [rsp+128h+var_100]
.text:0000000000003249                 call    quote
.text:000000000000324E                 lea     rsi, aInvalidDateS ; "invalid date %s"
.text:0000000000003255                 mov     rbx, rax
.text:0000000000003258                 mov     edx, 5          ; category
.text:000000000000325D                 xor     edi, edi        ; domainname
.text:000000000000325F                 call    _dcgettext
.text:0000000000003264                 mov     rcx, rbx
.text:0000000000003267                 mov     rdx, rax        ; format
.text:000000000000326A                 xor     esi, esi        ; errnum
.text:000000000000326C                 mov     edi, 1          ; status
.text:0000000000003271                 xor     eax, eax
.text:0000000000003273                 call    _error
.text:0000000000003278
.text:0000000000003278 loc_3278:                               ; CODE XREF: main+2FB↑j
.text:0000000000003278                 test    rbx, rbx
.text:000000000000327B                 jnz     short loc_32F9
.text:000000000000327D                 mov     cs:optind@@GLIBC_2_2_5, ecx
.text:0000000000003283                 lea     rbx, [rdi+1]
.text:0000000000003287                 jmp     loc_2EE4
.text:000000000000328C ; ---------------------------------------------------------------------------
.text:000000000000328C
.text:000000000000328C loc_328C:                               ; CODE XREF: main+16D↑j
.text:000000000000328C                 cmp     eax, 0FFFFFF7Eh
.text:0000000000003291                 jnz     short loc_32CB
.text:0000000000003293                 xor     edi, edi        ; status
.text:0000000000003295                 call    usage
.text:000000000000329A ; ---------------------------------------------------------------------------
.text:000000000000329A
.text:000000000000329A loc_329A:                               ; CODE XREF: main+2EE↑j
.text:000000000000329A                 mov     rdi, [r14+rax*8+8]
.text:000000000000329F                 call    quote
.text:00000000000032A4                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:00000000000032AB                 mov     rbx, rax
.text:00000000000032AE                 mov     edx, 5          ; category
.text:00000000000032B3
.text:00000000000032B3 loc_32B3:                               ; CODE XREF: main+761↓j
.text:00000000000032B3                 xor     edi, edi        ; domainname
.text:00000000000032B5                 call    _dcgettext
.text:00000000000032BA                 mov     rcx, rbx
.text:00000000000032BD                 mov     rdx, rax        ; format
.text:00000000000032C0                 xor     esi, esi        ; errnum
.text:00000000000032C2                 xor     edi, edi        ; status
.text:00000000000032C4                 xor     eax, eax
.text:00000000000032C6                 call    _error
.text:00000000000032CB
.text:00000000000032CB loc_32CB:                               ; CODE XREF: main+F7↑j
.text:00000000000032CB                                         ; main+127↑j ...
.text:00000000000032CB                 mov     edi, 1          ; status
.text:00000000000032D0                 call    usage
.text:00000000000032D5 ; ---------------------------------------------------------------------------
.text:00000000000032D5
.text:00000000000032D5 loc_32D5:                               ; CODE XREF: main+20A↑j
.text:00000000000032D5                 lea     rsi, aMultipleOutput ; "multiple output formats specified"
.text:00000000000032DC                 mov     edx, 5          ; category
.text:00000000000032E1                 xor     edi, edi        ; domainname
.text:00000000000032E3                 call    _dcgettext
.text:00000000000032E8                 xor     esi, esi        ; errnum
.text:00000000000032EA                 mov     rdx, rax        ; format
.text:00000000000032ED                 mov     edi, 1          ; status
.text:00000000000032F2                 xor     eax, eax
.text:00000000000032F4                 call    _error
.text:00000000000032F9
.text:00000000000032F9 loc_32F9:                               ; CODE XREF: main+6AB↑j
.text:00000000000032F9                 lea     rsi, aMultipleOutput ; "multiple output formats specified"
.text:0000000000003300                 mov     edx, 5          ; category
.text:0000000000003305                 xor     edi, edi        ; domainname
.text:0000000000003307                 call    _dcgettext
.text:000000000000330C                 xor     esi, esi        ; errnum
.text:000000000000330E                 mov     rdx, rax        ; format
.text:0000000000003311                 mov     edi, 1          ; status
.text:0000000000003316                 xor     eax, eax
.text:0000000000003318                 call    _error
.text:000000000000331D
.text:000000000000331D loc_331D:                               ; CODE XREF: main+303↑j
.text:000000000000331D                                         ; main+30E↑j
.text:000000000000331D                 call    quote
.text:0000000000003322                 mov     edx, 5
.text:0000000000003327                 mov     rbx, rax
.text:000000000000332A                 lea     rsi, aTheArgumentSLa ; "the argument %s lacks a leading '+';\nw"...
.text:0000000000003331                 jmp     short loc_32B3
.text:0000000000003333 ; ---------------------------------------------------------------------------
.text:0000000000003333
.text:0000000000003333 loc_3333:                               ; CODE XREF: main+52F↑j
.text:0000000000003333                 call    ___stack_chk_fail
.text:0000000000003338 ; ---------------------------------------------------------------------------
.text:0000000000003338
.text:0000000000003338 loc_3338:                               ; CODE XREF: main+507↑j
.text:0000000000003338                 mov     rdx, [rsp+128h+s1]
.text:000000000000333D                 mov     esi, 3
.text:0000000000003342                 xor     edi, edi
.text:0000000000003344                 call    quotearg_n_style_colon
.text:0000000000003349                 mov     rbx, rax
.text:000000000000334C                 call    ___errno_location
.text:0000000000003351                 mov     esi, [rax]      ; errnum
.text:0000000000003353                 lea     rdx, aS_0+2     ; format
.text:000000000000335A                 mov     rcx, rbx
.text:000000000000335D                 mov     edi, 1          ; status
.text:0000000000003362                 xor     eax, eax
.text:0000000000003364                 call    _error
.text:0000000000003369
.text:0000000000003369 loc_3369:                               ; CODE XREF: main+2D6↑j
.text:0000000000003369                 lea     rsi, aTheOptionsToPr ; "the options to print and set the time m"...
.text:0000000000003370                 mov     edx, 5          ; category
.text:0000000000003375
.text:0000000000003375 loc_3375:                               ; CODE XREF: main+7CB↓j
.text:0000000000003375                 xor     edi, edi        ; domainname
.text:0000000000003377                 call    _dcgettext
.text:000000000000337C                 xor     esi, esi        ; errnum
.text:000000000000337E                 mov     rdx, rax        ; format
.text:0000000000003381                 xor     edi, edi        ; status
.text:0000000000003383                 xor     eax, eax
.text:0000000000003385                 call    _error
.text:000000000000338A                 jmp     loc_32CB
.text:000000000000338F ; ---------------------------------------------------------------------------
.text:000000000000338F
.text:000000000000338F loc_338F:                               ; CODE XREF: main+2C7↑j
.text:000000000000338F                 mov     edx, 5
.text:0000000000003394                 lea     rsi, aTheOptionsToSp ; "the options to specify dates for printi"...
.text:000000000000339B                 jmp     short loc_3375
.text:000000000000339D ; ---------------------------------------------------------------------------
.text:000000000000339D
.text:000000000000339D loc_339D:                               ; CODE XREF: main+566↑j
.text:000000000000339D                 mov     rdx, [rsp+128h+lineptr]
.text:00000000000033A2                 mov     esi, 3
.text:00000000000033A7                 xor     edi, edi
.text:00000000000033A9                 call    quotearg_n_style_colon
.text:00000000000033AE                 mov     rbx, rax
.text:00000000000033B1                 call    ___errno_location
.text:00000000000033B6                 mov     esi, [rax]      ; errnum
.text:00000000000033B8                 lea     rdx, aS_0+2     ; format
.text:00000000000033BF                 mov     rcx, rbx
.text:00000000000033C2                 mov     edi, 1          ; status
.text:00000000000033C7                 xor     eax, eax
.text:00000000000033C9                 call    _error
.text:00000000000033C9 ; } // starts at 2BD0
.text:00000000000033CE                 xchg    ax, ax
.text:00000000000033CE main            endp ; sp-analysis failed
.text:00000000000033CE
.text:00000000000033D0
.text:00000000000033D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033D0
.text:00000000000033D0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000033D0
.text:00000000000033D0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000033D0                 public start
.text:00000000000033D0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000033D0 ; __unwind {
.text:00000000000033D0                 xor     ebp, ebp
.text:00000000000033D2                 mov     r9, rdx         ; rtld_fini
.text:00000000000033D5                 pop     rsi             ; argc
.text:00000000000033D6                 mov     rdx, rsp        ; ubp_av
.text:00000000000033D9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000033DD                 push    rax
.text:00000000000033DE                 push    rsp             ; stack_end
.text:00000000000033DF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000033E6                 lea     rcx, __libc_csu_init ; init
.text:00000000000033ED                 lea     rdi, main       ; main
.text:00000000000033F4                 call    cs:__libc_start_main_ptr
.text:00000000000033FA                 hlt
.text:00000000000033FA ; } // starts at 33D0
.text:00000000000033FA start           endp
.text:00000000000033FA
.text:00000000000033FA ; ---------------------------------------------------------------------------
.text:00000000000033FB                 align 20h
.text:0000000000003400
.text:0000000000003400 ; =============== S U B R O U T I N E =======================================
.text:0000000000003400
.text:0000000000003400 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003400
.text:0000000000003400 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_34B3↓p
.text:0000000000003400                 lea     rdi, __bss_start
.text:0000000000003407                 push    rbp
.text:0000000000003408                 lea     rax, __bss_start
.text:000000000000340F                 cmp     rax, rdi
.text:0000000000003412                 mov     rbp, rsp
.text:0000000000003415                 jz      short loc_3430
.text:0000000000003417                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000341E                 test    rax, rax
.text:0000000000003421                 jz      short loc_3430
.text:0000000000003423                 pop     rbp
.text:0000000000003424                 jmp     rax
.text:0000000000003424 ; ---------------------------------------------------------------------------
.text:0000000000003426                 align 10h
.text:0000000000003430
.text:0000000000003430 loc_3430:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000003430                                         ; deregister_tm_clones+21↑j
.text:0000000000003430                 pop     rbp
.text:0000000000003431                 retn
.text:0000000000003431 deregister_tm_clones endp
.text:0000000000003431
.text:0000000000003431 ; ---------------------------------------------------------------------------
.text:0000000000003432                 align 20h
.text:0000000000003440
.text:0000000000003440 ; =============== S U B R O U T I N E =======================================
.text:0000000000003440
.text:0000000000003440 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003440
.text:0000000000003440 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000003440                 lea     rdi, __bss_start
.text:0000000000003447                 lea     rsi, __bss_start
.text:000000000000344E                 push    rbp
.text:000000000000344F                 sub     rsi, rdi
.text:0000000000003452                 mov     rbp, rsp
.text:0000000000003455                 sar     rsi, 3
.text:0000000000003459                 mov     rax, rsi
.text:000000000000345C                 shr     rax, 3Fh
.text:0000000000003460                 add     rsi, rax
.text:0000000000003463                 sar     rsi, 1
.text:0000000000003466                 jz      short loc_3480
.text:0000000000003468                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000346F                 test    rax, rax
.text:0000000000003472                 jz      short loc_3480
.text:0000000000003474                 pop     rbp
.text:0000000000003475                 jmp     rax
.text:0000000000003475 ; ---------------------------------------------------------------------------
.text:0000000000003477                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003480                                         ; register_tm_clones+32↑j
.text:0000000000003480                 pop     rbp
.text:0000000000003481                 retn
.text:0000000000003481 register_tm_clones endp
.text:0000000000003481
.text:0000000000003481 ; ---------------------------------------------------------------------------
.text:0000000000003482                 align 10h
.text:0000000000003490
.text:0000000000003490 ; =============== S U B R O U T I N E =======================================
.text:0000000000003490
.text:0000000000003490 ; Attributes: info_from_lumina
.text:0000000000003490
.text:0000000000003490 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000003490                 cmp     cs:completed_7697, 0
.text:0000000000003497                 jnz     short locret_34C8
.text:0000000000003499                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000034A1                 push    rbp
.text:00000000000034A2                 mov     rbp, rsp
.text:00000000000034A5                 jz      short loc_34B3
.text:00000000000034A7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000034AE                 call    __cxa_finalize
.text:00000000000034B3
.text:00000000000034B3 loc_34B3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000034B3                 call    deregister_tm_clones
.text:00000000000034B8                 mov     cs:completed_7697, 1
.text:00000000000034BF                 pop     rbp
.text:00000000000034C0                 retn
.text:00000000000034C0 ; ---------------------------------------------------------------------------
.text:00000000000034C1                 align 8
.text:00000000000034C8
.text:00000000000034C8 locret_34C8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000034C8                 rep retn
.text:00000000000034C8 __do_global_dtors_aux endp
.text:00000000000034C8
.text:00000000000034C8 ; ---------------------------------------------------------------------------
.text:00000000000034CA                 align 10h
.text:00000000000034D0
.text:00000000000034D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034D0
.text:00000000000034D0 ; Attributes: bp-based frame
.text:00000000000034D0
.text:00000000000034D0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000034D0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000034D0                 push    rbp
.text:00000000000034D1                 mov     rbp, rsp
.text:00000000000034D4                 pop     rbp
.text:00000000000034D5                 jmp     register_tm_clones
.text:00000000000034D5 frame_dummy     endp
.text:00000000000034D5
.text:00000000000034D5 ; ---------------------------------------------------------------------------
.text:00000000000034DA                 align 20h
.text:00000000000034E0
.text:00000000000034E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034E0
.text:00000000000034E0
.text:00000000000034E0 show_date       proc near               ; CODE XREF: main+4EA↑p
.text:00000000000034E0                                         ; main+5AB↑p
.text:00000000000034E0
.text:00000000000034E0 var_88          = qword ptr -88h
.text:00000000000034E0 var_80          = qword ptr -80h
.text:00000000000034E0 var_78          = byte ptr -78h
.text:00000000000034E0 var_38          = byte ptr -38h
.text:00000000000034E0 var_20          = qword ptr -20h
.text:00000000000034E0
.text:00000000000034E0 ; __unwind {
.text:00000000000034E0                 push    r12
.text:00000000000034E2                 push    rbp
.text:00000000000034E3                 mov     r12, rdi
.text:00000000000034E6                 push    rbx
.text:00000000000034E7                 mov     rdi, rcx
.text:00000000000034EA                 mov     rbp, rcx
.text:00000000000034ED                 sub     rsp, 70h
.text:00000000000034F1                 lea     rbx, [rsp+88h+var_78]
.text:00000000000034F6                 mov     [rsp+88h+var_88], rsi
.text:00000000000034FA                 mov     [rsp+88h+var_80], rdx
.text:00000000000034FF                 mov     rsi, rsp
.text:0000000000003502                 mov     rdx, rbx
.text:0000000000003505                 mov     rax, fs:28h
.text:000000000000350E                 mov     [rsp+88h+var_20], rax
.text:0000000000003513                 xor     eax, eax
.text:0000000000003515                 call    localtime_rz
.text:000000000000351A                 test    rax, rax
.text:000000000000351D                 jz      short loc_3590
.text:000000000000351F                 lea     rax, rfc_email_format ; "%a, %d %b %Y %H:%M:%S %z"
.text:0000000000003526                 cmp     r12, rax
.text:0000000000003529                 jz      loc_35D8
.text:000000000000352F                 mov     r8d, dword ptr [rsp+88h+var_80]
.text:0000000000003534                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000353B                 mov     rcx, rbp
.text:000000000000353E                 mov     rdx, rbx
.text:0000000000003541                 mov     rsi, r12
.text:0000000000003544                 call    fprintftime
.text:0000000000003549
.text:0000000000003549 loc_3549:                               ; CODE XREF: show_date+134↓j
.text:0000000000003549                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003550                 mov     rax, [rdi+28h]
.text:0000000000003554                 cmp     rax, [rdi+30h]
.text:0000000000003558                 jnb     loc_3620
.text:000000000000355E                 lea     rdx, [rax+1]
.text:0000000000003562                 mov     [rdi+28h], rdx
.text:0000000000003566                 mov     byte ptr [rax], 0Ah
.text:0000000000003569                 mov     eax, 1
.text:000000000000356E
.text:000000000000356E loc_356E:                               ; CODE XREF: show_date+EF↓j
.text:000000000000356E                                         ; show_date+14F↓j
.text:000000000000356E                 mov     rcx, [rsp+88h+var_20]
.text:0000000000003573                 xor     rcx, fs:28h
.text:000000000000357C                 jnz     loc_3634
.text:0000000000003582                 add     rsp, 70h
.text:0000000000003586                 pop     rbx
.text:0000000000003587                 pop     rbp
.text:0000000000003588                 pop     r12
.text:000000000000358A                 retn
.text:000000000000358A ; ---------------------------------------------------------------------------
.text:000000000000358B                 align 10h
.text:0000000000003590
.text:0000000000003590 loc_3590:                               ; CODE XREF: show_date+3D↑j
.text:0000000000003590                 mov     rdi, [rsp+88h+var_88]
.text:0000000000003594                 lea     rsi, [rsp+88h+var_38]
.text:0000000000003599                 call    imaxtostr
.text:000000000000359E                 mov     rdi, rax
.text:00000000000035A1                 call    quote
.text:00000000000035A6                 lea     rsi, aTimeSIsOutOfRa ; "time %s is out of range"
.text:00000000000035AD                 mov     rbx, rax
.text:00000000000035B0                 mov     edx, 5          ; category
.text:00000000000035B5                 xor     edi, edi        ; domainname
.text:00000000000035B7                 call    _dcgettext
.text:00000000000035BC                 mov     rcx, rbx
.text:00000000000035BF                 mov     rdx, rax        ; format
.text:00000000000035C2                 xor     esi, esi        ; errnum
.text:00000000000035C4                 xor     eax, eax
.text:00000000000035C6                 xor     edi, edi        ; status
.text:00000000000035C8                 call    _error
.text:00000000000035CD                 xor     eax, eax
.text:00000000000035CF                 jmp     short loc_356E
.text:00000000000035CF ; ---------------------------------------------------------------------------
.text:00000000000035D1                 align 8
.text:00000000000035D8
.text:00000000000035D8 loc_35D8:                               ; CODE XREF: show_date+49↑j
.text:00000000000035D8                 lea     rsi, locale     ; "C"
.text:00000000000035DF                 mov     edi, 2          ; category
.text:00000000000035E4                 call    _setlocale
.text:00000000000035E9                 mov     r8d, dword ptr [rsp+88h+var_80]
.text:00000000000035EE                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000035F5                 mov     rsi, r12
.text:00000000000035F8                 mov     rcx, rbp
.text:00000000000035FB                 mov     rdx, rbx
.text:00000000000035FE                 call    fprintftime
.text:0000000000003603                 lea     rsi, aUserProvidedTi+1Dh ; locale
.text:000000000000360A                 mov     edi, 2          ; category
.text:000000000000360F                 call    _setlocale
.text:0000000000003614                 jmp     loc_3549
.text:0000000000003614 ; ---------------------------------------------------------------------------
.text:0000000000003619                 align 20h
.text:0000000000003620
.text:0000000000003620 loc_3620:                               ; CODE XREF: show_date+78↑j
.text:0000000000003620                 mov     esi, 0Ah        ; int
.text:0000000000003625                 call    ___overflow
.text:000000000000362A                 mov     eax, 1
.text:000000000000362F                 jmp     loc_356E
.text:0000000000003634 ; ---------------------------------------------------------------------------
.text:0000000000003634
.text:0000000000003634 loc_3634:                               ; CODE XREF: show_date+9C↑j
.text:0000000000003634                 call    ___stack_chk_fail
.text:0000000000003634 ; } // starts at 34E0
.text:0000000000003634 show_date       endp
.text:0000000000003634
.text:0000000000003634 ; ---------------------------------------------------------------------------
.text:0000000000003639                 align 20h
.text:0000000000003640
.text:0000000000003640 ; =============== S U B R O U T I N E =======================================
.text:0000000000003640
.text:0000000000003640 ; Attributes: noreturn
.text:0000000000003640
.text:0000000000003640 ; void __fastcall __noreturn usage(int status)
.text:0000000000003640                 public usage
.text:0000000000003640 usage           proc near               ; CODE XREF: main+6C5↑p
.text:0000000000003640                                         ; main+700↑p ...
.text:0000000000003640
.text:0000000000003640 var_A8          = qword ptr -0A8h
.text:0000000000003640 var_A0          = qword ptr -0A0h
.text:0000000000003640 var_98          = qword ptr -98h
.text:0000000000003640 var_90          = qword ptr -90h
.text:0000000000003640 var_88          = qword ptr -88h
.text:0000000000003640 var_80          = qword ptr -80h
.text:0000000000003640 var_78          = qword ptr -78h
.text:0000000000003640 var_70          = qword ptr -70h
.text:0000000000003640 var_68          = qword ptr -68h
.text:0000000000003640 var_60          = qword ptr -60h
.text:0000000000003640 var_58          = qword ptr -58h
.text:0000000000003640 var_50          = qword ptr -50h
.text:0000000000003640 var_48          = qword ptr -48h
.text:0000000000003640 var_40          = qword ptr -40h
.text:0000000000003640 var_30          = qword ptr -30h
.text:0000000000003640
.text:0000000000003640 ; __unwind {
.text:0000000000003640                 push    r13
.text:0000000000003642                 push    r12
.text:0000000000003644                 mov     edx, 5          ; category
.text:0000000000003649                 push    rbp
.text:000000000000364A                 push    rbx
.text:000000000000364B                 mov     ebp, edi
.text:000000000000364D                 sub     rsp, 88h
.text:0000000000003654                 mov     rbx, cs:program_name
.text:000000000000365B                 mov     rax, fs:28h
.text:0000000000003664                 mov     [rsp+0A8h+var_30], rax
.text:0000000000003669                 xor     eax, eax
.text:000000000000366B                 test    edi, edi
.text:000000000000366D                 jz      short loc_369D
.text:000000000000366F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000003676                 xor     edi, edi        ; domainname
.text:0000000000003678                 call    _dcgettext
.text:000000000000367D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003684                 mov     rdx, rax
.text:0000000000003687                 mov     rcx, rbx
.text:000000000000368A                 mov     esi, 1
.text:000000000000368F                 xor     eax, eax
.text:0000000000003691                 call    ___fprintf_chk
.text:0000000000003696
.text:0000000000003696 loc_3696:                               ; CODE XREF: usage+5D6↓j
.text:0000000000003696                 mov     edi, ebp        ; status
.text:0000000000003698                 call    _exit
.text:000000000000369D ; ---------------------------------------------------------------------------
.text:000000000000369D
.text:000000000000369D loc_369D:                               ; CODE XREF: usage+2D↑j
.text:000000000000369D                 lea     rsi, aUsageSOptionFo ; "Usage: %s [OPTION]... [+FORMAT]\n  or: "...
.text:00000000000036A4                 xor     edi, edi        ; domainname
.text:00000000000036A6                 call    _dcgettext
.text:00000000000036AB                 mov     rcx, rbx
.text:00000000000036AE                 mov     rdx, rbx
.text:00000000000036B1                 mov     rsi, rax
.text:00000000000036B4                 mov     edi, 1
.text:00000000000036B9                 xor     eax, eax
.text:00000000000036BB                 call    ___printf_chk
.text:00000000000036C0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000036C7                 lea     rsi, aDisplayTheCurr ; "Display the current time in the given F"...
.text:00000000000036CE                 mov     edx, 5          ; category
.text:00000000000036D3                 xor     edi, edi        ; domainname
.text:00000000000036D5                 call    _dcgettext
.text:00000000000036DA                 mov     rsi, rbx        ; stream
.text:00000000000036DD                 mov     rdi, rax        ; s
.text:00000000000036E0                 call    _fputs_unlocked
.text:00000000000036E5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000036EC                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000036F3                 mov     edx, 5          ; category
.text:00000000000036F8                 xor     edi, edi        ; domainname
.text:00000000000036FA                 call    _dcgettext
.text:00000000000036FF                 mov     rsi, rbx        ; stream
.text:0000000000003702                 mov     rdi, rax        ; s
.text:0000000000003705                 call    _fputs_unlocked
.text:000000000000370A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003711                 lea     rsi, aDDateStringDis ; "  -d, --date=STRING          display ti"...
.text:0000000000003718                 mov     edx, 5          ; category
.text:000000000000371D                 xor     edi, edi        ; domainname
.text:000000000000371F                 call    _dcgettext
.text:0000000000003724                 mov     rsi, rbx        ; stream
.text:0000000000003727                 mov     rdi, rax        ; s
.text:000000000000372A                 call    _fputs_unlocked
.text:000000000000372F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003736                 lea     rsi, aDebugAnnotateT ; "      --debug                annotate t"...
.text:000000000000373D                 mov     edx, 5          ; category
.text:0000000000003742                 xor     edi, edi        ; domainname
.text:0000000000003744                 call    _dcgettext
.text:0000000000003749                 mov     rsi, rbx        ; stream
.text:000000000000374C                 mov     rdi, rax        ; s
.text:000000000000374F                 call    _fputs_unlocked
.text:0000000000003754                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000375B                 lea     rsi, aFFileDatefileL ; "  -f, --file=DATEFILE        like --dat"...
.text:0000000000003762                 mov     edx, 5          ; category
.text:0000000000003767                 xor     edi, edi        ; domainname
.text:0000000000003769                 call    _dcgettext
.text:000000000000376E                 mov     rsi, rbx        ; stream
.text:0000000000003771                 mov     rdi, rax        ; s
.text:0000000000003774                 call    _fputs_unlocked
.text:0000000000003779                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003780                 lea     rsi, aIFmtIso8601Fmt ; "  -I[FMT], --iso-8601[=FMT]  output dat"...
.text:0000000000003787                 mov     edx, 5          ; category
.text:000000000000378C                 xor     edi, edi        ; domainname
.text:000000000000378E                 call    _dcgettext
.text:0000000000003793                 mov     rsi, rbx        ; stream
.text:0000000000003796                 mov     rdi, rax        ; s
.text:0000000000003799                 call    _fputs_unlocked
.text:000000000000379E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037A5                 lea     rsi, aRRfcEmailOutpu ; "  -R, --rfc-email            output dat"...
.text:00000000000037AC                 mov     edx, 5          ; category
.text:00000000000037B1                 xor     edi, edi        ; domainname
.text:00000000000037B3                 call    _dcgettext
.text:00000000000037B8                 mov     rsi, rbx        ; stream
.text:00000000000037BB                 mov     rdi, rax        ; s
.text:00000000000037BE                 call    _fputs_unlocked
.text:00000000000037C3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037CA                 lea     rsi, aRfc3339FmtOutp ; "      --rfc-3339=FMT         output dat"...
.text:00000000000037D1                 mov     edx, 5          ; category
.text:00000000000037D6                 xor     edi, edi        ; domainname
.text:00000000000037D8                 call    _dcgettext
.text:00000000000037DD                 mov     rsi, rbx        ; stream
.text:00000000000037E0                 mov     rdi, rax        ; s
.text:00000000000037E3                 call    _fputs_unlocked
.text:00000000000037E8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037EF                 lea     rsi, aRReferenceFile ; "  -r, --reference=FILE       display th"...
.text:00000000000037F6                 mov     edx, 5          ; category
.text:00000000000037FB                 xor     edi, edi        ; domainname
.text:00000000000037FD                 call    _dcgettext
.text:0000000000003802                 mov     rsi, rbx        ; stream
.text:0000000000003805                 mov     rdi, rax        ; s
.text:0000000000003808                 call    _fputs_unlocked
.text:000000000000380D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003814                 lea     rsi, aSSetStringSetT ; "  -s, --set=STRING           set time d"...
.text:000000000000381B                 mov     edx, 5          ; category
.text:0000000000003820                 xor     edi, edi        ; domainname
.text:0000000000003822                 call    _dcgettext
.text:0000000000003827                 mov     rsi, rbx        ; stream
.text:000000000000382A                 mov     rdi, rax        ; s
.text:000000000000382D                 call    _fputs_unlocked
.text:0000000000003832                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003839                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000003840                 mov     edx, 5          ; category
.text:0000000000003845                 xor     edi, edi        ; domainname
.text:0000000000003847                 call    _dcgettext
.text:000000000000384C                 mov     rsi, rbx        ; stream
.text:000000000000384F                 mov     rdi, rax        ; s
.text:0000000000003852                 call    _fputs_unlocked
.text:0000000000003857                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000385E                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000003865                 mov     edx, 5          ; category
.text:000000000000386A                 xor     edi, edi        ; domainname
.text:000000000000386C                 call    _dcgettext
.text:0000000000003871                 mov     rsi, rbx        ; stream
.text:0000000000003874                 mov     rdi, rax        ; s
.text:0000000000003877                 call    _fputs_unlocked
.text:000000000000387C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003883                 lea     rsi, aFormatControls ; "\nFORMAT controls the output.  Interpre"...
.text:000000000000388A                 mov     edx, 5          ; category
.text:000000000000388F                 xor     edi, edi        ; domainname
.text:0000000000003891                 call    _dcgettext
.text:0000000000003896                 mov     rsi, rbx        ; stream
.text:0000000000003899                 mov     rdi, rax        ; s
.text:000000000000389C                 call    _fputs_unlocked
.text:00000000000038A1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000038A8                 lea     rsi, aALocaleSFullWe ; "  %A   locale's full weekday name (e.g."...
.text:00000000000038AF                 mov     edx, 5          ; category
.text:00000000000038B4                 xor     edi, edi        ; domainname
.text:00000000000038B6                 call    _dcgettext
.text:00000000000038BB                 mov     rsi, rbx        ; stream
.text:00000000000038BE                 mov     rdi, rax        ; s
.text:00000000000038C1                 call    _fputs_unlocked
.text:00000000000038C6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000038CD                 lea     rsi, aCCenturyLikeYE ; "  %C   century; like %Y, except omit la"...
.text:00000000000038D4                 mov     edx, 5          ; category
.text:00000000000038D9                 xor     edi, edi        ; domainname
.text:00000000000038DB                 call    _dcgettext
.text:00000000000038E0                 mov     rsi, rbx        ; stream
.text:00000000000038E3                 mov     rdi, rax        ; s
.text:00000000000038E6                 call    _fputs_unlocked
.text:00000000000038EB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000038F2                 lea     rsi, aFFullDateLike4 ; "  %F   full date; like %+4Y-%m-%d\n  %g"...
.text:00000000000038F9                 mov     edx, 5          ; category
.text:00000000000038FE                 xor     edi, edi        ; domainname
.text:0000000000003900                 call    _dcgettext
.text:0000000000003905                 mov     rsi, rbx        ; stream
.text:0000000000003908                 mov     rdi, rax        ; s
.text:000000000000390B                 call    _fputs_unlocked
.text:0000000000003910                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003917                 lea     rsi, aHSameAsBHHour0 ; "  %h   same as %b\n  %H   hour (00..23)"...
.text:000000000000391E                 mov     edx, 5          ; category
.text:0000000000003923                 xor     edi, edi        ; domainname
.text:0000000000003925                 call    _dcgettext
.text:000000000000392A                 mov     rsi, rbx        ; stream
.text:000000000000392D                 mov     rdi, rax        ; s
.text:0000000000003930                 call    _fputs_unlocked
.text:0000000000003935                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000393C                 lea     rsi, aKHourSpacePadd ; "  %k   hour, space padded ( 0..23); sam"...
.text:0000000000003943                 mov     edx, 5          ; category
.text:0000000000003948                 xor     edi, edi        ; domainname
.text:000000000000394A                 call    _dcgettext
.text:000000000000394F                 mov     rsi, rbx        ; stream
.text:0000000000003952                 mov     rdi, rax        ; s
.text:0000000000003955                 call    _fputs_unlocked
.text:000000000000395A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003961                 lea     rsi, aNANewlineNNano ; "  %n   a newline\n  %N   nanoseconds (0"...
.text:0000000000003968                 mov     edx, 5          ; category
.text:000000000000396D                 xor     edi, edi        ; domainname
.text:000000000000396F                 call    _dcgettext
.text:0000000000003974                 mov     rsi, rbx        ; stream
.text:0000000000003977                 mov     rdi, rax        ; s
.text:000000000000397A                 call    _fputs_unlocked
.text:000000000000397F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003986                 lea     rsi, aSSecond0060TAT ; "  %S   second (00..60)\n  %t   a tab\n "...
.text:000000000000398D                 mov     edx, 5          ; category
.text:0000000000003992                 xor     edi, edi        ; domainname
.text:0000000000003994                 call    _dcgettext
.text:0000000000003999                 mov     rsi, rbx        ; stream
.text:000000000000399C                 mov     rdi, rax        ; s
.text:000000000000399F                 call    _fputs_unlocked
.text:00000000000039A4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000039AB                 lea     rsi, aUWeekNumberOfY ; "  %U   week number of year, with Sunday"...
.text:00000000000039B2                 xor     edi, edi        ; domainname
.text:00000000000039B4                 mov     edx, 5          ; category
.text:00000000000039B9                 call    _dcgettext
.text:00000000000039BE                 mov     rsi, rbx        ; stream
.text:00000000000039C1                 mov     rdi, rax        ; s
.text:00000000000039C4                 call    _fputs_unlocked
.text:00000000000039C9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000039D0                 lea     rsi, aXLocaleSDateRe ; "  %x   locale's date representation (e."...
.text:00000000000039D7                 mov     edx, 5          ; category
.text:00000000000039DC                 xor     edi, edi        ; domainname
.text:00000000000039DE                 call    _dcgettext
.text:00000000000039E3                 mov     rsi, rbx        ; stream
.text:00000000000039E6                 mov     rdi, rax        ; s
.text:00000000000039E9                 call    _fputs_unlocked
.text:00000000000039EE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000039F5                 lea     rsi, aZHhmmNumericTi ; "  %z   +hhmm numeric time zone (e.g., -"...
.text:00000000000039FC                 mov     edx, 5          ; category
.text:0000000000003A01                 xor     edi, edi        ; domainname
.text:0000000000003A03                 call    _dcgettext
.text:0000000000003A08                 mov     rsi, rbx        ; stream
.text:0000000000003A0B                 mov     rdi, rax        ; s
.text:0000000000003A0E                 call    _fputs_unlocked
.text:0000000000003A13                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003A1A                 lea     rsi, aTheFollowingOp ; "The following optional flags may follow"...
.text:0000000000003A21                 mov     edx, 5          ; category
.text:0000000000003A26                 xor     edi, edi        ; domainname
.text:0000000000003A28                 call    _dcgettext
.text:0000000000003A2D                 mov     rsi, rbx        ; stream
.text:0000000000003A30                 mov     rdi, rax        ; s
.text:0000000000003A33                 call    _fputs_unlocked
.text:0000000000003A38                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003A3F                 lea     rsi, aAfterAnyFlagsC ; "\nAfter any flags comes an optional fie"...
.text:0000000000003A46                 mov     edx, 5          ; category
.text:0000000000003A4B                 xor     edi, edi        ; domainname
.text:0000000000003A4D                 call    _dcgettext
.text:0000000000003A52                 mov     rsi, rbx        ; stream
.text:0000000000003A55                 mov     rdi, rax        ; s
.text:0000000000003A58                 call    _fputs_unlocked
.text:0000000000003A5D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003A64                 lea     rsi, aExamplesConver ; "\nExamples:\nConvert seconds since the "...
.text:0000000000003A6B                 mov     edx, 5          ; category
.text:0000000000003A70                 xor     edi, edi        ; domainname
.text:0000000000003A72                 call    _dcgettext
.text:0000000000003A77                 mov     rsi, rbx        ; stream
.text:0000000000003A7A                 mov     rdi, rax        ; s
.text:0000000000003A7D                 lea     rbx, aDate      ; "date"
.text:0000000000003A84                 call    _fputs_unlocked
.text:0000000000003A89                 lea     rax, asc_1167C  ; "["
.text:0000000000003A90                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000003A97                 mov     [rsp+0A8h+var_48], 0
.text:0000000000003AA0                 mov     [rsp+0A8h+var_40], 0
.text:0000000000003AA9                 mov     rdx, rsp
.text:0000000000003AAC                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000003AB0                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000003AB7                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000003ABC                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000003AC3                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000003AC8                 lea     rax, domainname ; "coreutils"
.text:0000000000003ACF                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000003AD4                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000003ADB                 mov     [rsp+0A8h+var_98], rax
.text:0000000000003AE0                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000003AE7                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000003AEC                 mov     [rsp+0A8h+var_90], rax
.text:0000000000003AF1                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000003AF8                 mov     [rsp+0A8h+var_88], rax
.text:0000000000003AFD                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000003B04                 mov     [rsp+0A8h+var_80], rax
.text:0000000000003B09                 mov     [rsp+0A8h+var_70], rax
.text:0000000000003B0E                 mov     [rsp+0A8h+var_60], rax
.text:0000000000003B13                 mov     [rsp+0A8h+var_50], rax
.text:0000000000003B18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: usage+4FD↓j
.text:0000000000003B20                 add     rdx, 10h
.text:0000000000003B24                 mov     rdi, [rdx]
.text:0000000000003B27                 test    rdi, rdi
.text:0000000000003B2A                 jz      short loc_3B3F
.text:0000000000003B2C                 mov     ecx, 5
.text:0000000000003B31                 mov     rsi, rbx
.text:0000000000003B34                 repe cmpsb
.text:0000000000003B36                 setnbe  al
.text:0000000000003B39                 sbb     al, 0
.text:0000000000003B3B                 test    al, al
.text:0000000000003B3D                 jnz     short loc_3B20
.text:0000000000003B3F
.text:0000000000003B3F loc_3B3F:                               ; CODE XREF: usage+4EA↑j
.text:0000000000003B3F                 mov     r12, [rdx+8]
.text:0000000000003B43                 xor     edi, edi        ; domainname
.text:0000000000003B45                 mov     edx, 5          ; category
.text:0000000000003B4A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003B51                 test    r12, r12
.text:0000000000003B54                 jz      loc_3C1B
.text:0000000000003B5A                 call    _dcgettext
.text:0000000000003B5F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003B66                 lea     rdx, unk_116F2
.text:0000000000003B6D                 mov     rsi, rax
.text:0000000000003B70                 mov     edi, 1
.text:0000000000003B75                 xor     eax, eax
.text:0000000000003B77                 call    ___printf_chk
.text:0000000000003B7C                 xor     esi, esi        ; locale
.text:0000000000003B7E                 mov     edi, 5          ; category
.text:0000000000003B83                 call    _setlocale
.text:0000000000003B88                 test    rax, rax
.text:0000000000003B8B                 jz      short loc_3BA9
.text:0000000000003B8D                 lea     rsi, s2         ; "en_"
.text:0000000000003B94                 mov     edx, 3          ; n
.text:0000000000003B99                 mov     rdi, rax        ; s1
.text:0000000000003B9C                 call    _strncmp
.text:0000000000003BA1                 test    eax, eax
.text:0000000000003BA3                 jnz     loc_3CB0
.text:0000000000003BA9
.text:0000000000003BA9 loc_3BA9:                               ; CODE XREF: usage+54B↑j
.text:0000000000003BA9                                         ; usage+695↓j
.text:0000000000003BA9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003BB0                 xor     edi, edi        ; domainname
.text:0000000000003BB2                 mov     edx, 5          ; category
.text:0000000000003BB7                 call    _dcgettext
.text:0000000000003BBC                 lea     rcx, aDate      ; "date"
.text:0000000000003BC3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003BCA                 mov     rsi, rax
.text:0000000000003BCD                 mov     edi, 1
.text:0000000000003BD2                 xor     eax, eax
.text:0000000000003BD4                 call    ___printf_chk
.text:0000000000003BD9                 cmp     r12, rbx
.text:0000000000003BDC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003BE3                 lea     rbx, aUserProvidedTi+1Dh ; ""
.text:0000000000003BEA                 cmovz   rbx, rcx
.text:0000000000003BEE
.text:0000000000003BEE loc_3BEE:                               ; CODE XREF: usage+664↓j
.text:0000000000003BEE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003BF5                 xor     edi, edi        ; domainname
.text:0000000000003BF7                 mov     edx, 5          ; category
.text:0000000000003BFC                 call    _dcgettext
.text:0000000000003C01                 mov     rcx, rbx
.text:0000000000003C04                 mov     rsi, rax
.text:0000000000003C07                 mov     rdx, r12
.text:0000000000003C0A                 mov     edi, 1
.text:0000000000003C0F                 xor     eax, eax
.text:0000000000003C11                 call    ___printf_chk
.text:0000000000003C16                 jmp     loc_3696
.text:0000000000003C1B ; ---------------------------------------------------------------------------
.text:0000000000003C1B
.text:0000000000003C1B loc_3C1B:                               ; CODE XREF: usage+514↑j
.text:0000000000003C1B                 call    _dcgettext
.text:0000000000003C20                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003C27                 lea     rdx, unk_116F2
.text:0000000000003C2E                 mov     rsi, rax
.text:0000000000003C31                 mov     edi, 1
.text:0000000000003C36                 xor     eax, eax
.text:0000000000003C38                 call    ___printf_chk
.text:0000000000003C3D                 xor     esi, esi        ; locale
.text:0000000000003C3F                 mov     edi, 5          ; category
.text:0000000000003C44                 call    _setlocale
.text:0000000000003C49                 test    rax, rax
.text:0000000000003C4C                 jz      short loc_3C66
.text:0000000000003C4E                 lea     rsi, s2         ; "en_"
.text:0000000000003C55                 mov     edx, 3          ; n
.text:0000000000003C5A                 mov     rdi, rax        ; s1
.text:0000000000003C5D                 call    _strncmp
.text:0000000000003C62                 test    eax, eax
.text:0000000000003C64                 jnz     short loc_3CA9
.text:0000000000003C66
.text:0000000000003C66 loc_3C66:                               ; CODE XREF: usage+60C↑j
.text:0000000000003C66                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003C6D                 mov     edx, 5          ; category
.text:0000000000003C72                 xor     edi, edi        ; domainname
.text:0000000000003C74                 lea     r12, aDate      ; "date"
.text:0000000000003C7B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003C82                 call    _dcgettext
.text:0000000000003C87                 lea     rcx, aDate      ; "date"
.text:0000000000003C8E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003C95                 mov     rsi, rax
.text:0000000000003C98                 mov     edi, 1
.text:0000000000003C9D                 xor     eax, eax
.text:0000000000003C9F                 call    ___printf_chk
.text:0000000000003CA4                 jmp     loc_3BEE
.text:0000000000003CA9 ; ---------------------------------------------------------------------------
.text:0000000000003CA9
.text:0000000000003CA9 loc_3CA9:                               ; CODE XREF: usage+624↑j
.text:0000000000003CA9                 lea     r12, aDate      ; "date"
.text:0000000000003CB0
.text:0000000000003CB0 loc_3CB0:                               ; CODE XREF: usage+563↑j
.text:0000000000003CB0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000003CB7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000003CBE                 xor     edi, edi        ; domainname
.text:0000000000003CC0                 mov     edx, 5          ; category
.text:0000000000003CC5                 call    _dcgettext
.text:0000000000003CCA                 mov     rsi, r13        ; stream
.text:0000000000003CCD                 mov     rdi, rax        ; s
.text:0000000000003CD0                 call    _fputs_unlocked
.text:0000000000003CD5                 jmp     loc_3BA9
.text:0000000000003CD5 ; } // starts at 3640
.text:0000000000003CD5 usage           endp
.text:0000000000003CD5
.text:0000000000003CD5 ; ---------------------------------------------------------------------------
.text:0000000000003CDA                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CE0
.text:0000000000003CE0 ; Attributes: noreturn
.text:0000000000003CE0
.text:0000000000003CE0 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000003CE0 ; __unwind {
.text:0000000000003CE0                 mov     edi, 1          ; status
.text:0000000000003CE5                 jmp     usage
.text:0000000000003CE5 ; } // starts at 3CE0
.text:0000000000003CE5 __argmatch_die  endp
.text:0000000000003CE5
.text:0000000000003CE5 ; ---------------------------------------------------------------------------
.text:0000000000003CEA                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CF0
.text:0000000000003CF0 ; Attributes: info_from_lumina
.text:0000000000003CF0
.text:0000000000003CF0 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000003CF0                 public argmatch
.text:0000000000003CF0 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000003CF0
.text:0000000000003CF0 var_58          = qword ptr -58h
.text:0000000000003CF0 s2              = qword ptr -50h
.text:0000000000003CF0 var_41          = byte ptr -41h
.text:0000000000003CF0 var_40          = qword ptr -40h
.text:0000000000003CF0
.text:0000000000003CF0 ; __unwind {
.text:0000000000003CF0                 push    r15
.text:0000000000003CF2                 push    r14
.text:0000000000003CF4                 mov     r15, rsi
.text:0000000000003CF7                 push    r13
.text:0000000000003CF9                 push    r12
.text:0000000000003CFB                 mov     r13, rcx
.text:0000000000003CFE                 push    rbp
.text:0000000000003CFF                 push    rbx
.text:0000000000003D00                 mov     rbp, rdx
.text:0000000000003D03                 sub     rsp, 28h
.text:0000000000003D07                 mov     [rsp+58h+s2], rdi
.text:0000000000003D0C                 mov     [rsp+58h+var_40], rdx
.text:0000000000003D11                 call    _strlen
.text:0000000000003D16                 mov     r14, [r15]
.text:0000000000003D19                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000003D21                 test    r14, r14
.text:0000000000003D24                 jz      loc_3DDD
.text:0000000000003D2A                 mov     r12, rax
.text:0000000000003D2D                 mov     [rsp+58h+var_41], 0
.text:0000000000003D32                 xor     ebx, ebx
.text:0000000000003D34                 jmp     short loc_3D87
.text:0000000000003D34 ; ---------------------------------------------------------------------------
.text:0000000000003D36                 align 20h
.text:0000000000003D40
.text:0000000000003D40 loc_3D40:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000003D40                 mov     rax, [rsp+58h+var_40]
.text:0000000000003D45                 test    rax, rax
.text:0000000000003D48                 jz      loc_3DF0
.text:0000000000003D4E                 mov     rdi, [rsp+58h+var_58]
.text:0000000000003D52                 mov     rdx, r13        ; n
.text:0000000000003D55                 mov     rsi, rbp        ; s2
.text:0000000000003D58                 imul    rdi, r13
.text:0000000000003D5C                 add     rdi, rax        ; s1
.text:0000000000003D5F                 call    _memcmp
.text:0000000000003D64                 test    eax, eax
.text:0000000000003D66                 movzx   eax, [rsp+58h+var_41]
.text:0000000000003D6B                 mov     ecx, 1
.text:0000000000003D70                 cmovnz  eax, ecx
.text:0000000000003D73                 mov     [rsp+58h+var_41], al
.text:0000000000003D77
.text:0000000000003D77 loc_3D77:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000003D77                                         ; argmatch+105↓j
.text:0000000000003D77                 add     rbx, 1
.text:0000000000003D7B                 add     rbp, r13
.text:0000000000003D7E                 mov     r14, [r15+rbx*8]
.text:0000000000003D82                 test    r14, r14
.text:0000000000003D85                 jz      short loc_3DC8
.text:0000000000003D87
.text:0000000000003D87 loc_3D87:                               ; CODE XREF: argmatch+44↑j
.text:0000000000003D87                                         ; argmatch+D1↓j
.text:0000000000003D87                 mov     rsi, [rsp+58h+s2] ; s2
.text:0000000000003D8C                 mov     rdx, r12        ; n
.text:0000000000003D8F                 mov     rdi, r14        ; s1
.text:0000000000003D92                 call    _strncmp
.text:0000000000003D97                 test    eax, eax
.text:0000000000003D99                 jnz     short loc_3D77
.text:0000000000003D9B                 mov     rdi, r14        ; s
.text:0000000000003D9E                 call    _strlen
.text:0000000000003DA3                 cmp     rax, r12
.text:0000000000003DA6                 jz      short loc_3E00
.text:0000000000003DA8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000003DAD                 jnz     short loc_3D40
.text:0000000000003DAF                 mov     [rsp+58h+var_58], rbx
.text:0000000000003DB3                 add     rbx, 1
.text:0000000000003DB7                 add     rbp, r13
.text:0000000000003DBA                 mov     r14, [r15+rbx*8]
.text:0000000000003DBE                 test    r14, r14
.text:0000000000003DC1                 jnz     short loc_3D87
.text:0000000000003DC3                 nop     dword ptr [rax+rax+00h]
.text:0000000000003DC8
.text:0000000000003DC8 loc_3DC8:                               ; CODE XREF: argmatch+95↑j
.text:0000000000003DC8                 cmp     [rsp+58h+var_41], 0
.text:0000000000003DCD                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003DD4                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000003DD9                 mov     [rsp+58h+var_58], rax
.text:0000000000003DDD
.text:0000000000003DDD loc_3DDD:                               ; CODE XREF: argmatch+34↑j
.text:0000000000003DDD                                         ; argmatch+114↓j
.text:0000000000003DDD                 mov     rax, [rsp+58h+var_58]
.text:0000000000003DE1                 add     rsp, 28h
.text:0000000000003DE5                 pop     rbx
.text:0000000000003DE6                 pop     rbp
.text:0000000000003DE7                 pop     r12
.text:0000000000003DE9                 pop     r13
.text:0000000000003DEB                 pop     r14
.text:0000000000003DED                 pop     r15
.text:0000000000003DEF                 retn
.text:0000000000003DF0 ; ---------------------------------------------------------------------------
.text:0000000000003DF0
.text:0000000000003DF0 loc_3DF0:                               ; CODE XREF: argmatch+58↑j
.text:0000000000003DF0                 mov     [rsp+58h+var_41], 1
.text:0000000000003DF5                 jmp     short loc_3D77
.text:0000000000003DF5 ; ---------------------------------------------------------------------------
.text:0000000000003DF7                 align 20h
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000003E00                 mov     [rsp+58h+var_58], rbx
.text:0000000000003E04                 jmp     short loc_3DDD
.text:0000000000003E04 ; } // starts at 3CF0
.text:0000000000003E04 argmatch        endp
.text:0000000000003E04
.text:0000000000003E04 ; ---------------------------------------------------------------------------
.text:0000000000003E06                 align 10h
.text:0000000000003E10
.text:0000000000003E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E10
.text:0000000000003E10 ; Attributes: info_from_lumina
.text:0000000000003E10
.text:0000000000003E10 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000003E10                 public argmatch_invalid
.text:0000000000003E10 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000003E10 ; __unwind {
.text:0000000000003E10                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E14                 push    r12
.text:0000000000003E16                 mov     edx, 5          ; category
.text:0000000000003E1B                 push    rbp
.text:0000000000003E1C                 mov     r12, rsi
.text:0000000000003E1F                 push    rbx
.text:0000000000003E20                 mov     rbp, rdi
.text:0000000000003E23                 jz      short loc_3E70
.text:0000000000003E25                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0000000000003E2C                 xor     edi, edi        ; domainname
.text:0000000000003E2E                 call    _dcgettext
.text:0000000000003E33                 mov     rbx, rax
.text:0000000000003E36
.text:0000000000003E36 loc_3E36:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000003E36                 mov     rsi, rbp
.text:0000000000003E39                 mov     edi, 1
.text:0000000000003E3E                 call    quote_n
.text:0000000000003E43                 mov     rdx, r12
.text:0000000000003E46                 mov     rbp, rax
.text:0000000000003E49                 mov     esi, 8
.text:0000000000003E4E                 xor     edi, edi
.text:0000000000003E50                 call    quotearg_n_style
.text:0000000000003E55                 mov     r8, rbp
.text:0000000000003E58                 mov     rdx, rbx        ; format
.text:0000000000003E5B                 mov     rcx, rax
.text:0000000000003E5E                 pop     rbx
.text:0000000000003E5F                 pop     rbp
.text:0000000000003E60                 pop     r12
.text:0000000000003E62                 xor     esi, esi        ; errnum
.text:0000000000003E64                 xor     edi, edi        ; status
.text:0000000000003E66                 xor     eax, eax
.text:0000000000003E68                 jmp     _error
.text:0000000000003E68 ; ---------------------------------------------------------------------------
.text:0000000000003E6D                 align 10h
.text:0000000000003E70
.text:0000000000003E70 loc_3E70:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000003E70                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000003E77                 xor     edi, edi        ; domainname
.text:0000000000003E79                 call    _dcgettext
.text:0000000000003E7E                 mov     rbx, rax
.text:0000000000003E81                 jmp     short loc_3E36
.text:0000000000003E81 ; } // starts at 3E10
.text:0000000000003E81 argmatch_invalid endp
.text:0000000000003E81
.text:0000000000003E81 ; ---------------------------------------------------------------------------
.text:0000000000003E83                 align 10h
.text:0000000000003E90
.text:0000000000003E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E90
.text:0000000000003E90 ; Attributes: info_from_lumina
.text:0000000000003E90
.text:0000000000003E90 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000003E90                 public argmatch_valid
.text:0000000000003E90 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000003E90 ; __unwind {
.text:0000000000003E90                 push    r15
.text:0000000000003E92                 push    r14
.text:0000000000003E94                 mov     r14, rdi
.text:0000000000003E97                 push    r13
.text:0000000000003E99                 push    r12
.text:0000000000003E9B                 xor     edi, edi        ; domainname
.text:0000000000003E9D                 push    rbp
.text:0000000000003E9E                 push    rbx
.text:0000000000003E9F                 mov     rbp, rsi
.text:0000000000003EA2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000003EA9                 mov     r12, rdx
.text:0000000000003EAC                 mov     edx, 5          ; category
.text:0000000000003EB1                 sub     rsp, 8
.text:0000000000003EB5                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:0000000000003EBC                 call    _dcgettext
.text:0000000000003EC1                 mov     rdi, rax        ; s
.text:0000000000003EC4                 mov     rsi, rbx        ; stream
.text:0000000000003EC7                 call    _fputs_unlocked
.text:0000000000003ECC                 mov     r15, [r14]
.text:0000000000003ECF                 test    r15, r15
.text:0000000000003ED2                 jz      loc_3F68
.text:0000000000003ED8                 xor     r13d, r13d
.text:0000000000003EDB                 xor     ebx, ebx
.text:0000000000003EDD                 jmp     short loc_3F18
.text:0000000000003EDD ; ---------------------------------------------------------------------------
.text:0000000000003EDF                 align 20h
.text:0000000000003EE0
.text:0000000000003EE0 loc_3EE0:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000003EE0                                         ; argmatch_valid+9D↓j
.text:0000000000003EE0                 mov     rdi, r15
.text:0000000000003EE3                 add     rbx, 1
.text:0000000000003EE7                 mov     r13, rbp
.text:0000000000003EEA                 call    quote
.text:0000000000003EEF                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003EF6                 lea     rdx, aS         ; "\n  - %s"
.text:0000000000003EFD                 mov     rcx, rax
.text:0000000000003F00                 mov     esi, 1
.text:0000000000003F05                 xor     eax, eax
.text:0000000000003F07                 add     rbp, r12
.text:0000000000003F0A                 call    ___fprintf_chk
.text:0000000000003F0F                 mov     r15, [r14+rbx*8]
.text:0000000000003F13                 test    r15, r15
.text:0000000000003F16                 jz      short loc_3F68
.text:0000000000003F18
.text:0000000000003F18 loc_3F18:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000003F18                                         ; argmatch_valid+D2↓j
.text:0000000000003F18                 test    rbx, rbx
.text:0000000000003F1B                 jz      short loc_3EE0
.text:0000000000003F1D                 mov     rdx, r12        ; n
.text:0000000000003F20                 mov     rsi, rbp        ; s2
.text:0000000000003F23                 mov     rdi, r13        ; s1
.text:0000000000003F26                 call    _memcmp
.text:0000000000003F2B                 test    eax, eax
.text:0000000000003F2D                 jnz     short loc_3EE0
.text:0000000000003F2F                 mov     rdi, r15
.text:0000000000003F32                 add     rbx, 1
.text:0000000000003F36                 add     rbp, r12
.text:0000000000003F39                 call    quote
.text:0000000000003F3E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003F45                 lea     rdx, aS_0       ; ", %s"
.text:0000000000003F4C                 mov     rcx, rax
.text:0000000000003F4F                 mov     esi, 1
.text:0000000000003F54                 xor     eax, eax
.text:0000000000003F56                 call    ___fprintf_chk
.text:0000000000003F5B                 mov     r15, [r14+rbx*8]
.text:0000000000003F5F                 test    r15, r15
.text:0000000000003F62                 jnz     short loc_3F18
.text:0000000000003F64                 nop     dword ptr [rax+00h]
.text:0000000000003F68
.text:0000000000003F68 loc_3F68:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000003F68                                         ; argmatch_valid+86↑j
.text:0000000000003F68                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003F6F                 mov     rax, [rdi+28h]
.text:0000000000003F73                 cmp     rax, [rdi+30h]
.text:0000000000003F77                 jnb     short loc_3F98
.text:0000000000003F79                 lea     rdx, [rax+1]
.text:0000000000003F7D                 mov     [rdi+28h], rdx
.text:0000000000003F81                 mov     byte ptr [rax], 0Ah
.text:0000000000003F84                 add     rsp, 8
.text:0000000000003F88                 pop     rbx
.text:0000000000003F89                 pop     rbp
.text:0000000000003F8A                 pop     r12
.text:0000000000003F8C                 pop     r13
.text:0000000000003F8E                 pop     r14
.text:0000000000003F90                 pop     r15
.text:0000000000003F92                 retn
.text:0000000000003F92 ; ---------------------------------------------------------------------------
.text:0000000000003F93                 align 8
.text:0000000000003F98
.text:0000000000003F98 loc_3F98:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000003F98                 add     rsp, 8
.text:0000000000003F9C                 mov     esi, 0Ah        ; int
.text:0000000000003FA1                 pop     rbx
.text:0000000000003FA2                 pop     rbp
.text:0000000000003FA3                 pop     r12
.text:0000000000003FA5                 pop     r13
.text:0000000000003FA7                 pop     r14
.text:0000000000003FA9                 pop     r15
.text:0000000000003FAB                 jmp     ___overflow
.text:0000000000003FAB ; } // starts at 3E90
.text:0000000000003FAB argmatch_valid  endp
.text:0000000000003FAB
.text:0000000000003FB0
.text:0000000000003FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FB0
.text:0000000000003FB0 ; Attributes: info_from_lumina
.text:0000000000003FB0
.text:0000000000003FB0 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000003FB0                 public __xargmatch_internal
.text:0000000000003FB0 __xargmatch_internal proc near          ; CODE XREF: main+24C↑p
.text:0000000000003FB0                                         ; main+289↑p
.text:0000000000003FB0 ; __unwind {
.text:0000000000003FB0                 push    r15
.text:0000000000003FB2                 push    r14
.text:0000000000003FB4                 mov     r14, rdi
.text:0000000000003FB7                 push    r13
.text:0000000000003FB9                 push    r12
.text:0000000000003FBB                 mov     r12, rsi
.text:0000000000003FBE                 push    rbp
.text:0000000000003FBF                 push    rbx
.text:0000000000003FC0                 mov     rbp, rcx
.text:0000000000003FC3                 mov     rbx, rdx
.text:0000000000003FC6                 mov     rcx, r8
.text:0000000000003FC9                 mov     rdx, rbp
.text:0000000000003FCC                 sub     rsp, 8
.text:0000000000003FD0                 mov     rsi, rbx
.text:0000000000003FD3                 mov     rdi, r12
.text:0000000000003FD6                 mov     r15, r8
.text:0000000000003FD9                 mov     r13, r9
.text:0000000000003FDC                 call    argmatch
.text:0000000000003FE1                 test    rax, rax
.text:0000000000003FE4                 js      short loc_3FF5
.text:0000000000003FE6
.text:0000000000003FE6 loc_3FE6:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000003FE6                 add     rsp, 8
.text:0000000000003FEA                 pop     rbx
.text:0000000000003FEB                 pop     rbp
.text:0000000000003FEC                 pop     r12
.text:0000000000003FEE                 pop     r13
.text:0000000000003FF0                 pop     r14
.text:0000000000003FF2                 pop     r15
.text:0000000000003FF4                 retn
.text:0000000000003FF5 ; ---------------------------------------------------------------------------
.text:0000000000003FF5
.text:0000000000003FF5 loc_3FF5:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000003FF5                 mov     rdx, rax
.text:0000000000003FF8                 mov     rsi, r12
.text:0000000000003FFB                 mov     rdi, r14
.text:0000000000003FFE                 call    argmatch_invalid
.text:0000000000004003                 mov     rdx, r15
.text:0000000000004006                 mov     rsi, rbp
.text:0000000000004009                 mov     rdi, rbx
.text:000000000000400C                 call    argmatch_valid
.text:0000000000004011                 call    r13
.text:0000000000004014                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000401B                 jmp     short loc_3FE6
.text:000000000000401B ; } // starts at 3FB0
.text:000000000000401B __xargmatch_internal endp
.text:000000000000401B
.text:000000000000401B ; ---------------------------------------------------------------------------
.text:000000000000401D                 align 20h
.text:0000000000004020
.text:0000000000004020 ; =============== S U B R O U T I N E =======================================
.text:0000000000004020
.text:0000000000004020 ; Attributes: info_from_lumina
.text:0000000000004020
.text:0000000000004020 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000004020                 public argmatch_to_argument
.text:0000000000004020 argmatch_to_argument proc near
.text:0000000000004020 ; __unwind {
.text:0000000000004020                 push    r14
.text:0000000000004022                 push    r13
.text:0000000000004024                 push    r12
.text:0000000000004026                 push    rbp
.text:0000000000004027                 push    rbx
.text:0000000000004028                 mov     r14, [rsi]
.text:000000000000402B                 test    r14, r14
.text:000000000000402E                 jz      short loc_4061
.text:0000000000004030                 mov     r12, rcx
.text:0000000000004033                 mov     r13, rdi
.text:0000000000004036                 mov     rbp, rdx
.text:0000000000004039                 lea     rbx, [rsi+8]
.text:000000000000403D                 jmp     short loc_404F
.text:000000000000403D ; ---------------------------------------------------------------------------
.text:000000000000403F                 align 20h
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000004040                 mov     r14, [rbx]
.text:0000000000004043                 add     rbp, r12
.text:0000000000004046                 add     rbx, 8
.text:000000000000404A                 test    r14, r14
.text:000000000000404D                 jz      short loc_4061
.text:000000000000404F
.text:000000000000404F loc_404F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000404F                 mov     rdx, r12        ; n
.text:0000000000004052                 mov     rsi, rbp        ; s2
.text:0000000000004055                 mov     rdi, r13        ; s1
.text:0000000000004058                 call    _memcmp
.text:000000000000405D                 test    eax, eax
.text:000000000000405F                 jnz     short loc_4040
.text:0000000000004061
.text:0000000000004061 loc_4061:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000004061                                         ; argmatch_to_argument+2D↑j
.text:0000000000004061                 pop     rbx
.text:0000000000004062                 mov     rax, r14
.text:0000000000004065                 pop     rbp
.text:0000000000004066                 pop     r12
.text:0000000000004068                 pop     r13
.text:000000000000406A                 pop     r14
.text:000000000000406C                 retn
.text:000000000000406C ; } // starts at 4020
.text:000000000000406C argmatch_to_argument endp
.text:000000000000406C
.text:000000000000406C ; ---------------------------------------------------------------------------
.text:000000000000406D                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070
.text:0000000000004070                 public close_stdout_set_file_name
.text:0000000000004070 close_stdout_set_file_name proc near
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 mov     cs:file_name, rdi
.text:0000000000004077                 retn
.text:0000000000004077 ; } // starts at 4070
.text:0000000000004077 close_stdout_set_file_name endp
.text:0000000000004077
.text:0000000000004077 ; ---------------------------------------------------------------------------
.text:0000000000004078                 align 20h
.text:0000000000004080
.text:0000000000004080 ; =============== S U B R O U T I N E =======================================
.text:0000000000004080
.text:0000000000004080
.text:0000000000004080                 public close_stdout_set_ignore_EPIPE
.text:0000000000004080 close_stdout_set_ignore_EPIPE proc near
.text:0000000000004080 ; __unwind {
.text:0000000000004080                 mov     cs:ignore_EPIPE, dil
.text:0000000000004087                 retn
.text:0000000000004087 ; } // starts at 4080
.text:0000000000004087 close_stdout_set_ignore_EPIPE endp
.text:0000000000004087
.text:0000000000004087 ; ---------------------------------------------------------------------------
.text:0000000000004088                 align 10h
.text:0000000000004090
.text:0000000000004090 ; =============== S U B R O U T I N E =======================================
.text:0000000000004090
.text:0000000000004090 ; Attributes: info_from_lumina
.text:0000000000004090
.text:0000000000004090 ; void __cdecl close_stdout()
.text:0000000000004090                 public close_stdout
.text:0000000000004090 close_stdout    proc near               ; DATA XREF: main+79↑o
.text:0000000000004090 ; __unwind {
.text:0000000000004090                 push    rbp
.text:0000000000004091                 push    rbx
.text:0000000000004092                 sub     rsp, 8
.text:0000000000004096                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000409D                 call    close_stream
.text:00000000000040A2                 test    eax, eax
.text:00000000000040A4                 jz      short loc_40BC
.text:00000000000040A6                 call    ___errno_location
.text:00000000000040AB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000040B2                 mov     rbx, rax
.text:00000000000040B5                 jz      short loc_40D3
.text:00000000000040B7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000040BA                 jnz     short loc_40D3
.text:00000000000040BC
.text:00000000000040BC loc_40BC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000040BC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000040C3                 call    close_stream
.text:00000000000040C8                 test    eax, eax
.text:00000000000040CA                 jnz     short loc_4112
.text:00000000000040CC                 add     rsp, 8
.text:00000000000040D0                 pop     rbx
.text:00000000000040D1                 pop     rbp
.text:00000000000040D2                 retn
.text:00000000000040D3 ; ---------------------------------------------------------------------------
.text:00000000000040D3
.text:00000000000040D3 loc_40D3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000040D3                                         ; close_stdout+2A↑j
.text:00000000000040D3                 lea     rsi, aWriteError ; "write error"
.text:00000000000040DA                 xor     edi, edi        ; domainname
.text:00000000000040DC                 mov     edx, 5          ; category
.text:00000000000040E1                 call    _dcgettext
.text:00000000000040E6                 mov     rdi, cs:file_name
.text:00000000000040ED                 mov     rbp, rax
.text:00000000000040F0                 test    rdi, rdi
.text:00000000000040F3                 jz      short loc_411D
.text:00000000000040F5                 call    quotearg_colon
.text:00000000000040FA                 mov     esi, [rbx]      ; errnum
.text:00000000000040FC                 lea     rdx, format     ; "%s: %s"
.text:0000000000004103                 mov     rcx, rax
.text:0000000000004106                 mov     r8, rbp
.text:0000000000004109                 xor     edi, edi        ; status
.text:000000000000410B                 xor     eax, eax
.text:000000000000410D                 call    _error
.text:0000000000004112
.text:0000000000004112 loc_4112:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000004112                                         ; close_stdout+A2↓j
.text:0000000000004112                 mov     edi, cs:exit_failure ; status
.text:0000000000004118                 call    __exit
.text:000000000000411D ; ---------------------------------------------------------------------------
.text:000000000000411D
.text:000000000000411D loc_411D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000411D                 mov     esi, [rbx]      ; errnum
.text:000000000000411F                 lea     rdx, aS_0+2     ; format
.text:0000000000004126                 mov     rcx, rax
.text:0000000000004129                 xor     edi, edi        ; status
.text:000000000000412B                 xor     eax, eax
.text:000000000000412D                 call    _error
.text:0000000000004132                 jmp     short loc_4112
.text:0000000000004132 ; } // starts at 4090
.text:0000000000004132 close_stdout    endp
.text:0000000000004132
.text:0000000000004132 ; ---------------------------------------------------------------------------
.text:0000000000004134                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140
.text:0000000000004140 ; __int64 __fastcall fwrite_lowcase(FILE *stream)
.text:0000000000004140 fwrite_lowcase  proc near               ; CODE XREF: __strftime_internal+143F↓p
.text:0000000000004140                                         ; __strftime_internal+1A8E↓p
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 test    rdx, rdx
.text:0000000000004143                 jz      short locret_4190
.text:0000000000004145                 push    r13
.text:0000000000004147                 push    r12
.text:0000000000004149                 mov     r12, rdi
.text:000000000000414C                 push    rbp
.text:000000000000414D                 push    rbx
.text:000000000000414E                 mov     rbp, rdx
.text:0000000000004151                 mov     rbx, rsi
.text:0000000000004154                 sub     rsp, 8
.text:0000000000004158                 add     rbp, rbx
.text:000000000000415B                 call    ___ctype_tolower_loc
.text:0000000000004160                 mov     r13, rax
.text:0000000000004163                 nop     dword ptr [rax+rax+00h]
.text:0000000000004168
.text:0000000000004168 loc_4168:                               ; CODE XREF: fwrite_lowcase+41↓j
.text:0000000000004168                 movzx   ecx, byte ptr [rbx]
.text:000000000000416B                 mov     rax, [r13+0]
.text:000000000000416F                 mov     rsi, r12        ; stream
.text:0000000000004172                 add     rbx, 1
.text:0000000000004176                 mov     edi, [rax+rcx*4] ; c
.text:0000000000004179                 call    _fputc
.text:000000000000417E                 cmp     rbx, rbp
.text:0000000000004181                 jnz     short loc_4168
.text:0000000000004183                 add     rsp, 8
.text:0000000000004187                 pop     rbx
.text:0000000000004188                 pop     rbp
.text:0000000000004189                 pop     r12
.text:000000000000418B                 pop     r13
.text:000000000000418D                 retn
.text:000000000000418D ; ---------------------------------------------------------------------------
.text:000000000000418E                 align 10h
.text:0000000000004190
.text:0000000000004190 locret_4190:                            ; CODE XREF: fwrite_lowcase+3↑j
.text:0000000000004190                 rep retn
.text:0000000000004190 ; } // starts at 4140
.text:0000000000004190 fwrite_lowcase  endp
.text:0000000000004190
.text:0000000000004190 ; ---------------------------------------------------------------------------
.text:0000000000004192                 align 20h
.text:00000000000041A0
.text:00000000000041A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041A0
.text:00000000000041A0
.text:00000000000041A0 ; __int64 __fastcall fwrite_uppcase(FILE *stream)
.text:00000000000041A0 fwrite_uppcase  proc near               ; CODE XREF: __strftime_internal+2C9↓p
.text:00000000000041A0                                         ; __strftime_internal+4BE↓p ...
.text:00000000000041A0 ; __unwind {
.text:00000000000041A0                 test    rdx, rdx
.text:00000000000041A3                 jz      short locret_41F0
.text:00000000000041A5                 push    r13
.text:00000000000041A7                 push    r12
.text:00000000000041A9                 mov     r12, rdi
.text:00000000000041AC                 push    rbp
.text:00000000000041AD                 push    rbx
.text:00000000000041AE                 mov     rbp, rdx
.text:00000000000041B1                 mov     rbx, rsi
.text:00000000000041B4                 sub     rsp, 8
.text:00000000000041B8                 add     rbp, rbx
.text:00000000000041BB                 call    ___ctype_toupper_loc
.text:00000000000041C0                 mov     r13, rax
.text:00000000000041C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000041C8
.text:00000000000041C8 loc_41C8:                               ; CODE XREF: fwrite_uppcase+41↓j
.text:00000000000041C8                 movzx   ecx, byte ptr [rbx]
.text:00000000000041CB                 mov     rax, [r13+0]
.text:00000000000041CF                 mov     rsi, r12        ; stream
.text:00000000000041D2                 add     rbx, 1
.text:00000000000041D6                 mov     edi, [rax+rcx*4] ; c
.text:00000000000041D9                 call    _fputc
.text:00000000000041DE                 cmp     rbx, rbp
.text:00000000000041E1                 jnz     short loc_41C8
.text:00000000000041E3                 add     rsp, 8
.text:00000000000041E7                 pop     rbx
.text:00000000000041E8                 pop     rbp
.text:00000000000041E9                 pop     r12
.text:00000000000041EB                 pop     r13
.text:00000000000041ED                 retn
.text:00000000000041ED ; ---------------------------------------------------------------------------
.text:00000000000041EE                 align 10h
.text:00000000000041F0
.text:00000000000041F0 locret_41F0:                            ; CODE XREF: fwrite_uppcase+3↑j
.text:00000000000041F0                 rep retn
.text:00000000000041F0 ; } // starts at 41A0
.text:00000000000041F0 fwrite_uppcase  endp
.text:00000000000041F0
.text:00000000000041F0 ; ---------------------------------------------------------------------------
.text:00000000000041F2                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200
.text:0000000000004200 ; __int64 __usercall _strftime_internal@<rax>(FILE *stream@<rdi>, __int64, __int64, int)
.text:0000000000004200 __strftime_internal proc near           ; CODE XREF: __strftime_internal+6A3↓p
.text:0000000000004200                                         ; __strftime_internal+1562↓p ...
.text:0000000000004200
.text:0000000000004200 tp              = qword ptr -4E8h
.text:0000000000004200 var_4E0         = qword ptr -4E0h
.text:0000000000004200 var_4D8         = qword ptr -4D8h
.text:0000000000004200 var_4D0         = qword ptr -4D0h
.text:0000000000004200 var_4C5         = byte ptr -4C5h
.text:0000000000004200 var_4C4         = dword ptr -4C4h
.text:0000000000004200 var_4C0         = qword ptr -4C0h
.text:0000000000004200 var_4B8         = dword ptr -4B8h
.text:0000000000004200 var_4B4         = dword ptr -4B4h
.text:0000000000004200 ptr             = qword ptr -4B0h
.text:0000000000004200 size            = qword ptr -4A8h
.text:0000000000004200 var_4A0         = qword ptr -4A0h
.text:0000000000004200 var_498         = qword ptr -498h
.text:0000000000004200 var_490         = dword ptr -490h
.text:0000000000004200 var_48C         = dword ptr -48Ch
.text:0000000000004200 var_488         = xmmword ptr -488h
.text:0000000000004200 var_478         = xmmword ptr -478h
.text:0000000000004200 var_468         = xmmword ptr -468h
.text:0000000000004200 var_458         = qword ptr -458h
.text:0000000000004200 format          = byte ptr -44Dh
.text:0000000000004200 var_44B         = byte ptr -44Bh
.text:0000000000004200 s               = byte ptr -448h
.text:0000000000004200 var_431         = byte ptr -431h
.text:0000000000004200 var_40          = qword ptr -40h
.text:0000000000004200 arg_0           = qword ptr  8
.text:0000000000004200 arg_8           = qword ptr  10h
.text:0000000000004200 arg_10          = dword ptr  18h
.text:0000000000004200
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 push    r15
.text:0000000000004202                 push    r14
.text:0000000000004204                 mov     r10, rsi
.text:0000000000004207                 push    r13
.text:0000000000004209                 push    r12
.text:000000000000420B                 mov     r12, rdi
.text:000000000000420E                 push    rbp
.text:000000000000420F                 push    rbx
.text:0000000000004210                 mov     ebp, r9d
.text:0000000000004213                 sub     rsp, 4B8h
.text:000000000000421A                 mov     r13, [rdx+30h]
.text:000000000000421E                 mov     r14d, [rdx+8]
.text:0000000000004222                 mov     rax, [rsp+4E8h+arg_0]
.text:000000000000422A                 mov     [rsp+4E8h+tp], rdx
.text:000000000000422E                 mov     [rsp+4E8h+var_4C4], r8d
.text:0000000000004233                 mov     [rsp+4E8h+var_4C5], cl
.text:0000000000004237                 mov     [rsp+4E8h+var_4D0], rax
.text:000000000000423C                 mov     rax, [rsp+4E8h+arg_8]
.text:0000000000004244                 mov     [rsp+4E8h+var_4D8], rax
.text:0000000000004249                 mov     rax, fs:28h
.text:0000000000004252                 mov     [rsp+4E8h+var_40], rax
.text:000000000000425A                 xor     eax, eax
.text:000000000000425C                 lea     rax, aUserProvidedTi+1Dh ; ""
.text:0000000000004263                 test    r13, r13
.text:0000000000004266                 cmovz   r13, rax
.text:000000000000426A                 cmp     r14d, 0Ch
.text:000000000000426E                 jle     loc_43C8
.text:0000000000004274                 sub     r14d, 0Ch
.text:0000000000004278
.text:0000000000004278 loc_4278:                               ; CODE XREF: __strftime_internal+1D4↓j
.text:0000000000004278                 movzx   eax, byte ptr [r10]
.text:000000000000427C                 xor     r15d, r15d
.text:000000000000427F                 test    al, al
.text:0000000000004281                 jz      short loc_42C2
.text:0000000000004283                 cmp     al, 25h ; '%'
.text:0000000000004285                 mov     rbx, r10
.text:0000000000004288                 mov     [rsp+4E8h+var_4B8], r14d
.text:000000000000428D                 mov     [rsp+4E8h+var_4C0], r13
.text:0000000000004292                 movsxd  r10, ebp
.text:0000000000004295                 jz      loc_432B
.text:000000000000429B
.text:000000000000429B loc_429B:                               ; CODE XREF: __strftime_internal+125↓j
.text:000000000000429B                 test    r10d, r10d
.text:000000000000429E                 mov     r14d, 0
.text:00000000000042A4                 mov     eax, 1
.text:00000000000042A9                 cmovns  r14, r10
.text:00000000000042AD                 test    r14, r14
.text:00000000000042B0                 cmovz   r14, rax
.text:00000000000042B4                 mov     rax, r15
.text:00000000000042B7                 not     rax
.text:00000000000042BA                 cmp     rax, r14
.text:00000000000042BD                 ja      short loc_42F0
.text:00000000000042BF
.text:00000000000042BF loc_42BF:                               ; CODE XREF: __strftime_internal+257↓j
.text:00000000000042BF                                         ; __strftime_internal+437↓j ...
.text:00000000000042BF                 xor     r15d, r15d
.text:00000000000042C2
.text:00000000000042C2 loc_42C2:                               ; CODE XREF: __strftime_internal+81↑j
.text:00000000000042C2                                         ; __strftime_internal+121↓j
.text:00000000000042C2                 mov     rdi, [rsp+4E8h+var_40]
.text:00000000000042CA                 xor     rdi, fs:28h
.text:00000000000042D3                 mov     rax, r15
.text:00000000000042D6                 jnz     loc_5DF8
.text:00000000000042DC                 add     rsp, 4B8h
.text:00000000000042E3                 pop     rbx
.text:00000000000042E4                 pop     rbp
.text:00000000000042E5                 pop     r12
.text:00000000000042E7                 pop     r13
.text:00000000000042E9                 pop     r14
.text:00000000000042EB                 pop     r15
.text:00000000000042ED                 retn
.text:00000000000042ED ; ---------------------------------------------------------------------------
.text:00000000000042EE                 align 10h
.text:00000000000042F0
.text:00000000000042F0 loc_42F0:                               ; CODE XREF: __strftime_internal+BD↑j
.text:00000000000042F0                 test    r12, r12
.text:00000000000042F3                 jz      short loc_430A
.text:00000000000042F5                 cmp     r10d, 1
.text:00000000000042F9                 jg      loc_44E0
.text:00000000000042FF
.text:00000000000042FF loc_42FF:                               ; CODE XREF: __strftime_internal+306↓j
.text:00000000000042FF                                         ; __strftime_internal+EAC↓j ...
.text:00000000000042FF                 movsx   edi, byte ptr [rbx] ; c
.text:0000000000004302
.text:0000000000004302 loc_4302:                               ; CODE XREF: __strftime_internal+E71↓j
.text:0000000000004302                 mov     rsi, r12        ; stream
.text:0000000000004305                 call    _fputc
.text:000000000000430A
.text:000000000000430A loc_430A:                               ; CODE XREF: __strftime_internal+F3↑j
.text:000000000000430A                                         ; __strftime_internal+E67↓j
.text:000000000000430A                 add     r15, r14
.text:000000000000430D                 mov     rbp, rbx
.text:0000000000004310
.text:0000000000004310 loc_4310:                               ; CODE XREF: __strftime_internal+2D1↓j
.text:0000000000004310                                         ; __strftime_internal+404↓j ...
.text:0000000000004310                 movzx   eax, byte ptr [rbp+1]
.text:0000000000004314                 lea     rbx, [rbp+1]
.text:0000000000004318                 mov     r10, 0FFFFFFFFFFFFFFFFh
.text:000000000000431F                 test    al, al
.text:0000000000004321                 jz      short loc_42C2
.text:0000000000004323                 cmp     al, 25h ; '%'
.text:0000000000004325                 jnz     loc_429B
.text:000000000000432B
.text:000000000000432B loc_432B:                               ; CODE XREF: __strftime_internal+95↑j
.text:000000000000432B                 movzx   eax, [rsp+4E8h+var_4C5]
.text:0000000000004330                 xor     r14d, r14d
.text:0000000000004333                 mov     dword ptr [rsp+4E8h+var_4E0], 0
.text:000000000000433B                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:000000000000433F                 mov     eax, 1
.text:0000000000004344
.text:0000000000004344 loc_4344:                               ; CODE XREF: __strftime_internal+1F5↓j
.text:0000000000004344                                         ; __strftime_internal+206↓j ...
.text:0000000000004344                 add     rbx, 1
.text:0000000000004348                 movsx   r11d, byte ptr [rbx]
.text:000000000000434C                 lea     ecx, [r11-23h]
.text:0000000000004350                 mov     r13d, r11d
.text:0000000000004353                 mov     edi, r11d
.text:0000000000004356                 cmp     cl, 3Ch ; '<'
.text:0000000000004359                 ja      short loc_438F
.text:000000000000435B                 mov     rdx, rax
.text:000000000000435E                 mov     rsi, 1000000000002500h
.text:0000000000004368                 shl     rdx, cl
.text:000000000000436B                 test    rdx, rsi
.text:000000000000436E                 jnz     loc_43F0
.text:0000000000004374                 test    cl, cl
.text:0000000000004376                 jz      loc_4400
.text:000000000000437C                 mov     rsi, 800000000000000h
.text:0000000000004386                 test    rdx, rsi
.text:0000000000004389                 jnz     loc_4510
.text:000000000000438F
.text:000000000000438F loc_438F:                               ; CODE XREF: __strftime_internal+159↑j
.text:000000000000438F                 lea     eax, [r11-30h]
.text:0000000000004393                 cmp     eax, 9
.text:0000000000004396                 jbe     loc_4520
.text:000000000000439C
.text:000000000000439C loc_439C:                               ; CODE XREF: __strftime_internal+355↓j
.text:000000000000439C                                         ; __strftime_internal+394↓j
.text:000000000000439C                 cmp     r13b, 45h ; 'E'
.text:00000000000043A0                 jz      short loc_43E0
.text:00000000000043A2                 cmp     r13b, 4Fh ; 'O'
.text:00000000000043A6                 jz      short loc_43E0
.text:00000000000043A8                 xor     r11d, r11d
.text:00000000000043AB
.text:00000000000043AB loc_43AB:                               ; CODE XREF: __strftime_internal+1EB↓j
.text:00000000000043AB                 cmp     r13b, 7Ah       ; switch 123 cases
.text:00000000000043AF                 ja      short def_43C3  ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000043B1                 lea     rsi, jpt_43C3
.text:00000000000043B8                 movzx   eax, r13b
.text:00000000000043BC                 movsxd  rax, ds:(jpt_43C3 - 12E10h)[rsi+rax*4]
.text:00000000000043C0                 add     rax, rsi
.text:00000000000043C3                 jmp     rax             ; switch jump
.text:00000000000043C3 ; ---------------------------------------------------------------------------
.text:00000000000043C5                 align 8
.text:00000000000043C8
.text:00000000000043C8 loc_43C8:                               ; CODE XREF: __strftime_internal+6E↑j
.text:00000000000043C8                 test    r14d, r14d
.text:00000000000043CB                 mov     eax, 0Ch
.text:00000000000043D0                 cmovz   r14d, eax
.text:00000000000043D4                 jmp     loc_4278
.text:00000000000043D4 ; ---------------------------------------------------------------------------
.text:00000000000043D9                 align 20h
.text:00000000000043E0
.text:00000000000043E0 loc_43E0:                               ; CODE XREF: __strftime_internal+1A0↑j
.text:00000000000043E0                                         ; __strftime_internal+1A6↑j
.text:00000000000043E0                 movsx   edi, byte ptr [rbx+1]
.text:00000000000043E4                 add     rbx, 1
.text:00000000000043E8                 mov     r13d, edi
.text:00000000000043EB                 jmp     short loc_43AB
.text:00000000000043EB ; ---------------------------------------------------------------------------
.text:00000000000043ED                 align 10h
.text:00000000000043F0
.text:00000000000043F0 loc_43F0:                               ; CODE XREF: __strftime_internal+16E↑j
.text:00000000000043F0                 mov     dword ptr [rsp+4E8h+var_4E0], r11d
.text:00000000000043F5                 jmp     loc_4344
.text:00000000000043F5 ; ---------------------------------------------------------------------------
.text:00000000000043FA                 align 20h
.text:0000000000004400
.text:0000000000004400 loc_4400:                               ; CODE XREF: __strftime_internal+176↑j
.text:0000000000004400                 mov     r14d, 1
.text:0000000000004406                 jmp     loc_4344
.text:000000000000440B ; ---------------------------------------------------------------------------
.text:000000000000440B
.text:000000000000440B loc_440B:                               ; CODE XREF: __strftime_internal+DF1↓j
.text:000000000000440B                 mov     rbx, [rsp+4E8h+ptr]
.text:0000000000004410
.text:0000000000004410 def_43C3:                               ; CODE XREF: __strftime_internal+1AF↑j
.text:0000000000004410                                         ; __strftime_internal+1C3↑j ...
.text:0000000000004410                 lea     rax, [rbx-1]    ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000004414                 mov     r13d, 1
.text:000000000000441A
.text:000000000000441A loc_441A:                               ; CODE XREF: __strftime_internal+229↓j
.text:000000000000441A                 mov     rdx, rax
.text:000000000000441D                 lea     rax, [rax-1]
.text:0000000000004421                 add     r13d, 1
.text:0000000000004425                 cmp     byte ptr [rax+1], 25h ; '%'
.text:0000000000004429                 jnz     short loc_441A
.text:000000000000442B                 test    r10d, r10d
.text:000000000000442E                 mov     eax, 0
.text:0000000000004433                 movsxd  r13, r13d
.text:0000000000004436                 cmovns  eax, r10d
.text:000000000000443A                 mov     [rsp+4E8h+ptr], rdx
.text:000000000000443F                 mov     r14, r13
.text:0000000000004442                 cdqe
.text:0000000000004444                 mov     rdx, r15
.text:0000000000004447                 mov     rbp, rbx
.text:000000000000444A                 cmp     rax, r13
.text:000000000000444D                 not     rdx
.text:0000000000004450                 cmovnb  r14, rax
.text:0000000000004454
.text:0000000000004454 loc_4454:                               ; CODE XREF: __strftime_internal+E0F↓j
.text:0000000000004454                                         ; __strftime_internal+18D5↓j
.text:0000000000004454                 cmp     rdx, r14
.text:0000000000004457                 jbe     loc_42BF
.text:000000000000445D                 test    r12, r12
.text:0000000000004460                 jz      short loc_44CE
.text:0000000000004462                 cmp     r13, rax
.text:0000000000004465                 jnb     short loc_44B3
.text:0000000000004467                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:000000000000446B                 movsxd  rbx, r10d
.text:000000000000446E                 sub     rbx, r13
.text:0000000000004471                 cmp     eax, 30h ; '0'
.text:0000000000004474                 jz      loc_56A3
.text:000000000000447A                 cmp     eax, 2Bh ; '+'
.text:000000000000447D                 jz      loc_56A3
.text:0000000000004483                 xor     edx, edx
.text:0000000000004485                 test    rbx, rbx
.text:0000000000004488                 jz      short loc_44B3
.text:000000000000448A                 mov     [rsp+4E8h+var_4E0], rbp
.text:000000000000448F                 mov     rbp, rdx
.text:0000000000004492                 nop     word ptr [rax+rax+00h]
.text:0000000000004498
.text:0000000000004498 loc_4498:                               ; CODE XREF: __strftime_internal+2AC↓j
.text:0000000000004498                 mov     rsi, r12        ; stream
.text:000000000000449B                 mov     edi, 20h ; ' '  ; c
.text:00000000000044A0                 add     rbp, 1
.text:00000000000044A4                 call    _fputc
.text:00000000000044A9                 cmp     rbx, rbp
.text:00000000000044AC                 jnz     short loc_4498
.text:00000000000044AE
.text:00000000000044AE loc_44AE:                               ; CODE XREF: __strftime_internal+14D6↓j
.text:00000000000044AE                 mov     rbp, [rsp+4E8h+var_4E0]
.text:00000000000044B3
.text:00000000000044B3 loc_44B3:                               ; CODE XREF: __strftime_internal+265↑j
.text:00000000000044B3                                         ; __strftime_internal+288↑j ...
.text:00000000000044B3                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:00000000000044B8                 jz      loc_55E8
.text:00000000000044BE                 mov     rsi, [rsp+4E8h+ptr]
.text:00000000000044C3                 mov     rdx, r13
.text:00000000000044C6                 mov     rdi, r12        ; stream
.text:00000000000044C9                 call    fwrite_uppcase
.text:00000000000044CE
.text:00000000000044CE loc_44CE:                               ; CODE XREF: __strftime_internal+260↑j
.text:00000000000044CE                                         ; __strftime_internal+13FD↓j
.text:00000000000044CE                 add     r15, r14
.text:00000000000044D1                 jmp     loc_4310
.text:00000000000044D1 ; ---------------------------------------------------------------------------
.text:00000000000044D6                 align 20h
.text:00000000000044E0
.text:00000000000044E0 loc_44E0:                               ; CODE XREF: __strftime_internal+F9↑j
.text:00000000000044E0                 lea     r13, [r10-1]
.text:00000000000044E4                 xor     ebp, ebp
.text:00000000000044E6                 db      2Eh
.text:00000000000044E6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000044F0
.text:00000000000044F0 loc_44F0:                               ; CODE XREF: __strftime_internal+304↓j
.text:00000000000044F0                 mov     rsi, r12        ; stream
.text:00000000000044F3                 mov     edi, 20h ; ' '  ; c
.text:00000000000044F8                 add     rbp, 1
.text:00000000000044FC                 call    _fputc
.text:0000000000004501                 cmp     r13, rbp
.text:0000000000004504                 jnz     short loc_44F0
.text:0000000000004506                 jmp     loc_42FF
.text:0000000000004506 ; ---------------------------------------------------------------------------
.text:000000000000450B                 align 10h
.text:0000000000004510
.text:0000000000004510 loc_4510:                               ; CODE XREF: __strftime_internal+189↑j
.text:0000000000004510                 mov     byte ptr [rsp+4E8h+var_4B4], 1
.text:0000000000004515                 jmp     loc_4344
.text:0000000000004515 ; ---------------------------------------------------------------------------
.text:000000000000451A                 align 20h
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: __strftime_internal+196↑j
.text:0000000000004520                 xor     r10d, r10d
.text:0000000000004523
.text:0000000000004523 loc_4523:                               ; CODE XREF: __strftime_internal+350↓j
.text:0000000000004523                 movsx   r11d, byte ptr [rbx+1]
.text:0000000000004528                 cmp     r10d, 0CCCCCCCh
.text:000000000000452F                 lea     rcx, [rbx+1]
.text:0000000000004533                 mov     r13d, r11d
.text:0000000000004536                 lea     eax, [r11-30h]
.text:000000000000453A                 jg      short loc_4565
.text:000000000000453C                 movsx   edx, byte ptr [rbx]
.text:000000000000453F                 jz      short loc_4560
.text:0000000000004541
.text:0000000000004541 loc_4541:                               ; CODE XREF: __strftime_internal+363↓j
.text:0000000000004541                 lea     esi, [r10+r10*4]
.text:0000000000004545                 mov     rbx, rcx
.text:0000000000004548                 lea     r10d, [rdx+rsi*2-30h]
.text:000000000000454D
.text:000000000000454D loc_454D:                               ; CODE XREF: __strftime_internal+380↓j
.text:000000000000454D                 cmp     eax, 9
.text:0000000000004550                 jbe     short loc_4523
.text:0000000000004552                 mov     edi, r11d
.text:0000000000004555                 jmp     loc_439C
.text:0000000000004555 ; ---------------------------------------------------------------------------
.text:000000000000455A                 align 20h
.text:0000000000004560
.text:0000000000004560 loc_4560:                               ; CODE XREF: __strftime_internal+33F↑j
.text:0000000000004560                 cmp     dl, 37h ; '7'
.text:0000000000004563                 jle     short loc_4541
.text:0000000000004565
.text:0000000000004565 loc_4565:                               ; CODE XREF: __strftime_internal+33A↑j
.text:0000000000004565                 cmp     eax, 9
.text:0000000000004568                 ja      short loc_4588
.text:000000000000456A                 movsx   r11d, byte ptr [rbx+2]
.text:000000000000456F                 mov     r10d, 7FFFFFFFh
.text:0000000000004575                 add     rbx, 2
.text:0000000000004579                 mov     r13d, r11d
.text:000000000000457C                 lea     eax, [r11-30h]
.text:0000000000004580                 jmp     short loc_454D
.text:0000000000004580 ; ---------------------------------------------------------------------------
.text:0000000000004582                 align 8
.text:0000000000004588
.text:0000000000004588 loc_4588:                               ; CODE XREF: __strftime_internal+368↑j
.text:0000000000004588                 mov     edi, r11d
.text:000000000000458B                 mov     rbx, rcx
.text:000000000000458E                 mov     r10d, 7FFFFFFFh
.text:0000000000004594                 jmp     loc_439C
.text:0000000000004594 ; ---------------------------------------------------------------------------
.text:0000000000004599                 align 20h
.text:00000000000045A0
.text:00000000000045A0 loc_45A0:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000045A0                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000045A0                 cmp     r11d, 4Fh ; 'O' ; jumptable 00000000000043C3 cases 88,99,120
.text:00000000000045A4                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000045AA
.text:00000000000045AA loc_45AA:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000045AA                                         ; __strftime_internal+E2C↓j
.text:00000000000045AA                                         ; DATA XREF: ...
.text:00000000000045AA                 xor     r14d, r14d      ; jumptable 00000000000043C3 case 114
.text:00000000000045AD
.text:00000000000045AD loc_45AD:                               ; CODE XREF: __strftime_internal+658↓j
.text:00000000000045AD                                         ; __strftime_internal+E21↓j ...
.text:00000000000045AD                 mov     ebp, 2520h
.text:00000000000045B2                 test    r11d, r11d
.text:00000000000045B5                 mov     word ptr [rsp+4E8h+format], bp
.text:00000000000045BD                 jnz     loc_5E10
.text:00000000000045C3                 lea     rdx, [rsp+4E8h+format] ; format
.text:00000000000045CB                 mov     rbp, rbx
.text:00000000000045CE                 lea     rax, [rdx+2]
.text:00000000000045D2
.text:00000000000045D2 loc_45D2:                               ; CODE XREF: __strftime_internal+50B↓j
.text:00000000000045D2                                         ; __strftime_internal+624↓j
.text:00000000000045D2                 mov     [rax], r13b
.text:00000000000045D5                 mov     byte ptr [rax+1], 0
.text:00000000000045D9                 lea     rax, [rsp+4E8h+s]
.text:00000000000045E1                 mov     rcx, [rsp+4E8h+tp] ; tp
.text:00000000000045E5                 mov     esi, 400h       ; maxsize
.text:00000000000045EA                 mov     dword ptr [rsp+4E8h+size], r10d
.text:00000000000045EF                 mov     rdi, rax        ; s
.text:00000000000045F2                 mov     [rsp+4E8h+var_490], r11d
.text:00000000000045F7                 mov     [rsp+4E8h+ptr], rax
.text:00000000000045FC                 call    _strftime
.text:0000000000004601                 test    rax, rax
.text:0000000000004604                 jz      loc_4310
.text:000000000000460A                 movsxd  r10, dword ptr [rsp+4E8h+size]
.text:000000000000460F                 lea     r13, [rax-1]
.text:0000000000004613                 mov     eax, 0
.text:0000000000004618                 mov     rdx, r15
.text:000000000000461B                 not     rdx
.text:000000000000461E                 test    r10d, r10d
.text:0000000000004621                 cmovns  rax, r10
.text:0000000000004625                 cmp     r13, rax
.text:0000000000004628                 mov     rdi, rax
.text:000000000000462B                 cmovnb  rdi, r13
.text:000000000000462F                 cmp     rdx, rdi
.text:0000000000004632                 mov     [rsp+4E8h+size], rdi
.text:0000000000004637                 jbe     loc_42BF
.text:000000000000463D                 test    r12, r12
.text:0000000000004640                 jz      loc_46C3
.text:0000000000004646                 mov     r11d, [rsp+4E8h+var_490]
.text:000000000000464B                 test    r11d, r11d
.text:000000000000464E                 jnz     short loc_469B
.text:0000000000004650                 cmp     r13, rax
.text:0000000000004653                 jnb     short loc_469B
.text:0000000000004655                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000004659                 movsxd  rbx, r10d
.text:000000000000465C                 sub     rbx, r13
.text:000000000000465F                 cmp     eax, 30h ; '0'
.text:0000000000004662                 jz      loc_5670
.text:0000000000004668                 cmp     eax, 2Bh ; '+'
.text:000000000000466B                 jz      loc_5670
.text:0000000000004671                 xor     edx, edx
.text:0000000000004673                 test    rbx, rbx
.text:0000000000004676                 jz      short loc_469B
.text:0000000000004678                 mov     [rsp+4E8h+var_4E0], rbp
.text:000000000000467D                 mov     rbp, rdx
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: __strftime_internal+494↓j
.text:0000000000004680                 mov     rsi, r12        ; stream
.text:0000000000004683                 mov     edi, 20h ; ' '  ; c
.text:0000000000004688                 add     rbp, 1
.text:000000000000468C                 call    _fputc
.text:0000000000004691                 cmp     rbx, rbp
.text:0000000000004694                 jnz     short loc_4680
.text:0000000000004696
.text:0000000000004696 loc_4696:                               ; CODE XREF: __strftime_internal+149E↓j
.text:0000000000004696                 mov     rbp, [rsp+4E8h+var_4E0]
.text:000000000000469B
.text:000000000000469B loc_469B:                               ; CODE XREF: __strftime_internal+44E↑j
.text:000000000000469B                                         ; __strftime_internal+453↑j ...
.text:000000000000469B                 test    r14b, r14b
.text:000000000000469E                 jnz     loc_5630
.text:00000000000046A4                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:00000000000046A9                 jz      loc_5608
.text:00000000000046AF                 mov     rsi, [rsp+4E8h+ptr]
.text:00000000000046B4                 mov     rdx, r13
.text:00000000000046B7                 mov     rdi, r12        ; stream
.text:00000000000046BA                 add     rsi, 1
.text:00000000000046BE                 call    fwrite_uppcase
.text:00000000000046C3
.text:00000000000046C3 loc_46C3:                               ; CODE XREF: __strftime_internal+440↑j
.text:00000000000046C3                                         ; __strftime_internal+1421↓j ...
.text:00000000000046C3                 add     r15, [rsp+4E8h+size]
.text:00000000000046C8                 jmp     loc_4310
.text:00000000000046C8 ; ---------------------------------------------------------------------------
.text:00000000000046CD                 align 10h
.text:00000000000046D0
.text:00000000000046D0 loc_46D0:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000046D0                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000046D0                 test    r11d, r11d      ; jumptable 00000000000043C3 cases 65,97
.text:00000000000046D3                 jnz     def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000046D9                 movzx   eax, byte ptr [rsp+4E8h+var_4B4]
.text:00000000000046DE                 test    r14b, r14b
.text:00000000000046E1                 lea     rdx, [rsp+4E8h+format]
.text:00000000000046E9                 mov     rbp, rbx
.text:00000000000046EC                 cmovnz  eax, r14d
.text:00000000000046F0                 xor     r14d, r14d
.text:00000000000046F3                 xor     r11d, r11d
.text:00000000000046F6                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:00000000000046FA                 mov     eax, 2520h
.text:00000000000046FF                 mov     word ptr [rsp+4E8h+format], ax
.text:0000000000004707                 lea     rax, [rdx+2]
.text:000000000000470B                 jmp     loc_45D2
.text:0000000000004710 ; ---------------------------------------------------------------------------
.text:0000000000004710
.text:0000000000004710 loc_4710:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004710                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004710                 test    r10d, r10d      ; jumptable 00000000000043C3 case 116
.text:0000000000004713                 mov     r13d, 0
.text:0000000000004719                 mov     eax, 1
.text:000000000000471E                 cmovns  r13d, r10d
.text:0000000000004722                 movsxd  r13, r13d
.text:0000000000004725                 test    r13, r13
.text:0000000000004728                 cmovz   r13, rax
.text:000000000000472C                 mov     rax, r15
.text:000000000000472F                 not     rax
.text:0000000000004732                 cmp     rax, r13
.text:0000000000004735                 jbe     loc_42BF
.text:000000000000473B                 test    r12, r12
.text:000000000000473E                 jz      loc_48DF
.text:0000000000004744                 cmp     r10d, 1
.text:0000000000004748                 jle     short loc_477F
.text:000000000000474A                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:000000000000474E                 movsxd  r10, r10d
.text:0000000000004751                 lea     r14, [r10-1]
.text:0000000000004755                 cmp     eax, 30h ; '0'
.text:0000000000004758                 jz      loc_5C2F
.text:000000000000475E                 xor     ebp, ebp
.text:0000000000004760                 cmp     eax, 2Bh ; '+'
.text:0000000000004763                 jz      loc_5C2F
.text:0000000000004769
.text:0000000000004769 loc_4769:                               ; CODE XREF: __strftime_internal+57D↓j
.text:0000000000004769                 mov     rsi, r12        ; stream
.text:000000000000476C                 mov     edi, 20h ; ' '  ; c
.text:0000000000004771                 add     rbp, 1
.text:0000000000004775                 call    _fputc
.text:000000000000477A                 cmp     r14, rbp
.text:000000000000477D                 jnz     short loc_4769
.text:000000000000477F
.text:000000000000477F loc_477F:                               ; CODE XREF: __strftime_internal+548↑j
.text:000000000000477F                                         ; __strftime_internal+1A47↓j
.text:000000000000477F                 mov     rsi, r12        ; stream
.text:0000000000004782                 mov     edi, 9          ; c
.text:0000000000004787                 call    _fputc
.text:000000000000478C                 jmp     loc_48DF
.text:0000000000004791 ; ---------------------------------------------------------------------------
.text:0000000000004791
.text:0000000000004791 loc_4791:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004791                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004791                 mov     rax, [rsp+4E8h+tp] ; jumptable 00000000000043C3 case 117
.text:0000000000004795                 mov     edx, 92492493h
.text:000000000000479A                 mov     esi, 1
.text:000000000000479F                 mov     eax, [rax+18h]
.text:00000000000047A2                 lea     ecx, [rax+6]
.text:00000000000047A5                 mov     dword ptr [rsp+4E8h+ptr], eax
.text:00000000000047A9                 mov     eax, ecx
.text:00000000000047AB                 imul    edx
.text:00000000000047AD                 lea     eax, [rdx+rcx]
.text:00000000000047B0                 mov     edx, ecx
.text:00000000000047B2                 sar     edx, 1Fh
.text:00000000000047B5                 sar     eax, 2
.text:00000000000047B8                 sub     eax, edx
.text:00000000000047BA                 lea     edx, ds:0[rax*8]
.text:00000000000047C1                 sub     edx, eax
.text:00000000000047C3                 sub     ecx, edx
.text:00000000000047C5                 add     ecx, 1
.text:00000000000047C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000047D0
.text:00000000000047D0 loc_47D0:                               ; CODE XREF: __strftime_internal+63F↓j
.text:00000000000047D0                                         ; __strftime_internal+6FF↓j ...
.text:00000000000047D0                 mov     eax, ecx
.text:00000000000047D2                 xor     r8d, r8d
.text:00000000000047D5                 xor     r9d, r9d
.text:00000000000047D8                 shr     eax, 1Fh
.text:00000000000047DB                 mov     r13d, eax
.text:00000000000047DE                 mov     eax, ecx
.text:00000000000047E0                 not     eax
.text:00000000000047E2                 shr     eax, 1Fh
.text:00000000000047E5
.text:00000000000047E5 loc_47E5:                               ; CODE XREF: __strftime_internal+C4F↓j
.text:00000000000047E5                                         ; __strftime_internal+F9E↓j ...
.text:00000000000047E5                 cmp     r11d, 4Fh ; 'O'
.text:00000000000047E9                 jnz     loc_5500
.text:00000000000047EF                 test    al, al
.text:00000000000047F1                 jz      loc_5500
.text:00000000000047F7                 mov     r13d, edi
.text:00000000000047FA
.text:00000000000047FA loc_47FA:                               ; CODE XREF: __strftime_internal+8C6↓j
.text:00000000000047FA                                         ; __strftime_internal+15A5↓j
.text:00000000000047FA                 mov     edx, 2520h
.text:00000000000047FF                 xor     r14d, r14d
.text:0000000000004802                 mov     word ptr [rsp+4E8h+format], dx
.text:000000000000480A
.text:000000000000480A loc_480A:                               ; CODE XREF: __strftime_internal+1C12↓j
.text:000000000000480A                 lea     rdx, [rsp+4E8h+format]
.text:0000000000004812                 mov     [rsp+4E8h+var_44B], r11b
.text:000000000000481A                 mov     rbp, rbx
.text:000000000000481D                 mov     r11d, esi
.text:0000000000004820                 lea     rax, [rdx+3]
.text:0000000000004824                 jmp     loc_45D2
.text:0000000000004829 ; ---------------------------------------------------------------------------
.text:0000000000004829
.text:0000000000004829 loc_4829:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004829                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004829                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 119
.text:000000000000482D                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000004833                 mov     rax, [rsp+4E8h+tp]
.text:0000000000004837                 mov     esi, 1
.text:000000000000483C                 mov     ecx, [rax+18h]
.text:000000000000483F                 jmp     short loc_47D0
.text:0000000000004841 ; ---------------------------------------------------------------------------
.text:0000000000004841
.text:0000000000004841 loc_4841:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004841                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004841                 mov     eax, 1          ; jumptable 00000000000043C3 case 80
.text:0000000000004846
.text:0000000000004846 loc_4846:                               ; CODE XREF: __strftime_internal+12C6↓j
.text:0000000000004846                 test    r14b, r14b
.text:0000000000004849                 jnz     loc_57AA
.text:000000000000484F                 mov     r14d, eax
.text:0000000000004852                 mov     r13d, 70h ; 'p'
.text:0000000000004858                 jmp     loc_45AD
.text:000000000000485D ; ---------------------------------------------------------------------------
.text:000000000000485D
.text:000000000000485D loc_485D:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000485D                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:000000000000485D                 lea     rax, aHM        ; jumptable 00000000000043C3 case 82
.text:0000000000004864                 mov     r14d, 0FFFFFFFFh
.text:000000000000486A                 mov     [rsp+4E8h+ptr], rax
.text:000000000000486F
.text:000000000000486F loc_486F:                               ; CODE XREF: __strftime_internal+A9C↓j
.text:000000000000486F                                         ; __strftime_internal+D89↓j ...
.text:000000000000486F                 movzx   ebp, byte ptr [rsp+4E8h+var_4B4]
.text:0000000000004874                 mov     dword ptr [rsp+4E8h+size], r10d
.text:0000000000004879                 sub     rsp, 8
.text:000000000000487D                 mov     eax, [rsp+4F0h+arg_10]
.text:0000000000004884                 xor     edi, edi        ; stream
.text:0000000000004886                 mov     r9d, r14d
.text:0000000000004889                 push    rax             ; int
.text:000000000000488A                 push    [rsp+4F8h+var_4D8] ; __int64
.text:000000000000488E                 mov     ecx, ebp
.text:0000000000004890                 push    [rsp+500h+var_4D0] ; __int64
.text:0000000000004894                 mov     rdx, [rsp+508h+tp]
.text:0000000000004899                 mov     r8d, dword ptr [rsp+508h+var_4E0]
.text:000000000000489E                 mov     rsi, [rsp+508h+ptr]
.text:00000000000048A3                 call    __strftime_internal
.text:00000000000048A8                 add     rsp, 20h
.text:00000000000048AC                 movsxd  r10, dword ptr [rsp+4E8h+size]
.text:00000000000048B1                 mov     edx, 0
.text:00000000000048B6                 mov     rcx, r15
.text:00000000000048B9                 not     rcx
.text:00000000000048BC                 test    r10d, r10d
.text:00000000000048BF                 cmovns  rdx, r10
.text:00000000000048C3                 cmp     rax, rdx
.text:00000000000048C6                 mov     r13, rdx
.text:00000000000048C9                 cmovnb  r13, rax
.text:00000000000048CD                 cmp     rcx, r13
.text:00000000000048D0                 jbe     loc_42BF
.text:00000000000048D6                 test    r12, r12
.text:00000000000048D9                 jnz     loc_56DB
.text:00000000000048DF
.text:00000000000048DF loc_48DF:                               ; CODE XREF: __strftime_internal+53E↑j
.text:00000000000048DF                                         ; __strftime_internal+58C↑j ...
.text:00000000000048DF                 add     r15, r13
.text:00000000000048E2                 mov     rbp, rbx
.text:00000000000048E5                 jmp     loc_4310
.text:00000000000048EA ; ---------------------------------------------------------------------------
.text:00000000000048EA
.text:00000000000048EA loc_48EA:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000048EA                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000048EA                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 83
.text:00000000000048EE                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000048F4                 mov     rax, [rsp+4E8h+tp]
.text:00000000000048F8                 mov     esi, 2
.text:00000000000048FD                 mov     ecx, [rax]
.text:00000000000048FF                 jmp     loc_47D0
.text:0000000000004904 ; ---------------------------------------------------------------------------
.text:0000000000004904
.text:0000000000004904 loc_4904:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004904                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004904                 mov     rax, [rsp+4E8h+tp] ; jumptable 00000000000043C3 case 115
.text:0000000000004908                 mov     rdi, [rsp+4E8h+var_4D8]
.text:000000000000490D                 lea     rsi, [rsp+4E8h+var_488]
.text:0000000000004912                 mov     dword ptr [rsp+4E8h+size], r10d
.text:0000000000004917                 lea     r14, [rsp+4E8h+var_431]
.text:000000000000491F                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000004923                 movaps  [rsp+4E8h+var_488], xmm0
.text:0000000000004928                 movdqu  xmm0, xmmword ptr [rax+10h]
.text:000000000000492D                 movaps  [rsp+4E8h+var_478], xmm0
.text:0000000000004932                 movdqu  xmm0, xmmword ptr [rax+20h]
.text:0000000000004937                 mov     rax, [rax+30h]
.text:000000000000493B                 movaps  [rsp+4E8h+var_468], xmm0
.text:0000000000004943                 mov     [rsp+4E8h+var_458], rax
.text:000000000000494B                 call    mktime_z
.text:0000000000004950                 mov     r10d, dword ptr [rsp+4E8h+size]
.text:0000000000004955                 mov     rsi, rax
.text:0000000000004958                 mov     rcx, rax
.text:000000000000495B                 lea     rax, [rsp+4E8h+s]
.text:0000000000004963                 mov     r8, 6666666666666667h
.text:000000000000496D                 mov     edi, 30h ; '0'
.text:0000000000004972                 mov     [rsp+4E8h+ptr], rax
.text:0000000000004977                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004980
.text:0000000000004980 loc_4980:                               ; CODE XREF: __strftime_internal+7BE↓j
.text:0000000000004980                 mov     rax, rcx
.text:0000000000004983                 imul    r8
.text:0000000000004986                 mov     rax, rcx
.text:0000000000004989                 sar     rax, 3Fh
.text:000000000000498D                 sar     rdx, 2
.text:0000000000004991                 sub     rdx, rax
.text:0000000000004994                 mov     rax, rdx
.text:0000000000004997                 lea     rdx, [rdx+rdx*4]
.text:000000000000499B                 add     rdx, rdx
.text:000000000000499E                 sub     rcx, rdx
.text:00000000000049A1                 mov     rdx, rcx
.text:00000000000049A4                 mov     rcx, rax
.text:00000000000049A7                 mov     eax, edi
.text:00000000000049A9                 sub     eax, edx
.text:00000000000049AB                 add     edx, 30h ; '0'
.text:00000000000049AE                 test    rsi, rsi
.text:00000000000049B1                 cmovs   edx, eax
.text:00000000000049B4                 sub     r14, 1
.text:00000000000049B8                 test    rcx, rcx
.text:00000000000049BB                 mov     [r14], dl
.text:00000000000049BE                 jnz     short loc_4980
.text:00000000000049C0                 test    r10d, r10d
.text:00000000000049C3                 mov     eax, 1
.text:00000000000049C8                 cmovg   eax, r10d
.text:00000000000049CC                 test    rsi, rsi
.text:00000000000049CF                 mov     [rsp+4E8h+var_490], eax
.text:00000000000049D3                 js      loc_5510
.text:00000000000049D9
.text:00000000000049D9 loc_49D9:                               ; CODE XREF: __strftime_internal+95B↓j
.text:00000000000049D9                 mov     rax, [rsp+4E8h+ptr]
.text:00000000000049DE                 mov     rdx, r15
.text:00000000000049E1                 not     rdx
.text:00000000000049E4                 add     rax, 17h
.text:00000000000049E8                 sub     rax, r14
.text:00000000000049EB                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:00000000000049F0                 mov     [rsp+4E8h+size], rax
.text:00000000000049F5                 jz      short loc_4A0A
.text:00000000000049F7                 mov     r13d, [rsp+4E8h+var_490]
.text:00000000000049FC                 sub     r13d, dword ptr [rsp+4E8h+size]
.text:0000000000004A01                 test    r13d, r13d
.text:0000000000004A04                 jg      loc_5B3E
.text:0000000000004A0A
.text:0000000000004A0A loc_4A0A:                               ; CODE XREF: __strftime_internal+7F5↑j
.text:0000000000004A0A                 test    r10d, r10d
.text:0000000000004A0D                 mov     ecx, 0
.text:0000000000004A12                 mov     rbp, rbx
.text:0000000000004A15                 cmovns  ecx, r10d
.text:0000000000004A19                 movsxd  r13, ecx
.text:0000000000004A1C
.text:0000000000004A1C loc_4A1C:                               ; CODE XREF: __strftime_internal+A85↓j
.text:0000000000004A1C                                         ; __strftime_internal+13E0↓j ...
.text:0000000000004A1C                 mov     rax, [rsp+4E8h+size]
.text:0000000000004A21                 cmp     rax, r13
.text:0000000000004A24                 mov     rbx, rax
.text:0000000000004A27                 cmovb   rbx, r13
.text:0000000000004A2B                 cmp     rbx, rdx
.text:0000000000004A2E                 jnb     loc_42BF
.text:0000000000004A34                 test    r12, r12
.text:0000000000004A37                 jz      short loc_4AAE
.text:0000000000004A39                 mov     edx, [rsp+4E8h+var_490]
.text:0000000000004A3D                 test    edx, edx
.text:0000000000004A3F                 jnz     short loc_4A93
.text:0000000000004A41                 cmp     rax, r13
.text:0000000000004A44                 jnb     short loc_4A93
.text:0000000000004A46                 movsxd  r13, r10d
.text:0000000000004A49                 sub     r13, rax
.text:0000000000004A4C                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000004A50                 cmp     eax, 30h ; '0'
.text:0000000000004A53                 jz      loc_5770
.text:0000000000004A59                 cmp     eax, 2Bh ; '+'
.text:0000000000004A5C                 jz      loc_5770
.text:0000000000004A62                 xor     edx, edx
.text:0000000000004A64                 test    r13, r13
.text:0000000000004A67                 jz      short loc_4A93
.text:0000000000004A69                 mov     [rsp+4E8h+var_4E0], rbx
.text:0000000000004A6E                 mov     rbx, rdx
.text:0000000000004A71                 nop     dword ptr [rax+00000000h]
.text:0000000000004A78
.text:0000000000004A78 loc_4A78:                               ; CODE XREF: __strftime_internal+88C↓j
.text:0000000000004A78                 mov     rsi, r12        ; stream
.text:0000000000004A7B                 mov     edi, 20h ; ' '  ; c
.text:0000000000004A80                 add     rbx, 1
.text:0000000000004A84                 call    _fputc
.text:0000000000004A89                 cmp     r13, rbx
.text:0000000000004A8C                 jnz     short loc_4A78
.text:0000000000004A8E
.text:0000000000004A8E loc_4A8E:                               ; CODE XREF: __strftime_internal+159E↓j
.text:0000000000004A8E                 mov     rbx, [rsp+4E8h+var_4E0]
.text:0000000000004A93
.text:0000000000004A93 loc_4A93:                               ; CODE XREF: __strftime_internal+83F↑j
.text:0000000000004A93                                         ; __strftime_internal+844↑j ...
.text:0000000000004A93                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000004A98                 jz      loc_5650
.text:0000000000004A9E                 mov     rdx, [rsp+4E8h+size]
.text:0000000000004AA3                 mov     rsi, r14
.text:0000000000004AA6                 mov     rdi, r12        ; stream
.text:0000000000004AA9                 call    fwrite_uppcase
.text:0000000000004AAE
.text:0000000000004AAE loc_4AAE:                               ; CODE XREF: __strftime_internal+837↑j
.text:0000000000004AAE                                         ; __strftime_internal+1465↓j
.text:0000000000004AAE                 add     r15, rbx
.text:0000000000004AB1                 jmp     loc_4310
.text:0000000000004AB6 ; ---------------------------------------------------------------------------
.text:0000000000004AB6
.text:0000000000004AB6 loc_4AB6:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004AB6                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004AB6                 mov     rax, [rsp+4E8h+tp] ; jumptable 00000000000043C3 case 113
.text:0000000000004ABA                 cmp     r11d, 4Fh ; 'O'
.text:0000000000004ABE                 mov     esi, 1
.text:0000000000004AC3                 mov     eax, [rax+10h]
.text:0000000000004AC6                 jz      loc_47FA
.text:0000000000004ACC                 lea     edx, [rax+rax*4]
.text:0000000000004ACF                 xor     r9d, r9d
.text:0000000000004AD2                 xor     r13d, r13d
.text:0000000000004AD5                 xor     r8d, r8d
.text:0000000000004AD8                 lea     ecx, [rax+rdx*2]
.text:0000000000004ADB                 sar     ecx, 5
.text:0000000000004ADE                 add     ecx, 1
.text:0000000000004AE1                 nop     dword ptr [rax+00000000h]
.text:0000000000004AE8
.text:0000000000004AE8 loc_4AE8:                               ; CODE XREF: __strftime_internal+130A↓j
.text:0000000000004AE8                 lea     rax, [rsp+4E8h+s]
.text:0000000000004AF0                 lea     rdi, [rsp+4E8h+var_431]
.text:0000000000004AF8                 mov     r11d, 0CCCCCCCDh
.text:0000000000004AFE                 mov     [rsp+4E8h+ptr], rax
.text:0000000000004B03                 nop     dword ptr [rax+rax+00h]
.text:0000000000004B08
.text:0000000000004B08 loc_4B08:                               ; CODE XREF: __strftime_internal+942↓j
.text:0000000000004B08                 test    r8b, 1
.text:0000000000004B0C                 lea     r14, [rdi-1]
.text:0000000000004B10                 jz      short loc_4B20
.text:0000000000004B12                 lea     rax, [rdi-2]
.text:0000000000004B16                 mov     byte ptr [rdi-1], 3Ah ; ':'
.text:0000000000004B1A                 mov     rdi, r14
.text:0000000000004B1D                 mov     r14, rax
.text:0000000000004B20
.text:0000000000004B20 loc_4B20:                               ; CODE XREF: __strftime_internal+910↑j
.text:0000000000004B20                 mov     eax, ecx
.text:0000000000004B22                 sar     r8d, 1
.text:0000000000004B25                 mul     r11d
.text:0000000000004B28                 shr     edx, 3
.text:0000000000004B2B                 lea     eax, [rdx+rdx*4]
.text:0000000000004B2E                 add     eax, eax
.text:0000000000004B30                 sub     ecx, eax
.text:0000000000004B32                 mov     eax, r8d
.text:0000000000004B35                 add     ecx, 30h ; '0'
.text:0000000000004B38                 or      eax, edx
.text:0000000000004B3A                 mov     [rdi-1], cl
.text:0000000000004B3D                 mov     ecx, edx
.text:0000000000004B3F                 mov     rdi, r14
.text:0000000000004B42                 jnz     short loc_4B08
.text:0000000000004B44                 cmp     r10d, esi
.text:0000000000004B47                 cmovge  esi, r10d
.text:0000000000004B4B                 test    r13b, r13b
.text:0000000000004B4E                 mov     [rsp+4E8h+var_490], esi
.text:0000000000004B52                 jnz     loc_5510
.text:0000000000004B58                 test    r9b, r9b
.text:0000000000004B5B                 jz      loc_49D9
.text:0000000000004B61                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:0000000000004B66                 mov     ebp, 2Bh ; '+'
.text:0000000000004B6B                 jz      loc_591D
.text:0000000000004B71
.text:0000000000004B71 loc_4B71:                               ; CODE XREF: __strftime_internal+131A↓j
.text:0000000000004B71                 mov     rax, [rsp+4E8h+ptr]
.text:0000000000004B76                 mov     rdx, r15
.text:0000000000004B79                 not     rdx
.text:0000000000004B7C                 add     rax, 17h
.text:0000000000004B80                 sub     rax, r14
.text:0000000000004B83                 mov     rdi, rax
.text:0000000000004B86                 mov     [rsp+4E8h+size], rax
.text:0000000000004B8B                 mov     eax, [rsp+4E8h+var_490]
.text:0000000000004B8F                 sub     eax, 1
.text:0000000000004B92                 sub     eax, edi
.text:0000000000004B94                 test    eax, eax
.text:0000000000004B96                 mov     r13d, eax
.text:0000000000004B99                 jle     loc_5860
.text:0000000000004B9F                 cmp     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:0000000000004BA4                 jz      loc_57BC
.text:0000000000004BAA                 movsxd  rax, [rsp+4E8h+var_490]
.text:0000000000004BAF                 cmp     rax, rdx
.text:0000000000004BB2                 mov     rdi, rax
.text:0000000000004BB5                 jnb     loc_42BF
.text:0000000000004BBB                 test    r10d, r10d
.text:0000000000004BBE                 mov     eax, 0
.text:0000000000004BC3                 mov     ecx, 1
.text:0000000000004BC8                 cmovns  eax, r10d
.text:0000000000004BCC                 cdqe
.text:0000000000004BCE                 test    rax, rax
.text:0000000000004BD1                 cmovnz  rcx, rax
.text:0000000000004BD5                 cmp     rcx, rdx
.text:0000000000004BD8                 mov     [rsp+4E8h+var_4A0], rcx
.text:0000000000004BDD                 jnb     loc_42BF
.text:0000000000004BE3                 test    r12, r12
.text:0000000000004BE6                 jz      short loc_4C4C
.text:0000000000004BE8                 test    edi, edi
.text:0000000000004BEA                 jnz     short loc_4C40
.text:0000000000004BEC                 cmp     rax, 1
.text:0000000000004BF0                 jbe     short loc_4C40
.text:0000000000004BF2                 mov     edi, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000004BF6                 movsxd  r10, r10d
.text:0000000000004BF9                 lea     rax, [r10-1]
.text:0000000000004BFD                 cmp     edi, 30h ; '0'
.text:0000000000004C00                 mov     [rsp+4E8h+ptr], rax
.text:0000000000004C05                 jz      loc_5D10
.text:0000000000004C0B                 cmp     edi, 2Bh ; '+'
.text:0000000000004C0E                 jz      loc_5D10
.text:0000000000004C14                 xor     edx, edx
.text:0000000000004C16                 test    rax, rax
.text:0000000000004C19                 jz      short loc_4C40
.text:0000000000004C1B                 mov     [rsp+4E8h+var_498], rbx
.text:0000000000004C20                 mov     rbx, rdx
.text:0000000000004C23
.text:0000000000004C23 loc_4C23:                               ; CODE XREF: __strftime_internal+A39↓j
.text:0000000000004C23                 mov     rsi, r12        ; stream
.text:0000000000004C26                 mov     edi, 20h ; ' '  ; c
.text:0000000000004C2B                 add     rbx, 1
.text:0000000000004C2F                 call    _fputc
.text:0000000000004C34                 cmp     [rsp+4E8h+ptr], rbx
.text:0000000000004C39                 jnz     short loc_4C23
.text:0000000000004C3B
.text:0000000000004C3B loc_4C3B:                               ; CODE XREF: __strftime_internal+1B3E↓j
.text:0000000000004C3B                 mov     rbx, [rsp+4E8h+var_498]
.text:0000000000004C40
.text:0000000000004C40 loc_4C40:                               ; CODE XREF: __strftime_internal+9EA↑j
.text:0000000000004C40                                         ; __strftime_internal+9F0↑j ...
.text:0000000000004C40                 movsx   edi, bpl        ; c
.text:0000000000004C44                 mov     rsi, r12        ; stream
.text:0000000000004C47                 call    _fputc
.text:0000000000004C4C
.text:0000000000004C4C loc_4C4C:                               ; CODE XREF: __strftime_internal+9E6↑j
.text:0000000000004C4C                 add     r15, [rsp+4E8h+var_4A0]
.text:0000000000004C51
.text:0000000000004C51 loc_4C51:                               ; CODE XREF: __strftime_internal+1951↓j
.text:0000000000004C51                 mov     rbp, rbx
.text:0000000000004C54                 movsxd  rbx, r13d
.text:0000000000004C57                 xor     r13d, r13d
.text:0000000000004C5A                 test    r12, r12
.text:0000000000004C5D                 jz      short loc_4C76
.text:0000000000004C5F                 nop
.text:0000000000004C60
.text:0000000000004C60 loc_4C60:                               ; CODE XREF: __strftime_internal+A74↓j
.text:0000000000004C60                 mov     rsi, r12        ; stream
.text:0000000000004C63                 mov     edi, 30h ; '0'  ; c
.text:0000000000004C68                 add     r13, 1
.text:0000000000004C6C                 call    _fputc
.text:0000000000004C71                 cmp     r13, rbx
.text:0000000000004C74                 jnz     short loc_4C60
.text:0000000000004C76
.text:0000000000004C76 loc_4C76:                               ; CODE XREF: __strftime_internal+A5D↑j
.text:0000000000004C76                 add     r15, rbx
.text:0000000000004C79                 xor     r13d, r13d
.text:0000000000004C7C                 xor     r10d, r10d
.text:0000000000004C7F                 mov     rdx, r15
.text:0000000000004C82                 not     rdx
.text:0000000000004C85                 jmp     loc_4A1C
.text:0000000000004C8A ; ---------------------------------------------------------------------------
.text:0000000000004C8A
.text:0000000000004C8A loc_4C8A:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004C8A                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004C8A                 lea     rax, aHMS       ; jumptable 00000000000043C3 case 84
.text:0000000000004C91                 mov     r14d, 0FFFFFFFFh
.text:0000000000004C97                 mov     [rsp+4E8h+ptr], rax
.text:0000000000004C9C                 jmp     loc_486F
.text:0000000000004CA1 ; ---------------------------------------------------------------------------
.text:0000000000004CA1
.text:0000000000004CA1 loc_4CA1:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004CA1                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004CA1                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 85
.text:0000000000004CA5                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000004CAB                 mov     rax, [rsp+4E8h+tp]
.text:0000000000004CAF                 mov     edx, 92492493h
.text:0000000000004CB4                 mov     esi, [rax+1Ch]
.text:0000000000004CB7                 sub     esi, [rax+18h]
.text:0000000000004CBA                 add     esi, 7
.text:0000000000004CBD                 mov     eax, esi
.text:0000000000004CBF                 imul    edx
.text:0000000000004CC1
.text:0000000000004CC1 loc_4CC1:                               ; CODE XREF: __strftime_internal+FF0↓j
.text:0000000000004CC1                 lea     ecx, [rdx+rsi]
.text:0000000000004CC4                 sar     esi, 1Fh
.text:0000000000004CC7                 sar     ecx, 2
.text:0000000000004CCA                 sub     ecx, esi
.text:0000000000004CCC                 mov     esi, 2
.text:0000000000004CD1                 jmp     loc_47D0
.text:0000000000004CD6 ; ---------------------------------------------------------------------------
.text:0000000000004CD6
.text:0000000000004CD6 loc_4CD6:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004CD6                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004CD6                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 cases 71,86,103
.text:0000000000004CDA                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000004CE0                 mov     rcx, [rsp+4E8h+tp]
.text:0000000000004CE4                 mov     edx, 92492493h
.text:0000000000004CE9                 mov     esi, [rcx+14h]
.text:0000000000004CEC                 mov     r8d, [rcx+1Ch]
.text:0000000000004CF0                 mov     r14d, [rcx+18h]
.text:0000000000004CF4                 mov     eax, esi
.text:0000000000004CF6                 mov     ecx, r8d
.text:0000000000004CF9                 sar     eax, 1Fh
.text:0000000000004CFC                 sub     ecx, r14d
.text:0000000000004CFF                 add     ecx, 17Eh
.text:0000000000004D05                 and     eax, 190h
.text:0000000000004D0A                 lea     r9d, [rsi+rax-64h]
.text:0000000000004D0F                 mov     eax, ecx
.text:0000000000004D11                 imul    edx
.text:0000000000004D13                 lea     eax, [rdx+rcx]
.text:0000000000004D16                 mov     edx, ecx
.text:0000000000004D18                 sar     edx, 1Fh
.text:0000000000004D1B                 sar     eax, 2
.text:0000000000004D1E                 sub     eax, edx
.text:0000000000004D20                 lea     edx, ds:0[rax*8]
.text:0000000000004D27                 sub     edx, eax
.text:0000000000004D29                 mov     eax, r8d
.text:0000000000004D2C                 sub     eax, ecx
.text:0000000000004D2E                 lea     ebp, [rax+rdx+3]
.text:0000000000004D32                 test    ebp, ebp
.text:0000000000004D34                 js      loc_5B60
.text:0000000000004D3A                 test    r9b, 3
.text:0000000000004D3E                 mov     eax, 16Dh
.text:0000000000004D43                 jnz     short loc_4D8A
.text:0000000000004D45                 mov     eax, r9d
.text:0000000000004D48                 mov     edx, 51EB851Fh
.text:0000000000004D4D                 mov     ecx, r9d
.text:0000000000004D50                 imul    edx
.text:0000000000004D52                 sar     ecx, 1Fh
.text:0000000000004D55                 mov     eax, 16Eh
.text:0000000000004D5A                 mov     dword ptr [rsp+4E8h+ptr], edx
.text:0000000000004D5E                 sar     edx, 5
.text:0000000000004D61                 sub     edx, ecx
.text:0000000000004D63                 imul    edx, 64h ; 'd'
.text:0000000000004D66                 cmp     r9d, edx
.text:0000000000004D69                 jnz     short loc_4D8A
.text:0000000000004D6B                 mov     edx, dword ptr [rsp+4E8h+ptr]
.text:0000000000004D6F                 sar     edx, 7
.text:0000000000004D72                 mov     eax, edx
.text:0000000000004D74                 sub     eax, ecx
.text:0000000000004D76                 imul    eax, 190h
.text:0000000000004D7C                 cmp     r9d, eax
.text:0000000000004D7F                 setz    al
.text:0000000000004D82                 movzx   eax, al
.text:0000000000004D85                 add     eax, 16Dh
.text:0000000000004D8A
.text:0000000000004D8A loc_4D8A:                               ; CODE XREF: __strftime_internal+B43↑j
.text:0000000000004D8A                                         ; __strftime_internal+B69↑j
.text:0000000000004D8A                 sub     r8d, eax
.text:0000000000004D8D                 mov     edx, 92492493h
.text:0000000000004D92                 mov     ecx, r8d
.text:0000000000004D95                 sub     ecx, r14d
.text:0000000000004D98                 add     ecx, 17Eh
.text:0000000000004D9E                 mov     eax, ecx
.text:0000000000004DA0                 sub     r8d, ecx
.text:0000000000004DA3                 imul    edx
.text:0000000000004DA5                 lea     eax, [rdx+rcx]
.text:0000000000004DA8                 mov     edx, ecx
.text:0000000000004DAA                 sar     edx, 1Fh
.text:0000000000004DAD                 sar     eax, 2
.text:0000000000004DB0                 sub     eax, edx
.text:0000000000004DB2                 lea     edx, ds:0[rax*8]
.text:0000000000004DB9                 sub     edx, eax
.text:0000000000004DBB                 lea     ecx, [r8+rdx+3]
.text:0000000000004DC0                 mov     r8d, 1
.text:0000000000004DC6                 test    ecx, ecx
.text:0000000000004DC8                 jns     short loc_4DCF
.text:0000000000004DCA                 mov     ecx, ebp
.text:0000000000004DCC                 xor     r8d, r8d
.text:0000000000004DCF
.text:0000000000004DCF loc_4DCF:                               ; CODE XREF: __strftime_internal+BC8↑j
.text:0000000000004DCF                                         ; __strftime_internal+19E5↓j
.text:0000000000004DCF                 cmp     r13b, 47h ; 'G'
.text:0000000000004DD3                 jz      loc_5A67
.text:0000000000004DD9                 cmp     r13b, 67h ; 'g'
.text:0000000000004DDD                 jnz     loc_5BEA
.text:0000000000004DE3                 mov     ecx, 51EB851Fh
.text:0000000000004DE8                 mov     eax, esi
.text:0000000000004DEA                 mov     r9d, esi
.text:0000000000004DED                 imul    ecx
.text:0000000000004DEF                 mov     eax, edx
.text:0000000000004DF1                 mov     edx, esi
.text:0000000000004DF3                 sar     edx, 1Fh
.text:0000000000004DF6                 sar     eax, 5
.text:0000000000004DF9                 sub     eax, edx
.text:0000000000004DFB                 imul    eax, 64h ; 'd'
.text:0000000000004DFE                 sub     r9d, eax
.text:0000000000004E01                 add     r9d, r8d
.text:0000000000004E04                 mov     eax, r9d
.text:0000000000004E07                 imul    ecx
.text:0000000000004E09                 mov     eax, r9d
.text:0000000000004E0C                 sar     eax, 1Fh
.text:0000000000004E0F                 mov     ecx, edx
.text:0000000000004E11                 sar     ecx, 5
.text:0000000000004E14                 sub     ecx, eax
.text:0000000000004E16                 imul    ecx, 64h ; 'd'
.text:0000000000004E19                 sub     r9d, ecx
.text:0000000000004E1C                 mov     ecx, r9d
.text:0000000000004E1F                 js      loc_5A24
.text:0000000000004E25
.text:0000000000004E25 loc_4E25:                               ; CODE XREF: __strftime_internal+1159↓j
.text:0000000000004E25                                         ; __strftime_internal+116D↓j
.text:0000000000004E25                 mov     esi, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000004E29                 test    esi, esi
.text:0000000000004E2B                 jz      loc_5A41
.text:0000000000004E31
.text:0000000000004E31 loc_4E31:                               ; CODE XREF: __strftime_internal+183B↓j
.text:0000000000004E31                                         ; __strftime_internal+1C0B↓j
.text:0000000000004E31                 mov     eax, 1
.text:0000000000004E36                 xor     r13d, r13d
.text:0000000000004E39
.text:0000000000004E39 loc_4E39:                               ; CODE XREF: __strftime_internal+D50↓j
.text:0000000000004E39                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000004E3E                 jz      loc_5DDD
.text:0000000000004E44
.text:0000000000004E44 loc_4E44:                               ; CODE XREF: __strftime_internal+D69↓j
.text:0000000000004E44                 xor     r9d, r9d
.text:0000000000004E47                 mov     esi, 2
.text:0000000000004E4C
.text:0000000000004E4C loc_4E4C:                               ; CODE XREF: __strftime_internal+104E↓j
.text:0000000000004E4C                                         ; __strftime_internal+1741↓j ...
.text:0000000000004E4C                 xor     r8d, r8d
.text:0000000000004E4F                 jmp     loc_47E5
.text:0000000000004E54 ; ---------------------------------------------------------------------------
.text:0000000000004E54
.text:0000000000004E54 loc_4E54:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004E54                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004E54                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 72
.text:0000000000004E58                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000004E5E                 mov     rax, [rsp+4E8h+tp]
.text:0000000000004E62                 mov     esi, 2
.text:0000000000004E67                 mov     ecx, [rax+8]
.text:0000000000004E6A                 jmp     loc_47D0
.text:0000000000004E6F ; ---------------------------------------------------------------------------
.text:0000000000004E6F
.text:0000000000004E6F loc_4E6F:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004E6F                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004E6F                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 77
.text:0000000000004E73                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000004E79                 mov     rax, [rsp+4E8h+tp]
.text:0000000000004E7D                 mov     esi, 2
.text:0000000000004E82                 mov     ecx, [rax+4]
.text:0000000000004E85                 jmp     loc_47D0
.text:0000000000004E8A ; ---------------------------------------------------------------------------
.text:0000000000004E8A
.text:0000000000004E8A loc_4E8A:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004E8A                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004E8A                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 78
.text:0000000000004E8E                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000004E94                 cmp     r10d, 0FFFFFFFFh
.text:0000000000004E98                 jz      loc_5AB0
.text:0000000000004E9E                 cmp     r10d, 8
.text:0000000000004EA2                 jg      loc_5DEC
.text:0000000000004EA8                 mov     ecx, [rsp+4E8h+arg_10]
.text:0000000000004EAF                 mov     esi, r10d
.text:0000000000004EB2                 mov     r8d, 66666667h
.text:0000000000004EB8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004EC0
.text:0000000000004EC0 loc_4EC0:                               ; CODE XREF: __strftime_internal+CD5↓j
.text:0000000000004EC0                 mov     eax, ecx
.text:0000000000004EC2                 add     esi, 1
.text:0000000000004EC5                 sar     ecx, 1Fh
.text:0000000000004EC8                 imul    r8d
.text:0000000000004ECB                 sar     edx, 2
.text:0000000000004ECE                 sub     edx, ecx
.text:0000000000004ED0                 cmp     esi, 9
.text:0000000000004ED3                 mov     ecx, edx
.text:0000000000004ED5                 jnz     short loc_4EC0
.text:0000000000004ED7
.text:0000000000004ED7 loc_4ED7:                               ; CODE XREF: __strftime_internal+1BF3↓j
.text:0000000000004ED7                 mov     esi, r10d
.text:0000000000004EDA                 jmp     loc_47D0
.text:0000000000004EDF ; ---------------------------------------------------------------------------
.text:0000000000004EDF
.text:0000000000004EDF loc_4EDF:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004EDF                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004EDF                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 73
.text:0000000000004EE3                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000004EE9                 mov     ecx, [rsp+4E8h+var_4B8]
.text:0000000000004EED                 mov     esi, 2
.text:0000000000004EF2                 jmp     loc_47D0
.text:0000000000004EF7 ; ---------------------------------------------------------------------------
.text:0000000000004EF7
.text:0000000000004EF7 loc_4EF7:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004EF7                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004EF7                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 67
.text:0000000000004EFB                 jz      loc_57A3
.text:0000000000004F01                 mov     rax, [rsp+4E8h+tp]
.text:0000000000004F05                 mov     edx, 51EB851Fh
.text:0000000000004F0A                 mov     r9d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000004F0F                 mov     esi, [rax+14h]
.text:0000000000004F12                 mov     eax, esi
.text:0000000000004F14                 imul    edx
.text:0000000000004F16                 mov     eax, edx
.text:0000000000004F18                 mov     edx, esi
.text:0000000000004F1A                 sar     edx, 1Fh
.text:0000000000004F1D                 sar     eax, 5
.text:0000000000004F20                 sub     eax, edx
.text:0000000000004F22                 mov     edx, esi
.text:0000000000004F24                 lea     ecx, [rax+13h]
.text:0000000000004F27                 imul    eax, 64h ; 'd'
.text:0000000000004F2A                 sub     edx, eax
.text:0000000000004F2C                 mov     eax, edx
.text:0000000000004F2E                 shr     eax, 1Fh
.text:0000000000004F31                 test    ecx, ecx
.text:0000000000004F33                 setnle  dl
.text:0000000000004F36                 and     eax, edx
.text:0000000000004F38                 cmp     esi, 0FFFFF894h
.text:0000000000004F3E                 setl    r13b
.text:0000000000004F42                 sub     ecx, eax
.text:0000000000004F44                 cmp     esi, 0FFFFF894h
.text:0000000000004F4A                 setnl   al
.text:0000000000004F4D                 test    r9d, r9d
.text:0000000000004F50                 jnz     loc_4E39
.text:0000000000004F56                 cmp     [rsp+4E8h+var_4C4], 2Bh ; '+'
.text:0000000000004F5B                 jz      loc_5DDD
.text:0000000000004F61                 mov     esi, [rsp+4E8h+var_4C4]
.text:0000000000004F65                 mov     dword ptr [rsp+4E8h+var_4E0], esi
.text:0000000000004F69                 jmp     loc_4E44
.text:0000000000004F6E ; ---------------------------------------------------------------------------
.text:0000000000004F6E
.text:0000000000004F6E loc_4F6E:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004F6E                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004F6E                 test    r11d, r11d      ; jumptable 00000000000043C3 case 68
.text:0000000000004F71                 jnz     def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000004F77                 lea     rax, aMDY       ; "%m/%d/%y"
.text:0000000000004F7E                 mov     r14d, 0FFFFFFFFh
.text:0000000000004F84                 mov     [rsp+4E8h+ptr], rax
.text:0000000000004F89                 jmp     loc_486F
.text:0000000000004F8E ; ---------------------------------------------------------------------------
.text:0000000000004F8E
.text:0000000000004F8E loc_4F8E:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004F8E                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004F8E                 test    r11d, r11d      ; jumptable 00000000000043C3 case 70
.text:0000000000004F91                 jnz     def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000004F97                 mov     r11d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000004F9C                 test    r11d, r11d
.text:0000000000004F9F                 jnz     loc_5CEF
.text:0000000000004FA5                 test    r10d, r10d
.text:0000000000004FA8                 jns     loc_5CEF
.text:0000000000004FAE                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:0000000000004FB5                 mov     r14d, 4
.text:0000000000004FBB                 mov     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000004FC3                 mov     [rsp+4E8h+ptr], rax
.text:0000000000004FC8                 jmp     loc_486F
.text:0000000000004FCD ; ---------------------------------------------------------------------------
.text:0000000000004FCD
.text:0000000000004FCD loc_4FCD:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000004FCD                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000004FCD                 movzx   ecx, byte ptr [rbx-1] ; jumptable 00000000000043C3 case 0
.text:0000000000004FD1                 lea     rax, [rbx-1]
.text:0000000000004FD5                 mov     [rsp+4E8h+ptr], rax
.text:0000000000004FDA
.text:0000000000004FDA loc_4FDA:                               ; CODE XREF: __strftime_internal+1ACC↓j
.text:0000000000004FDA                 test    r10d, r10d
.text:0000000000004FDD                 mov     eax, 0
.text:0000000000004FE2                 mov     rdx, r15
.text:0000000000004FE5                 cmovns  eax, r10d
.text:0000000000004FE9                 cmp     cl, 25h ; '%'
.text:0000000000004FEC                 not     rdx
.text:0000000000004FEF                 cdqe
.text:0000000000004FF1                 jnz     loc_440B
.text:0000000000004FF7                 test    rax, rax
.text:0000000000004FFA                 mov     r14d, 1
.text:0000000000005000                 mov     rbp, [rsp+4E8h+ptr]
.text:0000000000005005                 cmovnz  r14, rax
.text:0000000000005009                 mov     r13d, 1
.text:000000000000500F                 jmp     loc_4454
.text:0000000000005014 ; ---------------------------------------------------------------------------
.text:0000000000005014
.text:0000000000005014 loc_5014:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000005014                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000005014                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 66
.text:0000000000005018                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000501E                 test    r14b, r14b
.text:0000000000005021                 jz      loc_45AD
.text:0000000000005027                 mov     byte ptr [rsp+4E8h+var_4B4], r14b
.text:000000000000502C                 jmp     loc_45AA        ; jumptable 00000000000043C3 case 114
.text:0000000000005031 ; ---------------------------------------------------------------------------
.text:0000000000005031
.text:0000000000005031 loc_5031:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000005031                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000005031                 test    r10d, r10d      ; jumptable 00000000000043C3 case 37
.text:0000000000005034                 mov     eax, 0
.text:0000000000005039                 mov     r14d, 1
.text:000000000000503F                 cmovns  eax, r10d
.text:0000000000005043                 mov     rdx, r15
.text:0000000000005046                 cdqe
.text:0000000000005048                 not     rdx
.text:000000000000504B                 test    rax, rax
.text:000000000000504E                 cmovnz  r14, rax
.text:0000000000005052                 test    r11d, r11d
.text:0000000000005055                 jnz     loc_5AC7
.text:000000000000505B                 cmp     rdx, r14
.text:000000000000505E                 jbe     loc_42BF
.text:0000000000005064                 test    r12, r12
.text:0000000000005067                 jz      loc_430A
.text:000000000000506D                 cmp     r10d, 1
.text:0000000000005071                 jle     loc_4302
.text:0000000000005077                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:000000000000507B                 movsxd  r10, r10d
.text:000000000000507E                 lea     r13, [r10-1]
.text:0000000000005082                 cmp     eax, 30h ; '0'
.text:0000000000005085                 jz      loc_5DAE
.text:000000000000508B                 xor     ebp, ebp
.text:000000000000508D                 cmp     eax, 2Bh ; '+'
.text:0000000000005090                 jz      loc_5DAE
.text:0000000000005096
.text:0000000000005096 loc_5096:                               ; CODE XREF: __strftime_internal+EAA↓j
.text:0000000000005096                 mov     rsi, r12        ; stream
.text:0000000000005099                 mov     edi, 20h ; ' '  ; c
.text:000000000000509E                 add     rbp, 1
.text:00000000000050A2                 call    _fputc
.text:00000000000050A7                 cmp     r13, rbp
.text:00000000000050AA                 jnz     short loc_5096
.text:00000000000050AC                 jmp     loc_42FF
.text:00000000000050B1 ; ---------------------------------------------------------------------------
.text:00000000000050B1
.text:00000000000050B1 loc_50B1:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000050B1                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000050B1                 movzx   eax, byte ptr [rbx+1] ; jumptable 00000000000043C3 case 58
.text:00000000000050B5                 lea     rdx, [rbx+1]
.text:00000000000050B9                 cmp     al, 3Ah ; ':'
.text:00000000000050BB                 jz      loc_5CA1
.text:00000000000050C1                 mov     r14d, 1
.text:00000000000050C7
.text:00000000000050C7 loc_50C7:                               ; CODE XREF: __strftime_internal+1ABC↓j
.text:00000000000050C7                 cmp     al, 7Ah ; 'z'
.text:00000000000050C9                 jnz     def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000050CF                 mov     rbx, rdx
.text:00000000000050D2
.text:00000000000050D2 loc_50D2:                               ; CODE XREF: __strftime_internal+12F3↓j
.text:00000000000050D2                 mov     rax, [rsp+4E8h+tp]
.text:00000000000050D6                 mov     ecx, [rax+20h]
.text:00000000000050D9                 test    ecx, ecx
.text:00000000000050DB                 js      loc_595B
.text:00000000000050E1                 mov     rcx, [rax+28h]
.text:00000000000050E5                 mov     r13d, 1
.text:00000000000050EB                 test    ecx, ecx
.text:00000000000050ED                 js      short loc_5103
.text:00000000000050EF                 mov     r13d, 0
.text:00000000000050F5                 jnz     short loc_5103
.text:00000000000050F7                 mov     rax, [rsp+4E8h+var_4C0]
.text:00000000000050FC                 cmp     byte ptr [rax], 2Dh ; '-'
.text:00000000000050FF                 setz    r13b
.text:0000000000005103
.text:0000000000005103 loc_5103:                               ; CODE XREF: __strftime_internal+EED↑j
.text:0000000000005103                                         ; __strftime_internal+EF5↑j
.text:0000000000005103                 mov     eax, ecx
.text:0000000000005105                 mov     edx, 91A2B3C5h
.text:000000000000510A                 mov     r9d, ecx
.text:000000000000510D                 imul    edx
.text:000000000000510F                 sar     r9d, 1Fh
.text:0000000000005113                 mov     r8d, 88888889h
.text:0000000000005119                 mov     eax, ecx
.text:000000000000511B                 add     edx, ecx
.text:000000000000511D                 sar     edx, 0Bh
.text:0000000000005120                 sub     edx, r9d
.text:0000000000005123                 mov     ebp, edx
.text:0000000000005125                 imul    r8d
.text:0000000000005128                 lea     esi, [rdx+rcx]
.text:000000000000512B                 sar     esi, 5
.text:000000000000512E                 sub     esi, r9d
.text:0000000000005131                 mov     eax, esi
.text:0000000000005133                 imul    r8d
.text:0000000000005136                 mov     eax, esi
.text:0000000000005138                 sar     eax, 1Fh
.text:000000000000513B                 lea     r8d, [rdx+rsi]
.text:000000000000513F                 sar     r8d, 5
.text:0000000000005143                 sub     r8d, eax
.text:0000000000005146                 mov     eax, esi
.text:0000000000005148                 imul    r8d, 3Ch ; '<'
.text:000000000000514C                 imul    esi, 3Ch ; '<'
.text:000000000000514F                 sub     eax, r8d
.text:0000000000005152                 sub     ecx, esi
.text:0000000000005154                 cmp     r14, 1
.text:0000000000005158                 mov     r8d, eax
.text:000000000000515B                 jz      loc_5C0D
.text:0000000000005161                 jb      loc_5CD1
.text:0000000000005167                 cmp     r14, 2
.text:000000000000516B                 jz      loc_5B13
.text:0000000000005171                 cmp     r14, 3
.text:0000000000005175                 jnz     loc_5CC4
.text:000000000000517B                 test    ecx, ecx
.text:000000000000517D                 jnz     loc_5B13
.text:0000000000005183                 test    eax, eax
.text:0000000000005185                 jnz     loc_5C0D
.text:000000000000518B                 mov     eax, r13d
.text:000000000000518E                 mov     ecx, ebp
.text:0000000000005190                 mov     r9d, 1
.text:0000000000005196                 xor     eax, 1
.text:0000000000005199                 mov     esi, 3
.text:000000000000519E                 jmp     loc_47E5
.text:000000000000519E ; ---------------------------------------------------------------------------
.text:00000000000051A3                 align 8
.text:00000000000051A8
.text:00000000000051A8 loc_51A8:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000051A8                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000051A8                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 87
.text:00000000000051AC                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000051B2                 mov     r9, [rsp+4E8h+tp]
.text:00000000000051B6                 mov     ecx, 92492493h
.text:00000000000051BB                 mov     eax, [r9+18h]
.text:00000000000051BF                 lea     esi, [rax+6]
.text:00000000000051C2                 mov     dword ptr [rsp+4E8h+ptr], eax
.text:00000000000051C6                 mov     eax, esi
.text:00000000000051C8                 imul    ecx
.text:00000000000051CA                 lea     eax, [rdx+rsi]
.text:00000000000051CD                 mov     edx, esi
.text:00000000000051CF                 sar     edx, 1Fh
.text:00000000000051D2                 sar     eax, 2
.text:00000000000051D5                 sub     eax, edx
.text:00000000000051D7                 lea     edx, ds:0[rax*8]
.text:00000000000051DE                 sub     edx, eax
.text:00000000000051E0                 mov     eax, edx
.text:00000000000051E2                 mov     edx, [r9+1Ch]
.text:00000000000051E6                 sub     eax, esi
.text:00000000000051E8                 lea     esi, [rax+rdx+7]
.text:00000000000051EC                 mov     eax, esi
.text:00000000000051EE                 imul    ecx
.text:00000000000051F0                 jmp     loc_4CC1
.text:00000000000051F5 ; ---------------------------------------------------------------------------
.text:00000000000051F5
.text:00000000000051F5 loc_51F5:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000051F5                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000051F5                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 89
.text:00000000000051F9                 jz      loc_57A3
.text:00000000000051FF                 cmp     r11d, 4Fh ; 'O'
.text:0000000000005203                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000005209                 mov     rax, [rsp+4E8h+tp]
.text:000000000000520D                 mov     r8d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000005212                 mov     eax, [rax+14h]
.text:0000000000005215                 cmp     eax, 0FFFFF894h
.text:000000000000521A                 lea     ecx, [rax+76Ch]
.text:0000000000005220                 setl    r13b
.text:0000000000005224                 cmp     eax, 0FFFFF894h
.text:0000000000005229                 setnl   al
.text:000000000000522C                 test    r8d, r8d
.text:000000000000522F                 jnz     loc_5A8E
.text:0000000000005235
.text:0000000000005235 loc_5235:                               ; CODE XREF: __strftime_internal+1888↓j
.text:0000000000005235                 mov     esi, [rsp+4E8h+var_4C4]
.text:0000000000005239                 cmp     esi, 2Bh ; '+'
.text:000000000000523C                 jz      loc_5927
.text:0000000000005242                 mov     dword ptr [rsp+4E8h+var_4E0], esi
.text:0000000000005246                 xor     r9d, r9d
.text:0000000000005249                 mov     esi, 4
.text:000000000000524E                 jmp     loc_4E4C
.text:0000000000005253 ; ---------------------------------------------------------------------------
.text:0000000000005253
.text:0000000000005253 loc_5253:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000005253                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000005253                 movzx   edi, byte ptr [rsp+4E8h+var_4B4] ; jumptable 00000000000043C3 case 90
.text:0000000000005258                 test    r14b, r14b
.text:000000000000525B                 mov     eax, 0
.text:0000000000005260                 mov     dword ptr [rsp+4E8h+ptr], r10d
.text:0000000000005265                 cmovnz  edi, eax
.text:0000000000005268                 mov     byte ptr [rsp+4E8h+var_4B4], dil
.text:000000000000526D                 mov     rdi, [rsp+4E8h+var_4C0] ; s
.text:0000000000005272                 call    _strlen
.text:0000000000005277                 movsxd  r10, dword ptr [rsp+4E8h+ptr]
.text:000000000000527C                 mov     r13, rax
.text:000000000000527F                 mov     eax, 0
.text:0000000000005284                 mov     rdx, r15
.text:0000000000005287                 not     rdx
.text:000000000000528A                 test    r10d, r10d
.text:000000000000528D                 cmovns  rax, r10
.text:0000000000005291                 cmp     r13, rax
.text:0000000000005294                 mov     rbp, rax
.text:0000000000005297                 cmovnb  rbp, r13
.text:000000000000529B                 cmp     rdx, rbp
.text:000000000000529E                 jbe     loc_42BF
.text:00000000000052A4                 test    r12, r12
.text:00000000000052A7                 jz      short loc_531F
.text:00000000000052A9                 cmp     r13, rax
.text:00000000000052AC                 jnb     short loc_52FB
.text:00000000000052AE                 mov     edi, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000052B2                 mov     rax, r10
.text:00000000000052B5                 sub     rax, r13
.text:00000000000052B8                 mov     [rsp+4E8h+ptr], rax
.text:00000000000052BD                 cmp     edi, 30h ; '0'
.text:00000000000052C0                 jz      loc_5D43
.text:00000000000052C6                 cmp     edi, 2Bh ; '+'
.text:00000000000052C9                 jz      loc_5D43
.text:00000000000052CF                 xor     edx, edx
.text:00000000000052D1                 test    rax, rax
.text:00000000000052D4                 jz      short loc_52FB
.text:00000000000052D6                 mov     [rsp+4E8h+var_4E0], rbx
.text:00000000000052DB                 mov     rbx, rdx
.text:00000000000052DE
.text:00000000000052DE loc_52DE:                               ; CODE XREF: __strftime_internal+10F4↓j
.text:00000000000052DE                 mov     rsi, r12        ; stream
.text:00000000000052E1                 mov     edi, 20h ; ' '  ; c
.text:00000000000052E6                 add     rbx, 1
.text:00000000000052EA                 call    _fputc
.text:00000000000052EF                 cmp     [rsp+4E8h+ptr], rbx
.text:00000000000052F4                 jnz     short loc_52DE
.text:00000000000052F6
.text:00000000000052F6 loc_52F6:                               ; CODE XREF: __strftime_internal+1B71↓j
.text:00000000000052F6                 mov     rbx, [rsp+4E8h+var_4E0]
.text:00000000000052FB
.text:00000000000052FB loc_52FB:                               ; CODE XREF: __strftime_internal+10AC↑j
.text:00000000000052FB                                         ; __strftime_internal+10D4↑j ...
.text:00000000000052FB                 test    r14b, r14b
.text:00000000000052FE                 jnz     loc_5C83
.text:0000000000005304                 cmp     byte ptr [rsp+4E8h+var_4B4], 0
.text:0000000000005309                 jz      loc_5C69
.text:000000000000530F                 mov     rsi, [rsp+4E8h+var_4C0]
.text:0000000000005314                 mov     rdx, r13
.text:0000000000005317                 mov     rdi, r12        ; stream
.text:000000000000531A                 call    fwrite_uppcase
.text:000000000000531F
.text:000000000000531F loc_531F:                               ; CODE XREF: __strftime_internal+10A7↑j
.text:000000000000531F                                         ; __strftime_internal+1A7E↓j ...
.text:000000000000531F                 add     r15, rbp
.text:0000000000005322                 mov     rbp, rbx
.text:0000000000005325                 jmp     loc_4310
.text:000000000000532A ; ---------------------------------------------------------------------------
.text:000000000000532A
.text:000000000000532A loc_532A:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000532A                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:000000000000532A                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 121
.text:000000000000532E                 jz      loc_57A3
.text:0000000000005334                 mov     rax, [rsp+4E8h+tp]
.text:0000000000005338                 mov     edx, 51EB851Fh
.text:000000000000533D                 mov     esi, [rax+14h]
.text:0000000000005340                 mov     eax, esi
.text:0000000000005342                 imul    edx
.text:0000000000005344                 mov     eax, esi
.text:0000000000005346                 sar     eax, 1Fh
.text:0000000000005349                 mov     ecx, edx
.text:000000000000534B                 sar     ecx, 5
.text:000000000000534E                 sub     ecx, eax
.text:0000000000005350                 mov     eax, esi
.text:0000000000005352                 imul    ecx, 64h ; 'd'
.text:0000000000005355                 sub     eax, ecx
.text:0000000000005357                 mov     ecx, eax
.text:0000000000005359                 jns     loc_4E25
.text:000000000000535F                 neg     eax
.text:0000000000005361                 add     ecx, 64h ; 'd'
.text:0000000000005364                 cmp     esi, 0FFFFF893h
.text:000000000000536A                 cmovle  ecx, eax
.text:000000000000536D                 jmp     loc_4E25
.text:0000000000005372 ; ---------------------------------------------------------------------------
.text:0000000000005372
.text:0000000000005372 loc_5372:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000005372                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000005372                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 100
.text:0000000000005376                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000537C                 mov     rax, [rsp+4E8h+tp]
.text:0000000000005380                 mov     esi, 2
.text:0000000000005385                 mov     ecx, [rax+0Ch]
.text:0000000000005388                 jmp     loc_47D0
.text:000000000000538D ; ---------------------------------------------------------------------------
.text:000000000000538D
.text:000000000000538D loc_538D:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000538D                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:000000000000538D                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 101
.text:0000000000005391                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000005397                 mov     rax, [rsp+4E8h+tp]
.text:000000000000539B                 mov     ecx, [rax+0Ch]
.text:000000000000539E
.text:000000000000539E loc_539E:                               ; CODE XREF: __strftime_internal+1200↓j
.text:000000000000539E                                         ; __strftime_internal+1210↓j
.text:000000000000539E                 mov     r8d, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000053A3                 mov     esi, 2
.text:00000000000053A8                 test    r8d, r8d
.text:00000000000053AB                 jnz     loc_47D0
.text:00000000000053B1                 mov     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:00000000000053B9                 jmp     loc_47D0
.text:00000000000053BE ; ---------------------------------------------------------------------------
.text:00000000000053BE
.text:00000000000053BE loc_53BE:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000053BE                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000053BE                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 106
.text:00000000000053C2                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000053C8                 mov     rax, [rsp+4E8h+tp]
.text:00000000000053CC                 mov     esi, 3
.text:00000000000053D1                 mov     eax, [rax+1Ch]
.text:00000000000053D4                 cmp     eax, 0FFFFFFFFh
.text:00000000000053D7                 lea     ecx, [rax+1]
.text:00000000000053DA                 setl    r13b
.text:00000000000053DE                 cmp     eax, 0FFFFFFFFh
.text:00000000000053E1                 setnl   al
.text:00000000000053E4                 xor     r8d, r8d
.text:00000000000053E7                 xor     r9d, r9d
.text:00000000000053EA                 jmp     loc_47E5
.text:00000000000053EF ; ---------------------------------------------------------------------------
.text:00000000000053EF
.text:00000000000053EF loc_53EF:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000053EF                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000053EF                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 107
.text:00000000000053F3                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000053F9                 mov     rax, [rsp+4E8h+tp]
.text:00000000000053FD                 mov     ecx, [rax+8]
.text:0000000000005400                 jmp     short loc_539E
.text:0000000000005402 ; ---------------------------------------------------------------------------
.text:0000000000005402
.text:0000000000005402 loc_5402:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000005402                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000005402                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 108
.text:0000000000005406                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000540C                 mov     ecx, [rsp+4E8h+var_4B8]
.text:0000000000005410                 jmp     short loc_539E
.text:0000000000005412 ; ---------------------------------------------------------------------------
.text:0000000000005412
.text:0000000000005412 loc_5412:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000005412                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000005412                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000043C3 case 109
.text:0000000000005416                 jz      def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000541C                 mov     rax, [rsp+4E8h+tp]
.text:0000000000005420                 mov     esi, 2
.text:0000000000005425                 mov     eax, [rax+10h]
.text:0000000000005428                 cmp     eax, 0FFFFFFFFh
.text:000000000000542B                 lea     ecx, [rax+1]
.text:000000000000542E                 setl    r13b
.text:0000000000005432                 cmp     eax, 0FFFFFFFFh
.text:0000000000005435                 setnl   al
.text:0000000000005438                 xor     r8d, r8d
.text:000000000000543B                 xor     r9d, r9d
.text:000000000000543E                 jmp     loc_47E5
.text:0000000000005443 ; ---------------------------------------------------------------------------
.text:0000000000005443
.text:0000000000005443 loc_5443:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000005443                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:0000000000005443                 test    r10d, r10d      ; jumptable 00000000000043C3 case 110
.text:0000000000005446                 mov     r13d, 0
.text:000000000000544C                 mov     eax, 1
.text:0000000000005451                 cmovns  r13d, r10d
.text:0000000000005455                 movsxd  r13, r13d
.text:0000000000005458                 test    r13, r13
.text:000000000000545B                 cmovz   r13, rax
.text:000000000000545F                 mov     rax, r15
.text:0000000000005462                 not     rax
.text:0000000000005465                 cmp     rax, r13
.text:0000000000005468                 jbe     loc_42BF
.text:000000000000546E                 test    r12, r12
.text:0000000000005471                 jz      loc_48DF
.text:0000000000005477                 cmp     r10d, 1
.text:000000000000547B                 jle     short loc_54B2
.text:000000000000547D                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000005481                 movsxd  r10, r10d
.text:0000000000005484                 lea     r14, [r10-1]
.text:0000000000005488                 cmp     eax, 30h ; '0'
.text:000000000000548B                 jz      loc_5C4C
.text:0000000000005491                 xor     ebp, ebp
.text:0000000000005493                 cmp     eax, 2Bh ; '+'
.text:0000000000005496                 jz      loc_5C4C
.text:000000000000549C
.text:000000000000549C loc_549C:                               ; CODE XREF: __strftime_internal+12B0↓j
.text:000000000000549C                 mov     rsi, r12        ; stream
.text:000000000000549F                 mov     edi, 20h ; ' '  ; c
.text:00000000000054A4                 add     rbp, 1
.text:00000000000054A8                 call    _fputc
.text:00000000000054AD                 cmp     r14, rbp
.text:00000000000054B0                 jnz     short loc_549C
.text:00000000000054B2
.text:00000000000054B2 loc_54B2:                               ; CODE XREF: __strftime_internal+127B↑j
.text:00000000000054B2                                         ; __strftime_internal+1A64↓j
.text:00000000000054B2                 mov     rsi, r12        ; stream
.text:00000000000054B5                 mov     edi, 0Ah        ; c
.text:00000000000054BA                 call    _fputc
.text:00000000000054BF                 jmp     loc_48DF
.text:00000000000054C4 ; ---------------------------------------------------------------------------
.text:00000000000054C4
.text:00000000000054C4 loc_54C4:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000054C4                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000054C4                 xor     eax, eax        ; jumptable 00000000000043C3 case 112
.text:00000000000054C6                 jmp     loc_4846
.text:00000000000054CB ; ---------------------------------------------------------------------------
.text:00000000000054CB
.text:00000000000054CB loc_54CB:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000054CB                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000054CB                 movzx   eax, byte ptr [rsp+4E8h+var_4B4] ; jumptable 00000000000043C3 cases 98,104
.text:00000000000054D0                 test    r14b, r14b
.text:00000000000054D3                 cmovnz  eax, r14d
.text:00000000000054D7                 cmp     r11d, 45h ; 'E'
.text:00000000000054DB                 jz      loc_5C98
.text:00000000000054E1                 mov     r13d, edi
.text:00000000000054E4                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:00000000000054E8                 xor     r14d, r14d
.text:00000000000054EB                 jmp     loc_45AD
.text:00000000000054F0 ; ---------------------------------------------------------------------------
.text:00000000000054F0
.text:00000000000054F0 loc_54F0:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000054F0                                         ; DATA XREF: .rodata:jpt_43C3↓o
.text:00000000000054F0                 xor     r14d, r14d      ; jumptable 00000000000043C3 case 122
.text:00000000000054F3                 jmp     loc_50D2
.text:00000000000054F3 ; ---------------------------------------------------------------------------
.text:00000000000054F8                 align 20h
.text:0000000000005500
.text:0000000000005500 loc_5500:                               ; CODE XREF: __strftime_internal+5E9↑j
.text:0000000000005500                                         ; __strftime_internal+5F1↑j
.text:0000000000005500                 mov     eax, ecx
.text:0000000000005502                 neg     eax
.text:0000000000005504                 test    r13b, r13b
.text:0000000000005507                 cmovnz  ecx, eax
.text:000000000000550A                 jmp     loc_4AE8
.text:000000000000550A ; ---------------------------------------------------------------------------
.text:000000000000550F                 align 10h
.text:0000000000005510
.text:0000000000005510 loc_5510:                               ; CODE XREF: __strftime_internal+7D3↑j
.text:0000000000005510                                         ; __strftime_internal+952↑j
.text:0000000000005510                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:0000000000005515                 mov     ebp, 2Dh ; '-'
.text:000000000000551A                 jnz     loc_4B71
.text:0000000000005520                 mov     byte ptr [rsp+4E8h+size], 2Dh ; '-'
.text:0000000000005525
.text:0000000000005525 loc_5525:                               ; CODE XREF: __strftime_internal+1722↓j
.text:0000000000005525                 test    r10d, r10d
.text:0000000000005528                 mov     ecx, 0
.text:000000000000552D                 mov     eax, 1
.text:0000000000005532                 cmovns  ecx, r10d
.text:0000000000005536                 movsxd  r13, ecx
.text:0000000000005539                 test    r13, r13
.text:000000000000553C                 cmovnz  rax, r13
.text:0000000000005540                 mov     rdi, rax
.text:0000000000005543                 mov     [rsp+4E8h+var_4E0], rax
.text:0000000000005548                 mov     rax, r15
.text:000000000000554B                 not     rax
.text:000000000000554E                 cmp     rax, rdi
.text:0000000000005551                 jbe     loc_42BF
.text:0000000000005557                 test    r12, r12
.text:000000000000555A                 jz      short loc_55B9
.text:000000000000555C                 mov     edi, [rsp+4E8h+var_490]
.text:0000000000005560                 test    edi, edi
.text:0000000000005562                 jnz     short loc_55A2
.text:0000000000005564                 cmp     r13, 1
.text:0000000000005568                 jbe     short loc_55A2
.text:000000000000556A                 movsxd  rax, r10d
.text:000000000000556D                 sub     rax, 1
.text:0000000000005571                 jz      short loc_55A2
.text:0000000000005573                 mov     [rsp+4E8h+var_4A0], rbx
.text:0000000000005578                 xor     ebp, ebp
.text:000000000000557A                 mov     rbx, rax
.text:000000000000557D                 mov     dword ptr [rsp+4E8h+var_498], r10d
.text:0000000000005582
.text:0000000000005582 loc_5582:                               ; CODE XREF: __strftime_internal+1396↓j
.text:0000000000005582                 mov     rsi, r12        ; stream
.text:0000000000005585                 mov     edi, 20h ; ' '  ; c
.text:000000000000558A                 add     rbp, 1
.text:000000000000558E                 call    _fputc
.text:0000000000005593                 cmp     rbx, rbp
.text:0000000000005596                 jnz     short loc_5582
.text:0000000000005598                 mov     rbx, [rsp+4E8h+var_4A0]
.text:000000000000559D                 mov     r10d, dword ptr [rsp+4E8h+var_498]
.text:00000000000055A2
.text:00000000000055A2 loc_55A2:                               ; CODE XREF: __strftime_internal+1362↑j
.text:00000000000055A2                                         ; __strftime_internal+1368↑j ...
.text:00000000000055A2                 movsx   edi, byte ptr [rsp+4E8h+size] ; c
.text:00000000000055A7                 mov     rsi, r12        ; stream
.text:00000000000055AA                 mov     dword ptr [rsp+4E8h+var_4A0], r10d
.text:00000000000055AF                 call    _fputc
.text:00000000000055B4                 mov     r10d, dword ptr [rsp+4E8h+var_4A0]
.text:00000000000055B9
.text:00000000000055B9 loc_55B9:                               ; CODE XREF: __strftime_internal+135A↑j
.text:00000000000055B9                 add     r15, [rsp+4E8h+var_4E0]
.text:00000000000055BE                 mov     rax, [rsp+4E8h+ptr]
.text:00000000000055C3                 mov     rbp, rbx
.text:00000000000055C6                 mov     dword ptr [rsp+4E8h+var_4E0], 2Dh ; '-'
.text:00000000000055CE                 add     rax, 17h
.text:00000000000055D2                 sub     rax, r14
.text:00000000000055D5                 mov     rdx, r15
.text:00000000000055D8                 mov     [rsp+4E8h+size], rax
.text:00000000000055DD                 not     rdx
.text:00000000000055E0                 jmp     loc_4A1C
.text:00000000000055E0 ; ---------------------------------------------------------------------------
.text:00000000000055E5                 align 8
.text:00000000000055E8
.text:00000000000055E8 loc_55E8:                               ; CODE XREF: __strftime_internal+2B8↑j
.text:00000000000055E8                 mov     rdi, [rsp+4E8h+ptr] ; ptr
.text:00000000000055ED                 mov     rcx, r12        ; s
.text:00000000000055F0                 mov     edx, 1          ; n
.text:00000000000055F5                 mov     rsi, r13        ; size
.text:00000000000055F8                 call    _fwrite
.text:00000000000055FD                 jmp     loc_44CE
.text:00000000000055FD ; ---------------------------------------------------------------------------
.text:0000000000005602                 align 8
.text:0000000000005608
.text:0000000000005608 loc_5608:                               ; CODE XREF: __strftime_internal+4A9↑j
.text:0000000000005608                 mov     rdi, [rsp+4E8h+ptr]
.text:000000000000560D                 mov     rcx, r12        ; s
.text:0000000000005610                 mov     edx, 1          ; n
.text:0000000000005615                 mov     rsi, r13        ; size
.text:0000000000005618                 add     rdi, 1          ; ptr
.text:000000000000561C                 call    _fwrite
.text:0000000000005621                 jmp     loc_46C3
.text:0000000000005621 ; ---------------------------------------------------------------------------
.text:0000000000005626                 align 10h
.text:0000000000005630
.text:0000000000005630 loc_5630:                               ; CODE XREF: __strftime_internal+49E↑j
.text:0000000000005630                 mov     rsi, [rsp+4E8h+ptr]
.text:0000000000005635                 mov     rdx, r13
.text:0000000000005638                 mov     rdi, r12        ; stream
.text:000000000000563B                 add     rsi, 1
.text:000000000000563F                 call    fwrite_lowcase
.text:0000000000005644                 jmp     loc_46C3
.text:0000000000005644 ; ---------------------------------------------------------------------------
.text:0000000000005649                 align 10h
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: __strftime_internal+898↑j
.text:0000000000005650                 mov     rsi, [rsp+4E8h+size] ; size
.text:0000000000005655                 mov     rcx, r12        ; s
.text:0000000000005658                 mov     edx, 1          ; n
.text:000000000000565D                 mov     rdi, r14        ; ptr
.text:0000000000005660                 call    _fwrite
.text:0000000000005665                 jmp     loc_4AAE
.text:0000000000005665 ; ---------------------------------------------------------------------------
.text:000000000000566A                 align 10h
.text:0000000000005670
.text:0000000000005670 loc_5670:                               ; CODE XREF: __strftime_internal+462↑j
.text:0000000000005670                                         ; __strftime_internal+46B↑j
.text:0000000000005670                 test    rbx, rbx
.text:0000000000005673                 jz      loc_469B
.text:0000000000005679                 xor     edx, edx
.text:000000000000567B                 mov     [rsp+4E8h+var_4E0], rbp
.text:0000000000005680                 mov     rbp, rdx
.text:0000000000005683                 nop     dword ptr [rax+rax+00h]
.text:0000000000005688
.text:0000000000005688 loc_5688:                               ; CODE XREF: __strftime_internal+149C↓j
.text:0000000000005688                 mov     rsi, r12        ; stream
.text:000000000000568B                 mov     edi, 30h ; '0'  ; c
.text:0000000000005690                 add     rbp, 1
.text:0000000000005694                 call    _fputc
.text:0000000000005699                 cmp     rbx, rbp
.text:000000000000569C                 jnz     short loc_5688
.text:000000000000569E                 jmp     loc_4696
.text:00000000000056A3 ; ---------------------------------------------------------------------------
.text:00000000000056A3
.text:00000000000056A3 loc_56A3:                               ; CODE XREF: __strftime_internal+274↑j
.text:00000000000056A3                                         ; __strftime_internal+27D↑j
.text:00000000000056A3                 test    rbx, rbx
.text:00000000000056A6                 jz      loc_44B3
.text:00000000000056AC                 xor     edx, edx
.text:00000000000056AE                 mov     [rsp+4E8h+var_4E0], rbp
.text:00000000000056B3                 mov     rbp, rdx
.text:00000000000056B6                 db      2Eh
.text:00000000000056B6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000056C0
.text:00000000000056C0 loc_56C0:                               ; CODE XREF: __strftime_internal+14D4↓j
.text:00000000000056C0                 mov     rsi, r12        ; stream
.text:00000000000056C3                 mov     edi, 30h ; '0'  ; c
.text:00000000000056C8                 add     rbp, 1
.text:00000000000056CC                 call    _fputc
.text:00000000000056D1                 cmp     rbx, rbp
.text:00000000000056D4                 jnz     short loc_56C0
.text:00000000000056D6                 jmp     loc_44AE
.text:00000000000056DB ; ---------------------------------------------------------------------------
.text:00000000000056DB
.text:00000000000056DB loc_56DB:                               ; CODE XREF: __strftime_internal+6D9↑j
.text:00000000000056DB                 cmp     rax, rdx
.text:00000000000056DE                 jnb     short loc_5737
.text:00000000000056E0                 movsxd  rdx, r10d
.text:00000000000056E3                 mov     rdi, rdx
.text:00000000000056E6                 sub     rdi, rax
.text:00000000000056E9                 mov     eax, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000056ED                 cmp     eax, 30h ; '0'
.text:00000000000056F0                 jz      loc_5ADA
.text:00000000000056F6                 cmp     eax, 2Bh ; '+'
.text:00000000000056F9                 jz      loc_5ADA
.text:00000000000056FF                 xor     edx, edx
.text:0000000000005701                 test    rdi, rdi
.text:0000000000005704                 jz      short loc_5737
.text:0000000000005706                 mov     [rsp+4E8h+var_4B4], ebp
.text:000000000000570A                 mov     [rsp+4E8h+size], rbx
.text:000000000000570F                 mov     rbp, rdi
.text:0000000000005712                 mov     rbx, rdx
.text:0000000000005715                 nop     dword ptr [rax]
.text:0000000000005718
.text:0000000000005718 loc_5718:                               ; CODE XREF: __strftime_internal+152C↓j
.text:0000000000005718                 mov     rsi, r12        ; stream
.text:000000000000571B                 mov     edi, 20h ; ' '  ; c
.text:0000000000005720                 add     rbx, 1
.text:0000000000005724                 call    _fputc
.text:0000000000005729                 cmp     rbp, rbx
.text:000000000000572C                 jnz     short loc_5718
.text:000000000000572E
.text:000000000000572E loc_572E:                               ; CODE XREF: __strftime_internal+190E↓j
.text:000000000000572E                 mov     ebp, [rsp+4E8h+var_4B4]
.text:0000000000005732                 mov     rbx, [rsp+4E8h+size]
.text:0000000000005737
.text:0000000000005737 loc_5737:                               ; CODE XREF: __strftime_internal+14DE↑j
.text:0000000000005737                                         ; __strftime_internal+1504↑j ...
.text:0000000000005737                 sub     rsp, 8
.text:000000000000573B                 mov     r9d, r14d
.text:000000000000573E                 mov     ecx, ebp
.text:0000000000005740                 mov     eax, [rsp+4F0h+arg_10]
.text:0000000000005747                 mov     rdi, r12        ; stream
.text:000000000000574A                 push    rax             ; int
.text:000000000000574B                 push    [rsp+4F8h+var_4D8] ; __int64
.text:000000000000574F                 push    [rsp+500h+var_4D0] ; __int64
.text:0000000000005753                 mov     r8d, dword ptr [rsp+508h+var_4E0]
.text:0000000000005758                 mov     rdx, [rsp+508h+tp]
.text:000000000000575D                 mov     rsi, [rsp+508h+ptr]
.text:0000000000005762                 call    __strftime_internal
.text:0000000000005767                 add     rsp, 20h
.text:000000000000576B                 jmp     loc_48DF
.text:0000000000005770 ; ---------------------------------------------------------------------------
.text:0000000000005770
.text:0000000000005770 loc_5770:                               ; CODE XREF: __strftime_internal+853↑j
.text:0000000000005770                                         ; __strftime_internal+85C↑j
.text:0000000000005770                 test    r13, r13
.text:0000000000005773                 jz      loc_4A93
.text:0000000000005779                 xor     edx, edx
.text:000000000000577B                 mov     [rsp+4E8h+var_4E0], rbx
.text:0000000000005780                 mov     rbx, rdx
.text:0000000000005783                 nop     dword ptr [rax+rax+00h]
.text:0000000000005788
.text:0000000000005788 loc_5788:                               ; CODE XREF: __strftime_internal+159C↓j
.text:0000000000005788                 mov     rsi, r12        ; stream
.text:000000000000578B                 mov     edi, 30h ; '0'  ; c
.text:0000000000005790                 add     rbx, 1
.text:0000000000005794                 call    _fputc
.text:0000000000005799                 cmp     r13, rbx
.text:000000000000579C                 jnz     short loc_5788
.text:000000000000579E                 jmp     loc_4A8E
.text:00000000000057A3 ; ---------------------------------------------------------------------------
.text:00000000000057A3
.text:00000000000057A3 loc_57A3:                               ; CODE XREF: __strftime_internal+CFB↑j
.text:00000000000057A3                                         ; __strftime_internal+FF9↑j ...
.text:00000000000057A3                 xor     esi, esi
.text:00000000000057A5                 jmp     loc_47FA
.text:00000000000057AA ; ---------------------------------------------------------------------------
.text:00000000000057AA
.text:00000000000057AA loc_57AA:                               ; CODE XREF: __strftime_internal+649↑j
.text:00000000000057AA                 mov     r13d, 70h ; 'p'
.text:00000000000057B0                 mov     byte ptr [rsp+4E8h+var_4B4], 0
.text:00000000000057B5                 jmp     loc_45AD
.text:00000000000057BA ; ---------------------------------------------------------------------------
.text:00000000000057BA
.text:00000000000057BA loc_57BA:                               ; CODE XREF: __strftime_internal+1943↓j
.text:00000000000057BA                 xor     ebp, ebp
.text:00000000000057BC
.text:00000000000057BC loc_57BC:                               ; CODE XREF: __strftime_internal+9A4↑j
.text:00000000000057BC                 movsxd  rax, r13d
.text:00000000000057BF                 cmp     rax, rdx
.text:00000000000057C2                 mov     [rsp+4E8h+var_4E0], rax
.text:00000000000057C7                 jnb     loc_42BF
.text:00000000000057CD                 test    r12, r12
.text:00000000000057D0                 jz      short loc_5815
.text:00000000000057D2                 xor     edx, edx
.text:00000000000057D4                 mov     byte ptr [rsp+4E8h+size], bpl
.text:00000000000057D9                 mov     [rsp+4E8h+var_4A0], rbx
.text:00000000000057DE                 mov     rbp, rdx
.text:00000000000057E1                 mov     rbx, rax
.text:00000000000057E4                 mov     dword ptr [rsp+4E8h+var_498], r10d
.text:00000000000057E9                 nop     dword ptr [rax+00000000h]
.text:00000000000057F0
.text:00000000000057F0 loc_57F0:                               ; CODE XREF: __strftime_internal+1604↓j
.text:00000000000057F0                 mov     rsi, r12        ; stream
.text:00000000000057F3                 mov     edi, 20h ; ' '  ; c
.text:00000000000057F8                 add     rbp, 1
.text:00000000000057FC                 call    _fputc
.text:0000000000005801                 cmp     rbx, rbp
.text:0000000000005804                 ja      short loc_57F0
.text:0000000000005806                 movzx   ebp, byte ptr [rsp+4E8h+size]
.text:000000000000580B                 mov     rbx, [rsp+4E8h+var_4A0]
.text:0000000000005810                 mov     r10d, dword ptr [rsp+4E8h+var_498]
.text:0000000000005815
.text:0000000000005815 loc_5815:                               ; CODE XREF: __strftime_internal+15D0↑j
.text:0000000000005815                 add     r15, [rsp+4E8h+var_4E0]
.text:000000000000581A                 mov     eax, r10d
.text:000000000000581D                 sub     eax, r13d
.text:0000000000005820                 cmp     r10d, r13d
.text:0000000000005823                 mov     r10d, 0
.text:0000000000005829                 cmovg   r10d, eax
.text:000000000000582D                 test    bpl, bpl
.text:0000000000005830                 mov     rdx, r15
.text:0000000000005833                 not     rdx
.text:0000000000005836                 jnz     loc_5963
.text:000000000000583C                 mov     rax, [rsp+4E8h+ptr]
.text:0000000000005841                 movsxd  r13, r10d
.text:0000000000005844                 mov     rbp, rbx
.text:0000000000005847                 mov     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:000000000000584F                 add     rax, 17h
.text:0000000000005853                 sub     rax, r14
.text:0000000000005856                 mov     [rsp+4E8h+size], rax
.text:000000000000585B                 jmp     loc_4A1C
.text:0000000000005860 ; ---------------------------------------------------------------------------
.text:0000000000005860
.text:0000000000005860 loc_5860:                               ; CODE XREF: __strftime_internal+999↑j
.text:0000000000005860                 test    r10d, r10d
.text:0000000000005863                 mov     ecx, 0
.text:0000000000005868                 mov     eax, 1
.text:000000000000586D                 cmovns  ecx, r10d
.text:0000000000005871                 movsxd  r13, ecx
.text:0000000000005874                 test    r13, r13
.text:0000000000005877                 cmovnz  rax, r13
.text:000000000000587B                 cmp     rax, rdx
.text:000000000000587E                 mov     [rsp+4E8h+var_4A0], rax
.text:0000000000005883                 jnb     loc_42BF
.text:0000000000005889                 test    r12, r12
.text:000000000000588C                 jz      short loc_590A
.text:000000000000588E                 mov     ecx, [rsp+4E8h+var_490]
.text:0000000000005892                 test    ecx, ecx
.text:0000000000005894                 jnz     short loc_58F4
.text:0000000000005896                 cmp     r13, 1
.text:000000000000589A                 jbe     short loc_58F4
.text:000000000000589C                 mov     edi, dword ptr [rsp+4E8h+var_4E0]
.text:00000000000058A0                 movsxd  rax, r10d
.text:00000000000058A3                 sub     rax, 1
.text:00000000000058A7                 mov     [rsp+4E8h+ptr], rax
.text:00000000000058AC                 cmp     edi, 30h ; '0'
.text:00000000000058AF                 jz      loc_5D76
.text:00000000000058B5                 cmp     edi, 2Bh ; '+'
.text:00000000000058B8                 jz      loc_5D76
.text:00000000000058BE                 xor     edx, edx
.text:00000000000058C0                 test    rax, rax
.text:00000000000058C3                 jz      short loc_58F4
.text:00000000000058C5                 mov     [rsp+4E8h+var_498], rbx
.text:00000000000058CA                 mov     [rsp+4E8h+var_48C], r10d
.text:00000000000058CF                 mov     rbx, rdx
.text:00000000000058D2
.text:00000000000058D2 loc_58D2:                               ; CODE XREF: __strftime_internal+16E8↓j
.text:00000000000058D2                 mov     rsi, r12        ; stream
.text:00000000000058D5                 mov     edi, 20h ; ' '  ; c
.text:00000000000058DA                 add     rbx, 1
.text:00000000000058DE                 call    _fputc
.text:00000000000058E3                 cmp     [rsp+4E8h+ptr], rbx
.text:00000000000058E8                 jnz     short loc_58D2
.text:00000000000058EA
.text:00000000000058EA loc_58EA:                               ; CODE XREF: __strftime_internal+1BA9↓j
.text:00000000000058EA                 mov     rbx, [rsp+4E8h+var_498]
.text:00000000000058EF                 mov     r10d, [rsp+4E8h+var_48C]
.text:00000000000058F4
.text:00000000000058F4 loc_58F4:                               ; CODE XREF: __strftime_internal+1694↑j
.text:00000000000058F4                                         ; __strftime_internal+169A↑j ...
.text:00000000000058F4                 movsx   edi, bpl        ; c
.text:00000000000058F8                 mov     rsi, r12        ; stream
.text:00000000000058FB                 mov     dword ptr [rsp+4E8h+ptr], r10d
.text:0000000000005900                 call    _fputc
.text:0000000000005905                 mov     r10d, dword ptr [rsp+4E8h+ptr]
.text:000000000000590A
.text:000000000000590A loc_590A:                               ; CODE XREF: __strftime_internal+168C↑j
.text:000000000000590A                 add     r15, [rsp+4E8h+var_4A0]
.text:000000000000590F                 mov     rbp, rbx
.text:0000000000005912                 mov     rdx, r15
.text:0000000000005915                 not     rdx
.text:0000000000005918                 jmp     loc_4A1C
.text:000000000000591D ; ---------------------------------------------------------------------------
.text:000000000000591D
.text:000000000000591D loc_591D:                               ; CODE XREF: __strftime_internal+96B↑j
.text:000000000000591D                 mov     byte ptr [rsp+4E8h+size], 2Bh ; '+'
.text:0000000000005922                 jmp     loc_5525
.text:0000000000005927 ; ---------------------------------------------------------------------------
.text:0000000000005927
.text:0000000000005927 loc_5927:                               ; CODE XREF: __strftime_internal+103C↑j
.text:0000000000005927                                         ; __strftime_internal+1893↓j
.text:0000000000005927                 mov     esi, 4
.text:000000000000592C                 mov     edx, 270Fh
.text:0000000000005931
.text:0000000000005931 loc_5931:                               ; CODE XREF: __strftime_internal+1BE7↓j
.text:0000000000005931                 cmp     edx, ecx
.text:0000000000005933                 mov     r9d, 1
.text:0000000000005939                 mov     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000005941                 jb      loc_4E4C
.text:0000000000005947
.text:0000000000005947 loc_5947:                               ; CODE XREF: __strftime_internal+1BD8↓j
.text:0000000000005947                 cmp     r10d, esi
.text:000000000000594A                 mov     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000005952                 setnle  r9b
.text:0000000000005956                 jmp     loc_4E4C
.text:000000000000595B ; ---------------------------------------------------------------------------
.text:000000000000595B
.text:000000000000595B loc_595B:                               ; CODE XREF: __strftime_internal+EDB↑j
.text:000000000000595B                 mov     rbp, rbx
.text:000000000000595E                 jmp     loc_4310
.text:0000000000005963 ; ---------------------------------------------------------------------------
.text:0000000000005963
.text:0000000000005963 loc_5963:                               ; CODE XREF: __strftime_internal+1636↑j
.text:0000000000005963                 movsxd  rcx, r10d
.text:0000000000005966                 mov     r13d, 1
.text:000000000000596C                 test    rcx, rcx
.text:000000000000596F                 cmovnz  r13, rcx
.text:0000000000005973                 cmp     r13, rdx
.text:0000000000005976                 mov     [rsp+4E8h+var_4E0], r13
.text:000000000000597B                 jnb     loc_42BF
.text:0000000000005981                 test    r12, r12
.text:0000000000005984                 jz      short loc_59F5
.text:0000000000005986                 mov     esi, [rsp+4E8h+var_490]
.text:000000000000598A                 test    esi, esi
.text:000000000000598C                 jnz     short loc_59D5
.text:000000000000598E                 cmp     r10d, 1
.text:0000000000005992                 jbe     short loc_59D5
.text:0000000000005994                 lea     rax, [rcx-1]
.text:0000000000005998                 xor     r13d, r13d
.text:000000000000599B                 mov     [rsp+4E8h+var_4A0], rbx
.text:00000000000059A0                 mov     dword ptr [rsp+4E8h+var_498], r10d
.text:00000000000059A5                 mov     rbx, r13
.text:00000000000059A8                 mov     r13, rcx
.text:00000000000059AB                 mov     [rsp+4E8h+size], rax
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: __strftime_internal+17C6↓j
.text:00000000000059B0                 mov     rsi, r12        ; stream
.text:00000000000059B3                 mov     edi, 20h ; ' '  ; c
.text:00000000000059B8                 add     rbx, 1
.text:00000000000059BC                 call    _fputc
.text:00000000000059C1                 cmp     [rsp+4E8h+size], rbx
.text:00000000000059C6                 jnz     short loc_59B0
.text:00000000000059C8                 mov     rbx, [rsp+4E8h+var_4A0]
.text:00000000000059CD                 mov     r10d, dword ptr [rsp+4E8h+var_498]
.text:00000000000059D2                 mov     rcx, r13
.text:00000000000059D5
.text:00000000000059D5 loc_59D5:                               ; CODE XREF: __strftime_internal+178C↑j
.text:00000000000059D5                                         ; __strftime_internal+1792↑j
.text:00000000000059D5                 movsx   edi, bpl        ; c
.text:00000000000059D9                 mov     rsi, r12        ; stream
.text:00000000000059DC                 mov     dword ptr [rsp+4E8h+var_4A0], r10d
.text:00000000000059E1                 mov     [rsp+4E8h+size], rcx
.text:00000000000059E6                 call    _fputc
.text:00000000000059EB                 mov     r10d, dword ptr [rsp+4E8h+var_4A0]
.text:00000000000059F0                 mov     rcx, [rsp+4E8h+size]
.text:00000000000059F5
.text:00000000000059F5 loc_59F5:                               ; CODE XREF: __strftime_internal+1784↑j
.text:00000000000059F5                 add     r15, [rsp+4E8h+var_4E0]
.text:00000000000059FA                 mov     rax, [rsp+4E8h+ptr]
.text:00000000000059FF                 mov     r13, rcx
.text:0000000000005A02                 mov     rbp, rbx
.text:0000000000005A05                 mov     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:0000000000005A0D                 add     rax, 17h
.text:0000000000005A11                 sub     rax, r14
.text:0000000000005A14                 mov     rdx, r15
.text:0000000000005A17                 mov     [rsp+4E8h+size], rax
.text:0000000000005A1C                 not     rdx
.text:0000000000005A1F                 jmp     loc_4A1C
.text:0000000000005A24 ; ---------------------------------------------------------------------------
.text:0000000000005A24
.text:0000000000005A24 loc_5A24:                               ; CODE XREF: __strftime_internal+C1F↑j
.text:0000000000005A24                 mov     eax, 0FFFFF894h
.text:0000000000005A29                 sub     eax, r8d
.text:0000000000005A2C                 cmp     esi, eax
.text:0000000000005A2E                 jge     loc_5DFD
.text:0000000000005A34                 neg     ecx
.text:0000000000005A36                 cmp     dword ptr [rsp+4E8h+var_4E0], 0
.text:0000000000005A3B                 jnz     loc_4E31
.text:0000000000005A41
.text:0000000000005A41 loc_5A41:                               ; CODE XREF: __strftime_internal+C2B↑j
.text:0000000000005A41                                         ; __strftime_internal+1C05↓j
.text:0000000000005A41                 mov     eax, [rsp+4E8h+var_4C4]
.text:0000000000005A45                 cmp     eax, 2Bh ; '+'
.text:0000000000005A48                 jz      loc_5DCB
.text:0000000000005A4E                 mov     dword ptr [rsp+4E8h+var_4E0], eax
.text:0000000000005A52                 xor     r9d, r9d
.text:0000000000005A55                 mov     eax, 1
.text:0000000000005A5A                 xor     r13d, r13d
.text:0000000000005A5D                 mov     esi, 2
.text:0000000000005A62                 jmp     loc_4E4C
.text:0000000000005A67 ; ---------------------------------------------------------------------------
.text:0000000000005A67
.text:0000000000005A67 loc_5A67:                               ; CODE XREF: __strftime_internal+BD3↑j
.text:0000000000005A67                 mov     eax, 0FFFFF894h
.text:0000000000005A6C                 mov     r9d, dword ptr [rsp+4E8h+var_4E0]
.text:0000000000005A71                 lea     ecx, [rsi+r8+76Ch]
.text:0000000000005A79                 sub     eax, r8d
.text:0000000000005A7C                 cmp     esi, eax
.text:0000000000005A7E                 setl    r13b
.text:0000000000005A82                 setnl   al
.text:0000000000005A85                 test    r9d, r9d
.text:0000000000005A88                 jz      loc_5235
.text:0000000000005A8E
.text:0000000000005A8E loc_5A8E:                               ; CODE XREF: __strftime_internal+102F↑j
.text:0000000000005A8E                 cmp     dword ptr [rsp+4E8h+var_4E0], 2Bh ; '+'
.text:0000000000005A93                 jz      loc_5927
.text:0000000000005A99                 xor     r9d, r9d
.text:0000000000005A9C                 mov     esi, 4
.text:0000000000005AA1                 jmp     loc_4E4C
.text:0000000000005AA1 ; ---------------------------------------------------------------------------
.text:0000000000005AA6                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 loc_5AB0:                               ; CODE XREF: __strftime_internal+C98↑j
.text:0000000000005AB0                 mov     ecx, [rsp+4E8h+arg_10]
.text:0000000000005AB7                 mov     esi, 9
.text:0000000000005ABC                 mov     r10d, 9
.text:0000000000005AC2                 jmp     loc_47D0
.text:0000000000005AC7 ; ---------------------------------------------------------------------------
.text:0000000000005AC7
.text:0000000000005AC7 loc_5AC7:                               ; CODE XREF: __strftime_internal+E55↑j
.text:0000000000005AC7                 mov     rbp, rbx
.text:0000000000005ACA                 mov     [rsp+4E8h+ptr], rbx
.text:0000000000005ACF                 mov     r13d, 1
.text:0000000000005AD5                 jmp     loc_4454
.text:0000000000005ADA ; ---------------------------------------------------------------------------
.text:0000000000005ADA
.text:0000000000005ADA loc_5ADA:                               ; CODE XREF: __strftime_internal+14F0↑j
.text:0000000000005ADA                                         ; __strftime_internal+14F9↑j
.text:0000000000005ADA                 test    rdi, rdi
.text:0000000000005ADD                 jz      loc_5737
.text:0000000000005AE3                 xor     edx, edx
.text:0000000000005AE5                 mov     [rsp+4E8h+var_4B4], ebp
.text:0000000000005AE9                 mov     [rsp+4E8h+size], rbx
.text:0000000000005AEE                 mov     rbp, rdi
.text:0000000000005AF1                 mov     rbx, rdx
.text:0000000000005AF4                 nop     dword ptr [rax+00h]
.text:0000000000005AF8
.text:0000000000005AF8 loc_5AF8:                               ; CODE XREF: __strftime_internal+190C↓j
.text:0000000000005AF8                 mov     rsi, r12        ; stream
.text:0000000000005AFB                 mov     edi, 30h ; '0'  ; c
.text:0000000000005B00                 add     rbx, 1
.text:0000000000005B04                 call    _fputc
.text:0000000000005B09                 cmp     rbp, rbx
.text:0000000000005B0C                 jnz     short loc_5AF8
.text:0000000000005B0E                 jmp     loc_572E
.text:0000000000005B13 ; ---------------------------------------------------------------------------
.text:0000000000005B13
.text:0000000000005B13 loc_5B13:                               ; CODE XREF: __strftime_internal+F6B↑j
.text:0000000000005B13                                         ; __strftime_internal+F7D↑j
.text:0000000000005B13                 imul    r8d, 64h ; 'd'
.text:0000000000005B17                 mov     r9d, 1
.text:0000000000005B1D                 mov     esi, 9
.text:0000000000005B22                 imul    eax, ebp, 2710h
.text:0000000000005B28                 add     eax, r8d
.text:0000000000005B2B                 mov     r8d, 14h
.text:0000000000005B31                 add     ecx, eax
.text:0000000000005B33                 mov     eax, r13d
.text:0000000000005B36                 xor     eax, 1
.text:0000000000005B39                 jmp     loc_47E5
.text:0000000000005B3E ; ---------------------------------------------------------------------------
.text:0000000000005B3E
.text:0000000000005B3E loc_5B3E:                               ; CODE XREF: __strftime_internal+804↑j
.text:0000000000005B3E                 cmp     dword ptr [rsp+4E8h+var_4E0], 5Fh ; '_'
.text:0000000000005B43                 jz      loc_57BA
.text:0000000000005B49                 movsxd  rax, [rsp+4E8h+var_490]
.text:0000000000005B4E                 cmp     rax, rdx
.text:0000000000005B51                 jb      loc_4C51
.text:0000000000005B57                 jmp     loc_42BF
.text:0000000000005B57 ; ---------------------------------------------------------------------------
.text:0000000000005B5C                 align 20h
.text:0000000000005B60
.text:0000000000005B60 loc_5B60:                               ; CODE XREF: __strftime_internal+B34↑j
.text:0000000000005B60                 sub     r9d, 1
.text:0000000000005B64                 mov     edx, 16Dh
.text:0000000000005B69                 test    r9b, 3
.text:0000000000005B6D                 jnz     short loc_5BA9
.text:0000000000005B6F                 mov     eax, r9d
.text:0000000000005B72                 mov     edx, 51EB851Fh
.text:0000000000005B77                 imul    edx
.text:0000000000005B79                 mov     eax, r9d
.text:0000000000005B7C                 sar     eax, 1Fh
.text:0000000000005B7F                 sar     edx, 5
.text:0000000000005B82                 sub     edx, eax
.text:0000000000005B84                 imul    eax, edx, 64h ; 'd'
.text:0000000000005B87                 mov     edx, 16Eh
.text:0000000000005B8C                 cmp     r9d, eax
.text:0000000000005B8F                 jnz     short loc_5BA9
.text:0000000000005B91                 mov     eax, r9d
.text:0000000000005B94                 mov     ecx, 190h
.text:0000000000005B99                 cdq
.text:0000000000005B9A                 idiv    ecx
.text:0000000000005B9C                 cmp     edx, 1
.text:0000000000005B9F                 sbb     edx, edx
.text:0000000000005BA1                 not     edx
.text:0000000000005BA3                 add     edx, 16Eh
.text:0000000000005BA9
.text:0000000000005BA9 loc_5BA9:                               ; CODE XREF: __strftime_internal+196D↑j
.text:0000000000005BA9                                         ; __strftime_internal+198F↑j
.text:0000000000005BA9                 add     r8d, edx
.text:0000000000005BAC                 mov     edx, 92492493h
.text:0000000000005BB1                 mov     ecx, r8d
.text:0000000000005BB4                 sub     ecx, r14d
.text:0000000000005BB7                 add     ecx, 17Eh
.text:0000000000005BBD                 mov     eax, ecx
.text:0000000000005BBF                 sub     r8d, ecx
.text:0000000000005BC2                 imul    edx
.text:0000000000005BC4                 lea     eax, [rdx+rcx]
.text:0000000000005BC7                 mov     edx, ecx
.text:0000000000005BC9                 sar     edx, 1Fh
.text:0000000000005BCC                 sar     eax, 2
.text:0000000000005BCF                 sub     eax, edx
.text:0000000000005BD1                 lea     edx, ds:0[rax*8]
.text:0000000000005BD8                 sub     edx, eax
.text:0000000000005BDA                 lea     ecx, [r8+rdx+3]
.text:0000000000005BDF                 mov     r8d, 0FFFFFFFFh
.text:0000000000005BE5                 jmp     loc_4DCF
.text:0000000000005BEA ; ---------------------------------------------------------------------------
.text:0000000000005BEA
.text:0000000000005BEA loc_5BEA:                               ; CODE XREF: __strftime_internal+BDD↑j
.text:0000000000005BEA                 mov     eax, ecx
.text:0000000000005BEC                 mov     edx, 92492493h
.text:0000000000005BF1                 mov     esi, 2
.text:0000000000005BF6                 imul    edx
.text:0000000000005BF8                 lea     eax, [rdx+rcx]
.text:0000000000005BFB                 sar     ecx, 1Fh
.text:0000000000005BFE                 sar     eax, 2
.text:0000000000005C01                 sub     eax, ecx
.text:0000000000005C03                 mov     ecx, eax
.text:0000000000005C05                 add     ecx, 1
.text:0000000000005C08                 jmp     loc_47D0
.text:0000000000005C0D ; ---------------------------------------------------------------------------
.text:0000000000005C0D
.text:0000000000005C0D loc_5C0D:                               ; CODE XREF: __strftime_internal+F5B↑j
.text:0000000000005C0D                                         ; __strftime_internal+F85↑j
.text:0000000000005C0D                 imul    ecx, ebp, 64h ; 'd'
.text:0000000000005C10                 mov     eax, r13d
.text:0000000000005C13                 mov     r9d, 1
.text:0000000000005C19                 xor     eax, 1
.text:0000000000005C1C                 mov     esi, 6
.text:0000000000005C21                 add     ecx, r8d
.text:0000000000005C24                 mov     r8d, 4
.text:0000000000005C2A                 jmp     loc_47E5
.text:0000000000005C2F ; ---------------------------------------------------------------------------
.text:0000000000005C2F
.text:0000000000005C2F loc_5C2F:                               ; CODE XREF: __strftime_internal+558↑j
.text:0000000000005C2F                                         ; __strftime_internal+563↑j
.text:0000000000005C2F                 xor     ebp, ebp
.text:0000000000005C31
.text:0000000000005C31 loc_5C31:                               ; CODE XREF: __strftime_internal+1A45↓j
.text:0000000000005C31                 mov     rsi, r12        ; stream
.text:0000000000005C34                 mov     edi, 30h ; '0'  ; c
.text:0000000000005C39                 add     rbp, 1
.text:0000000000005C3D                 call    _fputc
.text:0000000000005C42                 cmp     r14, rbp
.text:0000000000005C45                 jnz     short loc_5C31
.text:0000000000005C47                 jmp     loc_477F
.text:0000000000005C4C ; ---------------------------------------------------------------------------
.text:0000000000005C4C
.text:0000000000005C4C loc_5C4C:                               ; CODE XREF: __strftime_internal+128B↑j
.text:0000000000005C4C                                         ; __strftime_internal+1296↑j
.text:0000000000005C4C                 xor     ebp, ebp
.text:0000000000005C4E
.text:0000000000005C4E loc_5C4E:                               ; CODE XREF: __strftime_internal+1A62↓j
.text:0000000000005C4E                 mov     rsi, r12        ; stream
.text:0000000000005C51                 mov     edi, 30h ; '0'  ; c
.text:0000000000005C56                 add     rbp, 1
.text:0000000000005C5A                 call    _fputc
.text:0000000000005C5F                 cmp     r14, rbp
.text:0000000000005C62                 jnz     short loc_5C4E
.text:0000000000005C64                 jmp     loc_54B2
.text:0000000000005C69 ; ---------------------------------------------------------------------------
.text:0000000000005C69
.text:0000000000005C69 loc_5C69:                               ; CODE XREF: __strftime_internal+1109↑j
.text:0000000000005C69                 mov     rdi, [rsp+4E8h+var_4C0] ; ptr
.text:0000000000005C6E                 mov     rcx, r12        ; s
.text:0000000000005C71                 mov     edx, 1          ; n
.text:0000000000005C76                 mov     rsi, r13        ; size
.text:0000000000005C79                 call    _fwrite
.text:0000000000005C7E                 jmp     loc_531F
.text:0000000000005C83 ; ---------------------------------------------------------------------------
.text:0000000000005C83
.text:0000000000005C83 loc_5C83:                               ; CODE XREF: __strftime_internal+10FE↑j
.text:0000000000005C83                 mov     rsi, [rsp+4E8h+var_4C0]
.text:0000000000005C88                 mov     rdx, r13
.text:0000000000005C8B                 mov     rdi, r12        ; stream
.text:0000000000005C8E                 call    fwrite_lowcase
.text:0000000000005C93                 jmp     loc_531F
.text:0000000000005C98 ; ---------------------------------------------------------------------------
.text:0000000000005C98
.text:0000000000005C98 loc_5C98:                               ; CODE XREF: __strftime_internal+12DB↑j
.text:0000000000005C98                 mov     byte ptr [rsp+4E8h+var_4B4], al
.text:0000000000005C9C                 jmp     def_43C3        ; jumptable 00000000000043C3 default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000005CA1 ; ---------------------------------------------------------------------------
.text:0000000000005CA1
.text:0000000000005CA1 loc_5CA1:                               ; CODE XREF: __strftime_internal+EBB↑j
.text:0000000000005CA1                 lea     rcx, [rbx+2]
.text:0000000000005CA5                 mov     r14d, 1
.text:0000000000005CAB
.text:0000000000005CAB loc_5CAB:                               ; CODE XREF: __strftime_internal+1AC2↓j
.text:0000000000005CAB                 mov     rdx, rcx
.text:0000000000005CAE                 add     rcx, 1
.text:0000000000005CB2                 movzx   eax, byte ptr [rcx-1]
.text:0000000000005CB6                 add     r14, 1
.text:0000000000005CBA                 cmp     al, 3Ah ; ':'
.text:0000000000005CBC                 jnz     loc_50C7
.text:0000000000005CC2                 jmp     short loc_5CAB
.text:0000000000005CC4 ; ---------------------------------------------------------------------------
.text:0000000000005CC4
.text:0000000000005CC4 loc_5CC4:                               ; CODE XREF: __strftime_internal+F75↑j
.text:0000000000005CC4                 movzx   ecx, byte ptr [rbx]
.text:0000000000005CC7                 mov     [rsp+4E8h+ptr], rbx
.text:0000000000005CCC                 jmp     loc_4FDA
.text:0000000000005CD1 ; ---------------------------------------------------------------------------
.text:0000000000005CD1
.text:0000000000005CD1 loc_5CD1:                               ; CODE XREF: __strftime_internal+F61↑j
.text:0000000000005CD1                 imul    ecx, ebp, 64h ; 'd'
.text:0000000000005CD4                 xor     r8d, r8d
.text:0000000000005CD7                 mov     r9d, 1
.text:0000000000005CDD                 mov     esi, 5
.text:0000000000005CE2                 add     ecx, eax
.text:0000000000005CE4                 mov     eax, r13d
.text:0000000000005CE7                 xor     eax, 1
.text:0000000000005CEA                 jmp     loc_47E5
.text:0000000000005CEF ; ---------------------------------------------------------------------------
.text:0000000000005CEF
.text:0000000000005CEF loc_5CEF:                               ; CODE XREF: __strftime_internal+D9F↑j
.text:0000000000005CEF                                         ; __strftime_internal+DA8↑j
.text:0000000000005CEF                 mov     r14d, r10d
.text:0000000000005CF2                 mov     eax, 0
.text:0000000000005CF7                 sub     r14d, 6
.text:0000000000005CFB                 cmovs   r14d, eax
.text:0000000000005CFF                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:0000000000005D06                 mov     [rsp+4E8h+ptr], rax
.text:0000000000005D0B                 jmp     loc_486F
.text:0000000000005D10 ; ---------------------------------------------------------------------------
.text:0000000000005D10
.text:0000000000005D10 loc_5D10:                               ; CODE XREF: __strftime_internal+A05↑j
.text:0000000000005D10                                         ; __strftime_internal+A0E↑j
.text:0000000000005D10                 cmp     [rsp+4E8h+ptr], 0
.text:0000000000005D16                 jz      loc_4C40
.text:0000000000005D1C                 xor     edx, edx
.text:0000000000005D1E                 mov     [rsp+4E8h+var_498], rbx
.text:0000000000005D23                 mov     rbx, rdx
.text:0000000000005D26
.text:0000000000005D26 loc_5D26:                               ; CODE XREF: __strftime_internal+1B3C↓j
.text:0000000000005D26                 mov     rsi, r12        ; stream
.text:0000000000005D29                 mov     edi, 30h ; '0'  ; c
.text:0000000000005D2E                 add     rbx, 1
.text:0000000000005D32                 call    _fputc
.text:0000000000005D37                 cmp     [rsp+4E8h+ptr], rbx
.text:0000000000005D3C                 jnz     short loc_5D26
.text:0000000000005D3E                 jmp     loc_4C3B
.text:0000000000005D43 ; ---------------------------------------------------------------------------
.text:0000000000005D43
.text:0000000000005D43 loc_5D43:                               ; CODE XREF: __strftime_internal+10C0↑j
.text:0000000000005D43                                         ; __strftime_internal+10C9↑j
.text:0000000000005D43                 cmp     [rsp+4E8h+ptr], 0
.text:0000000000005D49                 jz      loc_52FB
.text:0000000000005D4F                 xor     edx, edx
.text:0000000000005D51                 mov     [rsp+4E8h+var_4E0], rbx
.text:0000000000005D56                 mov     rbx, rdx
.text:0000000000005D59
.text:0000000000005D59 loc_5D59:                               ; CODE XREF: __strftime_internal+1B6F↓j
.text:0000000000005D59                 mov     rsi, r12        ; stream
.text:0000000000005D5C                 mov     edi, 30h ; '0'  ; c
.text:0000000000005D61                 add     rbx, 1
.text:0000000000005D65                 call    _fputc
.text:0000000000005D6A                 cmp     [rsp+4E8h+ptr], rbx
.text:0000000000005D6F                 jnz     short loc_5D59
.text:0000000000005D71                 jmp     loc_52F6
.text:0000000000005D76 ; ---------------------------------------------------------------------------
.text:0000000000005D76
.text:0000000000005D76 loc_5D76:                               ; CODE XREF: __strftime_internal+16AF↑j
.text:0000000000005D76                                         ; __strftime_internal+16B8↑j
.text:0000000000005D76                 cmp     [rsp+4E8h+ptr], 0
.text:0000000000005D7C                 jz      loc_58F4
.text:0000000000005D82                 xor     edx, edx
.text:0000000000005D84                 mov     [rsp+4E8h+var_498], rbx
.text:0000000000005D89                 mov     [rsp+4E8h+var_48C], r10d
.text:0000000000005D8E                 mov     rbx, rdx
.text:0000000000005D91
.text:0000000000005D91 loc_5D91:                               ; CODE XREF: __strftime_internal+1BA7↓j
.text:0000000000005D91                 mov     rsi, r12        ; stream
.text:0000000000005D94                 mov     edi, 30h ; '0'  ; c
.text:0000000000005D99                 add     rbx, 1
.text:0000000000005D9D                 call    _fputc
.text:0000000000005DA2                 cmp     [rsp+4E8h+ptr], rbx
.text:0000000000005DA7                 jnz     short loc_5D91
.text:0000000000005DA9                 jmp     loc_58EA
.text:0000000000005DAE ; ---------------------------------------------------------------------------
.text:0000000000005DAE
.text:0000000000005DAE loc_5DAE:                               ; CODE XREF: __strftime_internal+E85↑j
.text:0000000000005DAE                                         ; __strftime_internal+E90↑j
.text:0000000000005DAE                 xor     ebp, ebp
.text:0000000000005DB0
.text:0000000000005DB0 loc_5DB0:                               ; CODE XREF: __strftime_internal+1BC4↓j
.text:0000000000005DB0                 mov     rsi, r12        ; stream
.text:0000000000005DB3                 mov     edi, 30h ; '0'  ; c
.text:0000000000005DB8                 add     rbp, 1
.text:0000000000005DBC                 call    _fputc
.text:0000000000005DC1                 cmp     r13, rbp
.text:0000000000005DC4                 jnz     short loc_5DB0
.text:0000000000005DC6                 jmp     loc_42FF
.text:0000000000005DCB ; ---------------------------------------------------------------------------
.text:0000000000005DCB
.text:0000000000005DCB loc_5DCB:                               ; CODE XREF: __strftime_internal+1848↑j
.text:0000000000005DCB                 mov     eax, 1
.text:0000000000005DD0                 xor     r13d, r13d
.text:0000000000005DD3                 mov     esi, 2
.text:0000000000005DD8                 jmp     loc_5947
.text:0000000000005DDD ; ---------------------------------------------------------------------------
.text:0000000000005DDD
.text:0000000000005DDD loc_5DDD:                               ; CODE XREF: __strftime_internal+C3E↑j
.text:0000000000005DDD                                         ; __strftime_internal+D5B↑j
.text:0000000000005DDD                 mov     esi, 2
.text:0000000000005DE2                 mov     edx, 63h ; 'c'
.text:0000000000005DE7                 jmp     loc_5931
.text:0000000000005DEC ; ---------------------------------------------------------------------------
.text:0000000000005DEC
.text:0000000000005DEC loc_5DEC:                               ; CODE XREF: __strftime_internal+CA2↑j
.text:0000000000005DEC                 mov     ecx, [rsp+4E8h+arg_10]
.text:0000000000005DF3                 jmp     loc_4ED7
.text:0000000000005DF8 ; ---------------------------------------------------------------------------
.text:0000000000005DF8
.text:0000000000005DF8 loc_5DF8:                               ; CODE XREF: __strftime_internal+D6↑j
.text:0000000000005DF8                 call    ___stack_chk_fail
.text:0000000000005DFD ; ---------------------------------------------------------------------------
.text:0000000000005DFD
.text:0000000000005DFD loc_5DFD:                               ; CODE XREF: __strftime_internal+182E↑j
.text:0000000000005DFD                 add     ecx, 64h ; 'd'
.text:0000000000005E00                 cmp     dword ptr [rsp+4E8h+var_4E0], 0
.text:0000000000005E05                 jz      loc_5A41
.text:0000000000005E0B                 jmp     loc_4E31
.text:0000000000005E10 ; ---------------------------------------------------------------------------
.text:0000000000005E10
.text:0000000000005E10 loc_5E10:                               ; CODE XREF: __strftime_internal+3BD↑j
.text:0000000000005E10                 xor     esi, esi
.text:0000000000005E12                 jmp     loc_480A
.text:0000000000005E12 ; } // starts at 4200
.text:0000000000005E12 __strftime_internal endp
.text:0000000000005E12
.text:0000000000005E12 ; ---------------------------------------------------------------------------
.text:0000000000005E17                 align 20h
.text:0000000000005E20
.text:0000000000005E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E20
.text:0000000000005E20
.text:0000000000005E20                 public fprintftime
.text:0000000000005E20 fprintftime     proc near               ; CODE XREF: show_date+64↑p
.text:0000000000005E20                                         ; show_date+11E↑p
.text:0000000000005E20
.text:0000000000005E20 var_11          = qword ptr -11h
.text:0000000000005E20
.text:0000000000005E20 ; __unwind {
.text:0000000000005E20                 sub     rsp, 20h
.text:0000000000005E24                 mov     r9d, 0FFFFFFFFh
.text:0000000000005E2A                 mov     rax, fs:28h
.text:0000000000005E33                 mov     [rsp+20h+var_11+1], rax
.text:0000000000005E38                 xor     eax, eax
.text:0000000000005E3A                 mov     byte ptr [rsp+20h+var_11], 0
.text:0000000000005E3F                 push    r8              ; int
.text:0000000000005E41                 xor     r8d, r8d
.text:0000000000005E44                 push    rcx             ; __int64
.text:0000000000005E45                 xor     ecx, ecx
.text:0000000000005E47                 lea     rax, [rsp+30h+var_11]
.text:0000000000005E4C                 push    rax             ; __int64
.text:0000000000005E4D                 call    __strftime_internal
.text:0000000000005E52                 add     rsp, 20h
.text:0000000000005E56                 mov     rdx, [rsp+18h+var_11+1]
.text:0000000000005E5B                 xor     rdx, fs:28h
.text:0000000000005E64                 jnz     short loc_5E6B
.text:0000000000005E66                 add     rsp, 18h
.text:0000000000005E6A                 retn
.text:0000000000005E6B ; ---------------------------------------------------------------------------
.text:0000000000005E6B
.text:0000000000005E6B loc_5E6B:                               ; CODE XREF: fprintftime+44↑j
.text:0000000000005E6B                 call    ___stack_chk_fail
.text:0000000000005E6B ; } // starts at 5E20
.text:0000000000005E6B fprintftime     endp
.text:0000000000005E6B
.text:0000000000005E70
.text:0000000000005E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E70
.text:0000000000005E70
.text:0000000000005E70 ; __int64 __fastcall gettime(struct timespec *tp)
.text:0000000000005E70                 public gettime
.text:0000000000005E70 gettime         proc near               ; CODE XREF: main+62E↑p
.text:0000000000005E70                                         ; parse_datetime2+618↓p
.text:0000000000005E70 ; __unwind {
.text:0000000000005E70                 mov     rsi, rdi        ; tp
.text:0000000000005E73                 xor     edi, edi        ; clock_id
.text:0000000000005E75                 jmp     _clock_gettime
.text:0000000000005E75 ; } // starts at 5E70
.text:0000000000005E75 gettime         endp
.text:0000000000005E75
.text:0000000000005E75 ; ---------------------------------------------------------------------------
.text:0000000000005E7A                 align 20h
.text:0000000000005E80
.text:0000000000005E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E80
.text:0000000000005E80
.text:0000000000005E80                 public current_timespec
.text:0000000000005E80 current_timespec proc near
.text:0000000000005E80
.text:0000000000005E80 var_28          = qword ptr -28h
.text:0000000000005E80 var_20          = qword ptr -20h
.text:0000000000005E80 var_10          = qword ptr -10h
.text:0000000000005E80
.text:0000000000005E80 ; __unwind {
.text:0000000000005E80                 sub     rsp, 28h
.text:0000000000005E84                 xor     edi, edi        ; clock_id
.text:0000000000005E86                 mov     rsi, rsp        ; tp
.text:0000000000005E89                 mov     rax, fs:28h
.text:0000000000005E92                 mov     [rsp+28h+var_10], rax
.text:0000000000005E97                 xor     eax, eax
.text:0000000000005E99                 call    _clock_gettime
.text:0000000000005E9E                 mov     rcx, [rsp+28h+var_10]
.text:0000000000005EA3                 xor     rcx, fs:28h
.text:0000000000005EAC                 mov     rax, [rsp+28h+var_28]
.text:0000000000005EB0                 mov     rdx, [rsp+28h+var_20]
.text:0000000000005EB5                 jnz     short loc_5EBC
.text:0000000000005EB7                 add     rsp, 28h
.text:0000000000005EBB                 retn
.text:0000000000005EBC ; ---------------------------------------------------------------------------
.text:0000000000005EBC
.text:0000000000005EBC loc_5EBC:                               ; CODE XREF: current_timespec+35↑j
.text:0000000000005EBC                 call    ___stack_chk_fail
.text:0000000000005EBC ; } // starts at 5E80
.text:0000000000005EBC current_timespec endp
.text:0000000000005EBC
.text:0000000000005EBC ; ---------------------------------------------------------------------------
.text:0000000000005EC1                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005ED0
.text:0000000000005ED0 ; Attributes: info_from_lumina
.text:0000000000005ED0
.text:0000000000005ED0 ; char *__fastcall imaxtostr(intmax_t i, char *buf)
.text:0000000000005ED0                 public imaxtostr
.text:0000000000005ED0 imaxtostr       proc near               ; CODE XREF: show_date+B9↑p
.text:0000000000005ED0 ; __unwind {
.text:0000000000005ED0                 test    rdi, rdi
.text:0000000000005ED3                 lea     rcx, [rsi+14h]
.text:0000000000005ED7                 mov     byte ptr [rsi+14h], 0
.text:0000000000005EDB                 mov     r9, 6666666666666667h
.text:0000000000005EE5                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000005EEF                 mov     r8d, 30h ; '0'
.text:0000000000005EF5                 js      short loc_5F33
.text:0000000000005EF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005F00
.text:0000000000005F00 loc_5F00:                               ; CODE XREF: imaxtostr+54↓j
.text:0000000000005F00                 mov     rax, rdi
.text:0000000000005F03                 sub     rcx, 1
.text:0000000000005F07                 mul     rsi
.text:0000000000005F0A                 shr     rdx, 3
.text:0000000000005F0E                 lea     rax, [rdx+rdx*4]
.text:0000000000005F12                 add     rax, rax
.text:0000000000005F15                 sub     rdi, rax
.text:0000000000005F18                 add     edi, 30h ; '0'
.text:0000000000005F1B                 test    rdx, rdx
.text:0000000000005F1E                 mov     [rcx], dil
.text:0000000000005F21                 mov     rdi, rdx
.text:0000000000005F24                 jnz     short loc_5F00
.text:0000000000005F26                 mov     rax, rcx
.text:0000000000005F29                 retn
.text:0000000000005F29 ; ---------------------------------------------------------------------------
.text:0000000000005F2A                 align 10h
.text:0000000000005F30
.text:0000000000005F30 loc_5F30:                               ; CODE XREF: imaxtostr+8E↓j
.text:0000000000005F30                 mov     rcx, rsi
.text:0000000000005F33
.text:0000000000005F33 loc_5F33:                               ; CODE XREF: imaxtostr+25↑j
.text:0000000000005F33                 mov     rax, rdi
.text:0000000000005F36                 lea     rsi, [rcx-1]
.text:0000000000005F3A                 imul    r9
.text:0000000000005F3D                 mov     rax, rdi
.text:0000000000005F40                 sar     rax, 3Fh
.text:0000000000005F44                 sar     rdx, 2
.text:0000000000005F48                 sub     rdx, rax
.text:0000000000005F4B                 lea     rax, [rdx+rdx*4]
.text:0000000000005F4F                 lea     eax, [r8+rax*2]
.text:0000000000005F53                 sub     eax, edi
.text:0000000000005F55                 test    rdx, rdx
.text:0000000000005F58                 mov     rdi, rdx
.text:0000000000005F5B                 mov     [rcx-1], al
.text:0000000000005F5E                 jnz     short loc_5F30
.text:0000000000005F60                 sub     rcx, 2
.text:0000000000005F64                 mov     byte ptr [rsi-1], 2Dh ; '-'
.text:0000000000005F68                 mov     rax, rcx
.text:0000000000005F6B                 retn
.text:0000000000005F6B ; } // starts at 5ED0
.text:0000000000005F6B imaxtostr       endp
.text:0000000000005F6B
.text:0000000000005F6B ; ---------------------------------------------------------------------------
.text:0000000000005F6C                 align 10h
.text:0000000000005F70
.text:0000000000005F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F70
.text:0000000000005F70
.text:0000000000005F70 digits_to_date_time proc near           ; CODE XREF: yyparse+E33↓p
.text:0000000000005F70                                         ; yyparse+F46↓p
.text:0000000000005F70
.text:0000000000005F70 arg_8           = qword ptr  10h
.text:0000000000005F70 arg_10          = qword ptr  18h
.text:0000000000005F70
.text:0000000000005F70 ; __unwind {
.text:0000000000005F70                 mov     rax, [rdi+0A8h]
.text:0000000000005F77                 mov     r8, [rsp+arg_8]
.text:0000000000005F7C                 mov     r9, [rsp+arg_10]
.text:0000000000005F81                 test    rax, rax
.text:0000000000005F84                 jz      short loc_5FC8
.text:0000000000005F86                 cmp     qword ptr [rdi+30h], 0
.text:0000000000005F8B                 jnz     short loc_5FC8
.text:0000000000005F8D                 cmp     byte ptr [rdi+0A1h], 0
.text:0000000000005F94                 jnz     short loc_5FC8
.text:0000000000005F96                 cmp     qword ptr [rdi+0C8h], 0
.text:0000000000005F9E                 jnz     short loc_5FAA
.text:0000000000005FA0                 cmp     r9, 2
.text:0000000000005FA4                 jle     loc_60C8
.text:0000000000005FAA
.text:0000000000005FAA loc_5FAA:                               ; CODE XREF: digits_to_date_time+2E↑j
.text:0000000000005FAA                 mov     rax, [rsp+arg_10]
.text:0000000000005FAF                 mov     byte ptr [rdi+0D8h], 1
.text:0000000000005FB6                 movdqu  xmm0, xmmword ptr [rsp+8]
.text:0000000000005FBC                 mov     [rdi+30h], rax
.text:0000000000005FC0                 movups  xmmword ptr [rdi+20h], xmm0
.text:0000000000005FC4                 retn
.text:0000000000005FC4 ; ---------------------------------------------------------------------------
.text:0000000000005FC5                 align 8
.text:0000000000005FC8
.text:0000000000005FC8 loc_5FC8:                               ; CODE XREF: digits_to_date_time+14↑j
.text:0000000000005FC8                                         ; digits_to_date_time+1B↑j ...
.text:0000000000005FC8                 cmp     r9, 4
.text:0000000000005FCC                 jg      short loc_6030
.text:0000000000005FCE                 add     qword ptr [rdi+0C8h], 1
.text:0000000000005FD6                 cmp     r9, 2
.text:0000000000005FDA                 jle     loc_60D8
.text:0000000000005FE0                 mov     rax, r8
.text:0000000000005FE3                 mov     rdx, 0A3D70A3D70A3D70Bh
.text:0000000000005FED                 imul    rdx
.text:0000000000005FF0                 mov     rax, r8
.text:0000000000005FF3                 sar     rax, 3Fh
.text:0000000000005FF7                 add     rdx, r8
.text:0000000000005FFA                 sar     rdx, 6
.text:0000000000005FFE                 sub     rdx, rax
.text:0000000000006001                 lea     rax, [rdx+rdx*4]
.text:0000000000006005                 mov     [rdi+48h], rdx
.text:0000000000006009                 lea     rax, [rax+rax*4]
.text:000000000000600D                 shl     rax, 2
.text:0000000000006011                 sub     r8, rax
.text:0000000000006014                 mov     [rdi+50h], r8
.text:0000000000006018
.text:0000000000006018 loc_6018:                               ; CODE XREF: digits_to_date_time+174↓j
.text:0000000000006018                 mov     qword ptr [rdi+58h], 0
.text:0000000000006020                 mov     qword ptr [rdi+60h], 0
.text:0000000000006028                 mov     dword ptr [rdi+1Ch], 2
.text:000000000000602F                 retn
.text:0000000000006030 ; ---------------------------------------------------------------------------
.text:0000000000006030
.text:0000000000006030 loc_6030:                               ; CODE XREF: digits_to_date_time+5C↑j
.text:0000000000006030                 add     rax, 1
.text:0000000000006034                 mov     rsi, 0A3D70A3D70A3D70Bh
.text:000000000000603E                 mov     r10, r8
.text:0000000000006041                 mov     [rdi+0A8h], rax
.text:0000000000006048                 mov     rax, r8
.text:000000000000604B                 sar     r10, 3Fh
.text:000000000000604F                 imul    rsi
.text:0000000000006052                 sub     r9, 4
.text:0000000000006056                 mov     [rdi+30h], r9
.text:000000000000605A                 lea     rcx, [rdx+r8]
.text:000000000000605E                 mov     rdx, r8
.text:0000000000006061                 sar     rcx, 6
.text:0000000000006065                 sub     rcx, r10
.text:0000000000006068                 lea     rax, [rcx+rcx*4]
.text:000000000000606C                 lea     rax, [rax+rax*4]
.text:0000000000006070                 shl     rax, 2
.text:0000000000006074                 sub     rdx, rax
.text:0000000000006077                 mov     rax, rcx
.text:000000000000607A                 mov     [rdi+40h], rdx
.text:000000000000607E                 imul    rsi
.text:0000000000006081                 mov     rax, rcx
.text:0000000000006084                 sar     rax, 3Fh
.text:0000000000006088                 lea     rsi, [rdx+rcx]
.text:000000000000608C                 mov     rdx, 346DC5D63886594Bh
.text:0000000000006096                 sar     rsi, 6
.text:000000000000609A                 sub     rsi, rax
.text:000000000000609D                 lea     rax, [rsi+rsi*4]
.text:00000000000060A1                 lea     rax, [rax+rax*4]
.text:00000000000060A5                 shl     rax, 2
.text:00000000000060A9                 sub     rcx, rax
.text:00000000000060AC                 mov     rax, r8
.text:00000000000060AF                 imul    rdx
.text:00000000000060B2                 mov     [rdi+38h], rcx
.text:00000000000060B6                 sar     rdx, 0Bh
.text:00000000000060BA                 sub     rdx, r10
.text:00000000000060BD                 mov     [rdi+28h], rdx
.text:00000000000060C1                 retn
.text:00000000000060C1 ; ---------------------------------------------------------------------------
.text:00000000000060C2                 align 8
.text:00000000000060C8
.text:00000000000060C8 loc_60C8:                               ; CODE XREF: digits_to_date_time+34↑j
.text:00000000000060C8                 mov     qword ptr [rdi+0C8h], 1
.text:00000000000060D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000060D8
.text:00000000000060D8 loc_60D8:                               ; CODE XREF: digits_to_date_time+6A↑j
.text:00000000000060D8                 mov     [rdi+48h], r8
.text:00000000000060DC                 mov     qword ptr [rdi+50h], 0
.text:00000000000060E4                 jmp     loc_6018
.text:00000000000060E4 ; } // starts at 5F70
.text:00000000000060E4 digits_to_date_time endp
.text:00000000000060E4
.text:00000000000060E4 ; ---------------------------------------------------------------------------
.text:00000000000060E9                 align 10h
.text:00000000000060F0
.text:00000000000060F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060F0
.text:00000000000060F0
.text:00000000000060F0 time_zone_str   proc near               ; CODE XREF: debug_strfdatetime_constprop_12+78↓p
.text:00000000000060F0                                         ; debug_print_current_time_part_10+366↓p ...
.text:00000000000060F0 ; __unwind {
.text:00000000000060F0                 mov     eax, edi
.text:00000000000060F2                 mov     edx, 91A2B3C5h
.text:00000000000060F7                 push    r12
.text:00000000000060F9                 imul    edx
.text:00000000000060FB                 push    rbp
.text:00000000000060FC                 push    rbx
.text:00000000000060FD                 mov     eax, edi
.text:00000000000060FF                 mov     ecx, edi
.text:0000000000006101                 mov     r12, rsi
.text:0000000000006104                 sar     eax, 1Fh
.text:0000000000006107                 sar     ecx, 1Fh
.text:000000000000610A                 mov     ebp, edi
.text:000000000000610C                 lea     ebx, [rdx+rdi]
.text:000000000000610F                 and     ecx, 2
.text:0000000000006112                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006119                 lea     r8d, [rcx+2Bh]
.text:000000000000611D                 lea     rcx, aC02d      ; "%c%02d"
.text:0000000000006124                 mov     esi, 1
.text:0000000000006129                 sar     ebx, 0Bh
.text:000000000000612C                 mov     rdi, r12
.text:000000000000612F                 sub     ebx, eax
.text:0000000000006131                 mov     eax, ebx
.text:0000000000006133                 sar     eax, 1Fh
.text:0000000000006136                 mov     r9d, eax
.text:0000000000006139                 xor     r9d, ebx
.text:000000000000613C                 imul    ebx, 0E10h
.text:0000000000006142                 sub     r9d, eax
.text:0000000000006145                 xor     eax, eax
.text:0000000000006147                 call    ___sprintf_chk
.text:000000000000614C                 sub     ebp, ebx
.text:000000000000614E                 jz      short loc_61B2
.text:0000000000006150                 cdqe
.text:0000000000006152                 mov     ecx, 88888889h
.text:0000000000006157                 mov     r8d, 0CCCCCCCDh
.text:000000000000615D                 lea     rsi, [r12+rax]
.text:0000000000006161                 mov     eax, ebp
.text:0000000000006163                 sar     eax, 1Fh
.text:0000000000006166                 xor     ebp, eax
.text:0000000000006168                 mov     byte ptr [rsi], 3Ah ; ':'
.text:000000000000616B                 sub     ebp, eax
.text:000000000000616D                 mov     eax, ebp
.text:000000000000616F                 mul     ecx
.text:0000000000006171                 mov     eax, ebp
.text:0000000000006173                 mov     ecx, edx
.text:0000000000006175                 mov     edi, edx
.text:0000000000006177                 mov     edx, 1B4E81B5h
.text:000000000000617C                 mul     edx
.text:000000000000617E                 shr     ecx, 5
.text:0000000000006181                 shr     edi, 5
.text:0000000000006184                 mov     eax, ecx
.text:0000000000006186                 shr     edx, 6
.text:0000000000006189                 add     edx, 30h ; '0'
.text:000000000000618C                 mov     [rsi+1], dl
.text:000000000000618F                 mul     r8d
.text:0000000000006192                 imul    edi, 3Ch ; '<'
.text:0000000000006195                 shr     edx, 3
.text:0000000000006198                 lea     eax, [rdx+rdx*4]
.text:000000000000619B                 add     eax, eax
.text:000000000000619D                 sub     ecx, eax
.text:000000000000619F                 lea     rax, [rsi+3]
.text:00000000000061A3                 add     ecx, 30h ; '0'
.text:00000000000061A6                 sub     ebp, edi
.text:00000000000061A8                 mov     [rsi+2], cl
.text:00000000000061AB                 mov     edi, ebp
.text:00000000000061AD                 jnz     short loc_61C0
.text:00000000000061AF
.text:00000000000061AF loc_61AF:                               ; CODE XREF: time_zone_str+F4↓j
.text:00000000000061AF                 mov     byte ptr [rax], 0
.text:00000000000061B2
.text:00000000000061B2 loc_61B2:                               ; CODE XREF: time_zone_str+5E↑j
.text:00000000000061B2                 mov     rax, r12
.text:00000000000061B5                 pop     rbx
.text:00000000000061B6                 pop     rbp
.text:00000000000061B7                 pop     r12
.text:00000000000061B9                 retn
.text:00000000000061B9 ; ---------------------------------------------------------------------------
.text:00000000000061BA                 align 20h
.text:00000000000061C0
.text:00000000000061C0 loc_61C0:                               ; CODE XREF: time_zone_str+BD↑j
.text:00000000000061C0                 mov     eax, ebp
.text:00000000000061C2                 mov     byte ptr [rsi+3], 3Ah ; ':'
.text:00000000000061C6                 mul     r8d
.text:00000000000061C9                 shr     edx, 3
.text:00000000000061CC                 lea     eax, [rdx+30h]
.text:00000000000061CF                 lea     edx, [rdx+rdx*4]
.text:00000000000061D2                 add     edx, edx
.text:00000000000061D4                 mov     [rsi+4], al
.text:00000000000061D7                 lea     rax, [rsi+6]
.text:00000000000061DB                 sub     edi, edx
.text:00000000000061DD                 add     edi, 30h ; '0'
.text:00000000000061E0                 mov     [rsi+5], dil
.text:00000000000061E4                 jmp     short loc_61AF
.text:00000000000061E4 ; } // starts at 60F0
.text:00000000000061E4 time_zone_str   endp
.text:00000000000061E4
.text:00000000000061E4 ; ---------------------------------------------------------------------------
.text:00000000000061E6                 align 10h
.text:00000000000061F0
.text:00000000000061F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061F0
.text:00000000000061F0
.text:00000000000061F0 dbg_printf      proc near               ; CODE XREF: debug_print_relative_time_part_11+27↓p
.text:00000000000061F0                                         ; debug_print_current_time_part_10+3B↓p ...
.text:00000000000061F0
.text:00000000000061F0 var_D8          = dword ptr -0D8h
.text:00000000000061F0 var_D4          = dword ptr -0D4h
.text:00000000000061F0 var_D0          = qword ptr -0D0h
.text:00000000000061F0 var_C8          = qword ptr -0C8h
.text:00000000000061F0 var_C0          = qword ptr -0C0h
.text:00000000000061F0 var_B8          = byte ptr -0B8h
.text:00000000000061F0 var_B0          = qword ptr -0B0h
.text:00000000000061F0 var_A8          = qword ptr -0A8h
.text:00000000000061F0 var_A0          = qword ptr -0A0h
.text:00000000000061F0 var_98          = qword ptr -98h
.text:00000000000061F0 var_90          = qword ptr -90h
.text:00000000000061F0 var_88          = xmmword ptr -88h
.text:00000000000061F0 var_78          = xmmword ptr -78h
.text:00000000000061F0 var_68          = xmmword ptr -68h
.text:00000000000061F0 var_58          = xmmword ptr -58h
.text:00000000000061F0 var_48          = xmmword ptr -48h
.text:00000000000061F0 var_38          = xmmword ptr -38h
.text:00000000000061F0 var_28          = xmmword ptr -28h
.text:00000000000061F0 var_18          = xmmword ptr -18h
.text:00000000000061F0 arg_0           = byte ptr  8
.text:00000000000061F0
.text:00000000000061F0 ; __unwind {
.text:00000000000061F0                 push    rbx
.text:00000000000061F1                 mov     rbx, rdi
.text:00000000000061F4                 sub     rsp, 0D0h
.text:00000000000061FB                 test    al, al
.text:00000000000061FD                 mov     [rsp+0D8h+var_B0], rsi
.text:0000000000006202                 mov     [rsp+0D8h+var_A8], rdx
.text:0000000000006207                 mov     [rsp+0D8h+var_A0], rcx
.text:000000000000620C                 mov     [rsp+0D8h+var_98], r8
.text:0000000000006211                 mov     [rsp+0D8h+var_90], r9
.text:0000000000006216                 jz      short loc_624F
.text:0000000000006218                 movaps  [rsp+0D8h+var_88], xmm0
.text:000000000000621D                 movaps  [rsp+0D8h+var_78], xmm1
.text:0000000000006222                 movaps  [rsp+0D8h+var_68], xmm2
.text:0000000000006227                 movaps  [rsp+0D8h+var_58], xmm3
.text:000000000000622F                 movaps  [rsp+0D8h+var_48], xmm4
.text:0000000000006237                 movaps  [rsp+0D8h+var_38], xmm5
.text:000000000000623F                 movaps  [rsp+0D8h+var_28], xmm6
.text:0000000000006247                 movaps  [rsp+0D8h+var_18], xmm7
.text:000000000000624F
.text:000000000000624F loc_624F:                               ; CODE XREF: dbg_printf+26↑j
.text:000000000000624F                 lea     rdi, aDate_0    ; "date: "
.text:0000000000006256                 mov     edx, 6          ; n
.text:000000000000625B                 mov     esi, 1          ; size
.text:0000000000006260                 mov     rax, fs:28h
.text:0000000000006269                 mov     [rsp+0D8h+var_C0], rax
.text:000000000000626E                 xor     eax, eax
.text:0000000000006270                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000006277                 call    _fwrite
.text:000000000000627C                 lea     rax, [rsp+0D8h+arg_0]
.text:0000000000006284                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; s
.text:000000000000628B                 mov     rdx, rsp
.text:000000000000628E                 mov     rsi, rbx
.text:0000000000006291                 mov     [rsp+0D8h+var_D8], 8
.text:0000000000006298                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:00000000000062A0                 mov     [rsp+0D8h+var_D0], rax
.text:00000000000062A5                 lea     rax, [rsp+0D8h+var_B8]
.text:00000000000062AA                 mov     [rsp+0D8h+var_C8], rax
.text:00000000000062AF                 call    rpl_vfprintf
.text:00000000000062B4                 mov     rax, [rsp+0D8h+var_C0]
.text:00000000000062B9                 xor     rax, fs:28h
.text:00000000000062C2                 jnz     short loc_62CD
.text:00000000000062C4                 add     rsp, 0D0h
.text:00000000000062CB                 pop     rbx
.text:00000000000062CC                 retn
.text:00000000000062CD ; ---------------------------------------------------------------------------
.text:00000000000062CD
.text:00000000000062CD loc_62CD:                               ; CODE XREF: dbg_printf+D2↑j
.text:00000000000062CD                 call    ___stack_chk_fail
.text:00000000000062CD ; } // starts at 61F0
.text:00000000000062CD dbg_printf      endp
.text:00000000000062CD
.text:00000000000062CD ; ---------------------------------------------------------------------------
.text:00000000000062D2                 align 20h
.text:00000000000062E0
.text:00000000000062E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062E0
.text:00000000000062E0
.text:00000000000062E0 print_rel_part_part_2 proc near         ; CODE XREF: debug_print_relative_time_part_11+4B↓p
.text:00000000000062E0                                         ; debug_print_relative_time_part_11+137↓p ...
.text:00000000000062E0 ; __unwind {
.text:00000000000062E0                 mov     r8, rdx
.text:00000000000062E3                 xor     edi, 1
.text:00000000000062E6                 lea     rdx, aLdS       ; " %+ld %s"
.text:00000000000062ED                 movzx   edi, dil
.text:00000000000062F1                 sub     rsp, 8
.text:00000000000062F5                 mov     rcx, rsi
.text:00000000000062F8                 add     rdx, rdi
.text:00000000000062FB                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006302                 mov     esi, 1
.text:0000000000006307                 xor     eax, eax
.text:0000000000006309                 call    ___fprintf_chk
.text:000000000000630E                 mov     eax, 1
.text:0000000000006313                 add     rsp, 8
.text:0000000000006317                 retn
.text:0000000000006317 ; } // starts at 62E0
.text:0000000000006317 print_rel_part_part_2 endp
.text:0000000000006317
.text:0000000000006317 ; ---------------------------------------------------------------------------
.text:0000000000006318                 align 20h
.text:0000000000006320
.text:0000000000006320 ; =============== S U B R O U T I N E =======================================
.text:0000000000006320
.text:0000000000006320
.text:0000000000006320 time_zone_hhmm_isra_4 proc near         ; CODE XREF: yyparse+1260↓p
.text:0000000000006320                                         ; yyparse+1325↓p
.text:0000000000006320 ; __unwind {
.text:0000000000006320                 cmp     rcx, 2
.text:0000000000006324                 mov     r9, rdx
.text:0000000000006327                 jg      short loc_6370
.text:0000000000006329                 test    r8, r8
.text:000000000000632C                 js      loc_63C0
.text:0000000000006332
.text:0000000000006332 loc_6332:                               ; CODE XREF: time_zone_hhmm_isra_4+53↓j
.text:0000000000006332                 xor     ecx, ecx
.text:0000000000006334                 imul    r9, 3Ch ; '<'
.text:0000000000006338                 seto    cl
.text:000000000000633B                 test    sil, sil
.text:000000000000633E                 jnz     short loc_63B0
.text:0000000000006340                 xor     edx, edx
.text:0000000000006342                 add     r9, r8
.text:0000000000006345                 seto    dl
.text:0000000000006348
.text:0000000000006348 loc_6348:                               ; CODE XREF: time_zone_hhmm_isra_4+98↓j
.text:0000000000006348                 xor     eax, eax
.text:000000000000634A                 or      ecx, edx
.text:000000000000634C                 jnz     short locret_636C
.text:000000000000634E
.text:000000000000634E loc_634E:                               ; CODE XREF: time_zone_hhmm_isra_4+DA↓j
.text:000000000000634E                 lea     rdx, [r9+5A0h]
.text:0000000000006355                 xor     eax, eax
.text:0000000000006357                 cmp     rdx, 0B40h
.text:000000000000635E                 ja      short locret_636C
.text:0000000000006360                 imul    r9d, 3Ch ; '<'
.text:0000000000006364                 mov     eax, 1
.text:0000000000006369                 mov     [rdi], r9d
.text:000000000000636C
.text:000000000000636C locret_636C:                            ; CODE XREF: time_zone_hhmm_isra_4+2C↑j
.text:000000000000636C                                         ; time_zone_hhmm_isra_4+3E↑j
.text:000000000000636C                 rep retn
.text:000000000000636C ; ---------------------------------------------------------------------------
.text:000000000000636E                 align 10h
.text:0000000000006370
.text:0000000000006370 loc_6370:                               ; CODE XREF: time_zone_hhmm_isra_4+7↑j
.text:0000000000006370                 test    r8, r8
.text:0000000000006373                 jns     short loc_6332
.text:0000000000006375                 mov     rax, r9
.text:0000000000006378                 mov     rdx, 0A3D70A3D70A3D70Bh
.text:0000000000006382                 imul    rdx
.text:0000000000006385                 mov     rax, r9
.text:0000000000006388                 sar     rax, 3Fh
.text:000000000000638C                 lea     rcx, [rdx+r9]
.text:0000000000006390                 sar     rcx, 6
.text:0000000000006394                 sub     rcx, rax
.text:0000000000006397                 lea     rax, [rcx+rcx*4]
.text:000000000000639B                 mov     rcx, r9
.text:000000000000639E                 lea     rax, [rax+rax*4]
.text:00000000000063A2                 shl     rax, 2
.text:00000000000063A6                 sub     rcx, rax
.text:00000000000063A9                 jmp     short loc_63CE
.text:00000000000063A9 ; ---------------------------------------------------------------------------
.text:00000000000063AB                 align 10h
.text:00000000000063B0
.text:00000000000063B0 loc_63B0:                               ; CODE XREF: time_zone_hhmm_isra_4+1E↑j
.text:00000000000063B0                 xor     edx, edx
.text:00000000000063B2                 sub     r9, r8
.text:00000000000063B5                 seto    dl
.text:00000000000063B8                 jmp     short loc_6348
.text:00000000000063B8 ; ---------------------------------------------------------------------------
.text:00000000000063BA                 align 20h
.text:00000000000063C0
.text:00000000000063C0 loc_63C0:                               ; CODE XREF: time_zone_hhmm_isra_4+C↑j
.text:00000000000063C0                 lea     rax, [rdx+rdx*4]
.text:00000000000063C4                 xor     ecx, ecx
.text:00000000000063C6                 lea     r9, [rax+rax*4]
.text:00000000000063CA                 shl     r9, 2
.text:00000000000063CE
.text:00000000000063CE loc_63CE:                               ; CODE XREF: time_zone_hhmm_isra_4+89↑j
.text:00000000000063CE                 mov     rax, r9
.text:00000000000063D1                 mov     rdx, 0A3D70A3D70A3D70Bh
.text:00000000000063DB                 imul    rdx
.text:00000000000063DE                 add     rdx, r9
.text:00000000000063E1                 sar     r9, 3Fh
.text:00000000000063E5                 sar     rdx, 6
.text:00000000000063E9                 sub     rdx, r9
.text:00000000000063EC                 mov     rax, rdx
.text:00000000000063EF                 shl     rax, 4
.text:00000000000063F3                 sub     rax, rdx
.text:00000000000063F6                 lea     r9, [rcx+rax*4]
.text:00000000000063FA                 jmp     loc_634E
.text:00000000000063FA ; } // starts at 6320
.text:00000000000063FA time_zone_hhmm_isra_4 endp
.text:00000000000063FA
.text:00000000000063FA ; ---------------------------------------------------------------------------
.text:00000000000063FF                 align 20h
.text:0000000000006400
.text:0000000000006400 ; =============== S U B R O U T I N E =======================================
.text:0000000000006400
.text:0000000000006400
.text:0000000000006400 mktime_ok_part_6 proc near              ; CODE XREF: parse_datetime2+CC8↓p
.text:0000000000006400                                         ; parse_datetime2+10DB↓p
.text:0000000000006400 ; __unwind {
.text:0000000000006400                 mov     eax, [rdi]
.text:0000000000006402                 mov     edx, [rdi+4]
.text:0000000000006405                 xor     eax, [rsi]
.text:0000000000006407                 xor     edx, [rsi+4]
.text:000000000000640A                 or      eax, edx
.text:000000000000640C                 mov     edx, [rdi+8]
.text:000000000000640F                 xor     edx, [rsi+8]
.text:0000000000006412                 or      eax, edx
.text:0000000000006414                 mov     edx, [rdi+0Ch]
.text:0000000000006417                 xor     edx, [rsi+0Ch]
.text:000000000000641A                 or      eax, edx
.text:000000000000641C                 mov     edx, [rdi+10h]
.text:000000000000641F                 xor     edx, [rsi+10h]
.text:0000000000006422                 or      eax, edx
.text:0000000000006424                 mov     edx, [rdi+14h]
.text:0000000000006427                 xor     edx, [rsi+14h]
.text:000000000000642A                 or      eax, edx
.text:000000000000642C                 setz    al
.text:000000000000642F                 retn
.text:000000000000642F ; } // starts at 6400
.text:000000000000642F mktime_ok_part_6 endp
.text:000000000000642F
.text:0000000000006430
.text:0000000000006430 ; =============== S U B R O U T I N E =======================================
.text:0000000000006430
.text:0000000000006430
.text:0000000000006430 lookup_zone     proc near               ; CODE XREF: yyparse+1978↓p
.text:0000000000006430                                         ; yyparse+1B6F↓p
.text:0000000000006430 ; __unwind {
.text:0000000000006430                 push    r12
.text:0000000000006432                 mov     r12, rdi
.text:0000000000006435                 push    rbp
.text:0000000000006436                 mov     rbp, rsi
.text:0000000000006439                 push    rbx
.text:000000000000643A                 lea     rsi, aGmt       ; "GMT"
.text:0000000000006441                 lea     rbx, universal_time_zone_table
.text:0000000000006448                 jmp     short loc_645C
.text:0000000000006448 ; ---------------------------------------------------------------------------
.text:000000000000644A                 align 10h
.text:0000000000006450
.text:0000000000006450 loc_6450:                               ; CODE XREF: lookup_zone+36↓j
.text:0000000000006450                 add     rbx, 10h
.text:0000000000006454                 mov     rsi, [rbx]      ; s2
.text:0000000000006457                 test    rsi, rsi
.text:000000000000645A                 jz      short loc_6470
.text:000000000000645C
.text:000000000000645C loc_645C:                               ; CODE XREF: lookup_zone+18↑j
.text:000000000000645C                 mov     rdi, rbp        ; s1
.text:000000000000645F                 call    _strcmp
.text:0000000000006464                 test    eax, eax
.text:0000000000006466                 jnz     short loc_6450
.text:0000000000006468
.text:0000000000006468 loc_6468:                               ; CODE XREF: lookup_zone+88↓j
.text:0000000000006468                 mov     rax, rbx
.text:000000000000646B                 pop     rbx
.text:000000000000646C                 pop     rbp
.text:000000000000646D                 pop     r12
.text:000000000000646F                 retn
.text:0000000000006470 ; ---------------------------------------------------------------------------
.text:0000000000006470
.text:0000000000006470 loc_6470:                               ; CODE XREF: lookup_zone+2A↑j
.text:0000000000006470                 mov     rsi, [r12+0E8h]
.text:0000000000006478                 lea     rbx, [r12+0E8h]
.text:0000000000006480                 test    rsi, rsi
.text:0000000000006483                 jnz     short loc_64CC
.text:0000000000006485                 nop     dword ptr [rax]
.text:0000000000006488
.text:0000000000006488 loc_6488:                               ; CODE XREF: lookup_zone+9A↓j
.text:0000000000006488                 lea     rbx, time_zone_table
.text:000000000000648F                 lea     rsi, aWet       ; "WET"
.text:0000000000006496                 jmp     short loc_64AC
.text:0000000000006496 ; ---------------------------------------------------------------------------
.text:0000000000006498                 align 20h
.text:00000000000064A0
.text:00000000000064A0 loc_64A0:                               ; CODE XREF: lookup_zone+86↓j
.text:00000000000064A0                 add     rbx, 10h
.text:00000000000064A4                 mov     rsi, [rbx]      ; s2
.text:00000000000064A7                 test    rsi, rsi
.text:00000000000064AA                 jz      short loc_64E0
.text:00000000000064AC
.text:00000000000064AC loc_64AC:                               ; CODE XREF: lookup_zone+66↑j
.text:00000000000064AC                 mov     rdi, rbp        ; s1
.text:00000000000064AF                 call    _strcmp
.text:00000000000064B4                 test    eax, eax
.text:00000000000064B6                 jnz     short loc_64A0
.text:00000000000064B8                 jmp     short loc_6468
.text:00000000000064B8 ; ---------------------------------------------------------------------------
.text:00000000000064BA                 align 20h
.text:00000000000064C0
.text:00000000000064C0 loc_64C0:                               ; CODE XREF: lookup_zone+A6↓j
.text:00000000000064C0                 add     rbx, 10h
.text:00000000000064C4                 mov     rsi, [rbx]      ; s2
.text:00000000000064C7                 test    rsi, rsi
.text:00000000000064CA                 jz      short loc_6488
.text:00000000000064CC
.text:00000000000064CC loc_64CC:                               ; CODE XREF: lookup_zone+53↑j
.text:00000000000064CC                 mov     rdi, rbp        ; s1
.text:00000000000064CF                 call    _strcmp
.text:00000000000064D4                 test    eax, eax
.text:00000000000064D6                 jnz     short loc_64C0
.text:00000000000064D8                 mov     rax, rbx
.text:00000000000064DB                 pop     rbx
.text:00000000000064DC                 pop     rbp
.text:00000000000064DD                 pop     r12
.text:00000000000064DF                 retn
.text:00000000000064E0 ; ---------------------------------------------------------------------------
.text:00000000000064E0
.text:00000000000064E0 loc_64E0:                               ; CODE XREF: lookup_zone+7A↑j
.text:00000000000064E0                 xor     ebx, ebx
.text:00000000000064E2                 mov     rax, rbx
.text:00000000000064E5                 pop     rbx
.text:00000000000064E6                 pop     rbp
.text:00000000000064E7                 pop     r12
.text:00000000000064E9                 retn
.text:00000000000064E9 ; } // starts at 6430
.text:00000000000064E9 lookup_zone     endp
.text:00000000000064E9
.text:00000000000064E9 ; ---------------------------------------------------------------------------
.text:00000000000064EA                 align 10h
.text:00000000000064F0
.text:00000000000064F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064F0
.text:00000000000064F0
.text:00000000000064F0 debug_print_relative_time_part_11 proc near
.text:00000000000064F0                                         ; CODE XREF: yyparse+287↓p
.text:00000000000064F0 ; __unwind {
.text:00000000000064F0                 push    rbp
.text:00000000000064F1                 push    rbx
.text:00000000000064F2                 mov     rbx, rsi
.text:00000000000064F5                 lea     rsi, aParsedSPart ; "parsed %s part: "
.text:00000000000064FC                 mov     rbp, rdi
.text:00000000000064FF                 mov     edx, 5          ; category
.text:0000000000006504                 sub     rsp, 8
.text:0000000000006508                 xor     edi, edi        ; domainname
.text:000000000000650A                 call    _dcgettext
.text:000000000000650F                 mov     rsi, rbp
.text:0000000000006512                 mov     rdi, rax
.text:0000000000006515                 xor     eax, eax
.text:0000000000006517                 call    dbg_printf
.text:000000000000651C                 mov     rsi, [rbx+68h]
.text:0000000000006520                 test    rsi, rsi
.text:0000000000006523                 jnz     loc_66B0
.text:0000000000006529                 mov     rsi, [rbx+70h]
.text:000000000000652D                 test    rsi, rsi
.text:0000000000006530                 jz      short loc_65B0
.text:0000000000006532                 xor     edi, edi
.text:0000000000006534
.text:0000000000006534 loc_6534:                               ; CODE XREF: debug_print_relative_time_part_11+1D8↓j
.text:0000000000006534                 lea     rdx, aMonthS    ; "month(s)"
.text:000000000000653B                 call    print_rel_part_part_2
.text:0000000000006540                 mov     rsi, [rbx+78h]
.text:0000000000006544                 movzx   edi, al
.text:0000000000006547
.text:0000000000006547 loc_6547:                               ; CODE XREF: debug_print_relative_time_part_11+1E2↓j
.text:0000000000006547                 test    rsi, rsi
.text:000000000000654A                 jnz     loc_6620
.text:0000000000006550
.text:0000000000006550 loc_6550:                               ; CODE XREF: debug_print_relative_time_part_11+D3↓j
.text:0000000000006550                                         ; debug_print_relative_time_part_11+DD↓j ...
.text:0000000000006550                 mov     rsi, [rbx+80h]
.text:0000000000006557                 test    rsi, rsi
.text:000000000000655A                 jnz     loc_663F
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: debug_print_relative_time_part_11+149↓j
.text:0000000000006560                 mov     rsi, [rbx+88h]
.text:0000000000006567                 test    rsi, rsi
.text:000000000000656A                 jnz     loc_665E
.text:0000000000006570
.text:0000000000006570 loc_6570:                               ; CODE XREF: debug_print_relative_time_part_11+168↓j
.text:0000000000006570                 mov     rsi, [rbx+90h]
.text:0000000000006577                 test    rsi, rsi
.text:000000000000657A                 jnz     loc_667D
.text:0000000000006580
.text:0000000000006580 loc_6580:                               ; CODE XREF: debug_print_relative_time_part_11+187↓j
.text:0000000000006580                 movsxd  rsi, dword ptr [rbx+98h]
.text:0000000000006587                 test    rsi, rsi
.text:000000000000658A                 jnz     loc_669C
.text:0000000000006590
.text:0000000000006590 loc_6590:                               ; CODE XREF: debug_print_relative_time_part_11+1A6↓j
.text:0000000000006590                                         ; debug_print_relative_time_part_11+1B8↓j
.text:0000000000006590                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000006597                 add     rsp, 8
.text:000000000000659B                 mov     edi, 0Ah        ; c
.text:00000000000065A0                 pop     rbx
.text:00000000000065A1                 pop     rbp
.text:00000000000065A2                 jmp     _fputc
.text:00000000000065A2 ; ---------------------------------------------------------------------------
.text:00000000000065A7                 align 10h
.text:00000000000065B0
.text:00000000000065B0 loc_65B0:                               ; CODE XREF: debug_print_relative_time_part_11+40↑j
.text:00000000000065B0                 mov     rsi, [rbx+78h]
.text:00000000000065B4                 xor     edi, edi
.text:00000000000065B6                 test    rsi, rsi
.text:00000000000065B9                 jnz     short loc_6620
.text:00000000000065BB                 cmp     qword ptr [rbx+80h], 0
.text:00000000000065C3                 jnz     short loc_6550
.text:00000000000065C5                 cmp     qword ptr [rbx+88h], 0
.text:00000000000065CD                 jnz     short loc_6550
.text:00000000000065CF                 cmp     qword ptr [rbx+90h], 0
.text:00000000000065D7                 jnz     loc_6550
.text:00000000000065DD                 mov     eax, [rbx+98h]
.text:00000000000065E3                 test    eax, eax
.text:00000000000065E5                 jnz     loc_6550
.text:00000000000065EB                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:00000000000065F2                 lea     rsi, aTodayThisNow ; "today/this/now\n"
.text:00000000000065F9                 xor     edi, edi        ; domainname
.text:00000000000065FB                 mov     edx, 5          ; category
.text:0000000000006600                 call    _dcgettext
.text:0000000000006605                 add     rsp, 8
.text:0000000000006609                 mov     rsi, rbx        ; stream
.text:000000000000660C                 mov     rdi, rax        ; s
.text:000000000000660F                 pop     rbx
.text:0000000000006610                 pop     rbp
.text:0000000000006611                 jmp     _fputs
.text:0000000000006611 ; ---------------------------------------------------------------------------
.text:0000000000006616                 align 20h
.text:0000000000006620
.text:0000000000006620 loc_6620:                               ; CODE XREF: debug_print_relative_time_part_11+5A↑j
.text:0000000000006620                                         ; debug_print_relative_time_part_11+C9↑j
.text:0000000000006620                 lea     rdx, aDayS      ; "day(s)"
.text:0000000000006627                 call    print_rel_part_part_2
.text:000000000000662C                 mov     rsi, [rbx+80h]
.text:0000000000006633                 movzx   edi, al
.text:0000000000006636                 test    rsi, rsi
.text:0000000000006639                 jz      loc_6560
.text:000000000000663F
.text:000000000000663F loc_663F:                               ; CODE XREF: debug_print_relative_time_part_11+6A↑j
.text:000000000000663F                 lea     rdx, aHourS     ; "hour(s)"
.text:0000000000006646                 call    print_rel_part_part_2
.text:000000000000664B                 mov     rsi, [rbx+88h]
.text:0000000000006652                 movzx   edi, al
.text:0000000000006655                 test    rsi, rsi
.text:0000000000006658                 jz      loc_6570
.text:000000000000665E
.text:000000000000665E loc_665E:                               ; CODE XREF: debug_print_relative_time_part_11+7A↑j
.text:000000000000665E                 lea     rdx, aMinutes   ; "minutes"
.text:0000000000006665                 call    print_rel_part_part_2
.text:000000000000666A                 mov     rsi, [rbx+90h]
.text:0000000000006671                 movzx   edi, al
.text:0000000000006674                 test    rsi, rsi
.text:0000000000006677                 jz      loc_6580
.text:000000000000667D
.text:000000000000667D loc_667D:                               ; CODE XREF: debug_print_relative_time_part_11+8A↑j
.text:000000000000667D                 lea     rdx, aSeconds   ; "seconds"
.text:0000000000006684                 call    print_rel_part_part_2
.text:0000000000006689                 movsxd  rsi, dword ptr [rbx+98h]
.text:0000000000006690                 movzx   edi, al
.text:0000000000006693                 test    rsi, rsi
.text:0000000000006696                 jz      loc_6590
.text:000000000000669C
.text:000000000000669C loc_669C:                               ; CODE XREF: debug_print_relative_time_part_11+9A↑j
.text:000000000000669C                 lea     rdx, aNanoseconds ; "nanoseconds"
.text:00000000000066A3                 call    print_rel_part_part_2
.text:00000000000066A8                 jmp     loc_6590
.text:00000000000066A8 ; ---------------------------------------------------------------------------
.text:00000000000066AD                 align 10h
.text:00000000000066B0
.text:00000000000066B0 loc_66B0:                               ; CODE XREF: debug_print_relative_time_part_11+33↑j
.text:00000000000066B0                 lea     rdx, aYearS     ; "year(s)"
.text:00000000000066B7                 xor     edi, edi
.text:00000000000066B9                 call    print_rel_part_part_2
.text:00000000000066BE                 mov     rsi, [rbx+70h]
.text:00000000000066C2                 movzx   edi, al
.text:00000000000066C5                 test    rsi, rsi
.text:00000000000066C8                 jnz     loc_6534
.text:00000000000066CE                 mov     rsi, [rbx+78h]
.text:00000000000066D2                 jmp     loc_6547
.text:00000000000066D2 ; } // starts at 64F0
.text:00000000000066D2 debug_print_relative_time_part_11 endp
.text:00000000000066D2
.text:00000000000066D2 ; ---------------------------------------------------------------------------
.text:00000000000066D7                 align 20h
.text:00000000000066E0
.text:00000000000066E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066E0
.text:00000000000066E0
.text:00000000000066E0 debug_strfdatetime_constprop_12 proc near
.text:00000000000066E0                                         ; CODE XREF: parse_datetime2+828↓p
.text:00000000000066E0                                         ; parse_datetime2+895↓p ...
.text:00000000000066E0
.text:00000000000066E0 var_20          = qword ptr -20h
.text:00000000000066E0
.text:00000000000066E0 ; __unwind {
.text:00000000000066E0                 push    r12
.text:00000000000066E2                 push    rbp
.text:00000000000066E3                 mov     rcx, rdi
.text:00000000000066E6                 push    rbx
.text:00000000000066E7                 mov     rbx, rdx
.text:00000000000066EA                 lea     rdx, unk_13072
.text:00000000000066F1                 mov     r12, rsi
.text:00000000000066F4                 xor     r9d, r9d
.text:00000000000066F7                 xor     r8d, r8d
.text:00000000000066FA                 sub     rsp, 30h
.text:00000000000066FE                 mov     esi, 64h ; 'd'
.text:0000000000006703                 mov     rdi, rbx
.text:0000000000006706                 mov     rax, fs:28h
.text:000000000000670F                 mov     [rsp+48h+var_20], rax
.text:0000000000006714                 xor     eax, eax
.text:0000000000006716                 call    nstrftime
.text:000000000000671B                 test    r12, r12
.text:000000000000671E                 jz      short loc_6733
.text:0000000000006720                 cmp     eax, 63h ; 'c'
.text:0000000000006723                 mov     rbp, rax
.text:0000000000006726                 jg      short loc_6733
.text:0000000000006728                 cmp     qword ptr [r12+0D0h], 0
.text:0000000000006731                 jnz     short loc_6750
.text:0000000000006733
.text:0000000000006733 loc_6733:                               ; CODE XREF: debug_strfdatetime_constprop_12+3E↑j
.text:0000000000006733                                         ; debug_strfdatetime_constprop_12+46↑j ...
.text:0000000000006733                 mov     rdx, [rsp+48h+var_20]
.text:0000000000006738                 xor     rdx, fs:28h
.text:0000000000006741                 mov     rax, rbx
.text:0000000000006744                 jnz     short loc_678C
.text:0000000000006746                 add     rsp, 30h
.text:000000000000674A                 pop     rbx
.text:000000000000674B                 pop     rbp
.text:000000000000674C                 pop     r12
.text:000000000000674E                 retn
.text:000000000000674E ; ---------------------------------------------------------------------------
.text:000000000000674F                 align 10h
.text:0000000000006750
.text:0000000000006750 loc_6750:                               ; CODE XREF: debug_strfdatetime_constprop_12+51↑j
.text:0000000000006750                 mov     edi, [r12+18h]
.text:0000000000006755                 mov     rsi, rsp
.text:0000000000006758                 call    time_zone_str
.text:000000000000675D                 mov     esi, 64h ; 'd'
.text:0000000000006762                 movsxd  rdi, ebp
.text:0000000000006765                 lea     r8, aTzS        ; " TZ=%s"
.text:000000000000676C                 sub     esi, ebp
.text:000000000000676E                 mov     r9, rax
.text:0000000000006771                 add     rdi, rbx
.text:0000000000006774                 movsxd  rsi, esi
.text:0000000000006777                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000677E                 mov     edx, 1
.text:0000000000006783                 xor     eax, eax
.text:0000000000006785                 call    ___snprintf_chk
.text:000000000000678A                 jmp     short loc_6733
.text:000000000000678C ; ---------------------------------------------------------------------------
.text:000000000000678C
.text:000000000000678C loc_678C:                               ; CODE XREF: debug_strfdatetime_constprop_12+64↑j
.text:000000000000678C                 call    ___stack_chk_fail
.text:000000000000678C ; } // starts at 66E0
.text:000000000000678C debug_strfdatetime_constprop_12 endp
.text:000000000000678C
.text:000000000000678C ; ---------------------------------------------------------------------------
.text:0000000000006791                 align 20h
.text:00000000000067A0
.text:00000000000067A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067A0
.text:00000000000067A0
.text:00000000000067A0 str_days_constprop_13 proc near         ; CODE XREF: debug_print_current_time_part_10+EC↓p
.text:00000000000067A0                                         ; parse_datetime2+11CB↓p ...
.text:00000000000067A0 ; __unwind {
.text:00000000000067A0                 push    rbp
.text:00000000000067A1                 push    rbx
.text:00000000000067A2                 mov     rbp, rsi
.text:00000000000067A5                 mov     rbx, rdi
.text:00000000000067A8                 sub     rsp, 8
.text:00000000000067AC                 cmp     byte ptr [rdi+0E0h], 0
.text:00000000000067B3                 jz      short loc_6808
.text:00000000000067B5                 mov     r9, [rdi+8]
.text:00000000000067B9                 lea     rax, [r9+1]
.text:00000000000067BD                 cmp     rax, 0Dh
.text:00000000000067C1                 jbe     loc_6858
.text:00000000000067C7                 lea     r8, aNumberOfSecond+13h ; "%ld"
.text:00000000000067CE                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000067D5                 mov     edx, 1
.text:00000000000067DA                 mov     esi, 64h ; 'd'
.text:00000000000067DF                 mov     rdi, rbp
.text:00000000000067E2                 xor     eax, eax
.text:00000000000067E4                 call    ___snprintf_chk
.text:00000000000067E9
.text:00000000000067E9 loc_67E9:                               ; CODE XREF: str_days_constprop_13+E0↓j
.text:00000000000067E9                 movsxd  rdx, dword ptr [rbx+10h]
.text:00000000000067ED                 cmp     edx, 6
.text:00000000000067F0                 ja      short loc_67FB
.text:00000000000067F2                 cmp     eax, 63h ; 'c'
.text:00000000000067F5                 jbe     loc_6885
.text:00000000000067FB
.text:00000000000067FB loc_67FB:                               ; CODE XREF: str_days_constprop_13+50↑j
.text:00000000000067FB                                         ; str_days_constprop_13+72↓j
.text:00000000000067FB                 add     rsp, 8
.text:00000000000067FF                 mov     rax, rbp
.text:0000000000006802                 pop     rbx
.text:0000000000006803                 pop     rbp
.text:0000000000006804                 retn
.text:0000000000006804 ; ---------------------------------------------------------------------------
.text:0000000000006805                 align 8
.text:0000000000006808
.text:0000000000006808 loc_6808:                               ; CODE XREF: str_days_constprop_13+13↑j
.text:0000000000006808                 mov     byte ptr [rsi], 0
.text:000000000000680B                 movsxd  rdx, dword ptr [rdi+10h]
.text:000000000000680F                 cmp     edx, 6
.text:0000000000006812                 ja      short loc_67FB
.text:0000000000006814                 mov     rdi, rsi
.text:0000000000006817                 mov     ecx, 1
.text:000000000000681C                 mov     esi, 64h ; 'd'
.text:0000000000006821
.text:0000000000006821 loc_6821:                               ; CODE XREF: str_days_constprop_13+FD↓j
.text:0000000000006821                 lea     rax, days_values_5109
.text:0000000000006828                 lea     r9, [rax+rdx*4]
.text:000000000000682C                 lea     rax, aS_0+1     ; " %s"
.text:0000000000006833                 mov     edx, 1
.text:0000000000006838                 lea     r8, [rax+rcx]
.text:000000000000683C                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006843                 xor     eax, eax
.text:0000000000006845                 call    ___snprintf_chk
.text:000000000000684A                 add     rsp, 8
.text:000000000000684E                 mov     rax, rbp
.text:0000000000006851                 pop     rbx
.text:0000000000006852                 pop     rbp
.text:0000000000006853                 retn
.text:0000000000006853 ; ---------------------------------------------------------------------------
.text:0000000000006854                 align 8
.text:0000000000006858
.text:0000000000006858 loc_6858:                               ; CODE XREF: str_days_constprop_13+21↑j
.text:0000000000006858                 lea     rdx, [rax+rax*4]
.text:000000000000685C                 mov     esi, 64h ; 'd'  ; maxlen
.text:0000000000006861                 mov     rdi, rbp        ; s
.text:0000000000006864                 lea     rcx, [rax+rdx*2]
.text:0000000000006868                 lea     rax, ordinal_values_5108 ; "last"
.text:000000000000686F                 lea     rdx, aS_0+2     ; format
.text:0000000000006876                 add     rcx, rax
.text:0000000000006879                 xor     eax, eax
.text:000000000000687B                 call    _snprintf
.text:0000000000006880                 jmp     loc_67E9
.text:0000000000006885 ; ---------------------------------------------------------------------------
.text:0000000000006885
.text:0000000000006885 loc_6885:                               ; CODE XREF: str_days_constprop_13+55↑j
.text:0000000000006885                 xor     ecx, ecx
.text:0000000000006887                 mov     esi, 64h ; 'd'
.text:000000000000688C                 test    eax, eax
.text:000000000000688E                 setz    cl
.text:0000000000006891                 sub     esi, eax
.text:0000000000006893                 cdqe
.text:0000000000006895                 movsxd  rsi, esi
.text:0000000000006898                 lea     rdi, [rbp+rax+0]
.text:000000000000689D                 jmp     short loc_6821
.text:000000000000689D ; } // starts at 67A0
.text:000000000000689D str_days_constprop_13 endp
.text:000000000000689D
.text:000000000000689D ; ---------------------------------------------------------------------------
.text:000000000000689F                 align 20h
.text:00000000000068A0
.text:00000000000068A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068A0
.text:00000000000068A0
.text:00000000000068A0 debug_print_current_time_part_10 proc near
.text:00000000000068A0                                         ; CODE XREF: yyparse+DA3↓p
.text:00000000000068A0
.text:00000000000068A0 var_30          = qword ptr -30h
.text:00000000000068A0
.text:00000000000068A0 ; __unwind {
.text:00000000000068A0                 push    r13
.text:00000000000068A2                 push    r12
.text:00000000000068A4                 mov     edx, 5          ; category
.text:00000000000068A9                 push    rbp
.text:00000000000068AA                 push    rbx
.text:00000000000068AB                 mov     rbx, rsi
.text:00000000000068AE                 lea     rsi, aParsedSPart ; "parsed %s part: "
.text:00000000000068B5                 mov     rbp, rdi
.text:00000000000068B8                 xor     edi, edi        ; domainname
.text:00000000000068BA                 sub     rsp, 78h
.text:00000000000068BE                 mov     rax, fs:28h
.text:00000000000068C7                 mov     [rsp+98h+var_30], rax
.text:00000000000068CC                 xor     eax, eax
.text:00000000000068CE                 call    _dcgettext
.text:00000000000068D3                 mov     rsi, rbp
.text:00000000000068D6                 mov     rdi, rax
.text:00000000000068D9                 xor     eax, eax
.text:00000000000068DB                 call    dbg_printf
.text:00000000000068E0                 cmp     qword ptr [rbx+0A8h], 0
.text:00000000000068E8                 jz      short loc_68F7
.text:00000000000068EA                 cmp     byte ptr [rbx+0DAh], 0
.text:00000000000068F1                 jz      loc_6AF0
.text:00000000000068F7
.text:00000000000068F7 loc_68F7:                               ; CODE XREF: debug_print_current_time_part_10+48↑j
.text:00000000000068F7                 movzx   eax, byte ptr [rbx+0DFh]
.text:00000000000068FE                 cmp     [rbx+0D8h], al
.text:0000000000006904                 jz      loc_6AE4
.text:000000000000690A
.text:000000000000690A loc_690A:                               ; CODE XREF: debug_print_current_time_part_10+2A6↓j
.text:000000000000690A                 lea     rsi, aYear04ld  ; "year: %04ld"
.text:0000000000006911                 mov     rbp, [rbx+28h]
.text:0000000000006915                 mov     edx, 5          ; category
.text:000000000000691A                 xor     edi, edi        ; domainname
.text:000000000000691C                 call    _dcgettext
.text:0000000000006921                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006928                 mov     rdx, rax
.text:000000000000692B                 mov     rcx, rbp
.text:000000000000692E                 mov     esi, 1
.text:0000000000006933                 xor     eax, eax
.text:0000000000006935                 call    ___fprintf_chk
.text:000000000000693A                 movzx   eax, byte ptr [rbx+0D8h]
.text:0000000000006941                 mov     edx, 1
.text:0000000000006946                 mov     [rbx+0DFh], al
.text:000000000000694C
.text:000000000000694C loc_694C:                               ; CODE XREF: debug_print_current_time_part_10+246↓j
.text:000000000000694C                                         ; debug_print_current_time_part_10+28F↓j
.text:000000000000694C                 cmp     qword ptr [rbx+0C8h], 0
.text:0000000000006954                 jz      short loc_6963
.text:0000000000006956                 cmp     byte ptr [rbx+0DDh], 0
.text:000000000000695D                 jz      loc_6B50
.text:0000000000006963
.text:0000000000006963 loc_6963:                               ; CODE XREF: debug_print_current_time_part_10+B4↑j
.text:0000000000006963                 cmp     qword ptr [rbx+0B0h], 0
.text:000000000000696B                 jz      short loc_69D2
.text:000000000000696D                 cmp     byte ptr [rbx+0DBh], 0
.text:0000000000006974                 jnz     short loc_69D2
.text:0000000000006976                 test    dl, dl
.text:0000000000006978                 jnz     loc_6BBF
.text:000000000000697E
.text:000000000000697E loc_697E:                               ; CODE XREF: debug_print_current_time_part_10+330↓j
.text:000000000000697E                 mov     rsi, rsp
.text:0000000000006981                 mov     rdi, rbx
.text:0000000000006984                 mov     r13d, [rbx+10h]
.text:0000000000006988                 mov     r12, [rbx+8]
.text:000000000000698C                 call    str_days_constprop_13
.text:0000000000006991                 lea     rsi, aSDayOrdinalLdN ; "%s (day ordinal=%ld number=%d)"
.text:0000000000006998                 mov     edx, 5          ; category
.text:000000000000699D                 xor     edi, edi        ; domainname
.text:000000000000699F                 mov     rbp, rax
.text:00000000000069A2                 call    _dcgettext
.text:00000000000069A7                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000069AE                 mov     rdx, rax
.text:00000000000069B1                 mov     r9d, r13d
.text:00000000000069B4                 mov     r8, r12
.text:00000000000069B7                 mov     rcx, rbp
.text:00000000000069BA                 mov     esi, 1
.text:00000000000069BF                 xor     eax, eax
.text:00000000000069C1                 call    ___fprintf_chk
.text:00000000000069C6                 mov     byte ptr [rbx+0DBh], 1
.text:00000000000069CD                 mov     edx, 1
.text:00000000000069D2
.text:00000000000069D2 loc_69D2:                               ; CODE XREF: debug_print_current_time_part_10+CB↑j
.text:00000000000069D2                                         ; debug_print_current_time_part_10+D4↑j ...
.text:00000000000069D2                 cmp     qword ptr [rbx+0B8h], 0
.text:00000000000069DA                 jz      loc_6A60
.text:00000000000069E0                 cmp     byte ptr [rbx+0DCh], 0
.text:00000000000069E7                 jnz     short loc_6A60
.text:00000000000069E9                 cmp     qword ptr [rbx+0C0h], 0
.text:00000000000069F1                 lea     rax, aDst       ; " DST"
.text:00000000000069F8                 lea     r8, aUserProvidedTi+1Dh ; ""
.text:00000000000069FF                 mov     ecx, [rbx+14h]
.text:0000000000006A02                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006A09                 mov     esi, 1
.text:0000000000006A0E                 cmovnz  r8, rax
.text:0000000000006A12                 xor     edx, 1
.text:0000000000006A15                 lea     rax, aIsdstDS   ; " isdst=%d%s"
.text:0000000000006A1C                 movzx   edx, dl
.text:0000000000006A1F                 add     rdx, rax
.text:0000000000006A22                 xor     eax, eax
.text:0000000000006A24                 call    ___fprintf_chk
.text:0000000000006A29                 cmp     qword ptr [rbx+0D0h], 0
.text:0000000000006A31                 mov     byte ptr [rbx+0DCh], 1
.text:0000000000006A38                 jnz     loc_6BD8
.text:0000000000006A3E
.text:0000000000006A3E loc_6A3E:                               ; CODE XREF: debug_print_current_time_part_10+33F↓j
.text:0000000000006A3E                                         ; debug_print_current_time_part_10+38B↓j
.text:0000000000006A3E                 cmp     byte ptr [rbx+0A0h], 0
.text:0000000000006A45                 jz      short loc_6AB4
.text:0000000000006A47                 mov     rbx, [rbx+58h]
.text:0000000000006A4B
.text:0000000000006A4B loc_6A4B:                               ; CODE XREF: debug_print_current_time_part_10+1E6↓j
.text:0000000000006A4B                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000006A52                 mov     edi, 20h ; ' '  ; c
.text:0000000000006A57                 call    _fputc
.text:0000000000006A5C                 jmp     short loc_6A88
.text:0000000000006A5C ; ---------------------------------------------------------------------------
.text:0000000000006A5E                 align 20h
.text:0000000000006A60
.text:0000000000006A60 loc_6A60:                               ; CODE XREF: debug_print_current_time_part_10+13A↑j
.text:0000000000006A60                                         ; debug_print_current_time_part_10+147↑j
.text:0000000000006A60                 cmp     qword ptr [rbx+0D0h], 0
.text:0000000000006A68                 jz      short loc_6A77
.text:0000000000006A6A                 cmp     byte ptr [rbx+0DEh], 0
.text:0000000000006A71                 jz      loc_6BF0
.text:0000000000006A77
.text:0000000000006A77 loc_6A77:                               ; CODE XREF: debug_print_current_time_part_10+1C8↑j
.text:0000000000006A77                 cmp     byte ptr [rbx+0A0h], 0
.text:0000000000006A7E                 jz      short loc_6AB4
.text:0000000000006A80                 test    dl, dl
.text:0000000000006A82                 mov     rbx, [rbx+58h]
.text:0000000000006A86                 jnz     short loc_6A4B
.text:0000000000006A88
.text:0000000000006A88 loc_6A88:                               ; CODE XREF: debug_print_current_time_part_10+1BC↑j
.text:0000000000006A88                 lea     rsi, aNumberOfSecond ; "number of seconds: %ld"
.text:0000000000006A8F                 mov     edx, 5          ; category
.text:0000000000006A94                 xor     edi, edi        ; domainname
.text:0000000000006A96                 call    _dcgettext
.text:0000000000006A9B                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006AA2                 mov     rdx, rax
.text:0000000000006AA5                 mov     rcx, rbx
.text:0000000000006AA8                 mov     esi, 1
.text:0000000000006AAD                 xor     eax, eax
.text:0000000000006AAF                 call    ___fprintf_chk
.text:0000000000006AB4
.text:0000000000006AB4 loc_6AB4:                               ; CODE XREF: debug_print_current_time_part_10+1A5↑j
.text:0000000000006AB4                                         ; debug_print_current_time_part_10+1DE↑j
.text:0000000000006AB4                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000006ABB                 mov     edi, 0Ah        ; c
.text:0000000000006AC0                 call    _fputc
.text:0000000000006AC5                 mov     rax, [rsp+98h+var_30]
.text:0000000000006ACA                 xor     rax, fs:28h
.text:0000000000006AD3                 jnz     loc_6C72
.text:0000000000006AD9                 add     rsp, 78h
.text:0000000000006ADD                 pop     rbx
.text:0000000000006ADE                 pop     rbp
.text:0000000000006ADF                 pop     r12
.text:0000000000006AE1                 pop     r13
.text:0000000000006AE3                 retn
.text:0000000000006AE4 ; ---------------------------------------------------------------------------
.text:0000000000006AE4
.text:0000000000006AE4 loc_6AE4:                               ; CODE XREF: debug_print_current_time_part_10+64↑j
.text:0000000000006AE4                 xor     edx, edx
.text:0000000000006AE6                 jmp     loc_694C
.text:0000000000006AE6 ; ---------------------------------------------------------------------------
.text:0000000000006AEB                 align 10h
.text:0000000000006AF0
.text:0000000000006AF0 loc_6AF0:                               ; CODE XREF: debug_print_current_time_part_10+51↑j
.text:0000000000006AF0                 mov     rcx, [rbx+28h]
.text:0000000000006AF4                 mov     r9, [rbx+40h]
.text:0000000000006AF8                 lea     rdx, aYMD04ld02ld02l ; "(Y-M-D) %04ld-%02ld-%02ld"
.text:0000000000006AFF                 mov     r8, [rbx+38h]
.text:0000000000006B03                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006B0A                 xor     eax, eax
.text:0000000000006B0C                 mov     esi, 1
.text:0000000000006B11                 call    ___fprintf_chk
.text:0000000000006B16                 movzx   eax, byte ptr [rbx+0DFh]
.text:0000000000006B1D                 mov     byte ptr [rbx+0DAh], 1
.text:0000000000006B24                 mov     edx, 1
.text:0000000000006B29                 cmp     [rbx+0D8h], al
.text:0000000000006B2F                 jz      loc_694C
.text:0000000000006B35                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000006B3C                 mov     edi, 20h ; ' '  ; c
.text:0000000000006B41                 call    _fputc
.text:0000000000006B46                 jmp     loc_690A
.text:0000000000006B46 ; ---------------------------------------------------------------------------
.text:0000000000006B4B                 align 10h
.text:0000000000006B50
.text:0000000000006B50 loc_6B50:                               ; CODE XREF: debug_print_current_time_part_10+BD↑j
.text:0000000000006B50                 mov     rcx, [rbx+48h]
.text:0000000000006B54                 xor     edx, 1
.text:0000000000006B57                 lea     rax, a02ld02ld02ld ; " %02ld:%02ld:%02ld"
.text:0000000000006B5E                 mov     r9, [rbx+58h]
.text:0000000000006B62                 mov     r8, [rbx+50h]
.text:0000000000006B66                 movzx   edx, dl
.text:0000000000006B69                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006B70                 add     rdx, rax
.text:0000000000006B73                 mov     esi, 1
.text:0000000000006B78                 xor     eax, eax
.text:0000000000006B7A                 call    ___fprintf_chk
.text:0000000000006B7F                 mov     rcx, [rbx+60h]
.text:0000000000006B83                 test    rcx, rcx
.text:0000000000006B86                 jnz     loc_6C30
.text:0000000000006B8C
.text:0000000000006B8C loc_6B8C:                               ; CODE XREF: debug_print_current_time_part_10+3AA↓j
.text:0000000000006B8C                 cmp     dword ptr [rbx+1Ch], 1
.text:0000000000006B90                 jz      loc_6C50
.text:0000000000006B96
.text:0000000000006B96 loc_6B96:                               ; CODE XREF: debug_print_current_time_part_10+3CD↓j
.text:0000000000006B96                 cmp     qword ptr [rbx+0B0h], 0
.text:0000000000006B9E                 mov     byte ptr [rbx+0DDh], 1
.text:0000000000006BA5                 mov     edx, 1
.text:0000000000006BAA                 jz      loc_69D2
.text:0000000000006BB0                 movzx   edx, byte ptr [rbx+0DBh]
.text:0000000000006BB7                 test    dl, dl
.text:0000000000006BB9                 jnz     loc_69D2
.text:0000000000006BBF
.text:0000000000006BBF loc_6BBF:                               ; CODE XREF: debug_print_current_time_part_10+D8↑j
.text:0000000000006BBF                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000006BC6                 mov     edi, 20h ; ' '  ; c
.text:0000000000006BCB                 call    _fputc
.text:0000000000006BD0                 jmp     loc_697E
.text:0000000000006BD0 ; ---------------------------------------------------------------------------
.text:0000000000006BD5                 align 8
.text:0000000000006BD8
.text:0000000000006BD8 loc_6BD8:                               ; CODE XREF: debug_print_current_time_part_10+198↑j
.text:0000000000006BD8                 cmp     byte ptr [rbx+0DEh], 0
.text:0000000000006BDF                 jnz     loc_6A3E
.text:0000000000006BE5                 lea     rbp, aUtcS      ; " UTC%s"
.text:0000000000006BEC                 jmp     short loc_6C00
.text:0000000000006BEC ; ---------------------------------------------------------------------------
.text:0000000000006BEE                 align 10h
.text:0000000000006BF0
.text:0000000000006BF0 loc_6BF0:                               ; CODE XREF: debug_print_current_time_part_10+1D1↑j
.text:0000000000006BF0                 xor     edx, 1
.text:0000000000006BF3                 movzx   ebp, dl
.text:0000000000006BF6                 lea     rdx, aUtcS      ; " UTC%s"
.text:0000000000006BFD                 add     rbp, rdx
.text:0000000000006C00
.text:0000000000006C00 loc_6C00:                               ; CODE XREF: debug_print_current_time_part_10+34C↑j
.text:0000000000006C00                 mov     edi, [rbx+18h]
.text:0000000000006C03                 mov     rsi, rsp
.text:0000000000006C06                 call    time_zone_str
.text:0000000000006C0B                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006C12                 mov     rcx, rax
.text:0000000000006C15                 mov     rdx, rbp
.text:0000000000006C18                 mov     esi, 1
.text:0000000000006C1D                 xor     eax, eax
.text:0000000000006C1F                 call    ___fprintf_chk
.text:0000000000006C24                 mov     byte ptr [rbx+0DEh], 1
.text:0000000000006C2B                 jmp     loc_6A3E
.text:0000000000006C30 ; ---------------------------------------------------------------------------
.text:0000000000006C30
.text:0000000000006C30 loc_6C30:                               ; CODE XREF: debug_print_current_time_part_10+2E6↑j
.text:0000000000006C30                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006C37                 lea     rdx, a09d       ; ".%09d"
.text:0000000000006C3E                 mov     esi, 1
.text:0000000000006C43                 xor     eax, eax
.text:0000000000006C45                 call    ___fprintf_chk
.text:0000000000006C4A                 jmp     loc_6B8C
.text:0000000000006C4A ; ---------------------------------------------------------------------------
.text:0000000000006C4F                 align 10h
.text:0000000000006C50
.text:0000000000006C50 loc_6C50:                               ; CODE XREF: debug_print_current_time_part_10+2F0↑j
.text:0000000000006C50                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000006C57                 lea     rdi, aPm        ; "pm"
.text:0000000000006C5E                 mov     edx, 2          ; n
.text:0000000000006C63                 mov     esi, 1          ; size
.text:0000000000006C68                 call    _fwrite
.text:0000000000006C6D                 jmp     loc_6B96
.text:0000000000006C72 ; ---------------------------------------------------------------------------
.text:0000000000006C72
.text:0000000000006C72 loc_6C72:                               ; CODE XREF: debug_print_current_time_part_10+233↑j
.text:0000000000006C72                 call    ___stack_chk_fail
.text:0000000000006C72 ; } // starts at 68A0
.text:0000000000006C72 debug_print_current_time_part_10 endp
.text:0000000000006C72
.text:0000000000006C72 ; ---------------------------------------------------------------------------
.text:0000000000006C77                 align 20h
.text:0000000000006C80
.text:0000000000006C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C80
.text:0000000000006C80 ; Attributes: info_from_lumina
.text:0000000000006C80
.text:0000000000006C80                 public yyparse
.text:0000000000006C80 yyparse         proc near               ; CODE XREF: parse_datetime2+3D1↓p
.text:0000000000006C80
.text:0000000000006C80 var_5F0         = qword ptr -5F0h
.text:0000000000006C80 var_5E8         = qword ptr -5E8h
.text:0000000000006C80 var_5E0         = qword ptr -5E0h
.text:0000000000006C80 var_5D8         = qword ptr -5D8h
.text:0000000000006C80 var_5D0         = qword ptr -5D0h
.text:0000000000006C80 var_5C4         = dword ptr -5C4h
.text:0000000000006C80 var_5C0         = qword ptr -5C0h
.text:0000000000006C80 var_5B8         = qword ptr -5B8h
.text:0000000000006C80 var_5B0         = qword ptr -5B0h
.text:0000000000006C80 var_5A8         = qword ptr -5A8h
.text:0000000000006C80 var_5A0         = qword ptr -5A0h
.text:0000000000006C80 var_598         = qword ptr -598h
.text:0000000000006C80 var_590         = qword ptr -590h
.text:0000000000006C80 var_588         = qword ptr -588h
.text:0000000000006C80 var_580         = qword ptr -580h
.text:0000000000006C80 var_578         = qword ptr -578h
.text:0000000000006C80 var_570         = qword ptr -570h
.text:0000000000006C80 var_568         = xmmword ptr -568h
.text:0000000000006C80 var_558         = xmmword ptr -558h
.text:0000000000006C80 var_548         = xmmword ptr -548h
.text:0000000000006C80 var_538         = qword ptr -538h
.text:0000000000006C80 var_528         = xmmword ptr -528h
.text:0000000000006C80 var_518         = xmmword ptr -518h
.text:0000000000006C80 var_508         = xmmword ptr -508h
.text:0000000000006C80 var_4F8         = qword ptr -4F8h
.text:0000000000006C80 var_4E8         = word ptr -4E8h
.text:0000000000006C80 var_4B8         = byte ptr -4B8h
.text:0000000000006C80 s1              = byte ptr -58h
.text:0000000000006C80 var_55          = byte ptr -55h
.text:0000000000006C80 var_40          = qword ptr -40h
.text:0000000000006C80
.text:0000000000006C80 ; __unwind {
.text:0000000000006C80                 push    r15
.text:0000000000006C82                 push    r14
.text:0000000000006C84                 xor     edx, edx
.text:0000000000006C86                 push    r13
.text:0000000000006C88                 push    r12
.text:0000000000006C8A                 mov     r11, rdi
.text:0000000000006C8D                 push    rbp
.text:0000000000006C8E                 push    rbx
.text:0000000000006C8F                 mov     r14d, 26h ; '&'
.text:0000000000006C95                 xor     ebx, ebx
.text:0000000000006C97                 mov     r9d, 0FFFFFFFEh
.text:0000000000006C9D                 sub     rsp, 5C8h
.text:0000000000006CA4                 lea     r15, [rsp+5F8h+var_4E8]
.text:0000000000006CAC                 lea     r13, [rsp+5F8h+var_4B8]
.text:0000000000006CB4                 mov     [rsp+5F8h+var_4E8], dx
.text:0000000000006CBC                 mov     rax, fs:28h
.text:0000000000006CC5                 mov     [rsp+5F8h+var_40], rax
.text:0000000000006CCD                 xor     eax, eax
.text:0000000000006CCF                 mov     r12, r15
.text:0000000000006CD2                 mov     [rsp+5F8h+var_5C4], 0
.text:0000000000006CDA
.text:0000000000006CDA loc_6CDA:                               ; CODE XREF: yyparse+3BC↓j
.text:0000000000006CDA                 movsx   r8d, r14b
.text:0000000000006CDE                 cmp     r8d, 0FFFFFFA3h
.text:0000000000006CE2                 jz      short loc_6D20
.text:0000000000006CE4                 cmp     r9d, 0FFFFFFFEh
.text:0000000000006CE8                 jz      loc_7370
.text:0000000000006CEE
.text:0000000000006CEE loc_6CEE:                               ; CODE XREF: yyparse+939↓j
.text:0000000000006CEE                 test    r9d, r9d
.text:0000000000006CF1                 jle     loc_72A0
.text:0000000000006CF7                 cmp     r9d, 115h
.text:0000000000006CFE                 jle     loc_7350
.text:0000000000006D04                 add     r8d, 2
.text:0000000000006D08                 mov     eax, 2
.text:0000000000006D0D                 cmp     r8d, 70h ; 'p'
.text:0000000000006D11                 jbe     loc_72AF
.text:0000000000006D17                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006D20
.text:0000000000006D20 loc_6D20:                               ; CODE XREF: yyparse+62↑j
.text:0000000000006D20                                         ; yyparse+629↓j ...
.text:0000000000006D20                 lea     rax, yydefact
.text:0000000000006D27                 movzx   ebp, byte ptr [rax+rbx]
.text:0000000000006D2B                 test    ebp, ebp
.text:0000000000006D2D                 jz      loc_7048
.text:0000000000006D33                 lea     rdx, yyr2
.text:0000000000006D3A                 movsxd  rax, ebp
.text:0000000000006D3D                 movzx   eax, byte ptr [rdx+rax]
.text:0000000000006D41                 mov     edx, 1
.text:0000000000006D46                 sub     edx, eax
.text:0000000000006D48                 mov     rbx, rax
.text:0000000000006D4B                 movsxd  rdx, edx
.text:0000000000006D4E                 lea     rax, ds:0[rdx*8]
.text:0000000000006D56                 sub     rax, rdx
.text:0000000000006D59                 shl     rax, 3
.text:0000000000006D5D
.text:0000000000006D5D loc_6D5D:                               ; CODE XREF: yyparse+947↓j
.text:0000000000006D5D                 add     rax, r13
.text:0000000000006D60                 mov     rdi, [rax+10h]
.text:0000000000006D64                 mov     rdx, [rax+30h]
.text:0000000000006D68                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000006D6C                 mov     r14, [rax]
.text:0000000000006D6F                 mov     r10, [rax+8]
.text:0000000000006D73                 mov     [rsp+5F8h+var_5E8], rdi
.text:0000000000006D78                 mov     rdi, [rax+18h]
.text:0000000000006D7C                 movaps  [rsp+5F8h+var_528], xmm0
.text:0000000000006D84                 mov     [rsp+5F8h+var_4F8], rdx
.text:0000000000006D8C                 mov     [rsp+5F8h+var_5F0], rdi
.text:0000000000006D91                 mov     rdi, [rax+20h]
.text:0000000000006D95                 movdqu  xmm0, xmmword ptr [rax+10h]
.text:0000000000006D9A                 mov     [rsp+5F8h+var_5D0], rdi
.text:0000000000006D9F                 mov     rdi, [rax+28h]
.text:0000000000006DA3                 movaps  [rsp+5F8h+var_518], xmm0
.text:0000000000006DAB                 movdqu  xmm0, xmmword ptr [rax+20h]
.text:0000000000006DB0                 mov     eax, [rax+30h]
.text:0000000000006DB3                 mov     [rsp+5F8h+var_5D8], rdi
.text:0000000000006DB8                 movaps  [rsp+5F8h+var_508], xmm0
.text:0000000000006DC0                 mov     dword ptr [rsp+5F8h+var_5E0], eax
.text:0000000000006DC4                 lea     eax, [rbp-4]    ; switch 88 cases
.text:0000000000006DC7                 cmp     eax, 57h
.text:0000000000006DCA                 ja      def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006DD0                 lea     rdx, jpt_6DDE
.text:0000000000006DD7                 movsxd  rax, ds:(jpt_6DDE - 13E00h)[rdx+rax*4]
.text:0000000000006DDB                 add     rax, rdx
.text:0000000000006DDE                 jmp     rax             ; switch jump
.text:0000000000006DE0 ; ---------------------------------------------------------------------------
.text:0000000000006DE0
.text:0000000000006DE0 loc_6DE0:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000006DE0                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000006DE0                 mov     dword ptr [r11+18h], 6270h ; jumptable 00000000000CF1BE case 33
.text:0000000000006DE8
.text:0000000000006DE8 loc_6DE8:                               ; CODE XREF: yyparse+12B8↓j
.text:0000000000006DE8                 mov     rax, [r13+0]
.text:0000000000006DEC                 xor     r8d, r8d
.text:0000000000006DEF                 mov     rdx, [r13+10h]
.text:0000000000006DF3                 mov     rcx, [r13+18h]
.text:0000000000006DF7                 mov     rsi, [r13+20h]
.text:0000000000006DFB                 mov     rdi, [r13+28h]
.text:0000000000006DFF                 mov     [rsp+5F8h+var_5B0], rax
.text:0000000000006E04                 mov     rax, [r13+8]
.text:0000000000006E08                 mov     [rsp+5F8h+var_5A8], rax
.text:0000000000006E0D                 mov     eax, [r13+30h]
.text:0000000000006E11                 add     eax, [r11+98h]
.text:0000000000006E18                 jo      loc_8755
.text:0000000000006E1E
.text:0000000000006E1E loc_6E1E:                               ; CODE XREF: yyparse+1ADB↓j
.text:0000000000006E1E                 mov     [r11+98h], eax
.text:0000000000006E25                 xor     eax, eax
.text:0000000000006E27                 add     rdi, [r11+90h]
.text:0000000000006E2E                 mov     [rsp+5F8h+var_5A0], r10
.text:0000000000006E33                 mov     dword ptr [rsp+5F8h+var_598], r9d
.text:0000000000006E38                 seto    al
.text:0000000000006E3B                 mov     [r11+90h], rdi
.text:0000000000006E42                 xor     edi, edi
.text:0000000000006E44                 add     rsi, [r11+88h]
.text:0000000000006E4B                 seto    dil
.text:0000000000006E4F                 mov     [r11+88h], rsi
.text:0000000000006E56                 xor     esi, esi
.text:0000000000006E58                 add     rcx, [r11+80h]
.text:0000000000006E5F                 seto    sil
.text:0000000000006E63                 xor     r10d, r10d
.text:0000000000006E66                 add     rdx, [r11+78h]
.text:0000000000006E6A                 mov     [r11+80h], rcx
.text:0000000000006E71                 seto    r10b
.text:0000000000006E75                 mov     [r11+78h], rdx
.text:0000000000006E79                 xor     r9d, r9d
.text:0000000000006E7C                 mov     rdx, [rsp+5F8h+var_5A8]
.text:0000000000006E81                 add     rdx, [r11+70h]
.text:0000000000006E85                 seto    r9b
.text:0000000000006E89                 mov     [r11+70h], rdx
.text:0000000000006E8D                 xor     ecx, ecx
.text:0000000000006E8F                 mov     rdx, [rsp+5F8h+var_5B0]
.text:0000000000006E94                 add     rdx, [r11+68h]
.text:0000000000006E98                 seto    cl
.text:0000000000006E9B                 or      eax, r8d
.text:0000000000006E9E                 mov     [r11+68h], rdx
.text:0000000000006EA2                 or      eax, edi
.text:0000000000006EA4                 mov     edi, r9d
.text:0000000000006EA7                 or      eax, esi
.text:0000000000006EA9                 or      eax, r10d
.text:0000000000006EAC                 or      dil, al
.text:0000000000006EAF                 jnz     loc_7258
.text:0000000000006EB5                 test    rcx, rcx
.text:0000000000006EB8                 jnz     loc_7258
.text:0000000000006EBE                 lea     rsi, aRelative  ; "relative"
.text:0000000000006EC5                 mov     byte ptr [r11+0A1h], 1
.text:0000000000006ECD                 xor     edi, edi        ; domainname
.text:0000000000006ECF                 mov     edx, 5          ; category
.text:0000000000006ED4                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000006ED9                 call    _dcgettext
.text:0000000000006EDE                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000006EE3                 mov     r10, [rsp+5F8h+var_5A0]
.text:0000000000006EE8                 mov     r9d, dword ptr [rsp+5F8h+var_598]
.text:0000000000006EED                 cmp     byte ptr [r11+0D9h], 0
.text:0000000000006EF5                 jz      short def_6DDE  ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006EF7                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:0000000000006EFC                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000006F01                 mov     rsi, r11
.text:0000000000006F04
.text:0000000000006F04 loc_6F04:                               ; CODE XREF: yyparse+14C1↓j
.text:0000000000006F04                 mov     rdi, rax
.text:0000000000006F07                 call    debug_print_relative_time_part_11
.text:0000000000006F0C                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000006F11                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000006F16                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000006F1B                 nop     dword ptr [rax+rax+00h]
.text:0000000000006F20
.text:0000000000006F20 def_6DDE:                               ; CODE XREF: yyparse+14A↑j
.text:0000000000006F20                                         ; yyparse+15E↑j ...
.text:0000000000006F20                 mov     rdi, [rsp+5F8h+var_5E8] ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006F25                 lea     rax, ds:0[rbx*8]
.text:0000000000006F2D                 mov     qword ptr [rsp+5F8h+var_528], r14
.text:0000000000006F35                 mov     qword ptr [rsp+5F8h+var_528+8], r10
.text:0000000000006F3D                 mov     rcx, r12
.text:0000000000006F40                 sub     rax, rbx
.text:0000000000006F43                 movdqa  xmm0, [rsp+5F8h+var_528]
.text:0000000000006F4C                 mov     qword ptr [rsp+5F8h+var_518], rdi
.text:0000000000006F54                 mov     rdi, [rsp+5F8h+var_5F0]
.text:0000000000006F59                 shl     rax, 3
.text:0000000000006F5D                 sub     r13, rax
.text:0000000000006F60                 add     rbx, rbx
.text:0000000000006F63                 mov     rax, r13
.text:0000000000006F66                 sub     rcx, rbx
.text:0000000000006F69                 lea     r13, [r13+38h]
.text:0000000000006F6D                 mov     qword ptr [rsp+5F8h+var_518+8], rdi
.text:0000000000006F75                 mov     rdi, [rsp+5F8h+var_5D0]
.text:0000000000006F7A                 movups  xmmword ptr [rax+38h], xmm0
.text:0000000000006F7E                 mov     qword ptr [rsp+5F8h+var_508], rdi
.text:0000000000006F86                 mov     rdi, [rsp+5F8h+var_5D8]
.text:0000000000006F8B                 movdqa  xmm0, [rsp+5F8h+var_518]
.text:0000000000006F94                 mov     qword ptr [rsp+5F8h+var_508+8], rdi
.text:0000000000006F9C                 mov     edi, dword ptr [rsp+5F8h+var_5E0]
.text:0000000000006FA0                 movups  xmmword ptr [rax+48h], xmm0
.text:0000000000006FA4                 mov     dword ptr [rsp+5F8h+var_4F8], edi
.text:0000000000006FAB                 mov     rdx, [rsp+5F8h+var_4F8]
.text:0000000000006FB3                 movdqa  xmm0, [rsp+5F8h+var_508]
.text:0000000000006FBC                 movsx   edi, word ptr [rcx]
.text:0000000000006FBF                 mov     [rax+68h], rdx
.text:0000000000006FC3                 lea     rdx, yypgoto
.text:0000000000006FCA                 movups  xmmword ptr [rax+58h], xmm0
.text:0000000000006FCE                 lea     rax, yyr1
.text:0000000000006FD5                 mov     esi, edi
.text:0000000000006FD7                 movzx   eax, byte ptr [rax+rbp]
.text:0000000000006FDB                 sub     eax, 1Ch
.text:0000000000006FDE                 cdqe
.text:0000000000006FE0                 movsx   edx, byte ptr [rdx+rax]
.text:0000000000006FE4                 add     edx, edi
.text:0000000000006FE6                 cmp     edx, 70h ; 'p'
.text:0000000000006FE9                 ja      short loc_7003
.text:0000000000006FEB                 lea     rdi, yycheck
.text:0000000000006FF2                 movsxd  rdx, edx
.text:0000000000006FF5                 movsx   di, byte ptr [rdi+rdx]
.text:0000000000006FFA                 cmp     si, di
.text:0000000000006FFD                 jz      loc_74B0
.text:0000000000007003
.text:0000000000007003 loc_7003:                               ; CODE XREF: yyparse+369↑j
.text:0000000000007003                 lea     rdx, yydefgoto
.text:000000000000700A                 movsx   rbx, byte ptr [rdx+rax]
.text:000000000000700F
.text:000000000000700F loc_700F:                               ; CODE XREF: yyparse+496↓j
.text:000000000000700F                                         ; yyparse+6C8↓j ...
.text:000000000000700F                 lea     r12, [rcx+2]
.text:0000000000007013                 lea     rax, [r15+26h]
.text:0000000000007017                 mov     [rcx+2], bx
.text:000000000000701B                 cmp     r12, rax
.text:000000000000701E                 jnb     loc_83E9
.text:0000000000007024                 cmp     ebx, 0Ch
.text:0000000000007027                 jz      loc_83F3
.text:000000000000702D                 lea     rdx, yypact
.text:0000000000007034                 movsxd  rax, ebx
.text:0000000000007037                 movzx   r14d, byte ptr [rdx+rax]
.text:000000000000703C                 jmp     loc_6CDA
.text:000000000000703C ; ---------------------------------------------------------------------------
.text:0000000000007041                 align 8
.text:0000000000007048
.text:0000000000007048 loc_7048:                               ; CODE XREF: yyparse+AD↑j
.text:0000000000007048                 cmp     [rsp+5F8h+var_5C4], 3
.text:000000000000704D                 jnz     short loc_705F
.text:000000000000704F                 cmp     r9d, 0
.text:0000000000007053                 jle     loc_74C0
.text:0000000000007059                 mov     r9d, 0FFFFFFFEh
.text:000000000000705F
.text:000000000000705F loc_705F:                               ; CODE XREF: yyparse+3CD↑j
.text:000000000000705F                                         ; yyparse:loc_74C0↓j
.text:000000000000705F                 lea     rdx, yypact
.text:0000000000007066                 lea     rcx, yycheck
.text:000000000000706D                 lea     rsi, yytable
.text:0000000000007074                 jmp     short loc_7096
.text:0000000000007074 ; ---------------------------------------------------------------------------
.text:0000000000007076                 align 20h
.text:0000000000007080
.text:0000000000007080 loc_7080:                               ; CODE XREF: yyparse+41D↓j
.text:0000000000007080                                         ; yyparse+425↓j ...
.text:0000000000007080                 cmp     r12, r15
.text:0000000000007083                 jz      loc_7258
.text:0000000000007089                 sub     r12, 2
.text:000000000000708D                 movsx   rbx, word ptr [r12]
.text:0000000000007092                 sub     r13, 38h ; '8'
.text:0000000000007096
.text:0000000000007096 loc_7096:                               ; CODE XREF: yyparse+3F4↑j
.text:0000000000007096                 movsx   eax, byte ptr [rdx+rbx]
.text:000000000000709A                 cmp     eax, 0FFFFFFA3h
.text:000000000000709D                 jz      short loc_7080
.text:000000000000709F                 add     eax, 1
.text:00000000000070A2                 cmp     eax, 70h ; 'p'
.text:00000000000070A5                 ja      short loc_7080
.text:00000000000070A7                 cdqe
.text:00000000000070A9                 cmp     byte ptr [rcx+rax], 1
.text:00000000000070AD                 jnz     short loc_7080
.text:00000000000070AF                 movzx   ebx, byte ptr [rsi+rax]
.text:00000000000070B3                 test    ebx, ebx
.text:00000000000070B5                 jz      short loc_7080
.text:00000000000070B7                 mov     rax, [rsp+5F8h+var_5C0]
.text:00000000000070BC                 add     r13, 38h ; '8'
.text:00000000000070C0                 mov     rcx, r12
.text:00000000000070C3                 mov     [rsp+5F8h+var_5C4], 3
.text:00000000000070CB                 mov     qword ptr [rsp+5F8h+var_568+8], rax
.text:00000000000070D3                 mov     rax, [rsp+5F8h+var_5B8]
.text:00000000000070D8                 movdqa  xmm0, [rsp+5F8h+var_568]
.text:00000000000070E1                 mov     qword ptr [rsp+5F8h+var_558], rax
.text:00000000000070E9                 mov     rax, [rsp+5F8h+var_538]
.text:00000000000070F1                 movups  xmmword ptr [r13+0], xmm0
.text:00000000000070F6                 movdqa  xmm0, [rsp+5F8h+var_558]
.text:00000000000070FF                 mov     [r13+30h], rax
.text:0000000000007103                 movups  xmmword ptr [r13+10h], xmm0
.text:0000000000007108                 movdqa  xmm0, [rsp+5F8h+var_548]
.text:0000000000007111                 movups  xmmword ptr [r13+20h], xmm0
.text:0000000000007116                 jmp     loc_700F
.text:000000000000711B ; ---------------------------------------------------------------------------
.text:000000000000711B
.text:000000000000711B loc_711B:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000711B                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:000000000000711B                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 51
.text:000000000000711F                 mov     rsi, [r13-18h]
.text:0000000000007123                 mov     rdi, [r13-10h]
.text:0000000000007127                 mov     r8d, [r13-8]
.text:000000000000712B                 mov     ecx, [r11+98h]
.text:0000000000007132                 mov     rdx, [r11+90h]
.text:0000000000007139                 mov     [rsp+5F8h+var_5B0], rax
.text:000000000000713E                 mov     rax, [r13-30h]
.text:0000000000007142                 mov     [rsp+5F8h+var_5A8], rax
.text:0000000000007147                 mov     rax, [r13-28h]
.text:000000000000714B                 mov     [rsp+5F8h+var_5A0], rax
.text:0000000000007150                 mov     rax, [r13-20h]
.text:0000000000007154                 mov     [rsp+5F8h+var_598], rax
.text:0000000000007159                 mov     rax, [r11+88h]
.text:0000000000007160                 mov     [rsp+5F8h+var_588], rax
.text:0000000000007165                 mov     rax, [r11+80h]
.text:000000000000716C                 mov     [rsp+5F8h+var_578], rax
.text:0000000000007174                 mov     rax, [r11+78h]
.text:0000000000007178                 mov     [rsp+5F8h+var_570], rax
.text:0000000000007180                 mov     rax, [r11+70h]
.text:0000000000007184                 mov     [rsp+5F8h+var_590], rax
.text:0000000000007189                 mov     rax, [r11+68h]
.text:000000000000718D                 mov     [rsp+5F8h+var_580], rax
.text:0000000000007192                 mov     eax, [r13+0]
.text:0000000000007196                 test    eax, eax
.text:0000000000007198                 js      loc_8492
.text:000000000000719E                 mov     rax, [rsp+5F8h+var_588]
.text:00000000000071A3                 add     ecx, r8d
.text:00000000000071A6                 seto    r8b
.text:00000000000071AA                 mov     [r11+98h], ecx
.text:00000000000071B1                 xor     ecx, ecx
.text:00000000000071B3                 add     rdx, rdi
.text:00000000000071B6                 movzx   r8d, r8b
.text:00000000000071BA                 seto    cl
.text:00000000000071BD                 xor     edi, edi
.text:00000000000071BF                 add     rax, rsi
.text:00000000000071C2                 seto    dil
.text:00000000000071C6                 mov     [r11+88h], rax
.text:00000000000071CD                 xor     esi, esi
.text:00000000000071CF                 mov     rax, [rsp+5F8h+var_578]
.text:00000000000071D7                 add     rax, [rsp+5F8h+var_598]
.text:00000000000071DC                 mov     [rsp+5F8h+var_588], rdi
.text:00000000000071E1                 mov     [r11+90h], rdx
.text:00000000000071E8                 seto    sil
.text:00000000000071EC                 mov     [r11+80h], rax
.text:00000000000071F3                 xor     edi, edi
.text:00000000000071F5                 mov     rax, [rsp+5F8h+var_570]
.text:00000000000071FD                 add     rax, [rsp+5F8h+var_5A0]
.text:0000000000007202                 seto    dil
.text:0000000000007206                 mov     [r11+78h], rax
.text:000000000000720A                 xor     edx, edx
.text:000000000000720C                 mov     rax, [rsp+5F8h+var_590]
.text:0000000000007211                 add     rax, [rsp+5F8h+var_5A8]
.text:0000000000007216                 seto    dl
.text:0000000000007219                 mov     [r11+70h], rax
.text:000000000000721D                 mov     rax, [rsp+5F8h+var_580]
.text:0000000000007222                 add     rax, [rsp+5F8h+var_5B0]
.text:0000000000007227                 mov     [rsp+5F8h+var_5A8], rdx
.text:000000000000722C
.text:000000000000722C loc_722C:                               ; CODE XREF: yyparse+18A0↓j
.text:000000000000722C                 mov     [r11+68h], rax
.text:0000000000007230                 mov     eax, ecx
.text:0000000000007232                 seto    dl
.text:0000000000007235                 or      eax, r8d
.text:0000000000007238                 or      al, byte ptr [rsp+5F8h+var_588]
.text:000000000000723C                 movzx   edx, dl
.text:000000000000723F                 or      eax, esi
.text:0000000000007241                 or      eax, edi
.text:0000000000007243                 or      al, byte ptr [rsp+5F8h+var_5A8]
.text:0000000000007247                 or      eax, edx
.text:0000000000007249                 test    al, al
.text:000000000000724B                 jz      loc_777E
.text:0000000000007251                 nop     dword ptr [rax+00000000h]
.text:0000000000007258
.text:0000000000007258 loc_7258:                               ; CODE XREF: yyparse+22F↑j
.text:0000000000007258                                         ; yyparse+238↑j ...
.text:0000000000007258                 mov     eax, 1
.text:000000000000725D
.text:000000000000725D loc_725D:                               ; CODE XREF: yyparse+176E↓j
.text:000000000000725D                                         ; yyparse+1775↓j
.text:000000000000725D                 mov     rdi, [rsp+5F8h+var_40]
.text:0000000000007265                 xor     rdi, fs:28h
.text:000000000000726E                 jnz     loc_8760
.text:0000000000007274                 add     rsp, 5C8h
.text:000000000000727B                 pop     rbx
.text:000000000000727C                 pop     rbp
.text:000000000000727D                 pop     r12
.text:000000000000727F                 pop     r13
.text:0000000000007281                 pop     r14
.text:0000000000007283                 pop     r15
.text:0000000000007285                 retn
.text:0000000000007286 ; ---------------------------------------------------------------------------
.text:0000000000007286
.text:0000000000007286 loc_7286:                               ; CODE XREF: yyparse+7E5↓j
.text:0000000000007286                 lea     rax, [rdi+1]
.text:000000000000728A                 mov     [r11], rax
.text:000000000000728D                 movzx   r9d, byte ptr [rdi]
.text:0000000000007291                 test    r9d, r9d
.text:0000000000007294                 jg      loc_7350
.text:000000000000729A                 nop     word ptr [rax+rax+00h]
.text:00000000000072A0
.text:00000000000072A0 loc_72A0:                               ; CODE XREF: yyparse+71↑j
.text:00000000000072A0                                         ; yyparse+81C↓j
.text:00000000000072A0                 xor     eax, eax
.text:00000000000072A2                 xor     r9d, r9d
.text:00000000000072A5
.text:00000000000072A5 loc_72A5:                               ; CODE XREF: yyparse+6E1↓j
.text:00000000000072A5                 cmp     r8d, 70h ; 'p'
.text:00000000000072A9                 ja      loc_6D20
.text:00000000000072AF
.text:00000000000072AF loc_72AF:                               ; CODE XREF: yyparse+91↑j
.text:00000000000072AF                 lea     rdx, yycheck
.text:00000000000072B6                 movsxd  r8, r8d
.text:00000000000072B9                 movsx   edx, byte ptr [rdx+r8]
.text:00000000000072BE                 cmp     edx, eax
.text:00000000000072C0                 jnz     loc_6D20
.text:00000000000072C6                 lea     rax, yytable
.text:00000000000072CD                 movzx   ebp, byte ptr [rax+r8]
.text:00000000000072D2                 test    ebp, ebp
.text:00000000000072D4                 jz      loc_75C0
.text:00000000000072DA                 mov     eax, [rsp+5F8h+var_5C4]
.text:00000000000072DE                 mov     rcx, r12
.text:00000000000072E1                 movsxd  rbx, ebp
.text:00000000000072E4                 mov     r9d, 0FFFFFFFEh
.text:00000000000072EA                 cmp     eax, 1
.text:00000000000072ED                 adc     eax, 0FFFFFFFFh
.text:00000000000072F0                 add     r13, 38h ; '8'
.text:00000000000072F4                 mov     [rsp+5F8h+var_5C4], eax
.text:00000000000072F8                 mov     rax, [rsp+5F8h+var_5C0]
.text:00000000000072FD                 mov     qword ptr [rsp+5F8h+var_568+8], rax
.text:0000000000007305                 mov     rax, [rsp+5F8h+var_5B8]
.text:000000000000730A                 movdqa  xmm0, [rsp+5F8h+var_568]
.text:0000000000007313                 mov     qword ptr [rsp+5F8h+var_558], rax
.text:000000000000731B                 mov     rax, [rsp+5F8h+var_538]
.text:0000000000007323                 movups  xmmword ptr [r13+0], xmm0
.text:0000000000007328                 movdqa  xmm0, [rsp+5F8h+var_558]
.text:0000000000007331                 mov     [r13+30h], rax
.text:0000000000007335                 movups  xmmword ptr [r13+10h], xmm0
.text:000000000000733A                 movdqa  xmm0, [rsp+5F8h+var_548]
.text:0000000000007343                 movups  xmmword ptr [r13+20h], xmm0
.text:0000000000007348                 jmp     loc_700F
.text:0000000000007348 ; ---------------------------------------------------------------------------
.text:000000000000734D                 align 10h
.text:0000000000007350
.text:0000000000007350 loc_7350:                               ; CODE XREF: yyparse+7E↑j
.text:0000000000007350                                         ; yyparse+614↑j
.text:0000000000007350                 lea     rdx, yytranslate
.text:0000000000007357                 movsxd  rax, r9d
.text:000000000000735A                 movzx   eax, byte ptr [rdx+rax]
.text:000000000000735E
.text:000000000000735E loc_735E:                               ; CODE XREF: yyparse+1642↓j
.text:000000000000735E                                         ; yyparse+1704↓j ...
.text:000000000000735E                 add     r8d, eax
.text:0000000000007361                 jmp     loc_72A5
.text:0000000000007361 ; ---------------------------------------------------------------------------
.text:0000000000007366                 db 66h, 2Eh, 0Fh, 1Fh, 84h, 3 dup(0)
.text:000000000000736E                 db    0                 ; DATA XREF: .rodata:off_11821↓o
.text:000000000000736F                 db    0
.text:0000000000007370 ; ---------------------------------------------------------------------------
.text:0000000000007370
.text:0000000000007370 loc_7370:                               ; CODE XREF: yyparse+68↑j
.text:0000000000007370                 mov     rdi, [r11]
.text:0000000000007373                 mov     edx, 1
.text:0000000000007378                 mov     r10, 3FFFFFF03FFFFFFh
.text:0000000000007382                 movzx   ecx, byte ptr [rdi]
.text:0000000000007385
.text:0000000000007385 loc_7385:                               ; CODE XREF: yyparse+7BC↓j
.text:0000000000007385                                         ; yyparse+95C↓j ...
.text:0000000000007385                 cmp     cl, 20h ; ' '
.text:0000000000007388                 mov     esi, ecx
.text:000000000000738A                 movzx   r9d, cl
.text:000000000000738E                 ja      short loc_73DF
.text:0000000000007390                 mov     rax, rdx
.text:0000000000007393                 shl     rax, cl
.text:0000000000007396                 mov     rcx, 100003E00h
.text:00000000000073A0                 test    rax, rcx
.text:00000000000073A3                 jz      loc_744A
.text:00000000000073A9                 lea     rax, [rdi+1]
.text:00000000000073AD                 jmp     short loc_73C9
.text:00000000000073AD ; ---------------------------------------------------------------------------
.text:00000000000073AF                 align 10h
.text:00000000000073B0
.text:00000000000073B0 loc_73B0:                               ; CODE XREF: yyparse+75D↓j
.text:00000000000073B0                 mov     rsi, rdx
.text:00000000000073B3                 mov     r14, 100003E00h
.text:00000000000073BD                 add     rax, 1
.text:00000000000073C1                 shl     rsi, cl
.text:00000000000073C4                 test    rsi, r14
.text:00000000000073C7                 jz      short loc_7448
.text:00000000000073C9
.text:00000000000073C9 loc_73C9:                               ; CODE XREF: yyparse+72D↑j
.text:00000000000073C9                 mov     [r11], rax
.text:00000000000073CC                 movzx   r9d, byte ptr [rax]
.text:00000000000073D0                 mov     rdi, rax
.text:00000000000073D3                 cmp     r9b, 20h ; ' '
.text:00000000000073D7                 mov     ecx, r9d
.text:00000000000073DA                 mov     esi, r9d
.text:00000000000073DD                 jbe     short loc_73B0
.text:00000000000073DF
.text:00000000000073DF loc_73DF:                               ; CODE XREF: yyparse+70E↑j
.text:00000000000073DF                 lea     eax, [rsi-2Bh]
.text:00000000000073E2                 sub     ecx, 30h ; '0'
.text:00000000000073E5                 and     eax, 0FFFFFFFDh
.text:00000000000073E8                 cmp     cl, 9
.text:00000000000073EB                 ja      short loc_7450
.text:00000000000073ED                 cmp     sil, 2Dh ; '-'
.text:00000000000073F1                 setz    cl
.text:00000000000073F4                 test    al, al
.text:00000000000073F6                 jnz     loc_83FA
.text:00000000000073FC
.text:00000000000073FC loc_73FC:                               ; CODE XREF: yyparse+953↓j
.text:00000000000073FC                 cmp     cl, 1
.text:00000000000073FF                 mov     rax, [r11]
.text:0000000000007402                 sbb     r9d, r9d
.text:0000000000007405                 and     r9d, 2
.text:0000000000007409                 sub     r9d, 1
.text:000000000000740D                 add     rax, 1
.text:0000000000007411
.text:0000000000007411 loc_7411:                               ; CODE XREF: yyparse+7C2↓j
.text:0000000000007411                 mov     [r11], rax
.text:0000000000007414                 movzx   ecx, byte ptr [rax]
.text:0000000000007417                 mov     rdi, rax
.text:000000000000741A                 cmp     cl, 20h ; ' '
.text:000000000000741D                 mov     esi, ecx
.text:000000000000741F                 ja      loc_825C
.text:0000000000007425                 mov     rsi, rdx
.text:0000000000007428                 mov     r14, 100003E00h
.text:0000000000007432                 add     rax, 1
.text:0000000000007436                 shl     rsi, cl
.text:0000000000007439                 test    rsi, r14
.text:000000000000743C                 jz      loc_7385
.text:0000000000007442                 jmp     short loc_7411
.text:0000000000007442 ; ---------------------------------------------------------------------------
.text:0000000000007444                 align 8
.text:0000000000007448
.text:0000000000007448 loc_7448:                               ; CODE XREF: yyparse+747↑j
.text:0000000000007448                 mov     esi, ecx
.text:000000000000744A
.text:000000000000744A loc_744A:                               ; CODE XREF: yyparse+723↑j
.text:000000000000744A                 lea     eax, [rsi-2Bh]
.text:000000000000744D                 and     eax, 0FFFFFFFDh
.text:0000000000007450
.text:0000000000007450 loc_7450:                               ; CODE XREF: yyparse+76B↑j
.text:0000000000007450                 test    al, al
.text:0000000000007452                 jz      loc_75CC
.text:0000000000007458                 lea     ecx, [r9-41h]
.text:000000000000745C                 cmp     ecx, 39h ; '9'
.text:000000000000745F                 jbe     short loc_74D0
.text:0000000000007461
.text:0000000000007461 loc_7461:                               ; CODE XREF: yyparse+859↓j
.text:0000000000007461                 cmp     sil, 28h ; '('
.text:0000000000007465                 jnz     loc_7286
.text:000000000000746B                 mov     rsi, [r11]
.text:000000000000746E                 xor     ecx, ecx
.text:0000000000007470                 jmp     short loc_748F
.text:0000000000007470 ; ---------------------------------------------------------------------------
.text:0000000000007472                 align 8
.text:0000000000007478
.text:0000000000007478 loc_7478:                               ; CODE XREF: yyparse+824↓j
.text:0000000000007478                 cmp     al, 29h ; ')'
.text:000000000000747A                 setz    al
.text:000000000000747D                 movzx   eax, al
.text:0000000000007480                 sub     rcx, rax
.text:0000000000007483
.text:0000000000007483 loc_7483:                               ; CODE XREF: yyparse+82A↓j
.text:0000000000007483                 test    rcx, rcx
.text:0000000000007486                 jz      loc_75D8
.text:000000000000748C                 mov     rsi, rdi
.text:000000000000748F
.text:000000000000748F loc_748F:                               ; CODE XREF: yyparse+7F0↑j
.text:000000000000748F                 lea     rdi, [rsi+1]
.text:0000000000007493                 mov     [r11], rdi
.text:0000000000007496                 movzx   eax, byte ptr [rdi-1]
.text:000000000000749A                 test    al, al
.text:000000000000749C                 jz      loc_72A0
.text:00000000000074A2                 cmp     al, 28h ; '('
.text:00000000000074A4                 jnz     short loc_7478
.text:00000000000074A6                 add     rcx, 1
.text:00000000000074AA                 jmp     short loc_7483
.text:00000000000074AA ; ---------------------------------------------------------------------------
.text:00000000000074AC                 align 10h
.text:00000000000074B0
.text:00000000000074B0 loc_74B0:                               ; CODE XREF: yyparse+37D↑j
.text:00000000000074B0                 lea     rax, yytable
.text:00000000000074B7                 movzx   ebx, byte ptr [rax+rdx]
.text:00000000000074BB                 jmp     loc_700F
.text:00000000000074C0 ; ---------------------------------------------------------------------------
.text:00000000000074C0
.text:00000000000074C0 loc_74C0:                               ; CODE XREF: yyparse+3D3↑j
.text:00000000000074C0                 jnz     loc_705F
.text:00000000000074C6                 jmp     loc_7258
.text:00000000000074C6 ; ---------------------------------------------------------------------------
.text:00000000000074CB                 align 10h
.text:00000000000074D0
.text:00000000000074D0 loc_74D0:                               ; CODE XREF: yyparse+7DF↑j
.text:00000000000074D0                 mov     rax, rdx
.text:00000000000074D3                 shl     rax, cl
.text:00000000000074D6                 test    rax, r10
.text:00000000000074D9                 jz      short loc_7461
.text:00000000000074DB                 mov     rax, [r11]
.text:00000000000074DE                 lea     r14, [rsp+5F8h+s1]
.text:00000000000074E6                 mov     r10d, 1
.text:00000000000074EC                 mov     r9, 3FFFFFF03FFFFFFh
.text:00000000000074F6                 mov     rdx, r14
.text:00000000000074F9                 lea     rdi, [r14+13h]
.text:00000000000074FD                 add     rax, 1
.text:0000000000007501                 jmp     short loc_7507
.text:0000000000007503 ; ---------------------------------------------------------------------------
.text:0000000000007503
.text:0000000000007503 loc_7503:                               ; CODE XREF: yyparse+8AC↓j
.text:0000000000007503                                         ; yyparse+8B2↓j
.text:0000000000007503                 add     rax, 1
.text:0000000000007507
.text:0000000000007507 loc_7507:                               ; CODE XREF: yyparse+881↑j
.text:0000000000007507                 cmp     rdx, rdi
.text:000000000000750A                 jnb     short loc_7513
.text:000000000000750C                 mov     [rdx], sil
.text:000000000000750F                 add     rdx, 1
.text:0000000000007513
.text:0000000000007513 loc_7513:                               ; CODE XREF: yyparse+88A↑j
.text:0000000000007513                 mov     [r11], rax
.text:0000000000007516                 movzx   ecx, byte ptr [rax]
.text:0000000000007519                 mov     esi, ecx
.text:000000000000751B                 sub     ecx, 41h ; 'A'
.text:000000000000751E                 cmp     ecx, 39h ; '9'
.text:0000000000007521                 ja      short loc_752E
.text:0000000000007523                 mov     rbp, r10
.text:0000000000007526                 shl     rbp, cl
.text:0000000000007529                 test    rbp, r9
.text:000000000000752C                 jnz     short loc_7503
.text:000000000000752E
.text:000000000000752E loc_752E:                               ; CODE XREF: yyparse+8A1↑j
.text:000000000000752E                 cmp     sil, 2Eh ; '.'
.text:0000000000007532                 jz      short loc_7503
.text:0000000000007534                 mov     byte ptr [rdx], 0
.text:0000000000007537                 movzx   eax, [rsp+5F8h+s1]
.text:000000000000753F                 test    al, al
.text:0000000000007541                 jz      short loc_7562
.text:0000000000007543                 mov     rdx, r14
.text:0000000000007546
.text:0000000000007546 loc_7546:                               ; CODE XREF: yyparse+8E0↓j
.text:0000000000007546                 movzx   ecx, al
.text:0000000000007549                 sub     eax, 61h ; 'a'
.text:000000000000754C                 lea     esi, [rcx-20h]
.text:000000000000754F                 cmp     al, 1Ah
.text:0000000000007551                 cmovb   ecx, esi
.text:0000000000007554                 add     rdx, 1
.text:0000000000007558                 mov     [rdx-1], cl
.text:000000000000755B                 movzx   eax, byte ptr [rdx]
.text:000000000000755E                 test    al, al
.text:0000000000007560                 jnz     short loc_7546
.text:0000000000007562
.text:0000000000007562 loc_7562:                               ; CODE XREF: yyparse+8C1↑j
.text:0000000000007562                 lea     rcx, meridian_table
.text:0000000000007569                 lea     rsi, aAm        ; "AM"
.text:0000000000007570                 mov     rbp, rcx
.text:0000000000007573                 jmp     short loc_7586
.text:0000000000007575 ; ---------------------------------------------------------------------------
.text:0000000000007575
.text:0000000000007575 loc_7575:                               ; CODE XREF: yyparse+924↓j
.text:0000000000007575                 add     rbp, 10h
.text:0000000000007579                 mov     rsi, [rbp+0]    ; s2
.text:000000000000757D                 test    rsi, rsi
.text:0000000000007580                 jz      loc_8525
.text:0000000000007586
.text:0000000000007586 loc_7586:                               ; CODE XREF: yyparse+8F3↑j
.text:0000000000007586                 mov     rdi, r14        ; s1
.text:0000000000007589                 mov     [rsp+5F8h+var_5E8], r11
.text:000000000000758E                 mov     dword ptr [rsp+5F8h+var_5F0], r8d
.text:0000000000007593                 call    _strcmp
.text:0000000000007598                 test    eax, eax
.text:000000000000759A                 mov     r8d, dword ptr [rsp+5F8h+var_5F0]
.text:000000000000759F                 mov     r11, [rsp+5F8h+var_5E8]
.text:00000000000075A4                 jnz     short loc_7575
.text:00000000000075A6                 mov     rcx, rbp
.text:00000000000075A9
.text:00000000000075A9 loc_75A9:                               ; CODE XREF: yyparse+198D↓j
.text:00000000000075A9                                         ; yyparse+19F4↓j ...
.text:00000000000075A9                 movsxd  rax, dword ptr [rcx+0Ch]
.text:00000000000075AD                 mov     r9d, [rcx+8]
.text:00000000000075B1                 mov     qword ptr [rsp+5F8h+var_568], rax
.text:00000000000075B9                 jmp     loc_6CEE
.text:00000000000075B9 ; ---------------------------------------------------------------------------
.text:00000000000075BE                 align 20h
.text:00000000000075C0
.text:00000000000075C0 loc_75C0:                               ; CODE XREF: yyparse+654↑j
.text:00000000000075C0                 mov     eax, 38h ; '8'
.text:00000000000075C5                 xor     ebx, ebx
.text:00000000000075C7                 jmp     loc_6D5D
.text:00000000000075CC ; ---------------------------------------------------------------------------
.text:00000000000075CC
.text:00000000000075CC loc_75CC:                               ; CODE XREF: yyparse+7D2↑j
.text:00000000000075CC                 cmp     sil, 2Dh ; '-'
.text:00000000000075D0                 setz    cl
.text:00000000000075D3                 jmp     loc_73FC
.text:00000000000075D8 ; ---------------------------------------------------------------------------
.text:00000000000075D8
.text:00000000000075D8 loc_75D8:                               ; CODE XREF: yyparse+806↑j
.text:00000000000075D8                 movzx   ecx, byte ptr [rsi+1]
.text:00000000000075DC                 jmp     loc_7385
.text:00000000000075E1 ; ---------------------------------------------------------------------------
.text:00000000000075E1
.text:00000000000075E1 loc_75E1:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000075E1                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:00000000000075E1                 mov     r10, [r13-30h]  ; jumptable 00000000000CF1BE cases 58,76
.text:00000000000075E5                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:00000000000075F0
.text:00000000000075F0 loc_75F0:                               ; CODE XREF: yyparse+1000↓j
.text:00000000000075F0                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:00000000000075F8                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000007601                 xor     r14d, r14d
.text:0000000000007604                 mov     [rsp+5F8h+var_5D0], 0
.text:000000000000760D                 mov     [rsp+5F8h+var_5F0], 0
.text:0000000000007616                 mov     [rsp+5F8h+var_5E8], 0
.text:000000000000761F                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007624 ; ---------------------------------------------------------------------------
.text:0000000000007624
.text:0000000000007624 loc_7624:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007624                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007624                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE cases 67,79
.text:0000000000007628                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:0000000000007633
.text:0000000000007633 loc_7633:                               ; CODE XREF: yyparse+EBE↓j
.text:0000000000007633                 mov     [rsp+5F8h+var_5D0], rax
.text:0000000000007638                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000007640                 xor     r10d, r10d
.text:0000000000007643                 mov     [rsp+5F8h+var_5D8], 0
.text:000000000000764C                 mov     [rsp+5F8h+var_5F0], 0
.text:0000000000007655                 xor     r14d, r14d
.text:0000000000007658                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000007661                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007666 ; ---------------------------------------------------------------------------
.text:0000000000007666
.text:0000000000007666 loc_7666:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007666                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007666                 mov     r14, [r13-30h]  ; jumptable 00000000000CF1BE cases 55,75
.text:000000000000766A                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:0000000000007675
.text:0000000000007675 loc_7675:                               ; CODE XREF: yyparse+11AF↓j
.text:0000000000007675                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:000000000000767D                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000007686                 xor     r10d, r10d
.text:0000000000007689                 mov     [rsp+5F8h+var_5D0], 0
.text:0000000000007692                 mov     [rsp+5F8h+var_5F0], 0
.text:000000000000769B                 mov     [rsp+5F8h+var_5E8], 0
.text:00000000000076A4                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000076A9 ; ---------------------------------------------------------------------------
.text:00000000000076A9
.text:00000000000076A9 loc_76A9:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000076A9                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:00000000000076A9                 mov     rax, [r13+0]    ; jumptable 00000000000CF1BE cases 52,53
.text:00000000000076AD                 xor     r8d, r8d
.text:00000000000076B0                 mov     rdx, [r13+10h]
.text:00000000000076B4                 mov     rcx, [r13+18h]
.text:00000000000076B8                 mov     rsi, [r13+20h]
.text:00000000000076BC                 mov     rdi, [r13+28h]
.text:00000000000076C0                 mov     [rsp+5F8h+var_5B0], rax
.text:00000000000076C5                 mov     rax, [r13+8]
.text:00000000000076C9                 mov     [rsp+5F8h+var_5A8], rax
.text:00000000000076CE                 mov     eax, [r13+30h]
.text:00000000000076D2                 add     eax, [r11+98h]
.text:00000000000076D9                 jo      loc_7C14
.text:00000000000076DF
.text:00000000000076DF loc_76DF:                               ; CODE XREF: yyparse+F8E↓j
.text:00000000000076DF                                         ; yyparse+F9A↓j
.text:00000000000076DF                 mov     [r11+98h], eax
.text:00000000000076E6                 xor     eax, eax
.text:00000000000076E8                 add     rdi, [r11+90h]
.text:00000000000076EF                 seto    al
.text:00000000000076F2                 mov     [r11+90h], rdi
.text:00000000000076F9                 xor     edi, edi
.text:00000000000076FB                 add     rsi, [r11+88h]
.text:0000000000007702                 seto    dil
.text:0000000000007706                 mov     [r11+88h], rsi
.text:000000000000770D                 xor     esi, esi
.text:000000000000770F                 add     rcx, [r11+80h]
.text:0000000000007716                 seto    sil
.text:000000000000771A                 mov     [r11+80h], rcx
.text:0000000000007721                 xor     ecx, ecx
.text:0000000000007723                 add     rdx, [r11+78h]
.text:0000000000007727                 seto    cl
.text:000000000000772A                 mov     [r11+78h], rdx
.text:000000000000772E                 mov     rdx, [rsp+5F8h+var_5A8]
.text:0000000000007733                 mov     [rsp+5F8h+var_5A0], rcx
.text:0000000000007738                 xor     ecx, ecx
.text:000000000000773A                 add     rdx, [r11+70h]
.text:000000000000773E                 seto    cl
.text:0000000000007741                 mov     [r11+70h], rdx
.text:0000000000007745                 mov     rdx, [rsp+5F8h+var_5B0]
.text:000000000000774A                 mov     [rsp+5F8h+var_5A8], rcx
.text:000000000000774F                 xor     ecx, ecx
.text:0000000000007751                 add     rdx, [r11+68h]
.text:0000000000007755                 seto    cl
.text:0000000000007758                 or      eax, r8d
.text:000000000000775B                 mov     [r11+68h], rdx
.text:000000000000775F                 or      eax, edi
.text:0000000000007761                 movzx   edi, byte ptr [rsp+5F8h+var_5A8]
.text:0000000000007766                 or      eax, esi
.text:0000000000007768                 or      al, byte ptr [rsp+5F8h+var_5A0]
.text:000000000000776C                 or      dil, al
.text:000000000000776F                 jnz     loc_7258
.text:0000000000007775                 test    rcx, rcx
.text:0000000000007778                 jnz     loc_7258
.text:000000000000777E
.text:000000000000777E loc_777E:                               ; CODE XREF: yyparse+5CB↑j
.text:000000000000777E                 mov     byte ptr [r11+0A1h], 1
.text:0000000000007786                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:000000000000778B ; ---------------------------------------------------------------------------
.text:000000000000778B
.text:000000000000778B loc_778B:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000778B                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:000000000000778B                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE cases 64,78
.text:000000000000778F                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:000000000000779A
.text:000000000000779A loc_779A:                               ; CODE XREF: yyparse+F1F↓j
.text:000000000000779A                 mov     [rsp+5F8h+var_5F0], rax
.text:000000000000779F                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:00000000000077A7                 xor     r10d, r10d
.text:00000000000077AA                 mov     [rsp+5F8h+var_5D8], 0
.text:00000000000077B3                 mov     [rsp+5F8h+var_5D0], 0
.text:00000000000077BC                 xor     r14d, r14d
.text:00000000000077BF                 mov     [rsp+5F8h+var_5E8], 0
.text:00000000000077C8                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000077CD ; ---------------------------------------------------------------------------
.text:00000000000077CD
.text:00000000000077CD loc_77CD:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000077CD                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:00000000000077CD                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE cases 71,72
.text:00000000000077D1                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:00000000000077DC                 mov     [rsp+5F8h+var_5D8], rax
.text:00000000000077E1                 mov     eax, [r13-30h]
.text:00000000000077E5                 mov     dword ptr [rsp+5F8h+var_5E0], eax
.text:00000000000077E9
.text:00000000000077E9 loc_77E9:                               ; CODE XREF: yyparse+BAB↓j
.text:00000000000077E9                                         ; yyparse+D04↓j
.text:00000000000077E9                 mov     [rsp+5F8h+var_5D0], 0
.text:00000000000077F2                 mov     [rsp+5F8h+var_5F0], 0
.text:00000000000077FB                 xor     r10d, r10d
.text:00000000000077FE                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000007807                 xor     r14d, r14d
.text:000000000000780A                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:000000000000780F ; ---------------------------------------------------------------------------
.text:000000000000780F
.text:000000000000780F loc_780F:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000780F                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:000000000000780F                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE cases 70,80
.text:0000000000007813                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:000000000000781E
.text:000000000000781E loc_781E:                               ; CODE XREF: yyparse+E68↓j
.text:000000000000781E                 mov     [rsp+5F8h+var_5D8], rax
.text:0000000000007823                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:000000000000782B                 jmp     short loc_77E9
.text:000000000000782D ; ---------------------------------------------------------------------------
.text:000000000000782D
.text:000000000000782D loc_782D:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000782D                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:000000000000782D                 mov     r14, [r13+8]    ; jumptable 00000000000CF1BE cases 85,87
.text:0000000000007831                 xor     r10d, r10d
.text:0000000000007834                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007839 ; ---------------------------------------------------------------------------
.text:0000000000007839
.text:0000000000007839 loc_7839:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007839                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007839                 xor     edx, edx        ; jumptable 00000000000CF1BE cases 61,77
.text:000000000000783B                 mov     rax, [r13-30h]
.text:000000000000783F                 mov     [rsp+5F8h+var_4F8], 0
.text:000000000000784B                 imul    rax, [r13+0]
.text:0000000000007850                 pxor    xmm0, xmm0
.text:0000000000007854                 movaps  [rsp+5F8h+var_528], xmm0
.text:000000000000785C                 movaps  [rsp+5F8h+var_518], xmm0
.text:0000000000007864                 movaps  [rsp+5F8h+var_508], xmm0
.text:000000000000786C                 jo      loc_7B7C
.text:0000000000007872
.text:0000000000007872 loc_7872:                               ; CODE XREF: yyparse+EF6↓j
.text:0000000000007872                                         ; yyparse+F01↓j
.text:0000000000007872                 test    rdx, rdx
.text:0000000000007875                 mov     [rsp+5F8h+var_5E8], rax
.text:000000000000787A                 jnz     loc_7258
.text:0000000000007880
.text:0000000000007880 loc_7880:                               ; CODE XREF: yyparse+C42↓j
.text:0000000000007880                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000007888                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000007891                 xor     r10d, r10d
.text:0000000000007894                 mov     [rsp+5F8h+var_5D0], 0
.text:000000000000789D                 mov     [rsp+5F8h+var_5F0], 0
.text:00000000000078A6                 xor     r14d, r14d
.text:00000000000078A9                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000078AE ; ---------------------------------------------------------------------------
.text:00000000000078AE
.text:00000000000078AE loc_78AE:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000078AE                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:00000000000078AE                 mov     rax, [r13+0]    ; jumptable 00000000000CF1BE cases 62,81
.text:00000000000078B2                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:00000000000078BD                 mov     [rsp+5F8h+var_5E8], rax
.text:00000000000078C2                 jmp     short loc_7880
.text:00000000000078C4 ; ---------------------------------------------------------------------------
.text:00000000000078C4
.text:00000000000078C4 loc_78C4:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000078C4                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:00000000000078C4                 mov     rcx, [r13-0D0h] ; jumptable 00000000000CF1BE case 42
.text:00000000000078CB                 movzx   eax, byte ptr [r11+0D9h]
.text:00000000000078D3                 cmp     rcx, 3
.text:00000000000078D7                 jle     loc_8438
.text:00000000000078DD                 test    al, al
.text:00000000000078DF                 jz      short loc_793A
.text:00000000000078E1                 mov     rax, [r13-0D8h]
.text:00000000000078E8                 lea     rsi, aWarningValueLd ; "warning: value %ld has %ld digits. Assu"...
.text:00000000000078EF                 mov     edx, 5          ; category
.text:00000000000078F4                 xor     edi, edi        ; domainname
.text:00000000000078F6                 mov     [rsp+5F8h+var_590], r11
.text:00000000000078FB                 mov     dword ptr [rsp+5F8h+var_598], r9d
.text:0000000000007900                 mov     [rsp+5F8h+var_5A0], r10
.text:0000000000007905                 mov     [rsp+5F8h+var_5A8], rcx
.text:000000000000790A                 mov     [rsp+5F8h+var_5B0], rax
.text:000000000000790F                 call    _dcgettext
.text:0000000000007914                 mov     rcx, [rsp+5F8h+var_5A8]
.text:0000000000007919                 mov     rsi, [rsp+5F8h+var_5B0]
.text:000000000000791E                 mov     rdi, rax
.text:0000000000007921                 xor     eax, eax
.text:0000000000007923                 mov     rdx, rcx
.text:0000000000007926                 call    dbg_printf
.text:000000000000792B                 mov     r11, [rsp+5F8h+var_590]
.text:0000000000007930                 mov     r9d, dword ptr [rsp+5F8h+var_598]
.text:0000000000007935                 mov     r10, [rsp+5F8h+var_5A0]
.text:000000000000793A
.text:000000000000793A loc_793A:                               ; CODE XREF: yyparse+C5F↑j
.text:000000000000793A                 movdqu  xmm0, xmmword ptr [r13-0E0h]
.text:0000000000007943                 mov     rax, [r13-0D0h]
.text:000000000000794A                 movups  xmmword ptr [r11+20h], xmm0
.text:000000000000794F                 mov     [r11+30h], rax
.text:0000000000007953
.text:0000000000007953 loc_7953:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007953                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007953                 mov     rax, [r13-68h]  ; jumptable 00000000000CF1BE case 41
.text:0000000000007957                 mov     [r11+38h], rax
.text:000000000000795B                 mov     rax, [r13+8]
.text:000000000000795F                 mov     [r11+40h], rax
.text:0000000000007963                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007968 ; ---------------------------------------------------------------------------
.text:0000000000007968
.text:0000000000007968 loc_7968:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007968                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007968                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 73
.text:0000000000007973                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:000000000000797B                 mov     [rsp+5F8h+var_5D8], 1
.text:0000000000007984                 jmp     loc_77E9
.text:0000000000007989 ; ---------------------------------------------------------------------------
.text:0000000000007989
.text:0000000000007989 loc_7989:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007989                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007989                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 65
.text:0000000000007994                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:000000000000799C                 xor     r10d, r10d
.text:000000000000799F                 mov     [rsp+5F8h+var_5D8], 0
.text:00000000000079A8                 mov     [rsp+5F8h+var_5D0], 0
.text:00000000000079B1                 xor     r14d, r14d
.text:00000000000079B4                 mov     [rsp+5F8h+var_5F0], 1
.text:00000000000079BD                 mov     [rsp+5F8h+var_5E8], 0
.text:00000000000079C6                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000079CB ; ---------------------------------------------------------------------------
.text:00000000000079CB
.text:00000000000079CB loc_79CB:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000079CB                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:00000000000079CB                 movdqu  xmm0, xmmword ptr [r13+0] ; jumptable 00000000000CF1BE case 4
.text:00000000000079D1                 lea     rsi, aNumberOf  ; "number of "
.text:00000000000079D8                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:00000000000079DD                 mov     [rsp+5F8h+var_5A8], r10
.text:00000000000079E2                 mov     edx, 5          ; category
.text:00000000000079E7                 movups  xmmword ptr [r11+58h], xmm0
.text:00000000000079EC                 mov     byte ptr [r11+0A0h], 1
.text:00000000000079F4                 mov     [rsp+5F8h+var_5B0], r11
.text:00000000000079F9
.text:00000000000079F9 loc_79F9:                               ; CODE XREF: yyparse+DDF↓j
.text:00000000000079F9                                         ; yyparse+E0C↓j ...
.text:00000000000079F9                 xor     edi, edi        ; domainname
.text:00000000000079FB                 call    _dcgettext
.text:0000000000007A00                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000007A05                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000007A0A                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000007A0F                 cmp     byte ptr [r11+0D9h], 0
.text:0000000000007A17                 mov     rsi, r11
.text:0000000000007A1A                 jz      def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007A20
.text:0000000000007A20 loc_7A20:                               ; CODE XREF: yyparse+1517↓j
.text:0000000000007A20                 mov     rdi, rax
.text:0000000000007A23                 call    debug_print_current_time_part_10
.text:0000000000007A28                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000007A2D                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000007A32                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000007A37                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007A3C ; ---------------------------------------------------------------------------
.text:0000000000007A3C
.text:0000000000007A3C loc_7A3C:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007A3C                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007A3C                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 8
.text:0000000000007A41                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000007A46                 mov     edx, 5
.text:0000000000007A4B                 add     qword ptr [r11+0C8h], 1
.text:0000000000007A53                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000007A58                 lea     rsi, aTime      ; "time"
.text:0000000000007A5F                 jmp     short loc_79F9
.text:0000000000007A61 ; ---------------------------------------------------------------------------
.text:0000000000007A61
.text:0000000000007A61 loc_7A61:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007A61                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007A61                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 7
.text:0000000000007A66                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000007A6B                 mov     edx, 5
.text:0000000000007A70                 add     qword ptr [r11+0C8h], 1
.text:0000000000007A78                 add     qword ptr [r11+0A8h], 1
.text:0000000000007A80                 lea     rsi, unk_1314B
.text:0000000000007A87                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000007A8C                 jmp     loc_79F9
.text:0000000000007A91 ; ---------------------------------------------------------------------------
.text:0000000000007A91
.text:0000000000007A91 loc_7A91:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007A91                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007A91                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 88
.text:0000000000007A96                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000007A9B                 sub     rsp, 8
.text:0000000000007A9F                 push    qword ptr [r13+10h]
.text:0000000000007AA3                 push    qword ptr [r13+8]
.text:0000000000007AA7                 mov     rdi, r11
.text:0000000000007AAA                 push    qword ptr [r13+0]
.text:0000000000007AAE                 mov     [rsp+618h+var_5B0], r11
.text:0000000000007AB3                 call    digits_to_date_time
.text:0000000000007AB8                 add     rsp, 20h
.text:0000000000007ABC                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000007AC1                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000007AC6                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000007ACB                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007AD0 ; ---------------------------------------------------------------------------
.text:0000000000007AD0
.text:0000000000007AD0 loc_7AD0:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007AD0                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007AD0                 mov     r14, [r13+8]    ; jumptable 00000000000CF1BE case 91
.text:0000000000007AD4                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007AD9 ; ---------------------------------------------------------------------------
.text:0000000000007AD9
.text:0000000000007AD9 loc_7AD9:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007AD9                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007AD9                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 69
.text:0000000000007AE4                 mov     rax, [r13-38h]
.text:0000000000007AE8                 jmp     loc_781E
.text:0000000000007AED ; ---------------------------------------------------------------------------
.text:0000000000007AED
.text:0000000000007AED loc_7AED:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007AED                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007AED                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 68
.text:0000000000007AF8                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000007B00                 xor     r10d, r10d
.text:0000000000007B03                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000007B0C                 mov     [rsp+5F8h+var_5D0], 1
.text:0000000000007B15                 xor     r14d, r14d
.text:0000000000007B18                 mov     [rsp+5F8h+var_5F0], 0
.text:0000000000007B21                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000007B2A                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007B2F ; ---------------------------------------------------------------------------
.text:0000000000007B2F
.text:0000000000007B2F loc_7B2F:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007B2F                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007B2F                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 66
.text:0000000000007B3A                 mov     rax, [r13-38h]
.text:0000000000007B3E                 jmp     loc_7633
.text:0000000000007B43 ; ---------------------------------------------------------------------------
.text:0000000000007B43
.text:0000000000007B43 loc_7B43:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007B43                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007B43                 xor     edx, edx        ; jumptable 00000000000CF1BE case 60
.text:0000000000007B45                 mov     rax, [r13-38h]
.text:0000000000007B49                 mov     [rsp+5F8h+var_4F8], 0
.text:0000000000007B55                 imul    rax, [r13+0]
.text:0000000000007B5A                 pxor    xmm0, xmm0
.text:0000000000007B5E                 movaps  [rsp+5F8h+var_528], xmm0
.text:0000000000007B66                 movaps  [rsp+5F8h+var_518], xmm0
.text:0000000000007B6E                 movaps  [rsp+5F8h+var_508], xmm0
.text:0000000000007B76                 jno     loc_7872
.text:0000000000007B7C
.text:0000000000007B7C loc_7B7C:                               ; CODE XREF: yyparse+BEC↑j
.text:0000000000007B7C                 mov     edx, 1
.text:0000000000007B81                 jmp     loc_7872
.text:0000000000007B81 ; ---------------------------------------------------------------------------
.text:0000000000007B86                 align 10h
.text:0000000000007B90
.text:0000000000007B90 loc_7B90:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007B90                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007B90                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 63
.text:0000000000007B9B                 mov     rax, [r13-38h]
.text:0000000000007B9F                 jmp     loc_779A
.text:0000000000007BA4 ; ---------------------------------------------------------------------------
.text:0000000000007BA4
.text:0000000000007BA4 loc_7BA4:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007BA4                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007BA4                 mov     dword ptr [rsp+5F8h+var_590], r9d ; jumptable 00000000000CF1BE case 89
.text:0000000000007BA9                 mov     [rsp+5F8h+var_598], r10
.text:0000000000007BAE                 sub     rsp, 8
.text:0000000000007BB2                 push    qword ptr [r13-28h]
.text:0000000000007BB6                 push    qword ptr [r13-30h]
.text:0000000000007BBA                 mov     rdi, r11
.text:0000000000007BBD                 push    qword ptr [r13-38h]
.text:0000000000007BC1                 mov     [rsp+618h+var_5A0], r11
.text:0000000000007BC6                 call    digits_to_date_time
.text:0000000000007BCB                 mov     rax, [r13+0]
.text:0000000000007BCF                 xor     r8d, r8d
.text:0000000000007BD2                 mov     rdx, [r13+10h]
.text:0000000000007BD6                 mov     rcx, [r13+18h]
.text:0000000000007BDA                 mov     rsi, [r13+20h]
.text:0000000000007BDE                 mov     rdi, [r13+28h]
.text:0000000000007BE2                 mov     [rsp+618h+var_5B0], rax
.text:0000000000007BE7                 mov     rax, [r13+8]
.text:0000000000007BEB                 mov     [rsp+618h+var_5A8], rax
.text:0000000000007BF0                 add     rsp, 20h
.text:0000000000007BF4                 mov     r11, [rsp+5F8h+var_5A0]
.text:0000000000007BF9                 mov     eax, [r13+30h]
.text:0000000000007BFD                 mov     r10, [rsp+5F8h+var_598]
.text:0000000000007C02                 mov     r9d, dword ptr [rsp+5F8h+var_590]
.text:0000000000007C07                 add     eax, [r11+98h]
.text:0000000000007C0E                 jno     loc_76DF
.text:0000000000007C14
.text:0000000000007C14 loc_7C14:                               ; CODE XREF: yyparse+A59↑j
.text:0000000000007C14                 mov     r8d, 1
.text:0000000000007C1A                 jmp     loc_76DF
.text:0000000000007C1A ; ---------------------------------------------------------------------------
.text:0000000000007C1F                 align 20h
.text:0000000000007C20
.text:0000000000007C20 loc_7C20:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007C20                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007C20                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 59
.text:0000000000007C2B                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000007C33                 mov     r10d, 1
.text:0000000000007C39                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000007C42                 mov     [rsp+5F8h+var_5D0], 0
.text:0000000000007C4B                 xor     r14d, r14d
.text:0000000000007C4E                 mov     [rsp+5F8h+var_5F0], 0
.text:0000000000007C57                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000007C60                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007C65 ; ---------------------------------------------------------------------------
.text:0000000000007C65
.text:0000000000007C65 loc_7C65:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007C65                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007C65                 mov     r14, 0FFFFFFFFFFFFFFFFh ; jumptable 00000000000CF1BE case 90
.text:0000000000007C6C                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007C71 ; ---------------------------------------------------------------------------
.text:0000000000007C71
.text:0000000000007C71 loc_7C71:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007C71                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007C71                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 57
.text:0000000000007C7C                 mov     r10, [r13-38h]
.text:0000000000007C80                 jmp     loc_75F0
.text:0000000000007C85 ; ---------------------------------------------------------------------------
.text:0000000000007C85
.text:0000000000007C85 loc_7C85:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007C85                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007C85                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 56
.text:0000000000007C90                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000007C98                 xor     r10d, r10d
.text:0000000000007C9B                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000007CA4                 mov     [rsp+5F8h+var_5D0], 0
.text:0000000000007CAD                 mov     r14d, 1
.text:0000000000007CB3                 mov     [rsp+5F8h+var_5F0], 0
.text:0000000000007CBC                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000007CC5                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007CCA ; ---------------------------------------------------------------------------
.text:0000000000007CCA
.text:0000000000007CCA loc_7CCA:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007CCA                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007CCA                 mov     rax, [r13-60h]  ; jumptable 00000000000CF1BE case 50
.text:0000000000007CCE                 mov     rdx, 8000000000000000h
.text:0000000000007CD8                 movdqu  xmm0, xmmword ptr [r13-70h]
.text:0000000000007CDE                 mov     [r11+30h], rax
.text:0000000000007CE2                 mov     rax, [r13-30h]
.text:0000000000007CE6                 movups  xmmword ptr [r11+20h], xmm0
.text:0000000000007CEB                 mov     rcx, rax
.text:0000000000007CEE                 neg     rcx
.text:0000000000007CF1                 cmp     rax, rdx
.text:0000000000007CF4                 mov     [r11+38h], rcx
.text:0000000000007CF8                 jz      loc_7258
.text:0000000000007CFE                 mov     rax, [r13+8]
.text:0000000000007D02                 mov     rcx, rax
.text:0000000000007D05                 neg     rcx
.text:0000000000007D08                 cmp     rax, rdx
.text:0000000000007D0B                 mov     [r11+40h], rcx
.text:0000000000007D0F                 jnz     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007D15                 jmp     loc_7258
.text:0000000000007D15 ; ---------------------------------------------------------------------------
.text:0000000000007D1A                 align 20h
.text:0000000000007D20
.text:0000000000007D20 loc_7D20:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007D20                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007D20                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 47
.text:0000000000007D24                 mov     [r11+40h], rax
.text:0000000000007D28                 mov     rax, [r13+0]
.text:0000000000007D2C                 mov     [r11+38h], rax
.text:0000000000007D30                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007D35 ; ---------------------------------------------------------------------------
.text:0000000000007D35
.text:0000000000007D35 loc_7D35:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007D35                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007D35                 mov     rax, [r13-0A8h] ; jumptable 00000000000CF1BE case 46
.text:0000000000007D3C
.text:0000000000007D3C loc_7D3C:                               ; CODE XREF: yyparse+180D↓j
.text:0000000000007D3C                 movdqu  xmm0, xmmword ptr [r13+0]
.text:0000000000007D42                 mov     [r11+38h], rax
.text:0000000000007D46                 mov     rax, [r13-68h]
.text:0000000000007D4A                 movups  xmmword ptr [r11+20h], xmm0
.text:0000000000007D4F                 mov     [r11+40h], rax
.text:0000000000007D53
.text:0000000000007D53 loc_7D53:                               ; CODE XREF: yyparse+1157↓j
.text:0000000000007D53                                         ; yyparse+1193↓j
.text:0000000000007D53                 mov     rax, [r13+10h]
.text:0000000000007D57                 mov     [r11+30h], rax
.text:0000000000007D5B                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007D60 ; ---------------------------------------------------------------------------
.text:0000000000007D60
.text:0000000000007D60 loc_7D60:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007D60                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007D60                 mov     rax, [r13-68h]  ; jumptable 00000000000CF1BE case 48
.text:0000000000007D64                 movdqu  xmm0, xmmword ptr [r13+0]
.text:0000000000007D6A                 mov     [r11+40h], rax
.text:0000000000007D6E                 mov     rax, [r13-38h]
.text:0000000000007D72                 movups  xmmword ptr [r11+20h], xmm0
.text:0000000000007D77                 mov     [r11+38h], rax
.text:0000000000007D7B                 mov     rax, [r13+10h]
.text:0000000000007D7F                 mov     [r11+30h], rax
.text:0000000000007D83                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007D88 ; ---------------------------------------------------------------------------
.text:0000000000007D88
.text:0000000000007D88 loc_7D88:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007D88                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007D88                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 45
.text:0000000000007D8C                 mov     [r11+38h], rax
.text:0000000000007D90                 mov     rax, [r13+8]
.text:0000000000007D94                 mov     [r11+40h], rax
.text:0000000000007D98                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007D9D ; ---------------------------------------------------------------------------
.text:0000000000007D9D
.text:0000000000007D9D loc_7D9D:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007D9D                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007D9D                 mov     rax, [r13-70h]  ; jumptable 00000000000CF1BE case 44
.text:0000000000007DA1                 mov     rdx, 8000000000000000h
.text:0000000000007DAB                 mov     [r11+38h], rax
.text:0000000000007DAF                 mov     rax, [r13-30h]
.text:0000000000007DB3                 mov     rcx, rax
.text:0000000000007DB6                 neg     rcx
.text:0000000000007DB9                 cmp     rax, rdx
.text:0000000000007DBC                 mov     [r11+40h], rcx
.text:0000000000007DC0                 jz      loc_7258
.text:0000000000007DC6                 mov     rax, [r13+8]
.text:0000000000007DCA                 mov     rcx, rax
.text:0000000000007DCD                 neg     rcx
.text:0000000000007DD0                 cmp     rax, rdx
.text:0000000000007DD3                 mov     [r11+28h], rcx
.text:0000000000007DD7                 jnz     loc_7D53
.text:0000000000007DDD                 jmp     loc_7258
.text:0000000000007DDD ; ---------------------------------------------------------------------------
.text:0000000000007DE2                 align 8
.text:0000000000007DE8
.text:0000000000007DE8 loc_7DE8:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007DE8                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007DE8                 mov     rax, [r13-68h]  ; jumptable 00000000000CF1BE case 43
.text:0000000000007DEC                 mov     [r11+40h], rax
.text:0000000000007DF0                 mov     rax, [r13-38h]
.text:0000000000007DF4                 mov     [r11+38h], rax
.text:0000000000007DF8                 mov     rax, [r13+8]
.text:0000000000007DFC                 mov     rdx, rax
.text:0000000000007DFF                 neg     rdx
.text:0000000000007E02                 mov     [r11+28h], rdx
.text:0000000000007E06                 mov     rdx, 8000000000000000h
.text:0000000000007E10                 cmp     rax, rdx
.text:0000000000007E13                 jnz     loc_7D53
.text:0000000000007E19                 jmp     loc_7258
.text:0000000000007E19 ; ---------------------------------------------------------------------------
.text:0000000000007E1E                 align 20h
.text:0000000000007E20
.text:0000000000007E20 loc_7E20:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007E20                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007E20                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 54
.text:0000000000007E2B                 mov     r14, [r13-38h]
.text:0000000000007E2F                 jmp     loc_7675
.text:0000000000007E34 ; ---------------------------------------------------------------------------
.text:0000000000007E34
.text:0000000000007E34 loc_7E34:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007E34                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007E34                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 40
.text:0000000000007E38                 mov     byte ptr [r11+0E0h], 1
.text:0000000000007E40                 mov     [r11+8], rax
.text:0000000000007E44                 mov     rax, [r13+0]
.text:0000000000007E48                 mov     [r11+10h], eax
.text:0000000000007E4C                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007E51 ; ---------------------------------------------------------------------------
.text:0000000000007E51
.text:0000000000007E51 loc_7E51:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007E51                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007E51                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 39
.text:0000000000007E55                 mov     byte ptr [r11+0E0h], 1
.text:0000000000007E5D                 mov     [r11+8], rax
.text:0000000000007E61                 mov     rax, [r13+0]
.text:0000000000007E65                 mov     [r11+10h], eax
.text:0000000000007E69                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007E6E ; ---------------------------------------------------------------------------
.text:0000000000007E6E
.text:0000000000007E6E loc_7E6E:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007E6E                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007E6E                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 38
.text:0000000000007E72                 mov     qword ptr [r11+8], 0
.text:0000000000007E7A                 mov     [r11+10h], eax
.text:0000000000007E7E                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007E83 ; ---------------------------------------------------------------------------
.text:0000000000007E83
.text:0000000000007E83 loc_7E83:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007E83                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007E83                 mov     rax, [r13+0]    ; jumptable 00000000000CF1BE case 37
.text:0000000000007E87                 mov     qword ptr [r11+8], 0
.text:0000000000007E8F                 mov     [r11+10h], eax
.text:0000000000007E93                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007E98 ; ---------------------------------------------------------------------------
.text:0000000000007E98
.text:0000000000007E98 loc_7E98:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007E98                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007E98                 mov     eax, [r13-38h]  ; jumptable 00000000000CF1BE case 36
.text:0000000000007E9C                 add     eax, 0E10h
.text:0000000000007EA1                 mov     [r11+18h], eax
.text:0000000000007EA5                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007EAA ; ---------------------------------------------------------------------------
.text:0000000000007EAA
.text:0000000000007EAA loc_7EAA:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007EAA                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007EAA                 mov     eax, [r13+0]    ; jumptable 00000000000CF1BE case 35
.text:0000000000007EAE                 add     eax, 0E10h
.text:0000000000007EB3                 mov     [r11+18h], eax
.text:0000000000007EB7                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007EBC ; ---------------------------------------------------------------------------
.text:0000000000007EBC
.text:0000000000007EBC loc_7EBC:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007EBC                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007EBC                 movzx   esi, byte ptr [r13-38h] ; jumptable 00000000000CF1BE case 34
.text:0000000000007EC1                 mov     rcx, [r13-28h]
.text:0000000000007EC5                 lea     rdi, [r11+18h]
.text:0000000000007EC9                 mov     rdx, [r13-30h]
.text:0000000000007ECD                 mov     r8, [r13+0]
.text:0000000000007ED1                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:0000000000007ED6                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000007EDB                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000007EE0                 call    time_zone_hhmm_isra_4
.text:0000000000007EE5                 test    al, al
.text:0000000000007EE7                 jz      loc_7258
.text:0000000000007EED                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000007EF2                 xor     edx, edx
.text:0000000000007EF4                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000007EF9                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000007EFE                 movsxd  rax, dword ptr [r11+18h]
.text:0000000000007F02                 add     rax, [r13-70h]
.text:0000000000007F06                 movsxd  rcx, eax
.text:0000000000007F09                 seto    dl
.text:0000000000007F0C                 mov     [r11+18h], eax
.text:0000000000007F10                 cmp     rax, rcx
.text:0000000000007F13                 mov     ecx, 1
.text:0000000000007F18                 cmovnz  edx, ecx
.text:0000000000007F1B                 test    edx, edx
.text:0000000000007F1D                 jz      def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007F23                 jmp     loc_7258
.text:0000000000007F23 ; ---------------------------------------------------------------------------
.text:0000000000007F28                 align 10h
.text:0000000000007F30
.text:0000000000007F30 loc_7F30:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007F30                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007F30                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 32
.text:0000000000007F34                 mov     [r11+18h], eax
.text:0000000000007F38                 jmp     loc_6DE8
.text:0000000000007F3D ; ---------------------------------------------------------------------------
.text:0000000000007F3D
.text:0000000000007F3D loc_7F3D:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007F3D                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007F3D                 mov     dword ptr [r11+18h], 6270h ; jumptable 00000000000CF1BE case 31
.text:0000000000007F45                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007F4A ; ---------------------------------------------------------------------------
.text:0000000000007F4A
.text:0000000000007F4A loc_7F4A:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007F4A                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007F4A                 mov     rax, [r13+0]    ; jumptable 00000000000CF1BE case 30
.text:0000000000007F4E                 mov     [r11+18h], eax
.text:0000000000007F52                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007F57 ; ---------------------------------------------------------------------------
.text:0000000000007F57
.text:0000000000007F57 loc_7F57:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007F57                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007F57                 mov     dword ptr [r11+14h], 1 ; jumptable 00000000000CF1BE case 29
.text:0000000000007F5F                 add     qword ptr [r11+0C0h], 1
.text:0000000000007F67                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007F6C ; ---------------------------------------------------------------------------
.text:0000000000007F6C
.text:0000000000007F6C loc_7F6C:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007F6C                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007F6C                 mov     rax, [r13+0]    ; jumptable 00000000000CF1BE case 28
.text:0000000000007F70                 mov     [r11+14h], eax
.text:0000000000007F74                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007F79 ; ---------------------------------------------------------------------------
.text:0000000000007F79
.text:0000000000007F79 loc_7F79:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007F79                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007F79                 add     qword ptr [r11+0D0h], 1 ; jumptable 00000000000CF1BE case 27
.text:0000000000007F81                 movzx   esi, byte ptr [r13-38h]
.text:0000000000007F86                 lea     rdi, [r11+18h]
.text:0000000000007F8A                 mov     rcx, [r13-28h]
.text:0000000000007F8E                 mov     rdx, [r13-30h]
.text:0000000000007F92                 mov     r8, [r13+0]
.text:0000000000007F96                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:0000000000007F9B                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000007FA0                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000007FA5                 call    time_zone_hhmm_isra_4
.text:0000000000007FAA                 test    al, al
.text:0000000000007FAC                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000007FB1                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000007FB6                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000007FBB                 jnz     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000007FC1                 jmp     loc_7258
.text:0000000000007FC1 ; ---------------------------------------------------------------------------
.text:0000000000007FC6                 align 10h
.text:0000000000007FD0
.text:0000000000007FD0 loc_7FD0:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000007FD0                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000007FD0                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 24
.text:0000000000007FD4                 mov     rdx, [r13-0A0h]
.text:0000000000007FDB                 mov     rcx, [r13-110h]
.text:0000000000007FE2                 mov     dword ptr [r11+1Ch], 2
.text:0000000000007FEA                 mov     [r11+58h], rax
.text:0000000000007FEE                 movsxd  rax, dword ptr [r13-30h]
.text:0000000000007FF2                 mov     [r11+48h], rcx
.text:0000000000007FF6                 mov     [r11+50h], rdx
.text:0000000000007FFA                 mov     [r11+60h], rax
.text:0000000000007FFE                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000008003 ; ---------------------------------------------------------------------------
.text:0000000000008003
.text:0000000000008003 loc_8003:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000008003                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000008003                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 23
.text:0000000000008007                 mov     rdx, [r13-0A0h]
.text:000000000000800E                 mov     qword ptr [r11+58h], 0
.text:0000000000008016                 mov     qword ptr [r11+60h], 0
.text:000000000000801E                 mov     dword ptr [r11+1Ch], 2
.text:0000000000008026                 mov     [r11+48h], rdx
.text:000000000000802A                 mov     [r11+50h], rax
.text:000000000000802E                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000008033 ; ---------------------------------------------------------------------------
.text:0000000000008033
.text:0000000000008033 loc_8033:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000008033                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000008033                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 22
.text:0000000000008037                 mov     qword ptr [r11+50h], 0
.text:000000000000803F                 mov     qword ptr [r11+58h], 0
.text:0000000000008047                 mov     qword ptr [r11+60h], 0
.text:000000000000804F                 mov     dword ptr [r11+1Ch], 2
.text:0000000000008057                 mov     [r11+48h], rax
.text:000000000000805B                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000008060 ; ---------------------------------------------------------------------------
.text:0000000000008060
.text:0000000000008060 loc_8060:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000008060                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000008060                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 20
.text:0000000000008064                 mov     rdx, [r13-0A0h]
.text:000000000000806B                 mov     rcx, [r13-110h]
.text:0000000000008072                 mov     [r11+58h], rax
.text:0000000000008076                 movsxd  rax, dword ptr [r13-30h]
.text:000000000000807A                 mov     [r11+48h], rcx
.text:000000000000807E                 mov     [r11+50h], rdx
.text:0000000000008082                 mov     [r11+60h], rax
.text:0000000000008086                 mov     rax, [r13+0]
.text:000000000000808A                 mov     [r11+1Ch], eax
.text:000000000000808E                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000008093 ; ---------------------------------------------------------------------------
.text:0000000000008093
.text:0000000000008093 loc_8093:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000008093                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000008093                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 19
.text:0000000000008097                 mov     rdx, [r13-0A0h]
.text:000000000000809E                 mov     qword ptr [r11+58h], 0
.text:00000000000080A6                 mov     qword ptr [r11+60h], 0
.text:00000000000080AE                 mov     [r11+50h], rax
.text:00000000000080B2                 mov     rax, [r13+0]
.text:00000000000080B6                 mov     [r11+48h], rdx
.text:00000000000080BA                 mov     [r11+1Ch], eax
.text:00000000000080BE                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000080C3 ; ---------------------------------------------------------------------------
.text:00000000000080C3
.text:00000000000080C3 loc_80C3:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000080C3                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:00000000000080C3                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 18
.text:00000000000080C7                 mov     qword ptr [r11+50h], 0
.text:00000000000080CF                 mov     qword ptr [r11+58h], 0
.text:00000000000080D7                 mov     qword ptr [r11+60h], 0
.text:00000000000080DF                 mov     [r11+48h], rax
.text:00000000000080E3                 mov     rax, [r13+0]
.text:00000000000080E7                 mov     [r11+1Ch], eax
.text:00000000000080EB                 jmp     def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000080F0 ; ---------------------------------------------------------------------------
.text:00000000000080F0
.text:00000000000080F0 loc_80F0:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000080F0                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:00000000000080F0                 lea     rsi, aHybrid    ; jumptable 00000000000CF1BE case 15
.text:00000000000080F7                 mov     [rsp+5F8h+var_5A0], r11
.text:00000000000080FC                 mov     dword ptr [rsp+5F8h+var_5A8], r9d
.text:0000000000008101                 mov     [rsp+5F8h+var_5B0], r10
.text:0000000000008106                 mov     edx, 5          ; category
.text:000000000000810B
.text:000000000000810B loc_810B:                               ; CODE XREF: yyparse+1537↓j
.text:000000000000810B                 xor     edi, edi        ; domainname
.text:000000000000810D                 call    _dcgettext
.text:0000000000008112                 mov     r11, [rsp+5F8h+var_5A0]
.text:0000000000008117                 mov     r10, [rsp+5F8h+var_5B0]
.text:000000000000811C                 mov     r9d, dword ptr [rsp+5F8h+var_5A8]
.text:0000000000008121                 cmp     byte ptr [r11+0D9h], 0
.text:0000000000008129                 jz      def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:000000000000812F                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:0000000000008134                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000008139                 mov     rsi, r11
.text:000000000000813C                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000008141                 jmp     loc_6F04
.text:0000000000008146 ; ---------------------------------------------------------------------------
.text:0000000000008146
.text:0000000000008146 loc_8146:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000008146                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000008146                 lea     rsi, aNumber    ; jumptable 00000000000CF1BE case 14
.text:000000000000814D                 xor     edi, edi        ; domainname
.text:000000000000814F                 mov     edx, 5          ; category
.text:0000000000008154                 mov     [rsp+5F8h+var_5A0], r11
.text:0000000000008159                 mov     dword ptr [rsp+5F8h+var_5A8], r9d
.text:000000000000815E                 mov     [rsp+5F8h+var_5B0], r10
.text:0000000000008163                 call    _dcgettext
.text:0000000000008168                 mov     r11, [rsp+5F8h+var_5A0]
.text:000000000000816D                 mov     r10, [rsp+5F8h+var_5B0]
.text:0000000000008172                 mov     r9d, dword ptr [rsp+5F8h+var_5A8]
.text:0000000000008177                 cmp     byte ptr [r11+0D9h], 0
.text:000000000000817F                 jz      def_6DDE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000008185                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:000000000000818A                 mov     [rsp+5F8h+var_5A8], r10
.text:000000000000818F                 mov     rsi, r11
.text:0000000000008192                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000008197                 jmp     loc_7A20
.text:000000000000819C ; ---------------------------------------------------------------------------
.text:000000000000819C
.text:000000000000819C loc_819C:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000819C                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:000000000000819C                 mov     [rsp+5F8h+var_5A0], r11 ; jumptable 00000000000CF1BE case 13
.text:00000000000081A1                 mov     dword ptr [rsp+5F8h+var_5A8], r9d
.text:00000000000081A6                 mov     edx, 5
.text:00000000000081AB                 mov     [rsp+5F8h+var_5B0], r10
.text:00000000000081B0                 lea     rsi, aRelative  ; "relative"
.text:00000000000081B7                 jmp     loc_810B
.text:00000000000081BC ; ---------------------------------------------------------------------------
.text:00000000000081BC
.text:00000000000081BC loc_81BC:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000081BC                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:00000000000081BC                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 12
.text:00000000000081C1                 mov     [rsp+5F8h+var_5A8], r10
.text:00000000000081C6                 mov     edx, 5
.text:00000000000081CB                 add     qword ptr [r11+0B0h], 1
.text:00000000000081D3                 mov     [rsp+5F8h+var_5B0], r11
.text:00000000000081D8                 lea     rsi, aDay       ; "day"
.text:00000000000081DF                 jmp     loc_79F9
.text:00000000000081E4 ; ---------------------------------------------------------------------------
.text:00000000000081E4
.text:00000000000081E4 loc_81E4:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000081E4                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:00000000000081E4                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 11
.text:00000000000081E9                 mov     [rsp+5F8h+var_5A8], r10
.text:00000000000081EE                 mov     edx, 5
.text:00000000000081F3                 add     qword ptr [r11+0A8h], 1
.text:00000000000081FB                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000008200                 lea     rsi, aDate      ; "date"
.text:0000000000008207                 jmp     loc_79F9
.text:000000000000820C ; ---------------------------------------------------------------------------
.text:000000000000820C
.text:000000000000820C loc_820C:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000820C                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:000000000000820C                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 10
.text:0000000000008211                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000008216                 mov     edx, 5
.text:000000000000821B                 add     qword ptr [r11+0D0h], 1
.text:0000000000008223                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000008228                 lea     rsi, aZone      ; "zone"
.text:000000000000822F                 jmp     loc_79F9
.text:0000000000008234 ; ---------------------------------------------------------------------------
.text:0000000000008234
.text:0000000000008234 loc_8234:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000008234                                         ; DATA XREF: .rodata:jpt_6DDE↓o
.text:0000000000008234                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 9
.text:0000000000008239                 mov     [rsp+5F8h+var_5A8], r10
.text:000000000000823E                 mov     edx, 5
.text:0000000000008243                 add     qword ptr [r11+0B8h], 1
.text:000000000000824B                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000008250                 lea     rsi, unk_13154
.text:0000000000008257                 jmp     loc_79F9
.text:000000000000825C ; ---------------------------------------------------------------------------
.text:000000000000825C
.text:000000000000825C loc_825C:                               ; CODE XREF: yyparse+79F↑j
.text:000000000000825C                 lea     eax, [rcx-30h]
.text:000000000000825F                 cmp     al, 9
.text:0000000000008261                 ja      loc_7385
.text:0000000000008267
.text:0000000000008267 loc_8267:                               ; CODE XREF: yyparse+1780↓j
.text:0000000000008267                 xor     eax, eax
.text:0000000000008269                 mov     rcx, rdi
.text:000000000000826C                 mov     r14d, 30h ; '0'
.text:0000000000008272                 mov     r10, rax
.text:0000000000008275                 jmp     short loc_8293
.text:0000000000008275 ; ---------------------------------------------------------------------------
.text:0000000000008277                 align 20h
.text:0000000000008280
.text:0000000000008280 loc_8280:                               ; CODE XREF: yyparse+1635↓j
.text:0000000000008280                 movzx   esi, byte ptr [rcx+1]
.text:0000000000008284                 lea     rbp, [rcx+1]
.text:0000000000008288                 lea     edx, [rsi-30h]
.text:000000000000828B                 cmp     dl, 9
.text:000000000000828E                 ja      short loc_82C7
.text:0000000000008290                 mov     rcx, rbp
.text:0000000000008293
.text:0000000000008293 loc_8293:                               ; CODE XREF: yyparse+15F5↑j
.text:0000000000008293                 imul    r10, 0Ah
.text:0000000000008297                 jo      short loc_82B7
.text:0000000000008299                 movzx   edx, sil
.text:000000000000829D                 mov     esi, r14d
.text:00000000000082A0                 lea     eax, [rdx-30h]
.text:00000000000082A3                 sub     esi, edx
.text:00000000000082A5                 cmp     r9d, 0FFFFFFFFh
.text:00000000000082A9                 cmovnz  esi, eax
.text:00000000000082AC                 movsxd  rax, esi
.text:00000000000082AF                 add     rax, r10
.text:00000000000082B2                 mov     r10, rax
.text:00000000000082B5                 jno     short loc_8280
.text:00000000000082B7
.text:00000000000082B7 loc_82B7:                               ; CODE XREF: yyparse+1617↑j
.text:00000000000082B7                                         ; yyparse+16D5↓j ...
.text:00000000000082B7                 mov     eax, 2
.text:00000000000082BC                 mov     r9d, 3Fh ; '?'
.text:00000000000082C2                 jmp     loc_735E
.text:00000000000082C7 ; ---------------------------------------------------------------------------
.text:00000000000082C7
.text:00000000000082C7 loc_82C7:                               ; CODE XREF: yyparse+160E↑j
.text:00000000000082C7                 and     esi, 0FFFFFFFDh
.text:00000000000082CA                 mov     r10, rbp
.text:00000000000082CD                 mov     rdx, rax
.text:00000000000082D0                 cmp     sil, 2Ch ; ','
.text:00000000000082D4                 jnz     loc_83A8
.text:00000000000082DA                 movsx   eax, byte ptr [rbp+1]
.text:00000000000082DE                 lea     esi, [rax-30h]
.text:00000000000082E1                 cmp     sil, 9
.text:00000000000082E5                 ja      loc_83A8
.text:00000000000082EB                 lea     rdi, [rcx+3]
.text:00000000000082EF                 movsx   ecx, byte ptr [rcx+3]
.text:00000000000082F3                 sub     eax, 30h ; '0'
.text:00000000000082F6                 mov     r10d, 8
.text:00000000000082FC
.text:00000000000082FC loc_82FC:                               ; CODE XREF: yyparse+1699↓j
.text:00000000000082FC                 lea     eax, [rax+rax*4]
.text:00000000000082FF                 lea     esi, [rcx-30h]
.text:0000000000008302                 add     eax, eax
.text:0000000000008304                 cmp     sil, 9
.text:0000000000008308                 ja      short loc_8315
.text:000000000000830A                 lea     eax, [rax+rcx-30h]
.text:000000000000830E                 add     rdi, 1
.text:0000000000008312                 movsx   ecx, byte ptr [rdi]
.text:0000000000008315
.text:0000000000008315 loc_8315:                               ; CODE XREF: yyparse+1688↑j
.text:0000000000008315                 sub     r10d, 1
.text:0000000000008319                 jnz     short loc_82FC
.text:000000000000831B                 cmp     r9d, 0FFFFFFFFh
.text:000000000000831F                 jnz     short loc_832F
.text:0000000000008321                 jmp     short loc_8390
.text:0000000000008321 ; ---------------------------------------------------------------------------
.text:0000000000008323                 align 8
.text:0000000000008328
.text:0000000000008328 loc_8328:                               ; CODE XREF: yyparse+16B5↓j
.text:0000000000008328                 add     rdi, 1
.text:000000000000832C                 movzx   ecx, byte ptr [rdi]
.text:000000000000832F
.text:000000000000832F loc_832F:                               ; CODE XREF: yyparse+169F↑j
.text:000000000000832F                                         ; yyparse+1717↓j ...
.text:000000000000832F                 sub     ecx, 30h ; '0'
.text:0000000000008332                 cmp     cl, 9
.text:0000000000008335                 jbe     short loc_8328
.text:0000000000008337                 test    r9d, r9d
.text:000000000000833A                 jns     loc_8405
.text:0000000000008340                 test    eax, eax
.text:0000000000008342                 jz      loc_8405
.text:0000000000008348                 mov     rcx, 8000000000000000h
.text:0000000000008352                 cmp     rdx, rcx
.text:0000000000008355                 jz      loc_82B7
.text:000000000000835B                 sub     rdx, 1
.text:000000000000835F                 mov     [r11], rdi
.text:0000000000008362                 mov     r9d, 114h
.text:0000000000008368                 mov     qword ptr [rsp+5F8h+var_568], rdx
.text:0000000000008370                 mov     edx, 3B9ACA00h
.text:0000000000008375                 sub     edx, eax
.text:0000000000008377                 movsxd  rax, edx
.text:000000000000837A                 mov     [rsp+5F8h+var_5C0], rax
.text:000000000000837F                 mov     eax, 15h
.text:0000000000008384                 jmp     loc_735E
.text:0000000000008389 ; ---------------------------------------------------------------------------
.text:0000000000008389
.text:0000000000008389 loc_8389:                               ; CODE XREF: yyparse+171C↓j
.text:0000000000008389                 add     rdi, 1
.text:000000000000838D                 movzx   ecx, byte ptr [rdi]
.text:0000000000008390
.text:0000000000008390 loc_8390:                               ; CODE XREF: yyparse+16A1↑j
.text:0000000000008390                 lea     esi, [rcx-30h]
.text:0000000000008393                 cmp     sil, 9
.text:0000000000008397                 ja      short loc_832F
.text:0000000000008399                 cmp     cl, 30h ; '0'
.text:000000000000839C                 jz      short loc_8389
.text:000000000000839E                 add     eax, 1
.text:00000000000083A1                 jmp     short loc_832F
.text:00000000000083A1 ; ---------------------------------------------------------------------------
.text:00000000000083A3                 align 8
.text:00000000000083A8
.text:00000000000083A8 loc_83A8:                               ; CODE XREF: yyparse+1654↑j
.text:00000000000083A8                                         ; yyparse+1665↑j
.text:00000000000083A8                 mov     eax, r9d
.text:00000000000083AB                 mov     [r11], r10
.text:00000000000083AE                 mov     [rsp+5F8h+var_5C0], rdx
.text:00000000000083B3                 shr     eax, 1Fh
.text:00000000000083B6                 mov     byte ptr [rsp+5F8h+var_568], al
.text:00000000000083BD                 mov     rax, r10
.text:00000000000083C0                 sub     rax, rdi
.text:00000000000083C3                 cmp     r9d, 1
.text:00000000000083C7                 mov     [rsp+5F8h+var_5B8], rax
.text:00000000000083CC                 sbb     eax, eax
.text:00000000000083CE                 not     eax
.text:00000000000083D0                 add     eax, 14h
.text:00000000000083D3                 cmp     r9d, 1
.text:00000000000083D7                 sbb     r9d, r9d
.text:00000000000083DA                 not     r9d
.text:00000000000083DD                 add     r9d, 113h
.text:00000000000083E4                 jmp     loc_735E
.text:00000000000083E9 ; ---------------------------------------------------------------------------
.text:00000000000083E9
.text:00000000000083E9 loc_83E9:                               ; CODE XREF: yyparse+39E↑j
.text:00000000000083E9                 mov     eax, 2
.text:00000000000083EE                 jmp     loc_725D
.text:00000000000083F3 ; ---------------------------------------------------------------------------
.text:00000000000083F3
.text:00000000000083F3 loc_83F3:                               ; CODE XREF: yyparse+3A7↑j
.text:00000000000083F3                 xor     eax, eax
.text:00000000000083F5                 jmp     loc_725D
.text:00000000000083FA ; ---------------------------------------------------------------------------
.text:00000000000083FA
.text:00000000000083FA loc_83FA:                               ; CODE XREF: yyparse+776↑j
.text:00000000000083FA                 mov     rdi, [r11]
.text:00000000000083FD                 xor     r9d, r9d
.text:0000000000008400                 jmp     loc_8267
.text:0000000000008405 ; ---------------------------------------------------------------------------
.text:0000000000008405
.text:0000000000008405 loc_8405:                               ; CODE XREF: yyparse+16BA↑j
.text:0000000000008405                                         ; yyparse+16C2↑j
.text:0000000000008405                 cmp     r9d, 1
.text:0000000000008409                 cdqe
.text:000000000000840B                 mov     qword ptr [rsp+5F8h+var_568], rdx
.text:0000000000008413                 mov     [rsp+5F8h+var_5C0], rax
.text:0000000000008418                 sbb     eax, eax
.text:000000000000841A                 mov     [r11], rdi
.text:000000000000841D                 not     eax
.text:000000000000841F                 add     eax, 16h
.text:0000000000008422                 cmp     r9d, 1
.text:0000000000008426                 sbb     r9d, r9d
.text:0000000000008429                 not     r9d
.text:000000000000842C                 add     r9d, 115h
.text:0000000000008433                 jmp     loc_735E
.text:0000000000008438 ; ---------------------------------------------------------------------------
.text:0000000000008438
.text:0000000000008438 loc_8438:                               ; CODE XREF: yyparse+C57↑j
.text:0000000000008438                 mov     rdi, [r13-0D8h]
.text:000000000000843F                 test    al, al
.text:0000000000008441                 mov     [rsp+5F8h+var_5B0], rdi
.text:0000000000008446                 jz      short loc_8488
.text:0000000000008448                 lea     rsi, aWarningValueLd_0 ; "warning: value %ld has less than 4 digi"...
.text:000000000000844F                 mov     edx, 5          ; category
.text:0000000000008454                 xor     edi, edi        ; domainname
.text:0000000000008456                 mov     [rsp+5F8h+var_598], r11
.text:000000000000845B                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:0000000000008460                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000008465                 call    _dcgettext
.text:000000000000846A                 mov     rsi, [rsp+5F8h+var_5B0]
.text:000000000000846F                 mov     rdi, rax
.text:0000000000008472                 xor     eax, eax
.text:0000000000008474                 call    dbg_printf
.text:0000000000008479                 mov     r11, [rsp+5F8h+var_598]
.text:000000000000847E                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000008483                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000008488
.text:0000000000008488 loc_8488:                               ; CODE XREF: yyparse+17C6↑j
.text:0000000000008488                 mov     rax, [rsp+5F8h+var_5B0]
.text:000000000000848D                 jmp     loc_7D3C
.text:0000000000008492 ; ---------------------------------------------------------------------------
.text:0000000000008492
.text:0000000000008492 loc_8492:                               ; CODE XREF: yyparse+518↑j
.text:0000000000008492                 mov     rax, [rsp+5F8h+var_588]
.text:0000000000008497                 sub     ecx, r8d
.text:000000000000849A                 seto    r8b
.text:000000000000849E                 mov     [r11+98h], ecx
.text:00000000000084A5                 xor     ecx, ecx
.text:00000000000084A7                 sub     rdx, rdi
.text:00000000000084AA                 movzx   r8d, r8b
.text:00000000000084AE                 seto    cl
.text:00000000000084B1                 xor     edi, edi
.text:00000000000084B3                 sub     rax, rsi
.text:00000000000084B6                 seto    dil
.text:00000000000084BA                 mov     [r11+88h], rax
.text:00000000000084C1                 xor     esi, esi
.text:00000000000084C3                 mov     rax, [rsp+5F8h+var_578]
.text:00000000000084CB                 sub     rax, [rsp+5F8h+var_598]
.text:00000000000084D0                 mov     [rsp+5F8h+var_588], rdi
.text:00000000000084D5                 mov     [r11+90h], rdx
.text:00000000000084DC                 seto    sil
.text:00000000000084E0                 mov     [r11+80h], rax
.text:00000000000084E7                 xor     edi, edi
.text:00000000000084E9                 mov     rax, [rsp+5F8h+var_570]
.text:00000000000084F1                 sub     rax, [rsp+5F8h+var_5A0]
.text:00000000000084F6                 seto    dil
.text:00000000000084FA                 mov     [r11+78h], rax
.text:00000000000084FE                 xor     edx, edx
.text:0000000000008500                 mov     rax, [rsp+5F8h+var_590]
.text:0000000000008505                 sub     rax, [rsp+5F8h+var_5A8]
.text:000000000000850A                 seto    dl
.text:000000000000850D                 mov     [r11+70h], rax
.text:0000000000008511                 mov     rax, [rsp+5F8h+var_580]
.text:0000000000008516                 mov     [rsp+5F8h+var_5A8], rdx
.text:000000000000851B                 sub     rax, [rsp+5F8h+var_5B0]
.text:0000000000008520                 jmp     loc_722C
.text:0000000000008525 ; ---------------------------------------------------------------------------
.text:0000000000008525
.text:0000000000008525 loc_8525:                               ; CODE XREF: yyparse+900↑j
.text:0000000000008525                 mov     rbp, r14
.text:0000000000008528
.text:0000000000008528 loc_8528:                               ; CODE XREF: yyparse+18BE↓j
.text:0000000000008528                 mov     edx, [rbp+0]
.text:000000000000852B                 add     rbp, 4
.text:000000000000852F                 lea     eax, [rdx-1010101h]
.text:0000000000008535                 not     edx
.text:0000000000008537                 and     eax, edx
.text:0000000000008539                 and     eax, 80808080h
.text:000000000000853E                 jz      short loc_8528
.text:0000000000008540                 mov     edx, eax
.text:0000000000008542                 mov     r9d, 1
.text:0000000000008548                 shr     edx, 10h
.text:000000000000854B                 test    eax, 8080h
.text:0000000000008550                 cmovz   eax, edx
.text:0000000000008553                 lea     rdx, [rbp+2]
.text:0000000000008557                 mov     edi, eax
.text:0000000000008559                 cmovz   rbp, rdx
.text:000000000000855D                 add     dil, al
.text:0000000000008560                 sbb     rbp, 3
.text:0000000000008564                 sub     rbp, r14
.text:0000000000008567                 cmp     rbp, 3
.text:000000000000856B                 jz      short loc_857A
.text:000000000000856D                 xor     r9d, r9d
.text:0000000000008570                 cmp     rbp, 4
.text:0000000000008574                 jz      loc_8741
.text:000000000000857A
.text:000000000000857A loc_857A:                               ; CODE XREF: yyparse+18EB↑j
.text:000000000000857A                                         ; yyparse+1AD0↓j
.text:000000000000857A                 lea     rcx, month_and_day_table
.text:0000000000008581                 lea     rsi, aJanuary   ; "JANUARY"
.text:0000000000008588                 mov     dword ptr [rsp+5F8h+var_5F0], ebx
.text:000000000000858C                 mov     [rsp+5F8h+var_5D8], rbp
.text:0000000000008591                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:0000000000008596                 mov     ebx, r9d
.text:0000000000008599                 mov     rbp, rcx
.text:000000000000859C                 mov     [rsp+5F8h+var_5E0], r11
.text:00000000000085A1
.text:00000000000085A1 loc_85A1:                               ; CODE XREF: yyparse+194E↓j
.text:00000000000085A1                 test    ebx, ebx
.text:00000000000085A3                 jz      loc_8718
.text:00000000000085A9                 mov     edx, 3          ; n
.text:00000000000085AE                 mov     rdi, r14        ; s1
.text:00000000000085B1                 call    _strncmp
.text:00000000000085B6                 test    eax, eax
.text:00000000000085B8                 setz    al
.text:00000000000085BB
.text:00000000000085BB loc_85BB:                               ; CODE XREF: yyparse+1AA5↓j
.text:00000000000085BB                 test    al, al
.text:00000000000085BD                 jnz     loc_872A
.text:00000000000085C3                 add     rbp, 10h
.text:00000000000085C7                 mov     rsi, [rbp+0]
.text:00000000000085CB                 test    rsi, rsi
.text:00000000000085CE                 jnz     short loc_85A1
.text:00000000000085D0                 mov     r11, [rsp+5F8h+var_5E0]
.text:00000000000085D5                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:00000000000085DA                 mov     rsi, r14
.text:00000000000085DD                 movsxd  rbx, dword ptr [rsp+5F8h+var_5F0]
.text:00000000000085E2                 mov     byte ptr [rsp+5F8h+var_5F0], al
.text:00000000000085E6                 mov     rbp, [rsp+5F8h+var_5D8]
.text:00000000000085EB                 mov     rdi, r11
.text:00000000000085EE                 mov     dword ptr [rsp+5F8h+var_5D0], r8d
.text:00000000000085F3                 mov     [rsp+5F8h+var_5E8], r11
.text:00000000000085F8                 call    lookup_zone
.text:00000000000085FD                 test    rax, rax
.text:0000000000008600                 mov     rcx, rax
.text:0000000000008603                 mov     r11, [rsp+5F8h+var_5E8]
.text:0000000000008608                 mov     r8d, dword ptr [rsp+5F8h+var_5D0]
.text:000000000000860D                 jnz     loc_75A9
.text:0000000000008613                 lea     rsi, aDst+1     ; s2
.text:000000000000861A                 mov     rdi, r14        ; s1
.text:000000000000861D                 mov     [rsp+5F8h+var_5E0], r11
.text:0000000000008622                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:0000000000008627                 call    _strcmp
.text:000000000000862C                 test    eax, eax
.text:000000000000862E                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:0000000000008633                 mov     r11, [rsp+5F8h+var_5E0]
.text:0000000000008638                 jz      loc_8765
.text:000000000000863E                 lea     rcx, time_units_table
.text:0000000000008645                 lea     rsi, aYear      ; "YEAR"
.text:000000000000864C
.text:000000000000864C loc_864C:                               ; CODE XREF: yyparse+1A04↓j
.text:000000000000864C                 mov     rdi, r14        ; s1
.text:000000000000864F                 mov     [rsp+5F8h+var_5D8], r11
.text:0000000000008654                 mov     [rsp+5F8h+var_5E0], rcx
.text:0000000000008659                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:000000000000865E                 call    _strcmp
.text:0000000000008663                 test    eax, eax
.text:0000000000008665                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:000000000000866A                 mov     rcx, [rsp+5F8h+var_5E0]
.text:000000000000866F                 mov     r11, [rsp+5F8h+var_5D8]
.text:0000000000008674                 jz      loc_75A9
.text:000000000000867A                 add     rcx, 10h
.text:000000000000867E                 mov     rsi, [rcx]
.text:0000000000008681                 test    rsi, rsi
.text:0000000000008684                 jnz     short loc_864C
.text:0000000000008686                 lea     rdx, [r14+rbp-1]
.text:000000000000868B                 cmp     byte ptr [rdx], 53h ; 'S'
.text:000000000000868E                 jz      loc_8771
.text:0000000000008694
.text:0000000000008694 loc_8694:                               ; CODE XREF: yyparse+1B49↓j
.text:0000000000008694                 lea     rcx, relative_time_table
.text:000000000000869B                 lea     rsi, aTomorrow  ; "TOMORROW"
.text:00000000000086A2
.text:00000000000086A2 loc_86A2:                               ; CODE XREF: yyparse+1A5A↓j
.text:00000000000086A2                 mov     rdi, r14        ; s1
.text:00000000000086A5                 mov     [rsp+5F8h+var_5D8], r11
.text:00000000000086AA                 mov     [rsp+5F8h+var_5E0], rcx
.text:00000000000086AF                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:00000000000086B4                 call    _strcmp
.text:00000000000086B9                 test    eax, eax
.text:00000000000086BB                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:00000000000086C0                 mov     rcx, [rsp+5F8h+var_5E0]
.text:00000000000086C5                 mov     r11, [rsp+5F8h+var_5D8]
.text:00000000000086CA                 jz      loc_75A9
.text:00000000000086D0                 add     rcx, 10h
.text:00000000000086D4                 mov     rsi, [rcx]
.text:00000000000086D7                 test    rsi, rsi
.text:00000000000086DA                 jnz     short loc_86A2
.text:00000000000086DC                 sub     rbp, 1
.text:00000000000086E0                 movzx   edx, [rsp+5F8h+s1]
.text:00000000000086E8                 jz      loc_885C
.text:00000000000086EE
.text:00000000000086EE loc_86EE:                               ; CODE XREF: yyparse+1BFE↓j
.text:00000000000086EE                 mov     rax, r14
.text:00000000000086F1                 mov     rdx, r14
.text:00000000000086F4
.text:00000000000086F4 loc_86F4:                               ; CODE XREF: yyparse+1A92↓j
.text:00000000000086F4                 movzx   ecx, byte ptr [rax]
.text:00000000000086F7                 test    cl, cl
.text:00000000000086F9                 mov     [rdx], cl
.text:00000000000086FB                 jz      loc_87D8
.text:0000000000008701                 cmp     byte ptr [rax], 2Eh ; '.'
.text:0000000000008704                 jz      loc_87CE
.text:000000000000870A                 add     rdx, 1
.text:000000000000870E
.text:000000000000870E loc_870E:                               ; CODE XREF: yyparse+1B53↓j
.text:000000000000870E                 add     rax, 1
.text:0000000000008712                 jmp     short loc_86F4
.text:0000000000008712 ; ---------------------------------------------------------------------------
.text:0000000000008714                 align 8
.text:0000000000008718
.text:0000000000008718 loc_8718:                               ; CODE XREF: yyparse+1923↑j
.text:0000000000008718                 mov     rdi, r14        ; s1
.text:000000000000871B                 call    _strcmp
.text:0000000000008720                 test    eax, eax
.text:0000000000008722                 setz    al
.text:0000000000008725                 jmp     loc_85BB
.text:000000000000872A ; ---------------------------------------------------------------------------
.text:000000000000872A
.text:000000000000872A loc_872A:                               ; CODE XREF: yyparse+193D↑j
.text:000000000000872A                 movsxd  rbx, dword ptr [rsp+5F8h+var_5F0]
.text:000000000000872F                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:0000000000008734                 mov     rcx, rbp
.text:0000000000008737                 mov     r11, [rsp+5F8h+var_5E0]
.text:000000000000873C                 jmp     loc_75A9
.text:0000000000008741 ; ---------------------------------------------------------------------------
.text:0000000000008741
.text:0000000000008741 loc_8741:                               ; CODE XREF: yyparse+18F4↑j
.text:0000000000008741                 xor     r9d, r9d
.text:0000000000008744                 cmp     [rsp+5F8h+var_55], 2Eh ; '.'
.text:000000000000874C                 setz    r9b
.text:0000000000008750                 jmp     loc_857A
.text:0000000000008755 ; ---------------------------------------------------------------------------
.text:0000000000008755
.text:0000000000008755 loc_8755:                               ; CODE XREF: yyparse+198↑j
.text:0000000000008755                 mov     r8d, 1
.text:000000000000875B                 jmp     loc_6E1E
.text:0000000000008760 ; ---------------------------------------------------------------------------
.text:0000000000008760
.text:0000000000008760 loc_8760:                               ; CODE XREF: yyparse+5EE↑j
.text:0000000000008760                 call    ___stack_chk_fail
.text:0000000000008765 ; ---------------------------------------------------------------------------
.text:0000000000008765
.text:0000000000008765 loc_8765:                               ; CODE XREF: yyparse+19B8↑j
.text:0000000000008765                 lea     rcx, dst_table
.text:000000000000876C                 jmp     loc_75A9
.text:0000000000008771 ; ---------------------------------------------------------------------------
.text:0000000000008771
.text:0000000000008771 loc_8771:                               ; CODE XREF: yyparse+1A0E↑j
.text:0000000000008771                 lea     rcx, time_units_table
.text:0000000000008778                 lea     rsi, aYear      ; "YEAR"
.text:000000000000877F                 mov     byte ptr [rdx], 0
.text:0000000000008782
.text:0000000000008782 loc_8782:                               ; CODE XREF: yyparse+1B44↓j
.text:0000000000008782                 mov     rdi, r14        ; s1
.text:0000000000008785                 mov     [rsp+5F8h+var_5D0], r11
.text:000000000000878A                 mov     [rsp+5F8h+var_5D8], rcx
.text:000000000000878F                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:0000000000008794                 mov     [rsp+5F8h+var_5E0], rdx
.text:0000000000008799                 call    _strcmp
.text:000000000000879E                 test    eax, eax
.text:00000000000087A0                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:00000000000087A5                 mov     rcx, [rsp+5F8h+var_5D8]
.text:00000000000087AA                 mov     r11, [rsp+5F8h+var_5D0]
.text:00000000000087AF                 jz      loc_75A9
.text:00000000000087B5                 add     rcx, 10h
.text:00000000000087B9                 mov     rsi, [rcx]
.text:00000000000087BC                 mov     rdx, [rsp+5F8h+var_5E0]
.text:00000000000087C1                 test    rsi, rsi
.text:00000000000087C4                 jnz     short loc_8782
.text:00000000000087C6                 mov     byte ptr [rdx], 53h ; 'S'
.text:00000000000087C9                 jmp     loc_8694
.text:00000000000087CE ; ---------------------------------------------------------------------------
.text:00000000000087CE
.text:00000000000087CE loc_87CE:                               ; CODE XREF: yyparse+1A84↑j
.text:00000000000087CE                 mov     byte ptr [rsp+5F8h+var_5F0], 1
.text:00000000000087D3                 jmp     loc_870E
.text:00000000000087D8 ; ---------------------------------------------------------------------------
.text:00000000000087D8
.text:00000000000087D8 loc_87D8:                               ; CODE XREF: yyparse+1A7B↑j
.text:00000000000087D8                 cmp     byte ptr [rsp+5F8h+var_5F0], 0
.text:00000000000087DD                 jz      short loc_880A
.text:00000000000087DF                 mov     rdi, r11
.text:00000000000087E2                 mov     rsi, r14
.text:00000000000087E5                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:00000000000087EA                 mov     [rsp+5F8h+var_5F0], r11
.text:00000000000087EF                 call    lookup_zone
.text:00000000000087F4                 test    rax, rax
.text:00000000000087F7                 mov     rcx, rax
.text:00000000000087FA                 mov     r11, [rsp+5F8h+var_5F0]
.text:00000000000087FF                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:0000000000008804                 jnz     loc_75A9
.text:000000000000880A
.text:000000000000880A loc_880A:                               ; CODE XREF: yyparse+1B5D↑j
.text:000000000000880A                 cmp     byte ptr [r11+0D9h], 0
.text:0000000000008812                 jz      loc_82B7
.text:0000000000008818                 lea     rsi, aErrorUnknownWo ; "error: unknown word '%s'\n"
.text:000000000000881F                 mov     edx, 5          ; category
.text:0000000000008824                 xor     edi, edi        ; domainname
.text:0000000000008826                 mov     [rsp+5F8h+var_5E8], r11
.text:000000000000882B                 mov     dword ptr [rsp+5F8h+var_5F0], r8d
.text:0000000000008830                 call    _dcgettext
.text:0000000000008835                 mov     rsi, r14
.text:0000000000008838                 mov     rdi, rax
.text:000000000000883B                 xor     eax, eax
.text:000000000000883D                 call    dbg_printf
.text:0000000000008842                 mov     eax, 2
.text:0000000000008847                 mov     r9d, 3Fh ; '?'
.text:000000000000884D                 mov     r8d, dword ptr [rsp+5F8h+var_5F0]
.text:0000000000008852                 mov     r11, [rsp+5F8h+var_5E8]
.text:0000000000008857                 jmp     loc_735E
.text:000000000000885C ; ---------------------------------------------------------------------------
.text:000000000000885C
.text:000000000000885C loc_885C:                               ; CODE XREF: yyparse+1A68↑j
.text:000000000000885C                 lea     rcx, military_table
.text:0000000000008863                 lea     rax, aA         ; "A"
.text:000000000000886A
.text:000000000000886A loc_886A:                               ; CODE XREF: yyparse+1BFC↓j
.text:000000000000886A                 cmp     [rax], dl
.text:000000000000886C                 jz      loc_75A9
.text:0000000000008872                 add     rcx, 10h
.text:0000000000008876                 mov     rax, [rcx]
.text:0000000000008879                 test    rax, rax
.text:000000000000887C                 jnz     short loc_886A
.text:000000000000887E                 jmp     loc_86EE
.text:000000000000887E ; } // starts at 6C80
.text:000000000000887E yyparse         endp
.text:000000000000887E
.text:000000000000887E ; ---------------------------------------------------------------------------
.text:0000000000008883                 align 10h
.text:0000000000008890
.text:0000000000008890 ; =============== S U B R O U T I N E =======================================
.text:0000000000008890
.text:0000000000008890
.text:0000000000008890                 public parse_datetime2
.text:0000000000008890 parse_datetime2 proc near               ; CODE XREF: main+483↑p
.text:0000000000008890                                         ; main+667↑p ...
.text:0000000000008890
.text:0000000000008890 var_488         = qword ptr -488h
.text:0000000000008890 ptr             = qword ptr -480h
.text:0000000000008890 src             = qword ptr -478h
.text:0000000000008890 var_470         = qword ptr -470h
.text:0000000000008890 var_468         = qword ptr -468h
.text:0000000000008890 timer           = qword ptr -460h
.text:0000000000008890 var_458         = qword ptr -458h
.text:0000000000008890 var_450         = qword ptr -450h
.text:0000000000008890 var_448         = dword ptr -448h
.text:0000000000008890 var_444         = dword ptr -444h
.text:0000000000008890 var_440         = qword ptr -440h
.text:0000000000008890 var_438         = dword ptr -438h
.text:0000000000008890 var_434         = dword ptr -434h
.text:0000000000008890 var_430         = dword ptr -430h
.text:0000000000008890 var_42C         = dword ptr -42Ch
.text:0000000000008890 var_428         = timespec ptr -428h
.text:0000000000008890 var_418         = qword ptr -418h
.text:0000000000008890 var_410         = dword ptr -410h
.text:0000000000008890 var_40C         = dword ptr -40Ch
.text:0000000000008890 var_408         = dword ptr -408h
.text:0000000000008890 var_404         = dword ptr -404h
.text:0000000000008890 var_400         = dword ptr -400h
.text:0000000000008890 var_3F8         = dword ptr -3F8h
.text:0000000000008890 var_3F0         = qword ptr -3F0h
.text:0000000000008890 var_3D8         = dword ptr -3D8h
.text:0000000000008890 var_3D4         = dword ptr -3D4h
.text:0000000000008890 var_3D0         = dword ptr -3D0h
.text:0000000000008890 var_3CC         = dword ptr -3CCh
.text:0000000000008890 var_3C8         = dword ptr -3C8h
.text:0000000000008890 var_3C4         = dword ptr -3C4h
.text:0000000000008890 var_3B8         = dword ptr -3B8h
.text:0000000000008890 var_398         = dword ptr -398h
.text:0000000000008890 var_394         = dword ptr -394h
.text:0000000000008890 var_390         = dword ptr -390h
.text:0000000000008890 var_38C         = dword ptr -38Ch
.text:0000000000008890 var_388         = dword ptr -388h
.text:0000000000008890 var_384         = dword ptr -384h
.text:0000000000008890 var_378         = dword ptr -378h
.text:0000000000008890 var_368         = qword ptr -368h
.text:0000000000008890 tp              = tm ptr -358h
.text:0000000000008890 var_318         = byte ptr -318h
.text:0000000000008890 var_2F8         = dword ptr -2F8h
.text:0000000000008890 var_2F0         = dword ptr -2F0h
.text:0000000000008890 var_2E8         = qword ptr -2E8h
.text:0000000000008890 var_2D8         = qword ptr -2D8h
.text:0000000000008890 var_2D0         = qword ptr -2D0h
.text:0000000000008890 var_2C8         = dword ptr -2C8h
.text:0000000000008890 var_2C4         = dword ptr -2C4h
.text:0000000000008890 var_2C0         = dword ptr -2C0h
.text:0000000000008890 var_2BC         = dword ptr -2BCh
.text:0000000000008890 var_2B0         = qword ptr -2B0h
.text:0000000000008890 var_2A8         = qword ptr -2A8h
.text:0000000000008890 var_2A0         = qword ptr -2A0h
.text:0000000000008890 var_298         = qword ptr -298h
.text:0000000000008890 var_290         = qword ptr -290h
.text:0000000000008890 var_288         = qword ptr -288h
.text:0000000000008890 var_280         = xmmword ptr -280h
.text:0000000000008890 var_270         = qword ptr -270h
.text:0000000000008890 var_268         = qword ptr -268h
.text:0000000000008890 var_260         = qword ptr -260h
.text:0000000000008890 var_258         = qword ptr -258h
.text:0000000000008890 var_250         = qword ptr -250h
.text:0000000000008890 var_248         = qword ptr -248h
.text:0000000000008890 var_240         = dword ptr -240h
.text:0000000000008890 var_238         = byte ptr -238h
.text:0000000000008890 var_237         = byte ptr -237h
.text:0000000000008890 var_230         = qword ptr -230h
.text:0000000000008890 var_228         = qword ptr -228h
.text:0000000000008890 var_220         = qword ptr -220h
.text:0000000000008890 var_218         = qword ptr -218h
.text:0000000000008890 var_210         = qword ptr -210h
.text:0000000000008890 var_208         = qword ptr -208h
.text:0000000000008890 var_200         = byte ptr -200h
.text:0000000000008890 var_1FF         = byte ptr -1FFh
.text:0000000000008890 var_1FE         = byte ptr -1FEh
.text:0000000000008890 var_1FD         = byte ptr -1FDh
.text:0000000000008890 var_1FC         = byte ptr -1FCh
.text:0000000000008890 var_1FB         = byte ptr -1FBh
.text:0000000000008890 var_1FA         = byte ptr -1FAh
.text:0000000000008890 var_1F9         = byte ptr -1F9h
.text:0000000000008890 var_1F8         = byte ptr -1F8h
.text:0000000000008890 s1              = qword ptr -1F0h
.text:0000000000008890 var_1E8         = dword ptr -1E8h
.text:0000000000008890 var_1E4         = dword ptr -1E4h
.text:0000000000008890 s2              = qword ptr -1E0h
.text:0000000000008890 var_1D8         = dword ptr -1D8h
.text:0000000000008890 var_1D4         = dword ptr -1D4h
.text:0000000000008890 var_1D0         = qword ptr -1D0h
.text:0000000000008890 var_1B5         = byte ptr -1B5h
.text:0000000000008890 var_1A8         = byte ptr -1A8h
.text:0000000000008890 var_188         = byte ptr -188h
.text:0000000000008890 var_118         = byte ptr -118h
.text:0000000000008890 var_A8          = word ptr -0A8h
.text:0000000000008890 var_A6          = byte ptr -0A6h
.text:0000000000008890 var_A5          = byte ptr -0A5h
.text:0000000000008890 var_40          = qword ptr -40h
.text:0000000000008890
.text:0000000000008890 ; __unwind {
.text:0000000000008890                 push    r15
.text:0000000000008892                 push    r14
.text:0000000000008894                 mov     r14, rdx
.text:0000000000008897                 push    r13
.text:0000000000008899                 push    r12
.text:000000000000889B                 push    rbp
.text:000000000000889C                 push    rbx
.text:000000000000889D                 mov     rbp, rsi
.text:00000000000088A0                 sub     rsp, 458h
.text:00000000000088A7                 mov     [rsp+488h+timer], rdi
.text:00000000000088AC                 mov     rdi, rsi        ; s
.text:00000000000088AF                 mov     dword ptr [rsp+488h+var_468], ecx
.text:00000000000088B3                 mov     rax, fs:28h
.text:00000000000088BC                 mov     [rsp+488h+var_40], rax
.text:00000000000088C4                 xor     eax, eax
.text:00000000000088C6                 mov     [rsp+488h+var_488], r8
.text:00000000000088CA                 mov     [rsp+488h+src], r9
.text:00000000000088CF                 call    _strlen
.text:00000000000088D4                 test    r14, r14
.text:00000000000088D7                 mov     [rsp+488h+var_458], rax
.text:00000000000088DC                 jz      loc_8EA0
.text:00000000000088E2
.text:00000000000088E2 loc_88E2:                               ; CODE XREF: parse_datetime2+61D↓j
.text:00000000000088E2                 mov     rax, [r14+8]
.text:00000000000088E6                 mov     rbx, [r14]
.text:00000000000088E9                 mov     [rsp+488h+var_470], rax
.text:00000000000088EE                 movzx   eax, byte ptr [rbp+0]
.text:00000000000088F2                 cmp     al, 20h ; ' '
.text:00000000000088F4                 ja      loc_9170
.text:00000000000088FA                 mov     rcx, 100003E00h
.text:0000000000008904                 mov     r13, rbp
.text:0000000000008907                 mov     esi, 1
.text:000000000000890C                 bt      rcx, rax
.text:0000000000008910                 mov     rdx, rcx
.text:0000000000008913                 jb      short loc_892B
.text:0000000000008915                 jmp     short loc_8939
.text:0000000000008915 ; ---------------------------------------------------------------------------
.text:0000000000008917                 align 20h
.text:0000000000008920
.text:0000000000008920 loc_8920:                               ; CODE XREF: parse_datetime2+A7↓j
.text:0000000000008920                 mov     rax, rsi
.text:0000000000008923                 shl     rax, cl
.text:0000000000008926                 test    rax, rdx
.text:0000000000008929                 jz      short loc_8939
.text:000000000000892B
.text:000000000000892B loc_892B:                               ; CODE XREF: parse_datetime2+83↑j
.text:000000000000892B                 add     r13, 1
.text:000000000000892F                 movzx   ecx, byte ptr [r13+0]
.text:0000000000008934                 cmp     cl, 20h ; ' '
.text:0000000000008937                 jbe     short loc_8920
.text:0000000000008939
.text:0000000000008939 loc_8939:                               ; CODE XREF: parse_datetime2+85↑j
.text:0000000000008939                                         ; parse_datetime2+99↑j ...
.text:0000000000008939                 lea     rdi, aTz        ; "TZ=\""
.text:0000000000008940                 mov     ecx, 4
.text:0000000000008945                 mov     rsi, r13
.text:0000000000008948                 repe cmpsb
.text:000000000000894A                 setnbe  al
.text:000000000000894D                 sbb     al, 0
.text:000000000000894F                 test    al, al
.text:0000000000008951                 jnz     short loc_89A8
.text:0000000000008953                 movzx   r12d, byte ptr [r13+4]
.text:0000000000008958                 lea     rcx, [r13+4]
.text:000000000000895C                 test    r12b, r12b
.text:000000000000895F                 jz      short loc_89A8
.text:0000000000008961                 mov     rdx, rcx
.text:0000000000008964                 mov     eax, r12d
.text:0000000000008967                 mov     edi, 1
.text:000000000000896C                 jmp     short loc_898B
.text:000000000000896C ; ---------------------------------------------------------------------------
.text:000000000000896E                 align 10h
.text:0000000000008970
.text:0000000000008970 loc_8970:                               ; CODE XREF: parse_datetime2+FD↓j
.text:0000000000008970                 cmp     al, 22h ; '"'
.text:0000000000008972                 jz      loc_8D68
.text:0000000000008978                 mov     rax, rdx
.text:000000000000897B
.text:000000000000897B loc_897B:                               ; CODE XREF: parse_datetime2+10A↓j
.text:000000000000897B                                         ; parse_datetime2+10F↓j
.text:000000000000897B                 lea     rdx, [rax+1]
.text:000000000000897F                 movzx   eax, byte ptr [rax+1]
.text:0000000000008983                 add     rdi, 1          ; size
.text:0000000000008987                 test    al, al
.text:0000000000008989                 jz      short loc_89A8
.text:000000000000898B
.text:000000000000898B loc_898B:                               ; CODE XREF: parse_datetime2+DC↑j
.text:000000000000898B                 cmp     al, 5Ch ; '\'
.text:000000000000898D                 jnz     short loc_8970
.text:000000000000898F                 lea     rax, [rdx+1]
.text:0000000000008993                 movzx   edx, byte ptr [rdx+1]
.text:0000000000008997                 cmp     dl, 5Ch ; '\'
.text:000000000000899A                 jz      short loc_897B
.text:000000000000899C                 cmp     dl, 22h ; '"'
.text:000000000000899F                 jz      short loc_897B
.text:00000000000089A1                 nop     dword ptr [rax+00000000h]
.text:00000000000089A8
.text:00000000000089A8 loc_89A8:                               ; CODE XREF: parse_datetime2+C1↑j
.text:00000000000089A8                                         ; parse_datetime2+CF↑j ...
.text:00000000000089A8                 mov     r15, [rsp+488h+var_488]
.text:00000000000089AC                 lea     rdx, [rsp+488h+var_398]
.text:00000000000089B4                 mov     rsi, r14
.text:00000000000089B7                 mov     rdi, r15
.text:00000000000089BA                 call    localtime_rz
.text:00000000000089BF                 test    rax, rax
.text:00000000000089C2                 jz      loc_8D90
.text:00000000000089C8                 mov     [rsp+488h+ptr], 0
.text:00000000000089D1
.text:00000000000089D1 loc_89D1:                               ; CODE XREF: parse_datetime2+5EA↓j
.text:00000000000089D1                 cmp     byte ptr [r13+0], 0
.text:00000000000089D6                 lea     rax, string+6   ; "0"
.text:00000000000089DD                 mov     [rsp+488h+var_2A8], 0
.text:00000000000089E9                 mov     [rsp+488h+var_2BC], 2
.text:00000000000089F4                 mov     [rsp+488h+var_270], 0
.text:0000000000008A00                 lea     r12, [rsp+488h+tp]
.text:0000000000008A08                 mov     [rsp+488h+var_268], 0
.text:0000000000008A14                 mov     [rsp+488h+var_260], 0
.text:0000000000008A20                 mov     r14d, 76A700h
.text:0000000000008A26                 mov     [rsp+488h+var_258], 0
.text:0000000000008A32                 mov     [rsp+488h+var_250], 0
.text:0000000000008A3E                 cmovz   r13, rax
.text:0000000000008A42                 movzx   eax, byte ptr [rsp+488h+var_468]
.text:0000000000008A47                 mov     [rsp+488h+var_248], 0
.text:0000000000008A53                 mov     [rsp+488h+var_2D8], r13
.text:0000000000008A5B                 movsxd  r13, dword ptr [rsp+488h+var_470]
.text:0000000000008A60                 mov     [rsp+488h+var_240], 0
.text:0000000000008A6B                 mov     [rsp+488h+var_238], 0
.text:0000000000008A73                 mov     [rsp+488h+var_1FF], al
.text:0000000000008A7A                 movsxd  rax, [rsp+488h+var_384]
.text:0000000000008A82                 mov     qword ptr [rsp+488h+var_280+8], r13
.text:0000000000008A8A                 and     [rsp+488h+var_1FF], 1
.text:0000000000008A92                 lea     r13, [rsp+488h+var_318]
.text:0000000000008A9A                 add     rax, 76Ch
.text:0000000000008AA0                 mov     [rsp+488h+var_2B0], rax
.text:0000000000008AA8                 mov     eax, [rsp+488h+var_388]
.text:0000000000008AAF                 add     eax, 1
.text:0000000000008AB2                 cdqe
.text:0000000000008AB4                 mov     [rsp+488h+var_2A0], rax
.text:0000000000008ABC                 movsxd  rax, [rsp+488h+var_38C]
.text:0000000000008AC4                 mov     [rsp+488h+var_298], rax
.text:0000000000008ACC                 movsxd  rax, [rsp+488h+var_390]
.text:0000000000008AD4                 mov     [rsp+488h+var_290], rax
.text:0000000000008ADC                 movsxd  rax, [rsp+488h+var_394]
.text:0000000000008AE4                 mov     [rsp+488h+var_288], rax
.text:0000000000008AEC                 movsxd  rax, [rsp+488h+var_398]
.text:0000000000008AF4                 mov     qword ptr [rsp+488h+var_280], rax
.text:0000000000008AFC                 mov     eax, [rsp+488h+var_378]
.text:0000000000008B03                 mov     [rsp+488h+var_3F8], eax
.text:0000000000008B0A                 mov     [rsp+488h+var_237], 0
.text:0000000000008B12                 mov     rdx, [rsp+488h+var_368]
.text:0000000000008B1A                 mov     [rsp+488h+var_230], 0
.text:0000000000008B26                 mov     [rsp+488h+var_228], 0
.text:0000000000008B32                 mov     [rsp+488h+var_210], 0
.text:0000000000008B3E                 mov     [rsp+488h+var_220], 0
.text:0000000000008B4A                 mov     [rsp+488h+var_218], 0
.text:0000000000008B56                 mov     [rsp+488h+var_208], 0
.text:0000000000008B62                 mov     [rsp+488h+var_200], 0
.text:0000000000008B6A                 mov     [rsp+488h+var_1FE], 0
.text:0000000000008B72                 mov     [rsp+488h+var_1FD], 0
.text:0000000000008B7A                 mov     [rsp+488h+var_1FB], 0
.text:0000000000008B82                 mov     [rsp+488h+var_1FC], 0
.text:0000000000008B8A                 mov     [rsp+488h+var_1FA], 0
.text:0000000000008B92                 mov     [rsp+488h+var_1F9], 0
.text:0000000000008B9A                 mov     [rsp+488h+var_1F8], 0
.text:0000000000008BA2                 mov     [rsp+488h+s1], rdx
.text:0000000000008BAA                 mov     [rsp+488h+var_1E8], 10Dh
.text:0000000000008BB5                 mov     [rsp+488h+var_1E4], eax
.text:0000000000008BBC                 mov     [rsp+488h+s2], 0
.text:0000000000008BC8
.text:0000000000008BC8 loc_8BC8:                               ; CODE XREF: parse_datetime2+38A↓j
.text:0000000000008BC8                 movsxd  rax, r14d
.text:0000000000008BCB                 add     rax, rbx
.text:0000000000008BCE                 jo      short loc_8C1C
.text:0000000000008BD0                 mov     rdx, r13
.text:0000000000008BD3                 mov     rsi, r12
.text:0000000000008BD6                 mov     rdi, r15
.text:0000000000008BD9                 mov     qword ptr [rsp+488h+tp.tm_sec], rax
.text:0000000000008BE1                 call    localtime_rz
.text:0000000000008BE6                 test    rax, rax
.text:0000000000008BE9                 jz      short loc_8C0C
.text:0000000000008BEB                 mov     rax, [rsp+488h+var_2E8]
.text:0000000000008BF3                 test    rax, rax
.text:0000000000008BF6                 jz      short loc_8C0C
.text:0000000000008BF8                 mov     edx, [rsp+488h+var_2F8]
.text:0000000000008BFF                 cmp     edx, [rsp+488h+var_1E4]
.text:0000000000008C06                 jnz     loc_92CE
.text:0000000000008C0C
.text:0000000000008C0C loc_8C0C:                               ; CODE XREF: parse_datetime2+359↑j
.text:0000000000008C0C                                         ; parse_datetime2+366↑j
.text:0000000000008C0C                 add     r14d, 76A700h
.text:0000000000008C13                 cmp     r14d, 1DA9C00h
.text:0000000000008C1A                 jnz     short loc_8BC8
.text:0000000000008C1C
.text:0000000000008C1C loc_8C1C:                               ; CODE XREF: parse_datetime2+33E↑j
.text:0000000000008C1C                                         ; parse_datetime2+A64↓j
.text:0000000000008C1C                 mov     rdi, [rsp+488h+s1] ; s1
.text:0000000000008C24                 test    rdi, rdi
.text:0000000000008C27                 jz      short loc_8C56
.text:0000000000008C29                 mov     rsi, [rsp+488h+s2] ; s2
.text:0000000000008C31                 test    rsi, rsi
.text:0000000000008C34                 jz      short loc_8C56
.text:0000000000008C36                 call    _strcmp
.text:0000000000008C3B                 test    eax, eax
.text:0000000000008C3D                 jnz     short loc_8C56
.text:0000000000008C3F                 mov     [rsp+488h+var_1E4], 0FFFFFFFFh
.text:0000000000008C4A                 mov     [rsp+488h+s2], 0
.text:0000000000008C56
.text:0000000000008C56 loc_8C56:                               ; CODE XREF: parse_datetime2+397↑j
.text:0000000000008C56                                         ; parse_datetime2+3A4↑j ...
.text:0000000000008C56                 lea     r13, [rsp+488h+var_2D8]
.text:0000000000008C5E                 mov     rdi, r13
.text:0000000000008C61                 call    yyparse
.text:0000000000008C66                 test    eax, eax
.text:0000000000008C68                 jnz     loc_8D18
.text:0000000000008C6E                 cmp     [rsp+488h+var_1FF], 0
.text:0000000000008C76                 jnz     loc_8EB8
.text:0000000000008C7C                 movzx   r12d, [rsp+488h+var_238]
.text:0000000000008C85                 test    r12b, r12b
.text:0000000000008C88                 jnz     loc_8E88
.text:0000000000008C8E                 mov     rax, [rsp+488h+var_230]
.text:0000000000008C96                 or      rax, [rsp+488h+var_210]
.text:0000000000008C9E                 or      rax, [rsp+488h+var_228]
.text:0000000000008CA6                 mov     rdx, [rsp+488h+var_220]
.text:0000000000008CAE                 or      rax, [rsp+488h+var_218]
.text:0000000000008CB6                 add     rdx, [rsp+488h+var_208]
.text:0000000000008CBE                 or      rax, rdx
.text:0000000000008CC1                 cmp     rax, 1
.text:0000000000008CC5                 jle     loc_92F9
.text:0000000000008CCB
.text:0000000000008CCB loc_8CCB:                               ; CODE XREF: parse_datetime2+92E↓j
.text:0000000000008CCB                                         ; parse_datetime2+972↓j ...
.text:0000000000008CCB                 xor     r12d, r12d
.text:0000000000008CCE
.text:0000000000008CCE loc_8CCE:                               ; CODE XREF: parse_datetime2+494↓j
.text:0000000000008CCE                                         ; parse_datetime2+4CF↓j ...
.text:0000000000008CCE                 cmp     r15, [rsp+488h+var_488]
.text:0000000000008CD2                 jz      short loc_8CDC
.text:0000000000008CD4                 mov     rdi, r15
.text:0000000000008CD7                 call    tzfree
.text:0000000000008CDC
.text:0000000000008CDC loc_8CDC:                               ; CODE XREF: parse_datetime2+442↑j
.text:0000000000008CDC                                         ; parse_datetime2+50C↓j ...
.text:0000000000008CDC                 mov     rdi, [rsp+488h+ptr] ; ptr
.text:0000000000008CE1                 call    _free
.text:0000000000008CE6                 mov     rbx, [rsp+488h+var_40]
.text:0000000000008CEE                 xor     rbx, fs:28h
.text:0000000000008CF7                 mov     eax, r12d
.text:0000000000008CFA                 jnz     loc_9E00
.text:0000000000008D00                 add     rsp, 458h
.text:0000000000008D07                 pop     rbx
.text:0000000000008D08                 pop     rbp
.text:0000000000008D09                 pop     r12
.text:0000000000008D0B                 pop     r13
.text:0000000000008D0D                 pop     r14
.text:0000000000008D0F                 pop     r15
.text:0000000000008D11                 retn
.text:0000000000008D11 ; ---------------------------------------------------------------------------
.text:0000000000008D12                 align 8
.text:0000000000008D18
.text:0000000000008D18 loc_8D18:                               ; CODE XREF: parse_datetime2+3D8↑j
.text:0000000000008D18                 movzx   r12d, [rsp+488h+var_1FF]
.text:0000000000008D21                 test    r12b, r12b
.text:0000000000008D24                 jz      short loc_8CCE
.text:0000000000008D26                 add     rbp, [rsp+488h+var_458]
.text:0000000000008D2B                 mov     rbx, [rsp+488h+var_2D8]
.text:0000000000008D33                 mov     edx, 5          ; category
.text:0000000000008D38                 cmp     rbx, rbp
.text:0000000000008D3B                 jb      loc_9158
.text:0000000000008D41                 lea     rsi, aErrorParsingFa ; "error: parsing failed\n"
.text:0000000000008D48                 xor     edi, edi        ; domainname
.text:0000000000008D4A                 call    _dcgettext
.text:0000000000008D4F                 mov     rdi, rax
.text:0000000000008D52
.text:0000000000008D52 loc_8D52:                               ; CODE XREF: parse_datetime2+8D9↓j
.text:0000000000008D52                 mov     rsi, rbx
.text:0000000000008D55                 xor     eax, eax
.text:0000000000008D57                 xor     r12d, r12d
.text:0000000000008D5A                 call    dbg_printf
.text:0000000000008D5F                 jmp     loc_8CCE
.text:0000000000008D5F ; ---------------------------------------------------------------------------
.text:0000000000008D64                 align 8
.text:0000000000008D68
.text:0000000000008D68 loc_8D68:                               ; CODE XREF: parse_datetime2+E2↑j
.text:0000000000008D68                 cmp     rdi, 64h ; 'd'
.text:0000000000008D6C                 jle     short loc_8DA8
.text:0000000000008D6E                 mov     [rsp+488h+var_450], rcx
.text:0000000000008D73                 call    _malloc
.text:0000000000008D78                 test    rax, rax
.text:0000000000008D7B                 mov     [rsp+488h+src], rax
.text:0000000000008D80                 mov     [rsp+488h+ptr], rax
.text:0000000000008D85                 mov     rcx, [rsp+488h+var_450]
.text:0000000000008D8A                 jnz     short loc_8DBE
.text:0000000000008D8C                 nop     dword ptr [rax+00h]
.text:0000000000008D90
.text:0000000000008D90 loc_8D90:                               ; CODE XREF: parse_datetime2+132↑j
.text:0000000000008D90                 mov     [rsp+488h+ptr], 0
.text:0000000000008D99                 xor     r12d, r12d
.text:0000000000008D9C                 jmp     loc_8CDC
.text:0000000000008D9C ; ---------------------------------------------------------------------------
.text:0000000000008DA1                 align 8
.text:0000000000008DA8
.text:0000000000008DA8 loc_8DA8:                               ; CODE XREF: parse_datetime2+4DC↑j
.text:0000000000008DA8                 lea     rax, [rsp+488h+var_118]
.text:0000000000008DB0                 mov     [rsp+488h+ptr], 0
.text:0000000000008DB9                 mov     [rsp+488h+src], rax
.text:0000000000008DBE
.text:0000000000008DBE loc_8DBE:                               ; CODE XREF: parse_datetime2+4FA↑j
.text:0000000000008DBE                 cmp     r12b, 22h ; '"'
.text:0000000000008DC2                 mov     rdx, [rsp+488h+src]
.text:0000000000008DC7                 jz      short loc_8DF5
.text:0000000000008DC9                 nop     dword ptr [rax+00000000h]
.text:0000000000008DD0
.text:0000000000008DD0 loc_8DD0:                               ; CODE XREF: parse_datetime2+563↓j
.text:0000000000008DD0                 xor     eax, eax
.text:0000000000008DD2                 cmp     r12b, 5Ch ; '\'
.text:0000000000008DD6                 setz    al
.text:0000000000008DD9                 add     rdx, 1
.text:0000000000008DDD                 add     rax, rcx
.text:0000000000008DE0                 movzx   r12d, byte ptr [rax+1]
.text:0000000000008DE5                 movzx   ecx, byte ptr [rax]
.text:0000000000008DE8                 cmp     r12b, 22h ; '"'
.text:0000000000008DEC                 mov     [rdx-1], cl
.text:0000000000008DEF                 lea     rcx, [rax+1]
.text:0000000000008DF3                 jnz     short loc_8DD0
.text:0000000000008DF5
.text:0000000000008DF5 loc_8DF5:                               ; CODE XREF: parse_datetime2+537↑j
.text:0000000000008DF5                 mov     rdi, [rsp+488h+src] ; src
.text:0000000000008DFA                 mov     byte ptr [rdx], 0
.text:0000000000008DFD                 xor     r12d, r12d
.text:0000000000008E00                 mov     [rsp+488h+var_450], rcx
.text:0000000000008E05                 call    tzalloc
.text:0000000000008E0A                 test    rax, rax
.text:0000000000008E0D                 mov     r15, rax
.text:0000000000008E10                 jz      loc_8CDC
.text:0000000000008E16                 mov     rcx, [rsp+488h+var_450]
.text:0000000000008E1B                 movzx   eax, byte ptr [rcx+1]
.text:0000000000008E1F                 lea     r13, [rcx+1]
.text:0000000000008E23                 cmp     al, 20h ; ' '
.text:0000000000008E25                 ja      short loc_8E61
.text:0000000000008E27                 mov     rcx, 100003E00h
.text:0000000000008E31                 mov     esi, 1
.text:0000000000008E36                 bt      rcx, rax
.text:0000000000008E3A                 mov     rdx, rcx
.text:0000000000008E3D                 jb      short loc_8E53
.text:0000000000008E3F                 jmp     short loc_8E61
.text:0000000000008E3F ; ---------------------------------------------------------------------------
.text:0000000000008E41                 align 8
.text:0000000000008E48
.text:0000000000008E48 loc_8E48:                               ; CODE XREF: parse_datetime2+5CF↓j
.text:0000000000008E48                 mov     rax, rsi
.text:0000000000008E4B                 shl     rax, cl
.text:0000000000008E4E                 test    rax, rdx
.text:0000000000008E51                 jz      short loc_8E61
.text:0000000000008E53
.text:0000000000008E53 loc_8E53:                               ; CODE XREF: parse_datetime2+5AD↑j
.text:0000000000008E53                 add     r13, 1
.text:0000000000008E57                 movzx   ecx, byte ptr [r13+0]
.text:0000000000008E5C                 cmp     cl, 20h ; ' '
.text:0000000000008E5F                 jbe     short loc_8E48
.text:0000000000008E61
.text:0000000000008E61 loc_8E61:                               ; CODE XREF: parse_datetime2+595↑j
.text:0000000000008E61                                         ; parse_datetime2+5AF↑j ...
.text:0000000000008E61                 lea     rdx, [rsp+488h+var_398]
.text:0000000000008E69                 mov     rsi, r14
.text:0000000000008E6C                 mov     rdi, r15
.text:0000000000008E6F                 xor     r12d, r12d
.text:0000000000008E72                 call    localtime_rz
.text:0000000000008E77                 test    rax, rax
.text:0000000000008E7A                 jnz     loc_89D1
.text:0000000000008E80                 jmp     loc_8CCE
.text:0000000000008E80 ; ---------------------------------------------------------------------------
.text:0000000000008E85                 align 8
.text:0000000000008E88
.text:0000000000008E88 loc_8E88:                               ; CODE XREF: parse_datetime2+3F8↑j
.text:0000000000008E88                 mov     rax, [rsp+488h+timer]
.text:0000000000008E8D                 movdqu  xmm0, [rsp+488h+var_280]
.text:0000000000008E96                 movups  xmmword ptr [rax], xmm0
.text:0000000000008E99                 jmp     loc_8CCE
.text:0000000000008E99 ; ---------------------------------------------------------------------------
.text:0000000000008E9E                 align 20h
.text:0000000000008EA0
.text:0000000000008EA0 loc_8EA0:                               ; CODE XREF: parse_datetime2+4C↑j
.text:0000000000008EA0                 lea     r14, [rsp+488h+var_428]
.text:0000000000008EA5                 mov     rdi, r14        ; tp
.text:0000000000008EA8                 call    gettime
.text:0000000000008EAD                 jmp     loc_88E2
.text:0000000000008EAD ; ---------------------------------------------------------------------------
.text:0000000000008EB2                 align 8
.text:0000000000008EB8
.text:0000000000008EB8 loc_8EB8:                               ; CODE XREF: parse_datetime2+3E6↑j
.text:0000000000008EB8                 lea     rsi, aInputTimezone ; "input timezone: "
.text:0000000000008EBF                 mov     edx, 5          ; category
.text:0000000000008EC4                 xor     edi, edi        ; domainname
.text:0000000000008EC6                 call    _dcgettext
.text:0000000000008ECB                 mov     rdi, rax
.text:0000000000008ECE                 xor     eax, eax
.text:0000000000008ED0                 call    dbg_printf
.text:0000000000008ED5                 cmp     [rsp+488h+var_238], 0
.text:0000000000008EDD                 mov     edx, 5
.text:0000000000008EE2                 lea     rsi, aTimespecAlways ; "'@timespec' - always UTC"
.text:0000000000008EE9                 jnz     short loc_8F50
.text:0000000000008EEB                 cmp     [rsp+488h+var_208], 0
.text:0000000000008EF4                 mov     edx, 5
.text:0000000000008EF9                 lea     rsi, aParsedDateTime ; "parsed date/time string"
.text:0000000000008F00                 jnz     short loc_8F50
.text:0000000000008F02                 mov     rbx, [rsp+488h+src]
.text:0000000000008F07                 test    rbx, rbx
.text:0000000000008F0A                 jz      short loc_8F44
.text:0000000000008F0C                 cmp     [rsp+488h+var_488], r15
.text:0000000000008F10                 jz      loc_93AF
.text:0000000000008F16                 lea     rsi, aTzSInDateStrin ; "TZ=\"%s\" in date string"
.text:0000000000008F1D                 mov     edx, 5          ; category
.text:0000000000008F22                 xor     edi, edi        ; domainname
.text:0000000000008F24                 call    _dcgettext
.text:0000000000008F29                 mov     rcx, rbx
.text:0000000000008F2C
.text:0000000000008F2C loc_8F2C:                               ; CODE XREF: parse_datetime2+B5E↓j
.text:0000000000008F2C                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000008F33                 mov     rdx, rax
.text:0000000000008F36                 mov     esi, 1
.text:0000000000008F3B                 xor     eax, eax
.text:0000000000008F3D                 call    ___fprintf_chk
.text:0000000000008F42                 jmp     short loc_8F6D
.text:0000000000008F44 ; ---------------------------------------------------------------------------
.text:0000000000008F44
.text:0000000000008F44 loc_8F44:                               ; CODE XREF: parse_datetime2+67A↑j
.text:0000000000008F44                 lea     rsi, aSystemDefault ; "system default"
.text:0000000000008F4B                 mov     edx, 5          ; category
.text:0000000000008F50
.text:0000000000008F50 loc_8F50:                               ; CODE XREF: parse_datetime2+659↑j
.text:0000000000008F50                                         ; parse_datetime2+670↑j ...
.text:0000000000008F50                 xor     edi, edi        ; domainname
.text:0000000000008F52                 call    _dcgettext
.text:0000000000008F57                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000008F5E                 mov     rdx, rax
.text:0000000000008F61                 mov     esi, 1
.text:0000000000008F66                 xor     eax, eax
.text:0000000000008F68                 call    ___fprintf_chk
.text:0000000000008F6D
.text:0000000000008F6D loc_8F6D:                               ; CODE XREF: parse_datetime2+6B2↑j
.text:0000000000008F6D                 cmp     [rsp+488h+var_220], 0
.text:0000000000008F76                 mov     rax, [rsp+488h+var_208]
.text:0000000000008F7E                 jz      short loc_8FC0
.text:0000000000008F80                 test    rax, rax
.text:0000000000008F83                 jnz     loc_9286
.text:0000000000008F89                 mov     r8d, [rsp+488h+var_2C4]
.text:0000000000008F91                 mov     rsi, cs:stderr@@GLIBC_2_2_5
.text:0000000000008F98                 test    r8d, r8d
.text:0000000000008F9B                 jle     short loc_8FD0
.text:0000000000008F9D                 lea     rdi, aDst_0     ; ", dst"
.text:0000000000008FA4                 mov     rcx, rsi        ; s
.text:0000000000008FA7                 mov     edx, 5          ; n
.text:0000000000008FAC                 mov     esi, 1          ; size
.text:0000000000008FB1                 call    _fwrite
.text:0000000000008FB6                 mov     rax, [rsp+488h+var_208]
.text:0000000000008FBE                 xchg    ax, ax
.text:0000000000008FC0
.text:0000000000008FC0 loc_8FC0:                               ; CODE XREF: parse_datetime2+6EE↑j
.text:0000000000008FC0                 test    rax, rax
.text:0000000000008FC3                 jnz     loc_9286
.text:0000000000008FC9                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000008FD0
.text:0000000000008FD0 loc_8FD0:                               ; CODE XREF: parse_datetime2+70B↑j
.text:0000000000008FD0                                         ; parse_datetime2+A2E↓j
.text:0000000000008FD0                 mov     edi, 0Ah        ; c
.text:0000000000008FD5                 call    _fputc
.text:0000000000008FDA                 cmp     [rsp+488h+var_238], 0
.text:0000000000008FE2                 movzx   r12d, [rsp+488h+var_1FF]
.text:0000000000008FEB                 jz      loc_9178
.text:0000000000008FF1                 mov     rax, [rsp+488h+timer]
.text:0000000000008FF6                 movdqu  xmm0, [rsp+488h+var_280]
.text:0000000000008FFF                 movups  xmmword ptr [rax], xmm0
.text:0000000000009002
.text:0000000000009002 loc_9002:                               ; CODE XREF: parse_datetime2+1A64↓j
.text:0000000000009002                                         ; parse_datetime2+1A76↓j ...
.text:0000000000009002                 test    r12b, r12b
.text:0000000000009005                 jz      loc_92C3
.text:000000000000900B                 mov     edx, 5
.text:0000000000009010                 lea     rsi, aTimezoneSystem ; "timezone: system default\n"
.text:0000000000009017                 cmp     [rsp+488h+src], 0
.text:000000000000901D                 jz      loc_9222
.text:0000000000009023                 mov     rsi, [rsp+488h+src]
.text:0000000000009028                 lea     rdi, string+3   ; "UTC0"
.text:000000000000902F                 mov     ecx, 5
.text:0000000000009034                 mov     edx, 5          ; category
.text:0000000000009039                 repe cmpsb
.text:000000000000903B                 setnbe  al
.text:000000000000903E                 sbb     al, 0
.text:0000000000009040                 test    al, al
.text:0000000000009042                 jz      loc_921B
.text:0000000000009048                 lea     rsi, aTimezoneTzSEnv ; "timezone: TZ=\"%s\" environment value\n"
.text:000000000000904F                 xor     edi, edi        ; domainname
.text:0000000000009051                 call    _dcgettext
.text:0000000000009056                 mov     rsi, [rsp+488h+src]
.text:000000000000905B                 mov     rdi, rax
.text:000000000000905E                 xor     eax, eax
.text:0000000000009060                 call    dbg_printf
.text:0000000000009065
.text:0000000000009065 loc_9065:                               ; CODE XREF: parse_datetime2+9A3↓j
.text:0000000000009065                 mov     r14, [rsp+488h+timer]
.text:000000000000906A                 lea     rsi, aFinalLd09dEpoc ; "final: %ld.%09d (epoch-seconds)\n"
.text:0000000000009071                 xor     edi, edi        ; domainname
.text:0000000000009073                 mov     edx, 5          ; category
.text:0000000000009078                 mov     rbx, [r14]
.text:000000000000907B                 mov     rbp, [r14+8]
.text:000000000000907F                 call    _dcgettext
.text:0000000000009084                 mov     rdi, rax
.text:0000000000009087                 xor     eax, eax
.text:0000000000009089                 mov     rsi, rbx
.text:000000000000908C                 lea     rbx, [rsp+488h+tp]
.text:0000000000009094                 mov     edx, ebp
.text:0000000000009096                 call    dbg_printf
.text:000000000000909B                 mov     rsi, rbx        ; tp
.text:000000000000909E                 mov     rdi, r14        ; timer
.text:00000000000090A1                 call    _gmtime_r
.text:00000000000090A6                 test    rax, rax
.text:00000000000090A9                 jz      short loc_90E0
.text:00000000000090AB                 lea     rdx, [rsp+488h+var_188]
.text:00000000000090B3                 mov     rdi, rbx
.text:00000000000090B6                 xor     esi, esi
.text:00000000000090B8                 call    debug_strfdatetime_constprop_12
.text:00000000000090BD                 lea     rsi, aFinalSUtc ; "final: %s (UTC)\n"
.text:00000000000090C4                 mov     rbx, rax
.text:00000000000090C7                 xor     edi, edi        ; domainname
.text:00000000000090C9                 mov     edx, 5          ; category
.text:00000000000090CE                 call    _dcgettext
.text:00000000000090D3                 mov     rsi, rbx
.text:00000000000090D6                 mov     rdi, rax
.text:00000000000090D9                 xor     eax, eax
.text:00000000000090DB                 call    dbg_printf
.text:00000000000090E0
.text:00000000000090E0 loc_90E0:                               ; CODE XREF: parse_datetime2+819↑j
.text:00000000000090E0                 lea     rbx, [rsp+488h+var_318]
.text:00000000000090E8                 mov     rsi, [rsp+488h+timer]
.text:00000000000090ED                 mov     rdi, r15
.text:00000000000090F0                 mov     rdx, rbx
.text:00000000000090F3                 call    localtime_rz
.text:00000000000090F8                 test    rax, rax
.text:00000000000090FB                 jz      loc_8CCE
.text:0000000000009101                 mov     edi, [rsp+488h+var_2F0]
.text:0000000000009108                 lea     rsi, [rsp+488h+var_1A8]
.text:0000000000009110                 call    time_zone_str
.text:0000000000009115                 lea     rdx, [rsp+488h+var_188]
.text:000000000000911D                 xor     esi, esi
.text:000000000000911F                 mov     rdi, rbx
.text:0000000000009122                 mov     rbp, rax
.text:0000000000009125                 call    debug_strfdatetime_constprop_12
.text:000000000000912A                 lea     rsi, aFinalSUtcS ; "final: %s (UTC%s)\n"
.text:0000000000009131                 mov     rbx, rax
.text:0000000000009134                 xor     edi, edi        ; domainname
.text:0000000000009136                 mov     edx, 5          ; category
.text:000000000000913B                 call    _dcgettext
.text:0000000000009140                 mov     rdx, rbp
.text:0000000000009143                 mov     rdi, rax
.text:0000000000009146                 mov     rsi, rbx
.text:0000000000009149                 xor     eax, eax
.text:000000000000914B                 call    dbg_printf
.text:0000000000009150                 jmp     loc_8CCE
.text:0000000000009150 ; ---------------------------------------------------------------------------
.text:0000000000009155                 align 8
.text:0000000000009158
.text:0000000000009158 loc_9158:                               ; CODE XREF: parse_datetime2+4AB↑j
.text:0000000000009158                 lea     rsi, aErrorParsingFa_0 ; "error: parsing failed, stopped at '%s'"...
.text:000000000000915F                 xor     edi, edi        ; domainname
.text:0000000000009161                 call    _dcgettext
.text:0000000000009166                 mov     rdi, rax
.text:0000000000009169                 jmp     loc_8D52
.text:0000000000009169 ; ---------------------------------------------------------------------------
.text:000000000000916E                 align 10h
.text:0000000000009170
.text:0000000000009170 loc_9170:                               ; CODE XREF: parse_datetime2+64↑j
.text:0000000000009170                 mov     r13, rbp
.text:0000000000009173                 jmp     loc_8939
.text:0000000000009178 ; ---------------------------------------------------------------------------
.text:0000000000009178
.text:0000000000009178 loc_9178:                               ; CODE XREF: parse_datetime2+75B↑j
.text:0000000000009178                 mov     rsi, [rsp+488h+var_210]
.text:0000000000009180                 mov     rcx, [rsp+488h+var_230]
.text:0000000000009188                 mov     rdx, [rsp+488h+var_208]
.text:0000000000009190                 add     rdx, [rsp+488h+var_220]
.text:0000000000009198                 mov     rax, rsi
.text:000000000000919B                 or      rax, rcx
.text:000000000000919E                 or      rax, [rsp+488h+var_228]
.text:00000000000091A6                 or      rax, [rsp+488h+var_218]
.text:00000000000091AE                 or      rax, rdx
.text:00000000000091B1                 cmp     rax, 1
.text:00000000000091B5                 jle     loc_92F9
.text:00000000000091BB                 test    r12b, r12b
.text:00000000000091BE                 jz      loc_8CCB
.text:00000000000091C4                 cmp     rsi, 1
.text:00000000000091C8                 jg      loc_926B
.text:00000000000091CE
.text:00000000000091CE loc_91CE:                               ; CODE XREF: parse_datetime2+9F1↓j
.text:00000000000091CE                 cmp     rcx, 1
.text:00000000000091D2                 jg      loc_9258
.text:00000000000091D8
.text:00000000000091D8 loc_91D8:                               ; CODE XREF: parse_datetime2+9D6↓j
.text:00000000000091D8                 cmp     [rsp+488h+var_228], 1
.text:00000000000091E1                 jg      short loc_9248
.text:00000000000091E3
.text:00000000000091E3 loc_91E3:                               ; CODE XREF: parse_datetime2+9C6↓j
.text:00000000000091E3                 cmp     [rsp+488h+var_218], 1
.text:00000000000091EC                 jg      short loc_9238
.text:00000000000091EE
.text:00000000000091EE loc_91EE:                               ; CODE XREF: parse_datetime2+9B6↓j
.text:00000000000091EE                 mov     rax, [rsp+488h+var_208]
.text:00000000000091F6                 add     rax, [rsp+488h+var_220]
.text:00000000000091FE                 cmp     rax, 1
.text:0000000000009202                 jle     loc_8CCB
.text:0000000000009208                 lea     rdi, aErrorSeenMulti ; "error: seen multiple time-zone parts\n"
.text:000000000000920F                 xor     eax, eax
.text:0000000000009211                 call    dbg_printf
.text:0000000000009216                 jmp     loc_8CCB
.text:000000000000921B ; ---------------------------------------------------------------------------
.text:000000000000921B
.text:000000000000921B loc_921B:                               ; CODE XREF: parse_datetime2+7B2↑j
.text:000000000000921B                 lea     rsi, aTimezoneUniver ; "timezone: Universal Time\n"
.text:0000000000009222
.text:0000000000009222 loc_9222:                               ; CODE XREF: parse_datetime2+78D↑j
.text:0000000000009222                 xor     edi, edi        ; domainname
.text:0000000000009224                 call    _dcgettext
.text:0000000000009229                 mov     rdi, rax
.text:000000000000922C                 xor     eax, eax
.text:000000000000922E                 call    dbg_printf
.text:0000000000009233                 jmp     loc_9065
.text:0000000000009238 ; ---------------------------------------------------------------------------
.text:0000000000009238
.text:0000000000009238 loc_9238:                               ; CODE XREF: parse_datetime2+95C↑j
.text:0000000000009238                 lea     rdi, aErrorSeenMulti_0 ; "error: seen multiple daylight-saving pa"...
.text:000000000000923F                 xor     eax, eax
.text:0000000000009241                 call    dbg_printf
.text:0000000000009246                 jmp     short loc_91EE
.text:0000000000009248 ; ---------------------------------------------------------------------------
.text:0000000000009248
.text:0000000000009248 loc_9248:                               ; CODE XREF: parse_datetime2+951↑j
.text:0000000000009248                 lea     rdi, aErrorSeenMulti_1 ; "error: seen multiple days parts\n"
.text:000000000000924F                 xor     eax, eax
.text:0000000000009251                 call    dbg_printf
.text:0000000000009256                 jmp     short loc_91E3
.text:0000000000009258 ; ---------------------------------------------------------------------------
.text:0000000000009258
.text:0000000000009258 loc_9258:                               ; CODE XREF: parse_datetime2+942↑j
.text:0000000000009258                 lea     rdi, aErrorSeenMulti_2 ; "error: seen multiple date parts\n"
.text:000000000000925F                 xor     eax, eax
.text:0000000000009261                 call    dbg_printf
.text:0000000000009266                 jmp     loc_91D8
.text:000000000000926B ; ---------------------------------------------------------------------------
.text:000000000000926B
.text:000000000000926B loc_926B:                               ; CODE XREF: parse_datetime2+938↑j
.text:000000000000926B                 lea     rdi, aErrorSeenMulti_3 ; "error: seen multiple time parts\n"
.text:0000000000009272                 xor     eax, eax
.text:0000000000009274                 call    dbg_printf
.text:0000000000009279                 mov     rcx, [rsp+488h+var_230]
.text:0000000000009281                 jmp     loc_91CE
.text:0000000000009286 ; ---------------------------------------------------------------------------
.text:0000000000009286
.text:0000000000009286 loc_9286:                               ; CODE XREF: parse_datetime2+6F3↑j
.text:0000000000009286                                         ; parse_datetime2+733↑j
.text:0000000000009286                 mov     edi, [rsp+488h+var_2C0]
.text:000000000000928D                 lea     rsi, [rsp+488h+var_1A8]
.text:0000000000009295                 call    time_zone_str
.text:000000000000929A                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000092A1                 lea     rdx, aS_1       ; " (%s)"
.text:00000000000092A8                 mov     rcx, rax
.text:00000000000092AB                 mov     esi, 1
.text:00000000000092B0                 xor     eax, eax
.text:00000000000092B2                 call    ___fprintf_chk
.text:00000000000092B7                 mov     rsi, cs:stderr@@GLIBC_2_2_5
.text:00000000000092BE                 jmp     loc_8FD0
.text:00000000000092C3 ; ---------------------------------------------------------------------------
.text:00000000000092C3
.text:00000000000092C3 loc_92C3:                               ; CODE XREF: parse_datetime2+775↑j
.text:00000000000092C3                 mov     r12d, 1
.text:00000000000092C9                 jmp     loc_8CCE
.text:00000000000092CE ; ---------------------------------------------------------------------------
.text:00000000000092CE
.text:00000000000092CE loc_92CE:                               ; CODE XREF: parse_datetime2+376↑j
.text:00000000000092CE                 mov     [rsp+488h+s2], rax
.text:00000000000092D6                 mov     [rsp+488h+var_1D8], 10Dh
.text:00000000000092E1                 mov     [rsp+488h+var_1D4], edx
.text:00000000000092E8                 mov     [rsp+488h+var_1D0], 0
.text:00000000000092F4                 jmp     loc_8C1C
.text:00000000000092F9 ; ---------------------------------------------------------------------------
.text:00000000000092F9
.text:00000000000092F9 loc_92F9:                               ; CODE XREF: parse_datetime2+435↑j
.text:00000000000092F9                                         ; parse_datetime2+925↑j
.text:00000000000092F9                 mov     rbp, [rsp+488h+var_2B0]
.text:0000000000009301                 test    rbp, rbp
.text:0000000000009304                 js      loc_9838
.text:000000000000930A                 cmp     [rsp+488h+var_2A8], 2
.text:0000000000009313                 jz      loc_9868
.text:0000000000009319
.text:0000000000009319 loc_9319:                               ; CODE XREF: parse_datetime2+FF9↓j
.text:0000000000009319                                         ; parse_datetime2+122E↓j
.text:0000000000009319                 xor     ebx, ebx
.text:000000000000931B                 cmp     rbp, 76Ch
.text:0000000000009322                 lea     rax, [rbp-76Ch]
.text:0000000000009329                 jnb     loc_9858
.text:000000000000932F                 test    rax, rax
.text:0000000000009332                 jns     loc_984A
.text:0000000000009338
.text:0000000000009338 loc_9338:                               ; CODE XREF: parse_datetime2+FB4↓j
.text:0000000000009338                                         ; parse_datetime2+FBF↓j ...
.text:0000000000009338                 movsxd  rdx, eax
.text:000000000000933B                 mov     [rsp+488h+var_404], eax
.text:0000000000009342                 cmp     rax, rdx
.text:0000000000009345                 mov     edx, 1
.text:000000000000934A                 cmovnz  ebx, edx
.text:000000000000934D                 and     ebx, 1
.text:0000000000009350                 test    bl, bl
.text:0000000000009352                 jz      loc_93F3
.text:0000000000009358                 test    r12b, r12b
.text:000000000000935B                 jz      short loc_937D
.text:000000000000935D                 lea     rsi, aErrorOutOfRang ; "error: out-of-range year %ld\n"
.text:0000000000009364                 xor     edi, edi        ; domainname
.text:0000000000009366                 mov     edx, 5          ; category
.text:000000000000936B                 call    _dcgettext
.text:0000000000009370                 mov     rsi, rbp
.text:0000000000009373                 mov     rdi, rax
.text:0000000000009376                 xor     eax, eax
.text:0000000000009378                 call    dbg_printf
.text:000000000000937D
.text:000000000000937D loc_937D:                               ; CODE XREF: parse_datetime2+ACB↑j
.text:000000000000937D                 movzx   eax, [rsp+488h+var_1FF]
.text:0000000000009385
.text:0000000000009385 loc_9385:                               ; CODE XREF: parse_datetime2+B96↓j
.text:0000000000009385                                         ; parse_datetime2+BB6↓j
.text:0000000000009385                 test    al, al
.text:0000000000009387                 mov     edx, 5          ; category
.text:000000000000938C                 lea     rsi, aErrorYearMonth ; "error: year, month, or day overflow\n"
.text:0000000000009393                 jz      loc_8CCB
.text:0000000000009399
.text:0000000000009399 loc_9399:                               ; CODE XREF: parse_datetime2+1B42↓j
.text:0000000000009399                 xor     edi, edi        ; domainname
.text:000000000000939B                 call    _dcgettext
.text:00000000000093A0                 mov     rdi, rax
.text:00000000000093A3                 xor     eax, eax
.text:00000000000093A5                 call    dbg_printf
.text:00000000000093AA                 jmp     loc_8CCB
.text:00000000000093AF ; ---------------------------------------------------------------------------
.text:00000000000093AF
.text:00000000000093AF loc_93AF:                               ; CODE XREF: parse_datetime2+680↑j
.text:00000000000093AF                 mov     rsi, [rsp+488h+src]
.text:00000000000093B4                 lea     rdi, string+3   ; "UTC0"
.text:00000000000093BB                 mov     ecx, 5
.text:00000000000093C0                 mov     edx, 5          ; category
.text:00000000000093C5                 repe cmpsb
.text:00000000000093C7                 lea     rsi, aTzUtc0Environm ; "TZ=\"UTC0\" environment value or -u"
.text:00000000000093CE                 setnbe  al
.text:00000000000093D1                 sbb     al, 0
.text:00000000000093D3                 test    al, al
.text:00000000000093D5                 jz      loc_8F50
.text:00000000000093DB                 lea     rsi, aTzSEnvironment ; "TZ=\"%s\" environment value"
.text:00000000000093E2                 xor     edi, edi        ; domainname
.text:00000000000093E4                 call    _dcgettext
.text:00000000000093E9                 mov     rcx, [rsp+488h+src]
.text:00000000000093EE                 jmp     loc_8F2C
.text:00000000000093F3 ; ---------------------------------------------------------------------------
.text:00000000000093F3
.text:00000000000093F3 loc_93F3:                               ; CODE XREF: parse_datetime2+AC2↑j
.text:00000000000093F3                 mov     rax, [rsp+488h+var_2A0]
.text:00000000000093FB                 xor     edx, edx
.text:00000000000093FD                 add     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009401                 jo      loc_A45A
.text:0000000000009407
.text:0000000000009407 loc_9407:                               ; CODE XREF: parse_datetime2+1BCF↓j
.text:0000000000009407                 movsxd  rcx, eax
.text:000000000000940A                 mov     [rsp+488h+var_408], eax
.text:0000000000009411                 cmp     rax, rcx
.text:0000000000009414                 mov     ecx, 1
.text:0000000000009419                 movzx   eax, [rsp+488h+var_1FF]
.text:0000000000009421                 cmovnz  edx, ecx
.text:0000000000009424                 test    edx, edx
.text:0000000000009426                 jnz     loc_9385
.text:000000000000942C                 mov     rdx, [rsp+488h+var_298]
.text:0000000000009434                 movsxd  rcx, edx
.text:0000000000009437                 mov     [rsp+488h+var_40C], edx
.text:000000000000943B                 cmp     rdx, rcx
.text:000000000000943E                 setnz   r12b
.text:0000000000009442                 movzx   r12d, r12b
.text:0000000000009446                 jnz     loc_9385
.text:000000000000944C                 cmp     [rsp+488h+var_210], 0
.text:0000000000009455                 jnz     loc_9AC3
.text:000000000000945B                 cmp     [rsp+488h+var_237], 0
.text:0000000000009463                 jz      loc_9B72
.text:0000000000009469                 cmp     [rsp+488h+var_230], 0
.text:0000000000009472                 jnz     loc_9B72
.text:0000000000009478                 cmp     [rsp+488h+var_228], 0
.text:0000000000009481                 jz      loc_9AC3
.text:0000000000009487                 test    al, al
.text:0000000000009489                 mov     [rsp+488h+var_418], 0
.text:0000000000009492                 mov     [rsp+488h+var_410], 0
.text:000000000000949A                 mov     qword ptr [rsp+488h+var_280+8], 0
.text:00000000000094A6                 jnz     loc_9B93
.text:00000000000094AC
.text:00000000000094AC loc_94AC:                               ; CODE XREF: parse_datetime2+12B6↓j
.text:00000000000094AC                 mov     [rsp+488h+var_3F8], 0FFFFFFFFh
.text:00000000000094B7
.text:00000000000094B7 loc_94B7:                               ; CODE XREF: parse_datetime2+12B0↓j
.text:00000000000094B7                 cmp     [rsp+488h+var_220], 0
.text:00000000000094C0                 jnz     loc_9B4B
.text:00000000000094C6                 mov     eax, [rsp+488h+var_3F8]
.text:00000000000094CD
.text:00000000000094CD loc_94CD:                               ; CODE XREF: parse_datetime2+12C9↓j
.text:00000000000094CD                 mov     edx, dword ptr [rsp+488h+var_418]
.text:00000000000094D1                 mov     [rsp+488h+var_3B8], eax
.text:00000000000094D8                 lea     rax, [rsp+488h+var_418]
.text:00000000000094DD                 mov     rdi, r15
.text:00000000000094E0                 mov     [rsp+488h+var_400], 0FFFFFFFFh
.text:00000000000094EB                 mov     rsi, rax
.text:00000000000094EE                 mov     rbp, rax
.text:00000000000094F1                 mov     [rsp+488h+var_470], rax
.text:00000000000094F6                 mov     [rsp+488h+var_3D8], edx
.text:00000000000094FD                 mov     edx, dword ptr [rsp+488h+var_418+4]
.text:0000000000009501                 mov     [rsp+488h+var_3D4], edx
.text:0000000000009508                 mov     edx, [rsp+488h+var_410]
.text:000000000000950C                 mov     [rsp+488h+var_3D0], edx
.text:0000000000009513                 mov     edx, [rsp+488h+var_40C]
.text:0000000000009517                 mov     [rsp+488h+var_3CC], edx
.text:000000000000951E                 mov     edx, [rsp+488h+var_408]
.text:0000000000009525                 mov     [rsp+488h+var_3C8], edx
.text:000000000000952C                 mov     edx, [rsp+488h+var_404]
.text:0000000000009533                 mov     [rsp+488h+var_3C4], edx
.text:000000000000953A                 call    mktime_z
.text:000000000000953F                 mov     ecx, [rsp+488h+var_400]
.text:0000000000009546                 mov     r14, rax
.text:0000000000009549                 test    ecx, ecx
.text:000000000000954B                 js      short loc_9565
.text:000000000000954D                 lea     rdi, [rsp+488h+var_3D8]
.text:0000000000009555                 mov     rsi, rbp
.text:0000000000009558                 call    mktime_ok_part_6
.text:000000000000955D                 test    al, al
.text:000000000000955F                 jnz     loc_9988
.text:0000000000009565
.text:0000000000009565 loc_9565:                               ; CODE XREF: parse_datetime2+CBB↑j
.text:0000000000009565                 mov     rax, [rsp+488h+var_208]
.text:000000000000956D                 test    rax, rax
.text:0000000000009570                 mov     [rsp+488h+var_458], rax
.text:0000000000009575                 jnz     loc_988E
.text:000000000000957B
.text:000000000000957B loc_957B:                               ; CODE XREF: parse_datetime2+10F2↓j
.text:000000000000957B                                         ; parse_datetime2+1C1C↓j
.text:000000000000957B                 mov     r10d, [rsp+488h+var_3D8]
.text:0000000000009583                 mov     r9d, dword ptr [rsp+488h+var_418]
.text:0000000000009588                 mov     eax, [rsp+488h+var_404]
.text:000000000000958F                 mov     ebx, [rsp+488h+var_3D0]
.text:0000000000009596                 mov     esi, [rsp+488h+var_410]
.text:000000000000959A                 mov     edi, [rsp+488h+var_3CC]
.text:00000000000095A1                 mov     edx, [rsp+488h+var_40C]
.text:00000000000095A5                 mov     r11d, [rsp+488h+var_3C4]
.text:00000000000095AD                 cmp     r10d, r9d
.text:00000000000095B0                 mov     dword ptr [rsp+488h+timer], eax
.text:00000000000095B4                 mov     r8d, [rsp+488h+var_3D4]
.text:00000000000095BC                 mov     ecx, dword ptr [rsp+488h+var_418+4]
.text:00000000000095C0                 mov     dword ptr [rsp+488h+var_450], ebx
.text:00000000000095C4                 mov     [rsp+488h+var_448], esi
.text:00000000000095C8                 mov     dword ptr [rsp+488h+src], edi
.text:00000000000095CC                 mov     dword ptr [rsp+488h+var_468], edx
.text:00000000000095D0                 mov     r14d, [rsp+488h+var_3C8]
.text:00000000000095D8                 mov     ebp, [rsp+488h+var_408]
.text:00000000000095DF                 mov     [rsp+488h+var_444], r11d
.text:00000000000095E4                 movzx   eax, [rsp+488h+var_1FF]
.text:00000000000095EC                 jnz     loc_A15D
.text:00000000000095F2                 cmp     r8d, ecx
.text:00000000000095F5                 jnz     loc_A15D
.text:00000000000095FB                 cmp     edi, edx
.text:00000000000095FD                 jnz     loc_A15D
.text:0000000000009603                 cmp     ebx, esi
.text:0000000000009605                 jz      loc_A15D
.text:000000000000960B                 cmp     r14d, ebp
.text:000000000000960E                 jnz     loc_A15D
.text:0000000000009614                 mov     ebx, dword ptr [rsp+488h+timer]
.text:0000000000009618                 cmp     r11d, ebx
.text:000000000000961B                 jnz     loc_A15D
.text:0000000000009621                 test    al, al
.text:0000000000009623                 jz      loc_8CCB
.text:0000000000009629                 lea     rsi, aErrorInvalidDa ; "error: invalid date/time value:\n"
.text:0000000000009630                 mov     edx, 5          ; category
.text:0000000000009635                 xor     edi, edi        ; domainname
.text:0000000000009637                 lea     rbx, [rsp+488h+var_A8]
.text:000000000000963F                 call    _dcgettext
.text:0000000000009644                 mov     rdi, rax
.text:0000000000009647                 xor     eax, eax
.text:0000000000009649                 call    dbg_printf
.text:000000000000964E                 lea     rdi, [rsp+488h+var_3D8]
.text:0000000000009656                 mov     rdx, rbx
.text:0000000000009659                 mov     rsi, r13
.text:000000000000965C                 call    debug_strfdatetime_constprop_12
.text:0000000000009661                 lea     rsi, aUserProvidedTi ; "    user provided time: '%s'\n"
.text:0000000000009668                 mov     r12, rax
.text:000000000000966B                 mov     edx, 5          ; category
.text:0000000000009670                 xor     edi, edi        ; domainname
.text:0000000000009672                 call    _dcgettext
.text:0000000000009677                 mov     rsi, r12
.text:000000000000967A                 mov     rdi, rax
.text:000000000000967D                 xor     eax, eax
.text:000000000000967F                 call    dbg_printf
.text:0000000000009684                 mov     rdi, [rsp+488h+var_470]
.text:0000000000009689                 mov     rdx, rbx
.text:000000000000968C                 mov     rsi, r13
.text:000000000000968F                 call    debug_strfdatetime_constprop_12
.text:0000000000009694                 lea     rsi, aNormalizedTime ; "       normalized time: '%s'\n"
.text:000000000000969B                 mov     r12, rax
.text:000000000000969E                 mov     edx, 5          ; category
.text:00000000000096A3                 xor     edi, edi        ; domainname
.text:00000000000096A5                 call    _dcgettext
.text:00000000000096AA                 mov     rsi, r12
.text:00000000000096AD                 mov     rdi, rax
.text:00000000000096B0                 xor     eax, eax
.text:00000000000096B2                 call    dbg_printf
.text:00000000000096B7                 lea     rsi, aUserProvidedTi+1Dh ; ""
.text:00000000000096BE                 mov     r12d, 1
.text:00000000000096C4                 mov     rax, rsi
.text:00000000000096C7
.text:00000000000096C7 loc_96C7:                               ; CODE XREF: parse_datetime2+19AC↓j
.text:00000000000096C7                 mov     r11d, [rsp+488h+var_448]
.text:00000000000096CC                 cmp     dword ptr [rsp+488h+var_450], r11d
.text:00000000000096D1                 lea     rcx, aUserProvidedTi+1Dh ; ""
.text:00000000000096D8                 lea     rdx, asc_1317D+2 ; "--"
.text:00000000000096DF                 mov     r11d, dword ptr [rsp+488h+var_468]
.text:00000000000096E4                 lea     r9, asc_1317D   ; "----"
.text:00000000000096EB                 mov     r8, rcx
.text:00000000000096EE                 mov     rdi, rcx
.text:00000000000096F1                 cmovnz  r8, rdx
.text:00000000000096F5                 cmp     dword ptr [rsp+488h+src], r11d
.text:00000000000096FA                 mov     r11d, dword ptr [rsp+488h+timer]
.text:00000000000096FF                 cmovnz  rdi, rdx
.text:0000000000009703                 cmp     r14d, ebp
.text:0000000000009706                 cmovz   rdx, rcx
.text:000000000000970A                 cmp     [rsp+488h+var_444], r11d
.text:000000000000970F                 cmovz   r9, rcx
.text:0000000000009713                 sub     rsp, 8
.text:0000000000009717                 mov     ecx, 64h ; 'd'
.text:000000000000971C                 push    rsi
.text:000000000000971D                 push    rax
.text:000000000000971E                 mov     esi, 64h ; 'd'
.text:0000000000009723                 push    r8
.text:0000000000009725                 lea     r8, a4s2s2s2s2s2s ; "                                 %4s %2"...
.text:000000000000972C                 push    rdi
.text:000000000000972D                 push    rdx
.text:000000000000972E                 mov     rdi, rbx
.text:0000000000009731                 mov     edx, 1
.text:0000000000009736                 xor     eax, eax
.text:0000000000009738                 call    ___snprintf_chk
.text:000000000000973D                 add     rsp, 30h
.text:0000000000009741                 mov     eax, 34h ; '4'
.text:0000000000009746                 jmp     short loc_9752
.text:0000000000009748 ; ---------------------------------------------------------------------------
.text:0000000000009748
.text:0000000000009748 loc_9748:                               ; CODE XREF: parse_datetime2+EC6↓j
.text:0000000000009748                 sub     rax, 1
.text:000000000000974C                 cmp     byte ptr [rbx+rax], 20h ; ' '
.text:0000000000009750                 jnz     short loc_9758
.text:0000000000009752
.text:0000000000009752 loc_9752:                               ; CODE XREF: parse_datetime2+EB6↑j
.text:0000000000009752                 test    eax, eax
.text:0000000000009754                 mov     edx, eax
.text:0000000000009756                 jnz     short loc_9748
.text:0000000000009758
.text:0000000000009758 loc_9758:                               ; CODE XREF: parse_datetime2+EC0↑j
.text:0000000000009758                 movsxd  rax, edx
.text:000000000000975B                 lea     rdi, aS_2+7     ; "%s\n"
.text:0000000000009762                 mov     rsi, rbx
.text:0000000000009765                 mov     byte ptr [rsp+rax+488h+var_A8], 0
.text:000000000000976D                 xor     eax, eax
.text:000000000000976F                 call    dbg_printf
.text:0000000000009774                 lea     rsi, aPossibleReason ; "     possible reasons:\n"
.text:000000000000977B                 xor     edi, edi        ; domainname
.text:000000000000977D                 mov     edx, 5          ; category
.text:0000000000009782                 call    _dcgettext
.text:0000000000009787                 mov     rdi, rax
.text:000000000000978A                 xor     eax, eax
.text:000000000000978C                 call    dbg_printf
.text:0000000000009791                 test    r12d, r12d
.text:0000000000009794                 jz      short loc_97B3
.text:0000000000009796                 lea     rsi, aNonExistingDue ; "       non-existing due to daylight-sav"...
.text:000000000000979D                 xor     edi, edi        ; domainname
.text:000000000000979F                 mov     edx, 5          ; category
.text:00000000000097A4                 call    _dcgettext
.text:00000000000097A9                 mov     rdi, rax
.text:00000000000097AC                 xor     eax, eax
.text:00000000000097AE                 call    dbg_printf
.text:00000000000097B3
.text:00000000000097B3 loc_97B3:                               ; CODE XREF: parse_datetime2+F04↑j
.text:00000000000097B3                 mov     ebx, dword ptr [rsp+488h+var_468]
.text:00000000000097B7                 cmp     dword ptr [rsp+488h+src], ebx
.text:00000000000097BB                 jz      short loc_97DF
.text:00000000000097BD                 cmp     r14d, ebp
.text:00000000000097C0                 jz      short loc_97DF
.text:00000000000097C2                 lea     rsi, aInvalidDayMont ; "       invalid day/month combination;\n"
.text:00000000000097C9                 xor     edi, edi        ; domainname
.text:00000000000097CB                 mov     edx, 5          ; category
.text:00000000000097D0                 call    _dcgettext
.text:00000000000097D5                 mov     rdi, rax
.text:00000000000097D8                 xor     eax, eax
.text:00000000000097DA                 call    dbg_printf
.text:00000000000097DF
.text:00000000000097DF loc_97DF:                               ; CODE XREF: parse_datetime2+F2B↑j
.text:00000000000097DF                                         ; parse_datetime2+F30↑j
.text:00000000000097DF                 lea     rsi, aNumericValuesO ; "       numeric values overflow;\n"
.text:00000000000097E6                 mov     edx, 5          ; category
.text:00000000000097EB                 xor     edi, edi        ; domainname
.text:00000000000097ED                 call    _dcgettext
.text:00000000000097F2                 mov     rdi, rax
.text:00000000000097F5                 xor     eax, eax
.text:00000000000097F7                 call    dbg_printf
.text:00000000000097FC                 cmp     [rsp+488h+var_458], 0
.text:0000000000009802                 mov     edx, 5          ; category
.text:0000000000009807                 jz      loc_A5E6
.text:000000000000980D                 lea     rsi, aIncorrectTimez ; "incorrect timezone"
.text:0000000000009814                 xor     edi, edi        ; domainname
.text:0000000000009816                 call    _dcgettext
.text:000000000000981B
.text:000000000000981B loc_981B:                               ; CODE XREF: parse_datetime2+1D64↓j
.text:000000000000981B                 lea     rdi, aS_2       ; "       %s\n"
.text:0000000000009822                 mov     rsi, rax
.text:0000000000009825                 xor     eax, eax
.text:0000000000009827                 call    dbg_printf
.text:000000000000982C                 jmp     loc_8CCB
.text:000000000000982C ; ---------------------------------------------------------------------------
.text:0000000000009831                 align 8
.text:0000000000009838
.text:0000000000009838 loc_9838:                               ; CODE XREF: parse_datetime2+A74↑j
.text:0000000000009838                 mov     rax, 0FFFFFFFFFFFFF894h
.text:000000000000983F                 xor     ebx, ebx
.text:0000000000009841                 sub     rax, rbp
.text:0000000000009844                 jno     loc_9338
.text:000000000000984A
.text:000000000000984A loc_984A:                               ; CODE XREF: parse_datetime2+AA2↑j
.text:000000000000984A                                         ; parse_datetime2+FD1↓j
.text:000000000000984A                 mov     ebx, 1
.text:000000000000984F                 jmp     loc_9338
.text:000000000000984F ; ---------------------------------------------------------------------------
.text:0000000000009854                 align 8
.text:0000000000009858
.text:0000000000009858 loc_9858:                               ; CODE XREF: parse_datetime2+A99↑j
.text:0000000000009858                 test    rax, rax
.text:000000000000985B                 jns     loc_9338
.text:0000000000009861                 jmp     short loc_984A
.text:0000000000009861 ; ---------------------------------------------------------------------------
.text:0000000000009863                 align 8
.text:0000000000009868
.text:0000000000009868 loc_9868:                               ; CODE XREF: parse_datetime2+A83↑j
.text:0000000000009868                 cmp     rbp, 44h ; 'D'
.text:000000000000986C                 mov     ebx, 76Ch
.text:0000000000009871                 mov     eax, 7D0h
.text:0000000000009876                 cmovle  rbx, rax
.text:000000000000987A                 add     rbx, rbp
.text:000000000000987D                 test    r12b, r12b
.text:0000000000009880                 jnz     loc_9A98
.text:0000000000009886                 mov     rbp, rbx
.text:0000000000009889                 jmp     loc_9319
.text:000000000000988E ; ---------------------------------------------------------------------------
.text:000000000000988E
.text:000000000000988E loc_988E:                               ; CODE XREF: parse_datetime2+CE5↑j
.text:000000000000988E                 mov     edi, [rsp+488h+var_2C0]
.text:0000000000009895                 lea     rsi, [rsp+488h+var_A5]
.text:000000000000989D                 lea     rbp, [rsp+488h+var_A8]
.text:00000000000098A5                 mov     [rsp+488h+var_A8], 5858h
.text:00000000000098AF                 mov     [rsp+488h+var_A6], 58h ; 'X'
.text:00000000000098B7                 call    time_zone_str
.text:00000000000098BC                 mov     rdi, rbp        ; src
.text:00000000000098BF                 call    tzalloc
.text:00000000000098C4                 test    rax, rax
.text:00000000000098C7                 mov     rdx, rax
.text:00000000000098CA                 jz      loc_A3D7
.text:00000000000098D0                 mov     eax, [rsp+488h+var_3D8]
.text:00000000000098D7                 mov     rsi, [rsp+488h+var_470]
.text:00000000000098DC                 mov     rdi, rdx
.text:00000000000098DF                 mov     [rsp+488h+var_468], rdx
.text:00000000000098E4                 mov     [rsp+488h+var_400], 0FFFFFFFFh
.text:00000000000098EF                 mov     dword ptr [rsp+488h+var_418], eax
.text:00000000000098F3                 mov     eax, [rsp+488h+var_3D4]
.text:00000000000098FA                 mov     dword ptr [rsp+488h+var_418+4], eax
.text:00000000000098FE                 mov     eax, [rsp+488h+var_3D0]
.text:0000000000009905                 mov     [rsp+488h+var_410], eax
.text:0000000000009909                 mov     eax, [rsp+488h+var_3CC]
.text:0000000000009910                 mov     [rsp+488h+var_40C], eax
.text:0000000000009914                 mov     eax, [rsp+488h+var_3C8]
.text:000000000000991B                 mov     [rsp+488h+var_408], eax
.text:0000000000009922                 mov     eax, [rsp+488h+var_3C4]
.text:0000000000009929                 mov     [rsp+488h+var_404], eax
.text:0000000000009930                 mov     eax, [rsp+488h+var_3B8]
.text:0000000000009937                 mov     [rsp+488h+var_3F8], eax
.text:000000000000993E                 call    mktime_z
.text:0000000000009943                 cmp     [rsp+488h+var_400], 0
.text:000000000000994B                 mov     r14, rax
.text:000000000000994E                 mov     rdx, [rsp+488h+var_468]
.text:0000000000009953                 js      loc_A4A4
.text:0000000000009959                 mov     rsi, [rsp+488h+var_470]
.text:000000000000995E                 lea     rdi, [rsp+488h+var_3D8]
.text:0000000000009966                 mov     [rsp+488h+var_468], rdx
.text:000000000000996B                 call    mktime_ok_part_6
.text:0000000000009970                 mov     rdx, [rsp+488h+var_468]
.text:0000000000009975                 mov     ebp, eax
.text:0000000000009977                 mov     rdi, rdx
.text:000000000000997A                 call    tzfree
.text:000000000000997F                 test    bpl, bpl
.text:0000000000009982                 jz      loc_957B
.text:0000000000009988
.text:0000000000009988 loc_9988:                               ; CODE XREF: parse_datetime2+CCF↑j
.text:0000000000009988                 cmp     [rsp+488h+var_228], 0
.text:0000000000009991                 jz      loc_9C27
.text:0000000000009997                 cmp     [rsp+488h+var_230], 0
.text:00000000000099A0                 jnz     loc_9D6E
.text:00000000000099A6                 mov     rax, [rsp+488h+var_2D0]
.text:00000000000099AE                 test    rax, rax
.text:00000000000099B1                 jle     short loc_99C8
.text:00000000000099B3                 xor     r12d, r12d
.text:00000000000099B6                 mov     esi, [rsp+488h+var_2C8]
.text:00000000000099BD                 cmp     [rsp+488h+var_400], esi
.text:00000000000099C4                 setnz   r12b
.text:00000000000099C8
.text:00000000000099C8 loc_99C8:                               ; CODE XREF: parse_datetime2+1121↑j
.text:00000000000099C8                 sub     rax, r12
.text:00000000000099CB                 imul    rcx, rax, 7
.text:00000000000099CF                 jo      short loc_9A1A
.text:00000000000099D1                 mov     eax, [rsp+488h+var_2C8]
.text:00000000000099D8                 sub     eax, [rsp+488h+var_400]
.text:00000000000099DF                 mov     esi, 7
.text:00000000000099E4                 add     eax, 7
.text:00000000000099E7                 cdq
.text:00000000000099E8                 idiv    esi
.text:00000000000099EA                 movsxd  rax, edx
.text:00000000000099ED                 add     rax, rcx
.text:00000000000099F0                 jo      short loc_9A1A
.text:00000000000099F2                 movsxd  rdx, [rsp+488h+var_40C]
.text:00000000000099F7                 add     rax, rdx
.text:00000000000099FA                 seto    dl
.text:00000000000099FD                 movsxd  rcx, eax
.text:0000000000009A00                 mov     [rsp+488h+var_40C], eax
.text:0000000000009A04                 cmp     rax, rcx
.text:0000000000009A07                 movzx   edx, dl
.text:0000000000009A0A                 mov     ecx, 1
.text:0000000000009A0F                 cmovnz  edx, ecx
.text:0000000000009A12                 test    edx, edx
.text:0000000000009A14                 jz      loc_9BA3
.text:0000000000009A1A
.text:0000000000009A1A loc_9A1A:                               ; CODE XREF: parse_datetime2+113F↑j
.text:0000000000009A1A                                         ; parse_datetime2+1160↑j ...
.text:0000000000009A1A                 cmp     [rsp+488h+var_1FF], 0
.text:0000000000009A22                 jz      loc_8CCB
.text:0000000000009A28                 mov     rdi, [rsp+488h+var_470]
.text:0000000000009A2D                 lea     rdx, [rsp+488h+var_188]
.text:0000000000009A35                 mov     rsi, r13
.text:0000000000009A38                 call    debug_strfdatetime_constprop_12
.text:0000000000009A3D                 lea     rsi, [rsp+488h+var_A8]
.text:0000000000009A45                 mov     r14d, [rsp+488h+var_2C8]
.text:0000000000009A4D                 mov     rbp, [rsp+488h+var_2D0]
.text:0000000000009A55                 mov     rdi, r13
.text:0000000000009A58                 mov     r12, rax
.text:0000000000009A5B                 call    str_days_constprop_13
.text:0000000000009A60                 lea     rsi, aErrorDaySDayOr ; "error: day '%s' (day ordinal=%ld number"...
.text:0000000000009A67                 mov     rbx, rax
.text:0000000000009A6A                 xor     edi, edi        ; domainname
.text:0000000000009A6C                 mov     edx, 5          ; category
.text:0000000000009A71                 call    _dcgettext
.text:0000000000009A76                 mov     r8, r12
.text:0000000000009A79                 mov     rdi, rax
.text:0000000000009A7C                 mov     ecx, r14d
.text:0000000000009A7F                 mov     rdx, rbp
.text:0000000000009A82                 mov     rsi, rbx
.text:0000000000009A85                 xor     eax, eax
.text:0000000000009A87                 call    dbg_printf
.text:0000000000009A8C                 jmp     loc_8CCB
.text:0000000000009A8C ; ---------------------------------------------------------------------------
.text:0000000000009A91                 align 8
.text:0000000000009A98
.text:0000000000009A98 loc_9A98:                               ; CODE XREF: parse_datetime2+FF0↑j
.text:0000000000009A98                 lea     rsi, aWarningAdjusti ; "warning: adjusting year value %ld to %l"...
.text:0000000000009A9F                 mov     edx, 5          ; category
.text:0000000000009AA4                 xor     edi, edi        ; domainname
.text:0000000000009AA6                 call    _dcgettext
.text:0000000000009AAB                 mov     rsi, rbp
.text:0000000000009AAE                 mov     rdi, rax
.text:0000000000009AB1                 mov     rdx, rbx
.text:0000000000009AB4                 xor     eax, eax
.text:0000000000009AB6                 mov     rbp, rbx
.text:0000000000009AB9                 call    dbg_printf
.text:0000000000009ABE                 jmp     loc_9319
.text:0000000000009AC3 ; ---------------------------------------------------------------------------
.text:0000000000009AC3
.text:0000000000009AC3 loc_9AC3:                               ; CODE XREF: parse_datetime2+BC5↑j
.text:0000000000009AC3                                         ; parse_datetime2+BF1↑j
.text:0000000000009AC3                 mov     r9d, [rsp+488h+var_2BC]
.text:0000000000009ACB                 mov     rbp, [rsp+488h+var_290]
.text:0000000000009AD3                 test    r9d, r9d
.text:0000000000009AD6                 jz      loc_A138
.text:0000000000009ADC                 cmp     r9d, 1
.text:0000000000009AE0                 jnz     short loc_9B5E
.text:0000000000009AE2                 lea     rdx, [rbp-1]
.text:0000000000009AE6                 lea     r9d, [rbp+0Ch]
.text:0000000000009AEA                 cmp     rdx, 0Ah
.text:0000000000009AEE                 jbe     short loc_9B6B
.text:0000000000009AF0                 cmp     rbp, 0Ch
.text:0000000000009AF4                 jnz     loc_A592
.text:0000000000009AFA                 mov     [rsp+488h+var_410], 0Ch
.text:0000000000009B02                 mov     r9d, 0Ch
.text:0000000000009B08
.text:0000000000009B08 loc_9B08:                               ; CODE XREF: parse_datetime2+12E0↓j
.text:0000000000009B08                                         ; parse_datetime2+18C8↓j
.text:0000000000009B08                 mov     rdx, [rsp+488h+var_288]
.text:0000000000009B10                 mov     rcx, qword ptr [rsp+488h+var_280]
.text:0000000000009B18                 test    al, al
.text:0000000000009B1A                 mov     dword ptr [rsp+488h+var_418+4], edx
.text:0000000000009B1E                 mov     dword ptr [rsp+488h+var_418], ecx
.text:0000000000009B22                 jnz     loc_A0D8
.text:0000000000009B28
.text:0000000000009B28 loc_9B28:                               ; CODE XREF: parse_datetime2+1301↓j
.text:0000000000009B28                                         ; parse_datetime2+1311↓j ...
.text:0000000000009B28                 mov     rax, [rsp+488h+var_230]
.text:0000000000009B30                 or      rax, [rsp+488h+var_228]
.text:0000000000009B38                 or      rax, [rsp+488h+var_210]
.text:0000000000009B40                 jz      loc_94B7
.text:0000000000009B46                 jmp     loc_94AC
.text:0000000000009B4B ; ---------------------------------------------------------------------------
.text:0000000000009B4B
.text:0000000000009B4B loc_9B4B:                               ; CODE XREF: parse_datetime2+C30↑j
.text:0000000000009B4B                 mov     eax, [rsp+488h+var_2C4]
.text:0000000000009B52                 mov     [rsp+488h+var_3F8], eax
.text:0000000000009B59                 jmp     loc_94CD
.text:0000000000009B5E ; ---------------------------------------------------------------------------
.text:0000000000009B5E
.text:0000000000009B5E loc_9B5E:                               ; CODE XREF: parse_datetime2+1250↑j
.text:0000000000009B5E                 cmp     rbp, 17h
.text:0000000000009B62                 ja      loc_A40A
.text:0000000000009B68
.text:0000000000009B68 loc_9B68:                               ; CODE XREF: parse_datetime2+18B0↓j
.text:0000000000009B68                 mov     r9d, ebp
.text:0000000000009B6B
.text:0000000000009B6B loc_9B6B:                               ; CODE XREF: parse_datetime2+125E↑j
.text:0000000000009B6B                 mov     [rsp+488h+var_410], r9d
.text:0000000000009B70                 jmp     short loc_9B08
.text:0000000000009B72 ; ---------------------------------------------------------------------------
.text:0000000000009B72
.text:0000000000009B72 loc_9B72:                               ; CODE XREF: parse_datetime2+BD3↑j
.text:0000000000009B72                                         ; parse_datetime2+BE2↑j
.text:0000000000009B72                 test    al, al
.text:0000000000009B74                 mov     [rsp+488h+var_418], 0
.text:0000000000009B7D                 mov     [rsp+488h+var_410], 0
.text:0000000000009B85                 mov     qword ptr [rsp+488h+var_280+8], 0
.text:0000000000009B91                 jz      short loc_9B28
.text:0000000000009B93
.text:0000000000009B93 loc_9B93:                               ; CODE XREF: parse_datetime2+C16↑j
.text:0000000000009B93                 lea     rdi, aWarningUsingMi ; "warning: using midnight as starting tim"...
.text:0000000000009B9A                 xor     eax, eax
.text:0000000000009B9C                 call    dbg_printf
.text:0000000000009BA1                 jmp     short loc_9B28
.text:0000000000009BA3 ; ---------------------------------------------------------------------------
.text:0000000000009BA3
.text:0000000000009BA3 loc_9BA3:                               ; CODE XREF: parse_datetime2+1184↑j
.text:0000000000009BA3                 mov     rsi, [rsp+488h+var_470]
.text:0000000000009BA8                 mov     rdi, r15
.text:0000000000009BAB                 mov     [rsp+488h+var_3F8], 0FFFFFFFFh
.text:0000000000009BB6                 call    mktime_z
.text:0000000000009BBB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009BBF                 mov     r14, rax
.text:0000000000009BC2                 jz      loc_9A1A
.text:0000000000009BC8                 cmp     [rsp+488h+var_1FF], 0
.text:0000000000009BD0                 jz      loc_9D7E
.text:0000000000009BD6                 lea     rbp, [rsp+488h+var_188]
.text:0000000000009BDE                 mov     rdi, [rsp+488h+var_470]
.text:0000000000009BE3                 mov     rsi, r13
.text:0000000000009BE6                 mov     rdx, rbp
.text:0000000000009BE9                 call    debug_strfdatetime_constprop_12
.text:0000000000009BEE                 lea     rsi, [rsp+488h+var_A8]
.text:0000000000009BF6                 mov     rdi, r13
.text:0000000000009BF9                 mov     rbp, rax
.text:0000000000009BFC                 call    str_days_constprop_13
.text:0000000000009C01                 lea     rsi, aNewStartDateSI ; "new start date: '%s' is '%s'\n"
.text:0000000000009C08                 mov     r12, rax
.text:0000000000009C0B                 mov     edx, 5          ; category
.text:0000000000009C10                 xor     edi, edi        ; domainname
.text:0000000000009C12                 call    _dcgettext
.text:0000000000009C17                 mov     rdx, rbp
.text:0000000000009C1A                 mov     rdi, rax
.text:0000000000009C1D                 mov     rsi, r12
.text:0000000000009C20                 xor     eax, eax
.text:0000000000009C22                 call    dbg_printf
.text:0000000000009C27
.text:0000000000009C27 loc_9C27:                               ; CODE XREF: parse_datetime2+1101↑j
.text:0000000000009C27                 cmp     [rsp+488h+var_1FF], 0
.text:0000000000009C2F                 jz      loc_9D7E
.text:0000000000009C35                 cmp     [rsp+488h+var_230], 0
.text:0000000000009C3E                 mov     rax, [rsp+488h+var_228]
.text:0000000000009C46                 jnz     loc_A08F
.text:0000000000009C4C                 test    rax, rax
.text:0000000000009C4F                 jz      loc_A4B1
.text:0000000000009C55
.text:0000000000009C55 loc_9C55:                               ; CODE XREF: parse_datetime2+1802↓j
.text:0000000000009C55                 lea     rbp, [rsp+488h+var_188]
.text:0000000000009C5D
.text:0000000000009C5D loc_9C5D:                               ; CODE XREF: parse_datetime2+1843↓j
.text:0000000000009C5D                                         ; parse_datetime2+1C9D↓j ...
.text:0000000000009C5D                 mov     rdi, [rsp+488h+var_470]
.text:0000000000009C62                 mov     rdx, rbp
.text:0000000000009C65                 mov     rsi, r13
.text:0000000000009C68                 call    debug_strfdatetime_constprop_12
.text:0000000000009C6D                 lea     rsi, aStartingDateTi ; "starting date/time: '%s'\n"
.text:0000000000009C74                 mov     rbx, rax
.text:0000000000009C77                 mov     edx, 5          ; category
.text:0000000000009C7C                 xor     edi, edi        ; domainname
.text:0000000000009C7E                 call    _dcgettext
.text:0000000000009C83                 mov     rsi, rbx
.text:0000000000009C86                 mov     rdi, rax
.text:0000000000009C89                 xor     eax, eax
.text:0000000000009C8B                 call    dbg_printf
.text:0000000000009C90                 mov     rax, [rsp+488h+var_270]
.text:0000000000009C98                 mov     rdx, [rsp+488h+var_268]
.text:0000000000009CA0                 movzx   ebx, [rsp+488h+var_1FF]
.text:0000000000009CA8                 or      rdx, rax
.text:0000000000009CAB                 mov     rsi, rdx
.text:0000000000009CAE                 or      rsi, [rsp+488h+var_260]
.text:0000000000009CB6                 jz      loc_9D9B
.text:0000000000009CBC                 test    bl, bl
.text:0000000000009CBE                 jz      loc_9E05
.text:0000000000009CC4                 test    rdx, rdx
.text:0000000000009CC7                 jz      loc_A5B9
.text:0000000000009CCD                 cmp     [rsp+488h+var_40C], 0Fh
.text:0000000000009CD2                 jz      short loc_9CF1
.text:0000000000009CD4                 lea     rsi, aWarningWhenAdd ; "warning: when adding relative months/ye"...
.text:0000000000009CDB                 xor     edi, edi        ; domainname
.text:0000000000009CDD                 mov     edx, 5          ; category
.text:0000000000009CE2                 call    _dcgettext
.text:0000000000009CE7                 mov     rdi, rax
.text:0000000000009CEA                 xor     eax, eax
.text:0000000000009CEC                 call    dbg_printf
.text:0000000000009CF1
.text:0000000000009CF1 loc_9CF1:                               ; CODE XREF: parse_datetime2+1442↑j
.text:0000000000009CF1                 cmp     [rsp+488h+var_260], 0
.text:0000000000009CFA                 jnz     loc_A5B9
.text:0000000000009D00
.text:0000000000009D00 loc_9D00:                               ; CODE XREF: parse_datetime2+1D2E↓j
.text:0000000000009D00                                         ; parse_datetime2+1D51↓j
.text:0000000000009D00                 movsxd  rdx, [rsp+488h+var_404]
.text:0000000000009D08                 xor     eax, eax
.text:0000000000009D0A                 mov     rcx, rdx
.text:0000000000009D0D                 add     rcx, [rsp+488h+var_270]
.text:0000000000009D15                 movsxd  rdx, ecx
.text:0000000000009D18                 seto    al
.text:0000000000009D1B                 mov     dword ptr [rsp+488h+var_468], ecx
.text:0000000000009D1F                 cmp     rcx, rdx
.text:0000000000009D22                 mov     edx, 1
.text:0000000000009D27                 cmovnz  eax, edx
.text:0000000000009D2A                 test    eax, eax
.text:0000000000009D2C                 jz      loc_9E30
.text:0000000000009D32
.text:0000000000009D32 loc_9D32:                               ; CODE XREF: parse_datetime2+15BB↓j
.text:0000000000009D32                                         ; parse_datetime2+15C3↓j ...
.text:0000000000009D32                 cmp     [rsp+488h+var_1FF], 0
.text:0000000000009D3A                 jz      loc_8CCB
.text:0000000000009D40                 lea     rsi, aErrorSD   ; "error: %s:%d\n"
.text:0000000000009D47                 xor     edi, edi        ; domainname
.text:0000000000009D49                 mov     edx, 5          ; category
.text:0000000000009D4E                 call    _dcgettext
.text:0000000000009D53                 lea     rsi, aParseDatetimeY ; "parse-datetime.y"
.text:0000000000009D5A                 mov     rdi, rax
.text:0000000000009D5D                 mov     edx, 877h
.text:0000000000009D62                 xor     eax, eax
.text:0000000000009D64                 call    dbg_printf
.text:0000000000009D69                 jmp     loc_8CCB
.text:0000000000009D6E ; ---------------------------------------------------------------------------
.text:0000000000009D6E
.text:0000000000009D6E loc_9D6E:                               ; CODE XREF: parse_datetime2+1110↑j
.text:0000000000009D6E                 movzx   ebx, [rsp+488h+var_1FF]
.text:0000000000009D76                 test    bl, bl
.text:0000000000009D78                 jnz     loc_A098
.text:0000000000009D7E
.text:0000000000009D7E loc_9D7E:                               ; CODE XREF: parse_datetime2+1340↑j
.text:0000000000009D7E                                         ; parse_datetime2+139F↑j
.text:0000000000009D7E                 mov     rax, [rsp+488h+var_270]
.text:0000000000009D86                 mov     rdx, [rsp+488h+var_268]
.text:0000000000009D8E                 or      rdx, rax
.text:0000000000009D91                 or      rdx, [rsp+488h+var_260]
.text:0000000000009D99                 jnz     short loc_9E05
.text:0000000000009D9B
.text:0000000000009D9B loc_9D9B:                               ; CODE XREF: parse_datetime2+1426↑j
.text:0000000000009D9B                                         ; parse_datetime2+1659↓j ...
.text:0000000000009D9B                 cmp     [rsp+488h+var_208], 0
.text:0000000000009DA4                 jz      loc_A241
.text:0000000000009DAA                 movsxd  rax, [rsp+488h+var_2C0]
.text:0000000000009DB2                 xor     edx, edx
.text:0000000000009DB4                 mov     rbp, rax
.text:0000000000009DB7                 sub     rax, [rsp+488h+var_3F0]
.text:0000000000009DBF                 seto    dl
.text:0000000000009DC2                 sub     r14, rax
.text:0000000000009DC5                 seto    al
.text:0000000000009DC8                 movzx   eax, al
.text:0000000000009DCB                 or      rdx, rax
.text:0000000000009DCE                 jz      loc_A241
.text:0000000000009DD4                 test    bl, bl
.text:0000000000009DD6                 jz      loc_8CCB
.text:0000000000009DDC                 lea     rsi, aErrorTimezoneD ; "error: timezone %d caused time_t overfl"...
.text:0000000000009DE3                 xor     edi, edi        ; domainname
.text:0000000000009DE5                 mov     edx, 5          ; category
.text:0000000000009DEA                 call    _dcgettext
.text:0000000000009DEF                 mov     esi, ebp
.text:0000000000009DF1                 mov     rdi, rax
.text:0000000000009DF4                 xor     eax, eax
.text:0000000000009DF6                 call    dbg_printf
.text:0000000000009DFB                 jmp     loc_8CCB
.text:0000000000009E00 ; ---------------------------------------------------------------------------
.text:0000000000009E00
.text:0000000000009E00 loc_9E00:                               ; CODE XREF: parse_datetime2+46A↑j
.text:0000000000009E00                 call    ___stack_chk_fail
.text:0000000000009E05 ; ---------------------------------------------------------------------------
.text:0000000000009E05
.text:0000000000009E05 loc_9E05:                               ; CODE XREF: parse_datetime2+142E↑j
.text:0000000000009E05                                         ; parse_datetime2+1509↑j
.text:0000000000009E05                 movsxd  rdx, [rsp+488h+var_404]
.text:0000000000009E0D                 add     rax, rdx
.text:0000000000009E10                 seto    dl
.text:0000000000009E13                 movsxd  rcx, eax
.text:0000000000009E16                 mov     dword ptr [rsp+488h+var_468], eax
.text:0000000000009E1A                 cmp     rax, rcx
.text:0000000000009E1D                 movzx   edx, dl
.text:0000000000009E20                 mov     ecx, 1
.text:0000000000009E25                 cmovnz  edx, ecx
.text:0000000000009E28                 test    edx, edx
.text:0000000000009E2A                 jnz     loc_8CCB
.text:0000000000009E30
.text:0000000000009E30 loc_9E30:                               ; CODE XREF: parse_datetime2+149C↑j
.text:0000000000009E30                 movsxd  r12, [rsp+488h+var_408]
.text:0000000000009E38                 xor     eax, eax
.text:0000000000009E3A                 add     r12, [rsp+488h+var_268]
.text:0000000000009E42                 movsxd  rdx, r12d
.text:0000000000009E45                 seto    al
.text:0000000000009E48                 cmp     r12, rdx
.text:0000000000009E4B                 jnz     loc_9D32
.text:0000000000009E51                 test    eax, eax
.text:0000000000009E53                 jnz     loc_9D32
.text:0000000000009E59                 movsxd  rbp, [rsp+488h+var_40C]
.text:0000000000009E5E                 xor     eax, eax
.text:0000000000009E60                 add     rbp, [rsp+488h+var_260]
.text:0000000000009E68                 movsxd  rdx, ebp
.text:0000000000009E6B                 seto    al
.text:0000000000009E6E                 cmp     rbp, rdx
.text:0000000000009E71                 jnz     loc_9D32
.text:0000000000009E77                 test    eax, eax
.text:0000000000009E79                 jnz     loc_9D32
.text:0000000000009E7F                 mov     eax, dword ptr [rsp+488h+var_468]
.text:0000000000009E83                 mov     rsi, [rsp+488h+var_470]
.text:0000000000009E88                 mov     rdi, r15
.text:0000000000009E8B                 mov     [rsp+488h+var_408], r12d
.text:0000000000009E93                 mov     [rsp+488h+var_40C], ebp
.text:0000000000009E97                 mov     [rsp+488h+var_404], eax
.text:0000000000009E9E                 mov     eax, [rsp+488h+var_3D0]
.text:0000000000009EA5                 mov     [rsp+488h+var_410], eax
.text:0000000000009EA9                 mov     eax, [rsp+488h+var_3D4]
.text:0000000000009EB0                 mov     dword ptr [rsp+488h+var_418+4], eax
.text:0000000000009EB4                 mov     eax, [rsp+488h+var_3D8]
.text:0000000000009EBB                 mov     dword ptr [rsp+488h+var_418], eax
.text:0000000000009EBF                 mov     eax, [rsp+488h+var_3B8]
.text:0000000000009EC6                 mov     [rsp+488h+var_3F8], eax
.text:0000000000009ECD                 call    mktime_z
.text:0000000000009ED2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009ED6                 mov     r14, rax
.text:0000000000009ED9                 jz      loc_A547
.text:0000000000009EDF                 movzx   ebx, [rsp+488h+var_1FF]
.text:0000000000009EE7                 test    bl, bl
.text:0000000000009EE9                 jz      loc_9D9B
.text:0000000000009EEF                 mov     rcx, [rsp+488h+var_260]
.text:0000000000009EF7                 mov     rax, [rsp+488h+var_270]
.text:0000000000009EFF                 lea     rsi, aAfterDateAdjus ; "after date adjustment (%+ld years, %+ld"...
.text:0000000000009F06                 mov     rbx, [rsp+488h+var_268]
.text:0000000000009F0E                 xor     edi, edi        ; domainname
.text:0000000000009F10                 mov     edx, 5          ; category
.text:0000000000009F15                 mov     [rsp+488h+var_450], rcx
.text:0000000000009F1A                 mov     [rsp+488h+var_458], rax
.text:0000000000009F1F                 call    _dcgettext
.text:0000000000009F24                 mov     rcx, [rsp+488h+var_450]
.text:0000000000009F29                 mov     rsi, [rsp+488h+var_458]
.text:0000000000009F2E                 mov     rdx, rbx
.text:0000000000009F31                 mov     rdi, rax
.text:0000000000009F34                 xor     eax, eax
.text:0000000000009F36                 call    dbg_printf
.text:0000000000009F3B                 mov     rdi, [rsp+488h+var_470]
.text:0000000000009F40                 lea     rdx, [rsp+488h+var_188]
.text:0000000000009F48                 mov     rsi, r13
.text:0000000000009F4B                 call    debug_strfdatetime_constprop_12
.text:0000000000009F50                 lea     rsi, aNewDateTimeS ; "    new date/time = '%s'\n"
.text:0000000000009F57                 xor     edi, edi        ; domainname
.text:0000000000009F59                 mov     rbx, rax
.text:0000000000009F5C                 mov     edx, 5          ; category
.text:0000000000009F61                 call    _dcgettext
.text:0000000000009F66                 mov     rsi, rbx
.text:0000000000009F69                 mov     rdi, rax
.text:0000000000009F6C                 xor     eax, eax
.text:0000000000009F6E                 call    dbg_printf
.text:0000000000009F73                 mov     eax, [rsp+488h+var_3B8]
.text:0000000000009F7A                 cmp     eax, 0FFFFFFFFh
.text:0000000000009F7D                 jz      short loc_9FA5
.text:0000000000009F7F                 cmp     eax, [rsp+488h+var_3F8]
.text:0000000000009F86                 jz      short loc_9FA5
.text:0000000000009F88                 lea     rsi, aWarningDayligh ; "warning: daylight saving time changed a"...
.text:0000000000009F8F                 xor     edi, edi        ; domainname
.text:0000000000009F91                 mov     edx, 5          ; category
.text:0000000000009F96                 call    _dcgettext
.text:0000000000009F9B                 mov     rdi, rax
.text:0000000000009F9E                 xor     eax, eax
.text:0000000000009FA0                 call    dbg_printf
.text:0000000000009FA5
.text:0000000000009FA5 loc_9FA5:                               ; CODE XREF: parse_datetime2+16ED↑j
.text:0000000000009FA5                                         ; parse_datetime2+16F6↑j
.text:0000000000009FA5                 cmp     [rsp+488h+var_260], 0
.text:0000000000009FAE                 jnz     loc_A082
.text:0000000000009FB4                 cmp     ebp, [rsp+488h+var_40C]
.text:0000000000009FB8                 jnz     short loc_9FD7
.text:0000000000009FBA                 cmp     [rsp+488h+var_268], 0
.text:0000000000009FC3                 jnz     loc_A082
.text:0000000000009FC9                 cmp     r12d, [rsp+488h+var_408]
.text:0000000000009FD1                 jz      loc_A082
.text:0000000000009FD7
.text:0000000000009FD7 loc_9FD7:                               ; CODE XREF: parse_datetime2+1728↑j
.text:0000000000009FD7                 lea     rsi, aWarningMonthYe ; "warning: month/year adjustment resulted"...
.text:0000000000009FDE                 mov     edx, 5          ; category
.text:0000000000009FE3                 xor     edi, edi        ; domainname
.text:0000000000009FE5                 call    _dcgettext
.text:0000000000009FEA                 mov     rdi, rax
.text:0000000000009FED                 xor     eax, eax
.text:0000000000009FEF                 call    dbg_printf
.text:0000000000009FF4                 lea     r8, [rsp+488h+var_1B5]
.text:0000000000009FFC                 mov     edi, dword ptr [rsp+488h+var_468]
.text:000000000000A000                 mov     rsi, r8
.text:000000000000A003                 mov     [rsp+488h+var_458], r8
.text:000000000000A008                 call    tm_year_str
.text:000000000000A00D                 lea     rsi, aAdjustedYMDS02 ; "     adjusted Y M D: %s %02d %02d\n"
.text:000000000000A014                 mov     edx, 5          ; category
.text:000000000000A019                 xor     edi, edi        ; domainname
.text:000000000000A01B                 mov     rbx, rax
.text:000000000000A01E                 call    _dcgettext
.text:000000000000A023                 lea     edx, [r12+1]
.text:000000000000A028                 mov     ecx, ebp
.text:000000000000A02A                 mov     rsi, rbx
.text:000000000000A02D                 mov     rdi, rax
.text:000000000000A030                 xor     eax, eax
.text:000000000000A032                 call    dbg_printf
.text:000000000000A037                 mov     r8, [rsp+488h+var_458]
.text:000000000000A03C                 mov     eax, [rsp+488h+var_408]
.text:000000000000A043                 mov     edi, [rsp+488h+var_404]
.text:000000000000A04A                 mov     r12d, [rsp+488h+var_40C]
.text:000000000000A04F                 mov     rsi, r8
.text:000000000000A052                 lea     ebx, [rax+1]
.text:000000000000A055                 call    tm_year_str
.text:000000000000A05A                 lea     rsi, aNormalizedYMDS ; "   normalized Y M D: %s %02d %02d\n"
.text:000000000000A061                 mov     rbp, rax
.text:000000000000A064                 mov     edx, 5          ; category
.text:000000000000A069                 xor     edi, edi        ; domainname
.text:000000000000A06B                 call    _dcgettext
.text:000000000000A070                 mov     ecx, r12d
.text:000000000000A073                 mov     rdi, rax
.text:000000000000A076                 mov     edx, ebx
.text:000000000000A078                 mov     rsi, rbp
.text:000000000000A07B                 xor     eax, eax
.text:000000000000A07D                 call    dbg_printf
.text:000000000000A082
.text:000000000000A082 loc_A082:                               ; CODE XREF: parse_datetime2+171E↑j
.text:000000000000A082                                         ; parse_datetime2+1733↑j ...
.text:000000000000A082                 movzx   ebx, [rsp+488h+var_1FF]
.text:000000000000A08A                 jmp     loc_9D9B
.text:000000000000A08F ; ---------------------------------------------------------------------------
.text:000000000000A08F
.text:000000000000A08F loc_A08F:                               ; CODE XREF: parse_datetime2+13B6↑j
.text:000000000000A08F                 test    rax, rax
.text:000000000000A092                 jz      loc_9C55
.text:000000000000A098
.text:000000000000A098 loc_A098:                               ; CODE XREF: parse_datetime2+14E8↑j
.text:000000000000A098                 lea     rbp, [rsp+488h+var_188]
.text:000000000000A0A0
.text:000000000000A0A0 loc_A0A0:                               ; CODE XREF: parse_datetime2+1CAC↓j
.text:000000000000A0A0                 lea     rsi, [rsp+488h+var_A8]
.text:000000000000A0A8                 mov     rdi, r13
.text:000000000000A0AB                 call    str_days_constprop_13
.text:000000000000A0B0                 lea     rsi, aWarningDaySIgn ; "warning: day (%s) ignored when explicit"...
.text:000000000000A0B7                 mov     rbx, rax
.text:000000000000A0BA                 xor     edi, edi        ; domainname
.text:000000000000A0BC                 mov     edx, 5          ; category
.text:000000000000A0C1                 call    _dcgettext
.text:000000000000A0C6                 mov     rsi, rbx
.text:000000000000A0C9                 mov     rdi, rax
.text:000000000000A0CC                 xor     eax, eax
.text:000000000000A0CE                 call    dbg_printf
.text:000000000000A0D3                 jmp     loc_9C5D
.text:000000000000A0D8 ; ---------------------------------------------------------------------------
.text:000000000000A0D8
.text:000000000000A0D8 loc_A0D8:                               ; CODE XREF: parse_datetime2+1292↑j
.text:000000000000A0D8                 lea     rbp, [rsp+488h+var_188]
.text:000000000000A0E0                 lea     r8, a02d02d02d  ; "%02d:%02d:%02d"
.text:000000000000A0E7                 push    rcx
.text:000000000000A0E8                 push    rdx
.text:000000000000A0E9                 mov     esi, 64h ; 'd'
.text:000000000000A0EE                 mov     edx, 1
.text:000000000000A0F3                 mov     rdi, rbp
.text:000000000000A0F6                 xor     eax, eax
.text:000000000000A0F8                 mov     ecx, 64h ; 'd'
.text:000000000000A0FD                 call    ___snprintf_chk
.text:000000000000A102                 pop     rsi
.text:000000000000A103                 pop     rdi
.text:000000000000A104                 cmp     [rsp+488h+var_210], 0
.text:000000000000A10D                 mov     edx, 5          ; category
.text:000000000000A112                 jz      loc_A5A6
.text:000000000000A118                 lea     rsi, aUsingSpecified ; "using specified time as starting value:"...
.text:000000000000A11F                 xor     edi, edi        ; domainname
.text:000000000000A121                 call    _dcgettext
.text:000000000000A126
.text:000000000000A126 loc_A126:                               ; CODE XREF: parse_datetime2+1D24↓j
.text:000000000000A126                 mov     rdi, rax
.text:000000000000A129                 mov     rsi, rbp
.text:000000000000A12C                 xor     eax, eax
.text:000000000000A12E                 call    dbg_printf
.text:000000000000A133                 jmp     loc_9B28
.text:000000000000A138 ; ---------------------------------------------------------------------------
.text:000000000000A138
.text:000000000000A138 loc_A138:                               ; CODE XREF: parse_datetime2+1246↑j
.text:000000000000A138                 lea     rdx, [rbp-1]
.text:000000000000A13C                 cmp     rdx, 0Ah
.text:000000000000A140                 jbe     loc_9B68
.text:000000000000A146                 cmp     rbp, 0Ch
.text:000000000000A14A                 jnz     loc_A449
.text:000000000000A150                 mov     [rsp+488h+var_410], 0
.text:000000000000A158                 jmp     loc_9B08
.text:000000000000A15D ; ---------------------------------------------------------------------------
.text:000000000000A15D
.text:000000000000A15D loc_A15D:                               ; CODE XREF: parse_datetime2+D5C↑j
.text:000000000000A15D                                         ; parse_datetime2+D65↑j ...
.text:000000000000A15D                 test    al, al
.text:000000000000A15F                 jz      loc_8CCB
.text:000000000000A165                 lea     rsi, aErrorInvalidDa ; "error: invalid date/time value:\n"
.text:000000000000A16C                 mov     edx, 5          ; category
.text:000000000000A171                 xor     edi, edi        ; domainname
.text:000000000000A173                 mov     [rsp+488h+var_42C], ecx
.text:000000000000A177                 mov     [rsp+488h+var_430], r8d
.text:000000000000A17C                 lea     rbx, [rsp+488h+var_A8]
.text:000000000000A184                 mov     [rsp+488h+var_434], r9d
.text:000000000000A189                 mov     [rsp+488h+var_438], r10d
.text:000000000000A18E                 call    _dcgettext
.text:000000000000A193                 mov     rdi, rax
.text:000000000000A196                 xor     eax, eax
.text:000000000000A198                 call    dbg_printf
.text:000000000000A19D                 lea     rdi, [rsp+488h+var_3D8]
.text:000000000000A1A5                 mov     rsi, r13
.text:000000000000A1A8                 mov     rdx, rbx
.text:000000000000A1AB                 call    debug_strfdatetime_constprop_12
.text:000000000000A1B0                 lea     rsi, aUserProvidedTi ; "    user provided time: '%s'\n"
.text:000000000000A1B7                 mov     edx, 5          ; category
.text:000000000000A1BC                 xor     edi, edi        ; domainname
.text:000000000000A1BE                 mov     [rsp+488h+var_440], rax
.text:000000000000A1C3                 call    _dcgettext
.text:000000000000A1C8                 mov     rsi, [rsp+488h+var_440]
.text:000000000000A1CD                 mov     rdi, rax
.text:000000000000A1D0                 xor     eax, eax
.text:000000000000A1D2                 call    dbg_printf
.text:000000000000A1D7                 mov     rdi, [rsp+488h+var_470]
.text:000000000000A1DC                 mov     rsi, r13
.text:000000000000A1DF                 mov     rdx, rbx
.text:000000000000A1E2                 call    debug_strfdatetime_constprop_12
.text:000000000000A1E7                 lea     rsi, aNormalizedTime ; "       normalized time: '%s'\n"
.text:000000000000A1EE                 mov     edx, 5          ; category
.text:000000000000A1F3                 xor     edi, edi        ; domainname
.text:000000000000A1F5                 mov     r13, rax
.text:000000000000A1F8                 call    _dcgettext
.text:000000000000A1FD                 mov     rsi, r13
.text:000000000000A200                 mov     rdi, rax
.text:000000000000A203                 xor     eax, eax
.text:000000000000A205                 call    dbg_printf
.text:000000000000A20A                 mov     r10d, [rsp+488h+var_438]
.text:000000000000A20F                 mov     r9d, [rsp+488h+var_434]
.text:000000000000A214                 lea     rdx, aUserProvidedTi+1Dh ; ""
.text:000000000000A21B                 mov     r8d, [rsp+488h+var_430]
.text:000000000000A220                 mov     ecx, [rsp+488h+var_42C]
.text:000000000000A224                 lea     rax, asc_1317D+2 ; "--"
.text:000000000000A22B                 mov     rsi, rdx
.text:000000000000A22E                 cmp     r10d, r9d
.text:000000000000A231                 cmovnz  rsi, rax
.text:000000000000A235                 cmp     r8d, ecx
.text:000000000000A238                 cmovz   rax, rdx
.text:000000000000A23C                 jmp     loc_96C7
.text:000000000000A241 ; ---------------------------------------------------------------------------
.text:000000000000A241
.text:000000000000A241 loc_A241:                               ; CODE XREF: parse_datetime2+1514↑j
.text:000000000000A241                                         ; parse_datetime2+153E↑j
.text:000000000000A241                 test    bl, bl
.text:000000000000A243                 jnz     loc_A464
.text:000000000000A249
.text:000000000000A249 loc_A249:                               ; CODE XREF: parse_datetime2+1C0F↓j
.text:000000000000A249                 mov     rbp, [rsp+488h+var_258]
.text:000000000000A251                 movzx   r12d, [rsp+488h+var_1FF]
.text:000000000000A25A                 imul    r9, rbp, 0E10h
.text:000000000000A261                 jo      loc_A3BD
.text:000000000000A267                 add     r9, r14
.text:000000000000A26A                 jo      loc_A3BD
.text:000000000000A270                 mov     r13, [rsp+488h+var_250]
.text:000000000000A278                 imul    rax, r13, 3Ch ; '<'
.text:000000000000A27C                 jo      loc_A3BD
.text:000000000000A282                 add     r9, rax
.text:000000000000A285                 jo      loc_A3BD
.text:000000000000A28B                 mov     r14, [rsp+488h+var_248]
.text:000000000000A293                 add     r9, r14
.text:000000000000A296                 jo      loc_A3BD
.text:000000000000A29C                 movsxd  rsi, [rsp+488h+var_240]
.text:000000000000A2A4                 mov     rcx, qword ptr [rsp+488h+var_280+8]
.text:000000000000A2AC                 mov     r8d, 3B9ACA00h
.text:000000000000A2B2                 mov     rbx, r9
.text:000000000000A2B5                 add     rcx, rsi
.text:000000000000A2B8                 mov     rax, rcx
.text:000000000000A2BB                 cqo
.text:000000000000A2BD                 idiv    r8
.text:000000000000A2C0                 lea     rax, [rdx+3B9ACA00h]
.text:000000000000A2C7                 cqo
.text:000000000000A2C9                 idiv    r8
.text:000000000000A2CC                 mov     rax, rcx
.text:000000000000A2CF                 sub     rax, rdx
.text:000000000000A2D2                 mov     rdi, rdx
.text:000000000000A2D5                 cqo
.text:000000000000A2D7                 idiv    r8
.text:000000000000A2DA                 cdqe
.text:000000000000A2DC                 add     rbx, rax
.text:000000000000A2DF                 jo      loc_A3BD
.text:000000000000A2E5                 mov     rax, [rsp+488h+timer]
.text:000000000000A2EA                 test    r12b, r12b
.text:000000000000A2ED                 mov     [rax], rbx
.text:000000000000A2F0                 mov     [rax+8], rdi
.text:000000000000A2F4                 jz      loc_9002
.text:000000000000A2FA                 mov     rax, rbp
.text:000000000000A2FD                 or      rax, r13
.text:000000000000A300                 or      rax, r14
.text:000000000000A303                 or      rax, rsi
.text:000000000000A306                 jz      loc_9002
.text:000000000000A30C                 mov     dword ptr [rsp+488h+var_470], esi
.text:000000000000A310                 lea     rsi, aAfterTimeAdjus ; "after time adjustment (%+ld hours, %+ld"...
.text:000000000000A317                 xor     edi, edi        ; domainname
.text:000000000000A319                 mov     edx, 5          ; category
.text:000000000000A31E                 call    _dcgettext
.text:000000000000A323                 mov     r10d, dword ptr [rsp+488h+var_470]
.text:000000000000A328                 mov     rcx, r14
.text:000000000000A32B                 mov     rdi, rax
.text:000000000000A32E                 mov     rdx, r13
.text:000000000000A331                 xor     eax, eax
.text:000000000000A333                 mov     rsi, rbp
.text:000000000000A336                 mov     r8d, r10d
.text:000000000000A339                 call    dbg_printf
.text:000000000000A33E                 lea     rsi, aNewTimeLdEpoch ; "    new time = %ld epoch-seconds\n"
.text:000000000000A345                 xor     edi, edi        ; domainname
.text:000000000000A347                 mov     edx, 5          ; category
.text:000000000000A34C                 call    _dcgettext
.text:000000000000A351                 mov     rsi, rbx
.text:000000000000A354                 mov     rdi, rax
.text:000000000000A357                 xor     eax, eax
.text:000000000000A359                 call    dbg_printf
.text:000000000000A35E                 cmp     [rsp+488h+var_3F8], 0FFFFFFFFh
.text:000000000000A366                 jz      short loc_A3AF
.text:000000000000A368                 mov     rsi, [rsp+488h+timer]
.text:000000000000A36D                 lea     rdx, [rsp+488h+var_318]
.text:000000000000A375                 mov     rdi, r15
.text:000000000000A378                 call    localtime_rz
.text:000000000000A37D                 test    rax, rax
.text:000000000000A380                 jz      short loc_A3AF
.text:000000000000A382                 mov     eax, [rsp+488h+var_2F8]
.text:000000000000A389                 cmp     [rsp+488h+var_3F8], eax
.text:000000000000A390                 jz      short loc_A3AF
.text:000000000000A392                 lea     rsi, aWarningDayligh_0 ; "warning: daylight saving time changed a"...
.text:000000000000A399                 xor     edi, edi        ; domainname
.text:000000000000A39B                 mov     edx, 5          ; category
.text:000000000000A3A0                 call    _dcgettext
.text:000000000000A3A5                 mov     rdi, rax
.text:000000000000A3A8                 xor     eax, eax
.text:000000000000A3AA                 call    dbg_printf
.text:000000000000A3AF
.text:000000000000A3AF loc_A3AF:                               ; CODE XREF: parse_datetime2+1AD6↑j
.text:000000000000A3AF                                         ; parse_datetime2+1AF0↑j ...
.text:000000000000A3AF                 movzx   r12d, [rsp+488h+var_1FF]
.text:000000000000A3B8                 jmp     loc_9002
.text:000000000000A3BD ; ---------------------------------------------------------------------------
.text:000000000000A3BD
.text:000000000000A3BD loc_A3BD:                               ; CODE XREF: parse_datetime2+19D1↑j
.text:000000000000A3BD                                         ; parse_datetime2+19DA↑j ...
.text:000000000000A3BD                 test    r12b, r12b
.text:000000000000A3C0                 jz      loc_8CCB
.text:000000000000A3C6                 mov     edx, 5
.text:000000000000A3CB                 lea     rsi, aErrorAddingRel ; "error: adding relative time caused an o"...
.text:000000000000A3D2                 jmp     loc_9399
.text:000000000000A3D7 ; ---------------------------------------------------------------------------
.text:000000000000A3D7
.text:000000000000A3D7 loc_A3D7:                               ; CODE XREF: parse_datetime2+103A↑j
.text:000000000000A3D7                 cmp     [rsp+488h+var_1FF], 0
.text:000000000000A3DF                 jz      loc_8CCB
.text:000000000000A3E5                 lea     rsi, aErrorTzallocSF ; "error: tzalloc (\"%s\") failed\n"
.text:000000000000A3EC                 xor     edi, edi        ; domainname
.text:000000000000A3EE                 mov     edx, 5          ; category
.text:000000000000A3F3                 call    _dcgettext
.text:000000000000A3F8                 mov     rsi, rbp
.text:000000000000A3FB                 mov     rdi, rax
.text:000000000000A3FE                 xor     eax, eax
.text:000000000000A400                 call    dbg_printf
.text:000000000000A405                 jmp     loc_8CCB
.text:000000000000A40A ; ---------------------------------------------------------------------------
.text:000000000000A40A
.text:000000000000A40A loc_A40A:                               ; CODE XREF: parse_datetime2+12D2↑j
.text:000000000000A40A                 lea     rbx, aUserProvidedTi+1Dh ; ""
.text:000000000000A411                 mov     [rsp+488h+var_410], 0FFFFFFFFh
.text:000000000000A419
.text:000000000000A419 loc_A419:                               ; CODE XREF: parse_datetime2+1BC8↓j
.text:000000000000A419                                         ; parse_datetime2+1D11↓j
.text:000000000000A419                 test    al, al
.text:000000000000A41B                 jz      loc_8CCB
.text:000000000000A421                 lea     rsi, aErrorInvalidHo ; "error: invalid hour %ld%s\n"
.text:000000000000A428                 xor     edi, edi        ; domainname
.text:000000000000A42A                 mov     edx, 5          ; category
.text:000000000000A42F                 call    _dcgettext
.text:000000000000A434                 mov     rdx, rbx
.text:000000000000A437                 mov     rdi, rax
.text:000000000000A43A                 mov     rsi, rbp
.text:000000000000A43D                 xor     eax, eax
.text:000000000000A43F                 call    dbg_printf
.text:000000000000A444                 jmp     loc_8CCB
.text:000000000000A449 ; ---------------------------------------------------------------------------
.text:000000000000A449
.text:000000000000A449 loc_A449:                               ; CODE XREF: parse_datetime2+18BA↑j
.text:000000000000A449                 mov     [rsp+488h+var_410], 0FFFFFFFFh
.text:000000000000A451                 lea     rbx, aAm_0      ; "am"
.text:000000000000A458                 jmp     short loc_A419
.text:000000000000A45A ; ---------------------------------------------------------------------------
.text:000000000000A45A
.text:000000000000A45A loc_A45A:                               ; CODE XREF: parse_datetime2+B71↑j
.text:000000000000A45A                 mov     edx, 1
.text:000000000000A45F                 jmp     loc_9407
.text:000000000000A464 ; ---------------------------------------------------------------------------
.text:000000000000A464
.text:000000000000A464 loc_A464:                               ; CODE XREF: parse_datetime2+19B3↑j
.text:000000000000A464                 mov     rdi, [rsp+488h+var_470]
.text:000000000000A469                 lea     rdx, [rsp+488h+var_188]
.text:000000000000A471                 mov     rsi, r13
.text:000000000000A474                 call    debug_strfdatetime_constprop_12
.text:000000000000A479                 lea     rsi, aSLdEpochSecond ; "'%s' = %ld epoch-seconds\n"
.text:000000000000A480                 mov     rbx, rax
.text:000000000000A483                 xor     edi, edi        ; domainname
.text:000000000000A485                 mov     edx, 5          ; category
.text:000000000000A48A                 call    _dcgettext
.text:000000000000A48F                 mov     rdx, r14
.text:000000000000A492                 mov     rdi, rax
.text:000000000000A495                 mov     rsi, rbx
.text:000000000000A498                 xor     eax, eax
.text:000000000000A49A                 call    dbg_printf
.text:000000000000A49F                 jmp     loc_A249
.text:000000000000A4A4 ; ---------------------------------------------------------------------------
.text:000000000000A4A4
.text:000000000000A4A4 loc_A4A4:                               ; CODE XREF: parse_datetime2+10C3↑j
.text:000000000000A4A4                 mov     rdi, rdx
.text:000000000000A4A7                 call    tzfree
.text:000000000000A4AC                 jmp     loc_957B
.text:000000000000A4B1 ; ---------------------------------------------------------------------------
.text:000000000000A4B1
.text:000000000000A4B1 loc_A4B1:                               ; CODE XREF: parse_datetime2+13BF↑j
.text:000000000000A4B1                 mov     eax, [rsp+488h+var_408]
.text:000000000000A4B8                 mov     edi, [rsp+488h+var_404]
.text:000000000000A4BF                 lea     rsi, [rsp+488h+var_1B5]
.text:000000000000A4C7                 mov     r12d, [rsp+488h+var_40C]
.text:000000000000A4CC                 lea     rbp, [rsp+488h+var_188]
.text:000000000000A4D4                 lea     ebx, [rax+1]
.text:000000000000A4D7                 call    tm_year_str
.text:000000000000A4DC                 push    r12
.text:000000000000A4DE                 lea     r8, aYMDS02d02d ; "(Y-M-D) %s-%02d-%02d"
.text:000000000000A4E5                 push    rbx
.text:000000000000A4E6                 mov     r9, rax
.text:000000000000A4E9                 mov     ecx, 64h ; 'd'
.text:000000000000A4EE                 mov     edx, 1
.text:000000000000A4F3                 mov     esi, 64h ; 'd'
.text:000000000000A4F8                 mov     rdi, rbp
.text:000000000000A4FB                 xor     eax, eax
.text:000000000000A4FD                 call    ___snprintf_chk
.text:000000000000A502                 lea     rsi, aUsingCurrentDa ; "using current date as starting value: '"...
.text:000000000000A509                 mov     edx, 5          ; category
.text:000000000000A50E                 xor     edi, edi        ; domainname
.text:000000000000A510                 call    _dcgettext
.text:000000000000A515                 mov     rsi, rbp
.text:000000000000A518                 mov     rdi, rax
.text:000000000000A51B                 xor     eax, eax
.text:000000000000A51D                 call    dbg_printf
.text:000000000000A522                 pop     rax
.text:000000000000A523                 pop     rdx
.text:000000000000A524                 cmp     [rsp+488h+var_228], 0
.text:000000000000A52D                 jz      loc_9C5D
.text:000000000000A533                 cmp     [rsp+488h+var_230], 0
.text:000000000000A53C                 jnz     loc_A0A0
.text:000000000000A542                 jmp     loc_9C5D
.text:000000000000A547 ; ---------------------------------------------------------------------------
.text:000000000000A547
.text:000000000000A547 loc_A547:                               ; CODE XREF: parse_datetime2+1649↑j
.text:000000000000A547                 cmp     [rsp+488h+var_1FF], 0
.text:000000000000A54F                 jz      loc_8CCB
.text:000000000000A555                 mov     rdi, [rsp+488h+var_470]
.text:000000000000A55A                 lea     rdx, [rsp+488h+var_188]
.text:000000000000A562                 mov     rsi, r13
.text:000000000000A565                 call    debug_strfdatetime_constprop_12
.text:000000000000A56A                 lea     rsi, aErrorAddingRel_0 ; "error: adding relative date resulted in"...
.text:000000000000A571                 mov     rbx, rax
.text:000000000000A574                 xor     edi, edi        ; domainname
.text:000000000000A576                 mov     edx, 5          ; category
.text:000000000000A57B                 call    _dcgettext
.text:000000000000A580                 mov     rsi, rbx
.text:000000000000A583                 mov     rdi, rax
.text:000000000000A586                 xor     eax, eax
.text:000000000000A588                 call    dbg_printf
.text:000000000000A58D                 jmp     loc_8CCB
.text:000000000000A592 ; ---------------------------------------------------------------------------
.text:000000000000A592
.text:000000000000A592 loc_A592:                               ; CODE XREF: parse_datetime2+1264↑j
.text:000000000000A592                 mov     [rsp+488h+var_410], 0FFFFFFFFh
.text:000000000000A59A                 lea     rbx, aPm        ; "pm"
.text:000000000000A5A1                 jmp     loc_A419
.text:000000000000A5A6 ; ---------------------------------------------------------------------------
.text:000000000000A5A6
.text:000000000000A5A6 loc_A5A6:                               ; CODE XREF: parse_datetime2+1882↑j
.text:000000000000A5A6                 lea     rsi, aUsingCurrentTi ; "using current time as starting value: '"...
.text:000000000000A5AD                 xor     edi, edi        ; domainname
.text:000000000000A5AF                 call    _dcgettext
.text:000000000000A5B4                 jmp     loc_A126
.text:000000000000A5B9 ; ---------------------------------------------------------------------------
.text:000000000000A5B9
.text:000000000000A5B9 loc_A5B9:                               ; CODE XREF: parse_datetime2+1437↑j
.text:000000000000A5B9                                         ; parse_datetime2+146A↑j
.text:000000000000A5B9                 cmp     [rsp+488h+var_410], 0Ch
.text:000000000000A5BE                 jz      loc_9D00
.text:000000000000A5C4                 lea     rsi, aWarningWhenAdd_0 ; "warning: when adding relative days, it "...
.text:000000000000A5CB                 xor     edi, edi        ; domainname
.text:000000000000A5CD                 mov     edx, 5          ; category
.text:000000000000A5D2                 call    _dcgettext
.text:000000000000A5D7                 mov     rdi, rax
.text:000000000000A5DA                 xor     eax, eax
.text:000000000000A5DC                 call    dbg_printf
.text:000000000000A5E1                 jmp     loc_9D00
.text:000000000000A5E6 ; ---------------------------------------------------------------------------
.text:000000000000A5E6
.text:000000000000A5E6 loc_A5E6:                               ; CODE XREF: parse_datetime2+F77↑j
.text:000000000000A5E6                 lea     rsi, aMissingTimezon ; "missing timezone"
.text:000000000000A5ED                 xor     edi, edi        ; domainname
.text:000000000000A5EF                 call    _dcgettext
.text:000000000000A5F4                 jmp     loc_981B
.text:000000000000A5F4 ; } // starts at 8890
.text:000000000000A5F4 parse_datetime2 endp
.text:000000000000A5F4
.text:000000000000A5F4 ; ---------------------------------------------------------------------------
.text:000000000000A5F9                 align 20h
.text:000000000000A600
.text:000000000000A600 ; =============== S U B R O U T I N E =======================================
.text:000000000000A600
.text:000000000000A600
.text:000000000000A600                 public parse_datetime
.text:000000000000A600 parse_datetime  proc near
.text:000000000000A600
.text:000000000000A600 var_29          = byte ptr -29h
.text:000000000000A600
.text:000000000000A600 ; __unwind {
.text:000000000000A600                 push    r14
.text:000000000000A602                 push    r13
.text:000000000000A604                 mov     r14, rdx
.text:000000000000A607                 push    r12
.text:000000000000A609                 push    rbp
.text:000000000000A60A                 mov     r12, rdi
.text:000000000000A60D                 push    rbx
.text:000000000000A60E                 lea     rdi, name       ; "TZ"
.text:000000000000A615                 mov     r13, rsi
.text:000000000000A618                 sub     rsp, 10h
.text:000000000000A61C                 call    _getenv
.text:000000000000A621                 mov     rdi, rax        ; src
.text:000000000000A624                 mov     rbp, rax
.text:000000000000A627                 call    tzalloc
.text:000000000000A62C                 mov     rbx, rax
.text:000000000000A62F                 xor     eax, eax
.text:000000000000A631                 test    rbx, rbx
.text:000000000000A634                 jz      short loc_A65D
.text:000000000000A636                 mov     r9, rbp
.text:000000000000A639                 mov     r8, rbx
.text:000000000000A63C                 xor     ecx, ecx
.text:000000000000A63E                 mov     rdx, r14
.text:000000000000A641                 mov     rsi, r13
.text:000000000000A644                 mov     rdi, r12
.text:000000000000A647                 call    parse_datetime2
.text:000000000000A64C                 mov     rdi, rbx
.text:000000000000A64F                 mov     [rsp+38h+var_29], al
.text:000000000000A653                 call    tzfree
.text:000000000000A658                 movzx   eax, [rsp+38h+var_29]
.text:000000000000A65D
.text:000000000000A65D loc_A65D:                               ; CODE XREF: parse_datetime+34↑j
.text:000000000000A65D                 add     rsp, 10h
.text:000000000000A661                 pop     rbx
.text:000000000000A662                 pop     rbp
.text:000000000000A663                 pop     r12
.text:000000000000A665                 pop     r13
.text:000000000000A667                 pop     r14
.text:000000000000A669                 retn
.text:000000000000A669 ; } // starts at A600
.text:000000000000A669 parse_datetime  endp
.text:000000000000A669
.text:000000000000A669 ; ---------------------------------------------------------------------------
.text:000000000000A66A                 align 10h
.text:000000000000A670
.text:000000000000A670 ; =============== S U B R O U T I N E =======================================
.text:000000000000A670
.text:000000000000A670
.text:000000000000A670 year_isra_0     proc near               ; CODE XREF: posixtime+144↓p
.text:000000000000A670                                         ; posixtime+29A↓p
.text:000000000000A670
.text:000000000000A670 var_20          = qword ptr -20h
.text:000000000000A670
.text:000000000000A670 ; __unwind {
.text:000000000000A670                 push    rbp
.text:000000000000A671                 push    rbx
.text:000000000000A672                 mov     rbx, rdi
.text:000000000000A675                 sub     rsp, 18h
.text:000000000000A679                 mov     rax, fs:28h
.text:000000000000A682                 mov     [rsp+28h+var_20], rax
.text:000000000000A687                 xor     eax, eax
.text:000000000000A689                 cmp     rdx, 1
.text:000000000000A68D                 jz      short loc_A6E8
.text:000000000000A68F                 jb      short loc_A6A8
.text:000000000000A691                 cmp     rdx, 2
.text:000000000000A695                 jnz     loc_A721
.text:000000000000A69B                 and     ecx, 2
.text:000000000000A69E                 jnz     short loc_A708
.text:000000000000A6A0
.text:000000000000A6A0 loc_A6A0:                               ; CODE XREF: year_isra_0+89↓j
.text:000000000000A6A0                 xor     eax, eax
.text:000000000000A6A2                 jmp     short loc_A6CA
.text:000000000000A6A2 ; ---------------------------------------------------------------------------
.text:000000000000A6A4                 align 8
.text:000000000000A6A8
.text:000000000000A6A8 loc_A6A8:                               ; CODE XREF: year_isra_0+1F↑j
.text:000000000000A6A8                 mov     rbp, rsp
.text:000000000000A6AB                 mov     rdi, rbp        ; timer
.text:000000000000A6AE                 call    _time
.text:000000000000A6B3                 mov     rdi, rbp        ; timer
.text:000000000000A6B6                 call    _localtime
.text:000000000000A6BB                 test    rax, rax
.text:000000000000A6BE                 jz      short loc_A6CA
.text:000000000000A6C0                 mov     eax, [rax+14h]
.text:000000000000A6C3                 mov     [rbx], eax
.text:000000000000A6C5                 mov     eax, 1
.text:000000000000A6CA
.text:000000000000A6CA loc_A6CA:                               ; CODE XREF: year_isra_0+32↑j
.text:000000000000A6CA                                         ; year_isra_0+4E↑j ...
.text:000000000000A6CA                 mov     rdi, [rsp+28h+var_20]
.text:000000000000A6CF                 xor     rdi, fs:28h
.text:000000000000A6D8                 jnz     short loc_A71C
.text:000000000000A6DA                 add     rsp, 18h
.text:000000000000A6DE                 pop     rbx
.text:000000000000A6DF                 pop     rbp
.text:000000000000A6E0                 retn
.text:000000000000A6E0 ; ---------------------------------------------------------------------------
.text:000000000000A6E1                 align 8
.text:000000000000A6E8
.text:000000000000A6E8 loc_A6E8:                               ; CODE XREF: year_isra_0+1D↑j
.text:000000000000A6E8                 mov     edx, [rsi]
.text:000000000000A6EA                 mov     eax, 1
.text:000000000000A6EF                 mov     [rdi], edx
.text:000000000000A6F1                 cmp     dword ptr [rsi], 44h ; 'D'
.text:000000000000A6F4                 jg      short loc_A6CA
.text:000000000000A6F6                 and     ecx, 8
.text:000000000000A6F9                 jnz     short loc_A6A0
.text:000000000000A6FB                 add     edx, 64h ; 'd'
.text:000000000000A6FE                 mov     [rdi], edx
.text:000000000000A700                 jmp     short loc_A6CA
.text:000000000000A700 ; ---------------------------------------------------------------------------
.text:000000000000A702                 align 8
.text:000000000000A708
.text:000000000000A708 loc_A708:                               ; CODE XREF: year_isra_0+2E↑j
.text:000000000000A708                 imul    eax, [rsi], 64h ; 'd'
.text:000000000000A70B                 add     eax, [rsi+4]
.text:000000000000A70E                 sub     eax, 76Ch
.text:000000000000A713                 mov     [rdi], eax
.text:000000000000A715                 mov     eax, 1
.text:000000000000A71A                 jmp     short loc_A6CA
.text:000000000000A71C ; ---------------------------------------------------------------------------
.text:000000000000A71C
.text:000000000000A71C loc_A71C:                               ; CODE XREF: year_isra_0+68↑j
.text:000000000000A71C                 call    ___stack_chk_fail
.text:000000000000A721 ; ---------------------------------------------------------------------------
.text:000000000000A721
.text:000000000000A721 loc_A721:                               ; CODE XREF: year_isra_0+25↑j
.text:000000000000A721                 call    _abort
.text:000000000000A721 ; } // starts at A670
.text:000000000000A721 year_isra_0     endp
.text:000000000000A721
.text:000000000000A721 ; ---------------------------------------------------------------------------
.text:000000000000A726                 align 10h
.text:000000000000A730
.text:000000000000A730 ; =============== S U B R O U T I N E =======================================
.text:000000000000A730
.text:000000000000A730
.text:000000000000A730                 public posixtime
.text:000000000000A730 posixtime       proc near               ; CODE XREF: main+382↑p
.text:000000000000A730                                         ; posixtime+253↓p
.text:000000000000A730
.text:000000000000A730 var_100         = byte ptr -100h
.text:000000000000A730 var_F8          = dword ptr -0F8h
.text:000000000000A730 var_F4          = dword ptr -0F4h
.text:000000000000A730 var_F0          = dword ptr -0F0h
.text:000000000000A730 var_EC          = dword ptr -0ECh
.text:000000000000A730 var_E8          = dword ptr -0E8h
.text:000000000000A730 var_E4          = dword ptr -0E4h
.text:000000000000A730 tp              = tm ptr -0B8h
.text:000000000000A730 var_78          = dword ptr -78h
.text:000000000000A730 var_74          = dword ptr -74h
.text:000000000000A730 var_70          = dword ptr -70h
.text:000000000000A730 var_6C          = dword ptr -6Ch
.text:000000000000A730 s               = byte ptr -58h
.text:000000000000A730 var_40          = qword ptr -40h
.text:000000000000A730
.text:000000000000A730 ; __unwind {
.text:000000000000A730                 push    r15
.text:000000000000A732                 push    r14
.text:000000000000A734                 push    r13
.text:000000000000A736                 push    r12
.text:000000000000A738                 mov     r12, rdi
.text:000000000000A73B                 push    rbp
.text:000000000000A73C                 push    rbx
.text:000000000000A73D                 mov     ebp, edx
.text:000000000000A73F                 mov     rdi, rsi        ; s
.text:000000000000A742                 mov     rbx, rsi
.text:000000000000A745                 sub     rsp, 0D8h
.text:000000000000A74C                 mov     rax, fs:28h
.text:000000000000A755                 mov     [rsp+108h+var_40], rax
.text:000000000000A75D                 xor     eax, eax
.text:000000000000A75F                 call    _strlen
.text:000000000000A764                 test    bpl, 4
.text:000000000000A768                 mov     r13, rax
.text:000000000000A76B                 jz      loc_A9A0
.text:000000000000A771                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000A776                 mov     rdi, rbx        ; s
.text:000000000000A779                 call    _strchr
.text:000000000000A77E                 test    rax, rax
.text:000000000000A781                 mov     r14, rax
.text:000000000000A784                 jz      short loc_A7C3
.text:000000000000A786                 sub     rax, rbx
.text:000000000000A789                 sub     r13, rax
.text:000000000000A78C                 cmp     r13, 3
.text:000000000000A790                 jz      short loc_A7C0
.text:000000000000A792
.text:000000000000A792 loc_A792:                               ; CODE XREF: posixtime+9B↓j
.text:000000000000A792                                         ; posixtime+A1↓j ...
.text:000000000000A792                 xor     eax, eax
.text:000000000000A794
.text:000000000000A794 loc_A794:                               ; CODE XREF: posixtime+1D8↓j
.text:000000000000A794                                         ; posixtime+21F↓j ...
.text:000000000000A794                 mov     rsi, [rsp+108h+var_40]
.text:000000000000A79C                 xor     rsi, fs:28h
.text:000000000000A7A5                 jnz     loc_AA0F
.text:000000000000A7AB                 add     rsp, 0D8h
.text:000000000000A7B2                 pop     rbx
.text:000000000000A7B3                 pop     rbp
.text:000000000000A7B4                 pop     r12
.text:000000000000A7B6                 pop     r13
.text:000000000000A7B8                 pop     r14
.text:000000000000A7BA                 pop     r15
.text:000000000000A7BC                 retn
.text:000000000000A7BC ; ---------------------------------------------------------------------------
.text:000000000000A7BD                 align 20h
.text:000000000000A7C0
.text:000000000000A7C0 loc_A7C0:                               ; CODE XREF: posixtime+60↑j
.text:000000000000A7C0                 mov     r13, rax
.text:000000000000A7C3
.text:000000000000A7C3 loc_A7C3:                               ; CODE XREF: posixtime+54↑j
.text:000000000000A7C3                 lea     rax, [r13-8]
.text:000000000000A7C7                 cmp     rax, 4
.text:000000000000A7CB                 ja      short loc_A792
.text:000000000000A7CD
.text:000000000000A7CD loc_A7CD:                               ; CODE XREF: posixtime+27B↓j
.text:000000000000A7CD                 test    r13b, 1
.text:000000000000A7D1                 jnz     short loc_A792
.text:000000000000A7D3                 lea     rcx, [r13+rbx+0]
.text:000000000000A7D8                 mov     rdx, rbx
.text:000000000000A7DB                 nop     dword ptr [rax+rax+00h]
.text:000000000000A7E0
.text:000000000000A7E0 loc_A7E0:                               ; CODE XREF: posixtime+C2↓j
.text:000000000000A7E0                 movsx   eax, byte ptr [rdx]
.text:000000000000A7E3                 sub     eax, 30h ; '0'
.text:000000000000A7E6                 cmp     eax, 9
.text:000000000000A7E9                 ja      short loc_A792
.text:000000000000A7EB                 add     rdx, 1
.text:000000000000A7EF                 cmp     rcx, rdx
.text:000000000000A7F2                 jnz     short loc_A7E0
.text:000000000000A7F4                 shr     r13, 1
.text:000000000000A7F7                 xor     edx, edx
.text:000000000000A7F9                 lea     r15, [rsp+108h+var_78]
.text:000000000000A801                 jmp     short loc_A80B
.text:000000000000A801 ; ---------------------------------------------------------------------------
.text:000000000000A803                 align 8
.text:000000000000A808
.text:000000000000A808 loc_A808:                               ; CODE XREF: posixtime+FA↓j
.text:000000000000A808                 mov     rdx, rax
.text:000000000000A80B
.text:000000000000A80B loc_A80B:                               ; CODE XREF: posixtime+D1↑j
.text:000000000000A80B                 movsx   eax, byte ptr [rbx+rdx*2]
.text:000000000000A80F                 lea     ecx, [rax+rax*4-0F0h]
.text:000000000000A816                 movsx   eax, byte ptr [rbx+rdx*2+1]
.text:000000000000A81B                 lea     eax, [rax+rcx*2-30h]
.text:000000000000A81F                 mov     [r15+rdx*4], eax
.text:000000000000A823                 lea     rax, [rdx+1]
.text:000000000000A827                 cmp     r13, rax
.text:000000000000A82A                 jnz     short loc_A808
.text:000000000000A82C                 sub     rdx, 3
.text:000000000000A830                 test    bpl, 1
.text:000000000000A834                 jz      loc_A9C0
.text:000000000000A83A                 mov     eax, [rsp+108h+var_78]
.text:000000000000A841                 lea     rsi, [r15+10h]
.text:000000000000A845                 lea     rdi, [rsp+108h+var_E4]
.text:000000000000A84A                 mov     ecx, ebp
.text:000000000000A84C                 sub     eax, 1
.text:000000000000A84F                 mov     [rsp+108h+var_E8], eax
.text:000000000000A853                 mov     eax, [rsp+108h+var_74]
.text:000000000000A85A                 mov     [rsp+108h+var_EC], eax
.text:000000000000A85E                 mov     eax, [rsp+108h+var_70]
.text:000000000000A865                 mov     [rsp+108h+var_F0], eax
.text:000000000000A869                 mov     eax, [rsp+108h+var_6C]
.text:000000000000A870                 mov     [rsp+108h+var_F4], eax
.text:000000000000A874                 call    year_isra_0
.text:000000000000A879                 test    al, al
.text:000000000000A87B                 jz      loc_A792
.text:000000000000A881
.text:000000000000A881 loc_A881:                               ; CODE XREF: posixtime+2CA↓j
.text:000000000000A881                 test    r14, r14
.text:000000000000A884                 jz      loc_AA00
.text:000000000000A88A                 movsx   eax, byte ptr [r14+1]
.text:000000000000A88F                 sub     eax, 30h ; '0'
.text:000000000000A892                 cmp     eax, 9
.text:000000000000A895                 ja      loc_A792
.text:000000000000A89B                 movsx   edx, byte ptr [r14+2]
.text:000000000000A8A0                 lea     ecx, [rdx-30h]
.text:000000000000A8A3                 cmp     ecx, 9
.text:000000000000A8A6                 ja      loc_A792
.text:000000000000A8AC                 lea     eax, [rax+rax*4]
.text:000000000000A8AF                 lea     eax, [rdx+rax*2-30h]
.text:000000000000A8B3                 mov     [rsp+108h+var_F8], eax
.text:000000000000A8B7
.text:000000000000A8B7 loc_A8B7:                               ; CODE XREF: posixtime+2DA↓j
.text:000000000000A8B7                 mov     [rsp+108h+tp.tm_sec], eax
.text:000000000000A8BB                 mov     eax, [rsp+108h+var_F4]
.text:000000000000A8BF                 lea     rdi, [rsp+108h+tp] ; tp
.text:000000000000A8C4                 mov     [rsp+108h+tp.tm_wday], 0FFFFFFFFh
.text:000000000000A8CC                 mov     [rsp+108h+tp.tm_isdst], 0FFFFFFFFh
.text:000000000000A8D4                 mov     [rsp+108h+tp.tm_min], eax
.text:000000000000A8D8                 mov     eax, [rsp+108h+var_F0]
.text:000000000000A8DC                 mov     [rsp+108h+tp.tm_hour], eax
.text:000000000000A8E0                 mov     eax, [rsp+108h+var_EC]
.text:000000000000A8E4                 mov     [rsp+108h+tp.tm_mday], eax
.text:000000000000A8E8                 mov     eax, [rsp+108h+var_E8]
.text:000000000000A8EC                 mov     [rsp+108h+tp.tm_mon], eax
.text:000000000000A8F0                 mov     eax, [rsp+108h+var_E4]
.text:000000000000A8F4                 mov     [rsp+108h+tp.tm_year], eax
.text:000000000000A8F8                 call    _mktime
.text:000000000000A8FD                 mov     ecx, [rsp+108h+tp.tm_wday]
.text:000000000000A901                 mov     r13, rax
.text:000000000000A904                 xor     eax, eax
.text:000000000000A906                 test    ecx, ecx
.text:000000000000A908                 js      loc_A794
.text:000000000000A90E                 mov     edx, [rsp+108h+var_E4]
.text:000000000000A912                 mov     ecx, [rsp+108h+var_E8]
.text:000000000000A916                 xor     edx, [rsp+108h+tp.tm_year]
.text:000000000000A91A                 xor     ecx, [rsp+108h+tp.tm_mon]
.text:000000000000A91E                 mov     esi, [rsp+108h+var_F8]
.text:000000000000A922                 or      edx, ecx
.text:000000000000A924                 mov     ecx, [rsp+108h+var_EC]
.text:000000000000A928                 xor     ecx, [rsp+108h+tp.tm_mday]
.text:000000000000A92C                 or      edx, ecx
.text:000000000000A92E                 mov     ecx, [rsp+108h+var_F0]
.text:000000000000A932                 xor     ecx, [rsp+108h+tp.tm_hour]
.text:000000000000A936                 or      edx, ecx
.text:000000000000A938                 mov     ecx, [rsp+108h+var_F4]
.text:000000000000A93C                 xor     ecx, [rsp+108h+tp.tm_min]
.text:000000000000A940                 or      edx, ecx
.text:000000000000A942                 mov     ecx, [rsp+108h+tp.tm_sec]
.text:000000000000A946                 xor     ecx, esi
.text:000000000000A948                 or      edx, ecx
.text:000000000000A94A                 jz      short loc_A990
.text:000000000000A94C                 cmp     esi, 3Ch ; '<'
.text:000000000000A94F                 jnz     loc_A794
.text:000000000000A955                 lea     r14, [rsp+108h+s]
.text:000000000000A95D                 mov     edx, 10h
.text:000000000000A962                 mov     rsi, rbx
.text:000000000000A965                 mov     rdi, r14
.text:000000000000A968                 call    ___stpcpy_chk
.text:000000000000A96D                 mov     edx, 3935h
.text:000000000000A972                 lea     rdi, [rsp+108h+var_100]
.text:000000000000A977                 mov     byte ptr [rax], 0
.text:000000000000A97A                 mov     [rax-2], dx
.text:000000000000A97E                 mov     rsi, r14
.text:000000000000A981                 mov     edx, ebp
.text:000000000000A983                 call    posixtime
.text:000000000000A988                 test    al, al
.text:000000000000A98A                 jz      loc_A794
.text:000000000000A990
.text:000000000000A990 loc_A990:                               ; CODE XREF: posixtime+21A↑j
.text:000000000000A990                 mov     [r12], r13
.text:000000000000A994                 mov     eax, 1
.text:000000000000A999                 jmp     loc_A794
.text:000000000000A999 ; ---------------------------------------------------------------------------
.text:000000000000A99E                 align 20h
.text:000000000000A9A0
.text:000000000000A9A0 loc_A9A0:                               ; CODE XREF: posixtime+3B↑j
.text:000000000000A9A0                 lea     rax, [r13-8]
.text:000000000000A9A4                 xor     r14d, r14d
.text:000000000000A9A7                 cmp     rax, 4
.text:000000000000A9AB                 jbe     loc_A7CD
.text:000000000000A9B1                 jmp     loc_A792
.text:000000000000A9B1 ; ---------------------------------------------------------------------------
.text:000000000000A9B6                 align 20h
.text:000000000000A9C0
.text:000000000000A9C0 loc_A9C0:                               ; CODE XREF: posixtime+104↑j
.text:000000000000A9C0                 lea     rdi, [rsp+108h+var_E4]
.text:000000000000A9C5                 mov     ecx, ebp
.text:000000000000A9C7                 mov     rsi, r15
.text:000000000000A9CA                 call    year_isra_0
.text:000000000000A9CF                 test    al, al
.text:000000000000A9D1                 jz      loc_A792
.text:000000000000A9D7                 lea     rax, [r15+r13*4-10h]
.text:000000000000A9DC                 mov     esi, [rax]
.text:000000000000A9DE                 lea     edx, [rsi-1]
.text:000000000000A9E1                 mov     [rsp+108h+var_E8], edx
.text:000000000000A9E5                 mov     edx, [rax+4]
.text:000000000000A9E8                 mov     [rsp+108h+var_EC], edx
.text:000000000000A9EC                 mov     edx, [rax+8]
.text:000000000000A9EF                 mov     eax, [rax+0Ch]
.text:000000000000A9F2                 mov     [rsp+108h+var_F0], edx
.text:000000000000A9F6                 mov     [rsp+108h+var_F4], eax
.text:000000000000A9FA                 jmp     loc_A881
.text:000000000000A9FA ; ---------------------------------------------------------------------------
.text:000000000000A9FF                 align 20h
.text:000000000000AA00
.text:000000000000AA00 loc_AA00:                               ; CODE XREF: posixtime+154↑j
.text:000000000000AA00                 mov     [rsp+108h+var_F8], 0
.text:000000000000AA08                 xor     eax, eax
.text:000000000000AA0A                 jmp     loc_A8B7
.text:000000000000AA0F ; ---------------------------------------------------------------------------
.text:000000000000AA0F
.text:000000000000AA0F loc_AA0F:                               ; CODE XREF: posixtime+75↑j
.text:000000000000AA0F                 call    ___stack_chk_fail
.text:000000000000AA0F ; } // starts at A730
.text:000000000000AA0F posixtime       endp
.text:000000000000AA0F
.text:000000000000AA0F ; ---------------------------------------------------------------------------
.text:000000000000AA14                 align 20h
.text:000000000000AA20
.text:000000000000AA20 ; =============== S U B R O U T I N E =======================================
.text:000000000000AA20
.text:000000000000AA20
.text:000000000000AA20                 public set_program_name
.text:000000000000AA20 set_program_name proc near              ; CODE XREF: main+44↑p
.text:000000000000AA20 ; __unwind {
.text:000000000000AA20                 test    rdi, rdi
.text:000000000000AA23                 push    rbx
.text:000000000000AA24                 jz      short loc_AA9D
.text:000000000000AA26                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000AA2B                 mov     rbx, rdi
.text:000000000000AA2E                 call    _strrchr
.text:000000000000AA33                 test    rax, rax
.text:000000000000AA36                 jz      short loc_AA8D
.text:000000000000AA38                 lea     r8, [rax+1]
.text:000000000000AA3C                 mov     rdx, r8
.text:000000000000AA3F                 sub     rdx, rbx
.text:000000000000AA42                 cmp     rdx, 6
.text:000000000000AA46                 jle     short loc_AA8D
.text:000000000000AA48                 lea     rsi, [rax-6]
.text:000000000000AA4C                 lea     rdi, aLibs      ; "/.libs/"
.text:000000000000AA53                 mov     ecx, 7
.text:000000000000AA58                 repe cmpsb
.text:000000000000AA5A                 setnbe  dl
.text:000000000000AA5D                 sbb     dl, 0
.text:000000000000AA60                 test    dl, dl
.text:000000000000AA62                 jnz     short loc_AA8D
.text:000000000000AA64                 lea     rdi, aLt        ; "lt-"
.text:000000000000AA6B                 mov     ecx, 3
.text:000000000000AA70                 mov     rsi, r8
.text:000000000000AA73                 mov     rbx, r8
.text:000000000000AA76                 repe cmpsb
.text:000000000000AA78                 setnbe  dl
.text:000000000000AA7B                 sbb     dl, 0
.text:000000000000AA7E                 test    dl, dl
.text:000000000000AA80                 jnz     short loc_AA8D
.text:000000000000AA82                 lea     rbx, [rax+4]
.text:000000000000AA86                 mov     cs:__bss_start, rbx
.text:000000000000AA8D
.text:000000000000AA8D loc_AA8D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000AA8D                                         ; set_program_name+26↑j ...
.text:000000000000AA8D                 mov     cs:program_name, rbx
.text:000000000000AA94                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000AA9B                 pop     rbx
.text:000000000000AA9C                 retn
.text:000000000000AA9D ; ---------------------------------------------------------------------------
.text:000000000000AA9D
.text:000000000000AA9D loc_AA9D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000AA9D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:000000000000AAA4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000AAAB                 mov     edx, 37h ; '7'  ; n
.text:000000000000AAB0                 mov     esi, 1          ; size
.text:000000000000AAB5                 call    _fwrite
.text:000000000000AABA                 call    _abort
.text:000000000000AABA ; } // starts at AA20
.text:000000000000AABA set_program_name endp
.text:000000000000AABA
.text:000000000000AABA ; ---------------------------------------------------------------------------
.text:000000000000AABF                 align 20h
.text:000000000000AAC0
.text:000000000000AAC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AAC0
.text:000000000000AAC0 ; Attributes: info_from_lumina
.text:000000000000AAC0
.text:000000000000AAC0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:000000000000AAC0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:000000000000AAC0                                         ; quotearg_buffer_restyled+117B↓p
.text:000000000000AAC0 ; __unwind {
.text:000000000000AAC0                 push    rbp
.text:000000000000AAC1                 push    rbx
.text:000000000000AAC2                 mov     rbp, rdi
.text:000000000000AAC5                 mov     ebx, esi
.text:000000000000AAC7                 sub     rsp, 8
.text:000000000000AACB                 call    locale_charset
.text:000000000000AAD0                 movzx   edx, byte ptr [rax]
.text:000000000000AAD3                 and     edx, 0FFFFFFDFh
.text:000000000000AAD6                 cmp     dl, 55h ; 'U'
.text:000000000000AAD9                 jz      short loc_AB50
.text:000000000000AADB                 cmp     dl, 47h ; 'G'
.text:000000000000AADE                 jz      short loc_AB00
.text:000000000000AAE0
.text:000000000000AAE0 loc_AAE0:                               ; CODE XREF: gettext_quote+4A↓j
.text:000000000000AAE0                                         ; gettext_quote+50↓j ...
.text:000000000000AAE0                 lea     rax, aTz+3      ; "\""
.text:000000000000AAE7                 lea     rdx, asc_1448B  ; "'"
.text:000000000000AAEE                 cmp     ebx, 9
.text:000000000000AAF1                 cmovnz  rax, rdx
.text:000000000000AAF5                 add     rsp, 8
.text:000000000000AAF9                 pop     rbx
.text:000000000000AAFA                 pop     rbp
.text:000000000000AAFB                 retn
.text:000000000000AAFB ; ---------------------------------------------------------------------------
.text:000000000000AAFC                 align 20h
.text:000000000000AB00
.text:000000000000AB00 loc_AB00:                               ; CODE XREF: gettext_quote+1E↑j
.text:000000000000AB00                 movzx   edx, byte ptr [rax+1]
.text:000000000000AB04                 and     edx, 0FFFFFFDFh
.text:000000000000AB07                 cmp     dl, 42h ; 'B'
.text:000000000000AB0A                 jnz     short loc_AAE0
.text:000000000000AB0C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:000000000000AB10                 jnz     short loc_AAE0
.text:000000000000AB12                 cmp     byte ptr [rax+3], 38h ; '8'
.text:000000000000AB16                 jnz     short loc_AAE0
.text:000000000000AB18                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000AB1C                 jnz     short loc_AAE0
.text:000000000000AB1E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:000000000000AB22                 jnz     short loc_AAE0
.text:000000000000AB24                 cmp     byte ptr [rax+6], 30h ; '0'
.text:000000000000AB28                 jnz     short loc_AAE0
.text:000000000000AB2A                 cmp     byte ptr [rax+7], 0
.text:000000000000AB2E                 jnz     short loc_AAE0
.text:000000000000AB30                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000AB34                 lea     rax, unk_14484
.text:000000000000AB3B                 lea     rdx, unk_14488
.text:000000000000AB42                 cmovnz  rax, rdx
.text:000000000000AB46                 add     rsp, 8
.text:000000000000AB4A                 pop     rbx
.text:000000000000AB4B                 pop     rbp
.text:000000000000AB4C                 retn
.text:000000000000AB4C ; ---------------------------------------------------------------------------
.text:000000000000AB4D                 align 10h
.text:000000000000AB50
.text:000000000000AB50 loc_AB50:                               ; CODE XREF: gettext_quote+19↑j
.text:000000000000AB50                 movzx   edx, byte ptr [rax+1]
.text:000000000000AB54                 and     edx, 0FFFFFFDFh
.text:000000000000AB57                 cmp     dl, 54h ; 'T'
.text:000000000000AB5A                 jnz     short loc_AAE0
.text:000000000000AB5C                 movzx   edx, byte ptr [rax+2]
.text:000000000000AB60                 and     edx, 0FFFFFFDFh
.text:000000000000AB63                 cmp     dl, 46h ; 'F'
.text:000000000000AB66                 jnz     loc_AAE0
.text:000000000000AB6C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:000000000000AB70                 jnz     loc_AAE0
.text:000000000000AB76                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000AB7A                 jnz     loc_AAE0
.text:000000000000AB80                 cmp     byte ptr [rax+5], 0
.text:000000000000AB84                 jnz     loc_AAE0
.text:000000000000AB8A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000AB8E                 lea     rax, unk_1447C
.text:000000000000AB95                 lea     rdx, unk_14480
.text:000000000000AB9C                 cmovnz  rax, rdx
.text:000000000000ABA0                 add     rsp, 8
.text:000000000000ABA4                 pop     rbx
.text:000000000000ABA5                 pop     rbp
.text:000000000000ABA6                 retn
.text:000000000000ABA6 ; } // starts at AAC0
.text:000000000000ABA6 gettext_quote   endp
.text:000000000000ABA6
.text:000000000000ABA6 ; ---------------------------------------------------------------------------
.text:000000000000ABA7                 align 10h
.text:000000000000ABB0
.text:000000000000ABB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ABB0
.text:000000000000ABB0 ; Attributes: info_from_lumina
.text:000000000000ABB0
.text:000000000000ABB0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:000000000000ABB0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:000000000000ABB0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:000000000000ABB0
.text:000000000000ABB0 var_E0          = dword ptr -0E0h
.text:000000000000ABB0 var_DB          = byte ptr -0DBh
.text:000000000000ABB0 var_DA          = byte ptr -0DAh
.text:000000000000ABB0 var_D9          = byte ptr -0D9h
.text:000000000000ABB0 s               = qword ptr -0D8h
.text:000000000000ABB0 n               = qword ptr -0D0h
.text:000000000000ABB0 var_C8          = qword ptr -0C8h
.text:000000000000ABB0 ps              = qword ptr -0C0h
.text:000000000000ABB0 var_B8          = qword ptr -0B8h
.text:000000000000ABB0 var_B0          = qword ptr -0B0h
.text:000000000000ABB0 var_A8          = qword ptr -0A8h
.text:000000000000ABB0 s2              = qword ptr -0A0h
.text:000000000000ABB0 var_98          = qword ptr -98h
.text:000000000000ABB0 var_90          = qword ptr -90h
.text:000000000000ABB0 var_88          = qword ptr -88h
.text:000000000000ABB0 var_80          = qword ptr -80h
.text:000000000000ABB0 var_78          = qword ptr -78h
.text:000000000000ABB0 var_70          = dword ptr -70h
.text:000000000000ABB0 var_6C          = byte ptr -6Ch
.text:000000000000ABB0 var_6B          = byte ptr -6Bh
.text:000000000000ABB0 var_6A          = byte ptr -6Ah
.text:000000000000ABB0 var_69          = byte ptr -69h
.text:000000000000ABB0 var_68          = qword ptr -68h
.text:000000000000ABB0 var_60          = qword ptr -60h
.text:000000000000ABB0 wc              = dword ptr -4Ch
.text:000000000000ABB0 var_48          = qword ptr -48h
.text:000000000000ABB0 var_40          = qword ptr -40h
.text:000000000000ABB0 arg_0           = qword ptr  8
.text:000000000000ABB0 arg_8           = qword ptr  10h
.text:000000000000ABB0 arg_10          = qword ptr  18h
.text:000000000000ABB0
.text:000000000000ABB0 ; __unwind {
.text:000000000000ABB0                 push    r15
.text:000000000000ABB2                 push    r14
.text:000000000000ABB4                 mov     r15d, r8d
.text:000000000000ABB7                 push    r13
.text:000000000000ABB9                 push    r12
.text:000000000000ABBB                 mov     r14, rdi
.text:000000000000ABBE                 push    rbp
.text:000000000000ABBF                 push    rbx
.text:000000000000ABC0                 mov     ebx, r9d
.text:000000000000ABC3                 mov     r13, rsi
.text:000000000000ABC6                 mov     rbp, rcx
.text:000000000000ABC9                 and     ebx, 2
.text:000000000000ABCC                 sub     rsp, 0B8h
.text:000000000000ABD3                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000ABDB                 mov     [rsp+0E8h+s], rdx
.text:000000000000ABE0                 mov     [rsp+0E8h+var_E0], r8d
.text:000000000000ABE5                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000ABEA                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000ABEF                 mov     rax, [rsp+0E8h+arg_8]
.text:000000000000ABF7                 mov     [rsp+0E8h+var_80], rax
.text:000000000000ABFC                 mov     rax, [rsp+0E8h+arg_10]
.text:000000000000AC04                 mov     [rsp+0E8h+var_88], rax
.text:000000000000AC09                 mov     rax, fs:28h
.text:000000000000AC12                 mov     [rsp+0E8h+var_40], rax
.text:000000000000AC1A                 xor     eax, eax
.text:000000000000AC1C                 call    ___ctype_get_mb_cur_max
.text:000000000000AC21                 cmp     r15d, 0Ah       ; switch 11 cases
.text:000000000000AC25                 mov     [rsp+0E8h+var_90], rax
.text:000000000000AC2A                 ja      def_AC41        ; jumptable 00000000000121F1 default case
.text:000000000000AC30                 lea     rcx, jpt_AC41
.text:000000000000AC37                 mov     edx, r15d
.text:000000000000AC3A                 movsxd  rax, ds:(jpt_AC41 - 144E0h)[rcx+rdx*4]
.text:000000000000AC3E                 add     rax, rcx
.text:000000000000AC41                 jmp     rax             ; switch jump
.text:000000000000AC43 ; ---------------------------------------------------------------------------
.text:000000000000AC43
.text:000000000000AC43 loc_AC43:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000AC43                                         ; quotearg_buffer_restyled+C66↓j
.text:000000000000AC43                                         ; DATA XREF: ...
.text:000000000000AC43                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:000000000000AC48                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000AC4D                 xor     r12d, r12d
.text:000000000000AC50                 mov     [rsp+0E8h+var_98], 0
.text:000000000000AC59                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000AC5E                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000AC63
.text:000000000000AC63 loc_AC63:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:000000000000AC63                 lea     rax, asc_1448B  ; "'"
.text:000000000000AC6A                 mov     [rsp+0E8h+n], 1
.text:000000000000AC73                 xor     r15d, r15d
.text:000000000000AC76                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000AC7E                 mov     [rsp+0E8h+s2], rax
.text:000000000000AC83
.text:000000000000AC83 loc_AC83:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:000000000000AC83                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:000000000000AC83                 xor     r11d, r11d
.text:000000000000AC86                 mov     rax, rbp
.text:000000000000AC89                 mov     r8d, r12d
.text:000000000000AC8C                 mov     rbp, r11
.text:000000000000AC8F                 mov     r11, rax
.text:000000000000AC92                 nop     word ptr [rax+rax+00h]
.text:000000000000AC98
.text:000000000000AC98 loc_AC98:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:000000000000AC98                                         ; quotearg_buffer_restyled+42C↓j
.text:000000000000AC98                 cmp     r11, rbp
.text:000000000000AC9B                 setnz   r12b
.text:000000000000AC9F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000ACA3                 jnz     short loc_ACB2
.text:000000000000ACA5                 mov     rax, [rsp+0E8h+s]
.text:000000000000ACAA                 cmp     byte ptr [rax+rbp], 0
.text:000000000000ACAE                 setnz   r12b
.text:000000000000ACB2
.text:000000000000ACB2 loc_ACB2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:000000000000ACB2                 test    r12b, r12b
.text:000000000000ACB5                 jz      loc_B310
.text:000000000000ACBB                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000ACC0                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000ACC5                 lea     r9, [rdi+rbp]
.text:000000000000ACC9                 setnz   al
.text:000000000000ACCC                 and     al, [rsp+0E8h+var_DB]
.text:000000000000ACD0                 mov     r10d, eax
.text:000000000000ACD3                 jz      loc_AD80
.text:000000000000ACD9                 mov     rax, [rsp+0E8h+n]
.text:000000000000ACDE                 test    rax, rax
.text:000000000000ACE1                 jz      loc_B110
.text:000000000000ACE7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000ACEB                 lea     rbx, [rbp+rax+0]
.text:000000000000ACF0                 jnz     short loc_AD20
.text:000000000000ACF2                 cmp     rax, 1
.text:000000000000ACF6                 jbe     short loc_AD20
.text:000000000000ACF8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000ACFD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:000000000000AD02                 mov     [rsp+0E8h+ps], r9
.text:000000000000AD07                 call    _strlen
.text:000000000000AD0C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000AD12                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000AD18                 mov     r11, rax
.text:000000000000AD1B                 mov     r9, [rsp+0E8h+ps]
.text:000000000000AD20
.text:000000000000AD20 loc_AD20:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:000000000000AD20                                         ; quotearg_buffer_restyled+146↑j
.text:000000000000AD20                 cmp     rbx, r11
.text:000000000000AD23                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:000000000000AD28                 ja      loc_B2E0
.text:000000000000AD2E                 mov     rdx, [rsp+0E8h+n] ; n
.text:000000000000AD33                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:000000000000AD38                 mov     rdi, r9         ; s1
.text:000000000000AD3B                 mov     [rsp+0E8h+var_A8], r11
.text:000000000000AD40                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000AD45                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000AD4A                 call    _memcmp
.text:000000000000AD4F                 test    eax, eax
.text:000000000000AD51                 mov     r9, [rsp+0E8h+var_B8]
.text:000000000000AD56                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000AD5C                 mov     r11, [rsp+0E8h+var_A8]
.text:000000000000AD61                 jnz     loc_B2E0
.text:000000000000AD67                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000AD6C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:000000000000AD72                 jnz     loc_BCF5
.text:000000000000AD78                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000AD80
.text:000000000000AD80 loc_AD80:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:000000000000AD80                                         ; quotearg_buffer_restyled+733↓j
.text:000000000000AD80                 movzx   ebx, byte ptr [r9]
.text:000000000000AD84                 cmp     bl, 7Eh         ; switch 127 cases
.text:000000000000AD87                 ja      def_AD9E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000AD8D                 lea     rcx, jpt_AD9E
.text:000000000000AD94                 movzx   edx, bl
.text:000000000000AD97                 movsxd  rax, ds:(jpt_AD9E - 1450Ch)[rcx+rdx*4]
.text:000000000000AD9B                 add     rax, rcx
.text:000000000000AD9E                 jmp     rax             ; switch jump
.text:000000000000ADA0 ; ---------------------------------------------------------------------------
.text:000000000000ADA0
.text:000000000000ADA0 loc_ADA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000ADA0                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000ADA0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:000000000000ADA3
.text:000000000000ADA3 loc_ADA3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000ADA3                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000ADA3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:000000000000ADA7                 setnz   al
.text:000000000000ADAA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000ADAE                 jnz     short loc_ADBC
.text:000000000000ADB0                 mov     rax, [rsp+0E8h+s]
.text:000000000000ADB5                 cmp     byte ptr [rax+1], 0
.text:000000000000ADB9                 setnz   al
.text:000000000000ADBC
.text:000000000000ADBC loc_ADBC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000ADBC                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000ADC1                 setz    dl
.text:000000000000ADC4                 test    al, al
.text:000000000000ADC6                 jz      loc_B018
.text:000000000000ADCC
.text:000000000000ADCC loc_ADCC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000ADCC                 xor     r12d, r12d
.text:000000000000ADCF                 xor     eax, eax
.text:000000000000ADD1                 nop     dword ptr [rax+00000000h]
.text:000000000000ADD8
.text:000000000000ADD8 loc_ADD8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:000000000000ADD8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:000000000000ADD8                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000ADDD                 jnz     loc_AEF2
.text:000000000000ADE3                 test    dl, dl
.text:000000000000ADE5                 jnz     loc_AEF2
.text:000000000000ADEB
.text:000000000000ADEB loc_ADEB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000ADEB                 mov     rsi, [rsp+0E8h+var_C8]
.text:000000000000ADF0                 test    rsi, rsi
.text:000000000000ADF3                 jz      short loc_AE09
.text:000000000000ADF5                 mov     edx, ebx
.text:000000000000ADF7                 shr     dl, 5
.text:000000000000ADFA                 movzx   edx, dl
.text:000000000000ADFD                 mov     edx, [rsi+rdx*4]
.text:000000000000AE00                 bt      edx, ebx
.text:000000000000AE03                 jb      loc_AF53
.text:000000000000AE09
.text:000000000000AE09 loc_AE09:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:000000000000AE09                                         ; quotearg_buffer_restyled+34D↓j ...
.text:000000000000AE09                 test    r10b, r10b
.text:000000000000AE0C                 jnz     loc_AF53
.text:000000000000AE12                 xor     eax, 1
.text:000000000000AE15                 add     rbp, 1
.text:000000000000AE19                 and     eax, r8d
.text:000000000000AE1C
.text:000000000000AE1C loc_AE1C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000AE1C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000AE1C                 test    al, al
.text:000000000000AE1E                 jz      short loc_AE40
.text:000000000000AE20                 cmp     r13, r15
.text:000000000000AE23                 jbe     short loc_AE2A
.text:000000000000AE25                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000AE2A
.text:000000000000AE2A loc_AE2A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000AE2A                 lea     rax, [r15+1]
.text:000000000000AE2E                 cmp     r13, rax
.text:000000000000AE31                 jbe     short loc_AE39
.text:000000000000AE33                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000AE39
.text:000000000000AE39 loc_AE39:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:000000000000AE39                 add     r15, 2
.text:000000000000AE3D                 xor     r8d, r8d
.text:000000000000AE40
.text:000000000000AE40 loc_AE40:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:000000000000AE40                                         ; quotearg_buffer_restyled+403↓j ...
.text:000000000000AE40                 cmp     r15, r13
.text:000000000000AE43                 jnb     short loc_AE49
.text:000000000000AE45                 mov     [r14+r15], bl
.text:000000000000AE49
.text:000000000000AE49 loc_AE49:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:000000000000AE49                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000AE4E                 add     r15, 1
.text:000000000000AE52                 mov     eax, 0
.text:000000000000AE57                 test    r12b, r12b
.text:000000000000AE5A                 cmovz   edi, eax
.text:000000000000AE5D                 mov     [rsp+0E8h+var_DA], dil
.text:000000000000AE62                 jmp     loc_AC98
.text:000000000000AE62 ; ---------------------------------------------------------------------------
.text:000000000000AE67                 align 10h
.text:000000000000AE70
.text:000000000000AE70 loc_AE70:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000AE70                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000AE70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:000000000000AE73
.text:000000000000AE73 loc_AE73:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AE73                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000AE73                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:000000000000AE77                 cmp     eax, 2
.text:000000000000AE7A                 jz      loc_B438
.text:000000000000AE80                 cmp     eax, 5
.text:000000000000AE83                 jz      loc_B3F8
.text:000000000000AE89                 cmp     eax, 2
.text:000000000000AE8C                 mov     ebx, 3Fh ; '?'
.text:000000000000AE91                 setz    dl
.text:000000000000AE94                 xor     r12d, r12d
.text:000000000000AE97                 xor     eax, eax
.text:000000000000AE99                 jmp     loc_ADD8
.text:000000000000AE99 ; ---------------------------------------------------------------------------
.text:000000000000AE9E                 align 20h
.text:000000000000AEA0
.text:000000000000AEA0 loc_AEA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000AEA0                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000AEA0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:000000000000AEA3
.text:000000000000AEA3 loc_AEA3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AEA3                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000AEA3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:000000000000AEA8                 jz      loc_B3B0
.text:000000000000AEAE                 mov     [rsp+0E8h+var_6C], r12b
.text:000000000000AEB3                 xor     edx, edx
.text:000000000000AEB5                 xor     eax, eax
.text:000000000000AEB7                 mov     ebx, 27h ; '''
.text:000000000000AEBC                 jmp     loc_ADD8
.text:000000000000AEBC ; ---------------------------------------------------------------------------
.text:000000000000AEC1                 align 8
.text:000000000000AEC8
.text:000000000000AEC8 loc_AEC8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AEC8                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000AEC8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000AECD                 mov     ebx, 74h ; 't'
.text:000000000000AED2
.text:000000000000AED2 loc_AED2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:000000000000AED2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:000000000000AED2                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000AED7                 setz    al
.text:000000000000AEDA                 and     al, [rsp+0E8h+var_D9]
.text:000000000000AEDE                 jnz     loc_B02E
.text:000000000000AEE4
.text:000000000000AEE4 loc_AEE4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:000000000000AEE4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:000000000000AEE4                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000AEE9                 jnz     short loc_AF50
.text:000000000000AEEB
.text:000000000000AEEB loc_AEEB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000AEEB                 mov     ebx, edx
.text:000000000000AEED                 xor     r12d, r12d
.text:000000000000AEF0                 xor     eax, eax
.text:000000000000AEF2
.text:000000000000AEF2 loc_AEF2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:000000000000AEF2                                         ; quotearg_buffer_restyled+235↑j
.text:000000000000AEF2                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000AEF7                 jnz     loc_ADEB
.text:000000000000AEFD                 jmp     loc_AE09
.text:000000000000AEFD ; ---------------------------------------------------------------------------
.text:000000000000AF02                 align 8
.text:000000000000AF08
.text:000000000000AF08 loc_AF08:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AF08                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000AF08                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000AF0D                 mov     ebx, 62h ; 'b'
.text:000000000000AF12                 jmp     short loc_AEE4
.text:000000000000AF12 ; ---------------------------------------------------------------------------
.text:000000000000AF14                 align 8
.text:000000000000AF18
.text:000000000000AF18 loc_AF18:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AF18                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000AF18                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000AF1D                 jz      loc_B2F0
.text:000000000000AF23                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000AF28                 jz      loc_B140
.text:000000000000AF2E
.text:000000000000AF2E loc_AF2E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000AF2E                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000AF33                 jz      loc_B140
.text:000000000000AF39                 cmp     [rsp+0E8h+n], 0
.text:000000000000AF3F                 jnz     loc_B2FB
.text:000000000000AF45                 mov     ebx, 5Ch ; '\'
.text:000000000000AF4A                 nop     word ptr [rax+rax+00h]
.text:000000000000AF50
.text:000000000000AF50 loc_AF50:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:000000000000AF50                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:000000000000AF50                 xor     r12d, r12d
.text:000000000000AF53
.text:000000000000AF53 loc_AF53:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:000000000000AF53                                         ; quotearg_buffer_restyled+25C↑j
.text:000000000000AF53                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000AF58                 setz    dl
.text:000000000000AF5B                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000AF60                 mov     eax, edx
.text:000000000000AF62                 jnz     loc_B7B8
.text:000000000000AF68                 mov     eax, r8d
.text:000000000000AF6B                 xor     eax, 1
.text:000000000000AF6E                 and     al, dl
.text:000000000000AF70                 jz      short loc_AFA1
.text:000000000000AF72                 cmp     r13, r15
.text:000000000000AF75                 jbe     short loc_AF7C
.text:000000000000AF77                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000AF7C
.text:000000000000AF7C loc_AF7C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000AF7C                 lea     rdx, [r15+1]
.text:000000000000AF80                 cmp     r13, rdx
.text:000000000000AF83                 jbe     short loc_AF8B
.text:000000000000AF85                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000AF8B
.text:000000000000AF8B loc_AF8B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000AF8B                 lea     rdx, [r15+2]
.text:000000000000AF8F                 cmp     r13, rdx
.text:000000000000AF92                 jbe     short loc_AF9A
.text:000000000000AF94                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000AF9A
.text:000000000000AF9A loc_AF9A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000AF9A                 add     r15, 3
.text:000000000000AF9E                 mov     r8d, eax
.text:000000000000AFA1
.text:000000000000AFA1 loc_AFA1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:000000000000AFA1                 cmp     r13, r15
.text:000000000000AFA4                 jbe     short loc_AFAB
.text:000000000000AFA6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000AFAB
.text:000000000000AFAB loc_AFAB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000AFAB                 add     r15, 1
.text:000000000000AFAF                 add     rbp, 1
.text:000000000000AFB3                 jmp     loc_AE40
.text:000000000000AFB3 ; ---------------------------------------------------------------------------
.text:000000000000AFB8                 align 20h
.text:000000000000AFC0
.text:000000000000AFC0 loc_AFC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AFC0                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000AFC0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:000000000000AFC5                 jnz     loc_B193
.text:000000000000AFCB                 xor     edx, edx
.text:000000000000AFCD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:000000000000AFD2                 jz      loc_AEEB
.text:000000000000AFD8                 add     rbp, 1
.text:000000000000AFDC                 jmp     loc_AC98
.text:000000000000AFDC ; ---------------------------------------------------------------------------
.text:000000000000AFE1                 align 8
.text:000000000000AFE8
.text:000000000000AFE8 loc_AFE8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000AFE8                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000AFE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000AFED                 setz    dl
.text:000000000000AFF0                 xor     eax, eax
.text:000000000000AFF2                 jmp     loc_ADD8
.text:000000000000AFF2 ; ---------------------------------------------------------------------------
.text:000000000000AFF7                 align 20h
.text:000000000000B000
.text:000000000000B000 loc_B000:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000B000                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000B000                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:000000000000B005                 mov     ebx, 61h ; 'a'
.text:000000000000B00A                 jmp     loc_AEE4
.text:000000000000B00A ; ---------------------------------------------------------------------------
.text:000000000000B00F                 align 10h
.text:000000000000B010
.text:000000000000B010 loc_B010:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000B010                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000B010                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:000000000000B015                 setz    dl
.text:000000000000B018
.text:000000000000B018 loc_B018:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:000000000000B018                                         ; quotearg_buffer_restyled+6A3↓j
.text:000000000000B018                 test    rbp, rbp
.text:000000000000B01B                 jnz     loc_ADCC
.text:000000000000B021
.text:000000000000B021 loc_B021:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:000000000000B021                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:000000000000B021                 movzx   eax, [rsp+0E8h+var_D9]
.text:000000000000B026                 and     al, dl
.text:000000000000B028                 jz      loc_ADD8
.text:000000000000B02E
.text:000000000000B02E loc_B02E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000B02E                 mov     rbp, r11
.text:000000000000B031                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000B039                 jmp     loc_B739
.text:000000000000B039 ; ---------------------------------------------------------------------------
.text:000000000000B03E                 align 20h
.text:000000000000B040
.text:000000000000B040 loc_B040:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000B040                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000B040                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:000000000000B045                 setz    dl
.text:000000000000B048                 xor     r12d, r12d
.text:000000000000B04B                 jmp     short loc_B021
.text:000000000000B04B ; ---------------------------------------------------------------------------
.text:000000000000B04D                 align 10h
.text:000000000000B050
.text:000000000000B050 loc_B050:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000B050                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000B050                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:000000000000B055                 mov     ebx, 20h ; ' '
.text:000000000000B05A                 setz    dl
.text:000000000000B05D                 jmp     short loc_B021
.text:000000000000B05D ; ---------------------------------------------------------------------------
.text:000000000000B05F                 align 20h
.text:000000000000B060
.text:000000000000B060 loc_B060:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000B060                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000B060                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:000000000000B065                 mov     ebx, 72h ; 'r'
.text:000000000000B06A                 jmp     loc_AED2
.text:000000000000B06A ; ---------------------------------------------------------------------------
.text:000000000000B06F                 align 10h
.text:000000000000B070
.text:000000000000B070 loc_B070:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000B070                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000B070                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:000000000000B075                 mov     ebx, 66h ; 'f'
.text:000000000000B07A                 jmp     loc_AEE4
.text:000000000000B07A ; ---------------------------------------------------------------------------
.text:000000000000B07F                 align 20h
.text:000000000000B080
.text:000000000000B080 loc_B080:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000B080                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000B080                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:000000000000B085                 mov     ebx, 76h ; 'v'
.text:000000000000B08A                 jmp     loc_AEE4
.text:000000000000B08A ; ---------------------------------------------------------------------------
.text:000000000000B08F                 align 10h
.text:000000000000B090
.text:000000000000B090 loc_B090:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000B090                                         ; DATA XREF: .rodata:jpt_AD9E↓o
.text:000000000000B090                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:000000000000B095                 mov     ebx, 6Eh ; 'n'
.text:000000000000B09A                 jmp     loc_AED2
.text:000000000000B09A ; ---------------------------------------------------------------------------
.text:000000000000B09F                 align 20h
.text:000000000000B0A0
.text:000000000000B0A0 def_B12A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:000000000000B0A0                                         ; quotearg_buffer_restyled+57A↓j
.text:000000000000B0A0                                         ; DATA XREF: ...
.text:000000000000B0A0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:000000000000B0A3                 nop     dword ptr [rax+rax+00h]
.text:000000000000B0A8
.text:000000000000B0A8 def_AD9E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:000000000000B0A8                                         ; quotearg_buffer_restyled+1EE↑j
.text:000000000000B0A8                                         ; DATA XREF: ...
.text:000000000000B0A8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000B0AE                 jnz     loc_B458
.text:000000000000B0B4                 mov     [rsp+0E8h+var_B0], r11
.text:000000000000B0B9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000B0BE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:000000000000B0C3                 call    ___ctype_b_loc
.text:000000000000B0C8                 mov     rcx, [rax]
.text:000000000000B0CB                 movzx   edx, bl
.text:000000000000B0CE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:000000000000B0D4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000B0DA                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000B0DF                 mov     edi, 1
.text:000000000000B0E4                 movzx   eax, word ptr [rcx+rdx*2]
.text:000000000000B0E8                 and     ax, 4000h
.text:000000000000B0EC                 setnz   r12b
.text:000000000000B0F0                 setz    al
.text:000000000000B0F3                 and     al, [rsp+0E8h+var_DB]
.text:000000000000B0F7
.text:000000000000B0F7 loc_B0F7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:000000000000B0F7                 test    al, al
.text:000000000000B0F9                 jnz     loc_BA91
.text:000000000000B0FF                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000B104                 setz    dl
.text:000000000000B107                 jmp     loc_ADD8
.text:000000000000B107 ; ---------------------------------------------------------------------------
.text:000000000000B10C                 align 10h
.text:000000000000B110
.text:000000000000B110 loc_B110:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:000000000000B110                 movzx   ebx, byte ptr [r9]
.text:000000000000B114                 cmp     bl, 7Eh         ; switch 127 cases
.text:000000000000B117                 ja      short def_B12A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:000000000000B119                 lea     rcx, jpt_B12A
.text:000000000000B120                 movzx   edx, bl
.text:000000000000B123                 movsxd  rax, ds:(jpt_B12A - 14708h)[rcx+rdx*4]
.text:000000000000B127                 add     rax, rcx
.text:000000000000B12A                 jmp     rax             ; switch jump
.text:000000000000B12A ; ---------------------------------------------------------------------------
.text:000000000000B12C                 align 10h
.text:000000000000B130
.text:000000000000B130 loc_B130:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B130                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B130                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:000000000000B133                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000B138                 jnz     loc_AF2E
.text:000000000000B13E                 xchg    ax, ax
.text:000000000000B140
.text:000000000000B140 loc_B140:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:000000000000B140                                         ; quotearg_buffer_restyled+383↑j
.text:000000000000B140                 mov     edx, 5Ch ; '\'
.text:000000000000B145                 mov     ebx, 5Ch ; '\'
.text:000000000000B14A                 jmp     loc_AEE4
.text:000000000000B14A ; ---------------------------------------------------------------------------
.text:000000000000B14F                 align 10h
.text:000000000000B150
.text:000000000000B150 loc_B150:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B150                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B150                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:000000000000B155                 xor     r10d, r10d
.text:000000000000B158                 mov     ebx, 66h ; 'f'
.text:000000000000B15D                 jmp     loc_AEE4
.text:000000000000B15D ; ---------------------------------------------------------------------------
.text:000000000000B162                 align 8
.text:000000000000B168
.text:000000000000B168 loc_B168:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B168                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B168                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000B16D                 xor     r10d, r10d
.text:000000000000B170                 mov     ebx, 6Eh ; 'n'
.text:000000000000B175                 jmp     loc_AED2
.text:000000000000B175 ; ---------------------------------------------------------------------------
.text:000000000000B17A                 align 20h
.text:000000000000B180
.text:000000000000B180 loc_B180:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B180                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B180                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:000000000000B185                 jmp     loc_AF50
.text:000000000000B185 ; ---------------------------------------------------------------------------
.text:000000000000B18A                 align 10h
.text:000000000000B190
.text:000000000000B190 loc_B190:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B190                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B190                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:000000000000B193
.text:000000000000B193 loc_B193:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:000000000000B193                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000B198                 setz    dl
.text:000000000000B19B                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000B1A0                 jnz     loc_BD3A
.text:000000000000B1A6                 mov     eax, r8d
.text:000000000000B1A9                 mov     rcx, r15
.text:000000000000B1AC                 xor     eax, 1
.text:000000000000B1AF                 and     al, dl
.text:000000000000B1B1                 jz      short loc_B1E0
.text:000000000000B1B3                 cmp     r13, r15
.text:000000000000B1B6                 jbe     short loc_B1BD
.text:000000000000B1B8                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000B1BD
.text:000000000000B1BD loc_B1BD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000B1BD                 lea     rcx, [r15+1]
.text:000000000000B1C1                 cmp     r13, rcx
.text:000000000000B1C4                 jbe     short loc_B1CC
.text:000000000000B1C6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000B1CC
.text:000000000000B1CC loc_B1CC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000B1CC                 lea     rcx, [r15+2]
.text:000000000000B1D0                 cmp     r13, rcx
.text:000000000000B1D3                 ja      loc_B809
.text:000000000000B1D9
.text:000000000000B1D9 loc_B1D9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:000000000000B1D9                 lea     rcx, [r15+3]
.text:000000000000B1DD                 mov     r8d, eax
.text:000000000000B1E0
.text:000000000000B1E0 loc_B1E0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:000000000000B1E0                 cmp     r13, rcx
.text:000000000000B1E3                 jbe     short loc_B1EA
.text:000000000000B1E5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000B1EA
.text:000000000000B1EA loc_B1EA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000B1EA                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000B1EF                 lea     r15, [rcx+1]
.text:000000000000B1F3                 jz      loc_B7F9
.text:000000000000B1F9                 lea     rax, [rbp+1]
.text:000000000000B1FD                 cmp     rax, r11
.text:000000000000B200                 jnb     short loc_B21B
.text:000000000000B202                 mov     rax, [rsp+0E8h+s]
.text:000000000000B207                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000B20C                 mov     byte ptr [rsp+0E8h+ps], al
.text:000000000000B210                 sub     eax, 30h ; '0'
.text:000000000000B213                 cmp     al, 9
.text:000000000000B215                 jbe     loc_BA49
.text:000000000000B21B
.text:000000000000B21B loc_B21B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000B21B                 mov     eax, r12d
.text:000000000000B21E                 mov     ebx, 30h ; '0'
.text:000000000000B223                 xor     r12d, r12d
.text:000000000000B226                 jmp     loc_ADD8
.text:000000000000B226 ; ---------------------------------------------------------------------------
.text:000000000000B22B                 align 10h
.text:000000000000B230
.text:000000000000B230 loc_B230:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B230                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B230                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:000000000000B235                 mov     r12d, r10d
.text:000000000000B238                 setz    dl
.text:000000000000B23B                 xor     r10d, r10d
.text:000000000000B23E                 xor     eax, eax
.text:000000000000B240                 jmp     loc_ADD8
.text:000000000000B240 ; ---------------------------------------------------------------------------
.text:000000000000B245                 align 8
.text:000000000000B248
.text:000000000000B248 loc_B248:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B248                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B248                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000B24D                 setz    dl
.text:000000000000B250                 xor     r10d, r10d
.text:000000000000B253                 jmp     loc_B018
.text:000000000000B253 ; ---------------------------------------------------------------------------
.text:000000000000B258                 align 20h
.text:000000000000B260
.text:000000000000B260 loc_B260:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B260                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B260                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:000000000000B265                 setz    dl
.text:000000000000B268                 xor     r10d, r10d
.text:000000000000B26B                 xor     r12d, r12d
.text:000000000000B26E                 jmp     loc_B021
.text:000000000000B26E ; ---------------------------------------------------------------------------
.text:000000000000B273                 align 8
.text:000000000000B278
.text:000000000000B278 loc_B278:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B278                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B278                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000B27D                 mov     r12d, r10d
.text:000000000000B280                 mov     ebx, 20h ; ' '
.text:000000000000B285                 setz    dl
.text:000000000000B288                 xor     r10d, r10d
.text:000000000000B28B                 jmp     loc_B021
.text:000000000000B290 ; ---------------------------------------------------------------------------
.text:000000000000B290
.text:000000000000B290 loc_B290:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B290                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B290                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:000000000000B295                 xor     r10d, r10d
.text:000000000000B298                 mov     ebx, 72h ; 'r'
.text:000000000000B29D                 jmp     loc_AED2
.text:000000000000B29D ; ---------------------------------------------------------------------------
.text:000000000000B2A2                 align 8
.text:000000000000B2A8
.text:000000000000B2A8 loc_B2A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B2A8                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B2A8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000B2AD                 jmp     loc_AF50
.text:000000000000B2AD ; ---------------------------------------------------------------------------
.text:000000000000B2B2                 align 8
.text:000000000000B2B8
.text:000000000000B2B8 loc_B2B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B2B8                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B2B8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000B2BD                 xor     r10d, r10d
.text:000000000000B2C0                 mov     ebx, 74h ; 't'
.text:000000000000B2C5                 jmp     loc_AED2
.text:000000000000B2C5 ; ---------------------------------------------------------------------------
.text:000000000000B2CA                 align 10h
.text:000000000000B2D0
.text:000000000000B2D0 loc_B2D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000B2D0                                         ; DATA XREF: .rodata:jpt_B12A↓o
.text:000000000000B2D0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:000000000000B2D5                 jmp     loc_AF50
.text:000000000000B2D5 ; ---------------------------------------------------------------------------
.text:000000000000B2DA                 align 20h
.text:000000000000B2E0
.text:000000000000B2E0 loc_B2E0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:000000000000B2E0                                         ; quotearg_buffer_restyled+1B1↑j
.text:000000000000B2E0                 xor     r10d, r10d
.text:000000000000B2E3                 jmp     loc_AD80
.text:000000000000B2E3 ; ---------------------------------------------------------------------------
.text:000000000000B2E8                 align 10h
.text:000000000000B2F0
.text:000000000000B2F0 loc_B2F0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:000000000000B2F0                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000B2F5                 jnz     loc_BC60
.text:000000000000B2FB
.text:000000000000B2FB loc_B2FB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000B2FB                 add     rbp, 1
.text:000000000000B2FF                 mov     eax, r8d
.text:000000000000B302                 xor     r12d, r12d
.text:000000000000B305                 mov     ebx, 5Ch ; '\'
.text:000000000000B30A                 jmp     loc_AE1C
.text:000000000000B30A ; ---------------------------------------------------------------------------
.text:000000000000B30F                 align 10h
.text:000000000000B310
.text:000000000000B310 loc_B310:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:000000000000B310                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000B315                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000B31A                 mov     r12d, r8d
.text:000000000000B31D                 mov     rbp, r11
.text:000000000000B320                 setz    dl
.text:000000000000B323                 mov     eax, ebx
.text:000000000000B325                 test    r15, r15
.text:000000000000B328                 setz    cl
.text:000000000000B32B                 and     eax, edx
.text:000000000000B32D                 and     al, cl
.text:000000000000B32F                 jnz     loc_BD96
.text:000000000000B335                 mov     eax, ebx
.text:000000000000B337                 xor     eax, 1
.text:000000000000B33A                 and     dl, al
.text:000000000000B33C                 jz      loc_BCAC
.text:000000000000B342                 cmp     [rsp+0E8h+var_6C], 0
.text:000000000000B347                 jz      loc_BCAA
.text:000000000000B34D                 cmp     [rsp+0E8h+var_DA], 0
.text:000000000000B352                 jnz     loc_BD4D
.text:000000000000B358                 test    r13, r13
.text:000000000000B35B                 setz    al
.text:000000000000B35E                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000B364                 setnz   dl
.text:000000000000B367                 and     al, dl
.text:000000000000B369                 jz      loc_BD8C
.text:000000000000B36F                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000B374
.text:000000000000B374 loc_B374:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:000000000000B374                 lea     rbx, asc_1448B  ; "'"
.text:000000000000B37B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000B37F                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000B387                 mov     r15d, 1
.text:000000000000B38D                 mov     [rsp+0E8h+n], 1
.text:000000000000B396                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000B39B                 mov     [rsp+0E8h+s2], rbx
.text:000000000000B3A0                 mov     [rsp+0E8h+var_6C], al
.text:000000000000B3A4                 jmp     loc_AC83
.text:000000000000B3A4 ; ---------------------------------------------------------------------------
.text:000000000000B3A9                 align 10h
.text:000000000000B3B0
.text:000000000000B3B0 loc_B3B0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:000000000000B3B0                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000B3B5                 jnz     loc_BC60
.text:000000000000B3BB                 test    r13, r13
.text:000000000000B3BE                 jz      loc_B7C0
.text:000000000000B3C4                 xor     edx, edx
.text:000000000000B3C6                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000B3CC                 jnz     loc_B7C0
.text:000000000000B3D2
.text:000000000000B3D2 loc_B3D2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:000000000000B3D2                                         ; quotearg_buffer_restyled+122A↓j
.text:000000000000B3D2                 mov     [rsp+0E8h+var_98], r13
.text:000000000000B3D7                 add     r15, 3
.text:000000000000B3DB                 xor     eax, eax
.text:000000000000B3DD                 mov     [rsp+0E8h+var_6C], r12b
.text:000000000000B3E2                 xor     r8d, r8d
.text:000000000000B3E5                 mov     r13, rdx
.text:000000000000B3E8                 mov     ebx, 27h ; '''
.text:000000000000B3ED                 jmp     loc_AE09
.text:000000000000B3ED ; ---------------------------------------------------------------------------
.text:000000000000B3F2                 align 8
.text:000000000000B3F8
.text:000000000000B3F8 loc_B3F8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:000000000000B3F8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000B3FD                 jz      short loc_B420
.text:000000000000B3FF                 lea     rcx, [rbp+2]
.text:000000000000B403                 cmp     rcx, r11
.text:000000000000B406                 jnb     short loc_B420
.text:000000000000B408                 mov     rax, [rsp+0E8h+s]
.text:000000000000B40D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:000000000000B412                 jz      loc_BBA2
.text:000000000000B418                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000B420
.text:000000000000B420 loc_B420:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:000000000000B420                                         ; quotearg_buffer_restyled+856↑j ...
.text:000000000000B420                 xor     edx, edx
.text:000000000000B422                 xor     r12d, r12d
.text:000000000000B425                 xor     eax, eax
.text:000000000000B427                 mov     ebx, 3Fh ; '?'
.text:000000000000B42C                 jmp     loc_ADD8
.text:000000000000B42C ; ---------------------------------------------------------------------------
.text:000000000000B431                 align 8
.text:000000000000B438
.text:000000000000B438 loc_B438:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:000000000000B438                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000B43D                 jnz     loc_BC60
.text:000000000000B443                 xor     r12d, r12d
.text:000000000000B446                 xor     eax, eax
.text:000000000000B448                 mov     ebx, 3Fh ; '?'
.text:000000000000B44D                 jmp     loc_AE09
.text:000000000000B44D ; ---------------------------------------------------------------------------
.text:000000000000B452                 align 8
.text:000000000000B458
.text:000000000000B458 loc_B458:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:000000000000B458                 lea     rax, [rsp+0E8h+var_48]
.text:000000000000B460                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000B464                 mov     [rsp+0E8h+var_48], 0
.text:000000000000B470                 mov     [rsp+0E8h+ps], rax
.text:000000000000B475                 jnz     short loc_B4A4
.text:000000000000B477                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000B47C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:000000000000B481                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:000000000000B486                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000B48B                 call    _strlen
.text:000000000000B490                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:000000000000B496                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000B49C                 mov     r11, rax
.text:000000000000B49F                 mov     r9, [rsp+0E8h+var_B8]
.text:000000000000B4A4
.text:000000000000B4A4 loc_B4A4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:000000000000B4A4                 lea     rax, [rsp+0E8h+wc]
.text:000000000000B4AC                 xor     ecx, ecx
.text:000000000000B4AE                 mov     [rsp+0E8h+var_6A], bl
.text:000000000000B4B2                 mov     [rsp+0E8h+var_6B], r8b
.text:000000000000B4B7                 mov     rbx, rcx
.text:000000000000B4BA                 mov     [rsp+0E8h+var_60], r9
.text:000000000000B4C2                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000B4C7                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000B4CC                 mov     [rsp+0E8h+var_68], r15
.text:000000000000B4D4                 mov     [rsp+0E8h+var_A8], r14
.text:000000000000B4D9                 mov     [rsp+0E8h+var_78], r13
.text:000000000000B4DE                 mov     [rsp+0E8h+var_B8], r11
.text:000000000000B4E3
.text:000000000000B4E3 loc_B4E3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:000000000000B4E3                 mov     rax, [rsp+0E8h+s]
.text:000000000000B4E8                 lea     r14, [rbp+rbx+0]
.text:000000000000B4ED                 mov     rdx, [rsp+0E8h+var_B8]
.text:000000000000B4F2                 mov     rcx, [rsp+0E8h+ps]
.text:000000000000B4F7                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000B4FC                 lea     r13, [rax+r14]
.text:000000000000B500                 sub     rdx, r14
.text:000000000000B503                 mov     rsi, r13
.text:000000000000B506                 call    rpl_mbrtowc
.text:000000000000B50B                 test    rax, rax
.text:000000000000B50E                 mov     r15, rax
.text:000000000000B511                 jz      short loc_B561
.text:000000000000B513                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B517                 jz      loc_BB35
.text:000000000000B51D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000B521                 jz      loc_BAC1
.text:000000000000B527                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000B52C                 setz    al
.text:000000000000B52F                 and     al, [rsp+0E8h+var_D9]
.text:000000000000B533                 jnz     loc_B6D0
.text:000000000000B539
.text:000000000000B539 loc_B539:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:000000000000B539                                         ; quotearg_buffer_restyled+B47↓j
.text:000000000000B539                 mov     edi, [rsp+0E8h+wc] ; wc
.text:000000000000B540                 call    _iswprint
.text:000000000000B545                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000B54A                 test    eax, eax
.text:000000000000B54C                 mov     eax, 0
.text:000000000000B551                 cmovz   r12d, eax
.text:000000000000B555                 add     rbx, r15
.text:000000000000B558                 call    _mbsinit
.text:000000000000B55D                 test    eax, eax
.text:000000000000B55F                 jz      short loc_B4E3
.text:000000000000B561
.text:000000000000B561 loc_B561:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:000000000000B561                 mov     edx, r12d
.text:000000000000B564                 mov     rdi, rbx
.text:000000000000B567                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000B56D                 xor     edx, 1
.text:000000000000B570                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000B575                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000B57B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000B57F                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000B587                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000B58C                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000B591                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000B596
.text:000000000000B596 loc_B596:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:000000000000B596                                         ; quotearg_buffer_restyled+FB8↓j
.text:000000000000B596                 cmp     rdi, 1
.text:000000000000B59A                 jbe     loc_BB9B
.text:000000000000B5A0
.text:000000000000B5A0 loc_B5A0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:000000000000B5A0                 mov     rcx, rdi
.text:000000000000B5A3                 xor     esi, esi
.text:000000000000B5A5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000B5AB                 add     rcx, rbp
.text:000000000000B5AE                 mov     rdi, [rsp+0E8h+s]
.text:000000000000B5B3                 jmp     loc_B66E
.text:000000000000B5B3 ; ---------------------------------------------------------------------------
.text:000000000000B5B8                 align 20h
.text:000000000000B5C0
.text:000000000000B5C0 loc_B5C0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:000000000000B5C0                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000B5C5                 setz    al
.text:000000000000B5C8                 test    r9b, r9b
.text:000000000000B5CB                 jnz     loc_BA80
.text:000000000000B5D1                 mov     esi, r8d
.text:000000000000B5D4                 xor     esi, 1
.text:000000000000B5D7                 and     al, sil
.text:000000000000B5DA                 jz      short loc_B60B
.text:000000000000B5DC                 cmp     r13, r15
.text:000000000000B5DF                 jbe     short loc_B5E6
.text:000000000000B5E1                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000B5E6
.text:000000000000B5E6 loc_B5E6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:000000000000B5E6                 lea     rsi, [r15+1]
.text:000000000000B5EA                 cmp     r13, rsi
.text:000000000000B5ED                 jbe     short loc_B5F5
.text:000000000000B5EF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000B5F5
.text:000000000000B5F5 loc_B5F5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:000000000000B5F5                 lea     rsi, [r15+2]
.text:000000000000B5F9                 cmp     r13, rsi
.text:000000000000B5FC                 jbe     short loc_B604
.text:000000000000B5FE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000B604
.text:000000000000B604 loc_B604:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:000000000000B604                 add     r15, 3
.text:000000000000B608                 mov     r8d, eax
.text:000000000000B60B
.text:000000000000B60B loc_B60B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000B60B                 cmp     r13, r15
.text:000000000000B60E                 jbe     short loc_B615
.text:000000000000B610                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000B615
.text:000000000000B615 loc_B615:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:000000000000B615                 lea     rax, [r15+1]
.text:000000000000B619                 cmp     r13, rax
.text:000000000000B61C                 jbe     short loc_B62B
.text:000000000000B61E                 mov     eax, ebx
.text:000000000000B620                 shr     al, 6
.text:000000000000B623                 add     eax, 30h ; '0'
.text:000000000000B626                 mov     [r14+r15+1], al
.text:000000000000B62B
.text:000000000000B62B loc_B62B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000B62B                 lea     rax, [r15+2]
.text:000000000000B62F                 cmp     r13, rax
.text:000000000000B632                 jbe     short loc_B644
.text:000000000000B634                 mov     eax, ebx
.text:000000000000B636                 shr     al, 3
.text:000000000000B639                 and     eax, 7
.text:000000000000B63C                 add     eax, 30h ; '0'
.text:000000000000B63F                 mov     [r14+r15+2], al
.text:000000000000B644
.text:000000000000B644 loc_B644:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:000000000000B644                 and     ebx, 7
.text:000000000000B647                 add     rbp, 1
.text:000000000000B64B                 add     r15, 3
.text:000000000000B64F                 add     ebx, 30h ; '0'
.text:000000000000B652                 cmp     rbp, rcx
.text:000000000000B655                 jnb     loc_AE40
.text:000000000000B65B                 mov     esi, edx
.text:000000000000B65D
.text:000000000000B65D loc_B65D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000B65D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000B65D                 cmp     r13, r15
.text:000000000000B660                 jbe     short loc_B666
.text:000000000000B662                 mov     [r14+r15], bl
.text:000000000000B666
.text:000000000000B666 loc_B666:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:000000000000B666                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000B66A                 add     r15, 1
.text:000000000000B66E
.text:000000000000B66E loc_B66E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000B66E                 test    dl, dl
.text:000000000000B670                 jnz     loc_B5C0
.text:000000000000B676                 mov     eax, esi
.text:000000000000B678                 xor     eax, 1
.text:000000000000B67B                 and     eax, r8d
.text:000000000000B67E                 test    r10b, r10b
.text:000000000000B681                 jz      short loc_B691
.text:000000000000B683                 cmp     r13, r15
.text:000000000000B686                 jbe     short loc_B68D
.text:000000000000B688                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000B68D
.text:000000000000B68D loc_B68D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000B68D                 add     r15, 1
.text:000000000000B691
.text:000000000000B691 loc_B691:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:000000000000B691                 add     rbp, 1
.text:000000000000B695                 cmp     rbp, rcx
.text:000000000000B698                 jnb     loc_AE1C
.text:000000000000B69E                 test    al, al
.text:000000000000B6A0                 jz      loc_BA9E
.text:000000000000B6A6                 cmp     r13, r15
.text:000000000000B6A9                 jbe     short loc_B6B0
.text:000000000000B6AB                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000B6B0
.text:000000000000B6B0 loc_B6B0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:000000000000B6B0                 lea     rax, [r15+1]
.text:000000000000B6B4                 cmp     r13, rax
.text:000000000000B6B7                 jbe     short loc_B6BF
.text:000000000000B6B9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000B6BF
.text:000000000000B6BF loc_B6BF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000B6BF                 add     r15, 2
.text:000000000000B6C3                 xor     r10d, r10d
.text:000000000000B6C6                 xor     r8d, r8d
.text:000000000000B6C9                 jmp     short loc_B65D
.text:000000000000B6C9 ; ---------------------------------------------------------------------------
.text:000000000000B6CB                 align 10h
.text:000000000000B6D0
.text:000000000000B6D0 loc_B6D0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:000000000000B6D0                 cmp     r15, 1
.text:000000000000B6D4                 jz      loc_B539
.text:000000000000B6DA                 mov     rdi, [rsp+0E8h+s]
.text:000000000000B6DF                 lea     rcx, [rdi+r15]
.text:000000000000B6E3                 lea     rdx, [rdi+r14+1]
.text:000000000000B6E8                 lea     r8, [rcx+r14]
.text:000000000000B6EC                 jmp     short loc_B6FD
.text:000000000000B6EC ; ---------------------------------------------------------------------------
.text:000000000000B6EE                 align 10h
.text:000000000000B6F0
.text:000000000000B6F0 loc_B6F0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:000000000000B6F0                                         ; quotearg_buffer_restyled+B70↓j
.text:000000000000B6F0                 add     rdx, 1
.text:000000000000B6F4                 cmp     r8, rdx
.text:000000000000B6F7                 jz      loc_B539
.text:000000000000B6FD
.text:000000000000B6FD loc_B6FD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000B6FD                 movzx   ecx, byte ptr [rdx]
.text:000000000000B700                 sub     ecx, 5Bh ; '['
.text:000000000000B703                 cmp     cl, 21h ; '!'
.text:000000000000B706                 ja      short loc_B6F0
.text:000000000000B708                 mov     esi, 1
.text:000000000000B70D                 shl     rsi, cl
.text:000000000000B710                 mov     rcx, rsi
.text:000000000000B713                 mov     rsi, 20000002Bh
.text:000000000000B71D                 test    rcx, rsi
.text:000000000000B720                 jz      short loc_B6F0
.text:000000000000B722                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000B727                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000B72C                 mov     rbp, [rsp+0E8h+var_B8]
.text:000000000000B731                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000B739
.text:000000000000B739 loc_B739:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:000000000000B739                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:000000000000B739                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000B73E                 jz      short loc_B750
.text:000000000000B740                 test    al, al
.text:000000000000B742                 mov     eax, 4
.text:000000000000B747                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000B74C                 mov     [rsp+0E8h+var_E0], eax
.text:000000000000B750
.text:000000000000B750 loc_B750:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:000000000000B750                                         ; quotearg_buffer_restyled+1205↓j
.text:000000000000B750                 sub     rsp, 8
.text:000000000000B754                 mov     rcx, rbp
.text:000000000000B757                 mov     rsi, r13
.text:000000000000B75A                 push    [rsp+0F0h+var_88]
.text:000000000000B75E                 push    [rsp+0F8h+var_80]
.text:000000000000B762                 mov     rdi, r14
.text:000000000000B765                 push    0
.text:000000000000B767                 mov     r9d, [rsp+108h+var_70]
.text:000000000000B76F                 mov     r8d, [rsp+108h+var_E0]
.text:000000000000B774                 mov     rdx, [rsp+108h+s]
.text:000000000000B779                 and     r9d, 0FFFFFFFDh
.text:000000000000B77D                 call    quotearg_buffer_restyled
.text:000000000000B782                 add     rsp, 20h
.text:000000000000B786                 mov     r15, rax
.text:000000000000B789
.text:000000000000B789 loc_B789:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:000000000000B789                                         ; quotearg_buffer_restyled+1140↓j ...
.text:000000000000B789                 mov     rbx, [rsp+0E8h+var_40]
.text:000000000000B791                 xor     rbx, fs:28h
.text:000000000000B79A                 mov     rax, r15
.text:000000000000B79D                 jnz     loc_BDA3
.text:000000000000B7A3                 add     rsp, 0B8h
.text:000000000000B7AA                 pop     rbx
.text:000000000000B7AB                 pop     rbp
.text:000000000000B7AC                 pop     r12
.text:000000000000B7AE                 pop     r13
.text:000000000000B7B0                 pop     r14
.text:000000000000B7B2                 pop     r15
.text:000000000000B7B4                 retn
.text:000000000000B7B4 ; ---------------------------------------------------------------------------
.text:000000000000B7B5                 align 8
.text:000000000000B7B8
.text:000000000000B7B8 loc_B7B8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:000000000000B7B8                 mov     rbp, r11
.text:000000000000B7BB                 jmp     loc_B739
.text:000000000000B7C0 ; ---------------------------------------------------------------------------
.text:000000000000B7C0
.text:000000000000B7C0 loc_B7C0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:000000000000B7C0                                         ; quotearg_buffer_restyled+81C↑j
.text:000000000000B7C0                 cmp     r13, r15
.text:000000000000B7C3                 jbe     short loc_B7CA
.text:000000000000B7C5                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000B7CA
.text:000000000000B7CA loc_B7CA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000B7CA                 lea     rax, [r15+1]
.text:000000000000B7CE                 cmp     r13, rax
.text:000000000000B7D1                 jbe     short loc_B7D9
.text:000000000000B7D3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:000000000000B7D9
.text:000000000000B7D9 loc_B7D9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:000000000000B7D9                 lea     rax, [r15+2]
.text:000000000000B7DD                 cmp     r13, rax
.text:000000000000B7E0                 jbe     loc_BDD2
.text:000000000000B7E6                 mov     rdx, r13
.text:000000000000B7E9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000B7EF                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000B7F4                 jmp     loc_B3D2
.text:000000000000B7F9 ; ---------------------------------------------------------------------------
.text:000000000000B7F9
.text:000000000000B7F9 loc_B7F9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:000000000000B7F9                 mov     eax, r12d
.text:000000000000B7FC                 mov     ebx, 30h ; '0'
.text:000000000000B801                 xor     r12d, r12d
.text:000000000000B804                 jmp     loc_AE09
.text:000000000000B809 ; ---------------------------------------------------------------------------
.text:000000000000B809
.text:000000000000B809 loc_B809:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:000000000000B809                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000B80F                 jmp     loc_B1D9
.text:000000000000B814 ; ---------------------------------------------------------------------------
.text:000000000000B814
.text:000000000000B814 loc_B814:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B814                                         ; DATA XREF: .rodata:jpt_AC41↓o
.text:000000000000B814                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:000000000000B816                 jnz     loc_AC43        ; jumptable 00000000000121F1 case 1
.text:000000000000B81C                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B821
.text:000000000000B821 loc_B821:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:000000000000B821                 test    r13, r13
.text:000000000000B824                 jnz     loc_BDBA
.text:000000000000B82A                 lea     rax, asc_1448B  ; "'"
.text:000000000000B831                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B83A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B83F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B844                 xor     r12d, r12d
.text:000000000000B847                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000B84C                 mov     [rsp+0E8h+n], 1
.text:000000000000B855                 mov     [rsp+0E8h+s2], rax
.text:000000000000B85A                 mov     r15d, 1
.text:000000000000B860                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000B868                 jmp     loc_AC83
.text:000000000000B868 ; ---------------------------------------------------------------------------
.text:000000000000B86D                 align 10h
.text:000000000000B870
.text:000000000000B870 loc_B870:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B870                                         ; DATA XREF: .rodata:jpt_AC41↓o
.text:000000000000B870                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:000000000000B872                 jnz     loc_BC6D
.text:000000000000B878                 test    r13, r13
.text:000000000000B87B                 jz      loc_BAA6
.text:000000000000B881                 mov     byte ptr [r14], 22h ; '"'
.text:000000000000B885                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B88A                 xor     r12d, r12d
.text:000000000000B88D                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B892                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B89B
.text:000000000000B89B loc_B89B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000B89B                 lea     rax, aTz+3      ; "\""
.text:000000000000B8A2                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000B8A7                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B8AC                 mov     [rsp+0E8h+n], 1
.text:000000000000B8B5                 mov     r15d, 1
.text:000000000000B8BB                 mov     [rsp+0E8h+s2], rax
.text:000000000000B8C0                 jmp     loc_AC83
.text:000000000000B8C5 ; ---------------------------------------------------------------------------
.text:000000000000B8C5
.text:000000000000B8C5 loc_B8C5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B8C5                                         ; DATA XREF: .rodata:jpt_AC41↓o
.text:000000000000B8C5                 lea     rax, aTz+3      ; jumptable 00000000000121F1 case 6
.text:000000000000B8CC                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B8D1                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B8D6                 xor     r12d, r12d
.text:000000000000B8D9                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B8E2                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000B8E7                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B8EC                 mov     [rsp+0E8h+n], 1
.text:000000000000B8F5                 xor     r15d, r15d
.text:000000000000B8F8                 mov     [rsp+0E8h+s2], rax
.text:000000000000B8FD                 mov     [rsp+0E8h+var_E0], 5
.text:000000000000B905                 jmp     loc_AC83
.text:000000000000B90A ; ---------------------------------------------------------------------------
.text:000000000000B90A
.text:000000000000B90A loc_B90A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B90A                                         ; DATA XREF: .rodata:jpt_AC41↓o
.text:000000000000B90A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000B90F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B914                 xor     r12d, r12d
.text:000000000000B917                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B920                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000B925                 xor     r15d, r15d
.text:000000000000B928                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B92D                 mov     [rsp+0E8h+n], 0
.text:000000000000B936                 mov     [rsp+0E8h+s2], 0
.text:000000000000B93F                 jmp     loc_AC83
.text:000000000000B944 ; ---------------------------------------------------------------------------
.text:000000000000B944
.text:000000000000B944 loc_B944:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B944                                         ; DATA XREF: .rodata:jpt_AC41↓o
.text:000000000000B944                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:000000000000B949                 jz      short loc_B9A1
.text:000000000000B94B                 lea     rsi, asc_1448D  ; "`"
.text:000000000000B952                 xor     edi, edi        ; domainname
.text:000000000000B954                 mov     edx, 5          ; category
.text:000000000000B959                 call    _dcgettext
.text:000000000000B95E                 mov     rcx, rax
.text:000000000000B961                 mov     [rsp+0E8h+var_80], rax
.text:000000000000B966                 lea     rax, asc_1448D  ; "`"
.text:000000000000B96D                 cmp     rcx, rax
.text:000000000000B970                 jz      loc_BD0E
.text:000000000000B976
.text:000000000000B976 loc_B976:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:000000000000B976                 lea     rsi, asc_1448B  ; "'"
.text:000000000000B97D                 xor     edi, edi        ; domainname
.text:000000000000B97F                 mov     edx, 5          ; category
.text:000000000000B984                 call    _dcgettext
.text:000000000000B989                 mov     rcx, rax
.text:000000000000B98C                 mov     [rsp+0E8h+var_88], rax
.text:000000000000B991                 lea     rax, asc_1448B  ; "'"
.text:000000000000B998                 cmp     rcx, rax
.text:000000000000B99B                 jz      loc_BD24
.text:000000000000B9A1
.text:000000000000B9A1 loc_B9A1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:000000000000B9A1                                         ; quotearg_buffer_restyled+1185↓j
.text:000000000000B9A1                 xor     r15d, r15d
.text:000000000000B9A4                 test    ebx, ebx
.text:000000000000B9A6                 jz      loc_BB6D
.text:000000000000B9AC
.text:000000000000B9AC loc_B9AC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000B9AC                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000B9AC                 test    ebx, ebx
.text:000000000000B9AE                 mov     rbx, [rsp+0E8h+var_88]
.text:000000000000B9B3                 setnz   [rsp+0E8h+var_D9]
.text:000000000000B9B8                 xor     r12d, r12d
.text:000000000000B9BB                 mov     rdi, rbx        ; s
.text:000000000000B9BE                 call    _strlen
.text:000000000000B9C3                 mov     [rsp+0E8h+s2], rbx
.text:000000000000B9C8                 mov     [rsp+0E8h+n], rax
.text:000000000000B9CD                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000B9D2                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B9D7                 mov     [rsp+0E8h+var_98], 0
.text:000000000000B9E0                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000B9E5                 jmp     loc_AC83
.text:000000000000B9EA ; ---------------------------------------------------------------------------
.text:000000000000B9EA
.text:000000000000B9EA loc_B9EA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000B9EA                                         ; DATA XREF: .rodata:jpt_AC41↓o
.text:000000000000B9EA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000B9EF                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000B9F4                 xor     r12d, r12d
.text:000000000000B9F7                 mov     [rsp+0E8h+var_98], 0
.text:000000000000BA00                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000BA05                 xor     r15d, r15d
.text:000000000000BA08                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000BA0D                 mov     [rsp+0E8h+n], 0
.text:000000000000BA16                 mov     [rsp+0E8h+s2], 0
.text:000000000000BA1F                 jmp     loc_AC83
.text:000000000000BA24 ; ---------------------------------------------------------------------------
.text:000000000000BA24
.text:000000000000BA24 loc_BA24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000BA24                                         ; DATA XREF: .rodata:jpt_AC41↓o
.text:000000000000BA24                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:000000000000BA29                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000BA2E                 xor     r12d, r12d
.text:000000000000BA31                 mov     [rsp+0E8h+var_98], 0
.text:000000000000BA3A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000BA3F                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000BA44                 jmp     loc_AC63
.text:000000000000BA49 ; ---------------------------------------------------------------------------
.text:000000000000BA49
.text:000000000000BA49 loc_BA49:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:000000000000BA49                 cmp     r13, r15
.text:000000000000BA4C                 jbe     short loc_BA53
.text:000000000000BA4E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:000000000000BA53
.text:000000000000BA53 loc_BA53:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:000000000000BA53                 lea     rax, [rcx+2]
.text:000000000000BA57                 cmp     r13, rax
.text:000000000000BA5A                 jbe     short loc_BA62
.text:000000000000BA5C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:000000000000BA62
.text:000000000000BA62 loc_BA62:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:000000000000BA62                 mov     eax, r12d
.text:000000000000BA65                 lea     r15, [rcx+3]
.text:000000000000BA69                 xor     r12d, r12d
.text:000000000000BA6C                 mov     ebx, 30h ; '0'
.text:000000000000BA71                 jmp     loc_ADD8
.text:000000000000BA71 ; ---------------------------------------------------------------------------
.text:000000000000BA76                 align 20h
.text:000000000000BA80
.text:000000000000BA80 loc_BA80:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:000000000000BA80                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000BA85                 mov     rbp, r11
.text:000000000000BA88                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000BA8C                 jmp     loc_B739
.text:000000000000BA91 ; ---------------------------------------------------------------------------
.text:000000000000BA91
.text:000000000000BA91 loc_BA91:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:000000000000BA91                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000BA96                 xor     r12d, r12d
.text:000000000000BA99                 jmp     loc_B5A0
.text:000000000000BA9E ; ---------------------------------------------------------------------------
.text:000000000000BA9E
.text:000000000000BA9E loc_BA9E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000BA9E                 xor     r10d, r10d
.text:000000000000BAA1                 jmp     loc_B65D
.text:000000000000BAA6 ; ---------------------------------------------------------------------------
.text:000000000000BAA6
.text:000000000000BAA6 loc_BAA6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:000000000000BAA6                 mov     [rsp+0E8h+var_98], 0
.text:000000000000BAAF                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000BAB4                 xor     r12d, r12d
.text:000000000000BAB7                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000BABC                 jmp     loc_B89B
.text:000000000000BAC1 ; ---------------------------------------------------------------------------
.text:000000000000BAC1
.text:000000000000BAC1 loc_BAC1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:000000000000BAC1                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000BAC6                 mov     rsi, r14
.text:000000000000BAC9                 mov     rcx, r13
.text:000000000000BACC                 mov     rax, rbx
.text:000000000000BACF                 mov     rdi, rbx
.text:000000000000BAD2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000BAD8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000BADD                 mov     r9, [rsp+0E8h+var_60]
.text:000000000000BAE5                 cmp     rsi, r11
.text:000000000000BAE8                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000BAEE                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000BAF6                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000BAFB                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000BB00                 jnb     short loc_BB28
.text:000000000000BB02                 cmp     byte ptr [rcx], 0
.text:000000000000BB05                 jnz     short loc_BB17
.text:000000000000BB07                 jmp     short loc_BB28
.text:000000000000BB07 ; ---------------------------------------------------------------------------
.text:000000000000BB09                 align 10h
.text:000000000000BB10
.text:000000000000BB10 loc_BB10:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:000000000000BB10                 cmp     byte ptr [r9+rax], 0
.text:000000000000BB15                 jz      short loc_BB25
.text:000000000000BB17
.text:000000000000BB17 loc_BB17:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:000000000000BB17                 add     rax, 1
.text:000000000000BB1B                 lea     rdx, [rbp+rax+0]
.text:000000000000BB20                 cmp     r11, rdx
.text:000000000000BB23                 ja      short loc_BB10
.text:000000000000BB25
.text:000000000000BB25 loc_BB25:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:000000000000BB25                 mov     rdi, rax
.text:000000000000BB28
.text:000000000000BB28 loc_BB28:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:000000000000BB28                                         ; quotearg_buffer_restyled+F57↑j
.text:000000000000BB28                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000BB2D                 xor     r12d, r12d
.text:000000000000BB30                 jmp     loc_B596
.text:000000000000BB35 ; ---------------------------------------------------------------------------
.text:000000000000BB35
.text:000000000000BB35 loc_BB35:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:000000000000BB35                 mov     rdi, rbx
.text:000000000000BB38                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000BB3E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000BB43                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000BB49                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000BB51                 xor     r12d, r12d
.text:000000000000BB54                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000BB59                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000BB5E                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000BB63                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000BB68                 jmp     loc_B596
.text:000000000000BB6D ; ---------------------------------------------------------------------------
.text:000000000000BB6D
.text:000000000000BB6D loc_BB6D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000BB6D                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000000BB72                 movzx   eax, byte ptr [rdx]
.text:000000000000BB75                 test    al, al
.text:000000000000BB77                 jz      loc_B9AC
.text:000000000000BB7D                 nop     dword ptr [rax]
.text:000000000000BB80
.text:000000000000BB80 loc_BB80:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:000000000000BB80                 cmp     r13, r15
.text:000000000000BB83                 jbe     short loc_BB89
.text:000000000000BB85                 mov     [r14+r15], al
.text:000000000000BB89
.text:000000000000BB89 loc_BB89:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:000000000000BB89                 add     r15, 1
.text:000000000000BB8D                 movzx   eax, byte ptr [rdx+r15]
.text:000000000000BB92                 test    al, al
.text:000000000000BB94                 jnz     short loc_BB80
.text:000000000000BB96                 jmp     loc_B9AC
.text:000000000000BB9B ; ---------------------------------------------------------------------------
.text:000000000000BB9B
.text:000000000000BB9B loc_BB9B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000BB9B                 mov     eax, edx
.text:000000000000BB9D                 jmp     loc_B0F7
.text:000000000000BBA2 ; ---------------------------------------------------------------------------
.text:000000000000BBA2
.text:000000000000BBA2 loc_BBA2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:000000000000BBA2                 movzx   ebx, byte ptr [rax+rcx]
.text:000000000000BBA6                 cmp     bl, 3Eh ; '>'
.text:000000000000BBA9                 ja      loc_B420
.text:000000000000BBAF                 mov     rax, 7000A38200000000h
.text:000000000000BBB9                 bt      rax, rbx
.text:000000000000BBBD                 jnb     loc_B420
.text:000000000000BBC3                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000BBC8                 jnz     loc_BDB2
.text:000000000000BBCE                 cmp     r13, r15
.text:000000000000BBD1                 jbe     short loc_BBD8
.text:000000000000BBD3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:000000000000BBD8
.text:000000000000BBD8 loc_BBD8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:000000000000BBD8                 lea     rax, [r15+1]
.text:000000000000BBDC                 cmp     r13, rax
.text:000000000000BBDF                 jbe     short loc_BBE7
.text:000000000000BBE1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:000000000000BBE7
.text:000000000000BBE7 loc_BBE7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:000000000000BBE7                 lea     rax, [r15+2]
.text:000000000000BBEB                 cmp     r13, rax
.text:000000000000BBEE                 jbe     short loc_BBF6
.text:000000000000BBF0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:000000000000BBF6
.text:000000000000BBF6 loc_BBF6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:000000000000BBF6                 lea     rax, [r15+3]
.text:000000000000BBFA                 cmp     r13, rax
.text:000000000000BBFD                 jbe     short loc_BC05
.text:000000000000BBFF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:000000000000BC05
.text:000000000000BC05 loc_BC05:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:000000000000BC05                 add     r15, 4
.text:000000000000BC09                 xor     edx, edx
.text:000000000000BC0B                 xor     r12d, r12d
.text:000000000000BC0E                 xor     eax, eax
.text:000000000000BC10                 mov     rbp, rcx
.text:000000000000BC13                 jmp     loc_ADD8
.text:000000000000BC18 ; ---------------------------------------------------------------------------
.text:000000000000BC18
.text:000000000000BC18 loc_BC18:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000BC18                                         ; DATA XREF: .rodata:jpt_AC41↓o
.text:000000000000BC18                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000BC1A                 jz      loc_BDA8
.text:000000000000BC20                 lea     rax, asc_1448B  ; "'"
.text:000000000000BC27                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000BC2C                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000BC31                 xor     r12d, r12d
.text:000000000000BC34                 mov     [rsp+0E8h+var_98], 0
.text:000000000000BC3D                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000BC42                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000BC47                 mov     [rsp+0E8h+n], 1
.text:000000000000BC50                 xor     r15d, r15d
.text:000000000000BC53                 mov     [rsp+0E8h+s2], rax
.text:000000000000BC58                 jmp     loc_AC83
.text:000000000000BC58 ; ---------------------------------------------------------------------------
.text:000000000000BC5D                 align 20h
.text:000000000000BC60
.text:000000000000BC60 loc_BC60:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:000000000000BC60                                         ; quotearg_buffer_restyled+805↑j ...
.text:000000000000BC60                 mov     rbp, r11
.text:000000000000BC63                 movzx   eax, [rsp+0E8h+var_D9]
.text:000000000000BC68                 jmp     loc_B739
.text:000000000000BC6D ; ---------------------------------------------------------------------------
.text:000000000000BC6D
.text:000000000000BC6D loc_BC6D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000BC6D                 lea     rax, aTz+3      ; "\""
.text:000000000000BC74                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000BC79                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000BC7E                 xor     r12d, r12d
.text:000000000000BC81                 mov     [rsp+0E8h+var_98], 0
.text:000000000000BC8A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000BC8F                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000BC94                 mov     [rsp+0E8h+n], 1
.text:000000000000BC9D                 xor     r15d, r15d
.text:000000000000BCA0                 mov     [rsp+0E8h+s2], rax
.text:000000000000BCA5                 jmp     loc_AC83
.text:000000000000BCAA ; ---------------------------------------------------------------------------
.text:000000000000BCAA
.text:000000000000BCAA loc_BCAA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000BCAA                 mov     eax, edx
.text:000000000000BCAC
.text:000000000000BCAC loc_BCAC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000BCAC                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000BCAC                 mov     rbx, [rsp+0E8h+s2]
.text:000000000000BCB1                 test    rbx, rbx
.text:000000000000BCB4                 jz      short loc_BCE2
.text:000000000000BCB6                 test    al, al
.text:000000000000BCB8                 jz      short loc_BCE2
.text:000000000000BCBA                 movzx   ecx, byte ptr [rbx]
.text:000000000000BCBD                 mov     rax, rbx
.text:000000000000BCC0                 test    cl, cl
.text:000000000000BCC2                 jz      short loc_BCE2
.text:000000000000BCC4                 mov     rdx, r15
.text:000000000000BCC7                 sub     rax, r15
.text:000000000000BCCA
.text:000000000000BCCA loc_BCCA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000BCCA                 cmp     r13, rdx
.text:000000000000BCCD                 jbe     short loc_BCD3
.text:000000000000BCCF                 mov     [r14+rdx], cl
.text:000000000000BCD3
.text:000000000000BCD3 loc_BCD3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:000000000000BCD3                 add     rdx, 1
.text:000000000000BCD7                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000BCDB                 test    cl, cl
.text:000000000000BCDD                 jnz     short loc_BCCA
.text:000000000000BCDF                 mov     r15, rdx
.text:000000000000BCE2
.text:000000000000BCE2 loc_BCE2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:000000000000BCE2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:000000000000BCE2                 cmp     r13, r15
.text:000000000000BCE5                 jbe     loc_B789
.text:000000000000BCEB                 mov     byte ptr [r14+r15], 0
.text:000000000000BCF0                 jmp     loc_B789
.text:000000000000BCF5 ; ---------------------------------------------------------------------------
.text:000000000000BCF5
.text:000000000000BCF5 loc_BCF5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:000000000000BCF5                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000BCFA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000BCFF                 mov     rbp, r11
.text:000000000000BD02                 setz    al
.text:000000000000BD05                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000BD09                 jmp     loc_B739
.text:000000000000BD0E ; ---------------------------------------------------------------------------
.text:000000000000BD0E
.text:000000000000BD0E loc_BD0E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000BD0E                 mov     esi, [rsp+0E8h+var_E0]
.text:000000000000BD12                 mov     rdi, rcx
.text:000000000000BD15                 call    gettext_quote
.text:000000000000BD1A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000BD1F                 jmp     loc_B976
.text:000000000000BD24 ; ---------------------------------------------------------------------------
.text:000000000000BD24
.text:000000000000BD24 loc_BD24:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:000000000000BD24                 mov     esi, [rsp+0E8h+var_E0]
.text:000000000000BD28                 mov     rdi, rcx
.text:000000000000BD2B                 call    gettext_quote
.text:000000000000BD30                 mov     [rsp+0E8h+var_88], rax
.text:000000000000BD35                 jmp     loc_B9A1
.text:000000000000BD3A ; ---------------------------------------------------------------------------
.text:000000000000BD3A
.text:000000000000BD3A loc_BD3A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000BD3A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000BD3F                 mov     rbp, r11
.text:000000000000BD42                 mov     eax, edx
.text:000000000000BD44                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000BD48                 jmp     loc_B739
.text:000000000000BD4D ; ---------------------------------------------------------------------------
.text:000000000000BD4D
.text:000000000000BD4D loc_BD4D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000BD4D                 sub     rsp, 8
.text:000000000000BD51                 mov     r8d, 5
.text:000000000000BD57                 mov     rcx, r11
.text:000000000000BD5A                 push    [rsp+0F0h+var_88]
.text:000000000000BD5E                 push    [rsp+0F8h+var_80]
.text:000000000000BD62                 mov     rdi, r14
.text:000000000000BD65                 push    [rsp+100h+var_C8]
.text:000000000000BD69                 mov     r9d, [rsp+108h+var_70]
.text:000000000000BD71                 mov     rdx, [rsp+108h+s]
.text:000000000000BD76                 mov     rsi, [rsp+108h+var_98]
.text:000000000000BD7B                 call    quotearg_buffer_restyled
.text:000000000000BD80                 add     rsp, 20h
.text:000000000000BD84                 mov     r15, rax
.text:000000000000BD87                 jmp     loc_B789
.text:000000000000BD8C ; ---------------------------------------------------------------------------
.text:000000000000BD8C
.text:000000000000BD8C loc_BD8C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000BD8C                 movzx   eax, [rsp+0E8h+var_6C]
.text:000000000000BD91                 jmp     loc_BCAC
.text:000000000000BD96 ; ---------------------------------------------------------------------------
.text:000000000000BD96
.text:000000000000BD96 loc_BD96:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:000000000000BD96                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000BD9E                 jmp     loc_B739
.text:000000000000BDA3 ; ---------------------------------------------------------------------------
.text:000000000000BDA3
.text:000000000000BDA3 loc_BDA3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:000000000000BDA3                 call    ___stack_chk_fail
.text:000000000000BDA8 ; ---------------------------------------------------------------------------
.text:000000000000BDA8
.text:000000000000BDA8 loc_BDA8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:000000000000BDA8                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000BDAD                 jmp     loc_B821
.text:000000000000BDB2 ; ---------------------------------------------------------------------------
.text:000000000000BDB2
.text:000000000000BDB2 loc_BDB2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:000000000000BDB2                 mov     rbp, r11
.text:000000000000BDB5                 jmp     loc_B750
.text:000000000000BDBA ; ---------------------------------------------------------------------------
.text:000000000000BDBA
.text:000000000000BDBA loc_BDBA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000BDBA                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000BDBF                 xor     eax, eax
.text:000000000000BDC1                 xor     r12d, r12d
.text:000000000000BDC4                 mov     [rsp+0E8h+var_98], 0
.text:000000000000BDCD                 jmp     loc_B374
.text:000000000000BDD2 ; ---------------------------------------------------------------------------
.text:000000000000BDD2
.text:000000000000BDD2 loc_BDD2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:000000000000BDD2                 mov     rdx, r13
.text:000000000000BDD5                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000BDDA                 jmp     loc_B3D2
.text:000000000000BDDF ; ---------------------------------------------------------------------------
.text:000000000000BDDF
.text:000000000000BDDF def_AC41:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000BDDF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000BDDF ; } // starts at ABB0
.text:000000000000BDDF quotearg_buffer_restyled endp
.text:000000000000BDDF
.text:000000000000BDDF ; ---------------------------------------------------------------------------
.text:000000000000BDE4                 align 10h
.text:000000000000BDF0
.text:000000000000BDF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BDF0
.text:000000000000BDF0
.text:000000000000BDF0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:000000000000BDF0                                         ; quotearg_n_mem+7↓j ...
.text:000000000000BDF0
.text:000000000000BDF0 var_50          = qword ptr -50h
.text:000000000000BDF0 var_48          = qword ptr -48h
.text:000000000000BDF0 var_40          = dword ptr -40h
.text:000000000000BDF0 var_3C          = dword ptr -3Ch
.text:000000000000BDF0
.text:000000000000BDF0 ; __unwind {
.text:000000000000BDF0                 push    r15
.text:000000000000BDF2                 push    r14
.text:000000000000BDF4                 movsxd  r15, edi
.text:000000000000BDF7                 push    r13
.text:000000000000BDF9                 push    r12
.text:000000000000BDFB                 mov     r14, rdx
.text:000000000000BDFE                 push    rbp
.text:000000000000BDFF                 push    rbx
.text:000000000000BE00                 mov     rbp, rcx
.text:000000000000BE03                 sub     rsp, 28h
.text:000000000000BE07                 mov     [rsp+58h+var_50], rsi
.text:000000000000BE0C                 call    ___errno_location
.text:000000000000BE11                 mov     r13, rax
.text:000000000000BE14                 mov     eax, [rax]
.text:000000000000BE16                 test    r15d, r15d
.text:000000000000BE19                 mov     rbx, cs:slotvec
.text:000000000000BE20                 mov     [rsp+58h+var_40], eax
.text:000000000000BE24                 js      loc_BF91
.text:000000000000BE2A                 cmp     cs:nslots, r15d
.text:000000000000BE31                 jg      short loc_BE95
.text:000000000000BE33                 cmp     r15d, 7FFFFFFFh
.text:000000000000BE3A                 jz      loc_BF96
.text:000000000000BE40                 lea     r12d, [r15+1]
.text:000000000000BE44                 lea     rax, slotvec0
.text:000000000000BE4B                 movsxd  rsi, r12d
.text:000000000000BE4E                 shl     rsi, 4
.text:000000000000BE52                 cmp     rbx, rax
.text:000000000000BE55                 jz      loc_BF70
.text:000000000000BE5B                 mov     rdi, rbx
.text:000000000000BE5E                 call    xrealloc
.text:000000000000BE63                 mov     rbx, rax
.text:000000000000BE66                 mov     cs:slotvec, rax
.text:000000000000BE6D
.text:000000000000BE6D loc_BE6D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000BE6D                 movsxd  rdi, cs:nslots
.text:000000000000BE74                 mov     edx, r12d
.text:000000000000BE77                 xor     esi, esi        ; c
.text:000000000000BE79                 sub     edx, edi
.text:000000000000BE7B                 shl     rdi, 4
.text:000000000000BE7F                 movsxd  rdx, edx
.text:000000000000BE82                 add     rdi, rbx        ; s
.text:000000000000BE85                 shl     rdx, 4          ; n
.text:000000000000BE89                 call    _memset
.text:000000000000BE8E                 mov     cs:nslots, r12d
.text:000000000000BE95
.text:000000000000BE95 loc_BE95:                               ; CODE XREF: quotearg_n_options+41↑j
.text:000000000000BE95                 mov     eax, [rbp+4]
.text:000000000000BE98                 shl     r15, 4
.text:000000000000BE9C                 sub     rsp, 8
.text:000000000000BEA0                 add     rbx, r15
.text:000000000000BEA3                 lea     r15, [rbp+8]
.text:000000000000BEA7                 mov     r8d, [rbp+0]
.text:000000000000BEAB                 mov     r11, [rbx]
.text:000000000000BEAE                 mov     r12, [rbx+8]
.text:000000000000BEB2                 mov     rcx, r14
.text:000000000000BEB5                 or      eax, 1
.text:000000000000BEB8                 mov     [rsp+60h+var_3C], eax
.text:000000000000BEBC                 push    qword ptr [rbp+30h]
.text:000000000000BEBF                 mov     r9d, eax
.text:000000000000BEC2                 push    qword ptr [rbp+28h]
.text:000000000000BEC5                 push    r15
.text:000000000000BEC7                 mov     rsi, r11
.text:000000000000BECA                 mov     rdx, [rsp+78h+var_50]
.text:000000000000BECF                 mov     rdi, r12
.text:000000000000BED2                 mov     [rsp+78h+var_48], r11
.text:000000000000BED7                 call    quotearg_buffer_restyled
.text:000000000000BEDC                 add     rsp, 20h
.text:000000000000BEE0                 mov     r11, [rsp+58h+var_48]
.text:000000000000BEE5                 cmp     r11, rax
.text:000000000000BEE8                 ja      short loc_BF51
.text:000000000000BEEA                 lea     rsi, [rax+1]
.text:000000000000BEEE                 lea     rax, slot0
.text:000000000000BEF5                 cmp     r12, rax
.text:000000000000BEF8                 mov     [rbx], rsi
.text:000000000000BEFB                 jz      short loc_BF0F
.text:000000000000BEFD                 mov     rdi, r12        ; ptr
.text:000000000000BF00                 mov     [rsp+58h+var_48], rsi
.text:000000000000BF05                 call    _free
.text:000000000000BF0A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000BF0F
.text:000000000000BF0F loc_BF0F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000BF0F                 mov     rdi, rsi
.text:000000000000BF12                 mov     [rsp+58h+var_48], rsi
.text:000000000000BF17                 call    xmalloc
.text:000000000000BF1C                 sub     rsp, 8
.text:000000000000BF20                 mov     [rbx+8], rax
.text:000000000000BF24                 mov     r8d, [rbp+0]
.text:000000000000BF28                 push    qword ptr [rbp+30h]
.text:000000000000BF2B                 push    qword ptr [rbp+28h]
.text:000000000000BF2E                 mov     rcx, r14
.text:000000000000BF31                 push    r15
.text:000000000000BF33                 mov     r9d, [rsp+78h+var_3C]
.text:000000000000BF38                 mov     rdi, rax
.text:000000000000BF3B                 mov     rdx, [rsp+78h+var_50]
.text:000000000000BF40                 mov     rsi, [rsp+78h+var_48]
.text:000000000000BF45                 mov     r12, rax
.text:000000000000BF48                 call    quotearg_buffer_restyled
.text:000000000000BF4D                 add     rsp, 20h
.text:000000000000BF51
.text:000000000000BF51 loc_BF51:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:000000000000BF51                 mov     eax, [rsp+58h+var_40]
.text:000000000000BF55                 mov     [r13+0], eax
.text:000000000000BF59                 add     rsp, 28h
.text:000000000000BF5D                 mov     rax, r12
.text:000000000000BF60                 pop     rbx
.text:000000000000BF61                 pop     rbp
.text:000000000000BF62                 pop     r12
.text:000000000000BF64                 pop     r13
.text:000000000000BF66                 pop     r14
.text:000000000000BF68                 pop     r15
.text:000000000000BF6A                 retn
.text:000000000000BF6A ; ---------------------------------------------------------------------------
.text:000000000000BF6B                 align 10h
.text:000000000000BF70
.text:000000000000BF70 loc_BF70:                               ; CODE XREF: quotearg_n_options+65↑j
.text:000000000000BF70                 xor     edi, edi
.text:000000000000BF72                 call    xrealloc
.text:000000000000BF77                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000BF7F                 mov     rbx, rax
.text:000000000000BF82                 mov     cs:slotvec, rax
.text:000000000000BF89                 movups  xmmword ptr [rax], xmm0
.text:000000000000BF8C                 jmp     loc_BE6D
.text:000000000000BF91 ; ---------------------------------------------------------------------------
.text:000000000000BF91
.text:000000000000BF91 loc_BF91:                               ; CODE XREF: quotearg_n_options+34↑j
.text:000000000000BF91                 call    _abort
.text:000000000000BF96 ; ---------------------------------------------------------------------------
.text:000000000000BF96
.text:000000000000BF96 loc_BF96:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:000000000000BF96                 call    xalloc_die
.text:000000000000BF96 ; } // starts at BDF0
.text:000000000000BF96 quotearg_n_options endp
.text:000000000000BF96
.text:000000000000BF96 ; ---------------------------------------------------------------------------
.text:000000000000BF9B                 align 20h
.text:000000000000BFA0
.text:000000000000BFA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BFA0
.text:000000000000BFA0 ; Attributes: info_from_lumina
.text:000000000000BFA0
.text:000000000000BFA0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:000000000000BFA0                 public clone_quoting_options
.text:000000000000BFA0 clone_quoting_options proc near
.text:000000000000BFA0 ; __unwind {
.text:000000000000BFA0                 push    r12
.text:000000000000BFA2                 push    rbp
.text:000000000000BFA3                 push    rbx
.text:000000000000BFA4                 mov     rbx, rdi
.text:000000000000BFA7                 call    ___errno_location
.text:000000000000BFAC                 mov     r12d, [rax]
.text:000000000000BFAF                 mov     rbp, rax
.text:000000000000BFB2                 lea     rax, default_quoting_options
.text:000000000000BFB9                 test    rbx, rbx
.text:000000000000BFBC                 mov     esi, 38h ; '8'  ; n
.text:000000000000BFC1                 cmovz   rbx, rax
.text:000000000000BFC5                 mov     rdi, rbx        ; src
.text:000000000000BFC8                 call    xmemdup
.text:000000000000BFCD                 mov     [rbp+0], r12d
.text:000000000000BFD1                 pop     rbx
.text:000000000000BFD2                 pop     rbp
.text:000000000000BFD3                 pop     r12
.text:000000000000BFD5                 retn
.text:000000000000BFD5 ; } // starts at BFA0
.text:000000000000BFD5 clone_quoting_options endp
.text:000000000000BFD5
.text:000000000000BFD5 ; ---------------------------------------------------------------------------
.text:000000000000BFD6                 align 20h
.text:000000000000BFE0
.text:000000000000BFE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BFE0
.text:000000000000BFE0
.text:000000000000BFE0                 public get_quoting_style
.text:000000000000BFE0 get_quoting_style proc near
.text:000000000000BFE0 ; __unwind {
.text:000000000000BFE0                 lea     rax, default_quoting_options
.text:000000000000BFE7                 test    rdi, rdi
.text:000000000000BFEA                 cmovz   rdi, rax
.text:000000000000BFEE                 mov     eax, [rdi]
.text:000000000000BFF0                 retn
.text:000000000000BFF0 ; } // starts at BFE0
.text:000000000000BFF0 get_quoting_style endp
.text:000000000000BFF0
.text:000000000000BFF0 ; ---------------------------------------------------------------------------
.text:000000000000BFF1                 align 20h
.text:000000000000C000
.text:000000000000C000 ; =============== S U B R O U T I N E =======================================
.text:000000000000C000
.text:000000000000C000
.text:000000000000C000                 public set_quoting_style
.text:000000000000C000 set_quoting_style proc near
.text:000000000000C000 ; __unwind {
.text:000000000000C000                 lea     rax, default_quoting_options
.text:000000000000C007                 test    rdi, rdi
.text:000000000000C00A                 cmovz   rdi, rax
.text:000000000000C00E                 mov     [rdi], esi
.text:000000000000C010                 retn
.text:000000000000C010 ; } // starts at C000
.text:000000000000C010 set_quoting_style endp
.text:000000000000C010
.text:000000000000C010 ; ---------------------------------------------------------------------------
.text:000000000000C011                 align 20h
.text:000000000000C020
.text:000000000000C020 ; =============== S U B R O U T I N E =======================================
.text:000000000000C020
.text:000000000000C020 ; Attributes: info_from_lumina
.text:000000000000C020
.text:000000000000C020 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:000000000000C020                 public set_char_quoting
.text:000000000000C020 set_char_quoting proc near
.text:000000000000C020 ; __unwind {
.text:000000000000C020                 lea     rax, default_quoting_options
.text:000000000000C027                 test    rdi, rdi
.text:000000000000C02A                 mov     ecx, esi
.text:000000000000C02C                 cmovz   rdi, rax
.text:000000000000C030                 mov     eax, esi
.text:000000000000C032                 and     ecx, 1Fh
.text:000000000000C035                 shr     al, 5
.text:000000000000C038                 movzx   eax, al
.text:000000000000C03B                 lea     rdi, [rdi+rax*4+8]
.text:000000000000C040                 mov     esi, [rdi]
.text:000000000000C042                 mov     eax, esi
.text:000000000000C044                 shr     eax, cl
.text:000000000000C046                 xor     edx, eax
.text:000000000000C048                 and     eax, 1
.text:000000000000C04B                 and     edx, 1
.text:000000000000C04E                 shl     edx, cl
.text:000000000000C050                 xor     edx, esi
.text:000000000000C052                 mov     [rdi], edx
.text:000000000000C054                 retn
.text:000000000000C054 ; } // starts at C020
.text:000000000000C054 set_char_quoting endp
.text:000000000000C054
.text:000000000000C054 ; ---------------------------------------------------------------------------
.text:000000000000C055                 align 20h
.text:000000000000C060
.text:000000000000C060 ; =============== S U B R O U T I N E =======================================
.text:000000000000C060
.text:000000000000C060
.text:000000000000C060                 public set_quoting_flags
.text:000000000000C060 set_quoting_flags proc near
.text:000000000000C060 ; __unwind {
.text:000000000000C060                 lea     rax, default_quoting_options
.text:000000000000C067                 test    rdi, rdi
.text:000000000000C06A                 cmovz   rdi, rax
.text:000000000000C06E                 mov     eax, [rdi+4]
.text:000000000000C071                 mov     [rdi+4], esi
.text:000000000000C074                 retn
.text:000000000000C074 ; } // starts at C060
.text:000000000000C074 set_quoting_flags endp
.text:000000000000C074
.text:000000000000C074 ; ---------------------------------------------------------------------------
.text:000000000000C075                 align 20h
.text:000000000000C080
.text:000000000000C080 ; =============== S U B R O U T I N E =======================================
.text:000000000000C080
.text:000000000000C080 ; Attributes: info_from_lumina
.text:000000000000C080
.text:000000000000C080 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:000000000000C080                 public set_custom_quoting
.text:000000000000C080 set_custom_quoting proc near
.text:000000000000C080 ; __unwind {
.text:000000000000C080                 lea     rax, default_quoting_options
.text:000000000000C087                 test    rdi, rdi
.text:000000000000C08A                 cmovz   rdi, rax
.text:000000000000C08E                 test    rsi, rsi
.text:000000000000C091                 mov     dword ptr [rdi], 0Ah
.text:000000000000C097                 jz      short loc_C0A7
.text:000000000000C099                 test    rdx, rdx
.text:000000000000C09C                 jz      short loc_C0A7
.text:000000000000C09E                 mov     [rdi+28h], rsi
.text:000000000000C0A2                 mov     [rdi+30h], rdx
.text:000000000000C0A6                 retn
.text:000000000000C0A7 ; ---------------------------------------------------------------------------
.text:000000000000C0A7
.text:000000000000C0A7 loc_C0A7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:000000000000C0A7                                         ; set_custom_quoting+1C↑j
.text:000000000000C0A7                 sub     rsp, 8
.text:000000000000C0AB                 call    _abort
.text:000000000000C0AB ; } // starts at C080
.text:000000000000C0AB set_custom_quoting endp
.text:000000000000C0AB
.text:000000000000C0B0
.text:000000000000C0B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C0B0
.text:000000000000C0B0 ; Attributes: info_from_lumina
.text:000000000000C0B0
.text:000000000000C0B0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:000000000000C0B0                 public quotearg_buffer
.text:000000000000C0B0 quotearg_buffer proc near
.text:000000000000C0B0
.text:000000000000C0B0 var_40          = qword ptr -40h
.text:000000000000C0B0
.text:000000000000C0B0 ; __unwind {
.text:000000000000C0B0                 push    r15
.text:000000000000C0B2                 push    r14
.text:000000000000C0B4                 lea     rax, default_quoting_options
.text:000000000000C0BB                 push    r13
.text:000000000000C0BD                 push    r12
.text:000000000000C0BF                 mov     r13, rdi
.text:000000000000C0C2                 push    rbp
.text:000000000000C0C3                 push    rbx
.text:000000000000C0C4                 mov     rbx, r8
.text:000000000000C0C7                 mov     r14, rsi
.text:000000000000C0CA                 mov     r15, rdx
.text:000000000000C0CD                 sub     rsp, 18h
.text:000000000000C0D1                 test    r8, r8
.text:000000000000C0D4                 cmovz   rbx, rax
.text:000000000000C0D8                 mov     [rsp+48h+var_40], rcx
.text:000000000000C0DD                 call    ___errno_location
.text:000000000000C0E2                 mov     r12d, [rax]
.text:000000000000C0E5                 mov     rbp, rax
.text:000000000000C0E8                 lea     rax, [rbx+8]
.text:000000000000C0EC                 sub     rsp, 8
.text:000000000000C0F0                 mov     r9d, [rbx+4]
.text:000000000000C0F4                 push    qword ptr [rbx+30h]
.text:000000000000C0F7                 mov     r8d, [rbx]
.text:000000000000C0FA                 push    qword ptr [rbx+28h]
.text:000000000000C0FD                 mov     rdx, r15
.text:000000000000C100                 push    rax
.text:000000000000C101                 mov     rcx, [rsp+68h+var_40]
.text:000000000000C106                 mov     rsi, r14
.text:000000000000C109                 mov     rdi, r13
.text:000000000000C10C                 call    quotearg_buffer_restyled
.text:000000000000C111                 mov     [rbp+0], r12d
.text:000000000000C115                 add     rsp, 38h
.text:000000000000C119                 pop     rbx
.text:000000000000C11A                 pop     rbp
.text:000000000000C11B                 pop     r12
.text:000000000000C11D                 pop     r13
.text:000000000000C11F                 pop     r14
.text:000000000000C121                 pop     r15
.text:000000000000C123                 retn
.text:000000000000C123 ; } // starts at C0B0
.text:000000000000C123 quotearg_buffer endp
.text:000000000000C123
.text:000000000000C123 ; ---------------------------------------------------------------------------
.text:000000000000C124                 align 10h
.text:000000000000C130
.text:000000000000C130 ; =============== S U B R O U T I N E =======================================
.text:000000000000C130
.text:000000000000C130 ; Attributes: info_from_lumina
.text:000000000000C130
.text:000000000000C130 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:000000000000C130                 public quotearg_alloc_mem
.text:000000000000C130 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:000000000000C130
.text:000000000000C130 var_5C          = dword ptr -5Ch
.text:000000000000C130 var_58          = qword ptr -58h
.text:000000000000C130 var_50          = qword ptr -50h
.text:000000000000C130 var_48          = qword ptr -48h
.text:000000000000C130 var_40          = qword ptr -40h
.text:000000000000C130
.text:000000000000C130 ; __unwind {
.text:000000000000C130                 push    r15
.text:000000000000C132                 push    r14
.text:000000000000C134                 lea     rax, default_quoting_options
.text:000000000000C13B                 push    r13
.text:000000000000C13D                 push    r12
.text:000000000000C13F                 mov     r12, rdx
.text:000000000000C142                 push    rbp
.text:000000000000C143                 push    rbx
.text:000000000000C144                 mov     rbx, rcx
.text:000000000000C147                 mov     r14, rdi
.text:000000000000C14A                 mov     r15, rsi
.text:000000000000C14D                 sub     rsp, 38h
.text:000000000000C151                 test    rcx, rcx
.text:000000000000C154                 cmovz   rbx, rax
.text:000000000000C158                 xor     ebp, ebp
.text:000000000000C15A                 call    ___errno_location
.text:000000000000C15F                 test    r12, r12
.text:000000000000C162                 mov     r13, rax
.text:000000000000C165                 mov     eax, [rax]
.text:000000000000C167                 setz    bpl
.text:000000000000C16B                 or      ebp, [rbx+4]
.text:000000000000C16E                 lea     r10, [rbx+8]
.text:000000000000C172                 sub     rsp, 8
.text:000000000000C176                 mov     r8d, [rbx]
.text:000000000000C179                 mov     rcx, r15
.text:000000000000C17C                 mov     [rsp+70h+var_5C], eax
.text:000000000000C180                 push    qword ptr [rbx+30h]
.text:000000000000C183                 mov     rdx, r14
.text:000000000000C186                 push    qword ptr [rbx+28h]
.text:000000000000C189                 push    r10
.text:000000000000C18B                 xor     esi, esi
.text:000000000000C18D                 mov     r9d, ebp
.text:000000000000C190                 xor     edi, edi
.text:000000000000C192                 mov     [rsp+88h+var_48], r10
.text:000000000000C197                 call    quotearg_buffer_restyled
.text:000000000000C19C                 lea     rsi, [rax+1]
.text:000000000000C1A0                 mov     [rsp+88h+var_40], rax
.text:000000000000C1A5                 add     rsp, 20h
.text:000000000000C1A9                 mov     rdi, rsi
.text:000000000000C1AC                 mov     [rsp+68h+var_50], rsi
.text:000000000000C1B1                 call    xmalloc
.text:000000000000C1B6                 mov     [rsp+68h+var_58], rax
.text:000000000000C1BB                 sub     rsp, 8
.text:000000000000C1BF                 push    qword ptr [rbx+30h]
.text:000000000000C1C2                 push    qword ptr [rbx+28h]
.text:000000000000C1C5                 mov     r10, [rsp+80h+var_48]
.text:000000000000C1CA                 mov     r9d, ebp
.text:000000000000C1CD                 mov     r8d, [rbx]
.text:000000000000C1D0                 mov     rcx, r15
.text:000000000000C1D3                 mov     rdx, r14
.text:000000000000C1D6                 mov     rdi, rax
.text:000000000000C1D9                 push    r10
.text:000000000000C1DB                 mov     rsi, [rsp+88h+var_50]
.text:000000000000C1E0                 call    quotearg_buffer_restyled
.text:000000000000C1E5                 mov     eax, [rsp+88h+var_5C]
.text:000000000000C1E9                 add     rsp, 20h
.text:000000000000C1ED                 test    r12, r12
.text:000000000000C1F0                 mov     [r13+0], eax
.text:000000000000C1F4                 jz      short loc_C1FF
.text:000000000000C1F6                 mov     r11, [rsp+68h+var_40]
.text:000000000000C1FB                 mov     [r12], r11
.text:000000000000C1FF
.text:000000000000C1FF loc_C1FF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000C1FF                 mov     rax, [rsp+68h+var_58]
.text:000000000000C204                 add     rsp, 38h
.text:000000000000C208                 pop     rbx
.text:000000000000C209                 pop     rbp
.text:000000000000C20A                 pop     r12
.text:000000000000C20C                 pop     r13
.text:000000000000C20E                 pop     r14
.text:000000000000C210                 pop     r15
.text:000000000000C212                 retn
.text:000000000000C212 ; } // starts at C130
.text:000000000000C212 quotearg_alloc_mem endp
.text:000000000000C212
.text:000000000000C212 ; ---------------------------------------------------------------------------
.text:000000000000C213                 align 20h
.text:000000000000C220
.text:000000000000C220 ; =============== S U B R O U T I N E =======================================
.text:000000000000C220
.text:000000000000C220
.text:000000000000C220                 public quotearg_alloc
.text:000000000000C220 quotearg_alloc  proc near
.text:000000000000C220 ; __unwind {
.text:000000000000C220                 mov     rcx, rdx
.text:000000000000C223                 xor     edx, edx
.text:000000000000C225                 jmp     quotearg_alloc_mem
.text:000000000000C225 ; } // starts at C220
.text:000000000000C225 quotearg_alloc  endp
.text:000000000000C225
.text:000000000000C225 ; ---------------------------------------------------------------------------
.text:000000000000C22A                 align 10h
.text:000000000000C230
.text:000000000000C230 ; =============== S U B R O U T I N E =======================================
.text:000000000000C230
.text:000000000000C230 ; Attributes: info_from_lumina
.text:000000000000C230
.text:000000000000C230 ; void __cdecl quotearg_free()
.text:000000000000C230                 public quotearg_free
.text:000000000000C230 quotearg_free   proc near
.text:000000000000C230 ; __unwind {
.text:000000000000C230                 mov     eax, cs:nslots
.text:000000000000C236                 push    r12
.text:000000000000C238                 mov     r12, cs:slotvec
.text:000000000000C23F                 push    rbp
.text:000000000000C240                 push    rbx
.text:000000000000C241                 cmp     eax, 1
.text:000000000000C244                 jle     short loc_C271
.text:000000000000C246                 sub     eax, 2
.text:000000000000C249                 lea     rbx, [r12+18h]
.text:000000000000C24E                 shl     rax, 4
.text:000000000000C252                 lea     rbp, [r12+rax+28h]
.text:000000000000C257                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C260
.text:000000000000C260 loc_C260:                               ; CODE XREF: quotearg_free+3F↓j
.text:000000000000C260                 mov     rdi, [rbx]      ; ptr
.text:000000000000C263                 add     rbx, 10h
.text:000000000000C267                 call    _free
.text:000000000000C26C                 cmp     rbx, rbp
.text:000000000000C26F                 jnz     short loc_C260
.text:000000000000C271
.text:000000000000C271 loc_C271:                               ; CODE XREF: quotearg_free+14↑j
.text:000000000000C271                 mov     rdi, [r12+8]    ; ptr
.text:000000000000C276                 lea     rbx, slot0
.text:000000000000C27D                 cmp     rdi, rbx
.text:000000000000C280                 jz      short loc_C299
.text:000000000000C282                 call    _free
.text:000000000000C287                 mov     cs:slotvec0, 100h
.text:000000000000C292                 mov     cs:off_218098, rbx
.text:000000000000C299
.text:000000000000C299 loc_C299:                               ; CODE XREF: quotearg_free+50↑j
.text:000000000000C299                 lea     rbx, slotvec0
.text:000000000000C2A0                 cmp     r12, rbx
.text:000000000000C2A3                 jz      short loc_C2B4
.text:000000000000C2A5                 mov     rdi, r12        ; ptr
.text:000000000000C2A8                 call    _free
.text:000000000000C2AD                 mov     cs:slotvec, rbx
.text:000000000000C2B4
.text:000000000000C2B4 loc_C2B4:                               ; CODE XREF: quotearg_free+73↑j
.text:000000000000C2B4                 pop     rbx
.text:000000000000C2B5                 mov     cs:nslots, 1
.text:000000000000C2BF                 pop     rbp
.text:000000000000C2C0                 pop     r12
.text:000000000000C2C2                 retn
.text:000000000000C2C2 ; } // starts at C230
.text:000000000000C2C2 quotearg_free   endp
.text:000000000000C2C2
.text:000000000000C2C2 ; ---------------------------------------------------------------------------
.text:000000000000C2C3                 align 10h
.text:000000000000C2D0
.text:000000000000C2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C2D0
.text:000000000000C2D0
.text:000000000000C2D0                 public quotearg_n
.text:000000000000C2D0 quotearg_n      proc near
.text:000000000000C2D0 ; __unwind {
.text:000000000000C2D0                 lea     rcx, default_quoting_options
.text:000000000000C2D7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C2DE                 jmp     quotearg_n_options
.text:000000000000C2DE ; } // starts at C2D0
.text:000000000000C2DE quotearg_n      endp
.text:000000000000C2DE
.text:000000000000C2DE ; ---------------------------------------------------------------------------
.text:000000000000C2E3                 align 10h
.text:000000000000C2F0
.text:000000000000C2F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C2F0
.text:000000000000C2F0
.text:000000000000C2F0                 public quotearg_n_mem
.text:000000000000C2F0 quotearg_n_mem  proc near
.text:000000000000C2F0 ; __unwind {
.text:000000000000C2F0                 lea     rcx, default_quoting_options
.text:000000000000C2F7                 jmp     quotearg_n_options
.text:000000000000C2F7 ; } // starts at C2F0
.text:000000000000C2F7 quotearg_n_mem  endp
.text:000000000000C2F7
.text:000000000000C2F7 ; ---------------------------------------------------------------------------
.text:000000000000C2FC                 align 20h
.text:000000000000C300
.text:000000000000C300 ; =============== S U B R O U T I N E =======================================
.text:000000000000C300
.text:000000000000C300
.text:000000000000C300                 public quotearg
.text:000000000000C300 quotearg        proc near
.text:000000000000C300 ; __unwind {
.text:000000000000C300                 lea     rcx, default_quoting_options
.text:000000000000C307                 mov     rsi, rdi
.text:000000000000C30A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C311                 xor     edi, edi
.text:000000000000C313                 jmp     quotearg_n_options
.text:000000000000C313 ; } // starts at C300
.text:000000000000C313 quotearg        endp
.text:000000000000C313
.text:000000000000C313 ; ---------------------------------------------------------------------------
.text:000000000000C318                 align 20h
.text:000000000000C320
.text:000000000000C320 ; =============== S U B R O U T I N E =======================================
.text:000000000000C320
.text:000000000000C320
.text:000000000000C320                 public quotearg_mem
.text:000000000000C320 quotearg_mem    proc near
.text:000000000000C320 ; __unwind {
.text:000000000000C320                 lea     rcx, default_quoting_options
.text:000000000000C327                 mov     rdx, rsi
.text:000000000000C32A                 mov     rsi, rdi
.text:000000000000C32D                 xor     edi, edi
.text:000000000000C32F                 jmp     quotearg_n_options
.text:000000000000C32F ; } // starts at C320
.text:000000000000C32F quotearg_mem    endp
.text:000000000000C32F
.text:000000000000C32F ; ---------------------------------------------------------------------------
.text:000000000000C334                 align 20h
.text:000000000000C340
.text:000000000000C340 ; =============== S U B R O U T I N E =======================================
.text:000000000000C340
.text:000000000000C340 ; Attributes: info_from_lumina
.text:000000000000C340
.text:000000000000C340 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:000000000000C340                 public quotearg_n_style
.text:000000000000C340 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:000000000000C340                                         ; quotearg_style+7↓j
.text:000000000000C340
.text:000000000000C340 var_48          = dword ptr -48h
.text:000000000000C340 var_44          = qword ptr -44h
.text:000000000000C340 var_3C          = qword ptr -3Ch
.text:000000000000C340 var_34          = qword ptr -34h
.text:000000000000C340 var_2C          = qword ptr -2Ch
.text:000000000000C340 var_24          = qword ptr -24h
.text:000000000000C340 var_1C          = qword ptr -1Ch
.text:000000000000C340 var_14          = dword ptr -14h
.text:000000000000C340 var_10          = qword ptr -10h
.text:000000000000C340
.text:000000000000C340 ; __unwind {
.text:000000000000C340                 sub     rsp, 48h
.text:000000000000C344                 mov     rax, rdx
.text:000000000000C347                 mov     rdx, fs:28h
.text:000000000000C350                 mov     [rsp+48h+var_10], rdx
.text:000000000000C355                 xor     edx, edx
.text:000000000000C357                 cmp     esi, 0Ah
.text:000000000000C35A                 jz      short loc_C3C4
.text:000000000000C35C                 mov     [rsp+48h+var_48], esi
.text:000000000000C35F                 mov     rcx, rsp
.text:000000000000C362                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C369                 mov     rsi, rax
.text:000000000000C36C                 mov     [rsp+48h+var_44], 0
.text:000000000000C375                 mov     [rsp+48h+var_3C], 0
.text:000000000000C37E                 mov     [rsp+48h+var_34], 0
.text:000000000000C387                 mov     [rsp+48h+var_2C], 0
.text:000000000000C390                 mov     [rsp+48h+var_24], 0
.text:000000000000C399                 mov     [rsp+48h+var_1C], 0
.text:000000000000C3A2                 mov     [rsp+48h+var_14], 0
.text:000000000000C3AA                 call    quotearg_n_options
.text:000000000000C3AF                 mov     rcx, [rsp+48h+var_10]
.text:000000000000C3B4                 xor     rcx, fs:28h
.text:000000000000C3BD                 jnz     short loc_C3C9
.text:000000000000C3BF                 add     rsp, 48h
.text:000000000000C3C3                 retn
.text:000000000000C3C4 ; ---------------------------------------------------------------------------
.text:000000000000C3C4
.text:000000000000C3C4 loc_C3C4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:000000000000C3C4                 call    _abort
.text:000000000000C3C9 ; ---------------------------------------------------------------------------
.text:000000000000C3C9
.text:000000000000C3C9 loc_C3C9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:000000000000C3C9                 call    ___stack_chk_fail
.text:000000000000C3C9 ; } // starts at C340
.text:000000000000C3C9 quotearg_n_style endp
.text:000000000000C3C9
.text:000000000000C3C9 ; ---------------------------------------------------------------------------
.text:000000000000C3CE                 align 10h
.text:000000000000C3D0
.text:000000000000C3D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C3D0
.text:000000000000C3D0 ; Attributes: info_from_lumina
.text:000000000000C3D0
.text:000000000000C3D0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:000000000000C3D0                 public quotearg_n_style_mem
.text:000000000000C3D0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:000000000000C3D0
.text:000000000000C3D0 var_48          = dword ptr -48h
.text:000000000000C3D0 var_44          = qword ptr -44h
.text:000000000000C3D0 var_3C          = qword ptr -3Ch
.text:000000000000C3D0 var_34          = qword ptr -34h
.text:000000000000C3D0 var_2C          = qword ptr -2Ch
.text:000000000000C3D0 var_24          = qword ptr -24h
.text:000000000000C3D0 var_1C          = qword ptr -1Ch
.text:000000000000C3D0 var_14          = dword ptr -14h
.text:000000000000C3D0 var_10          = qword ptr -10h
.text:000000000000C3D0
.text:000000000000C3D0 ; __unwind {
.text:000000000000C3D0                 sub     rsp, 48h
.text:000000000000C3D4                 mov     rax, rdx
.text:000000000000C3D7                 mov     rdx, rcx
.text:000000000000C3DA                 mov     rcx, fs:28h
.text:000000000000C3E3                 mov     [rsp+48h+var_10], rcx
.text:000000000000C3E8                 xor     ecx, ecx
.text:000000000000C3EA                 cmp     esi, 0Ah
.text:000000000000C3ED                 jz      short loc_C450
.text:000000000000C3EF                 mov     [rsp+48h+var_48], esi
.text:000000000000C3F2                 mov     rcx, rsp
.text:000000000000C3F5                 mov     rsi, rax
.text:000000000000C3F8                 mov     [rsp+48h+var_44], 0
.text:000000000000C401                 mov     [rsp+48h+var_3C], 0
.text:000000000000C40A                 mov     [rsp+48h+var_34], 0
.text:000000000000C413                 mov     [rsp+48h+var_2C], 0
.text:000000000000C41C                 mov     [rsp+48h+var_24], 0
.text:000000000000C425                 mov     [rsp+48h+var_1C], 0
.text:000000000000C42E                 mov     [rsp+48h+var_14], 0
.text:000000000000C436                 call    quotearg_n_options
.text:000000000000C43B                 mov     rdx, [rsp+48h+var_10]
.text:000000000000C440                 xor     rdx, fs:28h
.text:000000000000C449                 jnz     short loc_C455
.text:000000000000C44B                 add     rsp, 48h
.text:000000000000C44F                 retn
.text:000000000000C450 ; ---------------------------------------------------------------------------
.text:000000000000C450
.text:000000000000C450 loc_C450:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:000000000000C450                 call    _abort
.text:000000000000C455 ; ---------------------------------------------------------------------------
.text:000000000000C455
.text:000000000000C455 loc_C455:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:000000000000C455                 call    ___stack_chk_fail
.text:000000000000C455 ; } // starts at C3D0
.text:000000000000C455 quotearg_n_style_mem endp
.text:000000000000C455
.text:000000000000C455 ; ---------------------------------------------------------------------------
.text:000000000000C45A                 align 20h
.text:000000000000C460
.text:000000000000C460 ; =============== S U B R O U T I N E =======================================
.text:000000000000C460
.text:000000000000C460
.text:000000000000C460                 public quotearg_style
.text:000000000000C460 quotearg_style  proc near
.text:000000000000C460 ; __unwind {
.text:000000000000C460                 mov     rdx, rsi
.text:000000000000C463                 mov     esi, edi
.text:000000000000C465                 xor     edi, edi
.text:000000000000C467                 jmp     quotearg_n_style
.text:000000000000C467 ; } // starts at C460
.text:000000000000C467 quotearg_style  endp
.text:000000000000C467
.text:000000000000C467 ; ---------------------------------------------------------------------------
.text:000000000000C46C                 align 10h
.text:000000000000C470
.text:000000000000C470 ; =============== S U B R O U T I N E =======================================
.text:000000000000C470
.text:000000000000C470
.text:000000000000C470                 public quotearg_style_mem
.text:000000000000C470 quotearg_style_mem proc near
.text:000000000000C470 ; __unwind {
.text:000000000000C470                 mov     rcx, rdx
.text:000000000000C473                 mov     rdx, rsi
.text:000000000000C476                 mov     esi, edi
.text:000000000000C478                 xor     edi, edi
.text:000000000000C47A                 jmp     quotearg_n_style_mem
.text:000000000000C47A ; } // starts at C470
.text:000000000000C47A quotearg_style_mem endp
.text:000000000000C47A
.text:000000000000C47A ; ---------------------------------------------------------------------------
.text:000000000000C47F                 align 20h
.text:000000000000C480
.text:000000000000C480 ; =============== S U B R O U T I N E =======================================
.text:000000000000C480
.text:000000000000C480 ; Attributes: info_from_lumina
.text:000000000000C480
.text:000000000000C480 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:000000000000C480                 public quotearg_char_mem
.text:000000000000C480 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:000000000000C480                                         ; quotearg_colon+C↓j ...
.text:000000000000C480
.text:000000000000C480 var_48          = xmmword ptr -48h
.text:000000000000C480 var_38          = xmmword ptr -38h
.text:000000000000C480 var_28          = xmmword ptr -28h
.text:000000000000C480 var_18          = qword ptr -18h
.text:000000000000C480 var_10          = qword ptr -10h
.text:000000000000C480
.text:000000000000C480 ; __unwind {
.text:000000000000C480                 sub     rsp, 48h
.text:000000000000C484                 mov     ecx, edx
.text:000000000000C486                 mov     rax, fs:28h
.text:000000000000C48F                 mov     [rsp+48h+var_10], rax
.text:000000000000C494                 xor     eax, eax
.text:000000000000C496                 mov     rax, cs:qword_218250
.text:000000000000C49D                 mov     r8, rsp
.text:000000000000C4A0                 and     ecx, 1Fh
.text:000000000000C4A3                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000C4AB                 mov     [rsp+48h+var_18], rax
.text:000000000000C4B0                 mov     eax, edx
.text:000000000000C4B2                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000C4B6                 shr     al, 5
.text:000000000000C4B9                 movzx   eax, al
.text:000000000000C4BC                 lea     r9, [r8+rax*4+8]
.text:000000000000C4C1                 movdqa  xmm0, cs:xmmword_218230
.text:000000000000C4C9                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000C4CE                 movdqa  xmm0, cs:xmmword_218240
.text:000000000000C4D6                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000C4DB                 mov     edx, [r9]
.text:000000000000C4DE                 mov     eax, edx
.text:000000000000C4E0                 shr     eax, cl
.text:000000000000C4E2                 not     eax
.text:000000000000C4E4                 and     eax, 1
.text:000000000000C4E7                 shl     eax, cl
.text:000000000000C4E9                 mov     rcx, r8
.text:000000000000C4EC                 xor     eax, edx
.text:000000000000C4EE                 mov     rdx, rsi
.text:000000000000C4F1                 mov     rsi, rdi
.text:000000000000C4F4                 mov     [r9], eax
.text:000000000000C4F7                 xor     edi, edi
.text:000000000000C4F9                 call    quotearg_n_options
.text:000000000000C4FE                 mov     rsi, [rsp+48h+var_10]
.text:000000000000C503                 xor     rsi, fs:28h
.text:000000000000C50C                 jnz     short loc_C513
.text:000000000000C50E                 add     rsp, 48h
.text:000000000000C512                 retn
.text:000000000000C513 ; ---------------------------------------------------------------------------
.text:000000000000C513
.text:000000000000C513 loc_C513:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:000000000000C513                 call    ___stack_chk_fail
.text:000000000000C513 ; } // starts at C480
.text:000000000000C513 quotearg_char_mem endp
.text:000000000000C513
.text:000000000000C513 ; ---------------------------------------------------------------------------
.text:000000000000C518                 align 20h
.text:000000000000C520
.text:000000000000C520 ; =============== S U B R O U T I N E =======================================
.text:000000000000C520
.text:000000000000C520
.text:000000000000C520                 public quotearg_char
.text:000000000000C520 quotearg_char   proc near
.text:000000000000C520 ; __unwind {
.text:000000000000C520                 movsx   edx, sil
.text:000000000000C524                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000C52B                 jmp     quotearg_char_mem
.text:000000000000C52B ; } // starts at C520
.text:000000000000C52B quotearg_char   endp
.text:000000000000C52B
.text:000000000000C530
.text:000000000000C530 ; =============== S U B R O U T I N E =======================================
.text:000000000000C530
.text:000000000000C530
.text:000000000000C530                 public quotearg_colon
.text:000000000000C530 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:000000000000C530 ; __unwind {
.text:000000000000C530                 mov     edx, 3Ah ; ':'
.text:000000000000C535                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000C53C                 jmp     quotearg_char_mem
.text:000000000000C53C ; } // starts at C530
.text:000000000000C53C quotearg_colon  endp
.text:000000000000C53C
.text:000000000000C53C ; ---------------------------------------------------------------------------
.text:000000000000C541                 align 10h
.text:000000000000C550
.text:000000000000C550 ; =============== S U B R O U T I N E =======================================
.text:000000000000C550
.text:000000000000C550
.text:000000000000C550                 public quotearg_colon_mem
.text:000000000000C550 quotearg_colon_mem proc near
.text:000000000000C550 ; __unwind {
.text:000000000000C550                 mov     edx, 3Ah ; ':'
.text:000000000000C555                 jmp     quotearg_char_mem
.text:000000000000C555 ; } // starts at C550
.text:000000000000C555 quotearg_colon_mem endp
.text:000000000000C555
.text:000000000000C555 ; ---------------------------------------------------------------------------
.text:000000000000C55A                 align 20h
.text:000000000000C560
.text:000000000000C560 ; =============== S U B R O U T I N E =======================================
.text:000000000000C560
.text:000000000000C560 ; Attributes: info_from_lumina
.text:000000000000C560
.text:000000000000C560 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:000000000000C560                 public quotearg_n_style_colon
.text:000000000000C560 quotearg_n_style_colon proc near        ; CODE XREF: main+5E2↑p
.text:000000000000C560                                         ; main+774↑p ...
.text:000000000000C560
.text:000000000000C560 var_48          = dword ptr -48h
.text:000000000000C560 var_44          = qword ptr -44h
.text:000000000000C560 var_3C          = qword ptr -3Ch
.text:000000000000C560 var_34          = qword ptr -34h
.text:000000000000C560 var_2C          = qword ptr -2Ch
.text:000000000000C560 var_24          = qword ptr -24h
.text:000000000000C560 var_1C          = qword ptr -1Ch
.text:000000000000C560 var_14          = dword ptr -14h
.text:000000000000C560 var_10          = qword ptr -10h
.text:000000000000C560
.text:000000000000C560 ; __unwind {
.text:000000000000C560                 sub     rsp, 48h
.text:000000000000C564                 mov     rax, rdx
.text:000000000000C567                 mov     rdx, fs:28h
.text:000000000000C570                 mov     [rsp+48h+var_10], rdx
.text:000000000000C575                 xor     edx, edx
.text:000000000000C577                 cmp     esi, 0Ah
.text:000000000000C57A                 jz      short loc_C5E4
.text:000000000000C57C                 mov     [rsp+48h+var_48], esi
.text:000000000000C57F                 mov     rcx, rsp
.text:000000000000C582                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C589                 mov     rsi, rax
.text:000000000000C58C                 mov     [rsp+48h+var_44], 0
.text:000000000000C595                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000C59E                 mov     [rsp+48h+var_34], 0
.text:000000000000C5A7                 mov     [rsp+48h+var_2C], 0
.text:000000000000C5B0                 mov     [rsp+48h+var_24], 0
.text:000000000000C5B9                 mov     [rsp+48h+var_1C], 0
.text:000000000000C5C2                 mov     [rsp+48h+var_14], 0
.text:000000000000C5CA                 call    quotearg_n_options
.text:000000000000C5CF                 mov     rcx, [rsp+48h+var_10]
.text:000000000000C5D4                 xor     rcx, fs:28h
.text:000000000000C5DD                 jnz     short loc_C5E9
.text:000000000000C5DF                 add     rsp, 48h
.text:000000000000C5E3                 retn
.text:000000000000C5E4 ; ---------------------------------------------------------------------------
.text:000000000000C5E4
.text:000000000000C5E4 loc_C5E4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:000000000000C5E4                 call    _abort
.text:000000000000C5E9 ; ---------------------------------------------------------------------------
.text:000000000000C5E9
.text:000000000000C5E9 loc_C5E9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:000000000000C5E9                 call    ___stack_chk_fail
.text:000000000000C5E9 ; } // starts at C560
.text:000000000000C5E9 quotearg_n_style_colon endp
.text:000000000000C5E9
.text:000000000000C5E9 ; ---------------------------------------------------------------------------
.text:000000000000C5EE                 align 10h
.text:000000000000C5F0
.text:000000000000C5F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C5F0
.text:000000000000C5F0 ; Attributes: info_from_lumina
.text:000000000000C5F0
.text:000000000000C5F0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:000000000000C5F0                 public quotearg_n_custom_mem
.text:000000000000C5F0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:000000000000C5F0                                         ; quotearg_custom+12↓j ...
.text:000000000000C5F0
.text:000000000000C5F0 var_48          = xmmword ptr -48h
.text:000000000000C5F0 var_38          = xmmword ptr -38h
.text:000000000000C5F0 var_28          = xmmword ptr -28h
.text:000000000000C5F0 var_18          = qword ptr -18h
.text:000000000000C5F0 var_10          = qword ptr -10h
.text:000000000000C5F0
.text:000000000000C5F0 ; __unwind {
.text:000000000000C5F0                 sub     rsp, 48h
.text:000000000000C5F4                 mov     r9, rcx
.text:000000000000C5F7                 mov     rcx, cs:qword_218250
.text:000000000000C5FE                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000C606                 mov     rax, fs:28h
.text:000000000000C60F                 mov     [rsp+48h+var_10], rax
.text:000000000000C614                 xor     eax, eax
.text:000000000000C616                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000C61A                 test    rsi, rsi
.text:000000000000C61D                 mov     [rsp+48h+var_18], rcx
.text:000000000000C622                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:000000000000C629                 movdqa  xmm0, cs:xmmword_218230
.text:000000000000C631                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000C636                 movdqa  xmm0, cs:xmmword_218240
.text:000000000000C63E                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000C643                 jz      short loc_C677
.text:000000000000C645                 test    rdx, rdx
.text:000000000000C648                 jz      short loc_C677
.text:000000000000C64A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000C64F                 mov     [rsp+48h+var_18], rdx
.text:000000000000C654                 mov     rcx, rsp
.text:000000000000C657                 mov     rdx, r8
.text:000000000000C65A                 mov     rsi, r9
.text:000000000000C65D                 call    quotearg_n_options
.text:000000000000C662                 mov     rdi, [rsp+48h+var_10]
.text:000000000000C667                 xor     rdi, fs:28h
.text:000000000000C670                 jnz     short loc_C67C
.text:000000000000C672                 add     rsp, 48h
.text:000000000000C676                 retn
.text:000000000000C677 ; ---------------------------------------------------------------------------
.text:000000000000C677
.text:000000000000C677 loc_C677:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:000000000000C677                                         ; quotearg_n_custom_mem+58↑j
.text:000000000000C677                 call    _abort
.text:000000000000C67C ; ---------------------------------------------------------------------------
.text:000000000000C67C
.text:000000000000C67C loc_C67C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000C67C                 call    ___stack_chk_fail
.text:000000000000C67C ; } // starts at C5F0
.text:000000000000C67C quotearg_n_custom_mem endp
.text:000000000000C67C
.text:000000000000C67C ; ---------------------------------------------------------------------------
.text:000000000000C681                 align 10h
.text:000000000000C690
.text:000000000000C690 ; =============== S U B R O U T I N E =======================================
.text:000000000000C690
.text:000000000000C690
.text:000000000000C690                 public quotearg_n_custom
.text:000000000000C690 quotearg_n_custom proc near
.text:000000000000C690 ; __unwind {
.text:000000000000C690                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000C697                 jmp     quotearg_n_custom_mem
.text:000000000000C697 ; } // starts at C690
.text:000000000000C697 quotearg_n_custom endp
.text:000000000000C697
.text:000000000000C697 ; ---------------------------------------------------------------------------
.text:000000000000C69C                 align 20h
.text:000000000000C6A0
.text:000000000000C6A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C6A0
.text:000000000000C6A0
.text:000000000000C6A0                 public quotearg_custom
.text:000000000000C6A0 quotearg_custom proc near
.text:000000000000C6A0 ; __unwind {
.text:000000000000C6A0                 mov     rcx, rdx
.text:000000000000C6A3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000C6AA                 mov     rdx, rsi
.text:000000000000C6AD                 mov     rsi, rdi
.text:000000000000C6B0                 xor     edi, edi
.text:000000000000C6B2                 jmp     quotearg_n_custom_mem
.text:000000000000C6B2 ; } // starts at C6A0
.text:000000000000C6B2 quotearg_custom endp
.text:000000000000C6B2
.text:000000000000C6B2 ; ---------------------------------------------------------------------------
.text:000000000000C6B7                 align 20h
.text:000000000000C6C0
.text:000000000000C6C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C6C0
.text:000000000000C6C0
.text:000000000000C6C0                 public quotearg_custom_mem
.text:000000000000C6C0 quotearg_custom_mem proc near
.text:000000000000C6C0 ; __unwind {
.text:000000000000C6C0                 mov     r8, rcx
.text:000000000000C6C3                 mov     rcx, rdx
.text:000000000000C6C6                 mov     rdx, rsi
.text:000000000000C6C9                 mov     rsi, rdi
.text:000000000000C6CC                 xor     edi, edi
.text:000000000000C6CE                 jmp     quotearg_n_custom_mem
.text:000000000000C6CE ; } // starts at C6C0
.text:000000000000C6CE quotearg_custom_mem endp
.text:000000000000C6CE
.text:000000000000C6CE ; ---------------------------------------------------------------------------
.text:000000000000C6D3                 align 20h
.text:000000000000C6E0
.text:000000000000C6E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C6E0
.text:000000000000C6E0
.text:000000000000C6E0                 public quote_n_mem
.text:000000000000C6E0 quote_n_mem     proc near
.text:000000000000C6E0 ; __unwind {
.text:000000000000C6E0                 lea     rcx, quote_quoting_options
.text:000000000000C6E7                 jmp     quotearg_n_options
.text:000000000000C6E7 ; } // starts at C6E0
.text:000000000000C6E7 quote_n_mem     endp
.text:000000000000C6E7
.text:000000000000C6E7 ; ---------------------------------------------------------------------------
.text:000000000000C6EC                 align 10h
.text:000000000000C6F0
.text:000000000000C6F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C6F0
.text:000000000000C6F0
.text:000000000000C6F0                 public quote_mem
.text:000000000000C6F0 quote_mem       proc near
.text:000000000000C6F0 ; __unwind {
.text:000000000000C6F0                 lea     rcx, quote_quoting_options
.text:000000000000C6F7                 mov     rdx, rsi
.text:000000000000C6FA                 mov     rsi, rdi
.text:000000000000C6FD                 xor     edi, edi
.text:000000000000C6FF                 jmp     quotearg_n_options
.text:000000000000C6FF ; } // starts at C6F0
.text:000000000000C6FF quote_mem       endp
.text:000000000000C6FF
.text:000000000000C6FF ; ---------------------------------------------------------------------------
.text:000000000000C704                 align 10h
.text:000000000000C710
.text:000000000000C710 ; =============== S U B R O U T I N E =======================================
.text:000000000000C710
.text:000000000000C710
.text:000000000000C710                 public quote_n
.text:000000000000C710 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:000000000000C710 ; __unwind {
.text:000000000000C710                 lea     rcx, quote_quoting_options
.text:000000000000C717                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C71E                 jmp     quotearg_n_options
.text:000000000000C71E ; } // starts at C710
.text:000000000000C71E quote_n         endp
.text:000000000000C71E
.text:000000000000C71E ; ---------------------------------------------------------------------------
.text:000000000000C723                 align 10h
.text:000000000000C730
.text:000000000000C730 ; =============== S U B R O U T I N E =======================================
.text:000000000000C730
.text:000000000000C730
.text:000000000000C730                 public quote
.text:000000000000C730 quote           proc near               ; CODE XREF: main:loc_3075↑p
.text:000000000000C730                                         ; main+679↑p ...
.text:000000000000C730 ; __unwind {
.text:000000000000C730                 lea     rcx, quote_quoting_options
.text:000000000000C737                 mov     rsi, rdi
.text:000000000000C73A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C741                 xor     edi, edi
.text:000000000000C743                 jmp     quotearg_n_options
.text:000000000000C743 ; } // starts at C730
.text:000000000000C743 quote           endp
.text:000000000000C743
.text:000000000000C743 ; ---------------------------------------------------------------------------
.text:000000000000C748                 align 10h
.text:000000000000C750
.text:000000000000C750 ; =============== S U B R O U T I N E =======================================
.text:000000000000C750
.text:000000000000C750
.text:000000000000C750 ; __int64 __fastcall settime(struct timespec *tp)
.text:000000000000C750                 public settime
.text:000000000000C750 settime         proc near               ; CODE XREF: main+39B↑p
.text:000000000000C750
.text:000000000000C750 var_38          = qword ptr -38h
.text:000000000000C750 var_30          = qword ptr -30h
.text:000000000000C750 var_20          = qword ptr -20h
.text:000000000000C750
.text:000000000000C750 ; __unwind {
.text:000000000000C750                 push    rbp
.text:000000000000C751                 push    rbx
.text:000000000000C752                 mov     rsi, rdi        ; tp
.text:000000000000C755                 mov     rbp, rdi
.text:000000000000C758                 xor     edi, edi        ; clock_id
.text:000000000000C75A                 sub     rsp, 28h
.text:000000000000C75E                 mov     rax, fs:28h
.text:000000000000C767                 mov     [rsp+38h+var_20], rax
.text:000000000000C76C                 xor     eax, eax
.text:000000000000C76E                 call    _clock_settime
.text:000000000000C773                 test    eax, eax
.text:000000000000C775                 mov     ebx, eax
.text:000000000000C777                 jz      short loc_C7BB
.text:000000000000C779                 call    ___errno_location
.text:000000000000C77E                 cmp     dword ptr [rax], 1
.text:000000000000C781                 jz      short loc_C7BB
.text:000000000000C783                 mov     rax, [rbp+0]
.text:000000000000C787                 mov     rcx, [rbp+8]
.text:000000000000C78B                 mov     rdx, 20C49BA5E353F7CFh
.text:000000000000C795                 mov     rdi, rsp        ; tv
.text:000000000000C798                 xor     esi, esi        ; tz
.text:000000000000C79A                 mov     [rsp+38h+var_38], rax
.text:000000000000C79E                 mov     rax, rcx
.text:000000000000C7A1                 sar     rcx, 3Fh
.text:000000000000C7A5                 imul    rdx
.text:000000000000C7A8                 sar     rdx, 7
.text:000000000000C7AC                 sub     rdx, rcx
.text:000000000000C7AF                 mov     [rsp+38h+var_30], rdx
.text:000000000000C7B4                 call    _settimeofday
.text:000000000000C7B9                 mov     ebx, eax
.text:000000000000C7BB
.text:000000000000C7BB loc_C7BB:                               ; CODE XREF: settime+27↑j
.text:000000000000C7BB                                         ; settime+31↑j
.text:000000000000C7BB                 mov     rsi, [rsp+38h+var_20]
.text:000000000000C7C0                 xor     rsi, fs:28h
.text:000000000000C7C9                 mov     eax, ebx
.text:000000000000C7CB                 jnz     short loc_C7D4
.text:000000000000C7CD                 add     rsp, 28h
.text:000000000000C7D1                 pop     rbx
.text:000000000000C7D2                 pop     rbp
.text:000000000000C7D3                 retn
.text:000000000000C7D4 ; ---------------------------------------------------------------------------
.text:000000000000C7D4
.text:000000000000C7D4 loc_C7D4:                               ; CODE XREF: settime+7B↑j
.text:000000000000C7D4                 call    ___stack_chk_fail
.text:000000000000C7D4 ; } // starts at C750
.text:000000000000C7D4 settime         endp
.text:000000000000C7D4
.text:000000000000C7D4 ; ---------------------------------------------------------------------------
.text:000000000000C7D9                 align 20h
.text:000000000000C7E0
.text:000000000000C7E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C7E0
.text:000000000000C7E0
.text:000000000000C7E0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:000000000000C7E0                 public version_etc_arn
.text:000000000000C7E0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_CC1B↓j
.text:000000000000C7E0                                         ; version_etc_va:loc_CC6B↓p ...
.text:000000000000C7E0
.text:000000000000C7E0 var_58          = qword ptr -58h
.text:000000000000C7E0 var_50          = qword ptr -50h
.text:000000000000C7E0 var_48          = qword ptr -48h
.text:000000000000C7E0 var_40          = qword ptr -40h
.text:000000000000C7E0
.text:000000000000C7E0 ; __unwind {
.text:000000000000C7E0                 push    r15
.text:000000000000C7E2                 push    r14
.text:000000000000C7E4                 push    r13
.text:000000000000C7E6                 push    r12
.text:000000000000C7E8                 mov     r12, r9
.text:000000000000C7EB                 push    rbp
.text:000000000000C7EC                 push    rbx
.text:000000000000C7ED                 mov     rbp, rdi
.text:000000000000C7F0                 mov     rbx, r8
.text:000000000000C7F3                 sub     rsp, 28h
.text:000000000000C7F7                 test    rsi, rsi
.text:000000000000C7FA                 jz      loc_C918
.text:000000000000C800                 mov     r8, rdx
.text:000000000000C803                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000C80A                 mov     r9, rcx
.text:000000000000C80D                 xor     eax, eax
.text:000000000000C80F                 mov     rcx, rsi
.text:000000000000C812                 mov     esi, 1
.text:000000000000C817                 call    ___fprintf_chk
.text:000000000000C81C
.text:000000000000C81C loc_C81C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000C81C                 lea     rsi, aC         ; "(C)"
.text:000000000000C823                 xor     edi, edi        ; domainname
.text:000000000000C825                 mov     edx, 5          ; category
.text:000000000000C82A                 call    _dcgettext
.text:000000000000C82F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:000000000000C836                 mov     rcx, rax
.text:000000000000C839                 mov     r8d, 7E3h
.text:000000000000C83F                 mov     esi, 1
.text:000000000000C844                 mov     rdi, rbp
.text:000000000000C847                 xor     eax, eax
.text:000000000000C849                 call    ___fprintf_chk
.text:000000000000C84E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:000000000000C855                 xor     edi, edi        ; domainname
.text:000000000000C857                 mov     edx, 5          ; category
.text:000000000000C85C                 call    _dcgettext
.text:000000000000C861                 mov     rsi, rbp        ; stream
.text:000000000000C864                 mov     rdi, rax        ; s
.text:000000000000C867                 call    _fputs_unlocked
.text:000000000000C86C                 cmp     r12, 9          ; switch 10 cases
.text:000000000000C870                 ja      def_C884        ; jumptable 000000000000C884 default case
.text:000000000000C876                 lea     rdx, jpt_C884
.text:000000000000C87D                 movsxd  rax, ds:(jpt_C884 - 14C48h)[rdx+r12*4]
.text:000000000000C881                 add     rax, rdx
.text:000000000000C884                 jmp     rax             ; switch jump
.text:000000000000C884 ; ---------------------------------------------------------------------------
.text:000000000000C886                 align 10h
.text:000000000000C890
.text:000000000000C890 loc_C890:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C890                                         ; DATA XREF: .rodata:jpt_C884↓o
.text:000000000000C890                 mov     r9, [rbx+38h]   ; jumptable 000000000000C884 case 8
.text:000000000000C894                 mov     rax, [rbx+10h]
.text:000000000000C898                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000C89F                 mov     r8, [rbx+8]
.text:000000000000C8A3                 mov     edx, 5          ; category
.text:000000000000C8A8                 xor     edi, edi        ; domainname
.text:000000000000C8AA                 mov     r13, [rbx+30h]
.text:000000000000C8AE                 mov     r12, [rbx+28h]
.text:000000000000C8B2                 mov     [rsp+58h+var_48], r9
.text:000000000000C8B7                 mov     r15, [rbx+20h]
.text:000000000000C8BB                 mov     r14, [rbx+18h]
.text:000000000000C8BF                 mov     [rsp+58h+var_58], rax
.text:000000000000C8C3                 mov     [rsp+58h+var_50], r8
.text:000000000000C8C8                 mov     rbx, [rbx]
.text:000000000000C8CB                 call    _dcgettext
.text:000000000000C8D0                 sub     rsp, 8
.text:000000000000C8D4
.text:000000000000C8D4 loc_C8D4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:000000000000C8D4                 mov     r9, [rsp+60h+var_48]
.text:000000000000C8D9                 mov     rdx, rax
.text:000000000000C8DC                 mov     rcx, rbx
.text:000000000000C8DF                 mov     esi, 1
.text:000000000000C8E4                 mov     rdi, rbp
.text:000000000000C8E7                 xor     eax, eax
.text:000000000000C8E9                 push    r9
.text:000000000000C8EB                 push    r13
.text:000000000000C8ED                 push    r12
.text:000000000000C8EF                 push    r15
.text:000000000000C8F1                 push    r14
.text:000000000000C8F3                 mov     r9, [rsp+88h+var_58]
.text:000000000000C8F8                 mov     r8, [rsp+88h+var_50]
.text:000000000000C8FD                 call    ___fprintf_chk
.text:000000000000C902                 add     rsp, 30h
.text:000000000000C906
.text:000000000000C906 loc_C906:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C906                                         ; DATA XREF: .rodata:jpt_C884↓o
.text:000000000000C906                 add     rsp, 28h        ; jumptable 000000000000C884 case 0
.text:000000000000C90A                 pop     rbx
.text:000000000000C90B                 pop     rbp
.text:000000000000C90C                 pop     r12
.text:000000000000C90E                 pop     r13
.text:000000000000C910                 pop     r14
.text:000000000000C912                 pop     r15
.text:000000000000C914                 retn
.text:000000000000C914 ; ---------------------------------------------------------------------------
.text:000000000000C915                 align 8
.text:000000000000C918
.text:000000000000C918 loc_C918:                               ; CODE XREF: version_etc_arn+1A↑j
.text:000000000000C918                 mov     r8, rcx
.text:000000000000C91B                 mov     rcx, rdx
.text:000000000000C91E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:000000000000C925                 mov     esi, 1
.text:000000000000C92A                 xor     eax, eax
.text:000000000000C92C                 call    ___fprintf_chk
.text:000000000000C931                 jmp     loc_C81C
.text:000000000000C931 ; ---------------------------------------------------------------------------
.text:000000000000C936                 align 20h
.text:000000000000C940
.text:000000000000C940 loc_C940:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C940                                         ; DATA XREF: .rodata:jpt_C884↓o
.text:000000000000C940                 mov     r10, [rbx+40h]  ; jumptable 000000000000C884 case 9
.text:000000000000C944                 mov     r9, [rbx+38h]
.text:000000000000C948                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000C94F                 mov     rax, [rbx+10h]
.text:000000000000C953                 mov     r8, [rbx+8]
.text:000000000000C957                 mov     edx, 5          ; category
.text:000000000000C95C                 mov     r13, [rbx+30h]
.text:000000000000C960                 mov     r12, [rbx+28h]
.text:000000000000C964                 mov     r15, [rbx+20h]
.text:000000000000C968                 mov     r14, [rbx+18h]
.text:000000000000C96C                 mov     rbx, [rbx]
.text:000000000000C96F                 mov     [rsp+58h+var_40], r10
.text:000000000000C974                 mov     [rsp+58h+var_48], r9
.text:000000000000C979                 mov     [rsp+58h+var_58], rax
.text:000000000000C97D                 mov     [rsp+58h+var_50], r8
.text:000000000000C982
.text:000000000000C982 loc_C982:                               ; CODE XREF: version_etc_arn+412↓j
.text:000000000000C982                 xor     edi, edi        ; domainname
.text:000000000000C984                 call    _dcgettext
.text:000000000000C989                 mov     r10, [rsp+58h+var_40]
.text:000000000000C98E                 push    r10
.text:000000000000C990                 jmp     loc_C8D4
.text:000000000000C990 ; ---------------------------------------------------------------------------
.text:000000000000C995                 align 8
.text:000000000000C998
.text:000000000000C998 loc_C998:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C998                                         ; DATA XREF: .rodata:jpt_C884↓o
.text:000000000000C998                 mov     rbx, [rbx]      ; jumptable 000000000000C884 case 1
.text:000000000000C99B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:000000000000C9A2                 mov     edx, 5          ; category
.text:000000000000C9A7                 xor     edi, edi        ; domainname
.text:000000000000C9A9                 call    _dcgettext
.text:000000000000C9AE                 add     rsp, 28h
.text:000000000000C9B2                 mov     rcx, rbx
.text:000000000000C9B5                 mov     rdi, rbp
.text:000000000000C9B8                 pop     rbx
.text:000000000000C9B9                 pop     rbp
.text:000000000000C9BA                 pop     r12
.text:000000000000C9BC                 pop     r13
.text:000000000000C9BE                 pop     r14
.text:000000000000C9C0                 pop     r15
.text:000000000000C9C2                 mov     rdx, rax
.text:000000000000C9C5                 mov     esi, 1
.text:000000000000C9CA                 xor     eax, eax
.text:000000000000C9CC                 jmp     ___fprintf_chk
.text:000000000000C9CC ; ---------------------------------------------------------------------------
.text:000000000000C9D1                 align 8
.text:000000000000C9D8
.text:000000000000C9D8 loc_C9D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000C9D8                                         ; DATA XREF: .rodata:jpt_C884↓o
.text:000000000000C9D8                 mov     r12, [rbx+8]    ; jumptable 000000000000C884 case 2
.text:000000000000C9DC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:000000000000C9E3                 mov     rbx, [rbx]
.text:000000000000C9E6                 mov     edx, 5          ; category
.text:000000000000C9EB                 xor     edi, edi        ; domainname
.text:000000000000C9ED                 call    _dcgettext
.text:000000000000C9F2                 add     rsp, 28h
.text:000000000000C9F6                 mov     r8, r12
.text:000000000000C9F9                 mov     rcx, rbx
.text:000000000000C9FC                 mov     rdi, rbp
.text:000000000000C9FF                 mov     rdx, rax
.text:000000000000CA02                 mov     esi, 1
.text:000000000000CA07                 pop     rbx
.text:000000000000CA08                 pop     rbp
.text:000000000000CA09                 pop     r12
.text:000000000000CA0B                 pop     r13
.text:000000000000CA0D                 pop     r14
.text:000000000000CA0F                 pop     r15
.text:000000000000CA11                 xor     eax, eax
.text:000000000000CA13                 jmp     ___fprintf_chk
.text:000000000000CA13 ; ---------------------------------------------------------------------------
.text:000000000000CA18                 align 20h
.text:000000000000CA20
.text:000000000000CA20 loc_CA20:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000CA20                                         ; DATA XREF: .rodata:jpt_C884↓o
.text:000000000000CA20                 mov     r13, [rbx+10h]  ; jumptable 000000000000C884 case 3
.text:000000000000CA24                 mov     r12, [rbx+8]
.text:000000000000CA28                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000CA2F                 mov     rbx, [rbx]
.text:000000000000CA32                 mov     edx, 5          ; category
.text:000000000000CA37                 xor     edi, edi        ; domainname
.text:000000000000CA39                 call    _dcgettext
.text:000000000000CA3E                 add     rsp, 28h
.text:000000000000CA42                 mov     r9, r13
.text:000000000000CA45                 mov     r8, r12
.text:000000000000CA48                 mov     rcx, rbx
.text:000000000000CA4B                 mov     rdi, rbp
.text:000000000000CA4E                 mov     rdx, rax
.text:000000000000CA51                 pop     rbx
.text:000000000000CA52                 pop     rbp
.text:000000000000CA53                 pop     r12
.text:000000000000CA55                 pop     r13
.text:000000000000CA57                 pop     r14
.text:000000000000CA59                 pop     r15
.text:000000000000CA5B                 mov     esi, 1
.text:000000000000CA60                 xor     eax, eax
.text:000000000000CA62                 jmp     ___fprintf_chk
.text:000000000000CA62 ; ---------------------------------------------------------------------------
.text:000000000000CA67                 align 10h
.text:000000000000CA70
.text:000000000000CA70 loc_CA70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000CA70                                         ; DATA XREF: .rodata:jpt_C884↓o
.text:000000000000CA70                 lea     rsi, aWrittenBySSSAn ; jumptable 000000000000C884 case 4
.text:000000000000CA77                 mov     edx, 5          ; category
.text:000000000000CA7C                 xor     edi, edi        ; domainname
.text:000000000000CA7E                 mov     r14, [rbx+18h]
.text:000000000000CA82                 mov     r13, [rbx+10h]
.text:000000000000CA86                 mov     r12, [rbx+8]
.text:000000000000CA8A                 mov     rbx, [rbx]
.text:000000000000CA8D                 call    _dcgettext
.text:000000000000CA92                 sub     rsp, 8
.text:000000000000CA96
.text:000000000000CA96 loc_CA96:                               ; CODE XREF: version_etc_arn+310↓j
.text:000000000000CA96                 push    r14
.text:000000000000CA98                 mov     rdx, rax
.text:000000000000CA9B                 mov     r9, r13
.text:000000000000CA9E                 mov     r8, r12
.text:000000000000CAA1                 mov     rcx, rbx
.text:000000000000CAA4                 mov     rdi, rbp
.text:000000000000CAA7                 mov     esi, 1
.text:000000000000CAAC                 xor     eax, eax
.text:000000000000CAAE                 call    ___fprintf_chk
.text:000000000000CAB3                 pop     rax
.text:000000000000CAB4                 pop     rdx
.text:000000000000CAB5                 add     rsp, 28h
.text:000000000000CAB9                 pop     rbx
.text:000000000000CABA                 pop     rbp
.text:000000000000CABB                 pop     r12
.text:000000000000CABD                 pop     r13
.text:000000000000CABF                 pop     r14
.text:000000000000CAC1                 pop     r15
.text:000000000000CAC3                 retn
.text:000000000000CAC3 ; ---------------------------------------------------------------------------
.text:000000000000CAC4                 align 8
.text:000000000000CAC8
.text:000000000000CAC8 loc_CAC8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000CAC8                                         ; DATA XREF: .rodata:jpt_C884↓o
.text:000000000000CAC8                 mov     r15, [rbx+20h]  ; jumptable 000000000000C884 case 5
.text:000000000000CACC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:000000000000CAD3                 mov     edx, 5          ; category
.text:000000000000CAD8                 xor     edi, edi        ; domainname
.text:000000000000CADA                 mov     r14, [rbx+18h]
.text:000000000000CADE                 mov     r13, [rbx+10h]
.text:000000000000CAE2                 mov     r12, [rbx+8]
.text:000000000000CAE6                 mov     rbx, [rbx]
.text:000000000000CAE9                 call    _dcgettext
.text:000000000000CAEE                 push    r15
.text:000000000000CAF0                 jmp     short loc_CA96
.text:000000000000CAF0 ; ---------------------------------------------------------------------------
.text:000000000000CAF2                 align 8
.text:000000000000CAF8
.text:000000000000CAF8 loc_CAF8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000CAF8                                         ; DATA XREF: .rodata:jpt_C884↓o
.text:000000000000CAF8                 mov     r8, [rbx+8]     ; jumptable 000000000000C884 case 6
.text:000000000000CAFC                 mov     r12, [rbx+28h]
.text:000000000000CB00                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:000000000000CB07                 mov     r15, [rbx+20h]
.text:000000000000CB0B                 mov     r14, [rbx+18h]
.text:000000000000CB0F                 mov     edx, 5          ; category
.text:000000000000CB14                 mov     r13, [rbx+10h]
.text:000000000000CB18                 xor     edi, edi        ; domainname
.text:000000000000CB1A                 mov     rbx, [rbx]
.text:000000000000CB1D                 mov     [rsp+58h+var_58], r8
.text:000000000000CB21                 call    _dcgettext
.text:000000000000CB26                 sub     rsp, 8
.text:000000000000CB2A                 mov     r9, r13
.text:000000000000CB2D                 push    r12
.text:000000000000CB2F                 push    r15
.text:000000000000CB31                 push    r14
.text:000000000000CB33
.text:000000000000CB33 loc_CB33:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:000000000000CB33                 mov     r8, [rsp+78h+var_58]
.text:000000000000CB38                 mov     rcx, rbx
.text:000000000000CB3B                 mov     rdx, rax
.text:000000000000CB3E                 mov     rdi, rbp
.text:000000000000CB41                 mov     esi, 1
.text:000000000000CB46                 xor     eax, eax
.text:000000000000CB48                 call    ___fprintf_chk
.text:000000000000CB4D                 add     rsp, 20h
.text:000000000000CB51                 add     rsp, 28h
.text:000000000000CB55                 pop     rbx
.text:000000000000CB56                 pop     rbp
.text:000000000000CB57                 pop     r12
.text:000000000000CB59                 pop     r13
.text:000000000000CB5B                 pop     r14
.text:000000000000CB5D                 pop     r15
.text:000000000000CB5F                 retn
.text:000000000000CB60 ; ---------------------------------------------------------------------------
.text:000000000000CB60
.text:000000000000CB60 loc_CB60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000CB60                                         ; DATA XREF: .rodata:jpt_C884↓o
.text:000000000000CB60                 mov     r9, [rbx+10h]   ; jumptable 000000000000C884 case 7
.text:000000000000CB64                 mov     r13, [rbx+30h]
.text:000000000000CB68                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000CB6F                 mov     r12, [rbx+28h]
.text:000000000000CB73                 mov     r15, [rbx+20h]
.text:000000000000CB77                 mov     edx, 5          ; category
.text:000000000000CB7C                 mov     r14, [rbx+18h]
.text:000000000000CB80                 mov     r8, [rbx+8]
.text:000000000000CB84                 xor     edi, edi        ; domainname
.text:000000000000CB86                 mov     [rsp+58h+var_50], r9
.text:000000000000CB8B                 mov     rbx, [rbx]
.text:000000000000CB8E                 mov     [rsp+58h+var_58], r8
.text:000000000000CB92                 call    _dcgettext
.text:000000000000CB97                 push    r13
.text:000000000000CB99                 push    r12
.text:000000000000CB9B                 push    r15
.text:000000000000CB9D                 push    r14
.text:000000000000CB9F                 mov     r9, [rsp+78h+var_50]
.text:000000000000CBA4                 jmp     short loc_CB33
.text:000000000000CBA4 ; ---------------------------------------------------------------------------
.text:000000000000CBA6                 align 10h
.text:000000000000CBB0
.text:000000000000CBB0 def_C884:                               ; CODE XREF: version_etc_arn+90↑j
.text:000000000000CBB0                 mov     r10, [rbx+40h]  ; jumptable 000000000000C884 default case
.text:000000000000CBB4                 mov     r9, [rbx+38h]
.text:000000000000CBB8                 mov     edx, 5
.text:000000000000CBBD                 mov     rax, [rbx+10h]
.text:000000000000CBC1                 mov     r8, [rbx+8]
.text:000000000000CBC5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000CBCC                 mov     r13, [rbx+30h]
.text:000000000000CBD0                 mov     r12, [rbx+28h]
.text:000000000000CBD4                 mov     r15, [rbx+20h]
.text:000000000000CBD8                 mov     r14, [rbx+18h]
.text:000000000000CBDC                 mov     [rsp+58h+var_40], r10
.text:000000000000CBE1                 mov     [rsp+58h+var_48], r9
.text:000000000000CBE6                 mov     [rsp+58h+var_58], rax
.text:000000000000CBEA                 mov     [rsp+58h+var_50], r8
.text:000000000000CBEF                 mov     rbx, [rbx]
.text:000000000000CBF2                 jmp     loc_C982
.text:000000000000CBF2 ; } // starts at C7E0
.text:000000000000CBF2 version_etc_arn endp
.text:000000000000CBF2
.text:000000000000CBF2 ; ---------------------------------------------------------------------------
.text:000000000000CBF7                 align 20h
.text:000000000000CC00
.text:000000000000CC00 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC00
.text:000000000000CC00 ; Attributes: info_from_lumina
.text:000000000000CC00
.text:000000000000CC00 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:000000000000CC00                 public version_etc_ar
.text:000000000000CC00 version_etc_ar  proc near
.text:000000000000CC00 ; __unwind {
.text:000000000000CC00                 xor     r9d, r9d
.text:000000000000CC03                 cmp     qword ptr [r8], 0
.text:000000000000CC07                 jz      short loc_CC1B
.text:000000000000CC09                 nop     dword ptr [rax+00000000h]
.text:000000000000CC10
.text:000000000000CC10 loc_CC10:                               ; CODE XREF: version_etc_ar+19↓j
.text:000000000000CC10                 add     r9, 1
.text:000000000000CC14                 cmp     qword ptr [r8+r9*8], 0
.text:000000000000CC19                 jnz     short loc_CC10
.text:000000000000CC1B
.text:000000000000CC1B loc_CC1B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000CC1B                 jmp     version_etc_arn
.text:000000000000CC1B ; } // starts at CC00
.text:000000000000CC1B version_etc_ar  endp
.text:000000000000CC1B
.text:000000000000CC20
.text:000000000000CC20 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC20
.text:000000000000CC20 ; Attributes: info_from_lumina
.text:000000000000CC20
.text:000000000000CC20 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:000000000000CC20                 public version_etc_va
.text:000000000000CC20 version_etc_va  proc near
.text:000000000000CC20
.text:000000000000CC20 authtab         = qword ptr -68h
.text:000000000000CC20 var_10          = qword ptr -10h
.text:000000000000CC20
.text:000000000000CC20 ; __unwind {
.text:000000000000CC20                 sub     rsp, 68h
.text:000000000000CC24                 mov     r10, r8
.text:000000000000CC27                 xor     r9d, r9d
.text:000000000000CC2A                 mov     rax, fs:28h
.text:000000000000CC33                 mov     [rsp+68h+var_10], rax
.text:000000000000CC38                 xor     eax, eax
.text:000000000000CC3A                 mov     r8, rsp
.text:000000000000CC3D                 nop     dword ptr [rax]
.text:000000000000CC40
.text:000000000000CC40 loc_CC40:                               ; CODE XREF: version_etc_va+49↓j
.text:000000000000CC40                 mov     eax, [r10]
.text:000000000000CC43                 cmp     eax, 2Fh ; '/'
.text:000000000000CC46                 ja      short loc_CC8A
.text:000000000000CC48                 mov     r11d, eax
.text:000000000000CC4B                 add     r11, [r10+10h]
.text:000000000000CC4F                 add     eax, 8
.text:000000000000CC52                 mov     [r10], eax
.text:000000000000CC55
.text:000000000000CC55 loc_CC55:                               ; CODE XREF: version_etc_va+76↓j
.text:000000000000CC55                 mov     rax, [r11]
.text:000000000000CC58                 test    rax, rax
.text:000000000000CC5B                 mov     [r8+r9*8], rax
.text:000000000000CC5F                 jz      short loc_CC6B
.text:000000000000CC61                 add     r9, 1
.text:000000000000CC65                 cmp     r9, 0Ah
.text:000000000000CC69                 jnz     short loc_CC40
.text:000000000000CC6B
.text:000000000000CC6B loc_CC6B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000CC6B                 call    version_etc_arn
.text:000000000000CC70                 mov     rax, [rsp+68h+var_10]
.text:000000000000CC75                 xor     rax, fs:28h
.text:000000000000CC7E                 jnz     short loc_CC85
.text:000000000000CC80                 add     rsp, 68h
.text:000000000000CC84                 retn
.text:000000000000CC85 ; ---------------------------------------------------------------------------
.text:000000000000CC85
.text:000000000000CC85 loc_CC85:                               ; CODE XREF: version_etc_va+5E↑j
.text:000000000000CC85                 call    ___stack_chk_fail
.text:000000000000CC8A ; ---------------------------------------------------------------------------
.text:000000000000CC8A
.text:000000000000CC8A loc_CC8A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000CC8A                 mov     r11, [r10+8]
.text:000000000000CC8E                 lea     rax, [r11+8]
.text:000000000000CC92                 mov     [r10+8], rax
.text:000000000000CC96                 jmp     short loc_CC55
.text:000000000000CC96 ; } // starts at CC20
.text:000000000000CC96 version_etc_va  endp
.text:000000000000CC96
.text:000000000000CC96 ; ---------------------------------------------------------------------------
.text:000000000000CC98                 align 20h
.text:000000000000CCA0
.text:000000000000CCA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCA0
.text:000000000000CCA0 ; Attributes: info_from_lumina
.text:000000000000CCA0
.text:000000000000CCA0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:000000000000CCA0                 public version_etc
.text:000000000000CCA0 version_etc     proc near               ; CODE XREF: main+19B↑p
.text:000000000000CCA0
.text:000000000000CCA0 var_C0          = dword ptr -0C0h
.text:000000000000CCA0 var_B8          = qword ptr -0B8h
.text:000000000000CCA0 var_B0          = qword ptr -0B0h
.text:000000000000CCA0 var_A8          = byte ptr -0A8h
.text:000000000000CCA0 var_50          = qword ptr -50h
.text:000000000000CCA0 var_48          = byte ptr -48h
.text:000000000000CCA0 var_28          = qword ptr -28h
.text:000000000000CCA0 var_20          = qword ptr -20h
.text:000000000000CCA0 arg_0           = byte ptr  8
.text:000000000000CCA0
.text:000000000000CCA0 ; __unwind {
.text:000000000000CCA0                 push    rbp
.text:000000000000CCA1                 push    rbx
.text:000000000000CCA2                 mov     r10d, 20h ; ' '
.text:000000000000CCA8                 xor     r11d, r11d
.text:000000000000CCAB                 sub     rsp, 0B8h
.text:000000000000CCB2                 mov     rax, fs:28h
.text:000000000000CCBB                 mov     [rsp+0C8h+var_50], rax
.text:000000000000CCC0                 xor     eax, eax
.text:000000000000CCC2                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000CCCA                 mov     [rsp+0C8h+var_28], r8
.text:000000000000CCD2                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000CCDA                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000CCDF                 mov     [rsp+0C8h+var_20], r9
.text:000000000000CCE7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000CCEF                 mov     [rsp+0C8h+var_B8], rax
.text:000000000000CCF4                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000CCFC                 xor     r9d, r9d
.text:000000000000CCFF                 mov     [rsp+0C8h+var_B0], rax
.text:000000000000CD04                 mov     rbp, rax
.text:000000000000CD07                 nop     word ptr [rax+rax+00000000h]
.text:000000000000CD10
.text:000000000000CD10 loc_CD10:                               ; CODE XREF: version_etc+9A↓j
.text:000000000000CD10                 cmp     r10d, 2Fh ; '/'
.text:000000000000CD14                 ja      short loc_CD6C
.text:000000000000CD16                 mov     eax, r10d
.text:000000000000CD19                 mov     r11d, 1
.text:000000000000CD1F                 add     r10d, 8
.text:000000000000CD23                 add     rax, rbp
.text:000000000000CD26
.text:000000000000CD26 loc_CD26:                               ; CODE XREF: version_etc+D3↓j
.text:000000000000CD26                 mov     rax, [rax]
.text:000000000000CD29                 test    rax, rax
.text:000000000000CD2C                 mov     [r8+r9*8], rax
.text:000000000000CD30                 jz      short loc_CD3C
.text:000000000000CD32                 add     r9, 1
.text:000000000000CD36                 cmp     r9, 0Ah
.text:000000000000CD3A                 jnz     short loc_CD10
.text:000000000000CD3C
.text:000000000000CD3C loc_CD3C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000CD3C                 test    r11b, r11b
.text:000000000000CD3F                 jnz     short loc_CD65
.text:000000000000CD41
.text:000000000000CD41 loc_CD41:                               ; CODE XREF: version_etc+CA↓j
.text:000000000000CD41                 call    version_etc_arn
.text:000000000000CD46                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000CD4B                 xor     rax, fs:28h
.text:000000000000CD54                 jnz     short loc_CD60
.text:000000000000CD56                 add     rsp, 0B8h
.text:000000000000CD5D                 pop     rbx
.text:000000000000CD5E                 pop     rbp
.text:000000000000CD5F                 retn
.text:000000000000CD60 ; ---------------------------------------------------------------------------
.text:000000000000CD60
.text:000000000000CD60 loc_CD60:                               ; CODE XREF: version_etc+B4↑j
.text:000000000000CD60                 call    ___stack_chk_fail
.text:000000000000CD65 ; ---------------------------------------------------------------------------
.text:000000000000CD65
.text:000000000000CD65 loc_CD65:                               ; CODE XREF: version_etc+9F↑j
.text:000000000000CD65                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000CD6A                 jmp     short loc_CD41
.text:000000000000CD6C ; ---------------------------------------------------------------------------
.text:000000000000CD6C
.text:000000000000CD6C loc_CD6C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000CD6C                 mov     rax, rbx
.text:000000000000CD6F                 add     rbx, 8
.text:000000000000CD73                 jmp     short loc_CD26
.text:000000000000CD73 ; } // starts at CCA0
.text:000000000000CD73 version_etc     endp
.text:000000000000CD73
.text:000000000000CD73 ; ---------------------------------------------------------------------------
.text:000000000000CD75                 align 20h
.text:000000000000CD80
.text:000000000000CD80 ; =============== S U B R O U T I N E =======================================
.text:000000000000CD80
.text:000000000000CD80 ; Attributes: info_from_lumina
.text:000000000000CD80
.text:000000000000CD80 ; void __cdecl emit_bug_reporting_address()
.text:000000000000CD80                 public emit_bug_reporting_address
.text:000000000000CD80 emit_bug_reporting_address proc near
.text:000000000000CD80 ; __unwind {
.text:000000000000CD80                 push    rbx
.text:000000000000CD81                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:000000000000CD88                 mov     edx, 5          ; category
.text:000000000000CD8D                 xor     edi, edi        ; domainname
.text:000000000000CD8F                 call    _dcgettext
.text:000000000000CD94                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000CD9B                 mov     rsi, rax
.text:000000000000CD9E                 mov     edi, 1
.text:000000000000CDA3                 xor     eax, eax
.text:000000000000CDA5                 call    ___printf_chk
.text:000000000000CDAA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:000000000000CDB1                 mov     edx, 5          ; category
.text:000000000000CDB6                 xor     edi, edi        ; domainname
.text:000000000000CDB8                 call    _dcgettext
.text:000000000000CDBD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000CDC4                 lea     rdx, unk_116F2
.text:000000000000CDCB                 mov     rsi, rax
.text:000000000000CDCE                 mov     edi, 1
.text:000000000000CDD3                 xor     eax, eax
.text:000000000000CDD5                 call    ___printf_chk
.text:000000000000CDDA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000CDE1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:000000000000CDE8                 xor     edi, edi        ; domainname
.text:000000000000CDEA                 mov     edx, 5          ; category
.text:000000000000CDEF                 call    _dcgettext
.text:000000000000CDF4                 mov     rsi, rbx        ; stream
.text:000000000000CDF7                 mov     rdi, rax        ; s
.text:000000000000CDFA                 pop     rbx
.text:000000000000CDFB                 jmp     _fputs_unlocked
.text:000000000000CDFB ; } // starts at CD80
.text:000000000000CDFB emit_bug_reporting_address endp
.text:000000000000CDFB
.text:000000000000CE00
.text:000000000000CE00 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE00
.text:000000000000CE00
.text:000000000000CE00                 public xmalloc
.text:000000000000CE00 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:000000000000CE00                                         ; quotearg_alloc_mem+81↑p ...
.text:000000000000CE00 ; __unwind {
.text:000000000000CE00                 push    rbx
.text:000000000000CE01                 mov     rbx, rdi
.text:000000000000CE04                 call    _malloc
.text:000000000000CE09                 test    rax, rax
.text:000000000000CE0C                 jnz     short loc_CE13
.text:000000000000CE0E                 test    rbx, rbx
.text:000000000000CE11                 jnz     short loc_CE15
.text:000000000000CE13
.text:000000000000CE13 loc_CE13:                               ; CODE XREF: xmalloc+C↑j
.text:000000000000CE13                 pop     rbx
.text:000000000000CE14                 retn
.text:000000000000CE15 ; ---------------------------------------------------------------------------
.text:000000000000CE15
.text:000000000000CE15 loc_CE15:                               ; CODE XREF: xmalloc+11↑j
.text:000000000000CE15                 call    xalloc_die
.text:000000000000CE15 ; } // starts at CE00
.text:000000000000CE15 xmalloc         endp
.text:000000000000CE15
.text:000000000000CE15 ; ---------------------------------------------------------------------------
.text:000000000000CE1A                 align 20h
.text:000000000000CE20
.text:000000000000CE20 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE20
.text:000000000000CE20 ; Attributes: info_from_lumina
.text:000000000000CE20
.text:000000000000CE20 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:000000000000CE20                 public xnmalloc
.text:000000000000CE20 xnmalloc        proc near
.text:000000000000CE20 ; __unwind {
.text:000000000000CE20                 mov     rax, rdi
.text:000000000000CE23                 mul     rsi
.text:000000000000CE26                 mov     rdi, rax
.text:000000000000CE29                 seto    al
.text:000000000000CE2C                 test    rdi, rdi
.text:000000000000CE2F                 js      short loc_CE3B
.text:000000000000CE31                 movzx   eax, al
.text:000000000000CE34                 test    rax, rax
.text:000000000000CE37                 jnz     short loc_CE3B
.text:000000000000CE39                 jmp     short xmalloc
.text:000000000000CE3B ; ---------------------------------------------------------------------------
.text:000000000000CE3B
.text:000000000000CE3B loc_CE3B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000CE3B                                         ; xnmalloc+17↑j
.text:000000000000CE3B                 sub     rsp, 8
.text:000000000000CE3F                 call    xalloc_die
.text:000000000000CE3F ; } // starts at CE20
.text:000000000000CE3F xnmalloc        endp
.text:000000000000CE3F
.text:000000000000CE3F ; ---------------------------------------------------------------------------
.text:000000000000CE44                 align 10h
.text:000000000000CE50
.text:000000000000CE50 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE50
.text:000000000000CE50
.text:000000000000CE50                 public xcharalloc
.text:000000000000CE50 xcharalloc      proc near
.text:000000000000CE50 ; __unwind {
.text:000000000000CE50                 jmp     short xmalloc
.text:000000000000CE50 ; } // starts at CE50
.text:000000000000CE50 xcharalloc      endp
.text:000000000000CE50
.text:000000000000CE50 ; ---------------------------------------------------------------------------
.text:000000000000CE52                 align 20h
.text:000000000000CE60
.text:000000000000CE60 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE60
.text:000000000000CE60 ; Attributes: info_from_lumina
.text:000000000000CE60
.text:000000000000CE60 ; void *__fastcall xrealloc(void *p, size_t n)
.text:000000000000CE60                 public xrealloc
.text:000000000000CE60 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:000000000000CE60                                         ; quotearg_n_options+182↑p ...
.text:000000000000CE60 ; __unwind {
.text:000000000000CE60                 test    rsi, rsi
.text:000000000000CE63                 push    rbx
.text:000000000000CE64                 mov     rbx, rsi
.text:000000000000CE67                 jnz     short loc_CE6E
.text:000000000000CE69                 test    rdi, rdi
.text:000000000000CE6C                 jnz     short loc_CE88
.text:000000000000CE6E
.text:000000000000CE6E loc_CE6E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000CE6E                 mov     rsi, rbx        ; size
.text:000000000000CE71                 call    _realloc
.text:000000000000CE76                 test    rax, rax
.text:000000000000CE79                 jnz     short loc_CE80
.text:000000000000CE7B                 test    rbx, rbx
.text:000000000000CE7E                 jnz     short loc_CE91
.text:000000000000CE80
.text:000000000000CE80 loc_CE80:                               ; CODE XREF: xrealloc+19↑j
.text:000000000000CE80                 pop     rbx
.text:000000000000CE81                 retn
.text:000000000000CE81 ; ---------------------------------------------------------------------------
.text:000000000000CE82                 align 8
.text:000000000000CE88
.text:000000000000CE88 loc_CE88:                               ; CODE XREF: xrealloc+C↑j
.text:000000000000CE88                 call    _free
.text:000000000000CE8D                 xor     eax, eax
.text:000000000000CE8F                 pop     rbx
.text:000000000000CE90                 retn
.text:000000000000CE91 ; ---------------------------------------------------------------------------
.text:000000000000CE91
.text:000000000000CE91 loc_CE91:                               ; CODE XREF: xrealloc+1E↑j
.text:000000000000CE91                 call    xalloc_die
.text:000000000000CE91 ; } // starts at CE60
.text:000000000000CE91 xrealloc        endp
.text:000000000000CE91
.text:000000000000CE91 ; ---------------------------------------------------------------------------
.text:000000000000CE96                 align 20h
.text:000000000000CEA0
.text:000000000000CEA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CEA0
.text:000000000000CEA0 ; Attributes: info_from_lumina
.text:000000000000CEA0
.text:000000000000CEA0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:000000000000CEA0                 public xnrealloc
.text:000000000000CEA0 xnrealloc       proc near
.text:000000000000CEA0 ; __unwind {
.text:000000000000CEA0                 mov     rax, rsi
.text:000000000000CEA3                 mul     rdx
.text:000000000000CEA6                 mov     rsi, rax
.text:000000000000CEA9                 seto    al
.text:000000000000CEAC                 test    rsi, rsi
.text:000000000000CEAF                 js      short loc_CEBB
.text:000000000000CEB1                 movzx   eax, al
.text:000000000000CEB4                 test    rax, rax
.text:000000000000CEB7                 jnz     short loc_CEBB
.text:000000000000CEB9                 jmp     short xrealloc
.text:000000000000CEBB ; ---------------------------------------------------------------------------
.text:000000000000CEBB
.text:000000000000CEBB loc_CEBB:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000CEBB                                         ; xnrealloc+17↑j
.text:000000000000CEBB                 sub     rsp, 8
.text:000000000000CEBF                 call    xalloc_die
.text:000000000000CEBF ; } // starts at CEA0
.text:000000000000CEBF xnrealloc       endp
.text:000000000000CEBF
.text:000000000000CEBF ; ---------------------------------------------------------------------------
.text:000000000000CEC4                 align 10h
.text:000000000000CED0
.text:000000000000CED0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CED0
.text:000000000000CED0 ; Attributes: info_from_lumina
.text:000000000000CED0
.text:000000000000CED0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:000000000000CED0                 public x2nrealloc
.text:000000000000CED0 x2nrealloc      proc near
.text:000000000000CED0 ; __unwind {
.text:000000000000CED0                 test    rdi, rdi
.text:000000000000CED3                 mov     r9, rdx
.text:000000000000CED6                 mov     rcx, [rsi]
.text:000000000000CED9                 jz      short loc_CF10
.text:000000000000CEDB                 xor     edx, edx
.text:000000000000CEDD                 mov     rax, 5555555555555554h
.text:000000000000CEE7                 div     r9
.text:000000000000CEEA                 cmp     rax, rcx
.text:000000000000CEED                 jbe     short loc_CF2B
.text:000000000000CEEF                 mov     rax, rcx
.text:000000000000CEF2                 shr     rax, 1
.text:000000000000CEF5                 lea     rcx, [rax+rcx+1]
.text:000000000000CEFA
.text:000000000000CEFA loc_CEFA:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000CEFA                 mov     [rsi], rcx
.text:000000000000CEFD                 imul    rcx, r9
.text:000000000000CF01                 mov     rsi, rcx
.text:000000000000CF04                 jmp     xrealloc
.text:000000000000CF04 ; ---------------------------------------------------------------------------
.text:000000000000CF09                 align 10h
.text:000000000000CF10
.text:000000000000CF10 loc_CF10:                               ; CODE XREF: x2nrealloc+9↑j
.text:000000000000CF10                 test    rcx, rcx
.text:000000000000CF13                 jz      short loc_CF38
.text:000000000000CF15
.text:000000000000CF15 loc_CF15:                               ; CODE XREF: x2nrealloc+80↓j
.text:000000000000CF15                 mov     rax, rcx
.text:000000000000CF18                 mul     r9
.text:000000000000CF1B                 seto    dl
.text:000000000000CF1E                 test    rax, rax
.text:000000000000CF21                 movzx   edx, dl
.text:000000000000CF24                 js      short loc_CF2B
.text:000000000000CF26                 test    rdx, rdx
.text:000000000000CF29                 jz      short loc_CEFA
.text:000000000000CF2B
.text:000000000000CF2B loc_CF2B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000CF2B                                         ; x2nrealloc+54↑j
.text:000000000000CF2B                 sub     rsp, 8
.text:000000000000CF2F                 call    xalloc_die
.text:000000000000CF2F ; ---------------------------------------------------------------------------
.text:000000000000CF34                 align 8
.text:000000000000CF38
.text:000000000000CF38 loc_CF38:                               ; CODE XREF: x2nrealloc+43↑j
.text:000000000000CF38                 xor     edx, edx
.text:000000000000CF3A                 mov     eax, 80h
.text:000000000000CF3F                 xor     r8d, r8d
.text:000000000000CF42                 div     r9
.text:000000000000CF45                 test    rax, rax
.text:000000000000CF48                 setz    r8b
.text:000000000000CF4C                 lea     rcx, [r8+rax]
.text:000000000000CF50                 jmp     short loc_CF15
.text:000000000000CF50 ; } // starts at CED0
.text:000000000000CF50 x2nrealloc      endp
.text:000000000000CF50
.text:000000000000CF50 ; ---------------------------------------------------------------------------
.text:000000000000CF52                 align 20h
.text:000000000000CF60
.text:000000000000CF60 ; =============== S U B R O U T I N E =======================================
.text:000000000000CF60
.text:000000000000CF60 ; Attributes: info_from_lumina
.text:000000000000CF60
.text:000000000000CF60 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:000000000000CF60                 public x2realloc
.text:000000000000CF60 x2realloc       proc near
.text:000000000000CF60 ; __unwind {
.text:000000000000CF60                 test    rdi, rdi
.text:000000000000CF63                 mov     rax, [rsi]
.text:000000000000CF66                 jz      short loc_CF90
.text:000000000000CF68                 mov     rdx, 5555555555555553h
.text:000000000000CF72                 cmp     rax, rdx
.text:000000000000CF75                 ja      short loc_CFA1
.text:000000000000CF77                 mov     rdx, rax
.text:000000000000CF7A                 shr     rdx, 1
.text:000000000000CF7D                 lea     rax, [rdx+rax+1]
.text:000000000000CF82
.text:000000000000CF82 loc_CF82:                               ; CODE XREF: x2realloc+3F↓j
.text:000000000000CF82                 mov     [rsi], rax
.text:000000000000CF85                 mov     rsi, rax
.text:000000000000CF88                 jmp     xrealloc
.text:000000000000CF88 ; ---------------------------------------------------------------------------
.text:000000000000CF8D                 align 10h
.text:000000000000CF90
.text:000000000000CF90 loc_CF90:                               ; CODE XREF: x2realloc+6↑j
.text:000000000000CF90                 test    rax, rax
.text:000000000000CF93                 mov     edx, 80h
.text:000000000000CF98                 cmovz   rax, rdx
.text:000000000000CF9C                 test    rax, rax
.text:000000000000CF9F                 jns     short loc_CF82
.text:000000000000CFA1
.text:000000000000CFA1 loc_CFA1:                               ; CODE XREF: x2realloc+15↑j
.text:000000000000CFA1                 sub     rsp, 8
.text:000000000000CFA5                 call    xalloc_die
.text:000000000000CFA5 ; } // starts at CF60
.text:000000000000CFA5 x2realloc       endp
.text:000000000000CFA5
.text:000000000000CFA5 ; ---------------------------------------------------------------------------
.text:000000000000CFAA                 align 10h
.text:000000000000CFB0
.text:000000000000CFB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CFB0
.text:000000000000CFB0
.text:000000000000CFB0 ; __int64 __fastcall xzalloc(size_t n)
.text:000000000000CFB0                 public xzalloc
.text:000000000000CFB0 xzalloc         proc near
.text:000000000000CFB0 ; __unwind {
.text:000000000000CFB0                 push    rbx
.text:000000000000CFB1                 mov     rbx, rdi
.text:000000000000CFB4                 call    xmalloc
.text:000000000000CFB9                 mov     rdx, rbx        ; n
.text:000000000000CFBC                 xor     esi, esi        ; c
.text:000000000000CFBE                 mov     rdi, rax        ; s
.text:000000000000CFC1                 pop     rbx
.text:000000000000CFC2                 jmp     _memset
.text:000000000000CFC2 ; } // starts at CFB0
.text:000000000000CFC2 xzalloc         endp
.text:000000000000CFC2
.text:000000000000CFC2 ; ---------------------------------------------------------------------------
.text:000000000000CFC7                 align 10h
.text:000000000000CFD0
.text:000000000000CFD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CFD0
.text:000000000000CFD0 ; Attributes: info_from_lumina
.text:000000000000CFD0
.text:000000000000CFD0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:000000000000CFD0                 public xcalloc
.text:000000000000CFD0 xcalloc         proc near
.text:000000000000CFD0 ; __unwind {
.text:000000000000CFD0                 mov     rax, rdi
.text:000000000000CFD3                 sub     rsp, 8
.text:000000000000CFD7                 mul     rsi
.text:000000000000CFDA                 seto    dl
.text:000000000000CFDD                 test    rax, rax
.text:000000000000CFE0                 js      short loc_CFF9
.text:000000000000CFE2                 movzx   edx, dl
.text:000000000000CFE5                 test    rdx, rdx
.text:000000000000CFE8                 jnz     short loc_CFF9
.text:000000000000CFEA                 call    _calloc
.text:000000000000CFEF                 test    rax, rax
.text:000000000000CFF2                 jz      short loc_CFF9
.text:000000000000CFF4                 add     rsp, 8
.text:000000000000CFF8                 retn
.text:000000000000CFF9 ; ---------------------------------------------------------------------------
.text:000000000000CFF9
.text:000000000000CFF9 loc_CFF9:                               ; CODE XREF: xcalloc+10↑j
.text:000000000000CFF9                                         ; xcalloc+18↑j ...
.text:000000000000CFF9                 call    xalloc_die
.text:000000000000CFF9 ; } // starts at CFD0
.text:000000000000CFF9 xcalloc         endp
.text:000000000000CFF9
.text:000000000000CFF9 ; ---------------------------------------------------------------------------
.text:000000000000CFFE                 align 20h
.text:000000000000D000
.text:000000000000D000 ; =============== S U B R O U T I N E =======================================
.text:000000000000D000
.text:000000000000D000 ; Attributes: info_from_lumina
.text:000000000000D000
.text:000000000000D000 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:000000000000D000                 public xmemdup
.text:000000000000D000 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:000000000000D000                                         ; xstrdup+11↓j
.text:000000000000D000 ; __unwind {
.text:000000000000D000                 push    rbp
.text:000000000000D001                 push    rbx
.text:000000000000D002                 mov     rbp, rdi
.text:000000000000D005                 mov     rdi, rsi
.text:000000000000D008                 mov     rbx, rsi
.text:000000000000D00B                 sub     rsp, 8
.text:000000000000D00F                 call    xmalloc
.text:000000000000D014                 add     rsp, 8
.text:000000000000D018                 mov     rdx, rbx        ; n
.text:000000000000D01B                 mov     rsi, rbp        ; src
.text:000000000000D01E                 pop     rbx
.text:000000000000D01F                 pop     rbp
.text:000000000000D020                 mov     rdi, rax        ; dest
.text:000000000000D023                 jmp     _memcpy
.text:000000000000D023 ; } // starts at D000
.text:000000000000D023 xmemdup         endp
.text:000000000000D023
.text:000000000000D023 ; ---------------------------------------------------------------------------
.text:000000000000D028                 align 10h
.text:000000000000D030
.text:000000000000D030 ; =============== S U B R O U T I N E =======================================
.text:000000000000D030
.text:000000000000D030
.text:000000000000D030 ; __int64 __fastcall xstrdup(void *src)
.text:000000000000D030                 public xstrdup
.text:000000000000D030 xstrdup         proc near
.text:000000000000D030 ; __unwind {
.text:000000000000D030                 push    rbx
.text:000000000000D031                 mov     rbx, rdi
.text:000000000000D034                 call    _strlen
.text:000000000000D039                 mov     rdi, rbx        ; src
.text:000000000000D03C                 lea     rsi, [rax+1]    ; n
.text:000000000000D040                 pop     rbx
.text:000000000000D041                 jmp     short xmemdup
.text:000000000000D041 ; } // starts at D030
.text:000000000000D041 xstrdup         endp
.text:000000000000D041
.text:000000000000D041 ; ---------------------------------------------------------------------------
.text:000000000000D043                 align 10h
.text:000000000000D050
.text:000000000000D050 ; =============== S U B R O U T I N E =======================================
.text:000000000000D050
.text:000000000000D050 ; Attributes: noreturn info_from_lumina
.text:000000000000D050
.text:000000000000D050 ; void __cdecl xalloc_die()
.text:000000000000D050                 public xalloc_die
.text:000000000000D050 xalloc_die      proc near               ; CODE XREF: main+1F4↑p
.text:000000000000D050                                         ; quotearg_n_options:loc_BF96↑p ...
.text:000000000000D050 ; __unwind {
.text:000000000000D050                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:000000000000D057                 sub     rsp, 8
.text:000000000000D05B                 mov     edx, 5          ; category
.text:000000000000D060                 xor     edi, edi        ; domainname
.text:000000000000D062                 call    _dcgettext
.text:000000000000D067                 mov     edi, cs:exit_failure ; status
.text:000000000000D06D                 lea     rdx, aS_0+2     ; format
.text:000000000000D074                 mov     rcx, rax
.text:000000000000D077                 xor     esi, esi        ; errnum
.text:000000000000D079                 xor     eax, eax
.text:000000000000D07B                 call    _error
.text:000000000000D080                 call    _abort
.text:000000000000D080 ; } // starts at D050
.text:000000000000D080 xalloc_die      endp
.text:000000000000D080
.text:000000000000D080 ; ---------------------------------------------------------------------------
.text:000000000000D085                 align 10h
.text:000000000000D090
.text:000000000000D090 ; =============== S U B R O U T I N E =======================================
.text:000000000000D090
.text:000000000000D090 ; Attributes: info_from_lumina
.text:000000000000D090
.text:000000000000D090 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000D090                 public rpl_fclose
.text:000000000000D090 rpl_fclose      proc near               ; CODE XREF: main+4FF↑p
.text:000000000000D090                                         ; close_stream+15↓p
.text:000000000000D090 ; __unwind {
.text:000000000000D090                 push    r12
.text:000000000000D092                 push    rbp
.text:000000000000D093                 push    rbx
.text:000000000000D094                 mov     rbx, rdi
.text:000000000000D097                 call    _fileno
.text:000000000000D09C                 test    eax, eax
.text:000000000000D09E                 mov     rdi, rbx        ; fp
.text:000000000000D0A1                 js      short loc_D0F7
.text:000000000000D0A3                 call    ___freading
.text:000000000000D0A8                 test    eax, eax
.text:000000000000D0AA                 jnz     short loc_D0D8
.text:000000000000D0AC
.text:000000000000D0AC loc_D0AC:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000D0AC                 mov     rdi, rbx        ; stream
.text:000000000000D0AF                 call    rpl_fflush
.text:000000000000D0B4                 test    eax, eax
.text:000000000000D0B6                 jz      short loc_D0F4
.text:000000000000D0B8                 call    ___errno_location
.text:000000000000D0BD                 mov     r12d, [rax]
.text:000000000000D0C0                 mov     rdi, rbx        ; stream
.text:000000000000D0C3                 mov     rbp, rax
.text:000000000000D0C6                 call    _fclose
.text:000000000000D0CB                 test    r12d, r12d
.text:000000000000D0CE                 jnz     short loc_D100
.text:000000000000D0D0
.text:000000000000D0D0 loc_D0D0:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000D0D0                 pop     rbx
.text:000000000000D0D1                 pop     rbp
.text:000000000000D0D2                 pop     r12
.text:000000000000D0D4                 retn
.text:000000000000D0D4 ; ---------------------------------------------------------------------------
.text:000000000000D0D5                 align 8
.text:000000000000D0D8
.text:000000000000D0D8 loc_D0D8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000D0D8                 mov     rdi, rbx        ; stream
.text:000000000000D0DB                 call    _fileno
.text:000000000000D0E0                 xor     esi, esi        ; offset
.text:000000000000D0E2                 mov     edx, 1          ; whence
.text:000000000000D0E7                 mov     edi, eax        ; fd
.text:000000000000D0E9                 call    _lseek
.text:000000000000D0EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D0F2                 jnz     short loc_D0AC
.text:000000000000D0F4
.text:000000000000D0F4 loc_D0F4:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000D0F4                 mov     rdi, rbx        ; stream
.text:000000000000D0F7
.text:000000000000D0F7 loc_D0F7:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000D0F7                 pop     rbx
.text:000000000000D0F8                 pop     rbp
.text:000000000000D0F9                 pop     r12
.text:000000000000D0FB                 jmp     _fclose
.text:000000000000D100 ; ---------------------------------------------------------------------------
.text:000000000000D100
.text:000000000000D100 loc_D100:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000D100                 mov     [rbp+0], r12d
.text:000000000000D104                 mov     eax, 0FFFFFFFFh
.text:000000000000D109                 jmp     short loc_D0D0
.text:000000000000D109 ; } // starts at D090
.text:000000000000D109 rpl_fclose      endp
.text:000000000000D109
.text:000000000000D109 ; ---------------------------------------------------------------------------
.text:000000000000D10B                 align 10h
.text:000000000000D110
.text:000000000000D110 ; =============== S U B R O U T I N E =======================================
.text:000000000000D110
.text:000000000000D110 ; Attributes: info_from_lumina
.text:000000000000D110
.text:000000000000D110 ; int __fastcall rpl_fflush(FILE *stream)
.text:000000000000D110                 public rpl_fflush
.text:000000000000D110 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:000000000000D110 ; __unwind {
.text:000000000000D110                 test    rdi, rdi
.text:000000000000D113                 push    rbx
.text:000000000000D114                 mov     rbx, rdi
.text:000000000000D117                 jz      short loc_D12A
.text:000000000000D119                 call    ___freading
.text:000000000000D11E                 test    eax, eax
.text:000000000000D120                 jz      short loc_D12A
.text:000000000000D122                 test    dword ptr [rbx], 100h
.text:000000000000D128                 jnz     short loc_D138
.text:000000000000D12A
.text:000000000000D12A loc_D12A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000D12A                                         ; rpl_fflush+10↑j
.text:000000000000D12A                 mov     rdi, rbx        ; stream
.text:000000000000D12D                 pop     rbx
.text:000000000000D12E                 jmp     _fflush
.text:000000000000D12E ; ---------------------------------------------------------------------------
.text:000000000000D133                 align 8
.text:000000000000D138
.text:000000000000D138 loc_D138:                               ; CODE XREF: rpl_fflush+18↑j
.text:000000000000D138                 mov     rdi, rbx
.text:000000000000D13B                 mov     edx, 1
.text:000000000000D140                 xor     esi, esi
.text:000000000000D142                 call    rpl_fseeko
.text:000000000000D147                 mov     rdi, rbx        ; stream
.text:000000000000D14A                 pop     rbx
.text:000000000000D14B                 jmp     _fflush
.text:000000000000D14B ; } // starts at D110
.text:000000000000D14B rpl_fflush      endp
.text:000000000000D14B
.text:000000000000D150
.text:000000000000D150 ; =============== S U B R O U T I N E =======================================
.text:000000000000D150
.text:000000000000D150 ; Attributes: info_from_lumina
.text:000000000000D150
.text:000000000000D150 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:000000000000D150                 public rpl_fseeko
.text:000000000000D150 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:000000000000D150 ; __unwind {
.text:000000000000D150                 mov     rax, [rdi+8]
.text:000000000000D154                 cmp     [rdi+10h], rax
.text:000000000000D158                 jz      short loc_D160
.text:000000000000D15A
.text:000000000000D15A loc_D15A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000D15A                                         ; rpl_fseeko+1F↓j
.text:000000000000D15A                 jmp     _fseeko
.text:000000000000D15A ; ---------------------------------------------------------------------------
.text:000000000000D15F                 align 20h
.text:000000000000D160
.text:000000000000D160 loc_D160:                               ; CODE XREF: rpl_fseeko+8↑j
.text:000000000000D160                 mov     rax, [rdi+20h]
.text:000000000000D164                 cmp     [rdi+28h], rax
.text:000000000000D168                 jnz     short loc_D15A
.text:000000000000D16A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000D16F                 jnz     short loc_D15A
.text:000000000000D171                 push    r12
.text:000000000000D173                 push    rbp
.text:000000000000D174                 mov     r12d, edx
.text:000000000000D177                 push    rbx
.text:000000000000D178                 mov     rbp, rsi
.text:000000000000D17B                 mov     rbx, rdi
.text:000000000000D17E                 call    _fileno
.text:000000000000D183                 mov     edx, r12d       ; whence
.text:000000000000D186                 mov     rsi, rbp        ; offset
.text:000000000000D189                 mov     edi, eax        ; fd
.text:000000000000D18B                 call    _lseek
.text:000000000000D190                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D194                 jz      short loc_D1A2
.text:000000000000D196                 and     dword ptr [rbx], 0FFFFFFEFh
.text:000000000000D199                 mov     [rbx+90h], rax
.text:000000000000D1A0                 xor     eax, eax
.text:000000000000D1A2
.text:000000000000D1A2 loc_D1A2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000D1A2                 pop     rbx
.text:000000000000D1A3                 pop     rbp
.text:000000000000D1A4                 pop     r12
.text:000000000000D1A6                 retn
.text:000000000000D1A6 ; } // starts at D150
.text:000000000000D1A6 rpl_fseeko      endp
.text:000000000000D1A6
.text:000000000000D1A6 ; ---------------------------------------------------------------------------
.text:000000000000D1A7                 align 10h
.text:000000000000D1B0
.text:000000000000D1B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D1B0
.text:000000000000D1B0 ; Attributes: info_from_lumina
.text:000000000000D1B0
.text:000000000000D1B0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:000000000000D1B0                 public rpl_mbrtowc
.text:000000000000D1B0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:000000000000D1B0
.text:000000000000D1B0 pwc             = dword ptr -34h
.text:000000000000D1B0 var_30          = qword ptr -30h
.text:000000000000D1B0
.text:000000000000D1B0 ; __unwind {
.text:000000000000D1B0                 push    r13
.text:000000000000D1B2                 push    r12
.text:000000000000D1B4                 mov     r13, rsi
.text:000000000000D1B7                 push    rbp
.text:000000000000D1B8                 push    rbx
.text:000000000000D1B9                 mov     rbx, rdi
.text:000000000000D1BC                 mov     r12, rdx
.text:000000000000D1BF                 sub     rsp, 18h
.text:000000000000D1C3                 mov     rax, fs:28h
.text:000000000000D1CC                 mov     [rsp+38h+var_30], rax
.text:000000000000D1D1                 xor     eax, eax
.text:000000000000D1D3                 lea     rax, [rsp+38h+pwc]
.text:000000000000D1D8                 test    rdi, rdi
.text:000000000000D1DB                 cmovz   rbx, rax
.text:000000000000D1DF                 mov     rdi, rbx        ; pwc
.text:000000000000D1E2                 call    _mbrtowc
.text:000000000000D1E7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000D1EB                 mov     rbp, rax
.text:000000000000D1EE                 jbe     short loc_D210
.text:000000000000D1F0                 test    r12, r12
.text:000000000000D1F3                 jz      short loc_D210
.text:000000000000D1F5                 xor     edi, edi
.text:000000000000D1F7                 call    hard_locale
.text:000000000000D1FC                 test    al, al
.text:000000000000D1FE                 jnz     short loc_D210
.text:000000000000D200                 movzx   eax, byte ptr [r13+0]
.text:000000000000D205                 mov     ebp, 1
.text:000000000000D20A                 mov     [rbx], eax
.text:000000000000D20C                 nop     dword ptr [rax+00h]
.text:000000000000D210
.text:000000000000D210 loc_D210:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:000000000000D210                                         ; rpl_mbrtowc+43↑j ...
.text:000000000000D210                 mov     rdx, [rsp+38h+var_30]
.text:000000000000D215                 xor     rdx, fs:28h
.text:000000000000D21E                 mov     rax, rbp
.text:000000000000D221                 jnz     short loc_D22E
.text:000000000000D223                 add     rsp, 18h
.text:000000000000D227                 pop     rbx
.text:000000000000D228                 pop     rbp
.text:000000000000D229                 pop     r12
.text:000000000000D22B                 pop     r13
.text:000000000000D22D                 retn
.text:000000000000D22E ; ---------------------------------------------------------------------------
.text:000000000000D22E
.text:000000000000D22E loc_D22E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000D22E                 call    ___stack_chk_fail
.text:000000000000D22E ; } // starts at D1B0
.text:000000000000D22E rpl_mbrtowc     endp
.text:000000000000D22E
.text:000000000000D22E ; ---------------------------------------------------------------------------
.text:000000000000D233                 align 20h
.text:000000000000D240
.text:000000000000D240 ; =============== S U B R O U T I N E =======================================
.text:000000000000D240
.text:000000000000D240 ; Attributes: info_from_lumina
.text:000000000000D240
.text:000000000000D240 ; int __fastcall setenv_TZ(const char *tz)
.text:000000000000D240 setenv_TZ       proc near               ; CODE XREF: revert_tz:loc_D2C4↓p
.text:000000000000D240                                         ; set_tz:loc_D515↓p
.text:000000000000D240 ; __unwind {
.text:000000000000D240                 test    rdi, rdi
.text:000000000000D243                 jz      short loc_D260
.text:000000000000D245                 mov     rsi, rdi        ; value
.text:000000000000D248                 lea     rdi, name       ; "TZ"
.text:000000000000D24F                 mov     edx, 1          ; replace
.text:000000000000D254                 jmp     _setenv
.text:000000000000D254 ; ---------------------------------------------------------------------------
.text:000000000000D259                 align 20h
.text:000000000000D260
.text:000000000000D260 loc_D260:                               ; CODE XREF: setenv_TZ+3↑j
.text:000000000000D260                 lea     rdi, name       ; "TZ"
.text:000000000000D267                 jmp     _unsetenv
.text:000000000000D267 ; } // starts at D240
.text:000000000000D267 setenv_TZ       endp
.text:000000000000D267
.text:000000000000D267 ; ---------------------------------------------------------------------------
.text:000000000000D26C                 align 10h
.text:000000000000D270
.text:000000000000D270 ; =============== S U B R O U T I N E =======================================
.text:000000000000D270
.text:000000000000D270 ; Attributes: info_from_lumina
.text:000000000000D270
.text:000000000000D270 ; void __fastcall tzfree_0(timezone_t tz)
.text:000000000000D270 tzfree_0        proc near               ; CODE XREF: revert_tz+36↓p
.text:000000000000D270                                         ; set_tz+67↓p ...
.text:000000000000D270 ; __unwind {
.text:000000000000D270                 test    rdi, rdi
.text:000000000000D273                 jz      short locret_D298
.text:000000000000D275                 push    rbx
.text:000000000000D276                 db      2Eh
.text:000000000000D276                 nop     word ptr [rax+rax+00000000h]
.text:000000000000D280
.text:000000000000D280 loc_D280:                               ; CODE XREF: tzfree_0+1E↓j
.text:000000000000D280                 mov     rbx, [rdi]
.text:000000000000D283                 call    _free
.text:000000000000D288                 test    rbx, rbx
.text:000000000000D28B                 mov     rdi, rbx
.text:000000000000D28E                 jnz     short loc_D280
.text:000000000000D290                 pop     rbx
.text:000000000000D291                 retn
.text:000000000000D291 ; ---------------------------------------------------------------------------
.text:000000000000D292                 align 8
.text:000000000000D298
.text:000000000000D298 locret_D298:                            ; CODE XREF: tzfree_0+3↑j
.text:000000000000D298                 rep retn
.text:000000000000D298 ; } // starts at D270
.text:000000000000D298 tzfree_0        endp
.text:000000000000D298
.text:000000000000D298 ; ---------------------------------------------------------------------------
.text:000000000000D29A                 align 20h
.text:000000000000D2A0
.text:000000000000D2A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D2A0
.text:000000000000D2A0 ; Attributes: info_from_lumina
.text:000000000000D2A0
.text:000000000000D2A0 ; _Bool __fastcall revert_tz(timezone_t tz)
.text:000000000000D2A0 revert_tz       proc near               ; CODE XREF: localtime_rz+69↓p
.text:000000000000D2A0                                         ; localtime_rz+98↓p ...
.text:000000000000D2A0 ; __unwind {
.text:000000000000D2A0                 push    r13
.text:000000000000D2A2                 push    r12
.text:000000000000D2A4                 push    rbp
.text:000000000000D2A5                 push    rbx
.text:000000000000D2A6                 mov     rbp, rdi
.text:000000000000D2A9                 sub     rsp, 8
.text:000000000000D2AD                 call    ___errno_location
.text:000000000000D2B2                 cmp     byte ptr [rbp+8], 0
.text:000000000000D2B6                 mov     rbx, rax
.text:000000000000D2B9                 mov     r12d, [rax]
.text:000000000000D2BC                 lea     rdi, [rbp+9]
.text:000000000000D2C0                 jnz     short loc_D2C4
.text:000000000000D2C2                 xor     edi, edi        ; value
.text:000000000000D2C4
.text:000000000000D2C4 loc_D2C4:                               ; CODE XREF: revert_tz+20↑j
.text:000000000000D2C4                 call    setenv_TZ
.text:000000000000D2C9                 test    eax, eax
.text:000000000000D2CB                 jz      short loc_D2F0
.text:000000000000D2CD                 mov     r12d, [rbx]
.text:000000000000D2D0                 xor     r13d, r13d
.text:000000000000D2D3
.text:000000000000D2D3 loc_D2D3:                               ; CODE XREF: revert_tz+5B↓j
.text:000000000000D2D3                 mov     rdi, rbp
.text:000000000000D2D6                 call    tzfree_0
.text:000000000000D2DB                 mov     [rbx], r12d
.text:000000000000D2DE                 add     rsp, 8
.text:000000000000D2E2                 mov     eax, r13d
.text:000000000000D2E5                 pop     rbx
.text:000000000000D2E6                 pop     rbp
.text:000000000000D2E7                 pop     r12
.text:000000000000D2E9                 pop     r13
.text:000000000000D2EB                 retn
.text:000000000000D2EB ; ---------------------------------------------------------------------------
.text:000000000000D2EC                 align 10h
.text:000000000000D2F0
.text:000000000000D2F0 loc_D2F0:                               ; CODE XREF: revert_tz+2B↑j
.text:000000000000D2F0                 call    _tzset
.text:000000000000D2F5                 mov     r13d, 1
.text:000000000000D2FB                 jmp     short loc_D2D3
.text:000000000000D2FB ; } // starts at D2A0
.text:000000000000D2FB revert_tz       endp
.text:000000000000D2FB
.text:000000000000D2FB ; ---------------------------------------------------------------------------
.text:000000000000D2FD                 align 20h
.text:000000000000D300
.text:000000000000D300 ; =============== S U B R O U T I N E =======================================
.text:000000000000D300
.text:000000000000D300 ; Attributes: info_from_lumina
.text:000000000000D300
.text:000000000000D300 ; timezone_t __fastcall tzalloc(const char *name)
.text:000000000000D300                 public tzalloc
.text:000000000000D300 tzalloc         proc near               ; CODE XREF: main+32F↑p
.text:000000000000D300                                         ; parse_datetime2+575↑p ...
.text:000000000000D300 ; __unwind {
.text:000000000000D300                 test    rdi, rdi
.text:000000000000D303                 push    r12
.text:000000000000D305                 push    rbp
.text:000000000000D306                 push    rbx
.text:000000000000D307                 jz      short loc_D368
.text:000000000000D309                 mov     r12, rdi
.text:000000000000D30C                 call    _strlen
.text:000000000000D311                 lea     rbp, [rax+1]
.text:000000000000D315                 mov     edi, 76h ; 'v'
.text:000000000000D31A                 cmp     rbp, 76h ; 'v'
.text:000000000000D31E                 cmovnb  rdi, rbp
.text:000000000000D322                 add     rdi, 11h
.text:000000000000D326                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:000000000000D32A                 call    _malloc
.text:000000000000D32F                 test    rax, rax
.text:000000000000D332                 mov     rbx, rax
.text:000000000000D335                 jz      short loc_D35B
.text:000000000000D337                 mov     qword ptr [rax], 0
.text:000000000000D33E                 lea     rdi, [rbx+9]    ; dest
.text:000000000000D342                 mov     eax, 1
.text:000000000000D347                 mov     [rbx+8], ax
.text:000000000000D34B                 mov     rdx, rbp        ; n
.text:000000000000D34E                 mov     rsi, r12        ; src
.text:000000000000D351                 call    _memcpy
.text:000000000000D356                 mov     byte ptr [rbx+rbp+9], 0
.text:000000000000D35B
.text:000000000000D35B loc_D35B:                               ; CODE XREF: tzalloc+35↑j
.text:000000000000D35B                                         ; tzalloc+78↓j
.text:000000000000D35B                 mov     rax, rbx
.text:000000000000D35E                 pop     rbx
.text:000000000000D35F                 pop     rbp
.text:000000000000D360                 pop     r12
.text:000000000000D362                 retn
.text:000000000000D362 ; ---------------------------------------------------------------------------
.text:000000000000D363                 align 8
.text:000000000000D368
.text:000000000000D368 loc_D368:                               ; CODE XREF: tzalloc+7↑j
.text:000000000000D368                 mov     edi, 80h        ; size
.text:000000000000D36D                 call    _malloc
.text:000000000000D372                 test    rax, rax
.text:000000000000D375                 mov     rbx, rax
.text:000000000000D378                 jz      short loc_D35B
.text:000000000000D37A                 xor     edx, edx
.text:000000000000D37C                 mov     qword ptr [rbx], 0
.text:000000000000D383                 mov     rax, rbx
.text:000000000000D386                 mov     [rbx+8], dx
.text:000000000000D38A                 pop     rbx
.text:000000000000D38B                 pop     rbp
.text:000000000000D38C                 pop     r12
.text:000000000000D38E                 retn
.text:000000000000D38E ; } // starts at D300
.text:000000000000D38E tzalloc         endp
.text:000000000000D38E
.text:000000000000D38E ; ---------------------------------------------------------------------------
.text:000000000000D38F                 align 10h
.text:000000000000D390
.text:000000000000D390 ; =============== S U B R O U T I N E =======================================
.text:000000000000D390
.text:000000000000D390 ; Attributes: info_from_lumina
.text:000000000000D390
.text:000000000000D390 ; _Bool __fastcall save_abbr(timezone_t tz, tm *tm)
.text:000000000000D390 save_abbr       proc near               ; CODE XREF: localtime_rz+3B↓p
.text:000000000000D390                                         ; mktime_z+51↓p
.text:000000000000D390 ; __unwind {
.text:000000000000D390                 push    r15
.text:000000000000D392                 push    r14
.text:000000000000D394                 mov     eax, 1
.text:000000000000D399                 push    r13
.text:000000000000D39B                 push    r12
.text:000000000000D39D                 push    rbp
.text:000000000000D39E                 push    rbx
.text:000000000000D39F                 sub     rsp, 8
.text:000000000000D3A3                 mov     rbp, [rsi+30h]
.text:000000000000D3A7                 test    rbp, rbp
.text:000000000000D3AA                 jz      loc_D440
.text:000000000000D3B0                 cmp     rsi, rbp
.text:000000000000D3B3                 mov     r12, rdi
.text:000000000000D3B6                 mov     r13, rsi
.text:000000000000D3B9                 ja      short loc_D3C4
.text:000000000000D3BB                 lea     rdx, [rsi+38h]
.text:000000000000D3BF                 cmp     rbp, rdx
.text:000000000000D3C2                 jb      short loc_D440
.text:000000000000D3C4
.text:000000000000D3C4 loc_D3C4:                               ; CODE XREF: save_abbr+29↑j
.text:000000000000D3C4                 cmp     byte ptr [rbp+0], 0
.text:000000000000D3C8                 lea     rbx, [r12+9]
.text:000000000000D3CD                 jz      short loc_D430
.text:000000000000D3CF                 nop
.text:000000000000D3D0
.text:000000000000D3D0 loc_D3D0:                               ; CODE XREF: save_abbr+76↓j
.text:000000000000D3D0                                         ; save_abbr+7F↓j
.text:000000000000D3D0                 mov     rsi, rbp        ; s2
.text:000000000000D3D3                 mov     rdi, rbx        ; s1
.text:000000000000D3D6                 call    _strcmp
.text:000000000000D3DB                 test    eax, eax
.text:000000000000D3DD                 jz      short loc_D437
.text:000000000000D3DF
.text:000000000000D3DF loc_D3DF:                               ; CODE XREF: save_abbr+95↓j
.text:000000000000D3DF                 cmp     byte ptr [rbx], 0
.text:000000000000D3E2                 jnz     short loc_D3F6
.text:000000000000D3E4                 lea     r14, [r12+9]
.text:000000000000D3E9                 cmp     r14, rbx
.text:000000000000D3EC                 jnz     short loc_D450
.text:000000000000D3EE                 cmp     byte ptr [r12+8], 0
.text:000000000000D3F4                 jz      short loc_D450
.text:000000000000D3F6
.text:000000000000D3F6 loc_D3F6:                               ; CODE XREF: save_abbr+52↑j
.text:000000000000D3F6                 mov     rdi, rbx        ; s
.text:000000000000D3F9                 call    _strlen
.text:000000000000D3FE                 lea     rbx, [rbx+rax+1]
.text:000000000000D403                 cmp     byte ptr [rbx], 0
.text:000000000000D406                 jnz     short loc_D3D0
.text:000000000000D408                 mov     rax, [r12]
.text:000000000000D40C                 test    rax, rax
.text:000000000000D40F                 jz      short loc_D3D0
.text:000000000000D411                 lea     rbx, [rax+9]
.text:000000000000D415                 mov     rsi, rbp        ; s2
.text:000000000000D418                 mov     r12, rax
.text:000000000000D41B                 mov     rdi, rbx        ; s1
.text:000000000000D41E                 call    _strcmp
.text:000000000000D423                 test    eax, eax
.text:000000000000D425                 jnz     short loc_D3DF
.text:000000000000D427                 jmp     short loc_D437
.text:000000000000D427 ; ---------------------------------------------------------------------------
.text:000000000000D429                 align 10h
.text:000000000000D430
.text:000000000000D430 loc_D430:                               ; CODE XREF: save_abbr+3D↑j
.text:000000000000D430                 lea     rbx, aUserProvidedTi+1Dh ; ""
.text:000000000000D437
.text:000000000000D437 loc_D437:                               ; CODE XREF: save_abbr+4D↑j
.text:000000000000D437                                         ; save_abbr+97↑j ...
.text:000000000000D437                 mov     [r13+30h], rbx
.text:000000000000D43B                 mov     eax, 1
.text:000000000000D440
.text:000000000000D440 loc_D440:                               ; CODE XREF: save_abbr+1A↑j
.text:000000000000D440                                         ; save_abbr+32↑j ...
.text:000000000000D440                 add     rsp, 8
.text:000000000000D444                 pop     rbx
.text:000000000000D445                 pop     rbp
.text:000000000000D446                 pop     r12
.text:000000000000D448                 pop     r13
.text:000000000000D44A                 pop     r14
.text:000000000000D44C                 pop     r15
.text:000000000000D44E                 retn
.text:000000000000D44E ; ---------------------------------------------------------------------------
.text:000000000000D44F                 align 10h
.text:000000000000D450
.text:000000000000D450 loc_D450:                               ; CODE XREF: save_abbr+5C↑j
.text:000000000000D450                                         ; save_abbr+64↑j
.text:000000000000D450                 mov     rdi, rbp        ; s
.text:000000000000D453                 call    _strlen
.text:000000000000D458                 lea     rdx, [rax+1]    ; n
.text:000000000000D45C                 mov     r15, rax
.text:000000000000D45F                 mov     rax, rbx
.text:000000000000D462                 sub     rax, r14
.text:000000000000D465                 mov     rcx, rax
.text:000000000000D468                 not     rcx
.text:000000000000D46B                 cmp     rcx, rdx
.text:000000000000D46E                 jb      short loc_D4A0
.text:000000000000D470                 add     rax, rdx
.text:000000000000D473                 cmp     rax, 76h ; 'v'
.text:000000000000D477                 jbe     short loc_D4B0
.text:000000000000D479                 mov     rdi, rbp        ; src
.text:000000000000D47C                 call    tzalloc
.text:000000000000D481                 mov     rbx, rax
.text:000000000000D484                 mov     [r12], rax
.text:000000000000D488                 xor     eax, eax
.text:000000000000D48A                 test    rbx, rbx
.text:000000000000D48D                 jz      short loc_D440
.text:000000000000D48F                 mov     byte ptr [rbx+8], 0
.text:000000000000D493                 add     rbx, 9
.text:000000000000D497                 jmp     short loc_D437
.text:000000000000D497 ; ---------------------------------------------------------------------------
.text:000000000000D499                 align 20h
.text:000000000000D4A0
.text:000000000000D4A0 loc_D4A0:                               ; CODE XREF: save_abbr+DE↑j
.text:000000000000D4A0                 call    ___errno_location
.text:000000000000D4A5                 mov     dword ptr [rax], 0Ch
.text:000000000000D4AB                 xor     eax, eax
.text:000000000000D4AD                 jmp     short loc_D440
.text:000000000000D4AD ; ---------------------------------------------------------------------------
.text:000000000000D4AF                 align 10h
.text:000000000000D4B0
.text:000000000000D4B0 loc_D4B0:                               ; CODE XREF: save_abbr+E7↑j
.text:000000000000D4B0                 mov     rsi, rbp        ; src
.text:000000000000D4B3                 mov     rdi, rbx        ; dest
.text:000000000000D4B6                 call    _memcpy
.text:000000000000D4BB                 mov     byte ptr [rbx+r15+1], 0
.text:000000000000D4C1                 jmp     loc_D437
.text:000000000000D4C1 ; } // starts at D390
.text:000000000000D4C1 save_abbr       endp
.text:000000000000D4C1
.text:000000000000D4C1 ; ---------------------------------------------------------------------------
.text:000000000000D4C6                 align 10h
.text:000000000000D4D0
.text:000000000000D4D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D4D0
.text:000000000000D4D0 ; Attributes: info_from_lumina
.text:000000000000D4D0
.text:000000000000D4D0 ; timezone_t __fastcall set_tz(timezone_t tz)
.text:000000000000D4D0 set_tz          proc near               ; CODE XREF: localtime_rz+18↓p
.text:000000000000D4D0                                         ; mktime_z+27↓p
.text:000000000000D4D0
.text:000000000000D4D0 var_20          = qword ptr -20h
.text:000000000000D4D0
.text:000000000000D4D0 ; __unwind {
.text:000000000000D4D0                 push    r12
.text:000000000000D4D2                 push    rbp
.text:000000000000D4D3                 mov     rbp, rdi
.text:000000000000D4D6                 push    rbx
.text:000000000000D4D7                 lea     rdi, name       ; "TZ"
.text:000000000000D4DE                 sub     rsp, 10h
.text:000000000000D4E2                 call    _getenv
.text:000000000000D4E7                 test    rax, rax
.text:000000000000D4EA                 mov     rbx, rax
.text:000000000000D4ED                 jz      loc_D588
.text:000000000000D4F3                 cmp     byte ptr [rbp+8], 0
.text:000000000000D4F7                 jnz     short loc_D560
.text:000000000000D4F9
.text:000000000000D4F9 loc_D4F9:                               ; CODE XREF: set_tz+A4↓j
.text:000000000000D4F9                                         ; set_tz+C2↓j
.text:000000000000D4F9                 mov     rdi, rbx        ; src
.text:000000000000D4FC                 call    tzalloc
.text:000000000000D501                 test    rax, rax
.text:000000000000D504                 mov     r12, rax
.text:000000000000D507                 jz      short loc_D54D
.text:000000000000D509                 xor     edi, edi
.text:000000000000D50B                 cmp     byte ptr [rbp+8], 0
.text:000000000000D50F                 jz      short loc_D515
.text:000000000000D511                 lea     rdi, [rbp+9]    ; value
.text:000000000000D515
.text:000000000000D515 loc_D515:                               ; CODE XREF: set_tz+3F↑j
.text:000000000000D515                 call    setenv_TZ
.text:000000000000D51A                 test    eax, eax
.text:000000000000D51C                 jz      loc_D5A8
.text:000000000000D522                 call    ___errno_location
.text:000000000000D527                 cmp     r12, 1
.text:000000000000D52B                 mov     ebx, [rax]
.text:000000000000D52D                 jz      short loc_D548
.text:000000000000D52F                 mov     rdi, r12
.text:000000000000D532                 mov     [rsp+28h+var_20], rax
.text:000000000000D537                 call    tzfree_0
.text:000000000000D53C                 mov     rax, [rsp+28h+var_20]
.text:000000000000D541                 nop     dword ptr [rax+00000000h]
.text:000000000000D548
.text:000000000000D548 loc_D548:                               ; CODE XREF: set_tz+5D↑j
.text:000000000000D548                 mov     [rax], ebx
.text:000000000000D54A                 xor     r12d, r12d
.text:000000000000D54D
.text:000000000000D54D loc_D54D:                               ; CODE XREF: set_tz+37↑j
.text:000000000000D54D                                         ; set_tz+DD↓j
.text:000000000000D54D                 add     rsp, 10h
.text:000000000000D551                 mov     rax, r12
.text:000000000000D554                 pop     rbx
.text:000000000000D555                 pop     rbp
.text:000000000000D556                 pop     r12
.text:000000000000D558                 retn
.text:000000000000D558 ; ---------------------------------------------------------------------------
.text:000000000000D559                 align 20h
.text:000000000000D560
.text:000000000000D560 loc_D560:                               ; CODE XREF: set_tz+27↑j
.text:000000000000D560                 lea     rdi, [rbp+9]    ; s1
.text:000000000000D564                 mov     rsi, rax        ; s2
.text:000000000000D567                 mov     r12d, 1
.text:000000000000D56D                 call    _strcmp
.text:000000000000D572                 test    eax, eax
.text:000000000000D574                 jnz     short loc_D4F9
.text:000000000000D576                 add     rsp, 10h
.text:000000000000D57A                 mov     rax, r12
.text:000000000000D57D                 pop     rbx
.text:000000000000D57E                 pop     rbp
.text:000000000000D57F                 pop     r12
.text:000000000000D581                 retn
.text:000000000000D581 ; ---------------------------------------------------------------------------
.text:000000000000D582                 align 8
.text:000000000000D588
.text:000000000000D588 loc_D588:                               ; CODE XREF: set_tz+1D↑j
.text:000000000000D588                 cmp     byte ptr [rbp+8], 0
.text:000000000000D58C                 mov     r12d, 1
.text:000000000000D592                 jnz     loc_D4F9
.text:000000000000D598                 add     rsp, 10h
.text:000000000000D59C                 mov     rax, r12
.text:000000000000D59F                 pop     rbx
.text:000000000000D5A0                 pop     rbp
.text:000000000000D5A1                 pop     r12
.text:000000000000D5A3                 retn
.text:000000000000D5A3 ; ---------------------------------------------------------------------------
.text:000000000000D5A4                 align 8
.text:000000000000D5A8
.text:000000000000D5A8 loc_D5A8:                               ; CODE XREF: set_tz+4C↑j
.text:000000000000D5A8                 call    _tzset
.text:000000000000D5AD                 jmp     short loc_D54D
.text:000000000000D5AD ; } // starts at D4D0
.text:000000000000D5AD set_tz          endp
.text:000000000000D5AD
.text:000000000000D5AD ; ---------------------------------------------------------------------------
.text:000000000000D5AF                 align 10h
.text:000000000000D5B0
.text:000000000000D5B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D5B0
.text:000000000000D5B0
.text:000000000000D5B0                 public tzfree
.text:000000000000D5B0 tzfree          proc near               ; CODE XREF: parse_datetime2+447↑p
.text:000000000000D5B0                                         ; parse_datetime2+10EA↑p ...
.text:000000000000D5B0 ; __unwind {
.text:000000000000D5B0                 cmp     rdi, 1
.text:000000000000D5B4                 jz      short locret_D5BB
.text:000000000000D5B6                 jmp     tzfree_0
.text:000000000000D5BB ; ---------------------------------------------------------------------------
.text:000000000000D5BB
.text:000000000000D5BB locret_D5BB:                            ; CODE XREF: tzfree+4↑j
.text:000000000000D5BB                 retn
.text:000000000000D5BB ; } // starts at D5B0
.text:000000000000D5BB tzfree          endp
.text:000000000000D5BB
.text:000000000000D5BB ; ---------------------------------------------------------------------------
.text:000000000000D5BC                 align 20h
.text:000000000000D5C0
.text:000000000000D5C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D5C0
.text:000000000000D5C0 ; Attributes: info_from_lumina
.text:000000000000D5C0
.text:000000000000D5C0 ; tm *__fastcall localtime_rz(timezone_t tz, const time_t *t, tm *tm)
.text:000000000000D5C0                 public localtime_rz
.text:000000000000D5C0 localtime_rz    proc near               ; CODE XREF: show_date+35↑p
.text:000000000000D5C0                                         ; parse_datetime2+12A↑p ...
.text:000000000000D5C0 ; __unwind {
.text:000000000000D5C0                 push    r13
.text:000000000000D5C2                 push    r12
.text:000000000000D5C4                 push    rbp
.text:000000000000D5C5                 push    rbx
.text:000000000000D5C6                 mov     rbp, rsi
.text:000000000000D5C9                 sub     rsp, 8
.text:000000000000D5CD                 test    rdi, rdi
.text:000000000000D5D0                 jz      short loc_D640
.text:000000000000D5D2                 mov     r13, rdx
.text:000000000000D5D5                 mov     rbx, rdi
.text:000000000000D5D8                 call    set_tz
.text:000000000000D5DD                 test    rax, rax
.text:000000000000D5E0                 mov     r12, rax
.text:000000000000D5E3                 jz      short loc_D62E
.text:000000000000D5E5                 mov     rsi, r13        ; tp
.text:000000000000D5E8                 mov     rdi, rbp        ; timer
.text:000000000000D5EB                 call    _localtime_r
.text:000000000000D5F0                 test    rax, rax
.text:000000000000D5F3                 jz      short loc_D620
.text:000000000000D5F5                 mov     rsi, r13
.text:000000000000D5F8                 mov     rdi, rbx
.text:000000000000D5FB                 call    save_abbr
.text:000000000000D600                 test    al, al
.text:000000000000D602                 jz      short loc_D620
.text:000000000000D604                 cmp     r12, 1
.text:000000000000D608                 jnz     short loc_D655
.text:000000000000D60A
.text:000000000000D60A loc_D60A:                               ; CODE XREF: localtime_rz+9F↓j
.text:000000000000D60A                 add     rsp, 8
.text:000000000000D60E                 mov     rax, r13
.text:000000000000D611                 pop     rbx
.text:000000000000D612                 pop     rbp
.text:000000000000D613                 pop     r12
.text:000000000000D615                 pop     r13
.text:000000000000D617                 retn
.text:000000000000D617 ; ---------------------------------------------------------------------------
.text:000000000000D618                 align 20h
.text:000000000000D620
.text:000000000000D620 loc_D620:                               ; CODE XREF: localtime_rz+33↑j
.text:000000000000D620                                         ; localtime_rz+42↑j
.text:000000000000D620                 cmp     r12, 1
.text:000000000000D624                 jz      short loc_D62E
.text:000000000000D626                 mov     rdi, r12
.text:000000000000D629                 call    revert_tz
.text:000000000000D62E
.text:000000000000D62E loc_D62E:                               ; CODE XREF: localtime_rz+23↑j
.text:000000000000D62E                                         ; localtime_rz+64↑j ...
.text:000000000000D62E                 add     rsp, 8
.text:000000000000D632                 xor     eax, eax
.text:000000000000D634                 pop     rbx
.text:000000000000D635                 pop     rbp
.text:000000000000D636                 pop     r12
.text:000000000000D638                 pop     r13
.text:000000000000D63A                 retn
.text:000000000000D63A ; ---------------------------------------------------------------------------
.text:000000000000D63B                 align 20h
.text:000000000000D640
.text:000000000000D640 loc_D640:                               ; CODE XREF: localtime_rz+10↑j
.text:000000000000D640                 add     rsp, 8
.text:000000000000D644                 mov     rdi, rbp        ; timer
.text:000000000000D647                 mov     rsi, rdx        ; tp
.text:000000000000D64A                 pop     rbx
.text:000000000000D64B                 pop     rbp
.text:000000000000D64C                 pop     r12
.text:000000000000D64E                 pop     r13
.text:000000000000D650                 jmp     _gmtime_r
.text:000000000000D655 ; ---------------------------------------------------------------------------
.text:000000000000D655
.text:000000000000D655 loc_D655:                               ; CODE XREF: localtime_rz+48↑j
.text:000000000000D655                 mov     rdi, r12
.text:000000000000D658                 call    revert_tz
.text:000000000000D65D                 test    al, al
.text:000000000000D65F                 jnz     short loc_D60A
.text:000000000000D661                 jmp     short loc_D62E
.text:000000000000D661 ; } // starts at D5C0
.text:000000000000D661 localtime_rz    endp
.text:000000000000D661
.text:000000000000D661 ; ---------------------------------------------------------------------------
.text:000000000000D663                 align 10h
.text:000000000000D670
.text:000000000000D670 ; =============== S U B R O U T I N E =======================================
.text:000000000000D670
.text:000000000000D670 ; Attributes: info_from_lumina
.text:000000000000D670
.text:000000000000D670 ; time_t __fastcall mktime_z(timezone_t tz, tm *tm)
.text:000000000000D670                 public mktime_z
.text:000000000000D670 mktime_z        proc near               ; CODE XREF: __strftime_internal+74B↑p
.text:000000000000D670                                         ; parse_datetime2+CAA↑p ...
.text:000000000000D670
.text:000000000000D670 timer           = qword ptr -60h
.text:000000000000D670 tp              = tm ptr -58h
.text:000000000000D670 var_20          = qword ptr -20h
.text:000000000000D670
.text:000000000000D670 ; __unwind {
.text:000000000000D670                 push    r12
.text:000000000000D672                 push    rbp
.text:000000000000D673                 push    rbx
.text:000000000000D674                 mov     rbx, rsi
.text:000000000000D677                 sub     rsp, 50h
.text:000000000000D67B                 mov     rax, fs:28h
.text:000000000000D684                 mov     [rsp+68h+var_20], rax
.text:000000000000D689                 xor     eax, eax
.text:000000000000D68B                 test    rdi, rdi
.text:000000000000D68E                 jz      loc_D790
.text:000000000000D694                 mov     rbp, rdi
.text:000000000000D697                 call    set_tz
.text:000000000000D69C                 test    rax, rax
.text:000000000000D69F                 mov     r12, rax
.text:000000000000D6A2                 jz      loc_D7A0
.text:000000000000D6A8                 mov     rdi, rbx        ; tp
.text:000000000000D6AB                 call    _mktime
.text:000000000000D6B0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D6B4                 mov     [rsp+68h+timer], rax
.text:000000000000D6B9                 jz      short loc_D710
.text:000000000000D6BB
.text:000000000000D6BB loc_D6BB:                               ; CODE XREF: mktime_z+10D↓j
.text:000000000000D6BB                 mov     rsi, rbx
.text:000000000000D6BE                 mov     rdi, rbp
.text:000000000000D6C1                 call    save_abbr
.text:000000000000D6C6                 test    al, al
.text:000000000000D6C8                 jnz     short loc_D6D3
.text:000000000000D6CA                 mov     [rsp+68h+timer], 0FFFFFFFFFFFFFFFFh
.text:000000000000D6D3
.text:000000000000D6D3 loc_D6D3:                               ; CODE XREF: mktime_z+58↑j
.text:000000000000D6D3                                         ; mktime_z+B2↓j ...
.text:000000000000D6D3                 cmp     r12, 1
.text:000000000000D6D7                 jz      short loc_D6E9
.text:000000000000D6D9                 mov     rdi, r12
.text:000000000000D6DC                 call    revert_tz
.text:000000000000D6E1                 test    al, al
.text:000000000000D6E3                 jz      loc_D7A0
.text:000000000000D6E9
.text:000000000000D6E9 loc_D6E9:                               ; CODE XREF: mktime_z+67↑j
.text:000000000000D6E9                 mov     rax, [rsp+68h+timer]
.text:000000000000D6EE
.text:000000000000D6EE loc_D6EE:                               ; CODE XREF: mktime_z+128↓j
.text:000000000000D6EE                                         ; mktime_z+137↓j
.text:000000000000D6EE                 mov     rcx, [rsp+68h+var_20]
.text:000000000000D6F3                 xor     rcx, fs:28h
.text:000000000000D6FC                 jnz     loc_D7AC
.text:000000000000D702                 add     rsp, 50h
.text:000000000000D706                 pop     rbx
.text:000000000000D707                 pop     rbp
.text:000000000000D708                 pop     r12
.text:000000000000D70A                 retn
.text:000000000000D70A ; ---------------------------------------------------------------------------
.text:000000000000D70B                 align 10h
.text:000000000000D710
.text:000000000000D710 loc_D710:                               ; CODE XREF: mktime_z+49↑j
.text:000000000000D710                 lea     rsi, [rsp+68h+tp] ; tp
.text:000000000000D715                 lea     rdi, [rsp+68h+timer] ; timer
.text:000000000000D71A                 call    _localtime_r
.text:000000000000D71F                 test    rax, rax
.text:000000000000D722                 jz      short loc_D6D3
.text:000000000000D724                 mov     eax, [rbx]
.text:000000000000D726                 mov     edx, [rbx+4]
.text:000000000000D729                 xor     eax, [rsp+68h+tp.tm_sec]
.text:000000000000D72D                 xor     edx, [rsp+68h+tp.tm_min]
.text:000000000000D731                 mov     ecx, [rsp+68h+tp.tm_isdst]
.text:000000000000D735                 or      eax, edx
.text:000000000000D737                 mov     edx, [rbx+8]
.text:000000000000D73A                 xor     edx, [rsp+68h+tp.tm_hour]
.text:000000000000D73E                 or      eax, edx
.text:000000000000D740                 mov     edx, [rbx+0Ch]
.text:000000000000D743                 xor     edx, [rsp+68h+tp.tm_mday]
.text:000000000000D747                 or      eax, edx
.text:000000000000D749                 mov     edx, [rbx+10h]
.text:000000000000D74C                 xor     edx, [rsp+68h+tp.tm_mon]
.text:000000000000D750                 or      eax, edx
.text:000000000000D752                 mov     edx, [rbx+14h]
.text:000000000000D755                 xor     edx, [rsp+68h+tp.tm_year]
.text:000000000000D759                 or      eax, edx
.text:000000000000D75B                 mov     edx, [rbx+20h]
.text:000000000000D75E                 test    edx, edx
.text:000000000000D760                 setz    dil
.text:000000000000D764                 test    ecx, ecx
.text:000000000000D766                 setz    sil
.text:000000000000D76A                 cmp     dil, sil
.text:000000000000D76D                 jz      short loc_D77B
.text:000000000000D76F                 test    edx, edx
.text:000000000000D771                 js      short loc_D77B
.text:000000000000D773                 test    ecx, ecx
.text:000000000000D775                 jns     loc_D6D3
.text:000000000000D77B
.text:000000000000D77B loc_D77B:                               ; CODE XREF: mktime_z+FD↑j
.text:000000000000D77B                                         ; mktime_z+101↑j
.text:000000000000D77B                 test    eax, eax
.text:000000000000D77D                 jz      loc_D6BB
.text:000000000000D783                 jmp     loc_D6D3
.text:000000000000D783 ; ---------------------------------------------------------------------------
.text:000000000000D788                 align 10h
.text:000000000000D790
.text:000000000000D790 loc_D790:                               ; CODE XREF: mktime_z+1E↑j
.text:000000000000D790                 mov     rdi, rsi        ; tp
.text:000000000000D793                 call    _timegm
.text:000000000000D798                 jmp     loc_D6EE
.text:000000000000D798 ; ---------------------------------------------------------------------------
.text:000000000000D79D                 align 20h
.text:000000000000D7A0
.text:000000000000D7A0 loc_D7A0:                               ; CODE XREF: mktime_z+32↑j
.text:000000000000D7A0                                         ; mktime_z+73↑j
.text:000000000000D7A0                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D7A7                 jmp     loc_D6EE
.text:000000000000D7AC ; ---------------------------------------------------------------------------
.text:000000000000D7AC
.text:000000000000D7AC loc_D7AC:                               ; CODE XREF: mktime_z+8C↑j
.text:000000000000D7AC                 call    ___stack_chk_fail
.text:000000000000D7AC ; } // starts at D670
.text:000000000000D7AC mktime_z        endp
.text:000000000000D7AC
.text:000000000000D7AC ; ---------------------------------------------------------------------------
.text:000000000000D7B1                 align 20h
.text:000000000000D7C0
.text:000000000000D7C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D7C0
.text:000000000000D7C0
.text:000000000000D7C0 ; __int64 __fastcall rpl_vfprintf(FILE *s)
.text:000000000000D7C0                 public rpl_vfprintf
.text:000000000000D7C0 rpl_vfprintf    proc near               ; CODE XREF: dbg_printf+BF↑p
.text:000000000000D7C0
.text:000000000000D7C0 n               = qword ptr -810h
.text:000000000000D7C0 var_808         = byte ptr -808h
.text:000000000000D7C0 var_30          = qword ptr -30h
.text:000000000000D7C0
.text:000000000000D7C0 ; __unwind {
.text:000000000000D7C0                 push    r13
.text:000000000000D7C2                 push    r12
.text:000000000000D7C4                 mov     rax, rsi
.text:000000000000D7C7                 push    rbp
.text:000000000000D7C8                 push    rbx
.text:000000000000D7C9                 mov     r13, rdi
.text:000000000000D7CC                 sub     rsp, 7F8h
.text:000000000000D7D3                 lea     r12, [rsp+818h+var_808]
.text:000000000000D7D8                 lea     rsi, [rsp+818h+n]
.text:000000000000D7DD                 mov     [rsp+818h+n], 7D0h
.text:000000000000D7E6                 mov     rcx, fs:28h
.text:000000000000D7EF                 mov     [rsp+818h+var_30], rcx
.text:000000000000D7F7                 xor     ecx, ecx
.text:000000000000D7F9                 mov     rdi, r12
.text:000000000000D7FC                 mov     rcx, rdx
.text:000000000000D7FF                 mov     rdx, rax
.text:000000000000D802                 call    vasnprintf
.text:000000000000D807                 test    rax, rax
.text:000000000000D80A                 mov     rbx, [rsp+818h+n]
.text:000000000000D80F                 jz      loc_D89E
.text:000000000000D815                 mov     rcx, r13        ; s
.text:000000000000D818                 mov     rdx, rbx        ; n
.text:000000000000D81B                 mov     esi, 1          ; size
.text:000000000000D820                 mov     rdi, rax        ; ptr
.text:000000000000D823                 mov     rbp, rax
.text:000000000000D826                 call    _fwrite
.text:000000000000D82B                 cmp     rax, rbx
.text:000000000000D82E                 jb      short loc_D870
.text:000000000000D830                 cmp     rbp, r12
.text:000000000000D833                 jz      short loc_D83D
.text:000000000000D835                 mov     rdi, rbp        ; ptr
.text:000000000000D838                 call    _free
.text:000000000000D83D
.text:000000000000D83D loc_D83D:                               ; CODE XREF: rpl_vfprintf+73↑j
.text:000000000000D83D                 cmp     rbx, 7FFFFFFFh
.text:000000000000D844                 ja      short loc_D893
.text:000000000000D846
.text:000000000000D846 loc_D846:                               ; CODE XREF: rpl_vfprintf+B8↓j
.text:000000000000D846                                         ; rpl_vfprintf+D1↓j ...
.text:000000000000D846                 mov     rcx, [rsp+818h+var_30]
.text:000000000000D84E                 xor     rcx, fs:28h
.text:000000000000D857                 mov     eax, ebx
.text:000000000000D859                 jnz     short loc_D8AD
.text:000000000000D85B                 add     rsp, 7F8h
.text:000000000000D862                 pop     rbx
.text:000000000000D863                 pop     rbp
.text:000000000000D864                 pop     r12
.text:000000000000D866                 pop     r13
.text:000000000000D868                 retn
.text:000000000000D868 ; ---------------------------------------------------------------------------
.text:000000000000D869                 align 10h
.text:000000000000D870
.text:000000000000D870 loc_D870:                               ; CODE XREF: rpl_vfprintf+6E↑j
.text:000000000000D870                 cmp     rbp, r12
.text:000000000000D873                 mov     ebx, 0FFFFFFFFh
.text:000000000000D878                 jz      short loc_D846
.text:000000000000D87A                 call    ___errno_location
.text:000000000000D87F                 mov     r13d, [rax]
.text:000000000000D882                 mov     r12, rax
.text:000000000000D885                 mov     rdi, rbp        ; ptr
.text:000000000000D888                 call    _free
.text:000000000000D88D                 mov     [r12], r13d
.text:000000000000D891                 jmp     short loc_D846
.text:000000000000D893 ; ---------------------------------------------------------------------------
.text:000000000000D893
.text:000000000000D893 loc_D893:                               ; CODE XREF: rpl_vfprintf+84↑j
.text:000000000000D893                 call    ___errno_location
.text:000000000000D898                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000D89E
.text:000000000000D89E loc_D89E:                               ; CODE XREF: rpl_vfprintf+4F↑j
.text:000000000000D89E                 mov     rdi, r13
.text:000000000000D8A1                 mov     ebx, 0FFFFFFFFh
.text:000000000000D8A6                 call    fseterr
.text:000000000000D8AB                 jmp     short loc_D846
.text:000000000000D8AD ; ---------------------------------------------------------------------------
.text:000000000000D8AD
.text:000000000000D8AD loc_D8AD:                               ; CODE XREF: rpl_vfprintf+99↑j
.text:000000000000D8AD                 call    ___stack_chk_fail
.text:000000000000D8AD ; } // starts at D7C0
.text:000000000000D8AD rpl_vfprintf    endp
.text:000000000000D8AD
.text:000000000000D8AD ; ---------------------------------------------------------------------------
.text:000000000000D8B2                 align 20h
.text:000000000000D8C0
.text:000000000000D8C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D8C0
.text:000000000000D8C0 ; Attributes: info_from_lumina
.text:000000000000D8C0
.text:000000000000D8C0 ; int __fastcall close_stream(FILE *stream)
.text:000000000000D8C0                 public close_stream
.text:000000000000D8C0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:000000000000D8C0                                         ; close_stdout+33↑p
.text:000000000000D8C0 ; __unwind {
.text:000000000000D8C0                 push    r12
.text:000000000000D8C2                 push    rbp
.text:000000000000D8C3                 mov     rbp, rdi
.text:000000000000D8C6                 push    rbx
.text:000000000000D8C7                 call    ___fpending
.text:000000000000D8CC                 mov     ebx, [rbp+0]
.text:000000000000D8CF                 mov     rdi, rbp        ; stream
.text:000000000000D8D2                 mov     r12, rax
.text:000000000000D8D5                 call    rpl_fclose
.text:000000000000D8DA                 and     ebx, 20h
.text:000000000000D8DD                 test    ebx, ebx
.text:000000000000D8DF                 jnz     short loc_D8F8
.text:000000000000D8E1                 test    eax, eax
.text:000000000000D8E3                 jz      short loc_D8EF
.text:000000000000D8E5                 test    r12, r12
.text:000000000000D8E8                 mov     eax, 0FFFFFFFFh
.text:000000000000D8ED                 jz      short loc_D928
.text:000000000000D8EF
.text:000000000000D8EF loc_D8EF:                               ; CODE XREF: close_stream+23↑j
.text:000000000000D8EF                 pop     rbx
.text:000000000000D8F0                 pop     rbp
.text:000000000000D8F1                 pop     r12
.text:000000000000D8F3                 retn
.text:000000000000D8F3 ; ---------------------------------------------------------------------------
.text:000000000000D8F4                 align 8
.text:000000000000D8F8
.text:000000000000D8F8 loc_D8F8:                               ; CODE XREF: close_stream+1F↑j
.text:000000000000D8F8                 test    eax, eax
.text:000000000000D8FA                 jnz     short loc_D918
.text:000000000000D8FC                 call    ___errno_location
.text:000000000000D901                 mov     dword ptr [rax], 0
.text:000000000000D907                 mov     eax, 0FFFFFFFFh
.text:000000000000D90C                 pop     rbx
.text:000000000000D90D                 pop     rbp
.text:000000000000D90E                 pop     r12
.text:000000000000D910                 retn
.text:000000000000D910 ; ---------------------------------------------------------------------------
.text:000000000000D911                 align 8
.text:000000000000D918
.text:000000000000D918 loc_D918:                               ; CODE XREF: close_stream+3A↑j
.text:000000000000D918                 pop     rbx
.text:000000000000D919                 mov     eax, 0FFFFFFFFh
.text:000000000000D91E                 pop     rbp
.text:000000000000D91F                 pop     r12
.text:000000000000D921                 retn
.text:000000000000D921 ; ---------------------------------------------------------------------------
.text:000000000000D922                 align 8
.text:000000000000D928
.text:000000000000D928 loc_D928:                               ; CODE XREF: close_stream+2D↑j
.text:000000000000D928                 call    ___errno_location
.text:000000000000D92D                 cmp     dword ptr [rax], 9
.text:000000000000D930                 pop     rbx
.text:000000000000D931                 pop     rbp
.text:000000000000D932                 pop     r12
.text:000000000000D934                 setnz   al
.text:000000000000D937                 movzx   eax, al
.text:000000000000D93A                 neg     eax
.text:000000000000D93C                 retn
.text:000000000000D93C ; } // starts at D8C0
.text:000000000000D93C close_stream    endp
.text:000000000000D93C
.text:000000000000D93C ; ---------------------------------------------------------------------------
.text:000000000000D93D                 align 20h
.text:000000000000D940
.text:000000000000D940 ; =============== S U B R O U T I N E =======================================
.text:000000000000D940
.text:000000000000D940
.text:000000000000D940                 public hard_locale
.text:000000000000D940 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:000000000000D940 ; __unwind {
.text:000000000000D940                 sub     rsp, 8
.text:000000000000D944                 xor     esi, esi        ; locale
.text:000000000000D946                 call    _setlocale
.text:000000000000D94B                 mov     rdx, rax
.text:000000000000D94E                 mov     eax, 1
.text:000000000000D953                 test    rdx, rdx
.text:000000000000D956                 jz      short loc_D975
.text:000000000000D958                 lea     rdi, locale     ; "C"
.text:000000000000D95F                 mov     ecx, 2
.text:000000000000D964                 mov     rsi, rdx
.text:000000000000D967                 repe cmpsb
.text:000000000000D969                 setnbe  cl
.text:000000000000D96C                 sbb     cl, 0
.text:000000000000D96F                 xor     eax, eax
.text:000000000000D971                 test    cl, cl
.text:000000000000D973                 jnz     short loc_D980
.text:000000000000D975
.text:000000000000D975 loc_D975:                               ; CODE XREF: hard_locale+16↑j
.text:000000000000D975                 add     rsp, 8
.text:000000000000D979                 retn
.text:000000000000D979 ; ---------------------------------------------------------------------------
.text:000000000000D97A                 align 20h
.text:000000000000D980
.text:000000000000D980 loc_D980:                               ; CODE XREF: hard_locale+33↑j
.text:000000000000D980                 lea     rdi, aPosix     ; "POSIX"
.text:000000000000D987                 mov     ecx, 6
.text:000000000000D98C                 mov     rsi, rdx
.text:000000000000D98F                 repe cmpsb
.text:000000000000D991                 setnbe  al
.text:000000000000D994                 sbb     al, 0
.text:000000000000D996                 test    al, al
.text:000000000000D998                 setnz   al
.text:000000000000D99B                 add     rsp, 8
.text:000000000000D99F                 retn
.text:000000000000D99F ; } // starts at D940
.text:000000000000D99F hard_locale     endp
.text:000000000000D99F
.text:000000000000D9A0
.text:000000000000D9A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D9A0
.text:000000000000D9A0
.text:000000000000D9A0                 public locale_charset
.text:000000000000D9A0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:000000000000D9A0 ; __unwind {
.text:000000000000D9A0                 sub     rsp, 8
.text:000000000000D9A4                 mov     edi, 0Eh        ; item
.text:000000000000D9A9                 call    _nl_langinfo
.text:000000000000D9AE                 test    rax, rax
.text:000000000000D9B1                 jz      short loc_D9D0
.text:000000000000D9B3                 cmp     byte ptr [rax], 0
.text:000000000000D9B6                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000D9BD                 cmovz   rax, rdx
.text:000000000000D9C1                 add     rsp, 8
.text:000000000000D9C5                 retn
.text:000000000000D9C5 ; ---------------------------------------------------------------------------
.text:000000000000D9C6                 align 10h
.text:000000000000D9D0
.text:000000000000D9D0 loc_D9D0:                               ; CODE XREF: locale_charset+11↑j
.text:000000000000D9D0                 lea     rax, aAscii     ; "ASCII"
.text:000000000000D9D7                 add     rsp, 8
.text:000000000000D9DB                 retn
.text:000000000000D9DB ; } // starts at D9A0
.text:000000000000D9DB locale_charset  endp
.text:000000000000D9DB
.text:000000000000D9DB ; ---------------------------------------------------------------------------
.text:000000000000D9DC                 align 20h
.text:000000000000D9E0
.text:000000000000D9E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D9E0
.text:000000000000D9E0 ; Attributes: info_from_lumina
.text:000000000000D9E0
.text:000000000000D9E0 ; char *__fastcall memcpy_lowcase(char *dest, const char *src, size_t len)
.text:000000000000D9E0 memcpy_lowcase  proc near               ; CODE XREF: __strftime_internal_0+1500↓p
.text:000000000000D9E0                                         ; __strftime_internal_0+1977↓p
.text:000000000000D9E0 ; __unwind {
.text:000000000000D9E0                 test    rdx, rdx
.text:000000000000D9E3                 push    r12
.text:000000000000D9E5                 push    rbp
.text:000000000000D9E6                 mov     rbp, rdi
.text:000000000000D9E9                 push    rbx
.text:000000000000D9EA                 jz      short loc_DA19
.text:000000000000D9EC                 mov     r12, rsi
.text:000000000000D9EF                 lea     rbx, [rdx-1]
.text:000000000000D9F3                 call    ___ctype_tolower_loc
.text:000000000000D9F8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000DA00
.text:000000000000DA00 loc_DA00:                               ; CODE XREF: memcpy_lowcase+37↓j
.text:000000000000DA00                 movzx   ecx, byte ptr [r12+rbx]
.text:000000000000DA05                 mov     rdx, [rax]
.text:000000000000DA08                 mov     edx, [rdx+rcx*4]
.text:000000000000DA0B                 mov     [rbp+rbx+0], dl
.text:000000000000DA0F                 sub     rbx, 1
.text:000000000000DA13                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DA17                 jnz     short loc_DA00
.text:000000000000DA19
.text:000000000000DA19 loc_DA19:                               ; CODE XREF: memcpy_lowcase+A↑j
.text:000000000000DA19                 mov     rax, rbp
.text:000000000000DA1C                 pop     rbx
.text:000000000000DA1D                 pop     rbp
.text:000000000000DA1E                 pop     r12
.text:000000000000DA20                 retn
.text:000000000000DA20 ; } // starts at D9E0
.text:000000000000DA20 memcpy_lowcase  endp
.text:000000000000DA20
.text:000000000000DA20 ; ---------------------------------------------------------------------------
.text:000000000000DA21                 align 10h
.text:000000000000DA30
.text:000000000000DA30 ; =============== S U B R O U T I N E =======================================
.text:000000000000DA30
.text:000000000000DA30 ; Attributes: info_from_lumina
.text:000000000000DA30
.text:000000000000DA30 ; char *__fastcall memcpy_lowcase_0(char *dest, const char *src, size_t len)
.text:000000000000DA30 memcpy_lowcase_0 proc near              ; CODE XREF: __strftime_internal_0+313↓p
.text:000000000000DA30                                         ; __strftime_internal_0:loc_DF71↓p ...
.text:000000000000DA30 ; __unwind {
.text:000000000000DA30                 test    rdx, rdx
.text:000000000000DA33                 push    r12
.text:000000000000DA35                 push    rbp
.text:000000000000DA36                 mov     rbp, rdi
.text:000000000000DA39                 push    rbx
.text:000000000000DA3A                 jz      short loc_DA69
.text:000000000000DA3C                 mov     r12, rsi
.text:000000000000DA3F                 lea     rbx, [rdx-1]
.text:000000000000DA43                 call    ___ctype_toupper_loc
.text:000000000000DA48                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000DA50
.text:000000000000DA50 loc_DA50:                               ; CODE XREF: memcpy_lowcase_0+37↓j
.text:000000000000DA50                 movzx   ecx, byte ptr [r12+rbx]
.text:000000000000DA55                 mov     rdx, [rax]
.text:000000000000DA58                 mov     edx, [rdx+rcx*4]
.text:000000000000DA5B                 mov     [rbp+rbx+0], dl
.text:000000000000DA5F                 sub     rbx, 1
.text:000000000000DA63                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DA67                 jnz     short loc_DA50
.text:000000000000DA69
.text:000000000000DA69 loc_DA69:                               ; CODE XREF: memcpy_lowcase_0+A↑j
.text:000000000000DA69                 mov     rax, rbp
.text:000000000000DA6C                 pop     rbx
.text:000000000000DA6D                 pop     rbp
.text:000000000000DA6E                 pop     r12
.text:000000000000DA70                 retn
.text:000000000000DA70 ; } // starts at DA30
.text:000000000000DA70 memcpy_lowcase_0 endp
.text:000000000000DA70
.text:000000000000DA70 ; ---------------------------------------------------------------------------
.text:000000000000DA71                 align 20h
.text:000000000000DA80
.text:000000000000DA80 ; =============== S U B R O U T I N E =======================================
.text:000000000000DA80
.text:000000000000DA80
.text:000000000000DA80 ; __int64 __usercall _strftime_internal_0@<rax>(void *s@<rdi>, int, __int64, __int64, int)
.text:000000000000DA80 __strftime_internal_0 proc near         ; CODE XREF: __strftime_internal_0+6AB↓p
.text:000000000000DA80                                         ; __strftime_internal_0+768↓p ...
.text:000000000000DA80
.text:000000000000DA80 var_4F0         = qword ptr -4F0h
.text:000000000000DA80 var_4E8         = qword ptr -4E8h
.text:000000000000DA80 var_4E0         = qword ptr -4E0h
.text:000000000000DA80 var_4D8         = qword ptr -4D8h
.text:000000000000DA80 var_4CD         = byte ptr -4CDh
.text:000000000000DA80 var_4CC         = dword ptr -4CCh
.text:000000000000DA80 var_4C8         = qword ptr -4C8h
.text:000000000000DA80 var_4C0         = dword ptr -4C0h
.text:000000000000DA80 var_4B8         = qword ptr -4B8h
.text:000000000000DA80 var_4B0         = qword ptr -4B0h
.text:000000000000DA80 var_4A8         = qword ptr -4A8h
.text:000000000000DA80 var_4A0         = qword ptr -4A0h
.text:000000000000DA80 var_498         = qword ptr -498h
.text:000000000000DA80 var_490         = dword ptr -490h
.text:000000000000DA80 var_48C         = dword ptr -48Ch
.text:000000000000DA80 var_488         = xmmword ptr -488h
.text:000000000000DA80 var_478         = xmmword ptr -478h
.text:000000000000DA80 var_468         = xmmword ptr -468h
.text:000000000000DA80 var_458         = qword ptr -458h
.text:000000000000DA80 format          = byte ptr -44Dh
.text:000000000000DA80 var_44B         = byte ptr -44Bh
.text:000000000000DA80 s               = byte ptr -448h
.text:000000000000DA80 var_40          = qword ptr -40h
.text:000000000000DA80 arg_0           = dword ptr  8
.text:000000000000DA80 arg_8           = qword ptr  10h
.text:000000000000DA80 arg_10          = qword ptr  18h
.text:000000000000DA80 arg_18          = dword ptr  20h
.text:000000000000DA80
.text:000000000000DA80 ; __unwind {
.text:000000000000DA80                 push    r15
.text:000000000000DA82                 push    r14
.text:000000000000DA84                 mov     r11, rdx
.text:000000000000DA87                 push    r13
.text:000000000000DA89                 push    r12
.text:000000000000DA8B                 mov     r13, rcx
.text:000000000000DA8E                 push    rbp
.text:000000000000DA8F                 push    rbx
.text:000000000000DA90                 mov     rbp, rdi
.text:000000000000DA93                 sub     rsp, 4C8h
.text:000000000000DA9A                 mov     rdi, [rcx+30h]
.text:000000000000DA9E                 mov     r15d, [rcx+8]
.text:000000000000DAA2                 mov     rax, [rsp+4F8h+arg_8]
.text:000000000000DAAA                 mov     [rsp+4F8h+var_4F0], rsi
.text:000000000000DAAF                 mov     [rsp+4F8h+var_4CC], r9d
.text:000000000000DAB4                 movsxd  r10, [rsp+4F8h+arg_0]
.text:000000000000DABC                 mov     [rsp+4F8h+var_4CD], r8b
.text:000000000000DAC1                 mov     [rsp+4F8h+var_4E0], rax
.text:000000000000DAC6                 mov     rax, [rsp+4F8h+arg_10]
.text:000000000000DACE                 mov     [rsp+4F8h+var_4E8], rax
.text:000000000000DAD3                 mov     rax, fs:28h
.text:000000000000DADC                 mov     [rsp+4F8h+var_40], rax
.text:000000000000DAE4                 xor     eax, eax
.text:000000000000DAE6                 lea     rax, aUserProvidedTi+1Dh ; ""
.text:000000000000DAED                 test    rdi, rdi
.text:000000000000DAF0                 cmovnz  rax, rdi
.text:000000000000DAF4                 cmp     r15d, 0Ch
.text:000000000000DAF8                 mov     [rsp+4F8h+var_4D8], rax
.text:000000000000DAFD                 jle     loc_DBF0
.text:000000000000DB03                 sub     r15d, 0Ch
.text:000000000000DB07
.text:000000000000DB07 loc_DB07:                               ; CODE XREF: __strftime_internal_0+17C↓j
.text:000000000000DB07                 movzx   eax, byte ptr [r11]
.text:000000000000DB0B                 xor     r14d, r14d
.text:000000000000DB0E                 test    al, al
.text:000000000000DB10                 jz      loc_DBCC
.text:000000000000DB16                 mov     [rsp+4F8h+var_490], r15d
.text:000000000000DB1B                 mov     rbx, r11
.text:000000000000DB1E
.text:000000000000DB1E loc_DB1E:                               ; CODE XREF: __strftime_internal_0+146↓j
.text:000000000000DB1E                 cmp     al, 25h ; '%'
.text:000000000000DB20                 jz      loc_DC08
.text:000000000000DB26                 test    r10d, r10d
.text:000000000000DB29                 mov     r12d, 0
.text:000000000000DB2F                 mov     eax, 1
.text:000000000000DB34                 cmovns  r12, r10
.text:000000000000DB38                 test    r12, r12
.text:000000000000DB3B                 cmovz   r12, rax
.text:000000000000DB3F                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000000DB44                 sub     rax, r14
.text:000000000000DB47                 cmp     rax, r12
.text:000000000000DB4A                 ja      short loc_DB80
.text:000000000000DB4C
.text:000000000000DB4C loc_DB4C:                               ; CODE XREF: __strftime_internal_0+294↓j
.text:000000000000DB4C                                         ; __strftime_internal_0+450↓j ...
.text:000000000000DB4C                 xor     r14d, r14d
.text:000000000000DB4F
.text:000000000000DB4F loc_DB4F:                               ; CODE XREF: __strftime_internal_0+14F↓j
.text:000000000000DB4F                                         ; __strftime_internal_0+15B↓j ...
.text:000000000000DB4F                 mov     rbx, [rsp+4F8h+var_40]
.text:000000000000DB57                 xor     rbx, fs:28h
.text:000000000000DB60                 mov     rax, r14
.text:000000000000DB63                 jnz     loc_F515
.text:000000000000DB69                 add     rsp, 4C8h
.text:000000000000DB70                 pop     rbx
.text:000000000000DB71                 pop     rbp
.text:000000000000DB72                 pop     r12
.text:000000000000DB74                 pop     r13
.text:000000000000DB76                 pop     r14
.text:000000000000DB78                 pop     r15
.text:000000000000DB7A                 retn
.text:000000000000DB7A ; ---------------------------------------------------------------------------
.text:000000000000DB7B                 align 20h
.text:000000000000DB80
.text:000000000000DB80 loc_DB80:                               ; CODE XREF: __strftime_internal_0+CA↑j
.text:000000000000DB80                 test    rbp, rbp
.text:000000000000DB83                 jz      short loc_DBAC
.text:000000000000DB85                 cmp     r10d, 1
.text:000000000000DB89                 jle     short loc_DBA2
.text:000000000000DB8B                 lea     r15, [r10-1]
.text:000000000000DB8F                 mov     rdi, rbp        ; s
.text:000000000000DB92                 mov     esi, 20h ; ' '  ; c
.text:000000000000DB97                 mov     rdx, r15        ; n
.text:000000000000DB9A                 add     rbp, r15
.text:000000000000DB9D                 call    _memset
.text:000000000000DBA2
.text:000000000000DBA2 loc_DBA2:                               ; CODE XREF: __strftime_internal_0+109↑j
.text:000000000000DBA2                 movzx   eax, byte ptr [rbx]
.text:000000000000DBA5                 add     rbp, 1
.text:000000000000DBA9                 mov     [rbp-1], al
.text:000000000000DBAC
.text:000000000000DBAC loc_DBAC:                               ; CODE XREF: __strftime_internal_0+103↑j
.text:000000000000DBAC                                         ; __strftime_internal_0+6EB↓j ...
.text:000000000000DBAC                 add     r14, r12
.text:000000000000DBAF                 mov     r12, rbx
.text:000000000000DBB2
.text:000000000000DBB2 loc_DBB2:                               ; CODE XREF: __strftime_internal_0+328↓j
.text:000000000000DBB2                                         ; __strftime_internal_0+420↓j ...
.text:000000000000DBB2                 movzx   eax, byte ptr [r12+1]
.text:000000000000DBB8                 lea     rbx, [r12+1]
.text:000000000000DBBD                 mov     r10, 0FFFFFFFFFFFFFFFFh
.text:000000000000DBC4                 test    al, al
.text:000000000000DBC6                 jnz     loc_DB1E
.text:000000000000DBCC
.text:000000000000DBCC loc_DBCC:                               ; CODE XREF: __strftime_internal_0+90↑j
.text:000000000000DBCC                 test    rbp, rbp
.text:000000000000DBCF                 jz      loc_DB4F
.text:000000000000DBD5                 cmp     [rsp+4F8h+var_4F0], 0
.text:000000000000DBDB                 jz      loc_DB4F
.text:000000000000DBE1                 mov     byte ptr [rbp+0], 0
.text:000000000000DBE5                 jmp     loc_DB4F
.text:000000000000DBE5 ; ---------------------------------------------------------------------------
.text:000000000000DBEA                 align 10h
.text:000000000000DBF0
.text:000000000000DBF0 loc_DBF0:                               ; CODE XREF: __strftime_internal_0+7D↑j
.text:000000000000DBF0                 test    r15d, r15d
.text:000000000000DBF3                 mov     eax, 0Ch
.text:000000000000DBF8                 cmovz   r15d, eax
.text:000000000000DBFC                 jmp     loc_DB07
.text:000000000000DBFC ; ---------------------------------------------------------------------------
.text:000000000000DC01                 align 8
.text:000000000000DC08
.text:000000000000DC08 loc_DC08:                               ; CODE XREF: __strftime_internal_0+A0↑j
.text:000000000000DC08                 movzx   eax, [rsp+4F8h+var_4CD]
.text:000000000000DC0D                 xor     r8d, r8d
.text:000000000000DC10                 xor     r15d, r15d
.text:000000000000DC13                 mov     edx, 1
.text:000000000000DC18                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000DC1C
.text:000000000000DC1C loc_DC1C:                               ; CODE XREF: __strftime_internal_0+233↓j
.text:000000000000DC1C                                         ; __strftime_internal_0+246↓j ...
.text:000000000000DC1C                 add     rbx, 1
.text:000000000000DC20                 movsx   eax, byte ptr [rbx]
.text:000000000000DC23                 lea     ecx, [rax-23h]
.text:000000000000DC26                 mov     esi, eax
.text:000000000000DC28                 mov     r9d, eax
.text:000000000000DC2B                 cmp     cl, 3Ch ; '<'
.text:000000000000DC2E                 ja      short loc_DC5C
.text:000000000000DC30                 mov     rdi, rdx
.text:000000000000DC33                 mov     r11, 1000000000002500h
.text:000000000000DC3D                 shl     rdi, cl
.text:000000000000DC40                 test    rdi, r11
.text:000000000000DC43                 jnz     short loc_DCB0
.text:000000000000DC45                 test    cl, cl
.text:000000000000DC47                 jz      short loc_DCC0
.text:000000000000DC49                 mov     rcx, 800000000000000h
.text:000000000000DC53                 test    rdi, rcx
.text:000000000000DC56                 jnz     loc_DDB0
.text:000000000000DC5C
.text:000000000000DC5C loc_DC5C:                               ; CODE XREF: __strftime_internal_0+1AE↑j
.text:000000000000DC5C                 lea     edx, [rax-30h]
.text:000000000000DC5F                 cmp     edx, 9
.text:000000000000DC62                 jbe     loc_DDC0
.text:000000000000DC68
.text:000000000000DC68 loc_DC68:                               ; CODE XREF: __strftime_internal_0+372↓j
.text:000000000000DC68                                         ; __strftime_internal_0+3AC↓j
.text:000000000000DC68                 cmp     sil, 45h ; 'E'
.text:000000000000DC6C                 jz      short loc_DC98
.text:000000000000DC6E                 xor     r11d, r11d
.text:000000000000DC71                 cmp     sil, 4Fh ; 'O'
.text:000000000000DC75                 jz      short loc_DC98
.text:000000000000DC77
.text:000000000000DC77 loc_DC77:                               ; CODE XREF: __strftime_internal_0+227↓j
.text:000000000000DC77                 cmp     sil, 7Ah        ; switch 123 cases
.text:000000000000DC7B                 ja      short def_DC8F  ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000DC7D                 lea     rdx, jpt_DC8F
.text:000000000000DC84                 movzx   eax, sil
.text:000000000000DC88                 movsxd  rax, ds:(jpt_DC8F - 14CCCh)[rdx+rax*4]
.text:000000000000DC8C                 add     rax, rdx
.text:000000000000DC8F                 jmp     rax             ; switch jump
.text:000000000000DC8F ; ---------------------------------------------------------------------------
.text:000000000000DC91                 align 8
.text:000000000000DC98
.text:000000000000DC98 loc_DC98:                               ; CODE XREF: __strftime_internal_0+1EC↑j
.text:000000000000DC98                                         ; __strftime_internal_0+1F5↑j
.text:000000000000DC98                 movsx   r9d, byte ptr [rbx+1]
.text:000000000000DC9D                 mov     r11d, eax
.text:000000000000DCA0                 add     rbx, 1
.text:000000000000DCA4                 mov     esi, r9d
.text:000000000000DCA7                 jmp     short loc_DC77
.text:000000000000DCA7 ; ---------------------------------------------------------------------------
.text:000000000000DCA9                 align 10h
.text:000000000000DCB0
.text:000000000000DCB0 loc_DCB0:                               ; CODE XREF: __strftime_internal_0+1C3↑j
.text:000000000000DCB0                 mov     r15d, eax
.text:000000000000DCB3                 jmp     loc_DC1C
.text:000000000000DCB3 ; ---------------------------------------------------------------------------
.text:000000000000DCB8                 align 20h
.text:000000000000DCC0
.text:000000000000DCC0 loc_DCC0:                               ; CODE XREF: __strftime_internal_0+1C7↑j
.text:000000000000DCC0                 mov     r8d, 1
.text:000000000000DCC6                 jmp     loc_DC1C
.text:000000000000DCCB ; ---------------------------------------------------------------------------
.text:000000000000DCCB
.text:000000000000DCCB loc_DCCB:                               ; CODE XREF: __strftime_internal_0+1212↓j
.text:000000000000DCCB                 mov     rbx, r9
.text:000000000000DCCE                 xchg    ax, ax
.text:000000000000DCD0
.text:000000000000DCD0 def_DC8F:                               ; CODE XREF: __strftime_internal_0+1FB↑j
.text:000000000000DCD0                                         ; __strftime_internal_0+20F↑j ...
.text:000000000000DCD0                 lea     rax, [rbx-1]    ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000DCD4                 mov     r8d, 1
.text:000000000000DCDA
.text:000000000000DCDA loc_DCDA:                               ; CODE XREF: __strftime_internal_0+269↓j
.text:000000000000DCDA                 mov     r9, rax
.text:000000000000DCDD                 lea     rax, [rax-1]
.text:000000000000DCE1                 add     r8d, 1
.text:000000000000DCE5                 cmp     byte ptr [rax+1], 25h ; '%'
.text:000000000000DCE9                 jnz     short loc_DCDA
.text:000000000000DCEB                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000DCF0                 mov     eax, 0
.text:000000000000DCF5                 movsxd  r8, r8d
.text:000000000000DCF8                 mov     rcx, r8
.text:000000000000DCFB                 mov     r12, rbx
.text:000000000000DCFE                 sub     rdx, r14
.text:000000000000DD01                 test    r10d, r10d
.text:000000000000DD04                 cmovns  eax, r10d
.text:000000000000DD08                 cdqe
.text:000000000000DD0A                 cmp     rax, r8
.text:000000000000DD0D                 cmovnb  rcx, rax
.text:000000000000DD11
.text:000000000000DD11 loc_DD11:                               ; CODE XREF: __strftime_internal_0+122D↓j
.text:000000000000DD11                                         ; __strftime_internal_0+17E4↓j
.text:000000000000DD11                 cmp     rcx, rdx
.text:000000000000DD14                 jnb     loc_DB4C
.text:000000000000DD1A                 test    rbp, rbp
.text:000000000000DD1D                 jz      loc_DDA5
.text:000000000000DD23                 cmp     rax, r8
.text:000000000000DD26                 jbe     short loc_DD75
.text:000000000000DD28                 movsxd  rdx, r10d
.text:000000000000DD2B                 mov     [rsp+4F8h+var_4B0], r8
.text:000000000000DD30                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000000DD35                 sub     rdx, r8         ; n
.text:000000000000DD38                 cmp     r15d, 30h ; '0'
.text:000000000000DD3C                 mov     qword ptr [rsp+4F8h+var_4C0], r9
.text:000000000000DD41                 lea     rbx, [rbp+rdx+0]
.text:000000000000DD46                 jz      loc_EFB6
.text:000000000000DD4C                 cmp     r15d, 2Bh ; '+'
.text:000000000000DD50                 jz      loc_EFB6
.text:000000000000DD56                 mov     rdi, rbp        ; s
.text:000000000000DD59                 mov     esi, 20h ; ' '  ; c
.text:000000000000DD5E                 mov     rbp, rbx
.text:000000000000DD61                 call    _memset
.text:000000000000DD66                 mov     r8, [rsp+4F8h+var_4B0]
.text:000000000000DD6B                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000DD70                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000DD75
.text:000000000000DD75 loc_DD75:                               ; CODE XREF: __strftime_internal_0+2A6↑j
.text:000000000000DD75                                         ; __strftime_internal_0+1555↓j
.text:000000000000DD75                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000DD7A                 mov     qword ptr [rsp+4F8h+var_4C0], rcx
.text:000000000000DD7F                 mov     rdx, r8         ; n
.text:000000000000DD82                 mov     [rsp+4F8h+var_4C8], r8
.text:000000000000DD87                 mov     rsi, r9         ; src
.text:000000000000DD8A                 mov     rdi, rbp        ; dest
.text:000000000000DD8D                 jz      loc_EF60
.text:000000000000DD93                 call    memcpy_lowcase_0
.text:000000000000DD98                 mov     r8, [rsp+4F8h+var_4C8]
.text:000000000000DD9D                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000DDA2
.text:000000000000DDA2 loc_DDA2:                               ; CODE XREF: __strftime_internal_0+14EF↓j
.text:000000000000DDA2                 add     rbp, r8
.text:000000000000DDA5
.text:000000000000DDA5 loc_DDA5:                               ; CODE XREF: __strftime_internal_0+29D↑j
.text:000000000000DDA5                 add     r14, rcx
.text:000000000000DDA8                 jmp     loc_DBB2
.text:000000000000DDA8 ; ---------------------------------------------------------------------------
.text:000000000000DDAD                 align 10h
.text:000000000000DDB0
.text:000000000000DDB0 loc_DDB0:                               ; CODE XREF: __strftime_internal_0+1D6↑j
.text:000000000000DDB0                 mov     byte ptr [rsp+4F8h+var_4C8], 1
.text:000000000000DDB5                 jmp     loc_DC1C
.text:000000000000DDB5 ; ---------------------------------------------------------------------------
.text:000000000000DDBA                 align 20h
.text:000000000000DDC0
.text:000000000000DDC0 loc_DDC0:                               ; CODE XREF: __strftime_internal_0+1E2↑j
.text:000000000000DDC0                 xor     r10d, r10d
.text:000000000000DDC3
.text:000000000000DDC3 loc_DDC3:                               ; CODE XREF: __strftime_internal_0+36D↓j
.text:000000000000DDC3                 movsx   eax, byte ptr [rbx+1]
.text:000000000000DDC7                 cmp     r10d, 0CCCCCCCh
.text:000000000000DDCE                 lea     rcx, [rbx+1]
.text:000000000000DDD2                 mov     esi, eax
.text:000000000000DDD4                 lea     edx, [rax-30h]
.text:000000000000DDD7                 jg      short loc_DE06
.text:000000000000DDD9                 movsx   edi, byte ptr [rbx]
.text:000000000000DDDC                 jz      short loc_DE00
.text:000000000000DDDE
.text:000000000000DDDE loc_DDDE:                               ; CODE XREF: __strftime_internal_0+384↓j
.text:000000000000DDDE                 lea     r9d, [r10+r10*4]
.text:000000000000DDE2                 mov     rbx, rcx
.text:000000000000DDE5                 lea     r10d, [rdi+r9*2-30h]
.text:000000000000DDEA
.text:000000000000DDEA loc_DDEA:                               ; CODE XREF: __strftime_internal_0+39E↓j
.text:000000000000DDEA                 cmp     edx, 9
.text:000000000000DDED                 jbe     short loc_DDC3
.text:000000000000DDEF                 mov     r9d, eax
.text:000000000000DDF2                 jmp     loc_DC68
.text:000000000000DDF2 ; ---------------------------------------------------------------------------
.text:000000000000DDF7                 align 20h
.text:000000000000DE00
.text:000000000000DE00 loc_DE00:                               ; CODE XREF: __strftime_internal_0+35C↑j
.text:000000000000DE00                 cmp     dil, 37h ; '7'
.text:000000000000DE04                 jle     short loc_DDDE
.text:000000000000DE06
.text:000000000000DE06 loc_DE06:                               ; CODE XREF: __strftime_internal_0+357↑j
.text:000000000000DE06                 cmp     edx, 9
.text:000000000000DE09                 ja      short loc_DE20
.text:000000000000DE0B                 movsx   eax, byte ptr [rbx+2]
.text:000000000000DE0F                 mov     r10d, 7FFFFFFFh
.text:000000000000DE15                 add     rbx, 2
.text:000000000000DE19                 mov     esi, eax
.text:000000000000DE1B                 lea     edx, [rax-30h]
.text:000000000000DE1E                 jmp     short loc_DDEA
.text:000000000000DE20 ; ---------------------------------------------------------------------------
.text:000000000000DE20
.text:000000000000DE20 loc_DE20:                               ; CODE XREF: __strftime_internal_0+389↑j
.text:000000000000DE20                 mov     r9d, eax
.text:000000000000DE23                 mov     rbx, rcx
.text:000000000000DE26                 mov     r10d, 7FFFFFFFh
.text:000000000000DE2C                 jmp     loc_DC68
.text:000000000000DE2C ; ---------------------------------------------------------------------------
.text:000000000000DE31                 align 8
.text:000000000000DE38
.text:000000000000DE38 loc_DE38:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000DE38                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000DE38                 cmp     r11d, 4Fh ; 'O' ; jumptable 000000000000DC8F cases 88,99,120
.text:000000000000DE3C                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000DE42
.text:000000000000DE42 loc_DE42:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000DE42                                         ; __strftime_internal_0+10F6↓j
.text:000000000000DE42                                         ; DATA XREF: ...
.text:000000000000DE42                 xor     r8d, r8d        ; jumptable 000000000000DC8F case 114
.text:000000000000DE45
.text:000000000000DE45 loc_DE45:                               ; CODE XREF: __strftime_internal_0+659↓j
.text:000000000000DE45                                         ; __strftime_internal_0+A27↓j ...
.text:000000000000DE45                 mov     eax, 2520h
.text:000000000000DE4A                 test    r11d, r11d
.text:000000000000DE4D                 mov     word ptr [rsp+4F8h+format], ax
.text:000000000000DE55                 jnz     loc_F52B
.text:000000000000DE5B                 lea     rdx, [rsp+4F8h+format] ; format
.text:000000000000DE63                 mov     r12, rbx
.text:000000000000DE66                 lea     rax, [rdx+2]
.text:000000000000DE6A
.text:000000000000DE6A loc_DE6A:                               ; CODE XREF: __strftime_internal_0+541↓j
.text:000000000000DE6A                                         ; __strftime_internal_0+5B6↓j
.text:000000000000DE6A                 lea     r9, [rsp+4F8h+s]
.text:000000000000DE72                 mov     [rax], sil
.text:000000000000DE75                 mov     byte ptr [rax+1], 0
.text:000000000000DE79                 mov     rcx, r13        ; tp
.text:000000000000DE7C                 mov     esi, 400h       ; maxsize
.text:000000000000DE81                 mov     [rsp+4F8h+var_4C0], r10d
.text:000000000000DE86                 mov     rdi, r9         ; s
.text:000000000000DE89                 mov     byte ptr [rsp+4F8h+var_4A8], r8b
.text:000000000000DE8E                 mov     dword ptr [rsp+4F8h+var_4B0], r11d
.text:000000000000DE93                 mov     [rsp+4F8h+var_4B8], r9
.text:000000000000DE98                 call    _strftime
.text:000000000000DE9D                 test    rax, rax
.text:000000000000DEA0                 jz      loc_DBB2
.text:000000000000DEA6                 movsxd  r10, [rsp+4F8h+var_4C0]
.text:000000000000DEAB                 lea     rcx, [rax-1]
.text:000000000000DEAF                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000DEB4                 mov     eax, 0
.text:000000000000DEB9                 test    r10d, r10d
.text:000000000000DEBC                 cmovns  rax, r10
.text:000000000000DEC0                 cmp     rcx, rax
.text:000000000000DEC3                 mov     rbx, rax
.text:000000000000DEC6                 cmovnb  rbx, rcx
.text:000000000000DECA                 sub     rdx, r14
.text:000000000000DECD                 cmp     rdx, rbx
.text:000000000000DED0                 jbe     loc_DB4C
.text:000000000000DED6                 test    rbp, rbp
.text:000000000000DED9                 jz      loc_DF7E
.text:000000000000DEDF                 mov     r11d, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000DEE4                 mov     r9, [rsp+4F8h+var_4B8]
.text:000000000000DEE9                 movzx   r8d, byte ptr [rsp+4F8h+var_4A8]
.text:000000000000DEEF                 test    r11d, r11d
.text:000000000000DEF2                 jnz     short loc_DF4E
.text:000000000000DEF4                 cmp     rcx, rax
.text:000000000000DEF7                 jnb     short loc_DF4E
.text:000000000000DEF9                 movsxd  rdx, r10d
.text:000000000000DEFC                 mov     [rsp+4F8h+var_4A8], r9
.text:000000000000DF01                 mov     [rsp+4F8h+var_4B0], rcx
.text:000000000000DF06                 sub     rdx, rcx        ; n
.text:000000000000DF09                 cmp     r15d, 30h ; '0'
.text:000000000000DF0D                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:000000000000DF12                 lea     rax, [rbp+rdx+0]
.text:000000000000DF17                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:000000000000DF1C                 jz      loc_EF8F
.text:000000000000DF22                 cmp     r15d, 2Bh ; '+'
.text:000000000000DF26                 jz      loc_EF8F
.text:000000000000DF2C                 mov     rdi, rbp        ; s
.text:000000000000DF2F                 mov     esi, 20h ; ' '  ; c
.text:000000000000DF34                 call    _memset
.text:000000000000DF39                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000DF3F                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000DF44                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000DF49                 mov     rcx, [rsp+4F8h+var_4B0]
.text:000000000000DF4E
.text:000000000000DF4E loc_DF4E:                               ; CODE XREF: __strftime_internal_0+472↑j
.text:000000000000DF4E                                         ; __strftime_internal_0+477↑j ...
.text:000000000000DF4E                 test    r8b, r8b
.text:000000000000DF51                 lea     rsi, [r9+1]
.text:000000000000DF55                 mov     rdx, rcx
.text:000000000000DF58                 jnz     loc_EF78
.text:000000000000DF5E                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000DF63                 mov     rdi, rbp
.text:000000000000DF66                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000DF6B                 jz      loc_E7E1
.text:000000000000DF71
.text:000000000000DF71 loc_DF71:                               ; CODE XREF: __strftime_internal_0+D5B↓j
.text:000000000000DF71                 call    memcpy_lowcase_0
.text:000000000000DF76                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000DF7B
.text:000000000000DF7B loc_DF7B:                               ; CODE XREF: __strftime_internal_0+D6B↓j
.text:000000000000DF7B                                         ; __strftime_internal_0+150A↓j
.text:000000000000DF7B                 add     rbp, rcx
.text:000000000000DF7E
.text:000000000000DF7E loc_DF7E:                               ; CODE XREF: __strftime_internal_0+459↑j
.text:000000000000DF7E                                         ; __strftime_internal_0+CEB↓j
.text:000000000000DF7E                 add     r14, rbx
.text:000000000000DF81                 jmp     loc_DBB2
.text:000000000000DF86 ; ---------------------------------------------------------------------------
.text:000000000000DF86
.text:000000000000DF86 loc_DF86:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000DF86                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000DF86                 test    r11d, r11d      ; jumptable 000000000000DC8F cases 65,97
.text:000000000000DF89                 jnz     def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000DF8F                 movzx   eax, byte ptr [rsp+4F8h+var_4C8]
.text:000000000000DF94                 test    r8b, r8b
.text:000000000000DF97                 lea     rdx, [rsp+4F8h+format]
.text:000000000000DF9F                 mov     r12, rbx
.text:000000000000DFA2                 cmovnz  eax, r8d
.text:000000000000DFA6                 xor     r8d, r8d
.text:000000000000DFA9                 xor     r11d, r11d
.text:000000000000DFAC                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000DFB0                 mov     eax, 2520h
.text:000000000000DFB5                 mov     word ptr [rsp+4F8h+format], ax
.text:000000000000DFBD                 lea     rax, [rdx+2]
.text:000000000000DFC1                 jmp     loc_DE6A
.text:000000000000DFC6 ; ---------------------------------------------------------------------------
.text:000000000000DFC6
.text:000000000000DFC6 loc_DFC6:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000DFC6                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000DFC6                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 83
.text:000000000000DFCA                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000DFD0                 mov     ecx, [r13+0]
.text:000000000000DFD4                 mov     edi, 2
.text:000000000000DFD9                 nop     dword ptr [rax+00000000h]
.text:000000000000DFE0
.text:000000000000DFE0 loc_DFE0:                               ; CODE XREF: __strftime_internal_0+852↓j
.text:000000000000DFE0                                         ; __strftime_internal_0+1047↓j ...
.text:000000000000DFE0                 mov     eax, ecx
.text:000000000000DFE2                 xor     esi, esi
.text:000000000000DFE4                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000DFE9                 shr     eax, 1Fh
.text:000000000000DFEC                 mov     [rsp+4F8h+var_4C0], eax
.text:000000000000DFF0                 mov     eax, ecx
.text:000000000000DFF2                 not     eax
.text:000000000000DFF4                 shr     eax, 1Fh
.text:000000000000DFF7
.text:000000000000DFF7 loc_DFF7:                               ; CODE XREF: __strftime_internal_0+8AB↓j
.text:000000000000DFF7                                         ; __strftime_internal_0+A02↓j ...
.text:000000000000DFF7                 cmp     r11d, 4Fh ; 'O'
.text:000000000000DFFB                 jnz     loc_EE80
.text:000000000000E001                 test    al, al
.text:000000000000E003                 jz      loc_EE80
.text:000000000000E009                 mov     esi, r9d
.text:000000000000E00C
.text:000000000000E00C loc_E00C:                               ; CODE XREF: __strftime_internal_0+B0D↓j
.text:000000000000E00C                                         ; __strftime_internal_0+158C↓j
.text:000000000000E00C                 mov     edx, 2520h
.text:000000000000E011                 xor     r8d, r8d
.text:000000000000E014                 mov     word ptr [rsp+4F8h+format], dx
.text:000000000000E01C
.text:000000000000E01C loc_E01C:                               ; CODE XREF: __strftime_internal_0+1AAD↓j
.text:000000000000E01C                 lea     rdx, [rsp+4F8h+format]
.text:000000000000E024                 mov     [rsp+4F8h+var_44B], r11b
.text:000000000000E02C                 mov     r12, rbx
.text:000000000000E02F                 mov     r11d, edi
.text:000000000000E032                 lea     rax, [rdx+3]
.text:000000000000E036                 jmp     loc_DE6A
.text:000000000000E03B ; ---------------------------------------------------------------------------
.text:000000000000E03B
.text:000000000000E03B loc_E03B:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E03B                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E03B                 test    r10d, r10d      ; jumptable 000000000000DC8F case 116
.text:000000000000E03E                 mov     ecx, 0
.text:000000000000E043                 mov     eax, 1
.text:000000000000E048                 cmovns  ecx, r10d
.text:000000000000E04C                 movsxd  rcx, ecx
.text:000000000000E04F                 test    rcx, rcx
.text:000000000000E052                 cmovz   rcx, rax
.text:000000000000E056                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000000E05B                 sub     rax, r14
.text:000000000000E05E                 cmp     rax, rcx
.text:000000000000E061                 jbe     loc_DB4C
.text:000000000000E067                 test    rbp, rbp
.text:000000000000E06A                 jz      short loc_E0B8
.text:000000000000E06C                 cmp     r10d, 1
.text:000000000000E070                 jle     short loc_E0AC
.text:000000000000E072                 movsxd  rdx, r10d
.text:000000000000E075                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000E07A                 sub     rdx, 1          ; n
.text:000000000000E07E                 cmp     r15d, 30h ; '0'
.text:000000000000E082                 lea     r12, [rbp+rdx+0]
.text:000000000000E087                 jz      loc_F3A4
.text:000000000000E08D                 cmp     r15d, 2Bh ; '+'
.text:000000000000E091                 jz      loc_F3A4
.text:000000000000E097                 mov     rdi, rbp        ; s
.text:000000000000E09A                 mov     esi, 20h ; ' '  ; c
.text:000000000000E09F                 mov     rbp, r12
.text:000000000000E0A2                 call    _memset
.text:000000000000E0A7                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000E0AC
.text:000000000000E0AC loc_E0AC:                               ; CODE XREF: __strftime_internal_0+5F0↑j
.text:000000000000E0AC                                         ; __strftime_internal_0+1939↓j
.text:000000000000E0AC                 mov     byte ptr [rbp+0], 9
.text:000000000000E0B0                 add     rbp, 1
.text:000000000000E0B4                 nop     dword ptr [rax+00h]
.text:000000000000E0B8
.text:000000000000E0B8 loc_E0B8:                               ; CODE XREF: __strftime_internal_0+5EA↑j
.text:000000000000E0B8                                         ; __strftime_internal_0+7B5↓j ...
.text:000000000000E0B8                 add     r14, rcx
.text:000000000000E0BB                 mov     r12, rbx
.text:000000000000E0BE                 jmp     loc_DBB2
.text:000000000000E0C3 ; ---------------------------------------------------------------------------
.text:000000000000E0C3
.text:000000000000E0C3 loc_E0C3:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E0C3                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E0C3                 mov     eax, 1          ; jumptable 000000000000DC8F case 80
.text:000000000000E0C8
.text:000000000000E0C8 loc_E0C8:                               ; CODE XREF: __strftime_internal_0+13A1↓j
.text:000000000000E0C8                 test    r8b, r8b
.text:000000000000E0CB                 jnz     loc_EFFB
.text:000000000000E0D1                 mov     r8d, eax
.text:000000000000E0D4                 mov     esi, 70h ; 'p'
.text:000000000000E0D9                 jmp     loc_DE45
.text:000000000000E0DE ; ---------------------------------------------------------------------------
.text:000000000000E0DE
.text:000000000000E0DE loc_E0DE:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E0DE                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E0DE                 lea     rax, aHM        ; jumptable 000000000000DC8F case 82
.text:000000000000E0E5                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:000000000000E0ED                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000E0F2
.text:000000000000E0F2 loc_E0F2:                               ; CODE XREF: __strftime_internal_0+81F↓j
.text:000000000000E0F2                                         ; __strftime_internal_0+11B2↓j ...
.text:000000000000E0F2                 movzx   r8d, byte ptr [rsp+4F8h+var_4C8]
.text:000000000000E0F8                 mov     eax, [rsp+4F8h+arg_18]
.text:000000000000E0FF                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000E106                 mov     dword ptr [rsp+4F8h+var_4B0], r10d
.text:000000000000E10B                 xor     edi, edi        ; s
.text:000000000000E10D                 mov     r9d, r15d
.text:000000000000E110                 mov     rcx, r13
.text:000000000000E113                 mov     dword ptr [rsp+4F8h+var_4C8], r8d
.text:000000000000E118                 push    rax             ; int
.text:000000000000E119                 push    [rsp+500h+var_4E8] ; __int64
.text:000000000000E11D                 push    [rsp+508h+var_4E0] ; __int64
.text:000000000000E121                 mov     eax, [rsp+510h+var_4C0]
.text:000000000000E125                 push    rax             ; int
.text:000000000000E126                 mov     rdx, [rsp+518h+var_4B8]
.text:000000000000E12B                 call    __strftime_internal_0
.text:000000000000E130                 add     rsp, 20h
.text:000000000000E134                 movsxd  r10, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000E139                 mov     r11, rax
.text:000000000000E13C                 mov     rsi, [rsp+4F8h+var_4F0]
.text:000000000000E141                 mov     eax, 0
.text:000000000000E146                 test    r10d, r10d
.text:000000000000E149                 cmovns  rax, r10
.text:000000000000E14D                 cmp     r11, rax
.text:000000000000E150                 mov     r12, rax
.text:000000000000E153                 cmovnb  r12, r11
.text:000000000000E157                 sub     rsi, r14
.text:000000000000E15A                 cmp     rsi, r12
.text:000000000000E15D                 mov     [rsp+4F8h+var_4B0], rsi
.text:000000000000E162                 jbe     loc_DB4C
.text:000000000000E168                 test    rbp, rbp
.text:000000000000E16B                 jz      loc_DBAC
.text:000000000000E171                 cmp     r11, rax
.text:000000000000E174                 jnb     short loc_E1B6
.text:000000000000E176                 movsxd  rdx, r10d
.text:000000000000E179                 mov     [rsp+4F8h+var_4A0], r11
.text:000000000000E17E                 sub     rdx, r11        ; n
.text:000000000000E181                 cmp     r15d, 30h ; '0'
.text:000000000000E185                 lea     rax, [rbp+rdx+0]
.text:000000000000E18A                 mov     [rsp+4F8h+var_4A8], rax
.text:000000000000E18F                 jz      loc_F28C
.text:000000000000E195                 cmp     r15d, 2Bh ; '+'
.text:000000000000E199                 jz      loc_F28C
.text:000000000000E19F                 mov     rdi, rbp        ; s
.text:000000000000E1A2                 mov     esi, 20h ; ' '  ; c
.text:000000000000E1A7                 call    _memset
.text:000000000000E1AC                 mov     rbp, [rsp+4F8h+var_4A8]
.text:000000000000E1B1                 mov     r11, [rsp+4F8h+var_4A0]
.text:000000000000E1B6
.text:000000000000E1B6 loc_E1B6:                               ; CODE XREF: __strftime_internal_0+6F4↑j
.text:000000000000E1B6                                         ; __strftime_internal_0+1823↓j
.text:000000000000E1B6                 mov     eax, [rsp+4F8h+arg_18]
.text:000000000000E1BD                 mov     [rsp+4F8h+var_4A8], r11
.text:000000000000E1C2                 mov     rdi, rbp        ; s
.text:000000000000E1C5                 mov     r9d, r15d
.text:000000000000E1C8                 mov     rcx, r13
.text:000000000000E1CB                 push    rax             ; int
.text:000000000000E1CC                 push    [rsp+500h+var_4E8] ; __int64
.text:000000000000E1D0                 push    [rsp+508h+var_4E0] ; __int64
.text:000000000000E1D4                 mov     eax, [rsp+510h+var_4C0]
.text:000000000000E1D8                 push    rax             ; int
.text:000000000000E1D9                 mov     r8d, dword ptr [rsp+518h+var_4C8]
.text:000000000000E1DE                 mov     rdx, [rsp+518h+var_4B8]
.text:000000000000E1E3                 mov     rsi, [rsp+518h+var_4B0]
.text:000000000000E1E8                 call    __strftime_internal_0
.text:000000000000E1ED                 mov     r11, [rsp+518h+var_4A8]
.text:000000000000E1F2                 add     rsp, 20h
.text:000000000000E1F6                 add     rbp, r11
.text:000000000000E1F9                 jmp     loc_DBAC
.text:000000000000E1FE ; ---------------------------------------------------------------------------
.text:000000000000E1FE
.text:000000000000E1FE loc_E1FE:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E1FE                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E1FE                 mov     rdx, [rsp+4F8h+var_4F0] ; jumptable 000000000000DC8F case 37
.text:000000000000E203                 mov     eax, 0
.text:000000000000E208                 mov     ecx, 1
.text:000000000000E20D                 sub     rdx, r14
.text:000000000000E210                 test    r10d, r10d
.text:000000000000E213                 cmovns  eax, r10d
.text:000000000000E217                 cdqe
.text:000000000000E219                 test    rax, rax
.text:000000000000E21C                 cmovnz  rcx, rax
.text:000000000000E220                 test    r11d, r11d
.text:000000000000E223                 jnz     loc_F258
.text:000000000000E229                 cmp     rcx, rdx
.text:000000000000E22C                 jnb     loc_DB4C
.text:000000000000E232                 test    rbp, rbp
.text:000000000000E235                 jz      loc_E0B8
.text:000000000000E23B                 cmp     r10d, 1
.text:000000000000E23F                 jle     short loc_E27E
.text:000000000000E241                 movsxd  rdx, r10d
.text:000000000000E244                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000E249                 sub     rdx, 1          ; n
.text:000000000000E24D                 cmp     r15d, 30h ; '0'
.text:000000000000E251                 lea     r12, [rbp+rdx+0]
.text:000000000000E256                 jz      loc_F4C5
.text:000000000000E25C                 cmp     r15d, 2Bh ; '+'
.text:000000000000E260                 mov     esi, 20h ; ' '  ; c
.text:000000000000E265                 jz      loc_F4C5
.text:000000000000E26B
.text:000000000000E26B loc_E26B:                               ; CODE XREF: __strftime_internal_0+1A4A↓j
.text:000000000000E26B                 mov     rdi, rbp        ; s
.text:000000000000E26E                 mov     rbp, r12
.text:000000000000E271                 call    _memset
.text:000000000000E276                 movzx   esi, byte ptr [rbx]
.text:000000000000E279                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000E27E
.text:000000000000E27E loc_E27E:                               ; CODE XREF: __strftime_internal_0+7BF↑j
.text:000000000000E27E                 mov     [rbp+0], sil
.text:000000000000E282                 add     rbp, 1
.text:000000000000E286                 jmp     loc_E0B8
.text:000000000000E28B ; ---------------------------------------------------------------------------
.text:000000000000E28B
.text:000000000000E28B loc_E28B:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E28B                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E28B                 lea     rax, aHMS       ; jumptable 000000000000DC8F case 84
.text:000000000000E292                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:000000000000E29A                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000E29F                 jmp     loc_E0F2
.text:000000000000E2A4 ; ---------------------------------------------------------------------------
.text:000000000000E2A4
.text:000000000000E2A4 loc_E2A4:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E2A4                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E2A4                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 85
.text:000000000000E2A8                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000E2AE                 mov     esi, [r13+1Ch]
.text:000000000000E2B2                 sub     esi, [r13+18h]
.text:000000000000E2B6                 mov     edx, 92492493h
.text:000000000000E2BB                 add     esi, 7
.text:000000000000E2BE                 mov     eax, esi
.text:000000000000E2C0                 imul    edx
.text:000000000000E2C2
.text:000000000000E2C2 loc_E2C2:                               ; CODE XREF: __strftime_internal_0+10D9↓j
.text:000000000000E2C2                 lea     ecx, [rdx+rsi]
.text:000000000000E2C5                 sar     esi, 1Fh
.text:000000000000E2C8                 mov     edi, 2
.text:000000000000E2CD                 sar     ecx, 2
.text:000000000000E2D0                 sub     ecx, esi
.text:000000000000E2D2                 jmp     loc_DFE0
.text:000000000000E2D7 ; ---------------------------------------------------------------------------
.text:000000000000E2D7
.text:000000000000E2D7 loc_E2D7:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E2D7                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E2D7                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 89
.text:000000000000E2DB                 jz      loc_F00A
.text:000000000000E2E1                 cmp     r11d, 4Fh ; 'O'
.text:000000000000E2E5                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000E2EB                 mov     eax, [r13+14h]
.text:000000000000E2EF                 cmp     eax, 0FFFFF894h
.text:000000000000E2F4                 lea     ecx, [rax+76Ch]
.text:000000000000E2FA                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000E2FF                 cmp     eax, 0FFFFF894h
.text:000000000000E304                 setnl   al
.text:000000000000E307                 test    r15d, r15d
.text:000000000000E30A                 jnz     loc_F189
.text:000000000000E310
.text:000000000000E310 loc_E310:                               ; CODE XREF: __strftime_internal_0+1703↓j
.text:000000000000E310                 mov     r15d, [rsp+4F8h+var_4CC]
.text:000000000000E315                 cmp     r15d, 2Bh ; '+'
.text:000000000000E319                 jz      loc_F193
.text:000000000000E31F
.text:000000000000E31F loc_E31F:                               ; CODE XREF: __strftime_internal_0+170D↓j
.text:000000000000E31F                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000E324                 mov     edi, 4
.text:000000000000E329
.text:000000000000E329 loc_E329:                               ; CODE XREF: __strftime_internal_0+117A↓j
.text:000000000000E329                 xor     esi, esi
.text:000000000000E32B                 jmp     loc_DFF7
.text:000000000000E330 ; ---------------------------------------------------------------------------
.text:000000000000E330
.text:000000000000E330 loc_E330:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E330                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E330                 movzx   esi, byte ptr [rsp+4F8h+var_4C8] ; jumptable 000000000000DC8F case 90
.text:000000000000E335                 mov     rdi, [rsp+4F8h+var_4D8] ; s
.text:000000000000E33A                 test    r8b, r8b
.text:000000000000E33D                 mov     eax, 0
.text:000000000000E342                 mov     [rsp+4F8h+var_4C0], r10d
.text:000000000000E347                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:000000000000E34C                 cmovnz  esi, eax
.text:000000000000E34F                 mov     byte ptr [rsp+4F8h+var_4C8], sil
.text:000000000000E354                 call    _strlen
.text:000000000000E359                 movsxd  r10, [rsp+4F8h+var_4C0]
.text:000000000000E35E                 mov     r12, rax
.text:000000000000E361                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000E366                 mov     eax, 0
.text:000000000000E36B                 test    r10d, r10d
.text:000000000000E36E                 cmovns  rax, r10
.text:000000000000E372                 cmp     r12, rax
.text:000000000000E375                 mov     rcx, rax
.text:000000000000E378                 cmovnb  rcx, r12
.text:000000000000E37C                 sub     rdx, r14
.text:000000000000E37F                 cmp     rdx, rcx
.text:000000000000E382                 jbe     loc_DB4C
.text:000000000000E388                 test    rbp, rbp
.text:000000000000E38B                 jz      loc_E0B8
.text:000000000000E391                 cmp     r12, rax
.text:000000000000E394                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000E39A                 jnb     short loc_E3E7
.text:000000000000E39C                 movsxd  rdx, r10d
.text:000000000000E39F                 mov     [rsp+4F8h+var_4B0], rcx
.text:000000000000E3A4                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:000000000000E3A9                 sub     rdx, r12        ; n
.text:000000000000E3AC                 cmp     r15d, 30h ; '0'
.text:000000000000E3B0                 lea     rax, [rbp+rdx+0]
.text:000000000000E3B5                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:000000000000E3BA                 jz      loc_F47F
.text:000000000000E3C0                 cmp     r15d, 2Bh ; '+'
.text:000000000000E3C4                 jz      loc_F47F
.text:000000000000E3CA                 mov     rdi, rbp        ; s
.text:000000000000E3CD                 mov     esi, 20h ; ' '  ; c
.text:000000000000E3D2                 call    _memset
.text:000000000000E3D7                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000E3DD                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000E3E2                 mov     rcx, [rsp+4F8h+var_4B0]
.text:000000000000E3E7
.text:000000000000E3E7 loc_E3E7:                               ; CODE XREF: __strftime_internal_0+91A↑j
.text:000000000000E3E7                                         ; __strftime_internal_0+1A1C↓j
.text:000000000000E3E7                 test    r8b, r8b
.text:000000000000E3EA                 jnz     loc_F3E7
.text:000000000000E3F0                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000E3F5                 mov     rdx, r12        ; n
.text:000000000000E3F8                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000E3FD                 mov     rsi, [rsp+4F8h+var_4D8] ; src
.text:000000000000E402                 mov     rdi, rbp        ; dest
.text:000000000000E405                 jz      loc_F3D8
.text:000000000000E40B                 call    memcpy_lowcase_0
.text:000000000000E410                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000E415
.text:000000000000E415 loc_E415:                               ; CODE XREF: __strftime_internal_0+1962↓j
.text:000000000000E415                                         ; __strftime_internal_0+1981↓j
.text:000000000000E415                 add     rbp, r12
.text:000000000000E418                 jmp     loc_E0B8
.text:000000000000E41D ; ---------------------------------------------------------------------------
.text:000000000000E41D
.text:000000000000E41D loc_E41D:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E41D                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E41D                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 121
.text:000000000000E421                 jz      loc_F00A
.text:000000000000E427                 mov     esi, [r13+14h]
.text:000000000000E42B                 mov     edx, 51EB851Fh
.text:000000000000E430                 mov     eax, esi
.text:000000000000E432                 imul    edx
.text:000000000000E434                 mov     eax, esi
.text:000000000000E436                 sar     eax, 1Fh
.text:000000000000E439                 mov     ecx, edx
.text:000000000000E43B                 sar     ecx, 5
.text:000000000000E43E                 sub     ecx, eax
.text:000000000000E440                 mov     eax, esi
.text:000000000000E442                 imul    ecx, 64h ; 'd'
.text:000000000000E445                 sub     eax, ecx
.text:000000000000E447                 mov     ecx, eax
.text:000000000000E449                 jns     short loc_E459
.text:000000000000E44B                 neg     eax
.text:000000000000E44D                 add     ecx, 64h ; 'd'
.text:000000000000E450                 cmp     esi, 0FFFFF893h
.text:000000000000E456                 cmovle  ecx, eax
.text:000000000000E459
.text:000000000000E459 loc_E459:                               ; CODE XREF: __strftime_internal_0+9C9↑j
.text:000000000000E459                                         ; __strftime_internal_0+FE9↓j
.text:000000000000E459                 test    r15d, r15d
.text:000000000000E45C                 jz      loc_EA8A
.text:000000000000E462
.text:000000000000E462 loc_E462:                               ; CODE XREF: __strftime_internal_0+1004↓j
.text:000000000000E462                                         ; __strftime_internal_0+1AA6↓j
.text:000000000000E462                 mov     eax, 1
.text:000000000000E467                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000E46C
.text:000000000000E46C loc_E46C:                               ; CODE XREF: __strftime_internal_0+114D↓j
.text:000000000000E46C                 cmp     r15d, 2Bh ; '+'
.text:000000000000E470                 jz      loc_EBE3
.text:000000000000E476
.text:000000000000E476 loc_E476:                               ; CODE XREF: __strftime_internal_0+115D↓j
.text:000000000000E476                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000E47B                 mov     edi, 2
.text:000000000000E480                 xor     esi, esi
.text:000000000000E482                 jmp     loc_DFF7
.text:000000000000E487 ; ---------------------------------------------------------------------------
.text:000000000000E487
.text:000000000000E487 loc_E487:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E487                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E487                 movzx   eax, byte ptr [rsp+4F8h+var_4C8] ; jumptable 000000000000DC8F cases 98,104
.text:000000000000E48C                 test    r8b, r8b
.text:000000000000E48F                 cmovnz  eax, r8d
.text:000000000000E493                 cmp     r11d, 45h ; 'E'
.text:000000000000E497                 jz      loc_F406
.text:000000000000E49D                 mov     esi, r9d
.text:000000000000E4A0                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000E4A4                 xor     r8d, r8d
.text:000000000000E4A7                 jmp     loc_DE45
.text:000000000000E4AC ; ---------------------------------------------------------------------------
.text:000000000000E4AC
.text:000000000000E4AC loc_E4AC:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E4AC                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E4AC                 xor     r8d, r8d        ; jumptable 000000000000DC8F case 122
.text:000000000000E4AF
.text:000000000000E4AF loc_E4AF:                               ; CODE XREF: __strftime_internal_0+E98↓j
.text:000000000000E4AF                 mov     ecx, [r13+20h]
.text:000000000000E4B3                 test    ecx, ecx
.text:000000000000E4B5                 js      loc_F15E
.text:000000000000E4BB                 mov     rcx, [r13+28h]
.text:000000000000E4BF                 mov     byte ptr [rsp+4F8h+var_4C0], 1
.text:000000000000E4C4                 test    ecx, ecx
.text:000000000000E4C6                 js      short loc_E4DC
.text:000000000000E4C8                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000E4CD                 jnz     short loc_E4DC
.text:000000000000E4CF                 mov     rax, [rsp+4F8h+var_4D8]
.text:000000000000E4D4                 cmp     byte ptr [rax], 2Dh ; '-'
.text:000000000000E4D7                 setz    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000E4DC
.text:000000000000E4DC loc_E4DC:                               ; CODE XREF: __strftime_internal_0+A46↑j
.text:000000000000E4DC                                         ; __strftime_internal_0+A4D↑j
.text:000000000000E4DC                 mov     eax, ecx
.text:000000000000E4DE                 mov     edx, 91A2B3C5h
.text:000000000000E4E3                 mov     esi, 88888889h
.text:000000000000E4E8                 imul    edx
.text:000000000000E4EA                 mov     eax, ecx
.text:000000000000E4EC                 sar     eax, 1Fh
.text:000000000000E4EF                 mov     dword ptr [rsp+4F8h+var_4B8], eax
.text:000000000000E4F3                 lea     r12d, [rdx+rcx]
.text:000000000000E4F7                 sar     r12d, 0Bh
.text:000000000000E4FB                 sub     r12d, eax
.text:000000000000E4FE                 mov     eax, ecx
.text:000000000000E500                 imul    esi
.text:000000000000E502                 lea     edi, [rdx+rcx]
.text:000000000000E505                 sar     edi, 5
.text:000000000000E508                 sub     edi, dword ptr [rsp+4F8h+var_4B8]
.text:000000000000E50C                 mov     eax, edi
.text:000000000000E50E                 imul    esi
.text:000000000000E510                 mov     eax, edi
.text:000000000000E512                 sar     eax, 1Fh
.text:000000000000E515                 lea     esi, [rdx+rdi]
.text:000000000000E518                 sar     esi, 5
.text:000000000000E51B                 sub     esi, eax
.text:000000000000E51D                 mov     eax, edi
.text:000000000000E51F                 imul    esi, 3Ch ; '<'
.text:000000000000E522                 imul    edi, 3Ch ; '<'
.text:000000000000E525                 sub     eax, esi
.text:000000000000E527                 sub     ecx, edi
.text:000000000000E529                 cmp     r8, 1
.text:000000000000E52D                 mov     esi, eax
.text:000000000000E52F                 jz      loc_F382
.text:000000000000E535                 jb      loc_F460
.text:000000000000E53B                 cmp     r8, 2
.text:000000000000E53F                 jz      loc_F335
.text:000000000000E545                 cmp     r8, 3
.text:000000000000E549                 jnz     loc_F40F
.text:000000000000E54F                 test    ecx, ecx
.text:000000000000E551                 jnz     loc_F335
.text:000000000000E557                 test    eax, eax
.text:000000000000E559                 jnz     loc_F382
.text:000000000000E55F                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000E564                 mov     ecx, r12d
.text:000000000000E567                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000E56C                 mov     edi, 3
.text:000000000000E571                 xor     eax, 1
.text:000000000000E574                 jmp     loc_DFF7
.text:000000000000E574 ; ---------------------------------------------------------------------------
.text:000000000000E579                 align 20h
.text:000000000000E580
.text:000000000000E580 loc_E580:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E580                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E580                 cmp     r11d, 4Fh ; 'O' ; jumptable 000000000000DC8F case 113
.text:000000000000E584                 mov     eax, [r13+10h]
.text:000000000000E588                 mov     edi, 1
.text:000000000000E58D                 jz      loc_E00C
.text:000000000000E593                 lea     edx, [rax+rax*4]
.text:000000000000E596                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000E59B                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000E5A0                 xor     esi, esi
.text:000000000000E5A2                 lea     ecx, [rax+rdx*2]
.text:000000000000E5A5                 sar     ecx, 5
.text:000000000000E5A8                 add     ecx, 1
.text:000000000000E5AB                 nop     dword ptr [rax+rax+00h]
.text:000000000000E5B0
.text:000000000000E5B0 loc_E5B0:                               ; CODE XREF: __strftime_internal_0+140C↓j
.text:000000000000E5B0                 lea     r9, [rsp+4F8h+s]
.text:000000000000E5B8                 mov     r12d, 0CCCCCCCDh
.text:000000000000E5BE                 lea     r11, [r9+17h]
.text:000000000000E5C2                 nop     word ptr [rax+rax+00h]
.text:000000000000E5C8
.text:000000000000E5C8 loc_E5C8:                               ; CODE XREF: __strftime_internal_0+B82↓j
.text:000000000000E5C8                 test    sil, 1
.text:000000000000E5CC                 lea     r8, [r11-1]
.text:000000000000E5D0                 jz      short loc_E5E1
.text:000000000000E5D2                 lea     rax, [r11-2]
.text:000000000000E5D6                 mov     byte ptr [r11-1], 3Ah ; ':'
.text:000000000000E5DB                 mov     r11, r8
.text:000000000000E5DE                 mov     r8, rax
.text:000000000000E5E1
.text:000000000000E5E1 loc_E5E1:                               ; CODE XREF: __strftime_internal_0+B50↑j
.text:000000000000E5E1                 mov     eax, ecx
.text:000000000000E5E3                 sar     esi, 1
.text:000000000000E5E5                 mul     r12d
.text:000000000000E5E8                 shr     edx, 3
.text:000000000000E5EB                 lea     eax, [rdx+rdx*4]
.text:000000000000E5EE                 add     eax, eax
.text:000000000000E5F0                 sub     ecx, eax
.text:000000000000E5F2                 mov     eax, esi
.text:000000000000E5F4                 add     ecx, 30h ; '0'
.text:000000000000E5F7                 or      eax, edx
.text:000000000000E5F9                 mov     [r11-1], cl
.text:000000000000E5FD                 mov     ecx, edx
.text:000000000000E5FF                 mov     r11, r8
.text:000000000000E602                 jnz     short loc_E5C8
.text:000000000000E604                 cmp     r10d, edi
.text:000000000000E607                 cmovge  edi, r10d
.text:000000000000E60B                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000E610                 mov     dword ptr [rsp+4F8h+var_4B0], edi
.text:000000000000E614                 jnz     loc_EE98
.text:000000000000E61A                 cmp     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000E61F                 jz      loc_E8B9
.text:000000000000E625                 cmp     r15d, 2Dh ; '-'
.text:000000000000E629                 jz      loc_F153
.text:000000000000E62F                 mov     byte ptr [rsp+4F8h+var_4C0], 2Bh ; '+'
.text:000000000000E634
.text:000000000000E634 loc_E634:                               ; CODE XREF: __strftime_internal_0+1421↓j
.text:000000000000E634                 mov     eax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000E638                 lea     rcx, [r9+17h]
.text:000000000000E63C                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000E641                 sub     rcx, r8
.text:000000000000E644                 lea     r12d, [rax-1]
.text:000000000000E648                 sub     rdx, r14
.text:000000000000E64B                 sub     r12d, ecx
.text:000000000000E64E                 test    r12d, r12d
.text:000000000000E651                 jle     loc_F09C
.text:000000000000E657                 cmp     r15d, 5Fh ; '_'
.text:000000000000E65B                 jz      loc_F016
.text:000000000000E661                 movsxd  rax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000E666                 cmp     rax, rdx
.text:000000000000E669                 mov     rdi, rax
.text:000000000000E66C                 jnb     loc_DB4C
.text:000000000000E672                 test    r10d, r10d
.text:000000000000E675                 mov     eax, 0
.text:000000000000E67A                 mov     esi, 1
.text:000000000000E67F                 cmovns  eax, r10d
.text:000000000000E683                 cdqe
.text:000000000000E685                 test    rax, rax
.text:000000000000E688                 cmovnz  rsi, rax
.text:000000000000E68C                 cmp     rsi, rdx
.text:000000000000E68F                 jnb     loc_DB4C
.text:000000000000E695                 add     r14, rsi
.text:000000000000E698                 test    rbp, rbp
.text:000000000000E69B                 movsxd  r9, r12d
.text:000000000000E69E                 mov     r12, rbx
.text:000000000000E6A1                 jz      loc_E744
.text:000000000000E6A7                 test    edi, edi
.text:000000000000E6A9                 jnz     short loc_E6FF
.text:000000000000E6AB                 cmp     rax, 1
.text:000000000000E6AF                 jbe     short loc_E6FF
.text:000000000000E6B1                 movsxd  rdx, r10d
.text:000000000000E6B4                 mov     [rsp+4F8h+var_4A0], r8
.text:000000000000E6B9                 mov     [rsp+4F8h+var_4A8], r9
.text:000000000000E6BE                 sub     rdx, 1          ; n
.text:000000000000E6C2                 cmp     r15d, 30h ; '0'
.text:000000000000E6C6                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000000E6CB                 lea     r12, [rbp+rdx+0]
.text:000000000000E6D0                 jz      loc_F4A1
.text:000000000000E6D6                 cmp     r15d, 2Bh ; '+'
.text:000000000000E6DA                 jz      loc_F4A1
.text:000000000000E6E0                 mov     rdi, rbp        ; s
.text:000000000000E6E3                 mov     esi, 20h ; ' '  ; c
.text:000000000000E6E8                 mov     rbp, r12
.text:000000000000E6EB                 call    _memset
.text:000000000000E6F0                 mov     r8, [rsp+4F8h+var_4A0]
.text:000000000000E6F5                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000E6FA                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000E6FF
.text:000000000000E6FF loc_E6FF:                               ; CODE XREF: __strftime_internal_0+C29↑j
.text:000000000000E6FF                                         ; __strftime_internal_0+C2F↑j ...
.text:000000000000E6FF                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000E704                 add     rbp, 1
.text:000000000000E708                 mov     r12, rbx
.text:000000000000E70B                 mov     [rbp-1], al
.text:000000000000E70E
.text:000000000000E70E loc_E70E:                               ; CODE XREF: __strftime_internal_0+1807↓j
.text:000000000000E70E                 test    rbp, rbp
.text:000000000000E711                 jz      short loc_E744
.text:000000000000E713                 mov     rdx, r9         ; n
.text:000000000000E716                 mov     rdi, rbp        ; s
.text:000000000000E719                 mov     esi, 30h ; '0'  ; c
.text:000000000000E71E                 mov     [rsp+4F8h+var_4A8], r8
.text:000000000000E723                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000000E728                 mov     qword ptr [rsp+4F8h+var_4C0], r9
.text:000000000000E72D                 call    _memset
.text:000000000000E732                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000E737                 mov     r8, [rsp+4F8h+var_4A8]
.text:000000000000E73C                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000E741                 add     rbp, r9
.text:000000000000E744
.text:000000000000E744 loc_E744:                               ; CODE XREF: __strftime_internal_0+C21↑j
.text:000000000000E744                                         ; __strftime_internal_0+C91↑j
.text:000000000000E744                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000E749                 add     r14, r9
.text:000000000000E74C                 xor     r11d, r11d
.text:000000000000E74F                 xor     r10d, r10d
.text:000000000000E752                 sub     rdx, r14
.text:000000000000E755
.text:000000000000E755 loc_E755:                               ; CODE XREF: __strftime_internal_0+E72↓j
.text:000000000000E755                                         ; __strftime_internal_0+14D7↓j ...
.text:000000000000E755                 cmp     rcx, r11
.text:000000000000E758                 mov     rbx, r11
.text:000000000000E75B                 cmovnb  rbx, rcx
.text:000000000000E75F                 cmp     rbx, rdx
.text:000000000000E762                 jnb     loc_DB4C
.text:000000000000E768                 test    rbp, rbp
.text:000000000000E76B                 jz      loc_DF7E
.text:000000000000E771                 mov     esi, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000E775                 test    esi, esi
.text:000000000000E777                 jnz     short loc_E7C8
.text:000000000000E779                 cmp     rcx, r11
.text:000000000000E77C                 jnb     short loc_E7C8
.text:000000000000E77E                 movsxd  rdx, r10d
.text:000000000000E781                 mov     [rsp+4F8h+var_4B0], r8
.text:000000000000E786                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000000E78B                 sub     rdx, rcx        ; n
.text:000000000000E78E                 cmp     r15d, 30h ; '0'
.text:000000000000E792                 lea     rax, [rbp+rdx+0]
.text:000000000000E797                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:000000000000E79C                 jz      loc_EFDA
.text:000000000000E7A2                 cmp     r15d, 2Bh ; '+'
.text:000000000000E7A6                 jz      loc_EFDA
.text:000000000000E7AC                 mov     rdi, rbp        ; s
.text:000000000000E7AF                 mov     esi, 20h ; ' '  ; c
.text:000000000000E7B4                 call    _memset
.text:000000000000E7B9                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000E7BE                 mov     r8, [rsp+4F8h+var_4B0]
.text:000000000000E7C3                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000E7C8
.text:000000000000E7C8 loc_E7C8:                               ; CODE XREF: __strftime_internal_0+CF7↑j
.text:000000000000E7C8                                         ; __strftime_internal_0+CFC↑j ...
.text:000000000000E7C8                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000E7CD                 mov     rdx, rcx        ; n
.text:000000000000E7D0                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000E7D5                 mov     rsi, r8         ; src
.text:000000000000E7D8                 mov     rdi, rbp        ; dest
.text:000000000000E7DB                 jnz     loc_DF71
.text:000000000000E7E1
.text:000000000000E7E1 loc_E7E1:                               ; CODE XREF: __strftime_internal_0+4EB↑j
.text:000000000000E7E1                 call    _memcpy
.text:000000000000E7E6                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000E7EB                 jmp     loc_DF7B
.text:000000000000E7F0 ; ---------------------------------------------------------------------------
.text:000000000000E7F0
.text:000000000000E7F0 loc_E7F0:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E7F0                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E7F0                 movdqu  xmm0, xmmword ptr [r13+0] ; jumptable 000000000000DC8F case 115
.text:000000000000E7F6                 lea     rsi, [rsp+4F8h+var_488]
.text:000000000000E7FB                 mov     rax, [r13+30h]
.text:000000000000E7FF                 mov     rdi, [rsp+4F8h+var_4E8]
.text:000000000000E804                 movaps  [rsp+4F8h+var_488], xmm0
.text:000000000000E809                 mov     [rsp+4F8h+var_4C0], r10d
.text:000000000000E80E                 movdqu  xmm0, xmmword ptr [r13+10h]
.text:000000000000E814                 mov     [rsp+4F8h+var_458], rax
.text:000000000000E81C                 movaps  [rsp+4F8h+var_478], xmm0
.text:000000000000E824                 movdqu  xmm0, xmmword ptr [r13+20h]
.text:000000000000E82A                 movaps  [rsp+4F8h+var_468], xmm0
.text:000000000000E832                 call    mktime_z
.text:000000000000E837                 lea     r9, [rsp+4F8h+s]
.text:000000000000E83F                 mov     rsi, rax
.text:000000000000E842                 mov     rcx, rax
.text:000000000000E845                 mov     r11, 6666666666666667h
.text:000000000000E84F                 mov     edi, 30h ; '0'
.text:000000000000E854                 mov     r10d, [rsp+4F8h+var_4C0]
.text:000000000000E859                 lea     r8, [r9+17h]
.text:000000000000E85D                 nop     dword ptr [rax]
.text:000000000000E860
.text:000000000000E860 loc_E860:                               ; CODE XREF: __strftime_internal_0+E1E↓j
.text:000000000000E860                 mov     rax, rcx
.text:000000000000E863                 imul    r11
.text:000000000000E866                 mov     rax, rcx
.text:000000000000E869                 sar     rax, 3Fh
.text:000000000000E86D                 sar     rdx, 2
.text:000000000000E871                 sub     rdx, rax
.text:000000000000E874                 mov     rax, rdx
.text:000000000000E877                 lea     rdx, [rdx+rdx*4]
.text:000000000000E87B                 add     rdx, rdx
.text:000000000000E87E                 sub     rcx, rdx
.text:000000000000E881                 mov     rdx, rcx
.text:000000000000E884                 mov     rcx, rax
.text:000000000000E887                 mov     eax, edi
.text:000000000000E889                 sub     eax, edx
.text:000000000000E88B                 add     edx, 30h ; '0'
.text:000000000000E88E                 test    rsi, rsi
.text:000000000000E891                 cmovs   edx, eax
.text:000000000000E894                 sub     r8, 1
.text:000000000000E898                 test    rcx, rcx
.text:000000000000E89B                 mov     [r8], dl
.text:000000000000E89E                 jnz     short loc_E860
.text:000000000000E8A0                 test    r10d, r10d
.text:000000000000E8A3                 mov     edi, 1
.text:000000000000E8A8                 cmovg   edi, r10d
.text:000000000000E8AC                 test    rsi, rsi
.text:000000000000E8AF                 mov     dword ptr [rsp+4F8h+var_4B0], edi
.text:000000000000E8B3                 js      loc_EE98
.text:000000000000E8B9
.text:000000000000E8B9 loc_E8B9:                               ; CODE XREF: __strftime_internal_0+B9F↑j
.text:000000000000E8B9                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000E8BE                 lea     rcx, [r9+17h]
.text:000000000000E8C2                 sub     rcx, r8
.text:000000000000E8C5                 sub     rdx, r14
.text:000000000000E8C8                 cmp     r15d, 2Dh ; '-'
.text:000000000000E8CC                 jz      short loc_E8DF
.text:000000000000E8CE                 mov     r12d, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000E8D3                 sub     r12d, ecx
.text:000000000000E8D6                 test    r12d, r12d
.text:000000000000E8D9                 jg      loc_F269
.text:000000000000E8DF
.text:000000000000E8DF loc_E8DF:                               ; CODE XREF: __strftime_internal_0+E4C↑j
.text:000000000000E8DF                 test    r10d, r10d
.text:000000000000E8E2                 mov     r11d, 0
.text:000000000000E8E8                 mov     r12, rbx
.text:000000000000E8EB                 cmovns  r11d, r10d
.text:000000000000E8EF                 movsxd  r11, r11d
.text:000000000000E8F2                 jmp     loc_E755
.text:000000000000E8F7 ; ---------------------------------------------------------------------------
.text:000000000000E8F7
.text:000000000000E8F7 loc_E8F7:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E8F7                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E8F7                 movzx   eax, byte ptr [rbx+1] ; jumptable 000000000000DC8F case 58
.text:000000000000E8FB                 lea     rdx, [rbx+1]
.text:000000000000E8FF                 cmp     al, 3Ah ; ':'
.text:000000000000E901                 jz      loc_F41A
.text:000000000000E907                 mov     r8d, 1
.text:000000000000E90D
.text:000000000000E90D loc_E90D:                               ; CODE XREF: __strftime_internal_0+19B5↓j
.text:000000000000E90D                 cmp     al, 7Ah ; 'z'
.text:000000000000E90F                 jnz     def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000E915                 mov     rbx, rdx
.text:000000000000E918                 jmp     loc_E4AF
.text:000000000000E91D ; ---------------------------------------------------------------------------
.text:000000000000E91D
.text:000000000000E91D loc_E91D:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000E91D                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000E91D                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F cases 71,86,103
.text:000000000000E921                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000E927                 mov     edi, [r13+14h]
.text:000000000000E92B                 mov     r8d, [r13+1Ch]
.text:000000000000E92F                 mov     edx, 92492493h
.text:000000000000E934                 mov     eax, edi
.text:000000000000E936                 mov     ecx, r8d
.text:000000000000E939                 sar     eax, 1Fh
.text:000000000000E93C                 and     eax, 190h
.text:000000000000E941                 lea     r12d, [rdi+rax-64h]
.text:000000000000E946                 mov     eax, [r13+18h]
.text:000000000000E94A                 sub     ecx, eax
.text:000000000000E94C                 mov     [rsp+4F8h+var_4C0], eax
.text:000000000000E950                 add     ecx, 17Eh
.text:000000000000E956                 mov     eax, ecx
.text:000000000000E958                 imul    edx
.text:000000000000E95A                 lea     eax, [rdx+rcx]
.text:000000000000E95D                 mov     edx, ecx
.text:000000000000E95F                 sar     edx, 1Fh
.text:000000000000E962                 sar     eax, 2
.text:000000000000E965                 sub     eax, edx
.text:000000000000E967                 lea     edx, ds:0[rax*8]
.text:000000000000E96E                 sub     edx, eax
.text:000000000000E970                 mov     eax, edx
.text:000000000000E972                 mov     edx, r8d
.text:000000000000E975                 sub     edx, ecx
.text:000000000000E977                 lea     eax, [rdx+rax+3]
.text:000000000000E97B                 test    eax, eax
.text:000000000000E97D                 mov     dword ptr [rsp+4F8h+var_4B8], eax
.text:000000000000E981                 js      loc_F2A8
.text:000000000000E987                 test    r12b, 3
.text:000000000000E98B                 mov     eax, 16Dh
.text:000000000000E990                 jnz     short loc_E9D7
.text:000000000000E992                 mov     ecx, 51EB851Fh
.text:000000000000E997                 mov     eax, r12d
.text:000000000000E99A                 imul    ecx
.text:000000000000E99C                 mov     eax, r12d
.text:000000000000E99F                 sar     eax, 1Fh
.text:000000000000E9A2                 mov     dword ptr [rsp+4F8h+var_4B0], eax
.text:000000000000E9A6                 mov     ecx, edx
.text:000000000000E9A8                 sar     edx, 5
.text:000000000000E9AB                 sub     edx, eax
.text:000000000000E9AD                 mov     eax, 16Eh
.text:000000000000E9B2                 imul    edx, 64h ; 'd'
.text:000000000000E9B5                 cmp     r12d, edx
.text:000000000000E9B8                 jnz     short loc_E9D7
.text:000000000000E9BA                 sar     ecx, 7
.text:000000000000E9BD                 mov     eax, ecx
.text:000000000000E9BF                 sub     eax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000E9C3                 imul    eax, 190h
.text:000000000000E9C9                 cmp     r12d, eax
.text:000000000000E9CC                 setz    al
.text:000000000000E9CF                 movzx   eax, al
.text:000000000000E9D2                 add     eax, 16Dh
.text:000000000000E9D7
.text:000000000000E9D7 loc_E9D7:                               ; CODE XREF: __strftime_internal_0+F10↑j
.text:000000000000E9D7                                         ; __strftime_internal_0+F38↑j
.text:000000000000E9D7                 sub     r8d, eax
.text:000000000000E9DA                 mov     edx, 92492493h
.text:000000000000E9DF                 mov     ecx, r8d
.text:000000000000E9E2                 sub     ecx, [rsp+4F8h+var_4C0]
.text:000000000000E9E6                 add     ecx, 17Eh
.text:000000000000E9EC                 mov     eax, ecx
.text:000000000000E9EE                 sub     r8d, ecx
.text:000000000000E9F1                 imul    edx
.text:000000000000E9F3                 lea     eax, [rdx+rcx]
.text:000000000000E9F6                 mov     edx, ecx
.text:000000000000E9F8                 sar     edx, 1Fh
.text:000000000000E9FB                 sar     eax, 2
.text:000000000000E9FE                 sub     eax, edx
.text:000000000000EA00                 lea     edx, ds:0[rax*8]
.text:000000000000EA07                 sub     edx, eax
.text:000000000000EA09                 lea     ecx, [r8+rdx+3]
.text:000000000000EA0E                 mov     r8d, 1
.text:000000000000EA14                 test    ecx, ecx
.text:000000000000EA16                 jns     short loc_EA1F
.text:000000000000EA18                 mov     ecx, dword ptr [rsp+4F8h+var_4B8]
.text:000000000000EA1C                 xor     r8d, r8d
.text:000000000000EA1F
.text:000000000000EA1F loc_EA1F:                               ; CODE XREF: __strftime_internal_0+F96↑j
.text:000000000000EA1F                                         ; __strftime_internal_0+18B0↓j
.text:000000000000EA1F                 cmp     sil, 47h ; 'G'
.text:000000000000EA23                 jz      loc_F166
.text:000000000000EA29                 cmp     sil, 67h ; 'g'
.text:000000000000EA2D                 jnz     loc_F35F
.text:000000000000EA33                 mov     ecx, 51EB851Fh
.text:000000000000EA38                 mov     eax, edi
.text:000000000000EA3A                 mov     esi, edi
.text:000000000000EA3C                 imul    ecx
.text:000000000000EA3E                 mov     eax, edx
.text:000000000000EA40                 mov     edx, edi
.text:000000000000EA42                 sar     edx, 1Fh
.text:000000000000EA45                 sar     eax, 5
.text:000000000000EA48                 sub     eax, edx
.text:000000000000EA4A                 imul    eax, 64h ; 'd'
.text:000000000000EA4D                 sub     esi, eax
.text:000000000000EA4F                 add     esi, r8d
.text:000000000000EA52                 mov     eax, esi
.text:000000000000EA54                 imul    ecx
.text:000000000000EA56                 mov     eax, esi
.text:000000000000EA58                 sar     eax, 1Fh
.text:000000000000EA5B                 mov     ecx, edx
.text:000000000000EA5D                 sar     ecx, 5
.text:000000000000EA60                 sub     ecx, eax
.text:000000000000EA62                 imul    ecx, 64h ; 'd'
.text:000000000000EA65                 sub     esi, ecx
.text:000000000000EA67                 mov     ecx, esi
.text:000000000000EA69                 jns     loc_E459
.text:000000000000EA6F                 mov     eax, 0FFFFF894h
.text:000000000000EA74                 sub     eax, r8d
.text:000000000000EA77                 cmp     edi, eax
.text:000000000000EA79                 jge     loc_F51A
.text:000000000000EA7F                 neg     ecx
.text:000000000000EA81                 test    r15d, r15d
.text:000000000000EA84                 jnz     loc_E462
.text:000000000000EA8A
.text:000000000000EA8A loc_EA8A:                               ; CODE XREF: __strftime_internal_0+9DC↑j
.text:000000000000EA8A                                         ; __strftime_internal_0+1AA0↓j
.text:000000000000EA8A                 mov     r15d, [rsp+4F8h+var_4CC]
.text:000000000000EA8F                 mov     eax, 1
.text:000000000000EA94                 cmp     r15d, 2Bh ; '+'
.text:000000000000EA98                 jz      loc_F4FA
.text:000000000000EA9E                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000EAA3                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000EAA8                 mov     edi, 2
.text:000000000000EAAD                 xor     esi, esi
.text:000000000000EAAF                 jmp     loc_DFF7
.text:000000000000EAB4 ; ---------------------------------------------------------------------------
.text:000000000000EAB4
.text:000000000000EAB4 loc_EAB4:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EAB4                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EAB4                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 100
.text:000000000000EAB8                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000EABE                 mov     ecx, [r13+0Ch]
.text:000000000000EAC2                 mov     edi, 2
.text:000000000000EAC7                 jmp     loc_DFE0
.text:000000000000EACC ; ---------------------------------------------------------------------------
.text:000000000000EACC
.text:000000000000EACC loc_EACC:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EACC                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EACC                 mov     eax, [r13+18h]  ; jumptable 000000000000DC8F case 117
.text:000000000000EAD0                 mov     edx, 92492493h
.text:000000000000EAD5                 mov     edi, 1
.text:000000000000EADA                 lea     ecx, [rax+6]
.text:000000000000EADD                 mov     eax, ecx
.text:000000000000EADF                 imul    edx
.text:000000000000EAE1                 lea     eax, [rdx+rcx]
.text:000000000000EAE4                 mov     edx, ecx
.text:000000000000EAE6                 sar     edx, 1Fh
.text:000000000000EAE9                 sar     eax, 2
.text:000000000000EAEC                 sub     eax, edx
.text:000000000000EAEE                 lea     edx, ds:0[rax*8]
.text:000000000000EAF5                 sub     edx, eax
.text:000000000000EAF7                 sub     ecx, edx
.text:000000000000EAF9                 add     ecx, 1
.text:000000000000EAFC                 jmp     loc_DFE0
.text:000000000000EB01 ; ---------------------------------------------------------------------------
.text:000000000000EB01
.text:000000000000EB01 loc_EB01:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EB01                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EB01                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 119
.text:000000000000EB05                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000EB0B                 mov     ecx, [r13+18h]
.text:000000000000EB0F                 mov     edi, 1
.text:000000000000EB14                 jmp     loc_DFE0
.text:000000000000EB19 ; ---------------------------------------------------------------------------
.text:000000000000EB19
.text:000000000000EB19 loc_EB19:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EB19                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EB19                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 87
.text:000000000000EB1D                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000EB23                 mov     eax, [r13+18h]
.text:000000000000EB27                 mov     ecx, 92492493h
.text:000000000000EB2C                 lea     esi, [rax+6]
.text:000000000000EB2F                 mov     eax, esi
.text:000000000000EB31                 imul    ecx
.text:000000000000EB33                 lea     eax, [rdx+rsi]
.text:000000000000EB36                 mov     edx, esi
.text:000000000000EB38                 sar     edx, 1Fh
.text:000000000000EB3B                 sar     eax, 2
.text:000000000000EB3E                 sub     eax, edx
.text:000000000000EB40                 lea     edx, ds:0[rax*8]
.text:000000000000EB47                 sub     edx, eax
.text:000000000000EB49                 mov     eax, edx
.text:000000000000EB4B                 mov     edx, [r13+1Ch]
.text:000000000000EB4F                 sub     eax, esi
.text:000000000000EB51                 lea     esi, [rax+rdx+7]
.text:000000000000EB55                 mov     eax, esi
.text:000000000000EB57                 imul    ecx
.text:000000000000EB59                 jmp     loc_E2C2
.text:000000000000EB5E ; ---------------------------------------------------------------------------
.text:000000000000EB5E
.text:000000000000EB5E loc_EB5E:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EB5E                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EB5E                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 66
.text:000000000000EB62                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000EB68                 test    r8b, r8b
.text:000000000000EB6B                 jz      loc_DE45
.text:000000000000EB71                 mov     byte ptr [rsp+4F8h+var_4C8], r8b
.text:000000000000EB76                 jmp     loc_DE42        ; jumptable 000000000000DC8F case 114
.text:000000000000EB7B ; ---------------------------------------------------------------------------
.text:000000000000EB7B
.text:000000000000EB7B loc_EB7B:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EB7B                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EB7B                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 67
.text:000000000000EB7F                 jz      loc_F00A
.text:000000000000EB85                 mov     esi, [r13+14h]
.text:000000000000EB89                 mov     edx, 51EB851Fh
.text:000000000000EB8E                 mov     eax, esi
.text:000000000000EB90                 imul    edx
.text:000000000000EB92                 mov     eax, edx
.text:000000000000EB94                 mov     edx, esi
.text:000000000000EB96                 sar     edx, 1Fh
.text:000000000000EB99                 sar     eax, 5
.text:000000000000EB9C                 sub     eax, edx
.text:000000000000EB9E                 mov     edx, esi
.text:000000000000EBA0                 lea     ecx, [rax+13h]
.text:000000000000EBA3                 imul    eax, 64h ; 'd'
.text:000000000000EBA6                 sub     edx, eax
.text:000000000000EBA8                 mov     eax, edx
.text:000000000000EBAA                 shr     eax, 1Fh
.text:000000000000EBAD                 test    ecx, ecx
.text:000000000000EBAF                 setnle  dl
.text:000000000000EBB2                 and     eax, edx
.text:000000000000EBB4                 cmp     esi, 0FFFFF894h
.text:000000000000EBBA                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000EBBF                 sub     ecx, eax
.text:000000000000EBC1                 cmp     esi, 0FFFFF894h
.text:000000000000EBC7                 setnl   al
.text:000000000000EBCA                 test    r15d, r15d
.text:000000000000EBCD                 jnz     loc_E46C
.text:000000000000EBD3                 cmp     [rsp+4F8h+var_4CC], 2Bh ; '+'
.text:000000000000EBD8                 mov     r15d, [rsp+4F8h+var_4CC]
.text:000000000000EBDD                 jnz     loc_E476
.text:000000000000EBE3
.text:000000000000EBE3 loc_EBE3:                               ; CODE XREF: __strftime_internal_0+9F0↑j
.text:000000000000EBE3                 mov     edi, 2
.text:000000000000EBE8                 mov     edx, 63h ; 'c'
.text:000000000000EBED
.text:000000000000EBED loc_EBED:                               ; CODE XREF: __strftime_internal_0+171D↓j
.text:000000000000EBED                 cmp     edx, ecx
.text:000000000000EBEF                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000EBF4                 mov     r15d, 2Bh ; '+'
.text:000000000000EBFA                 jb      loc_E329
.text:000000000000EC00
.text:000000000000EC00 loc_EC00:                               ; CODE XREF: __strftime_internal_0+1A84↓j
.text:000000000000EC00                 cmp     r10d, edi
.text:000000000000EC03                 mov     r15d, 2Bh ; '+'
.text:000000000000EC09                 setnle  byte ptr [rsp+4F8h+var_4B8]
.text:000000000000EC0E                 xor     esi, esi
.text:000000000000EC10                 jmp     loc_DFF7
.text:000000000000EC15 ; ---------------------------------------------------------------------------
.text:000000000000EC15
.text:000000000000EC15 loc_EC15:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EC15                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EC15                 test    r11d, r11d      ; jumptable 000000000000DC8F case 68
.text:000000000000EC18                 jnz     def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000EC1E                 lea     rax, aMDY       ; "%m/%d/%y"
.text:000000000000EC25                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:000000000000EC2D                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000EC32                 jmp     loc_E0F2
.text:000000000000EC37 ; ---------------------------------------------------------------------------
.text:000000000000EC37
.text:000000000000EC37 loc_EC37:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EC37                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EC37                 test    r11d, r11d      ; jumptable 000000000000DC8F case 70
.text:000000000000EC3A                 jnz     def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000EC40                 test    r15d, r15d
.text:000000000000EC43                 jnz     loc_F43D
.text:000000000000EC49                 test    r10d, r10d
.text:000000000000EC4C                 jns     loc_F43D
.text:000000000000EC52                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:000000000000EC59                 mov     [rsp+4F8h+var_4C0], 4
.text:000000000000EC61                 mov     r15d, 2Bh ; '+'
.text:000000000000EC67                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000EC6C                 jmp     loc_E0F2
.text:000000000000EC71 ; ---------------------------------------------------------------------------
.text:000000000000EC71
.text:000000000000EC71 loc_EC71:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EC71                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EC71                 movzx   ecx, byte ptr [rbx-1] ; jumptable 000000000000DC8F case 0
.text:000000000000EC75                 lea     r9, [rbx-1]
.text:000000000000EC79
.text:000000000000EC79 loc_EC79:                               ; CODE XREF: __strftime_internal_0+1995↓j
.text:000000000000EC79                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000EC7E                 mov     eax, 0
.text:000000000000EC83                 sub     rdx, r14
.text:000000000000EC86                 test    r10d, r10d
.text:000000000000EC89                 cmovns  eax, r10d
.text:000000000000EC8D                 cmp     cl, 25h ; '%'
.text:000000000000EC90                 cdqe
.text:000000000000EC92                 jnz     loc_DCCB
.text:000000000000EC98                 test    rax, rax
.text:000000000000EC9B                 mov     ecx, 1
.text:000000000000ECA0                 mov     r12, r9
.text:000000000000ECA3                 cmovnz  rcx, rax
.text:000000000000ECA7                 mov     r8d, 1
.text:000000000000ECAD                 jmp     loc_DD11
.text:000000000000ECB2 ; ---------------------------------------------------------------------------
.text:000000000000ECB2
.text:000000000000ECB2 loc_ECB2:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000ECB2                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000ECB2                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 72
.text:000000000000ECB6                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000ECBC                 mov     ecx, [r13+8]
.text:000000000000ECC0                 mov     edi, 2
.text:000000000000ECC5                 jmp     loc_DFE0
.text:000000000000ECCA ; ---------------------------------------------------------------------------
.text:000000000000ECCA
.text:000000000000ECCA loc_ECCA:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000ECCA                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000ECCA                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 77
.text:000000000000ECCE                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000ECD4                 mov     ecx, [r13+4]
.text:000000000000ECD8                 mov     edi, 2
.text:000000000000ECDD                 jmp     loc_DFE0
.text:000000000000ECE2 ; ---------------------------------------------------------------------------
.text:000000000000ECE2
.text:000000000000ECE2 loc_ECE2:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000ECE2                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000ECE2                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 78
.text:000000000000ECE6                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000ECEC                 cmp     r10d, 0FFFFFFFFh
.text:000000000000ECF0                 jz      loc_F241
.text:000000000000ECF6                 cmp     r10d, 8
.text:000000000000ECFA                 jg      loc_F509
.text:000000000000ED00                 mov     ecx, [rsp+4F8h+arg_18]
.text:000000000000ED07                 mov     esi, r10d
.text:000000000000ED0A                 mov     edi, 66666667h
.text:000000000000ED0F                 nop
.text:000000000000ED10
.text:000000000000ED10 loc_ED10:                               ; CODE XREF: __strftime_internal_0+12A4↓j
.text:000000000000ED10                 mov     eax, ecx
.text:000000000000ED12                 add     esi, 1
.text:000000000000ED15                 sar     ecx, 1Fh
.text:000000000000ED18                 imul    edi
.text:000000000000ED1A                 sar     edx, 2
.text:000000000000ED1D                 sub     edx, ecx
.text:000000000000ED1F                 cmp     esi, 9
.text:000000000000ED22                 mov     ecx, edx
.text:000000000000ED24                 jnz     short loc_ED10
.text:000000000000ED26
.text:000000000000ED26 loc_ED26:                               ; CODE XREF: __strftime_internal_0+1A90↓j
.text:000000000000ED26                 mov     edi, r10d
.text:000000000000ED29                 jmp     loc_DFE0
.text:000000000000ED2E ; ---------------------------------------------------------------------------
.text:000000000000ED2E
.text:000000000000ED2E loc_ED2E:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000ED2E                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000ED2E                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 73
.text:000000000000ED32                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000ED38                 mov     ecx, [rsp+4F8h+var_490]
.text:000000000000ED3C                 mov     edi, 2
.text:000000000000ED41                 jmp     loc_DFE0
.text:000000000000ED46 ; ---------------------------------------------------------------------------
.text:000000000000ED46
.text:000000000000ED46 loc_ED46:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000ED46                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000ED46                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 108
.text:000000000000ED4A                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000ED50                 mov     ecx, [rsp+4F8h+var_490]
.text:000000000000ED54
.text:000000000000ED54 loc_ED54:                               ; CODE XREF: __strftime_internal_0+13E4↓j
.text:000000000000ED54                                         ; __strftime_internal_0+13F7↓j
.text:000000000000ED54                 test    r15d, r15d
.text:000000000000ED57                 mov     edi, 2
.text:000000000000ED5C                 jnz     loc_DFE0
.text:000000000000ED62                 mov     r15d, 5Fh ; '_'
.text:000000000000ED68                 jmp     loc_DFE0
.text:000000000000ED6D ; ---------------------------------------------------------------------------
.text:000000000000ED6D
.text:000000000000ED6D loc_ED6D:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000ED6D                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000ED6D                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 109
.text:000000000000ED71                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000ED77                 mov     eax, [r13+10h]
.text:000000000000ED7B                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000ED80                 mov     edi, 2
.text:000000000000ED85                 cmp     eax, 0FFFFFFFFh
.text:000000000000ED88                 lea     ecx, [rax+1]
.text:000000000000ED8B                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000ED90                 cmp     eax, 0FFFFFFFFh
.text:000000000000ED93                 setnl   al
.text:000000000000ED96                 xor     esi, esi
.text:000000000000ED98                 jmp     loc_DFF7
.text:000000000000ED9D ; ---------------------------------------------------------------------------
.text:000000000000ED9D
.text:000000000000ED9D loc_ED9D:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000ED9D                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000ED9D                 test    r10d, r10d      ; jumptable 000000000000DC8F case 110
.text:000000000000EDA0                 mov     ecx, 0
.text:000000000000EDA5                 mov     eax, 1
.text:000000000000EDAA                 cmovns  ecx, r10d
.text:000000000000EDAE                 movsxd  rcx, ecx
.text:000000000000EDB1                 test    rcx, rcx
.text:000000000000EDB4                 cmovz   rcx, rax
.text:000000000000EDB8                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000000EDBD                 sub     rax, r14
.text:000000000000EDC0                 cmp     rax, rcx
.text:000000000000EDC3                 jbe     loc_DB4C
.text:000000000000EDC9                 test    rbp, rbp
.text:000000000000EDCC                 jz      loc_E0B8
.text:000000000000EDD2                 cmp     r10d, 1
.text:000000000000EDD6                 jle     short loc_EE12
.text:000000000000EDD8                 movsxd  rdx, r10d
.text:000000000000EDDB                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000EDE0                 sub     rdx, 1          ; n
.text:000000000000EDE4                 cmp     r15d, 30h ; '0'
.text:000000000000EDE8                 lea     r12, [rbp+rdx+0]
.text:000000000000EDED                 jz      loc_F3BE
.text:000000000000EDF3                 cmp     r15d, 2Bh ; '+'
.text:000000000000EDF7                 jz      loc_F3BE
.text:000000000000EDFD                 mov     rdi, rbp        ; s
.text:000000000000EE00                 mov     esi, 20h ; ' '  ; c
.text:000000000000EE05                 mov     rbp, r12
.text:000000000000EE08                 call    _memset
.text:000000000000EE0D                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000EE12
.text:000000000000EE12 loc_EE12:                               ; CODE XREF: __strftime_internal_0+1356↑j
.text:000000000000EE12                                         ; __strftime_internal_0+1953↓j
.text:000000000000EE12                 mov     byte ptr [rbp+0], 0Ah
.text:000000000000EE16                 add     rbp, 1
.text:000000000000EE1A                 jmp     loc_E0B8
.text:000000000000EE1F ; ---------------------------------------------------------------------------
.text:000000000000EE1F
.text:000000000000EE1F loc_EE1F:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EE1F                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EE1F                 xor     eax, eax        ; jumptable 000000000000DC8F case 112
.text:000000000000EE21                 jmp     loc_E0C8
.text:000000000000EE26 ; ---------------------------------------------------------------------------
.text:000000000000EE26
.text:000000000000EE26 loc_EE26:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EE26                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EE26                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 106
.text:000000000000EE2A                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000EE30                 mov     eax, [r13+1Ch]
.text:000000000000EE34                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000EE39                 mov     edi, 3
.text:000000000000EE3E                 cmp     eax, 0FFFFFFFFh
.text:000000000000EE41                 lea     ecx, [rax+1]
.text:000000000000EE44                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000EE49                 cmp     eax, 0FFFFFFFFh
.text:000000000000EE4C                 setnl   al
.text:000000000000EE4F                 xor     esi, esi
.text:000000000000EE51                 jmp     loc_DFF7
.text:000000000000EE56 ; ---------------------------------------------------------------------------
.text:000000000000EE56
.text:000000000000EE56 loc_EE56:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EE56                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EE56                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 107
.text:000000000000EE5A                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000EE60                 mov     ecx, [r13+8]
.text:000000000000EE64                 jmp     loc_ED54
.text:000000000000EE69 ; ---------------------------------------------------------------------------
.text:000000000000EE69
.text:000000000000EE69 loc_EE69:                               ; CODE XREF: __strftime_internal_0+20F↑j
.text:000000000000EE69                                         ; DATA XREF: .rodata:jpt_DC8F↓o
.text:000000000000EE69                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000DC8F case 101
.text:000000000000EE6D                 jz      def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000EE73                 mov     ecx, [r13+0Ch]
.text:000000000000EE77                 jmp     loc_ED54
.text:000000000000EE77 ; ---------------------------------------------------------------------------
.text:000000000000EE7C                 align 20h
.text:000000000000EE80
.text:000000000000EE80 loc_EE80:                               ; CODE XREF: __strftime_internal_0+57B↑j
.text:000000000000EE80                                         ; __strftime_internal_0+583↑j
.text:000000000000EE80                 mov     eax, ecx
.text:000000000000EE82                 neg     eax
.text:000000000000EE84                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000EE89                 cmovnz  ecx, eax
.text:000000000000EE8C                 jmp     loc_E5B0
.text:000000000000EE8C ; ---------------------------------------------------------------------------
.text:000000000000EE91                 align 8
.text:000000000000EE98
.text:000000000000EE98 loc_EE98:                               ; CODE XREF: __strftime_internal_0+B94↑j
.text:000000000000EE98                                         ; __strftime_internal_0+E33↑j
.text:000000000000EE98                 cmp     r15d, 2Dh ; '-'
.text:000000000000EE9C                 mov     byte ptr [rsp+4F8h+var_4C0], 2Dh ; '-'
.text:000000000000EEA1                 jnz     loc_E634
.text:000000000000EEA7
.text:000000000000EEA7 loc_EEA7:                               ; CODE XREF: __strftime_internal_0+16D9↓j
.text:000000000000EEA7                 test    r10d, r10d
.text:000000000000EEAA                 mov     r11d, 0
.text:000000000000EEB0                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000000EEB5                 cmovns  r11d, r10d
.text:000000000000EEB9                 mov     r12d, 1
.text:000000000000EEBF                 movsxd  r11, r11d
.text:000000000000EEC2                 test    r11, r11
.text:000000000000EEC5                 cmovnz  r12, r11
.text:000000000000EEC9                 sub     rax, r14
.text:000000000000EECC                 cmp     rax, r12
.text:000000000000EECF                 jbe     loc_DB4C
.text:000000000000EED5                 test    rbp, rbp
.text:000000000000EED8                 jz      short loc_EF3C
.text:000000000000EEDA                 mov     eax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000EEDE                 test    eax, eax
.text:000000000000EEE0                 jnz     short loc_EF34
.text:000000000000EEE2                 cmp     r11, 1
.text:000000000000EEE6                 jbe     short loc_EF34
.text:000000000000EEE8                 movsxd  rax, r10d
.text:000000000000EEEB                 mov     rdi, rbp        ; s
.text:000000000000EEEE                 mov     esi, 20h ; ' '  ; c
.text:000000000000EEF3                 lea     rcx, [rax-1]
.text:000000000000EEF7                 mov     [rsp+4F8h+var_498], r9
.text:000000000000EEFC                 mov     [rsp+4F8h+var_4A0], r8
.text:000000000000EF01                 mov     [rsp+4F8h+var_4A8], r11
.text:000000000000EF06                 mov     dword ptr [rsp+4F8h+var_4B8], r10d
.text:000000000000EF0B                 mov     rdx, rcx        ; n
.text:000000000000EF0E                 mov     qword ptr [rsp+4F8h+var_4C0], rcx
.text:000000000000EF13                 call    _memset
.text:000000000000EF18                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000EF1D                 mov     r9, [rsp+4F8h+var_498]
.text:000000000000EF22                 mov     r8, [rsp+4F8h+var_4A0]
.text:000000000000EF27                 mov     r11, [rsp+4F8h+var_4A8]
.text:000000000000EF2C                 mov     r10d, dword ptr [rsp+4F8h+var_4B8]
.text:000000000000EF31                 add     rbp, rcx
.text:000000000000EF34
.text:000000000000EF34 loc_EF34:                               ; CODE XREF: __strftime_internal_0+1460↑j
.text:000000000000EF34                                         ; __strftime_internal_0+1466↑j
.text:000000000000EF34                 mov     [rbp+0], r15b
.text:000000000000EF38                 add     rbp, 1
.text:000000000000EF3C
.text:000000000000EF3C loc_EF3C:                               ; CODE XREF: __strftime_internal_0+1458↑j
.text:000000000000EF3C                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000EF41                 lea     rcx, [r9+17h]
.text:000000000000EF45                 add     r14, r12
.text:000000000000EF48                 mov     r15d, 2Dh ; '-'
.text:000000000000EF4E                 mov     r12, rbx
.text:000000000000EF51                 sub     rcx, r8
.text:000000000000EF54                 sub     rdx, r14
.text:000000000000EF57                 jmp     loc_E755
.text:000000000000EF57 ; ---------------------------------------------------------------------------
.text:000000000000EF5C                 align 20h
.text:000000000000EF60
.text:000000000000EF60 loc_EF60:                               ; CODE XREF: __strftime_internal_0+30D↑j
.text:000000000000EF60                 call    _memcpy
.text:000000000000EF65                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000EF6A                 mov     r8, [rsp+4F8h+var_4C8]
.text:000000000000EF6F                 jmp     loc_DDA2
.text:000000000000EF6F ; ---------------------------------------------------------------------------
.text:000000000000EF74                 align 8
.text:000000000000EF78
.text:000000000000EF78 loc_EF78:                               ; CODE XREF: __strftime_internal_0+4D8↑j
.text:000000000000EF78                 mov     rdi, rbp
.text:000000000000EF7B                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000EF80                 call    memcpy_lowcase
.text:000000000000EF85                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000EF8A                 jmp     loc_DF7B
.text:000000000000EF8F ; ---------------------------------------------------------------------------
.text:000000000000EF8F
.text:000000000000EF8F loc_EF8F:                               ; CODE XREF: __strftime_internal_0+49C↑j
.text:000000000000EF8F                                         ; __strftime_internal_0+4A6↑j
.text:000000000000EF8F                 mov     rdi, rbp        ; s
.text:000000000000EF92                 mov     esi, 30h ; '0'  ; c
.text:000000000000EF97                 call    _memset
.text:000000000000EF9C                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000EFA1                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000EFA7                 mov     rcx, [rsp+4F8h+var_4B0]
.text:000000000000EFAC                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000EFB1                 jmp     loc_DF4E
.text:000000000000EFB6 ; ---------------------------------------------------------------------------
.text:000000000000EFB6
.text:000000000000EFB6 loc_EFB6:                               ; CODE XREF: __strftime_internal_0+2C6↑j
.text:000000000000EFB6                                         ; __strftime_internal_0+2D0↑j
.text:000000000000EFB6                 mov     rdi, rbp        ; s
.text:000000000000EFB9                 mov     esi, 30h ; '0'  ; c
.text:000000000000EFBE                 mov     rbp, rbx
.text:000000000000EFC1                 call    _memset
.text:000000000000EFC6                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000EFCB                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000EFD0                 mov     r8, [rsp+4F8h+var_4B0]
.text:000000000000EFD5                 jmp     loc_DD75
.text:000000000000EFDA ; ---------------------------------------------------------------------------
.text:000000000000EFDA
.text:000000000000EFDA loc_EFDA:                               ; CODE XREF: __strftime_internal_0+D1C↑j
.text:000000000000EFDA                                         ; __strftime_internal_0+D26↑j
.text:000000000000EFDA                 mov     rdi, rbp        ; s
.text:000000000000EFDD                 mov     esi, 30h ; '0'  ; c
.text:000000000000EFE2                 call    _memset
.text:000000000000EFE7                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000EFEC                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000EFF1                 mov     r8, [rsp+4F8h+var_4B0]
.text:000000000000EFF6                 jmp     loc_E7C8
.text:000000000000EFFB ; ---------------------------------------------------------------------------
.text:000000000000EFFB
.text:000000000000EFFB loc_EFFB:                               ; CODE XREF: __strftime_internal_0+64B↑j
.text:000000000000EFFB                 mov     esi, 70h ; 'p'
.text:000000000000F000                 mov     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000F005                 jmp     loc_DE45
.text:000000000000F00A ; ---------------------------------------------------------------------------
.text:000000000000F00A
.text:000000000000F00A loc_F00A:                               ; CODE XREF: __strftime_internal_0+85B↑j
.text:000000000000F00A                                         ; __strftime_internal_0+9A1↑j ...
.text:000000000000F00A                 xor     edi, edi
.text:000000000000F00C                 jmp     loc_E00C
.text:000000000000F011 ; ---------------------------------------------------------------------------
.text:000000000000F011
.text:000000000000F011 loc_F011:                               ; CODE XREF: __strftime_internal_0+17ED↓j
.text:000000000000F011                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000F016
.text:000000000000F016 loc_F016:                               ; CODE XREF: __strftime_internal_0+BDB↑j
.text:000000000000F016                 movsxd  r15, r12d
.text:000000000000F019                 cmp     r15, rdx
.text:000000000000F01C                 jnb     loc_DB4C
.text:000000000000F022                 test    rbp, rbp
.text:000000000000F025                 jz      short loc_F058
.text:000000000000F027                 mov     rdi, rbp        ; s
.text:000000000000F02A                 mov     rdx, r15        ; n
.text:000000000000F02D                 mov     esi, 20h ; ' '  ; c
.text:000000000000F032                 mov     dword ptr [rsp+4F8h+var_4A0], r10d
.text:000000000000F037                 mov     [rsp+4F8h+var_4A8], r9
.text:000000000000F03C                 add     rbp, r15
.text:000000000000F03F                 mov     [rsp+4F8h+var_4B8], r8
.text:000000000000F044                 call    _memset
.text:000000000000F049                 mov     r10d, dword ptr [rsp+4F8h+var_4A0]
.text:000000000000F04E                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000F053                 mov     r8, [rsp+4F8h+var_4B8]
.text:000000000000F058
.text:000000000000F058 loc_F058:                               ; CODE XREF: __strftime_internal_0+15A5↑j
.text:000000000000F058                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000F05D                 mov     eax, r10d
.text:000000000000F060                 add     r14, r15
.text:000000000000F063                 sub     eax, r12d
.text:000000000000F066                 cmp     r10d, r12d
.text:000000000000F069                 mov     r10d, 0
.text:000000000000F06F                 cmovg   r10d, eax
.text:000000000000F073                 sub     rdx, r14
.text:000000000000F076                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000F07B                 jnz     loc_F1A2
.text:000000000000F081                 add     r9, 17h
.text:000000000000F085                 movsxd  r11, r10d
.text:000000000000F088                 mov     r12, rbx
.text:000000000000F08B                 mov     rcx, r9
.text:000000000000F08E                 mov     r15d, 5Fh ; '_'
.text:000000000000F094                 sub     rcx, r8
.text:000000000000F097                 jmp     loc_E755
.text:000000000000F09C ; ---------------------------------------------------------------------------
.text:000000000000F09C
.text:000000000000F09C loc_F09C:                               ; CODE XREF: __strftime_internal_0+BD1↑j
.text:000000000000F09C                 test    r10d, r10d
.text:000000000000F09F                 mov     r11d, 0
.text:000000000000F0A5                 mov     r12d, 1
.text:000000000000F0AB                 cmovns  r11d, r10d
.text:000000000000F0AF                 movsxd  r11, r11d
.text:000000000000F0B2                 test    r11, r11
.text:000000000000F0B5                 cmovnz  r12, r11
.text:000000000000F0B9                 cmp     r12, rdx
.text:000000000000F0BC                 jnb     loc_DB4C
.text:000000000000F0C2                 test    rbp, rbp
.text:000000000000F0C5                 jz      short loc_F140
.text:000000000000F0C7                 mov     edi, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000F0CB                 test    edi, edi
.text:000000000000F0CD                 jnz     short loc_F134
.text:000000000000F0CF                 cmp     r11, 1
.text:000000000000F0D3                 jbe     short loc_F134
.text:000000000000F0D5                 movsxd  rdx, r10d
.text:000000000000F0D8                 mov     [rsp+4F8h+var_48C], r10d
.text:000000000000F0DD                 mov     [rsp+4F8h+var_498], r8
.text:000000000000F0E2                 sub     rdx, 1          ; n
.text:000000000000F0E6                 cmp     r15d, 30h ; '0'
.text:000000000000F0EA                 mov     [rsp+4F8h+var_4A0], rcx
.text:000000000000F0EF                 lea     rax, [rbp+rdx+0]
.text:000000000000F0F4                 mov     [rsp+4F8h+var_4A8], r11
.text:000000000000F0F9                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000F0FE                 jz      loc_F4CF
.text:000000000000F104                 cmp     r15d, 2Bh ; '+'
.text:000000000000F108                 jz      loc_F4CF
.text:000000000000F10E                 mov     rdi, rbp        ; s
.text:000000000000F111                 mov     esi, 20h ; ' '  ; c
.text:000000000000F116                 call    _memset
.text:000000000000F11B                 mov     rbp, [rsp+4F8h+var_4B8]
.text:000000000000F120                 mov     r10d, [rsp+4F8h+var_48C]
.text:000000000000F125                 mov     r8, [rsp+4F8h+var_498]
.text:000000000000F12A                 mov     rcx, [rsp+4F8h+var_4A0]
.text:000000000000F12F                 mov     r11, [rsp+4F8h+var_4A8]
.text:000000000000F134
.text:000000000000F134 loc_F134:                               ; CODE XREF: __strftime_internal_0+164D↑j
.text:000000000000F134                                         ; __strftime_internal_0+1653↑j ...
.text:000000000000F134                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000F139                 add     rbp, 1
.text:000000000000F13D                 mov     [rbp-1], al
.text:000000000000F140
.text:000000000000F140 loc_F140:                               ; CODE XREF: __strftime_internal_0+1645↑j
.text:000000000000F140                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000F145                 add     r14, r12
.text:000000000000F148                 mov     r12, rbx
.text:000000000000F14B                 sub     rdx, r14
.text:000000000000F14E                 jmp     loc_E755
.text:000000000000F153 ; ---------------------------------------------------------------------------
.text:000000000000F153
.text:000000000000F153 loc_F153:                               ; CODE XREF: __strftime_internal_0+BA9↑j
.text:000000000000F153                 mov     r15d, 2Bh ; '+'
.text:000000000000F159                 jmp     loc_EEA7
.text:000000000000F15E ; ---------------------------------------------------------------------------
.text:000000000000F15E
.text:000000000000F15E loc_F15E:                               ; CODE XREF: __strftime_internal_0+A35↑j
.text:000000000000F15E                 mov     r12, rbx
.text:000000000000F161                 jmp     loc_DBB2
.text:000000000000F166 ; ---------------------------------------------------------------------------
.text:000000000000F166
.text:000000000000F166 loc_F166:                               ; CODE XREF: __strftime_internal_0+FA3↑j
.text:000000000000F166                 mov     eax, 0FFFFF894h
.text:000000000000F16B                 lea     ecx, [rdi+r8+76Ch]
.text:000000000000F173                 sub     eax, r8d
.text:000000000000F176                 cmp     edi, eax
.text:000000000000F178                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000F17D                 setnl   al
.text:000000000000F180                 test    r15d, r15d
.text:000000000000F183                 jz      loc_E310
.text:000000000000F189
.text:000000000000F189 loc_F189:                               ; CODE XREF: __strftime_internal_0+88A↑j
.text:000000000000F189                 cmp     r15d, 2Bh ; '+'
.text:000000000000F18D                 jnz     loc_E31F
.text:000000000000F193
.text:000000000000F193 loc_F193:                               ; CODE XREF: __strftime_internal_0+899↑j
.text:000000000000F193                 mov     edi, 4
.text:000000000000F198                 mov     edx, 270Fh
.text:000000000000F19D                 jmp     loc_EBED
.text:000000000000F1A2 ; ---------------------------------------------------------------------------
.text:000000000000F1A2
.text:000000000000F1A2 loc_F1A2:                               ; CODE XREF: __strftime_internal_0+15FB↑j
.text:000000000000F1A2                 movsxd  r15, r10d
.text:000000000000F1A5                 mov     r12d, 1
.text:000000000000F1AB                 test    r15, r15
.text:000000000000F1AE                 cmovnz  r12, r15
.text:000000000000F1B2                 cmp     r12, rdx
.text:000000000000F1B5                 jnb     loc_DB4C
.text:000000000000F1BB                 test    rbp, rbp
.text:000000000000F1BE                 jz      short loc_F21B
.text:000000000000F1C0                 mov     r11d, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000F1C5                 test    r11d, r11d
.text:000000000000F1C8                 jnz     short loc_F20F
.text:000000000000F1CA                 cmp     r15, 1
.text:000000000000F1CE                 jbe     short loc_F20F
.text:000000000000F1D0                 lea     rcx, [r15-1]
.text:000000000000F1D4                 mov     rdi, rbp        ; s
.text:000000000000F1D7                 mov     esi, 20h ; ' '  ; c
.text:000000000000F1DC                 mov     dword ptr [rsp+4F8h+var_498], r10d
.text:000000000000F1E1                 mov     [rsp+4F8h+var_4A0], r9
.text:000000000000F1E6                 mov     rdx, rcx        ; n
.text:000000000000F1E9                 mov     [rsp+4F8h+var_4A8], r8
.text:000000000000F1EE                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000000F1F3                 call    _memset
.text:000000000000F1F8                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000F1FD                 mov     r10d, dword ptr [rsp+4F8h+var_498]
.text:000000000000F202                 mov     r9, [rsp+4F8h+var_4A0]
.text:000000000000F207                 mov     r8, [rsp+4F8h+var_4A8]
.text:000000000000F20C                 add     rbp, rcx
.text:000000000000F20F
.text:000000000000F20F loc_F20F:                               ; CODE XREF: __strftime_internal_0+1748↑j
.text:000000000000F20F                                         ; __strftime_internal_0+174E↑j
.text:000000000000F20F                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000F214                 add     rbp, 1
.text:000000000000F218                 mov     [rbp-1], al
.text:000000000000F21B
.text:000000000000F21B loc_F21B:                               ; CODE XREF: __strftime_internal_0+173E↑j
.text:000000000000F21B                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000F220                 add     r9, 17h
.text:000000000000F224                 add     r14, r12
.text:000000000000F227                 mov     rcx, r9
.text:000000000000F22A                 mov     r11, r15
.text:000000000000F22D                 mov     r12, rbx
.text:000000000000F230                 sub     rcx, r8
.text:000000000000F233                 mov     r15d, 5Fh ; '_'
.text:000000000000F239                 sub     rdx, r14
.text:000000000000F23C                 jmp     loc_E755
.text:000000000000F241 ; ---------------------------------------------------------------------------
.text:000000000000F241
.text:000000000000F241 loc_F241:                               ; CODE XREF: __strftime_internal_0+1270↑j
.text:000000000000F241                 mov     ecx, [rsp+4F8h+arg_18]
.text:000000000000F248                 mov     edi, 9
.text:000000000000F24D                 mov     r10d, 9
.text:000000000000F253                 jmp     loc_DFE0
.text:000000000000F258 ; ---------------------------------------------------------------------------
.text:000000000000F258
.text:000000000000F258 loc_F258:                               ; CODE XREF: __strftime_internal_0+7A3↑j
.text:000000000000F258                 mov     r12, rbx
.text:000000000000F25B                 mov     r9, rbx
.text:000000000000F25E                 mov     r8d, 1
.text:000000000000F264                 jmp     loc_DD11
.text:000000000000F269 ; ---------------------------------------------------------------------------
.text:000000000000F269
.text:000000000000F269 loc_F269:                               ; CODE XREF: __strftime_internal_0+E59↑j
.text:000000000000F269                 cmp     r15d, 5Fh ; '_'
.text:000000000000F26D                 jz      loc_F011
.text:000000000000F273                 movsxd  rax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000F278                 cmp     rax, rdx
.text:000000000000F27B                 jnb     loc_DB4C
.text:000000000000F281                 movsxd  r9, r12d
.text:000000000000F284                 mov     r12, rbx
.text:000000000000F287                 jmp     loc_E70E
.text:000000000000F28C ; ---------------------------------------------------------------------------
.text:000000000000F28C
.text:000000000000F28C loc_F28C:                               ; CODE XREF: __strftime_internal_0+70F↑j
.text:000000000000F28C                                         ; __strftime_internal_0+719↑j
.text:000000000000F28C                 mov     rdi, rbp        ; s
.text:000000000000F28F                 mov     esi, 30h ; '0'  ; c
.text:000000000000F294                 call    _memset
.text:000000000000F299                 mov     rbp, [rsp+4F8h+var_4A8]
.text:000000000000F29E                 mov     r11, [rsp+4F8h+var_4A0]
.text:000000000000F2A3                 jmp     loc_E1B6
.text:000000000000F2A8 ; ---------------------------------------------------------------------------
.text:000000000000F2A8
.text:000000000000F2A8 loc_F2A8:                               ; CODE XREF: __strftime_internal_0+F01↑j
.text:000000000000F2A8                 sub     r12d, 1
.text:000000000000F2AC                 mov     edx, 16Dh
.text:000000000000F2B1                 test    r12b, 3
.text:000000000000F2B5                 jnz     short loc_F2F3
.text:000000000000F2B7                 mov     eax, r12d
.text:000000000000F2BA                 mov     edx, 51EB851Fh
.text:000000000000F2BF                 imul    edx
.text:000000000000F2C1                 mov     eax, edx
.text:000000000000F2C3                 mov     edx, r12d
.text:000000000000F2C6                 sar     edx, 1Fh
.text:000000000000F2C9                 sar     eax, 5
.text:000000000000F2CC                 sub     eax, edx
.text:000000000000F2CE                 mov     edx, 16Eh
.text:000000000000F2D3                 imul    eax, 64h ; 'd'
.text:000000000000F2D6                 cmp     r12d, eax
.text:000000000000F2D9                 jnz     short loc_F2F3
.text:000000000000F2DB                 mov     eax, r12d
.text:000000000000F2DE                 mov     ecx, 190h
.text:000000000000F2E3                 cdq
.text:000000000000F2E4                 idiv    ecx
.text:000000000000F2E6                 cmp     edx, 1
.text:000000000000F2E9                 sbb     edx, edx
.text:000000000000F2EB                 not     edx
.text:000000000000F2ED                 add     edx, 16Eh
.text:000000000000F2F3
.text:000000000000F2F3 loc_F2F3:                               ; CODE XREF: __strftime_internal_0+1835↑j
.text:000000000000F2F3                                         ; __strftime_internal_0+1859↑j
.text:000000000000F2F3                 add     r8d, edx
.text:000000000000F2F6                 mov     edx, 92492493h
.text:000000000000F2FB                 mov     ecx, r8d
.text:000000000000F2FE                 sub     ecx, [rsp+4F8h+var_4C0]
.text:000000000000F302                 add     ecx, 17Eh
.text:000000000000F308                 mov     eax, ecx
.text:000000000000F30A                 sub     r8d, ecx
.text:000000000000F30D                 imul    edx
.text:000000000000F30F                 lea     eax, [rdx+rcx]
.text:000000000000F312                 mov     edx, ecx
.text:000000000000F314                 sar     edx, 1Fh
.text:000000000000F317                 sar     eax, 2
.text:000000000000F31A                 sub     eax, edx
.text:000000000000F31C                 lea     edx, ds:0[rax*8]
.text:000000000000F323                 sub     edx, eax
.text:000000000000F325                 lea     ecx, [r8+rdx+3]
.text:000000000000F32A                 mov     r8d, 0FFFFFFFFh
.text:000000000000F330                 jmp     loc_EA1F
.text:000000000000F335 ; ---------------------------------------------------------------------------
.text:000000000000F335
.text:000000000000F335 loc_F335:                               ; CODE XREF: __strftime_internal_0+ABF↑j
.text:000000000000F335                                         ; __strftime_internal_0+AD1↑j
.text:000000000000F335                 imul    esi, 64h ; 'd'
.text:000000000000F338                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000F33D                 mov     edi, 9
.text:000000000000F342                 imul    eax, r12d, 2710h
.text:000000000000F349                 add     eax, esi
.text:000000000000F34B                 mov     esi, 14h
.text:000000000000F350                 add     ecx, eax
.text:000000000000F352                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000F357                 xor     eax, 1
.text:000000000000F35A                 jmp     loc_DFF7
.text:000000000000F35F ; ---------------------------------------------------------------------------
.text:000000000000F35F
.text:000000000000F35F loc_F35F:                               ; CODE XREF: __strftime_internal_0+FAD↑j
.text:000000000000F35F                 mov     eax, ecx
.text:000000000000F361                 mov     edx, 92492493h
.text:000000000000F366                 mov     edi, 2
.text:000000000000F36B                 imul    edx
.text:000000000000F36D                 lea     eax, [rdx+rcx]
.text:000000000000F370                 sar     ecx, 1Fh
.text:000000000000F373                 sar     eax, 2
.text:000000000000F376                 sub     eax, ecx
.text:000000000000F378                 mov     ecx, eax
.text:000000000000F37A                 add     ecx, 1
.text:000000000000F37D                 jmp     loc_DFE0
.text:000000000000F382 ; ---------------------------------------------------------------------------
.text:000000000000F382
.text:000000000000F382 loc_F382:                               ; CODE XREF: __strftime_internal_0+AAF↑j
.text:000000000000F382                                         ; __strftime_internal_0+AD9↑j
.text:000000000000F382                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000F387                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000F38C                 mov     edi, 6
.text:000000000000F391                 imul    ecx, r12d, 64h ; 'd'
.text:000000000000F395                 xor     eax, 1
.text:000000000000F398                 add     ecx, esi
.text:000000000000F39A                 mov     esi, 4
.text:000000000000F39F                 jmp     loc_DFF7
.text:000000000000F3A4 ; ---------------------------------------------------------------------------
.text:000000000000F3A4
.text:000000000000F3A4 loc_F3A4:                               ; CODE XREF: __strftime_internal_0+607↑j
.text:000000000000F3A4                                         ; __strftime_internal_0+611↑j
.text:000000000000F3A4                 mov     rdi, rbp        ; s
.text:000000000000F3A7                 mov     esi, 30h ; '0'  ; c
.text:000000000000F3AC                 mov     rbp, r12
.text:000000000000F3AF                 call    _memset
.text:000000000000F3B4                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000F3B9                 jmp     loc_E0AC
.text:000000000000F3BE ; ---------------------------------------------------------------------------
.text:000000000000F3BE
.text:000000000000F3BE loc_F3BE:                               ; CODE XREF: __strftime_internal_0+136D↑j
.text:000000000000F3BE                                         ; __strftime_internal_0+1377↑j
.text:000000000000F3BE                 mov     rdi, rbp        ; s
.text:000000000000F3C1                 mov     esi, 30h ; '0'  ; c
.text:000000000000F3C6                 mov     rbp, r12
.text:000000000000F3C9                 call    _memset
.text:000000000000F3CE                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000F3D3                 jmp     loc_EE12
.text:000000000000F3D8 ; ---------------------------------------------------------------------------
.text:000000000000F3D8
.text:000000000000F3D8 loc_F3D8:                               ; CODE XREF: __strftime_internal_0+985↑j
.text:000000000000F3D8                 call    _memcpy
.text:000000000000F3DD                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000F3E2                 jmp     loc_E415
.text:000000000000F3E7 ; ---------------------------------------------------------------------------
.text:000000000000F3E7
.text:000000000000F3E7 loc_F3E7:                               ; CODE XREF: __strftime_internal_0+96A↑j
.text:000000000000F3E7                 mov     rsi, [rsp+4F8h+var_4D8]
.text:000000000000F3EC                 mov     rdx, r12
.text:000000000000F3EF                 mov     rdi, rbp
.text:000000000000F3F2                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000F3F7                 call    memcpy_lowcase
.text:000000000000F3FC                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000F401                 jmp     loc_E415
.text:000000000000F406 ; ---------------------------------------------------------------------------
.text:000000000000F406
.text:000000000000F406 loc_F406:                               ; CODE XREF: __strftime_internal_0+A17↑j
.text:000000000000F406                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000F40A                 jmp     def_DC8F        ; jumptable 000000000000DC8F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000F40F ; ---------------------------------------------------------------------------
.text:000000000000F40F
.text:000000000000F40F loc_F40F:                               ; CODE XREF: __strftime_internal_0+AC9↑j
.text:000000000000F40F                 movzx   ecx, byte ptr [rbx]
.text:000000000000F412                 mov     r9, rbx
.text:000000000000F415                 jmp     loc_EC79
.text:000000000000F41A ; ---------------------------------------------------------------------------
.text:000000000000F41A
.text:000000000000F41A loc_F41A:                               ; CODE XREF: __strftime_internal_0+E81↑j
.text:000000000000F41A                 lea     rcx, [rbx+2]
.text:000000000000F41E                 mov     r8d, 1
.text:000000000000F424
.text:000000000000F424 loc_F424:                               ; CODE XREF: __strftime_internal_0+19BB↓j
.text:000000000000F424                 mov     rdx, rcx
.text:000000000000F427                 add     rcx, 1
.text:000000000000F42B                 movzx   eax, byte ptr [rcx-1]
.text:000000000000F42F                 add     r8, 1
.text:000000000000F433                 cmp     al, 3Ah ; ':'
.text:000000000000F435                 jnz     loc_E90D
.text:000000000000F43B                 jmp     short loc_F424
.text:000000000000F43D ; ---------------------------------------------------------------------------
.text:000000000000F43D
.text:000000000000F43D loc_F43D:                               ; CODE XREF: __strftime_internal_0+11C3↑j
.text:000000000000F43D                                         ; __strftime_internal_0+11CC↑j
.text:000000000000F43D                 mov     esi, r10d
.text:000000000000F440                 mov     eax, 0
.text:000000000000F445                 sub     esi, 6
.text:000000000000F448                 cmovns  eax, esi
.text:000000000000F44B                 mov     [rsp+4F8h+var_4C0], eax
.text:000000000000F44F                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:000000000000F456                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000F45B                 jmp     loc_E0F2
.text:000000000000F460 ; ---------------------------------------------------------------------------
.text:000000000000F460
.text:000000000000F460 loc_F460:                               ; CODE XREF: __strftime_internal_0+AB5↑j
.text:000000000000F460                 imul    ecx, r12d, 64h ; 'd'
.text:000000000000F464                 xor     esi, esi
.text:000000000000F466                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000F46B                 mov     edi, 5
.text:000000000000F470                 add     ecx, eax
.text:000000000000F472                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000F477                 xor     eax, 1
.text:000000000000F47A                 jmp     loc_DFF7
.text:000000000000F47F ; ---------------------------------------------------------------------------
.text:000000000000F47F
.text:000000000000F47F loc_F47F:                               ; CODE XREF: __strftime_internal_0+93A↑j
.text:000000000000F47F                                         ; __strftime_internal_0+944↑j
.text:000000000000F47F                 mov     rdi, rbp        ; s
.text:000000000000F482                 mov     esi, 30h ; '0'  ; c
.text:000000000000F487                 call    _memset
.text:000000000000F48C                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000F491                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000F497                 mov     rcx, [rsp+4F8h+var_4B0]
.text:000000000000F49C                 jmp     loc_E3E7
.text:000000000000F4A1 ; ---------------------------------------------------------------------------
.text:000000000000F4A1
.text:000000000000F4A1 loc_F4A1:                               ; CODE XREF: __strftime_internal_0+C50↑j
.text:000000000000F4A1                                         ; __strftime_internal_0+C5A↑j
.text:000000000000F4A1                 mov     rdi, rbp        ; s
.text:000000000000F4A4                 mov     esi, 30h ; '0'  ; c
.text:000000000000F4A9                 mov     rbp, r12
.text:000000000000F4AC                 call    _memset
.text:000000000000F4B1                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000F4B6                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000F4BB                 mov     r8, [rsp+4F8h+var_4A0]
.text:000000000000F4C0                 jmp     loc_E6FF
.text:000000000000F4C5 ; ---------------------------------------------------------------------------
.text:000000000000F4C5
.text:000000000000F4C5 loc_F4C5:                               ; CODE XREF: __strftime_internal_0+7D6↑j
.text:000000000000F4C5                                         ; __strftime_internal_0+7E5↑j
.text:000000000000F4C5                 mov     esi, 30h ; '0'
.text:000000000000F4CA                 jmp     loc_E26B
.text:000000000000F4CF ; ---------------------------------------------------------------------------
.text:000000000000F4CF
.text:000000000000F4CF loc_F4CF:                               ; CODE XREF: __strftime_internal_0+167E↑j
.text:000000000000F4CF                                         ; __strftime_internal_0+1688↑j
.text:000000000000F4CF                 mov     rdi, rbp        ; s
.text:000000000000F4D2                 mov     esi, 30h ; '0'  ; c
.text:000000000000F4D7                 call    _memset
.text:000000000000F4DC                 mov     rbp, [rsp+4F8h+var_4B8]
.text:000000000000F4E1                 mov     r11, [rsp+4F8h+var_4A8]
.text:000000000000F4E6                 mov     rcx, [rsp+4F8h+var_4A0]
.text:000000000000F4EB                 mov     r8, [rsp+4F8h+var_498]
.text:000000000000F4F0                 mov     r10d, [rsp+4F8h+var_48C]
.text:000000000000F4F5                 jmp     loc_F134
.text:000000000000F4FA ; ---------------------------------------------------------------------------
.text:000000000000F4FA
.text:000000000000F4FA loc_F4FA:                               ; CODE XREF: __strftime_internal_0+1018↑j
.text:000000000000F4FA                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000F4FF                 mov     edi, 2
.text:000000000000F504                 jmp     loc_EC00
.text:000000000000F509 ; ---------------------------------------------------------------------------
.text:000000000000F509
.text:000000000000F509 loc_F509:                               ; CODE XREF: __strftime_internal_0+127A↑j
.text:000000000000F509                 mov     ecx, [rsp+4F8h+arg_18]
.text:000000000000F510                 jmp     loc_ED26
.text:000000000000F515 ; ---------------------------------------------------------------------------
.text:000000000000F515
.text:000000000000F515 loc_F515:                               ; CODE XREF: __strftime_internal_0+E3↑j
.text:000000000000F515                 call    ___stack_chk_fail
.text:000000000000F51A ; ---------------------------------------------------------------------------
.text:000000000000F51A
.text:000000000000F51A loc_F51A:                               ; CODE XREF: __strftime_internal_0+FF9↑j
.text:000000000000F51A                 add     ecx, 64h ; 'd'
.text:000000000000F51D                 test    r15d, r15d
.text:000000000000F520                 jz      loc_EA8A
.text:000000000000F526                 jmp     loc_E462
.text:000000000000F52B ; ---------------------------------------------------------------------------
.text:000000000000F52B
.text:000000000000F52B loc_F52B:                               ; CODE XREF: __strftime_internal_0+3D5↑j
.text:000000000000F52B                 xor     edi, edi
.text:000000000000F52D                 jmp     loc_E01C
.text:000000000000F52D ; } // starts at DA80
.text:000000000000F52D __strftime_internal_0 endp
.text:000000000000F52D
.text:000000000000F52D ; ---------------------------------------------------------------------------
.text:000000000000F532                 align 20h
.text:000000000000F540
.text:000000000000F540 ; =============== S U B R O U T I N E =======================================
.text:000000000000F540
.text:000000000000F540
.text:000000000000F540                 public nstrftime
.text:000000000000F540 nstrftime       proc near               ; CODE XREF: debug_strfdatetime_constprop_12+36↑p
.text:000000000000F540
.text:000000000000F540 var_11          = qword ptr -11h
.text:000000000000F540
.text:000000000000F540 ; __unwind {
.text:000000000000F540                 sub     rsp, 18h
.text:000000000000F544                 mov     rax, fs:28h
.text:000000000000F54D                 mov     [rsp+18h+var_11+1], rax
.text:000000000000F552                 xor     eax, eax
.text:000000000000F554                 mov     byte ptr [rsp+18h+var_11], 0
.text:000000000000F559                 push    r9              ; int
.text:000000000000F55B                 xor     r9d, r9d
.text:000000000000F55E                 push    r8              ; __int64
.text:000000000000F560                 xor     r8d, r8d
.text:000000000000F563                 lea     rax, [rsp+28h+var_11]
.text:000000000000F568                 push    rax             ; __int64
.text:000000000000F569                 push    0FFFFFFFFFFFFFFFFh ; int
.text:000000000000F56B                 call    __strftime_internal_0
.text:000000000000F570                 add     rsp, 20h
.text:000000000000F574                 mov     rdx, [rsp+18h+var_11+1]
.text:000000000000F579                 xor     rdx, fs:28h
.text:000000000000F582                 jnz     short loc_F589
.text:000000000000F584                 add     rsp, 18h
.text:000000000000F588                 retn
.text:000000000000F589 ; ---------------------------------------------------------------------------
.text:000000000000F589
.text:000000000000F589 loc_F589:                               ; CODE XREF: nstrftime+42↑j
.text:000000000000F589                 call    ___stack_chk_fail
.text:000000000000F589 ; } // starts at F540
.text:000000000000F589 nstrftime       endp
.text:000000000000F589
.text:000000000000F589 ; ---------------------------------------------------------------------------
.text:000000000000F58E                 align 10h
.text:000000000000F590
.text:000000000000F590 ; =============== S U B R O U T I N E =======================================
.text:000000000000F590
.text:000000000000F590
.text:000000000000F590                 public fseterr
.text:000000000000F590 fseterr         proc near               ; CODE XREF: rpl_vfprintf+E6↑p
.text:000000000000F590 ; __unwind {
.text:000000000000F590                 or      dword ptr [rdi], 20h
.text:000000000000F593                 retn
.text:000000000000F593 ; } // starts at F590
.text:000000000000F593 fseterr         endp
.text:000000000000F593
.text:000000000000F593 ; ---------------------------------------------------------------------------
.text:000000000000F594                 align 20h
.text:000000000000F5A0
.text:000000000000F5A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F5A0
.text:000000000000F5A0 ; Attributes: bp-based frame
.text:000000000000F5A0
.text:000000000000F5A0                 public vasnprintf
.text:000000000000F5A0 vasnprintf      proc near               ; CODE XREF: rpl_vfprintf+42↑p
.text:000000000000F5A0
.text:000000000000F5A0 var_450         = tbyte ptr -450h
.text:000000000000F5A0 var_440         = tbyte ptr -440h
.text:000000000000F5A0 var_430         = qword ptr -430h
.text:000000000000F5A0 var_421         = byte ptr -421h
.text:000000000000F5A0 ptr             = qword ptr -420h
.text:000000000000F5A0 var_418         = qword ptr -418h
.text:000000000000F5A0 var_410         = qword ptr -410h
.text:000000000000F5A0 var_408         = qword ptr -408h
.text:000000000000F5A0 var_400         = qword ptr -400h
.text:000000000000F5A0 var_3F8         = qword ptr -3F8h
.text:000000000000F5A0 var_3F0         = qword ptr -3F0h
.text:000000000000F5A0 src             = qword ptr -3E8h
.text:000000000000F5A0 var_3E0         = qword ptr -3E0h
.text:000000000000F5A0 var_3D8         = qword ptr -3D8h
.text:000000000000F5A0 var_3D0         = qword ptr -3D0h
.text:000000000000F5A0 n               = qword ptr -3C8h
.text:000000000000F5A0 var_3BC         = dword ptr -3BCh
.text:000000000000F5A0 var_3B8         = dword ptr -3B8h
.text:000000000000F5A0 var_3B4         = dword ptr -3B4h
.text:000000000000F5A0 var_3B0         = byte ptr -3B0h
.text:000000000000F5A0 var_3A8         = qword ptr -3A8h
.text:000000000000F5A0 var_2C0         = qword ptr -2C0h
.text:000000000000F5A0 var_2B8         = qword ptr -2B8h
.text:000000000000F5A0 var_2B0         = qword ptr -2B0h
.text:000000000000F5A0 var_2A8         = qword ptr -2A8h
.text:000000000000F5A0 var_38          = qword ptr -38h
.text:000000000000F5A0
.text:000000000000F5A0 ; __unwind {
.text:000000000000F5A0                 push    rbp
.text:000000000000F5A1                 mov     rbp, rsp
.text:000000000000F5A4                 push    r15
.text:000000000000F5A6                 push    r14
.text:000000000000F5A8                 push    r13
.text:000000000000F5AA                 push    r12
.text:000000000000F5AC                 lea     r14, [rbp+var_3B0]
.text:000000000000F5B3                 push    rbx
.text:000000000000F5B4                 mov     rbx, rdx
.text:000000000000F5B7                 mov     r12, rcx
.text:000000000000F5BA                 mov     rdx, r14
.text:000000000000F5BD                 sub     rsp, 408h
.text:000000000000F5C4                 mov     [rbp+var_418], rsi
.text:000000000000F5CB                 lea     rsi, [rbp+var_2C0]
.text:000000000000F5D2                 mov     [rbp+src], rdi
.text:000000000000F5D9                 mov     rdi, rbx
.text:000000000000F5DC                 mov     [rbp+var_410], r14
.text:000000000000F5E3                 mov     rax, fs:28h
.text:000000000000F5EC                 mov     [rbp+var_38], rax
.text:000000000000F5F0                 xor     eax, eax
.text:000000000000F5F2                 mov     [rbp+var_408], rsi
.text:000000000000F5F9                 call    printf_parse
.text:000000000000F5FE                 test    eax, eax
.text:000000000000F600                 js      loc_10468
.text:000000000000F606                 mov     rsi, r14
.text:000000000000F609                 mov     rdi, r12
.text:000000000000F60C                 call    printf_fetchargs
.text:000000000000F611                 test    eax, eax
.text:000000000000F613                 js      loc_104D0
.text:000000000000F619                 mov     rax, [rbp+var_2B0]
.text:000000000000F620                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F627                 add     rax, 7
.text:000000000000F62B                 cmp     rax, 6
.text:000000000000F62F                 cmovbe  rax, rdx
.text:000000000000F633                 add     rax, [rbp+var_2A8]
.text:000000000000F63A                 jb      loc_10068
.text:000000000000F640                 mov     rdi, rax
.text:000000000000F643                 xor     r8d, r8d
.text:000000000000F646                 add     rdi, 6          ; size
.text:000000000000F64A                 setb    r8b
.text:000000000000F64E                 jb      loc_10068
.text:000000000000F654                 cmp     rdi, 0F9Fh
.text:000000000000F65B                 jbe     loc_F7A8
.text:000000000000F661                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000F665                 mov     [rbp+n], r8
.text:000000000000F66C                 jz      loc_10068
.text:000000000000F672                 call    _malloc
.text:000000000000F677                 test    rax, rax
.text:000000000000F67A                 mov     [rbp+var_3D8], rax
.text:000000000000F681                 jz      loc_10068
.text:000000000000F687                 mov     r8, [rbp+n]
.text:000000000000F68E                 mov     [rbp+ptr], rax
.text:000000000000F695
.text:000000000000F695 loc_F695:                               ; CODE XREF: vasnprintf+22E↓j
.text:000000000000F695                 xor     r12d, r12d
.text:000000000000F698                 cmp     [rbp+src], 0
.text:000000000000F6A0                 jz      short loc_F6AC
.text:000000000000F6A2                 mov     rax, [rbp+var_418]
.text:000000000000F6A9                 mov     r12, [rax]
.text:000000000000F6AC
.text:000000000000F6AC loc_F6AC:                               ; CODE XREF: vasnprintf+100↑j
.text:000000000000F6AC                 mov     r13, [rbp+var_2B8]
.text:000000000000F6B3                 lea     rax, [rbp+var_3BC]
.text:000000000000F6BA                 mov     r15, [rbp+src]
.text:000000000000F6C1                 mov     [rbp+var_400], 0
.text:000000000000F6CC                 mov     [rbp+var_3F0], rax
.text:000000000000F6D3                 mov     rax, rbx
.text:000000000000F6D6                 mov     rbx, r8
.text:000000000000F6D9                 mov     rcx, [r13+0]
.text:000000000000F6DD                 mov     r8, rax
.text:000000000000F6E0                 cmp     rcx, r8
.text:000000000000F6E3                 jz      loc_10051
.text:000000000000F6E9
.text:000000000000F6E9 loc_F6E9:                               ; CODE XREF: vasnprintf+AAB↓j
.text:000000000000F6E9                 sub     rcx, r8
.text:000000000000F6EC                 mov     rax, rbx
.text:000000000000F6EF                 add     rax, rcx
.text:000000000000F6F2                 mov     r14, rax
.text:000000000000F6F5                 jnb     loc_F7D8
.text:000000000000F6FB                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000F6FF                 jz      loc_101D0
.text:000000000000F705
.text:000000000000F705 loc_F705:                               ; CODE XREF: vasnprintf+4E2↓j
.text:000000000000F705                                         ; vasnprintf+A86↓j ...
.text:000000000000F705                 call    ___errno_location
.text:000000000000F70A                 mov     [rbp+n], rax
.text:000000000000F711
.text:000000000000F711 loc_F711:                               ; CODE XREF: vasnprintf+640↓j
.text:000000000000F711                                         ; vasnprintf+652↓j ...
.text:000000000000F711                 cmp     r15, [rbp+src]
.text:000000000000F718                 jz      short loc_F723
.text:000000000000F71A                 test    r15, r15
.text:000000000000F71D                 jnz     loc_10200
.text:000000000000F723
.text:000000000000F723 loc_F723:                               ; CODE XREF: vasnprintf+178↑j
.text:000000000000F723                                         ; vasnprintf+C68↓j
.text:000000000000F723                 mov     rax, [rbp+ptr]
.text:000000000000F72A                 test    rax, rax
.text:000000000000F72D                 jz      short loc_F737
.text:000000000000F72F                 mov     rdi, rax        ; ptr
.text:000000000000F732                 call    _free
.text:000000000000F737
.text:000000000000F737 loc_F737:                               ; CODE XREF: vasnprintf+18D↑j
.text:000000000000F737                                         ; vasnprintf+AD4↓j
.text:000000000000F737                 mov     rax, [rbp+var_408]
.text:000000000000F73E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000F745                 add     rax, 20h ; ' '
.text:000000000000F749                 cmp     rdi, rax
.text:000000000000F74C                 jz      short loc_F753
.text:000000000000F74E                 call    _free
.text:000000000000F753
.text:000000000000F753 loc_F753:                               ; CODE XREF: vasnprintf+1AC↑j
.text:000000000000F753                 mov     rax, [rbp+var_410]
.text:000000000000F75A                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000F761                 add     rax, 10h
.text:000000000000F765                 cmp     rdi, rax
.text:000000000000F768                 jz      short loc_F76F
.text:000000000000F76A                 call    _free
.text:000000000000F76F
.text:000000000000F76F loc_F76F:                               ; CODE XREF: vasnprintf+1C8↑j
.text:000000000000F76F                 mov     rax, [rbp+n]
.text:000000000000F776                 xor     r15d, r15d
.text:000000000000F779                 mov     dword ptr [rax], 0Ch
.text:000000000000F77F
.text:000000000000F77F loc_F77F:                               ; CODE XREF: vasnprintf+7BA↓j
.text:000000000000F77F                                         ; vasnprintf+EBE↓j ...
.text:000000000000F77F                 mov     rdi, [rbp+var_38]
.text:000000000000F783                 xor     rdi, fs:28h
.text:000000000000F78C                 mov     rax, r15
.text:000000000000F78F                 jnz     loc_10697
.text:000000000000F795                 lea     rsp, [rbp-28h]
.text:000000000000F799                 pop     rbx
.text:000000000000F79A                 pop     r12
.text:000000000000F79C                 pop     r13
.text:000000000000F79E                 pop     r14
.text:000000000000F7A0                 pop     r15
.text:000000000000F7A2                 pop     rbp
.text:000000000000F7A3                 retn
.text:000000000000F7A3 ; ---------------------------------------------------------------------------
.text:000000000000F7A4                 align 8
.text:000000000000F7A8
.text:000000000000F7A8 loc_F7A8:                               ; CODE XREF: vasnprintf+BB↑j
.text:000000000000F7A8                 add     rax, 24h ; '$'
.text:000000000000F7AC                 mov     [rbp+ptr], 0
.text:000000000000F7B7                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000F7BB                 sub     rsp, rax
.text:000000000000F7BE                 lea     rax, [rsp+430h+var_421]
.text:000000000000F7C3                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000F7C7                 mov     [rbp+var_3D8], rax
.text:000000000000F7CE                 jmp     loc_F695
.text:000000000000F7CE ; ---------------------------------------------------------------------------
.text:000000000000F7D3                 align 8
.text:000000000000F7D8
.text:000000000000F7D8 loc_F7D8:                               ; CODE XREF: vasnprintf+155↑j
.text:000000000000F7D8                 cmp     r12, rax
.text:000000000000F7DB                 jnb     short loc_F844
.text:000000000000F7DD                 test    r12, r12
.text:000000000000F7E0                 jnz     loc_10110
.text:000000000000F7E6                 cmp     rax, 0Ch
.text:000000000000F7EA                 ja      loc_10122
.text:000000000000F7F0                 mov     r12d, 0Ch
.text:000000000000F7F6
.text:000000000000F7F6 loc_F7F6:                               ; CODE XREF: vasnprintf+B7C↓j
.text:000000000000F7F6                 cmp     r15, [rbp+src]
.text:000000000000F7FD                 setz    dl
.text:000000000000F800                 test    r15, r15
.text:000000000000F803                 jz      loc_10148
.text:000000000000F809
.text:000000000000F809 loc_F809:                               ; CODE XREF: vasnprintf+B9C↓j
.text:000000000000F809                 test    dl, dl
.text:000000000000F80B                 jnz     loc_10148
.text:000000000000F811                 mov     rsi, r12        ; size
.text:000000000000F814                 mov     rdi, r15        ; ptr
.text:000000000000F817                 mov     [rbp+var_3D0], r8
.text:000000000000F81E                 mov     [rbp+n], rcx
.text:000000000000F825                 call    _realloc
.text:000000000000F82A                 test    rax, rax
.text:000000000000F82D                 mov     rcx, [rbp+n]
.text:000000000000F834                 mov     r8, [rbp+var_3D0]
.text:000000000000F83B                 jz      loc_101EB
.text:000000000000F841                 mov     r15, rax
.text:000000000000F844
.text:000000000000F844 loc_F844:                               ; CODE XREF: vasnprintf+23B↑j
.text:000000000000F844                                         ; vasnprintf+C23↓j ...
.text:000000000000F844                 lea     rdi, [r15+rbx]  ; dest
.text:000000000000F848                 mov     rdx, rcx        ; n
.text:000000000000F84B                 mov     rsi, r8         ; src
.text:000000000000F84E                 call    _memcpy
.text:000000000000F853
.text:000000000000F853 loc_F853:                               ; CODE XREF: vasnprintf+AB4↓j
.text:000000000000F853                 mov     rax, [rbp+var_400]
.text:000000000000F85A                 cmp     [rbp+var_2C0], rax
.text:000000000000F861                 jz      loc_1051B
.text:000000000000F867                 movzx   edx, byte ptr [r13+48h]
.text:000000000000F86C                 mov     rax, [r13+50h]
.text:000000000000F870                 cmp     dl, 25h ; '%'
.text:000000000000F873                 jz      loc_10008
.text:000000000000F879                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000F87D                 jz      def_FAFB        ; jumptable 000000000000FAFB default case, case 0
.text:000000000000F87D                                         ; jumptable 00000000000100A0 default case
.text:000000000000F883                 mov     r8, [rbp+var_3A8]
.text:000000000000F88A                 shl     rax, 5
.text:000000000000F88E                 add     rax, r8
.text:000000000000F891                 cmp     dl, 6Eh ; 'n'
.text:000000000000F894                 mov     edi, [rax]
.text:000000000000F896                 mov     dword ptr [rbp+var_3D0], edi
.text:000000000000F89C                 jz      loc_10080
.text:000000000000F8A2                 mov     eax, [r13+10h]
.text:000000000000F8A6                 mov     rdi, [rbp+var_3D8]
.text:000000000000F8AD                 test    al, 1
.text:000000000000F8AF                 mov     byte ptr [rdi], 25h ; '%'
.text:000000000000F8B2                 lea     rbx, [rdi+1]
.text:000000000000F8B6                 jz      short loc_F8C7
.text:000000000000F8B8                 mov     rdi, [rbp+var_3D8]
.text:000000000000F8BF                 lea     rbx, [rdi+2]
.text:000000000000F8C3                 mov     byte ptr [rdi+1], 27h ; '''
.text:000000000000F8C7
.text:000000000000F8C7 loc_F8C7:                               ; CODE XREF: vasnprintf+316↑j
.text:000000000000F8C7                 test    al, 2
.text:000000000000F8C9                 jz      short loc_F8D2
.text:000000000000F8CB                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000000F8CE                 add     rbx, 1
.text:000000000000F8D2
.text:000000000000F8D2 loc_F8D2:                               ; CODE XREF: vasnprintf+329↑j
.text:000000000000F8D2                 test    al, 4
.text:000000000000F8D4                 jz      short loc_F8DD
.text:000000000000F8D6                 mov     byte ptr [rbx], 2Bh ; '+'
.text:000000000000F8D9                 add     rbx, 1
.text:000000000000F8DD
.text:000000000000F8DD loc_F8DD:                               ; CODE XREF: vasnprintf+334↑j
.text:000000000000F8DD                 test    al, 8
.text:000000000000F8DF                 jz      short loc_F8E8
.text:000000000000F8E1                 mov     byte ptr [rbx], 20h ; ' '
.text:000000000000F8E4                 add     rbx, 1
.text:000000000000F8E8
.text:000000000000F8E8 loc_F8E8:                               ; CODE XREF: vasnprintf+33F↑j
.text:000000000000F8E8                 test    al, 10h
.text:000000000000F8EA                 jz      short loc_F8F3
.text:000000000000F8EC                 mov     byte ptr [rbx], 23h ; '#'
.text:000000000000F8EF                 add     rbx, 1
.text:000000000000F8F3
.text:000000000000F8F3 loc_F8F3:                               ; CODE XREF: vasnprintf+34A↑j
.text:000000000000F8F3                 test    al, 40h
.text:000000000000F8F5                 jz      short loc_F8FE
.text:000000000000F8F7                 mov     byte ptr [rbx], 49h ; 'I'
.text:000000000000F8FA                 add     rbx, 1
.text:000000000000F8FE
.text:000000000000F8FE loc_F8FE:                               ; CODE XREF: vasnprintf+355↑j
.text:000000000000F8FE                 test    al, 20h
.text:000000000000F900                 jz      short loc_F909
.text:000000000000F902                 mov     byte ptr [rbx], 30h ; '0'
.text:000000000000F905                 add     rbx, 1
.text:000000000000F909
.text:000000000000F909 loc_F909:                               ; CODE XREF: vasnprintf+360↑j
.text:000000000000F909                 mov     rsi, [r13+18h]  ; src
.text:000000000000F90D                 mov     rdx, [r13+20h]
.text:000000000000F911                 cmp     rsi, rdx
.text:000000000000F914                 jz      short loc_F946
.text:000000000000F916                 mov     rcx, rdx
.text:000000000000F919                 mov     rdi, rbx        ; dest
.text:000000000000F91C                 mov     [rbp+var_3E0], r8
.text:000000000000F923                 sub     rcx, rsi
.text:000000000000F926                 mov     rdx, rcx        ; n
.text:000000000000F929                 mov     [rbp+n], rcx
.text:000000000000F930                 call    _memcpy
.text:000000000000F935                 mov     rcx, [rbp+n]
.text:000000000000F93C                 mov     r8, [rbp+var_3E0]
.text:000000000000F943                 add     rbx, rcx
.text:000000000000F946
.text:000000000000F946 loc_F946:                               ; CODE XREF: vasnprintf+374↑j
.text:000000000000F946                 mov     rsi, [r13+30h]  ; src
.text:000000000000F94A                 mov     rdx, [r13+38h]
.text:000000000000F94E                 cmp     rsi, rdx
.text:000000000000F951                 jz      short loc_F983
.text:000000000000F953                 mov     rcx, rdx
.text:000000000000F956                 mov     rdi, rbx        ; dest
.text:000000000000F959                 mov     [rbp+var_3E0], r8
.text:000000000000F960                 sub     rcx, rsi
.text:000000000000F963                 mov     rdx, rcx        ; n
.text:000000000000F966                 mov     [rbp+n], rcx
.text:000000000000F96D                 call    _memcpy
.text:000000000000F972                 mov     rcx, [rbp+n]
.text:000000000000F979                 mov     r8, [rbp+var_3E0]
.text:000000000000F980                 add     rbx, rcx
.text:000000000000F983
.text:000000000000F983 loc_F983:                               ; CODE XREF: vasnprintf+3B1↑j
.text:000000000000F983                 mov     edi, dword ptr [rbp+var_3D0]
.text:000000000000F989                 cmp     edi, 10h
.text:000000000000F98C                 ja      short loc_F9BB
.text:000000000000F98E                 mov     eax, 1
.text:000000000000F993                 mov     ecx, edi
.text:000000000000F995                 shl     rax, cl
.text:000000000000F998                 test    eax, 14180h
.text:000000000000F99D                 jnz     short loc_F9B4
.text:000000000000F99F                 test    ah, 10h
.text:000000000000F9A2                 jnz     loc_10300
.text:000000000000F9A8                 test    ah, 6
.text:000000000000F9AB                 jz      short loc_F9BB
.text:000000000000F9AD                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:000000000000F9B0                 add     rbx, 1
.text:000000000000F9B4
.text:000000000000F9B4 loc_F9B4:                               ; CODE XREF: vasnprintf+3FD↑j
.text:000000000000F9B4                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:000000000000F9B7                 add     rbx, 1
.text:000000000000F9BB
.text:000000000000F9BB loc_F9BB:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000F9BB                                         ; vasnprintf+40B↑j ...
.text:000000000000F9BB                 movzx   eax, byte ptr [r13+48h]
.text:000000000000F9C0                 mov     byte ptr [rbx+1], 0
.text:000000000000F9C4                 mov     [rbx], al
.text:000000000000F9C6                 mov     rax, [r13+28h]
.text:000000000000F9CA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000F9CE                 jz      loc_10100
.text:000000000000F9D4                 shl     rax, 5
.text:000000000000F9D8                 add     rax, r8
.text:000000000000F9DB                 cmp     dword ptr [rax], 5
.text:000000000000F9DE                 jnz     def_FAFB        ; jumptable 000000000000FAFB default case, case 0
.text:000000000000F9DE                                         ; jumptable 00000000000100A0 default case
.text:000000000000F9E4                 mov     eax, [rax+10h]
.text:000000000000F9E7                 mov     dword ptr [rbp+var_3E0], 1
.text:000000000000F9F1                 mov     [rbp+var_3B8], eax
.text:000000000000F9F7
.text:000000000000F9F7 loc_F9F7:                               ; CODE XREF: vasnprintf+B6A↓j
.text:000000000000F9F7                 mov     rax, [r13+40h]
.text:000000000000F9FB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000F9FF                 jz      short loc_FA2C
.text:000000000000FA01                 shl     rax, 5
.text:000000000000FA05                 add     r8, rax
.text:000000000000FA08                 cmp     dword ptr [r8], 5
.text:000000000000FA0C                 jnz     def_FAFB        ; jumptable 000000000000FAFB default case, case 0
.text:000000000000FA0C                                         ; jumptable 00000000000100A0 default case
.text:000000000000FA12                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000FA18                 mov     edx, [r8+10h]
.text:000000000000FA1C                 mov     [rbp+rax*4+var_3B8], edx
.text:000000000000FA23                 lea     eax, [rax+1]
.text:000000000000FA26                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000FA2C
.text:000000000000FA2C loc_FA2C:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000FA2C                 mov     rax, r14
.text:000000000000FA2F                 xor     edx, edx
.text:000000000000FA31                 add     rax, 2
.text:000000000000FA35                 jb      loc_1069C
.text:000000000000FA3B                 cmp     r12, rax
.text:000000000000FA3E                 jnb     short loc_FA8B
.text:000000000000FA40                 test    r12, r12
.text:000000000000FA43                 jnz     loc_10268
.text:000000000000FA49                 cmp     rax, 0Ch
.text:000000000000FA4D                 ja      loc_10280
.text:000000000000FA53                 mov     r12d, 0Ch
.text:000000000000FA59
.text:000000000000FA59 loc_FA59:                               ; CODE XREF: vasnprintf+CD4↓j
.text:000000000000FA59                 cmp     r15, [rbp+src]
.text:000000000000FA60                 setz    dl
.text:000000000000FA63                 test    r15, r15
.text:000000000000FA66                 jz      loc_102B0
.text:000000000000FA6C
.text:000000000000FA6C loc_FA6C:                               ; CODE XREF: vasnprintf+D03↓j
.text:000000000000FA6C                 test    dl, dl
.text:000000000000FA6E                 jnz     loc_102B0
.text:000000000000FA74                 mov     rsi, r12        ; size
.text:000000000000FA77                 mov     rdi, r15        ; ptr
.text:000000000000FA7A                 call    _realloc
.text:000000000000FA7F                 test    rax, rax
.text:000000000000FA82                 jz      loc_F705
.text:000000000000FA88                 mov     r15, rax
.text:000000000000FA8B
.text:000000000000FA8B loc_FA8B:                               ; CODE XREF: vasnprintf+49E↑j
.text:000000000000FA8B                                         ; vasnprintf+D53↓j ...
.text:000000000000FA8B                 mov     byte ptr [r15+r14], 0
.text:000000000000FA90                 call    ___errno_location
.text:000000000000FA95                 mov     [rbp+n], rax
.text:000000000000FA9C                 mov     eax, [rax]
.text:000000000000FA9E                 mov     [rbp+var_3F8], rbx
.text:000000000000FAA5                 mov     [rbp-424h], eax
.text:000000000000FAAB                 nop     dword ptr [rax+rax+00h]
.text:000000000000FAB0
.text:000000000000FAB0 loc_FAB0:                               ; CODE XREF: vasnprintf+637↓j
.text:000000000000FAB0                                         ; vasnprintf+68D↓j ...
.text:000000000000FAB0                 mov     rax, [rbp+n]
.text:000000000000FAB7                 mov     rbx, r12
.text:000000000000FABA                 mov     r10d, 7FFFFFFFh
.text:000000000000FAC0                 sub     rbx, r14
.text:000000000000FAC3                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000FACD                 cmp     rbx, 7FFFFFFFh
.text:000000000000FAD4                 mov     dword ptr [rax], 0
.text:000000000000FADA                 mov     eax, dword ptr [rbp+var_3D0]
.text:000000000000FAE0                 cmovbe  r10, rbx
.text:000000000000FAE4                 cmp     eax, 11h        ; switch 18 cases
.text:000000000000FAE7                 ja      def_FAFB        ; jumptable 000000000000FAFB default case, case 0
.text:000000000000FAE7                                         ; jumptable 00000000000100A0 default case
.text:000000000000FAED                 lea     rsi, jpt_FAFB
.text:000000000000FAF4                 movsxd  rax, ds:(jpt_FAFB - 14EB8h)[rsi+rax*4]
.text:000000000000FAF8                 add     rax, rsi
.text:000000000000FAFB                 jmp     rax             ; switch jump
.text:000000000000FAFB ; ---------------------------------------------------------------------------
.text:000000000000FAFD                 align 20h
.text:000000000000FB00
.text:000000000000FB00 loc_FB00:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000FB00                                         ; DATA XREF: .rodata:jpt_FAFB↓o
.text:000000000000FB00                 mov     rax, [r13+50h]  ; jumptable 000000000000FAFB cases 7-10,15-17
.text:000000000000FB04                 lea     rdi, [r15+r14]
.text:000000000000FB08                 shl     rax, 5
.text:000000000000FB0C                 add     rax, [rbp+var_3A8]
.text:000000000000FB13                 mov     r9, [rax+10h]
.text:000000000000FB17                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000FB1D                 cmp     eax, 1
.text:000000000000FB20                 jz      loc_FFE8
.text:000000000000FB26                 cmp     eax, 2
.text:000000000000FB29                 jz      loc_FFD0
.text:000000000000FB2F                 sub     rsp, 8
.text:000000000000FB33                 push    [rbp+var_3F0]
.text:000000000000FB39
.text:000000000000FB39 loc_FB39:                               ; CODE XREF: vasnprintf+CBE↓j
.text:000000000000FB39                 mov     r8, [rbp+var_3D8]
.text:000000000000FB40                 mov     rsi, r10
.text:000000000000FB43                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000FB4A                 mov     edx, 1
.text:000000000000FB4F                 xor     eax, eax
.text:000000000000FB51                 mov     [rbp+var_430], r10
.text:000000000000FB58                 call    ___snprintf_chk
.text:000000000000FB5D                 pop     rsi
.text:000000000000FB5E                 pop     rdi
.text:000000000000FB5F                 mov     r10, [rbp+var_430]
.text:000000000000FB66
.text:000000000000FB66 loc_FB66:                               ; CODE XREF: vasnprintf+83D↓j
.text:000000000000FB66                                         ; vasnprintf+8BE↓j ...
.text:000000000000FB66                 mov     ecx, [rbp+var_3BC]
.text:000000000000FB6C                 test    ecx, ecx
.text:000000000000FB6E                 js      loc_FCAC
.text:000000000000FB74
.text:000000000000FB74 loc_FB74:                               ; CODE XREF: vasnprintf+706↓j
.text:000000000000FB74                 movsxd  rdx, ecx
.text:000000000000FB77                 cmp     rdx, r10
.text:000000000000FB7A                 jnb     short loc_FB8A
.text:000000000000FB7C                 add     rdx, r15
.text:000000000000FB7F                 cmp     byte ptr [rdx+r14], 0
.text:000000000000FB84                 jnz     def_FAFB        ; jumptable 000000000000FAFB default case, case 0
.text:000000000000FB84                                         ; jumptable 00000000000100A0 default case
.text:000000000000FB8A
.text:000000000000FB8A loc_FB8A:                               ; CODE XREF: vasnprintf+5DA↑j
.text:000000000000FB8A                 cmp     ecx, eax
.text:000000000000FB8C                 jge     short loc_FB96
.text:000000000000FB8E
.text:000000000000FB8E loc_FB8E:                               ; CODE XREF: vasnprintf+71F↓j
.text:000000000000FB8E                 mov     [rbp+var_3BC], eax
.text:000000000000FB94                 mov     ecx, eax
.text:000000000000FB96
.text:000000000000FB96 loc_FB96:                               ; CODE XREF: vasnprintf+5EC↑j
.text:000000000000FB96                 lea     eax, [rcx+1]
.text:000000000000FB99                 cmp     rax, r10
.text:000000000000FB9C                 jb      loc_103D0
.text:000000000000FBA2                 cmp     rbx, 7FFFFFFEh
.text:000000000000FBA9                 ja      loc_103F0
.text:000000000000FBAF                 lea     rsi, [r12+r12]
.text:000000000000FBB3                 lea     edx, [rcx+2]
.text:000000000000FBB6                 test    r12, r12
.text:000000000000FBB9                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000FBC0                 cmovns  rax, rsi
.text:000000000000FBC4                 add     rdx, r14
.text:000000000000FBC7                 jb      loc_10688
.text:000000000000FBCD                 cmp     rax, rdx
.text:000000000000FBD0                 cmovb   rax, rdx
.text:000000000000FBD4                 cmp     r12, rax
.text:000000000000FBD7                 jnb     loc_FAB0
.text:000000000000FBDD                 test    r12, r12
.text:000000000000FBE0                 js      loc_F711
.text:000000000000FBE6                 cmp     rsi, rax
.text:000000000000FBE9                 mov     r12, rsi
.text:000000000000FBEC                 jnb     short loc_FBFB
.text:000000000000FBEE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000FBF2                 jz      loc_F711
.text:000000000000FBF8                 mov     r12, rax
.text:000000000000FBFB
.text:000000000000FBFB loc_FBFB:                               ; CODE XREF: vasnprintf+64C↑j
.text:000000000000FBFB                 cmp     r15, [rbp+src]
.text:000000000000FC02                 setz    bl
.text:000000000000FC05                 test    r15, r15
.text:000000000000FC08                 jz      loc_FF90
.text:000000000000FC0E                 test    bl, bl
.text:000000000000FC10                 jnz     loc_FF90
.text:000000000000FC16                 mov     rsi, r12        ; size
.text:000000000000FC19                 mov     rdi, r15        ; ptr
.text:000000000000FC1C                 call    _realloc
.text:000000000000FC21                 test    rax, rax
.text:000000000000FC24                 jz      loc_F711
.text:000000000000FC2A                 mov     r15, rax
.text:000000000000FC2D                 jmp     loc_FAB0
.text:000000000000FC2D ; ---------------------------------------------------------------------------
.text:000000000000FC32                 align 8
.text:000000000000FC38
.text:000000000000FC38 loc_FC38:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000FC38                                         ; DATA XREF: .rodata:jpt_FAFB↓o
.text:000000000000FC38                 mov     rax, [r13+50h]  ; jumptable 000000000000FAFB cases 5,6,13,14
.text:000000000000FC3C                 lea     rdi, [r15+r14]
.text:000000000000FC40                 shl     rax, 5
.text:000000000000FC44                 add     rax, [rbp+var_3A8]
.text:000000000000FC4B                 mov     r9d, [rax+10h]
.text:000000000000FC4F                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000FC55                 cmp     eax, 1
.text:000000000000FC58                 jz      loc_FE90
.text:000000000000FC5E
.text:000000000000FC5E loc_FC5E:                               ; CODE XREF: vasnprintf+8E9↓j
.text:000000000000FC5E                                         ; vasnprintf+9B1↓j ...
.text:000000000000FC5E                 cmp     eax, 2
.text:000000000000FC61                 jz      loc_FED8
.text:000000000000FC67
.text:000000000000FC67 loc_FC67:                               ; CODE XREF: vasnprintf+92E↓j
.text:000000000000FC67                 sub     rsp, 8
.text:000000000000FC6B                 push    [rbp+var_3F0]
.text:000000000000FC71
.text:000000000000FC71 loc_FC71:                               ; CODE XREF: vasnprintf+8FF↓j
.text:000000000000FC71                 mov     r8, [rbp+var_3D8]
.text:000000000000FC78                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000FC7F                 mov     edx, 1
.text:000000000000FC84                 mov     rsi, r10
.text:000000000000FC87                 xor     eax, eax
.text:000000000000FC89                 mov     [rbp+var_430], r10
.text:000000000000FC90                 call    ___snprintf_chk
.text:000000000000FC95                 pop     rdx
.text:000000000000FC96                 pop     rcx
.text:000000000000FC97                 mov     ecx, [rbp+var_3BC]
.text:000000000000FC9D                 mov     r10, [rbp+var_430]
.text:000000000000FCA4                 test    ecx, ecx
.text:000000000000FCA6                 jns     loc_FB74
.text:000000000000FCAC
.text:000000000000FCAC loc_FCAC:                               ; CODE XREF: vasnprintf+5CE↑j
.text:000000000000FCAC                 mov     rdi, [rbp+var_3F8]
.text:000000000000FCB3                 cmp     byte ptr [rdi+1], 0
.text:000000000000FCB7                 jnz     loc_FFF8
.text:000000000000FCBD                 test    eax, eax
.text:000000000000FCBF                 jns     loc_FB8E
.text:000000000000FCC5                 mov     rax, [rbp+n]
.text:000000000000FCCC                 mov     ebx, [rax]
.text:000000000000FCCE                 test    ebx, ebx
.text:000000000000FCD0                 jnz     short loc_FCF0
.text:000000000000FCD2                 movzx   eax, byte ptr [r13+48h]
.text:000000000000FCD7                 mov     ebx, 16h
.text:000000000000FCDC                 and     eax, 0FFFFFFEFh
.text:000000000000FCDF                 cmp     al, 63h ; 'c'
.text:000000000000FCE1                 mov     eax, 54h ; 'T'
.text:000000000000FCE6                 cmovz   ebx, eax
.text:000000000000FCE9                 nop     dword ptr [rax+00000000h]
.text:000000000000FCF0
.text:000000000000FCF0 loc_FCF0:                               ; CODE XREF: vasnprintf+730↑j
.text:000000000000FCF0                 cmp     r15, [rbp+src]
.text:000000000000FCF7                 jz      short loc_FD02
.text:000000000000FCF9                 test    r15, r15
.text:000000000000FCFC                 jnz     loc_104AC
.text:000000000000FD02
.text:000000000000FD02 loc_FD02:                               ; CODE XREF: vasnprintf+757↑j
.text:000000000000FD02                                         ; vasnprintf+F14↓j
.text:000000000000FD02                 mov     rax, [rbp+ptr]
.text:000000000000FD09                 test    rax, rax
.text:000000000000FD0C                 jz      short loc_FD16
.text:000000000000FD0E                 mov     rdi, rax        ; ptr
.text:000000000000FD11                 call    _free
.text:000000000000FD16
.text:000000000000FD16 loc_FD16:                               ; CODE XREF: vasnprintf+76C↑j
.text:000000000000FD16                 mov     rax, [rbp+var_408]
.text:000000000000FD1D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000FD24                 add     rax, 20h ; ' '
.text:000000000000FD28                 cmp     rdi, rax
.text:000000000000FD2B                 jz      short loc_FD32
.text:000000000000FD2D                 call    _free
.text:000000000000FD32
.text:000000000000FD32 loc_FD32:                               ; CODE XREF: vasnprintf+78B↑j
.text:000000000000FD32                 mov     rax, [rbp+var_410]
.text:000000000000FD39                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000FD40                 add     rax, 10h
.text:000000000000FD44                 cmp     rdi, rax
.text:000000000000FD47                 jz      short loc_FD4E
.text:000000000000FD49                 call    _free
.text:000000000000FD4E
.text:000000000000FD4E loc_FD4E:                               ; CODE XREF: vasnprintf+7A7↑j
.text:000000000000FD4E                 mov     rax, [rbp+n]
.text:000000000000FD55                 xor     r15d, r15d
.text:000000000000FD58                 mov     [rax], ebx
.text:000000000000FD5A                 jmp     loc_F77F
.text:000000000000FD5A ; ---------------------------------------------------------------------------
.text:000000000000FD5F                 align 20h
.text:000000000000FD60
.text:000000000000FD60 loc_FD60:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000FD60                                         ; DATA XREF: .rodata:jpt_FAFB↓o
.text:000000000000FD60                 mov     rax, [r13+50h]  ; jumptable 000000000000FAFB case 12
.text:000000000000FD64                 lea     rdi, [r15+r14]
.text:000000000000FD68                 shl     rax, 5
.text:000000000000FD6C                 add     rax, [rbp+var_3A8]
.text:000000000000FD73                 fld     tbyte ptr [rax+10h]
.text:000000000000FD76                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000FD7C                 cmp     eax, 1
.text:000000000000FD7F                 jz      loc_103B0
.text:000000000000FD85                 cmp     eax, 2
.text:000000000000FD88                 jnz     loc_10250
.text:000000000000FD8E                 mov     eax, [rbp+var_3B4]
.text:000000000000FD94                 sub     rsp, 8
.text:000000000000FD98                 push    [rbp+var_3F0]
.text:000000000000FD9E                 mov     r9d, [rbp+var_3B8]
.text:000000000000FDA5                 mov     r8, [rbp+var_3D8]
.text:000000000000FDAC                 mov     rsi, r10
.text:000000000000FDAF                 sub     rsp, 18h
.text:000000000000FDB3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000FDBA                 mov     edx, 1
.text:000000000000FDBF                 fstp    [rsp+458h+var_450]
.text:000000000000FDC3                 push    rax
.text:000000000000FDC4                 xor     eax, eax
.text:000000000000FDC6                 mov     [rbp+var_430], r10
.text:000000000000FDCD                 call    ___snprintf_chk
.text:000000000000FDD2                 add     rsp, 30h
.text:000000000000FDD6                 mov     r10, [rbp+var_430]
.text:000000000000FDDD                 jmp     loc_FB66
.text:000000000000FDDD ; ---------------------------------------------------------------------------
.text:000000000000FDE2                 align 8
.text:000000000000FDE8
.text:000000000000FDE8 loc_FDE8:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000FDE8                                         ; DATA XREF: .rodata:jpt_FAFB↓o
.text:000000000000FDE8                 mov     rax, [r13+50h]  ; jumptable 000000000000FAFB case 11
.text:000000000000FDEC                 lea     rdi, [r15+r14]
.text:000000000000FDF0                 shl     rax, 5
.text:000000000000FDF4                 add     rax, [rbp+var_3A8]
.text:000000000000FDFB                 movsd   xmm0, qword ptr [rax+10h]
.text:000000000000FE00                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000FE06                 cmp     eax, 1
.text:000000000000FE09                 jz      loc_103A0
.text:000000000000FE0F                 cmp     eax, 2
.text:000000000000FE12                 jnz     loc_10210
.text:000000000000FE18                 mov     eax, [rbp+var_3B4]
.text:000000000000FE1E                 push    [rbp+var_3F0]
.text:000000000000FE24                 push    rax
.text:000000000000FE25
.text:000000000000FE25 loc_FE25:                               ; CODE XREF: vasnprintf+E0A↓j
.text:000000000000FE25                 mov     r9d, [rbp+var_3B8]
.text:000000000000FE2C                 mov     r8, [rbp+var_3D8]
.text:000000000000FE33                 mov     rsi, r10
.text:000000000000FE36                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000FE3D                 mov     edx, 1
.text:000000000000FE42                 mov     eax, 1
.text:000000000000FE47                 mov     [rbp+var_430], r10
.text:000000000000FE4E                 call    ___snprintf_chk
.text:000000000000FE53                 pop     r8
.text:000000000000FE55                 mov     r10, [rbp+var_430]
.text:000000000000FE5C                 pop     r9
.text:000000000000FE5E                 jmp     loc_FB66
.text:000000000000FE5E ; ---------------------------------------------------------------------------
.text:000000000000FE63                 align 8
.text:000000000000FE68
.text:000000000000FE68 loc_FE68:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000FE68                                         ; DATA XREF: .rodata:jpt_FAFB↓o
.text:000000000000FE68                 mov     rax, [r13+50h]  ; jumptable 000000000000FAFB case 4
.text:000000000000FE6C                 lea     rdi, [r15+r14]
.text:000000000000FE70                 shl     rax, 5
.text:000000000000FE74                 add     rax, [rbp+var_3A8]
.text:000000000000FE7B                 movzx   r9d, word ptr [rax+10h]
.text:000000000000FE80                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000FE86                 cmp     eax, 1
.text:000000000000FE89                 jnz     loc_FC5E
.text:000000000000FE8F                 nop
.text:000000000000FE90
.text:000000000000FE90 loc_FE90:                               ; CODE XREF: vasnprintf+6B8↑j
.text:000000000000FE90                                         ; vasnprintf+929↓j ...
.text:000000000000FE90                 push    [rbp+var_3F0]
.text:000000000000FE96                 push    r9
.text:000000000000FE98
.text:000000000000FE98 loc_FE98:                               ; CODE XREF: vasnprintf+A50↓j
.text:000000000000FE98                 mov     r9d, [rbp+var_3B8]
.text:000000000000FE9F                 jmp     loc_FC71
.text:000000000000FE9F ; ---------------------------------------------------------------------------
.text:000000000000FEA4                 align 8
.text:000000000000FEA8
.text:000000000000FEA8 loc_FEA8:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000FEA8                                         ; DATA XREF: .rodata:jpt_FAFB↓o
.text:000000000000FEA8                 mov     rax, [r13+50h]  ; jumptable 000000000000FAFB case 3
.text:000000000000FEAC                 lea     rdi, [r15+r14]
.text:000000000000FEB0                 shl     rax, 5
.text:000000000000FEB4                 add     rax, [rbp+var_3A8]
.text:000000000000FEBB                 movsx   r9d, word ptr [rax+10h]
.text:000000000000FEC0                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000FEC6                 cmp     eax, 1
.text:000000000000FEC9                 jz      short loc_FE90
.text:000000000000FECB                 cmp     eax, 2
.text:000000000000FECE                 jnz     loc_FC67
.text:000000000000FED4                 nop     dword ptr [rax+00h]
.text:000000000000FED8
.text:000000000000FED8 loc_FED8:                               ; CODE XREF: vasnprintf+6C1↑j
.text:000000000000FED8                 sub     rsp, 8
.text:000000000000FEDC                 push    [rbp+var_3F0]
.text:000000000000FEE2                 push    r9
.text:000000000000FEE4
.text:000000000000FEE4 loc_FEE4:                               ; CODE XREF: vasnprintf+A3C↓j
.text:000000000000FEE4                 mov     eax, [rbp+var_3B4]
.text:000000000000FEEA                 push    rax
.text:000000000000FEEB
.text:000000000000FEEB loc_FEEB:                               ; CODE XREF: vasnprintf+E21↓j
.text:000000000000FEEB                 mov     r9d, [rbp+var_3B8]
.text:000000000000FEF2                 mov     r8, [rbp+var_3D8]
.text:000000000000FEF9                 mov     rsi, r10
.text:000000000000FEFC                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000FF03                 mov     edx, 1
.text:000000000000FF08                 xor     eax, eax
.text:000000000000FF0A                 mov     [rbp+var_430], r10
.text:000000000000FF11                 call    ___snprintf_chk
.text:000000000000FF16                 add     rsp, 20h
.text:000000000000FF1A                 mov     r10, [rbp+var_430]
.text:000000000000FF21                 jmp     loc_FB66
.text:000000000000FF21 ; ---------------------------------------------------------------------------
.text:000000000000FF26                 align 10h
.text:000000000000FF30
.text:000000000000FF30 loc_FF30:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000FF30                                         ; DATA XREF: .rodata:jpt_FAFB↓o
.text:000000000000FF30                 mov     rax, [r13+50h]  ; jumptable 000000000000FAFB case 2
.text:000000000000FF34                 lea     rdi, [r15+r14]
.text:000000000000FF38                 shl     rax, 5
.text:000000000000FF3C                 add     rax, [rbp+var_3A8]
.text:000000000000FF43                 movzx   r9d, byte ptr [rax+10h]
.text:000000000000FF48                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000FF4E                 cmp     eax, 1
.text:000000000000FF51                 jnz     loc_FC5E
.text:000000000000FF57                 jmp     loc_FE90
.text:000000000000FF57 ; ---------------------------------------------------------------------------
.text:000000000000FF5C                 align 20h
.text:000000000000FF60
.text:000000000000FF60 loc_FF60:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000FF60                                         ; DATA XREF: .rodata:jpt_FAFB↓o
.text:000000000000FF60                 mov     rax, [r13+50h]  ; jumptable 000000000000FAFB case 1
.text:000000000000FF64                 lea     rdi, [r15+r14]
.text:000000000000FF68                 shl     rax, 5
.text:000000000000FF6C                 add     rax, [rbp+var_3A8]
.text:000000000000FF73                 movsx   r9d, byte ptr [rax+10h]
.text:000000000000FF78                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000FF7E                 cmp     eax, 1
.text:000000000000FF81                 jnz     loc_FC5E
.text:000000000000FF87                 jmp     loc_FE90
.text:000000000000FF87 ; ---------------------------------------------------------------------------
.text:000000000000FF8C                 align 10h
.text:000000000000FF90
.text:000000000000FF90 loc_FF90:                               ; CODE XREF: vasnprintf+668↑j
.text:000000000000FF90                                         ; vasnprintf+670↑j
.text:000000000000FF90                 mov     rdi, r12        ; size
.text:000000000000FF93                 call    _malloc
.text:000000000000FF98                 test    rax, rax
.text:000000000000FF9B                 mov     rcx, rax
.text:000000000000FF9E                 jz      loc_F711
.text:000000000000FFA4                 test    r14, r14
.text:000000000000FFA7                 jz      loc_10060
.text:000000000000FFAD                 test    bl, bl
.text:000000000000FFAF                 jz      loc_10060
.text:000000000000FFB5                 mov     rsi, r15        ; src
.text:000000000000FFB8                 mov     rdx, r14        ; n
.text:000000000000FFBB                 mov     rdi, rax        ; dest
.text:000000000000FFBE                 call    _memcpy
.text:000000000000FFC3                 mov     r15, rax
.text:000000000000FFC6                 jmp     loc_FAB0
.text:000000000000FFC6 ; ---------------------------------------------------------------------------
.text:000000000000FFCB                 align 10h
.text:000000000000FFD0
.text:000000000000FFD0 loc_FFD0:                               ; CODE XREF: vasnprintf+589↑j
.text:000000000000FFD0                 sub     rsp, 8
.text:000000000000FFD4                 push    [rbp+var_3F0]
.text:000000000000FFDA                 push    r9
.text:000000000000FFDC                 jmp     loc_FEE4
.text:000000000000FFDC ; ---------------------------------------------------------------------------
.text:000000000000FFE1                 align 8
.text:000000000000FFE8
.text:000000000000FFE8 loc_FFE8:                               ; CODE XREF: vasnprintf+580↑j
.text:000000000000FFE8                 push    [rbp+var_3F0]
.text:000000000000FFEE                 push    r9
.text:000000000000FFF0                 jmp     loc_FE98
.text:000000000000FFF0 ; ---------------------------------------------------------------------------
.text:000000000000FFF5                 align 8
.text:000000000000FFF8
.text:000000000000FFF8 loc_FFF8:                               ; CODE XREF: vasnprintf+717↑j
.text:000000000000FFF8                 mov     byte ptr [rdi+1], 0
.text:000000000000FFFC                 jmp     loc_FAB0
.text:000000000000FFFC ; ---------------------------------------------------------------------------
.text:0000000000010001                 align 8
.text:0000000000010008
.text:0000000000010008 loc_10008:                              ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000010008                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001000C                 jnz     def_FAFB        ; jumptable 000000000000FAFB default case, case 0
.text:000000000001000C                                         ; jumptable 00000000000100A0 default case
.text:0000000000010012                 mov     rax, r14
.text:0000000000010015                 add     rax, 1
.text:0000000000010019                 mov     rbx, rax
.text:000000000001001C                 jnb     loc_100A8
.text:0000000000010022                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000010026                 jnz     loc_F705
.text:000000000001002C                 mov     rbx, r12
.text:000000000001002F
.text:000000000001002F loc_1002F:                              ; CODE XREF: vasnprintf+B0B↓j
.text:000000000001002F                                         ; vasnprintf+B58↓j ...
.text:000000000001002F                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000010034
.text:0000000000010034 loc_10034:                              ; CODE XREF: vasnprintf+C46↓j
.text:0000000000010034                                         ; vasnprintf+D76↓j ...
.text:0000000000010034                 mov     r8, [r13+8]
.text:0000000000010038                 add     r13, 58h ; 'X'
.text:000000000001003C                 mov     rcx, [r13+0]
.text:0000000000010040                 add     [rbp+var_400], 1
.text:0000000000010048                 cmp     rcx, r8
.text:000000000001004B                 jnz     loc_F6E9
.text:0000000000010051
.text:0000000000010051 loc_10051:                              ; CODE XREF: vasnprintf+143↑j
.text:0000000000010051                 mov     r14, rbx
.text:0000000000010054                 jmp     loc_F853
.text:0000000000010054 ; ---------------------------------------------------------------------------
.text:0000000000010059                 align 20h
.text:0000000000010060
.text:0000000000010060 loc_10060:                              ; CODE XREF: vasnprintf+A07↑j
.text:0000000000010060                                         ; vasnprintf+A0F↑j
.text:0000000000010060                 mov     r15, rcx
.text:0000000000010063                 jmp     loc_FAB0
.text:0000000000010068 ; ---------------------------------------------------------------------------
.text:0000000000010068
.text:0000000000010068 loc_10068:                              ; CODE XREF: vasnprintf+9A↑j
.text:0000000000010068                                         ; vasnprintf+AE↑j ...
.text:0000000000010068                 call    ___errno_location
.text:000000000001006D                 mov     [rbp+n], rax
.text:0000000000010074                 jmp     loc_F737
.text:0000000000010074 ; ---------------------------------------------------------------------------
.text:0000000000010079                 align 20h
.text:0000000000010080
.text:0000000000010080 loc_10080:                              ; CODE XREF: vasnprintf+2FC↑j
.text:0000000000010080                 mov     edx, edi
.text:0000000000010082                 sub     edx, 12h        ; switch 5 cases
.text:0000000000010085                 cmp     edx, 4
.text:0000000000010088                 ja      def_FAFB        ; jumptable 000000000000FAFB default case, case 0
.text:0000000000010088                                         ; jumptable 00000000000100A0 default case
.text:000000000001008E                 lea     rdi, jpt_100A0
.text:0000000000010095                 mov     rax, [rax+10h]
.text:0000000000010099                 movsxd  rdx, ds:(jpt_100A0 - 14F00h)[rdi+rdx*4]
.text:000000000001009D                 add     rdx, rdi
.text:00000000000100A0                 jmp     rdx             ; switch jump
.text:00000000000100A0 ; ---------------------------------------------------------------------------
.text:00000000000100A2                 align 8
.text:00000000000100A8
.text:00000000000100A8 loc_100A8:                              ; CODE XREF: vasnprintf+A7C↑j
.text:00000000000100A8                 cmp     r12, rax
.text:00000000000100AB                 jnb     short loc_1002F
.text:00000000000100AD                 test    r12, r12
.text:00000000000100B0                 jnz     loc_10480
.text:00000000000100B6                 cmp     rax, 0Ch
.text:00000000000100BA                 ja      loc_10492
.text:00000000000100C0                 mov     r12d, 0Ch
.text:00000000000100C6
.text:00000000000100C6 loc_100C6:                              ; CODE XREF: vasnprintf+EEC↓j
.text:00000000000100C6                                         ; vasnprintf+EFF↓j
.text:00000000000100C6                 cmp     r15, [rbp+src]
.text:00000000000100CD                 setz    dl
.text:00000000000100D0                 test    r15, r15
.text:00000000000100D3                 jz      loc_10340
.text:00000000000100D9                 test    dl, dl
.text:00000000000100DB                 jnz     loc_10340
.text:00000000000100E1                 mov     rsi, r12        ; size
.text:00000000000100E4                 mov     rdi, r15        ; ptr
.text:00000000000100E7                 call    _realloc
.text:00000000000100EC                 test    rax, rax
.text:00000000000100EF                 jz      loc_101EB
.text:00000000000100F5                 mov     r15, rax
.text:00000000000100F8                 jmp     loc_1002F
.text:00000000000100F8 ; ---------------------------------------------------------------------------
.text:00000000000100FD                 align 20h
.text:0000000000010100
.text:0000000000010100 loc_10100:                              ; CODE XREF: vasnprintf+42E↑j
.text:0000000000010100                 mov     dword ptr [rbp+var_3E0], 0
.text:000000000001010A                 jmp     loc_F9F7
.text:000000000001010A ; ---------------------------------------------------------------------------
.text:000000000001010F                 align 10h
.text:0000000000010110
.text:0000000000010110 loc_10110:                              ; CODE XREF: vasnprintf+240↑j
.text:0000000000010110                 js      loc_F705
.text:0000000000010116                 add     r12, r12
.text:0000000000010119                 cmp     r12, rax
.text:000000000001011C                 jnb     loc_F7F6
.text:0000000000010122
.text:0000000000010122 loc_10122:                              ; CODE XREF: vasnprintf+24A↑j
.text:0000000000010122                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000010126                 jz      loc_F705
.text:000000000001012C                 cmp     r15, [rbp+src]
.text:0000000000010133                 mov     r12, rax
.text:0000000000010136                 setz    dl
.text:0000000000010139                 test    r15, r15
.text:000000000001013C                 jnz     loc_F809
.text:0000000000010142                 nop     word ptr [rax+rax+00h]
.text:0000000000010148
.text:0000000000010148 loc_10148:                              ; CODE XREF: vasnprintf+263↑j
.text:0000000000010148                                         ; vasnprintf+26B↑j
.text:0000000000010148                 mov     rdi, r12        ; size
.text:000000000001014B                 mov     [rbp+var_3E0], r8
.text:0000000000010152                 mov     byte ptr [rbp+var_3D0], dl
.text:0000000000010158                 mov     [rbp+n], rcx
.text:000000000001015F                 call    _malloc
.text:0000000000010164                 test    rax, rax
.text:0000000000010167                 mov     r9, rax
.text:000000000001016A                 mov     rcx, [rbp+n]
.text:0000000000010171                 movzx   edx, byte ptr [rbp+var_3D0]
.text:0000000000010178                 mov     r8, [rbp+var_3E0]
.text:000000000001017F                 jz      loc_F705
.text:0000000000010185                 test    rbx, rbx
.text:0000000000010188                 jz      loc_10390
.text:000000000001018E                 test    dl, dl
.text:0000000000010190                 jz      loc_10390
.text:0000000000010196                 mov     rsi, r15        ; src
.text:0000000000010199                 mov     rdx, rbx        ; n
.text:000000000001019C                 mov     rdi, rax        ; dest
.text:000000000001019F                 mov     [rbp+var_3D0], r8
.text:00000000000101A6                 mov     [rbp+n], rcx
.text:00000000000101AD                 call    _memcpy
.text:00000000000101B2                 mov     rcx, [rbp+n]
.text:00000000000101B9                 mov     r15, rax
.text:00000000000101BC                 mov     r8, [rbp+var_3D0]
.text:00000000000101C3                 jmp     loc_F844
.text:00000000000101C3 ; ---------------------------------------------------------------------------
.text:00000000000101C8                 align 10h
.text:00000000000101D0
.text:00000000000101D0 loc_101D0:                              ; CODE XREF: vasnprintf+15F↑j
.text:00000000000101D0                 mov     r14, r12
.text:00000000000101D3                 jmp     loc_F844
.text:00000000000101D3 ; ---------------------------------------------------------------------------
.text:00000000000101D8                 align 20h
.text:00000000000101E0
.text:00000000000101E0 loc_101E0:                              ; CODE XREF: vasnprintf+B00↑j
.text:00000000000101E0                                         ; DATA XREF: .rodata:jpt_100A0↓o
.text:00000000000101E0                 mov     [rax], r14      ; jumptable 00000000000100A0 cases 21,22
.text:00000000000101E3                 mov     rbx, r14
.text:00000000000101E6                 jmp     loc_10034
.text:00000000000101EB ; ---------------------------------------------------------------------------
.text:00000000000101EB
.text:00000000000101EB loc_101EB:                              ; CODE XREF: vasnprintf+29B↑j
.text:00000000000101EB                                         ; vasnprintf+B4F↑j ...
.text:00000000000101EB                 call    ___errno_location
.text:00000000000101F0                 mov     [rbp+n], rax
.text:00000000000101F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000010200
.text:0000000000010200 loc_10200:                              ; CODE XREF: vasnprintf+17D↑j
.text:0000000000010200                 mov     rdi, r15        ; ptr
.text:0000000000010203                 call    _free
.text:0000000000010208                 jmp     loc_F723
.text:0000000000010208 ; ---------------------------------------------------------------------------
.text:000000000001020D                 align 10h
.text:0000000000010210
.text:0000000000010210 loc_10210:                              ; CODE XREF: vasnprintf+872↑j
.text:0000000000010210                 mov     r9, [rbp+var_3F0]
.text:0000000000010217                 mov     r8, [rbp+var_3D8]
.text:000000000001021E                 mov     rsi, r10
.text:0000000000010221                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000010228                 mov     edx, 1
.text:000000000001022D                 mov     eax, 1
.text:0000000000010232                 mov     [rbp+var_430], r10
.text:0000000000010239                 call    ___snprintf_chk
.text:000000000001023E                 mov     r10, [rbp+var_430]
.text:0000000000010245                 jmp     loc_FB66
.text:0000000000010245 ; ---------------------------------------------------------------------------
.text:000000000001024A                 align 10h
.text:0000000000010250
.text:0000000000010250 loc_10250:                              ; CODE XREF: vasnprintf+7E8↑j
.text:0000000000010250                 sub     rsp, 10h
.text:0000000000010254                 mov     r9, [rbp+var_3F0]
.text:000000000001025B                 fstp    [rsp+440h+var_440]
.text:000000000001025E                 jmp     loc_FB39
.text:000000000001025E ; ---------------------------------------------------------------------------
.text:0000000000010263                 align 8
.text:0000000000010268
.text:0000000000010268 loc_10268:                              ; CODE XREF: vasnprintf+4A3↑j
.text:0000000000010268                 js      loc_F705
.text:000000000001026E                 add     r12, r12
.text:0000000000010271                 cmp     r12, rax
.text:0000000000010274                 jnb     loc_FA59
.text:000000000001027A                 nop     word ptr [rax+rax+00h]
.text:0000000000010280
.text:0000000000010280 loc_10280:                              ; CODE XREF: vasnprintf+4AD↑j
.text:0000000000010280                                         ; vasnprintf+1114↓j
.text:0000000000010280                 test    rdx, rdx
.text:0000000000010283                 jnz     loc_F705
.text:0000000000010289                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001028D                 jz      loc_F705
.text:0000000000010293                 cmp     r15, [rbp+src]
.text:000000000001029A                 mov     r12, rax
.text:000000000001029D                 setz    dl
.text:00000000000102A0                 test    r15, r15
.text:00000000000102A3                 jnz     loc_FA6C
.text:00000000000102A9                 nop     dword ptr [rax+00000000h]
.text:00000000000102B0
.text:00000000000102B0 loc_102B0:                              ; CODE XREF: vasnprintf+4C6↑j
.text:00000000000102B0                                         ; vasnprintf+4CE↑j
.text:00000000000102B0                 mov     rdi, r12        ; size
.text:00000000000102B3                 mov     byte ptr [rbp+n], dl
.text:00000000000102B9                 call    _malloc
.text:00000000000102BE                 test    rax, rax
.text:00000000000102C1                 mov     rcx, rax
.text:00000000000102C4                 movzx   edx, byte ptr [rbp+n]
.text:00000000000102CB                 jz      loc_F705
.text:00000000000102D1                 test    r14, r14
.text:00000000000102D4                 jz      loc_10470
.text:00000000000102DA                 test    dl, dl
.text:00000000000102DC                 jz      loc_10470
.text:00000000000102E2                 mov     rsi, r15        ; src
.text:00000000000102E5                 mov     rdx, r14        ; n
.text:00000000000102E8                 mov     rdi, rax        ; dest
.text:00000000000102EB                 call    _memcpy
.text:00000000000102F0                 mov     r15, rax
.text:00000000000102F3                 jmp     loc_FA8B
.text:00000000000102F3 ; ---------------------------------------------------------------------------
.text:00000000000102F8                 align 20h
.text:0000000000010300
.text:0000000000010300 loc_10300:                              ; CODE XREF: vasnprintf+402↑j
.text:0000000000010300                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000010303                 add     rbx, 1
.text:0000000000010307                 jmp     loc_F9BB
.text:0000000000010307 ; ---------------------------------------------------------------------------
.text:000000000001030C                 align 10h
.text:0000000000010310
.text:0000000000010310 loc_10310:                              ; CODE XREF: vasnprintf+B00↑j
.text:0000000000010310                                         ; DATA XREF: .rodata:jpt_100A0↓o
.text:0000000000010310                 mov     [rax], r14b     ; jumptable 00000000000100A0 case 18
.text:0000000000010313                 mov     rbx, r14
.text:0000000000010316                 jmp     loc_10034
.text:0000000000010316 ; ---------------------------------------------------------------------------
.text:000000000001031B                 align 20h
.text:0000000000010320
.text:0000000000010320 loc_10320:                              ; CODE XREF: vasnprintf+B00↑j
.text:0000000000010320                                         ; DATA XREF: .rodata:jpt_100A0↓o
.text:0000000000010320                 mov     [rax], r14d     ; jumptable 00000000000100A0 case 20
.text:0000000000010323                 mov     rbx, r14
.text:0000000000010326                 jmp     loc_10034
.text:0000000000010326 ; ---------------------------------------------------------------------------
.text:000000000001032B                 align 10h
.text:0000000000010330
.text:0000000000010330 loc_10330:                              ; CODE XREF: vasnprintf+B00↑j
.text:0000000000010330                                         ; DATA XREF: .rodata:jpt_100A0↓o
.text:0000000000010330                 mov     [rax], r14w     ; jumptable 00000000000100A0 case 19
.text:0000000000010334                 mov     rbx, r14
.text:0000000000010337                 jmp     loc_10034
.text:0000000000010337 ; ---------------------------------------------------------------------------
.text:000000000001033C                 align 20h
.text:0000000000010340
.text:0000000000010340 loc_10340:                              ; CODE XREF: vasnprintf+B33↑j
.text:0000000000010340                                         ; vasnprintf+B3B↑j
.text:0000000000010340                 mov     rdi, r12        ; size
.text:0000000000010343                 mov     byte ptr [rbp+n], dl
.text:0000000000010349                 call    _malloc
.text:000000000001034E                 test    rax, rax
.text:0000000000010351                 mov     rcx, rax
.text:0000000000010354                 movzx   edx, byte ptr [rbp+n]
.text:000000000001035B                 jz      loc_F705
.text:0000000000010361                 test    r14, r14
.text:0000000000010364                 jz      loc_104A4
.text:000000000001036A                 test    dl, dl
.text:000000000001036C                 jz      loc_104A4
.text:0000000000010372                 mov     rsi, r15        ; src
.text:0000000000010375                 mov     rdx, r14        ; n
.text:0000000000010378                 mov     rdi, rax        ; dest
.text:000000000001037B                 call    _memcpy
.text:0000000000010380                 mov     r15, rax
.text:0000000000010383                 jmp     loc_1002F
.text:0000000000010383 ; ---------------------------------------------------------------------------
.text:0000000000010388                 align 10h
.text:0000000000010390
.text:0000000000010390 loc_10390:                              ; CODE XREF: vasnprintf+BE8↑j
.text:0000000000010390                                         ; vasnprintf+BF0↑j
.text:0000000000010390                 mov     r15, r9
.text:0000000000010393                 jmp     loc_F844
.text:0000000000010393 ; ---------------------------------------------------------------------------
.text:0000000000010398                 align 20h
.text:00000000000103A0
.text:00000000000103A0 loc_103A0:                              ; CODE XREF: vasnprintf+869↑j
.text:00000000000103A0                 sub     rsp, 8
.text:00000000000103A4                 push    [rbp+var_3F0]
.text:00000000000103AA                 jmp     loc_FE25
.text:00000000000103AA ; ---------------------------------------------------------------------------
.text:00000000000103AF                 align 10h
.text:00000000000103B0
.text:00000000000103B0 loc_103B0:                              ; CODE XREF: vasnprintf+7DF↑j
.text:00000000000103B0                 sub     rsp, 8
.text:00000000000103B4                 push    [rbp+var_3F0]
.text:00000000000103BA                 sub     rsp, 10h
.text:00000000000103BE                 fstp    [rsp+450h+var_450]
.text:00000000000103C1                 jmp     loc_FEEB
.text:00000000000103C1 ; ---------------------------------------------------------------------------
.text:00000000000103C6                 align 10h
.text:00000000000103D0
.text:00000000000103D0 loc_103D0:                              ; CODE XREF: vasnprintf+5FC↑j
.text:00000000000103D0                 mov     rax, [rbp+n]
.text:00000000000103D7                 mov     edi, [rbp-424h]
.text:00000000000103DD                 movsxd  rbx, ecx
.text:00000000000103E0                 add     rbx, r14
.text:00000000000103E3                 mov     [rax], edi
.text:00000000000103E5                 jmp     loc_10034
.text:00000000000103E5 ; ---------------------------------------------------------------------------
.text:00000000000103EA                 align 10h
.text:00000000000103F0
.text:00000000000103F0 loc_103F0:                              ; CODE XREF: vasnprintf+609↑j
.text:00000000000103F0                 cmp     r15, [rbp+src]
.text:00000000000103F7                 jz      short loc_10402
.text:00000000000103F9                 test    r15, r15
.text:00000000000103FC                 jnz     loc_104B9
.text:0000000000010402
.text:0000000000010402 loc_10402:                              ; CODE XREF: vasnprintf+E57↑j
.text:0000000000010402                                         ; vasnprintf+F21↓j
.text:0000000000010402                 mov     rax, [rbp+ptr]
.text:0000000000010409                 test    rax, rax
.text:000000000001040C                 jz      short loc_10416
.text:000000000001040E                 mov     rdi, rax        ; ptr
.text:0000000000010411                 call    _free
.text:0000000000010416
.text:0000000000010416 loc_10416:                              ; CODE XREF: vasnprintf+E6C↑j
.text:0000000000010416                 mov     rax, [rbp+var_408]
.text:000000000001041D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000010424                 add     rax, 20h ; ' '
.text:0000000000010428                 cmp     rdi, rax
.text:000000000001042B                 jz      short loc_10432
.text:000000000001042D                 call    _free
.text:0000000000010432
.text:0000000000010432 loc_10432:                              ; CODE XREF: vasnprintf+E8B↑j
.text:0000000000010432                 mov     rax, [rbp+var_410]
.text:0000000000010439                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000010440                 add     rax, 10h
.text:0000000000010444                 cmp     rdi, rax
.text:0000000000010447                 jz      short loc_1044E
.text:0000000000010449                 call    _free
.text:000000000001044E
.text:000000000001044E loc_1044E:                              ; CODE XREF: vasnprintf+EA7↑j
.text:000000000001044E                 mov     rax, [rbp+n]
.text:0000000000010455                 xor     r15d, r15d
.text:0000000000010458                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000001045E                 jmp     loc_F77F
.text:000000000001045E ; ---------------------------------------------------------------------------
.text:0000000000010463                 align 8
.text:0000000000010468
.text:0000000000010468 loc_10468:                              ; CODE XREF: vasnprintf+60↑j
.text:0000000000010468                 xor     r15d, r15d
.text:000000000001046B                 jmp     loc_F77F
.text:0000000000010470 ; ---------------------------------------------------------------------------
.text:0000000000010470
.text:0000000000010470 loc_10470:                              ; CODE XREF: vasnprintf+D34↑j
.text:0000000000010470                                         ; vasnprintf+D3C↑j
.text:0000000000010470                 mov     r15, rcx
.text:0000000000010473                 jmp     loc_FA8B
.text:0000000000010473 ; ---------------------------------------------------------------------------
.text:0000000000010478                 align 20h
.text:0000000000010480
.text:0000000000010480 loc_10480:                              ; CODE XREF: vasnprintf+B10↑j
.text:0000000000010480                 js      loc_F705
.text:0000000000010486                 add     r12, r12
.text:0000000000010489                 cmp     r12, rax
.text:000000000001048C                 jnb     loc_100C6
.text:0000000000010492
.text:0000000000010492 loc_10492:                              ; CODE XREF: vasnprintf+B1A↑j
.text:0000000000010492                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000010496                 jz      loc_F705
.text:000000000001049C                 mov     r12, rax
.text:000000000001049F                 jmp     loc_100C6
.text:00000000000104A4 ; ---------------------------------------------------------------------------
.text:00000000000104A4
.text:00000000000104A4 loc_104A4:                              ; CODE XREF: vasnprintf+DC4↑j
.text:00000000000104A4                                         ; vasnprintf+DCC↑j
.text:00000000000104A4                 mov     r15, rcx
.text:00000000000104A7                 jmp     loc_1002F
.text:00000000000104AC ; ---------------------------------------------------------------------------
.text:00000000000104AC
.text:00000000000104AC loc_104AC:                              ; CODE XREF: vasnprintf+75C↑j
.text:00000000000104AC                 mov     rdi, r15        ; ptr
.text:00000000000104AF                 call    _free
.text:00000000000104B4                 jmp     loc_FD02
.text:00000000000104B9 ; ---------------------------------------------------------------------------
.text:00000000000104B9
.text:00000000000104B9 loc_104B9:                              ; CODE XREF: vasnprintf+E5C↑j
.text:00000000000104B9                 mov     rdi, r15        ; ptr
.text:00000000000104BC                 call    _free
.text:00000000000104C1                 jmp     loc_10402
.text:00000000000104C6 ; ---------------------------------------------------------------------------
.text:00000000000104C6
.text:00000000000104C6 def_FAFB:                               ; CODE XREF: vasnprintf+2DD↑j
.text:00000000000104C6                                         ; vasnprintf+43E↑j ...
.text:00000000000104C6                 call    _abort          ; jumptable 000000000000FAFB default case, case 0
.text:00000000000104C6                                         ; jumptable 00000000000100A0 default case
.text:00000000000104C6 ; ---------------------------------------------------------------------------
.text:00000000000104CB                 align 10h
.text:00000000000104D0
.text:00000000000104D0 loc_104D0:                              ; CODE XREF: vasnprintf+73↑j
.text:00000000000104D0                 mov     rax, [rbp+var_408]
.text:00000000000104D7                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000104DE                 add     rax, 20h ; ' '
.text:00000000000104E2                 cmp     rdi, rax
.text:00000000000104E5                 jz      short loc_104EC
.text:00000000000104E7                 call    _free
.text:00000000000104EC
.text:00000000000104EC loc_104EC:                              ; CODE XREF: vasnprintf+F45↑j
.text:00000000000104EC                 mov     rax, [rbp+var_410]
.text:00000000000104F3                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000104FA                 add     rax, 10h
.text:00000000000104FE                 cmp     rdi, rax
.text:0000000000010501                 jz      short loc_10508
.text:0000000000010503                 call    _free
.text:0000000000010508
.text:0000000000010508 loc_10508:                              ; CODE XREF: vasnprintf+F61↑j
.text:0000000000010508                 call    ___errno_location
.text:000000000001050D                 xor     r15d, r15d
.text:0000000000010510                 mov     dword ptr [rax], 16h
.text:0000000000010516                 jmp     loc_F77F
.text:000000000001051B ; ---------------------------------------------------------------------------
.text:000000000001051B
.text:000000000001051B loc_1051B:                              ; CODE XREF: vasnprintf+2C1↑j
.text:000000000001051B                 mov     rbx, r14
.text:000000000001051E                 xor     eax, eax
.text:0000000000010520                 add     rbx, 1
.text:0000000000010524                 jb      loc_10630
.text:000000000001052A                 cmp     r12, rbx
.text:000000000001052D                 jnb     short loc_1057C
.text:000000000001052F                 test    r12, r12
.text:0000000000010532                 jnz     loc_10669
.text:0000000000010538                 cmp     rbx, 0Ch
.text:000000000001053C                 ja      loc_1064E
.text:0000000000010542                 mov     r12d, 0Ch
.text:0000000000010548
.text:0000000000010548 loc_10548:                              ; CODE XREF: vasnprintf+10C4↓j
.text:0000000000010548                                         ; vasnprintf+10D5↓j
.text:0000000000010548                 cmp     r15, [rbp+src]
.text:000000000001054F                 setz    r13b
.text:0000000000010553                 test    r15, r15
.text:0000000000010556                 jz      loc_105FC
.text:000000000001055C                 test    r13b, r13b
.text:000000000001055F                 jnz     loc_105FC
.text:0000000000010565                 mov     rsi, r12        ; size
.text:0000000000010568                 mov     rdi, r15        ; ptr
.text:000000000001056B                 call    _realloc
.text:0000000000010570                 test    rax, rax
.text:0000000000010573                 jz      loc_101EB
.text:0000000000010579                 mov     r15, rax
.text:000000000001057C
.text:000000000001057C loc_1057C:                              ; CODE XREF: vasnprintf+F8D↑j
.text:000000000001057C                                         ; vasnprintf+108B↓j ...
.text:000000000001057C                 cmp     r15, [rbp+src]
.text:0000000000010583                 mov     byte ptr [r15+r14], 0
.text:0000000000010588                 jz      short loc_105A1
.text:000000000001058A                 cmp     r12, rbx
.text:000000000001058D                 jbe     short loc_105A1
.text:000000000001058F                 mov     rdi, r15        ; ptr
.text:0000000000010592                 mov     rsi, rbx        ; size
.text:0000000000010595                 call    _realloc
.text:000000000001059A                 test    rax, rax
.text:000000000001059D                 cmovnz  r15, rax
.text:00000000000105A1
.text:00000000000105A1 loc_105A1:                              ; CODE XREF: vasnprintf+FE8↑j
.text:00000000000105A1                                         ; vasnprintf+FED↑j
.text:00000000000105A1                 mov     rax, [rbp+ptr]
.text:00000000000105A8                 test    rax, rax
.text:00000000000105AB                 jz      short loc_105B5
.text:00000000000105AD                 mov     rdi, rax        ; ptr
.text:00000000000105B0                 call    _free
.text:00000000000105B5
.text:00000000000105B5 loc_105B5:                              ; CODE XREF: vasnprintf+100B↑j
.text:00000000000105B5                 mov     rax, [rbp+var_408]
.text:00000000000105BC                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000105C3                 add     rax, 20h ; ' '
.text:00000000000105C7                 cmp     rdi, rax
.text:00000000000105CA                 jz      short loc_105D1
.text:00000000000105CC                 call    _free
.text:00000000000105D1
.text:00000000000105D1 loc_105D1:                              ; CODE XREF: vasnprintf+102A↑j
.text:00000000000105D1                 mov     rax, [rbp+var_410]
.text:00000000000105D8                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000105DF                 add     rax, 10h
.text:00000000000105E3                 cmp     rdi, rax
.text:00000000000105E6                 jz      short loc_105ED
.text:00000000000105E8                 call    _free
.text:00000000000105ED
.text:00000000000105ED loc_105ED:                              ; CODE XREF: vasnprintf+1046↑j
.text:00000000000105ED                 mov     rax, [rbp+var_418]
.text:00000000000105F4                 mov     [rax], r14
.text:00000000000105F7                 jmp     loc_F77F
.text:00000000000105FC ; ---------------------------------------------------------------------------
.text:00000000000105FC
.text:00000000000105FC loc_105FC:                              ; CODE XREF: vasnprintf+FB6↑j
.text:00000000000105FC                                         ; vasnprintf+FBF↑j
.text:00000000000105FC                 mov     rdi, r12        ; size
.text:00000000000105FF                 call    _malloc
.text:0000000000010604                 test    rax, rax
.text:0000000000010607                 mov     rcx, rax
.text:000000000001060A                 jz      loc_F705
.text:0000000000010610                 test    r14, r14
.text:0000000000010613                 jz      short loc_10680
.text:0000000000010615                 test    r13b, r13b
.text:0000000000010618                 jz      short loc_10680
.text:000000000001061A                 mov     rsi, r15        ; src
.text:000000000001061D                 mov     rdx, r14        ; n
.text:0000000000010620                 mov     rdi, rax        ; dest
.text:0000000000010623                 call    _memcpy
.text:0000000000010628                 mov     r15, rax
.text:000000000001062B                 jmp     loc_1057C
.text:0000000000010630 ; ---------------------------------------------------------------------------
.text:0000000000010630
.text:0000000000010630 loc_10630:                              ; CODE XREF: vasnprintf+F84↑j
.text:0000000000010630                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000010634                 mov     eax, 1
.text:0000000000010639                 jz      loc_1057C
.text:000000000001063F                 test    r12, r12
.text:0000000000010642                 jz      loc_F705
.text:0000000000010648                 js      loc_F705
.text:000000000001064E
.text:000000000001064E loc_1064E:                              ; CODE XREF: vasnprintf+F9C↑j
.text:000000000001064E                                         ; vasnprintf+10DB↓j
.text:000000000001064E                 test    rax, rax
.text:0000000000010651                 jnz     loc_F705
.text:0000000000010657                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001065B                 jz      loc_F705
.text:0000000000010661                 mov     r12, rbx
.text:0000000000010664                 jmp     loc_10548
.text:0000000000010669 ; ---------------------------------------------------------------------------
.text:0000000000010669
.text:0000000000010669 loc_10669:                              ; CODE XREF: vasnprintf+F92↑j
.text:0000000000010669                 js      loc_F705
.text:000000000001066F                 add     r12, r12
.text:0000000000010672                 cmp     r12, rbx
.text:0000000000010675                 jnb     loc_10548
.text:000000000001067B                 jmp     short loc_1064E
.text:000000000001067B ; ---------------------------------------------------------------------------
.text:000000000001067D                 align 20h
.text:0000000000010680
.text:0000000000010680 loc_10680:                              ; CODE XREF: vasnprintf+1073↑j
.text:0000000000010680                                         ; vasnprintf+1078↑j
.text:0000000000010680                 mov     r15, rcx
.text:0000000000010683                 jmp     loc_1057C
.text:0000000000010688 ; ---------------------------------------------------------------------------
.text:0000000000010688
.text:0000000000010688 loc_10688:                              ; CODE XREF: vasnprintf+627↑j
.text:0000000000010688                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000001068C                 jz      loc_FAB0
.text:0000000000010692                 jmp     loc_F711
.text:0000000000010697 ; ---------------------------------------------------------------------------
.text:0000000000010697
.text:0000000000010697 loc_10697:                              ; CODE XREF: vasnprintf+1EF↑j
.text:0000000000010697                 call    ___stack_chk_fail
.text:000000000001069C ; ---------------------------------------------------------------------------
.text:000000000001069C
.text:000000000001069C loc_1069C:                              ; CODE XREF: vasnprintf+495↑j
.text:000000000001069C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000106A0                 mov     edx, 1
.text:00000000000106A5                 jz      loc_FA8B
.text:00000000000106AB                 test    r12, r12
.text:00000000000106AE                 jz      loc_F705
.text:00000000000106B4                 jns     loc_10280
.text:00000000000106BA                 jmp     loc_F705
.text:00000000000106BA ; } // starts at F5A0
.text:00000000000106BA vasnprintf      endp
.text:00000000000106BA
.text:00000000000106BA ; ---------------------------------------------------------------------------
.text:00000000000106BF                 align 20h
.text:00000000000106C0
.text:00000000000106C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000106C0
.text:00000000000106C0
.text:00000000000106C0                 public printf_fetchargs
.text:00000000000106C0 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:00000000000106C0 ; __unwind {
.text:00000000000106C0                 cmp     qword ptr [rsi], 0
.text:00000000000106C4                 mov     rax, [rsi+8]
.text:00000000000106C8                 jz      short loc_1072D
.text:00000000000106CA                 lea     r8, jpt_106F6
.text:00000000000106D1                 lea     r10, wide_null_string_2696
.text:00000000000106D8                 lea     r9, aNull       ; "(NULL)"
.text:00000000000106DF                 xor     ecx, ecx
.text:00000000000106E1                 nop     dword ptr [rax+00000000h]
.text:00000000000106E8
.text:00000000000106E8 loc_106E8:                              ; CODE XREF: printf_fetchargs+6B↓j
.text:00000000000106E8                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:00000000000106EB                 ja      short def_106F6 ; jumptable 00000000000106F6 default case, case 0
.text:00000000000106ED                 mov     edx, [rax]
.text:00000000000106EF                 movsxd  rdx, ds:(jpt_106F6 - 14F20h)[r8+rdx*4]
.text:00000000000106F3                 add     rdx, r8
.text:00000000000106F6                 jmp     rdx             ; switch jump
.text:00000000000106F6 ; ---------------------------------------------------------------------------
.text:00000000000106F8                 align 20h
.text:0000000000010700
.text:0000000000010700 loc_10700:                              ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000010700                                         ; DATA XREF: .rodata:jpt_106F6↓o
.text:0000000000010700                 mov     rdx, [rdi+8]    ; jumptable 00000000000106F6 case 12
.text:0000000000010704                 add     rdx, 0Fh
.text:0000000000010708                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000001070C                 lea     r11, [rdx+10h]
.text:0000000000010710                 mov     [rdi+8], r11
.text:0000000000010714                 fld     tbyte ptr [rdx]
.text:0000000000010716                 fstp    tbyte ptr [rax+10h]
.text:0000000000010719                 nop     dword ptr [rax+00000000h]
.text:0000000000010720
.text:0000000000010720 loc_10720:                              ; CODE XREF: printf_fetchargs+98↓j
.text:0000000000010720                                         ; printf_fetchargs+BA↓j ...
.text:0000000000010720                 add     rcx, 1
.text:0000000000010724                 add     rax, 20h ; ' '
.text:0000000000010728                 cmp     [rsi], rcx
.text:000000000001072B                 ja      short loc_106E8
.text:000000000001072D
.text:000000000001072D loc_1072D:                              ; CODE XREF: printf_fetchargs+8↑j
.text:000000000001072D                 xor     eax, eax
.text:000000000001072F                 retn
.text:0000000000010730 ; ---------------------------------------------------------------------------
.text:0000000000010730
.text:0000000000010730 def_106F6:                              ; CODE XREF: printf_fetchargs+2B↑j
.text:0000000000010730                                         ; printf_fetchargs+36↑j
.text:0000000000010730                                         ; DATA XREF: ...
.text:0000000000010730                 mov     eax, 0FFFFFFFFh ; jumptable 00000000000106F6 default case, case 0
.text:0000000000010735                 retn
.text:0000000000010736 ; ---------------------------------------------------------------------------
.text:0000000000010736
.text:0000000000010736 loc_10736:                              ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000010736                                         ; DATA XREF: .rodata:jpt_106F6↓o
.text:0000000000010736                 mov     r11d, [rdi]     ; jumptable 00000000000106F6 cases 7-10,17-22
.text:0000000000010739                 cmp     r11d, 2Fh ; '/'
.text:000000000001073D                 ja      loc_1087A
.text:0000000000010743                 mov     edx, r11d
.text:0000000000010746                 add     rdx, [rdi+10h]
.text:000000000001074A                 add     r11d, 8
.text:000000000001074E                 mov     [rdi], r11d
.text:0000000000010751
.text:0000000000010751 loc_10751:                              ; CODE XREF: printf_fetchargs+1C6↓j
.text:0000000000010751                 mov     rdx, [rdx]
.text:0000000000010754                 mov     [rax+10h], rdx
.text:0000000000010758                 jmp     short loc_10720
.text:000000000001075A ; ---------------------------------------------------------------------------
.text:000000000001075A
.text:000000000001075A loc_1075A:                              ; CODE XREF: printf_fetchargs+36↑j
.text:000000000001075A                                         ; DATA XREF: .rodata:jpt_106F6↓o
.text:000000000001075A                 mov     r11d, [rdi]     ; jumptable 00000000000106F6 cases 5,6,13,14
.text:000000000001075D                 cmp     r11d, 2Fh ; '/'
.text:0000000000010761                 ja      loc_1089C
.text:0000000000010767                 mov     edx, r11d
.text:000000000001076A                 add     rdx, [rdi+10h]
.text:000000000001076E                 add     r11d, 8
.text:0000000000010772                 mov     [rdi], r11d
.text:0000000000010775
.text:0000000000010775 loc_10775:                              ; CODE XREF: printf_fetchargs+1E8↓j
.text:0000000000010775                 mov     edx, [rdx]
.text:0000000000010777                 mov     [rax+10h], edx
.text:000000000001077A                 jmp     short loc_10720
.text:000000000001077C ; ---------------------------------------------------------------------------
.text:000000000001077C
.text:000000000001077C loc_1077C:                              ; CODE XREF: printf_fetchargs+36↑j
.text:000000000001077C                                         ; DATA XREF: .rodata:jpt_106F6↓o
.text:000000000001077C                 mov     r11d, [rdi]     ; jumptable 00000000000106F6 cases 1,2
.text:000000000001077F                 cmp     r11d, 2Fh ; '/'
.text:0000000000010783                 ja      loc_1088B
.text:0000000000010789                 mov     edx, r11d
.text:000000000001078C                 add     rdx, [rdi+10h]
.text:0000000000010790                 add     r11d, 8
.text:0000000000010794                 mov     [rdi], r11d
.text:0000000000010797
.text:0000000000010797 loc_10797:                              ; CODE XREF: printf_fetchargs+1D7↓j
.text:0000000000010797                 mov     edx, [rdx]
.text:0000000000010799                 mov     [rax+10h], dl
.text:000000000001079C                 jmp     short loc_10720
.text:000000000001079E ; ---------------------------------------------------------------------------
.text:000000000001079E
.text:000000000001079E loc_1079E:                              ; CODE XREF: printf_fetchargs+36↑j
.text:000000000001079E                                         ; DATA XREF: .rodata:jpt_106F6↓o
.text:000000000001079E                 mov     r11d, [rdi]     ; jumptable 00000000000106F6 cases 3,4
.text:00000000000107A1                 cmp     r11d, 2Fh ; '/'
.text:00000000000107A5                 ja      loc_1084A
.text:00000000000107AB                 mov     edx, r11d
.text:00000000000107AE                 add     rdx, [rdi+10h]
.text:00000000000107B2                 add     r11d, 8
.text:00000000000107B6                 mov     [rdi], r11d
.text:00000000000107B9
.text:00000000000107B9 loc_107B9:                              ; CODE XREF: printf_fetchargs+196↓j
.text:00000000000107B9                 mov     edx, [rdx]
.text:00000000000107BB                 mov     [rax+10h], dx
.text:00000000000107BF                 jmp     loc_10720
.text:00000000000107C4 ; ---------------------------------------------------------------------------
.text:00000000000107C4
.text:00000000000107C4 loc_107C4:                              ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000107C4                                         ; DATA XREF: .rodata:jpt_106F6↓o
.text:00000000000107C4                 mov     r11d, [rdi]     ; jumptable 00000000000106F6 case 15
.text:00000000000107C7                 cmp     r11d, 2Fh ; '/'
.text:00000000000107CB                 ja      loc_1085B
.text:00000000000107D1                 mov     edx, r11d
.text:00000000000107D4                 add     rdx, [rdi+10h]
.text:00000000000107D8                 add     r11d, 8
.text:00000000000107DC                 mov     [rdi], r11d
.text:00000000000107DF
.text:00000000000107DF loc_107DF:                              ; CODE XREF: printf_fetchargs+1A7↓j
.text:00000000000107DF                 mov     rdx, [rdx]
.text:00000000000107E2                 test    rdx, rdx
.text:00000000000107E5                 cmovz   rdx, r9
.text:00000000000107E9                 mov     [rax+10h], rdx
.text:00000000000107ED                 jmp     loc_10720
.text:00000000000107F2 ; ---------------------------------------------------------------------------
.text:00000000000107F2
.text:00000000000107F2 loc_107F2:                              ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000107F2                                         ; DATA XREF: .rodata:jpt_106F6↓o
.text:00000000000107F2                 mov     r11d, [rdi+4]   ; jumptable 00000000000106F6 case 11
.text:00000000000107F6                 cmp     r11d, 0AFh
.text:00000000000107FD                 ja      loc_108AD
.text:0000000000010803                 mov     edx, r11d
.text:0000000000010806                 add     rdx, [rdi+10h]
.text:000000000001080A                 add     r11d, 10h
.text:000000000001080E                 mov     [rdi+4], r11d
.text:0000000000010812
.text:0000000000010812 loc_10812:                              ; CODE XREF: printf_fetchargs+1F9↓j
.text:0000000000010812                 movsd   xmm0, qword ptr [rdx]
.text:0000000000010816                 movsd   qword ptr [rax+10h], xmm0
.text:000000000001081B                 jmp     loc_10720
.text:0000000000010820 ; ---------------------------------------------------------------------------
.text:0000000000010820
.text:0000000000010820 loc_10820:                              ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000010820                                         ; DATA XREF: .rodata:jpt_106F6↓o
.text:0000000000010820                 mov     r11d, [rdi]     ; jumptable 00000000000106F6 case 16
.text:0000000000010823                 cmp     r11d, 2Fh ; '/'
.text:0000000000010827                 ja      short loc_1086C
.text:0000000000010829                 mov     edx, r11d
.text:000000000001082C                 add     rdx, [rdi+10h]
.text:0000000000010830                 add     r11d, 8
.text:0000000000010834                 mov     [rdi], r11d
.text:0000000000010837
.text:0000000000010837 loc_10837:                              ; CODE XREF: printf_fetchargs+1B8↓j
.text:0000000000010837                 mov     rdx, [rdx]
.text:000000000001083A                 test    rdx, rdx
.text:000000000001083D                 cmovz   rdx, r10
.text:0000000000010841                 mov     [rax+10h], rdx
.text:0000000000010845                 jmp     loc_10720
.text:000000000001084A ; ---------------------------------------------------------------------------
.text:000000000001084A
.text:000000000001084A loc_1084A:                              ; CODE XREF: printf_fetchargs+E5↑j
.text:000000000001084A                 mov     rdx, [rdi+8]
.text:000000000001084E                 lea     r11, [rdx+8]
.text:0000000000010852                 mov     [rdi+8], r11
.text:0000000000010856                 jmp     loc_107B9
.text:000000000001085B ; ---------------------------------------------------------------------------
.text:000000000001085B
.text:000000000001085B loc_1085B:                              ; CODE XREF: printf_fetchargs+10B↑j
.text:000000000001085B                 mov     rdx, [rdi+8]
.text:000000000001085F                 lea     r11, [rdx+8]
.text:0000000000010863                 mov     [rdi+8], r11
.text:0000000000010867                 jmp     loc_107DF
.text:000000000001086C ; ---------------------------------------------------------------------------
.text:000000000001086C
.text:000000000001086C loc_1086C:                              ; CODE XREF: printf_fetchargs+167↑j
.text:000000000001086C                 mov     rdx, [rdi+8]
.text:0000000000010870                 lea     r11, [rdx+8]
.text:0000000000010874                 mov     [rdi+8], r11
.text:0000000000010878                 jmp     short loc_10837
.text:000000000001087A ; ---------------------------------------------------------------------------
.text:000000000001087A
.text:000000000001087A loc_1087A:                              ; CODE XREF: printf_fetchargs+7D↑j
.text:000000000001087A                 mov     rdx, [rdi+8]
.text:000000000001087E                 lea     r11, [rdx+8]
.text:0000000000010882                 mov     [rdi+8], r11
.text:0000000000010886                 jmp     loc_10751
.text:000000000001088B ; ---------------------------------------------------------------------------
.text:000000000001088B
.text:000000000001088B loc_1088B:                              ; CODE XREF: printf_fetchargs+C3↑j
.text:000000000001088B                 mov     rdx, [rdi+8]
.text:000000000001088F                 lea     r11, [rdx+8]
.text:0000000000010893                 mov     [rdi+8], r11
.text:0000000000010897                 jmp     loc_10797
.text:000000000001089C ; ---------------------------------------------------------------------------
.text:000000000001089C
.text:000000000001089C loc_1089C:                              ; CODE XREF: printf_fetchargs+A1↑j
.text:000000000001089C                 mov     rdx, [rdi+8]
.text:00000000000108A0                 lea     r11, [rdx+8]
.text:00000000000108A4                 mov     [rdi+8], r11
.text:00000000000108A8                 jmp     loc_10775
.text:00000000000108AD ; ---------------------------------------------------------------------------
.text:00000000000108AD
.text:00000000000108AD loc_108AD:                              ; CODE XREF: printf_fetchargs+13D↑j
.text:00000000000108AD                 mov     rdx, [rdi+8]
.text:00000000000108B1                 lea     r11, [rdx+8]
.text:00000000000108B5                 mov     [rdi+8], r11
.text:00000000000108B9                 jmp     loc_10812
.text:00000000000108B9 ; } // starts at 106C0
.text:00000000000108B9 printf_fetchargs endp
.text:00000000000108B9
.text:00000000000108B9 ; ---------------------------------------------------------------------------
.text:00000000000108BE                 align 20h
.text:00000000000108C0 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:00000000000108C0 ; Format      : ELF64 for x86-64 (Relocatable)
.text:00000000000108C0 ;
.text:00000000000108C0 ; Source File : 'printf-parse.c'
.text:00000000000108C0
.text:00000000000108C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000108C0
.text:00000000000108C0 ; Attributes: info_from_lumina
.text:00000000000108C0
.text:00000000000108C0 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:00000000000108C0                 public printf_parse
.text:00000000000108C0 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:00000000000108C0
.text:00000000000108C0 src             = qword ptr -80h
.text:00000000000108C0 var_78          = qword ptr -78h
.text:00000000000108C0 var_70          = qword ptr -70h
.text:00000000000108C0 var_68          = qword ptr -68h
.text:00000000000108C0 var_60          = qword ptr -60h
.text:00000000000108C0 var_58          = qword ptr -58h
.text:00000000000108C0 var_50          = qword ptr -50h
.text:00000000000108C0 var_48          = qword ptr -48h
.text:00000000000108C0 var_40          = qword ptr -40h
.text:00000000000108C0
.text:00000000000108C0 ; __unwind {
.text:00000000000108C0                 push    r15
.text:00000000000108C2                 push    r14
.text:00000000000108C4                 lea     rcx, [rsi+20h]
.text:00000000000108C8                 push    r13
.text:00000000000108CA                 push    r12
.text:00000000000108CC                 lea     rax, [rdx+10h]
.text:00000000000108D0                 push    rbp
.text:00000000000108D1                 push    rbx
.text:00000000000108D2                 mov     r14, rsi
.text:00000000000108D5                 mov     r15, rdx
.text:00000000000108D8                 xor     ebx, ebx
.text:00000000000108DA                 mov     r9d, 7
.text:00000000000108E0                 sub     rsp, 58h
.text:00000000000108E4                 mov     r10d, 7
.text:00000000000108EA                 mov     qword ptr [rsi], 0
.text:00000000000108F1                 mov     [rsi+8], rcx
.text:00000000000108F5                 mov     [rsp+88h+var_60], rcx
.text:00000000000108FA                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000010901                 mov     qword ptr [rdx], 0
.text:0000000000010908                 mov     [rsp+88h+src], rax
.text:000000000001090D                 mov     [rdx+8], rax
.text:0000000000010911                 mov     [rsp+88h+var_70], 0
.text:000000000001091A                 mov     [rsp+88h+var_78], 0
.text:0000000000010923                 mov     [rsp+88h+var_68], 0
.text:000000000001092C                 jmp     short loc_1093B
.text:000000000001092C ; ---------------------------------------------------------------------------
.text:000000000001092E                 align 10h
.text:0000000000010930
.text:0000000000010930 loc_10930:                              ; CODE XREF: printf_parse+80↓j
.text:0000000000010930                 cmp     al, 25h ; '%'
.text:0000000000010932                 lea     rbp, [rdi+1]
.text:0000000000010936                 jz      short loc_10978
.text:0000000000010938
.text:0000000000010938 loc_10938:                              ; CODE XREF: printf_parse+35B↓j
.text:0000000000010938                                         ; printf_parse+364↓j
.text:0000000000010938                 mov     rdi, rbp
.text:000000000001093B
.text:000000000001093B loc_1093B:                              ; CODE XREF: printf_parse+6C↑j
.text:000000000001093B                 movzx   eax, byte ptr [rdi]
.text:000000000001093E                 test    al, al
.text:0000000000010940                 jnz     short loc_10930
.text:0000000000010942                 lea     rax, [rbx+rbx*4]
.text:0000000000010946                 lea     rax, [rbx+rax*2]
.text:000000000001094A                 mov     [rcx+rax*8], rdi
.text:000000000001094E                 mov     rax, [rsp+88h+var_78]
.text:0000000000010953                 mov     [r14+10h], rax
.text:0000000000010957                 mov     rax, [rsp+88h+var_70]
.text:000000000001095C                 mov     [r14+18h], rax
.text:0000000000010960                 xor     eax, eax
.text:0000000000010962
.text:0000000000010962 loc_10962:                              ; CODE XREF: printf_parse+87E↓j
.text:0000000000010962                                         ; printf_parse+B1C↓j
.text:0000000000010962                 add     rsp, 58h
.text:0000000000010966                 pop     rbx
.text:0000000000010967                 pop     rbp
.text:0000000000010968                 pop     r12
.text:000000000001096A                 pop     r13
.text:000000000001096C                 pop     r14
.text:000000000001096E                 pop     r15
.text:0000000000010970                 retn
.text:0000000000010970 ; ---------------------------------------------------------------------------
.text:0000000000010971                 align 8
.text:0000000000010978
.text:0000000000010978 loc_10978:                              ; CODE XREF: printf_parse+76↑j
.text:0000000000010978                 lea     rax, [rbx+rbx*4]
.text:000000000001097C                 mov     r13, r8
.text:000000000001097F                 lea     rax, [rbx+rax*2]
.text:0000000000010983                 lea     r12, [rcx+rax*8]
.text:0000000000010987                 mov     [r12], rdi
.text:000000000001098B                 mov     dword ptr [r12+10h], 0
.text:0000000000010994                 mov     qword ptr [r12+18h], 0
.text:000000000001099D                 mov     qword ptr [r12+20h], 0
.text:00000000000109A6                 mov     [r12+28h], r8
.text:00000000000109AB                 mov     qword ptr [r12+30h], 0
.text:00000000000109B4                 mov     qword ptr [r12+38h], 0
.text:00000000000109BD                 mov     [r12+40h], r8
.text:00000000000109C2                 mov     [r12+50h], r8
.text:00000000000109C7                 movzx   ebx, byte ptr [rdi+1]
.text:00000000000109CB                 lea     eax, [rbx-30h]
.text:00000000000109CE                 cmp     al, 9
.text:00000000000109D0                 ja      short loc_10A0E
.text:00000000000109D2                 jmp     loc_10E0A
.text:00000000000109D2 ; ---------------------------------------------------------------------------
.text:00000000000109D7                 align 20h
.text:00000000000109E0
.text:00000000000109E0 loc_109E0:                              ; CODE XREF: printf_parse+158↓j
.text:00000000000109E0                 cmp     bl, 2Dh ; '-'
.text:00000000000109E3                 jz      short loc_10A28
.text:00000000000109E5                 cmp     bl, 2Bh ; '+'
.text:00000000000109E8                 jz      short loc_10A30
.text:00000000000109EA                 cmp     bl, 20h ; ' '
.text:00000000000109ED                 jz      short loc_10A40
.text:00000000000109EF                 cmp     bl, 23h ; '#'
.text:00000000000109F2                 jz      short loc_10A50
.text:00000000000109F4                 cmp     bl, 30h ; '0'
.text:00000000000109F7                 jz      short loc_10A60
.text:00000000000109F9                 cmp     bl, 49h ; 'I'
.text:00000000000109FC                 jnz     short loc_10A70
.text:00000000000109FE                 or      dword ptr [r12+10h], 40h
.text:0000000000010A04                 nop     dword ptr [rax+00h]
.text:0000000000010A08
.text:0000000000010A08 loc_10A08:                              ; CODE XREF: printf_parse+160↓j
.text:0000000000010A08                                         ; printf_parse+16E↓j ...
.text:0000000000010A08                 movzx   ebx, byte ptr [rax]
.text:0000000000010A0B                 mov     rbp, rax
.text:0000000000010A0E
.text:0000000000010A0E loc_10A0E:                              ; CODE XREF: printf_parse+110↑j
.text:0000000000010A0E                                         ; printf_parse+565↓j ...
.text:0000000000010A0E                 lea     rax, [rbp+1]
.text:0000000000010A12                 cmp     bl, 27h ; '''
.text:0000000000010A15                 mov     rdx, rax
.text:0000000000010A18                 jnz     short loc_109E0
.text:0000000000010A1A                 or      dword ptr [r12+10h], 1
.text:0000000000010A20                 jmp     short loc_10A08
.text:0000000000010A20 ; ---------------------------------------------------------------------------
.text:0000000000010A22                 align 8
.text:0000000000010A28
.text:0000000000010A28 loc_10A28:                              ; CODE XREF: printf_parse+123↑j
.text:0000000000010A28                 or      dword ptr [r12+10h], 2
.text:0000000000010A2E                 jmp     short loc_10A08
.text:0000000000010A30 ; ---------------------------------------------------------------------------
.text:0000000000010A30
.text:0000000000010A30 loc_10A30:                              ; CODE XREF: printf_parse+128↑j
.text:0000000000010A30                 or      dword ptr [r12+10h], 4
.text:0000000000010A36                 jmp     short loc_10A08
.text:0000000000010A36 ; ---------------------------------------------------------------------------
.text:0000000000010A38                 align 20h
.text:0000000000010A40
.text:0000000000010A40 loc_10A40:                              ; CODE XREF: printf_parse+12D↑j
.text:0000000000010A40                 or      dword ptr [r12+10h], 8
.text:0000000000010A46                 jmp     short loc_10A08
.text:0000000000010A46 ; ---------------------------------------------------------------------------
.text:0000000000010A48                 align 10h
.text:0000000000010A50
.text:0000000000010A50 loc_10A50:                              ; CODE XREF: printf_parse+132↑j
.text:0000000000010A50                 or      dword ptr [r12+10h], 10h
.text:0000000000010A56                 jmp     short loc_10A08
.text:0000000000010A56 ; ---------------------------------------------------------------------------
.text:0000000000010A58                 align 20h
.text:0000000000010A60
.text:0000000000010A60 loc_10A60:                              ; CODE XREF: printf_parse+137↑j
.text:0000000000010A60                 or      dword ptr [r12+10h], 20h
.text:0000000000010A66                 jmp     short loc_10A08
.text:0000000000010A66 ; ---------------------------------------------------------------------------
.text:0000000000010A68                 align 10h
.text:0000000000010A70
.text:0000000000010A70 loc_10A70:                              ; CODE XREF: printf_parse+13C↑j
.text:0000000000010A70                 cmp     bl, 2Ah ; '*'
.text:0000000000010A73                 jz      loc_10C29
.text:0000000000010A79                 lea     ecx, [rbx-30h]
.text:0000000000010A7C                 cmp     cl, 9
.text:0000000000010A7F                 jbe     loc_10E97
.text:0000000000010A85
.text:0000000000010A85 loc_10A85:                              ; CODE XREF: printf_parse+629↓j
.text:0000000000010A85                                         ; printf_parse+96C↓j
.text:0000000000010A85                 cmp     bl, 2Eh ; '.'
.text:0000000000010A88                 jz      loc_10D5F
.text:0000000000010A8E
.text:0000000000010A8E loc_10A8E:                              ; CODE XREF: printf_parse+499↓j
.text:0000000000010A8E                                         ; printf_parse+545↓j ...
.text:0000000000010A8E                 xor     eax, eax
.text:0000000000010A90                 mov     esi, 1
.text:0000000000010A95                 jmp     short loc_10AC7
.text:0000000000010A95 ; ---------------------------------------------------------------------------
.text:0000000000010A97                 align 20h
.text:0000000000010AA0
.text:0000000000010AA0 loc_10AA0:                              ; CODE XREF: printf_parse+20E↓j
.text:0000000000010AA0                 cmp     bl, 4Ch ; 'L'
.text:0000000000010AA3                 jz      short loc_10AE0
.text:0000000000010AA5                 cmp     bl, 6Ch ; 'l'
.text:0000000000010AA8                 jz      short loc_10AC0
.text:0000000000010AAA                 cmp     bl, 6Ah ; 'j'
.text:0000000000010AAD                 jz      short loc_10AC0
.text:0000000000010AAF                 mov     edx, ebx
.text:0000000000010AB1                 and     edx, 0FFFFFFDFh
.text:0000000000010AB4                 cmp     dl, 5Ah ; 'Z'
.text:0000000000010AB7                 jz      short loc_10AC0
.text:0000000000010AB9                 cmp     bl, 74h ; 't'
.text:0000000000010ABC                 jnz     short loc_10AE8
.text:0000000000010ABE                 xchg    ax, ax
.text:0000000000010AC0
.text:0000000000010AC0 loc_10AC0:                              ; CODE XREF: printf_parse+1E8↑j
.text:0000000000010AC0                                         ; printf_parse+1ED↑j ...
.text:0000000000010AC0                 add     eax, 8
.text:0000000000010AC3
.text:0000000000010AC3 loc_10AC3:                              ; CODE XREF: printf_parse+21B↓j
.text:0000000000010AC3                                         ; printf_parse+223↓j
.text:0000000000010AC3                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000010AC7
.text:0000000000010AC7 loc_10AC7:                              ; CODE XREF: printf_parse+1D5↑j
.text:0000000000010AC7                 add     rbp, 1
.text:0000000000010ACB                 cmp     bl, 68h ; 'h'
.text:0000000000010ACE                 jnz     short loc_10AA0
.text:0000000000010AD0                 mov     ecx, eax
.text:0000000000010AD2                 mov     edx, esi
.text:0000000000010AD4                 and     ecx, 1
.text:0000000000010AD7                 shl     edx, cl
.text:0000000000010AD9                 or      eax, edx
.text:0000000000010ADB                 jmp     short loc_10AC3
.text:0000000000010ADB ; ---------------------------------------------------------------------------
.text:0000000000010ADD                 align 20h
.text:0000000000010AE0
.text:0000000000010AE0 loc_10AE0:                              ; CODE XREF: printf_parse+1E3↑j
.text:0000000000010AE0                 or      eax, 4
.text:0000000000010AE3                 jmp     short loc_10AC3
.text:0000000000010AE3 ; ---------------------------------------------------------------------------
.text:0000000000010AE5                 align 8
.text:0000000000010AE8
.text:0000000000010AE8 loc_10AE8:                              ; CODE XREF: printf_parse+1FC↑j
.text:0000000000010AE8                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:0000000000010AEB                 cmp     dl, 53h
.text:0000000000010AEE                 ja      def_10B05       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000010AF4                 lea     rcx, jpt_10B05
.text:0000000000010AFB                 movzx   edx, dl
.text:0000000000010AFE                 movsxd  rdx, ds:(jpt_10B05 - 14F9Ch)[rcx+rdx*4]
.text:0000000000010B02                 add     rdx, rcx
.text:0000000000010B05                 jmp     rdx             ; switch jump
.text:0000000000010B07 ; ---------------------------------------------------------------------------
.text:0000000000010B07
.text:0000000000010B07 loc_10B07:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000010B07                                         ; DATA XREF: .rodata:jpt_10B05↓o
.text:0000000000010B07                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:0000000000010B0D                 mov     ebx, 73h ; 's'
.text:0000000000010B12                 nop     word ptr [rax+rax+00h]
.text:0000000000010B18
.text:0000000000010B18 loc_10B18:                              ; CODE XREF: printf_parse+705↓j
.text:0000000000010B18                                         ; printf_parse+70D↓j ...
.text:0000000000010B18                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:0000000000010B1C                 jz      loc_111D7
.text:0000000000010B22                 mov     [r12+50h], r13
.text:0000000000010B27
.text:0000000000010B27 loc_10B27:                              ; CODE XREF: printf_parse+939↓j
.text:0000000000010B27                 cmp     r9, r13
.text:0000000000010B2A                 mov     rcx, [r15+8]
.text:0000000000010B2E                 jbe     loc_11150
.text:0000000000010B34
.text:0000000000010B34 loc_10B34:                              ; CODE XREF: printf_parse+912↓j
.text:0000000000010B34                 mov     rax, [r15]
.text:0000000000010B37                 mov     rdx, rax
.text:0000000000010B3A                 shl     rdx, 5
.text:0000000000010B3E                 add     rdx, rcx
.text:0000000000010B41                 cmp     rax, r13
.text:0000000000010B44                 ja      short loc_10B66
.text:0000000000010B46                 db      2Eh
.text:0000000000010B46                 nop     word ptr [rax+rax+00000000h]
.text:0000000000010B50
.text:0000000000010B50 loc_10B50:                              ; CODE XREF: printf_parse+2A1↓j
.text:0000000000010B50                 add     rax, 1
.text:0000000000010B54                 mov     dword ptr [rdx], 0
.text:0000000000010B5A                 add     rdx, 20h ; ' '
.text:0000000000010B5E                 cmp     rax, r13
.text:0000000000010B61                 jbe     short loc_10B50
.text:0000000000010B63                 mov     [r15], rax
.text:0000000000010B66
.text:0000000000010B66 loc_10B66:                              ; CODE XREF: printf_parse+284↑j
.text:0000000000010B66                 shl     r13, 5
.text:0000000000010B6A                 lea     rax, [rcx+r13]
.text:0000000000010B6E                 mov     edx, [rax]
.text:0000000000010B70                 test    edx, edx
.text:0000000000010B72                 jnz     loc_11143
.text:0000000000010B78                 mov     [rax], r11d
.text:0000000000010B7B
.text:0000000000010B7B loc_10B7B:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000010B7B                                         ; printf_parse+886↓j
.text:0000000000010B7B                                         ; DATA XREF: ...
.text:0000000000010B7B                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:0000000000010B80                 mov     rax, [r14]
.text:0000000000010B83                 mov     [r12+8], rbp
.text:0000000000010B88                 lea     rbx, [rax+1]
.text:0000000000010B8C                 cmp     r10, rbx
.text:0000000000010B8F                 mov     [r14], rbx
.text:0000000000010B92                 ja      loc_10C20
.text:0000000000010B98                 test    r10, r10
.text:0000000000010B9B                 js      loc_11547
.text:0000000000010BA1                 add     r10, r10
.text:0000000000010BA4                 mov     rax, 2E8BA2E8BA2E8BAh
.text:0000000000010BAE                 cmp     r10, rax
.text:0000000000010BB1                 ja      loc_11547
.text:0000000000010BB7                 lea     rax, [r10+r10*4]
.text:0000000000010BBB                 mov     rdi, [r14+8]    ; ptr
.text:0000000000010BBF                 cmp     [rsp+88h+var_60], rdi
.text:0000000000010BC4                 mov     [rsp+88h+var_48], r9
.text:0000000000010BC9                 mov     [rsp+88h+var_50], r10
.text:0000000000010BCE                 lea     rax, [r10+rax*2]
.text:0000000000010BD2                 mov     [rsp+88h+var_58], r8
.text:0000000000010BD7                 lea     rsi, ds:0[rax*8] ; size
.text:0000000000010BDF                 jz      loc_1129D
.text:0000000000010BE5                 call    _realloc        ; PIC mode
.text:0000000000010BEA                 test    rax, rax
.text:0000000000010BED                 mov     rcx, rax
.text:0000000000010BF0                 mov     r8, [rsp+88h+var_58]
.text:0000000000010BF5                 mov     r10, [rsp+88h+var_50]
.text:0000000000010BFA                 mov     r9, [rsp+88h+var_48]
.text:0000000000010BFF                 jz      loc_11547
.text:0000000000010C05                 mov     rax, [rsp+88h+var_60]
.text:0000000000010C0A                 cmp     rax, [r14+8]
.text:0000000000010C0E                 mov     rbx, [r14]
.text:0000000000010C11                 jz      loc_112C0
.text:0000000000010C17
.text:0000000000010C17 loc_10C17:                              ; CODE XREF: printf_parse+A3D↓j
.text:0000000000010C17                 mov     [r14+8], rcx
.text:0000000000010C1B                 jmp     loc_10938
.text:0000000000010C20 ; ---------------------------------------------------------------------------
.text:0000000000010C20
.text:0000000000010C20 loc_10C20:                              ; CODE XREF: printf_parse+2D2↑j
.text:0000000000010C20                 mov     rcx, [r14+8]
.text:0000000000010C24                 jmp     loc_10938
.text:0000000000010C29 ; ---------------------------------------------------------------------------
.text:0000000000010C29
.text:0000000000010C29 loc_10C29:                              ; CODE XREF: printf_parse+1B3↑j
.text:0000000000010C29                 mov     rsi, [rsp+88h+var_78]
.text:0000000000010C2E                 mov     ecx, 1
.text:0000000000010C33                 mov     [r12+18h], rbp
.text:0000000000010C38                 mov     [r12+20h], rax
.text:0000000000010C3D                 test    rsi, rsi
.text:0000000000010C40                 cmovnz  rcx, rsi
.text:0000000000010C44                 mov     [rsp+88h+var_78], rcx
.text:0000000000010C49                 movzx   ecx, byte ptr [rbp+1]
.text:0000000000010C4D                 lea     esi, [rcx-30h]
.text:0000000000010C50                 cmp     sil, 9
.text:0000000000010C54                 jbe     loc_10F35
.text:0000000000010C5A
.text:0000000000010C5A loc_10C5A:                              ; CODE XREF: printf_parse+68D↓j
.text:0000000000010C5A                 mov     rsi, [rsp+88h+var_68]
.text:0000000000010C5F                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000010C63                 lea     rdx, [rsi+1]
.text:0000000000010C67                 mov     [r12+28h], rsi
.text:0000000000010C6C                 jz      def_10B05       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000010C72                 mov     rbx, [rsp+88h+var_68]
.text:0000000000010C77                 mov     rbp, rax
.text:0000000000010C7A                 mov     [rsp+88h+var_68], rdx
.text:0000000000010C7F
.text:0000000000010C7F loc_10C7F:                              ; CODE XREF: printf_parse+6F7↓j
.text:0000000000010C7F                 cmp     r9, rbx
.text:0000000000010C82                 mov     rcx, [r15+8]
.text:0000000000010C86                 ja      loc_11302
.text:0000000000010C8C                 add     r9, r9
.text:0000000000010C8F                 lea     rax, [rbx+1]
.text:0000000000010C93                 cmp     r9, rbx
.text:0000000000010C96                 cmovbe  r9, rax
.text:0000000000010C9A                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000010CA4                 cmp     r9, rax
.text:0000000000010CA7                 ja      loc_1154B
.text:0000000000010CAD                 mov     rsi, r9
.text:0000000000010CB0                 mov     [rsp+88h+var_48], r9
.text:0000000000010CB5                 mov     [rsp+88h+var_50], r10
.text:0000000000010CBA                 shl     rsi, 5          ; size
.text:0000000000010CBE                 cmp     [rsp+88h+src], rcx
.text:0000000000010CC3                 mov     [rsp+88h+var_58], r8
.text:0000000000010CC8                 jz      loc_113E1
.text:0000000000010CCE                 mov     rdi, rcx        ; ptr
.text:0000000000010CD1                 call    _realloc        ; PIC mode
.text:0000000000010CD6                 mov     rdx, [r15+8]
.text:0000000000010CDA                 mov     r8, [rsp+88h+var_58]
.text:0000000000010CDF                 mov     rcx, rax
.text:0000000000010CE2                 mov     r10, [rsp+88h+var_50]
.text:0000000000010CE7                 mov     r9, [rsp+88h+var_48]
.text:0000000000010CEC
.text:0000000000010CEC loc_10CEC:                              ; CODE XREF: printf_parse+B40↓j
.text:0000000000010CEC                 test    rcx, rcx
.text:0000000000010CEF                 jz      loc_115A7
.text:0000000000010CF5                 cmp     [rsp+88h+src], rdx
.text:0000000000010CFA                 mov     rax, [r15]
.text:0000000000010CFD                 jz      loc_114BB
.text:0000000000010D03
.text:0000000000010D03 loc_10D03:                              ; CODE XREF: printf_parse+C33↓j
.text:0000000000010D03                 mov     [r15+8], rcx
.text:0000000000010D07
.text:0000000000010D07 loc_10D07:                              ; CODE XREF: printf_parse+A45↓j
.text:0000000000010D07                 mov     rdx, rax
.text:0000000000010D0A                 shl     rdx, 5
.text:0000000000010D0E                 add     rdx, rcx
.text:0000000000010D11                 cmp     rax, rbx
.text:0000000000010D14                 ja      short loc_10D36
.text:0000000000010D16                 db      2Eh
.text:0000000000010D16                 nop     word ptr [rax+rax+00000000h]
.text:0000000000010D20
.text:0000000000010D20 loc_10D20:                              ; CODE XREF: printf_parse+471↓j
.text:0000000000010D20                 add     rax, 1
.text:0000000000010D24                 mov     dword ptr [rdx], 0
.text:0000000000010D2A                 add     rdx, 20h ; ' '
.text:0000000000010D2E                 cmp     rax, rbx
.text:0000000000010D31                 jbe     short loc_10D20
.text:0000000000010D33                 mov     [r15], rax
.text:0000000000010D36
.text:0000000000010D36 loc_10D36:                              ; CODE XREF: printf_parse+454↑j
.text:0000000000010D36                 shl     rbx, 5
.text:0000000000010D3A                 lea     rax, [rcx+rbx]
.text:0000000000010D3E                 mov     edx, [rax]
.text:0000000000010D40                 test    edx, edx
.text:0000000000010D42                 jnz     loc_1121B
.text:0000000000010D48                 mov     dword ptr [rax], 5
.text:0000000000010D4E                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000010D52                 lea     rdx, [rbp+1]
.text:0000000000010D56                 cmp     bl, 2Eh ; '.'
.text:0000000000010D59                 jnz     loc_10A8E
.text:0000000000010D5F
.text:0000000000010D5F loc_10D5F:                              ; CODE XREF: printf_parse+1C8↑j
.text:0000000000010D5F                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:0000000000010D63                 mov     [r12+30h], rbp
.text:0000000000010D68                 jnz     loc_10EEE
.text:0000000000010D6E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000010D73                 lea     r11, [rbp+2]
.text:0000000000010D77                 mov     eax, 2
.text:0000000000010D7C                 mov     [r12+38h], r11
.text:0000000000010D81                 cmp     rsi, 2
.text:0000000000010D85                 cmovnb  rax, rsi
.text:0000000000010D89                 mov     [rsp+88h+var_70], rax
.text:0000000000010D8E                 movsx   eax, byte ptr [rbp+2]
.text:0000000000010D92                 lea     edx, [rax-30h]
.text:0000000000010D95                 cmp     dl, 9
.text:0000000000010D98                 jbe     loc_1142C
.text:0000000000010D9E
.text:0000000000010D9E loc_10D9E:                              ; CODE XREF: printf_parse+B82↓j
.text:0000000000010D9E                 mov     rbx, [r12+40h]
.text:0000000000010DA3                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000010DA7                 jz      loc_11405
.text:0000000000010DAD
.text:0000000000010DAD loc_10DAD:                              ; CODE XREF: printf_parse+B67↓j
.text:0000000000010DAD                                         ; printf_parse+C59↓j
.text:0000000000010DAD                 cmp     r9, rbx
.text:0000000000010DB0                 mov     rcx, [r15+8]
.text:0000000000010DB4                 jbe     loc_1131F
.text:0000000000010DBA                 mov     rax, [r15]
.text:0000000000010DBD
.text:0000000000010DBD loc_10DBD:                              ; CODE XREF: printf_parse+AE4↓j
.text:0000000000010DBD                 mov     rdx, rax
.text:0000000000010DC0                 shl     rdx, 5
.text:0000000000010DC4                 add     rdx, rcx
.text:0000000000010DC7                 cmp     rax, rbx
.text:0000000000010DCA                 ja      short loc_10DE6
.text:0000000000010DCC                 nop     dword ptr [rax+00h]
.text:0000000000010DD0
.text:0000000000010DD0 loc_10DD0:                              ; CODE XREF: printf_parse+521↓j
.text:0000000000010DD0                 add     rax, 1
.text:0000000000010DD4                 mov     dword ptr [rdx], 0
.text:0000000000010DDA                 add     rdx, 20h ; ' '
.text:0000000000010DDE                 cmp     rax, rbx
.text:0000000000010DE1                 jbe     short loc_10DD0
.text:0000000000010DE3                 mov     [r15], rax
.text:0000000000010DE6
.text:0000000000010DE6 loc_10DE6:                              ; CODE XREF: printf_parse+50A↑j
.text:0000000000010DE6                 shl     rbx, 5
.text:0000000000010DEA                 lea     rax, [rcx+rbx]
.text:0000000000010DEE                 mov     edx, [rax]
.text:0000000000010DF0                 test    edx, edx
.text:0000000000010DF2                 jnz     loc_1130A
.text:0000000000010DF8                 mov     dword ptr [rax], 5
.text:0000000000010DFE                 mov     rbp, r11
.text:0000000000010E01                 movzx   ebx, byte ptr [r11]
.text:0000000000010E05                 jmp     loc_10A8E
.text:0000000000010E0A ; ---------------------------------------------------------------------------
.text:0000000000010E0A
.text:0000000000010E0A loc_10E0A:                              ; CODE XREF: printf_parse+112↑j
.text:0000000000010E0A                 mov     rax, rbp
.text:0000000000010E0D                 nop     dword ptr [rax]
.text:0000000000010E10
.text:0000000000010E10 loc_10E10:                              ; CODE XREF: printf_parse+55D↓j
.text:0000000000010E10                 add     rax, 1
.text:0000000000010E14                 movzx   edx, byte ptr [rax]
.text:0000000000010E17                 lea     ecx, [rdx-30h]
.text:0000000000010E1A                 cmp     cl, 9
.text:0000000000010E1D                 jbe     short loc_10E10
.text:0000000000010E1F                 cmp     dl, 24h ; '$'
.text:0000000000010E22                 mov     r13, r8
.text:0000000000010E25                 jnz     loc_10A0E
.text:0000000000010E2B                 xor     edx, edx
.text:0000000000010E2D
.text:0000000000010E2D loc_10E2D:                              ; CODE XREF: printf_parse+5B7↓j
.text:0000000000010E2D                 movsx   eax, bl
.text:0000000000010E30                 mov     rdi, 1999999999999999h
.text:0000000000010E3A                 mov     rsi, r8
.text:0000000000010E3D                 sub     eax, 30h ; '0'
.text:0000000000010E40                 cmp     rdx, rdi
.text:0000000000010E43                 cdqe
.text:0000000000010E45                 ja      short loc_10E4E
.text:0000000000010E47                 lea     rsi, [rdx+rdx*4]
.text:0000000000010E4B                 add     rsi, rsi
.text:0000000000010E4E
.text:0000000000010E4E loc_10E4E:                              ; CODE XREF: printf_parse+585↑j
.text:0000000000010E4E                 mov     rcx, rbp
.text:0000000000010E51
.text:0000000000010E51 loc_10E51:                              ; CODE XREF: printf_parse+956↓j
.text:0000000000010E51                 add     rax, rsi
.text:0000000000010E54                 movzx   ebx, byte ptr [rbp+1]
.text:0000000000010E58                 setb    sil
.text:0000000000010E5C                 add     rbp, 1
.text:0000000000010E60                 mov     rdx, rax
.text:0000000000010E63                 movzx   esi, sil
.text:0000000000010E67                 test    rsi, rsi
.text:0000000000010E6A                 lea     edi, [rbx-30h]
.text:0000000000010E6D                 jnz     loc_111FE
.text:0000000000010E73                 cmp     dil, 9
.text:0000000000010E77                 jbe     short loc_10E2D
.text:0000000000010E79                 mov     r13, rax
.text:0000000000010E7C                 sub     r13, 1
.text:0000000000010E80                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:0000000000010E84                 ja      def_10B05       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000010E8A                 lea     rbp, [rcx+2]
.text:0000000000010E8E                 movzx   ebx, byte ptr [rcx+2]
.text:0000000000010E92                 jmp     loc_10A0E
.text:0000000000010E97 ; ---------------------------------------------------------------------------
.text:0000000000010E97
.text:0000000000010E97 loc_10E97:                              ; CODE XREF: printf_parse+1BF↑j
.text:0000000000010E97                 mov     [r12+18h], rbp
.text:0000000000010E9C                 movzx   edi, byte ptr [rbp+0]
.text:0000000000010EA0                 mov     rsi, rbp
.text:0000000000010EA3                 lea     ecx, [rdi-30h]
.text:0000000000010EA6                 cmp     cl, 9
.text:0000000000010EA9                 jbe     short loc_10EB7
.text:0000000000010EAB                 jmp     short loc_10EE0
.text:0000000000010EAB ; ---------------------------------------------------------------------------
.text:0000000000010EAD                 align 10h
.text:0000000000010EB0
.text:0000000000010EB0 loc_10EB0:                              ; CODE XREF: printf_parse+600↓j
.text:0000000000010EB0                 mov     rbp, rax
.text:0000000000010EB3                 add     rax, 1
.text:0000000000010EB7
.text:0000000000010EB7 loc_10EB7:                              ; CODE XREF: printf_parse+5E9↑j
.text:0000000000010EB7                 movzx   edi, byte ptr [rax]
.text:0000000000010EBA                 lea     edx, [rdi-30h]
.text:0000000000010EBD                 cmp     dl, 9
.text:0000000000010EC0                 jbe     short loc_10EB0
.text:0000000000010EC2                 mov     rcx, rax
.text:0000000000010EC5                 lea     rdx, [rbp+2]
.text:0000000000010EC9                 mov     rbp, rax
.text:0000000000010ECC                 sub     rcx, rsi
.text:0000000000010ECF                 mov     rsi, [rsp+88h+var_78]
.text:0000000000010ED4                 cmp     rsi, rcx
.text:0000000000010ED7                 cmovnb  rcx, rsi
.text:0000000000010EDB                 mov     [rsp+88h+var_78], rcx
.text:0000000000010EE0
.text:0000000000010EE0 loc_10EE0:                              ; CODE XREF: printf_parse+5EB↑j
.text:0000000000010EE0                 mov     [r12+20h], rbp
.text:0000000000010EE5                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000010EE9                 jmp     loc_10A85
.text:0000000000010EEE ; ---------------------------------------------------------------------------
.text:0000000000010EEE
.text:0000000000010EEE loc_10EEE:                              ; CODE XREF: printf_parse+4A8↑j
.text:0000000000010EEE                 movzx   eax, byte ptr [rbp+1]
.text:0000000000010EF2                 sub     eax, 30h ; '0'
.text:0000000000010EF5                 cmp     al, 9
.text:0000000000010EF7                 ja      short loc_10F0E
.text:0000000000010EF9                 nop     dword ptr [rax+00000000h]
.text:0000000000010F00
.text:0000000000010F00 loc_10F00:                              ; CODE XREF: printf_parse+64C↓j
.text:0000000000010F00                 add     rdx, 1
.text:0000000000010F04                 movzx   eax, byte ptr [rdx]
.text:0000000000010F07                 sub     eax, 30h ; '0'
.text:0000000000010F0A                 cmp     al, 9
.text:0000000000010F0C                 jbe     short loc_10F00
.text:0000000000010F0E
.text:0000000000010F0E loc_10F0E:                              ; CODE XREF: printf_parse+637↑j
.text:0000000000010F0E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000010F13                 mov     rax, rdx
.text:0000000000010F16                 mov     [r12+38h], rdx
.text:0000000000010F1B                 sub     rax, rbp
.text:0000000000010F1E                 movzx   ebx, byte ptr [rdx]
.text:0000000000010F21                 mov     rbp, rdx
.text:0000000000010F24                 cmp     rsi, rax
.text:0000000000010F27                 cmovnb  rax, rsi
.text:0000000000010F2B                 mov     [rsp+88h+var_70], rax
.text:0000000000010F30                 jmp     loc_10A8E
.text:0000000000010F35 ; ---------------------------------------------------------------------------
.text:0000000000010F35
.text:0000000000010F35 loc_10F35:                              ; CODE XREF: printf_parse+394↑j
.text:0000000000010F35                 mov     rsi, rax
.text:0000000000010F38
.text:0000000000010F38 loc_10F38:                              ; CODE XREF: printf_parse+687↓j
.text:0000000000010F38                 add     rsi, 1
.text:0000000000010F3C                 movzx   edi, byte ptr [rsi]
.text:0000000000010F3F                 lea     r11d, [rdi-30h]
.text:0000000000010F43                 cmp     r11b, 9
.text:0000000000010F47                 jbe     short loc_10F38
.text:0000000000010F49                 cmp     dil, 24h ; '$'
.text:0000000000010F4D                 jnz     loc_10C5A
.text:0000000000010F53                 xor     esi, esi
.text:0000000000010F55
.text:0000000000010F55 loc_10F55:                              ; CODE XREF: printf_parse+6DE↓j
.text:0000000000010F55                 movsx   eax, cl
.text:0000000000010F58                 mov     rdi, 1999999999999999h
.text:0000000000010F62                 mov     rcx, r8
.text:0000000000010F65                 sub     eax, 30h ; '0'
.text:0000000000010F68                 cmp     rsi, rdi
.text:0000000000010F6B                 cdqe
.text:0000000000010F6D                 ja      short loc_10F76
.text:0000000000010F6F                 lea     rcx, [rsi+rsi*4]
.text:0000000000010F73                 add     rcx, rcx
.text:0000000000010F76
.text:0000000000010F76 loc_10F76:                              ; CODE XREF: printf_parse+6AD↑j
.text:0000000000010F76                 mov     rbp, rdx
.text:0000000000010F79
.text:0000000000010F79 loc_10F79:                              ; CODE XREF: printf_parse+BF6↓j
.text:0000000000010F79                 xor     r11d, r11d
.text:0000000000010F7C                 add     rax, rcx
.text:0000000000010F7F                 movzx   ecx, byte ptr [rdx+1]
.text:0000000000010F83                 setb    r11b
.text:0000000000010F87                 add     rdx, 1
.text:0000000000010F8B                 mov     rsi, rax
.text:0000000000010F8E                 test    r11, r11
.text:0000000000010F91                 lea     edi, [rcx-30h]
.text:0000000000010F94                 jnz     loc_1149E
.text:0000000000010F9A                 cmp     dil, 9
.text:0000000000010F9E                 jbe     short loc_10F55
.text:0000000000010FA0                 lea     rbx, [rax-1]
.text:0000000000010FA4                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000010FA8                 ja      def_10B05       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000010FAE                 mov     [r12+28h], rbx
.text:0000000000010FB3                 add     rbp, 2
.text:0000000000010FB7                 jmp     loc_10C7F
.text:0000000000010FBC ; ---------------------------------------------------------------------------
.text:0000000000010FBC
.text:0000000000010FBC loc_10FBC:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000010FBC                                         ; DATA XREF: .rodata:jpt_10B05↓o
.text:0000000000010FBC                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:0000000000010FBF                 mov     r11d, 16h
.text:0000000000010FC5                 jg      loc_10B18
.text:0000000000010FCB                 test    al, 4
.text:0000000000010FCD                 jnz     loc_10B18
.text:0000000000010FD3                 cmp     eax, 7
.text:0000000000010FD6                 mov     r11d, 15h
.text:0000000000010FDC                 jg      loc_10B18
.text:0000000000010FE2                 test    al, 2
.text:0000000000010FE4                 mov     r11d, 12h
.text:0000000000010FEA                 jnz     loc_10B18
.text:0000000000010FF0                 xor     r11d, r11d
.text:0000000000010FF3                 test    al, 1
.text:0000000000010FF5                 setz    r11b
.text:0000000000010FF9                 add     r11d, 13h
.text:0000000000010FFD                 jmp     loc_10B18
.text:0000000000010FFD ; ---------------------------------------------------------------------------
.text:0000000000011002                 align 8
.text:0000000000011008
.text:0000000000011008 loc_11008:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000011008                                         ; DATA XREF: .rodata:jpt_10B05↓o
.text:0000000000011008                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:000000000001100B                 cmp     eax, 7
.text:000000000001100E                 setnle  r11b
.text:0000000000011012                 add     r11d, 0Dh
.text:0000000000011016                 jmp     loc_10B18
.text:000000000001101B ; ---------------------------------------------------------------------------
.text:000000000001101B
.text:000000000001101B loc_1101B:                              ; CODE XREF: printf_parse+245↑j
.text:000000000001101B                                         ; DATA XREF: .rodata:jpt_10B05↓o
.text:000000000001101B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000001101E                 mov     r11d, 9
.text:0000000000011024                 jg      loc_10B18
.text:000000000001102A                 test    al, 4
.text:000000000001102C                 jnz     loc_10B18
.text:0000000000011032                 cmp     eax, 7
.text:0000000000011035                 mov     r11d, 7
.text:000000000001103B                 jg      loc_10B18
.text:0000000000011041                 test    al, 2
.text:0000000000011043                 mov     r11d, 1
.text:0000000000011049                 jnz     loc_10B18
.text:000000000001104F                 and     eax, 1
.text:0000000000011052                 cmp     eax, 1
.text:0000000000011055                 sbb     r11d, r11d
.text:0000000000011058                 and     r11d, 2
.text:000000000001105C                 add     r11d, 3
.text:0000000000011060                 jmp     loc_10B18
.text:0000000000011060 ; ---------------------------------------------------------------------------
.text:0000000000011065                 align 8
.text:0000000000011068
.text:0000000000011068 loc_11068:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000011068                                         ; DATA XREF: .rodata:jpt_10B05↓o
.text:0000000000011068                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:000000000001106B                 cmp     eax, 7
.text:000000000001106E                 setnle  r11b
.text:0000000000011072                 add     r11d, 0Fh
.text:0000000000011076                 jmp     loc_10B18
.text:000000000001107B ; ---------------------------------------------------------------------------
.text:000000000001107B
.text:000000000001107B loc_1107B:                              ; CODE XREF: printf_parse+245↑j
.text:000000000001107B                                         ; DATA XREF: .rodata:jpt_10B05↓o
.text:000000000001107B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:000000000001107E                 mov     r11d, 0Ch
.text:0000000000011084                 jg      loc_10B18
.text:000000000001108A                 xor     r11d, r11d
.text:000000000001108D                 test    al, 4
.text:000000000001108F                 setnz   r11b
.text:0000000000011093                 add     r11d, 0Bh
.text:0000000000011097                 jmp     loc_10B18
.text:000000000001109C ; ---------------------------------------------------------------------------
.text:000000000001109C
.text:000000000001109C loc_1109C:                              ; CODE XREF: printf_parse+245↑j
.text:000000000001109C                                         ; DATA XREF: .rodata:jpt_10B05↓o
.text:000000000001109C                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:00000000000110A2                 mov     ebx, 63h ; 'c'
.text:00000000000110A7                 jmp     loc_10B18
.text:00000000000110AC ; ---------------------------------------------------------------------------
.text:00000000000110AC
.text:00000000000110AC loc_110AC:                              ; CODE XREF: printf_parse+245↑j
.text:00000000000110AC                                         ; DATA XREF: .rodata:jpt_10B05↓o
.text:00000000000110AC                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:00000000000110AF                 mov     r11d, 0Ah
.text:00000000000110B5                 jg      loc_10B18
.text:00000000000110BB                 test    al, 4
.text:00000000000110BD                 jnz     loc_10B18
.text:00000000000110C3                 cmp     eax, 7
.text:00000000000110C6                 mov     r11d, 8
.text:00000000000110CC                 jg      loc_10B18
.text:00000000000110D2                 test    al, 2
.text:00000000000110D4                 mov     r11d, 2
.text:00000000000110DA                 jnz     loc_10B18
.text:00000000000110E0                 and     eax, 1
.text:00000000000110E3                 cmp     eax, 1
.text:00000000000110E6                 sbb     r11d, r11d
.text:00000000000110E9                 and     r11d, 2
.text:00000000000110ED                 add     r11d, 4
.text:00000000000110F1                 jmp     loc_10B18
.text:00000000000110F1 ; ---------------------------------------------------------------------------
.text:00000000000110F6                 align 20h
.text:0000000000011100
.text:0000000000011100 loc_11100:                              ; CODE XREF: printf_parse+245↑j
.text:0000000000011100                                         ; DATA XREF: .rodata:jpt_10B05↓o
.text:0000000000011100                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:0000000000011106                 jmp     loc_10B18
.text:000000000001110B ; ---------------------------------------------------------------------------
.text:000000000001110B
.text:000000000001110B def_10B05:                              ; CODE XREF: printf_parse+22E↑j
.text:000000000001110B                                         ; printf_parse+245↑j ...
.text:000000000001110B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000001110F
.text:000000000001110F loc_1110F:                              ; CODE XREF: printf_parse+88C↓j
.text:000000000001110F                                         ; printf_parse+95E↓j ...
.text:000000000001110F                 cmp     [rsp+88h+src], rcx
.text:0000000000011114                 jz      short loc_1111E
.text:0000000000011116                 mov     rdi, rcx        ; ptr
.text:0000000000011119                 call    _free           ; PIC mode
.text:000000000001111E
.text:000000000001111E loc_1111E:                              ; CODE XREF: printf_parse+854↑j
.text:000000000001111E                 mov     rdi, [r14+8]    ; ptr
.text:0000000000011122                 cmp     [rsp+88h+var_60], rdi
.text:0000000000011127                 jz      short loc_1112E
.text:0000000000011129                 call    _free           ; PIC mode
.text:000000000001112E
.text:000000000001112E loc_1112E:                              ; CODE XREF: printf_parse+867↑j
.text:000000000001112E                 call    ___errno_location ; PIC mode
.text:0000000000011133                 mov     dword ptr [rax], 16h
.text:0000000000011139                 mov     eax, 0FFFFFFFFh
.text:000000000001113E                 jmp     loc_10962
.text:0000000000011143 ; ---------------------------------------------------------------------------
.text:0000000000011143
.text:0000000000011143 loc_11143:                              ; CODE XREF: printf_parse+2B2↑j
.text:0000000000011143                 cmp     edx, r11d
.text:0000000000011146                 jz      loc_10B7B       ; jumptable 0000000000000245 case 37
.text:000000000001114C                 jmp     short loc_1110F
.text:000000000001114C ; ---------------------------------------------------------------------------
.text:000000000001114E                 align 10h
.text:0000000000011150
.text:0000000000011150 loc_11150:                              ; CODE XREF: printf_parse+26E↑j
.text:0000000000011150                 add     r9, r9
.text:0000000000011153                 lea     rax, [r13+1]
.text:0000000000011157                 cmp     r9, r13
.text:000000000001115A                 cmovbe  r9, rax
.text:000000000001115E                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000011168                 cmp     r9, rax
.text:000000000001116B                 ja      loc_1154B
.text:0000000000011171                 mov     rsi, r9
.text:0000000000011174                 mov     [rsp+88h+var_40], r9
.text:0000000000011179                 mov     [rsp+88h+var_48], r10
.text:000000000001117E                 shl     rsi, 5          ; size
.text:0000000000011182                 cmp     [rsp+88h+src], rcx
.text:0000000000011187                 mov     [rsp+88h+var_50], r8
.text:000000000001118C                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000011191                 jz      loc_11231
.text:0000000000011197                 mov     rdi, rcx        ; ptr
.text:000000000001119A                 call    _realloc        ; PIC mode
.text:000000000001119F                 test    rax, rax
.text:00000000000111A2                 mov     rcx, rax
.text:00000000000111A5                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:00000000000111AA                 mov     r8, [rsp+88h+var_50]
.text:00000000000111AF                 mov     r10, [rsp+88h+var_48]
.text:00000000000111B4                 mov     r9, [rsp+88h+var_40]
.text:00000000000111B9                 jz      loc_11547
.text:00000000000111BF                 mov     rax, [rsp+88h+src]
.text:00000000000111C4                 cmp     rax, [r15+8]
.text:00000000000111C8                 jz      loc_11259
.text:00000000000111CE
.text:00000000000111CE loc_111CE:                              ; CODE XREF: printf_parse+9D8↓j
.text:00000000000111CE                 mov     [r15+8], rcx
.text:00000000000111D2                 jmp     loc_10B34
.text:00000000000111D7 ; ---------------------------------------------------------------------------
.text:00000000000111D7
.text:00000000000111D7 loc_111D7:                              ; CODE XREF: printf_parse+25C↑j
.text:00000000000111D7                 mov     rsi, [rsp+88h+var_68]
.text:00000000000111DC                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000111E0                 lea     rax, [rsi+1]
.text:00000000000111E4                 mov     [r12+50h], rsi
.text:00000000000111E9                 jz      def_10B05       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000111EF                 mov     r13, [rsp+88h+var_68]
.text:00000000000111F4                 mov     [rsp+88h+var_68], rax
.text:00000000000111F9                 jmp     loc_10B27
.text:00000000000111FE ; ---------------------------------------------------------------------------
.text:00000000000111FE
.text:00000000000111FE loc_111FE:                              ; CODE XREF: printf_parse+5AD↑j
.text:00000000000111FE                 cmp     dil, 9
.text:0000000000011202                 ja      def_10B05       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000011208                 movsx   eax, bl
.text:000000000001120B                 mov     rsi, r8
.text:000000000001120E                 mov     rcx, rbp
.text:0000000000011211                 sub     eax, 30h ; '0'
.text:0000000000011214                 cdqe
.text:0000000000011216                 jmp     loc_10E51
.text:000000000001121B ; ---------------------------------------------------------------------------
.text:000000000001121B
.text:000000000001121B loc_1121B:                              ; CODE XREF: printf_parse+482↑j
.text:000000000001121B                 cmp     edx, 5
.text:000000000001121E                 jnz     loc_1110F
.text:0000000000011224                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000011228                 lea     rdx, [rbp+1]
.text:000000000001122C                 jmp     loc_10A85
.text:0000000000011231 ; ---------------------------------------------------------------------------
.text:0000000000011231
.text:0000000000011231 loc_11231:                              ; CODE XREF: printf_parse+8D1↑j
.text:0000000000011231                 mov     rdi, rsi        ; size
.text:0000000000011234                 call    _malloc         ; PIC mode
.text:0000000000011239                 test    rax, rax
.text:000000000001123C                 mov     rcx, rax
.text:000000000001123F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000011244                 mov     r8, [rsp+88h+var_50]
.text:0000000000011249                 mov     r10, [rsp+88h+var_48]
.text:000000000001124E                 mov     r9, [rsp+88h+var_40]
.text:0000000000011253                 jz      loc_113BC
.text:0000000000011259
.text:0000000000011259 loc_11259:                              ; CODE XREF: printf_parse+908↑j
.text:0000000000011259                 mov     rdx, [r15]
.text:000000000001125C                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000011261                 mov     rdi, rcx        ; dest
.text:0000000000011264                 mov     [rsp+88h+var_40], r9
.text:0000000000011269                 mov     [rsp+88h+var_48], r10
.text:000000000001126E                 mov     [rsp+88h+var_50], r8
.text:0000000000011273                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000011278                 shl     rdx, 5          ; n
.text:000000000001127C                 call    _memcpy         ; PIC mode
.text:0000000000011281                 mov     r9, [rsp+88h+var_40]
.text:0000000000011286                 mov     r10, [rsp+88h+var_48]
.text:000000000001128B                 mov     rcx, rax
.text:000000000001128E                 mov     r8, [rsp+88h+var_50]
.text:0000000000011293                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000011298                 jmp     loc_111CE
.text:000000000001129D ; ---------------------------------------------------------------------------
.text:000000000001129D
.text:000000000001129D loc_1129D:                              ; CODE XREF: printf_parse+31F↑j
.text:000000000001129D                 mov     rdi, rsi        ; size
.text:00000000000112A0                 call    _malloc         ; PIC mode
.text:00000000000112A5                 test    rax, rax
.text:00000000000112A8                 mov     rcx, rax
.text:00000000000112AB                 mov     r8, [rsp+88h+var_58]
.text:00000000000112B0                 mov     r10, [rsp+88h+var_50]
.text:00000000000112B5                 mov     r9, [rsp+88h+var_48]
.text:00000000000112BA                 jz      loc_113A9
.text:00000000000112C0
.text:00000000000112C0 loc_112C0:                              ; CODE XREF: printf_parse+351↑j
.text:00000000000112C0                 lea     rax, [rbx+rbx*4]
.text:00000000000112C4                 mov     rsi, [rsp+88h+var_60] ; src
.text:00000000000112C9                 mov     rdi, rcx        ; dest
.text:00000000000112CC                 mov     [rsp+88h+var_48], r9
.text:00000000000112D1                 mov     [rsp+88h+var_50], r10
.text:00000000000112D6                 lea     rdx, [rbx+rax*2]
.text:00000000000112DA                 mov     [rsp+88h+var_58], r8
.text:00000000000112DF                 shl     rdx, 3          ; n
.text:00000000000112E3                 call    _memcpy         ; PIC mode
.text:00000000000112E8                 mov     rbx, [r14]
.text:00000000000112EB                 mov     rcx, rax
.text:00000000000112EE                 mov     r9, [rsp+88h+var_48]
.text:00000000000112F3                 mov     r10, [rsp+88h+var_50]
.text:00000000000112F8                 mov     r8, [rsp+88h+var_58]
.text:00000000000112FD                 jmp     loc_10C17
.text:0000000000011302 ; ---------------------------------------------------------------------------
.text:0000000000011302
.text:0000000000011302 loc_11302:                              ; CODE XREF: printf_parse+3C6↑j
.text:0000000000011302                 mov     rax, [r15]
.text:0000000000011305                 jmp     loc_10D07
.text:000000000001130A ; ---------------------------------------------------------------------------
.text:000000000001130A
.text:000000000001130A loc_1130A:                              ; CODE XREF: printf_parse+532↑j
.text:000000000001130A                 cmp     edx, 5
.text:000000000001130D                 jnz     loc_1110F
.text:0000000000011313                 movzx   ebx, byte ptr [r11]
.text:0000000000011317                 mov     rbp, r11
.text:000000000001131A                 jmp     loc_10A8E
.text:000000000001131F ; ---------------------------------------------------------------------------
.text:000000000001131F
.text:000000000001131F loc_1131F:                              ; CODE XREF: printf_parse+4F4↑j
.text:000000000001131F                 add     r9, r9
.text:0000000000011322                 lea     rax, [rbx+1]
.text:0000000000011326                 cmp     r9, rbx
.text:0000000000011329                 cmovbe  r9, rax
.text:000000000001132D                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000011337                 cmp     r9, rax
.text:000000000001133A                 ja      loc_1154B
.text:0000000000011340                 mov     rsi, r9
.text:0000000000011343                 mov     [rsp+88h+var_40], r9
.text:0000000000011348                 mov     [rsp+88h+var_48], r10
.text:000000000001134D                 shl     rsi, 5          ; size
.text:0000000000011351                 cmp     [rsp+88h+src], rcx
.text:0000000000011356                 mov     [rsp+88h+var_50], r8
.text:000000000001135B                 mov     [rsp+88h+var_58], r11
.text:0000000000011360                 jz      loc_1151E
.text:0000000000011366                 mov     rdi, rcx        ; ptr
.text:0000000000011369                 call    _realloc        ; PIC mode
.text:000000000001136E                 mov     rdx, [r15+8]
.text:0000000000011372                 mov     r11, [rsp+88h+var_58]
.text:0000000000011377                 mov     rcx, rax
.text:000000000001137A                 mov     r8, [rsp+88h+var_50]
.text:000000000001137F                 mov     r10, [rsp+88h+var_48]
.text:0000000000011384                 mov     r9, [rsp+88h+var_40]
.text:0000000000011389
.text:0000000000011389 loc_11389:                              ; CODE XREF: printf_parse+C82↓j
.text:0000000000011389                 test    rcx, rcx
.text:000000000001138C                 jz      loc_115A7
.text:0000000000011392                 cmp     [rsp+88h+src], rdx
.text:0000000000011397                 mov     rax, [r15]
.text:000000000001139A                 jz      loc_11560
.text:00000000000113A0
.text:00000000000113A0 loc_113A0:                              ; CODE XREF: printf_parse+CE2↓j
.text:00000000000113A0                 mov     [r15+8], rcx
.text:00000000000113A4                 jmp     loc_10DBD
.text:00000000000113A9 ; ---------------------------------------------------------------------------
.text:00000000000113A9
.text:00000000000113A9 loc_113A9:                              ; CODE XREF: printf_parse+9FA↑j
.text:00000000000113A9                 mov     rcx, [r15+8]
.text:00000000000113AD                 cmp     [rsp+88h+src], rcx
.text:00000000000113B2                 jz      short loc_113CC
.text:00000000000113B4
.text:00000000000113B4 loc_113B4:                              ; CODE XREF: printf_parse+C90↓j
.text:00000000000113B4                 mov     rdi, rcx        ; ptr
.text:00000000000113B7                 call    _free           ; PIC mode
.text:00000000000113BC
.text:00000000000113BC loc_113BC:                              ; CODE XREF: printf_parse+993↑j
.text:00000000000113BC                                         ; printf_parse+C96↓j
.text:00000000000113BC                 mov     rdi, [r14+8]    ; ptr
.text:00000000000113C0                 cmp     [rsp+88h+var_60], rdi
.text:00000000000113C5                 jz      short loc_113CC
.text:00000000000113C7                 call    _free           ; PIC mode
.text:00000000000113CC
.text:00000000000113CC loc_113CC:                              ; CODE XREF: printf_parse+AF2↑j
.text:00000000000113CC                                         ; printf_parse+B05↑j
.text:00000000000113CC                 call    ___errno_location ; PIC mode
.text:00000000000113D1                 mov     dword ptr [rax], 0Ch
.text:00000000000113D7                 mov     eax, 0FFFFFFFFh
.text:00000000000113DC                 jmp     loc_10962
.text:00000000000113E1 ; ---------------------------------------------------------------------------
.text:00000000000113E1
.text:00000000000113E1 loc_113E1:                              ; CODE XREF: printf_parse+408↑j
.text:00000000000113E1                 mov     rdi, rsi        ; size
.text:00000000000113E4                 call    _malloc         ; PIC mode
.text:00000000000113E9                 mov     rdx, [rsp+88h+src]
.text:00000000000113EE                 mov     rcx, rax
.text:00000000000113F1                 mov     r9, [rsp+88h+var_48]
.text:00000000000113F6                 mov     r10, [rsp+88h+var_50]
.text:00000000000113FB                 mov     r8, [rsp+88h+var_58]
.text:0000000000011400                 jmp     loc_10CEC
.text:0000000000011405 ; ---------------------------------------------------------------------------
.text:0000000000011405
.text:0000000000011405 loc_11405:                              ; CODE XREF: printf_parse+4E7↑j
.text:0000000000011405                 mov     rsi, [rsp+88h+var_68]
.text:000000000001140A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000001140E                 lea     rax, [rsi+1]
.text:0000000000011412                 mov     [r12+40h], rsi
.text:0000000000011417                 jz      def_10B05       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000001141D                 mov     rbx, [rsp+88h+var_68]
.text:0000000000011422                 mov     [rsp+88h+var_68], rax
.text:0000000000011427                 jmp     loc_10DAD
.text:000000000001142C ; ---------------------------------------------------------------------------
.text:000000000001142C
.text:000000000001142C loc_1142C:                              ; CODE XREF: printf_parse+4D8↑j
.text:000000000001142C                 mov     rdx, r11
.text:000000000001142F
.text:000000000001142F loc_1142F:                              ; CODE XREF: printf_parse+B7D↓j
.text:000000000001142F                 add     rdx, 1
.text:0000000000011433                 movzx   ecx, byte ptr [rdx]
.text:0000000000011436                 lea     esi, [rcx-30h]
.text:0000000000011439                 cmp     sil, 9
.text:000000000001143D                 jbe     short loc_1142F
.text:000000000001143F                 cmp     cl, 24h ; '$'
.text:0000000000011442                 jnz     loc_10D9E
.text:0000000000011448                 xor     ecx, ecx
.text:000000000001144A
.text:000000000001144A loc_1144A:                              ; CODE XREF: printf_parse+C3C↓j
.text:000000000001144A                 mov     rsi, 1999999999999999h
.text:0000000000011454                 sub     eax, 30h ; '0'
.text:0000000000011457                 mov     rdx, r8
.text:000000000001145A                 cmp     rcx, rsi
.text:000000000001145D                 cdqe
.text:000000000001145F                 ja      short loc_11468
.text:0000000000011461                 lea     rdx, [rcx+rcx*4]
.text:0000000000011465                 add     rdx, rdx
.text:0000000000011468
.text:0000000000011468 loc_11468:                              ; CODE XREF: printf_parse+B9F↑j
.text:0000000000011468                 mov     rsi, r11
.text:000000000001146B
.text:000000000001146B loc_1146B:                              ; CODE XREF: printf_parse+BDC↓j
.text:000000000001146B                 xor     ebx, ebx
.text:000000000001146D                 add     rdx, rax
.text:0000000000011470                 movsx   eax, byte ptr [r11+1]
.text:0000000000011475                 setb    bl
.text:0000000000011478                 add     r11, 1
.text:000000000001147C                 mov     rcx, rdx
.text:000000000001147F                 test    rbx, rbx
.text:0000000000011482                 lea     edi, [rax-30h]
.text:0000000000011485                 jz      short loc_114F8
.text:0000000000011487                 cmp     dil, 9
.text:000000000001148B                 ja      def_10B05       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000011491                 sub     eax, 30h ; '0'
.text:0000000000011494                 mov     rdx, r8
.text:0000000000011497                 mov     rsi, r11
.text:000000000001149A                 cdqe
.text:000000000001149C                 jmp     short loc_1146B
.text:000000000001149E ; ---------------------------------------------------------------------------
.text:000000000001149E
.text:000000000001149E loc_1149E:                              ; CODE XREF: printf_parse+6D4↑j
.text:000000000001149E                 cmp     dil, 9
.text:00000000000114A2                 ja      def_10B05       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000114A8                 movsx   eax, cl
.text:00000000000114AB                 mov     rbp, rdx
.text:00000000000114AE                 mov     rcx, r8
.text:00000000000114B1                 sub     eax, 30h ; '0'
.text:00000000000114B4                 cdqe
.text:00000000000114B6                 jmp     loc_10F79
.text:00000000000114BB ; ---------------------------------------------------------------------------
.text:00000000000114BB
.text:00000000000114BB loc_114BB:                              ; CODE XREF: printf_parse+43D↑j
.text:00000000000114BB                 mov     rsi, [rsp+88h+src] ; src
.text:00000000000114C0                 shl     rax, 5
.text:00000000000114C4                 mov     rdi, rcx        ; dest
.text:00000000000114C7                 mov     rdx, rax        ; n
.text:00000000000114CA                 mov     [rsp+88h+var_48], r9
.text:00000000000114CF                 mov     [rsp+88h+var_50], r10
.text:00000000000114D4                 mov     [rsp+88h+var_58], r8
.text:00000000000114D9                 call    _memcpy         ; PIC mode
.text:00000000000114DE                 mov     r9, [rsp+88h+var_48]
.text:00000000000114E3                 mov     rcx, rax
.text:00000000000114E6                 mov     r10, [rsp+88h+var_50]
.text:00000000000114EB                 mov     rax, [r15]
.text:00000000000114EE                 mov     r8, [rsp+88h+var_58]
.text:00000000000114F3                 jmp     loc_10D03
.text:00000000000114F8 ; ---------------------------------------------------------------------------
.text:00000000000114F8
.text:00000000000114F8 loc_114F8:                              ; CODE XREF: printf_parse+BC5↑j
.text:00000000000114F8                 cmp     dil, 9
.text:00000000000114FC                 jbe     loc_1144A
.text:0000000000011502                 lea     rbx, [rdx-1]
.text:0000000000011506                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000001150A                 ja      def_10B05       ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000011510                 mov     [r12+40h], rbx
.text:0000000000011515                 lea     r11, [rsi+2]
.text:0000000000011519                 jmp     loc_10DAD
.text:000000000001151E ; ---------------------------------------------------------------------------
.text:000000000001151E
.text:000000000001151E loc_1151E:                              ; CODE XREF: printf_parse+AA0↑j
.text:000000000001151E                 mov     rdi, rsi        ; size
.text:0000000000011521                 call    _malloc         ; PIC mode
.text:0000000000011526                 mov     rdx, [rsp+88h+src]
.text:000000000001152B                 mov     rcx, rax
.text:000000000001152E                 mov     r9, [rsp+88h+var_40]
.text:0000000000011533                 mov     r10, [rsp+88h+var_48]
.text:0000000000011538                 mov     r8, [rsp+88h+var_50]
.text:000000000001153D                 mov     r11, [rsp+88h+var_58]
.text:0000000000011542                 jmp     loc_11389
.text:0000000000011547 ; ---------------------------------------------------------------------------
.text:0000000000011547
.text:0000000000011547 loc_11547:                              ; CODE XREF: printf_parse+2DB↑j
.text:0000000000011547                                         ; printf_parse+2F1↑j ...
.text:0000000000011547                 mov     rcx, [r15+8]
.text:000000000001154B
.text:000000000001154B loc_1154B:                              ; CODE XREF: printf_parse+3E7↑j
.text:000000000001154B                                         ; printf_parse+8AB↑j ...
.text:000000000001154B                 cmp     [rsp+88h+src], rcx
.text:0000000000011550                 jnz     loc_113B4
.text:0000000000011556                 jmp     loc_113BC
.text:0000000000011556 ; ---------------------------------------------------------------------------
.text:000000000001155B                 align 20h
.text:0000000000011560
.text:0000000000011560 loc_11560:                              ; CODE XREF: printf_parse+ADA↑j
.text:0000000000011560                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000011565                 shl     rax, 5
.text:0000000000011569                 mov     rdi, rcx        ; dest
.text:000000000001156C                 mov     rdx, rax        ; n
.text:000000000001156F                 mov     [rsp+88h+var_40], r9
.text:0000000000011574                 mov     [rsp+88h+var_48], r10
.text:0000000000011579                 mov     [rsp+88h+var_50], r8
.text:000000000001157E                 mov     [rsp+88h+var_58], r11
.text:0000000000011583                 call    _memcpy         ; PIC mode
.text:0000000000011588                 mov     r9, [rsp+88h+var_40]
.text:000000000001158D                 mov     rcx, rax
.text:0000000000011590                 mov     r10, [rsp+88h+var_48]
.text:0000000000011595                 mov     rax, [r15]
.text:0000000000011598                 mov     r8, [rsp+88h+var_50]
.text:000000000001159D                 mov     r11, [rsp+88h+var_58]
.text:00000000000115A2                 jmp     loc_113A0
.text:00000000000115A7 ; ---------------------------------------------------------------------------
.text:00000000000115A7
.text:00000000000115A7 loc_115A7:                              ; CODE XREF: printf_parse+42F↑j
.text:00000000000115A7                                         ; printf_parse+ACC↑j
.text:00000000000115A7                 mov     rcx, rdx
.text:00000000000115AA                 jmp     short loc_1154B
.text:00000000000115AA ; } // starts at 108C0
.text:00000000000115AA printf_parse    endp
.text:00000000000115AA
.text:00000000000115AA ; ---------------------------------------------------------------------------
.text:00000000000115AC                 align 10h
.text:00000000000115B0
.text:00000000000115B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000115B0
.text:00000000000115B0 ; Attributes: info_from_lumina
.text:00000000000115B0
.text:00000000000115B0 ; void _libc_csu_init(void)
.text:00000000000115B0                 public __libc_csu_init
.text:00000000000115B0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000115B0 ; __unwind {
.text:00000000000115B0                 push    r15
.text:00000000000115B2                 push    r14
.text:00000000000115B4                 mov     r15, rdx
.text:00000000000115B7                 push    r13
.text:00000000000115B9                 push    r12
.text:00000000000115BB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000115C2                 push    rbp
.text:00000000000115C3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000115CA                 push    rbx
.text:00000000000115CB                 mov     r13d, edi
.text:00000000000115CE                 mov     r14, rsi
.text:00000000000115D1                 sub     rbp, r12
.text:00000000000115D4                 sub     rsp, 8
.text:00000000000115D8                 sar     rbp, 3
.text:00000000000115DC                 call    _init_proc
.text:00000000000115E1                 test    rbp, rbp
.text:00000000000115E4                 jz      short loc_11606
.text:00000000000115E6                 xor     ebx, ebx
.text:00000000000115E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000115F0
.text:00000000000115F0 loc_115F0:                              ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000115F0                 mov     rdx, r15
.text:00000000000115F3                 mov     rsi, r14
.text:00000000000115F6                 mov     edi, r13d
.text:00000000000115F9                 call    ds:(__frame_dummy_init_array_entry - 216FF0h)[r12+rbx*8]
.text:00000000000115FD                 add     rbx, 1
.text:0000000000011601                 cmp     rbp, rbx
.text:0000000000011604                 jnz     short loc_115F0
.text:0000000000011606
.text:0000000000011606 loc_11606:                              ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000011606                 add     rsp, 8
.text:000000000001160A                 pop     rbx
.text:000000000001160B                 pop     rbp
.text:000000000001160C                 pop     r12
.text:000000000001160E                 pop     r13
.text:0000000000011610                 pop     r14
.text:0000000000011612                 pop     r15
.text:0000000000011614                 retn
.text:0000000000011614 ; } // starts at 115B0
.text:0000000000011614 __libc_csu_init endp
.text:0000000000011614
.text:0000000000011614 ; ---------------------------------------------------------------------------
.text:0000000000011615                 align 20h
.text:0000000000011620
.text:0000000000011620 ; =============== S U B R O U T I N E =======================================
.text:0000000000011620
.text:0000000000011620
.text:0000000000011620 ; void _libc_csu_fini(void)
.text:0000000000011620                 public __libc_csu_fini
.text:0000000000011620 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000011620 ; __unwind {
.text:0000000000011620                 rep retn
.text:0000000000011620 ; } // starts at 11620
.text:0000000000011620 __libc_csu_fini endp
.text:0000000000011620
.text:0000000000011620 ; ---------------------------------------------------------------------------
.text:0000000000011622                 align 10h
.text:0000000000011630
.text:0000000000011630 ; =============== S U B R O U T I N E =======================================
.text:0000000000011630
.text:0000000000011630
.text:0000000000011630 atexit          proc near               ; CODE XREF: main+80↑p
.text:0000000000011630 ; __unwind {
.text:0000000000011630                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000011637                 xor     esi, esi        ; obj
.text:0000000000011639                 jmp     ___cxa_atexit
.text:0000000000011639 ; } // starts at 11630
.text:0000000000011639 atexit          endp
.text:0000000000011639
.text:0000000000011639 _text           ends
.text:0000000000011639
LOAD:000000000001163E ; ===========================================================================
LOAD:000000000001163E
LOAD:000000000001163E ; Segment type: Pure code
LOAD:000000000001163E ; Segment permissions: Read/Execute
LOAD:000000000001163E LOAD            segment byte public 'CODE' use64
LOAD:000000000001163E                 assume cs:LOAD
LOAD:000000000001163E                 ;org 1163Eh
LOAD:000000000001163E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001163E                 align 20h
LOAD:000000000001163E LOAD            ends
LOAD:000000000001163E
.fini:0000000000011640 ; ===========================================================================
.fini:0000000000011640
.fini:0000000000011640 ; Segment type: Pure code
.fini:0000000000011640 ; Segment permissions: Read/Execute
.fini:0000000000011640 _fini           segment dword public 'CODE' use64
.fini:0000000000011640                 assume cs:_fini
.fini:0000000000011640                 ;org 11640h
.fini:0000000000011640                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000011640
.fini:0000000000011640 ; =============== S U B R O U T I N E =======================================
.fini:0000000000011640
.fini:0000000000011640
.fini:0000000000011640                 public _term_proc
.fini:0000000000011640 _term_proc      proc near
.fini:0000000000011640                 sub     rsp, 8          ; _fini
.fini:0000000000011644                 add     rsp, 8
.fini:0000000000011648                 retn
.fini:0000000000011648 _term_proc      endp
.fini:0000000000011648
.fini:0000000000011648 _fini           ends
.fini:0000000000011648
LOAD:0000000000011649 ; ===========================================================================
LOAD:0000000000011649
LOAD:0000000000011649 ; Segment type: Pure code
LOAD:0000000000011649 ; Segment permissions: Read/Execute
LOAD:0000000000011649 LOAD            segment byte public 'CODE' use64
LOAD:0000000000011649                 assume cs:LOAD
LOAD:0000000000011649                 ;org 11649h
LOAD:0000000000011649                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000011649                 align 20h
LOAD:0000000000011649 LOAD            ends
LOAD:0000000000011649
.rodata:0000000000011660 ; ===========================================================================
.rodata:0000000000011660
.rodata:0000000000011660 ; Segment type: Pure data
.rodata:0000000000011660 ; Segment permissions: Read
.rodata:0000000000011660 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000011660                 assume cs:_rodata
.rodata:0000000000011660                 ;org 11660h
.rodata:0000000000011660                 public _IO_stdin_used
.rodata:0000000000011660 _IO_stdin_used  db    1
.rodata:0000000000011661                 db    0
.rodata:0000000000011662                 db    2
.rodata:0000000000011663                 db    0
.rodata:0000000000011664 ; const char aTimeSIsOutOfRa[]
.rodata:0000000000011664 aTimeSIsOutOfRa db 'time %s is out of range',0
.rodata:0000000000011664                                         ; DATA XREF: show_date+C6↑o
.rodata:000000000001167C asc_1167C       db '[',0                ; DATA XREF: usage+449↑o
.rodata:000000000001167E aTestInvocation db 'test invocation',0  ; DATA XREF: usage+470↑o
.rodata:000000000001168E aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000001168E                                         ; DATA XREF: usage+4A0↑o
.rodata:000000000001168E                                         ; usage+59C↑o ...
.rodata:00000000000116A4 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+4B1↑o
.rodata:00000000000116AE aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+4BD↑o
.rodata:00000000000116BD aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+450↑o
.rodata:00000000000116C7 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+47C↑o
.rodata:00000000000116D1 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+494↑o
.rodata:00000000000116DB ; const char aSOnlineHelpS[]
.rodata:00000000000116DB aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+50A↑o
.rodata:00000000000116DB                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000116F2 unk_116F2       db  47h ; G             ; DATA XREF: main+188↑o
.rodata:00000000000116F2                                         ; usage+526↑o ...
.rodata:00000000000116F3                 db  4Eh ; N
.rodata:00000000000116F4                 db  55h ; U
.rodata:00000000000116F5                 db  20h
.rodata:00000000000116F6 ; const char domainname[]
.rodata:00000000000116F6 domainname      db 'coreutils',0        ; DATA XREF: main+61↑o
.rodata:00000000000116F6                                         ; main+6D↑o ...
.rodata:0000000000011700 ; const char s2[]
.rodata:0000000000011700 s2              db 'en_',0              ; DATA XREF: usage+54D↑o
.rodata:0000000000011700                                         ; usage+60E↑o
.rodata:0000000000011704 ; const char aFullDocumentat[]
.rodata:0000000000011704 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000011704                                         ; DATA XREF: usage:loc_3BA9↑o
.rodata:0000000000011704                                         ; usage:loc_3C66↑o
.rodata:000000000001171F aABEHMSZY       db '%a %b %e %H:%M:%S %Z %Y',0
.rodata:000000000001171F                                         ; DATA XREF: main+61D↑o
.rodata:0000000000011737 ; const char dirname[]
.rodata:0000000000011737 dirname         db '/usr/local/share/locale',0
.rodata:0000000000011737                                         ; DATA XREF: main+5A↑o
.rodata:000000000001174F aRfc3339        db '--rfc-3339',0       ; DATA XREF: main+27C↑o
.rodata:000000000001174F                                         ; .data.rel.ro:0000000000217100↓o
.rodata:000000000001175A aIso8601        db '--iso-8601',0       ; DATA XREF: main+23C↑o
.rodata:000000000001175A                                         ; .data.rel.ro:0000000000217060↓o
.rodata:0000000000011765 ; const char string[]
.rodata:0000000000011765 string          db 'TZ=UTC0',0          ; DATA XREF: main:loc_2DB0↑o
.rodata:0000000000011765                                         ; parse_datetime2+798↑o ...
.rodata:000000000001176D aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+181↑o
.rodata:000000000001177D ; const char aExtraOperandS[]
.rodata:000000000001177D aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+6D4↑o
.rodata:000000000001178E ; const char name[]
.rodata:000000000001178E name            db 'TZ',0               ; DATA XREF: main:loc_2EED↑o
.rodata:000000000001178E                                         ; parse_datetime+E↑o ...
.rodata:0000000000011791 ; const char aStandardInput[]
.rodata:0000000000011791 aStandardInput  db 'standard input',0   ; DATA XREF: main+3EC↑o
.rodata:00000000000117A0 ; const char aInvalidDateS[]
.rodata:00000000000117A0 aInvalidDateS   db 'invalid date %s',0  ; DATA XREF: main+4AA↑o
.rodata:00000000000117A0                                         ; main+67E↑o
.rodata:00000000000117B0 ; const char msgid[11]
.rodata:00000000000117B0 msgid           db 'cannot set '        ; DATA XREF: main+3A8↑o
.rodata:00000000000117BB aDate           db 'date',0             ; DATA XREF: main+18F↑o
.rodata:00000000000117BB                                         ; usage+43D↑o ...
.rodata:00000000000117C0 aDebug          db 'debug',0            ; DATA XREF: .data.rel.ro:0000000000217020↓o
.rodata:00000000000117C6 aFile           db 'file',0             ; DATA XREF: .data.rel.ro:0000000000217040↓o
.rodata:00000000000117CB aReference      db 'reference',0        ; DATA XREF: .data.rel.ro:0000000000217080↓o
.rodata:00000000000117D5 aRfcEmail       db 'rfc-email',0        ; DATA XREF: .data.rel.ro:00000000002170A0↓o
.rodata:00000000000117DF aRfc822         db 'rfc-822',0          ; DATA XREF: .data.rel.ro:00000000002170C0↓o
.rodata:00000000000117E7 aRfc2822        db 'rfc-2822',0         ; DATA XREF: .data.rel.ro:00000000002170E0↓o
.rodata:00000000000117F0 aSet            db 'set',0              ; DATA XREF: .data.rel.ro:0000000000217120↓o
.rodata:00000000000117F4 aUct            db 'uct',0              ; DATA XREF: .data.rel.ro:0000000000217140↓o
.rodata:00000000000117F8 aUtc            db 'utc',0              ; DATA XREF: .data.rel.ro:0000000000217160↓o
.rodata:00000000000117F8                                         ; .data.rel.ro:0000000000217B68↓o
.rodata:00000000000117FC aUniversal      db 'universal',0        ; DATA XREF: .data.rel.ro:0000000000217180↓o
.rodata:0000000000011806 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:00000000002171A0↓o
.rodata:000000000001180B aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:00000000002171C0↓o
.rodata:0000000000011813 aHours          db 'hours',0            ; DATA XREF: .data.rel.ro:time_spec_string↓o
.rodata:0000000000011819 aMinutes        db 'minutes',0          ; DATA XREF: debug_print_relative_time_part_11:loc_665E↑o
.rodata:0000000000011819                                         ; .data.rel.ro:0000000000217208↓o
.rodata:0000000000011821 off_11821       dd offset unk_736E      ; DATA XREF: .data.rel.ro:0000000000217220↓o
.rodata:0000000000011825                 align 8
.rodata:0000000000011828 ; const char aTrySHelpForMor[]
.rodata:0000000000011828 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000011828                                         ; DATA XREF: usage+2F↑o
.rodata:000000000001184F                 align 10h
.rodata:0000000000011850 ; const char aUsageSOptionFo[]
.rodata:0000000000011850 aUsageSOptionFo db 'Usage: %s [OPTION]... [+FORMAT]',0Ah
.rodata:0000000000011850                                         ; DATA XREF: usage:loc_369D↑o
.rodata:0000000000011850                 db '  or:  %s [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]',0Ah,0
.rodata:00000000000118AA                 align 10h
.rodata:00000000000118B0 ; const char aDisplayTheCurr[]
.rodata:00000000000118B0 aDisplayTheCurr db 'Display the current time in the given FORMAT, or set the system d'
.rodata:00000000000118B0                                         ; DATA XREF: usage+87↑o
.rodata:00000000000118B0                 db 'ate.',0Ah,0
.rodata:00000000000118F7                 align 8
.rodata:00000000000118F8 ; const char aMandatoryArgum[]
.rodata:00000000000118F8 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AC↑o
.rodata:00000000000118F8                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:00000000000118F8                 db 'ns too.',0Ah,0
.rodata:0000000000011943                 align 8
.rodata:0000000000011948 ; const char aDDateStringDis[]
.rodata:0000000000011948 aDDateStringDis db '  -d, --date=STRING          display time described by STRING, no'
.rodata:0000000000011948                                         ; DATA XREF: usage+D1↑o
.rodata:0000000000011948                 db 't ',27h,'now',27h,0Ah,0
.rodata:0000000000011992                 align 8
.rodata:0000000000011998 ; const char aDebugAnnotateT[]
.rodata:0000000000011998 aDebugAnnotateT db '      --debug                annotate the parsed date,',0Ah
.rodata:0000000000011998                                         ; DATA XREF: usage+F6↑o
.rodata:0000000000011998                 db '                              and warn about questionable usage t'
.rodata:0000000000011998                 db 'o stderr',0Ah,0
.rodata:0000000000011A1A                 align 20h
.rodata:0000000000011A20 ; const char aFFileDatefileL[]
.rodata:0000000000011A20 aFFileDatefileL db '  -f, --file=DATEFILE        like --date; once for each line of D'
.rodata:0000000000011A20                                         ; DATA XREF: usage+11B↑o
.rodata:0000000000011A20                 db 'ATEFILE',0Ah,0
.rodata:0000000000011A6A                 align 10h
.rodata:0000000000011A70 ; const char aIFmtIso8601Fmt[]
.rodata:0000000000011A70 aIFmtIso8601Fmt db '  -I[FMT], --iso-8601[=FMT]  output date/time in ISO 8601 format.'
.rodata:0000000000011A70                                         ; DATA XREF: usage+140↑o
.rodata:0000000000011A70                 db 0Ah
.rodata:0000000000011A70                 db '                               FMT=',27h,'date',27h,' for date on'
.rodata:0000000000011A70                 db 'ly (the default),',0Ah
.rodata:0000000000011A70                 db '                               ',27h,'hours',27h,', ',27h,'minute'
.rodata:0000000000011A70                 db 's',27h,', ',27h,'seconds',27h,', or ',27h,'ns',27h,0Ah
.rodata:0000000000011A70                 db '                               for date and time to the indicated'
.rodata:0000000000011A70                 db ' precision.',0Ah
.rodata:0000000000011A70                 db '                               Example: 2006-08-14T02:34:56-06:00'
.rodata:0000000000011A70                 db 0Ah,0
.rodata:0000000000011BCF                 align 10h
.rodata:0000000000011BD0 ; const char aRRfcEmailOutpu[]
.rodata:0000000000011BD0 aRRfcEmailOutpu db '  -R, --rfc-email            output date and time in RFC 5322 for'
.rodata:0000000000011BD0                                         ; DATA XREF: usage+165↑o
.rodata:0000000000011BD0                 db 'mat.',0Ah
.rodata:0000000000011BD0                 db '                               Example: Mon, 14 Aug 2006 02:34:56'
.rodata:0000000000011BD0                 db ' -0600',0Ah,0
.rodata:0000000000011C5F                 align 20h
.rodata:0000000000011C60 ; const char aRfc3339FmtOutp[]
.rodata:0000000000011C60 aRfc3339FmtOutp db '      --rfc-3339=FMT         output date/time in RFC 3339 format.'
.rodata:0000000000011C60                                         ; DATA XREF: usage+18A↑o
.rodata:0000000000011C60                 db 0Ah
.rodata:0000000000011C60                 db '                               FMT=',27h,'date',27h,', ',27h,'sec'
.rodata:0000000000011C60                 db 'onds',27h,', or ',27h,'ns',27h,0Ah
.rodata:0000000000011C60                 db '                               for date and time to the indicated'
.rodata:0000000000011C60                 db ' precision.',0Ah
.rodata:0000000000011C60                 db '                               Example: 2006-08-14 02:34:56-06:00'
.rodata:0000000000011C60                 db 0Ah,0
.rodata:0000000000011D70 ; const char aRReferenceFile[]
.rodata:0000000000011D70 aRReferenceFile db '  -r, --reference=FILE       display the last modification time o'
.rodata:0000000000011D70                                         ; DATA XREF: usage+1AF↑o
.rodata:0000000000011D70                 db 'f FILE',0Ah,0
.rodata:0000000000011DB9                 align 20h
.rodata:0000000000011DC0 ; const char aSSetStringSetT[]
.rodata:0000000000011DC0 aSSetStringSetT db '  -s, --set=STRING           set time described by STRING',0Ah
.rodata:0000000000011DC0                                         ; DATA XREF: usage+1D4↑o
.rodata:0000000000011DC0                 db '  -u, --utc, --universal     print or set Coordinated Universal T'
.rodata:0000000000011DC0                 db 'ime (UTC)',0Ah,0
.rodata:0000000000011E46                 align 8
.rodata:0000000000011E48 ; const char aHelpDisplayThi[]
.rodata:0000000000011E48 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000011E48                                         ; DATA XREF: usage+1F9↑o
.rodata:0000000000011E75                 align 8
.rodata:0000000000011E78 ; const char aVersionOutputV[]
.rodata:0000000000011E78 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000011E78                                         ; DATA XREF: usage+21E↑o
.rodata:0000000000011EAE                 align 10h
.rodata:0000000000011EB0 ; const char aFormatControls[]
.rodata:0000000000011EB0 aFormatControls db 0Ah                  ; DATA XREF: usage+243↑o
.rodata:0000000000011EB0                 db 'FORMAT controls the output.  Interpreted sequences are:',0Ah
.rodata:0000000000011EB0                 db 0Ah
.rodata:0000000000011EB0                 db '  %%   a literal %',0Ah
.rodata:0000000000011EB0                 db '  %a   locale',27h,'s abbreviated weekday name (e.g., Sun)',0Ah,0
.rodata:0000000000011F33                 align 8
.rodata:0000000000011F38 ; const char aALocaleSFullWe[]
.rodata:0000000000011F38 aALocaleSFullWe db '  %A   locale',27h,'s full weekday name (e.g., Sunday)',0Ah
.rodata:0000000000011F38                                         ; DATA XREF: usage+268↑o
.rodata:0000000000011F38                 db '  %b   locale',27h,'s abbreviated month name (e.g., Jan)',0Ah
.rodata:0000000000011F38                 db '  %B   locale',27h,'s full month name (e.g., January)',0Ah
.rodata:0000000000011F38                 db '  %c   locale',27h,'s date and time (e.g., Thu Mar  3 23:05:25 20'
.rodata:0000000000011F38                 db '05)',0Ah,0
.rodata:000000000001200C                 align 10h
.rodata:0000000000012010 ; const char aCCenturyLikeYE[]
.rodata:0000000000012010 aCCenturyLikeYE db '  %C   century; like %Y, except omit last two digits (e.g., 20)',0Ah
.rodata:0000000000012010                                         ; DATA XREF: usage+28D↑o
.rodata:0000000000012010                 db '  %d   day of month (e.g., 01)',0Ah
.rodata:0000000000012010                 db '  %D   date; same as %m/%d/%y',0Ah
.rodata:0000000000012010                 db '  %e   day of month, space padded; same as %_d',0Ah,0
.rodata:00000000000120BD                 align 20h
.rodata:00000000000120C0 ; const char aFFullDateLike4[]
.rodata:00000000000120C0 aFFullDateLike4 db '  %F   full date; like %+4Y-%m-%d',0Ah
.rodata:00000000000120C0                                         ; DATA XREF: usage+2B2↑o
.rodata:00000000000120C0                 db '  %g   last two digits of year of ISO week number (see %G)',0Ah
.rodata:00000000000120C0                 db '  %G   year of ISO week number (see %V); normally useful only wit'
.rodata:00000000000120C0                 db 'h %V',0Ah,0
.rodata:0000000000012164                 align 8
.rodata:0000000000012168 ; const char aHSameAsBHHour0[]
.rodata:0000000000012168 aHSameAsBHHour0 db '  %h   same as %b',0Ah
.rodata:0000000000012168                                         ; DATA XREF: usage+2D7↑o
.rodata:0000000000012168                 db '  %H   hour (00..23)',0Ah
.rodata:0000000000012168                 db '  %I   hour (01..12)',0Ah
.rodata:0000000000012168                 db '  %j   day of year (001..366)',0Ah,0
.rodata:00000000000121C3                 align 8
.rodata:00000000000121C8 ; const char aKHourSpacePadd[]
.rodata:00000000000121C8 aKHourSpacePadd db '  %k   hour, space padded ( 0..23); same as %_H',0Ah
.rodata:00000000000121C8                                         ; DATA XREF: usage+2FC↑o
.rodata:00000000000121C8                 db '  %l   hour, space padded ( 1..12); same as %_I',0Ah
.rodata:00000000000121C8                 db '  %m   month (01..12)',0Ah
.rodata:00000000000121C8                 db '  %M   minute (00..59)',0Ah,0
.rodata:0000000000012256                 align 8
.rodata:0000000000012258 ; const char aNANewlineNNano[]
.rodata:0000000000012258 aNANewlineNNano db '  %n   a newline',0Ah
.rodata:0000000000012258                                         ; DATA XREF: usage+321↑o
.rodata:0000000000012258                 db '  %N   nanoseconds (000000000..999999999)',0Ah
.rodata:0000000000012258                 db '  %p   locale',27h,'s equivalent of either AM or PM; blank if not'
.rodata:0000000000012258                 db ' known',0Ah
.rodata:0000000000012258                 db '  %P   like %p, but lower case',0Ah
.rodata:0000000000012258                 db '  %q   quarter of year (1..4)',0Ah
.rodata:0000000000012258                 db '  %r   locale',27h,'s 12-hour clock time (e.g., 11:11:04 PM)',0Ah
.rodata:0000000000012258                 db '  %R   24-hour hour and minute; same as %H:%M',0Ah
.rodata:0000000000012258                 db '  %s   seconds since 1970-01-01 00:00:00 UTC',0Ah,0
.rodata:00000000000123A5                 align 8
.rodata:00000000000123A8 ; const char aSSecond0060TAT[]
.rodata:00000000000123A8 aSSecond0060TAT db '  %S   second (00..60)',0Ah
.rodata:00000000000123A8                                         ; DATA XREF: usage+346↑o
.rodata:00000000000123A8                 db '  %t   a tab',0Ah
.rodata:00000000000123A8                 db '  %T   time; same as %H:%M:%S',0Ah
.rodata:00000000000123A8                 db '  %u   day of week (1..7); 1 is Monday',0Ah,0
.rodata:0000000000012412                 align 8
.rodata:0000000000012418 ; const char aUWeekNumberOfY[]
.rodata:0000000000012418 aUWeekNumberOfY db '  %U   week number of year, with Sunday as first day of week (00.'
.rodata:0000000000012418                                         ; DATA XREF: usage+36B↑o
.rodata:0000000000012418                 db '.53)',0Ah
.rodata:0000000000012418                 db '  %V   ISO week number, with Monday as first day of week (01..53)'
.rodata:0000000000012418                 db 0Ah
.rodata:0000000000012418                 db '  %w   day of week (0..6); 0 is Sunday',0Ah
.rodata:0000000000012418                 db '  %W   week number of year, with Monday as first day of week (00.'
.rodata:0000000000012418                 db '.53)',0Ah,0
.rodata:000000000001250E                 align 10h
.rodata:0000000000012510 ; const char aXLocaleSDateRe[]
.rodata:0000000000012510 aXLocaleSDateRe db '  %x   locale',27h,'s date representation (e.g., 12/31/99)',0Ah
.rodata:0000000000012510                                         ; DATA XREF: usage+390↑o
.rodata:0000000000012510                 db '  %X   locale',27h,'s time representation (e.g., 23:13:48)',0Ah
.rodata:0000000000012510                 db '  %y   last two digits of year (00..99)',0Ah
.rodata:0000000000012510                 db '  %Y   year',0Ah,0
.rodata:00000000000125AF                 align 10h
.rodata:00000000000125B0 ; const char aZHhmmNumericTi[]
.rodata:00000000000125B0 aZHhmmNumericTi db '  %z   +hhmm numeric time zone (e.g., -0400)',0Ah
.rodata:00000000000125B0                                         ; DATA XREF: usage+3B5↑o
.rodata:00000000000125B0                 db '  %:z  +hh:mm numeric time zone (e.g., -04:00)',0Ah
.rodata:00000000000125B0                 db '  %::z  +hh:mm:ss numeric time zone (e.g., -04:00:00)',0Ah
.rodata:00000000000125B0                 db '  %:::z  numeric time zone with : to necessary precision (e.g., -'
.rodata:00000000000125B0                 db '04, +05:30)',0Ah
.rodata:00000000000125B0                 db '  %Z   alphabetic time zone abbreviation (e.g., EDT)',0Ah
.rodata:00000000000125B0                 db 0Ah
.rodata:00000000000125B0                 db 'By default, date pads numeric fields with zeroes.',0Ah,0
.rodata:00000000000126F8 ; const char aTheFollowingOp[]
.rodata:00000000000126F8 aTheFollowingOp db 'The following optional flags may follow ',27h,'%',27h,':',0Ah
.rodata:00000000000126F8                                         ; DATA XREF: usage+3DA↑o
.rodata:00000000000126F8                 db 0Ah
.rodata:00000000000126F8                 db '  -  (hyphen) do not pad the field',0Ah
.rodata:00000000000126F8                 db '  _  (underscore) pad with spaces',0Ah
.rodata:00000000000126F8                 db '  0  (zero) pad with zeros',0Ah
.rodata:00000000000126F8                 db '  +  pad with zeros, and put ',27h,'+',27h,' before future years '
.rodata:00000000000126F8                 db 'with >4 digits',0Ah
.rodata:00000000000126F8                 db '  ^  use upper case if possible',0Ah
.rodata:00000000000126F8                 db '  #  use opposite case if possible',0Ah,0
.rodata:000000000001280E                 align 10h
.rodata:0000000000012810 ; const char aAfterAnyFlagsC[]
.rodata:0000000000012810 aAfterAnyFlagsC db 0Ah                  ; DATA XREF: usage+3FF↑o
.rodata:0000000000012810                 db 'After any flags comes an optional field width, as a decimal numbe'
.rodata:0000000000012810                 db 'r;',0Ah
.rodata:0000000000012810                 db 'then an optional modifier, which is either',0Ah
.rodata:0000000000012810                 db 'E to use the locale',27h,'s alternate representations if availabl'
.rodata:0000000000012810                 db 'e, or',0Ah
.rodata:0000000000012810                 db 'O to use the locale',27h,'s alternate numeric symbols if availabl'
.rodata:0000000000012810                 db 'e.',0Ah,0
.rodata:0000000000012900 ; const char aExamplesConver[]
.rodata:0000000000012900 aExamplesConver db 0Ah                  ; DATA XREF: usage+424↑o
.rodata:0000000000012900                 db 'Examples:',0Ah
.rodata:0000000000012900                 db 'Convert seconds since the epoch (1970-01-01 UTC) to a date',0Ah
.rodata:0000000000012900                 db '  $ date --date=',27h,'@2147483647',27h,0Ah
.rodata:0000000000012900                 db 0Ah
.rodata:0000000000012900                 db 'Show the time on the west coast of the US (use tzselect(1) to fin'
.rodata:0000000000012900                 db 'd TZ)',0Ah
.rodata:0000000000012900                 db '  $ TZ=',27h,'America/Los_Angeles',27h,' date',0Ah
.rodata:0000000000012900                 db 0Ah
.rodata:0000000000012900                 db 'Show the local time for 9AM next Friday on the west coast of the '
.rodata:0000000000012900                 db 'US',0Ah
.rodata:0000000000012900                 db '  $ date --date=',27h,'TZ="America/Los_Angeles" 09:00 next Fri',27h
.rodata:0000000000012900                 db 0Ah,0
.rodata:0000000000012A4E                 align 10h
.rodata:0000000000012A50 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000012A50                                         ; DATA XREF: usage+51F↑o
.rodata:0000000000012A50                                         ; usage+583↑o ...
.rodata:0000000000012A78 ; const char aReportAnyTrans[]
.rodata:0000000000012A78 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000012A78                                         ; DATA XREF: usage+677↑o
.rodata:0000000000012A78                 db 'am/>',0Ah,0
.rodata:0000000000012ABF                 align 20h
.rodata:0000000000012AC0 ; const char aOrAvailableLoc[]
.rodata:0000000000012AC0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000012AC0                                         ; DATA XREF: usage:loc_3BEE↑o
.rodata:0000000000012AF3                 align 8
.rodata:0000000000012AF8 ; const char aMultipleOutput[]
.rodata:0000000000012AF8 aMultipleOutput db 'multiple output formats specified',0
.rodata:0000000000012AF8                                         ; DATA XREF: main:loc_32D5↑o
.rodata:0000000000012AF8                                         ; main:loc_32F9↑o
.rodata:0000000000012B1A                 align 20h
.rodata:0000000000012B20 aTheOptionsToSp db 'the options to specify dates for printing are mutually exclusive',0
.rodata:0000000000012B20                                         ; DATA XREF: main+7C4↑o
.rodata:0000000000012B61                 align 8
.rodata:0000000000012B68 ; const char aTheOptionsToPr[]
.rodata:0000000000012B68 aTheOptionsToPr db 'the options to print and set the time may not be used together',0
.rodata:0000000000012B68                                         ; DATA XREF: main:loc_3369↑o
.rodata:0000000000012BA7                 align 8
.rodata:0000000000012BA8 aTheArgumentSLa db 'the argument %s lacks a leading ',27h,'+',27h,';',0Ah
.rodata:0000000000012BA8                                         ; DATA XREF: main+75A↑o
.rodata:0000000000012BA8                 db 'when using an option to specify date(s), any non-option',0Ah
.rodata:0000000000012BA8                 db 'argument must be a format string beginning with ',27h,'+',27h,0
.rodata:0000000000012C39                 align 20h
.rodata:0000000000012C40 iso_8601_format_7386 db '%Y-%m-%d',0    ; DATA XREF: main+1E↑o
.rodata:0000000000012C49                 align 20h
.rodata:0000000000012C60 aYMDtHMSZ       db '%Y-%m-%dT%H:%M:%S%:z',0
.rodata:0000000000012C75                 align 20h
.rodata:0000000000012C80 aYMDtHMSNZ      db '%Y-%m-%dT%H:%M:%S,%N%:z',0
.rodata:0000000000012C98                 align 20h
.rodata:0000000000012CA0 aYMDtHZ         db '%Y-%m-%dT%H%:z',0
.rodata:0000000000012CAF                 align 20h
.rodata:0000000000012CC0 aYMDtHMZ        db '%Y-%m-%dT%H:%M%:z',0
.rodata:0000000000012CD2                 align 20h
.rodata:0000000000012CE0 rfc_3339_format_7383 db '%Y-%m-%d',0    ; DATA XREF: main+17↑o
.rodata:0000000000012CE9                 align 20h
.rodata:0000000000012D00 aYMDHMSZ        db '%Y-%m-%d %H:%M:%S%:z',0
.rodata:0000000000012D15                 align 20h
.rodata:0000000000012D20 aYMDHMSNZ       db '%Y-%m-%d %H:%M:%S.%N%:z',0
.rodata:0000000000012D38                 align 20h
.rodata:0000000000012D40 ; const char short_options[]
.rodata:0000000000012D40 short_options   db 'd:f:I::r:Rs:u',0    ; DATA XREF: main+B7↑o
.rodata:0000000000012D4E                 align 10h
.rodata:0000000000012D50 rfc_email_format db '%a, %d %b %Y %H:%M:%S %z',0
.rodata:0000000000012D50                                         ; DATA XREF: main:loc_2DD0↑o
.rodata:0000000000012D50                                         ; show_date+3F↑o
.rodata:0000000000012D69                 align 10h
.rodata:0000000000012D70 time_spec       db    3                 ; DATA XREF: main+10↑o
.rodata:0000000000012D71                 db    0
.rodata:0000000000012D72                 db    0
.rodata:0000000000012D73                 db    0
.rodata:0000000000012D74                 db    4
.rodata:0000000000012D75                 db    0
.rodata:0000000000012D76                 db    0
.rodata:0000000000012D77                 db    0
.rodata:0000000000012D78 unk_12D78       db    0                 ; DATA XREF: main+26E↑o
.rodata:0000000000012D79                 db    0
.rodata:0000000000012D7A                 db    0
.rodata:0000000000012D7B                 db    0
.rodata:0000000000012D7C                 db    1
.rodata:0000000000012D7D                 db    0
.rodata:0000000000012D7E                 db    0
.rodata:0000000000012D7F                 db    0
.rodata:0000000000012D80                 db    2
.rodata:0000000000012D81                 db    0
.rodata:0000000000012D82                 db    0
.rodata:0000000000012D83                 db    0
.rodata:0000000000012D84 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000012D89 ; const char aInvalidArgumen[]
.rodata:0000000000012D89 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:0000000000012D89                                         ; DATA XREF: argmatch_invalid:loc_3E70↑o
.rodata:0000000000012DA4 ; const char aAmbiguousArgum[]
.rodata:0000000000012DA4 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:0000000000012DA4                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:0000000000012DC1 ; const char aValidArguments[]
.rodata:0000000000012DC1 aValidArguments db 'Valid arguments are:',0
.rodata:0000000000012DC1                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:0000000000012DD6 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:0000000000012DD6                 db '  - %s',0
.rodata:0000000000012DDE aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:0000000000012DDE                                         ; str_days_constprop_13+8C↑o ...
.rodata:0000000000012DE3 ; const char aWriteError[]
.rodata:0000000000012DE3 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_40D3↑o
.rodata:0000000000012DEF ; const char format[]
.rodata:0000000000012DEF format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000012DF6 aHM             db '%H:%M',0            ; DATA XREF: __strftime_internal:loc_485D↑o
.rodata:0000000000012DF6                                         ; __strftime_internal_0:loc_E0DE↑o ...
.rodata:0000000000012DFC aYMD            db '%Y-%m-%d',0         ; DATA XREF: __strftime_internal+DAE↑o
.rodata:0000000000012DFC                                         ; __strftime_internal+1AFF↑o ...
.rodata:0000000000012E05 aMDY            db '%m/%d/%y',0         ; DATA XREF: __strftime_internal+D77↑o
.rodata:0000000000012E05                                         ; __strftime_internal_0+119E↑o
.rodata:0000000000012E0E                 align 10h
.rodata:0000000000012E10 jpt_43C3        dd offset loc_4FCD - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                                         ; DATA XREF: __strftime_internal+1B1↑o
.rodata:0000000000012E10                                         ; __strftime_internal+1BC↑r
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h ; jump table for switch statement
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset loc_5031 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset loc_50B1 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset loc_46D0 - 12E10h
.rodata:0000000000012E10                 dd offset loc_5014 - 12E10h, offset loc_4EF7 - 12E10h
.rodata:0000000000012E10                 dd offset loc_4F6E - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset loc_4F8E - 12E10h, offset loc_4CD6 - 12E10h
.rodata:0000000000012E10                 dd offset loc_4E54 - 12E10h, offset loc_4EDF - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset loc_4E6F - 12E10h
.rodata:0000000000012E10                 dd offset loc_4E8A - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset loc_4841 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset loc_485D - 12E10h, offset loc_48EA - 12E10h
.rodata:0000000000012E10                 dd offset loc_4C8A - 12E10h, offset loc_4CA1 - 12E10h
.rodata:0000000000012E10                 dd offset loc_4CD6 - 12E10h, offset loc_51A8 - 12E10h
.rodata:0000000000012E10                 dd offset loc_45A0 - 12E10h, offset loc_51F5 - 12E10h
.rodata:0000000000012E10                 dd offset loc_5253 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset loc_46D0 - 12E10h
.rodata:0000000000012E10                 dd offset loc_54CB - 12E10h, offset loc_45A0 - 12E10h
.rodata:0000000000012E10                 dd offset loc_5372 - 12E10h, offset loc_538D - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset loc_4CD6 - 12E10h
.rodata:0000000000012E10                 dd offset loc_54CB - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset loc_53BE - 12E10h, offset loc_53EF - 12E10h
.rodata:0000000000012E10                 dd offset loc_5402 - 12E10h, offset loc_5412 - 12E10h
.rodata:0000000000012E10                 dd offset loc_5443 - 12E10h, offset def_43C3 - 12E10h
.rodata:0000000000012E10                 dd offset loc_54C4 - 12E10h, offset loc_4AB6 - 12E10h
.rodata:0000000000012E10                 dd offset loc_45AA - 12E10h, offset loc_4904 - 12E10h
.rodata:0000000000012E10                 dd offset loc_4710 - 12E10h, offset loc_4791 - 12E10h
.rodata:0000000000012E10                 dd offset def_43C3 - 12E10h, offset loc_4829 - 12E10h
.rodata:0000000000012E10                 dd offset loc_45A0 - 12E10h, offset loc_532A - 12E10h
.rodata:0000000000012E10                 dd offset loc_54F0 - 12E10h
.rodata:0000000000012FFC aC02d           db '%c%02d',0           ; DATA XREF: time_zone_str+2D↑o
.rodata:0000000000013003 a02d02d         db '-%02d%02d',0        ; DATA XREF: tm_year_str+2A↑o
.rodata:000000000001300D aDate_0         db 'date: ',0           ; DATA XREF: dbg_printf:loc_624F↑o
.rodata:0000000000013014 aLdS            db ' %+ld %s',0         ; DATA XREF: print_rel_part_part_2+6↑o
.rodata:000000000001301D aGmt            db 'GMT',0              ; DATA XREF: lookup_zone+A↑o
.rodata:000000000001301D                                         ; .data.rel.ro:universal_time_zone_table↓o
.rodata:0000000000013021 aWet            db 'WET',0              ; DATA XREF: lookup_zone+5F↑o
.rodata:0000000000013021                                         ; .data.rel.ro:time_zone_table↓o
.rodata:0000000000013025 ; const char aParsedSPart[]
.rodata:0000000000013025 aParsedSPart    db 'parsed %s part: ',0 ; DATA XREF: debug_print_relative_time_part_11+5↑o
.rodata:0000000000013025                                         ; debug_print_current_time_part_10+E↑o
.rodata:0000000000013036 ; const char aTodayThisNow[]
.rodata:0000000000013036 aTodayThisNow   db 'today/this/now',0Ah,0
.rodata:0000000000013036                                         ; DATA XREF: debug_print_relative_time_part_11+102↑o
.rodata:0000000000013046 aYearS          db 'year(s)',0          ; DATA XREF: debug_print_relative_time_part_11:loc_66B0↑o
.rodata:000000000001304E aMonthS         db 'month(s)',0         ; DATA XREF: debug_print_relative_time_part_11:loc_6534↑o
.rodata:0000000000013057 aDayS           db 'day(s)',0           ; DATA XREF: debug_print_relative_time_part_11:loc_6620↑o
.rodata:000000000001305E aHourS          db 'hour(s)',0          ; DATA XREF: debug_print_relative_time_part_11:loc_663F↑o
.rodata:0000000000013066 aNanoseconds    db 'nanoseconds',0      ; DATA XREF: debug_print_relative_time_part_11:loc_669C↑o
.rodata:0000000000013072 unk_13072       db  28h ; (             ; DATA XREF: debug_strfdatetime_constprop_12+A↑o
.rodata:0000000000013073                 db  59h ; Y
.rodata:0000000000013074                 db  2Dh ; -
.rodata:0000000000013075                 db  4Dh ; M
.rodata:0000000000013076                 db  2Dh ; -
.rodata:0000000000013077                 db  44h ; D
.rodata:0000000000013078                 db  29h ; )
.rodata:0000000000013079                 db  20h
.rodata:000000000001307A                 db  25h ; %
.rodata:000000000001307B                 db  59h ; Y
.rodata:000000000001307C                 db  2Dh ; -
.rodata:000000000001307D                 db  25h ; %
.rodata:000000000001307E                 db  6Dh ; m
.rodata:000000000001307F                 db  2Dh ; -
.rodata:0000000000013080                 db  25h ; %
.rodata:0000000000013081                 db  64h ; d
.rodata:0000000000013082                 db  20h
.rodata:0000000000013083 aHMS            db '%H:%M:%S',0         ; DATA XREF: __strftime_internal:loc_4C8A↑o
.rodata:0000000000013083                                         ; __strftime_internal_0:loc_E28B↑o ...
.rodata:000000000001308C aTzS            db ' TZ=%s',0           ; DATA XREF: debug_strfdatetime_constprop_12+85↑o
.rodata:0000000000013093 aDst            db ' DST',0             ; DATA XREF: debug_print_current_time_part_10+151↑o
.rodata:0000000000013093                                         ; yyparse+1993↑o ...
.rodata:0000000000013098 aUtcS           db ' UTC%s',0           ; DATA XREF: debug_print_current_time_part_10+345↑o
.rodata:0000000000013098                                         ; debug_print_current_time_part_10+356↑o
.rodata:000000000001309F aYMD04ld02ld02l db '(Y-M-D) %04ld-%02ld-%02ld',0
.rodata:000000000001309F                                         ; DATA XREF: debug_print_current_time_part_10+258↑o
.rodata:00000000000130B9 ; const char aYear04ld[]
.rodata:00000000000130B9 aYear04ld       db 'year: %04ld',0      ; DATA XREF: debug_print_current_time_part_10:loc_690A↑o
.rodata:00000000000130C5 a02ld02ld02ld   db ' %02ld:%02ld:%02ld',0
.rodata:00000000000130C5                                         ; DATA XREF: debug_print_current_time_part_10+2B7↑o
.rodata:00000000000130D8 a09d            db '.%09d',0            ; DATA XREF: debug_print_current_time_part_10+397↑o
.rodata:00000000000130DE aPm             db 'pm',0               ; DATA XREF: debug_print_current_time_part_10+3B7↑o
.rodata:00000000000130DE                                         ; parse_datetime2+1D0A↑o
.rodata:00000000000130E1 aIsdstDS        db ' isdst=%d%s',0      ; DATA XREF: debug_print_current_time_part_10+175↑o
.rodata:00000000000130ED ; const char aNumberOfSecond[]
.rodata:00000000000130ED aNumberOfSecond db 'number of seconds: %ld',0
.rodata:00000000000130ED                                         ; DATA XREF: debug_print_current_time_part_10:loc_6A88↑o
.rodata:0000000000013104 aAm             db 'AM',0               ; DATA XREF: yyparse+8E9↑o
.rodata:0000000000013104                                         ; .data.rel.ro:meridian_table↓o
.rodata:0000000000013107 ; const char aJanuary[]
.rodata:0000000000013107 aJanuary        db 'JANUARY',0          ; DATA XREF: yyparse+1901↑o
.rodata:0000000000013107                                         ; .data.rel.ro:month_and_day_table↓o
.rodata:000000000001310F ; const char aYear[]
.rodata:000000000001310F aYear           db 'YEAR',0             ; DATA XREF: yyparse+19C5↑o
.rodata:000000000001310F                                         ; yyparse+1AF8↑o ...
.rodata:0000000000013114 ; const char aTomorrow[]
.rodata:0000000000013114 aTomorrow       db 'TOMORROW',0         ; DATA XREF: yyparse+1A1B↑o
.rodata:0000000000013114                                         ; .data.rel.ro:relative_time_table↓o
.rodata:000000000001311D aA              db 'A',0                ; DATA XREF: yyparse+1BE3↑o
.rodata:000000000001311D                                         ; .data.rel.ro:military_table↓o
.rodata:000000000001311F ; const char aErrorUnknownWo[]
.rodata:000000000001311F aErrorUnknownWo db 'error: unknown word ',27h,'%s',27h,0Ah,0
.rodata:000000000001311F                                         ; DATA XREF: yyparse+1B98↑o
.rodata:0000000000013139 ; const char aNumberOf[10]
.rodata:0000000000013139 aNumberOf       db 'number of '         ; DATA XREF: yyparse+D51↑o
.rodata:0000000000013143 aSeconds        db 'seconds',0          ; DATA XREF: debug_print_relative_time_part_11:loc_667D↑o
.rodata:0000000000013143                                         ; .data.rel.ro:0000000000217218↓o
.rodata:000000000001314B unk_1314B       db  64h ; d             ; DATA XREF: yyparse+E00↑o
.rodata:000000000001314C                 db  61h ; a
.rodata:000000000001314D                 db  74h ; t
.rodata:000000000001314E                 db  65h ; e
.rodata:000000000001314F aTime           db 'time',0             ; DATA XREF: yyparse+DD8↑o
.rodata:0000000000013154 unk_13154       db  6Ch ; l             ; DATA XREF: yyparse+15D0↑o
.rodata:0000000000013155                 db  6Fh ; o
.rodata:0000000000013156                 db  63h ; c
.rodata:0000000000013157                 db  61h ; a
.rodata:0000000000013158                 db  6Ch ; l
.rodata:0000000000013159                 db  5Fh ; _
.rodata:000000000001315A aZone           db 'zone',0             ; DATA XREF: yyparse+15A8↑o
.rodata:000000000001315F aDay            db 'day',0              ; DATA XREF: yyparse+1558↑o
.rodata:0000000000013163 ; const char aRelative[]
.rodata:0000000000013163 aRelative       db 'relative',0         ; DATA XREF: yyparse+23E↑o
.rodata:0000000000013163                                         ; yyparse+1530↑o
.rodata:000000000001316C ; const char aNumber[]
.rodata:000000000001316C aNumber         db 'number',0           ; DATA XREF: yyparse:loc_8146↑o
.rodata:000000000001316C                                         ; main+5BC↑o
.rodata:0000000000013173 ; const char aHybrid[]
.rodata:0000000000013173 aHybrid         db 'hybrid',0           ; DATA XREF: yyparse:loc_80F0↑o
.rodata:000000000001317A aAm_0           db 'am',0               ; DATA XREF: parse_datetime2+1BC1↑o
.rodata:000000000001317D asc_1317D       db '----',0             ; DATA XREF: parse_datetime2+E54↑o
.rodata:000000000001317D                                         ; parse_datetime2+E48↑o ...
.rodata:0000000000013182 aTz             db 'TZ="',0             ; DATA XREF: parse_datetime2:loc_8939↑o
.rodata:0000000000013182                                         ; gettext_quote:loc_AAE0↑o ...
.rodata:0000000000013187 ; const char aErrorParsingFa[]
.rodata:0000000000013187 aErrorParsingFa db 'error: parsing failed',0Ah,0
.rodata:0000000000013187                                         ; DATA XREF: parse_datetime2+4B1↑o
.rodata:000000000001319E ; const char aInputTimezone[]
.rodata:000000000001319E aInputTimezone  db 'input timezone: ',0 ; DATA XREF: parse_datetime2:loc_8EB8↑o
.rodata:00000000000131AF aTimespecAlways db 27h,'@timespec',27h,' - always UTC',0
.rodata:00000000000131AF                                         ; DATA XREF: parse_datetime2+652↑o
.rodata:00000000000131C8 aParsedDateTime db 'parsed date/time string',0
.rodata:00000000000131C8                                         ; DATA XREF: parse_datetime2+669↑o
.rodata:00000000000131E0 ; const char aTzSInDateStrin[]
.rodata:00000000000131E0 aTzSInDateStrin db 'TZ="%s" in date string',0
.rodata:00000000000131E0                                         ; DATA XREF: parse_datetime2+686↑o
.rodata:00000000000131F7 ; const char aTzSEnvironment[]
.rodata:00000000000131F7 aTzSEnvironment db 'TZ="%s" environment value',0
.rodata:00000000000131F7                                         ; DATA XREF: parse_datetime2+B4B↑o
.rodata:0000000000013211 ; const char aSystemDefault[]
.rodata:0000000000013211 aSystemDefault  db 'system default',0   ; DATA XREF: parse_datetime2:loc_8F44↑o
.rodata:0000000000013220 aS_1            db ' (%s)',0            ; DATA XREF: parse_datetime2+A11↑o
.rodata:0000000000013226 aDst_0          db ', dst',0            ; DATA XREF: parse_datetime2+70D↑o
.rodata:000000000001322C ; const char aErrorOutOfRang[]
.rodata:000000000001322C aErrorOutOfRang db 'error: out-of-range year %ld',0Ah,0
.rodata:000000000001322C                                         ; DATA XREF: parse_datetime2+ACD↑o
.rodata:000000000001324A ; const char aErrorInvalidHo[]
.rodata:000000000001324A aErrorInvalidHo db 'error: invalid hour %ld%s',0Ah,0
.rodata:000000000001324A                                         ; DATA XREF: parse_datetime2+1B91↑o
.rodata:0000000000013265 a02d02d02d      db '%02d:%02d:%02d',0   ; DATA XREF: parse_datetime2+1850↑o
.rodata:0000000000013274 ; const char aErrorTzallocSF[]
.rodata:0000000000013274 aErrorTzallocSF db 'error: tzalloc ("%s") failed',0Ah,0
.rodata:0000000000013274                                         ; DATA XREF: parse_datetime2+1B55↑o
.rodata:0000000000013292 ; const char aUserProvidedTi[]
.rodata:0000000000013292 aUserProvidedTi db '    user provided time: ',27h,'%s',27h,0Ah,0
.rodata:0000000000013292                                         ; DATA XREF: parse_datetime2+DD1↑o
.rodata:0000000000013292                                         ; parse_datetime2+1920↑o
.rodata:00000000000132B0 ; const char aNormalizedTime[]
.rodata:00000000000132B0 aNormalizedTime db '       normalized time: ',27h,'%s',27h,0Ah,0
.rodata:00000000000132B0                                         ; DATA XREF: parse_datetime2+E04↑o
.rodata:00000000000132B0                                         ; parse_datetime2+1957↑o
.rodata:00000000000132CE ; const char aPossibleReason[]
.rodata:00000000000132CE aPossibleReason db '     possible reasons:',0Ah,0
.rodata:00000000000132CE                                         ; DATA XREF: parse_datetime2+EE4↑o
.rodata:00000000000132E6 ; const char aIncorrectTimez[]
.rodata:00000000000132E6 aIncorrectTimez db 'incorrect timezone',0
.rodata:00000000000132E6                                         ; DATA XREF: parse_datetime2+F7D↑o
.rodata:00000000000132F9 ; const char aMissingTimezon[]
.rodata:00000000000132F9 aMissingTimezon db 'missing timezone',0 ; DATA XREF: parse_datetime2:loc_A5E6↑o
.rodata:000000000001330A aS_2            db '       %s',0Ah,0    ; DATA XREF: parse_datetime2:loc_981B↑o
.rodata:000000000001330A                                         ; parse_datetime2+ECB↑o
.rodata:0000000000013315 ; const char aNewStartDateSI[]
.rodata:0000000000013315 aNewStartDateSI db 'new start date: ',27h,'%s',27h,' is ',27h,'%s',27h,0Ah,0
.rodata:0000000000013315                                         ; DATA XREF: parse_datetime2+1371↑o
.rodata:0000000000013333 aYMDS02d02d     db '(Y-M-D) %s-%02d-%02d',0
.rodata:0000000000013333                                         ; DATA XREF: parse_datetime2+1C4E↑o
.rodata:0000000000013348 ; const char aStartingDateTi[]
.rodata:0000000000013348 aStartingDateTi db 'starting date/time: ',27h,'%s',27h,0Ah,0
.rodata:0000000000013348                                         ; DATA XREF: parse_datetime2+13DD↑o
.rodata:0000000000013362 ; const char aErrorSD[]
.rodata:0000000000013362 aErrorSD        db 'error: %s:%d',0Ah,0 ; DATA XREF: parse_datetime2+14B0↑o
.rodata:0000000000013370 aParseDatetimeY db 'parse-datetime.y',0 ; DATA XREF: parse_datetime2+14C3↑o
.rodata:0000000000013381 ; const char aNewDateTimeS[]
.rodata:0000000000013381 aNewDateTimeS   db '    new date/time = ',27h,'%s',27h,0Ah,0
.rodata:0000000000013381                                         ; DATA XREF: parse_datetime2+16C0↑o
.rodata:000000000001339B ; const char aSLdEpochSecond[]
.rodata:000000000001339B aSLdEpochSecond db 27h,'%s',27h,' = %ld epoch-seconds',0Ah,0
.rodata:000000000001339B                                         ; DATA XREF: parse_datetime2+1BE9↑o
.rodata:00000000000133B5 aTimezoneSystem db 'timezone: system default',0Ah,0
.rodata:00000000000133B5                                         ; DATA XREF: parse_datetime2+780↑o
.rodata:00000000000133CF ; const char aTimezoneUniver[]
.rodata:00000000000133CF aTimezoneUniver db 'timezone: Universal Time',0Ah,0
.rodata:00000000000133CF                                         ; DATA XREF: parse_datetime2:loc_921B↑o
.rodata:00000000000133E9 ; const char aFinalSUtc[]
.rodata:00000000000133E9 aFinalSUtc      db 'final: %s (UTC)',0Ah,0
.rodata:00000000000133E9                                         ; DATA XREF: parse_datetime2+82D↑o
.rodata:00000000000133FA ; const char aFinalSUtcS[]
.rodata:00000000000133FA aFinalSUtcS     db 'final: %s (UTC%s)',0Ah,0
.rodata:00000000000133FA                                         ; DATA XREF: parse_datetime2+89A↑o
.rodata:000000000001340D aB              db 'B',0                ; DATA XREF: .data.rel.ro:0000000000217250↓o
.rodata:000000000001340F asc_1340F       db 'F',0                ; DATA XREF: .data.rel.ro:0000000000217290↓o
.rodata:0000000000013411 aG              db 'G',0                ; DATA XREF: .data.rel.ro:00000000002172A0↓o
.rodata:0000000000013413 aP              db 'P',0                ; DATA XREF: .data.rel.ro:0000000000217320↓o
.rodata:0000000000013415 aQ              db 'Q',0                ; DATA XREF: .data.rel.ro:0000000000217330↓o
.rodata:0000000000013417 aU              db 'U',0                ; DATA XREF: .data.rel.ro:0000000000217370↓o
.rodata:0000000000013419 aV              db 'V',0                ; DATA XREF: .data.rel.ro:0000000000217380↓o
.rodata:000000000001341B aWest           db 'WEST',0             ; DATA XREF: .data.rel.ro:00000000002173F0↓o
.rodata:0000000000013420 aBst            db 'BST',0              ; DATA XREF: .data.rel.ro:0000000000217400↓o
.rodata:0000000000013424 aArt            db 'ART',0              ; DATA XREF: .data.rel.ro:0000000000217410↓o
.rodata:0000000000013428 aBrt            db 'BRT',0              ; DATA XREF: .data.rel.ro:0000000000217420↓o
.rodata:000000000001342C aBrst           db 'BRST',0             ; DATA XREF: .data.rel.ro:0000000000217430↓o
.rodata:0000000000013431 aNst            db 'NST',0              ; DATA XREF: .data.rel.ro:0000000000217440↓o
.rodata:0000000000013435 aNdt            db 'NDT',0              ; DATA XREF: .data.rel.ro:0000000000217450↓o
.rodata:0000000000013439 aClt            db 'CLT',0              ; DATA XREF: .data.rel.ro:0000000000217480↓o
.rodata:000000000001343D aClst           db 'CLST',0             ; DATA XREF: .data.rel.ro:0000000000217490↓o
.rodata:0000000000013442 aEdt            db 'EDT',0              ; DATA XREF: .data.rel.ro:00000000002174B0↓o
.rodata:0000000000013446 aCst            db 'CST',0              ; DATA XREF: .data.rel.ro:00000000002174C0↓o
.rodata:000000000001344A aCdt            db 'CDT',0              ; DATA XREF: .data.rel.ro:00000000002174D0↓o
.rodata:000000000001344E aMst            db 'MST',0              ; DATA XREF: .data.rel.ro:00000000002174E0↓o
.rodata:0000000000013452 aMdt            db 'MDT',0              ; DATA XREF: .data.rel.ro:00000000002174F0↓o
.rodata:0000000000013456 aPst            db 'PST',0              ; DATA XREF: .data.rel.ro:0000000000217500↓o
.rodata:000000000001345A aPdt            db 'PDT',0              ; DATA XREF: .data.rel.ro:0000000000217510↓o
.rodata:000000000001345E aAkst           db 'AKST',0             ; DATA XREF: .data.rel.ro:0000000000217520↓o
.rodata:000000000001345E                                         ; .data.rel.ro:0000000000217680↓o
.rodata:0000000000013463 aAkdt           db 'AKDT',0             ; DATA XREF: .data.rel.ro:0000000000217530↓o
.rodata:0000000000013468 aHst            db 'HST',0              ; DATA XREF: .data.rel.ro:0000000000217540↓o
.rodata:000000000001346C aHast           db 'HAST',0             ; DATA XREF: .data.rel.ro:0000000000217550↓o
.rodata:000000000001346C                                         ; .data.rel.ro:0000000000217460↓o
.rodata:0000000000013471 aHadt           db 'HADT',0             ; DATA XREF: .data.rel.ro:0000000000217560↓o
.rodata:0000000000013471                                         ; .data.rel.ro:0000000000217470↓o
.rodata:0000000000013476 aSst            db 'SST',0              ; DATA XREF: .data.rel.ro:0000000000217570↓o
.rodata:000000000001347A aWat            db 'WAT',0              ; DATA XREF: .data.rel.ro:0000000000217580↓o
.rodata:000000000001347E aCet            db 'CET',0              ; DATA XREF: .data.rel.ro:0000000000217590↓o
.rodata:0000000000013482 aCest           db 'CEST',0             ; DATA XREF: .data.rel.ro:00000000002175A0↓o
.rodata:0000000000013482                                         ; .data.rel.ro:00000000002174A0↓o
.rodata:0000000000013487 aMet            db 'MET',0              ; DATA XREF: .data.rel.ro:00000000002175B0↓o
.rodata:000000000001348B aMez            db 'MEZ',0              ; DATA XREF: .data.rel.ro:00000000002175C0↓o
.rodata:000000000001348B                                         ; .data.rel.ro:00000000002173C0↓o
.rodata:000000000001348F aMest           db 'MEST',0             ; DATA XREF: .data.rel.ro:00000000002175D0↓o
.rodata:0000000000013494 aMesz           db 'MESZ',0             ; DATA XREF: .data.rel.ro:00000000002175E0↓o
.rodata:0000000000013499 aEet            db 'EET',0              ; DATA XREF: .data.rel.ro:00000000002175F0↓o
.rodata:000000000001349D aEest           db 'EEST',0             ; DATA XREF: .data.rel.ro:0000000000217600↓o
.rodata:00000000000134A2 aCat            db 'CAT',0              ; DATA XREF: .data.rel.ro:0000000000217610↓o
.rodata:00000000000134A2                                         ; .data.rel.ro:0000000000217360↓o
.rodata:00000000000134A6 aSast           db 'SAST',0             ; DATA XREF: .data.rel.ro:0000000000217620↓o
.rodata:00000000000134AB aEat            db 'EAT',0              ; DATA XREF: .data.rel.ro:0000000000217630↓o
.rodata:00000000000134AF aMsk            db 'MSK',0              ; DATA XREF: .data.rel.ro:0000000000217640↓o
.rodata:00000000000134B3 aMsd            db 'MSD',0              ; DATA XREF: .data.rel.ro:0000000000217650↓o
.rodata:00000000000134B7 aIst            db 'IST',0              ; DATA XREF: .data.rel.ro:0000000000217660↓o
.rodata:00000000000134BB aSgt            db 'SGT',0              ; DATA XREF: .data.rel.ro:0000000000217670↓o
.rodata:00000000000134BF aJst            db 'JST',0              ; DATA XREF: .data.rel.ro:0000000000217690↓o
.rodata:00000000000134C3 aGst            db 'GST',0              ; DATA XREF: .data.rel.ro:00000000002176A0↓o
.rodata:00000000000134C7 aNzst           db 'NZST',0             ; DATA XREF: .data.rel.ro:00000000002176B0↓o
.rodata:00000000000134CC aNzdt           db 'NZDT',0             ; DATA XREF: .data.rel.ro:00000000002176C0↓o
.rodata:00000000000134D1 aUt             db 'UT',0               ; DATA XREF: .data.rel.ro:00000000002176F0↓o
.rodata:00000000000134D4 aYesterday      db 'YESTERDAY',0        ; DATA XREF: .data.rel.ro:0000000000217730↓o
.rodata:00000000000134DE aToday          db 'TODAY',0            ; DATA XREF: .data.rel.ro:0000000000217740↓o
.rodata:00000000000134E4 aNow            db 'NOW',0              ; DATA XREF: .data.rel.ro:0000000000217750↓o
.rodata:00000000000134E4                                         ; .data.rel.ro:0000000000217390↓o
.rodata:00000000000134E8 aLast           db 'LAST',0             ; DATA XREF: .data.rel.ro:0000000000217760↓o
.rodata:00000000000134ED aThis           db 'THIS',0             ; DATA XREF: .data.rel.ro:0000000000217770↓o
.rodata:00000000000134F2 aNext           db 'NEXT',0             ; DATA XREF: .data.rel.ro:0000000000217780↓o
.rodata:00000000000134F7 aFirst          db 'FIRST',0            ; DATA XREF: .data.rel.ro:0000000000217790↓o
.rodata:00000000000134FD aThird          db 'THIRD',0            ; DATA XREF: .data.rel.ro:00000000002177A0↓o
.rodata:0000000000013503 aFourth         db 'FOURTH',0           ; DATA XREF: .data.rel.ro:00000000002177B0↓o
.rodata:000000000001350A aFifth          db 'FIFTH',0            ; DATA XREF: .data.rel.ro:00000000002177C0↓o
.rodata:0000000000013510 aSixth          db 'SIXTH',0            ; DATA XREF: .data.rel.ro:00000000002177D0↓o
.rodata:0000000000013516 aSeventh        db 'SEVENTH',0          ; DATA XREF: .data.rel.ro:00000000002177E0↓o
.rodata:000000000001351E aEighth         db 'EIGHTH',0           ; DATA XREF: .data.rel.ro:00000000002177F0↓o
.rodata:0000000000013525 aNinth          db 'NINTH',0            ; DATA XREF: .data.rel.ro:0000000000217800↓o
.rodata:000000000001352B aTenth          db 'TENTH',0            ; DATA XREF: .data.rel.ro:0000000000217810↓o
.rodata:0000000000013531 aEleventh       db 'ELEVENTH',0         ; DATA XREF: .data.rel.ro:0000000000217820↓o
.rodata:000000000001353A aTwelfth        db 'TWELFTH',0          ; DATA XREF: .data.rel.ro:0000000000217830↓o
.rodata:0000000000013542 aAgo            db 'AGO',0              ; DATA XREF: .data.rel.ro:0000000000217840↓o
.rodata:0000000000013542                                         ; .data.rel.ro:0000000000217310↓o
.rodata:0000000000013546 aHence          db 'HENCE',0            ; DATA XREF: .data.rel.ro:0000000000217850↓o
.rodata:0000000000013546                                         ; .data.rel.ro:0000000000217280↓o
.rodata:000000000001354C aMonth          db 'MONTH',0            ; DATA XREF: .data.rel.ro:0000000000217890↓o
.rodata:0000000000013552 aFortnight      db 'FORTNIGHT',0        ; DATA XREF: .data.rel.ro:00000000002178A0↓o
.rodata:000000000001355C aWeek           db 'WEEK',0             ; DATA XREF: .data.rel.ro:00000000002178B0↓o
.rodata:000000000001355C                                         ; .data.rel.ro:00000000002172D0↓o
.rodata:0000000000013561 aHour           db 'HOUR',0             ; DATA XREF: .data.rel.ro:00000000002178D0↓o
.rodata:0000000000013566 aMinute         db 'MINUTE',0           ; DATA XREF: .data.rel.ro:00000000002178E0↓o
.rodata:000000000001356D aMin            db 'MIN',0              ; DATA XREF: .data.rel.ro:00000000002178F0↓o
.rodata:000000000001356D                                         ; .data.rel.ro:0000000000217300↓o
.rodata:0000000000013571 aSecond         db 'SECOND',0           ; DATA XREF: .data.rel.ro:0000000000217900↓o
.rodata:0000000000013571                                         ; .data.rel.ro:0000000000217270↓o
.rodata:0000000000013578 unk_13578       db  53h ; S             ; DATA XREF: .data.rel.ro:0000000000217910↓o
.rodata:0000000000013579                 db  45h ; E
.rodata:000000000001357A ; const char locale[2]
.rodata:000000000001357A locale          db 'C',0                ; DATA XREF: show_date:loc_35D8↑o
.rodata:000000000001357A                                         ; hard_locale+18↑o ...
.rodata:000000000001357C aFebruary       db 'FEBRUARY',0         ; DATA XREF: .data.rel.ro:0000000000217950↓o
.rodata:0000000000013585 aMarch          db 'MARCH',0            ; DATA XREF: .data.rel.ro:0000000000217960↓o
.rodata:0000000000013585                                         ; .data.rel.ro:00000000002172B0↓o
.rodata:000000000001358B aApril          db 'APRIL',0            ; DATA XREF: .data.rel.ro:0000000000217970↓o
.rodata:000000000001358B                                         ; .data.rel.ro:00000000002172E0↓o
.rodata:0000000000013591 aMay            db 'MAY',0              ; DATA XREF: .data.rel.ro:0000000000217980↓o
.rodata:0000000000013595 aJune           db 'JUNE',0             ; DATA XREF: .data.rel.ro:0000000000217990↓o
.rodata:000000000001359A aJuly           db 'JULY',0             ; DATA XREF: .data.rel.ro:00000000002179A0↓o
.rodata:000000000001359F aAugust         db 'AUGUST',0           ; DATA XREF: .data.rel.ro:00000000002179B0↓o
.rodata:00000000000135A6 aSeptember      db 'SEPTEMBER',0        ; DATA XREF: .data.rel.ro:00000000002179C0↓o
.rodata:00000000000135B0 aSept           db 'SEPT',0             ; DATA XREF: .data.rel.ro:00000000002179D0↓o
.rodata:00000000000135B5 aOctober        db 'OCTOBER',0          ; DATA XREF: .data.rel.ro:00000000002179E0↓o
.rodata:00000000000135BD aNovember       db 'NOVEMBER',0         ; DATA XREF: .data.rel.ro:00000000002179F0↓o
.rodata:00000000000135C6 aDecember       db 'DECEMBER',0         ; DATA XREF: .data.rel.ro:0000000000217A00↓o
.rodata:00000000000135CF aSunday         db 'SUNDAY',0           ; DATA XREF: .data.rel.ro:0000000000217A10↓o
.rodata:00000000000135D6 aMonday         db 'MONDAY',0           ; DATA XREF: .data.rel.ro:0000000000217A20↓o
.rodata:00000000000135DD aTuesday        db 'TUESDAY',0          ; DATA XREF: .data.rel.ro:0000000000217A30↓o
.rodata:00000000000135E5 aTues           db 'TUES',0             ; DATA XREF: .data.rel.ro:0000000000217A40↓o
.rodata:00000000000135EA aWednesday      db 'WEDNESDAY',0        ; DATA XREF: .data.rel.ro:0000000000217A50↓o
.rodata:00000000000135F4 aWednes         db 'WEDNES',0           ; DATA XREF: .data.rel.ro:0000000000217A60↓o
.rodata:00000000000135FB aThursday       db 'THURSDAY',0         ; DATA XREF: .data.rel.ro:0000000000217A70↓o
.rodata:0000000000013604 aThur           db 'THUR',0             ; DATA XREF: .data.rel.ro:0000000000217A80↓o
.rodata:0000000000013609 aThurs          db 'THURS',0            ; DATA XREF: .data.rel.ro:0000000000217A90↓o
.rodata:000000000001360F aFriday         db 'FRIDAY',0           ; DATA XREF: .data.rel.ro:0000000000217AA0↓o
.rodata:000000000001360F                                         ; .data.rel.ro:00000000002178C0↓o
.rodata:0000000000013616 aSaturday       db 'SATURDAY',0         ; DATA XREF: .data.rel.ro:0000000000217AB0↓o
.rodata:000000000001361F aAM             db 'A.M.',0             ; DATA XREF: .data.rel.ro:0000000000217AF0↓o
.rodata:0000000000013624 aPm_0           db 'PM',0               ; DATA XREF: .data.rel.ro:0000000000217B00↓o
.rodata:0000000000013627 aPM             db 'P.M.',0             ; DATA XREF: .data.rel.ro:0000000000217B10↓o
.rodata:000000000001362C                 align 10h
.rodata:0000000000013630 ; const char aSDayOrdinalLdN[]
.rodata:0000000000013630 aSDayOrdinalLdN db '%s (day ordinal=%ld number=%d)',0
.rodata:0000000000013630                                         ; DATA XREF: debug_print_current_time_part_10+F1↑o
.rodata:000000000001364F                 align 10h
.rodata:0000000000013650 ; const char aWarningValueLd[]
.rodata:0000000000013650 aWarningValueLd db 'warning: value %ld has %ld digits. Assuming YYYY/MM/DD',0Ah,0
.rodata:0000000000013650                                         ; DATA XREF: yyparse+C68↑o
.rodata:0000000000013688 ; const char aWarningValueLd_0[]
.rodata:0000000000013688 aWarningValueLd_0 db 'warning: value %ld has less than 4 digits. Assuming MM/DD/YY[YY]',0Ah
.rodata:0000000000013688                                         ; DATA XREF: yyparse+17C8↑o
.rodata:0000000000013688                 db 0
.rodata:00000000000136CA                 align 10h
.rodata:00000000000136D0 ; const char aErrorParsingFa_0[]
.rodata:00000000000136D0 aErrorParsingFa_0 db 'error: parsing failed, stopped at ',27h,'%s',27h,0Ah,0
.rodata:00000000000136D0                                         ; DATA XREF: parse_datetime2:loc_9158↑o
.rodata:00000000000136F8 aTzUtc0Environm db 'TZ="UTC0" environment value or -u',0
.rodata:00000000000136F8                                         ; DATA XREF: parse_datetime2+B37↑o
.rodata:000000000001371A                 align 20h
.rodata:0000000000013720 aErrorSeenMulti_3 db 'error: seen multiple time parts',0Ah,0
.rodata:0000000000013720                                         ; DATA XREF: parse_datetime2:loc_926B↑o
.rodata:0000000000013741                 align 8
.rodata:0000000000013748 aErrorSeenMulti_2 db 'error: seen multiple date parts',0Ah,0
.rodata:0000000000013748                                         ; DATA XREF: parse_datetime2:loc_9258↑o
.rodata:0000000000013769                 align 10h
.rodata:0000000000013770 aErrorSeenMulti_1 db 'error: seen multiple days parts',0Ah,0
.rodata:0000000000013770                                         ; DATA XREF: parse_datetime2:loc_9248↑o
.rodata:0000000000013791                 align 8
.rodata:0000000000013798 aErrorSeenMulti_0 db 'error: seen multiple daylight-saving parts',0Ah,0
.rodata:0000000000013798                                         ; DATA XREF: parse_datetime2:loc_9238↑o
.rodata:00000000000137C4                 align 8
.rodata:00000000000137C8 aErrorSeenMulti db 'error: seen multiple time-zone parts',0Ah,0
.rodata:00000000000137C8                                         ; DATA XREF: parse_datetime2+978↑o
.rodata:00000000000137EE                 align 10h
.rodata:00000000000137F0 ; const char aWarningAdjusti[]
.rodata:00000000000137F0 aWarningAdjusti db 'warning: adjusting year value %ld to %ld',0Ah,0
.rodata:00000000000137F0                                         ; DATA XREF: parse_datetime2:loc_9A98↑o
.rodata:000000000001381A                 align 20h
.rodata:0000000000013820 ; const char aErrorYearMonth[]
.rodata:0000000000013820 aErrorYearMonth db 'error: year, month, or day overflow',0Ah,0
.rodata:0000000000013820                                         ; DATA XREF: parse_datetime2+AFC↑o
.rodata:0000000000013845                 align 8
.rodata:0000000000013848 ; const char aUsingSpecified[]
.rodata:0000000000013848 aUsingSpecified db 'using specified time as starting value: ',27h,'%s',27h,0Ah,0
.rodata:0000000000013848                                         ; DATA XREF: parse_datetime2+1888↑o
.rodata:0000000000013876                 align 8
.rodata:0000000000013878 ; const char aUsingCurrentTi[]
.rodata:0000000000013878 aUsingCurrentTi db 'using current time as starting value: ',27h,'%s',27h,0Ah,0
.rodata:0000000000013878                                         ; DATA XREF: parse_datetime2:loc_A5A6↑o
.rodata:00000000000138A4                 align 8
.rodata:00000000000138A8 aWarningUsingMi db 'warning: using midnight as starting time: 00:00:00',0Ah,0
.rodata:00000000000138A8                                         ; DATA XREF: parse_datetime2:loc_9B93↑o
.rodata:00000000000138DC                 align 20h
.rodata:00000000000138E0 ; const char aErrorInvalidDa[]
.rodata:00000000000138E0 aErrorInvalidDa db 'error: invalid date/time value:',0Ah,0
.rodata:00000000000138E0                                         ; DATA XREF: parse_datetime2+D99↑o
.rodata:00000000000138E0                                         ; parse_datetime2+18D5↑o
.rodata:0000000000013901                 align 8
.rodata:0000000000013908 a4s2s2s2s2s2s   db '                                 %4s %2s %2s %2s %2s %2s',0
.rodata:0000000000013908                                         ; DATA XREF: parse_datetime2+E95↑o
.rodata:0000000000013941                 align 8
.rodata:0000000000013948 ; const char aNonExistingDue[]
.rodata:0000000000013948 aNonExistingDue db '       non-existing due to daylight-saving time;',0Ah,0
.rodata:0000000000013948                                         ; DATA XREF: parse_datetime2+F06↑o
.rodata:000000000001397A                 align 20h
.rodata:0000000000013980 ; const char aInvalidDayMont[]
.rodata:0000000000013980 aInvalidDayMont db '       invalid day/month combination;',0Ah,0
.rodata:0000000000013980                                         ; DATA XREF: parse_datetime2+F32↑o
.rodata:00000000000139A7                 align 8
.rodata:00000000000139A8 ; const char aNumericValuesO[]
.rodata:00000000000139A8 aNumericValuesO db '       numeric values overflow;',0Ah,0
.rodata:00000000000139A8                                         ; DATA XREF: parse_datetime2:loc_97DF↑o
.rodata:00000000000139C9                 align 10h
.rodata:00000000000139D0 ; const char aErrorDaySDayOr[]
.rodata:00000000000139D0 aErrorDaySDayOr db 'error: day ',27h,'%s',27h,' (day ordinal=%ld number=%d) resulted '
.rodata:00000000000139D0                                         ; DATA XREF: parse_datetime2+11D0↑o
.rodata:00000000000139D0                 db 'in an invalid date: ',27h,'%s',27h,0Ah,0
.rodata:0000000000013A1F                 align 20h
.rodata:0000000000013A20 ; const char aUsingCurrentDa[]
.rodata:0000000000013A20 aUsingCurrentDa db 'using current date as starting value: ',27h,'%s',27h,0Ah,0
.rodata:0000000000013A20                                         ; DATA XREF: parse_datetime2+1C72↑o
.rodata:0000000000013A4C                 align 10h
.rodata:0000000000013A50 ; const char aWarningDaySIgn[]
.rodata:0000000000013A50 aWarningDaySIgn db 'warning: day (%s) ignored when explicit dates are given',0Ah,0
.rodata:0000000000013A50                                         ; DATA XREF: parse_datetime2+1820↑o
.rodata:0000000000013A89                 align 10h
.rodata:0000000000013A90 ; const char aWarningWhenAdd[]
.rodata:0000000000013A90 aWarningWhenAdd db 'warning: when adding relative months/years, it is recommended to '
.rodata:0000000000013A90                                         ; DATA XREF: parse_datetime2+1444↑o
.rodata:0000000000013A90                 db 'specify the 15th of the months',0Ah,0
.rodata:0000000000013AF1                 align 8
.rodata:0000000000013AF8 ; const char aWarningWhenAdd_0[]
.rodata:0000000000013AF8 aWarningWhenAdd_0 db 'warning: when adding relative days, it is recommended to specify '
.rodata:0000000000013AF8                                         ; DATA XREF: parse_datetime2+1D34↑o
.rodata:0000000000013AF8                 db 'noon',0Ah,0
.rodata:0000000000013B3F                 align 20h
.rodata:0000000000013B40 ; const char aErrorAddingRel_0[]
.rodata:0000000000013B40 aErrorAddingRel_0 db 'error: adding relative date resulted in an invalid date: ',27h,'%'
.rodata:0000000000013B40                                         ; DATA XREF: parse_datetime2+1CDA↑o
.rodata:0000000000013B40                 db 's',27h,0Ah,0
.rodata:0000000000013B7F                 align 20h
.rodata:0000000000013B80 ; const char aAfterDateAdjus[]
.rodata:0000000000013B80 aAfterDateAdjus db 'after date adjustment (%+ld years, %+ld months, %+ld days),',0Ah,0
.rodata:0000000000013B80                                         ; DATA XREF: parse_datetime2+166F↑o
.rodata:0000000000013BBD                 align 20h
.rodata:0000000000013BC0 ; const char aWarningDayligh[]
.rodata:0000000000013BC0 aWarningDayligh db 'warning: daylight saving time changed after date adjustment',0Ah,0
.rodata:0000000000013BC0                                         ; DATA XREF: parse_datetime2+16F8↑o
.rodata:0000000000013BFD                 align 20h
.rodata:0000000000013C00 ; const char aWarningMonthYe[]
.rodata:0000000000013C00 aWarningMonthYe db 'warning: month/year adjustment resulted in shifted dates:',0Ah,0
.rodata:0000000000013C00                                         ; DATA XREF: parse_datetime2:loc_9FD7↑o
.rodata:0000000000013C3B                 align 20h
.rodata:0000000000013C40 ; const char aAdjustedYMDS02[]
.rodata:0000000000013C40 aAdjustedYMDS02 db '     adjusted Y M D: %s %02d %02d',0Ah,0
.rodata:0000000000013C40                                         ; DATA XREF: parse_datetime2+177D↑o
.rodata:0000000000013C63                 align 8
.rodata:0000000000013C68 ; const char aNormalizedYMDS[]
.rodata:0000000000013C68 aNormalizedYMDS db '   normalized Y M D: %s %02d %02d',0Ah,0
.rodata:0000000000013C68                                         ; DATA XREF: parse_datetime2+17CA↑o
.rodata:0000000000013C8B                 align 10h
.rodata:0000000000013C90 ; const char aErrorTimezoneD[]
.rodata:0000000000013C90 aErrorTimezoneD db 'error: timezone %d caused time_t overflow',0Ah,0
.rodata:0000000000013C90                                         ; DATA XREF: parse_datetime2+154C↑o
.rodata:0000000000013CBB                 align 20h
.rodata:0000000000013CC0 aErrorAddingRel db 'error: adding relative time caused an overflow',0Ah,0
.rodata:0000000000013CC0                                         ; DATA XREF: parse_datetime2+1B3B↑o
.rodata:0000000000013CF0 ; const char aAfterTimeAdjus[]
.rodata:0000000000013CF0 aAfterTimeAdjus db 'after time adjustment (%+ld hours, %+ld minutes, %+ld seconds, %+'
.rodata:0000000000013CF0                                         ; DATA XREF: parse_datetime2+1A80↑o
.rodata:0000000000013CF0                 db 'd ns),',0Ah,0
.rodata:0000000000013D39                 align 20h
.rodata:0000000000013D40 ; const char aNewTimeLdEpoch[]
.rodata:0000000000013D40 aNewTimeLdEpoch db '    new time = %ld epoch-seconds',0Ah,0
.rodata:0000000000013D40                                         ; DATA XREF: parse_datetime2+1AAE↑o
.rodata:0000000000013D62                 align 8
.rodata:0000000000013D68 ; const char aWarningDayligh_0[]
.rodata:0000000000013D68 aWarningDayligh_0 db 'warning: daylight saving time changed after time adjustment',0Ah,0
.rodata:0000000000013D68                                         ; DATA XREF: parse_datetime2+1B02↑o
.rodata:0000000000013DA5                 align 8
.rodata:0000000000013DA8 ; const char aTimezoneTzSEnv[]
.rodata:0000000000013DA8 aTimezoneTzSEnv db 'timezone: TZ="%s" environment value',0Ah,0
.rodata:0000000000013DA8                                         ; DATA XREF: parse_datetime2+7B8↑o
.rodata:0000000000013DCD                 align 10h
.rodata:0000000000013DD0 ; const char aFinalLd09dEpoc[]
.rodata:0000000000013DD0 aFinalLd09dEpoc db 'final: %ld.%09d (epoch-seconds)',0Ah,0
.rodata:0000000000013DD0                                         ; DATA XREF: parse_datetime2+7DA↑o
.rodata:0000000000013DF1                 align 20h
.rodata:0000000000013E00 jpt_6DDE        dd offset loc_79CB - 13E00h, offset def_6DDE - 13E00h
.rodata:0000000000013E00                                         ; DATA XREF: yyparse+150↑o
.rodata:0000000000013E00                                         ; yyparse+157↑r
.rodata:0000000000013E00                 dd offset def_6DDE - 13E00h, offset loc_7A61 - 13E00h ; jump table for switch statement
.rodata:0000000000013E00                 dd offset loc_7A3C - 13E00h, offset loc_8234 - 13E00h
.rodata:0000000000013E00                 dd offset loc_820C - 13E00h, offset loc_81E4 - 13E00h
.rodata:0000000000013E00                 dd offset loc_81BC - 13E00h, offset loc_819C - 13E00h
.rodata:0000000000013E00                 dd offset loc_8146 - 13E00h, offset loc_80F0 - 13E00h
.rodata:0000000000013E00                 dd offset def_6DDE - 13E00h, offset def_6DDE - 13E00h
.rodata:0000000000013E00                 dd offset loc_80C3 - 13E00h, offset loc_8093 - 13E00h
.rodata:0000000000013E00                 dd offset loc_8060 - 13E00h, offset def_6DDE - 13E00h
.rodata:0000000000013E00                 dd offset loc_8033 - 13E00h, offset loc_8003 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7FD0 - 13E00h, offset def_6DDE - 13E00h
.rodata:0000000000013E00                 dd offset def_6DDE - 13E00h, offset loc_7F79 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7F6C - 13E00h, offset loc_7F57 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7F4A - 13E00h, offset loc_7F3D - 13E00h
.rodata:0000000000013E00                 dd offset loc_7F30 - 13E00h, offset loc_6DE0 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7EBC - 13E00h, offset loc_7EAA - 13E00h
.rodata:0000000000013E00                 dd offset loc_7E98 - 13E00h, offset loc_7E83 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7E6E - 13E00h, offset loc_7E51 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7E34 - 13E00h, offset loc_7953 - 13E00h
.rodata:0000000000013E00                 dd offset loc_78C4 - 13E00h, offset loc_7DE8 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7D9D - 13E00h, offset loc_7D88 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7D35 - 13E00h, offset loc_7D20 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7D60 - 13E00h, offset def_6DDE - 13E00h
.rodata:0000000000013E00                 dd offset loc_7CCA - 13E00h, offset loc_711B - 13E00h
.rodata:0000000000013E00                 dd offset loc_76A9 - 13E00h, offset loc_76A9 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7E20 - 13E00h, offset loc_7666 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7C85 - 13E00h, offset loc_7C71 - 13E00h
.rodata:0000000000013E00                 dd offset loc_75E1 - 13E00h, offset loc_7C20 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7B43 - 13E00h, offset loc_7839 - 13E00h
.rodata:0000000000013E00                 dd offset loc_78AE - 13E00h, offset loc_7B90 - 13E00h
.rodata:0000000000013E00                 dd offset loc_778B - 13E00h, offset loc_7989 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7B2F - 13E00h, offset loc_7624 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7AED - 13E00h, offset loc_7AD9 - 13E00h
.rodata:0000000000013E00                 dd offset loc_780F - 13E00h, offset loc_77CD - 13E00h
.rodata:0000000000013E00                 dd offset loc_77CD - 13E00h, offset loc_7968 - 13E00h
.rodata:0000000000013E00                 dd offset def_6DDE - 13E00h, offset loc_7666 - 13E00h
.rodata:0000000000013E00                 dd offset loc_75E1 - 13E00h, offset loc_7839 - 13E00h
.rodata:0000000000013E00                 dd offset loc_778B - 13E00h, offset loc_7624 - 13E00h
.rodata:0000000000013E00                 dd offset loc_780F - 13E00h, offset loc_78AE - 13E00h
.rodata:0000000000013E00                 dd offset def_6DDE - 13E00h, offset def_6DDE - 13E00h
.rodata:0000000000013E00                 dd offset def_6DDE - 13E00h, offset loc_782D - 13E00h
.rodata:0000000000013E00                 dd offset def_6DDE - 13E00h, offset loc_782D - 13E00h
.rodata:0000000000013E00                 dd offset loc_7A91 - 13E00h, offset loc_7BA4 - 13E00h
.rodata:0000000000013E00                 dd offset loc_7C65 - 13E00h, offset loc_7AD0 - 13E00h
.rodata:0000000000013F60 days_values_5109 db  53h ; S            ; DATA XREF: str_days_constprop_13:loc_6821↑o
.rodata:0000000000013F61                 db  75h ; u
.rodata:0000000000013F62                 db  6Eh ; n
.rodata:0000000000013F63                 db    0
.rodata:0000000000013F64                 db  4Dh ; M
.rodata:0000000000013F65                 db  6Fh ; o
.rodata:0000000000013F66                 db  6Eh ; n
.rodata:0000000000013F67                 db    0
.rodata:0000000000013F68                 db  54h ; T
.rodata:0000000000013F69                 db  75h ; u
.rodata:0000000000013F6A                 db  65h ; e
.rodata:0000000000013F6B                 db    0
.rodata:0000000000013F6C                 db  57h ; W
.rodata:0000000000013F6D                 db  65h ; e
.rodata:0000000000013F6E                 db  64h ; d
.rodata:0000000000013F6F                 db    0
.rodata:0000000000013F70                 db  54h ; T
.rodata:0000000000013F71                 db  68h ; h
.rodata:0000000000013F72                 db  75h ; u
.rodata:0000000000013F73                 db    0
.rodata:0000000000013F74                 db  46h ; F
.rodata:0000000000013F75                 db  72h ; r
.rodata:0000000000013F76                 db  69h ; i
.rodata:0000000000013F77                 db    0
.rodata:0000000000013F78                 db  53h ; S
.rodata:0000000000013F79                 db  61h ; a
.rodata:0000000000013F7A                 db  74h ; t
.rodata:0000000000013F7B                 db    0
.rodata:0000000000013F7C                 db    0
.rodata:0000000000013F7D                 db    0
.rodata:0000000000013F7E                 db    0
.rodata:0000000000013F7F                 db    0
.rodata:0000000000013F80 ordinal_values_5108 db 'last',0         ; DATA XREF: str_days_constprop_13+C8↑o
.rodata:0000000000013F85                 db    0
.rodata:0000000000013F86                 db    0
.rodata:0000000000013F87                 db    0
.rodata:0000000000013F88                 db    0
.rodata:0000000000013F89                 db    0
.rodata:0000000000013F8A                 db    0
.rodata:0000000000013F8B                 db  74h ; t
.rodata:0000000000013F8C                 db  68h ; h
.rodata:0000000000013F8D                 db  69h ; i
.rodata:0000000000013F8E                 db  73h ; s
.rodata:0000000000013F8F                 db    0
.rodata:0000000000013F90                 db    0
.rodata:0000000000013F91                 db    0
.rodata:0000000000013F92                 db    0
.rodata:0000000000013F93                 db    0
.rodata:0000000000013F94                 db    0
.rodata:0000000000013F95                 db    0
.rodata:0000000000013F96                 db  6Eh ; n
.rodata:0000000000013F97                 db  65h ; e
.rodata:0000000000013F98                 db  78h ; x
.rodata:0000000000013F99                 db  74h ; t
.rodata:0000000000013F9A                 db  2Fh ; /
.rodata:0000000000013F9B                 db  66h ; f
.rodata:0000000000013F9C                 db  69h ; i
.rodata:0000000000013F9D                 db  72h ; r
.rodata:0000000000013F9E                 db  73h ; s
.rodata:0000000000013F9F                 db  74h ; t
.rodata:0000000000013FA0                 db    0
.rodata:0000000000013FA1                 db  28h ; (
.rodata:0000000000013FA2                 db  53h ; S
.rodata:0000000000013FA3                 db  45h ; E
.rodata:0000000000013FA4                 db  43h ; C
.rodata:0000000000013FA5                 db  4Fh ; O
.rodata:0000000000013FA6                 db  4Eh ; N
.rodata:0000000000013FA7                 db  44h ; D
.rodata:0000000000013FA8                 db  29h ; )
.rodata:0000000000013FA9                 db    0
.rodata:0000000000013FAA                 db    0
.rodata:0000000000013FAB                 db    0
.rodata:0000000000013FAC                 db  74h ; t
.rodata:0000000000013FAD                 db  68h ; h
.rodata:0000000000013FAE                 db  69h ; i
.rodata:0000000000013FAF                 db  72h ; r
.rodata:0000000000013FB0                 db  64h ; d
.rodata:0000000000013FB1                 db    0
.rodata:0000000000013FB2                 db    0
.rodata:0000000000013FB3                 db    0
.rodata:0000000000013FB4                 db    0
.rodata:0000000000013FB5                 db    0
.rodata:0000000000013FB6                 db    0
.rodata:0000000000013FB7                 db  66h ; f
.rodata:0000000000013FB8                 db  6Fh ; o
.rodata:0000000000013FB9                 db  75h ; u
.rodata:0000000000013FBA                 db  72h ; r
.rodata:0000000000013FBB                 db  74h ; t
.rodata:0000000000013FBC                 db  68h ; h
.rodata:0000000000013FBD                 db    0
.rodata:0000000000013FBE                 db    0
.rodata:0000000000013FBF                 db    0
.rodata:0000000000013FC0                 db    0
.rodata:0000000000013FC1                 db    0
.rodata:0000000000013FC2                 db  66h ; f
.rodata:0000000000013FC3                 db  69h ; i
.rodata:0000000000013FC4                 db  66h ; f
.rodata:0000000000013FC5                 db  74h ; t
.rodata:0000000000013FC6                 db  68h ; h
.rodata:0000000000013FC7                 db    0
.rodata:0000000000013FC8                 db    0
.rodata:0000000000013FC9                 db    0
.rodata:0000000000013FCA                 db    0
.rodata:0000000000013FCB                 db    0
.rodata:0000000000013FCC                 db    0
.rodata:0000000000013FCD                 db  73h ; s
.rodata:0000000000013FCE                 db  69h ; i
.rodata:0000000000013FCF                 db  78h ; x
.rodata:0000000000013FD0                 db  74h ; t
.rodata:0000000000013FD1                 db  68h ; h
.rodata:0000000000013FD2                 db    0
.rodata:0000000000013FD3                 db    0
.rodata:0000000000013FD4                 db    0
.rodata:0000000000013FD5                 db    0
.rodata:0000000000013FD6                 db    0
.rodata:0000000000013FD7                 db    0
.rodata:0000000000013FD8                 db  73h ; s
.rodata:0000000000013FD9                 db  65h ; e
.rodata:0000000000013FDA                 db  76h ; v
.rodata:0000000000013FDB                 db  65h ; e
.rodata:0000000000013FDC                 db  6Eh ; n
.rodata:0000000000013FDD                 db  74h ; t
.rodata:0000000000013FDE                 db  68h ; h
.rodata:0000000000013FDF                 db    0
.rodata:0000000000013FE0                 db    0
.rodata:0000000000013FE1                 db    0
.rodata:0000000000013FE2                 db    0
.rodata:0000000000013FE3                 db  65h ; e
.rodata:0000000000013FE4                 db  69h ; i
.rodata:0000000000013FE5                 db  67h ; g
.rodata:0000000000013FE6                 db  68h ; h
.rodata:0000000000013FE7                 db  74h ; t
.rodata:0000000000013FE8                 db    0
.rodata:0000000000013FE9                 db    0
.rodata:0000000000013FEA                 db    0
.rodata:0000000000013FEB                 db    0
.rodata:0000000000013FEC                 db    0
.rodata:0000000000013FED                 db    0
.rodata:0000000000013FEE                 db  6Eh ; n
.rodata:0000000000013FEF                 db  69h ; i
.rodata:0000000000013FF0                 db  6Eh ; n
.rodata:0000000000013FF1                 db  74h ; t
.rodata:0000000000013FF2                 db  68h ; h
.rodata:0000000000013FF3                 db    0
.rodata:0000000000013FF4                 db    0
.rodata:0000000000013FF5                 db    0
.rodata:0000000000013FF6                 db    0
.rodata:0000000000013FF7                 db    0
.rodata:0000000000013FF8                 db    0
.rodata:0000000000013FF9                 db  74h ; t
.rodata:0000000000013FFA                 db  65h ; e
.rodata:0000000000013FFB                 db  6Eh ; n
.rodata:0000000000013FFC                 db  74h ; t
.rodata:0000000000013FFD                 db  68h ; h
.rodata:0000000000013FFE                 db    0
.rodata:0000000000013FFF                 db    0
.rodata:0000000000014000                 db    0
.rodata:0000000000014001                 db    0
.rodata:0000000000014002                 db    0
.rodata:0000000000014003                 db    0
.rodata:0000000000014004                 db  65h ; e
.rodata:0000000000014005                 db  6Ch ; l
.rodata:0000000000014006                 db  65h ; e
.rodata:0000000000014007                 db  76h ; v
.rodata:0000000000014008                 db  65h ; e
.rodata:0000000000014009                 db  6Eh ; n
.rodata:000000000001400A                 db  74h ; t
.rodata:000000000001400B                 db  68h ; h
.rodata:000000000001400C                 db    0
.rodata:000000000001400D                 db    0
.rodata:000000000001400E                 db    0
.rodata:000000000001400F                 db  74h ; t
.rodata:0000000000014010                 db  77h ; w
.rodata:0000000000014011                 db  65h ; e
.rodata:0000000000014012                 db  6Ch ; l
.rodata:0000000000014013                 db  66h ; f
.rodata:0000000000014014                 db  74h ; t
.rodata:0000000000014015                 db  68h ; h
.rodata:0000000000014016                 db    0
.rodata:0000000000014017                 db    0
.rodata:0000000000014018                 db    0
.rodata:0000000000014019                 db    0
.rodata:000000000001401A                 db    0
.rodata:000000000001401B                 db    0
.rodata:000000000001401C                 db    0
.rodata:000000000001401D                 db    0
.rodata:000000000001401E                 db    0
.rodata:000000000001401F                 db    0
.rodata:0000000000014020 yyr2            db    0                 ; DATA XREF: yyparse+B3↑o
.rodata:0000000000014021                 db    2
.rodata:0000000000014022                 db    1
.rodata:0000000000014023                 db    1
.rodata:0000000000014024                 db    2
.rodata:0000000000014025                 db    0
.rodata:0000000000014026                 db    2
.rodata:0000000000014027                 db    1
.rodata:0000000000014028                 db    1
.rodata:0000000000014029                 db    1
.rodata:000000000001402A                 db    1
.rodata:000000000001402B                 db    1
.rodata:000000000001402C                 db    1
.rodata:000000000001402D                 db    1
.rodata:000000000001402E                 db    1
.rodata:000000000001402F                 db    1
.rodata:0000000000014030                 db    1
.rodata:0000000000014031                 db    3
.rodata:0000000000014032                 db    2
.rodata:0000000000014033                 db    4
.rodata:0000000000014034                 db    6
.rodata:0000000000014035                 db    1
.rodata:0000000000014036                 db    2
.rodata:0000000000014037                 db    4
.rodata:0000000000014038                 db    6
.rodata:0000000000014039                 db    0
.rodata:000000000001403A                 db    1
.rodata:000000000001403B                 db    2
.rodata:000000000001403C                 db    1
.rodata:000000000001403D                 db    2
.rodata:000000000001403E                 db    1
.rodata:000000000001403F                 db    1
.rodata:0000000000014040                 db    2
.rodata:0000000000014041                 db    2
.rodata:0000000000014042                 db    3
.rodata:0000000000014043                 db    1
.rodata:0000000000014044                 db    2
.rodata:0000000000014045                 db    1
.rodata:0000000000014046                 db    2
.rodata:0000000000014047                 db    2
.rodata:0000000000014048                 db    2
.rodata:0000000000014049                 db    3
.rodata:000000000001404A                 db    5
.rodata:000000000001404B                 db    3
.rodata:000000000001404C                 db    3
.rodata:000000000001404D                 db    2
.rodata:000000000001404E                 db    4
.rodata:000000000001404F                 db    2
.rodata:0000000000014050                 db    3
.rodata:0000000000014051                 db    1
.rodata:0000000000014052                 db    3
.rodata:0000000000014053                 db    2
.rodata:0000000000014054                 db    1
.rodata:0000000000014055                 db    1
.rodata:0000000000014056                 db    2
.rodata:0000000000014057                 db    2
.rodata:0000000000014058                 db    1
.rodata:0000000000014059                 db    2
.rodata:000000000001405A                 db    2
.rodata:000000000001405B                 db    1
.rodata:000000000001405C                 db    2
.rodata:000000000001405D                 db    2
.rodata:000000000001405E                 db    1
.rodata:000000000001405F                 db    2
.rodata:0000000000014060                 db    2
.rodata:0000000000014061                 db    1
.rodata:0000000000014062                 db    2
.rodata:0000000000014063                 db    2
.rodata:0000000000014064                 db    1
.rodata:0000000000014065                 db    2
.rodata:0000000000014066                 db    2
.rodata:0000000000014067                 db    2
.rodata:0000000000014068                 db    2
.rodata:0000000000014069                 db    1
.rodata:000000000001406A                 db    1
.rodata:000000000001406B                 db    2
.rodata:000000000001406C                 db    2
.rodata:000000000001406D                 db    2
.rodata:000000000001406E                 db    2
.rodata:000000000001406F                 db    2
.rodata:0000000000014070                 db    2
.rodata:0000000000014071                 db    1
.rodata:0000000000014072                 db    1
.rodata:0000000000014073                 db    1
.rodata:0000000000014074                 db    1
.rodata:0000000000014075                 db    1
.rodata:0000000000014076                 db    1
.rodata:0000000000014077                 db    1
.rodata:0000000000014078                 db    1
.rodata:0000000000014079                 db    2
.rodata:000000000001407A                 db    0
.rodata:000000000001407B                 db    2
.rodata:000000000001407C                 db    0
.rodata:000000000001407D                 db    0
.rodata:000000000001407E                 db    0
.rodata:000000000001407F                 db    0
.rodata:0000000000014080 yyr1            db    0                 ; DATA XREF: yyparse+34E↑o
.rodata:0000000000014081                 db  1Ch
.rodata:0000000000014082                 db  1Dh
.rodata:0000000000014083                 db  1Dh
.rodata:0000000000014084                 db  1Eh
.rodata:0000000000014085                 db  1Fh
.rodata:0000000000014086                 db  1Fh
.rodata:0000000000014087                 db  20h
.rodata:0000000000014088                 db  20h
.rodata:0000000000014089                 db  20h
.rodata:000000000001408A                 db  20h
.rodata:000000000001408B                 db  20h
.rodata:000000000001408C                 db  20h
.rodata:000000000001408D                 db  20h
.rodata:000000000001408E                 db  20h
.rodata:000000000001408F                 db  20h
.rodata:0000000000014090                 db  21h ; !
.rodata:0000000000014091                 db  22h ; "
.rodata:0000000000014092                 db  23h ; #
.rodata:0000000000014093                 db  23h ; #
.rodata:0000000000014094                 db  23h ; #
.rodata:0000000000014095                 db  23h ; #
.rodata:0000000000014096                 db  24h ; $
.rodata:0000000000014097                 db  24h ; $
.rodata:0000000000014098                 db  24h ; $
.rodata:0000000000014099                 db  25h ; %
.rodata:000000000001409A                 db  25h ; %
.rodata:000000000001409B                 db  26h ; &
.rodata:000000000001409C                 db  27h ; '
.rodata:000000000001409D                 db  27h ; '
.rodata:000000000001409E                 db  28h ; (
.rodata:000000000001409F                 db  28h ; (
.rodata:00000000000140A0                 db  28h ; (
.rodata:00000000000140A1                 db  28h ; (
.rodata:00000000000140A2                 db  28h ; (
.rodata:00000000000140A3                 db  28h ; (
.rodata:00000000000140A4                 db  28h ; (
.rodata:00000000000140A5                 db  29h ; )
.rodata:00000000000140A6                 db  29h ; )
.rodata:00000000000140A7                 db  29h ; )
.rodata:00000000000140A8                 db  29h ; )
.rodata:00000000000140A9                 db  2Ah ; *
.rodata:00000000000140AA                 db  2Ah ; *
.rodata:00000000000140AB                 db  2Ah ; *
.rodata:00000000000140AC                 db  2Ah ; *
.rodata:00000000000140AD                 db  2Ah ; *
.rodata:00000000000140AE                 db  2Ah ; *
.rodata:00000000000140AF                 db  2Ah ; *
.rodata:00000000000140B0                 db  2Ah ; *
.rodata:00000000000140B1                 db  2Ah ; *
.rodata:00000000000140B2                 db  2Bh ; +
.rodata:00000000000140B3                 db  2Ch ; ,
.rodata:00000000000140B4                 db  2Ch ; ,
.rodata:00000000000140B5                 db  2Ch ; ,
.rodata:00000000000140B6                 db  2Dh ; -
.rodata:00000000000140B7                 db  2Dh ; -
.rodata:00000000000140B8                 db  2Dh ; -
.rodata:00000000000140B9                 db  2Dh ; -
.rodata:00000000000140BA                 db  2Dh ; -
.rodata:00000000000140BB                 db  2Dh ; -
.rodata:00000000000140BC                 db  2Dh ; -
.rodata:00000000000140BD                 db  2Dh ; -
.rodata:00000000000140BE                 db  2Dh ; -
.rodata:00000000000140BF                 db  2Dh ; -
.rodata:00000000000140C0                 db  2Dh ; -
.rodata:00000000000140C1                 db  2Dh ; -
.rodata:00000000000140C2                 db  2Dh ; -
.rodata:00000000000140C3                 db  2Dh ; -
.rodata:00000000000140C4                 db  2Dh ; -
.rodata:00000000000140C5                 db  2Dh ; -
.rodata:00000000000140C6                 db  2Dh ; -
.rodata:00000000000140C7                 db  2Dh ; -
.rodata:00000000000140C8                 db  2Dh ; -
.rodata:00000000000140C9                 db  2Dh ; -
.rodata:00000000000140CA                 db  2Dh ; -
.rodata:00000000000140CB                 db  2Eh ; .
.rodata:00000000000140CC                 db  2Eh ; .
.rodata:00000000000140CD                 db  2Eh ; .
.rodata:00000000000140CE                 db  2Eh ; .
.rodata:00000000000140CF                 db  2Eh ; .
.rodata:00000000000140D0                 db  2Eh ; .
.rodata:00000000000140D1                 db  2Fh ; /
.rodata:00000000000140D2                 db  30h ; 0
.rodata:00000000000140D3                 db  30h ; 0
.rodata:00000000000140D4                 db  31h ; 1
.rodata:00000000000140D5                 db  31h ; 1
.rodata:00000000000140D6                 db  32h ; 2
.rodata:00000000000140D7                 db  32h ; 2
.rodata:00000000000140D8                 db  33h ; 3
.rodata:00000000000140D9                 db  34h ; 4
.rodata:00000000000140DA                 db  35h ; 5
.rodata:00000000000140DB                 db  35h ; 5
.rodata:00000000000140DC                 db    0
.rodata:00000000000140DD                 db    0
.rodata:00000000000140DE                 db    0
.rodata:00000000000140DF                 db    0
.rodata:00000000000140E0 yycheck         db  1Bh                 ; DATA XREF: yyparse+36B↑o
.rodata:00000000000140E0                                         ; yyparse+3E6↑o ...
.rodata:00000000000140E1                 db    5
.rodata:00000000000140E2                 db    6
.rodata:00000000000140E3                 db    7
.rodata:00000000000140E4                 db    8
.rodata:00000000000140E5                 db    9
.rodata:00000000000140E6                 db  0Ah
.rodata:00000000000140E7                 db    4
.rodata:00000000000140E8                 db  0Ch
.rodata:00000000000140E9                 db  0Fh
.rodata:00000000000140EA                 db  66h ; f
.rodata:00000000000140EB                 db  0Fh
.rodata:00000000000140EC                 db  10h
.rodata:00000000000140ED                 db  13h
.rodata:00000000000140EE                 db  0Fh
.rodata:00000000000140EF                 db  13h
.rodata:00000000000140F0                 db  13h
.rodata:00000000000140F1                 db  14h
.rodata:00000000000140F2                 db  13h
.rodata:00000000000140F3                 db  19h
.rodata:00000000000140F4                 db  70h ; p
.rodata:00000000000140F5                 db  19h
.rodata:00000000000140F6                 db  13h
.rodata:00000000000140F7                 db  1Bh
.rodata:00000000000140F8                 db    5
.rodata:00000000000140F9                 db    6
.rodata:00000000000140FA                 db    7
.rodata:00000000000140FB                 db    8
.rodata:00000000000140FC                 db    9
.rodata:00000000000140FD                 db  0Ah
.rodata:00000000000140FE                 db    5
.rodata:00000000000140FF                 db    6
.rodata:0000000000014100                 db    7
.rodata:0000000000014101                 db    8
.rodata:0000000000014102                 db    9
.rodata:0000000000014103                 db  0Ah
.rodata:0000000000014104                 db  13h
.rodata:0000000000014105                 db  13h
.rodata:0000000000014106                 db  13h
.rodata:0000000000014107                 db  6Bh ; k
.rodata:0000000000014108                 db  13h
.rodata:0000000000014109                 db  14h
.rodata:000000000001410A                 db  19h
.rodata:000000000001410B                 db  19h
.rodata:000000000001410C                 db  19h
.rodata:000000000001410D                 db  71h ; q
.rodata:000000000001410E                 db  13h
.rodata:000000000001410F                 db  14h
.rodata:0000000000014110                 db  15h
.rodata:0000000000014111                 db  16h
.rodata:0000000000014112                 db  19h
.rodata:0000000000014113                 db    5
.rodata:0000000000014114                 db    6
.rodata:0000000000014115                 db    7
.rodata:0000000000014116                 db    8
.rodata:0000000000014117                 db    9
.rodata:0000000000014118                 db  0Ah
.rodata:0000000000014119                 db  0Bh
.rodata:000000000001411A                 db  0Ch
.rodata:000000000001411B                 db  0Dh
.rodata:000000000001411C                 db  0Eh
.rodata:000000000001411D                 db  17h
.rodata:000000000001411E                 db  10h
.rodata:000000000001411F                 db  11h
.rodata:0000000000014120                 db  12h
.rodata:0000000000014121                 db  13h
.rodata:0000000000014122                 db  14h
.rodata:0000000000014123                 db  15h
.rodata:0000000000014124                 db  16h
.rodata:0000000000014125                 db  60h ; `
.rodata:0000000000014126                 db  18h
.rodata:0000000000014127                 db    5
.rodata:0000000000014128                 db    6
.rodata:0000000000014129                 db    7
.rodata:000000000001412A                 db    8
.rodata:000000000001412B                 db    9
.rodata:000000000001412C                 db  0Ah
.rodata:000000000001412D                 db    0
.rodata:000000000001412E                 db  0Ch
.rodata:000000000001412F                 db    5
.rodata:0000000000014130                 db    6
.rodata:0000000000014131                 db    7
.rodata:0000000000014132                 db    8
.rodata:0000000000014133                 db    9
.rodata:0000000000014134                 db  0Ah
.rodata:0000000000014135                 db  19h
.rodata:0000000000014136                 db    4
.rodata:0000000000014137                 db  1Bh
.rodata:0000000000014138                 db  1Ah
.rodata:0000000000014139                 db  14h
.rodata:000000000001413A                 db  1Eh
.rodata:000000000001413B                 db  16h
.rodata:000000000001413C                 db    9
.rodata:000000000001413D                 db    9
.rodata:000000000001413E                 db  13h
.rodata:000000000001413F                 db  18h
.rodata:0000000000014140                 db    3
.rodata:0000000000014141                 db  13h
.rodata:0000000000014142                 db  1Ah
.rodata:0000000000014143                 db  14h
.rodata:0000000000014144                 db  14h
.rodata:0000000000014145                 db  14h
.rodata:0000000000014146                 db  3Bh ; ;
.rodata:0000000000014147                 db  1Bh
.rodata:0000000000014148                 db  54h ; T
.rodata:0000000000014149                 db  14h
.rodata:000000000001414A                 db  14h
.rodata:000000000001414B                 db 0FFh
.rodata:000000000001414C                 db  14h
.rodata:000000000001414D                 db  14h
.rodata:000000000001414E                 db  13h
.rodata:000000000001414F                 db 0FFh
.rodata:0000000000014150                 db  19h
.rodata:0000000000014151                 db    0
.rodata:0000000000014152                 db    0
.rodata:0000000000014153                 db    0
.rodata:0000000000014154                 db    0
.rodata:0000000000014155                 db    0
.rodata:0000000000014156                 db    0
.rodata:0000000000014157                 db    0
.rodata:0000000000014158                 db    0
.rodata:0000000000014159                 db    0
.rodata:000000000001415A                 db    0
.rodata:000000000001415B                 db    0
.rodata:000000000001415C                 db    0
.rodata:000000000001415D                 db    0
.rodata:000000000001415E                 db    0
.rodata:000000000001415F                 db    0
.rodata:0000000000014160 yytable         db  4Fh ; O             ; DATA XREF: yyparse+3ED↑o
.rodata:0000000000014160                                         ; yyparse+646↑o ...
.rodata:0000000000014161                 db  43h ; C
.rodata:0000000000014162                 db  44h ; D
.rodata:0000000000014163                 db  45h ; E
.rodata:0000000000014164                 db  46h ; F
.rodata:0000000000014165                 db  47h ; G
.rodata:0000000000014166                 db  48h ; H
.rodata:0000000000014167                 db  3Ah ; :
.rodata:0000000000014168                 db  49h ; I
.rodata:0000000000014169                 db  64h ; d
.rodata:000000000001416A                 db  6Bh ; k
.rodata:000000000001416B                 db  4Ah ; J
.rodata:000000000001416C                 db  4Bh ; K
.rodata:000000000001416D                 db  65h ; e
.rodata:000000000001416E                 db  6Eh ; n
.rodata:000000000001416F                 db  4Ch ; L
.rodata:0000000000014170                 db  31h ; 1
.rodata:0000000000014171                 db  32h ; 2
.rodata:0000000000014172                 db  65h ; e
.rodata:0000000000014173                 db  66h ; f
.rodata:0000000000014174                 db  71h ; q
.rodata:0000000000014175                 db  4Dh ; M
.rodata:0000000000014176                 db  3Bh ; ;
.rodata:0000000000014177                 db  4Eh ; N
.rodata:0000000000014178                 db  3Dh ; =
.rodata:0000000000014179                 db  3Eh ; >
.rodata:000000000001417A                 db  3Fh ; ?
.rodata:000000000001417B                 db  40h ; @
.rodata:000000000001417C                 db  41h ; A
.rodata:000000000001417D                 db  42h ; B
.rodata:000000000001417E                 db  3Dh ; =
.rodata:000000000001417F                 db  3Eh ; >
.rodata:0000000000014180                 db  3Fh ; ?
.rodata:0000000000014181                 db  40h ; @
.rodata:0000000000014182                 db  41h ; A
.rodata:0000000000014183                 db  42h ; B
.rodata:0000000000014184                 db  65h ; e
.rodata:0000000000014185                 db  65h ; e
.rodata:0000000000014186                 db  5Ch ; \
.rodata:0000000000014187                 db  6Fh ; o
.rodata:0000000000014188                 db  5Ah ; Z
.rodata:0000000000014189                 db  5Bh ; [
.rodata:000000000001418A                 db  6Ah ; j
.rodata:000000000001418B                 db  70h ; p
.rodata:000000000001418C                 db  58h ; X
.rodata:000000000001418D                 db  6Fh ; o
.rodata:000000000001418E                 db    5
.rodata:000000000001418F                 db    6
.rodata:0000000000014190                 db    7
.rodata:0000000000014191                 db    8
.rodata:0000000000014192                 db  58h ; X
.rodata:0000000000014193                 db  0Dh
.rodata:0000000000014194                 db  0Eh
.rodata:0000000000014195                 db  0Fh
.rodata:0000000000014196                 db  10h
.rodata:0000000000014197                 db  11h
.rodata:0000000000014198                 db  12h
.rodata:0000000000014199                 db  13h
.rodata:000000000001419A                 db  14h
.rodata:000000000001419B                 db  15h
.rodata:000000000001419C                 db  16h
.rodata:000000000001419D                 db    1
.rodata:000000000001419E                 db  17h
.rodata:000000000001419F                 db  18h
.rodata:00000000000141A0                 db  19h
.rodata:00000000000141A1                 db  1Ah
.rodata:00000000000141A2                 db  1Bh
.rodata:00000000000141A3                 db  1Ch
.rodata:00000000000141A4                 db  1Dh
.rodata:00000000000141A5                 db  4Fh ; O
.rodata:00000000000141A6                 db  1Eh
.rodata:00000000000141A7                 db  33h ; 3
.rodata:00000000000141A8                 db  34h ; 4
.rodata:00000000000141A9                 db  35h ; 5
.rodata:00000000000141AA                 db  36h ; 6
.rodata:00000000000141AB                 db  37h ; 7
.rodata:00000000000141AC                 db  38h ; 8
.rodata:00000000000141AD                 db  0Ch
.rodata:00000000000141AE                 db  39h ; 9
.rodata:00000000000141AF                 db  3Dh ; =
.rodata:00000000000141B0                 db  3Eh ; >
.rodata:00000000000141B1                 db  3Fh ; ?
.rodata:00000000000141B2                 db  40h ; @
.rodata:00000000000141B3                 db  41h ; A
.rodata:00000000000141B4                 db  42h ; B
.rodata:00000000000141B5                 db  3Ch ; <
.rodata:00000000000141B6                 db  30h ; 0
.rodata:00000000000141B7                 db  50h ; P
.rodata:00000000000141B8                 db  2Fh ; /
.rodata:00000000000141B9                 db    6
.rodata:00000000000141BA                 db  53h ; S
.rodata:00000000000141BB                 db    8
.rodata:00000000000141BC                 db  51h ; Q
.rodata:00000000000141BD                 db  52h ; R
.rodata:00000000000141BE                 db  1Ah
.rodata:00000000000141BF                 db  54h ; T
.rodata:00000000000141C0                 db  55h ; U
.rodata:00000000000141C1                 db  56h ; V
.rodata:00000000000141C2                 db  57h ; W
.rodata:00000000000141C3                 db  5Eh ; ^
.rodata:00000000000141C4                 db  5Fh ; _
.rodata:00000000000141C5                 db  60h ; `
.rodata:00000000000141C6                 db  59h ; Y
.rodata:00000000000141C7                 db  69h ; i
.rodata:00000000000141C8                 db  61h ; a
.rodata:00000000000141C9                 db  62h ; b
.rodata:00000000000141CA                 db  63h ; c
.rodata:00000000000141CB                 db    0
.rodata:00000000000141CC                 db  6Ch ; l
.rodata:00000000000141CD                 db  6Dh ; m
.rodata:00000000000141CE                 db  65h ; e
.rodata:00000000000141CF                 db    0
.rodata:00000000000141D0                 db  58h ; X
.rodata:00000000000141D1                 db    0
.rodata:00000000000141D2                 db    0
.rodata:00000000000141D3                 db    0
.rodata:00000000000141D4                 db    0
.rodata:00000000000141D5                 db    0
.rodata:00000000000141D6                 db    0
.rodata:00000000000141D7                 db    0
.rodata:00000000000141D8                 db    0
.rodata:00000000000141D9                 db    0
.rodata:00000000000141DA                 db    0
.rodata:00000000000141DB                 db    0
.rodata:00000000000141DC                 db    0
.rodata:00000000000141DD                 db    0
.rodata:00000000000141DE                 db    0
.rodata:00000000000141DF                 db    0
.rodata:00000000000141E0 yydefgoto       db 0FFh                 ; DATA XREF: yyparse:loc_7003↑o
.rodata:00000000000141E1                 db    2
.rodata:00000000000141E2                 db    3
.rodata:00000000000141E3                 db    4
.rodata:00000000000141E4                 db  1Fh
.rodata:00000000000141E5                 db  20h
.rodata:00000000000141E6                 db  21h ; !
.rodata:00000000000141E7                 db  22h ; "
.rodata:00000000000141E8                 db  23h ; #
.rodata:00000000000141E9                 db  67h ; g
.rodata:00000000000141EA                 db  68h ; h
.rodata:00000000000141EB                 db  24h ; $
.rodata:00000000000141EC                 db  25h ; %
.rodata:00000000000141ED                 db  26h ; &
.rodata:00000000000141EE                 db  27h ; '
.rodata:00000000000141EF                 db  28h ; (
.rodata:00000000000141F0                 db  29h ; )
.rodata:00000000000141F1                 db  2Ah ; *
.rodata:00000000000141F2                 db  2Bh ; +
.rodata:00000000000141F3                 db  2Ch ; ,
.rodata:00000000000141F4                 db    9
.rodata:00000000000141F5                 db  0Ah
.rodata:00000000000141F6                 db  0Bh
.rodata:00000000000141F7                 db  2Dh ; -
.rodata:00000000000141F8                 db  2Eh ; .
.rodata:00000000000141F9                 db  5Dh ; ]
.rodata:00000000000141FA                 db    0
.rodata:00000000000141FB                 db    0
.rodata:00000000000141FC                 db    0
.rodata:00000000000141FD                 db    0
.rodata:00000000000141FE                 db    0
.rodata:00000000000141FF                 db    0
.rodata:0000000000014200 yypgoto         db 0A3h                 ; DATA XREF: yyparse+343↑o
.rodata:0000000000014201                 db 0A3h
.rodata:0000000000014202                 db 0A3h
.rodata:0000000000014203                 db 0A3h
.rodata:0000000000014204                 db 0A3h
.rodata:0000000000014205                 db 0A3h
.rodata:0000000000014206                 db 0A3h
.rodata:0000000000014207                 db 0A3h
.rodata:0000000000014208                 db  14h
.rodata:0000000000014209                 db 0BCh
.rodata:000000000001420A                 db 0E5h
.rodata:000000000001420B                 db 0A3h
.rodata:000000000001420C                 db 0A3h
.rodata:000000000001420D                 db 0A3h
.rodata:000000000001420E                 db 0A3h
.rodata:000000000001420F                 db 0A3h
.rodata:0000000000014210                 db 0A3h
.rodata:0000000000014211                 db 0A3h
.rodata:0000000000014212                 db  3Ch ; <
.rodata:0000000000014213                 db 0A3h
.rodata:0000000000014214                 db 0A3h
.rodata:0000000000014215                 db 0A3h
.rodata:0000000000014216                 db 0A4h
.rodata:0000000000014217                 db 0A3h
.rodata:0000000000014218                 db 0A3h
.rodata:0000000000014219                 db  2Bh ; +
.rodata:000000000001421A                 db    0
.rodata:000000000001421B                 db    0
.rodata:000000000001421C                 db    0
.rodata:000000000001421D                 db    0
.rodata:000000000001421E                 db    0
.rodata:000000000001421F                 db    0
.rodata:0000000000014220 yydefact        db    5                 ; DATA XREF: yyparse:loc_6D20↑o
.rodata:0000000000014221                 db    0
.rodata:0000000000014222                 db    0
.rodata:0000000000014223                 db    2
.rodata:0000000000014224                 db    3
.rodata:0000000000014225                 db  55h ; U
.rodata:0000000000014226                 db  57h ; W
.rodata:0000000000014227                 db  54h ; T
.rodata:0000000000014228                 db  56h ; V
.rodata:0000000000014229                 db    4
.rodata:000000000001422A                 db  52h ; R
.rodata:000000000001422B                 db  53h ; S
.rodata:000000000001422C                 db    1
.rodata:000000000001422D                 db  38h ; 8
.rodata:000000000001422E                 db  3Bh ; ;
.rodata:000000000001422F                 db  41h ; A
.rodata:0000000000014230                 db  44h ; D
.rodata:0000000000014231                 db  49h ; I
.rodata:0000000000014232                 db  3Eh ; >
.rodata:0000000000014233                 db  51h ; Q
.rodata:0000000000014234                 db  25h ; %
.rodata:0000000000014235                 db  23h ; #
.rodata:0000000000014236                 db  1Ch
.rodata:0000000000014237                 db    0
.rodata:0000000000014238                 db    0
.rodata:0000000000014239                 db  1Eh
.rodata:000000000001423A                 db    0
.rodata:000000000001423B                 db  58h ; X
.rodata:000000000001423C                 db    0
.rodata:000000000001423D                 db    0
.rodata:000000000001423E                 db  1Fh
.rodata:000000000001423F                 db    6
.rodata:0000000000014240                 db    7
.rodata:0000000000014241                 db  10h
.rodata:0000000000014242                 db    8
.rodata:0000000000014243                 db  15h
.rodata:0000000000014244                 db    9
.rodata:0000000000014245                 db  0Ah
.rodata:0000000000014246                 db  0Ch
.rodata:0000000000014247                 db  0Bh
.rodata:0000000000014248                 db  31h ; 1
.rodata:0000000000014249                 db  0Dh
.rodata:000000000001424A                 db  34h ; 4
.rodata:000000000001424B                 db  4Ah ; J
.rodata:000000000001424C                 db  35h ; 5
.rodata:000000000001424D                 db  0Eh
.rodata:000000000001424E                 db  0Fh
.rodata:000000000001424F                 db  26h ; &
.rodata:0000000000014250                 db  1Dh
.rodata:0000000000014251                 db    0
.rodata:0000000000014252                 db  2Dh ; -
.rodata:0000000000014253                 db  36h ; 6
.rodata:0000000000014254                 db  39h ; 9
.rodata:0000000000014255                 db  3Fh ; ?
.rodata:0000000000014256                 db  42h ; B
.rodata:0000000000014257                 db  45h ; E
.rodata:0000000000014258                 db  3Ch ; <
.rodata:0000000000014259                 db  27h ; '
.rodata:000000000001425A                 db  24h ; $
.rodata:000000000001425B                 db  5Ah ; Z
.rodata:000000000001425C                 db  20h
.rodata:000000000001425D                 db  4Bh ; K
.rodata:000000000001425E                 db  4Ch ; L
.rodata:000000000001425F                 db  4Eh ; N
.rodata:0000000000014260                 db  4Fh ; O
.rodata:0000000000014261                 db  50h ; P
.rodata:0000000000014262                 db  4Dh ; M
.rodata:0000000000014263                 db  37h ; 7
.rodata:0000000000014264                 db  3Ah ; :
.rodata:0000000000014265                 db  40h ; @
.rodata:0000000000014266                 db  43h ; C
.rodata:0000000000014267                 db  46h ; F
.rodata:0000000000014268                 db  3Dh ; =
.rodata:0000000000014269                 db  28h ; (
.rodata:000000000001426A                 db  12h
.rodata:000000000001426B                 db  2Fh ; /
.rodata:000000000001426C                 db  5Ah ; Z
.rodata:000000000001426D                 db    0
.rodata:000000000001426E                 db    0
.rodata:000000000001426F                 db  16h
.rodata:0000000000014270                 db  59h ; Y
.rodata:0000000000014271                 db  47h ; G
.rodata:0000000000014272                 db  48h ; H
.rodata:0000000000014273                 db  21h ; !
.rodata:0000000000014274                 db    0
.rodata:0000000000014275                 db  33h ; 3
.rodata:0000000000014276                 db  2Ch ; ,
.rodata:0000000000014277                 db    0
.rodata:0000000000014278                 db    0
.rodata:0000000000014279                 db  22h ; "
.rodata:000000000001427A                 db  2Bh ; +
.rodata:000000000001427B                 db  30h ; 0
.rodata:000000000001427C                 db  32h ; 2
.rodata:000000000001427D                 db  1Bh
.rodata:000000000001427E                 db  19h
.rodata:000000000001427F                 db  29h ; )
.rodata:0000000000014280                 db    0
.rodata:0000000000014281                 db  11h
.rodata:0000000000014282                 db  2Eh ; .
.rodata:0000000000014283                 db  5Bh ; [
.rodata:0000000000014284                 db  13h
.rodata:0000000000014285                 db  5Ah ; Z
.rodata:0000000000014286                 db    0
.rodata:0000000000014287                 db  17h
.rodata:0000000000014288                 db  1Ah
.rodata:0000000000014289                 db    0
.rodata:000000000001428A                 db    0
.rodata:000000000001428B                 db  19h
.rodata:000000000001428C                 db  2Ah ; *
.rodata:000000000001428D                 db  19h
.rodata:000000000001428E                 db  14h
.rodata:000000000001428F                 db  18h
.rodata:0000000000014290                 db    0
.rodata:0000000000014291                 db  19h
.rodata:0000000000014292                 db    0
.rodata:0000000000014293                 db    0
.rodata:0000000000014294                 db    0
.rodata:0000000000014295                 db    0
.rodata:0000000000014296                 db    0
.rodata:0000000000014297                 db    0
.rodata:0000000000014298                 db    0
.rodata:0000000000014299                 db    0
.rodata:000000000001429A                 db    0
.rodata:000000000001429B                 db    0
.rodata:000000000001429C                 db    0
.rodata:000000000001429D                 db    0
.rodata:000000000001429E                 db    0
.rodata:000000000001429F                 db    0
.rodata:00000000000142A0 yypact          db  26h ; &             ; DATA XREF: yyparse+3AD↑o
.rodata:00000000000142A0                                         ; yyparse:loc_705F↑o
.rodata:00000000000142A1                 db  1Bh
.rodata:00000000000142A2                 db  4Dh ; M
.rodata:00000000000142A3                 db 0A3h
.rodata:00000000000142A4                 db  2Eh ; .
.rodata:00000000000142A5                 db 0A3h
.rodata:00000000000142A6                 db 0A3h
.rodata:00000000000142A7                 db 0A3h
.rodata:00000000000142A8                 db 0A3h
.rodata:00000000000142A9                 db 0A3h
.rodata:00000000000142AA                 db 0A3h
.rodata:00000000000142AB                 db 0A3h
.rodata:00000000000142AC                 db 0A3h
.rodata:00000000000142AD                 db 0A3h
.rodata:00000000000142AE                 db 0A3h
.rodata:00000000000142AF                 db 0A3h
.rodata:00000000000142B0                 db 0A3h
.rodata:00000000000142B1                 db 0A3h
.rodata:00000000000142B2                 db 0A3h
.rodata:00000000000142B3                 db 0A3h
.rodata:00000000000142B4                 db  3Eh ; >
.rodata:00000000000142B5                 db 0A3h
.rodata:00000000000142B6                 db  52h ; R
.rodata:00000000000142B7                 db 0FDh
.rodata:00000000000142B8                 db  42h ; B
.rodata:00000000000142B9                 db    3
.rodata:00000000000142BA                 db  4Ah ; J
.rodata:00000000000142BB                 db 0FCh
.rodata:00000000000142BC                 db  53h ; S
.rodata:00000000000142BD                 db  54h ; T
.rodata:00000000000142BE                 db  4Bh ; K
.rodata:00000000000142BF                 db 0A3h
.rodata:00000000000142C0                 db 0A3h
.rodata:00000000000142C1                 db 0A3h
.rodata:00000000000142C2                 db 0A3h
.rodata:00000000000142C3                 db 0A3h
.rodata:00000000000142C4                 db 0A3h
.rodata:00000000000142C5                 db 0A3h
.rodata:00000000000142C6                 db 0A3h
.rodata:00000000000142C7                 db 0A3h
.rodata:00000000000142C8                 db  47h ; G
.rodata:00000000000142C9                 db 0A3h
.rodata:00000000000142CA                 db  5Dh ; ]
.rodata:00000000000142CB                 db 0A3h
.rodata:00000000000142CC                 db 0A3h
.rodata:00000000000142CD                 db 0A3h
.rodata:00000000000142CE                 db 0A3h
.rodata:00000000000142CF                 db 0A3h
.rodata:00000000000142D0                 db 0A3h
.rodata:00000000000142D1                 db  4Eh ; N
.rodata:00000000000142D2                 db  48h ; H
.rodata:00000000000142D3                 db 0A3h
.rodata:00000000000142D4                 db 0A3h
.rodata:00000000000142D5                 db 0A3h
.rodata:00000000000142D6                 db 0A3h
.rodata:00000000000142D7                 db 0A3h
.rodata:00000000000142D8                 db 0A3h
.rodata:00000000000142D9                 db 0A3h
.rodata:00000000000142DA                 db 0A3h
.rodata:00000000000142DB                 db  19h
.rodata:00000000000142DC                 db 0A3h
.rodata:00000000000142DD                 db 0A3h
.rodata:00000000000142DE                 db 0A3h
.rodata:00000000000142DF                 db 0A3h
.rodata:00000000000142E0                 db 0A3h
.rodata:00000000000142E1                 db 0A3h
.rodata:00000000000142E2                 db 0A3h
.rodata:00000000000142E3                 db 0A3h
.rodata:00000000000142E4                 db 0A3h
.rodata:00000000000142E5                 db 0A3h
.rodata:00000000000142E6                 db 0A3h
.rodata:00000000000142E7                 db 0A3h
.rodata:00000000000142E8                 db 0A3h
.rodata:00000000000142E9                 db 0A3h
.rodata:00000000000142EA                 db 0A3h
.rodata:00000000000142EB                 db  15h
.rodata:00000000000142EC                 db  13h
.rodata:00000000000142ED                 db  4Fh ; O
.rodata:00000000000142EE                 db  50h ; P
.rodata:00000000000142EF                 db 0A3h
.rodata:00000000000142F0                 db 0A3h
.rodata:00000000000142F1                 db 0A3h
.rodata:00000000000142F2                 db 0A3h
.rodata:00000000000142F3                 db 0A3h
.rodata:00000000000142F4                 db  51h ; Q
.rodata:00000000000142F5                 db 0A3h
.rodata:00000000000142F6                 db 0A3h
.rodata:00000000000142F7                 db  55h ; U
.rodata:00000000000142F8                 db  56h ; V
.rodata:00000000000142F9                 db 0A3h
.rodata:00000000000142FA                 db 0A3h
.rodata:00000000000142FB                 db 0A3h
.rodata:00000000000142FC                 db 0A3h
.rodata:00000000000142FD                 db 0A3h
.rodata:00000000000142FE                 db 0FAh
.rodata:00000000000142FF                 db  4Ch ; L
.rodata:0000000000014300                 db  11h
.rodata:0000000000014301                 db 0A3h
.rodata:0000000000014302                 db 0A3h
.rodata:0000000000014303                 db 0A3h
.rodata:0000000000014304                 db 0A3h
.rodata:0000000000014305                 db  57h ; W
.rodata:0000000000014306                 db  45h ; E
.rodata:0000000000014307                 db 0A3h
.rodata:0000000000014308                 db 0A3h
.rodata:0000000000014309                 db  58h ; X
.rodata:000000000001430A                 db  59h ; Y
.rodata:000000000001430B                 db 0FFh
.rodata:000000000001430C                 db 0A3h
.rodata:000000000001430D                 db  12h
.rodata:000000000001430E                 db 0A3h
.rodata:000000000001430F                 db 0A3h
.rodata:0000000000014310                 db  45h ; E
.rodata:0000000000014311                 db  5Bh ; [
.rodata:0000000000014312                 db    0
.rodata:0000000000014313                 db    0
.rodata:0000000000014314                 db    0
.rodata:0000000000014315                 db    0
.rodata:0000000000014316                 db    0
.rodata:0000000000014317                 db    0
.rodata:0000000000014318                 db    0
.rodata:0000000000014319                 db    0
.rodata:000000000001431A                 db    0
.rodata:000000000001431B                 db    0
.rodata:000000000001431C                 db    0
.rodata:000000000001431D                 db    0
.rodata:000000000001431E                 db    0
.rodata:000000000001431F                 db    0
.rodata:0000000000014320 yytranslate     db    0                 ; DATA XREF: yyparse:loc_7350↑o
.rodata:0000000000014321                 db    2
.rodata:0000000000014322                 db    2
.rodata:0000000000014323                 db    2
.rodata:0000000000014324                 db    2
.rodata:0000000000014325                 db    2
.rodata:0000000000014326                 db    2
.rodata:0000000000014327                 db    2
.rodata:0000000000014328                 db    2
.rodata:0000000000014329                 db    2
.rodata:000000000001432A                 db    2
.rodata:000000000001432B                 db    2
.rodata:000000000001432C                 db    2
.rodata:000000000001432D                 db    2
.rodata:000000000001432E                 db    2
.rodata:000000000001432F                 db    2
.rodata:0000000000014330                 db    2
.rodata:0000000000014331                 db    2
.rodata:0000000000014332                 db    2
.rodata:0000000000014333                 db    2
.rodata:0000000000014334                 db    2
.rodata:0000000000014335                 db    2
.rodata:0000000000014336                 db    2
.rodata:0000000000014337                 db    2
.rodata:0000000000014338                 db    2
.rodata:0000000000014339                 db    2
.rodata:000000000001433A                 db    2
.rodata:000000000001433B                 db    2
.rodata:000000000001433C                 db    2
.rodata:000000000001433D                 db    2
.rodata:000000000001433E                 db    2
.rodata:000000000001433F                 db    2
.rodata:0000000000014340                 db    2
.rodata:0000000000014341                 db    2
.rodata:0000000000014342                 db    2
.rodata:0000000000014343                 db    2
.rodata:0000000000014344                 db    2
.rodata:0000000000014345                 db    2
.rodata:0000000000014346                 db    2
.rodata:0000000000014347                 db    2
.rodata:0000000000014348                 db    2
.rodata:0000000000014349                 db    2
.rodata:000000000001434A                 db    2
.rodata:000000000001434B                 db    2
.rodata:000000000001434C                 db  1Ah
.rodata:000000000001434D                 db    2
.rodata:000000000001434E                 db    2
.rodata:000000000001434F                 db  1Bh
.rodata:0000000000014350                 db    2
.rodata:0000000000014351                 db    2
.rodata:0000000000014352                 db    2
.rodata:0000000000014353                 db    2
.rodata:0000000000014354                 db    2
.rodata:0000000000014355                 db    2
.rodata:0000000000014356                 db    2
.rodata:0000000000014357                 db    2
.rodata:0000000000014358                 db    2
.rodata:0000000000014359                 db    2
.rodata:000000000001435A                 db  19h
.rodata:000000000001435B                 db    2
.rodata:000000000001435C                 db    2
.rodata:000000000001435D                 db    2
.rodata:000000000001435E                 db    2
.rodata:000000000001435F                 db    2
.rodata:0000000000014360                 db  17h
.rodata:0000000000014361                 db    2
.rodata:0000000000014362                 db    2
.rodata:0000000000014363                 db    2
.rodata:0000000000014364                 db    2
.rodata:0000000000014365                 db    2
.rodata:0000000000014366                 db    2
.rodata:0000000000014367                 db    2
.rodata:0000000000014368                 db    2
.rodata:0000000000014369                 db    2
.rodata:000000000001436A                 db    2
.rodata:000000000001436B                 db    2
.rodata:000000000001436C                 db    2
.rodata:000000000001436D                 db    2
.rodata:000000000001436E                 db    2
.rodata:000000000001436F                 db    2
.rodata:0000000000014370                 db    2
.rodata:0000000000014371                 db    2
.rodata:0000000000014372                 db    2
.rodata:0000000000014373                 db    2
.rodata:0000000000014374                 db  18h
.rodata:0000000000014375                 db    2
.rodata:0000000000014376                 db    2
.rodata:0000000000014377                 db    2
.rodata:0000000000014378                 db    2
.rodata:0000000000014379                 db    2
.rodata:000000000001437A                 db    2
.rodata:000000000001437B                 db    2
.rodata:000000000001437C                 db    2
.rodata:000000000001437D                 db    2
.rodata:000000000001437E                 db    2
.rodata:000000000001437F                 db    2
.rodata:0000000000014380                 db    2
.rodata:0000000000014381                 db    2
.rodata:0000000000014382                 db    2
.rodata:0000000000014383                 db    2
.rodata:0000000000014384                 db    2
.rodata:0000000000014385                 db    2
.rodata:0000000000014386                 db    2
.rodata:0000000000014387                 db    2
.rodata:0000000000014388                 db    2
.rodata:0000000000014389                 db    2
.rodata:000000000001438A                 db    2
.rodata:000000000001438B                 db    2
.rodata:000000000001438C                 db    2
.rodata:000000000001438D                 db    2
.rodata:000000000001438E                 db    2
.rodata:000000000001438F                 db    2
.rodata:0000000000014390                 db    2
.rodata:0000000000014391                 db    2
.rodata:0000000000014392                 db    2
.rodata:0000000000014393                 db    2
.rodata:0000000000014394                 db    2
.rodata:0000000000014395                 db    2
.rodata:0000000000014396                 db    2
.rodata:0000000000014397                 db    2
.rodata:0000000000014398                 db    2
.rodata:0000000000014399                 db    2
.rodata:000000000001439A                 db    2
.rodata:000000000001439B                 db    2
.rodata:000000000001439C                 db    2
.rodata:000000000001439D                 db    2
.rodata:000000000001439E                 db    2
.rodata:000000000001439F                 db    2
.rodata:00000000000143A0                 db    2
.rodata:00000000000143A1                 db    2
.rodata:00000000000143A2                 db    2
.rodata:00000000000143A3                 db    2
.rodata:00000000000143A4                 db    2
.rodata:00000000000143A5                 db    2
.rodata:00000000000143A6                 db    2
.rodata:00000000000143A7                 db    2
.rodata:00000000000143A8                 db    2
.rodata:00000000000143A9                 db    2
.rodata:00000000000143AA                 db    2
.rodata:00000000000143AB                 db    2
.rodata:00000000000143AC                 db    2
.rodata:00000000000143AD                 db    2
.rodata:00000000000143AE                 db    2
.rodata:00000000000143AF                 db    2
.rodata:00000000000143B0                 db    2
.rodata:00000000000143B1                 db    2
.rodata:00000000000143B2                 db    2
.rodata:00000000000143B3                 db    2
.rodata:00000000000143B4                 db    2
.rodata:00000000000143B5                 db    2
.rodata:00000000000143B6                 db    2
.rodata:00000000000143B7                 db    2
.rodata:00000000000143B8                 db    2
.rodata:00000000000143B9                 db    2
.rodata:00000000000143BA                 db    2
.rodata:00000000000143BB                 db    2
.rodata:00000000000143BC                 db    2
.rodata:00000000000143BD                 db    2
.rodata:00000000000143BE                 db    2
.rodata:00000000000143BF                 db    2
.rodata:00000000000143C0                 db    2
.rodata:00000000000143C1                 db    2
.rodata:00000000000143C2                 db    2
.rodata:00000000000143C3                 db    2
.rodata:00000000000143C4                 db    2
.rodata:00000000000143C5                 db    2
.rodata:00000000000143C6                 db    2
.rodata:00000000000143C7                 db    2
.rodata:00000000000143C8                 db    2
.rodata:00000000000143C9                 db    2
.rodata:00000000000143CA                 db    2
.rodata:00000000000143CB                 db    2
.rodata:00000000000143CC                 db    2
.rodata:00000000000143CD                 db    2
.rodata:00000000000143CE                 db    2
.rodata:00000000000143CF                 db    2
.rodata:00000000000143D0                 db    2
.rodata:00000000000143D1                 db    2
.rodata:00000000000143D2                 db    2
.rodata:00000000000143D3                 db    2
.rodata:00000000000143D4                 db    2
.rodata:00000000000143D5                 db    2
.rodata:00000000000143D6                 db    2
.rodata:00000000000143D7                 db    2
.rodata:00000000000143D8                 db    2
.rodata:00000000000143D9                 db    2
.rodata:00000000000143DA                 db    2
.rodata:00000000000143DB                 db    2
.rodata:00000000000143DC                 db    2
.rodata:00000000000143DD                 db    2
.rodata:00000000000143DE                 db    2
.rodata:00000000000143DF                 db    2
.rodata:00000000000143E0                 db    2
.rodata:00000000000143E1                 db    2
.rodata:00000000000143E2                 db    2
.rodata:00000000000143E3                 db    2
.rodata:00000000000143E4                 db    2
.rodata:00000000000143E5                 db    2
.rodata:00000000000143E6                 db    2
.rodata:00000000000143E7                 db    2
.rodata:00000000000143E8                 db    2
.rodata:00000000000143E9                 db    2
.rodata:00000000000143EA                 db    2
.rodata:00000000000143EB                 db    2
.rodata:00000000000143EC                 db    2
.rodata:00000000000143ED                 db    2
.rodata:00000000000143EE                 db    2
.rodata:00000000000143EF                 db    2
.rodata:00000000000143F0                 db    2
.rodata:00000000000143F1                 db    2
.rodata:00000000000143F2                 db    2
.rodata:00000000000143F3                 db    2
.rodata:00000000000143F4                 db    2
.rodata:00000000000143F5                 db    2
.rodata:00000000000143F6                 db    2
.rodata:00000000000143F7                 db    2
.rodata:00000000000143F8                 db    2
.rodata:00000000000143F9                 db    2
.rodata:00000000000143FA                 db    2
.rodata:00000000000143FB                 db    2
.rodata:00000000000143FC                 db    2
.rodata:00000000000143FD                 db    2
.rodata:00000000000143FE                 db    2
.rodata:00000000000143FF                 db    2
.rodata:0000000000014400                 db    2
.rodata:0000000000014401                 db    2
.rodata:0000000000014402                 db    2
.rodata:0000000000014403                 db    2
.rodata:0000000000014404                 db    2
.rodata:0000000000014405                 db    2
.rodata:0000000000014406                 db    2
.rodata:0000000000014407                 db    2
.rodata:0000000000014408                 db    2
.rodata:0000000000014409                 db    2
.rodata:000000000001440A                 db    2
.rodata:000000000001440B                 db    2
.rodata:000000000001440C                 db    2
.rodata:000000000001440D                 db    2
.rodata:000000000001440E                 db    2
.rodata:000000000001440F                 db    2
.rodata:0000000000014410                 db    2
.rodata:0000000000014411                 db    2
.rodata:0000000000014412                 db    2
.rodata:0000000000014413                 db    2
.rodata:0000000000014414                 db    2
.rodata:0000000000014415                 db    2
.rodata:0000000000014416                 db    2
.rodata:0000000000014417                 db    2
.rodata:0000000000014418                 db    2
.rodata:0000000000014419                 db    2
.rodata:000000000001441A                 db    2
.rodata:000000000001441B                 db    2
.rodata:000000000001441C                 db    2
.rodata:000000000001441D                 db    2
.rodata:000000000001441E                 db    2
.rodata:000000000001441F                 db    2
.rodata:0000000000014420                 db    1
.rodata:0000000000014421                 db    2
.rodata:0000000000014422                 db    3
.rodata:0000000000014423                 db    4
.rodata:0000000000014424                 db    5
.rodata:0000000000014425                 db    6
.rodata:0000000000014426                 db    7
.rodata:0000000000014427                 db    8
.rodata:0000000000014428                 db    9
.rodata:0000000000014429                 db  0Ah
.rodata:000000000001442A                 db  0Bh
.rodata:000000000001442B                 db  0Ch
.rodata:000000000001442C                 db  0Dh
.rodata:000000000001442D                 db  0Eh
.rodata:000000000001442E                 db  0Fh
.rodata:000000000001442F                 db  10h
.rodata:0000000000014430                 db  11h
.rodata:0000000000014431                 db  12h
.rodata:0000000000014432                 db  13h
.rodata:0000000000014433                 db  14h
.rodata:0000000000014434                 db  15h
.rodata:0000000000014435                 db  16h
.rodata:0000000000014436                 db    0
.rodata:0000000000014437                 db    0
.rodata:0000000000014438 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000014438                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000014470 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000014478 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000001447C unk_1447C       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000001447D                 db  80h
.rodata:000000000001447E                 db  98h
.rodata:000000000001447F                 db    0
.rodata:0000000000014480 unk_14480       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000014481                 db  80h
.rodata:0000000000014482                 db  99h
.rodata:0000000000014483                 db    0
.rodata:0000000000014484 unk_14484       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000014485                 db    7
.rodata:0000000000014486                 db  65h ; e
.rodata:0000000000014487                 db    0
.rodata:0000000000014488 unk_14488       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000014489                 db 0AFh
.rodata:000000000001448A                 db    0
.rodata:000000000001448B ; const char asc_1448B[2]
.rodata:000000000001448B asc_1448B       db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000001448B                                         ; quotearg_buffer_restyled:loc_AC63↑o ...
.rodata:000000000001448D ; const char asc_1448D[2]
.rodata:000000000001448D asc_1448D       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000001448D                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000001448F aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000014497 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000217B48↓o
.rodata:000000000001449D aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000217B50↓o
.rodata:00000000000144AA aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000217B58↓o
.rodata:00000000000144AA                                         ; .data.rel.ro:0000000000217B78↓o
.rodata:00000000000144B7 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000144B7                                         ; DATA XREF: .data.rel.ro:0000000000217B60↓o
.rodata:00000000000144CB aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000217B70↓o
.rodata:00000000000144D3 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000217B88↓o
.rodata:00000000000144DB                 align 20h
.rodata:00000000000144E0 jpt_AC41        dd offset loc_B9EA - 144E0h
.rodata:00000000000144E0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000144E0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000144E0                 dd offset loc_AC43 - 144E0h ; jump table for switch statement
.rodata:00000000000144E0                 dd offset loc_BC18 - 144E0h
.rodata:00000000000144E0                 dd offset loc_BA24 - 144E0h
.rodata:00000000000144E0                 dd offset loc_B814 - 144E0h
.rodata:00000000000144E0                 dd offset loc_B870 - 144E0h
.rodata:00000000000144E0                 dd offset loc_B8C5 - 144E0h
.rodata:00000000000144E0                 dd offset loc_B90A - 144E0h
.rodata:00000000000144E0                 dd offset loc_B944 - 144E0h
.rodata:00000000000144E0                 dd offset loc_B944 - 144E0h
.rodata:00000000000144E0                 dd offset loc_B944 - 144E0h
.rodata:000000000001450C jpt_AD9E        dd offset loc_AFC0 - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000001450C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch ; jump table for switch statement
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset loc_B000 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AF08 - 1450Ch, offset loc_AEC8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B090 - 1450Ch, offset loc_B080 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B070 - 1450Ch, offset loc_B060 - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset def_AD9E - 1450Ch
.rodata:000000000001450C                 dd offset loc_B050 - 1450Ch, offset loc_B040 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B040 - 1450Ch, offset loc_B010 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B040 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B040 - 1450Ch, offset loc_AEA3 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B040 - 1450Ch, offset loc_B040 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B040 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_B040 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B040 - 1450Ch, offset loc_B040 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B040 - 1450Ch, offset loc_AE73 - 1450Ch
.rodata:000000000001450C                 dd offset def_AD9E - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_B040 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AF18 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B040 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B040 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_AFE8 - 1450Ch
.rodata:000000000001450C                 dd offset loc_AFE8 - 1450Ch, offset loc_ADA3 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B040 - 1450Ch, offset loc_ADA3 - 1450Ch
.rodata:000000000001450C                 dd offset loc_B010 - 1450Ch
.rodata:0000000000014708 jpt_B12A        dd offset loc_B190 - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000014708                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h ; jump table for switch statement
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset loc_B180 - 14708h
.rodata:0000000000014708                 dd offset loc_B2D0 - 14708h, offset loc_B2B8 - 14708h
.rodata:0000000000014708                 dd offset loc_B168 - 14708h, offset loc_B2A8 - 14708h
.rodata:0000000000014708                 dd offset loc_B150 - 14708h, offset loc_B290 - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset def_B12A - 14708h
.rodata:0000000000014708                 dd offset loc_B278 - 14708h, offset loc_B260 - 14708h
.rodata:0000000000014708                 dd offset loc_B260 - 14708h, offset loc_B248 - 14708h
.rodata:0000000000014708                 dd offset loc_B260 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B260 - 14708h, offset loc_AEA0 - 14708h
.rodata:0000000000014708                 dd offset loc_B260 - 14708h, offset loc_B260 - 14708h
.rodata:0000000000014708                 dd offset loc_B260 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B260 - 14708h
.rodata:0000000000014708                 dd offset loc_B260 - 14708h, offset loc_B260 - 14708h
.rodata:0000000000014708                 dd offset loc_B260 - 14708h, offset loc_AE70 - 14708h
.rodata:0000000000014708                 dd offset def_B12A - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B260 - 14708h
.rodata:0000000000014708                 dd offset loc_B130 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B260 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B260 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_B230 - 14708h
.rodata:0000000000014708                 dd offset loc_B230 - 14708h, offset loc_ADA0 - 14708h
.rodata:0000000000014708                 dd offset loc_B260 - 14708h, offset loc_ADA0 - 14708h
.rodata:0000000000014708                 dd offset loc_B248 - 14708h
.rodata:0000000000014904                 align 20h
.rodata:0000000000014920                 public quoting_style_vals
.rodata:0000000000014920 quoting_style_vals db    0
.rodata:0000000000014921                 db    0
.rodata:0000000000014922                 db    0
.rodata:0000000000014923                 db    0
.rodata:0000000000014924                 db    1
.rodata:0000000000014925                 db    0
.rodata:0000000000014926                 db    0
.rodata:0000000000014927                 db    0
.rodata:0000000000014928                 db    2
.rodata:0000000000014929                 db    0
.rodata:000000000001492A                 db    0
.rodata:000000000001492B                 db    0
.rodata:000000000001492C                 db    3
.rodata:000000000001492D                 db    0
.rodata:000000000001492E                 db    0
.rodata:000000000001492F                 db    0
.rodata:0000000000014930                 db    4
.rodata:0000000000014931                 db    0
.rodata:0000000000014932                 db    0
.rodata:0000000000014933                 db    0
.rodata:0000000000014934                 db    5
.rodata:0000000000014935                 db    0
.rodata:0000000000014936                 db    0
.rodata:0000000000014937                 db    0
.rodata:0000000000014938                 db    6
.rodata:0000000000014939                 db    0
.rodata:000000000001493A                 db    0
.rodata:000000000001493B                 db    0
.rodata:000000000001493C                 db    7
.rodata:000000000001493D                 db    0
.rodata:000000000001493E                 db    0
.rodata:000000000001493F                 db    0
.rodata:0000000000014940                 db    8
.rodata:0000000000014941                 db    0
.rodata:0000000000014942                 db    0
.rodata:0000000000014943                 db    0
.rodata:0000000000014944                 db    9
.rodata:0000000000014945                 db    0
.rodata:0000000000014946                 db    0
.rodata:0000000000014947                 db    0
.rodata:0000000000014948 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000014954 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000001495B ; const char aC[]
.rodata:000000000001495B aC              db '(C)',0              ; DATA XREF: version_etc_arn:loc_C81C↑o
.rodata:000000000001495F ; const char aWrittenByS[]
.rodata:000000000001495F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000001495F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000001496F ; const char aWrittenBySAndS[]
.rodata:000000000001496F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000001496F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000014986 ; const char aWrittenBySSAnd[]
.rodata:0000000000014986 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000014986                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000149A2 ; const char aReportBugsToS[]
.rodata:00000000000149A2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000149A2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000149B7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000149B7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000149CD ; const char aSHomePageS[]
.rodata:00000000000149CD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000149CD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000149E1                 align 8
.rodata:00000000000149E8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000149E8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000149E8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000149E8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000149E8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000149E8                 db '.',0Ah
.rodata:00000000000149E8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000149E8                 db 0Ah,0
.rodata:0000000000014AB4                 align 8
.rodata:0000000000014AB8 ; const char aWrittenBySSSAn[]
.rodata:0000000000014AB8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014AB8                                         ; DATA XREF: version_etc_arn:loc_CA70↑o
.rodata:0000000000014AB8                 db 'and %s.',0Ah,0
.rodata:0000000000014AD8 ; const char aWrittenBySSSSA[]
.rodata:0000000000014AD8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014AD8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000014AD8                 db '%s, and %s.',0Ah,0
.rodata:0000000000014AFC                 align 20h
.rodata:0000000000014B00 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000014B00 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014B00                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000014B00                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000014B28 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000014B28 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014B28                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000014B28                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000014B54                 align 8
.rodata:0000000000014B58 ; const char aWrittenBySSSSS[]
.rodata:0000000000014B58 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014B58                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000014B58                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000014B58                 db 'and %s.',0Ah,0
.rodata:0000000000014B88 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000014B88 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014B88                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000014B88                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000014B88                 db '%s, and %s.',0Ah,0
.rodata:0000000000014BBC                 align 20h
.rodata:0000000000014BC0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000014BC0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000014BC0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000014BC0                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000014BFC                 align 20h
.rodata:0000000000014C00 ; const char aGeneralHelpUsi[]
.rodata:0000000000014C00 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000014C00                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000014C00                 db 0
.rodata:0000000000014C41                 align 8
.rodata:0000000000014C48 jpt_C884        dd offset loc_C906 - 14C48h
.rodata:0000000000014C48                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000014C48                                         ; version_etc_arn+9D↑r
.rodata:0000000000014C48                 dd offset loc_C998 - 14C48h ; jump table for switch statement
.rodata:0000000000014C48                 dd offset loc_C9D8 - 14C48h
.rodata:0000000000014C48                 dd offset loc_CA20 - 14C48h
.rodata:0000000000014C48                 dd offset loc_CA70 - 14C48h
.rodata:0000000000014C48                 dd offset loc_CAC8 - 14C48h
.rodata:0000000000014C48                 dd offset loc_CAF8 - 14C48h
.rodata:0000000000014C48                 dd offset loc_CB60 - 14C48h
.rodata:0000000000014C48                 dd offset loc_C890 - 14C48h
.rodata:0000000000014C48                 dd offset loc_C940 - 14C48h
.rodata:0000000000014C70                 align 20h
.rodata:0000000000014C80                 public version_etc_copyright
.rodata:0000000000014C80 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000014C80                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000014CAF ; const char aMemoryExhauste[]
.rodata:0000000000014CAF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000014CC0 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_D980↑o
.rodata:0000000000014CC0                                         ; .data.rel.ro:00000000002173A0↓o
.rodata:0000000000014CC6 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000014CC6                                         ; locale_charset:loc_D9D0↑o ...
.rodata:0000000000014CCC jpt_DC8F        dd offset loc_EC71 - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                                         ; DATA XREF: __strftime_internal_0+1FD↑o
.rodata:0000000000014CCC                                         ; __strftime_internal_0+208↑r
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh ; jump table for switch statement
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset loc_E1FE - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_E8F7 - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset loc_DF86 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_EB5E - 14CCCh, offset loc_EB7B - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_EC15 - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_EC37 - 14CCCh, offset loc_E91D - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_ECB2 - 14CCCh, offset loc_ED2E - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset loc_ECCA - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_ECE2 - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_E0C3 - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_E0DE - 14CCCh, offset loc_DFC6 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_E28B - 14CCCh, offset loc_E2A4 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_E91D - 14CCCh, offset loc_EB19 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_DE38 - 14CCCh, offset loc_E2D7 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_E330 - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset loc_DF86 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_E487 - 14CCCh, offset loc_DE38 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_EAB4 - 14CCCh, offset loc_EE69 - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset loc_E91D - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_E487 - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_EE26 - 14CCCh, offset loc_EE56 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_ED46 - 14CCCh, offset loc_ED6D - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_ED9D - 14CCCh, offset def_DC8F - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_EE1F - 14CCCh, offset loc_E580 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_DE42 - 14CCCh, offset loc_E7F0 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_E03B - 14CCCh, offset loc_EACC - 14CCCh
.rodata:0000000000014CCC                 dd offset def_DC8F - 14CCCh, offset loc_EB01 - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_DE38 - 14CCCh, offset loc_E41D - 14CCCh
.rodata:0000000000014CCC                 dd offset loc_E4AC - 14CCCh
.rodata:0000000000014EB8 jpt_FAFB        dd offset def_FAFB - 14EB8h
.rodata:0000000000014EB8                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:0000000000014EB8                                         ; vasnprintf+554↑r
.rodata:0000000000014EB8                 dd offset loc_FF60 - 14EB8h ; jump table for switch statement
.rodata:0000000000014EB8                 dd offset loc_FF30 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FEA8 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FE68 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FC38 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FC38 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FB00 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FB00 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FB00 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FB00 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FDE8 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FD60 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FC38 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FC38 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FB00 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FB00 - 14EB8h
.rodata:0000000000014EB8                 dd offset loc_FB00 - 14EB8h
.rodata:0000000000014F00 jpt_100A0       dd offset loc_10310 - 14F00h
.rodata:0000000000014F00                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000014F00                                         ; vasnprintf+AF9↑r
.rodata:0000000000014F00                 dd offset loc_10330 - 14F00h ; jump table for switch statement
.rodata:0000000000014F00                 dd offset loc_10320 - 14F00h
.rodata:0000000000014F00                 dd offset loc_101E0 - 14F00h
.rodata:0000000000014F00                 dd offset loc_101E0 - 14F00h
.rodata:0000000000014F14 aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:0000000000014F1B                 align 20h
.rodata:0000000000014F20 jpt_106F6       dd offset def_106F6 - 14F20h
.rodata:0000000000014F20                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:0000000000014F20                                         ; printf_fetchargs+2F↑r
.rodata:0000000000014F20                 dd offset loc_1077C - 14F20h ; jump table for switch statement
.rodata:0000000000014F20                 dd offset loc_1077C - 14F20h
.rodata:0000000000014F20                 dd offset loc_1079E - 14F20h
.rodata:0000000000014F20                 dd offset loc_1079E - 14F20h
.rodata:0000000000014F20                 dd offset loc_1075A - 14F20h
.rodata:0000000000014F20                 dd offset loc_1075A - 14F20h
.rodata:0000000000014F20                 dd offset loc_10736 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10736 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10736 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10736 - 14F20h
.rodata:0000000000014F20                 dd offset loc_107F2 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10700 - 14F20h
.rodata:0000000000014F20                 dd offset loc_1075A - 14F20h
.rodata:0000000000014F20                 dd offset loc_1075A - 14F20h
.rodata:0000000000014F20                 dd offset loc_107C4 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10820 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10736 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10736 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10736 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10736 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10736 - 14F20h
.rodata:0000000000014F20                 dd offset loc_10736 - 14F20h
.rodata:0000000000014F7C                 align 20h
.rodata:0000000000014F80 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000014F81                 db    0
.rodata:0000000000014F82                 db    0
.rodata:0000000000014F83                 db    0
.rodata:0000000000014F84                 db  4Eh ; N
.rodata:0000000000014F85                 db    0
.rodata:0000000000014F86                 db    0
.rodata:0000000000014F87                 db    0
.rodata:0000000000014F88                 db  55h ; U
.rodata:0000000000014F89                 db    0
.rodata:0000000000014F8A                 db    0
.rodata:0000000000014F8B                 db    0
.rodata:0000000000014F8C                 db  4Ch ; L
.rodata:0000000000014F8D                 db    0
.rodata:0000000000014F8E                 db    0
.rodata:0000000000014F8F                 db    0
.rodata:0000000000014F90                 db  4Ch ; L
.rodata:0000000000014F91                 db    0
.rodata:0000000000014F92                 db    0
.rodata:0000000000014F93                 db    0
.rodata:0000000000014F94                 db  29h ; )
.rodata:0000000000014F95                 db    0
.rodata:0000000000014F96                 db    0
.rodata:0000000000014F97                 db    0
.rodata:0000000000014F98                 db    0
.rodata:0000000000014F99                 db    0
.rodata:0000000000014F9A                 db    0
.rodata:0000000000014F9B                 db    0
.rodata:0000000000014F9C jpt_10B05       dd offset loc_10B7B - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                                         ; DATA XREF: printf_parse+234↑o
.rodata:0000000000014F9C                                         ; printf_parse+23E↑r
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch ; jump table for switch statement
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_1107B - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_1109C - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_1107B - 14F9Ch, offset loc_1107B - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_1107B - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_10B07 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset loc_110AC - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_1107B - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_11008 - 14F9Ch, offset loc_1101B - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_1107B - 14F9Ch, offset loc_1107B - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_1107B - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_1101B - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset loc_10FBC - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_110AC - 14F9Ch, offset loc_11100 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_11068 - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset loc_110AC - 14F9Ch, offset def_10B05 - 14F9Ch
.rodata:0000000000014F9C                 dd offset def_10B05 - 14F9Ch, offset loc_110AC - 14F9Ch
.rodata:0000000000014F9C _rodata         ends
.rodata:0000000000014F9C
.eh_frame_hdr:00000000000150EC ; ===========================================================================
.eh_frame_hdr:00000000000150EC
.eh_frame_hdr:00000000000150EC ; Segment type: Pure data
.eh_frame_hdr:00000000000150EC ; Segment permissions: Read
.eh_frame_hdr:00000000000150EC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000150EC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000150EC                 ;org 150ECh
.eh_frame_hdr:00000000000150EC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000150ED                 db  1Bh
.eh_frame_hdr:00000000000150EE                 db    3
.eh_frame_hdr:00000000000150EF                 db  3Bh ; ;
.eh_frame_hdr:00000000000150F0                 db 0C8h
.eh_frame_hdr:00000000000150F1                 db    3
.eh_frame_hdr:00000000000150F2                 db    0
.eh_frame_hdr:00000000000150F3                 db    0
.eh_frame_hdr:00000000000150F4                 db  78h ; x
.eh_frame_hdr:00000000000150F5                 db    0
.eh_frame_hdr:00000000000150F6                 db    0
.eh_frame_hdr:00000000000150F7                 db    0
.eh_frame_hdr:00000000000150F8                 db  24h ; $
.eh_frame_hdr:00000000000150F9                 db 0D6h
.eh_frame_hdr:00000000000150FA                 db 0FEh
.eh_frame_hdr:00000000000150FB                 db 0FFh
.eh_frame_hdr:00000000000150FC                 db  14h
.eh_frame_hdr:00000000000150FD                 db    4
.eh_frame_hdr:00000000000150FE                 db    0
.eh_frame_hdr:00000000000150FF                 db    0
.eh_frame_hdr:0000000000015100                 db  74h ; t
.eh_frame_hdr:0000000000015101                 db 0DAh
.eh_frame_hdr:0000000000015102                 db 0FEh
.eh_frame_hdr:0000000000015103                 db 0FFh
.eh_frame_hdr:0000000000015104                 db  3Ch ; <
.eh_frame_hdr:0000000000015105                 db    4
.eh_frame_hdr:0000000000015106                 db    0
.eh_frame_hdr:0000000000015107                 db    0
.eh_frame_hdr:0000000000015108                 db  84h
.eh_frame_hdr:0000000000015109                 db 0DAh
.eh_frame_hdr:000000000001510A                 db 0FEh
.eh_frame_hdr:000000000001510B                 db 0FFh
.eh_frame_hdr:000000000001510C                 db  78h ; x
.eh_frame_hdr:000000000001510D                 db    8
.eh_frame_hdr:000000000001510E                 db    0
.eh_frame_hdr:000000000001510F                 db    0
.eh_frame_hdr:0000000000015110                 db 0E4h
.eh_frame_hdr:0000000000015111                 db 0DAh
.eh_frame_hdr:0000000000015112                 db 0FEh
.eh_frame_hdr:0000000000015113                 db 0FFh
.eh_frame_hdr:0000000000015114                 db 0B4h
.eh_frame_hdr:0000000000015115                 db    4
.eh_frame_hdr:0000000000015116                 db    0
.eh_frame_hdr:0000000000015117                 db    0
.eh_frame_hdr:0000000000015118                 db 0E4h
.eh_frame_hdr:0000000000015119                 db 0E2h
.eh_frame_hdr:000000000001511A                 db 0FEh
.eh_frame_hdr:000000000001511B                 db 0FFh
.eh_frame_hdr:000000000001511C                 db 0E4h
.eh_frame_hdr:000000000001511D                 db    3
.eh_frame_hdr:000000000001511E                 db    0
.eh_frame_hdr:000000000001511F                 db    0
.eh_frame_hdr:0000000000015120                 db 0F4h
.eh_frame_hdr:0000000000015121                 db 0E3h
.eh_frame_hdr:0000000000015122                 db 0FEh
.eh_frame_hdr:0000000000015123                 db 0FFh
.eh_frame_hdr:0000000000015124                 db  54h ; T
.eh_frame_hdr:0000000000015125                 db    4
.eh_frame_hdr:0000000000015126                 db    0
.eh_frame_hdr:0000000000015127                 db    0
.eh_frame_hdr:0000000000015128                 db  54h ; T
.eh_frame_hdr:0000000000015129                 db 0E5h
.eh_frame_hdr:000000000001512A                 db 0FEh
.eh_frame_hdr:000000000001512B                 db 0FFh
.eh_frame_hdr:000000000001512C                 db  88h
.eh_frame_hdr:000000000001512D                 db    4
.eh_frame_hdr:000000000001512E                 db    0
.eh_frame_hdr:000000000001512F                 db    0
.eh_frame_hdr:0000000000015130                 db 0F4h
.eh_frame_hdr:0000000000015131                 db 0EBh
.eh_frame_hdr:0000000000015132                 db 0FEh
.eh_frame_hdr:0000000000015133                 db 0FFh
.eh_frame_hdr:0000000000015134                 db    4
.eh_frame_hdr:0000000000015135                 db    5
.eh_frame_hdr:0000000000015136                 db    0
.eh_frame_hdr:0000000000015137                 db    0
.eh_frame_hdr:0000000000015138                 db    4
.eh_frame_hdr:0000000000015139                 db 0ECh
.eh_frame_hdr:000000000001513A                 db 0FEh
.eh_frame_hdr:000000000001513B                 db 0FFh
.eh_frame_hdr:000000000001513C                 db  18h
.eh_frame_hdr:000000000001513D                 db    5
.eh_frame_hdr:000000000001513E                 db    0
.eh_frame_hdr:000000000001513F                 db    0
.eh_frame_hdr:0000000000015140                 db  24h ; $
.eh_frame_hdr:0000000000015141                 db 0EDh
.eh_frame_hdr:0000000000015142                 db 0FEh
.eh_frame_hdr:0000000000015143                 db 0FFh
.eh_frame_hdr:0000000000015144                 db  64h ; d
.eh_frame_hdr:0000000000015145                 db    5
.eh_frame_hdr:0000000000015146                 db    0
.eh_frame_hdr:0000000000015147                 db    0
.eh_frame_hdr:0000000000015148                 db 0A4h
.eh_frame_hdr:0000000000015149                 db 0EDh
.eh_frame_hdr:000000000001514A                 db 0FEh
.eh_frame_hdr:000000000001514B                 db 0FFh
.eh_frame_hdr:000000000001514C                 db  90h
.eh_frame_hdr:000000000001514D                 db    5
.eh_frame_hdr:000000000001514E                 db    0
.eh_frame_hdr:000000000001514F                 db    0
.eh_frame_hdr:0000000000015150                 db 0C4h
.eh_frame_hdr:0000000000015151                 db 0EEh
.eh_frame_hdr:0000000000015152                 db 0FEh
.eh_frame_hdr:0000000000015153                 db 0FFh
.eh_frame_hdr:0000000000015154                 db 0F0h
.eh_frame_hdr:0000000000015155                 db    5
.eh_frame_hdr:0000000000015156                 db    0
.eh_frame_hdr:0000000000015157                 db    0
.eh_frame_hdr:0000000000015158                 db  34h ; 4
.eh_frame_hdr:0000000000015159                 db 0EFh
.eh_frame_hdr:000000000001515A                 db 0FEh
.eh_frame_hdr:000000000001515B                 db 0FFh
.eh_frame_hdr:000000000001515C                 db  3Ch ; <
.eh_frame_hdr:000000000001515D                 db    6
.eh_frame_hdr:000000000001515E                 db    0
.eh_frame_hdr:000000000001515F                 db    0
.eh_frame_hdr:0000000000015160                 db  84h
.eh_frame_hdr:0000000000015161                 db 0EFh
.eh_frame_hdr:0000000000015162                 db 0FEh
.eh_frame_hdr:0000000000015163                 db 0FFh
.eh_frame_hdr:0000000000015164                 db  7Ch ; |
.eh_frame_hdr:0000000000015165                 db    6
.eh_frame_hdr:0000000000015166                 db    0
.eh_frame_hdr:0000000000015167                 db    0
.eh_frame_hdr:0000000000015168                 db  94h
.eh_frame_hdr:0000000000015169                 db 0EFh
.eh_frame_hdr:000000000001516A                 db 0FEh
.eh_frame_hdr:000000000001516B                 db 0FFh
.eh_frame_hdr:000000000001516C                 db  90h
.eh_frame_hdr:000000000001516D                 db    6
.eh_frame_hdr:000000000001516E                 db    0
.eh_frame_hdr:000000000001516F                 db    0
.eh_frame_hdr:0000000000015170                 db 0A4h
.eh_frame_hdr:0000000000015171                 db 0EFh
.eh_frame_hdr:0000000000015172                 db 0FEh
.eh_frame_hdr:0000000000015173                 db 0FFh
.eh_frame_hdr:0000000000015174                 db 0A4h
.eh_frame_hdr:0000000000015175                 db    6
.eh_frame_hdr:0000000000015176                 db    0
.eh_frame_hdr:0000000000015177                 db    0
.eh_frame_hdr:0000000000015178                 db  54h ; T
.eh_frame_hdr:0000000000015179                 db 0F0h
.eh_frame_hdr:000000000001517A                 db 0FEh
.eh_frame_hdr:000000000001517B                 db 0FFh
.eh_frame_hdr:000000000001517C                 db 0D4h
.eh_frame_hdr:000000000001517D                 db    6
.eh_frame_hdr:000000000001517E                 db    0
.eh_frame_hdr:000000000001517F                 db    0
.eh_frame_hdr:0000000000015180                 db 0B4h
.eh_frame_hdr:0000000000015181                 db 0F0h
.eh_frame_hdr:0000000000015182                 db 0FEh
.eh_frame_hdr:0000000000015183                 db 0FFh
.eh_frame_hdr:0000000000015184                 db  10h
.eh_frame_hdr:0000000000015185                 db    7
.eh_frame_hdr:0000000000015186                 db    0
.eh_frame_hdr:0000000000015187                 db    0
.eh_frame_hdr:0000000000015188                 db  14h
.eh_frame_hdr:0000000000015189                 db 0F1h
.eh_frame_hdr:000000000001518A                 db 0FEh
.eh_frame_hdr:000000000001518B                 db 0FFh
.eh_frame_hdr:000000000001518C                 db  4Ch ; L
.eh_frame_hdr:000000000001518D                 db    7
.eh_frame_hdr:000000000001518E                 db    0
.eh_frame_hdr:000000000001518F                 db    0
.eh_frame_hdr:0000000000015190                 db  34h ; 4
.eh_frame_hdr:0000000000015191                 db  0Dh
.eh_frame_hdr:0000000000015192                 db 0FFh
.eh_frame_hdr:0000000000015193                 db 0FFh
.eh_frame_hdr:0000000000015194                 db 0C4h
.eh_frame_hdr:0000000000015195                 db    7
.eh_frame_hdr:0000000000015196                 db    0
.eh_frame_hdr:0000000000015197                 db    0
.eh_frame_hdr:0000000000015198                 db  84h
.eh_frame_hdr:0000000000015199                 db  0Dh
.eh_frame_hdr:000000000001519A                 db 0FFh
.eh_frame_hdr:000000000001519B                 db 0FFh
.eh_frame_hdr:000000000001519C                 db 0ECh
.eh_frame_hdr:000000000001519D                 db    7
.eh_frame_hdr:000000000001519E                 db    0
.eh_frame_hdr:000000000001519F                 db    0
.eh_frame_hdr:00000000000151A0                 db  94h
.eh_frame_hdr:00000000000151A1                 db  0Dh
.eh_frame_hdr:00000000000151A2                 db 0FFh
.eh_frame_hdr:00000000000151A3                 db 0FFh
.eh_frame_hdr:00000000000151A4                 db    0
.eh_frame_hdr:00000000000151A5                 db    8
.eh_frame_hdr:00000000000151A6                 db    0
.eh_frame_hdr:00000000000151A7                 db    0
.eh_frame_hdr:00000000000151A8                 db 0E4h
.eh_frame_hdr:00000000000151A9                 db  0Dh
.eh_frame_hdr:00000000000151AA                 db 0FFh
.eh_frame_hdr:00000000000151AB                 db 0FFh
.eh_frame_hdr:00000000000151AC                 db  1Ch
.eh_frame_hdr:00000000000151AD                 db    8
.eh_frame_hdr:00000000000151AE                 db    0
.eh_frame_hdr:00000000000151AF                 db    0
.eh_frame_hdr:00000000000151B0                 db  84h
.eh_frame_hdr:00000000000151B1                 db  0Eh
.eh_frame_hdr:00000000000151B2                 db 0FFh
.eh_frame_hdr:00000000000151B3                 db 0FFh
.eh_frame_hdr:00000000000151B4                 db  34h ; 4
.eh_frame_hdr:00000000000151B5                 db    8
.eh_frame_hdr:00000000000151B6                 db    0
.eh_frame_hdr:00000000000151B7                 db    0
.eh_frame_hdr:00000000000151B8                 db    4
.eh_frame_hdr:00000000000151B9                 db  10h
.eh_frame_hdr:00000000000151BA                 db 0FFh
.eh_frame_hdr:00000000000151BB                 db 0FFh
.eh_frame_hdr:00000000000151BC                 db  48h ; H
.eh_frame_hdr:00000000000151BD                 db    8
.eh_frame_hdr:00000000000151BE                 db    0
.eh_frame_hdr:00000000000151BF                 db    0
.eh_frame_hdr:00000000000151C0                 db    4
.eh_frame_hdr:00000000000151C1                 db  11h
.eh_frame_hdr:00000000000151C2                 db 0FFh
.eh_frame_hdr:00000000000151C3                 db 0FFh
.eh_frame_hdr:00000000000151C4                 db  94h
.eh_frame_hdr:00000000000151C5                 db    8
.eh_frame_hdr:00000000000151C6                 db    0
.eh_frame_hdr:00000000000151C7                 db    0
.eh_frame_hdr:00000000000151C8                 db 0F4h
.eh_frame_hdr:00000000000151C9                 db  11h
.eh_frame_hdr:00000000000151CA                 db 0FFh
.eh_frame_hdr:00000000000151CB                 db 0FFh
.eh_frame_hdr:00000000000151CC                 db 0B8h
.eh_frame_hdr:00000000000151CD                 db    8
.eh_frame_hdr:00000000000151CE                 db    0
.eh_frame_hdr:00000000000151CF                 db    0
.eh_frame_hdr:00000000000151D0                 db  34h ; 4
.eh_frame_hdr:00000000000151D1                 db  12h
.eh_frame_hdr:00000000000151D2                 db 0FFh
.eh_frame_hdr:00000000000151D3                 db 0FFh
.eh_frame_hdr:00000000000151D4                 db 0D0h
.eh_frame_hdr:00000000000151D5                 db    8
.eh_frame_hdr:00000000000151D6                 db    0
.eh_frame_hdr:00000000000151D7                 db    0
.eh_frame_hdr:00000000000151D8                 db  14h
.eh_frame_hdr:00000000000151D9                 db  13h
.eh_frame_hdr:00000000000151DA                 db 0FFh
.eh_frame_hdr:00000000000151DB                 db 0FFh
.eh_frame_hdr:00000000000151DC                 db 0E4h
.eh_frame_hdr:00000000000151DD                 db    8
.eh_frame_hdr:00000000000151DE                 db    0
.eh_frame_hdr:00000000000151DF                 db    0
.eh_frame_hdr:00000000000151E0                 db  44h ; D
.eh_frame_hdr:00000000000151E1                 db  13h
.eh_frame_hdr:00000000000151E2                 db 0FFh
.eh_frame_hdr:00000000000151E3                 db 0FFh
.eh_frame_hdr:00000000000151E4                 db 0F8h
.eh_frame_hdr:00000000000151E5                 db    8
.eh_frame_hdr:00000000000151E6                 db    0
.eh_frame_hdr:00000000000151E7                 db    0
.eh_frame_hdr:00000000000151E8                 db    4
.eh_frame_hdr:00000000000151E9                 db  14h
.eh_frame_hdr:00000000000151EA                 db 0FFh
.eh_frame_hdr:00000000000151EB                 db 0FFh
.eh_frame_hdr:00000000000151EC                 db  3Ch ; <
.eh_frame_hdr:00000000000151ED                 db    9
.eh_frame_hdr:00000000000151EE                 db    0
.eh_frame_hdr:00000000000151EF                 db    0
.eh_frame_hdr:00000000000151F0                 db 0F4h
.eh_frame_hdr:00000000000151F1                 db  15h
.eh_frame_hdr:00000000000151F2                 db 0FFh
.eh_frame_hdr:00000000000151F3                 db 0FFh
.eh_frame_hdr:00000000000151F4                 db  74h ; t
.eh_frame_hdr:00000000000151F5                 db    9
.eh_frame_hdr:00000000000151F6                 db    0
.eh_frame_hdr:00000000000151F7                 db    0
.eh_frame_hdr:00000000000151F8                 db 0B4h
.eh_frame_hdr:00000000000151F9                 db  16h
.eh_frame_hdr:00000000000151FA                 db 0FFh
.eh_frame_hdr:00000000000151FB                 db 0FFh
.eh_frame_hdr:00000000000151FC                 db 0A8h
.eh_frame_hdr:00000000000151FD                 db    9
.eh_frame_hdr:00000000000151FE                 db    0
.eh_frame_hdr:00000000000151FF                 db    0
.eh_frame_hdr:0000000000015200                 db 0B4h
.eh_frame_hdr:0000000000015201                 db  17h
.eh_frame_hdr:0000000000015202                 db 0FFh
.eh_frame_hdr:0000000000015203                 db 0FFh
.eh_frame_hdr:0000000000015204                 db 0E0h
.eh_frame_hdr:0000000000015205                 db    9
.eh_frame_hdr:0000000000015206                 db    0
.eh_frame_hdr:0000000000015207                 db    0
.eh_frame_hdr:0000000000015208                 db  94h
.eh_frame_hdr:0000000000015209                 db  1Bh
.eh_frame_hdr:000000000001520A                 db 0FFh
.eh_frame_hdr:000000000001520B                 db 0FFh
.eh_frame_hdr:000000000001520C                 db  20h
.eh_frame_hdr:000000000001520D                 db  0Ah
.eh_frame_hdr:000000000001520E                 db    0
.eh_frame_hdr:000000000001520F                 db    0
.eh_frame_hdr:0000000000015210                 db 0A4h
.eh_frame_hdr:0000000000015211                 db  37h ; 7
.eh_frame_hdr:0000000000015212                 db 0FFh
.eh_frame_hdr:0000000000015213                 db 0FFh
.eh_frame_hdr:0000000000015214                 db  98h
.eh_frame_hdr:0000000000015215                 db  0Ah
.eh_frame_hdr:0000000000015216                 db    0
.eh_frame_hdr:0000000000015217                 db    0
.eh_frame_hdr:0000000000015218                 db  14h
.eh_frame_hdr:0000000000015219                 db  55h ; U
.eh_frame_hdr:000000000001521A                 db 0FFh
.eh_frame_hdr:000000000001521B                 db 0FFh
.eh_frame_hdr:000000000001521C                 db  28h ; (
.eh_frame_hdr:000000000001521D                 db  0Bh
.eh_frame_hdr:000000000001521E                 db    0
.eh_frame_hdr:000000000001521F                 db    0
.eh_frame_hdr:0000000000015220                 db  84h
.eh_frame_hdr:0000000000015221                 db  55h ; U
.eh_frame_hdr:0000000000015222                 db 0FFh
.eh_frame_hdr:0000000000015223                 db 0FFh
.eh_frame_hdr:0000000000015224                 db  6Ch ; l
.eh_frame_hdr:0000000000015225                 db  0Bh
.eh_frame_hdr:0000000000015226                 db    0
.eh_frame_hdr:0000000000015227                 db    0
.eh_frame_hdr:0000000000015228                 db  44h ; D
.eh_frame_hdr:0000000000015229                 db  56h ; V
.eh_frame_hdr:000000000001522A                 db 0FFh
.eh_frame_hdr:000000000001522B                 db 0FFh
.eh_frame_hdr:000000000001522C                 db  98h
.eh_frame_hdr:000000000001522D                 db  0Bh
.eh_frame_hdr:000000000001522E                 db    0
.eh_frame_hdr:000000000001522F                 db    0
.eh_frame_hdr:0000000000015230                 db  34h ; 4
.eh_frame_hdr:0000000000015231                 db  59h ; Y
.eh_frame_hdr:0000000000015232                 db 0FFh
.eh_frame_hdr:0000000000015233                 db 0FFh
.eh_frame_hdr:0000000000015234                 db 0E4h
.eh_frame_hdr:0000000000015235                 db  0Bh
.eh_frame_hdr:0000000000015236                 db    0
.eh_frame_hdr:0000000000015237                 db    0
.eh_frame_hdr:0000000000015238                 db 0D4h
.eh_frame_hdr:0000000000015239                 db  59h ; Y
.eh_frame_hdr:000000000001523A                 db 0FFh
.eh_frame_hdr:000000000001523B                 db 0FFh
.eh_frame_hdr:000000000001523C                 db    4
.eh_frame_hdr:000000000001523D                 db  0Ch
.eh_frame_hdr:000000000001523E                 db    0
.eh_frame_hdr:000000000001523F                 db    0
.eh_frame_hdr:0000000000015240                 db 0C4h
.eh_frame_hdr:0000000000015241                 db  5Ah ; Z
.eh_frame_hdr:0000000000015242                 db 0FFh
.eh_frame_hdr:0000000000015243                 db 0FFh
.eh_frame_hdr:0000000000015244                 db  48h ; H
.eh_frame_hdr:0000000000015245                 db  0Ch
.eh_frame_hdr:0000000000015246                 db    0
.eh_frame_hdr:0000000000015247                 db    0
.eh_frame_hdr:0000000000015248                 db    4
.eh_frame_hdr:0000000000015249                 db  6Dh ; m
.eh_frame_hdr:000000000001524A                 db 0FFh
.eh_frame_hdr:000000000001524B                 db 0FFh
.eh_frame_hdr:000000000001524C                 db 0C0h
.eh_frame_hdr:000000000001524D                 db  0Ch
.eh_frame_hdr:000000000001524E                 db    0
.eh_frame_hdr:000000000001524F                 db    0
.eh_frame_hdr:0000000000015250                 db 0B4h
.eh_frame_hdr:0000000000015251                 db  6Eh ; n
.eh_frame_hdr:0000000000015252                 db 0FFh
.eh_frame_hdr:0000000000015253                 db 0FFh
.eh_frame_hdr:0000000000015254                 db  2Ch ; ,
.eh_frame_hdr:0000000000015255                 db  0Dh
.eh_frame_hdr:0000000000015256                 db    0
.eh_frame_hdr:0000000000015257                 db    0
.eh_frame_hdr:0000000000015258                 db 0F4h
.eh_frame_hdr:0000000000015259                 db  6Eh ; n
.eh_frame_hdr:000000000001525A                 db 0FFh
.eh_frame_hdr:000000000001525B                 db 0FFh
.eh_frame_hdr:000000000001525C                 db  58h ; X
.eh_frame_hdr:000000000001525D                 db  0Dh
.eh_frame_hdr:000000000001525E                 db    0
.eh_frame_hdr:000000000001525F                 db    0
.eh_frame_hdr:0000000000015260                 db  14h
.eh_frame_hdr:0000000000015261                 db  6Fh ; o
.eh_frame_hdr:0000000000015262                 db 0FFh
.eh_frame_hdr:0000000000015263                 db 0FFh
.eh_frame_hdr:0000000000015264                 db  6Ch ; l
.eh_frame_hdr:0000000000015265                 db  0Dh
.eh_frame_hdr:0000000000015266                 db    0
.eh_frame_hdr:0000000000015267                 db    0
.eh_frame_hdr:0000000000015268                 db  34h ; 4
.eh_frame_hdr:0000000000015269                 db  6Fh ; o
.eh_frame_hdr:000000000001526A                 db 0FFh
.eh_frame_hdr:000000000001526B                 db 0FFh
.eh_frame_hdr:000000000001526C                 db  80h
.eh_frame_hdr:000000000001526D                 db  0Dh
.eh_frame_hdr:000000000001526E                 db    0
.eh_frame_hdr:000000000001526F                 db    0
.eh_frame_hdr:0000000000015270                 db  74h ; t
.eh_frame_hdr:0000000000015271                 db  6Fh ; o
.eh_frame_hdr:0000000000015272                 db 0FFh
.eh_frame_hdr:0000000000015273                 db 0FFh
.eh_frame_hdr:0000000000015274                 db  94h
.eh_frame_hdr:0000000000015275                 db  0Dh
.eh_frame_hdr:0000000000015276                 db    0
.eh_frame_hdr:0000000000015277                 db    0
.eh_frame_hdr:0000000000015278                 db  94h
.eh_frame_hdr:0000000000015279                 db  6Fh ; o
.eh_frame_hdr:000000000001527A                 db 0FFh
.eh_frame_hdr:000000000001527B                 db 0FFh
.eh_frame_hdr:000000000001527C                 db 0A8h
.eh_frame_hdr:000000000001527D                 db  0Dh
.eh_frame_hdr:000000000001527E                 db    0
.eh_frame_hdr:000000000001527F                 db    0
.eh_frame_hdr:0000000000015280                 db 0C4h
.eh_frame_hdr:0000000000015281                 db  6Fh ; o
.eh_frame_hdr:0000000000015282                 db 0FFh
.eh_frame_hdr:0000000000015283                 db 0FFh
.eh_frame_hdr:0000000000015284                 db 0BCh
.eh_frame_hdr:0000000000015285                 db  0Dh
.eh_frame_hdr:0000000000015286                 db    0
.eh_frame_hdr:0000000000015287                 db    0
.eh_frame_hdr:0000000000015288                 db  44h ; D
.eh_frame_hdr:0000000000015289                 db  70h ; p
.eh_frame_hdr:000000000001528A                 db 0FFh
.eh_frame_hdr:000000000001528B                 db 0FFh
.eh_frame_hdr:000000000001528C                 db  10h
.eh_frame_hdr:000000000001528D                 db  0Eh
.eh_frame_hdr:000000000001528E                 db    0
.eh_frame_hdr:000000000001528F                 db    0
.eh_frame_hdr:0000000000015290                 db  34h ; 4
.eh_frame_hdr:0000000000015291                 db  71h ; q
.eh_frame_hdr:0000000000015292                 db 0FFh
.eh_frame_hdr:0000000000015293                 db 0FFh
.eh_frame_hdr:0000000000015294                 db  7Ch ; |
.eh_frame_hdr:0000000000015295                 db  0Eh
.eh_frame_hdr:0000000000015296                 db    0
.eh_frame_hdr:0000000000015297                 db    0
.eh_frame_hdr:0000000000015298                 db  44h ; D
.eh_frame_hdr:0000000000015299                 db  71h ; q
.eh_frame_hdr:000000000001529A                 db 0FFh
.eh_frame_hdr:000000000001529B                 db 0FFh
.eh_frame_hdr:000000000001529C                 db  90h
.eh_frame_hdr:000000000001529D                 db  0Eh
.eh_frame_hdr:000000000001529E                 db    0
.eh_frame_hdr:000000000001529F                 db    0
.eh_frame_hdr:00000000000152A0                 db 0E4h
.eh_frame_hdr:00000000000152A1                 db  71h ; q
.eh_frame_hdr:00000000000152A2                 db 0FFh
.eh_frame_hdr:00000000000152A3                 db 0FFh
.eh_frame_hdr:00000000000152A4                 db 0BCh
.eh_frame_hdr:00000000000152A5                 db  0Eh
.eh_frame_hdr:00000000000152A6                 db    0
.eh_frame_hdr:00000000000152A7                 db    0
.eh_frame_hdr:00000000000152A8                 db    4
.eh_frame_hdr:00000000000152A9                 db  72h ; r
.eh_frame_hdr:00000000000152AA                 db 0FFh
.eh_frame_hdr:00000000000152AB                 db 0FFh
.eh_frame_hdr:00000000000152AC                 db 0D0h
.eh_frame_hdr:00000000000152AD                 db  0Eh
.eh_frame_hdr:00000000000152AE                 db    0
.eh_frame_hdr:00000000000152AF                 db    0
.eh_frame_hdr:00000000000152B0                 db  14h
.eh_frame_hdr:00000000000152B1                 db  72h ; r
.eh_frame_hdr:00000000000152B2                 db 0FFh
.eh_frame_hdr:00000000000152B3                 db 0FFh
.eh_frame_hdr:00000000000152B4                 db 0E4h
.eh_frame_hdr:00000000000152B5                 db  0Eh
.eh_frame_hdr:00000000000152B6                 db    0
.eh_frame_hdr:00000000000152B7                 db    0
.eh_frame_hdr:00000000000152B8                 db  34h ; 4
.eh_frame_hdr:00000000000152B9                 db  72h ; r
.eh_frame_hdr:00000000000152BA                 db 0FFh
.eh_frame_hdr:00000000000152BB                 db 0FFh
.eh_frame_hdr:00000000000152BC                 db 0F8h
.eh_frame_hdr:00000000000152BD                 db  0Eh
.eh_frame_hdr:00000000000152BE                 db    0
.eh_frame_hdr:00000000000152BF                 db    0
.eh_frame_hdr:00000000000152C0                 db  54h ; T
.eh_frame_hdr:00000000000152C1                 db  72h ; r
.eh_frame_hdr:00000000000152C2                 db 0FFh
.eh_frame_hdr:00000000000152C3                 db 0FFh
.eh_frame_hdr:00000000000152C4                 db  0Ch
.eh_frame_hdr:00000000000152C5                 db  0Fh
.eh_frame_hdr:00000000000152C6                 db    0
.eh_frame_hdr:00000000000152C7                 db    0
.eh_frame_hdr:00000000000152C8                 db 0E4h
.eh_frame_hdr:00000000000152C9                 db  72h ; r
.eh_frame_hdr:00000000000152CA                 db 0FFh
.eh_frame_hdr:00000000000152CB                 db 0FFh
.eh_frame_hdr:00000000000152CC                 db  28h ; (
.eh_frame_hdr:00000000000152CD                 db  0Fh
.eh_frame_hdr:00000000000152CE                 db    0
.eh_frame_hdr:00000000000152CF                 db    0
.eh_frame_hdr:00000000000152D0                 db  74h ; t
.eh_frame_hdr:00000000000152D1                 db  73h ; s
.eh_frame_hdr:00000000000152D2                 db 0FFh
.eh_frame_hdr:00000000000152D3                 db 0FFh
.eh_frame_hdr:00000000000152D4                 db  44h ; D
.eh_frame_hdr:00000000000152D5                 db  0Fh
.eh_frame_hdr:00000000000152D6                 db    0
.eh_frame_hdr:00000000000152D7                 db    0
.eh_frame_hdr:00000000000152D8                 db  84h
.eh_frame_hdr:00000000000152D9                 db  73h ; s
.eh_frame_hdr:00000000000152DA                 db 0FFh
.eh_frame_hdr:00000000000152DB                 db 0FFh
.eh_frame_hdr:00000000000152DC                 db  58h ; X
.eh_frame_hdr:00000000000152DD                 db  0Fh
.eh_frame_hdr:00000000000152DE                 db    0
.eh_frame_hdr:00000000000152DF                 db    0
.eh_frame_hdr:00000000000152E0                 db  94h
.eh_frame_hdr:00000000000152E1                 db  73h ; s
.eh_frame_hdr:00000000000152E2                 db 0FFh
.eh_frame_hdr:00000000000152E3                 db 0FFh
.eh_frame_hdr:00000000000152E4                 db  6Ch ; l
.eh_frame_hdr:00000000000152E5                 db  0Fh
.eh_frame_hdr:00000000000152E6                 db    0
.eh_frame_hdr:00000000000152E7                 db    0
.eh_frame_hdr:00000000000152E8                 db  34h ; 4
.eh_frame_hdr:00000000000152E9                 db  74h ; t
.eh_frame_hdr:00000000000152EA                 db 0FFh
.eh_frame_hdr:00000000000152EB                 db 0FFh
.eh_frame_hdr:00000000000152EC                 db  88h
.eh_frame_hdr:00000000000152ED                 db  0Fh
.eh_frame_hdr:00000000000152EE                 db    0
.eh_frame_hdr:00000000000152EF                 db    0
.eh_frame_hdr:00000000000152F0                 db  44h ; D
.eh_frame_hdr:00000000000152F1                 db  74h ; t
.eh_frame_hdr:00000000000152F2                 db 0FFh
.eh_frame_hdr:00000000000152F3                 db 0FFh
.eh_frame_hdr:00000000000152F4                 db  9Ch
.eh_frame_hdr:00000000000152F5                 db  0Fh
.eh_frame_hdr:00000000000152F6                 db    0
.eh_frame_hdr:00000000000152F7                 db    0
.eh_frame_hdr:00000000000152F8                 db  64h ; d
.eh_frame_hdr:00000000000152F9                 db  74h ; t
.eh_frame_hdr:00000000000152FA                 db 0FFh
.eh_frame_hdr:00000000000152FB                 db 0FFh
.eh_frame_hdr:00000000000152FC                 db 0B0h
.eh_frame_hdr:00000000000152FD                 db  0Fh
.eh_frame_hdr:00000000000152FE                 db    0
.eh_frame_hdr:00000000000152FF                 db    0
.eh_frame_hdr:0000000000015300                 db  74h ; t
.eh_frame_hdr:0000000000015301                 db  74h ; t
.eh_frame_hdr:0000000000015302                 db 0FFh
.eh_frame_hdr:0000000000015303                 db 0FFh
.eh_frame_hdr:0000000000015304                 db 0C4h
.eh_frame_hdr:0000000000015305                 db  0Fh
.eh_frame_hdr:0000000000015306                 db    0
.eh_frame_hdr:0000000000015307                 db    0
.eh_frame_hdr:0000000000015308                 db    4
.eh_frame_hdr:0000000000015309                 db  75h ; u
.eh_frame_hdr:000000000001530A                 db 0FFh
.eh_frame_hdr:000000000001530B                 db 0FFh
.eh_frame_hdr:000000000001530C                 db 0E0h
.eh_frame_hdr:000000000001530D                 db  0Fh
.eh_frame_hdr:000000000001530E                 db    0
.eh_frame_hdr:000000000001530F                 db    0
.eh_frame_hdr:0000000000015310                 db 0A4h
.eh_frame_hdr:0000000000015311                 db  75h ; u
.eh_frame_hdr:0000000000015312                 db 0FFh
.eh_frame_hdr:0000000000015313                 db 0FFh
.eh_frame_hdr:0000000000015314                 db 0FCh
.eh_frame_hdr:0000000000015315                 db  0Fh
.eh_frame_hdr:0000000000015316                 db    0
.eh_frame_hdr:0000000000015317                 db    0
.eh_frame_hdr:0000000000015318                 db 0B4h
.eh_frame_hdr:0000000000015319                 db  75h ; u
.eh_frame_hdr:000000000001531A                 db 0FFh
.eh_frame_hdr:000000000001531B                 db 0FFh
.eh_frame_hdr:000000000001531C                 db  10h
.eh_frame_hdr:000000000001531D                 db  10h
.eh_frame_hdr:000000000001531E                 db    0
.eh_frame_hdr:000000000001531F                 db    0
.eh_frame_hdr:0000000000015320                 db 0D4h
.eh_frame_hdr:0000000000015321                 db  75h ; u
.eh_frame_hdr:0000000000015322                 db 0FFh
.eh_frame_hdr:0000000000015323                 db 0FFh
.eh_frame_hdr:0000000000015324                 db  24h ; $
.eh_frame_hdr:0000000000015325                 db  10h
.eh_frame_hdr:0000000000015326                 db    0
.eh_frame_hdr:0000000000015327                 db    0
.eh_frame_hdr:0000000000015328                 db 0F4h
.eh_frame_hdr:0000000000015329                 db  75h ; u
.eh_frame_hdr:000000000001532A                 db 0FFh
.eh_frame_hdr:000000000001532B                 db 0FFh
.eh_frame_hdr:000000000001532C                 db  38h ; 8
.eh_frame_hdr:000000000001532D                 db  10h
.eh_frame_hdr:000000000001532E                 db    0
.eh_frame_hdr:000000000001532F                 db    0
.eh_frame_hdr:0000000000015330                 db    4
.eh_frame_hdr:0000000000015331                 db  76h ; v
.eh_frame_hdr:0000000000015332                 db 0FFh
.eh_frame_hdr:0000000000015333                 db 0FFh
.eh_frame_hdr:0000000000015334                 db  4Ch ; L
.eh_frame_hdr:0000000000015335                 db  10h
.eh_frame_hdr:0000000000015336                 db    0
.eh_frame_hdr:0000000000015337                 db    0
.eh_frame_hdr:0000000000015338                 db  24h ; $
.eh_frame_hdr:0000000000015339                 db  76h ; v
.eh_frame_hdr:000000000001533A                 db 0FFh
.eh_frame_hdr:000000000001533B                 db 0FFh
.eh_frame_hdr:000000000001533C                 db  60h ; `
.eh_frame_hdr:000000000001533D                 db  10h
.eh_frame_hdr:000000000001533E                 db    0
.eh_frame_hdr:000000000001533F                 db    0
.eh_frame_hdr:0000000000015340                 db  44h ; D
.eh_frame_hdr:0000000000015341                 db  76h ; v
.eh_frame_hdr:0000000000015342                 db 0FFh
.eh_frame_hdr:0000000000015343                 db 0FFh
.eh_frame_hdr:0000000000015344                 db  74h ; t
.eh_frame_hdr:0000000000015345                 db  10h
.eh_frame_hdr:0000000000015346                 db    0
.eh_frame_hdr:0000000000015347                 db    0
.eh_frame_hdr:0000000000015348                 db  64h ; d
.eh_frame_hdr:0000000000015349                 db  76h ; v
.eh_frame_hdr:000000000001534A                 db 0FFh
.eh_frame_hdr:000000000001534B                 db 0FFh
.eh_frame_hdr:000000000001534C                 db  8Ch
.eh_frame_hdr:000000000001534D                 db  10h
.eh_frame_hdr:000000000001534E                 db    0
.eh_frame_hdr:000000000001534F                 db    0
.eh_frame_hdr:0000000000015350                 db 0F4h
.eh_frame_hdr:0000000000015351                 db  76h ; v
.eh_frame_hdr:0000000000015352                 db 0FFh
.eh_frame_hdr:0000000000015353                 db 0FFh
.eh_frame_hdr:0000000000015354                 db 0BCh
.eh_frame_hdr:0000000000015355                 db  10h
.eh_frame_hdr:0000000000015356                 db    0
.eh_frame_hdr:0000000000015357                 db    0
.eh_frame_hdr:0000000000015358                 db  14h
.eh_frame_hdr:0000000000015359                 db  7Bh ; {
.eh_frame_hdr:000000000001535A                 db 0FFh
.eh_frame_hdr:000000000001535B                 db 0FFh
.eh_frame_hdr:000000000001535C                 db 0D0h
.eh_frame_hdr:000000000001535D                 db  11h
.eh_frame_hdr:000000000001535E                 db    0
.eh_frame_hdr:000000000001535F                 db    0
.eh_frame_hdr:0000000000015360                 db  34h ; 4
.eh_frame_hdr:0000000000015361                 db  7Bh ; {
.eh_frame_hdr:0000000000015362                 db 0FFh
.eh_frame_hdr:0000000000015363                 db 0FFh
.eh_frame_hdr:0000000000015364                 db 0E4h
.eh_frame_hdr:0000000000015365                 db  11h
.eh_frame_hdr:0000000000015366                 db    0
.eh_frame_hdr:0000000000015367                 db    0
.eh_frame_hdr:0000000000015368                 db 0B4h
.eh_frame_hdr:0000000000015369                 db  7Bh ; {
.eh_frame_hdr:000000000001536A                 db 0FFh
.eh_frame_hdr:000000000001536B                 db 0FFh
.eh_frame_hdr:000000000001536C                 db    0
.eh_frame_hdr:000000000001536D                 db  12h
.eh_frame_hdr:000000000001536E                 db    0
.eh_frame_hdr:000000000001536F                 db    0
.eh_frame_hdr:0000000000015370                 db  94h
.eh_frame_hdr:0000000000015371                 db  7Ch ; |
.eh_frame_hdr:0000000000015372                 db 0FFh
.eh_frame_hdr:0000000000015373                 db 0FFh
.eh_frame_hdr:0000000000015374                 db  2Ch ; ,
.eh_frame_hdr:0000000000015375                 db  12h
.eh_frame_hdr:0000000000015376                 db    0
.eh_frame_hdr:0000000000015377                 db    0
.eh_frame_hdr:0000000000015378                 db  14h
.eh_frame_hdr:0000000000015379                 db  7Dh ; }
.eh_frame_hdr:000000000001537A                 db 0FFh
.eh_frame_hdr:000000000001537B                 db 0FFh
.eh_frame_hdr:000000000001537C                 db  4Ch ; L
.eh_frame_hdr:000000000001537D                 db  12h
.eh_frame_hdr:000000000001537E                 db    0
.eh_frame_hdr:000000000001537F                 db    0
.eh_frame_hdr:0000000000015380                 db  34h ; 4
.eh_frame_hdr:0000000000015381                 db  7Dh ; }
.eh_frame_hdr:0000000000015382                 db 0FFh
.eh_frame_hdr:0000000000015383                 db 0FFh
.eh_frame_hdr:0000000000015384                 db  68h ; h
.eh_frame_hdr:0000000000015385                 db  12h
.eh_frame_hdr:0000000000015386                 db    0
.eh_frame_hdr:0000000000015387                 db    0
.eh_frame_hdr:0000000000015388                 db  64h ; d
.eh_frame_hdr:0000000000015389                 db  7Dh ; }
.eh_frame_hdr:000000000001538A                 db 0FFh
.eh_frame_hdr:000000000001538B                 db 0FFh
.eh_frame_hdr:000000000001538C                 db  7Ch ; |
.eh_frame_hdr:000000000001538D                 db  12h
.eh_frame_hdr:000000000001538E                 db    0
.eh_frame_hdr:000000000001538F                 db    0
.eh_frame_hdr:0000000000015390                 db  74h ; t
.eh_frame_hdr:0000000000015391                 db  7Dh ; }
.eh_frame_hdr:0000000000015392                 db 0FFh
.eh_frame_hdr:0000000000015393                 db 0FFh
.eh_frame_hdr:0000000000015394                 db  90h
.eh_frame_hdr:0000000000015395                 db  12h
.eh_frame_hdr:0000000000015396                 db    0
.eh_frame_hdr:0000000000015397                 db    0
.eh_frame_hdr:0000000000015398                 db 0B4h
.eh_frame_hdr:0000000000015399                 db  7Dh ; }
.eh_frame_hdr:000000000001539A                 db 0FFh
.eh_frame_hdr:000000000001539B                 db 0FFh
.eh_frame_hdr:000000000001539C                 db 0B4h
.eh_frame_hdr:000000000001539D                 db  12h
.eh_frame_hdr:000000000001539E                 db    0
.eh_frame_hdr:000000000001539F                 db    0
.eh_frame_hdr:00000000000153A0                 db 0E4h
.eh_frame_hdr:00000000000153A1                 db  7Dh ; }
.eh_frame_hdr:00000000000153A2                 db 0FFh
.eh_frame_hdr:00000000000153A3                 db 0FFh
.eh_frame_hdr:00000000000153A4                 db 0C8h
.eh_frame_hdr:00000000000153A5                 db  12h
.eh_frame_hdr:00000000000153A6                 db    0
.eh_frame_hdr:00000000000153A7                 db    0
.eh_frame_hdr:00000000000153A8                 db  74h ; t
.eh_frame_hdr:00000000000153A9                 db  7Eh ; ~
.eh_frame_hdr:00000000000153AA                 db 0FFh
.eh_frame_hdr:00000000000153AB                 db 0FFh
.eh_frame_hdr:00000000000153AC                 db 0E0h
.eh_frame_hdr:00000000000153AD                 db  12h
.eh_frame_hdr:00000000000153AE                 db    0
.eh_frame_hdr:00000000000153AF                 db    0
.eh_frame_hdr:00000000000153B0                 db 0C4h
.eh_frame_hdr:00000000000153B1                 db  7Eh ; ~
.eh_frame_hdr:00000000000153B2                 db 0FFh
.eh_frame_hdr:00000000000153B3                 db 0FFh
.eh_frame_hdr:00000000000153B4                 db 0F8h
.eh_frame_hdr:00000000000153B5                 db  12h
.eh_frame_hdr:00000000000153B6                 db    0
.eh_frame_hdr:00000000000153B7                 db    0
.eh_frame_hdr:00000000000153B8                 db 0E4h
.eh_frame_hdr:00000000000153B9                 db  7Eh ; ~
.eh_frame_hdr:00000000000153BA                 db 0FFh
.eh_frame_hdr:00000000000153BB                 db 0FFh
.eh_frame_hdr:00000000000153BC                 db  14h
.eh_frame_hdr:00000000000153BD                 db  13h
.eh_frame_hdr:00000000000153BE                 db    0
.eh_frame_hdr:00000000000153BF                 db    0
.eh_frame_hdr:00000000000153C0                 db  14h
.eh_frame_hdr:00000000000153C1                 db  7Fh ; 
.eh_frame_hdr:00000000000153C2                 db 0FFh
.eh_frame_hdr:00000000000153C3                 db 0FFh
.eh_frame_hdr:00000000000153C4                 db  30h ; 0
.eh_frame_hdr:00000000000153C5                 db  13h
.eh_frame_hdr:00000000000153C6                 db    0
.eh_frame_hdr:00000000000153C7                 db    0
.eh_frame_hdr:00000000000153C8                 db  44h ; D
.eh_frame_hdr:00000000000153C9                 db  7Fh ; 
.eh_frame_hdr:00000000000153CA                 db 0FFh
.eh_frame_hdr:00000000000153CB                 db 0FFh
.eh_frame_hdr:00000000000153CC                 db  58h ; X
.eh_frame_hdr:00000000000153CD                 db  13h
.eh_frame_hdr:00000000000153CE                 db    0
.eh_frame_hdr:00000000000153CF                 db    0
.eh_frame_hdr:00000000000153D0                 db  64h ; d
.eh_frame_hdr:00000000000153D1                 db  7Fh ; 
.eh_frame_hdr:00000000000153D2                 db 0FFh
.eh_frame_hdr:00000000000153D3                 db 0FFh
.eh_frame_hdr:00000000000153D4                 db  74h ; t
.eh_frame_hdr:00000000000153D5                 db  13h
.eh_frame_hdr:00000000000153D6                 db    0
.eh_frame_hdr:00000000000153D7                 db    0
.eh_frame_hdr:00000000000153D8                 db 0A4h
.eh_frame_hdr:00000000000153D9                 db  7Fh ; 
.eh_frame_hdr:00000000000153DA                 db 0FFh
.eh_frame_hdr:00000000000153DB                 db 0FFh
.eh_frame_hdr:00000000000153DC                 db  8Ch
.eh_frame_hdr:00000000000153DD                 db  13h
.eh_frame_hdr:00000000000153DE                 db    0
.eh_frame_hdr:00000000000153DF                 db    0
.eh_frame_hdr:00000000000153E0                 db  24h ; $
.eh_frame_hdr:00000000000153E1                 db  80h
.eh_frame_hdr:00000000000153E2                 db 0FFh
.eh_frame_hdr:00000000000153E3                 db 0FFh
.eh_frame_hdr:00000000000153E4                 db 0C4h
.eh_frame_hdr:00000000000153E5                 db  13h
.eh_frame_hdr:00000000000153E6                 db    0
.eh_frame_hdr:00000000000153E7                 db    0
.eh_frame_hdr:00000000000153E8                 db  64h ; d
.eh_frame_hdr:00000000000153E9                 db  80h
.eh_frame_hdr:00000000000153EA                 db 0FFh
.eh_frame_hdr:00000000000153EB                 db 0FFh
.eh_frame_hdr:00000000000153EC                 db 0E4h
.eh_frame_hdr:00000000000153ED                 db  13h
.eh_frame_hdr:00000000000153EE                 db    0
.eh_frame_hdr:00000000000153EF                 db    0
.eh_frame_hdr:00000000000153F0                 db 0C4h
.eh_frame_hdr:00000000000153F1                 db  80h
.eh_frame_hdr:00000000000153F2                 db 0FFh
.eh_frame_hdr:00000000000153F3                 db 0FFh
.eh_frame_hdr:00000000000153F4                 db  14h
.eh_frame_hdr:00000000000153F5                 db  14h
.eh_frame_hdr:00000000000153F6                 db    0
.eh_frame_hdr:00000000000153F7                 db    0
.eh_frame_hdr:00000000000153F8                 db  54h ; T
.eh_frame_hdr:00000000000153F9                 db  81h
.eh_frame_hdr:00000000000153FA                 db 0FFh
.eh_frame_hdr:00000000000153FB                 db 0FFh
.eh_frame_hdr:00000000000153FC                 db  54h ; T
.eh_frame_hdr:00000000000153FD                 db  14h
.eh_frame_hdr:00000000000153FE                 db    0
.eh_frame_hdr:00000000000153FF                 db    0
.eh_frame_hdr:0000000000015400                 db  84h
.eh_frame_hdr:0000000000015401                 db  81h
.eh_frame_hdr:0000000000015402                 db 0FFh
.eh_frame_hdr:0000000000015403                 db 0FFh
.eh_frame_hdr:0000000000015404                 db  68h ; h
.eh_frame_hdr:0000000000015405                 db  14h
.eh_frame_hdr:0000000000015406                 db    0
.eh_frame_hdr:0000000000015407                 db    0
.eh_frame_hdr:0000000000015408                 db 0B4h
.eh_frame_hdr:0000000000015409                 db  81h
.eh_frame_hdr:000000000001540A                 db 0FFh
.eh_frame_hdr:000000000001540B                 db 0FFh
.eh_frame_hdr:000000000001540C                 db  84h
.eh_frame_hdr:000000000001540D                 db  14h
.eh_frame_hdr:000000000001540E                 db    0
.eh_frame_hdr:000000000001540F                 db    0
.eh_frame_hdr:0000000000015410                 db  14h
.eh_frame_hdr:0000000000015411                 db  82h
.eh_frame_hdr:0000000000015412                 db 0FFh
.eh_frame_hdr:0000000000015413                 db 0FFh
.eh_frame_hdr:0000000000015414                 db 0C0h
.eh_frame_hdr:0000000000015415                 db  14h
.eh_frame_hdr:0000000000015416                 db    0
.eh_frame_hdr:0000000000015417                 db    0
.eh_frame_hdr:0000000000015418                 db 0A4h
.eh_frame_hdr:0000000000015419                 db  82h
.eh_frame_hdr:000000000001541A                 db 0FFh
.eh_frame_hdr:000000000001541B                 db 0FFh
.eh_frame_hdr:000000000001541C                 db 0F8h
.eh_frame_hdr:000000000001541D                 db  14h
.eh_frame_hdr:000000000001541E                 db    0
.eh_frame_hdr:000000000001541F                 db    0
.eh_frame_hdr:0000000000015420                 db 0E4h
.eh_frame_hdr:0000000000015421                 db  83h
.eh_frame_hdr:0000000000015422                 db 0FFh
.eh_frame_hdr:0000000000015423                 db 0FFh
.eh_frame_hdr:0000000000015424                 db  44h ; D
.eh_frame_hdr:0000000000015425                 db  15h
.eh_frame_hdr:0000000000015426                 db    0
.eh_frame_hdr:0000000000015427                 db    0
.eh_frame_hdr:0000000000015428                 db 0C4h
.eh_frame_hdr:0000000000015429                 db  84h
.eh_frame_hdr:000000000001542A                 db 0FFh
.eh_frame_hdr:000000000001542B                 db 0FFh
.eh_frame_hdr:000000000001542C                 db  98h
.eh_frame_hdr:000000000001542D                 db  15h
.eh_frame_hdr:000000000001542E                 db    0
.eh_frame_hdr:000000000001542F                 db    0
.eh_frame_hdr:0000000000015430                 db 0D4h
.eh_frame_hdr:0000000000015431                 db  84h
.eh_frame_hdr:0000000000015432                 db 0FFh
.eh_frame_hdr:0000000000015433                 db 0FFh
.eh_frame_hdr:0000000000015434                 db 0ACh
.eh_frame_hdr:0000000000015435                 db  15h
.eh_frame_hdr:0000000000015436                 db    0
.eh_frame_hdr:0000000000015437                 db    0
.eh_frame_hdr:0000000000015438                 db  84h
.eh_frame_hdr:0000000000015439                 db  85h
.eh_frame_hdr:000000000001543A                 db 0FFh
.eh_frame_hdr:000000000001543B                 db 0FFh
.eh_frame_hdr:000000000001543C                 db  0Ch
.eh_frame_hdr:000000000001543D                 db  16h
.eh_frame_hdr:000000000001543E                 db    0
.eh_frame_hdr:000000000001543F                 db    0
.eh_frame_hdr:0000000000015440                 db 0D4h
.eh_frame_hdr:0000000000015441                 db  86h
.eh_frame_hdr:0000000000015442                 db 0FFh
.eh_frame_hdr:0000000000015443                 db 0FFh
.eh_frame_hdr:0000000000015444                 db  44h ; D
.eh_frame_hdr:0000000000015445                 db  16h
.eh_frame_hdr:0000000000015446                 db    0
.eh_frame_hdr:0000000000015447                 db    0
.eh_frame_hdr:0000000000015448                 db 0D4h
.eh_frame_hdr:0000000000015449                 db  87h
.eh_frame_hdr:000000000001544A                 db 0FFh
.eh_frame_hdr:000000000001544B                 db 0FFh
.eh_frame_hdr:000000000001544C                 db  84h
.eh_frame_hdr:000000000001544D                 db  16h
.eh_frame_hdr:000000000001544E                 db    0
.eh_frame_hdr:000000000001544F                 db    0
.eh_frame_hdr:0000000000015450                 db  54h ; T
.eh_frame_hdr:0000000000015451                 db  88h
.eh_frame_hdr:0000000000015452                 db 0FFh
.eh_frame_hdr:0000000000015453                 db 0FFh
.eh_frame_hdr:0000000000015454                 db 0D4h
.eh_frame_hdr:0000000000015455                 db  16h
.eh_frame_hdr:0000000000015456                 db    0
.eh_frame_hdr:0000000000015457                 db    0
.eh_frame_hdr:0000000000015458                 db 0B4h
.eh_frame_hdr:0000000000015459                 db  88h
.eh_frame_hdr:000000000001545A                 db 0FFh
.eh_frame_hdr:000000000001545B                 db 0FFh
.eh_frame_hdr:000000000001545C                 db 0F4h
.eh_frame_hdr:000000000001545D                 db  16h
.eh_frame_hdr:000000000001545E                 db    0
.eh_frame_hdr:000000000001545F                 db    0
.eh_frame_hdr:0000000000015460                 db 0F4h
.eh_frame_hdr:0000000000015461                 db  88h
.eh_frame_hdr:0000000000015462                 db 0FFh
.eh_frame_hdr:0000000000015463                 db 0FFh
.eh_frame_hdr:0000000000015464                 db  14h
.eh_frame_hdr:0000000000015465                 db  17h
.eh_frame_hdr:0000000000015466                 db    0
.eh_frame_hdr:0000000000015467                 db    0
.eh_frame_hdr:0000000000015468                 db  44h ; D
.eh_frame_hdr:0000000000015469                 db  89h
.eh_frame_hdr:000000000001546A                 db 0FFh
.eh_frame_hdr:000000000001546B                 db 0FFh
.eh_frame_hdr:000000000001546C                 db  40h ; @
.eh_frame_hdr:000000000001546D                 db  17h
.eh_frame_hdr:000000000001546E                 db    0
.eh_frame_hdr:000000000001546F                 db    0
.eh_frame_hdr:0000000000015470                 db  94h
.eh_frame_hdr:0000000000015471                 db  89h
.eh_frame_hdr:0000000000015472                 db 0FFh
.eh_frame_hdr:0000000000015473                 db 0FFh
.eh_frame_hdr:0000000000015474                 db  6Ch ; l
.eh_frame_hdr:0000000000015475                 db  17h
.eh_frame_hdr:0000000000015476                 db    0
.eh_frame_hdr:0000000000015477                 db    0
.eh_frame_hdr:0000000000015478                 db  54h ; T
.eh_frame_hdr:0000000000015479                 db 0A4h
.eh_frame_hdr:000000000001547A                 db 0FFh
.eh_frame_hdr:000000000001547B                 db 0FFh
.eh_frame_hdr:000000000001547C                 db 0E4h
.eh_frame_hdr:000000000001547D                 db  17h
.eh_frame_hdr:000000000001547E                 db    0
.eh_frame_hdr:000000000001547F                 db    0
.eh_frame_hdr:0000000000015480                 db 0A4h
.eh_frame_hdr:0000000000015481                 db 0A4h
.eh_frame_hdr:0000000000015482                 db 0FFh
.eh_frame_hdr:0000000000015483                 db 0FFh
.eh_frame_hdr:0000000000015484                 db  14h
.eh_frame_hdr:0000000000015485                 db  18h
.eh_frame_hdr:0000000000015486                 db    0
.eh_frame_hdr:0000000000015487                 db    0
.eh_frame_hdr:0000000000015488                 db 0B4h
.eh_frame_hdr:0000000000015489                 db 0A4h
.eh_frame_hdr:000000000001548A                 db 0FFh
.eh_frame_hdr:000000000001548B                 db 0FFh
.eh_frame_hdr:000000000001548C                 db  2Ch ; ,
.eh_frame_hdr:000000000001548D                 db  18h
.eh_frame_hdr:000000000001548E                 db    0
.eh_frame_hdr:000000000001548F                 db    0
.eh_frame_hdr:0000000000015490                 db 0D4h
.eh_frame_hdr:0000000000015491                 db 0B5h
.eh_frame_hdr:0000000000015492                 db 0FFh
.eh_frame_hdr:0000000000015493                 db 0FFh
.eh_frame_hdr:0000000000015494                 db  5Ch ; \
.eh_frame_hdr:0000000000015495                 db  18h
.eh_frame_hdr:0000000000015496                 db    0
.eh_frame_hdr:0000000000015497                 db    0
.eh_frame_hdr:0000000000015498                 db 0D4h
.eh_frame_hdr:0000000000015499                 db 0B7h
.eh_frame_hdr:000000000001549A                 db 0FFh
.eh_frame_hdr:000000000001549B                 db 0FFh
.eh_frame_hdr:000000000001549C                 db  74h ; t
.eh_frame_hdr:000000000001549D                 db  18h
.eh_frame_hdr:000000000001549E                 db    0
.eh_frame_hdr:000000000001549F                 db    0
.eh_frame_hdr:00000000000154A0                 db 0C4h
.eh_frame_hdr:00000000000154A1                 db 0C4h
.eh_frame_hdr:00000000000154A2                 db 0FFh
.eh_frame_hdr:00000000000154A3                 db 0FFh
.eh_frame_hdr:00000000000154A4                 db 0C4h
.eh_frame_hdr:00000000000154A5                 db  18h
.eh_frame_hdr:00000000000154A6                 db    0
.eh_frame_hdr:00000000000154A7                 db    0
.eh_frame_hdr:00000000000154A8                 db  34h ; 4
.eh_frame_hdr:00000000000154A9                 db 0C5h
.eh_frame_hdr:00000000000154AA                 db 0FFh
.eh_frame_hdr:00000000000154AB                 db 0FFh
.eh_frame_hdr:00000000000154AC                 db  0Ch
.eh_frame_hdr:00000000000154AD                 db  19h
.eh_frame_hdr:00000000000154AE                 db    0
.eh_frame_hdr:00000000000154AF                 db    0
.eh_frame_hdr:00000000000154B0                 db  44h ; D
.eh_frame_hdr:00000000000154B1                 db 0C5h
.eh_frame_hdr:00000000000154B2                 db 0FFh
.eh_frame_hdr:00000000000154B3                 db 0FFh
.eh_frame_hdr:00000000000154B4                 db  24h ; $
.eh_frame_hdr:00000000000154B5                 db  19h
.eh_frame_hdr:00000000000154B6                 db    0
.eh_frame_hdr:00000000000154B7                 db    0
.eh_frame_hdr:00000000000154B7 _eh_frame_hdr   ends
.eh_frame_hdr:00000000000154B7
.eh_frame:00000000000154B8 ; ===========================================================================
.eh_frame:00000000000154B8
.eh_frame:00000000000154B8 ; Segment type: Pure data
.eh_frame:00000000000154B8 ; Segment permissions: Read
.eh_frame:00000000000154B8 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000154B8                 assume cs:_eh_frame
.eh_frame:00000000000154B8                 ;org 154B8h
.eh_frame:00000000000154B8                 db  14h
.eh_frame:00000000000154B9                 db    0
.eh_frame:00000000000154BA                 db    0
.eh_frame:00000000000154BB                 db    0
.eh_frame:00000000000154BC                 db    0
.eh_frame:00000000000154BD                 db    0
.eh_frame:00000000000154BE                 db    0
.eh_frame:00000000000154BF                 db    0
.eh_frame:00000000000154C0                 db    1
.eh_frame:00000000000154C1                 db  7Ah ; z
.eh_frame:00000000000154C2                 db  52h ; R
.eh_frame:00000000000154C3                 db    0
.eh_frame:00000000000154C4                 db    1
.eh_frame:00000000000154C5                 db  78h ; x
.eh_frame:00000000000154C6                 db  10h
.eh_frame:00000000000154C7                 db    1
.eh_frame:00000000000154C8                 db  1Bh
.eh_frame:00000000000154C9                 db  0Ch
.eh_frame:00000000000154CA                 db    7
.eh_frame:00000000000154CB                 db    8
.eh_frame:00000000000154CC                 db  90h
.eh_frame:00000000000154CD                 db    1
.eh_frame:00000000000154CE                 db    7
.eh_frame:00000000000154CF                 db  10h
.eh_frame:00000000000154D0                 db  14h
.eh_frame:00000000000154D1                 db    0
.eh_frame:00000000000154D2                 db    0
.eh_frame:00000000000154D3                 db    0
.eh_frame:00000000000154D4                 db  1Ch
.eh_frame:00000000000154D5                 db    0
.eh_frame:00000000000154D6                 db    0
.eh_frame:00000000000154D7                 db    0
.eh_frame:00000000000154D8                 db 0F8h
.eh_frame:00000000000154D9                 db 0DEh
.eh_frame:00000000000154DA                 db 0FEh
.eh_frame:00000000000154DB                 db 0FFh
.eh_frame:00000000000154DC                 db  2Bh ; +
.eh_frame:00000000000154DD                 db    0
.eh_frame:00000000000154DE                 db    0
.eh_frame:00000000000154DF                 db    0
.eh_frame:00000000000154E0                 db    0
.eh_frame:00000000000154E1                 db    0
.eh_frame:00000000000154E2                 db    0
.eh_frame:00000000000154E3                 db    0
.eh_frame:00000000000154E4                 db    0
.eh_frame:00000000000154E5                 db    0
.eh_frame:00000000000154E6                 db    0
.eh_frame:00000000000154E7                 db    0
.eh_frame:00000000000154E8                 db  14h
.eh_frame:00000000000154E9                 db    0
.eh_frame:00000000000154EA                 db    0
.eh_frame:00000000000154EB                 db    0
.eh_frame:00000000000154EC                 db    0
.eh_frame:00000000000154ED                 db    0
.eh_frame:00000000000154EE                 db    0
.eh_frame:00000000000154EF                 db    0
.eh_frame:00000000000154F0                 db    1
.eh_frame:00000000000154F1                 db  7Ah ; z
.eh_frame:00000000000154F2                 db  52h ; R
.eh_frame:00000000000154F3                 db    0
.eh_frame:00000000000154F4                 db    1
.eh_frame:00000000000154F5                 db  78h ; x
.eh_frame:00000000000154F6                 db  10h
.eh_frame:00000000000154F7                 db    1
.eh_frame:00000000000154F8                 db  1Bh
.eh_frame:00000000000154F9                 db  0Ch
.eh_frame:00000000000154FA                 db    7
.eh_frame:00000000000154FB                 db    8
.eh_frame:00000000000154FC                 db  90h
.eh_frame:00000000000154FD                 db    1
.eh_frame:00000000000154FE                 db    0
.eh_frame:00000000000154FF                 db    0
.eh_frame:0000000000015500                 db  24h ; $
.eh_frame:0000000000015501                 db    0
.eh_frame:0000000000015502                 db    0
.eh_frame:0000000000015503                 db    0
.eh_frame:0000000000015504                 db  1Ch
.eh_frame:0000000000015505                 db    0
.eh_frame:0000000000015506                 db    0
.eh_frame:0000000000015507                 db    0
.eh_frame:0000000000015508                 db    8
.eh_frame:0000000000015509                 db 0D2h
.eh_frame:000000000001550A                 db 0FEh
.eh_frame:000000000001550B                 db 0FFh
.eh_frame:000000000001550C                 db  50h ; P
.eh_frame:000000000001550D                 db    4
.eh_frame:000000000001550E                 db    0
.eh_frame:000000000001550F                 db    0
.eh_frame:0000000000015510                 db    0
.eh_frame:0000000000015511                 db  0Eh
.eh_frame:0000000000015512                 db  10h
.eh_frame:0000000000015513                 db  46h ; F
.eh_frame:0000000000015514                 db  0Eh
.eh_frame:0000000000015515                 db  18h
.eh_frame:0000000000015516                 db  4Ah ; J
.eh_frame:0000000000015517                 db  0Fh
.eh_frame:0000000000015518                 db  0Bh
.eh_frame:0000000000015519                 db  77h ; w
.eh_frame:000000000001551A                 db    8
.eh_frame:000000000001551B                 db  80h
.eh_frame:000000000001551C                 db    0
.eh_frame:000000000001551D                 db  3Fh ; ?
.eh_frame:000000000001551E                 db  1Ah
.eh_frame:000000000001551F                 db  3Bh ; ;
.eh_frame:0000000000015520                 db  2Ah ; *
.eh_frame:0000000000015521                 db  33h ; 3
.eh_frame:0000000000015522                 db  24h ; $
.eh_frame:0000000000015523                 db  22h ; "
.eh_frame:0000000000015524                 db    0
.eh_frame:0000000000015525                 db    0
.eh_frame:0000000000015526                 db    0
.eh_frame:0000000000015527                 db    0
.eh_frame:0000000000015528                 db  14h
.eh_frame:0000000000015529                 db    0
.eh_frame:000000000001552A                 db    0
.eh_frame:000000000001552B                 db    0
.eh_frame:000000000001552C                 db  44h ; D
.eh_frame:000000000001552D                 db    0
.eh_frame:000000000001552E                 db    0
.eh_frame:000000000001552F                 db    0
.eh_frame:0000000000015530                 db  30h ; 0
.eh_frame:0000000000015531                 db 0D6h
.eh_frame:0000000000015532                 db 0FEh
.eh_frame:0000000000015533                 db 0FFh
.eh_frame:0000000000015534                 db    8
.eh_frame:0000000000015535                 db    0
.eh_frame:0000000000015536                 db    0
.eh_frame:0000000000015537                 db    0
.eh_frame:0000000000015538                 db    0
.eh_frame:0000000000015539                 db    0
.eh_frame:000000000001553A                 db    0
.eh_frame:000000000001553B                 db    0
.eh_frame:000000000001553C                 db    0
.eh_frame:000000000001553D                 db    0
.eh_frame:000000000001553E                 db    0
.eh_frame:000000000001553F                 db    0
.eh_frame:0000000000015540                 db  30h ; 0
.eh_frame:0000000000015541                 db    0
.eh_frame:0000000000015542                 db    0
.eh_frame:0000000000015543                 db    0
.eh_frame:0000000000015544                 db  5Ch ; \
.eh_frame:0000000000015545                 db    0
.eh_frame:0000000000015546                 db    0
.eh_frame:0000000000015547                 db    0
.eh_frame:0000000000015548                 db  98h
.eh_frame:0000000000015549                 db 0DFh
.eh_frame:000000000001554A                 db 0FEh
.eh_frame:000000000001554B                 db 0FFh
.eh_frame:000000000001554C                 db  59h ; Y
.eh_frame:000000000001554D                 db    1
.eh_frame:000000000001554E                 db    0
.eh_frame:000000000001554F                 db    0
.eh_frame:0000000000015550                 db    0
.eh_frame:0000000000015551                 db  42h ; B
.eh_frame:0000000000015552                 db  0Eh
.eh_frame:0000000000015553                 db  10h
.eh_frame:0000000000015554                 db  8Ch
.eh_frame:0000000000015555                 db    2
.eh_frame:0000000000015556                 db  41h ; A
.eh_frame:0000000000015557                 db  0Eh
.eh_frame:0000000000015558                 db  18h
.eh_frame:0000000000015559                 db  86h
.eh_frame:000000000001555A                 db    3
.eh_frame:000000000001555B                 db  44h ; D
.eh_frame:000000000001555C                 db  0Eh
.eh_frame:000000000001555D                 db  20h
.eh_frame:000000000001555E                 db  83h
.eh_frame:000000000001555F                 db    4
.eh_frame:0000000000015560                 db  4Ah ; J
.eh_frame:0000000000015561                 db  0Eh
.eh_frame:0000000000015562                 db  90h
.eh_frame:0000000000015563                 db    1
.eh_frame:0000000000015564                 db    2
.eh_frame:0000000000015565                 db  95h
.eh_frame:0000000000015566                 db  0Ah
.eh_frame:0000000000015567                 db  0Eh
.eh_frame:0000000000015568                 db  20h
.eh_frame:0000000000015569                 db  41h ; A
.eh_frame:000000000001556A                 db  0Eh
.eh_frame:000000000001556B                 db  18h
.eh_frame:000000000001556C                 db  41h ; A
.eh_frame:000000000001556D                 db  0Eh
.eh_frame:000000000001556E                 db  10h
.eh_frame:000000000001556F                 db  42h ; B
.eh_frame:0000000000015570                 db  0Eh
.eh_frame:0000000000015571                 db    8
.eh_frame:0000000000015572                 db  46h ; F
.eh_frame:0000000000015573                 db  0Bh
.eh_frame:0000000000015574                 db  28h ; (
.eh_frame:0000000000015575                 db    0
.eh_frame:0000000000015576                 db    0
.eh_frame:0000000000015577                 db    0
.eh_frame:0000000000015578                 db  90h
.eh_frame:0000000000015579                 db    0
.eh_frame:000000000001557A                 db    0
.eh_frame:000000000001557B                 db    0
.eh_frame:000000000001557C                 db 0C4h
.eh_frame:000000000001557D                 db 0E0h
.eh_frame:000000000001557E                 db 0FEh
.eh_frame:000000000001557F                 db 0FFh
.eh_frame:0000000000015580                 db  9Ah
.eh_frame:0000000000015581                 db    6
.eh_frame:0000000000015582                 db    0
.eh_frame:0000000000015583                 db    0
.eh_frame:0000000000015584                 db    0
.eh_frame:0000000000015585                 db  42h ; B
.eh_frame:0000000000015586                 db  0Eh
.eh_frame:0000000000015587                 db  10h
.eh_frame:0000000000015588                 db  8Dh
.eh_frame:0000000000015589                 db    2
.eh_frame:000000000001558A                 db  42h ; B
.eh_frame:000000000001558B                 db  0Eh
.eh_frame:000000000001558C                 db  18h
.eh_frame:000000000001558D                 db  8Ch
.eh_frame:000000000001558E                 db    3
.eh_frame:000000000001558F                 db  46h ; F
.eh_frame:0000000000015590                 db  0Eh
.eh_frame:0000000000015591                 db  20h
.eh_frame:0000000000015592                 db  86h
.eh_frame:0000000000015593                 db    4
.eh_frame:0000000000015594                 db  41h ; A
.eh_frame:0000000000015595                 db  0Eh
.eh_frame:0000000000015596                 db  28h ; (
.eh_frame:0000000000015597                 db  83h
.eh_frame:0000000000015598                 db    5
.eh_frame:0000000000015599                 db  49h ; I
.eh_frame:000000000001559A                 db  0Eh
.eh_frame:000000000001559B                 db 0B0h
.eh_frame:000000000001559C                 db    1
.eh_frame:000000000001559D                 db    0
.eh_frame:000000000001559E                 db    0
.eh_frame:000000000001559F                 db    0
.eh_frame:00000000000155A0                 db  4Ch ; L
.eh_frame:00000000000155A1                 db    0
.eh_frame:00000000000155A2                 db    0
.eh_frame:00000000000155A3                 db    0
.eh_frame:00000000000155A4                 db 0BCh
.eh_frame:00000000000155A5                 db    0
.eh_frame:00000000000155A6                 db    0
.eh_frame:00000000000155A7                 db    0
.eh_frame:00000000000155A8                 db  28h ; (
.eh_frame:00000000000155A9                 db 0D6h
.eh_frame:00000000000155AA                 db 0FEh
.eh_frame:00000000000155AB                 db 0FFh
.eh_frame:00000000000155AC                 db 0FEh
.eh_frame:00000000000155AD                 db    7
.eh_frame:00000000000155AE                 db    0
.eh_frame:00000000000155AF                 db    0
.eh_frame:00000000000155B0                 db    0
.eh_frame:00000000000155B1                 db  42h ; B
.eh_frame:00000000000155B2                 db  0Eh
.eh_frame:00000000000155B3                 db  10h
.eh_frame:00000000000155B4                 db  8Fh
.eh_frame:00000000000155B5                 db    2
.eh_frame:00000000000155B6                 db  42h ; B
.eh_frame:00000000000155B7                 db  0Eh
.eh_frame:00000000000155B8                 db  18h
.eh_frame:00000000000155B9                 db  8Eh
.eh_frame:00000000000155BA                 db    3
.eh_frame:00000000000155BB                 db  45h ; E
.eh_frame:00000000000155BC                 db  0Eh
.eh_frame:00000000000155BD                 db  20h
.eh_frame:00000000000155BE                 db  8Dh
.eh_frame:00000000000155BF                 db    4
.eh_frame:00000000000155C0                 db  42h ; B
.eh_frame:00000000000155C1                 db  0Eh
.eh_frame:00000000000155C2                 db  28h ; (
.eh_frame:00000000000155C3                 db  8Ch
.eh_frame:00000000000155C4                 db    5
.eh_frame:00000000000155C5                 db  44h ; D
.eh_frame:00000000000155C6                 db  0Eh
.eh_frame:00000000000155C7                 db  30h ; 0
.eh_frame:00000000000155C8                 db  86h
.eh_frame:00000000000155C9                 db    6
.eh_frame:00000000000155CA                 db  41h ; A
.eh_frame:00000000000155CB                 db  0Eh
.eh_frame:00000000000155CC                 db  38h ; 8
.eh_frame:00000000000155CD                 db  83h
.eh_frame:00000000000155CE                 db    7
.eh_frame:00000000000155CF                 db  5Eh ; ^
.eh_frame:00000000000155D0                 db  0Eh
.eh_frame:00000000000155D1                 db 0B0h
.eh_frame:00000000000155D2                 db    2
.eh_frame:00000000000155D3                 db    3
.eh_frame:00000000000155D4                 db  0Eh
.eh_frame:00000000000155D5                 db    5
.eh_frame:00000000000155D6                 db  0Ah
.eh_frame:00000000000155D7                 db  0Eh
.eh_frame:00000000000155D8                 db  38h ; 8
.eh_frame:00000000000155D9                 db  41h ; A
.eh_frame:00000000000155DA                 db  0Eh
.eh_frame:00000000000155DB                 db  30h ; 0
.eh_frame:00000000000155DC                 db  41h ; A
.eh_frame:00000000000155DD                 db  0Eh
.eh_frame:00000000000155DE                 db  28h ; (
.eh_frame:00000000000155DF                 db  42h ; B
.eh_frame:00000000000155E0                 db  0Eh
.eh_frame:00000000000155E1                 db  20h
.eh_frame:00000000000155E2                 db  42h ; B
.eh_frame:00000000000155E3                 db  0Eh
.eh_frame:00000000000155E4                 db  18h
.eh_frame:00000000000155E5                 db  42h ; B
.eh_frame:00000000000155E6                 db  0Eh
.eh_frame:00000000000155E7                 db  10h
.eh_frame:00000000000155E8                 db  42h ; B
.eh_frame:00000000000155E9                 db  0Eh
.eh_frame:00000000000155EA                 db    8
.eh_frame:00000000000155EB                 db  41h ; A
.eh_frame:00000000000155EC                 db  0Bh
.eh_frame:00000000000155ED                 db    0
.eh_frame:00000000000155EE                 db    0
.eh_frame:00000000000155EF                 db    0
.eh_frame:00000000000155F0                 db  10h
.eh_frame:00000000000155F1                 db    0
.eh_frame:00000000000155F2                 db    0
.eh_frame:00000000000155F3                 db    0
.eh_frame:00000000000155F4                 db  0Ch
.eh_frame:00000000000155F5                 db    1
.eh_frame:00000000000155F6                 db    0
.eh_frame:00000000000155F7                 db    0
.eh_frame:00000000000155F8                 db 0E8h
.eh_frame:00000000000155F9                 db 0E6h
.eh_frame:00000000000155FA                 db 0FEh
.eh_frame:00000000000155FB                 db 0FFh
.eh_frame:00000000000155FC                 db  0Ah
.eh_frame:00000000000155FD                 db    0
.eh_frame:00000000000155FE                 db    0
.eh_frame:00000000000155FF                 db    0
.eh_frame:0000000000015600                 db    0
.eh_frame:0000000000015601                 db    0
.eh_frame:0000000000015602                 db    0
.eh_frame:0000000000015603                 db    0
.eh_frame:0000000000015604                 db  48h ; H
.eh_frame:0000000000015605                 db    0
.eh_frame:0000000000015606                 db    0
.eh_frame:0000000000015607                 db    0
.eh_frame:0000000000015608                 db  20h
.eh_frame:0000000000015609                 db    1
.eh_frame:000000000001560A                 db    0
.eh_frame:000000000001560B                 db    0
.eh_frame:000000000001560C                 db 0E4h
.eh_frame:000000000001560D                 db 0E6h
.eh_frame:000000000001560E                 db 0FEh
.eh_frame:000000000001560F                 db 0FFh
.eh_frame:0000000000015610                 db  16h
.eh_frame:0000000000015611                 db    1
.eh_frame:0000000000015612                 db    0
.eh_frame:0000000000015613                 db    0
.eh_frame:0000000000015614                 db    0
.eh_frame:0000000000015615                 db  42h ; B
.eh_frame:0000000000015616                 db  0Eh
.eh_frame:0000000000015617                 db  10h
.eh_frame:0000000000015618                 db  8Fh
.eh_frame:0000000000015619                 db    2
.eh_frame:000000000001561A                 db  42h ; B
.eh_frame:000000000001561B                 db  0Eh
.eh_frame:000000000001561C                 db  18h
.eh_frame:000000000001561D                 db  8Eh
.eh_frame:000000000001561E                 db    3
.eh_frame:000000000001561F                 db  45h ; E
.eh_frame:0000000000015620                 db  0Eh
.eh_frame:0000000000015621                 db  20h
.eh_frame:0000000000015622                 db  8Dh
.eh_frame:0000000000015623                 db    4
.eh_frame:0000000000015624                 db  42h ; B
.eh_frame:0000000000015625                 db  0Eh
.eh_frame:0000000000015626                 db  28h ; (
.eh_frame:0000000000015627                 db  8Ch
.eh_frame:0000000000015628                 db    5
.eh_frame:0000000000015629                 db  44h ; D
.eh_frame:000000000001562A                 db  0Eh
.eh_frame:000000000001562B                 db  30h ; 0
.eh_frame:000000000001562C                 db  86h
.eh_frame:000000000001562D                 db    6
.eh_frame:000000000001562E                 db  41h ; A
.eh_frame:000000000001562F                 db  0Eh
.eh_frame:0000000000015630                 db  38h ; 8
.eh_frame:0000000000015631                 db  83h
.eh_frame:0000000000015632                 db    7
.eh_frame:0000000000015633                 db  47h ; G
.eh_frame:0000000000015634                 db  0Eh
.eh_frame:0000000000015635                 db  60h ; `
.eh_frame:0000000000015636                 db    2
.eh_frame:0000000000015637                 db 0DEh
.eh_frame:0000000000015638                 db  0Ah
.eh_frame:0000000000015639                 db  0Eh
.eh_frame:000000000001563A                 db  38h ; 8
.eh_frame:000000000001563B                 db  41h ; A
.eh_frame:000000000001563C                 db  0Eh
.eh_frame:000000000001563D                 db  30h ; 0
.eh_frame:000000000001563E                 db  41h ; A
.eh_frame:000000000001563F                 db  0Eh
.eh_frame:0000000000015640                 db  28h ; (
.eh_frame:0000000000015641                 db  42h ; B
.eh_frame:0000000000015642                 db  0Eh
.eh_frame:0000000000015643                 db  20h
.eh_frame:0000000000015644                 db  42h ; B
.eh_frame:0000000000015645                 db  0Eh
.eh_frame:0000000000015646                 db  18h
.eh_frame:0000000000015647                 db  42h ; B
.eh_frame:0000000000015648                 db  0Eh
.eh_frame:0000000000015649                 db  10h
.eh_frame:000000000001564A                 db  42h ; B
.eh_frame:000000000001564B                 db  0Eh
.eh_frame:000000000001564C                 db    8
.eh_frame:000000000001564D                 db  41h ; A
.eh_frame:000000000001564E                 db  0Bh
.eh_frame:000000000001564F                 db    0
.eh_frame:0000000000015650                 db  28h ; (
.eh_frame:0000000000015651                 db    0
.eh_frame:0000000000015652                 db    0
.eh_frame:0000000000015653                 db    0
.eh_frame:0000000000015654                 db  6Ch ; l
.eh_frame:0000000000015655                 db    1
.eh_frame:0000000000015656                 db    0
.eh_frame:0000000000015657                 db    0
.eh_frame:0000000000015658                 db 0B8h
.eh_frame:0000000000015659                 db 0E7h
.eh_frame:000000000001565A                 db 0FEh
.eh_frame:000000000001565B                 db 0FFh
.eh_frame:000000000001565C                 db  73h ; s
.eh_frame:000000000001565D                 db    0
.eh_frame:000000000001565E                 db    0
.eh_frame:000000000001565F                 db    0
.eh_frame:0000000000015660                 db    0
.eh_frame:0000000000015661                 db  46h ; F
.eh_frame:0000000000015662                 db  0Eh
.eh_frame:0000000000015663                 db  10h
.eh_frame:0000000000015664                 db  8Ch
.eh_frame:0000000000015665                 db    2
.eh_frame:0000000000015666                 db  46h ; F
.eh_frame:0000000000015667                 db  0Eh
.eh_frame:0000000000015668                 db  18h
.eh_frame:0000000000015669                 db  86h
.eh_frame:000000000001566A                 db    3
.eh_frame:000000000001566B                 db  44h ; D
.eh_frame:000000000001566C                 db  0Eh
.eh_frame:000000000001566D                 db  20h
.eh_frame:000000000001566E                 db  83h
.eh_frame:000000000001566F                 db    4
.eh_frame:0000000000015670                 db  7Fh ; 
.eh_frame:0000000000015671                 db  0Ah
.eh_frame:0000000000015672                 db  0Eh
.eh_frame:0000000000015673                 db  18h
.eh_frame:0000000000015674                 db  41h ; A
.eh_frame:0000000000015675                 db  0Eh
.eh_frame:0000000000015676                 db  10h
.eh_frame:0000000000015677                 db  42h ; B
.eh_frame:0000000000015678                 db  0Eh
.eh_frame:0000000000015679                 db    8
.eh_frame:000000000001567A                 db  4Eh ; N
.eh_frame:000000000001567B                 db  0Bh
.eh_frame:000000000001567C                 db  5Ch ; \
.eh_frame:000000000001567D                 db    0
.eh_frame:000000000001567E                 db    0
.eh_frame:000000000001567F                 db    0
.eh_frame:0000000000015680                 db  98h
.eh_frame:0000000000015681                 db    1
.eh_frame:0000000000015682                 db    0
.eh_frame:0000000000015683                 db    0
.eh_frame:0000000000015684                 db  0Ch
.eh_frame:0000000000015685                 db 0E8h
.eh_frame:0000000000015686                 db 0FEh
.eh_frame:0000000000015687                 db 0FFh
.eh_frame:0000000000015688                 db  20h
.eh_frame:0000000000015689                 db    1
.eh_frame:000000000001568A                 db    0
.eh_frame:000000000001568B                 db    0
.eh_frame:000000000001568C                 db    0
.eh_frame:000000000001568D                 db  42h ; B
.eh_frame:000000000001568E                 db  0Eh
.eh_frame:000000000001568F                 db  10h
.eh_frame:0000000000015690                 db  8Fh
.eh_frame:0000000000015691                 db    2
.eh_frame:0000000000015692                 db  42h ; B
.eh_frame:0000000000015693                 db  0Eh
.eh_frame:0000000000015694                 db  18h
.eh_frame:0000000000015695                 db  8Eh
.eh_frame:0000000000015696                 db    3
.eh_frame:0000000000015697                 db  45h ; E
.eh_frame:0000000000015698                 db  0Eh
.eh_frame:0000000000015699                 db  20h
.eh_frame:000000000001569A                 db  8Dh
.eh_frame:000000000001569B                 db    4
.eh_frame:000000000001569C                 db  42h ; B
.eh_frame:000000000001569D                 db  0Eh
.eh_frame:000000000001569E                 db  28h ; (
.eh_frame:000000000001569F                 db  8Ch
.eh_frame:00000000000156A0                 db    5
.eh_frame:00000000000156A1                 db  43h ; C
.eh_frame:00000000000156A2                 db  0Eh
.eh_frame:00000000000156A3                 db  30h ; 0
.eh_frame:00000000000156A4                 db  86h
.eh_frame:00000000000156A5                 db    6
.eh_frame:00000000000156A6                 db  41h ; A
.eh_frame:00000000000156A7                 db  0Eh
.eh_frame:00000000000156A8                 db  38h ; 8
.eh_frame:00000000000156A9                 db  83h
.eh_frame:00000000000156AA                 db    7
.eh_frame:00000000000156AB                 db  56h ; V
.eh_frame:00000000000156AC                 db  0Eh
.eh_frame:00000000000156AD                 db  40h ; @
.eh_frame:00000000000156AE                 db    2
.eh_frame:00000000000156AF                 db 0D3h
.eh_frame:00000000000156B0                 db  0Ah
.eh_frame:00000000000156B1                 db  0Eh
.eh_frame:00000000000156B2                 db  38h ; 8
.eh_frame:00000000000156B3                 db  41h ; A
.eh_frame:00000000000156B4                 db  0Eh
.eh_frame:00000000000156B5                 db  30h ; 0
.eh_frame:00000000000156B6                 db  41h ; A
.eh_frame:00000000000156B7                 db  0Eh
.eh_frame:00000000000156B8                 db  28h ; (
.eh_frame:00000000000156B9                 db  42h ; B
.eh_frame:00000000000156BA                 db  0Eh
.eh_frame:00000000000156BB                 db  20h
.eh_frame:00000000000156BC                 db  42h ; B
.eh_frame:00000000000156BD                 db  0Eh
.eh_frame:00000000000156BE                 db  18h
.eh_frame:00000000000156BF                 db  42h ; B
.eh_frame:00000000000156C0                 db  0Eh
.eh_frame:00000000000156C1                 db  10h
.eh_frame:00000000000156C2                 db  42h ; B
.eh_frame:00000000000156C3                 db  0Eh
.eh_frame:00000000000156C4                 db    8
.eh_frame:00000000000156C5                 db  46h ; F
.eh_frame:00000000000156C6                 db  0Bh
.eh_frame:00000000000156C7                 db  44h ; D
.eh_frame:00000000000156C8                 db  0Eh
.eh_frame:00000000000156C9                 db  38h ; 8
.eh_frame:00000000000156CA                 db  46h ; F
.eh_frame:00000000000156CB                 db  0Eh
.eh_frame:00000000000156CC                 db  30h ; 0
.eh_frame:00000000000156CD                 db  41h ; A
.eh_frame:00000000000156CE                 db  0Eh
.eh_frame:00000000000156CF                 db  28h ; (
.eh_frame:00000000000156D0                 db  42h ; B
.eh_frame:00000000000156D1                 db  0Eh
.eh_frame:00000000000156D2                 db  20h
.eh_frame:00000000000156D3                 db  42h ; B
.eh_frame:00000000000156D4                 db  0Eh
.eh_frame:00000000000156D5                 db  18h
.eh_frame:00000000000156D6                 db  42h ; B
.eh_frame:00000000000156D7                 db  0Eh
.eh_frame:00000000000156D8                 db  10h
.eh_frame:00000000000156D9                 db  42h ; B
.eh_frame:00000000000156DA                 db  0Eh
.eh_frame:00000000000156DB                 db    8
.eh_frame:00000000000156DC                 db  48h ; H
.eh_frame:00000000000156DD                 db    0
.eh_frame:00000000000156DE                 db    0
.eh_frame:00000000000156DF                 db    0
.eh_frame:00000000000156E0                 db 0F8h
.eh_frame:00000000000156E1                 db    1
.eh_frame:00000000000156E2                 db    0
.eh_frame:00000000000156E3                 db    0
.eh_frame:00000000000156E4                 db 0CCh
.eh_frame:00000000000156E5                 db 0E8h
.eh_frame:00000000000156E6                 db 0FEh
.eh_frame:00000000000156E7                 db 0FFh
.eh_frame:00000000000156E8                 db  6Dh ; m
.eh_frame:00000000000156E9                 db    0
.eh_frame:00000000000156EA                 db    0
.eh_frame:00000000000156EB                 db    0
.eh_frame:00000000000156EC                 db    0
.eh_frame:00000000000156ED                 db  42h ; B
.eh_frame:00000000000156EE                 db  0Eh
.eh_frame:00000000000156EF                 db  10h
.eh_frame:00000000000156F0                 db  8Fh
.eh_frame:00000000000156F1                 db    2
.eh_frame:00000000000156F2                 db  42h ; B
.eh_frame:00000000000156F3                 db  0Eh
.eh_frame:00000000000156F4                 db  18h
.eh_frame:00000000000156F5                 db  8Eh
.eh_frame:00000000000156F6                 db    3
.eh_frame:00000000000156F7                 db  45h ; E
.eh_frame:00000000000156F8                 db  0Eh
.eh_frame:00000000000156F9                 db  20h
.eh_frame:00000000000156FA                 db  8Dh
.eh_frame:00000000000156FB                 db    4
.eh_frame:00000000000156FC                 db  42h ; B
.eh_frame:00000000000156FD                 db  0Eh
.eh_frame:00000000000156FE                 db  28h ; (
.eh_frame:00000000000156FF                 db  8Ch
.eh_frame:0000000000015700                 db    5
.eh_frame:0000000000015701                 db  44h ; D
.eh_frame:0000000000015702                 db  0Eh
.eh_frame:0000000000015703                 db  30h ; 0
.eh_frame:0000000000015704                 db  86h
.eh_frame:0000000000015705                 db    6
.eh_frame:0000000000015706                 db  41h ; A
.eh_frame:0000000000015707                 db  0Eh
.eh_frame:0000000000015708                 db  38h ; 8
.eh_frame:0000000000015709                 db  83h
.eh_frame:000000000001570A                 db    7
.eh_frame:000000000001570B                 db  50h ; P
.eh_frame:000000000001570C                 db  0Eh
.eh_frame:000000000001570D                 db  40h ; @
.eh_frame:000000000001570E                 db  5Ah ; Z
.eh_frame:000000000001570F                 db  0Ah
.eh_frame:0000000000015710                 db  0Eh
.eh_frame:0000000000015711                 db  38h ; 8
.eh_frame:0000000000015712                 db  41h ; A
.eh_frame:0000000000015713                 db  0Eh
.eh_frame:0000000000015714                 db  30h ; 0
.eh_frame:0000000000015715                 db  41h ; A
.eh_frame:0000000000015716                 db  0Eh
.eh_frame:0000000000015717                 db  28h ; (
.eh_frame:0000000000015718                 db  42h ; B
.eh_frame:0000000000015719                 db  0Eh
.eh_frame:000000000001571A                 db  20h
.eh_frame:000000000001571B                 db  42h ; B
.eh_frame:000000000001571C                 db  0Eh
.eh_frame:000000000001571D                 db  18h
.eh_frame:000000000001571E                 db  42h ; B
.eh_frame:000000000001571F                 db  0Eh
.eh_frame:0000000000015720                 db  10h
.eh_frame:0000000000015721                 db  42h ; B
.eh_frame:0000000000015722                 db  0Eh
.eh_frame:0000000000015723                 db    8
.eh_frame:0000000000015724                 db  41h ; A
.eh_frame:0000000000015725                 db  0Bh
.eh_frame:0000000000015726                 db    0
.eh_frame:0000000000015727                 db    0
.eh_frame:0000000000015728                 db  3Ch ; <
.eh_frame:0000000000015729                 db    0
.eh_frame:000000000001572A                 db    0
.eh_frame:000000000001572B                 db    0
.eh_frame:000000000001572C                 db  44h ; D
.eh_frame:000000000001572D                 db    2
.eh_frame:000000000001572E                 db    0
.eh_frame:000000000001572F                 db    0
.eh_frame:0000000000015730                 db 0F0h
.eh_frame:0000000000015731                 db 0E8h
.eh_frame:0000000000015732                 db 0FEh
.eh_frame:0000000000015733                 db 0FFh
.eh_frame:0000000000015734                 db  4Dh ; M
.eh_frame:0000000000015735                 db    0
.eh_frame:0000000000015736                 db    0
.eh_frame:0000000000015737                 db    0
.eh_frame:0000000000015738                 db    0
.eh_frame:0000000000015739                 db  42h ; B
.eh_frame:000000000001573A                 db  0Eh
.eh_frame:000000000001573B                 db  10h
.eh_frame:000000000001573C                 db  8Eh
.eh_frame:000000000001573D                 db    2
.eh_frame:000000000001573E                 db  42h ; B
.eh_frame:000000000001573F                 db  0Eh
.eh_frame:0000000000015740                 db  18h
.eh_frame:0000000000015741                 db  8Dh
.eh_frame:0000000000015742                 db    3
.eh_frame:0000000000015743                 db  42h ; B
.eh_frame:0000000000015744                 db  0Eh
.eh_frame:0000000000015745                 db  20h
.eh_frame:0000000000015746                 db  8Ch
.eh_frame:0000000000015747                 db    4
.eh_frame:0000000000015748                 db  41h ; A
.eh_frame:0000000000015749                 db  0Eh
.eh_frame:000000000001574A                 db  28h ; (
.eh_frame:000000000001574B                 db  86h
.eh_frame:000000000001574C                 db    5
.eh_frame:000000000001574D                 db  41h ; A
.eh_frame:000000000001574E                 db  0Eh
.eh_frame:000000000001574F                 db  30h ; 0
.eh_frame:0000000000015750                 db  83h
.eh_frame:0000000000015751                 db    6
.eh_frame:0000000000015752                 db  7Ah ; z
.eh_frame:0000000000015753                 db  0Eh
.eh_frame:0000000000015754                 db  28h ; (
.eh_frame:0000000000015755                 db  44h ; D
.eh_frame:0000000000015756                 db  0Eh
.eh_frame:0000000000015757                 db  20h
.eh_frame:0000000000015758                 db  42h ; B
.eh_frame:0000000000015759                 db  0Eh
.eh_frame:000000000001575A                 db  18h
.eh_frame:000000000001575B                 db  42h ; B
.eh_frame:000000000001575C                 db  0Eh
.eh_frame:000000000001575D                 db  10h
.eh_frame:000000000001575E                 db  42h ; B
.eh_frame:000000000001575F                 db  0Eh
.eh_frame:0000000000015760                 db    8
.eh_frame:0000000000015761                 db    0
.eh_frame:0000000000015762                 db    0
.eh_frame:0000000000015763                 db    0
.eh_frame:0000000000015764                 db    0
.eh_frame:0000000000015765                 db    0
.eh_frame:0000000000015766                 db    0
.eh_frame:0000000000015767                 db    0
.eh_frame:0000000000015768                 db  10h
.eh_frame:0000000000015769                 db    0
.eh_frame:000000000001576A                 db    0
.eh_frame:000000000001576B                 db    0
.eh_frame:000000000001576C                 db  84h
.eh_frame:000000000001576D                 db    2
.eh_frame:000000000001576E                 db    0
.eh_frame:000000000001576F                 db    0
.eh_frame:0000000000015770                 db    0
.eh_frame:0000000000015771                 db 0E9h
.eh_frame:0000000000015772                 db 0FEh
.eh_frame:0000000000015773                 db 0FFh
.eh_frame:0000000000015774                 db    8
.eh_frame:0000000000015775                 db    0
.eh_frame:0000000000015776                 db    0
.eh_frame:0000000000015777                 db    0
.eh_frame:0000000000015778                 db    0
.eh_frame:0000000000015779                 db    0
.eh_frame:000000000001577A                 db    0
.eh_frame:000000000001577B                 db    0
.eh_frame:000000000001577C                 db  10h
.eh_frame:000000000001577D                 db    0
.eh_frame:000000000001577E                 db    0
.eh_frame:000000000001577F                 db    0
.eh_frame:0000000000015780                 db  98h
.eh_frame:0000000000015781                 db    2
.eh_frame:0000000000015782                 db    0
.eh_frame:0000000000015783                 db    0
.eh_frame:0000000000015784                 db 0FCh
.eh_frame:0000000000015785                 db 0E8h
.eh_frame:0000000000015786                 db 0FEh
.eh_frame:0000000000015787                 db 0FFh
.eh_frame:0000000000015788                 db    8
.eh_frame:0000000000015789                 db    0
.eh_frame:000000000001578A                 db    0
.eh_frame:000000000001578B                 db    0
.eh_frame:000000000001578C                 db    0
.eh_frame:000000000001578D                 db    0
.eh_frame:000000000001578E                 db    0
.eh_frame:000000000001578F                 db    0
.eh_frame:0000000000015790                 db  2Ch ; ,
.eh_frame:0000000000015791                 db    0
.eh_frame:0000000000015792                 db    0
.eh_frame:0000000000015793                 db    0
.eh_frame:0000000000015794                 db 0ACh
.eh_frame:0000000000015795                 db    2
.eh_frame:0000000000015796                 db    0
.eh_frame:0000000000015797                 db    0
.eh_frame:0000000000015798                 db 0F8h
.eh_frame:0000000000015799                 db 0E8h
.eh_frame:000000000001579A                 db 0FEh
.eh_frame:000000000001579B                 db 0FFh
.eh_frame:000000000001579C                 db 0A4h
.eh_frame:000000000001579D                 db    0
.eh_frame:000000000001579E                 db    0
.eh_frame:000000000001579F                 db    0
.eh_frame:00000000000157A0                 db    0
.eh_frame:00000000000157A1                 db  41h ; A
.eh_frame:00000000000157A2                 db  0Eh
.eh_frame:00000000000157A3                 db  10h
.eh_frame:00000000000157A4                 db  86h
.eh_frame:00000000000157A5                 db    2
.eh_frame:00000000000157A6                 db  41h ; A
.eh_frame:00000000000157A7                 db  0Eh
.eh_frame:00000000000157A8                 db  18h
.eh_frame:00000000000157A9                 db  83h
.eh_frame:00000000000157AA                 db    3
.eh_frame:00000000000157AB                 db  44h ; D
.eh_frame:00000000000157AC                 db  0Eh
.eh_frame:00000000000157AD                 db  20h
.eh_frame:00000000000157AE                 db  7Ah ; z
.eh_frame:00000000000157AF                 db  0Ah
.eh_frame:00000000000157B0                 db  0Eh
.eh_frame:00000000000157B1                 db  18h
.eh_frame:00000000000157B2                 db  41h ; A
.eh_frame:00000000000157B3                 db  0Eh
.eh_frame:00000000000157B4                 db  10h
.eh_frame:00000000000157B5                 db  41h ; A
.eh_frame:00000000000157B6                 db  0Eh
.eh_frame:00000000000157B7                 db    8
.eh_frame:00000000000157B8                 db  41h ; A
.eh_frame:00000000000157B9                 db  0Bh
.eh_frame:00000000000157BA                 db    0
.eh_frame:00000000000157BB                 db    0
.eh_frame:00000000000157BC                 db    0
.eh_frame:00000000000157BD                 db    0
.eh_frame:00000000000157BE                 db    0
.eh_frame:00000000000157BF                 db    0
.eh_frame:00000000000157C0                 db  38h ; 8
.eh_frame:00000000000157C1                 db    0
.eh_frame:00000000000157C2                 db    0
.eh_frame:00000000000157C3                 db    0
.eh_frame:00000000000157C4                 db 0DCh
.eh_frame:00000000000157C5                 db    2
.eh_frame:00000000000157C6                 db    0
.eh_frame:00000000000157C7                 db    0
.eh_frame:00000000000157C8                 db  78h ; x
.eh_frame:00000000000157C9                 db 0E9h
.eh_frame:00000000000157CA                 db 0FEh
.eh_frame:00000000000157CB                 db 0FFh
.eh_frame:00000000000157CC                 db  52h ; R
.eh_frame:00000000000157CD                 db    0
.eh_frame:00000000000157CE                 db    0
.eh_frame:00000000000157CF                 db    0
.eh_frame:00000000000157D0                 db    0
.eh_frame:00000000000157D1                 db  47h ; G
.eh_frame:00000000000157D2                 db  0Eh
.eh_frame:00000000000157D3                 db  10h
.eh_frame:00000000000157D4                 db  8Dh
.eh_frame:00000000000157D5                 db    2
.eh_frame:00000000000157D6                 db  42h ; B
.eh_frame:00000000000157D7                 db  0Eh
.eh_frame:00000000000157D8                 db  18h
.eh_frame:00000000000157D9                 db  8Ch
.eh_frame:00000000000157DA                 db    3
.eh_frame:00000000000157DB                 db  44h ; D
.eh_frame:00000000000157DC                 db  0Eh
.eh_frame:00000000000157DD                 db  20h
.eh_frame:00000000000157DE                 db  86h
.eh_frame:00000000000157DF                 db    4
.eh_frame:00000000000157E0                 db  41h ; A
.eh_frame:00000000000157E1                 db  0Eh
.eh_frame:00000000000157E2                 db  28h ; (
.eh_frame:00000000000157E3                 db  83h
.eh_frame:00000000000157E4                 db    5
.eh_frame:00000000000157E5                 db  4Ah ; J
.eh_frame:00000000000157E6                 db  0Eh
.eh_frame:00000000000157E7                 db  30h ; 0
.eh_frame:00000000000157E8                 db  6Fh ; o
.eh_frame:00000000000157E9                 db  0Eh
.eh_frame:00000000000157EA                 db  28h ; (
.eh_frame:00000000000157EB                 db  41h ; A
.eh_frame:00000000000157EC                 db  0Eh
.eh_frame:00000000000157ED                 db  20h
.eh_frame:00000000000157EE                 db  41h ; A
.eh_frame:00000000000157EF                 db  0Eh
.eh_frame:00000000000157F0                 db  18h
.eh_frame:00000000000157F1                 db  42h ; B
.eh_frame:00000000000157F2                 db  0Eh
.eh_frame:00000000000157F3                 db  10h
.eh_frame:00000000000157F4                 db  42h ; B
.eh_frame:00000000000157F5                 db  0Eh
.eh_frame:00000000000157F6                 db    8
.eh_frame:00000000000157F7                 db  43h ; C
.eh_frame:00000000000157F8                 db 0C3h
.eh_frame:00000000000157F9                 db 0C6h
.eh_frame:00000000000157FA                 db 0CCh
.eh_frame:00000000000157FB                 db 0CDh
.eh_frame:00000000000157FC                 db  38h ; 8
.eh_frame:00000000000157FD                 db    0
.eh_frame:00000000000157FE                 db    0
.eh_frame:00000000000157FF                 db    0
.eh_frame:0000000000015800                 db  18h
.eh_frame:0000000000015801                 db    3
.eh_frame:0000000000015802                 db    0
.eh_frame:0000000000015803                 db    0
.eh_frame:0000000000015804                 db  9Ch
.eh_frame:0000000000015805                 db 0E9h
.eh_frame:0000000000015806                 db 0FEh
.eh_frame:0000000000015807                 db 0FFh
.eh_frame:0000000000015808                 db  52h ; R
.eh_frame:0000000000015809                 db    0
.eh_frame:000000000001580A                 db    0
.eh_frame:000000000001580B                 db    0
.eh_frame:000000000001580C                 db    0
.eh_frame:000000000001580D                 db  47h ; G
.eh_frame:000000000001580E                 db  0Eh
.eh_frame:000000000001580F                 db  10h
.eh_frame:0000000000015810                 db  8Dh
.eh_frame:0000000000015811                 db    2
.eh_frame:0000000000015812                 db  42h ; B
.eh_frame:0000000000015813                 db  0Eh
.eh_frame:0000000000015814                 db  18h
.eh_frame:0000000000015815                 db  8Ch
.eh_frame:0000000000015816                 db    3
.eh_frame:0000000000015817                 db  44h ; D
.eh_frame:0000000000015818                 db  0Eh
.eh_frame:0000000000015819                 db  20h
.eh_frame:000000000001581A                 db  86h
.eh_frame:000000000001581B                 db    4
.eh_frame:000000000001581C                 db  41h ; A
.eh_frame:000000000001581D                 db  0Eh
.eh_frame:000000000001581E                 db  28h ; (
.eh_frame:000000000001581F                 db  83h
.eh_frame:0000000000015820                 db    5
.eh_frame:0000000000015821                 db  4Ah ; J
.eh_frame:0000000000015822                 db  0Eh
.eh_frame:0000000000015823                 db  30h ; 0
.eh_frame:0000000000015824                 db  6Fh ; o
.eh_frame:0000000000015825                 db  0Eh
.eh_frame:0000000000015826                 db  28h ; (
.eh_frame:0000000000015827                 db  41h ; A
.eh_frame:0000000000015828                 db  0Eh
.eh_frame:0000000000015829                 db  20h
.eh_frame:000000000001582A                 db  41h ; A
.eh_frame:000000000001582B                 db  0Eh
.eh_frame:000000000001582C                 db  18h
.eh_frame:000000000001582D                 db  42h ; B
.eh_frame:000000000001582E                 db  0Eh
.eh_frame:000000000001582F                 db  10h
.eh_frame:0000000000015830                 db  42h ; B
.eh_frame:0000000000015831                 db  0Eh
.eh_frame:0000000000015832                 db    8
.eh_frame:0000000000015833                 db  43h ; C
.eh_frame:0000000000015834                 db 0C3h
.eh_frame:0000000000015835                 db 0C6h
.eh_frame:0000000000015836                 db 0CCh
.eh_frame:0000000000015837                 db 0CDh
.eh_frame:0000000000015838                 db  74h ; t
.eh_frame:0000000000015839                 db    0
.eh_frame:000000000001583A                 db    0
.eh_frame:000000000001583B                 db    0
.eh_frame:000000000001583C                 db  54h ; T
.eh_frame:000000000001583D                 db    3
.eh_frame:000000000001583E                 db    0
.eh_frame:000000000001583F                 db    0
.eh_frame:0000000000015840                 db 0C0h
.eh_frame:0000000000015841                 db 0E9h
.eh_frame:0000000000015842                 db 0FEh
.eh_frame:0000000000015843                 db 0FFh
.eh_frame:0000000000015844                 db  17h
.eh_frame:0000000000015845                 db  1Ch
.eh_frame:0000000000015846                 db    0
.eh_frame:0000000000015847                 db    0
.eh_frame:0000000000015848                 db    0
.eh_frame:0000000000015849                 db  42h ; B
.eh_frame:000000000001584A                 db  0Eh
.eh_frame:000000000001584B                 db  10h
.eh_frame:000000000001584C                 db  8Fh
.eh_frame:000000000001584D                 db    2
.eh_frame:000000000001584E                 db  42h ; B
.eh_frame:000000000001584F                 db  0Eh
.eh_frame:0000000000015850                 db  18h
.eh_frame:0000000000015851                 db  8Eh
.eh_frame:0000000000015852                 db    3
.eh_frame:0000000000015853                 db  45h ; E
.eh_frame:0000000000015854                 db  0Eh
.eh_frame:0000000000015855                 db  20h
.eh_frame:0000000000015856                 db  8Dh
.eh_frame:0000000000015857                 db    4
.eh_frame:0000000000015858                 db  42h ; B
.eh_frame:0000000000015859                 db  0Eh
.eh_frame:000000000001585A                 db  28h ; (
.eh_frame:000000000001585B                 db  8Ch
.eh_frame:000000000001585C                 db    5
.eh_frame:000000000001585D                 db  44h ; D
.eh_frame:000000000001585E                 db  0Eh
.eh_frame:000000000001585F                 db  30h ; 0
.eh_frame:0000000000015860                 db  86h
.eh_frame:0000000000015861                 db    6
.eh_frame:0000000000015862                 db  41h ; A
.eh_frame:0000000000015863                 db  0Eh
.eh_frame:0000000000015864                 db  38h ; 8
.eh_frame:0000000000015865                 db  83h
.eh_frame:0000000000015866                 db    7
.eh_frame:0000000000015867                 db  4Ah ; J
.eh_frame:0000000000015868                 db  0Eh
.eh_frame:0000000000015869                 db 0F0h
.eh_frame:000000000001586A                 db    9
.eh_frame:000000000001586B                 db    2
.eh_frame:000000000001586C                 db 0C9h
.eh_frame:000000000001586D                 db  0Ah
.eh_frame:000000000001586E                 db  0Eh
.eh_frame:000000000001586F                 db  38h ; 8
.eh_frame:0000000000015870                 db  41h ; A
.eh_frame:0000000000015871                 db  0Eh
.eh_frame:0000000000015872                 db  30h ; 0
.eh_frame:0000000000015873                 db  41h ; A
.eh_frame:0000000000015874                 db  0Eh
.eh_frame:0000000000015875                 db  28h ; (
.eh_frame:0000000000015876                 db  42h ; B
.eh_frame:0000000000015877                 db  0Eh
.eh_frame:0000000000015878                 db  20h
.eh_frame:0000000000015879                 db  42h ; B
.eh_frame:000000000001587A                 db  0Eh
.eh_frame:000000000001587B                 db  18h
.eh_frame:000000000001587C                 db  42h ; B
.eh_frame:000000000001587D                 db  0Eh
.eh_frame:000000000001587E                 db  10h
.eh_frame:000000000001587F                 db  42h ; B
.eh_frame:0000000000015880                 db  0Eh
.eh_frame:0000000000015881                 db    8
.eh_frame:0000000000015882                 db  43h ; C
.eh_frame:0000000000015883                 db  0Bh
.eh_frame:0000000000015884                 db    3
.eh_frame:0000000000015885                 db  8Dh
.eh_frame:0000000000015886                 db    5
.eh_frame:0000000000015887                 db  0Eh
.eh_frame:0000000000015888                 db 0F8h
.eh_frame:0000000000015889                 db    9
.eh_frame:000000000001588A                 db  4Dh ; M
.eh_frame:000000000001588B                 db  0Eh
.eh_frame:000000000001588C                 db  80h
.eh_frame:000000000001588D                 db  0Ah
.eh_frame:000000000001588E                 db  44h ; D
.eh_frame:000000000001588F                 db  0Eh
.eh_frame:0000000000015890                 db  88h
.eh_frame:0000000000015891                 db  0Ah
.eh_frame:0000000000015892                 db  46h ; F
.eh_frame:0000000000015893                 db  0Eh
.eh_frame:0000000000015894                 db  90h
.eh_frame:0000000000015895                 db  0Ah
.eh_frame:0000000000015896                 db  58h ; X
.eh_frame:0000000000015897                 db  0Eh
.eh_frame:0000000000015898                 db 0F0h
.eh_frame:0000000000015899                 db    9
.eh_frame:000000000001589A                 db    3
.eh_frame:000000000001589B                 db  8Fh
.eh_frame:000000000001589C                 db  0Eh
.eh_frame:000000000001589D                 db  0Eh
.eh_frame:000000000001589E                 db 0F8h
.eh_frame:000000000001589F                 db    9
.eh_frame:00000000000158A0                 db  50h ; P
.eh_frame:00000000000158A1                 db  0Eh
.eh_frame:00000000000158A2                 db  80h
.eh_frame:00000000000158A3                 db  0Ah
.eh_frame:00000000000158A4                 db  44h ; D
.eh_frame:00000000000158A5                 db  0Eh
.eh_frame:00000000000158A6                 db  88h
.eh_frame:00000000000158A7                 db  0Ah
.eh_frame:00000000000158A8                 db  44h ; D
.eh_frame:00000000000158A9                 db  0Eh
.eh_frame:00000000000158AA                 db  90h
.eh_frame:00000000000158AB                 db  0Ah
.eh_frame:00000000000158AC                 db  58h ; X
.eh_frame:00000000000158AD                 db  0Eh
.eh_frame:00000000000158AE                 db 0F0h
.eh_frame:00000000000158AF                 db    9
.eh_frame:00000000000158B0                 db  24h ; $
.eh_frame:00000000000158B1                 db    0
.eh_frame:00000000000158B2                 db    0
.eh_frame:00000000000158B3                 db    0
.eh_frame:00000000000158B4                 db 0CCh
.eh_frame:00000000000158B5                 db    3
.eh_frame:00000000000158B6                 db    0
.eh_frame:00000000000158B7                 db    0
.eh_frame:00000000000158B8                 db  68h ; h
.eh_frame:00000000000158B9                 db    5
.eh_frame:00000000000158BA                 db 0FFh
.eh_frame:00000000000158BB                 db 0FFh
.eh_frame:00000000000158BC                 db  50h ; P
.eh_frame:00000000000158BD                 db    0
.eh_frame:00000000000158BE                 db    0
.eh_frame:00000000000158BF                 db    0
.eh_frame:00000000000158C0                 db    0
.eh_frame:00000000000158C1                 db  44h ; D
.eh_frame:00000000000158C2                 db  0Eh
.eh_frame:00000000000158C3                 db  28h ; (
.eh_frame:00000000000158C4                 db  5Dh ; ]
.eh_frame:00000000000158C5                 db  0Eh
.eh_frame:00000000000158C6                 db  30h ; 0
.eh_frame:00000000000158C7                 db  44h ; D
.eh_frame:00000000000158C8                 db  0Eh
.eh_frame:00000000000158C9                 db  38h ; 8
.eh_frame:00000000000158CA                 db  48h ; H
.eh_frame:00000000000158CB                 db  0Eh
.eh_frame:00000000000158CC                 db  40h ; @
.eh_frame:00000000000158CD                 db  49h ; I
.eh_frame:00000000000158CE                 db  0Eh
.eh_frame:00000000000158CF                 db  20h
.eh_frame:00000000000158D0                 db  54h ; T
.eh_frame:00000000000158D1                 db  0Ah
.eh_frame:00000000000158D2                 db  0Eh
.eh_frame:00000000000158D3                 db    8
.eh_frame:00000000000158D4                 db  41h ; A
.eh_frame:00000000000158D5                 db  0Bh
.eh_frame:00000000000158D6                 db    0
.eh_frame:00000000000158D7                 db    0
.eh_frame:00000000000158D8                 db  10h
.eh_frame:00000000000158D9                 db    0
.eh_frame:00000000000158DA                 db    0
.eh_frame:00000000000158DB                 db    0
.eh_frame:00000000000158DC                 db 0F4h
.eh_frame:00000000000158DD                 db    3
.eh_frame:00000000000158DE                 db    0
.eh_frame:00000000000158DF                 db    0
.eh_frame:00000000000158E0                 db  90h
.eh_frame:00000000000158E1                 db    5
.eh_frame:00000000000158E2                 db 0FFh
.eh_frame:00000000000158E3                 db 0FFh
.eh_frame:00000000000158E4                 db  0Ah
.eh_frame:00000000000158E5                 db    0
.eh_frame:00000000000158E6                 db    0
.eh_frame:00000000000158E7                 db    0
.eh_frame:00000000000158E8                 db    0
.eh_frame:00000000000158E9                 db    0
.eh_frame:00000000000158EA                 db    0
.eh_frame:00000000000158EB                 db    0
.eh_frame:00000000000158EC                 db  18h
.eh_frame:00000000000158ED                 db    0
.eh_frame:00000000000158EE                 db    0
.eh_frame:00000000000158EF                 db    0
.eh_frame:00000000000158F0                 db    8
.eh_frame:00000000000158F1                 db    4
.eh_frame:00000000000158F2                 db    0
.eh_frame:00000000000158F3                 db    0
.eh_frame:00000000000158F4                 db  8Ch
.eh_frame:00000000000158F5                 db    5
.eh_frame:00000000000158F6                 db 0FFh
.eh_frame:00000000000158F7                 db 0FFh
.eh_frame:00000000000158F8                 db  41h ; A
.eh_frame:00000000000158F9                 db    0
.eh_frame:00000000000158FA                 db    0
.eh_frame:00000000000158FB                 db    0
.eh_frame:00000000000158FC                 db    0
.eh_frame:00000000000158FD                 db  44h ; D
.eh_frame:00000000000158FE                 db  0Eh
.eh_frame:00000000000158FF                 db  30h ; 0
.eh_frame:0000000000015900                 db  77h ; w
.eh_frame:0000000000015901                 db  0Ah
.eh_frame:0000000000015902                 db  0Eh
.eh_frame:0000000000015903                 db    8
.eh_frame:0000000000015904                 db  41h ; A
.eh_frame:0000000000015905                 db  0Bh
.eh_frame:0000000000015906                 db    0
.eh_frame:0000000000015907                 db    0
.eh_frame:0000000000015908                 db  14h
.eh_frame:0000000000015909                 db    0
.eh_frame:000000000001590A                 db    0
.eh_frame:000000000001590B                 db    0
.eh_frame:000000000001590C                 db  24h ; $
.eh_frame:000000000001590D                 db    4
.eh_frame:000000000001590E                 db    0
.eh_frame:000000000001590F                 db    0
.eh_frame:0000000000015910                 db 0C0h
.eh_frame:0000000000015911                 db    5
.eh_frame:0000000000015912                 db 0FFh
.eh_frame:0000000000015913                 db 0FFh
.eh_frame:0000000000015914                 db  9Ch
.eh_frame:0000000000015915                 db    0
.eh_frame:0000000000015916                 db    0
.eh_frame:0000000000015917                 db    0
.eh_frame:0000000000015918                 db    0
.eh_frame:0000000000015919                 db    0
.eh_frame:000000000001591A                 db    0
.eh_frame:000000000001591B                 db    0
.eh_frame:000000000001591C                 db    0
.eh_frame:000000000001591D                 db    0
.eh_frame:000000000001591E                 db    0
.eh_frame:000000000001591F                 db    0
.eh_frame:0000000000015920                 db  10h
.eh_frame:0000000000015921                 db    0
.eh_frame:0000000000015922                 db    0
.eh_frame:0000000000015923                 db    0
.eh_frame:0000000000015924                 db  3Ch ; <
.eh_frame:0000000000015925                 db    4
.eh_frame:0000000000015926                 db    0
.eh_frame:0000000000015927                 db    0
.eh_frame:0000000000015928                 db  48h ; H
.eh_frame:0000000000015929                 db    6
.eh_frame:000000000001592A                 db 0FFh
.eh_frame:000000000001592B                 db 0FFh
.eh_frame:000000000001592C                 db  79h ; y
.eh_frame:000000000001592D                 db    1
.eh_frame:000000000001592E                 db    0
.eh_frame:000000000001592F                 db    0
.eh_frame:0000000000015930                 db    0
.eh_frame:0000000000015931                 db    0
.eh_frame:0000000000015932                 db    0
.eh_frame:0000000000015933                 db    0
.eh_frame:0000000000015934                 db  2Ch ; ,
.eh_frame:0000000000015935                 db    0
.eh_frame:0000000000015936                 db    0
.eh_frame:0000000000015937                 db    0
.eh_frame:0000000000015938                 db  50h ; P
.eh_frame:0000000000015939                 db    4
.eh_frame:000000000001593A                 db    0
.eh_frame:000000000001593B                 db    0
.eh_frame:000000000001593C                 db 0B4h
.eh_frame:000000000001593D                 db    7
.eh_frame:000000000001593E                 db 0FFh
.eh_frame:000000000001593F                 db 0FFh
.eh_frame:0000000000015940                 db 0F6h
.eh_frame:0000000000015941                 db    0
.eh_frame:0000000000015942                 db    0
.eh_frame:0000000000015943                 db    0
.eh_frame:0000000000015944                 db    0
.eh_frame:0000000000015945                 db  49h ; I
.eh_frame:0000000000015946                 db  0Eh
.eh_frame:0000000000015947                 db  10h
.eh_frame:0000000000015948                 db  8Ch
.eh_frame:0000000000015949                 db    2
.eh_frame:000000000001594A                 db  43h ; C
.eh_frame:000000000001594B                 db  0Eh
.eh_frame:000000000001594C                 db  18h
.eh_frame:000000000001594D                 db  86h
.eh_frame:000000000001594E                 db    3
.eh_frame:000000000001594F                 db  41h ; A
.eh_frame:0000000000015950                 db  0Eh
.eh_frame:0000000000015951                 db  20h
.eh_frame:0000000000015952                 db  83h
.eh_frame:0000000000015953                 db    4
.eh_frame:0000000000015954                 db    2
.eh_frame:0000000000015955                 db 0B9h
.eh_frame:0000000000015956                 db  0Ah
.eh_frame:0000000000015957                 db  0Eh
.eh_frame:0000000000015958                 db  18h
.eh_frame:0000000000015959                 db  41h ; A
.eh_frame:000000000001595A                 db  0Eh
.eh_frame:000000000001595B                 db  10h
.eh_frame:000000000001595C                 db  42h ; B
.eh_frame:000000000001595D                 db  0Eh
.eh_frame:000000000001595E                 db    8
.eh_frame:000000000001595F                 db  47h ; G
.eh_frame:0000000000015960                 db  0Bh
.eh_frame:0000000000015961                 db    0
.eh_frame:0000000000015962                 db    0
.eh_frame:0000000000015963                 db    0
.eh_frame:0000000000015964                 db  18h
.eh_frame:0000000000015965                 db    0
.eh_frame:0000000000015966                 db    0
.eh_frame:0000000000015967                 db    0
.eh_frame:0000000000015968                 db  80h
.eh_frame:0000000000015969                 db    4
.eh_frame:000000000001596A                 db    0
.eh_frame:000000000001596B                 db    0
.eh_frame:000000000001596C                 db    4
.eh_frame:000000000001596D                 db 0D2h
.eh_frame:000000000001596E                 db 0FEh
.eh_frame:000000000001596F                 db 0FFh
.eh_frame:0000000000015970                 db  57h ; W
.eh_frame:0000000000015971                 db    0
.eh_frame:0000000000015972                 db    0
.eh_frame:0000000000015973                 db    0
.eh_frame:0000000000015974                 db    0
.eh_frame:0000000000015975                 db  48h ; H
.eh_frame:0000000000015976                 db  0Eh
.eh_frame:0000000000015977                 db  10h
.eh_frame:0000000000015978                 db  83h
.eh_frame:0000000000015979                 db    2
.eh_frame:000000000001597A                 db    2
.eh_frame:000000000001597B                 db  4Eh ; N
.eh_frame:000000000001597C                 db  0Eh
.eh_frame:000000000001597D                 db    8
.eh_frame:000000000001597E                 db    0
.eh_frame:000000000001597F                 db    0
.eh_frame:0000000000015980                 db  20h
.eh_frame:0000000000015981                 db    0
.eh_frame:0000000000015982                 db    0
.eh_frame:0000000000015983                 db    0
.eh_frame:0000000000015984                 db  9Ch
.eh_frame:0000000000015985                 db    4
.eh_frame:0000000000015986                 db    0
.eh_frame:0000000000015987                 db    0
.eh_frame:0000000000015988                 db  68h ; h
.eh_frame:0000000000015989                 db    8
.eh_frame:000000000001598A                 db 0FFh
.eh_frame:000000000001598B                 db 0FFh
.eh_frame:000000000001598C                 db 0E2h
.eh_frame:000000000001598D                 db    0
.eh_frame:000000000001598E                 db    0
.eh_frame:000000000001598F                 db    0
.eh_frame:0000000000015990                 db    0
.eh_frame:0000000000015991                 db  41h ; A
.eh_frame:0000000000015992                 db  0Eh
.eh_frame:0000000000015993                 db  10h
.eh_frame:0000000000015994                 db  83h
.eh_frame:0000000000015995                 db    2
.eh_frame:0000000000015996                 db  4Ah ; J
.eh_frame:0000000000015997                 db  0Eh
.eh_frame:0000000000015998                 db 0E0h
.eh_frame:0000000000015999                 db    1
.eh_frame:000000000001599A                 db    2
.eh_frame:000000000001599B                 db 0D0h
.eh_frame:000000000001599C                 db  0Ah
.eh_frame:000000000001599D                 db  0Eh
.eh_frame:000000000001599E                 db  10h
.eh_frame:000000000001599F                 db  41h ; A
.eh_frame:00000000000159A0                 db  0Eh
.eh_frame:00000000000159A1                 db    8
.eh_frame:00000000000159A2                 db  41h ; A
.eh_frame:00000000000159A3                 db  0Bh
.eh_frame:00000000000159A4                 db  14h
.eh_frame:00000000000159A5                 db    0
.eh_frame:00000000000159A6                 db    0
.eh_frame:00000000000159A7                 db    0
.eh_frame:00000000000159A8                 db 0C0h
.eh_frame:00000000000159A9                 db    4
.eh_frame:00000000000159AA                 db    0
.eh_frame:00000000000159AB                 db    0
.eh_frame:00000000000159AC                 db  34h ; 4
.eh_frame:00000000000159AD                 db    9
.eh_frame:00000000000159AE                 db 0FFh
.eh_frame:00000000000159AF                 db 0FFh
.eh_frame:00000000000159B0                 db  38h ; 8
.eh_frame:00000000000159B1                 db    0
.eh_frame:00000000000159B2                 db    0
.eh_frame:00000000000159B3                 db    0
.eh_frame:00000000000159B4                 db    0
.eh_frame:00000000000159B5                 db  55h ; U
.eh_frame:00000000000159B6                 db  0Eh
.eh_frame:00000000000159B7                 db  10h
.eh_frame:00000000000159B8                 db  62h ; b
.eh_frame:00000000000159B9                 db  0Eh
.eh_frame:00000000000159BA                 db    8
.eh_frame:00000000000159BB                 db    0
.eh_frame:00000000000159BC                 db  10h
.eh_frame:00000000000159BD                 db    0
.eh_frame:00000000000159BE                 db    0
.eh_frame:00000000000159BF                 db    0
.eh_frame:00000000000159C0                 db 0D8h
.eh_frame:00000000000159C1                 db    4
.eh_frame:00000000000159C2                 db    0
.eh_frame:00000000000159C3                 db    0
.eh_frame:00000000000159C4                 db  5Ch ; \
.eh_frame:00000000000159C5                 db    9
.eh_frame:00000000000159C6                 db 0FFh
.eh_frame:00000000000159C7                 db 0FFh
.eh_frame:00000000000159C8                 db 0DFh
.eh_frame:00000000000159C9                 db    0
.eh_frame:00000000000159CA                 db    0
.eh_frame:00000000000159CB                 db    0
.eh_frame:00000000000159CC                 db    0
.eh_frame:00000000000159CD                 db    0
.eh_frame:00000000000159CE                 db    0
.eh_frame:00000000000159CF                 db    0
.eh_frame:00000000000159D0                 db  10h
.eh_frame:00000000000159D1                 db    0
.eh_frame:00000000000159D2                 db    0
.eh_frame:00000000000159D3                 db    0
.eh_frame:00000000000159D4                 db 0ECh
.eh_frame:00000000000159D5                 db    4
.eh_frame:00000000000159D6                 db    0
.eh_frame:00000000000159D7                 db    0
.eh_frame:00000000000159D8                 db  28h ; (
.eh_frame:00000000000159D9                 db  0Ah
.eh_frame:00000000000159DA                 db 0FFh
.eh_frame:00000000000159DB                 db 0FFh
.eh_frame:00000000000159DC                 db  30h ; 0
.eh_frame:00000000000159DD                 db    0
.eh_frame:00000000000159DE                 db    0
.eh_frame:00000000000159DF                 db    0
.eh_frame:00000000000159E0                 db    0
.eh_frame:00000000000159E1                 db    0
.eh_frame:00000000000159E2                 db    0
.eh_frame:00000000000159E3                 db    0
.eh_frame:00000000000159E4                 db  40h ; @
.eh_frame:00000000000159E5                 db    0
.eh_frame:00000000000159E6                 db    0
.eh_frame:00000000000159E7                 db    0
.eh_frame:00000000000159E8                 db    0
.eh_frame:00000000000159E9                 db    5
.eh_frame:00000000000159EA                 db    0
.eh_frame:00000000000159EB                 db    0
.eh_frame:00000000000159EC                 db  44h ; D
.eh_frame:00000000000159ED                 db  0Ah
.eh_frame:00000000000159EE                 db 0FFh
.eh_frame:00000000000159EF                 db 0FFh
.eh_frame:00000000000159F0                 db 0BAh
.eh_frame:00000000000159F1                 db    0
.eh_frame:00000000000159F2                 db    0
.eh_frame:00000000000159F3                 db    0
.eh_frame:00000000000159F4                 db    0
.eh_frame:00000000000159F5                 db  42h ; B
.eh_frame:00000000000159F6                 db  0Eh
.eh_frame:00000000000159F7                 db  10h
.eh_frame:00000000000159F8                 db  8Ch
.eh_frame:00000000000159F9                 db    2
.eh_frame:00000000000159FA                 db  44h ; D
.eh_frame:00000000000159FB                 db  0Eh
.eh_frame:00000000000159FC                 db  18h
.eh_frame:00000000000159FD                 db  86h
.eh_frame:00000000000159FE                 db    3
.eh_frame:00000000000159FF                 db  44h ; D
.eh_frame:0000000000015A00                 db  0Eh
.eh_frame:0000000000015A01                 db  20h
.eh_frame:0000000000015A02                 db  83h
.eh_frame:0000000000015A03                 db    4
.eh_frame:0000000000015A04                 db  72h ; r
.eh_frame:0000000000015A05                 db  0Ah
.eh_frame:0000000000015A06                 db  0Eh
.eh_frame:0000000000015A07                 db  18h
.eh_frame:0000000000015A08                 db  41h ; A
.eh_frame:0000000000015A09                 db  0Eh
.eh_frame:0000000000015A0A                 db  10h
.eh_frame:0000000000015A0B                 db  42h ; B
.eh_frame:0000000000015A0C                 db  0Eh
.eh_frame:0000000000015A0D                 db    8
.eh_frame:0000000000015A0E                 db  41h ; A
.eh_frame:0000000000015A0F                 db  0Bh
.eh_frame:0000000000015A10                 db    2
.eh_frame:0000000000015A11                 db  6Ch ; l
.eh_frame:0000000000015A12                 db  0Ah
.eh_frame:0000000000015A13                 db  0Eh
.eh_frame:0000000000015A14                 db  18h
.eh_frame:0000000000015A15                 db  41h ; A
.eh_frame:0000000000015A16                 db  0Eh
.eh_frame:0000000000015A17                 db  10h
.eh_frame:0000000000015A18                 db  42h ; B
.eh_frame:0000000000015A19                 db  0Eh
.eh_frame:0000000000015A1A                 db    8
.eh_frame:0000000000015A1B                 db  41h ; A
.eh_frame:0000000000015A1C                 db  0Bh
.eh_frame:0000000000015A1D                 db  46h ; F
.eh_frame:0000000000015A1E                 db  0Eh
.eh_frame:0000000000015A1F                 db  18h
.eh_frame:0000000000015A20                 db  41h ; A
.eh_frame:0000000000015A21                 db  0Eh
.eh_frame:0000000000015A22                 db  10h
.eh_frame:0000000000015A23                 db  42h ; B
.eh_frame:0000000000015A24                 db  0Eh
.eh_frame:0000000000015A25                 db    8
.eh_frame:0000000000015A26                 db    0
.eh_frame:0000000000015A27                 db    0
.eh_frame:0000000000015A28                 db  34h ; 4
.eh_frame:0000000000015A29                 db    0
.eh_frame:0000000000015A2A                 db    0
.eh_frame:0000000000015A2B                 db    0
.eh_frame:0000000000015A2C                 db  44h ; D
.eh_frame:0000000000015A2D                 db    5
.eh_frame:0000000000015A2E                 db    0
.eh_frame:0000000000015A2F                 db    0
.eh_frame:0000000000015A30                 db 0C0h
.eh_frame:0000000000015A31                 db  0Ah
.eh_frame:0000000000015A32                 db 0FFh
.eh_frame:0000000000015A33                 db 0FFh
.eh_frame:0000000000015A34                 db 0E7h
.eh_frame:0000000000015A35                 db    1
.eh_frame:0000000000015A36                 db    0
.eh_frame:0000000000015A37                 db    0
.eh_frame:0000000000015A38                 db    0
.eh_frame:0000000000015A39                 db  41h ; A
.eh_frame:0000000000015A3A                 db  0Eh
.eh_frame:0000000000015A3B                 db  10h
.eh_frame:0000000000015A3C                 db  86h
.eh_frame:0000000000015A3D                 db    2
.eh_frame:0000000000015A3E                 db  41h ; A
.eh_frame:0000000000015A3F                 db  0Eh
.eh_frame:0000000000015A40                 db  18h
.eh_frame:0000000000015A41                 db  83h
.eh_frame:0000000000015A42                 db    3
.eh_frame:0000000000015A43                 db  56h ; V
.eh_frame:0000000000015A44                 db  0Eh
.eh_frame:0000000000015A45                 db  20h
.eh_frame:0000000000015A46                 db    2
.eh_frame:0000000000015A47                 db  93h
.eh_frame:0000000000015A48                 db  0Ah
.eh_frame:0000000000015A49                 db  0Eh
.eh_frame:0000000000015A4A                 db  18h
.eh_frame:0000000000015A4B                 db  46h ; F
.eh_frame:0000000000015A4C                 db  0Eh
.eh_frame:0000000000015A4D                 db  10h
.eh_frame:0000000000015A4E                 db  41h ; A
.eh_frame:0000000000015A4F                 db  0Eh
.eh_frame:0000000000015A50                 db    8
.eh_frame:0000000000015A51                 db  4Eh ; N
.eh_frame:0000000000015A52                 db  0Bh
.eh_frame:0000000000015A53                 db    2
.eh_frame:0000000000015A54                 db  59h ; Y
.eh_frame:0000000000015A55                 db  0Ah
.eh_frame:0000000000015A56                 db  0Eh
.eh_frame:0000000000015A57                 db  18h
.eh_frame:0000000000015A58                 db  47h ; G
.eh_frame:0000000000015A59                 db  0Eh
.eh_frame:0000000000015A5A                 db  10h
.eh_frame:0000000000015A5B                 db  41h ; A
.eh_frame:0000000000015A5C                 db  0Eh
.eh_frame:0000000000015A5D                 db    8
.eh_frame:0000000000015A5E                 db  4Fh ; O
.eh_frame:0000000000015A5F                 db  0Bh
.eh_frame:0000000000015A60                 db  30h ; 0
.eh_frame:0000000000015A61                 db    0
.eh_frame:0000000000015A62                 db    0
.eh_frame:0000000000015A63                 db    0
.eh_frame:0000000000015A64                 db  7Ch ; |
.eh_frame:0000000000015A65                 db    5
.eh_frame:0000000000015A66                 db    0
.eh_frame:0000000000015A67                 db    0
.eh_frame:0000000000015A68                 db  78h ; x
.eh_frame:0000000000015A69                 db  0Ch
.eh_frame:0000000000015A6A                 db 0FFh
.eh_frame:0000000000015A6B                 db 0FFh
.eh_frame:0000000000015A6C                 db 0B1h
.eh_frame:0000000000015A6D                 db    0
.eh_frame:0000000000015A6E                 db    0
.eh_frame:0000000000015A6F                 db    0
.eh_frame:0000000000015A70                 db    0
.eh_frame:0000000000015A71                 db  42h ; B
.eh_frame:0000000000015A72                 db  0Eh
.eh_frame:0000000000015A73                 db  10h
.eh_frame:0000000000015A74                 db  8Ch
.eh_frame:0000000000015A75                 db    2
.eh_frame:0000000000015A76                 db  41h ; A
.eh_frame:0000000000015A77                 db  0Eh
.eh_frame:0000000000015A78                 db  18h
.eh_frame:0000000000015A79                 db  86h
.eh_frame:0000000000015A7A                 db    3
.eh_frame:0000000000015A7B                 db  44h ; D
.eh_frame:0000000000015A7C                 db  0Eh
.eh_frame:0000000000015A7D                 db  20h
.eh_frame:0000000000015A7E                 db  83h
.eh_frame:0000000000015A7F                 db    4
.eh_frame:0000000000015A80                 db  57h ; W
.eh_frame:0000000000015A81                 db  0Eh
.eh_frame:0000000000015A82                 db  50h ; P
.eh_frame:0000000000015A83                 db    2
.eh_frame:0000000000015A84                 db  4Ch ; L
.eh_frame:0000000000015A85                 db  0Ah
.eh_frame:0000000000015A86                 db  0Eh
.eh_frame:0000000000015A87                 db  20h
.eh_frame:0000000000015A88                 db  41h ; A
.eh_frame:0000000000015A89                 db  0Eh
.eh_frame:0000000000015A8A                 db  18h
.eh_frame:0000000000015A8B                 db  41h ; A
.eh_frame:0000000000015A8C                 db  0Eh
.eh_frame:0000000000015A8D                 db  10h
.eh_frame:0000000000015A8E                 db  42h ; B
.eh_frame:0000000000015A8F                 db  0Eh
.eh_frame:0000000000015A90                 db    8
.eh_frame:0000000000015A91                 db  42h ; B
.eh_frame:0000000000015A92                 db  0Bh
.eh_frame:0000000000015A93                 db    0
.eh_frame:0000000000015A94                 db  34h ; 4
.eh_frame:0000000000015A95                 db    0
.eh_frame:0000000000015A96                 db    0
.eh_frame:0000000000015A97                 db    0
.eh_frame:0000000000015A98                 db 0B0h
.eh_frame:0000000000015A99                 db    5
.eh_frame:0000000000015A9A                 db    0
.eh_frame:0000000000015A9B                 db    0
.eh_frame:0000000000015A9C                 db    4
.eh_frame:0000000000015A9D                 db  0Dh
.eh_frame:0000000000015A9E                 db 0FFh
.eh_frame:0000000000015A9F                 db 0FFh
.eh_frame:0000000000015AA0                 db 0FFh
.eh_frame:0000000000015AA1                 db    0
.eh_frame:0000000000015AA2                 db    0
.eh_frame:0000000000015AA3                 db    0
.eh_frame:0000000000015AA4                 db    0
.eh_frame:0000000000015AA5                 db  41h ; A
.eh_frame:0000000000015AA6                 db  0Eh
.eh_frame:0000000000015AA7                 db  10h
.eh_frame:0000000000015AA8                 db  86h
.eh_frame:0000000000015AA9                 db    2
.eh_frame:0000000000015AAA                 db  41h ; A
.eh_frame:0000000000015AAB                 db  0Eh
.eh_frame:0000000000015AAC                 db  18h
.eh_frame:0000000000015AAD                 db  83h
.eh_frame:0000000000015AAE                 db    3
.eh_frame:0000000000015AAF                 db  4Ah ; J
.eh_frame:0000000000015AB0                 db  0Eh
.eh_frame:0000000000015AB1                 db  20h
.eh_frame:0000000000015AB2                 db    2
.eh_frame:0000000000015AB3                 db  53h ; S
.eh_frame:0000000000015AB4                 db  0Ah
.eh_frame:0000000000015AB5                 db  0Eh
.eh_frame:0000000000015AB6                 db  18h
.eh_frame:0000000000015AB7                 db  44h ; D
.eh_frame:0000000000015AB8                 db  0Eh
.eh_frame:0000000000015AB9                 db  10h
.eh_frame:0000000000015ABA                 db  41h ; A
.eh_frame:0000000000015ABB                 db  0Eh
.eh_frame:0000000000015ABC                 db    8
.eh_frame:0000000000015ABD                 db  44h ; D
.eh_frame:0000000000015ABE                 db  0Bh
.eh_frame:0000000000015ABF                 db    2
.eh_frame:0000000000015AC0                 db  46h ; F
.eh_frame:0000000000015AC1                 db  0Ah
.eh_frame:0000000000015AC2                 db  0Eh
.eh_frame:0000000000015AC3                 db  18h
.eh_frame:0000000000015AC4                 db  44h ; D
.eh_frame:0000000000015AC5                 db  0Eh
.eh_frame:0000000000015AC6                 db  10h
.eh_frame:0000000000015AC7                 db  41h ; A
.eh_frame:0000000000015AC8                 db  0Eh
.eh_frame:0000000000015AC9                 db    8
.eh_frame:0000000000015ACA                 db  45h ; E
.eh_frame:0000000000015ACB                 db  0Bh
.eh_frame:0000000000015ACC                 db  3Ch ; <
.eh_frame:0000000000015ACD                 db    0
.eh_frame:0000000000015ACE                 db    0
.eh_frame:0000000000015ACF                 db    0
.eh_frame:0000000000015AD0                 db 0E8h
.eh_frame:0000000000015AD1                 db    5
.eh_frame:0000000000015AD2                 db    0
.eh_frame:0000000000015AD3                 db    0
.eh_frame:0000000000015AD4                 db 0CCh
.eh_frame:0000000000015AD5                 db  0Dh
.eh_frame:0000000000015AD6                 db 0FFh
.eh_frame:0000000000015AD7                 db 0FFh
.eh_frame:0000000000015AD8                 db 0D7h
.eh_frame:0000000000015AD9                 db    3
.eh_frame:0000000000015ADA                 db    0
.eh_frame:0000000000015ADB                 db    0
.eh_frame:0000000000015ADC                 db    0
.eh_frame:0000000000015ADD                 db  42h ; B
.eh_frame:0000000000015ADE                 db  0Eh
.eh_frame:0000000000015ADF                 db  10h
.eh_frame:0000000000015AE0                 db  8Dh
.eh_frame:0000000000015AE1                 db    2
.eh_frame:0000000000015AE2                 db  42h ; B
.eh_frame:0000000000015AE3                 db  0Eh
.eh_frame:0000000000015AE4                 db  18h
.eh_frame:0000000000015AE5                 db  8Ch
.eh_frame:0000000000015AE6                 db    3
.eh_frame:0000000000015AE7                 db  46h ; F
.eh_frame:0000000000015AE8                 db  0Eh
.eh_frame:0000000000015AE9                 db  20h
.eh_frame:0000000000015AEA                 db  86h
.eh_frame:0000000000015AEB                 db    4
.eh_frame:0000000000015AEC                 db  41h ; A
.eh_frame:0000000000015AED                 db  0Eh
.eh_frame:0000000000015AEE                 db  28h ; (
.eh_frame:0000000000015AEF                 db  83h
.eh_frame:0000000000015AF0                 db    5
.eh_frame:0000000000015AF1                 db  53h ; S
.eh_frame:0000000000015AF2                 db  0Eh
.eh_frame:0000000000015AF3                 db 0A0h
.eh_frame:0000000000015AF4                 db    1
.eh_frame:0000000000015AF5                 db    3
.eh_frame:0000000000015AF6                 db  1Fh
.eh_frame:0000000000015AF7                 db    2
.eh_frame:0000000000015AF8                 db  0Ah
.eh_frame:0000000000015AF9                 db  0Eh
.eh_frame:0000000000015AFA                 db  28h ; (
.eh_frame:0000000000015AFB                 db  41h ; A
.eh_frame:0000000000015AFC                 db  0Eh
.eh_frame:0000000000015AFD                 db  20h
.eh_frame:0000000000015AFE                 db  41h ; A
.eh_frame:0000000000015AFF                 db  0Eh
.eh_frame:0000000000015B00                 db  18h
.eh_frame:0000000000015B01                 db  42h ; B
.eh_frame:0000000000015B02                 db  0Eh
.eh_frame:0000000000015B03                 db  10h
.eh_frame:0000000000015B04                 db  42h ; B
.eh_frame:0000000000015B05                 db  0Eh
.eh_frame:0000000000015B06                 db    8
.eh_frame:0000000000015B07                 db  41h ; A
.eh_frame:0000000000015B08                 db  0Bh
.eh_frame:0000000000015B09                 db    0
.eh_frame:0000000000015B0A                 db    0
.eh_frame:0000000000015B0B                 db    0
.eh_frame:0000000000015B0C                 db  74h ; t
.eh_frame:0000000000015B0D                 db    0
.eh_frame:0000000000015B0E                 db    0
.eh_frame:0000000000015B0F                 db    0
.eh_frame:0000000000015B10                 db  28h ; (
.eh_frame:0000000000015B11                 db    6
.eh_frame:0000000000015B12                 db    0
.eh_frame:0000000000015B13                 db    0
.eh_frame:0000000000015B14                 db  6Ch ; l
.eh_frame:0000000000015B15                 db  11h
.eh_frame:0000000000015B16                 db 0FFh
.eh_frame:0000000000015B17                 db 0FFh
.eh_frame:0000000000015B18                 db    3
.eh_frame:0000000000015B19                 db  1Ch
.eh_frame:0000000000015B1A                 db    0
.eh_frame:0000000000015B1B                 db    0
.eh_frame:0000000000015B1C                 db    0
.eh_frame:0000000000015B1D                 db  42h ; B
.eh_frame:0000000000015B1E                 db  0Eh
.eh_frame:0000000000015B1F                 db  10h
.eh_frame:0000000000015B20                 db  8Fh
.eh_frame:0000000000015B21                 db    2
.eh_frame:0000000000015B22                 db  42h ; B
.eh_frame:0000000000015B23                 db  0Eh
.eh_frame:0000000000015B24                 db  18h
.eh_frame:0000000000015B25                 db  8Eh
.eh_frame:0000000000015B26                 db    3
.eh_frame:0000000000015B27                 db  44h ; D
.eh_frame:0000000000015B28                 db  0Eh
.eh_frame:0000000000015B29                 db  20h
.eh_frame:0000000000015B2A                 db  8Dh
.eh_frame:0000000000015B2B                 db    4
.eh_frame:0000000000015B2C                 db  42h ; B
.eh_frame:0000000000015B2D                 db  0Eh
.eh_frame:0000000000015B2E                 db  28h ; (
.eh_frame:0000000000015B2F                 db  8Ch
.eh_frame:0000000000015B30                 db    5
.eh_frame:0000000000015B31                 db  44h ; D
.eh_frame:0000000000015B32                 db  0Eh
.eh_frame:0000000000015B33                 db  30h ; 0
.eh_frame:0000000000015B34                 db  86h
.eh_frame:0000000000015B35                 db    6
.eh_frame:0000000000015B36                 db  41h ; A
.eh_frame:0000000000015B37                 db  0Eh
.eh_frame:0000000000015B38                 db  38h ; 8
.eh_frame:0000000000015B39                 db  83h
.eh_frame:0000000000015B3A                 db    7
.eh_frame:0000000000015B3B                 db  55h ; U
.eh_frame:0000000000015B3C                 db  0Eh
.eh_frame:0000000000015B3D                 db  80h
.eh_frame:0000000000015B3E                 db  0Ch
.eh_frame:0000000000015B3F                 db    3
.eh_frame:0000000000015B40                 db 0D7h
.eh_frame:0000000000015B41                 db    5
.eh_frame:0000000000015B42                 db  0Ah
.eh_frame:0000000000015B43                 db  0Eh
.eh_frame:0000000000015B44                 db  38h ; 8
.eh_frame:0000000000015B45                 db  41h ; A
.eh_frame:0000000000015B46                 db  0Eh
.eh_frame:0000000000015B47                 db  30h ; 0
.eh_frame:0000000000015B48                 db  41h ; A
.eh_frame:0000000000015B49                 db  0Eh
.eh_frame:0000000000015B4A                 db  28h ; (
.eh_frame:0000000000015B4B                 db  42h ; B
.eh_frame:0000000000015B4C                 db  0Eh
.eh_frame:0000000000015B4D                 db  20h
.eh_frame:0000000000015B4E                 db  42h ; B
.eh_frame:0000000000015B4F                 db  0Eh
.eh_frame:0000000000015B50                 db  18h
.eh_frame:0000000000015B51                 db  42h ; B
.eh_frame:0000000000015B52                 db  0Eh
.eh_frame:0000000000015B53                 db  10h
.eh_frame:0000000000015B54                 db  42h ; B
.eh_frame:0000000000015B55                 db  0Eh
.eh_frame:0000000000015B56                 db    8
.eh_frame:0000000000015B57                 db  41h ; A
.eh_frame:0000000000015B58                 db  0Bh
.eh_frame:0000000000015B59                 db    3
.eh_frame:0000000000015B5A                 db  19h
.eh_frame:0000000000015B5B                 db    8
.eh_frame:0000000000015B5C                 db  0Eh
.eh_frame:0000000000015B5D                 db  88h
.eh_frame:0000000000015B5E                 db  0Ch
.eh_frame:0000000000015B5F                 db  44h ; D
.eh_frame:0000000000015B60                 db  0Eh
.eh_frame:0000000000015B61                 db  90h
.eh_frame:0000000000015B62                 db  0Ch
.eh_frame:0000000000015B63                 db  44h ; D
.eh_frame:0000000000015B64                 db  0Eh
.eh_frame:0000000000015B65                 db  98h
.eh_frame:0000000000015B66                 db  0Ch
.eh_frame:0000000000015B67                 db  47h ; G
.eh_frame:0000000000015B68                 db  0Eh
.eh_frame:0000000000015B69                 db 0A0h
.eh_frame:0000000000015B6A                 db  0Ch
.eh_frame:0000000000015B6B                 db  4Eh ; N
.eh_frame:0000000000015B6C                 db  0Eh
.eh_frame:0000000000015B6D                 db  80h
.eh_frame:0000000000015B6E                 db  0Ch
.eh_frame:0000000000015B6F                 db    2
.eh_frame:0000000000015B70                 db 0F6h
.eh_frame:0000000000015B71                 db  0Eh
.eh_frame:0000000000015B72                 db  88h
.eh_frame:0000000000015B73                 db  0Ch
.eh_frame:0000000000015B74                 db  44h ; D
.eh_frame:0000000000015B75                 db  0Eh
.eh_frame:0000000000015B76                 db  90h
.eh_frame:0000000000015B77                 db  0Ch
.eh_frame:0000000000015B78                 db  44h ; D
.eh_frame:0000000000015B79                 db  0Eh
.eh_frame:0000000000015B7A                 db  98h
.eh_frame:0000000000015B7B                 db  0Ch
.eh_frame:0000000000015B7C                 db  47h ; G
.eh_frame:0000000000015B7D                 db  0Eh
.eh_frame:0000000000015B7E                 db 0A0h
.eh_frame:0000000000015B7F                 db  0Ch
.eh_frame:0000000000015B80                 db  73h ; s
.eh_frame:0000000000015B81                 db  0Eh
.eh_frame:0000000000015B82                 db  80h
.eh_frame:0000000000015B83                 db  0Ch
.eh_frame:0000000000015B84                 db  8Ch
.eh_frame:0000000000015B85                 db    0
.eh_frame:0000000000015B86                 db    0
.eh_frame:0000000000015B87                 db    0
.eh_frame:0000000000015B88                 db 0A0h
.eh_frame:0000000000015B89                 db    6
.eh_frame:0000000000015B8A                 db    0
.eh_frame:0000000000015B8B                 db    0
.eh_frame:0000000000015B8C                 db    4
.eh_frame:0000000000015B8D                 db  2Dh ; -
.eh_frame:0000000000015B8E                 db 0FFh
.eh_frame:0000000000015B8F                 db 0FFh
.eh_frame:0000000000015B90                 db  69h ; i
.eh_frame:0000000000015B91                 db  1Dh
.eh_frame:0000000000015B92                 db    0
.eh_frame:0000000000015B93                 db    0
.eh_frame:0000000000015B94                 db    0
.eh_frame:0000000000015B95                 db  42h ; B
.eh_frame:0000000000015B96                 db  0Eh
.eh_frame:0000000000015B97                 db  10h
.eh_frame:0000000000015B98                 db  8Fh
.eh_frame:0000000000015B99                 db    2
.eh_frame:0000000000015B9A                 db  42h ; B
.eh_frame:0000000000015B9B                 db  0Eh
.eh_frame:0000000000015B9C                 db  18h
.eh_frame:0000000000015B9D                 db  8Eh
.eh_frame:0000000000015B9E                 db    3
.eh_frame:0000000000015B9F                 db  45h ; E
.eh_frame:0000000000015BA0                 db  0Eh
.eh_frame:0000000000015BA1                 db  20h
.eh_frame:0000000000015BA2                 db  8Dh
.eh_frame:0000000000015BA3                 db    4
.eh_frame:0000000000015BA4                 db  42h ; B
.eh_frame:0000000000015BA5                 db  0Eh
.eh_frame:0000000000015BA6                 db  28h ; (
.eh_frame:0000000000015BA7                 db  8Ch
.eh_frame:0000000000015BA8                 db    5
.eh_frame:0000000000015BA9                 db  41h ; A
.eh_frame:0000000000015BAA                 db  0Eh
.eh_frame:0000000000015BAB                 db  30h ; 0
.eh_frame:0000000000015BAC                 db  86h
.eh_frame:0000000000015BAD                 db    6
.eh_frame:0000000000015BAE                 db  41h ; A
.eh_frame:0000000000015BAF                 db  0Eh
.eh_frame:0000000000015BB0                 db  38h ; 8
.eh_frame:0000000000015BB1                 db  83h
.eh_frame:0000000000015BB2                 db    7
.eh_frame:0000000000015BB3                 db  4Ah ; J
.eh_frame:0000000000015BB4                 db  0Eh
.eh_frame:0000000000015BB5                 db  90h
.eh_frame:0000000000015BB6                 db    9
.eh_frame:0000000000015BB7                 db    3
.eh_frame:0000000000015BB8                 db  60h ; `
.eh_frame:0000000000015BB9                 db    4
.eh_frame:0000000000015BBA                 db  0Ah
.eh_frame:0000000000015BBB                 db  0Eh
.eh_frame:0000000000015BBC                 db  38h ; 8
.eh_frame:0000000000015BBD                 db  41h ; A
.eh_frame:0000000000015BBE                 db  0Eh
.eh_frame:0000000000015BBF                 db  30h ; 0
.eh_frame:0000000000015BC0                 db  41h ; A
.eh_frame:0000000000015BC1                 db  0Eh
.eh_frame:0000000000015BC2                 db  28h ; (
.eh_frame:0000000000015BC3                 db  42h ; B
.eh_frame:0000000000015BC4                 db  0Eh
.eh_frame:0000000000015BC5                 db  20h
.eh_frame:0000000000015BC6                 db  42h ; B
.eh_frame:0000000000015BC7                 db  0Eh
.eh_frame:0000000000015BC8                 db  18h
.eh_frame:0000000000015BC9                 db  42h ; B
.eh_frame:0000000000015BCA                 db  0Eh
.eh_frame:0000000000015BCB                 db  10h
.eh_frame:0000000000015BCC                 db  42h ; B
.eh_frame:0000000000015BCD                 db  0Eh
.eh_frame:0000000000015BCE                 db    8
.eh_frame:0000000000015BCF                 db  47h ; G
.eh_frame:0000000000015BD0                 db  0Bh
.eh_frame:0000000000015BD1                 db    3
.eh_frame:0000000000015BD2                 db 0FFh
.eh_frame:0000000000015BD3                 db    9
.eh_frame:0000000000015BD4                 db  0Eh
.eh_frame:0000000000015BD5                 db  98h
.eh_frame:0000000000015BD6                 db    9
.eh_frame:0000000000015BD7                 db  46h ; F
.eh_frame:0000000000015BD8                 db  0Eh
.eh_frame:0000000000015BD9                 db 0A0h
.eh_frame:0000000000015BDA                 db    9
.eh_frame:0000000000015BDB                 db  41h ; A
.eh_frame:0000000000015BDC                 db  0Eh
.eh_frame:0000000000015BDD                 db 0A8h
.eh_frame:0000000000015BDE                 db    9
.eh_frame:0000000000015BDF                 db  47h ; G
.eh_frame:0000000000015BE0                 db  0Eh
.eh_frame:0000000000015BE1                 db 0B0h
.eh_frame:0000000000015BE2                 db    9
.eh_frame:0000000000015BE3                 db  48h ; H
.eh_frame:0000000000015BE4                 db  0Eh
.eh_frame:0000000000015BE5                 db 0B8h
.eh_frame:0000000000015BE6                 db    9
.eh_frame:0000000000015BE7                 db  41h ; A
.eh_frame:0000000000015BE8                 db  0Eh
.eh_frame:0000000000015BE9                 db 0C0h
.eh_frame:0000000000015BEA                 db    9
.eh_frame:0000000000015BEB                 db  53h ; S
.eh_frame:0000000000015BEC                 db  0Eh
.eh_frame:0000000000015BED                 db  90h
.eh_frame:0000000000015BEE                 db    9
.eh_frame:0000000000015BEF                 db    3
.eh_frame:0000000000015BF0                 db 0A7h
.eh_frame:0000000000015BF1                 db    9
.eh_frame:0000000000015BF2                 db  0Eh
.eh_frame:0000000000015BF3                 db  98h
.eh_frame:0000000000015BF4                 db    9
.eh_frame:0000000000015BF5                 db  41h ; A
.eh_frame:0000000000015BF6                 db  0Eh
.eh_frame:0000000000015BF7                 db 0A0h
.eh_frame:0000000000015BF8                 db    9
.eh_frame:0000000000015BF9                 db  5Ah ; Z
.eh_frame:0000000000015BFA                 db  0Eh
.eh_frame:0000000000015BFB                 db  98h
.eh_frame:0000000000015BFC                 db    9
.eh_frame:0000000000015BFD                 db  41h ; A
.eh_frame:0000000000015BFE                 db  0Eh
.eh_frame:0000000000015BFF                 db  90h
.eh_frame:0000000000015C00                 db    9
.eh_frame:0000000000015C01                 db    3
.eh_frame:0000000000015C02                 db 0DAh
.eh_frame:0000000000015C03                 db    3
.eh_frame:0000000000015C04                 db  0Eh
.eh_frame:0000000000015C05                 db  98h
.eh_frame:0000000000015C06                 db    9
.eh_frame:0000000000015C07                 db  48h ; H
.eh_frame:0000000000015C08                 db  0Eh
.eh_frame:0000000000015C09                 db 0A0h
.eh_frame:0000000000015C0A                 db    9
.eh_frame:0000000000015C0B                 db  7Dh ; }
.eh_frame:0000000000015C0C                 db  0Eh
.eh_frame:0000000000015C0D                 db  98h
.eh_frame:0000000000015C0E                 db    9
.eh_frame:0000000000015C0F                 db  41h ; A
.eh_frame:0000000000015C10                 db  0Eh
.eh_frame:0000000000015C11                 db  90h
.eh_frame:0000000000015C12                 db    9
.eh_frame:0000000000015C13                 db    0
.eh_frame:0000000000015C14                 db  40h ; @
.eh_frame:0000000000015C15                 db    0
.eh_frame:0000000000015C16                 db    0
.eh_frame:0000000000015C17                 db    0
.eh_frame:0000000000015C18                 db  30h ; 0
.eh_frame:0000000000015C19                 db    7
.eh_frame:0000000000015C1A                 db    0
.eh_frame:0000000000015C1B                 db    0
.eh_frame:0000000000015C1C                 db 0E4h
.eh_frame:0000000000015C1D                 db  49h ; I
.eh_frame:0000000000015C1E                 db 0FFh
.eh_frame:0000000000015C1F                 db 0FFh
.eh_frame:0000000000015C20                 db  6Ah ; j
.eh_frame:0000000000015C21                 db    0
.eh_frame:0000000000015C22                 db    0
.eh_frame:0000000000015C23                 db    0
.eh_frame:0000000000015C24                 db    0
.eh_frame:0000000000015C25                 db  42h ; B
.eh_frame:0000000000015C26                 db  0Eh
.eh_frame:0000000000015C27                 db  10h
.eh_frame:0000000000015C28                 db  8Eh
.eh_frame:0000000000015C29                 db    2
.eh_frame:0000000000015C2A                 db  42h ; B
.eh_frame:0000000000015C2B                 db  0Eh
.eh_frame:0000000000015C2C                 db  18h
.eh_frame:0000000000015C2D                 db  8Dh
.eh_frame:0000000000015C2E                 db    3
.eh_frame:0000000000015C2F                 db  45h ; E
.eh_frame:0000000000015C30                 db  0Eh
.eh_frame:0000000000015C31                 db  20h
.eh_frame:0000000000015C32                 db  8Ch
.eh_frame:0000000000015C33                 db    4
.eh_frame:0000000000015C34                 db  41h ; A
.eh_frame:0000000000015C35                 db  0Eh
.eh_frame:0000000000015C36                 db  28h ; (
.eh_frame:0000000000015C37                 db  86h
.eh_frame:0000000000015C38                 db    5
.eh_frame:0000000000015C39                 db  44h ; D
.eh_frame:0000000000015C3A                 db  0Eh
.eh_frame:0000000000015C3B                 db  30h ; 0
.eh_frame:0000000000015C3C                 db  83h
.eh_frame:0000000000015C3D                 db    6
.eh_frame:0000000000015C3E                 db  4Eh ; N
.eh_frame:0000000000015C3F                 db  0Eh
.eh_frame:0000000000015C40                 db  40h ; @
.eh_frame:0000000000015C41                 db    2
.eh_frame:0000000000015C42                 db  45h ; E
.eh_frame:0000000000015C43                 db  0Eh
.eh_frame:0000000000015C44                 db  30h ; 0
.eh_frame:0000000000015C45                 db  41h ; A
.eh_frame:0000000000015C46                 db  0Eh
.eh_frame:0000000000015C47                 db  28h ; (
.eh_frame:0000000000015C48                 db  41h ; A
.eh_frame:0000000000015C49                 db  0Eh
.eh_frame:0000000000015C4A                 db  20h
.eh_frame:0000000000015C4B                 db  42h ; B
.eh_frame:0000000000015C4C                 db  0Eh
.eh_frame:0000000000015C4D                 db  18h
.eh_frame:0000000000015C4E                 db  42h ; B
.eh_frame:0000000000015C4F                 db  0Eh
.eh_frame:0000000000015C50                 db  10h
.eh_frame:0000000000015C51                 db  42h ; B
.eh_frame:0000000000015C52                 db  0Eh
.eh_frame:0000000000015C53                 db    8
.eh_frame:0000000000015C54                 db    0
.eh_frame:0000000000015C55                 db    0
.eh_frame:0000000000015C56                 db    0
.eh_frame:0000000000015C57                 db    0
.eh_frame:0000000000015C58                 db  28h ; (
.eh_frame:0000000000015C59                 db    0
.eh_frame:0000000000015C5A                 db    0
.eh_frame:0000000000015C5B                 db    0
.eh_frame:0000000000015C5C                 db  74h ; t
.eh_frame:0000000000015C5D                 db    7
.eh_frame:0000000000015C5E                 db    0
.eh_frame:0000000000015C5F                 db    0
.eh_frame:0000000000015C60                 db  10h
.eh_frame:0000000000015C61                 db  4Ah ; J
.eh_frame:0000000000015C62                 db 0FFh
.eh_frame:0000000000015C63                 db 0FFh
.eh_frame:0000000000015C64                 db 0B6h
.eh_frame:0000000000015C65                 db    0
.eh_frame:0000000000015C66                 db    0
.eh_frame:0000000000015C67                 db    0
.eh_frame:0000000000015C68                 db    0
.eh_frame:0000000000015C69                 db  41h ; A
.eh_frame:0000000000015C6A                 db  0Eh
.eh_frame:0000000000015C6B                 db  10h
.eh_frame:0000000000015C6C                 db  86h
.eh_frame:0000000000015C6D                 db    2
.eh_frame:0000000000015C6E                 db  41h ; A
.eh_frame:0000000000015C6F                 db  0Eh
.eh_frame:0000000000015C70                 db  18h
.eh_frame:0000000000015C71                 db  83h
.eh_frame:0000000000015C72                 db    3
.eh_frame:0000000000015C73                 db  47h ; G
.eh_frame:0000000000015C74                 db  0Eh
.eh_frame:0000000000015C75                 db  30h ; 0
.eh_frame:0000000000015C76                 db    2
.eh_frame:0000000000015C77                 db  65h ; e
.eh_frame:0000000000015C78                 db  0Ah
.eh_frame:0000000000015C79                 db  0Eh
.eh_frame:0000000000015C7A                 db  18h
.eh_frame:0000000000015C7B                 db  41h ; A
.eh_frame:0000000000015C7C                 db  0Eh
.eh_frame:0000000000015C7D                 db  10h
.eh_frame:0000000000015C7E                 db  41h ; A
.eh_frame:0000000000015C7F                 db  0Eh
.eh_frame:0000000000015C80                 db    8
.eh_frame:0000000000015C81                 db  48h ; H
.eh_frame:0000000000015C82                 db  0Bh
.eh_frame:0000000000015C83                 db    0
.eh_frame:0000000000015C84                 db  48h ; H
.eh_frame:0000000000015C85                 db    0
.eh_frame:0000000000015C86                 db    0
.eh_frame:0000000000015C87                 db    0
.eh_frame:0000000000015C88                 db 0A0h
.eh_frame:0000000000015C89                 db    7
.eh_frame:0000000000015C8A                 db    0
.eh_frame:0000000000015C8B                 db    0
.eh_frame:0000000000015C8C                 db 0A4h
.eh_frame:0000000000015C8D                 db  4Ah ; J
.eh_frame:0000000000015C8E                 db 0FFh
.eh_frame:0000000000015C8F                 db 0FFh
.eh_frame:0000000000015C90                 db 0E4h
.eh_frame:0000000000015C91                 db    2
.eh_frame:0000000000015C92                 db    0
.eh_frame:0000000000015C93                 db    0
.eh_frame:0000000000015C94                 db    0
.eh_frame:0000000000015C95                 db  42h ; B
.eh_frame:0000000000015C96                 db  0Eh
.eh_frame:0000000000015C97                 db  10h
.eh_frame:0000000000015C98                 db  8Fh
.eh_frame:0000000000015C99                 db    2
.eh_frame:0000000000015C9A                 db  42h ; B
.eh_frame:0000000000015C9B                 db  0Eh
.eh_frame:0000000000015C9C                 db  18h
.eh_frame:0000000000015C9D                 db  8Eh
.eh_frame:0000000000015C9E                 db    3
.eh_frame:0000000000015C9F                 db  42h ; B
.eh_frame:0000000000015CA0                 db  0Eh
.eh_frame:0000000000015CA1                 db  20h
.eh_frame:0000000000015CA2                 db  8Dh
.eh_frame:0000000000015CA3                 db    4
.eh_frame:0000000000015CA4                 db  42h ; B
.eh_frame:0000000000015CA5                 db  0Eh
.eh_frame:0000000000015CA6                 db  28h ; (
.eh_frame:0000000000015CA7                 db  8Ch
.eh_frame:0000000000015CA8                 db    5
.eh_frame:0000000000015CA9                 db  44h ; D
.eh_frame:0000000000015CAA                 db  0Eh
.eh_frame:0000000000015CAB                 db  30h ; 0
.eh_frame:0000000000015CAC                 db  86h
.eh_frame:0000000000015CAD                 db    6
.eh_frame:0000000000015CAE                 db  41h ; A
.eh_frame:0000000000015CAF                 db  0Eh
.eh_frame:0000000000015CB0                 db  38h ; 8
.eh_frame:0000000000015CB1                 db  83h
.eh_frame:0000000000015CB2                 db    7
.eh_frame:0000000000015CB3                 db  4Fh ; O
.eh_frame:0000000000015CB4                 db  0Eh
.eh_frame:0000000000015CB5                 db  90h
.eh_frame:0000000000015CB6                 db    2
.eh_frame:0000000000015CB7                 db    2
.eh_frame:0000000000015CB8                 db  66h ; f
.eh_frame:0000000000015CB9                 db  0Ah
.eh_frame:0000000000015CBA                 db  0Eh
.eh_frame:0000000000015CBB                 db  38h ; 8
.eh_frame:0000000000015CBC                 db  41h ; A
.eh_frame:0000000000015CBD                 db  0Eh
.eh_frame:0000000000015CBE                 db  30h ; 0
.eh_frame:0000000000015CBF                 db  41h ; A
.eh_frame:0000000000015CC0                 db  0Eh
.eh_frame:0000000000015CC1                 db  28h ; (
.eh_frame:0000000000015CC2                 db  42h ; B
.eh_frame:0000000000015CC3                 db  0Eh
.eh_frame:0000000000015CC4                 db  20h
.eh_frame:0000000000015CC5                 db  42h ; B
.eh_frame:0000000000015CC6                 db  0Eh
.eh_frame:0000000000015CC7                 db  18h
.eh_frame:0000000000015CC8                 db  42h ; B
.eh_frame:0000000000015CC9                 db  0Eh
.eh_frame:0000000000015CCA                 db  10h
.eh_frame:0000000000015CCB                 db  42h ; B
.eh_frame:0000000000015CCC                 db  0Eh
.eh_frame:0000000000015CCD                 db    8
.eh_frame:0000000000015CCE                 db  44h ; D
.eh_frame:0000000000015CCF                 db  0Bh
.eh_frame:0000000000015CD0                 db  1Ch
.eh_frame:0000000000015CD1                 db    0
.eh_frame:0000000000015CD2                 db    0
.eh_frame:0000000000015CD3                 db    0
.eh_frame:0000000000015CD4                 db 0ECh
.eh_frame:0000000000015CD5                 db    7
.eh_frame:0000000000015CD6                 db    0
.eh_frame:0000000000015CD7                 db    0
.eh_frame:0000000000015CD8                 db  48h ; H
.eh_frame:0000000000015CD9                 db  4Dh ; M
.eh_frame:0000000000015CDA                 db 0FFh
.eh_frame:0000000000015CDB                 db 0FFh
.eh_frame:0000000000015CDC                 db  9Fh
.eh_frame:0000000000015CDD                 db    0
.eh_frame:0000000000015CDE                 db    0
.eh_frame:0000000000015CDF                 db    0
.eh_frame:0000000000015CE0                 db    0
.eh_frame:0000000000015CE1                 db  44h ; D
.eh_frame:0000000000015CE2                 db  0Eh
.eh_frame:0000000000015CE3                 db  10h
.eh_frame:0000000000015CE4                 db  83h
.eh_frame:0000000000015CE5                 db    2
.eh_frame:0000000000015CE6                 db    2
.eh_frame:0000000000015CE7                 db  78h ; x
.eh_frame:0000000000015CE8                 db  0Ah
.eh_frame:0000000000015CE9                 db  0Eh
.eh_frame:0000000000015CEA                 db    8
.eh_frame:0000000000015CEB                 db  41h ; A
.eh_frame:0000000000015CEC                 db  0Bh
.eh_frame:0000000000015CED                 db    0
.eh_frame:0000000000015CEE                 db    0
.eh_frame:0000000000015CEF                 db    0
.eh_frame:0000000000015CF0                 db  40h ; @
.eh_frame:0000000000015CF1                 db    0
.eh_frame:0000000000015CF2                 db    0
.eh_frame:0000000000015CF3                 db    0
.eh_frame:0000000000015CF4                 db  0Ch
.eh_frame:0000000000015CF5                 db    8
.eh_frame:0000000000015CF6                 db    0
.eh_frame:0000000000015CF7                 db    0
.eh_frame:0000000000015CF8                 db 0C8h
.eh_frame:0000000000015CF9                 db  4Dh ; M
.eh_frame:0000000000015CFA                 db 0FFh
.eh_frame:0000000000015CFB                 db 0FFh
.eh_frame:0000000000015CFC                 db 0E7h
.eh_frame:0000000000015CFD                 db    0
.eh_frame:0000000000015CFE                 db    0
.eh_frame:0000000000015CFF                 db    0
.eh_frame:0000000000015D00                 db    0
.eh_frame:0000000000015D01                 db  41h ; A
.eh_frame:0000000000015D02                 db  0Eh
.eh_frame:0000000000015D03                 db  10h
.eh_frame:0000000000015D04                 db  86h
.eh_frame:0000000000015D05                 db    2
.eh_frame:0000000000015D06                 db  41h ; A
.eh_frame:0000000000015D07                 db  0Eh
.eh_frame:0000000000015D08                 db  18h
.eh_frame:0000000000015D09                 db  83h
.eh_frame:0000000000015D0A                 db    3
.eh_frame:0000000000015D0B                 db  49h ; I
.eh_frame:0000000000015D0C                 db  0Eh
.eh_frame:0000000000015D0D                 db  20h
.eh_frame:0000000000015D0E                 db  6Eh ; n
.eh_frame:0000000000015D0F                 db  0Ah
.eh_frame:0000000000015D10                 db  0Eh
.eh_frame:0000000000015D11                 db  18h
.eh_frame:0000000000015D12                 db  41h ; A
.eh_frame:0000000000015D13                 db  0Eh
.eh_frame:0000000000015D14                 db  10h
.eh_frame:0000000000015D15                 db  41h ; A
.eh_frame:0000000000015D16                 db  0Eh
.eh_frame:0000000000015D17                 db    8
.eh_frame:0000000000015D18                 db  45h ; E
.eh_frame:0000000000015D19                 db  0Bh
.eh_frame:0000000000015D1A                 db    2
.eh_frame:0000000000015D1B                 db  4Ah ; J
.eh_frame:0000000000015D1C                 db  0Ah
.eh_frame:0000000000015D1D                 db  0Eh
.eh_frame:0000000000015D1E                 db  18h
.eh_frame:0000000000015D1F                 db  41h ; A
.eh_frame:0000000000015D20                 db  0Eh
.eh_frame:0000000000015D21                 db  10h
.eh_frame:0000000000015D22                 db  41h ; A
.eh_frame:0000000000015D23                 db  0Eh
.eh_frame:0000000000015D24                 db    8
.eh_frame:0000000000015D25                 db  44h ; D
.eh_frame:0000000000015D26                 db  0Bh
.eh_frame:0000000000015D27                 db    2
.eh_frame:0000000000015D28                 db  54h ; T
.eh_frame:0000000000015D29                 db  0Eh
.eh_frame:0000000000015D2A                 db  18h
.eh_frame:0000000000015D2B                 db  41h ; A
.eh_frame:0000000000015D2C                 db  0Eh
.eh_frame:0000000000015D2D                 db  10h
.eh_frame:0000000000015D2E                 db  41h ; A
.eh_frame:0000000000015D2F                 db  0Eh
.eh_frame:0000000000015D30                 db    8
.eh_frame:0000000000015D31                 db    0
.eh_frame:0000000000015D32                 db    0
.eh_frame:0000000000015D33                 db    0
.eh_frame:0000000000015D34                 db  74h ; t
.eh_frame:0000000000015D35                 db    0
.eh_frame:0000000000015D36                 db    0
.eh_frame:0000000000015D37                 db    0
.eh_frame:0000000000015D38                 db  50h ; P
.eh_frame:0000000000015D39                 db    8
.eh_frame:0000000000015D3A                 db    0
.eh_frame:0000000000015D3B                 db    0
.eh_frame:0000000000015D3C                 db  74h ; t
.eh_frame:0000000000015D3D                 db  4Eh ; N
.eh_frame:0000000000015D3E                 db 0FFh
.eh_frame:0000000000015D3F                 db 0FFh
.eh_frame:0000000000015D40                 db  34h ; 4
.eh_frame:0000000000015D41                 db  12h
.eh_frame:0000000000015D42                 db    0
.eh_frame:0000000000015D43                 db    0
.eh_frame:0000000000015D44                 db    0
.eh_frame:0000000000015D45                 db  42h ; B
.eh_frame:0000000000015D46                 db  0Eh
.eh_frame:0000000000015D47                 db  10h
.eh_frame:0000000000015D48                 db  8Fh
.eh_frame:0000000000015D49                 db    2
.eh_frame:0000000000015D4A                 db  42h ; B
.eh_frame:0000000000015D4B                 db  0Eh
.eh_frame:0000000000015D4C                 db  18h
.eh_frame:0000000000015D4D                 db  8Eh
.eh_frame:0000000000015D4E                 db    3
.eh_frame:0000000000015D4F                 db  45h ; E
.eh_frame:0000000000015D50                 db  0Eh
.eh_frame:0000000000015D51                 db  20h
.eh_frame:0000000000015D52                 db  8Dh
.eh_frame:0000000000015D53                 db    4
.eh_frame:0000000000015D54                 db  42h ; B
.eh_frame:0000000000015D55                 db  0Eh
.eh_frame:0000000000015D56                 db  28h ; (
.eh_frame:0000000000015D57                 db  8Ch
.eh_frame:0000000000015D58                 db    5
.eh_frame:0000000000015D59                 db  44h ; D
.eh_frame:0000000000015D5A                 db  0Eh
.eh_frame:0000000000015D5B                 db  30h ; 0
.eh_frame:0000000000015D5C                 db  86h
.eh_frame:0000000000015D5D                 db    6
.eh_frame:0000000000015D5E                 db  41h ; A
.eh_frame:0000000000015D5F                 db  0Eh
.eh_frame:0000000000015D60                 db  38h ; 8
.eh_frame:0000000000015D61                 db  83h
.eh_frame:0000000000015D62                 db    7
.eh_frame:0000000000015D63                 db  53h ; S
.eh_frame:0000000000015D64                 db  0Eh
.eh_frame:0000000000015D65                 db 0F0h
.eh_frame:0000000000015D66                 db    1
.eh_frame:0000000000015D67                 db    3
.eh_frame:0000000000015D68                 db  81h
.eh_frame:0000000000015D69                 db  0Bh
.eh_frame:0000000000015D6A                 db  0Eh
.eh_frame:0000000000015D6B                 db 0F8h
.eh_frame:0000000000015D6C                 db    1
.eh_frame:0000000000015D6D                 db  4Ah ; J
.eh_frame:0000000000015D6E                 db  0Eh
.eh_frame:0000000000015D6F                 db  80h
.eh_frame:0000000000015D70                 db    2
.eh_frame:0000000000015D71                 db  44h ; D
.eh_frame:0000000000015D72                 db  0Eh
.eh_frame:0000000000015D73                 db  88h
.eh_frame:0000000000015D74                 db    2
.eh_frame:0000000000015D75                 db  45h ; E
.eh_frame:0000000000015D76                 db  0Eh
.eh_frame:0000000000015D77                 db  90h
.eh_frame:0000000000015D78                 db    2
.eh_frame:0000000000015D79                 db  5Fh ; _
.eh_frame:0000000000015D7A                 db  0Eh
.eh_frame:0000000000015D7B                 db 0F0h
.eh_frame:0000000000015D7C                 db    1
.eh_frame:0000000000015D7D                 db  64h ; d
.eh_frame:0000000000015D7E                 db  0Ah
.eh_frame:0000000000015D7F                 db  0Eh
.eh_frame:0000000000015D80                 db  38h ; 8
.eh_frame:0000000000015D81                 db  41h ; A
.eh_frame:0000000000015D82                 db  0Eh
.eh_frame:0000000000015D83                 db  30h ; 0
.eh_frame:0000000000015D84                 db  41h ; A
.eh_frame:0000000000015D85                 db  0Eh
.eh_frame:0000000000015D86                 db  28h ; (
.eh_frame:0000000000015D87                 db  42h ; B
.eh_frame:0000000000015D88                 db  0Eh
.eh_frame:0000000000015D89                 db  20h
.eh_frame:0000000000015D8A                 db  42h ; B
.eh_frame:0000000000015D8B                 db  0Eh
.eh_frame:0000000000015D8C                 db  18h
.eh_frame:0000000000015D8D                 db  42h ; B
.eh_frame:0000000000015D8E                 db  0Eh
.eh_frame:0000000000015D8F                 db  10h
.eh_frame:0000000000015D90                 db  42h ; B
.eh_frame:0000000000015D91                 db  0Eh
.eh_frame:0000000000015D92                 db    8
.eh_frame:0000000000015D93                 db  44h ; D
.eh_frame:0000000000015D94                 db  0Bh
.eh_frame:0000000000015D95                 db    3
.eh_frame:0000000000015D96                 db  99h
.eh_frame:0000000000015D97                 db    5
.eh_frame:0000000000015D98                 db  0Eh
.eh_frame:0000000000015D99                 db 0F8h
.eh_frame:0000000000015D9A                 db    1
.eh_frame:0000000000015D9B                 db  4Dh ; M
.eh_frame:0000000000015D9C                 db  0Eh
.eh_frame:0000000000015D9D                 db  80h
.eh_frame:0000000000015D9E                 db    2
.eh_frame:0000000000015D9F                 db  44h ; D
.eh_frame:0000000000015DA0                 db  0Eh
.eh_frame:0000000000015DA1                 db  88h
.eh_frame:0000000000015DA2                 db    2
.eh_frame:0000000000015DA3                 db  47h ; G
.eh_frame:0000000000015DA4                 db  0Eh
.eh_frame:0000000000015DA5                 db  90h
.eh_frame:0000000000015DA6                 db    2
.eh_frame:0000000000015DA7                 db  5Bh ; [
.eh_frame:0000000000015DA8                 db  0Eh
.eh_frame:0000000000015DA9                 db 0F0h
.eh_frame:0000000000015DAA                 db    1
.eh_frame:0000000000015DAB                 db    0
.eh_frame:0000000000015DAC                 db  68h ; h
.eh_frame:0000000000015DAD                 db    0
.eh_frame:0000000000015DAE                 db    0
.eh_frame:0000000000015DAF                 db    0
.eh_frame:0000000000015DB0                 db 0C8h
.eh_frame:0000000000015DB1                 db    8
.eh_frame:0000000000015DB2                 db    0
.eh_frame:0000000000015DB3                 db    0
.eh_frame:0000000000015DB4                 db  3Ch ; <
.eh_frame:0000000000015DB5                 db  60h ; `
.eh_frame:0000000000015DB6                 db 0FFh
.eh_frame:0000000000015DB7                 db 0FFh
.eh_frame:0000000000015DB8                 db 0ABh
.eh_frame:0000000000015DB9                 db    1
.eh_frame:0000000000015DBA                 db    0
.eh_frame:0000000000015DBB                 db    0
.eh_frame:0000000000015DBC                 db    0
.eh_frame:0000000000015DBD                 db  42h ; B
.eh_frame:0000000000015DBE                 db  0Eh
.eh_frame:0000000000015DBF                 db  10h
.eh_frame:0000000000015DC0                 db  8Fh
.eh_frame:0000000000015DC1                 db    2
.eh_frame:0000000000015DC2                 db  42h ; B
.eh_frame:0000000000015DC3                 db  0Eh
.eh_frame:0000000000015DC4                 db  18h
.eh_frame:0000000000015DC5                 db  8Eh
.eh_frame:0000000000015DC6                 db    3
.eh_frame:0000000000015DC7                 db  45h ; E
.eh_frame:0000000000015DC8                 db  0Eh
.eh_frame:0000000000015DC9                 db  20h
.eh_frame:0000000000015DCA                 db  8Dh
.eh_frame:0000000000015DCB                 db    4
.eh_frame:0000000000015DCC                 db  42h ; B
.eh_frame:0000000000015DCD                 db  0Eh
.eh_frame:0000000000015DCE                 db  28h ; (
.eh_frame:0000000000015DCF                 db  8Ch
.eh_frame:0000000000015DD0                 db    5
.eh_frame:0000000000015DD1                 db  44h ; D
.eh_frame:0000000000015DD2                 db  0Eh
.eh_frame:0000000000015DD3                 db  30h ; 0
.eh_frame:0000000000015DD4                 db  86h
.eh_frame:0000000000015DD5                 db    6
.eh_frame:0000000000015DD6                 db  41h ; A
.eh_frame:0000000000015DD7                 db  0Eh
.eh_frame:0000000000015DD8                 db  38h ; 8
.eh_frame:0000000000015DD9                 db  83h
.eh_frame:0000000000015DDA                 db    7
.eh_frame:0000000000015DDB                 db  47h ; G
.eh_frame:0000000000015DDC                 db  0Eh
.eh_frame:0000000000015DDD                 db  60h ; `
.eh_frame:0000000000015DDE                 db    2
.eh_frame:0000000000015DDF                 db  99h
.eh_frame:0000000000015DE0                 db  0Eh
.eh_frame:0000000000015DE1                 db  68h ; h
.eh_frame:0000000000015DE2                 db  5Fh ; _
.eh_frame:0000000000015DE3                 db  0Eh
.eh_frame:0000000000015DE4                 db  70h ; p
.eh_frame:0000000000015DE5                 db  46h ; F
.eh_frame:0000000000015DE6                 db  0Eh
.eh_frame:0000000000015DE7                 db  78h ; x
.eh_frame:0000000000015DE8                 db  42h ; B
.eh_frame:0000000000015DE9                 db  0Eh
.eh_frame:0000000000015DEA                 db  80h
.eh_frame:0000000000015DEB                 db    1
.eh_frame:0000000000015DEC                 db  59h ; Y
.eh_frame:0000000000015DED                 db  0Eh
.eh_frame:0000000000015DEE                 db  60h ; `
.eh_frame:0000000000015DEF                 db    2
.eh_frame:0000000000015DF0                 db  40h ; @
.eh_frame:0000000000015DF1                 db  0Eh
.eh_frame:0000000000015DF2                 db  68h ; h
.eh_frame:0000000000015DF3                 db  4Bh ; K
.eh_frame:0000000000015DF4                 db  0Eh
.eh_frame:0000000000015DF5                 db  70h ; p
.eh_frame:0000000000015DF6                 db  43h ; C
.eh_frame:0000000000015DF7                 db  0Eh
.eh_frame:0000000000015DF8                 db  78h ; x
.eh_frame:0000000000015DF9                 db  45h ; E
.eh_frame:0000000000015DFA                 db  0Eh
.eh_frame:0000000000015DFB                 db  80h
.eh_frame:0000000000015DFC                 db    1
.eh_frame:0000000000015DFD                 db  5Eh ; ^
.eh_frame:0000000000015DFE                 db  0Eh
.eh_frame:0000000000015DFF                 db  60h ; `
.eh_frame:0000000000015E00                 db  4Ch ; L
.eh_frame:0000000000015E01                 db  0Ah
.eh_frame:0000000000015E02                 db  0Eh
.eh_frame:0000000000015E03                 db  38h ; 8
.eh_frame:0000000000015E04                 db  44h ; D
.eh_frame:0000000000015E05                 db  0Eh
.eh_frame:0000000000015E06                 db  30h ; 0
.eh_frame:0000000000015E07                 db  41h ; A
.eh_frame:0000000000015E08                 db  0Eh
.eh_frame:0000000000015E09                 db  28h ; (
.eh_frame:0000000000015E0A                 db  42h ; B
.eh_frame:0000000000015E0B                 db  0Eh
.eh_frame:0000000000015E0C                 db  20h
.eh_frame:0000000000015E0D                 db  42h ; B
.eh_frame:0000000000015E0E                 db  0Eh
.eh_frame:0000000000015E0F                 db  18h
.eh_frame:0000000000015E10                 db  42h ; B
.eh_frame:0000000000015E11                 db  0Eh
.eh_frame:0000000000015E12                 db  10h
.eh_frame:0000000000015E13                 db  42h ; B
.eh_frame:0000000000015E14                 db  0Eh
.eh_frame:0000000000015E15                 db    8
.eh_frame:0000000000015E16                 db  46h ; F
.eh_frame:0000000000015E17                 db  0Bh
.eh_frame:0000000000015E18                 db  28h ; (
.eh_frame:0000000000015E19                 db    0
.eh_frame:0000000000015E1A                 db    0
.eh_frame:0000000000015E1B                 db    0
.eh_frame:0000000000015E1C                 db  34h ; 4
.eh_frame:0000000000015E1D                 db    9
.eh_frame:0000000000015E1E                 db    0
.eh_frame:0000000000015E1F                 db    0
.eh_frame:0000000000015E20                 db  80h
.eh_frame:0000000000015E21                 db  61h ; a
.eh_frame:0000000000015E22                 db 0FFh
.eh_frame:0000000000015E23                 db 0FFh
.eh_frame:0000000000015E24                 db  36h ; 6
.eh_frame:0000000000015E25                 db    0
.eh_frame:0000000000015E26                 db    0
.eh_frame:0000000000015E27                 db    0
.eh_frame:0000000000015E28                 db    0
.eh_frame:0000000000015E29                 db  42h ; B
.eh_frame:0000000000015E2A                 db  0Eh
.eh_frame:0000000000015E2B                 db  10h
.eh_frame:0000000000015E2C                 db  8Ch
.eh_frame:0000000000015E2D                 db    2
.eh_frame:0000000000015E2E                 db  41h ; A
.eh_frame:0000000000015E2F                 db  0Eh
.eh_frame:0000000000015E30                 db  18h
.eh_frame:0000000000015E31                 db  86h
.eh_frame:0000000000015E32                 db    3
.eh_frame:0000000000015E33                 db  41h ; A
.eh_frame:0000000000015E34                 db  0Eh
.eh_frame:0000000000015E35                 db  20h
.eh_frame:0000000000015E36                 db  83h
.eh_frame:0000000000015E37                 db    4
.eh_frame:0000000000015E38                 db  6Eh ; n
.eh_frame:0000000000015E39                 db  0Eh
.eh_frame:0000000000015E3A                 db  18h
.eh_frame:0000000000015E3B                 db  41h ; A
.eh_frame:0000000000015E3C                 db  0Eh
.eh_frame:0000000000015E3D                 db  10h
.eh_frame:0000000000015E3E                 db  42h ; B
.eh_frame:0000000000015E3F                 db  0Eh
.eh_frame:0000000000015E40                 db    8
.eh_frame:0000000000015E41                 db    0
.eh_frame:0000000000015E42                 db    0
.eh_frame:0000000000015E43                 db    0
.eh_frame:0000000000015E44                 db  10h
.eh_frame:0000000000015E45                 db    0
.eh_frame:0000000000015E46                 db    0
.eh_frame:0000000000015E47                 db    0
.eh_frame:0000000000015E48                 db  60h ; `
.eh_frame:0000000000015E49                 db    9
.eh_frame:0000000000015E4A                 db    0
.eh_frame:0000000000015E4B                 db    0
.eh_frame:0000000000015E4C                 db  94h
.eh_frame:0000000000015E4D                 db  61h ; a
.eh_frame:0000000000015E4E                 db 0FFh
.eh_frame:0000000000015E4F                 db 0FFh
.eh_frame:0000000000015E50                 db  11h
.eh_frame:0000000000015E51                 db    0
.eh_frame:0000000000015E52                 db    0
.eh_frame:0000000000015E53                 db    0
.eh_frame:0000000000015E54                 db    0
.eh_frame:0000000000015E55                 db    0
.eh_frame:0000000000015E56                 db    0
.eh_frame:0000000000015E57                 db    0
.eh_frame:0000000000015E58                 db  10h
.eh_frame:0000000000015E59                 db    0
.eh_frame:0000000000015E5A                 db    0
.eh_frame:0000000000015E5B                 db    0
.eh_frame:0000000000015E5C                 db  74h ; t
.eh_frame:0000000000015E5D                 db    9
.eh_frame:0000000000015E5E                 db    0
.eh_frame:0000000000015E5F                 db    0
.eh_frame:0000000000015E60                 db 0A0h
.eh_frame:0000000000015E61                 db  61h ; a
.eh_frame:0000000000015E62                 db 0FFh
.eh_frame:0000000000015E63                 db 0FFh
.eh_frame:0000000000015E64                 db  11h
.eh_frame:0000000000015E65                 db    0
.eh_frame:0000000000015E66                 db    0
.eh_frame:0000000000015E67                 db    0
.eh_frame:0000000000015E68                 db    0
.eh_frame:0000000000015E69                 db    0
.eh_frame:0000000000015E6A                 db    0
.eh_frame:0000000000015E6B                 db    0
.eh_frame:0000000000015E6C                 db  10h
.eh_frame:0000000000015E6D                 db    0
.eh_frame:0000000000015E6E                 db    0
.eh_frame:0000000000015E6F                 db    0
.eh_frame:0000000000015E70                 db  88h
.eh_frame:0000000000015E71                 db    9
.eh_frame:0000000000015E72                 db    0
.eh_frame:0000000000015E73                 db    0
.eh_frame:0000000000015E74                 db 0ACh
.eh_frame:0000000000015E75                 db  61h ; a
.eh_frame:0000000000015E76                 db 0FFh
.eh_frame:0000000000015E77                 db 0FFh
.eh_frame:0000000000015E78                 db  35h ; 5
.eh_frame:0000000000015E79                 db    0
.eh_frame:0000000000015E7A                 db    0
.eh_frame:0000000000015E7B                 db    0
.eh_frame:0000000000015E7C                 db    0
.eh_frame:0000000000015E7D                 db    0
.eh_frame:0000000000015E7E                 db    0
.eh_frame:0000000000015E7F                 db    0
.eh_frame:0000000000015E80                 db  10h
.eh_frame:0000000000015E81                 db    0
.eh_frame:0000000000015E82                 db    0
.eh_frame:0000000000015E83                 db    0
.eh_frame:0000000000015E84                 db  9Ch
.eh_frame:0000000000015E85                 db    9
.eh_frame:0000000000015E86                 db    0
.eh_frame:0000000000015E87                 db    0
.eh_frame:0000000000015E88                 db 0D8h
.eh_frame:0000000000015E89                 db  61h ; a
.eh_frame:0000000000015E8A                 db 0FFh
.eh_frame:0000000000015E8B                 db 0FFh
.eh_frame:0000000000015E8C                 db  15h
.eh_frame:0000000000015E8D                 db    0
.eh_frame:0000000000015E8E                 db    0
.eh_frame:0000000000015E8F                 db    0
.eh_frame:0000000000015E90                 db    0
.eh_frame:0000000000015E91                 db    0
.eh_frame:0000000000015E92                 db    0
.eh_frame:0000000000015E93                 db    0
.eh_frame:0000000000015E94                 db  10h
.eh_frame:0000000000015E95                 db    0
.eh_frame:0000000000015E96                 db    0
.eh_frame:0000000000015E97                 db    0
.eh_frame:0000000000015E98                 db 0B0h
.eh_frame:0000000000015E99                 db    9
.eh_frame:0000000000015E9A                 db    0
.eh_frame:0000000000015E9B                 db    0
.eh_frame:0000000000015E9C                 db 0E4h
.eh_frame:0000000000015E9D                 db  61h ; a
.eh_frame:0000000000015E9E                 db 0FFh
.eh_frame:0000000000015E9F                 db 0FFh
.eh_frame:0000000000015EA0                 db  30h ; 0
.eh_frame:0000000000015EA1                 db    0
.eh_frame:0000000000015EA2                 db    0
.eh_frame:0000000000015EA3                 db    0
.eh_frame:0000000000015EA4                 db    0
.eh_frame:0000000000015EA5                 db  6Bh ; k
.eh_frame:0000000000015EA6                 db  0Eh
.eh_frame:0000000000015EA7                 db  10h
.eh_frame:0000000000015EA8                 db  50h ; P
.eh_frame:0000000000015EA9                 db    0
.eh_frame:0000000000015EAA                 db    0
.eh_frame:0000000000015EAB                 db    0
.eh_frame:0000000000015EAC                 db 0C4h
.eh_frame:0000000000015EAD                 db    9
.eh_frame:0000000000015EAE                 db    0
.eh_frame:0000000000015EAF                 db    0
.eh_frame:0000000000015EB0                 db    0
.eh_frame:0000000000015EB1                 db  62h ; b
.eh_frame:0000000000015EB2                 db 0FFh
.eh_frame:0000000000015EB3                 db 0FFh
.eh_frame:0000000000015EB4                 db  74h ; t
.eh_frame:0000000000015EB5                 db    0
.eh_frame:0000000000015EB6                 db    0
.eh_frame:0000000000015EB7                 db    0
.eh_frame:0000000000015EB8                 db    0
.eh_frame:0000000000015EB9                 db  42h ; B
.eh_frame:0000000000015EBA                 db  0Eh
.eh_frame:0000000000015EBB                 db  10h
.eh_frame:0000000000015EBC                 db  8Fh
.eh_frame:0000000000015EBD                 db    2
.eh_frame:0000000000015EBE                 db  42h ; B
.eh_frame:0000000000015EBF                 db  0Eh
.eh_frame:0000000000015EC0                 db  18h
.eh_frame:0000000000015EC1                 db  8Eh
.eh_frame:0000000000015EC2                 db    3
.eh_frame:0000000000015EC3                 db  49h ; I
.eh_frame:0000000000015EC4                 db  0Eh
.eh_frame:0000000000015EC5                 db  20h
.eh_frame:0000000000015EC6                 db  8Dh
.eh_frame:0000000000015EC7                 db    4
.eh_frame:0000000000015EC8                 db  42h ; B
.eh_frame:0000000000015EC9                 db  0Eh
.eh_frame:0000000000015ECA                 db  28h ; (
.eh_frame:0000000000015ECB                 db  8Ch
.eh_frame:0000000000015ECC                 db    5
.eh_frame:0000000000015ECD                 db  44h ; D
.eh_frame:0000000000015ECE                 db  0Eh
.eh_frame:0000000000015ECF                 db  30h ; 0
.eh_frame:0000000000015ED0                 db  86h
.eh_frame:0000000000015ED1                 db    6
.eh_frame:0000000000015ED2                 db  41h ; A
.eh_frame:0000000000015ED3                 db  0Eh
.eh_frame:0000000000015ED4                 db  38h ; 8
.eh_frame:0000000000015ED5                 db  83h
.eh_frame:0000000000015ED6                 db    7
.eh_frame:0000000000015ED7                 db  4Dh ; M
.eh_frame:0000000000015ED8                 db  0Eh
.eh_frame:0000000000015ED9                 db  50h ; P
.eh_frame:0000000000015EDA                 db  5Fh ; _
.eh_frame:0000000000015EDB                 db  0Eh
.eh_frame:0000000000015EDC                 db  58h ; X
.eh_frame:0000000000015EDD                 db  47h ; G
.eh_frame:0000000000015EDE                 db  0Eh
.eh_frame:0000000000015EDF                 db  60h ; `
.eh_frame:0000000000015EE0                 db  46h ; F
.eh_frame:0000000000015EE1                 db  0Eh
.eh_frame:0000000000015EE2                 db  68h ; h
.eh_frame:0000000000015EE3                 db  44h ; D
.eh_frame:0000000000015EE4                 db  0Eh
.eh_frame:0000000000015EE5                 db  70h ; p
.eh_frame:0000000000015EE6                 db  58h ; X
.eh_frame:0000000000015EE7                 db  0Eh
.eh_frame:0000000000015EE8                 db  38h ; 8
.eh_frame:0000000000015EE9                 db  41h ; A
.eh_frame:0000000000015EEA                 db  0Eh
.eh_frame:0000000000015EEB                 db  30h ; 0
.eh_frame:0000000000015EEC                 db  41h ; A
.eh_frame:0000000000015EED                 db  0Eh
.eh_frame:0000000000015EEE                 db  28h ; (
.eh_frame:0000000000015EEF                 db  42h ; B
.eh_frame:0000000000015EF0                 db  0Eh
.eh_frame:0000000000015EF1                 db  20h
.eh_frame:0000000000015EF2                 db  42h ; B
.eh_frame:0000000000015EF3                 db  0Eh
.eh_frame:0000000000015EF4                 db  18h
.eh_frame:0000000000015EF5                 db  42h ; B
.eh_frame:0000000000015EF6                 db  0Eh
.eh_frame:0000000000015EF7                 db  10h
.eh_frame:0000000000015EF8                 db  42h ; B
.eh_frame:0000000000015EF9                 db  0Eh
.eh_frame:0000000000015EFA                 db    8
.eh_frame:0000000000015EFB                 db    0
.eh_frame:0000000000015EFC                 db  68h ; h
.eh_frame:0000000000015EFD                 db    0
.eh_frame:0000000000015EFE                 db    0
.eh_frame:0000000000015EFF                 db    0
.eh_frame:0000000000015F00                 db  18h
.eh_frame:0000000000015F01                 db  0Ah
.eh_frame:0000000000015F02                 db    0
.eh_frame:0000000000015F03                 db    0
.eh_frame:0000000000015F04                 db  2Ch ; ,
.eh_frame:0000000000015F05                 db  62h ; b
.eh_frame:0000000000015F06                 db 0FFh
.eh_frame:0000000000015F07                 db 0FFh
.eh_frame:0000000000015F08                 db 0E3h
.eh_frame:0000000000015F09                 db    0
.eh_frame:0000000000015F0A                 db    0
.eh_frame:0000000000015F0B                 db    0
.eh_frame:0000000000015F0C                 db    0
.eh_frame:0000000000015F0D                 db  42h ; B
.eh_frame:0000000000015F0E                 db  0Eh
.eh_frame:0000000000015F0F                 db  10h
.eh_frame:0000000000015F10                 db  8Fh
.eh_frame:0000000000015F11                 db    2
.eh_frame:0000000000015F12                 db  42h ; B
.eh_frame:0000000000015F13                 db  0Eh
.eh_frame:0000000000015F14                 db  18h
.eh_frame:0000000000015F15                 db  8Eh
.eh_frame:0000000000015F16                 db    3
.eh_frame:0000000000015F17                 db  49h ; I
.eh_frame:0000000000015F18                 db  0Eh
.eh_frame:0000000000015F19                 db  20h
.eh_frame:0000000000015F1A                 db  8Dh
.eh_frame:0000000000015F1B                 db    4
.eh_frame:0000000000015F1C                 db  42h ; B
.eh_frame:0000000000015F1D                 db  0Eh
.eh_frame:0000000000015F1E                 db  28h ; (
.eh_frame:0000000000015F1F                 db  8Ch
.eh_frame:0000000000015F20                 db    5
.eh_frame:0000000000015F21                 db  44h ; D
.eh_frame:0000000000015F22                 db  0Eh
.eh_frame:0000000000015F23                 db  30h ; 0
.eh_frame:0000000000015F24                 db  86h
.eh_frame:0000000000015F25                 db    6
.eh_frame:0000000000015F26                 db  41h ; A
.eh_frame:0000000000015F27                 db  0Eh
.eh_frame:0000000000015F28                 db  38h ; 8
.eh_frame:0000000000015F29                 db  83h
.eh_frame:0000000000015F2A                 db    7
.eh_frame:0000000000015F2B                 db  4Dh ; M
.eh_frame:0000000000015F2C                 db  0Eh
.eh_frame:0000000000015F2D                 db  70h ; p
.eh_frame:0000000000015F2E                 db  65h ; e
.eh_frame:0000000000015F2F                 db  0Eh
.eh_frame:0000000000015F30                 db  78h ; x
.eh_frame:0000000000015F31                 db  4Dh ; M
.eh_frame:0000000000015F32                 db  0Eh
.eh_frame:0000000000015F33                 db  80h
.eh_frame:0000000000015F34                 db    1
.eh_frame:0000000000015F35                 db  46h ; F
.eh_frame:0000000000015F36                 db  0Eh
.eh_frame:0000000000015F37                 db  88h
.eh_frame:0000000000015F38                 db    1
.eh_frame:0000000000015F39                 db  42h ; B
.eh_frame:0000000000015F3A                 db  0Eh
.eh_frame:0000000000015F3B                 db  90h
.eh_frame:0000000000015F3C                 db    1
.eh_frame:0000000000015F3D                 db  5Eh ; ^
.eh_frame:0000000000015F3E                 db  0Eh
.eh_frame:0000000000015F3F                 db  70h ; p
.eh_frame:0000000000015F40                 db  56h ; V
.eh_frame:0000000000015F41                 db  0Eh
.eh_frame:0000000000015F42                 db  78h ; x
.eh_frame:0000000000015F43                 db  43h ; C
.eh_frame:0000000000015F44                 db  0Eh
.eh_frame:0000000000015F45                 db  80h
.eh_frame:0000000000015F46                 db    1
.eh_frame:0000000000015F47                 db  43h ; C
.eh_frame:0000000000015F48                 db  0Eh
.eh_frame:0000000000015F49                 db  88h
.eh_frame:0000000000015F4A                 db    1
.eh_frame:0000000000015F4B                 db  56h ; V
.eh_frame:0000000000015F4C                 db  0Eh
.eh_frame:0000000000015F4D                 db  90h
.eh_frame:0000000000015F4E                 db    1
.eh_frame:0000000000015F4F                 db  52h ; R
.eh_frame:0000000000015F50                 db  0Eh
.eh_frame:0000000000015F51                 db  70h ; p
.eh_frame:0000000000015F52                 db  5Bh ; [
.eh_frame:0000000000015F53                 db  0Eh
.eh_frame:0000000000015F54                 db  38h ; 8
.eh_frame:0000000000015F55                 db  41h ; A
.eh_frame:0000000000015F56                 db  0Eh
.eh_frame:0000000000015F57                 db  30h ; 0
.eh_frame:0000000000015F58                 db  41h ; A
.eh_frame:0000000000015F59                 db  0Eh
.eh_frame:0000000000015F5A                 db  28h ; (
.eh_frame:0000000000015F5B                 db  42h ; B
.eh_frame:0000000000015F5C                 db  0Eh
.eh_frame:0000000000015F5D                 db  20h
.eh_frame:0000000000015F5E                 db  42h ; B
.eh_frame:0000000000015F5F                 db  0Eh
.eh_frame:0000000000015F60                 db  18h
.eh_frame:0000000000015F61                 db  42h ; B
.eh_frame:0000000000015F62                 db  0Eh
.eh_frame:0000000000015F63                 db  10h
.eh_frame:0000000000015F64                 db  42h ; B
.eh_frame:0000000000015F65                 db  0Eh
.eh_frame:0000000000015F66                 db    8
.eh_frame:0000000000015F67                 db    0
.eh_frame:0000000000015F68                 db  10h
.eh_frame:0000000000015F69                 db    0
.eh_frame:0000000000015F6A                 db    0
.eh_frame:0000000000015F6B                 db    0
.eh_frame:0000000000015F6C                 db  84h
.eh_frame:0000000000015F6D                 db  0Ah
.eh_frame:0000000000015F6E                 db    0
.eh_frame:0000000000015F6F                 db    0
.eh_frame:0000000000015F70                 db 0B0h
.eh_frame:0000000000015F71                 db  62h ; b
.eh_frame:0000000000015F72                 db 0FFh
.eh_frame:0000000000015F73                 db 0FFh
.eh_frame:0000000000015F74                 db  0Ah
.eh_frame:0000000000015F75                 db    0
.eh_frame:0000000000015F76                 db    0
.eh_frame:0000000000015F77                 db    0
.eh_frame:0000000000015F78                 db    0
.eh_frame:0000000000015F79                 db    0
.eh_frame:0000000000015F7A                 db    0
.eh_frame:0000000000015F7B                 db    0
.eh_frame:0000000000015F7C                 db  28h ; (
.eh_frame:0000000000015F7D                 db    0
.eh_frame:0000000000015F7E                 db    0
.eh_frame:0000000000015F7F                 db    0
.eh_frame:0000000000015F80                 db  98h
.eh_frame:0000000000015F81                 db  0Ah
.eh_frame:0000000000015F82                 db    0
.eh_frame:0000000000015F83                 db    0
.eh_frame:0000000000015F84                 db 0ACh
.eh_frame:0000000000015F85                 db  62h ; b
.eh_frame:0000000000015F86                 db 0FFh
.eh_frame:0000000000015F87                 db 0FFh
.eh_frame:0000000000015F88                 db  93h
.eh_frame:0000000000015F89                 db    0
.eh_frame:0000000000015F8A                 db    0
.eh_frame:0000000000015F8B                 db    0
.eh_frame:0000000000015F8C                 db    0
.eh_frame:0000000000015F8D                 db  48h ; H
.eh_frame:0000000000015F8E                 db  0Eh
.eh_frame:0000000000015F8F                 db  10h
.eh_frame:0000000000015F90                 db  8Ch
.eh_frame:0000000000015F91                 db    2
.eh_frame:0000000000015F92                 db  48h ; H
.eh_frame:0000000000015F93                 db  0Eh
.eh_frame:0000000000015F94                 db  18h
.eh_frame:0000000000015F95                 db  86h
.eh_frame:0000000000015F96                 db    3
.eh_frame:0000000000015F97                 db  41h ; A
.eh_frame:0000000000015F98                 db  0Eh
.eh_frame:0000000000015F99                 db  20h
.eh_frame:0000000000015F9A                 db  83h
.eh_frame:0000000000015F9B                 db    4
.eh_frame:0000000000015F9C                 db    2
.eh_frame:0000000000015F9D                 db  74h ; t
.eh_frame:0000000000015F9E                 db  0Eh
.eh_frame:0000000000015F9F                 db  18h
.eh_frame:0000000000015FA0                 db  4Bh ; K
.eh_frame:0000000000015FA1                 db  0Eh
.eh_frame:0000000000015FA2                 db  10h
.eh_frame:0000000000015FA3                 db  42h ; B
.eh_frame:0000000000015FA4                 db  0Eh
.eh_frame:0000000000015FA5                 db    8
.eh_frame:0000000000015FA6                 db    0
.eh_frame:0000000000015FA7                 db    0
.eh_frame:0000000000015FA8                 db  10h
.eh_frame:0000000000015FA9                 db    0
.eh_frame:0000000000015FAA                 db    0
.eh_frame:0000000000015FAB                 db    0
.eh_frame:0000000000015FAC                 db 0C4h
.eh_frame:0000000000015FAD                 db  0Ah
.eh_frame:0000000000015FAE                 db    0
.eh_frame:0000000000015FAF                 db    0
.eh_frame:0000000000015FB0                 db  20h
.eh_frame:0000000000015FB1                 db  63h ; c
.eh_frame:0000000000015FB2                 db 0FFh
.eh_frame:0000000000015FB3                 db 0FFh
.eh_frame:0000000000015FB4                 db  13h
.eh_frame:0000000000015FB5                 db    0
.eh_frame:0000000000015FB6                 db    0
.eh_frame:0000000000015FB7                 db    0
.eh_frame:0000000000015FB8                 db    0
.eh_frame:0000000000015FB9                 db    0
.eh_frame:0000000000015FBA                 db    0
.eh_frame:0000000000015FBB                 db    0
.eh_frame:0000000000015FBC                 db  10h
.eh_frame:0000000000015FBD                 db    0
.eh_frame:0000000000015FBE                 db    0
.eh_frame:0000000000015FBF                 db    0
.eh_frame:0000000000015FC0                 db 0D8h
.eh_frame:0000000000015FC1                 db  0Ah
.eh_frame:0000000000015FC2                 db    0
.eh_frame:0000000000015FC3                 db    0
.eh_frame:0000000000015FC4                 db  2Ch ; ,
.eh_frame:0000000000015FC5                 db  63h ; c
.eh_frame:0000000000015FC6                 db 0FFh
.eh_frame:0000000000015FC7                 db 0FFh
.eh_frame:0000000000015FC8                 db  0Ch
.eh_frame:0000000000015FC9                 db    0
.eh_frame:0000000000015FCA                 db    0
.eh_frame:0000000000015FCB                 db    0
.eh_frame:0000000000015FCC                 db    0
.eh_frame:0000000000015FCD                 db    0
.eh_frame:0000000000015FCE                 db    0
.eh_frame:0000000000015FCF                 db    0
.eh_frame:0000000000015FD0                 db  10h
.eh_frame:0000000000015FD1                 db    0
.eh_frame:0000000000015FD2                 db    0
.eh_frame:0000000000015FD3                 db    0
.eh_frame:0000000000015FD4                 db 0ECh
.eh_frame:0000000000015FD5                 db  0Ah
.eh_frame:0000000000015FD6                 db    0
.eh_frame:0000000000015FD7                 db    0
.eh_frame:0000000000015FD8                 db  28h ; (
.eh_frame:0000000000015FD9                 db  63h ; c
.eh_frame:0000000000015FDA                 db 0FFh
.eh_frame:0000000000015FDB                 db 0FFh
.eh_frame:0000000000015FDC                 db  18h
.eh_frame:0000000000015FDD                 db    0
.eh_frame:0000000000015FDE                 db    0
.eh_frame:0000000000015FDF                 db    0
.eh_frame:0000000000015FE0                 db    0
.eh_frame:0000000000015FE1                 db    0
.eh_frame:0000000000015FE2                 db    0
.eh_frame:0000000000015FE3                 db    0
.eh_frame:0000000000015FE4                 db  10h
.eh_frame:0000000000015FE5                 db    0
.eh_frame:0000000000015FE6                 db    0
.eh_frame:0000000000015FE7                 db    0
.eh_frame:0000000000015FE8                 db    0
.eh_frame:0000000000015FE9                 db  0Bh
.eh_frame:0000000000015FEA                 db    0
.eh_frame:0000000000015FEB                 db    0
.eh_frame:0000000000015FEC                 db  34h ; 4
.eh_frame:0000000000015FED                 db  63h ; c
.eh_frame:0000000000015FEE                 db 0FFh
.eh_frame:0000000000015FEF                 db 0FFh
.eh_frame:0000000000015FF0                 db  14h
.eh_frame:0000000000015FF1                 db    0
.eh_frame:0000000000015FF2                 db    0
.eh_frame:0000000000015FF3                 db    0
.eh_frame:0000000000015FF4                 db    0
.eh_frame:0000000000015FF5                 db    0
.eh_frame:0000000000015FF6                 db    0
.eh_frame:0000000000015FF7                 db    0
.eh_frame:0000000000015FF8                 db  18h
.eh_frame:0000000000015FF9                 db    0
.eh_frame:0000000000015FFA                 db    0
.eh_frame:0000000000015FFB                 db    0
.eh_frame:0000000000015FFC                 db  14h
.eh_frame:0000000000015FFD                 db  0Bh
.eh_frame:0000000000015FFE                 db    0
.eh_frame:0000000000015FFF                 db    0
.eh_frame:0000000000016000                 db  40h ; @
.eh_frame:0000000000016001                 db  63h ; c
.eh_frame:0000000000016002                 db 0FFh
.eh_frame:0000000000016003                 db 0FFh
.eh_frame:0000000000016004                 db  8Eh
.eh_frame:0000000000016005                 db    0
.eh_frame:0000000000016006                 db    0
.eh_frame:0000000000016007                 db    0
.eh_frame:0000000000016008                 db    0
.eh_frame:0000000000016009                 db  44h ; D
.eh_frame:000000000001600A                 db  0Eh
.eh_frame:000000000001600B                 db  50h ; P
.eh_frame:000000000001600C                 db    2
.eh_frame:000000000001600D                 db  7Fh ; 
.eh_frame:000000000001600E                 db  0Ah
.eh_frame:000000000001600F                 db  0Eh
.eh_frame:0000000000016010                 db    8
.eh_frame:0000000000016011                 db  41h ; A
.eh_frame:0000000000016012                 db  0Bh
.eh_frame:0000000000016013                 db    0
.eh_frame:0000000000016014                 db  18h
.eh_frame:0000000000016015                 db    0
.eh_frame:0000000000016016                 db    0
.eh_frame:0000000000016017                 db    0
.eh_frame:0000000000016018                 db  30h ; 0
.eh_frame:0000000000016019                 db  0Bh
.eh_frame:000000000001601A                 db    0
.eh_frame:000000000001601B                 db    0
.eh_frame:000000000001601C                 db 0B4h
.eh_frame:000000000001601D                 db  63h ; c
.eh_frame:000000000001601E                 db 0FFh
.eh_frame:000000000001601F                 db 0FFh
.eh_frame:0000000000016020                 db  8Ah
.eh_frame:0000000000016021                 db    0
.eh_frame:0000000000016022                 db    0
.eh_frame:0000000000016023                 db    0
.eh_frame:0000000000016024                 db    0
.eh_frame:0000000000016025                 db  44h ; D
.eh_frame:0000000000016026                 db  0Eh
.eh_frame:0000000000016027                 db  50h ; P
.eh_frame:0000000000016028                 db    2
.eh_frame:0000000000016029                 db  7Bh ; {
.eh_frame:000000000001602A                 db  0Ah
.eh_frame:000000000001602B                 db  0Eh
.eh_frame:000000000001602C                 db    8
.eh_frame:000000000001602D                 db  41h ; A
.eh_frame:000000000001602E                 db  0Bh
.eh_frame:000000000001602F                 db    0
.eh_frame:0000000000016030                 db  10h
.eh_frame:0000000000016031                 db    0
.eh_frame:0000000000016032                 db    0
.eh_frame:0000000000016033                 db    0
.eh_frame:0000000000016034                 db  4Ch ; L
.eh_frame:0000000000016035                 db  0Bh
.eh_frame:0000000000016036                 db    0
.eh_frame:0000000000016037                 db    0
.eh_frame:0000000000016038                 db  28h ; (
.eh_frame:0000000000016039                 db  64h ; d
.eh_frame:000000000001603A                 db 0FFh
.eh_frame:000000000001603B                 db 0FFh
.eh_frame:000000000001603C                 db  0Ch
.eh_frame:000000000001603D                 db    0
.eh_frame:000000000001603E                 db    0
.eh_frame:000000000001603F                 db    0
.eh_frame:0000000000016040                 db    0
.eh_frame:0000000000016041                 db    0
.eh_frame:0000000000016042                 db    0
.eh_frame:0000000000016043                 db    0
.eh_frame:0000000000016044                 db  10h
.eh_frame:0000000000016045                 db    0
.eh_frame:0000000000016046                 db    0
.eh_frame:0000000000016047                 db    0
.eh_frame:0000000000016048                 db  60h ; `
.eh_frame:0000000000016049                 db  0Bh
.eh_frame:000000000001604A                 db    0
.eh_frame:000000000001604B                 db    0
.eh_frame:000000000001604C                 db  24h ; $
.eh_frame:000000000001604D                 db  64h ; d
.eh_frame:000000000001604E                 db 0FFh
.eh_frame:000000000001604F                 db 0FFh
.eh_frame:0000000000016050                 db  0Fh
.eh_frame:0000000000016051                 db    0
.eh_frame:0000000000016052                 db    0
.eh_frame:0000000000016053                 db    0
.eh_frame:0000000000016054                 db    0
.eh_frame:0000000000016055                 db    0
.eh_frame:0000000000016056                 db    0
.eh_frame:0000000000016057                 db    0
.eh_frame:0000000000016058                 db  18h
.eh_frame:0000000000016059                 db    0
.eh_frame:000000000001605A                 db    0
.eh_frame:000000000001605B                 db    0
.eh_frame:000000000001605C                 db  74h ; t
.eh_frame:000000000001605D                 db  0Bh
.eh_frame:000000000001605E                 db    0
.eh_frame:000000000001605F                 db    0
.eh_frame:0000000000016060                 db  20h
.eh_frame:0000000000016061                 db  64h ; d
.eh_frame:0000000000016062                 db 0FFh
.eh_frame:0000000000016063                 db 0FFh
.eh_frame:0000000000016064                 db  98h
.eh_frame:0000000000016065                 db    0
.eh_frame:0000000000016066                 db    0
.eh_frame:0000000000016067                 db    0
.eh_frame:0000000000016068                 db    0
.eh_frame:0000000000016069                 db  44h ; D
.eh_frame:000000000001606A                 db  0Eh
.eh_frame:000000000001606B                 db  50h ; P
.eh_frame:000000000001606C                 db    2
.eh_frame:000000000001606D                 db  8Eh
.eh_frame:000000000001606E                 db  0Ah
.eh_frame:000000000001606F                 db  0Eh
.eh_frame:0000000000016070                 db    8
.eh_frame:0000000000016071                 db  41h ; A
.eh_frame:0000000000016072                 db  0Bh
.eh_frame:0000000000016073                 db    0
.eh_frame:0000000000016074                 db  10h
.eh_frame:0000000000016075                 db    0
.eh_frame:0000000000016076                 db    0
.eh_frame:0000000000016077                 db    0
.eh_frame:0000000000016078                 db  90h
.eh_frame:0000000000016079                 db  0Bh
.eh_frame:000000000001607A                 db    0
.eh_frame:000000000001607B                 db    0
.eh_frame:000000000001607C                 db 0A4h
.eh_frame:000000000001607D                 db  64h ; d
.eh_frame:000000000001607E                 db 0FFh
.eh_frame:000000000001607F                 db 0FFh
.eh_frame:0000000000016080                 db  10h
.eh_frame:0000000000016081                 db    0
.eh_frame:0000000000016082                 db    0
.eh_frame:0000000000016083                 db    0
.eh_frame:0000000000016084                 db    0
.eh_frame:0000000000016085                 db    0
.eh_frame:0000000000016086                 db    0
.eh_frame:0000000000016087                 db    0
.eh_frame:0000000000016088                 db  10h
.eh_frame:0000000000016089                 db    0
.eh_frame:000000000001608A                 db    0
.eh_frame:000000000001608B                 db    0
.eh_frame:000000000001608C                 db 0A4h
.eh_frame:000000000001608D                 db  0Bh
.eh_frame:000000000001608E                 db    0
.eh_frame:000000000001608F                 db    0
.eh_frame:0000000000016090                 db 0A0h
.eh_frame:0000000000016091                 db  64h ; d
.eh_frame:0000000000016092                 db 0FFh
.eh_frame:0000000000016093                 db 0FFh
.eh_frame:0000000000016094                 db  11h
.eh_frame:0000000000016095                 db    0
.eh_frame:0000000000016096                 db    0
.eh_frame:0000000000016097                 db    0
.eh_frame:0000000000016098                 db    0
.eh_frame:0000000000016099                 db    0
.eh_frame:000000000001609A                 db    0
.eh_frame:000000000001609B                 db    0
.eh_frame:000000000001609C                 db  10h
.eh_frame:000000000001609D                 db    0
.eh_frame:000000000001609E                 db    0
.eh_frame:000000000001609F                 db    0
.eh_frame:00000000000160A0                 db 0B8h
.eh_frame:00000000000160A1                 db  0Bh
.eh_frame:00000000000160A2                 db    0
.eh_frame:00000000000160A3                 db    0
.eh_frame:00000000000160A4                 db 0ACh
.eh_frame:00000000000160A5                 db  64h ; d
.eh_frame:00000000000160A6                 db 0FFh
.eh_frame:00000000000160A7                 db 0FFh
.eh_frame:00000000000160A8                 db  0Ah
.eh_frame:00000000000160A9                 db    0
.eh_frame:00000000000160AA                 db    0
.eh_frame:00000000000160AB                 db    0
.eh_frame:00000000000160AC                 db    0
.eh_frame:00000000000160AD                 db    0
.eh_frame:00000000000160AE                 db    0
.eh_frame:00000000000160AF                 db    0
.eh_frame:00000000000160B0                 db  18h
.eh_frame:00000000000160B1                 db    0
.eh_frame:00000000000160B2                 db    0
.eh_frame:00000000000160B3                 db    0
.eh_frame:00000000000160B4                 db 0CCh
.eh_frame:00000000000160B5                 db  0Bh
.eh_frame:00000000000160B6                 db    0
.eh_frame:00000000000160B7                 db    0
.eh_frame:00000000000160B8                 db 0A8h
.eh_frame:00000000000160B9                 db  64h ; d
.eh_frame:00000000000160BA                 db 0FFh
.eh_frame:00000000000160BB                 db 0FFh
.eh_frame:00000000000160BC                 db  8Eh
.eh_frame:00000000000160BD                 db    0
.eh_frame:00000000000160BE                 db    0
.eh_frame:00000000000160BF                 db    0
.eh_frame:00000000000160C0                 db    0
.eh_frame:00000000000160C1                 db  44h ; D
.eh_frame:00000000000160C2                 db  0Eh
.eh_frame:00000000000160C3                 db  50h ; P
.eh_frame:00000000000160C4                 db    2
.eh_frame:00000000000160C5                 db  7Fh ; 
.eh_frame:00000000000160C6                 db  0Ah
.eh_frame:00000000000160C7                 db  0Eh
.eh_frame:00000000000160C8                 db    8
.eh_frame:00000000000160C9                 db  41h ; A
.eh_frame:00000000000160CA                 db  0Bh
.eh_frame:00000000000160CB                 db    0
.eh_frame:00000000000160CC                 db  18h
.eh_frame:00000000000160CD                 db    0
.eh_frame:00000000000160CE                 db    0
.eh_frame:00000000000160CF                 db    0
.eh_frame:00000000000160D0                 db 0E8h
.eh_frame:00000000000160D1                 db  0Bh
.eh_frame:00000000000160D2                 db    0
.eh_frame:00000000000160D3                 db    0
.eh_frame:00000000000160D4                 db  1Ch
.eh_frame:00000000000160D5                 db  65h ; e
.eh_frame:00000000000160D6                 db 0FFh
.eh_frame:00000000000160D7                 db 0FFh
.eh_frame:00000000000160D8                 db  91h
.eh_frame:00000000000160D9                 db    0
.eh_frame:00000000000160DA                 db    0
.eh_frame:00000000000160DB                 db    0
.eh_frame:00000000000160DC                 db    0
.eh_frame:00000000000160DD                 db  44h ; D
.eh_frame:00000000000160DE                 db  0Eh
.eh_frame:00000000000160DF                 db  50h ; P
.eh_frame:00000000000160E0                 db    2
.eh_frame:00000000000160E1                 db  82h
.eh_frame:00000000000160E2                 db  0Ah
.eh_frame:00000000000160E3                 db  0Eh
.eh_frame:00000000000160E4                 db    8
.eh_frame:00000000000160E5                 db  41h ; A
.eh_frame:00000000000160E6                 db  0Bh
.eh_frame:00000000000160E7                 db    0
.eh_frame:00000000000160E8                 db  10h
.eh_frame:00000000000160E9                 db    0
.eh_frame:00000000000160EA                 db    0
.eh_frame:00000000000160EB                 db    0
.eh_frame:00000000000160EC                 db    4
.eh_frame:00000000000160ED                 db  0Ch
.eh_frame:00000000000160EE                 db    0
.eh_frame:00000000000160EF                 db    0
.eh_frame:00000000000160F0                 db 0A0h
.eh_frame:00000000000160F1                 db  65h ; e
.eh_frame:00000000000160F2                 db 0FFh
.eh_frame:00000000000160F3                 db 0FFh
.eh_frame:00000000000160F4                 db  0Ch
.eh_frame:00000000000160F5                 db    0
.eh_frame:00000000000160F6                 db    0
.eh_frame:00000000000160F7                 db    0
.eh_frame:00000000000160F8                 db    0
.eh_frame:00000000000160F9                 db    0
.eh_frame:00000000000160FA                 db    0
.eh_frame:00000000000160FB                 db    0
.eh_frame:00000000000160FC                 db  10h
.eh_frame:00000000000160FD                 db    0
.eh_frame:00000000000160FE                 db    0
.eh_frame:00000000000160FF                 db    0
.eh_frame:0000000000016100                 db  18h
.eh_frame:0000000000016101                 db  0Ch
.eh_frame:0000000000016102                 db    0
.eh_frame:0000000000016103                 db    0
.eh_frame:0000000000016104                 db  9Ch
.eh_frame:0000000000016105                 db  65h ; e
.eh_frame:0000000000016106                 db 0FFh
.eh_frame:0000000000016107                 db 0FFh
.eh_frame:0000000000016108                 db  17h
.eh_frame:0000000000016109                 db    0
.eh_frame:000000000001610A                 db    0
.eh_frame:000000000001610B                 db    0
.eh_frame:000000000001610C                 db    0
.eh_frame:000000000001610D                 db    0
.eh_frame:000000000001610E                 db    0
.eh_frame:000000000001610F                 db    0
.eh_frame:0000000000016110                 db  10h
.eh_frame:0000000000016111                 db    0
.eh_frame:0000000000016112                 db    0
.eh_frame:0000000000016113                 db    0
.eh_frame:0000000000016114                 db  2Ch ; ,
.eh_frame:0000000000016115                 db  0Ch
.eh_frame:0000000000016116                 db    0
.eh_frame:0000000000016117                 db    0
.eh_frame:0000000000016118                 db 0A8h
.eh_frame:0000000000016119                 db  65h ; e
.eh_frame:000000000001611A                 db 0FFh
.eh_frame:000000000001611B                 db 0FFh
.eh_frame:000000000001611C                 db  13h
.eh_frame:000000000001611D                 db    0
.eh_frame:000000000001611E                 db    0
.eh_frame:000000000001611F                 db    0
.eh_frame:0000000000016120                 db    0
.eh_frame:0000000000016121                 db    0
.eh_frame:0000000000016122                 db    0
.eh_frame:0000000000016123                 db    0
.eh_frame:0000000000016124                 db  10h
.eh_frame:0000000000016125                 db    0
.eh_frame:0000000000016126                 db    0
.eh_frame:0000000000016127                 db    0
.eh_frame:0000000000016128                 db  40h ; @
.eh_frame:0000000000016129                 db  0Ch
.eh_frame:000000000001612A                 db    0
.eh_frame:000000000001612B                 db    0
.eh_frame:000000000001612C                 db 0B4h
.eh_frame:000000000001612D                 db  65h ; e
.eh_frame:000000000001612E                 db 0FFh
.eh_frame:000000000001612F                 db 0FFh
.eh_frame:0000000000016130                 db  0Ch
.eh_frame:0000000000016131                 db    0
.eh_frame:0000000000016132                 db    0
.eh_frame:0000000000016133                 db    0
.eh_frame:0000000000016134                 db    0
.eh_frame:0000000000016135                 db    0
.eh_frame:0000000000016136                 db    0
.eh_frame:0000000000016137                 db    0
.eh_frame:0000000000016138                 db  10h
.eh_frame:0000000000016139                 db    0
.eh_frame:000000000001613A                 db    0
.eh_frame:000000000001613B                 db    0
.eh_frame:000000000001613C                 db  54h ; T
.eh_frame:000000000001613D                 db  0Ch
.eh_frame:000000000001613E                 db    0
.eh_frame:000000000001613F                 db    0
.eh_frame:0000000000016140                 db 0B0h
.eh_frame:0000000000016141                 db  65h ; e
.eh_frame:0000000000016142                 db 0FFh
.eh_frame:0000000000016143                 db 0FFh
.eh_frame:0000000000016144                 db  14h
.eh_frame:0000000000016145                 db    0
.eh_frame:0000000000016146                 db    0
.eh_frame:0000000000016147                 db    0
.eh_frame:0000000000016148                 db    0
.eh_frame:0000000000016149                 db    0
.eh_frame:000000000001614A                 db    0
.eh_frame:000000000001614B                 db    0
.eh_frame:000000000001614C                 db  10h
.eh_frame:000000000001614D                 db    0
.eh_frame:000000000001614E                 db    0
.eh_frame:000000000001614F                 db    0
.eh_frame:0000000000016150                 db  68h ; h
.eh_frame:0000000000016151                 db  0Ch
.eh_frame:0000000000016152                 db    0
.eh_frame:0000000000016153                 db    0
.eh_frame:0000000000016154                 db 0BCh
.eh_frame:0000000000016155                 db  65h ; e
.eh_frame:0000000000016156                 db 0FFh
.eh_frame:0000000000016157                 db 0FFh
.eh_frame:0000000000016158                 db  13h
.eh_frame:0000000000016159                 db    0
.eh_frame:000000000001615A                 db    0
.eh_frame:000000000001615B                 db    0
.eh_frame:000000000001615C                 db    0
.eh_frame:000000000001615D                 db    0
.eh_frame:000000000001615E                 db    0
.eh_frame:000000000001615F                 db    0
.eh_frame:0000000000016160                 db  14h
.eh_frame:0000000000016161                 db    0
.eh_frame:0000000000016162                 db    0
.eh_frame:0000000000016163                 db    0
.eh_frame:0000000000016164                 db  7Ch ; |
.eh_frame:0000000000016165                 db  0Ch
.eh_frame:0000000000016166                 db    0
.eh_frame:0000000000016167                 db    0
.eh_frame:0000000000016168                 db 0C8h
.eh_frame:0000000000016169                 db  65h ; e
.eh_frame:000000000001616A                 db 0FFh
.eh_frame:000000000001616B                 db 0FFh
.eh_frame:000000000001616C                 db  18h
.eh_frame:000000000001616D                 db    0
.eh_frame:000000000001616E                 db    0
.eh_frame:000000000001616F                 db    0
.eh_frame:0000000000016170                 db    0
.eh_frame:0000000000016171                 db    0
.eh_frame:0000000000016172                 db    0
.eh_frame:0000000000016173                 db    0
.eh_frame:0000000000016174                 db    0
.eh_frame:0000000000016175                 db    0
.eh_frame:0000000000016176                 db    0
.eh_frame:0000000000016177                 db    0
.eh_frame:0000000000016178                 db  2Ch ; ,
.eh_frame:0000000000016179                 db    0
.eh_frame:000000000001617A                 db    0
.eh_frame:000000000001617B                 db    0
.eh_frame:000000000001617C                 db  94h
.eh_frame:000000000001617D                 db  0Ch
.eh_frame:000000000001617E                 db    0
.eh_frame:000000000001617F                 db    0
.eh_frame:0000000000016180                 db 0D0h
.eh_frame:0000000000016181                 db  65h ; e
.eh_frame:0000000000016182                 db 0FFh
.eh_frame:0000000000016183                 db 0FFh
.eh_frame:0000000000016184                 db  89h
.eh_frame:0000000000016185                 db    0
.eh_frame:0000000000016186                 db    0
.eh_frame:0000000000016187                 db    0
.eh_frame:0000000000016188                 db    0
.eh_frame:0000000000016189                 db  41h ; A
.eh_frame:000000000001618A                 db  0Eh
.eh_frame:000000000001618B                 db  10h
.eh_frame:000000000001618C                 db  86h
.eh_frame:000000000001618D                 db    2
.eh_frame:000000000001618E                 db  41h ; A
.eh_frame:000000000001618F                 db  0Eh
.eh_frame:0000000000016190                 db  18h
.eh_frame:0000000000016191                 db  83h
.eh_frame:0000000000016192                 db    3
.eh_frame:0000000000016193                 db  4Ch ; L
.eh_frame:0000000000016194                 db  0Eh
.eh_frame:0000000000016195                 db  40h ; @
.eh_frame:0000000000016196                 db    2
.eh_frame:0000000000016197                 db  73h ; s
.eh_frame:0000000000016198                 db  0Ah
.eh_frame:0000000000016199                 db  0Eh
.eh_frame:000000000001619A                 db  18h
.eh_frame:000000000001619B                 db  41h ; A
.eh_frame:000000000001619C                 db  0Eh
.eh_frame:000000000001619D                 db  10h
.eh_frame:000000000001619E                 db  41h ; A
.eh_frame:000000000001619F                 db  0Eh
.eh_frame:00000000000161A0                 db    8
.eh_frame:00000000000161A1                 db  41h ; A
.eh_frame:00000000000161A2                 db  0Bh
.eh_frame:00000000000161A3                 db    0
.eh_frame:00000000000161A4                 db    0
.eh_frame:00000000000161A5                 db    0
.eh_frame:00000000000161A6                 db    0
.eh_frame:00000000000161A7                 db    0
.eh_frame:00000000000161A8                 db  10h
.eh_frame:00000000000161A9                 db    1
.eh_frame:00000000000161AA                 db    0
.eh_frame:00000000000161AB                 db    0
.eh_frame:00000000000161AC                 db 0C4h
.eh_frame:00000000000161AD                 db  0Ch
.eh_frame:00000000000161AE                 db    0
.eh_frame:00000000000161AF                 db    0
.eh_frame:00000000000161B0                 db  30h ; 0
.eh_frame:00000000000161B1                 db  66h ; f
.eh_frame:00000000000161B2                 db 0FFh
.eh_frame:00000000000161B3                 db 0FFh
.eh_frame:00000000000161B4                 db  17h
.eh_frame:00000000000161B5                 db    4
.eh_frame:00000000000161B6                 db    0
.eh_frame:00000000000161B7                 db    0
.eh_frame:00000000000161B8                 db    0
.eh_frame:00000000000161B9                 db  42h ; B
.eh_frame:00000000000161BA                 db  0Eh
.eh_frame:00000000000161BB                 db  10h
.eh_frame:00000000000161BC                 db  8Fh
.eh_frame:00000000000161BD                 db    2
.eh_frame:00000000000161BE                 db  42h ; B
.eh_frame:00000000000161BF                 db  0Eh
.eh_frame:00000000000161C0                 db  18h
.eh_frame:00000000000161C1                 db  8Eh
.eh_frame:00000000000161C2                 db    3
.eh_frame:00000000000161C3                 db  42h ; B
.eh_frame:00000000000161C4                 db  0Eh
.eh_frame:00000000000161C5                 db  20h
.eh_frame:00000000000161C6                 db  8Dh
.eh_frame:00000000000161C7                 db    4
.eh_frame:00000000000161C8                 db  42h ; B
.eh_frame:00000000000161C9                 db  0Eh
.eh_frame:00000000000161CA                 db  28h ; (
.eh_frame:00000000000161CB                 db  8Ch
.eh_frame:00000000000161CC                 db    5
.eh_frame:00000000000161CD                 db  44h ; D
.eh_frame:00000000000161CE                 db  0Eh
.eh_frame:00000000000161CF                 db  30h ; 0
.eh_frame:00000000000161D0                 db  86h
.eh_frame:00000000000161D1                 db    6
.eh_frame:00000000000161D2                 db  41h ; A
.eh_frame:00000000000161D3                 db  0Eh
.eh_frame:00000000000161D4                 db  38h ; 8
.eh_frame:00000000000161D5                 db  83h
.eh_frame:00000000000161D6                 db    7
.eh_frame:00000000000161D7                 db  4Ah ; J
.eh_frame:00000000000161D8                 db  0Eh
.eh_frame:00000000000161D9                 db  60h ; `
.eh_frame:00000000000161DA                 db    2
.eh_frame:00000000000161DB                 db 0DDh
.eh_frame:00000000000161DC                 db  0Eh
.eh_frame:00000000000161DD                 db  68h ; h
.eh_frame:00000000000161DE                 db  57h ; W
.eh_frame:00000000000161DF                 db  0Eh
.eh_frame:00000000000161E0                 db  70h ; p
.eh_frame:00000000000161E1                 db  42h ; B
.eh_frame:00000000000161E2                 db  0Eh
.eh_frame:00000000000161E3                 db  78h ; x
.eh_frame:00000000000161E4                 db  42h ; B
.eh_frame:00000000000161E5                 db  0Eh
.eh_frame:00000000000161E6                 db  80h
.eh_frame:00000000000161E7                 db    1
.eh_frame:00000000000161E8                 db  42h ; B
.eh_frame:00000000000161E9                 db  0Eh
.eh_frame:00000000000161EA                 db  88h
.eh_frame:00000000000161EB                 db    1
.eh_frame:00000000000161EC                 db  42h ; B
.eh_frame:00000000000161ED                 db  0Eh
.eh_frame:00000000000161EE                 db  90h
.eh_frame:00000000000161EF                 db    1
.eh_frame:00000000000161F0                 db  53h ; S
.eh_frame:00000000000161F1                 db  0Eh
.eh_frame:00000000000161F2                 db  60h ; `
.eh_frame:00000000000161F3                 db  44h ; D
.eh_frame:00000000000161F4                 db  0Ah
.eh_frame:00000000000161F5                 db  0Eh
.eh_frame:00000000000161F6                 db  38h ; 8
.eh_frame:00000000000161F7                 db  41h ; A
.eh_frame:00000000000161F8                 db  0Eh
.eh_frame:00000000000161F9                 db  30h ; 0
.eh_frame:00000000000161FA                 db  41h ; A
.eh_frame:00000000000161FB                 db  0Eh
.eh_frame:00000000000161FC                 db  28h ; (
.eh_frame:00000000000161FD                 db  42h ; B
.eh_frame:00000000000161FE                 db  0Eh
.eh_frame:00000000000161FF                 db  20h
.eh_frame:0000000000016200                 db  42h ; B
.eh_frame:0000000000016201                 db  0Eh
.eh_frame:0000000000016202                 db  18h
.eh_frame:0000000000016203                 db  42h ; B
.eh_frame:0000000000016204                 db  0Eh
.eh_frame:0000000000016205                 db  10h
.eh_frame:0000000000016206                 db  42h ; B
.eh_frame:0000000000016207                 db  0Eh
.eh_frame:0000000000016208                 db    8
.eh_frame:0000000000016209                 db  44h ; D
.eh_frame:000000000001620A                 db  0Bh
.eh_frame:000000000001620B                 db    2
.eh_frame:000000000001620C                 db  78h ; x
.eh_frame:000000000001620D                 db  0Ah
.eh_frame:000000000001620E                 db  0Eh
.eh_frame:000000000001620F                 db  68h ; h
.eh_frame:0000000000016210                 db  48h ; H
.eh_frame:0000000000016211                 db  0Bh
.eh_frame:0000000000016212                 db  5Ah ; Z
.eh_frame:0000000000016213                 db  0Ah
.eh_frame:0000000000016214                 db  0Eh
.eh_frame:0000000000016215                 db  38h ; 8
.eh_frame:0000000000016216                 db  47h ; G
.eh_frame:0000000000016217                 db  0Eh
.eh_frame:0000000000016218                 db  30h ; 0
.eh_frame:0000000000016219                 db  41h ; A
.eh_frame:000000000001621A                 db  0Eh
.eh_frame:000000000001621B                 db  28h ; (
.eh_frame:000000000001621C                 db  42h ; B
.eh_frame:000000000001621D                 db  0Eh
.eh_frame:000000000001621E                 db  20h
.eh_frame:000000000001621F                 db  42h ; B
.eh_frame:0000000000016220                 db  0Eh
.eh_frame:0000000000016221                 db  18h
.eh_frame:0000000000016222                 db  42h ; B
.eh_frame:0000000000016223                 db  0Eh
.eh_frame:0000000000016224                 db  10h
.eh_frame:0000000000016225                 db  42h ; B
.eh_frame:0000000000016226                 db  0Eh
.eh_frame:0000000000016227                 db    8
.eh_frame:0000000000016228                 db  56h ; V
.eh_frame:0000000000016229                 db  0Bh
.eh_frame:000000000001622A                 db  5Eh ; ^
.eh_frame:000000000001622B                 db  0Ah
.eh_frame:000000000001622C                 db  0Eh
.eh_frame:000000000001622D                 db  38h ; 8
.eh_frame:000000000001622E                 db  52h ; R
.eh_frame:000000000001622F                 db  0Eh
.eh_frame:0000000000016230                 db  30h ; 0
.eh_frame:0000000000016231                 db  41h ; A
.eh_frame:0000000000016232                 db  0Eh
.eh_frame:0000000000016233                 db  28h ; (
.eh_frame:0000000000016234                 db  42h ; B
.eh_frame:0000000000016235                 db  0Eh
.eh_frame:0000000000016236                 db  20h
.eh_frame:0000000000016237                 db  42h ; B
.eh_frame:0000000000016238                 db  0Eh
.eh_frame:0000000000016239                 db  18h
.eh_frame:000000000001623A                 db  42h ; B
.eh_frame:000000000001623B                 db  0Eh
.eh_frame:000000000001623C                 db  10h
.eh_frame:000000000001623D                 db  42h ; B
.eh_frame:000000000001623E                 db  0Eh
.eh_frame:000000000001623F                 db    8
.eh_frame:0000000000016240                 db  4Fh ; O
.eh_frame:0000000000016241                 db  0Bh
.eh_frame:0000000000016242                 db  62h ; b
.eh_frame:0000000000016243                 db  0Ah
.eh_frame:0000000000016244                 db  0Eh
.eh_frame:0000000000016245                 db  38h ; 8
.eh_frame:0000000000016246                 db  50h ; P
.eh_frame:0000000000016247                 db  0Eh
.eh_frame:0000000000016248                 db  30h ; 0
.eh_frame:0000000000016249                 db  41h ; A
.eh_frame:000000000001624A                 db  0Eh
.eh_frame:000000000001624B                 db  28h ; (
.eh_frame:000000000001624C                 db  42h ; B
.eh_frame:000000000001624D                 db  0Eh
.eh_frame:000000000001624E                 db  20h
.eh_frame:000000000001624F                 db  42h ; B
.eh_frame:0000000000016250                 db  0Eh
.eh_frame:0000000000016251                 db  18h
.eh_frame:0000000000016252                 db  42h ; B
.eh_frame:0000000000016253                 db  0Eh
.eh_frame:0000000000016254                 db  10h
.eh_frame:0000000000016255                 db  42h ; B
.eh_frame:0000000000016256                 db  0Eh
.eh_frame:0000000000016257                 db    8
.eh_frame:0000000000016258                 db  55h ; U
.eh_frame:0000000000016259                 db  0Bh
.eh_frame:000000000001625A                 db  66h ; f
.eh_frame:000000000001625B                 db  0Eh
.eh_frame:000000000001625C                 db  68h ; h
.eh_frame:000000000001625D                 db  42h ; B
.eh_frame:000000000001625E                 db  0Eh
.eh_frame:000000000001625F                 db  70h ; p
.eh_frame:0000000000016260                 db  5Ch ; \
.eh_frame:0000000000016261                 db  0Eh
.eh_frame:0000000000016262                 db  68h ; h
.eh_frame:0000000000016263                 db  41h ; A
.eh_frame:0000000000016264                 db  0Eh
.eh_frame:0000000000016265                 db  60h ; `
.eh_frame:0000000000016266                 db  44h ; D
.eh_frame:0000000000016267                 db  0Ah
.eh_frame:0000000000016268                 db  0Eh
.eh_frame:0000000000016269                 db  38h ; 8
.eh_frame:000000000001626A                 db  41h ; A
.eh_frame:000000000001626B                 db  0Eh
.eh_frame:000000000001626C                 db  30h ; 0
.eh_frame:000000000001626D                 db  41h ; A
.eh_frame:000000000001626E                 db  0Eh
.eh_frame:000000000001626F                 db  28h ; (
.eh_frame:0000000000016270                 db  42h ; B
.eh_frame:0000000000016271                 db  0Eh
.eh_frame:0000000000016272                 db  20h
.eh_frame:0000000000016273                 db  42h ; B
.eh_frame:0000000000016274                 db  0Eh
.eh_frame:0000000000016275                 db  18h
.eh_frame:0000000000016276                 db  42h ; B
.eh_frame:0000000000016277                 db  0Eh
.eh_frame:0000000000016278                 db  10h
.eh_frame:0000000000016279                 db  42h ; B
.eh_frame:000000000001627A                 db  0Eh
.eh_frame:000000000001627B                 db    8
.eh_frame:000000000001627C                 db  45h ; E
.eh_frame:000000000001627D                 db  0Bh
.eh_frame:000000000001627E                 db  68h ; h
.eh_frame:000000000001627F                 db  0Ah
.eh_frame:0000000000016280                 db  0Eh
.eh_frame:0000000000016281                 db  68h ; h
.eh_frame:0000000000016282                 db  48h ; H
.eh_frame:0000000000016283                 db  0Bh
.eh_frame:0000000000016284                 db  72h ; r
.eh_frame:0000000000016285                 db  0Eh
.eh_frame:0000000000016286                 db  68h ; h
.eh_frame:0000000000016287                 db  45h ; E
.eh_frame:0000000000016288                 db  0Eh
.eh_frame:0000000000016289                 db  70h ; p
.eh_frame:000000000001628A                 db  42h ; B
.eh_frame:000000000001628B                 db  0Eh
.eh_frame:000000000001628C                 db  78h ; x
.eh_frame:000000000001628D                 db  42h ; B
.eh_frame:000000000001628E                 db  0Eh
.eh_frame:000000000001628F                 db  80h
.eh_frame:0000000000016290                 db    1
.eh_frame:0000000000016291                 db  5Eh ; ^
.eh_frame:0000000000016292                 db  0Eh
.eh_frame:0000000000016293                 db  60h ; `
.eh_frame:0000000000016294                 db  44h ; D
.eh_frame:0000000000016295                 db  0Ah
.eh_frame:0000000000016296                 db  0Eh
.eh_frame:0000000000016297                 db  38h ; 8
.eh_frame:0000000000016298                 db  41h ; A
.eh_frame:0000000000016299                 db  0Eh
.eh_frame:000000000001629A                 db  30h ; 0
.eh_frame:000000000001629B                 db  41h ; A
.eh_frame:000000000001629C                 db  0Eh
.eh_frame:000000000001629D                 db  28h ; (
.eh_frame:000000000001629E                 db  42h ; B
.eh_frame:000000000001629F                 db  0Eh
.eh_frame:00000000000162A0                 db  20h
.eh_frame:00000000000162A1                 db  42h ; B
.eh_frame:00000000000162A2                 db  0Eh
.eh_frame:00000000000162A3                 db  18h
.eh_frame:00000000000162A4                 db  42h ; B
.eh_frame:00000000000162A5                 db  0Eh
.eh_frame:00000000000162A6                 db  10h
.eh_frame:00000000000162A7                 db  42h ; B
.eh_frame:00000000000162A8                 db  0Eh
.eh_frame:00000000000162A9                 db    8
.eh_frame:00000000000162AA                 db  41h ; A
.eh_frame:00000000000162AB                 db  0Bh
.eh_frame:00000000000162AC                 db  79h ; y
.eh_frame:00000000000162AD                 db  0Ah
.eh_frame:00000000000162AE                 db  0Eh
.eh_frame:00000000000162AF                 db  68h ; h
.eh_frame:00000000000162B0                 db  42h ; B
.eh_frame:00000000000162B1                 db  0Eh
.eh_frame:00000000000162B2                 db  70h ; p
.eh_frame:00000000000162B3                 db  42h ; B
.eh_frame:00000000000162B4                 db  0Eh
.eh_frame:00000000000162B5                 db  78h ; x
.eh_frame:00000000000162B6                 db  42h ; B
.eh_frame:00000000000162B7                 db  0Eh
.eh_frame:00000000000162B8                 db  80h
.eh_frame:00000000000162B9                 db    1
.eh_frame:00000000000162BA                 db  51h ; Q
.eh_frame:00000000000162BB                 db  0Bh
.eh_frame:00000000000162BC                 db  10h
.eh_frame:00000000000162BD                 db    0
.eh_frame:00000000000162BE                 db    0
.eh_frame:00000000000162BF                 db    0
.eh_frame:00000000000162C0                 db 0D8h
.eh_frame:00000000000162C1                 db  0Dh
.eh_frame:00000000000162C2                 db    0
.eh_frame:00000000000162C3                 db    0
.eh_frame:00000000000162C4                 db  3Ch ; <
.eh_frame:00000000000162C5                 db  69h ; i
.eh_frame:00000000000162C6                 db 0FFh
.eh_frame:00000000000162C7                 db 0FFh
.eh_frame:00000000000162C8                 db  20h
.eh_frame:00000000000162C9                 db    0
.eh_frame:00000000000162CA                 db    0
.eh_frame:00000000000162CB                 db    0
.eh_frame:00000000000162CC                 db    0
.eh_frame:00000000000162CD                 db    0
.eh_frame:00000000000162CE                 db    0
.eh_frame:00000000000162CF                 db    0
.eh_frame:00000000000162D0                 db  18h
.eh_frame:00000000000162D1                 db    0
.eh_frame:00000000000162D2                 db    0
.eh_frame:00000000000162D3                 db    0
.eh_frame:00000000000162D4                 db 0ECh
.eh_frame:00000000000162D5                 db  0Dh
.eh_frame:00000000000162D6                 db    0
.eh_frame:00000000000162D7                 db    0
.eh_frame:00000000000162D8                 db  48h ; H
.eh_frame:00000000000162D9                 db  69h ; i
.eh_frame:00000000000162DA                 db 0FFh
.eh_frame:00000000000162DB                 db 0FFh
.eh_frame:00000000000162DC                 db  78h ; x
.eh_frame:00000000000162DD                 db    0
.eh_frame:00000000000162DE                 db    0
.eh_frame:00000000000162DF                 db    0
.eh_frame:00000000000162E0                 db    0
.eh_frame:00000000000162E1                 db  44h ; D
.eh_frame:00000000000162E2                 db  0Eh
.eh_frame:00000000000162E3                 db  70h ; p
.eh_frame:00000000000162E4                 db    2
.eh_frame:00000000000162E5                 db  60h ; `
.eh_frame:00000000000162E6                 db  0Ah
.eh_frame:00000000000162E7                 db  0Eh
.eh_frame:00000000000162E8                 db    8
.eh_frame:00000000000162E9                 db  41h ; A
.eh_frame:00000000000162EA                 db  0Bh
.eh_frame:00000000000162EB                 db    0
.eh_frame:00000000000162EC                 db  28h ; (
.eh_frame:00000000000162ED                 db    0
.eh_frame:00000000000162EE                 db    0
.eh_frame:00000000000162EF                 db    0
.eh_frame:00000000000162F0                 db    8
.eh_frame:00000000000162F1                 db  0Eh
.eh_frame:00000000000162F2                 db    0
.eh_frame:00000000000162F3                 db    0
.eh_frame:00000000000162F4                 db 0ACh
.eh_frame:00000000000162F5                 db  69h ; i
.eh_frame:00000000000162F6                 db 0FFh
.eh_frame:00000000000162F7                 db 0FFh
.eh_frame:00000000000162F8                 db 0D5h
.eh_frame:00000000000162F9                 db    0
.eh_frame:00000000000162FA                 db    0
.eh_frame:00000000000162FB                 db    0
.eh_frame:00000000000162FC                 db    0
.eh_frame:00000000000162FD                 db  41h ; A
.eh_frame:00000000000162FE                 db  0Eh
.eh_frame:00000000000162FF                 db  10h
.eh_frame:0000000000016300                 db  86h
.eh_frame:0000000000016301                 db    2
.eh_frame:0000000000016302                 db  41h ; A
.eh_frame:0000000000016303                 db  0Eh
.eh_frame:0000000000016304                 db  18h
.eh_frame:0000000000016305                 db  83h
.eh_frame:0000000000016306                 db    3
.eh_frame:0000000000016307                 db  50h ; P
.eh_frame:0000000000016308                 db  0Eh
.eh_frame:0000000000016309                 db 0D0h
.eh_frame:000000000001630A                 db    1
.eh_frame:000000000001630B                 db    2
.eh_frame:000000000001630C                 db 0ABh
.eh_frame:000000000001630D                 db  0Ah
.eh_frame:000000000001630E                 db  0Eh
.eh_frame:000000000001630F                 db  18h
.eh_frame:0000000000016310                 db  41h ; A
.eh_frame:0000000000016311                 db  0Eh
.eh_frame:0000000000016312                 db  10h
.eh_frame:0000000000016313                 db  41h ; A
.eh_frame:0000000000016314                 db  0Eh
.eh_frame:0000000000016315                 db    8
.eh_frame:0000000000016316                 db  41h ; A
.eh_frame:0000000000016317                 db  0Bh
.eh_frame:0000000000016318                 db  1Ch
.eh_frame:0000000000016319                 db    0
.eh_frame:000000000001631A                 db    0
.eh_frame:000000000001631B                 db    0
.eh_frame:000000000001631C                 db  34h ; 4
.eh_frame:000000000001631D                 db  0Eh
.eh_frame:000000000001631E                 db    0
.eh_frame:000000000001631F                 db    0
.eh_frame:0000000000016320                 db  60h ; `
.eh_frame:0000000000016321                 db  6Ah ; j
.eh_frame:0000000000016322                 db 0FFh
.eh_frame:0000000000016323                 db 0FFh
.eh_frame:0000000000016324                 db  80h
.eh_frame:0000000000016325                 db    0
.eh_frame:0000000000016326                 db    0
.eh_frame:0000000000016327                 db    0
.eh_frame:0000000000016328                 db    0
.eh_frame:0000000000016329                 db  41h ; A
.eh_frame:000000000001632A                 db  0Eh
.eh_frame:000000000001632B                 db  10h
.eh_frame:000000000001632C                 db  83h
.eh_frame:000000000001632D                 db    2
.eh_frame:000000000001632E                 db    2
.eh_frame:000000000001632F                 db  7Ah ; z
.eh_frame:0000000000016330                 db  0Eh
.eh_frame:0000000000016331                 db    8
.eh_frame:0000000000016332                 db    0
.eh_frame:0000000000016333                 db    0
.eh_frame:0000000000016334                 db    0
.eh_frame:0000000000016335                 db    0
.eh_frame:0000000000016336                 db    0
.eh_frame:0000000000016337                 db    0
.eh_frame:0000000000016338                 db  18h
.eh_frame:0000000000016339                 db    0
.eh_frame:000000000001633A                 db    0
.eh_frame:000000000001633B                 db    0
.eh_frame:000000000001633C                 db  54h ; T
.eh_frame:000000000001633D                 db  0Eh
.eh_frame:000000000001633E                 db    0
.eh_frame:000000000001633F                 db    0
.eh_frame:0000000000016340                 db 0C0h
.eh_frame:0000000000016341                 db  6Ah ; j
.eh_frame:0000000000016342                 db 0FFh
.eh_frame:0000000000016343                 db 0FFh
.eh_frame:0000000000016344                 db  1Ah
.eh_frame:0000000000016345                 db    0
.eh_frame:0000000000016346                 db    0
.eh_frame:0000000000016347                 db    0
.eh_frame:0000000000016348                 db    0
.eh_frame:0000000000016349                 db  41h ; A
.eh_frame:000000000001634A                 db  0Eh
.eh_frame:000000000001634B                 db  10h
.eh_frame:000000000001634C                 db  83h
.eh_frame:000000000001634D                 db    2
.eh_frame:000000000001634E                 db  53h ; S
.eh_frame:000000000001634F                 db  0Ah
.eh_frame:0000000000016350                 db  0Eh
.eh_frame:0000000000016351                 db    8
.eh_frame:0000000000016352                 db  41h ; A
.eh_frame:0000000000016353                 db  0Bh
.eh_frame:0000000000016354                 db  10h
.eh_frame:0000000000016355                 db    0
.eh_frame:0000000000016356                 db    0
.eh_frame:0000000000016357                 db    0
.eh_frame:0000000000016358                 db  70h ; p
.eh_frame:0000000000016359                 db  0Eh
.eh_frame:000000000001635A                 db    0
.eh_frame:000000000001635B                 db    0
.eh_frame:000000000001635C                 db 0C4h
.eh_frame:000000000001635D                 db  6Ah ; j
.eh_frame:000000000001635E                 db 0FFh
.eh_frame:000000000001635F                 db 0FFh
.eh_frame:0000000000016360                 db  24h ; $
.eh_frame:0000000000016361                 db    0
.eh_frame:0000000000016362                 db    0
.eh_frame:0000000000016363                 db    0
.eh_frame:0000000000016364                 db    0
.eh_frame:0000000000016365                 db  5Fh ; _
.eh_frame:0000000000016366                 db  0Eh
.eh_frame:0000000000016367                 db  10h
.eh_frame:0000000000016368                 db  10h
.eh_frame:0000000000016369                 db    0
.eh_frame:000000000001636A                 db    0
.eh_frame:000000000001636B                 db    0
.eh_frame:000000000001636C                 db  84h
.eh_frame:000000000001636D                 db  0Eh
.eh_frame:000000000001636E                 db    0
.eh_frame:000000000001636F                 db    0
.eh_frame:0000000000016370                 db 0E0h
.eh_frame:0000000000016371                 db  6Ah ; j
.eh_frame:0000000000016372                 db 0FFh
.eh_frame:0000000000016373                 db 0FFh
.eh_frame:0000000000016374                 db    2
.eh_frame:0000000000016375                 db    0
.eh_frame:0000000000016376                 db    0
.eh_frame:0000000000016377                 db    0
.eh_frame:0000000000016378                 db    0
.eh_frame:0000000000016379                 db    0
.eh_frame:000000000001637A                 db    0
.eh_frame:000000000001637B                 db    0
.eh_frame:000000000001637C                 db  20h
.eh_frame:000000000001637D                 db    0
.eh_frame:000000000001637E                 db    0
.eh_frame:000000000001637F                 db    0
.eh_frame:0000000000016380                 db  98h
.eh_frame:0000000000016381                 db  0Eh
.eh_frame:0000000000016382                 db    0
.eh_frame:0000000000016383                 db    0
.eh_frame:0000000000016384                 db 0DCh
.eh_frame:0000000000016385                 db  6Ah ; j
.eh_frame:0000000000016386                 db 0FFh
.eh_frame:0000000000016387                 db 0FFh
.eh_frame:0000000000016388                 db  36h ; 6
.eh_frame:0000000000016389                 db    0
.eh_frame:000000000001638A                 db    0
.eh_frame:000000000001638B                 db    0
.eh_frame:000000000001638C                 db    0
.eh_frame:000000000001638D                 db  44h ; D
.eh_frame:000000000001638E                 db  0Eh
.eh_frame:000000000001638F                 db  10h
.eh_frame:0000000000016390                 db  83h
.eh_frame:0000000000016391                 db    2
.eh_frame:0000000000016392                 db  5Dh ; ]
.eh_frame:0000000000016393                 db  0Ah
.eh_frame:0000000000016394                 db  0Eh
.eh_frame:0000000000016395                 db    8
.eh_frame:0000000000016396                 db  47h ; G
.eh_frame:0000000000016397                 db  0Bh
.eh_frame:0000000000016398                 db  48h ; H
.eh_frame:0000000000016399                 db  0Ah
.eh_frame:000000000001639A                 db  0Eh
.eh_frame:000000000001639B                 db    8
.eh_frame:000000000001639C                 db  41h ; A
.eh_frame:000000000001639D                 db  0Bh
.eh_frame:000000000001639E                 db    0
.eh_frame:000000000001639F                 db    0
.eh_frame:00000000000163A0                 db  10h
.eh_frame:00000000000163A1                 db    0
.eh_frame:00000000000163A2                 db    0
.eh_frame:00000000000163A3                 db    0
.eh_frame:00000000000163A4                 db 0BCh
.eh_frame:00000000000163A5                 db  0Eh
.eh_frame:00000000000163A6                 db    0
.eh_frame:00000000000163A7                 db    0
.eh_frame:00000000000163A8                 db 0F8h
.eh_frame:00000000000163A9                 db  6Ah ; j
.eh_frame:00000000000163AA                 db 0FFh
.eh_frame:00000000000163AB                 db 0FFh
.eh_frame:00000000000163AC                 db  24h ; $
.eh_frame:00000000000163AD                 db    0
.eh_frame:00000000000163AE                 db    0
.eh_frame:00000000000163AF                 db    0
.eh_frame:00000000000163B0                 db    0
.eh_frame:00000000000163B1                 db  5Fh ; _
.eh_frame:00000000000163B2                 db  0Eh
.eh_frame:00000000000163B3                 db  10h
.eh_frame:00000000000163B4                 db  14h
.eh_frame:00000000000163B5                 db    0
.eh_frame:00000000000163B6                 db    0
.eh_frame:00000000000163B7                 db    0
.eh_frame:00000000000163B8                 db 0D0h
.eh_frame:00000000000163B9                 db  0Eh
.eh_frame:00000000000163BA                 db    0
.eh_frame:00000000000163BB                 db    0
.eh_frame:00000000000163BC                 db  14h
.eh_frame:00000000000163BD                 db  6Bh ; k
.eh_frame:00000000000163BE                 db 0FFh
.eh_frame:00000000000163BF                 db 0FFh
.eh_frame:00000000000163C0                 db  82h
.eh_frame:00000000000163C1                 db    0
.eh_frame:00000000000163C2                 db    0
.eh_frame:00000000000163C3                 db    0
.eh_frame:00000000000163C4                 db    0
.eh_frame:00000000000163C5                 db    2
.eh_frame:00000000000163C6                 db  5Fh ; _
.eh_frame:00000000000163C7                 db  0Eh
.eh_frame:00000000000163C8                 db  10h
.eh_frame:00000000000163C9                 db  49h ; I
.eh_frame:00000000000163CA                 db  0Eh
.eh_frame:00000000000163CB                 db    8
.eh_frame:00000000000163CC                 db  14h
.eh_frame:00000000000163CD                 db    0
.eh_frame:00000000000163CE                 db    0
.eh_frame:00000000000163CF                 db    0
.eh_frame:00000000000163D0                 db 0E8h
.eh_frame:00000000000163D1                 db  0Eh
.eh_frame:00000000000163D2                 db    0
.eh_frame:00000000000163D3                 db    0
.eh_frame:00000000000163D4                 db  8Ch
.eh_frame:00000000000163D5                 db  6Bh ; k
.eh_frame:00000000000163D6                 db 0FFh
.eh_frame:00000000000163D7                 db 0FFh
.eh_frame:00000000000163D8                 db  4Ah ; J
.eh_frame:00000000000163D9                 db    0
.eh_frame:00000000000163DA                 db    0
.eh_frame:00000000000163DB                 db    0
.eh_frame:00000000000163DC                 db    0
.eh_frame:00000000000163DD                 db    2
.eh_frame:00000000000163DE                 db  45h ; E
.eh_frame:00000000000163DF                 db  0Eh
.eh_frame:00000000000163E0                 db  10h
.eh_frame:00000000000163E1                 db    0
.eh_frame:00000000000163E2                 db    0
.eh_frame:00000000000163E3                 db    0
.eh_frame:00000000000163E4                 db  18h
.eh_frame:00000000000163E5                 db    0
.eh_frame:00000000000163E6                 db    0
.eh_frame:00000000000163E7                 db    0
.eh_frame:00000000000163E8                 db    0
.eh_frame:00000000000163E9                 db  0Fh
.eh_frame:00000000000163EA                 db    0
.eh_frame:00000000000163EB                 db    0
.eh_frame:00000000000163EC                 db 0C4h
.eh_frame:00000000000163ED                 db  6Bh ; k
.eh_frame:00000000000163EE                 db 0FFh
.eh_frame:00000000000163EF                 db 0FFh
.eh_frame:00000000000163F0                 db  17h
.eh_frame:00000000000163F1                 db    0
.eh_frame:00000000000163F2                 db    0
.eh_frame:00000000000163F3                 db    0
.eh_frame:00000000000163F4                 db    0
.eh_frame:00000000000163F5                 db  41h ; A
.eh_frame:00000000000163F6                 db  0Eh
.eh_frame:00000000000163F7                 db  10h
.eh_frame:00000000000163F8                 db  83h
.eh_frame:00000000000163F9                 db    2
.eh_frame:00000000000163FA                 db  51h ; Q
.eh_frame:00000000000163FB                 db  0Eh
.eh_frame:00000000000163FC                 db    8
.eh_frame:00000000000163FD                 db    0
.eh_frame:00000000000163FE                 db    0
.eh_frame:00000000000163FF                 db    0
.eh_frame:0000000000016400                 db  18h
.eh_frame:0000000000016401                 db    0
.eh_frame:0000000000016402                 db    0
.eh_frame:0000000000016403                 db    0
.eh_frame:0000000000016404                 db  1Ch
.eh_frame:0000000000016405                 db  0Fh
.eh_frame:0000000000016406                 db    0
.eh_frame:0000000000016407                 db    0
.eh_frame:0000000000016408                 db 0C8h
.eh_frame:0000000000016409                 db  6Bh ; k
.eh_frame:000000000001640A                 db 0FFh
.eh_frame:000000000001640B                 db 0FFh
.eh_frame:000000000001640C                 db  2Eh ; .
.eh_frame:000000000001640D                 db    0
.eh_frame:000000000001640E                 db    0
.eh_frame:000000000001640F                 db    0
.eh_frame:0000000000016410                 db    0
.eh_frame:0000000000016411                 db  47h ; G
.eh_frame:0000000000016412                 db  0Eh
.eh_frame:0000000000016413                 db  10h
.eh_frame:0000000000016414                 db  61h ; a
.eh_frame:0000000000016415                 db  0Ah
.eh_frame:0000000000016416                 db  0Eh
.eh_frame:0000000000016417                 db    8
.eh_frame:0000000000016418                 db  41h ; A
.eh_frame:0000000000016419                 db  0Bh
.eh_frame:000000000001641A                 db    0
.eh_frame:000000000001641B                 db    0
.eh_frame:000000000001641C                 db  24h ; $
.eh_frame:000000000001641D                 db    0
.eh_frame:000000000001641E                 db    0
.eh_frame:000000000001641F                 db    0
.eh_frame:0000000000016420                 db  38h ; 8
.eh_frame:0000000000016421                 db  0Fh
.eh_frame:0000000000016422                 db    0
.eh_frame:0000000000016423                 db    0
.eh_frame:0000000000016424                 db 0DCh
.eh_frame:0000000000016425                 db  6Bh ; k
.eh_frame:0000000000016426                 db 0FFh
.eh_frame:0000000000016427                 db 0FFh
.eh_frame:0000000000016428                 db  28h ; (
.eh_frame:0000000000016429                 db    0
.eh_frame:000000000001642A                 db    0
.eh_frame:000000000001642B                 db    0
.eh_frame:000000000001642C                 db    0
.eh_frame:000000000001642D                 db  41h ; A
.eh_frame:000000000001642E                 db  0Eh
.eh_frame:000000000001642F                 db  10h
.eh_frame:0000000000016430                 db  86h
.eh_frame:0000000000016431                 db    2
.eh_frame:0000000000016432                 db  41h ; A
.eh_frame:0000000000016433                 db  0Eh
.eh_frame:0000000000016434                 db  18h
.eh_frame:0000000000016435                 db  83h
.eh_frame:0000000000016436                 db    3
.eh_frame:0000000000016437                 db  4Dh ; M
.eh_frame:0000000000016438                 db  0Eh
.eh_frame:0000000000016439                 db  20h
.eh_frame:000000000001643A                 db  49h ; I
.eh_frame:000000000001643B                 db  0Eh
.eh_frame:000000000001643C                 db  18h
.eh_frame:000000000001643D                 db  47h ; G
.eh_frame:000000000001643E                 db  0Eh
.eh_frame:000000000001643F                 db  10h
.eh_frame:0000000000016440                 db  41h ; A
.eh_frame:0000000000016441                 db  0Eh
.eh_frame:0000000000016442                 db    8
.eh_frame:0000000000016443                 db    0
.eh_frame:0000000000016444                 db  18h
.eh_frame:0000000000016445                 db    0
.eh_frame:0000000000016446                 db    0
.eh_frame:0000000000016447                 db    0
.eh_frame:0000000000016448                 db  60h ; `
.eh_frame:0000000000016449                 db  0Fh
.eh_frame:000000000001644A                 db    0
.eh_frame:000000000001644B                 db    0
.eh_frame:000000000001644C                 db 0E4h
.eh_frame:000000000001644D                 db  6Bh ; k
.eh_frame:000000000001644E                 db 0FFh
.eh_frame:000000000001644F                 db 0FFh
.eh_frame:0000000000016450                 db  13h
.eh_frame:0000000000016451                 db    0
.eh_frame:0000000000016452                 db    0
.eh_frame:0000000000016453                 db    0
.eh_frame:0000000000016454                 db    0
.eh_frame:0000000000016455                 db  41h ; A
.eh_frame:0000000000016456                 db  0Eh
.eh_frame:0000000000016457                 db  10h
.eh_frame:0000000000016458                 db  83h
.eh_frame:0000000000016459                 db    2
.eh_frame:000000000001645A                 db  50h ; P
.eh_frame:000000000001645B                 db  0Eh
.eh_frame:000000000001645C                 db    8
.eh_frame:000000000001645D                 db    0
.eh_frame:000000000001645E                 db    0
.eh_frame:000000000001645F                 db    0
.eh_frame:0000000000016460                 db  14h
.eh_frame:0000000000016461                 db    0
.eh_frame:0000000000016462                 db    0
.eh_frame:0000000000016463                 db    0
.eh_frame:0000000000016464                 db  7Ch ; |
.eh_frame:0000000000016465                 db  0Fh
.eh_frame:0000000000016466                 db    0
.eh_frame:0000000000016467                 db    0
.eh_frame:0000000000016468                 db 0E8h
.eh_frame:0000000000016469                 db  6Bh ; k
.eh_frame:000000000001646A                 db 0FFh
.eh_frame:000000000001646B                 db 0FFh
.eh_frame:000000000001646C                 db  35h ; 5
.eh_frame:000000000001646D                 db    0
.eh_frame:000000000001646E                 db    0
.eh_frame:000000000001646F                 db    0
.eh_frame:0000000000016470                 db    0
.eh_frame:0000000000016471                 db  4Bh ; K
.eh_frame:0000000000016472                 db  0Eh
.eh_frame:0000000000016473                 db  10h
.eh_frame:0000000000016474                 db    0
.eh_frame:0000000000016475                 db    0
.eh_frame:0000000000016476                 db    0
.eh_frame:0000000000016477                 db    0
.eh_frame:0000000000016478                 db  34h ; 4
.eh_frame:0000000000016479                 db    0
.eh_frame:000000000001647A                 db    0
.eh_frame:000000000001647B                 db    0
.eh_frame:000000000001647C                 db  94h
.eh_frame:000000000001647D                 db  0Fh
.eh_frame:000000000001647E                 db    0
.eh_frame:000000000001647F                 db    0
.eh_frame:0000000000016480                 db  10h
.eh_frame:0000000000016481                 db  6Ch ; l
.eh_frame:0000000000016482                 db 0FFh
.eh_frame:0000000000016483                 db 0FFh
.eh_frame:0000000000016484                 db  7Bh ; {
.eh_frame:0000000000016485                 db    0
.eh_frame:0000000000016486                 db    0
.eh_frame:0000000000016487                 db    0
.eh_frame:0000000000016488                 db    0
.eh_frame:0000000000016489                 db  42h ; B
.eh_frame:000000000001648A                 db  0Eh
.eh_frame:000000000001648B                 db  10h
.eh_frame:000000000001648C                 db  8Ch
.eh_frame:000000000001648D                 db    2
.eh_frame:000000000001648E                 db  41h ; A
.eh_frame:000000000001648F                 db  0Eh
.eh_frame:0000000000016490                 db  18h
.eh_frame:0000000000016491                 db  86h
.eh_frame:0000000000016492                 db    3
.eh_frame:0000000000016493                 db  41h ; A
.eh_frame:0000000000016494                 db  0Eh
.eh_frame:0000000000016495                 db  20h
.eh_frame:0000000000016496                 db  83h
.eh_frame:0000000000016497                 db    4
.eh_frame:0000000000016498                 db  7Dh ; }
.eh_frame:0000000000016499                 db  0Ah
.eh_frame:000000000001649A                 db  0Eh
.eh_frame:000000000001649B                 db  18h
.eh_frame:000000000001649C                 db  41h ; A
.eh_frame:000000000001649D                 db  0Eh
.eh_frame:000000000001649E                 db  10h
.eh_frame:000000000001649F                 db  42h ; B
.eh_frame:00000000000164A0                 db  0Eh
.eh_frame:00000000000164A1                 db    8
.eh_frame:00000000000164A2                 db  44h ; D
.eh_frame:00000000000164A3                 db  0Bh
.eh_frame:00000000000164A4                 db  60h ; `
.eh_frame:00000000000164A5                 db  0Ah
.eh_frame:00000000000164A6                 db  0Eh
.eh_frame:00000000000164A7                 db  18h
.eh_frame:00000000000164A8                 db  41h ; A
.eh_frame:00000000000164A9                 db  0Eh
.eh_frame:00000000000164AA                 db  10h
.eh_frame:00000000000164AB                 db  42h ; B
.eh_frame:00000000000164AC                 db  0Eh
.eh_frame:00000000000164AD                 db    8
.eh_frame:00000000000164AE                 db  45h ; E
.eh_frame:00000000000164AF                 db  0Bh
.eh_frame:00000000000164B0                 db  1Ch
.eh_frame:00000000000164B1                 db    0
.eh_frame:00000000000164B2                 db    0
.eh_frame:00000000000164B3                 db    0
.eh_frame:00000000000164B4                 db 0CCh
.eh_frame:00000000000164B5                 db  0Fh
.eh_frame:00000000000164B6                 db    0
.eh_frame:00000000000164B7                 db    0
.eh_frame:00000000000164B8                 db  58h ; X
.eh_frame:00000000000164B9                 db  6Ch ; l
.eh_frame:00000000000164BA                 db 0FFh
.eh_frame:00000000000164BB                 db 0FFh
.eh_frame:00000000000164BC                 db  40h ; @
.eh_frame:00000000000164BD                 db    0
.eh_frame:00000000000164BE                 db    0
.eh_frame:00000000000164BF                 db    0
.eh_frame:00000000000164C0                 db    0
.eh_frame:00000000000164C1                 db  44h ; D
.eh_frame:00000000000164C2                 db  0Eh
.eh_frame:00000000000164C3                 db  10h
.eh_frame:00000000000164C4                 db  83h
.eh_frame:00000000000164C5                 db    2
.eh_frame:00000000000164C6                 db  5Ah ; Z
.eh_frame:00000000000164C7                 db  0Ah
.eh_frame:00000000000164C8                 db  0Eh
.eh_frame:00000000000164C9                 db    8
.eh_frame:00000000000164CA                 db  4Ah ; J
.eh_frame:00000000000164CB                 db  0Bh
.eh_frame:00000000000164CC                 db  53h ; S
.eh_frame:00000000000164CD                 db  0Eh
.eh_frame:00000000000164CE                 db    8
.eh_frame:00000000000164CF                 db    0
.eh_frame:00000000000164D0                 db  2Ch ; ,
.eh_frame:00000000000164D1                 db    0
.eh_frame:00000000000164D2                 db    0
.eh_frame:00000000000164D3                 db    0
.eh_frame:00000000000164D4                 db 0ECh
.eh_frame:00000000000164D5                 db  0Fh
.eh_frame:00000000000164D6                 db    0
.eh_frame:00000000000164D7                 db    0
.eh_frame:00000000000164D8                 db  78h ; x
.eh_frame:00000000000164D9                 db  6Ch ; l
.eh_frame:00000000000164DA                 db 0FFh
.eh_frame:00000000000164DB                 db 0FFh
.eh_frame:00000000000164DC                 db  57h ; W
.eh_frame:00000000000164DD                 db    0
.eh_frame:00000000000164DE                 db    0
.eh_frame:00000000000164DF                 db    0
.eh_frame:00000000000164E0                 db    0
.eh_frame:00000000000164E1                 db  63h ; c
.eh_frame:00000000000164E2                 db  0Eh
.eh_frame:00000000000164E3                 db  10h
.eh_frame:00000000000164E4                 db  8Ch
.eh_frame:00000000000164E5                 db    2
.eh_frame:00000000000164E6                 db  41h ; A
.eh_frame:00000000000164E7                 db  0Eh
.eh_frame:00000000000164E8                 db  18h
.eh_frame:00000000000164E9                 db  86h
.eh_frame:00000000000164EA                 db    3
.eh_frame:00000000000164EB                 db  44h ; D
.eh_frame:00000000000164EC                 db  0Eh
.eh_frame:00000000000164ED                 db  20h
.eh_frame:00000000000164EE                 db  83h
.eh_frame:00000000000164EF                 db    4
.eh_frame:00000000000164F0                 db  6Bh ; k
.eh_frame:00000000000164F1                 db  0Eh
.eh_frame:00000000000164F2                 db  18h
.eh_frame:00000000000164F3                 db  41h ; A
.eh_frame:00000000000164F4                 db  0Eh
.eh_frame:00000000000164F5                 db  10h
.eh_frame:00000000000164F6                 db  42h ; B
.eh_frame:00000000000164F7                 db  0Eh
.eh_frame:00000000000164F8                 db    8
.eh_frame:00000000000164F9                 db    0
.eh_frame:00000000000164FA                 db    0
.eh_frame:00000000000164FB                 db    0
.eh_frame:00000000000164FC                 db    0
.eh_frame:00000000000164FD                 db    0
.eh_frame:00000000000164FE                 db    0
.eh_frame:00000000000164FF                 db    0
.eh_frame:0000000000016500                 db  3Ch ; <
.eh_frame:0000000000016501                 db    0
.eh_frame:0000000000016502                 db    0
.eh_frame:0000000000016503                 db    0
.eh_frame:0000000000016504                 db  1Ch
.eh_frame:0000000000016505                 db  10h
.eh_frame:0000000000016506                 db    0
.eh_frame:0000000000016507                 db    0
.eh_frame:0000000000016508                 db 0A8h
.eh_frame:0000000000016509                 db  6Ch ; l
.eh_frame:000000000001650A                 db 0FFh
.eh_frame:000000000001650B                 db 0FFh
.eh_frame:000000000001650C                 db  83h
.eh_frame:000000000001650D                 db    0
.eh_frame:000000000001650E                 db    0
.eh_frame:000000000001650F                 db    0
.eh_frame:0000000000016510                 db    0
.eh_frame:0000000000016511                 db  42h ; B
.eh_frame:0000000000016512                 db  0Eh
.eh_frame:0000000000016513                 db  10h
.eh_frame:0000000000016514                 db  8Dh
.eh_frame:0000000000016515                 db    2
.eh_frame:0000000000016516                 db  42h ; B
.eh_frame:0000000000016517                 db  0Eh
.eh_frame:0000000000016518                 db  18h
.eh_frame:0000000000016519                 db  8Ch
.eh_frame:000000000001651A                 db    3
.eh_frame:000000000001651B                 db  44h ; D
.eh_frame:000000000001651C                 db  0Eh
.eh_frame:000000000001651D                 db  20h
.eh_frame:000000000001651E                 db  86h
.eh_frame:000000000001651F                 db    4
.eh_frame:0000000000016520                 db  41h ; A
.eh_frame:0000000000016521                 db  0Eh
.eh_frame:0000000000016522                 db  28h ; (
.eh_frame:0000000000016523                 db  83h
.eh_frame:0000000000016524                 db    5
.eh_frame:0000000000016525                 db  4Ah ; J
.eh_frame:0000000000016526                 db  0Eh
.eh_frame:0000000000016527                 db  40h ; @
.eh_frame:0000000000016528                 db    2
.eh_frame:0000000000016529                 db  64h ; d
.eh_frame:000000000001652A                 db  0Ah
.eh_frame:000000000001652B                 db  0Eh
.eh_frame:000000000001652C                 db  28h ; (
.eh_frame:000000000001652D                 db  41h ; A
.eh_frame:000000000001652E                 db  0Eh
.eh_frame:000000000001652F                 db  20h
.eh_frame:0000000000016530                 db  41h ; A
.eh_frame:0000000000016531                 db  0Eh
.eh_frame:0000000000016532                 db  18h
.eh_frame:0000000000016533                 db  42h ; B
.eh_frame:0000000000016534                 db  0Eh
.eh_frame:0000000000016535                 db  10h
.eh_frame:0000000000016536                 db  42h ; B
.eh_frame:0000000000016537                 db  0Eh
.eh_frame:0000000000016538                 db    8
.eh_frame:0000000000016539                 db  41h ; A
.eh_frame:000000000001653A                 db  0Bh
.eh_frame:000000000001653B                 db    0
.eh_frame:000000000001653C                 db    0
.eh_frame:000000000001653D                 db    0
.eh_frame:000000000001653E                 db    0
.eh_frame:000000000001653F                 db    0
.eh_frame:0000000000016540                 db  10h
.eh_frame:0000000000016541                 db    0
.eh_frame:0000000000016542                 db    0
.eh_frame:0000000000016543                 db    0
.eh_frame:0000000000016544                 db  5Ch ; \
.eh_frame:0000000000016545                 db  10h
.eh_frame:0000000000016546                 db    0
.eh_frame:0000000000016547                 db    0
.eh_frame:0000000000016548                 db 0F8h
.eh_frame:0000000000016549                 db  6Ch ; l
.eh_frame:000000000001654A                 db 0FFh
.eh_frame:000000000001654B                 db 0FFh
.eh_frame:000000000001654C                 db  2Ch ; ,
.eh_frame:000000000001654D                 db    0
.eh_frame:000000000001654E                 db    0
.eh_frame:000000000001654F                 db    0
.eh_frame:0000000000016550                 db    0
.eh_frame:0000000000016551                 db    0
.eh_frame:0000000000016552                 db    0
.eh_frame:0000000000016553                 db    0
.eh_frame:0000000000016554                 db  18h
.eh_frame:0000000000016555                 db    0
.eh_frame:0000000000016556                 db    0
.eh_frame:0000000000016557                 db    0
.eh_frame:0000000000016558                 db  70h ; p
.eh_frame:0000000000016559                 db  10h
.eh_frame:000000000001655A                 db    0
.eh_frame:000000000001655B                 db    0
.eh_frame:000000000001655C                 db  14h
.eh_frame:000000000001655D                 db  6Dh ; m
.eh_frame:000000000001655E                 db 0FFh
.eh_frame:000000000001655F                 db 0FFh
.eh_frame:0000000000016560                 db  2Ah ; *
.eh_frame:0000000000016561                 db    0
.eh_frame:0000000000016562                 db    0
.eh_frame:0000000000016563                 db    0
.eh_frame:0000000000016564                 db    0
.eh_frame:0000000000016565                 db  46h ; F
.eh_frame:0000000000016566                 db  0Eh
.eh_frame:0000000000016567                 db  10h
.eh_frame:0000000000016568                 db  83h
.eh_frame:0000000000016569                 db    2
.eh_frame:000000000001656A                 db  5Bh ; [
.eh_frame:000000000001656B                 db  0Eh
.eh_frame:000000000001656C                 db    8
.eh_frame:000000000001656D                 db  47h ; G
.eh_frame:000000000001656E                 db 0C3h
.eh_frame:000000000001656F                 db    0
.eh_frame:0000000000016570                 db  38h ; 8
.eh_frame:0000000000016571                 db    0
.eh_frame:0000000000016572                 db    0
.eh_frame:0000000000016573                 db    0
.eh_frame:0000000000016574                 db  8Ch
.eh_frame:0000000000016575                 db  10h
.eh_frame:0000000000016576                 db    0
.eh_frame:0000000000016577                 db    0
.eh_frame:0000000000016578                 db  28h ; (
.eh_frame:0000000000016579                 db  6Dh ; m
.eh_frame:000000000001657A                 db 0FFh
.eh_frame:000000000001657B                 db 0FFh
.eh_frame:000000000001657C                 db  5Dh ; ]
.eh_frame:000000000001657D                 db    0
.eh_frame:000000000001657E                 db    0
.eh_frame:000000000001657F                 db    0
.eh_frame:0000000000016580                 db    0
.eh_frame:0000000000016581                 db  42h ; B
.eh_frame:0000000000016582                 db  0Eh
.eh_frame:0000000000016583                 db  10h
.eh_frame:0000000000016584                 db  8Dh
.eh_frame:0000000000016585                 db    2
.eh_frame:0000000000016586                 db  42h ; B
.eh_frame:0000000000016587                 db  0Eh
.eh_frame:0000000000016588                 db  18h
.eh_frame:0000000000016589                 db  8Ch
.eh_frame:000000000001658A                 db    3
.eh_frame:000000000001658B                 db  41h ; A
.eh_frame:000000000001658C                 db  0Eh
.eh_frame:000000000001658D                 db  20h
.eh_frame:000000000001658E                 db  86h
.eh_frame:000000000001658F                 db    4
.eh_frame:0000000000016590                 db  41h ; A
.eh_frame:0000000000016591                 db  0Eh
.eh_frame:0000000000016592                 db  28h ; (
.eh_frame:0000000000016593                 db  83h
.eh_frame:0000000000016594                 db    5
.eh_frame:0000000000016595                 db  47h ; G
.eh_frame:0000000000016596                 db  0Eh
.eh_frame:0000000000016597                 db  30h ; 0
.eh_frame:0000000000016598                 db  75h ; u
.eh_frame:0000000000016599                 db  0Ah
.eh_frame:000000000001659A                 db  0Eh
.eh_frame:000000000001659B                 db  28h ; (
.eh_frame:000000000001659C                 db  44h ; D
.eh_frame:000000000001659D                 db  0Eh
.eh_frame:000000000001659E                 db  20h
.eh_frame:000000000001659F                 db  41h ; A
.eh_frame:00000000000165A0                 db  0Eh
.eh_frame:00000000000165A1                 db  18h
.eh_frame:00000000000165A2                 db  42h ; B
.eh_frame:00000000000165A3                 db  0Eh
.eh_frame:00000000000165A4                 db  10h
.eh_frame:00000000000165A5                 db  42h ; B
.eh_frame:00000000000165A6                 db  0Eh
.eh_frame:00000000000165A7                 db    8
.eh_frame:00000000000165A8                 db  45h ; E
.eh_frame:00000000000165A9                 db  0Bh
.eh_frame:00000000000165AA                 db    0
.eh_frame:00000000000165AB                 db    0
.eh_frame:00000000000165AC                 db  34h ; 4
.eh_frame:00000000000165AD                 db    0
.eh_frame:00000000000165AE                 db    0
.eh_frame:00000000000165AF                 db    0
.eh_frame:00000000000165B0                 db 0C8h
.eh_frame:00000000000165B1                 db  10h
.eh_frame:00000000000165B2                 db    0
.eh_frame:00000000000165B3                 db    0
.eh_frame:00000000000165B4                 db  4Ch ; L
.eh_frame:00000000000165B5                 db  6Dh ; m
.eh_frame:00000000000165B6                 db 0FFh
.eh_frame:00000000000165B7                 db 0FFh
.eh_frame:00000000000165B8                 db  8Fh
.eh_frame:00000000000165B9                 db    0
.eh_frame:00000000000165BA                 db    0
.eh_frame:00000000000165BB                 db    0
.eh_frame:00000000000165BC                 db    0
.eh_frame:00000000000165BD                 db  45h ; E
.eh_frame:00000000000165BE                 db  0Eh
.eh_frame:00000000000165BF                 db  10h
.eh_frame:00000000000165C0                 db  8Ch
.eh_frame:00000000000165C1                 db    2
.eh_frame:00000000000165C2                 db  41h ; A
.eh_frame:00000000000165C3                 db  0Eh
.eh_frame:00000000000165C4                 db  18h
.eh_frame:00000000000165C5                 db  86h
.eh_frame:00000000000165C6                 db    3
.eh_frame:00000000000165C7                 db  41h ; A
.eh_frame:00000000000165C8                 db  0Eh
.eh_frame:00000000000165C9                 db  20h
.eh_frame:00000000000165CA                 db  83h
.eh_frame:00000000000165CB                 db    4
.eh_frame:00000000000165CC                 db    2
.eh_frame:00000000000165CD                 db  58h ; X
.eh_frame:00000000000165CE                 db  0Ah
.eh_frame:00000000000165CF                 db  0Eh
.eh_frame:00000000000165D0                 db  18h
.eh_frame:00000000000165D1                 db  41h ; A
.eh_frame:00000000000165D2                 db  0Eh
.eh_frame:00000000000165D3                 db  10h
.eh_frame:00000000000165D4                 db  42h ; B
.eh_frame:00000000000165D5                 db  0Eh
.eh_frame:00000000000165D6                 db    8
.eh_frame:00000000000165D7                 db  46h ; F
.eh_frame:00000000000165D8                 db  0Bh
.eh_frame:00000000000165D9                 db  63h ; c
.eh_frame:00000000000165DA                 db  0Eh
.eh_frame:00000000000165DB                 db  18h
.eh_frame:00000000000165DC                 db  41h ; A
.eh_frame:00000000000165DD                 db  0Eh
.eh_frame:00000000000165DE                 db  10h
.eh_frame:00000000000165DF                 db  42h ; B
.eh_frame:00000000000165E0                 db  0Eh
.eh_frame:00000000000165E1                 db    8
.eh_frame:00000000000165E2                 db    0
.eh_frame:00000000000165E3                 db    0
.eh_frame:00000000000165E4                 db  48h ; H
.eh_frame:00000000000165E5                 db    0
.eh_frame:00000000000165E6                 db    0
.eh_frame:00000000000165E7                 db    0
.eh_frame:00000000000165E8                 db    0
.eh_frame:00000000000165E9                 db  11h
.eh_frame:00000000000165EA                 db    0
.eh_frame:00000000000165EB                 db    0
.eh_frame:00000000000165EC                 db 0A4h
.eh_frame:00000000000165ED                 db  6Dh ; m
.eh_frame:00000000000165EE                 db 0FFh
.eh_frame:00000000000165EF                 db 0FFh
.eh_frame:00000000000165F0                 db  36h ; 6
.eh_frame:00000000000165F1                 db    1
.eh_frame:00000000000165F2                 db    0
.eh_frame:00000000000165F3                 db    0
.eh_frame:00000000000165F4                 db    0
.eh_frame:00000000000165F5                 db  42h ; B
.eh_frame:00000000000165F6                 db  0Eh
.eh_frame:00000000000165F7                 db  10h
.eh_frame:00000000000165F8                 db  8Fh
.eh_frame:00000000000165F9                 db    2
.eh_frame:00000000000165FA                 db  42h ; B
.eh_frame:00000000000165FB                 db  0Eh
.eh_frame:00000000000165FC                 db  18h
.eh_frame:00000000000165FD                 db  8Eh
.eh_frame:00000000000165FE                 db    3
.eh_frame:00000000000165FF                 db  47h ; G
.eh_frame:0000000000016600                 db  0Eh
.eh_frame:0000000000016601                 db  20h
.eh_frame:0000000000016602                 db  8Dh
.eh_frame:0000000000016603                 db    4
.eh_frame:0000000000016604                 db  42h ; B
.eh_frame:0000000000016605                 db  0Eh
.eh_frame:0000000000016606                 db  28h ; (
.eh_frame:0000000000016607                 db  8Ch
.eh_frame:0000000000016608                 db    5
.eh_frame:0000000000016609                 db  41h ; A
.eh_frame:000000000001660A                 db  0Eh
.eh_frame:000000000001660B                 db  30h ; 0
.eh_frame:000000000001660C                 db  86h
.eh_frame:000000000001660D                 db    6
.eh_frame:000000000001660E                 db  41h ; A
.eh_frame:000000000001660F                 db  0Eh
.eh_frame:0000000000016610                 db  38h ; 8
.eh_frame:0000000000016611                 db  83h
.eh_frame:0000000000016612                 db    7
.eh_frame:0000000000016613                 db  44h ; D
.eh_frame:0000000000016614                 db  0Eh
.eh_frame:0000000000016615                 db  40h ; @
.eh_frame:0000000000016616                 db    2
.eh_frame:0000000000016617                 db 0A1h
.eh_frame:0000000000016618                 db  0Ah
.eh_frame:0000000000016619                 db  0Eh
.eh_frame:000000000001661A                 db  38h ; 8
.eh_frame:000000000001661B                 db  41h ; A
.eh_frame:000000000001661C                 db  0Eh
.eh_frame:000000000001661D                 db  30h ; 0
.eh_frame:000000000001661E                 db  41h ; A
.eh_frame:000000000001661F                 db  0Eh
.eh_frame:0000000000016620                 db  28h ; (
.eh_frame:0000000000016621                 db  42h ; B
.eh_frame:0000000000016622                 db  0Eh
.eh_frame:0000000000016623                 db  20h
.eh_frame:0000000000016624                 db  42h ; B
.eh_frame:0000000000016625                 db  0Eh
.eh_frame:0000000000016626                 db  18h
.eh_frame:0000000000016627                 db  42h ; B
.eh_frame:0000000000016628                 db  0Eh
.eh_frame:0000000000016629                 db  10h
.eh_frame:000000000001662A                 db  42h ; B
.eh_frame:000000000001662B                 db  0Eh
.eh_frame:000000000001662C                 db    8
.eh_frame:000000000001662D                 db  42h ; B
.eh_frame:000000000001662E                 db  0Bh
.eh_frame:000000000001662F                 db    0
.eh_frame:0000000000016630                 db  50h ; P
.eh_frame:0000000000016631                 db    0
.eh_frame:0000000000016632                 db    0
.eh_frame:0000000000016633                 db    0
.eh_frame:0000000000016634                 db  4Ch ; L
.eh_frame:0000000000016635                 db  11h
.eh_frame:0000000000016636                 db    0
.eh_frame:0000000000016637                 db    0
.eh_frame:0000000000016638                 db  98h
.eh_frame:0000000000016639                 db  6Eh ; n
.eh_frame:000000000001663A                 db 0FFh
.eh_frame:000000000001663B                 db 0FFh
.eh_frame:000000000001663C                 db 0DFh
.eh_frame:000000000001663D                 db    0
.eh_frame:000000000001663E                 db    0
.eh_frame:000000000001663F                 db    0
.eh_frame:0000000000016640                 db    0
.eh_frame:0000000000016641                 db  42h ; B
.eh_frame:0000000000016642                 db  0Eh
.eh_frame:0000000000016643                 db  10h
.eh_frame:0000000000016644                 db  8Ch
.eh_frame:0000000000016645                 db    2
.eh_frame:0000000000016646                 db  41h ; A
.eh_frame:0000000000016647                 db  0Eh
.eh_frame:0000000000016648                 db  18h
.eh_frame:0000000000016649                 db  86h
.eh_frame:000000000001664A                 db    3
.eh_frame:000000000001664B                 db  44h ; D
.eh_frame:000000000001664C                 db  0Eh
.eh_frame:000000000001664D                 db  20h
.eh_frame:000000000001664E                 db  83h
.eh_frame:000000000001664F                 db    4
.eh_frame:0000000000016650                 db  4Bh ; K
.eh_frame:0000000000016651                 db  0Eh
.eh_frame:0000000000016652                 db  30h ; 0
.eh_frame:0000000000016653                 db    2
.eh_frame:0000000000016654                 db  6Fh ; o
.eh_frame:0000000000016655                 db  0Ah
.eh_frame:0000000000016656                 db  0Eh
.eh_frame:0000000000016657                 db  20h
.eh_frame:0000000000016658                 db  44h ; D
.eh_frame:0000000000016659                 db  0Eh
.eh_frame:000000000001665A                 db  18h
.eh_frame:000000000001665B                 db  41h ; A
.eh_frame:000000000001665C                 db  0Eh
.eh_frame:000000000001665D                 db  10h
.eh_frame:000000000001665E                 db  42h ; B
.eh_frame:000000000001665F                 db  0Eh
.eh_frame:0000000000016660                 db    8
.eh_frame:0000000000016661                 db  48h ; H
.eh_frame:0000000000016662                 db  0Bh
.eh_frame:0000000000016663                 db  5Ah ; Z
.eh_frame:0000000000016664                 db  0Ah
.eh_frame:0000000000016665                 db  0Eh
.eh_frame:0000000000016666                 db  20h
.eh_frame:0000000000016667                 db  44h ; D
.eh_frame:0000000000016668                 db  0Eh
.eh_frame:0000000000016669                 db  18h
.eh_frame:000000000001666A                 db  41h ; A
.eh_frame:000000000001666B                 db  0Eh
.eh_frame:000000000001666C                 db  10h
.eh_frame:000000000001666D                 db  42h ; B
.eh_frame:000000000001666E                 db  0Eh
.eh_frame:000000000001666F                 db    8
.eh_frame:0000000000016670                 db  47h ; G
.eh_frame:0000000000016671                 db  0Bh
.eh_frame:0000000000016672                 db  54h ; T
.eh_frame:0000000000016673                 db  0Ah
.eh_frame:0000000000016674                 db  0Eh
.eh_frame:0000000000016675                 db  20h
.eh_frame:0000000000016676                 db  44h ; D
.eh_frame:0000000000016677                 db  0Eh
.eh_frame:0000000000016678                 db  18h
.eh_frame:0000000000016679                 db  41h ; A
.eh_frame:000000000001667A                 db  0Eh
.eh_frame:000000000001667B                 db  10h
.eh_frame:000000000001667C                 db  42h ; B
.eh_frame:000000000001667D                 db  0Eh
.eh_frame:000000000001667E                 db    8
.eh_frame:000000000001667F                 db  45h ; E
.eh_frame:0000000000016680                 db  0Bh
.eh_frame:0000000000016681                 db    0
.eh_frame:0000000000016682                 db    0
.eh_frame:0000000000016683                 db    0
.eh_frame:0000000000016684                 db  10h
.eh_frame:0000000000016685                 db    0
.eh_frame:0000000000016686                 db    0
.eh_frame:0000000000016687                 db    0
.eh_frame:0000000000016688                 db 0A0h
.eh_frame:0000000000016689                 db  11h
.eh_frame:000000000001668A                 db    0
.eh_frame:000000000001668B                 db    0
.eh_frame:000000000001668C                 db  24h ; $
.eh_frame:000000000001668D                 db  6Fh ; o
.eh_frame:000000000001668E                 db 0FFh
.eh_frame:000000000001668F                 db 0FFh
.eh_frame:0000000000016690                 db  0Ch
.eh_frame:0000000000016691                 db    0
.eh_frame:0000000000016692                 db    0
.eh_frame:0000000000016693                 db    0
.eh_frame:0000000000016694                 db    0
.eh_frame:0000000000016695                 db    0
.eh_frame:0000000000016696                 db    0
.eh_frame:0000000000016697                 db    0
.eh_frame:0000000000016698                 db  5Ch ; \
.eh_frame:0000000000016699                 db    0
.eh_frame:000000000001669A                 db    0
.eh_frame:000000000001669B                 db    0
.eh_frame:000000000001669C                 db 0B4h
.eh_frame:000000000001669D                 db  11h
.eh_frame:000000000001669E                 db    0
.eh_frame:000000000001669F                 db    0
.eh_frame:00000000000166A0                 db  20h
.eh_frame:00000000000166A1                 db  6Fh ; o
.eh_frame:00000000000166A2                 db 0FFh
.eh_frame:00000000000166A3                 db 0FFh
.eh_frame:00000000000166A4                 db 0A3h
.eh_frame:00000000000166A5                 db    0
.eh_frame:00000000000166A6                 db    0
.eh_frame:00000000000166A7                 db    0
.eh_frame:00000000000166A8                 db    0
.eh_frame:00000000000166A9                 db  42h ; B
.eh_frame:00000000000166AA                 db  0Eh
.eh_frame:00000000000166AB                 db  10h
.eh_frame:00000000000166AC                 db  8Dh
.eh_frame:00000000000166AD                 db    2
.eh_frame:00000000000166AE                 db  42h ; B
.eh_frame:00000000000166AF                 db  0Eh
.eh_frame:00000000000166B0                 db  18h
.eh_frame:00000000000166B1                 db  8Ch
.eh_frame:00000000000166B2                 db    3
.eh_frame:00000000000166B3                 db  41h ; A
.eh_frame:00000000000166B4                 db  0Eh
.eh_frame:00000000000166B5                 db  20h
.eh_frame:00000000000166B6                 db  86h
.eh_frame:00000000000166B7                 db    4
.eh_frame:00000000000166B8                 db  41h ; A
.eh_frame:00000000000166B9                 db  0Eh
.eh_frame:00000000000166BA                 db  28h ; (
.eh_frame:00000000000166BB                 db  83h
.eh_frame:00000000000166BC                 db    5
.eh_frame:00000000000166BD                 db  47h ; G
.eh_frame:00000000000166BE                 db  0Eh
.eh_frame:00000000000166BF                 db  30h ; 0
.eh_frame:00000000000166C0                 db    2
.eh_frame:00000000000166C1                 db  41h ; A
.eh_frame:00000000000166C2                 db  0Ah
.eh_frame:00000000000166C3                 db  0Eh
.eh_frame:00000000000166C4                 db  28h ; (
.eh_frame:00000000000166C5                 db  44h ; D
.eh_frame:00000000000166C6                 db  0Eh
.eh_frame:00000000000166C7                 db  20h
.eh_frame:00000000000166C8                 db  41h ; A
.eh_frame:00000000000166C9                 db  0Eh
.eh_frame:00000000000166CA                 db  18h
.eh_frame:00000000000166CB                 db  42h ; B
.eh_frame:00000000000166CC                 db  0Eh
.eh_frame:00000000000166CD                 db  10h
.eh_frame:00000000000166CE                 db  42h ; B
.eh_frame:00000000000166CF                 db  0Eh
.eh_frame:00000000000166D0                 db    8
.eh_frame:00000000000166D1                 db  49h ; I
.eh_frame:00000000000166D2                 db  0Bh
.eh_frame:00000000000166D3                 db  52h ; R
.eh_frame:00000000000166D4                 db  0Ah
.eh_frame:00000000000166D5                 db  0Eh
.eh_frame:00000000000166D6                 db  28h ; (
.eh_frame:00000000000166D7                 db  43h ; C
.eh_frame:00000000000166D8                 db  0Eh
.eh_frame:00000000000166D9                 db  20h
.eh_frame:00000000000166DA                 db  41h ; A
.eh_frame:00000000000166DB                 db  0Eh
.eh_frame:00000000000166DC                 db  18h
.eh_frame:00000000000166DD                 db  42h ; B
.eh_frame:00000000000166DE                 db  0Eh
.eh_frame:00000000000166DF                 db  10h
.eh_frame:00000000000166E0                 db  42h ; B
.eh_frame:00000000000166E1                 db  0Eh
.eh_frame:00000000000166E2                 db    8
.eh_frame:00000000000166E3                 db  46h ; F
.eh_frame:00000000000166E4                 db  0Bh
.eh_frame:00000000000166E5                 db  44h ; D
.eh_frame:00000000000166E6                 db  0Ah
.eh_frame:00000000000166E7                 db  0Eh
.eh_frame:00000000000166E8                 db  28h ; (
.eh_frame:00000000000166E9                 db  47h ; G
.eh_frame:00000000000166EA                 db  0Eh
.eh_frame:00000000000166EB                 db  20h
.eh_frame:00000000000166EC                 db  41h ; A
.eh_frame:00000000000166ED                 db  0Eh
.eh_frame:00000000000166EE                 db  18h
.eh_frame:00000000000166EF                 db  42h ; B
.eh_frame:00000000000166F0                 db  0Eh
.eh_frame:00000000000166F1                 db  10h
.eh_frame:00000000000166F2                 db  42h ; B
.eh_frame:00000000000166F3                 db  0Eh
.eh_frame:00000000000166F4                 db    8
.eh_frame:00000000000166F5                 db  45h ; E
.eh_frame:00000000000166F6                 db  0Bh
.eh_frame:00000000000166F7                 db    0
.eh_frame:00000000000166F8                 db  34h ; 4
.eh_frame:00000000000166F9                 db    0
.eh_frame:00000000000166FA                 db    0
.eh_frame:00000000000166FB                 db    0
.eh_frame:00000000000166FC                 db  14h
.eh_frame:00000000000166FD                 db  12h
.eh_frame:00000000000166FE                 db    0
.eh_frame:00000000000166FF                 db    0
.eh_frame:0000000000016700                 db  70h ; p
.eh_frame:0000000000016701                 db  6Fh ; o
.eh_frame:0000000000016702                 db 0FFh
.eh_frame:0000000000016703                 db 0FFh
.eh_frame:0000000000016704                 db  41h ; A
.eh_frame:0000000000016705                 db    1
.eh_frame:0000000000016706                 db    0
.eh_frame:0000000000016707                 db    0
.eh_frame:0000000000016708                 db    0
.eh_frame:0000000000016709                 db  42h ; B
.eh_frame:000000000001670A                 db  0Eh
.eh_frame:000000000001670B                 db  10h
.eh_frame:000000000001670C                 db  8Ch
.eh_frame:000000000001670D                 db    2
.eh_frame:000000000001670E                 db  41h ; A
.eh_frame:000000000001670F                 db  0Eh
.eh_frame:0000000000016710                 db  18h
.eh_frame:0000000000016711                 db  86h
.eh_frame:0000000000016712                 db    3
.eh_frame:0000000000016713                 db  41h ; A
.eh_frame:0000000000016714                 db  0Eh
.eh_frame:0000000000016715                 db  20h
.eh_frame:0000000000016716                 db  83h
.eh_frame:0000000000016717                 db    4
.eh_frame:0000000000016718                 db  47h ; G
.eh_frame:0000000000016719                 db  0Eh
.eh_frame:000000000001671A                 db  70h ; p
.eh_frame:000000000001671B                 db    2
.eh_frame:000000000001671C                 db  8Bh
.eh_frame:000000000001671D                 db  0Ah
.eh_frame:000000000001671E                 db  0Eh
.eh_frame:000000000001671F                 db  20h
.eh_frame:0000000000016720                 db  41h ; A
.eh_frame:0000000000016721                 db  0Eh
.eh_frame:0000000000016722                 db  18h
.eh_frame:0000000000016723                 db  41h ; A
.eh_frame:0000000000016724                 db  0Eh
.eh_frame:0000000000016725                 db  10h
.eh_frame:0000000000016726                 db  42h ; B
.eh_frame:0000000000016727                 db  0Eh
.eh_frame:0000000000016728                 db    8
.eh_frame:0000000000016729                 db  46h ; F
.eh_frame:000000000001672A                 db  0Bh
.eh_frame:000000000001672B                 db    0
.eh_frame:000000000001672C                 db    0
.eh_frame:000000000001672D                 db    0
.eh_frame:000000000001672E                 db    0
.eh_frame:000000000001672F                 db    0
.eh_frame:0000000000016730                 db  3Ch ; <
.eh_frame:0000000000016731                 db    0
.eh_frame:0000000000016732                 db    0
.eh_frame:0000000000016733                 db    0
.eh_frame:0000000000016734                 db  4Ch ; L
.eh_frame:0000000000016735                 db  12h
.eh_frame:0000000000016736                 db    0
.eh_frame:0000000000016737                 db    0
.eh_frame:0000000000016738                 db  88h
.eh_frame:0000000000016739                 db  70h ; p
.eh_frame:000000000001673A                 db 0FFh
.eh_frame:000000000001673B                 db 0FFh
.eh_frame:000000000001673C                 db 0F2h
.eh_frame:000000000001673D                 db    0
.eh_frame:000000000001673E                 db    0
.eh_frame:000000000001673F                 db    0
.eh_frame:0000000000016740                 db    0
.eh_frame:0000000000016741                 db  42h ; B
.eh_frame:0000000000016742                 db  0Eh
.eh_frame:0000000000016743                 db  10h
.eh_frame:0000000000016744                 db  8Dh
.eh_frame:0000000000016745                 db    2
.eh_frame:0000000000016746                 db  42h ; B
.eh_frame:0000000000016747                 db  0Eh
.eh_frame:0000000000016748                 db  18h
.eh_frame:0000000000016749                 db  8Ch
.eh_frame:000000000001674A                 db    3
.eh_frame:000000000001674B                 db  44h ; D
.eh_frame:000000000001674C                 db  0Eh
.eh_frame:000000000001674D                 db  20h
.eh_frame:000000000001674E                 db  86h
.eh_frame:000000000001674F                 db    4
.eh_frame:0000000000016750                 db  41h ; A
.eh_frame:0000000000016751                 db  0Eh
.eh_frame:0000000000016752                 db  28h ; (
.eh_frame:0000000000016753                 db  83h
.eh_frame:0000000000016754                 db    5
.eh_frame:0000000000016755                 db  4Ah ; J
.eh_frame:0000000000016756                 db  0Eh
.eh_frame:0000000000016757                 db 0A0h
.eh_frame:0000000000016758                 db  10h
.eh_frame:0000000000016759                 db    2
.eh_frame:000000000001675A                 db  8Fh
.eh_frame:000000000001675B                 db  0Ah
.eh_frame:000000000001675C                 db  0Eh
.eh_frame:000000000001675D                 db  28h ; (
.eh_frame:000000000001675E                 db  41h ; A
.eh_frame:000000000001675F                 db  0Eh
.eh_frame:0000000000016760                 db  20h
.eh_frame:0000000000016761                 db  41h ; A
.eh_frame:0000000000016762                 db  0Eh
.eh_frame:0000000000016763                 db  18h
.eh_frame:0000000000016764                 db  42h ; B
.eh_frame:0000000000016765                 db  0Eh
.eh_frame:0000000000016766                 db  10h
.eh_frame:0000000000016767                 db  42h ; B
.eh_frame:0000000000016768                 db  0Eh
.eh_frame:0000000000016769                 db    8
.eh_frame:000000000001676A                 db  48h ; H
.eh_frame:000000000001676B                 db  0Bh
.eh_frame:000000000001676C                 db    0
.eh_frame:000000000001676D                 db    0
.eh_frame:000000000001676E                 db    0
.eh_frame:000000000001676F                 db    0
.eh_frame:0000000000016770                 db  4Ch ; L
.eh_frame:0000000000016771                 db    0
.eh_frame:0000000000016772                 db    0
.eh_frame:0000000000016773                 db    0
.eh_frame:0000000000016774                 db  8Ch
.eh_frame:0000000000016775                 db  12h
.eh_frame:0000000000016776                 db    0
.eh_frame:0000000000016777                 db    0
.eh_frame:0000000000016778                 db  48h ; H
.eh_frame:0000000000016779                 db  71h ; q
.eh_frame:000000000001677A                 db 0FFh
.eh_frame:000000000001677B                 db 0FFh
.eh_frame:000000000001677C                 db  7Dh ; }
.eh_frame:000000000001677D                 db    0
.eh_frame:000000000001677E                 db    0
.eh_frame:000000000001677F                 db    0
.eh_frame:0000000000016780                 db    0
.eh_frame:0000000000016781                 db  42h ; B
.eh_frame:0000000000016782                 db  0Eh
.eh_frame:0000000000016783                 db  10h
.eh_frame:0000000000016784                 db  8Ch
.eh_frame:0000000000016785                 db    2
.eh_frame:0000000000016786                 db  41h ; A
.eh_frame:0000000000016787                 db  0Eh
.eh_frame:0000000000016788                 db  18h
.eh_frame:0000000000016789                 db  86h
.eh_frame:000000000001678A                 db    3
.eh_frame:000000000001678B                 db  44h ; D
.eh_frame:000000000001678C                 db  0Eh
.eh_frame:000000000001678D                 db  20h
.eh_frame:000000000001678E                 db  83h
.eh_frame:000000000001678F                 db    4
.eh_frame:0000000000016790                 db  69h ; i
.eh_frame:0000000000016791                 db  0Ah
.eh_frame:0000000000016792                 db  0Eh
.eh_frame:0000000000016793                 db  18h
.eh_frame:0000000000016794                 db  41h ; A
.eh_frame:0000000000016795                 db  0Eh
.eh_frame:0000000000016796                 db  10h
.eh_frame:0000000000016797                 db  42h ; B
.eh_frame:0000000000016798                 db  0Eh
.eh_frame:0000000000016799                 db    8
.eh_frame:000000000001679A                 db  45h ; E
.eh_frame:000000000001679B                 db  0Bh
.eh_frame:000000000001679C                 db  55h ; U
.eh_frame:000000000001679D                 db  0Ah
.eh_frame:000000000001679E                 db  0Eh
.eh_frame:000000000001679F                 db  18h
.eh_frame:00000000000167A0                 db  41h ; A
.eh_frame:00000000000167A1                 db  0Eh
.eh_frame:00000000000167A2                 db  10h
.eh_frame:00000000000167A3                 db  42h ; B
.eh_frame:00000000000167A4                 db  0Eh
.eh_frame:00000000000167A5                 db    8
.eh_frame:00000000000167A6                 db  48h ; H
.eh_frame:00000000000167A7                 db  0Bh
.eh_frame:00000000000167A8                 db  41h ; A
.eh_frame:00000000000167A9                 db  0Ah
.eh_frame:00000000000167AA                 db  0Eh
.eh_frame:00000000000167AB                 db  18h
.eh_frame:00000000000167AC                 db  46h ; F
.eh_frame:00000000000167AD                 db  0Eh
.eh_frame:00000000000167AE                 db  10h
.eh_frame:00000000000167AF                 db  42h ; B
.eh_frame:00000000000167B0                 db  0Eh
.eh_frame:00000000000167B1                 db    8
.eh_frame:00000000000167B2                 db  47h ; G
.eh_frame:00000000000167B3                 db  0Bh
.eh_frame:00000000000167B4                 db  49h ; I
.eh_frame:00000000000167B5                 db  0Eh
.eh_frame:00000000000167B6                 db  18h
.eh_frame:00000000000167B7                 db  41h ; A
.eh_frame:00000000000167B8                 db  0Eh
.eh_frame:00000000000167B9                 db  10h
.eh_frame:00000000000167BA                 db  42h ; B
.eh_frame:00000000000167BB                 db  0Eh
.eh_frame:00000000000167BC                 db    8
.eh_frame:00000000000167BD                 db    0
.eh_frame:00000000000167BE                 db    0
.eh_frame:00000000000167BF                 db    0
.eh_frame:00000000000167C0                 db  1Ch
.eh_frame:00000000000167C1                 db    0
.eh_frame:00000000000167C2                 db    0
.eh_frame:00000000000167C3                 db    0
.eh_frame:00000000000167C4                 db 0DCh
.eh_frame:00000000000167C5                 db  12h
.eh_frame:00000000000167C6                 db    0
.eh_frame:00000000000167C7                 db    0
.eh_frame:00000000000167C8                 db  78h ; x
.eh_frame:00000000000167C9                 db  71h ; q
.eh_frame:00000000000167CA                 db 0FFh
.eh_frame:00000000000167CB                 db 0FFh
.eh_frame:00000000000167CC                 db  60h ; `
.eh_frame:00000000000167CD                 db    0
.eh_frame:00000000000167CE                 db    0
.eh_frame:00000000000167CF                 db    0
.eh_frame:00000000000167D0                 db    0
.eh_frame:00000000000167D1                 db  44h ; D
.eh_frame:00000000000167D2                 db  0Eh
.eh_frame:00000000000167D3                 db  10h
.eh_frame:00000000000167D4                 db  75h ; u
.eh_frame:00000000000167D5                 db  0Ah
.eh_frame:00000000000167D6                 db  0Eh
.eh_frame:00000000000167D7                 db    8
.eh_frame:00000000000167D8                 db  47h ; G
.eh_frame:00000000000167D9                 db  0Bh
.eh_frame:00000000000167DA                 db  5Fh ; _
.eh_frame:00000000000167DB                 db  0Eh
.eh_frame:00000000000167DC                 db    8
.eh_frame:00000000000167DD                 db    0
.eh_frame:00000000000167DE                 db    0
.eh_frame:00000000000167DF                 db    0
.eh_frame:00000000000167E0                 db  1Ch
.eh_frame:00000000000167E1                 db    0
.eh_frame:00000000000167E2                 db    0
.eh_frame:00000000000167E3                 db    0
.eh_frame:00000000000167E4                 db 0FCh
.eh_frame:00000000000167E5                 db  12h
.eh_frame:00000000000167E6                 db    0
.eh_frame:00000000000167E7                 db    0
.eh_frame:00000000000167E8                 db 0B8h
.eh_frame:00000000000167E9                 db  71h ; q
.eh_frame:00000000000167EA                 db 0FFh
.eh_frame:00000000000167EB                 db 0FFh
.eh_frame:00000000000167EC                 db  3Ch ; <
.eh_frame:00000000000167ED                 db    0
.eh_frame:00000000000167EE                 db    0
.eh_frame:00000000000167EF                 db    0
.eh_frame:00000000000167F0                 db    0
.eh_frame:00000000000167F1                 db  44h ; D
.eh_frame:00000000000167F2                 db  0Eh
.eh_frame:00000000000167F3                 db  10h
.eh_frame:00000000000167F4                 db  61h ; a
.eh_frame:00000000000167F5                 db  0Ah
.eh_frame:00000000000167F6                 db  0Eh
.eh_frame:00000000000167F7                 db    8
.eh_frame:00000000000167F8                 db  4Bh ; K
.eh_frame:00000000000167F9                 db  0Bh
.eh_frame:00000000000167FA                 db  4Bh ; K
.eh_frame:00000000000167FB                 db  0Eh
.eh_frame:00000000000167FC                 db    8
.eh_frame:00000000000167FD                 db    0
.eh_frame:00000000000167FE                 db    0
.eh_frame:00000000000167FF                 db    0
.eh_frame:0000000000016800                 db  28h ; (
.eh_frame:0000000000016801                 db    0
.eh_frame:0000000000016802                 db    0
.eh_frame:0000000000016803                 db    0
.eh_frame:0000000000016804                 db  1Ch
.eh_frame:0000000000016805                 db  13h
.eh_frame:0000000000016806                 db    0
.eh_frame:0000000000016807                 db    0
.eh_frame:0000000000016808                 db 0D8h
.eh_frame:0000000000016809                 db  71h ; q
.eh_frame:000000000001680A                 db 0FFh
.eh_frame:000000000001680B                 db 0FFh
.eh_frame:000000000001680C                 db  41h ; A
.eh_frame:000000000001680D                 db    0
.eh_frame:000000000001680E                 db    0
.eh_frame:000000000001680F                 db    0
.eh_frame:0000000000016810                 db    0
.eh_frame:0000000000016811                 db  45h ; E
.eh_frame:0000000000016812                 db  0Eh
.eh_frame:0000000000016813                 db  10h
.eh_frame:0000000000016814                 db  8Ch
.eh_frame:0000000000016815                 db    2
.eh_frame:0000000000016816                 db  41h ; A
.eh_frame:0000000000016817                 db  0Eh
.eh_frame:0000000000016818                 db  18h
.eh_frame:0000000000016819                 db  86h
.eh_frame:000000000001681A                 db    3
.eh_frame:000000000001681B                 db  44h ; D
.eh_frame:000000000001681C                 db  0Eh
.eh_frame:000000000001681D                 db  20h
.eh_frame:000000000001681E                 db  83h
.eh_frame:000000000001681F                 db    4
.eh_frame:0000000000016820                 db  73h ; s
.eh_frame:0000000000016821                 db  0Eh
.eh_frame:0000000000016822                 db  18h
.eh_frame:0000000000016823                 db  41h ; A
.eh_frame:0000000000016824                 db  0Eh
.eh_frame:0000000000016825                 db  10h
.eh_frame:0000000000016826                 db  42h ; B
.eh_frame:0000000000016827                 db  0Eh
.eh_frame:0000000000016828                 db    8
.eh_frame:0000000000016829                 db    0
.eh_frame:000000000001682A                 db    0
.eh_frame:000000000001682B                 db    0
.eh_frame:000000000001682C                 db  28h ; (
.eh_frame:000000000001682D                 db    0
.eh_frame:000000000001682E                 db    0
.eh_frame:000000000001682F                 db    0
.eh_frame:0000000000016830                 db  48h ; H
.eh_frame:0000000000016831                 db  13h
.eh_frame:0000000000016832                 db    0
.eh_frame:0000000000016833                 db    0
.eh_frame:0000000000016834                 db 0FCh
.eh_frame:0000000000016835                 db  71h ; q
.eh_frame:0000000000016836                 db 0FFh
.eh_frame:0000000000016837                 db 0FFh
.eh_frame:0000000000016838                 db  41h ; A
.eh_frame:0000000000016839                 db    0
.eh_frame:000000000001683A                 db    0
.eh_frame:000000000001683B                 db    0
.eh_frame:000000000001683C                 db    0
.eh_frame:000000000001683D                 db  45h ; E
.eh_frame:000000000001683E                 db  0Eh
.eh_frame:000000000001683F                 db  10h
.eh_frame:0000000000016840                 db  8Ch
.eh_frame:0000000000016841                 db    2
.eh_frame:0000000000016842                 db  41h ; A
.eh_frame:0000000000016843                 db  0Eh
.eh_frame:0000000000016844                 db  18h
.eh_frame:0000000000016845                 db  86h
.eh_frame:0000000000016846                 db    3
.eh_frame:0000000000016847                 db  44h ; D
.eh_frame:0000000000016848                 db  0Eh
.eh_frame:0000000000016849                 db  20h
.eh_frame:000000000001684A                 db  83h
.eh_frame:000000000001684B                 db    4
.eh_frame:000000000001684C                 db  73h ; s
.eh_frame:000000000001684D                 db  0Eh
.eh_frame:000000000001684E                 db  18h
.eh_frame:000000000001684F                 db  41h ; A
.eh_frame:0000000000016850                 db  0Eh
.eh_frame:0000000000016851                 db  10h
.eh_frame:0000000000016852                 db  42h ; B
.eh_frame:0000000000016853                 db  0Eh
.eh_frame:0000000000016854                 db    8
.eh_frame:0000000000016855                 db    0
.eh_frame:0000000000016856                 db    0
.eh_frame:0000000000016857                 db    0
.eh_frame:0000000000016858                 db  74h ; t
.eh_frame:0000000000016859                 db    0
.eh_frame:000000000001685A                 db    0
.eh_frame:000000000001685B                 db    0
.eh_frame:000000000001685C                 db  74h ; t
.eh_frame:000000000001685D                 db  13h
.eh_frame:000000000001685E                 db    0
.eh_frame:000000000001685F                 db    0
.eh_frame:0000000000016860                 db  20h
.eh_frame:0000000000016861                 db  72h ; r
.eh_frame:0000000000016862                 db 0FFh
.eh_frame:0000000000016863                 db 0FFh
.eh_frame:0000000000016864                 db 0B2h
.eh_frame:0000000000016865                 db  1Ah
.eh_frame:0000000000016866                 db    0
.eh_frame:0000000000016867                 db    0
.eh_frame:0000000000016868                 db    0
.eh_frame:0000000000016869                 db  42h ; B
.eh_frame:000000000001686A                 db  0Eh
.eh_frame:000000000001686B                 db  10h
.eh_frame:000000000001686C                 db  8Fh
.eh_frame:000000000001686D                 db    2
.eh_frame:000000000001686E                 db  42h ; B
.eh_frame:000000000001686F                 db  0Eh
.eh_frame:0000000000016870                 db  18h
.eh_frame:0000000000016871                 db  8Eh
.eh_frame:0000000000016872                 db    3
.eh_frame:0000000000016873                 db  45h ; E
.eh_frame:0000000000016874                 db  0Eh
.eh_frame:0000000000016875                 db  20h
.eh_frame:0000000000016876                 db  8Dh
.eh_frame:0000000000016877                 db    4
.eh_frame:0000000000016878                 db  42h ; B
.eh_frame:0000000000016879                 db  0Eh
.eh_frame:000000000001687A                 db  28h ; (
.eh_frame:000000000001687B                 db  8Ch
.eh_frame:000000000001687C                 db    5
.eh_frame:000000000001687D                 db  44h ; D
.eh_frame:000000000001687E                 db  0Eh
.eh_frame:000000000001687F                 db  30h ; 0
.eh_frame:0000000000016880                 db  86h
.eh_frame:0000000000016881                 db    6
.eh_frame:0000000000016882                 db  41h ; A
.eh_frame:0000000000016883                 db  0Eh
.eh_frame:0000000000016884                 db  38h ; 8
.eh_frame:0000000000016885                 db  83h
.eh_frame:0000000000016886                 db    7
.eh_frame:0000000000016887                 db  4Ah ; J
.eh_frame:0000000000016888                 db  0Eh
.eh_frame:0000000000016889                 db  80h
.eh_frame:000000000001688A                 db  0Ah
.eh_frame:000000000001688B                 db    2
.eh_frame:000000000001688C                 db 0D6h
.eh_frame:000000000001688D                 db  0Ah
.eh_frame:000000000001688E                 db  0Eh
.eh_frame:000000000001688F                 db  38h ; 8
.eh_frame:0000000000016890                 db  41h ; A
.eh_frame:0000000000016891                 db  0Eh
.eh_frame:0000000000016892                 db  30h ; 0
.eh_frame:0000000000016893                 db  41h ; A
.eh_frame:0000000000016894                 db  0Eh
.eh_frame:0000000000016895                 db  28h ; (
.eh_frame:0000000000016896                 db  42h ; B
.eh_frame:0000000000016897                 db  0Eh
.eh_frame:0000000000016898                 db  20h
.eh_frame:0000000000016899                 db  42h ; B
.eh_frame:000000000001689A                 db  0Eh
.eh_frame:000000000001689B                 db  18h
.eh_frame:000000000001689C                 db  42h ; B
.eh_frame:000000000001689D                 db  0Eh
.eh_frame:000000000001689E                 db  10h
.eh_frame:000000000001689F                 db  42h ; B
.eh_frame:00000000000168A0                 db  0Eh
.eh_frame:00000000000168A1                 db    8
.eh_frame:00000000000168A2                 db  46h ; F
.eh_frame:00000000000168A3                 db  0Bh
.eh_frame:00000000000168A4                 db    3
.eh_frame:00000000000168A5                 db  99h
.eh_frame:00000000000168A6                 db    5
.eh_frame:00000000000168A7                 db  0Eh
.eh_frame:00000000000168A8                 db  88h
.eh_frame:00000000000168A9                 db  0Ah
.eh_frame:00000000000168AA                 db  44h ; D
.eh_frame:00000000000168AB                 db  0Eh
.eh_frame:00000000000168AC                 db  90h
.eh_frame:00000000000168AD                 db  0Ah
.eh_frame:00000000000168AE                 db  44h ; D
.eh_frame:00000000000168AF                 db  0Eh
.eh_frame:00000000000168B0                 db  98h
.eh_frame:00000000000168B1                 db  0Ah
.eh_frame:00000000000168B2                 db  45h ; E
.eh_frame:00000000000168B3                 db  0Eh
.eh_frame:00000000000168B4                 db 0A0h
.eh_frame:00000000000168B5                 db  0Ah
.eh_frame:00000000000168B6                 db  4Eh ; N
.eh_frame:00000000000168B7                 db  0Eh
.eh_frame:00000000000168B8                 db  80h
.eh_frame:00000000000168B9                 db  0Ah
.eh_frame:00000000000168BA                 db    2
.eh_frame:00000000000168BB                 db  98h
.eh_frame:00000000000168BC                 db  0Eh
.eh_frame:00000000000168BD                 db  88h
.eh_frame:00000000000168BE                 db  0Ah
.eh_frame:00000000000168BF                 db  44h ; D
.eh_frame:00000000000168C0                 db  0Eh
.eh_frame:00000000000168C1                 db  90h
.eh_frame:00000000000168C2                 db  0Ah
.eh_frame:00000000000168C3                 db  44h ; D
.eh_frame:00000000000168C4                 db  0Eh
.eh_frame:00000000000168C5                 db  98h
.eh_frame:00000000000168C6                 db  0Ah
.eh_frame:00000000000168C7                 db  45h ; E
.eh_frame:00000000000168C8                 db  0Eh
.eh_frame:00000000000168C9                 db 0A0h
.eh_frame:00000000000168CA                 db  0Ah
.eh_frame:00000000000168CB                 db  5Dh ; ]
.eh_frame:00000000000168CC                 db  0Eh
.eh_frame:00000000000168CD                 db  80h
.eh_frame:00000000000168CE                 db  0Ah
.eh_frame:00000000000168CF                 db    0
.eh_frame:00000000000168D0                 db  2Ch ; ,
.eh_frame:00000000000168D1                 db    0
.eh_frame:00000000000168D2                 db    0
.eh_frame:00000000000168D3                 db    0
.eh_frame:00000000000168D4                 db 0ECh
.eh_frame:00000000000168D5                 db  13h
.eh_frame:00000000000168D6                 db    0
.eh_frame:00000000000168D7                 db    0
.eh_frame:00000000000168D8                 db  68h ; h
.eh_frame:00000000000168D9                 db  8Ch
.eh_frame:00000000000168DA                 db 0FFh
.eh_frame:00000000000168DB                 db 0FFh
.eh_frame:00000000000168DC                 db  4Eh ; N
.eh_frame:00000000000168DD                 db    0
.eh_frame:00000000000168DE                 db    0
.eh_frame:00000000000168DF                 db    0
.eh_frame:00000000000168E0                 db    0
.eh_frame:00000000000168E1                 db  44h ; D
.eh_frame:00000000000168E2                 db  0Eh
.eh_frame:00000000000168E3                 db  20h
.eh_frame:00000000000168E4                 db  57h ; W
.eh_frame:00000000000168E5                 db  0Eh
.eh_frame:00000000000168E6                 db  28h ; (
.eh_frame:00000000000168E7                 db  45h ; E
.eh_frame:00000000000168E8                 db  0Eh
.eh_frame:00000000000168E9                 db  30h ; 0
.eh_frame:00000000000168EA                 db  49h ; I
.eh_frame:00000000000168EB                 db  0Eh
.eh_frame:00000000000168EC                 db  38h ; 8
.eh_frame:00000000000168ED                 db  42h ; B
.eh_frame:00000000000168EE                 db  0Eh
.eh_frame:00000000000168EF                 db  40h ; @
.eh_frame:00000000000168F0                 db  49h ; I
.eh_frame:00000000000168F1                 db  0Eh
.eh_frame:00000000000168F2                 db  20h
.eh_frame:00000000000168F3                 db  54h ; T
.eh_frame:00000000000168F4                 db  0Ah
.eh_frame:00000000000168F5                 db  0Eh
.eh_frame:00000000000168F6                 db    8
.eh_frame:00000000000168F7                 db  41h ; A
.eh_frame:00000000000168F8                 db  0Bh
.eh_frame:00000000000168F9                 db    0
.eh_frame:00000000000168FA                 db    0
.eh_frame:00000000000168FB                 db    0
.eh_frame:00000000000168FC                 db    0
.eh_frame:00000000000168FD                 db    0
.eh_frame:00000000000168FE                 db    0
.eh_frame:00000000000168FF                 db    0
.eh_frame:0000000000016900                 db  14h
.eh_frame:0000000000016901                 db    0
.eh_frame:0000000000016902                 db    0
.eh_frame:0000000000016903                 db    0
.eh_frame:0000000000016904                 db  1Ch
.eh_frame:0000000000016905                 db  14h
.eh_frame:0000000000016906                 db    0
.eh_frame:0000000000016907                 db    0
.eh_frame:0000000000016908                 db  88h
.eh_frame:0000000000016909                 db  8Ch
.eh_frame:000000000001690A                 db 0FFh
.eh_frame:000000000001690B                 db 0FFh
.eh_frame:000000000001690C                 db    4
.eh_frame:000000000001690D                 db    0
.eh_frame:000000000001690E                 db    0
.eh_frame:000000000001690F                 db    0
.eh_frame:0000000000016910                 db    0
.eh_frame:0000000000016911                 db    0
.eh_frame:0000000000016912                 db    0
.eh_frame:0000000000016913                 db    0
.eh_frame:0000000000016914                 db    0
.eh_frame:0000000000016915                 db    0
.eh_frame:0000000000016916                 db    0
.eh_frame:0000000000016917                 db    0
.eh_frame:0000000000016918                 db  2Ch ; ,
.eh_frame:0000000000016919                 db    0
.eh_frame:000000000001691A                 db    0
.eh_frame:000000000001691B                 db    0
.eh_frame:000000000001691C                 db  34h ; 4
.eh_frame:000000000001691D                 db  14h
.eh_frame:000000000001691E                 db    0
.eh_frame:000000000001691F                 db    0
.eh_frame:0000000000016920                 db  80h
.eh_frame:0000000000016921                 db  8Ch
.eh_frame:0000000000016922                 db 0FFh
.eh_frame:0000000000016923                 db 0FFh
.eh_frame:0000000000016924                 db  1Fh
.eh_frame:0000000000016925                 db  11h
.eh_frame:0000000000016926                 db    0
.eh_frame:0000000000016927                 db    0
.eh_frame:0000000000016928                 db    0
.eh_frame:0000000000016929                 db  41h ; A
.eh_frame:000000000001692A                 db  0Eh
.eh_frame:000000000001692B                 db  10h
.eh_frame:000000000001692C                 db  86h
.eh_frame:000000000001692D                 db    2
.eh_frame:000000000001692E                 db  43h ; C
.eh_frame:000000000001692F                 db  0Dh
.eh_frame:0000000000016930                 db    6
.eh_frame:0000000000016931                 db  48h ; H
.eh_frame:0000000000016932                 db  8Fh
.eh_frame:0000000000016933                 db    3
.eh_frame:0000000000016934                 db  8Eh
.eh_frame:0000000000016935                 db    4
.eh_frame:0000000000016936                 db  8Dh
.eh_frame:0000000000016937                 db    5
.eh_frame:0000000000016938                 db  8Ch
.eh_frame:0000000000016939                 db    6
.eh_frame:000000000001693A                 db  48h ; H
.eh_frame:000000000001693B                 db  83h
.eh_frame:000000000001693C                 db    7
.eh_frame:000000000001693D                 db    3
.eh_frame:000000000001693E                 db 0EFh
.eh_frame:000000000001693F                 db    1
.eh_frame:0000000000016940                 db  0Ah
.eh_frame:0000000000016941                 db  0Ch
.eh_frame:0000000000016942                 db    7
.eh_frame:0000000000016943                 db    8
.eh_frame:0000000000016944                 db  45h ; E
.eh_frame:0000000000016945                 db  0Bh
.eh_frame:0000000000016946                 db    0
.eh_frame:0000000000016947                 db    0
.eh_frame:0000000000016948                 db  14h
.eh_frame:0000000000016949                 db    0
.eh_frame:000000000001694A                 db    0
.eh_frame:000000000001694B                 db    0
.eh_frame:000000000001694C                 db  64h ; d
.eh_frame:000000000001694D                 db  14h
.eh_frame:000000000001694E                 db    0
.eh_frame:000000000001694F                 db    0
.eh_frame:0000000000016950                 db  70h ; p
.eh_frame:0000000000016951                 db  9Dh
.eh_frame:0000000000016952                 db 0FFh
.eh_frame:0000000000016953                 db 0FFh
.eh_frame:0000000000016954                 db 0FEh
.eh_frame:0000000000016955                 db    1
.eh_frame:0000000000016956                 db    0
.eh_frame:0000000000016957                 db    0
.eh_frame:0000000000016958                 db    0
.eh_frame:0000000000016959                 db    0
.eh_frame:000000000001695A                 db    0
.eh_frame:000000000001695B                 db    0
.eh_frame:000000000001695C                 db    0
.eh_frame:000000000001695D                 db    0
.eh_frame:000000000001695E                 db    0
.eh_frame:000000000001695F                 db    0
.eh_frame:0000000000016960                 db  4Ch ; L
.eh_frame:0000000000016961                 db    0
.eh_frame:0000000000016962                 db    0
.eh_frame:0000000000016963                 db    0
.eh_frame:0000000000016964                 db  7Ch ; |
.eh_frame:0000000000016965                 db  14h
.eh_frame:0000000000016966                 db    0
.eh_frame:0000000000016967                 db    0
.eh_frame:0000000000016968                 db  58h ; X
.eh_frame:0000000000016969                 db  9Fh
.eh_frame:000000000001696A                 db 0FFh
.eh_frame:000000000001696B                 db 0FFh
.eh_frame:000000000001696C                 db 0ECh
.eh_frame:000000000001696D                 db  0Ch
.eh_frame:000000000001696E                 db    0
.eh_frame:000000000001696F                 db    0
.eh_frame:0000000000016970                 db    0
.eh_frame:0000000000016971                 db  42h ; B
.eh_frame:0000000000016972                 db  0Eh
.eh_frame:0000000000016973                 db  10h
.eh_frame:0000000000016974                 db  8Fh
.eh_frame:0000000000016975                 db    2
.eh_frame:0000000000016976                 db  42h ; B
.eh_frame:0000000000016977                 db  0Eh
.eh_frame:0000000000016978                 db  18h
.eh_frame:0000000000016979                 db  8Eh
.eh_frame:000000000001697A                 db    3
.eh_frame:000000000001697B                 db  46h ; F
.eh_frame:000000000001697C                 db  0Eh
.eh_frame:000000000001697D                 db  20h
.eh_frame:000000000001697E                 db  8Dh
.eh_frame:000000000001697F                 db    4
.eh_frame:0000000000016980                 db  42h ; B
.eh_frame:0000000000016981                 db  0Eh
.eh_frame:0000000000016982                 db  28h ; (
.eh_frame:0000000000016983                 db  8Ch
.eh_frame:0000000000016984                 db    5
.eh_frame:0000000000016985                 db  45h ; E
.eh_frame:0000000000016986                 db  0Eh
.eh_frame:0000000000016987                 db  30h ; 0
.eh_frame:0000000000016988                 db  86h
.eh_frame:0000000000016989                 db    6
.eh_frame:000000000001698A                 db  41h ; A
.eh_frame:000000000001698B                 db  0Eh
.eh_frame:000000000001698C                 db  38h ; 8
.eh_frame:000000000001698D                 db  83h
.eh_frame:000000000001698E                 db    7
.eh_frame:000000000001698F                 db  52h ; R
.eh_frame:0000000000016990                 db  0Eh
.eh_frame:0000000000016991                 db  90h
.eh_frame:0000000000016992                 db    1
.eh_frame:0000000000016993                 db    2
.eh_frame:0000000000016994                 db  82h
.eh_frame:0000000000016995                 db  0Ah
.eh_frame:0000000000016996                 db  0Eh
.eh_frame:0000000000016997                 db  38h ; 8
.eh_frame:0000000000016998                 db  41h ; A
.eh_frame:0000000000016999                 db  0Eh
.eh_frame:000000000001699A                 db  30h ; 0
.eh_frame:000000000001699B                 db  41h ; A
.eh_frame:000000000001699C                 db  0Eh
.eh_frame:000000000001699D                 db  28h ; (
.eh_frame:000000000001699E                 db  42h ; B
.eh_frame:000000000001699F                 db  0Eh
.eh_frame:00000000000169A0                 db  20h
.eh_frame:00000000000169A1                 db  42h ; B
.eh_frame:00000000000169A2                 db  0Eh
.eh_frame:00000000000169A3                 db  18h
.eh_frame:00000000000169A4                 db  42h ; B
.eh_frame:00000000000169A5                 db  0Eh
.eh_frame:00000000000169A6                 db  10h
.eh_frame:00000000000169A7                 db  42h ; B
.eh_frame:00000000000169A8                 db  0Eh
.eh_frame:00000000000169A9                 db    8
.eh_frame:00000000000169AA                 db  48h ; H
.eh_frame:00000000000169AB                 db  0Bh
.eh_frame:00000000000169AC                 db    0
.eh_frame:00000000000169AD                 db    0
.eh_frame:00000000000169AE                 db    0
.eh_frame:00000000000169AF                 db    0
.eh_frame:00000000000169B0                 db  44h ; D
.eh_frame:00000000000169B1                 db    0
.eh_frame:00000000000169B2                 db    0
.eh_frame:00000000000169B3                 db    0
.eh_frame:00000000000169B4                 db 0CCh
.eh_frame:00000000000169B5                 db  14h
.eh_frame:00000000000169B6                 db    0
.eh_frame:00000000000169B7                 db    0
.eh_frame:00000000000169B8                 db 0F8h
.eh_frame:00000000000169B9                 db 0ABh
.eh_frame:00000000000169BA                 db 0FFh
.eh_frame:00000000000169BB                 db 0FFh
.eh_frame:00000000000169BC                 db  65h ; e
.eh_frame:00000000000169BD                 db    0
.eh_frame:00000000000169BE                 db    0
.eh_frame:00000000000169BF                 db    0
.eh_frame:00000000000169C0                 db    0
.eh_frame:00000000000169C1                 db  42h ; B
.eh_frame:00000000000169C2                 db  0Eh
.eh_frame:00000000000169C3                 db  10h
.eh_frame:00000000000169C4                 db  8Fh
.eh_frame:00000000000169C5                 db    2
.eh_frame:00000000000169C6                 db  42h ; B
.eh_frame:00000000000169C7                 db  0Eh
.eh_frame:00000000000169C8                 db  18h
.eh_frame:00000000000169C9                 db  8Eh
.eh_frame:00000000000169CA                 db    3
.eh_frame:00000000000169CB                 db  45h ; E
.eh_frame:00000000000169CC                 db  0Eh
.eh_frame:00000000000169CD                 db  20h
.eh_frame:00000000000169CE                 db  8Dh
.eh_frame:00000000000169CF                 db    4
.eh_frame:00000000000169D0                 db  42h ; B
.eh_frame:00000000000169D1                 db  0Eh
.eh_frame:00000000000169D2                 db  28h ; (
.eh_frame:00000000000169D3                 db  8Ch
.eh_frame:00000000000169D4                 db    5
.eh_frame:00000000000169D5                 db  48h ; H
.eh_frame:00000000000169D6                 db  0Eh
.eh_frame:00000000000169D7                 db  30h ; 0
.eh_frame:00000000000169D8                 db  86h
.eh_frame:00000000000169D9                 db    6
.eh_frame:00000000000169DA                 db  48h ; H
.eh_frame:00000000000169DB                 db  0Eh
.eh_frame:00000000000169DC                 db  38h ; 8
.eh_frame:00000000000169DD                 db  83h
.eh_frame:00000000000169DE                 db    7
.eh_frame:00000000000169DF                 db  4Dh ; M
.eh_frame:00000000000169E0                 db  0Eh
.eh_frame:00000000000169E1                 db  40h ; @
.eh_frame:00000000000169E2                 db  72h ; r
.eh_frame:00000000000169E3                 db  0Eh
.eh_frame:00000000000169E4                 db  38h ; 8
.eh_frame:00000000000169E5                 db  41h ; A
.eh_frame:00000000000169E6                 db  0Eh
.eh_frame:00000000000169E7                 db  30h ; 0
.eh_frame:00000000000169E8                 db  41h ; A
.eh_frame:00000000000169E9                 db  0Eh
.eh_frame:00000000000169EA                 db  28h ; (
.eh_frame:00000000000169EB                 db  42h ; B
.eh_frame:00000000000169EC                 db  0Eh
.eh_frame:00000000000169ED                 db  20h
.eh_frame:00000000000169EE                 db  42h ; B
.eh_frame:00000000000169EF                 db  0Eh
.eh_frame:00000000000169F0                 db  18h
.eh_frame:00000000000169F1                 db  42h ; B
.eh_frame:00000000000169F2                 db  0Eh
.eh_frame:00000000000169F3                 db  10h
.eh_frame:00000000000169F4                 db  42h ; B
.eh_frame:00000000000169F5                 db  0Eh
.eh_frame:00000000000169F6                 db    8
.eh_frame:00000000000169F7                 db    0
.eh_frame:00000000000169F8                 db  14h
.eh_frame:00000000000169F9                 db    0
.eh_frame:00000000000169FA                 db    0
.eh_frame:00000000000169FB                 db    0
.eh_frame:00000000000169FC                 db  14h
.eh_frame:00000000000169FD                 db  15h
.eh_frame:00000000000169FE                 db    0
.eh_frame:00000000000169FF                 db    0
.eh_frame:0000000000016A00                 db  20h
.eh_frame:0000000000016A01                 db 0ACh
.eh_frame:0000000000016A02                 db 0FFh
.eh_frame:0000000000016A03                 db 0FFh
.eh_frame:0000000000016A04                 db    2
.eh_frame:0000000000016A05                 db    0
.eh_frame:0000000000016A06                 db    0
.eh_frame:0000000000016A07                 db    0
.eh_frame:0000000000016A08                 db    0
.eh_frame:0000000000016A09                 db    0
.eh_frame:0000000000016A0A                 db    0
.eh_frame:0000000000016A0B                 db    0
.eh_frame:0000000000016A0C                 db    0
.eh_frame:0000000000016A0D                 db    0
.eh_frame:0000000000016A0E                 db    0
.eh_frame:0000000000016A0F                 db    0
.eh_frame:0000000000016A10                 db  10h
.eh_frame:0000000000016A11                 db    0
.eh_frame:0000000000016A12                 db    0
.eh_frame:0000000000016A13                 db    0
.eh_frame:0000000000016A14                 db  2Ch ; ,
.eh_frame:0000000000016A15                 db  15h
.eh_frame:0000000000016A16                 db    0
.eh_frame:0000000000016A17                 db    0
.eh_frame:0000000000016A18                 db  18h
.eh_frame:0000000000016A19                 db 0ACh
.eh_frame:0000000000016A1A                 db 0FFh
.eh_frame:0000000000016A1B                 db 0FFh
.eh_frame:0000000000016A1C                 db  0Eh
.eh_frame:0000000000016A1D                 db    0
.eh_frame:0000000000016A1E                 db    0
.eh_frame:0000000000016A1F                 db    0
.eh_frame:0000000000016A20                 db    0
.eh_frame:0000000000016A21                 db    0
.eh_frame:0000000000016A22                 db    0
.eh_frame:0000000000016A23                 db    0
.eh_frame:0000000000016A24 __FRAME_END__   db    0
.eh_frame:0000000000016A25                 db    0
.eh_frame:0000000000016A26                 db    0
.eh_frame:0000000000016A27                 db    0
.eh_frame:0000000000016A27 _eh_frame       ends
.eh_frame:0000000000016A27
.init_array:0000000000216FF0 ; ELF Initialization Function Table
.init_array:0000000000216FF0 ; ===========================================================================
.init_array:0000000000216FF0
.init_array:0000000000216FF0 ; Segment type: Pure data
.init_array:0000000000216FF0 ; Segment permissions: Read/Write
.init_array:0000000000216FF0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000216FF0                 assume cs:_init_array
.init_array:0000000000216FF0                 ;org 216FF0h
.init_array:0000000000216FF0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000216FF0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000216FF0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000216FF0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000216FF0
.fini_array:0000000000216FF8 ; ELF Termination Function Table
.fini_array:0000000000216FF8 ; ===========================================================================
.fini_array:0000000000216FF8
.fini_array:0000000000216FF8 ; Segment type: Pure data
.fini_array:0000000000216FF8 ; Segment permissions: Read/Write
.fini_array:0000000000216FF8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000216FF8                 assume cs:_fini_array
.fini_array:0000000000216FF8                 ;org 216FF8h
.fini_array:0000000000216FF8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000216FF8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000216FF8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000216FF8
.data.rel.ro:0000000000217000 ; ===========================================================================
.data.rel.ro:0000000000217000
.data.rel.ro:0000000000217000 ; Segment type: Pure data
.data.rel.ro:0000000000217000 ; Segment permissions: Read/Write
.data.rel.ro:0000000000217000 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000217000                 assume cs:_data_rel_ro
.data.rel.ro:0000000000217000                 ;org 217000h
.data.rel.ro:0000000000217000 ; struct option long_options
.data.rel.ro:0000000000217000 long_options    dq offset aDate         ; name
.data.rel.ro:0000000000217000                                         ; DATA XREF: main:loc_2C80↑o
.data.rel.ro:0000000000217000                 dd 1                    ; has_arg ; "date"
.data.rel.ro:0000000000217000                 db 4 dup(0)
.data.rel.ro:0000000000217000                 dq 0                    ; flag
.data.rel.ro:0000000000217000                 dd 64h                  ; val
.data.rel.ro:0000000000217000                 db 4 dup(0)
.data.rel.ro:0000000000217020                 dq offset aDebug        ; "debug"
.data.rel.ro:0000000000217028                 db    0
.data.rel.ro:0000000000217029                 db    0
.data.rel.ro:000000000021702A                 db    0
.data.rel.ro:000000000021702B                 db    0
.data.rel.ro:000000000021702C                 db    0
.data.rel.ro:000000000021702D                 db    0
.data.rel.ro:000000000021702E                 db    0
.data.rel.ro:000000000021702F                 db    0
.data.rel.ro:0000000000217030                 db    0
.data.rel.ro:0000000000217031                 db    0
.data.rel.ro:0000000000217032                 db    0
.data.rel.ro:0000000000217033                 db    0
.data.rel.ro:0000000000217034                 db    0
.data.rel.ro:0000000000217035                 db    0
.data.rel.ro:0000000000217036                 db    0
.data.rel.ro:0000000000217037                 db    0
.data.rel.ro:0000000000217038                 db  81h
.data.rel.ro:0000000000217039                 db    0
.data.rel.ro:000000000021703A                 db    0
.data.rel.ro:000000000021703B                 db    0
.data.rel.ro:000000000021703C                 db    0
.data.rel.ro:000000000021703D                 db    0
.data.rel.ro:000000000021703E                 db    0
.data.rel.ro:000000000021703F                 db    0
.data.rel.ro:0000000000217040                 dq offset aFile         ; "file"
.data.rel.ro:0000000000217048                 db    1
.data.rel.ro:0000000000217049                 db    0
.data.rel.ro:000000000021704A                 db    0
.data.rel.ro:000000000021704B                 db    0
.data.rel.ro:000000000021704C                 db    0
.data.rel.ro:000000000021704D                 db    0
.data.rel.ro:000000000021704E                 db    0
.data.rel.ro:000000000021704F                 db    0
.data.rel.ro:0000000000217050                 db    0
.data.rel.ro:0000000000217051                 db    0
.data.rel.ro:0000000000217052                 db    0
.data.rel.ro:0000000000217053                 db    0
.data.rel.ro:0000000000217054                 db    0
.data.rel.ro:0000000000217055                 db    0
.data.rel.ro:0000000000217056                 db    0
.data.rel.ro:0000000000217057                 db    0
.data.rel.ro:0000000000217058                 db  66h ; f
.data.rel.ro:0000000000217059                 db    0
.data.rel.ro:000000000021705A                 db    0
.data.rel.ro:000000000021705B                 db    0
.data.rel.ro:000000000021705C                 db    0
.data.rel.ro:000000000021705D                 db    0
.data.rel.ro:000000000021705E                 db    0
.data.rel.ro:000000000021705F                 db    0
.data.rel.ro:0000000000217060                 dq offset aIso8601+2    ; "iso-8601"
.data.rel.ro:0000000000217068                 db    2
.data.rel.ro:0000000000217069                 db    0
.data.rel.ro:000000000021706A                 db    0
.data.rel.ro:000000000021706B                 db    0
.data.rel.ro:000000000021706C                 db    0
.data.rel.ro:000000000021706D                 db    0
.data.rel.ro:000000000021706E                 db    0
.data.rel.ro:000000000021706F                 db    0
.data.rel.ro:0000000000217070                 db    0
.data.rel.ro:0000000000217071                 db    0
.data.rel.ro:0000000000217072                 db    0
.data.rel.ro:0000000000217073                 db    0
.data.rel.ro:0000000000217074                 db    0
.data.rel.ro:0000000000217075                 db    0
.data.rel.ro:0000000000217076                 db    0
.data.rel.ro:0000000000217077                 db    0
.data.rel.ro:0000000000217078                 db  49h ; I
.data.rel.ro:0000000000217079                 db    0
.data.rel.ro:000000000021707A                 db    0
.data.rel.ro:000000000021707B                 db    0
.data.rel.ro:000000000021707C                 db    0
.data.rel.ro:000000000021707D                 db    0
.data.rel.ro:000000000021707E                 db    0
.data.rel.ro:000000000021707F                 db    0
.data.rel.ro:0000000000217080                 dq offset aReference    ; "reference"
.data.rel.ro:0000000000217088                 db    1
.data.rel.ro:0000000000217089                 db    0
.data.rel.ro:000000000021708A                 db    0
.data.rel.ro:000000000021708B                 db    0
.data.rel.ro:000000000021708C                 db    0
.data.rel.ro:000000000021708D                 db    0
.data.rel.ro:000000000021708E                 db    0
.data.rel.ro:000000000021708F                 db    0
.data.rel.ro:0000000000217090                 db    0
.data.rel.ro:0000000000217091                 db    0
.data.rel.ro:0000000000217092                 db    0
.data.rel.ro:0000000000217093                 db    0
.data.rel.ro:0000000000217094                 db    0
.data.rel.ro:0000000000217095                 db    0
.data.rel.ro:0000000000217096                 db    0
.data.rel.ro:0000000000217097                 db    0
.data.rel.ro:0000000000217098                 db  72h ; r
.data.rel.ro:0000000000217099                 db    0
.data.rel.ro:000000000021709A                 db    0
.data.rel.ro:000000000021709B                 db    0
.data.rel.ro:000000000021709C                 db    0
.data.rel.ro:000000000021709D                 db    0
.data.rel.ro:000000000021709E                 db    0
.data.rel.ro:000000000021709F                 db    0
.data.rel.ro:00000000002170A0                 dq offset aRfcEmail     ; "rfc-email"
.data.rel.ro:00000000002170A8                 db    0
.data.rel.ro:00000000002170A9                 db    0
.data.rel.ro:00000000002170AA                 db    0
.data.rel.ro:00000000002170AB                 db    0
.data.rel.ro:00000000002170AC                 db    0
.data.rel.ro:00000000002170AD                 db    0
.data.rel.ro:00000000002170AE                 db    0
.data.rel.ro:00000000002170AF                 db    0
.data.rel.ro:00000000002170B0                 db    0
.data.rel.ro:00000000002170B1                 db    0
.data.rel.ro:00000000002170B2                 db    0
.data.rel.ro:00000000002170B3                 db    0
.data.rel.ro:00000000002170B4                 db    0
.data.rel.ro:00000000002170B5                 db    0
.data.rel.ro:00000000002170B6                 db    0
.data.rel.ro:00000000002170B7                 db    0
.data.rel.ro:00000000002170B8                 db  52h ; R
.data.rel.ro:00000000002170B9                 db    0
.data.rel.ro:00000000002170BA                 db    0
.data.rel.ro:00000000002170BB                 db    0
.data.rel.ro:00000000002170BC                 db    0
.data.rel.ro:00000000002170BD                 db    0
.data.rel.ro:00000000002170BE                 db    0
.data.rel.ro:00000000002170BF                 db    0
.data.rel.ro:00000000002170C0                 dq offset aRfc822       ; "rfc-822"
.data.rel.ro:00000000002170C8                 db    0
.data.rel.ro:00000000002170C9                 db    0
.data.rel.ro:00000000002170CA                 db    0
.data.rel.ro:00000000002170CB                 db    0
.data.rel.ro:00000000002170CC                 db    0
.data.rel.ro:00000000002170CD                 db    0
.data.rel.ro:00000000002170CE                 db    0
.data.rel.ro:00000000002170CF                 db    0
.data.rel.ro:00000000002170D0                 db    0
.data.rel.ro:00000000002170D1                 db    0
.data.rel.ro:00000000002170D2                 db    0
.data.rel.ro:00000000002170D3                 db    0
.data.rel.ro:00000000002170D4                 db    0
.data.rel.ro:00000000002170D5                 db    0
.data.rel.ro:00000000002170D6                 db    0
.data.rel.ro:00000000002170D7                 db    0
.data.rel.ro:00000000002170D8                 db  52h ; R
.data.rel.ro:00000000002170D9                 db    0
.data.rel.ro:00000000002170DA                 db    0
.data.rel.ro:00000000002170DB                 db    0
.data.rel.ro:00000000002170DC                 db    0
.data.rel.ro:00000000002170DD                 db    0
.data.rel.ro:00000000002170DE                 db    0
.data.rel.ro:00000000002170DF                 db    0
.data.rel.ro:00000000002170E0                 dq offset aRfc2822      ; "rfc-2822"
.data.rel.ro:00000000002170E8                 db    0
.data.rel.ro:00000000002170E9                 db    0
.data.rel.ro:00000000002170EA                 db    0
.data.rel.ro:00000000002170EB                 db    0
.data.rel.ro:00000000002170EC                 db    0
.data.rel.ro:00000000002170ED                 db    0
.data.rel.ro:00000000002170EE                 db    0
.data.rel.ro:00000000002170EF                 db    0
.data.rel.ro:00000000002170F0                 db    0
.data.rel.ro:00000000002170F1                 db    0
.data.rel.ro:00000000002170F2                 db    0
.data.rel.ro:00000000002170F3                 db    0
.data.rel.ro:00000000002170F4                 db    0
.data.rel.ro:00000000002170F5                 db    0
.data.rel.ro:00000000002170F6                 db    0
.data.rel.ro:00000000002170F7                 db    0
.data.rel.ro:00000000002170F8                 db  52h ; R
.data.rel.ro:00000000002170F9                 db    0
.data.rel.ro:00000000002170FA                 db    0
.data.rel.ro:00000000002170FB                 db    0
.data.rel.ro:00000000002170FC                 db    0
.data.rel.ro:00000000002170FD                 db    0
.data.rel.ro:00000000002170FE                 db    0
.data.rel.ro:00000000002170FF                 db    0
.data.rel.ro:0000000000217100                 dq offset aRfc3339+2    ; "rfc-3339"
.data.rel.ro:0000000000217108                 db    1
.data.rel.ro:0000000000217109                 db    0
.data.rel.ro:000000000021710A                 db    0
.data.rel.ro:000000000021710B                 db    0
.data.rel.ro:000000000021710C                 db    0
.data.rel.ro:000000000021710D                 db    0
.data.rel.ro:000000000021710E                 db    0
.data.rel.ro:000000000021710F                 db    0
.data.rel.ro:0000000000217110                 db    0
.data.rel.ro:0000000000217111                 db    0
.data.rel.ro:0000000000217112                 db    0
.data.rel.ro:0000000000217113                 db    0
.data.rel.ro:0000000000217114                 db    0
.data.rel.ro:0000000000217115                 db    0
.data.rel.ro:0000000000217116                 db    0
.data.rel.ro:0000000000217117                 db    0
.data.rel.ro:0000000000217118                 db  80h
.data.rel.ro:0000000000217119                 db    0
.data.rel.ro:000000000021711A                 db    0
.data.rel.ro:000000000021711B                 db    0
.data.rel.ro:000000000021711C                 db    0
.data.rel.ro:000000000021711D                 db    0
.data.rel.ro:000000000021711E                 db    0
.data.rel.ro:000000000021711F                 db    0
.data.rel.ro:0000000000217120                 dq offset aSet          ; "set"
.data.rel.ro:0000000000217128                 db    1
.data.rel.ro:0000000000217129                 db    0
.data.rel.ro:000000000021712A                 db    0
.data.rel.ro:000000000021712B                 db    0
.data.rel.ro:000000000021712C                 db    0
.data.rel.ro:000000000021712D                 db    0
.data.rel.ro:000000000021712E                 db    0
.data.rel.ro:000000000021712F                 db    0
.data.rel.ro:0000000000217130                 db    0
.data.rel.ro:0000000000217131                 db    0
.data.rel.ro:0000000000217132                 db    0
.data.rel.ro:0000000000217133                 db    0
.data.rel.ro:0000000000217134                 db    0
.data.rel.ro:0000000000217135                 db    0
.data.rel.ro:0000000000217136                 db    0
.data.rel.ro:0000000000217137                 db    0
.data.rel.ro:0000000000217138                 db  73h ; s
.data.rel.ro:0000000000217139                 db    0
.data.rel.ro:000000000021713A                 db    0
.data.rel.ro:000000000021713B                 db    0
.data.rel.ro:000000000021713C                 db    0
.data.rel.ro:000000000021713D                 db    0
.data.rel.ro:000000000021713E                 db    0
.data.rel.ro:000000000021713F                 db    0
.data.rel.ro:0000000000217140                 dq offset aUct          ; "uct"
.data.rel.ro:0000000000217148                 db    0
.data.rel.ro:0000000000217149                 db    0
.data.rel.ro:000000000021714A                 db    0
.data.rel.ro:000000000021714B                 db    0
.data.rel.ro:000000000021714C                 db    0
.data.rel.ro:000000000021714D                 db    0
.data.rel.ro:000000000021714E                 db    0
.data.rel.ro:000000000021714F                 db    0
.data.rel.ro:0000000000217150                 db    0
.data.rel.ro:0000000000217151                 db    0
.data.rel.ro:0000000000217152                 db    0
.data.rel.ro:0000000000217153                 db    0
.data.rel.ro:0000000000217154                 db    0
.data.rel.ro:0000000000217155                 db    0
.data.rel.ro:0000000000217156                 db    0
.data.rel.ro:0000000000217157                 db    0
.data.rel.ro:0000000000217158                 db  75h ; u
.data.rel.ro:0000000000217159                 db    0
.data.rel.ro:000000000021715A                 db    0
.data.rel.ro:000000000021715B                 db    0
.data.rel.ro:000000000021715C                 db    0
.data.rel.ro:000000000021715D                 db    0
.data.rel.ro:000000000021715E                 db    0
.data.rel.ro:000000000021715F                 db    0
.data.rel.ro:0000000000217160                 dq offset aUtc          ; "utc"
.data.rel.ro:0000000000217168                 db    0
.data.rel.ro:0000000000217169                 db    0
.data.rel.ro:000000000021716A                 db    0
.data.rel.ro:000000000021716B                 db    0
.data.rel.ro:000000000021716C                 db    0
.data.rel.ro:000000000021716D                 db    0
.data.rel.ro:000000000021716E                 db    0
.data.rel.ro:000000000021716F                 db    0
.data.rel.ro:0000000000217170                 db    0
.data.rel.ro:0000000000217171                 db    0
.data.rel.ro:0000000000217172                 db    0
.data.rel.ro:0000000000217173                 db    0
.data.rel.ro:0000000000217174                 db    0
.data.rel.ro:0000000000217175                 db    0
.data.rel.ro:0000000000217176                 db    0
.data.rel.ro:0000000000217177                 db    0
.data.rel.ro:0000000000217178                 db  75h ; u
.data.rel.ro:0000000000217179                 db    0
.data.rel.ro:000000000021717A                 db    0
.data.rel.ro:000000000021717B                 db    0
.data.rel.ro:000000000021717C                 db    0
.data.rel.ro:000000000021717D                 db    0
.data.rel.ro:000000000021717E                 db    0
.data.rel.ro:000000000021717F                 db    0
.data.rel.ro:0000000000217180                 dq offset aUniversal    ; "universal"
.data.rel.ro:0000000000217188                 db    0
.data.rel.ro:0000000000217189                 db    0
.data.rel.ro:000000000021718A                 db    0
.data.rel.ro:000000000021718B                 db    0
.data.rel.ro:000000000021718C                 db    0
.data.rel.ro:000000000021718D                 db    0
.data.rel.ro:000000000021718E                 db    0
.data.rel.ro:000000000021718F                 db    0
.data.rel.ro:0000000000217190                 db    0
.data.rel.ro:0000000000217191                 db    0
.data.rel.ro:0000000000217192                 db    0
.data.rel.ro:0000000000217193                 db    0
.data.rel.ro:0000000000217194                 db    0
.data.rel.ro:0000000000217195                 db    0
.data.rel.ro:0000000000217196                 db    0
.data.rel.ro:0000000000217197                 db    0
.data.rel.ro:0000000000217198                 db  75h ; u
.data.rel.ro:0000000000217199                 db    0
.data.rel.ro:000000000021719A                 db    0
.data.rel.ro:000000000021719B                 db    0
.data.rel.ro:000000000021719C                 db    0
.data.rel.ro:000000000021719D                 db    0
.data.rel.ro:000000000021719E                 db    0
.data.rel.ro:000000000021719F                 db    0
.data.rel.ro:00000000002171A0                 dq offset aHelp         ; "help"
.data.rel.ro:00000000002171A8                 db    0
.data.rel.ro:00000000002171A9                 db    0
.data.rel.ro:00000000002171AA                 db    0
.data.rel.ro:00000000002171AB                 db    0
.data.rel.ro:00000000002171AC                 db    0
.data.rel.ro:00000000002171AD                 db    0
.data.rel.ro:00000000002171AE                 db    0
.data.rel.ro:00000000002171AF                 db    0
.data.rel.ro:00000000002171B0                 db    0
.data.rel.ro:00000000002171B1                 db    0
.data.rel.ro:00000000002171B2                 db    0
.data.rel.ro:00000000002171B3                 db    0
.data.rel.ro:00000000002171B4                 db    0
.data.rel.ro:00000000002171B5                 db    0
.data.rel.ro:00000000002171B6                 db    0
.data.rel.ro:00000000002171B7                 db    0
.data.rel.ro:00000000002171B8                 db  7Eh ; ~
.data.rel.ro:00000000002171B9                 db 0FFh
.data.rel.ro:00000000002171BA                 db 0FFh
.data.rel.ro:00000000002171BB                 db 0FFh
.data.rel.ro:00000000002171BC                 db    0
.data.rel.ro:00000000002171BD                 db    0
.data.rel.ro:00000000002171BE                 db    0
.data.rel.ro:00000000002171BF                 db    0
.data.rel.ro:00000000002171C0                 dq offset aVersion      ; "version"
.data.rel.ro:00000000002171C8                 db    0
.data.rel.ro:00000000002171C9                 db    0
.data.rel.ro:00000000002171CA                 db    0
.data.rel.ro:00000000002171CB                 db    0
.data.rel.ro:00000000002171CC                 db    0
.data.rel.ro:00000000002171CD                 db    0
.data.rel.ro:00000000002171CE                 db    0
.data.rel.ro:00000000002171CF                 db    0
.data.rel.ro:00000000002171D0                 db    0
.data.rel.ro:00000000002171D1                 db    0
.data.rel.ro:00000000002171D2                 db    0
.data.rel.ro:00000000002171D3                 db    0
.data.rel.ro:00000000002171D4                 db    0
.data.rel.ro:00000000002171D5                 db    0
.data.rel.ro:00000000002171D6                 db    0
.data.rel.ro:00000000002171D7                 db    0
.data.rel.ro:00000000002171D8                 db  7Dh ; }
.data.rel.ro:00000000002171D9                 db 0FFh
.data.rel.ro:00000000002171DA                 db 0FFh
.data.rel.ro:00000000002171DB                 db 0FFh
.data.rel.ro:00000000002171DC                 db    0
.data.rel.ro:00000000002171DD                 db    0
.data.rel.ro:00000000002171DE                 db    0
.data.rel.ro:00000000002171DF                 db    0
.data.rel.ro:00000000002171E0                 db    0
.data.rel.ro:00000000002171E1                 db    0
.data.rel.ro:00000000002171E2                 db    0
.data.rel.ro:00000000002171E3                 db    0
.data.rel.ro:00000000002171E4                 db    0
.data.rel.ro:00000000002171E5                 db    0
.data.rel.ro:00000000002171E6                 db    0
.data.rel.ro:00000000002171E7                 db    0
.data.rel.ro:00000000002171E8                 db    0
.data.rel.ro:00000000002171E9                 db    0
.data.rel.ro:00000000002171EA                 db    0
.data.rel.ro:00000000002171EB                 db    0
.data.rel.ro:00000000002171EC                 db    0
.data.rel.ro:00000000002171ED                 db    0
.data.rel.ro:00000000002171EE                 db    0
.data.rel.ro:00000000002171EF                 db    0
.data.rel.ro:00000000002171F0                 db    0
.data.rel.ro:00000000002171F1                 db    0
.data.rel.ro:00000000002171F2                 db    0
.data.rel.ro:00000000002171F3                 db    0
.data.rel.ro:00000000002171F4                 db    0
.data.rel.ro:00000000002171F5                 db    0
.data.rel.ro:00000000002171F6                 db    0
.data.rel.ro:00000000002171F7                 db    0
.data.rel.ro:00000000002171F8                 db    0
.data.rel.ro:00000000002171F9                 db    0
.data.rel.ro:00000000002171FA                 db    0
.data.rel.ro:00000000002171FB                 db    0
.data.rel.ro:00000000002171FC                 db    0
.data.rel.ro:00000000002171FD                 db    0
.data.rel.ro:00000000002171FE                 db    0
.data.rel.ro:00000000002171FF                 db    0
.data.rel.ro:0000000000217200 time_spec_string dq offset aHours       ; DATA XREF: main+235↑o
.data.rel.ro:0000000000217200                                         ; "hours"
.data.rel.ro:0000000000217208                 dq offset aMinutes      ; "minutes"
.data.rel.ro:0000000000217210 off_217210      dq offset aDate         ; DATA XREF: main+275↑o
.data.rel.ro:0000000000217210                                         ; "date"
.data.rel.ro:0000000000217218                 dq offset aSeconds      ; "seconds"
.data.rel.ro:0000000000217220                 dq offset off_11821
.data.rel.ro:0000000000217228                 align 20h
.data.rel.ro:0000000000217240 military_table  dq offset aA            ; DATA XREF: yyparse:loc_885C↑o
.data.rel.ro:0000000000217240                                         ; "A"
.data.rel.ro:0000000000217248                 db  11h
.data.rel.ro:0000000000217249                 db    1
.data.rel.ro:000000000021724A                 db    0
.data.rel.ro:000000000021724B                 db    0
.data.rel.ro:000000000021724C                 db 0F0h
.data.rel.ro:000000000021724D                 db 0F1h
.data.rel.ro:000000000021724E                 db 0FFh
.data.rel.ro:000000000021724F                 db 0FFh
.data.rel.ro:0000000000217250                 dq offset aB            ; "B"
.data.rel.ro:0000000000217258                 db  11h
.data.rel.ro:0000000000217259                 db    1
.data.rel.ro:000000000021725A                 db    0
.data.rel.ro:000000000021725B                 db    0
.data.rel.ro:000000000021725C                 db 0E0h
.data.rel.ro:000000000021725D                 db 0E3h
.data.rel.ro:000000000021725E                 db 0FFh
.data.rel.ro:000000000021725F                 db 0FFh
.data.rel.ro:0000000000217260                 dq offset locale        ; "C"
.data.rel.ro:0000000000217268                 db  11h
.data.rel.ro:0000000000217269                 db    1
.data.rel.ro:000000000021726A                 db    0
.data.rel.ro:000000000021726B                 db    0
.data.rel.ro:000000000021726C                 db 0D0h
.data.rel.ro:000000000021726D                 db 0D5h
.data.rel.ro:000000000021726E                 db 0FFh
.data.rel.ro:000000000021726F                 db 0FFh
.data.rel.ro:0000000000217270                 dq offset aSecond+5     ; "D"
.data.rel.ro:0000000000217278                 db  11h
.data.rel.ro:0000000000217279                 db    1
.data.rel.ro:000000000021727A                 db    0
.data.rel.ro:000000000021727B                 db    0
.data.rel.ro:000000000021727C                 db 0C0h
.data.rel.ro:000000000021727D                 db 0C7h
.data.rel.ro:000000000021727E                 db 0FFh
.data.rel.ro:000000000021727F                 db 0FFh
.data.rel.ro:0000000000217280                 dq offset aHence+4      ; "E"
.data.rel.ro:0000000000217288                 db  11h
.data.rel.ro:0000000000217289                 db    1
.data.rel.ro:000000000021728A                 db    0
.data.rel.ro:000000000021728B                 db    0
.data.rel.ro:000000000021728C                 db 0B0h
.data.rel.ro:000000000021728D                 db 0B9h
.data.rel.ro:000000000021728E                 db 0FFh
.data.rel.ro:000000000021728F                 db 0FFh
.data.rel.ro:0000000000217290                 dq offset asc_1340F     ; "F"
.data.rel.ro:0000000000217298                 db  11h
.data.rel.ro:0000000000217299                 db    1
.data.rel.ro:000000000021729A                 db    0
.data.rel.ro:000000000021729B                 db    0
.data.rel.ro:000000000021729C                 db 0A0h
.data.rel.ro:000000000021729D                 db 0ABh
.data.rel.ro:000000000021729E                 db 0FFh
.data.rel.ro:000000000021729F                 db 0FFh
.data.rel.ro:00000000002172A0                 dq offset aG            ; "G"
.data.rel.ro:00000000002172A8                 db  11h
.data.rel.ro:00000000002172A9                 db    1
.data.rel.ro:00000000002172AA                 db    0
.data.rel.ro:00000000002172AB                 db    0
.data.rel.ro:00000000002172AC                 db  90h
.data.rel.ro:00000000002172AD                 db  9Dh
.data.rel.ro:00000000002172AE                 db 0FFh
.data.rel.ro:00000000002172AF                 db 0FFh
.data.rel.ro:00000000002172B0                 dq offset aMarch+4      ; "H"
.data.rel.ro:00000000002172B8                 db  11h
.data.rel.ro:00000000002172B9                 db    1
.data.rel.ro:00000000002172BA                 db    0
.data.rel.ro:00000000002172BB                 db    0
.data.rel.ro:00000000002172BC                 db  80h
.data.rel.ro:00000000002172BD                 db  8Fh
.data.rel.ro:00000000002172BE                 db 0FFh
.data.rel.ro:00000000002172BF                 db 0FFh
.data.rel.ro:00000000002172C0                 dq offset aAscii+4      ; "I"
.data.rel.ro:00000000002172C8                 db  11h
.data.rel.ro:00000000002172C9                 db    1
.data.rel.ro:00000000002172CA                 db    0
.data.rel.ro:00000000002172CB                 db    0
.data.rel.ro:00000000002172CC                 db  70h ; p
.data.rel.ro:00000000002172CD                 db  81h
.data.rel.ro:00000000002172CE                 db 0FFh
.data.rel.ro:00000000002172CF                 db 0FFh
.data.rel.ro:00000000002172D0                 dq offset aWeek+3       ; "K"
.data.rel.ro:00000000002172D8                 db  11h
.data.rel.ro:00000000002172D9                 db    1
.data.rel.ro:00000000002172DA                 db    0
.data.rel.ro:00000000002172DB                 db    0
.data.rel.ro:00000000002172DC                 db  60h ; `
.data.rel.ro:00000000002172DD                 db  73h ; s
.data.rel.ro:00000000002172DE                 db 0FFh
.data.rel.ro:00000000002172DF                 db 0FFh
.data.rel.ro:00000000002172E0                 dq offset aApril+4      ; "L"
.data.rel.ro:00000000002172E8                 db  11h
.data.rel.ro:00000000002172E9                 db    1
.data.rel.ro:00000000002172EA                 db    0
.data.rel.ro:00000000002172EB                 db    0
.data.rel.ro:00000000002172EC                 db  50h ; P
.data.rel.ro:00000000002172ED                 db  65h ; e
.data.rel.ro:00000000002172EE                 db 0FFh
.data.rel.ro:00000000002172EF                 db 0FFh
.data.rel.ro:00000000002172F0                 dq offset aHM+4         ; "M"
.data.rel.ro:00000000002172F8                 db  11h
.data.rel.ro:00000000002172F9                 db    1
.data.rel.ro:00000000002172FA                 db    0
.data.rel.ro:00000000002172FB                 db    0
.data.rel.ro:00000000002172FC                 db  40h ; @
.data.rel.ro:00000000002172FD                 db  57h ; W
.data.rel.ro:00000000002172FE                 db 0FFh
.data.rel.ro:00000000002172FF                 db 0FFh
.data.rel.ro:0000000000217300                 dq offset aMin+2        ; "N"
.data.rel.ro:0000000000217308                 db  11h
.data.rel.ro:0000000000217309                 db    1
.data.rel.ro:000000000021730A                 db    0
.data.rel.ro:000000000021730B                 db    0
.data.rel.ro:000000000021730C                 db  10h
.data.rel.ro:000000000021730D                 db  0Eh
.data.rel.ro:000000000021730E                 db    0
.data.rel.ro:000000000021730F                 db    0
.data.rel.ro:0000000000217310                 dq offset aAgo+2        ; "O"
.data.rel.ro:0000000000217318                 db  11h
.data.rel.ro:0000000000217319                 db    1
.data.rel.ro:000000000021731A                 db    0
.data.rel.ro:000000000021731B                 db    0
.data.rel.ro:000000000021731C                 db  20h
.data.rel.ro:000000000021731D                 db  1Ch
.data.rel.ro:000000000021731E                 db    0
.data.rel.ro:000000000021731F                 db    0
.data.rel.ro:0000000000217320                 dq offset aP            ; "P"
.data.rel.ro:0000000000217328                 db  11h
.data.rel.ro:0000000000217329                 db    1
.data.rel.ro:000000000021732A                 db    0
.data.rel.ro:000000000021732B                 db    0
.data.rel.ro:000000000021732C                 db  30h ; 0
.data.rel.ro:000000000021732D                 db  2Ah ; *
.data.rel.ro:000000000021732E                 db    0
.data.rel.ro:000000000021732F                 db    0
.data.rel.ro:0000000000217330                 dq offset aQ            ; "Q"
.data.rel.ro:0000000000217338                 db  11h
.data.rel.ro:0000000000217339                 db    1
.data.rel.ro:000000000021733A                 db    0
.data.rel.ro:000000000021733B                 db    0
.data.rel.ro:000000000021733C                 db  40h ; @
.data.rel.ro:000000000021733D                 db  38h ; 8
.data.rel.ro:000000000021733E                 db    0
.data.rel.ro:000000000021733F                 db    0
.data.rel.ro:0000000000217340                 dq offset aYear+3       ; "R"
.data.rel.ro:0000000000217348                 db  11h
.data.rel.ro:0000000000217349                 db    1
.data.rel.ro:000000000021734A                 db    0
.data.rel.ro:000000000021734B                 db    0
.data.rel.ro:000000000021734C                 db  50h ; P
.data.rel.ro:000000000021734D                 db  46h ; F
.data.rel.ro:000000000021734E                 db    0
.data.rel.ro:000000000021734F                 db    0
.data.rel.ro:0000000000217350                 dq offset aHMS+7        ; "S"
.data.rel.ro:0000000000217358                 db  11h
.data.rel.ro:0000000000217359                 db    1
.data.rel.ro:000000000021735A                 db    0
.data.rel.ro:000000000021735B                 db    0
.data.rel.ro:000000000021735C                 db  60h ; `
.data.rel.ro:000000000021735D                 db  54h ; T
.data.rel.ro:000000000021735E                 db    0
.data.rel.ro:000000000021735F                 db    0
.data.rel.ro:0000000000217360                 dq offset aCat+2        ; "T"
.data.rel.ro:0000000000217368                 db  54h ; T
.data.rel.ro:0000000000217369                 db    0
.data.rel.ro:000000000021736A                 db    0
.data.rel.ro:000000000021736B                 db    0
.data.rel.ro:000000000021736C                 db    0
.data.rel.ro:000000000021736D                 db    0
.data.rel.ro:000000000021736E                 db    0
.data.rel.ro:000000000021736F                 db    0
.data.rel.ro:0000000000217370                 dq offset aU            ; "U"
.data.rel.ro:0000000000217378                 db  11h
.data.rel.ro:0000000000217379                 db    1
.data.rel.ro:000000000021737A                 db    0
.data.rel.ro:000000000021737B                 db    0
.data.rel.ro:000000000021737C                 db  80h
.data.rel.ro:000000000021737D                 db  70h ; p
.data.rel.ro:000000000021737E                 db    0
.data.rel.ro:000000000021737F                 db    0
.data.rel.ro:0000000000217380                 dq offset aV            ; "V"
.data.rel.ro:0000000000217388                 db  11h
.data.rel.ro:0000000000217389                 db    1
.data.rel.ro:000000000021738A                 db    0
.data.rel.ro:000000000021738B                 db    0
.data.rel.ro:000000000021738C                 db  90h
.data.rel.ro:000000000021738D                 db  7Eh ; ~
.data.rel.ro:000000000021738E                 db    0
.data.rel.ro:000000000021738F                 db    0
.data.rel.ro:0000000000217390                 dq offset aNow+2        ; "W"
.data.rel.ro:0000000000217398                 db  11h
.data.rel.ro:0000000000217399                 db    1
.data.rel.ro:000000000021739A                 db    0
.data.rel.ro:000000000021739B                 db    0
.data.rel.ro:000000000021739C                 db 0A0h
.data.rel.ro:000000000021739D                 db  8Ch
.data.rel.ro:000000000021739E                 db    0
.data.rel.ro:000000000021739F                 db    0
.data.rel.ro:00000000002173A0                 dq offset aPosix+4      ; "X"
.data.rel.ro:00000000002173A8                 db  11h
.data.rel.ro:00000000002173A9                 db    1
.data.rel.ro:00000000002173AA                 db    0
.data.rel.ro:00000000002173AB                 db    0
.data.rel.ro:00000000002173AC                 db 0B0h
.data.rel.ro:00000000002173AD                 db  9Ah
.data.rel.ro:00000000002173AE                 db    0
.data.rel.ro:00000000002173AF                 db    0
.data.rel.ro:00000000002173B0                 dq offset aABEHMSZY+16h ; "Y"
.data.rel.ro:00000000002173B8                 db  11h
.data.rel.ro:00000000002173B9                 db    1
.data.rel.ro:00000000002173BA                 db    0
.data.rel.ro:00000000002173BB                 db    0
.data.rel.ro:00000000002173BC                 db 0C0h
.data.rel.ro:00000000002173BD                 db 0A8h
.data.rel.ro:00000000002173BE                 db    0
.data.rel.ro:00000000002173BF                 db    0
.data.rel.ro:00000000002173C0                 dq offset aMez+2        ; "Z"
.data.rel.ro:00000000002173C8                 db  11h
.data.rel.ro:00000000002173C9                 db    1
.data.rel.ro:00000000002173CA                 db    0
.data.rel.ro:00000000002173CB                 db    0
.data.rel.ro:00000000002173CC                 db    0
.data.rel.ro:00000000002173CD                 db    0
.data.rel.ro:00000000002173CE                 db    0
.data.rel.ro:00000000002173CF                 db    0
.data.rel.ro:00000000002173D0                 db    0
.data.rel.ro:00000000002173D1                 db    0
.data.rel.ro:00000000002173D2                 db    0
.data.rel.ro:00000000002173D3                 db    0
.data.rel.ro:00000000002173D4                 db    0
.data.rel.ro:00000000002173D5                 db    0
.data.rel.ro:00000000002173D6                 db    0
.data.rel.ro:00000000002173D7                 db    0
.data.rel.ro:00000000002173D8                 db    0
.data.rel.ro:00000000002173D9                 db    0
.data.rel.ro:00000000002173DA                 db    0
.data.rel.ro:00000000002173DB                 db    0
.data.rel.ro:00000000002173DC                 db    0
.data.rel.ro:00000000002173DD                 db    0
.data.rel.ro:00000000002173DE                 db    0
.data.rel.ro:00000000002173DF                 db    0
.data.rel.ro:00000000002173E0 time_zone_table dq offset aWet          ; DATA XREF: lookup_zone:loc_6488↑o
.data.rel.ro:00000000002173E0                                         ; "WET"
.data.rel.ro:00000000002173E8                 db  11h
.data.rel.ro:00000000002173E9                 db    1
.data.rel.ro:00000000002173EA                 db    0
.data.rel.ro:00000000002173EB                 db    0
.data.rel.ro:00000000002173EC                 db    0
.data.rel.ro:00000000002173ED                 db    0
.data.rel.ro:00000000002173EE                 db    0
.data.rel.ro:00000000002173EF                 db    0
.data.rel.ro:00000000002173F0                 dq offset aWest         ; "WEST"
.data.rel.ro:00000000002173F8                 db  0Ch
.data.rel.ro:00000000002173F9                 db    1
.data.rel.ro:00000000002173FA                 db    0
.data.rel.ro:00000000002173FB                 db    0
.data.rel.ro:00000000002173FC                 db    0
.data.rel.ro:00000000002173FD                 db    0
.data.rel.ro:00000000002173FE                 db    0
.data.rel.ro:00000000002173FF                 db    0
.data.rel.ro:0000000000217400                 dq offset aBst          ; "BST"
.data.rel.ro:0000000000217408                 db  0Ch
.data.rel.ro:0000000000217409                 db    1
.data.rel.ro:000000000021740A                 db    0
.data.rel.ro:000000000021740B                 db    0
.data.rel.ro:000000000021740C                 db    0
.data.rel.ro:000000000021740D                 db    0
.data.rel.ro:000000000021740E                 db    0
.data.rel.ro:000000000021740F                 db    0
.data.rel.ro:0000000000217410                 dq offset aArt          ; "ART"
.data.rel.ro:0000000000217418                 db  11h
.data.rel.ro:0000000000217419                 db    1
.data.rel.ro:000000000021741A                 db    0
.data.rel.ro:000000000021741B                 db    0
.data.rel.ro:000000000021741C                 db 0D0h
.data.rel.ro:000000000021741D                 db 0D5h
.data.rel.ro:000000000021741E                 db 0FFh
.data.rel.ro:000000000021741F                 db 0FFh
.data.rel.ro:0000000000217420                 dq offset aBrt          ; "BRT"
.data.rel.ro:0000000000217428                 db  11h
.data.rel.ro:0000000000217429                 db    1
.data.rel.ro:000000000021742A                 db    0
.data.rel.ro:000000000021742B                 db    0
.data.rel.ro:000000000021742C                 db 0D0h
.data.rel.ro:000000000021742D                 db 0D5h
.data.rel.ro:000000000021742E                 db 0FFh
.data.rel.ro:000000000021742F                 db 0FFh
.data.rel.ro:0000000000217430                 dq offset aBrst         ; "BRST"
.data.rel.ro:0000000000217438                 db  0Ch
.data.rel.ro:0000000000217439                 db    1
.data.rel.ro:000000000021743A                 db    0
.data.rel.ro:000000000021743B                 db    0
.data.rel.ro:000000000021743C                 db 0D0h
.data.rel.ro:000000000021743D                 db 0D5h
.data.rel.ro:000000000021743E                 db 0FFh
.data.rel.ro:000000000021743F                 db 0FFh
.data.rel.ro:0000000000217440                 dq offset aNst          ; "NST"
.data.rel.ro:0000000000217448                 db  11h
.data.rel.ro:0000000000217449                 db    1
.data.rel.ro:000000000021744A                 db    0
.data.rel.ro:000000000021744B                 db    0
.data.rel.ro:000000000021744C                 db 0C8h
.data.rel.ro:000000000021744D                 db 0CEh
.data.rel.ro:000000000021744E                 db 0FFh
.data.rel.ro:000000000021744F                 db 0FFh
.data.rel.ro:0000000000217450                 dq offset aNdt          ; "NDT"
.data.rel.ro:0000000000217458                 db  0Ch
.data.rel.ro:0000000000217459                 db    1
.data.rel.ro:000000000021745A                 db    0
.data.rel.ro:000000000021745B                 db    0
.data.rel.ro:000000000021745C                 db 0C8h
.data.rel.ro:000000000021745D                 db 0CEh
.data.rel.ro:000000000021745E                 db 0FFh
.data.rel.ro:000000000021745F                 db 0FFh
.data.rel.ro:0000000000217460                 dq offset aHast+1       ; "AST"
.data.rel.ro:0000000000217468                 db  11h
.data.rel.ro:0000000000217469                 db    1
.data.rel.ro:000000000021746A                 db    0
.data.rel.ro:000000000021746B                 db    0
.data.rel.ro:000000000021746C                 db 0C0h
.data.rel.ro:000000000021746D                 db 0C7h
.data.rel.ro:000000000021746E                 db 0FFh
.data.rel.ro:000000000021746F                 db 0FFh
.data.rel.ro:0000000000217470                 dq offset aHadt+1       ; "ADT"
.data.rel.ro:0000000000217478                 db  0Ch
.data.rel.ro:0000000000217479                 db    1
.data.rel.ro:000000000021747A                 db    0
.data.rel.ro:000000000021747B                 db    0
.data.rel.ro:000000000021747C                 db 0C0h
.data.rel.ro:000000000021747D                 db 0C7h
.data.rel.ro:000000000021747E                 db 0FFh
.data.rel.ro:000000000021747F                 db 0FFh
.data.rel.ro:0000000000217480                 dq offset aClt          ; "CLT"
.data.rel.ro:0000000000217488                 db  11h
.data.rel.ro:0000000000217489                 db    1
.data.rel.ro:000000000021748A                 db    0
.data.rel.ro:000000000021748B                 db    0
.data.rel.ro:000000000021748C                 db 0C0h
.data.rel.ro:000000000021748D                 db 0C7h
.data.rel.ro:000000000021748E                 db 0FFh
.data.rel.ro:000000000021748F                 db 0FFh
.data.rel.ro:0000000000217490                 dq offset aClst         ; "CLST"
.data.rel.ro:0000000000217498                 db  0Ch
.data.rel.ro:0000000000217499                 db    1
.data.rel.ro:000000000021749A                 db    0
.data.rel.ro:000000000021749B                 db    0
.data.rel.ro:000000000021749C                 db 0C0h
.data.rel.ro:000000000021749D                 db 0C7h
.data.rel.ro:000000000021749E                 db 0FFh
.data.rel.ro:000000000021749F                 db 0FFh
.data.rel.ro:00000000002174A0                 dq offset aCest+1       ; "EST"
.data.rel.ro:00000000002174A8                 db  11h
.data.rel.ro:00000000002174A9                 db    1
.data.rel.ro:00000000002174AA                 db    0
.data.rel.ro:00000000002174AB                 db    0
.data.rel.ro:00000000002174AC                 db 0B0h
.data.rel.ro:00000000002174AD                 db 0B9h
.data.rel.ro:00000000002174AE                 db 0FFh
.data.rel.ro:00000000002174AF                 db 0FFh
.data.rel.ro:00000000002174B0                 dq offset aEdt          ; "EDT"
.data.rel.ro:00000000002174B8                 db  0Ch
.data.rel.ro:00000000002174B9                 db    1
.data.rel.ro:00000000002174BA                 db    0
.data.rel.ro:00000000002174BB                 db    0
.data.rel.ro:00000000002174BC                 db 0B0h
.data.rel.ro:00000000002174BD                 db 0B9h
.data.rel.ro:00000000002174BE                 db 0FFh
.data.rel.ro:00000000002174BF                 db 0FFh
.data.rel.ro:00000000002174C0                 dq offset aCst          ; "CST"
.data.rel.ro:00000000002174C8                 db  11h
.data.rel.ro:00000000002174C9                 db    1
.data.rel.ro:00000000002174CA                 db    0
.data.rel.ro:00000000002174CB                 db    0
.data.rel.ro:00000000002174CC                 db 0A0h
.data.rel.ro:00000000002174CD                 db 0ABh
.data.rel.ro:00000000002174CE                 db 0FFh
.data.rel.ro:00000000002174CF                 db 0FFh
.data.rel.ro:00000000002174D0                 dq offset aCdt          ; "CDT"
.data.rel.ro:00000000002174D8                 db  0Ch
.data.rel.ro:00000000002174D9                 db    1
.data.rel.ro:00000000002174DA                 db    0
.data.rel.ro:00000000002174DB                 db    0
.data.rel.ro:00000000002174DC                 db 0A0h
.data.rel.ro:00000000002174DD                 db 0ABh
.data.rel.ro:00000000002174DE                 db 0FFh
.data.rel.ro:00000000002174DF                 db 0FFh
.data.rel.ro:00000000002174E0                 dq offset aMst          ; "MST"
.data.rel.ro:00000000002174E8                 db  11h
.data.rel.ro:00000000002174E9                 db    1
.data.rel.ro:00000000002174EA                 db    0
.data.rel.ro:00000000002174EB                 db    0
.data.rel.ro:00000000002174EC                 db  90h
.data.rel.ro:00000000002174ED                 db  9Dh
.data.rel.ro:00000000002174EE                 db 0FFh
.data.rel.ro:00000000002174EF                 db 0FFh
.data.rel.ro:00000000002174F0                 dq offset aMdt          ; "MDT"
.data.rel.ro:00000000002174F8                 db  0Ch
.data.rel.ro:00000000002174F9                 db    1
.data.rel.ro:00000000002174FA                 db    0
.data.rel.ro:00000000002174FB                 db    0
.data.rel.ro:00000000002174FC                 db  90h
.data.rel.ro:00000000002174FD                 db  9Dh
.data.rel.ro:00000000002174FE                 db 0FFh
.data.rel.ro:00000000002174FF                 db 0FFh
.data.rel.ro:0000000000217500                 dq offset aPst          ; "PST"
.data.rel.ro:0000000000217508                 db  11h
.data.rel.ro:0000000000217509                 db    1
.data.rel.ro:000000000021750A                 db    0
.data.rel.ro:000000000021750B                 db    0
.data.rel.ro:000000000021750C                 db  80h
.data.rel.ro:000000000021750D                 db  8Fh
.data.rel.ro:000000000021750E                 db 0FFh
.data.rel.ro:000000000021750F                 db 0FFh
.data.rel.ro:0000000000217510                 dq offset aPdt          ; "PDT"
.data.rel.ro:0000000000217518                 db  0Ch
.data.rel.ro:0000000000217519                 db    1
.data.rel.ro:000000000021751A                 db    0
.data.rel.ro:000000000021751B                 db    0
.data.rel.ro:000000000021751C                 db  80h
.data.rel.ro:000000000021751D                 db  8Fh
.data.rel.ro:000000000021751E                 db 0FFh
.data.rel.ro:000000000021751F                 db 0FFh
.data.rel.ro:0000000000217520                 dq offset aAkst         ; "AKST"
.data.rel.ro:0000000000217528                 db  11h
.data.rel.ro:0000000000217529                 db    1
.data.rel.ro:000000000021752A                 db    0
.data.rel.ro:000000000021752B                 db    0
.data.rel.ro:000000000021752C                 db  70h ; p
.data.rel.ro:000000000021752D                 db  81h
.data.rel.ro:000000000021752E                 db 0FFh
.data.rel.ro:000000000021752F                 db 0FFh
.data.rel.ro:0000000000217530                 dq offset aAkdt         ; "AKDT"
.data.rel.ro:0000000000217538                 db  0Ch
.data.rel.ro:0000000000217539                 db    1
.data.rel.ro:000000000021753A                 db    0
.data.rel.ro:000000000021753B                 db    0
.data.rel.ro:000000000021753C                 db  70h ; p
.data.rel.ro:000000000021753D                 db  81h
.data.rel.ro:000000000021753E                 db 0FFh
.data.rel.ro:000000000021753F                 db 0FFh
.data.rel.ro:0000000000217540                 dq offset aHst          ; "HST"
.data.rel.ro:0000000000217548                 db  11h
.data.rel.ro:0000000000217549                 db    1
.data.rel.ro:000000000021754A                 db    0
.data.rel.ro:000000000021754B                 db    0
.data.rel.ro:000000000021754C                 db  60h ; `
.data.rel.ro:000000000021754D                 db  73h ; s
.data.rel.ro:000000000021754E                 db 0FFh
.data.rel.ro:000000000021754F                 db 0FFh
.data.rel.ro:0000000000217550                 dq offset aHast         ; "HAST"
.data.rel.ro:0000000000217558                 db  11h
.data.rel.ro:0000000000217559                 db    1
.data.rel.ro:000000000021755A                 db    0
.data.rel.ro:000000000021755B                 db    0
.data.rel.ro:000000000021755C                 db  60h ; `
.data.rel.ro:000000000021755D                 db  73h ; s
.data.rel.ro:000000000021755E                 db 0FFh
.data.rel.ro:000000000021755F                 db 0FFh
.data.rel.ro:0000000000217560                 dq offset aHadt         ; "HADT"
.data.rel.ro:0000000000217568                 db  0Ch
.data.rel.ro:0000000000217569                 db    1
.data.rel.ro:000000000021756A                 db    0
.data.rel.ro:000000000021756B                 db    0
.data.rel.ro:000000000021756C                 db  60h ; `
.data.rel.ro:000000000021756D                 db  73h ; s
.data.rel.ro:000000000021756E                 db 0FFh
.data.rel.ro:000000000021756F                 db 0FFh
.data.rel.ro:0000000000217570                 dq offset aSst          ; "SST"
.data.rel.ro:0000000000217578                 db  11h
.data.rel.ro:0000000000217579                 db    1
.data.rel.ro:000000000021757A                 db    0
.data.rel.ro:000000000021757B                 db    0
.data.rel.ro:000000000021757C                 db  40h ; @
.data.rel.ro:000000000021757D                 db  57h ; W
.data.rel.ro:000000000021757E                 db 0FFh
.data.rel.ro:000000000021757F                 db 0FFh
.data.rel.ro:0000000000217580                 dq offset aWat          ; "WAT"
.data.rel.ro:0000000000217588                 db  11h
.data.rel.ro:0000000000217589                 db    1
.data.rel.ro:000000000021758A                 db    0
.data.rel.ro:000000000021758B                 db    0
.data.rel.ro:000000000021758C                 db  10h
.data.rel.ro:000000000021758D                 db  0Eh
.data.rel.ro:000000000021758E                 db    0
.data.rel.ro:000000000021758F                 db    0
.data.rel.ro:0000000000217590                 dq offset aCet          ; "CET"
.data.rel.ro:0000000000217598                 db  11h
.data.rel.ro:0000000000217599                 db    1
.data.rel.ro:000000000021759A                 db    0
.data.rel.ro:000000000021759B                 db    0
.data.rel.ro:000000000021759C                 db  10h
.data.rel.ro:000000000021759D                 db  0Eh
.data.rel.ro:000000000021759E                 db    0
.data.rel.ro:000000000021759F                 db    0
.data.rel.ro:00000000002175A0                 dq offset aCest         ; "CEST"
.data.rel.ro:00000000002175A8                 db  0Ch
.data.rel.ro:00000000002175A9                 db    1
.data.rel.ro:00000000002175AA                 db    0
.data.rel.ro:00000000002175AB                 db    0
.data.rel.ro:00000000002175AC                 db  10h
.data.rel.ro:00000000002175AD                 db  0Eh
.data.rel.ro:00000000002175AE                 db    0
.data.rel.ro:00000000002175AF                 db    0
.data.rel.ro:00000000002175B0                 dq offset aMet          ; "MET"
.data.rel.ro:00000000002175B8                 db  11h
.data.rel.ro:00000000002175B9                 db    1
.data.rel.ro:00000000002175BA                 db    0
.data.rel.ro:00000000002175BB                 db    0
.data.rel.ro:00000000002175BC                 db  10h
.data.rel.ro:00000000002175BD                 db  0Eh
.data.rel.ro:00000000002175BE                 db    0
.data.rel.ro:00000000002175BF                 db    0
.data.rel.ro:00000000002175C0                 dq offset aMez          ; "MEZ"
.data.rel.ro:00000000002175C8                 db  11h
.data.rel.ro:00000000002175C9                 db    1
.data.rel.ro:00000000002175CA                 db    0
.data.rel.ro:00000000002175CB                 db    0
.data.rel.ro:00000000002175CC                 db  10h
.data.rel.ro:00000000002175CD                 db  0Eh
.data.rel.ro:00000000002175CE                 db    0
.data.rel.ro:00000000002175CF                 db    0
.data.rel.ro:00000000002175D0                 dq offset aMest         ; "MEST"
.data.rel.ro:00000000002175D8                 db  0Ch
.data.rel.ro:00000000002175D9                 db    1
.data.rel.ro:00000000002175DA                 db    0
.data.rel.ro:00000000002175DB                 db    0
.data.rel.ro:00000000002175DC                 db  10h
.data.rel.ro:00000000002175DD                 db  0Eh
.data.rel.ro:00000000002175DE                 db    0
.data.rel.ro:00000000002175DF                 db    0
.data.rel.ro:00000000002175E0                 dq offset aMesz         ; "MESZ"
.data.rel.ro:00000000002175E8                 db  0Ch
.data.rel.ro:00000000002175E9                 db    1
.data.rel.ro:00000000002175EA                 db    0
.data.rel.ro:00000000002175EB                 db    0
.data.rel.ro:00000000002175EC                 db  10h
.data.rel.ro:00000000002175ED                 db  0Eh
.data.rel.ro:00000000002175EE                 db    0
.data.rel.ro:00000000002175EF                 db    0
.data.rel.ro:00000000002175F0                 dq offset aEet          ; "EET"
.data.rel.ro:00000000002175F8                 db  11h
.data.rel.ro:00000000002175F9                 db    1
.data.rel.ro:00000000002175FA                 db    0
.data.rel.ro:00000000002175FB                 db    0
.data.rel.ro:00000000002175FC                 db  20h
.data.rel.ro:00000000002175FD                 db  1Ch
.data.rel.ro:00000000002175FE                 db    0
.data.rel.ro:00000000002175FF                 db    0
.data.rel.ro:0000000000217600                 dq offset aEest         ; "EEST"
.data.rel.ro:0000000000217608                 db  0Ch
.data.rel.ro:0000000000217609                 db    1
.data.rel.ro:000000000021760A                 db    0
.data.rel.ro:000000000021760B                 db    0
.data.rel.ro:000000000021760C                 db  20h
.data.rel.ro:000000000021760D                 db  1Ch
.data.rel.ro:000000000021760E                 db    0
.data.rel.ro:000000000021760F                 db    0
.data.rel.ro:0000000000217610                 dq offset aCat          ; "CAT"
.data.rel.ro:0000000000217618                 db  11h
.data.rel.ro:0000000000217619                 db    1
.data.rel.ro:000000000021761A                 db    0
.data.rel.ro:000000000021761B                 db    0
.data.rel.ro:000000000021761C                 db  20h
.data.rel.ro:000000000021761D                 db  1Ch
.data.rel.ro:000000000021761E                 db    0
.data.rel.ro:000000000021761F                 db    0
.data.rel.ro:0000000000217620                 dq offset aSast         ; "SAST"
.data.rel.ro:0000000000217628                 db  11h
.data.rel.ro:0000000000217629                 db    1
.data.rel.ro:000000000021762A                 db    0
.data.rel.ro:000000000021762B                 db    0
.data.rel.ro:000000000021762C                 db  20h
.data.rel.ro:000000000021762D                 db  1Ch
.data.rel.ro:000000000021762E                 db    0
.data.rel.ro:000000000021762F                 db    0
.data.rel.ro:0000000000217630                 dq offset aEat          ; "EAT"
.data.rel.ro:0000000000217638                 db  11h
.data.rel.ro:0000000000217639                 db    1
.data.rel.ro:000000000021763A                 db    0
.data.rel.ro:000000000021763B                 db    0
.data.rel.ro:000000000021763C                 db  30h ; 0
.data.rel.ro:000000000021763D                 db  2Ah ; *
.data.rel.ro:000000000021763E                 db    0
.data.rel.ro:000000000021763F                 db    0
.data.rel.ro:0000000000217640                 dq offset aMsk          ; "MSK"
.data.rel.ro:0000000000217648                 db  11h
.data.rel.ro:0000000000217649                 db    1
.data.rel.ro:000000000021764A                 db    0
.data.rel.ro:000000000021764B                 db    0
.data.rel.ro:000000000021764C                 db  30h ; 0
.data.rel.ro:000000000021764D                 db  2Ah ; *
.data.rel.ro:000000000021764E                 db    0
.data.rel.ro:000000000021764F                 db    0
.data.rel.ro:0000000000217650                 dq offset aMsd          ; "MSD"
.data.rel.ro:0000000000217658                 db  0Ch
.data.rel.ro:0000000000217659                 db    1
.data.rel.ro:000000000021765A                 db    0
.data.rel.ro:000000000021765B                 db    0
.data.rel.ro:000000000021765C                 db  30h ; 0
.data.rel.ro:000000000021765D                 db  2Ah ; *
.data.rel.ro:000000000021765E                 db    0
.data.rel.ro:000000000021765F                 db    0
.data.rel.ro:0000000000217660                 dq offset aIst          ; "IST"
.data.rel.ro:0000000000217668                 db  11h
.data.rel.ro:0000000000217669                 db    1
.data.rel.ro:000000000021766A                 db    0
.data.rel.ro:000000000021766B                 db    0
.data.rel.ro:000000000021766C                 db  58h ; X
.data.rel.ro:000000000021766D                 db  4Dh ; M
.data.rel.ro:000000000021766E                 db    0
.data.rel.ro:000000000021766F                 db    0
.data.rel.ro:0000000000217670                 dq offset aSgt          ; "SGT"
.data.rel.ro:0000000000217678                 db  11h
.data.rel.ro:0000000000217679                 db    1
.data.rel.ro:000000000021767A                 db    0
.data.rel.ro:000000000021767B                 db    0
.data.rel.ro:000000000021767C                 db  80h
.data.rel.ro:000000000021767D                 db  70h ; p
.data.rel.ro:000000000021767E                 db    0
.data.rel.ro:000000000021767F                 db    0
.data.rel.ro:0000000000217680                 dq offset aAkst+1       ; "KST"
.data.rel.ro:0000000000217688                 db  11h
.data.rel.ro:0000000000217689                 db    1
.data.rel.ro:000000000021768A                 db    0
.data.rel.ro:000000000021768B                 db    0
.data.rel.ro:000000000021768C                 db  90h
.data.rel.ro:000000000021768D                 db  7Eh ; ~
.data.rel.ro:000000000021768E                 db    0
.data.rel.ro:000000000021768F                 db    0
.data.rel.ro:0000000000217690                 dq offset aJst          ; "JST"
.data.rel.ro:0000000000217698                 db  11h
.data.rel.ro:0000000000217699                 db    1
.data.rel.ro:000000000021769A                 db    0
.data.rel.ro:000000000021769B                 db    0
.data.rel.ro:000000000021769C                 db  90h
.data.rel.ro:000000000021769D                 db  7Eh ; ~
.data.rel.ro:000000000021769E                 db    0
.data.rel.ro:000000000021769F                 db    0
.data.rel.ro:00000000002176A0                 dq offset aGst          ; "GST"
.data.rel.ro:00000000002176A8                 db  11h
.data.rel.ro:00000000002176A9                 db    1
.data.rel.ro:00000000002176AA                 db    0
.data.rel.ro:00000000002176AB                 db    0
.data.rel.ro:00000000002176AC                 db 0A0h
.data.rel.ro:00000000002176AD                 db  8Ch
.data.rel.ro:00000000002176AE                 db    0
.data.rel.ro:00000000002176AF                 db    0
.data.rel.ro:00000000002176B0                 dq offset aNzst         ; "NZST"
.data.rel.ro:00000000002176B8                 db  11h
.data.rel.ro:00000000002176B9                 db    1
.data.rel.ro:00000000002176BA                 db    0
.data.rel.ro:00000000002176BB                 db    0
.data.rel.ro:00000000002176BC                 db 0C0h
.data.rel.ro:00000000002176BD                 db 0A8h
.data.rel.ro:00000000002176BE                 db    0
.data.rel.ro:00000000002176BF                 db    0
.data.rel.ro:00000000002176C0                 dq offset aNzdt         ; "NZDT"
.data.rel.ro:00000000002176C8                 db  0Ch
.data.rel.ro:00000000002176C9                 db    1
.data.rel.ro:00000000002176CA                 db    0
.data.rel.ro:00000000002176CB                 db    0
.data.rel.ro:00000000002176CC                 db 0C0h
.data.rel.ro:00000000002176CD                 db 0A8h
.data.rel.ro:00000000002176CE                 db    0
.data.rel.ro:00000000002176CF                 db    0
.data.rel.ro:00000000002176D0                 db    0
.data.rel.ro:00000000002176D1                 db    0
.data.rel.ro:00000000002176D2                 db    0
.data.rel.ro:00000000002176D3                 db    0
.data.rel.ro:00000000002176D4                 db    0
.data.rel.ro:00000000002176D5                 db    0
.data.rel.ro:00000000002176D6                 db    0
.data.rel.ro:00000000002176D7                 db    0
.data.rel.ro:00000000002176D8                 db    0
.data.rel.ro:00000000002176D9                 db    0
.data.rel.ro:00000000002176DA                 db    0
.data.rel.ro:00000000002176DB                 db    0
.data.rel.ro:00000000002176DC                 db    0
.data.rel.ro:00000000002176DD                 db    0
.data.rel.ro:00000000002176DE                 db    0
.data.rel.ro:00000000002176DF                 db    0
.data.rel.ro:00000000002176E0 universal_time_zone_table dq offset aGmt
.data.rel.ro:00000000002176E0                                         ; DATA XREF: lookup_zone+11↑o
.data.rel.ro:00000000002176E0                                         ; "GMT"
.data.rel.ro:00000000002176E8                 db  11h
.data.rel.ro:00000000002176E9                 db    1
.data.rel.ro:00000000002176EA                 db    0
.data.rel.ro:00000000002176EB                 db    0
.data.rel.ro:00000000002176EC                 db    0
.data.rel.ro:00000000002176ED                 db    0
.data.rel.ro:00000000002176EE                 db    0
.data.rel.ro:00000000002176EF                 db    0
.data.rel.ro:00000000002176F0                 dq offset aUt           ; "UT"
.data.rel.ro:00000000002176F8                 db  11h
.data.rel.ro:00000000002176F9                 db    1
.data.rel.ro:00000000002176FA                 db    0
.data.rel.ro:00000000002176FB                 db    0
.data.rel.ro:00000000002176FC                 db    0
.data.rel.ro:00000000002176FD                 db    0
.data.rel.ro:00000000002176FE                 db    0
.data.rel.ro:00000000002176FF                 db    0
.data.rel.ro:0000000000217700                 dq offset aTimespecAlways+15h ; "UTC"
.data.rel.ro:0000000000217708                 db  11h
.data.rel.ro:0000000000217709                 db    1
.data.rel.ro:000000000021770A                 db    0
.data.rel.ro:000000000021770B                 db    0
.data.rel.ro:000000000021770C                 db    0
.data.rel.ro:000000000021770D                 db    0
.data.rel.ro:000000000021770E                 db    0
.data.rel.ro:000000000021770F                 db    0
.data.rel.ro:0000000000217710                 db    0
.data.rel.ro:0000000000217711                 db    0
.data.rel.ro:0000000000217712                 db    0
.data.rel.ro:0000000000217713                 db    0
.data.rel.ro:0000000000217714                 db    0
.data.rel.ro:0000000000217715                 db    0
.data.rel.ro:0000000000217716                 db    0
.data.rel.ro:0000000000217717                 db    0
.data.rel.ro:0000000000217718                 db    0
.data.rel.ro:0000000000217719                 db    0
.data.rel.ro:000000000021771A                 db    0
.data.rel.ro:000000000021771B                 db    0
.data.rel.ro:000000000021771C                 db    0
.data.rel.ro:000000000021771D                 db    0
.data.rel.ro:000000000021771E                 db    0
.data.rel.ro:000000000021771F                 db    0
.data.rel.ro:0000000000217720 relative_time_table dq offset aTomorrow ; DATA XREF: yyparse:loc_8694↑o
.data.rel.ro:0000000000217720                                         ; "TOMORROW"
.data.rel.ro:0000000000217728                 db  0Ah
.data.rel.ro:0000000000217729                 db    1
.data.rel.ro:000000000021772A                 db    0
.data.rel.ro:000000000021772B                 db    0
.data.rel.ro:000000000021772C                 db    1
.data.rel.ro:000000000021772D                 db    0
.data.rel.ro:000000000021772E                 db    0
.data.rel.ro:000000000021772F                 db    0
.data.rel.ro:0000000000217730                 dq offset aYesterday    ; "YESTERDAY"
.data.rel.ro:0000000000217738                 db  0Ah
.data.rel.ro:0000000000217739                 db    1
.data.rel.ro:000000000021773A                 db    0
.data.rel.ro:000000000021773B                 db    0
.data.rel.ro:000000000021773C                 db 0FFh
.data.rel.ro:000000000021773D                 db 0FFh
.data.rel.ro:000000000021773E                 db 0FFh
.data.rel.ro:000000000021773F                 db 0FFh
.data.rel.ro:0000000000217740                 dq offset aToday        ; "TODAY"
.data.rel.ro:0000000000217748                 db  0Ah
.data.rel.ro:0000000000217749                 db    1
.data.rel.ro:000000000021774A                 db    0
.data.rel.ro:000000000021774B                 db    0
.data.rel.ro:000000000021774C                 db    0
.data.rel.ro:000000000021774D                 db    0
.data.rel.ro:000000000021774E                 db    0
.data.rel.ro:000000000021774F                 db    0
.data.rel.ro:0000000000217750                 dq offset aNow          ; "NOW"
.data.rel.ro:0000000000217758                 db  0Ah
.data.rel.ro:0000000000217759                 db    1
.data.rel.ro:000000000021775A                 db    0
.data.rel.ro:000000000021775B                 db    0
.data.rel.ro:000000000021775C                 db    0
.data.rel.ro:000000000021775D                 db    0
.data.rel.ro:000000000021775E                 db    0
.data.rel.ro:000000000021775F                 db    0
.data.rel.ro:0000000000217760                 dq offset aLast         ; "LAST"
.data.rel.ro:0000000000217768                 db  10h
.data.rel.ro:0000000000217769                 db    1
.data.rel.ro:000000000021776A                 db    0
.data.rel.ro:000000000021776B                 db    0
.data.rel.ro:000000000021776C                 db 0FFh
.data.rel.ro:000000000021776D                 db 0FFh
.data.rel.ro:000000000021776E                 db 0FFh
.data.rel.ro:000000000021776F                 db 0FFh
.data.rel.ro:0000000000217770                 dq offset aThis         ; "THIS"
.data.rel.ro:0000000000217778                 db  10h
.data.rel.ro:0000000000217779                 db    1
.data.rel.ro:000000000021777A                 db    0
.data.rel.ro:000000000021777B                 db    0
.data.rel.ro:000000000021777C                 db    0
.data.rel.ro:000000000021777D                 db    0
.data.rel.ro:000000000021777E                 db    0
.data.rel.ro:000000000021777F                 db    0
.data.rel.ro:0000000000217780                 dq offset aNext         ; "NEXT"
.data.rel.ro:0000000000217788                 db  10h
.data.rel.ro:0000000000217789                 db    1
.data.rel.ro:000000000021778A                 db    0
.data.rel.ro:000000000021778B                 db    0
.data.rel.ro:000000000021778C                 db    1
.data.rel.ro:000000000021778D                 db    0
.data.rel.ro:000000000021778E                 db    0
.data.rel.ro:000000000021778F                 db    0
.data.rel.ro:0000000000217790                 dq offset aFirst        ; "FIRST"
.data.rel.ro:0000000000217798                 db  10h
.data.rel.ro:0000000000217799                 db    1
.data.rel.ro:000000000021779A                 db    0
.data.rel.ro:000000000021779B                 db    0
.data.rel.ro:000000000021779C                 db    1
.data.rel.ro:000000000021779D                 db    0
.data.rel.ro:000000000021779E                 db    0
.data.rel.ro:000000000021779F                 db    0
.data.rel.ro:00000000002177A0                 dq offset aThird        ; "THIRD"
.data.rel.ro:00000000002177A8                 db  10h
.data.rel.ro:00000000002177A9                 db    1
.data.rel.ro:00000000002177AA                 db    0
.data.rel.ro:00000000002177AB                 db    0
.data.rel.ro:00000000002177AC                 db    3
.data.rel.ro:00000000002177AD                 db    0
.data.rel.ro:00000000002177AE                 db    0
.data.rel.ro:00000000002177AF                 db    0
.data.rel.ro:00000000002177B0                 dq offset aFourth       ; "FOURTH"
.data.rel.ro:00000000002177B8                 db  10h
.data.rel.ro:00000000002177B9                 db    1
.data.rel.ro:00000000002177BA                 db    0
.data.rel.ro:00000000002177BB                 db    0
.data.rel.ro:00000000002177BC                 db    4
.data.rel.ro:00000000002177BD                 db    0
.data.rel.ro:00000000002177BE                 db    0
.data.rel.ro:00000000002177BF                 db    0
.data.rel.ro:00000000002177C0                 dq offset aFifth        ; "FIFTH"
.data.rel.ro:00000000002177C8                 db  10h
.data.rel.ro:00000000002177C9                 db    1
.data.rel.ro:00000000002177CA                 db    0
.data.rel.ro:00000000002177CB                 db    0
.data.rel.ro:00000000002177CC                 db    5
.data.rel.ro:00000000002177CD                 db    0
.data.rel.ro:00000000002177CE                 db    0
.data.rel.ro:00000000002177CF                 db    0
.data.rel.ro:00000000002177D0                 dq offset aSixth        ; "SIXTH"
.data.rel.ro:00000000002177D8                 db  10h
.data.rel.ro:00000000002177D9                 db    1
.data.rel.ro:00000000002177DA                 db    0
.data.rel.ro:00000000002177DB                 db    0
.data.rel.ro:00000000002177DC                 db    6
.data.rel.ro:00000000002177DD                 db    0
.data.rel.ro:00000000002177DE                 db    0
.data.rel.ro:00000000002177DF                 db    0
.data.rel.ro:00000000002177E0                 dq offset aSeventh      ; "SEVENTH"
.data.rel.ro:00000000002177E8                 db  10h
.data.rel.ro:00000000002177E9                 db    1
.data.rel.ro:00000000002177EA                 db    0
.data.rel.ro:00000000002177EB                 db    0
.data.rel.ro:00000000002177EC                 db    7
.data.rel.ro:00000000002177ED                 db    0
.data.rel.ro:00000000002177EE                 db    0
.data.rel.ro:00000000002177EF                 db    0
.data.rel.ro:00000000002177F0                 dq offset aEighth       ; "EIGHTH"
.data.rel.ro:00000000002177F8                 db  10h
.data.rel.ro:00000000002177F9                 db    1
.data.rel.ro:00000000002177FA                 db    0
.data.rel.ro:00000000002177FB                 db    0
.data.rel.ro:00000000002177FC                 db    8
.data.rel.ro:00000000002177FD                 db    0
.data.rel.ro:00000000002177FE                 db    0
.data.rel.ro:00000000002177FF                 db    0
.data.rel.ro:0000000000217800                 dq offset aNinth        ; "NINTH"
.data.rel.ro:0000000000217808                 db  10h
.data.rel.ro:0000000000217809                 db    1
.data.rel.ro:000000000021780A                 db    0
.data.rel.ro:000000000021780B                 db    0
.data.rel.ro:000000000021780C                 db    9
.data.rel.ro:000000000021780D                 db    0
.data.rel.ro:000000000021780E                 db    0
.data.rel.ro:000000000021780F                 db    0
.data.rel.ro:0000000000217810                 dq offset aTenth        ; "TENTH"
.data.rel.ro:0000000000217818                 db  10h
.data.rel.ro:0000000000217819                 db    1
.data.rel.ro:000000000021781A                 db    0
.data.rel.ro:000000000021781B                 db    0
.data.rel.ro:000000000021781C                 db  0Ah
.data.rel.ro:000000000021781D                 db    0
.data.rel.ro:000000000021781E                 db    0
.data.rel.ro:000000000021781F                 db    0
.data.rel.ro:0000000000217820                 dq offset aEleventh     ; "ELEVENTH"
.data.rel.ro:0000000000217828                 db  10h
.data.rel.ro:0000000000217829                 db    1
.data.rel.ro:000000000021782A                 db    0
.data.rel.ro:000000000021782B                 db    0
.data.rel.ro:000000000021782C                 db  0Bh
.data.rel.ro:000000000021782D                 db    0
.data.rel.ro:000000000021782E                 db    0
.data.rel.ro:000000000021782F                 db    0
.data.rel.ro:0000000000217830                 dq offset aTwelfth      ; "TWELFTH"
.data.rel.ro:0000000000217838                 db  10h
.data.rel.ro:0000000000217839                 db    1
.data.rel.ro:000000000021783A                 db    0
.data.rel.ro:000000000021783B                 db    0
.data.rel.ro:000000000021783C                 db  0Ch
.data.rel.ro:000000000021783D                 db    0
.data.rel.ro:000000000021783E                 db    0
.data.rel.ro:000000000021783F                 db    0
.data.rel.ro:0000000000217840                 dq offset aAgo          ; "AGO"
.data.rel.ro:0000000000217848                 db    2
.data.rel.ro:0000000000217849                 db    1
.data.rel.ro:000000000021784A                 db    0
.data.rel.ro:000000000021784B                 db    0
.data.rel.ro:000000000021784C                 db 0FFh
.data.rel.ro:000000000021784D                 db 0FFh
.data.rel.ro:000000000021784E                 db 0FFh
.data.rel.ro:000000000021784F                 db 0FFh
.data.rel.ro:0000000000217850                 dq offset aHence        ; "HENCE"
.data.rel.ro:0000000000217858                 db    2
.data.rel.ro:0000000000217859                 db    1
.data.rel.ro:000000000021785A                 db    0
.data.rel.ro:000000000021785B                 db    0
.data.rel.ro:000000000021785C                 db    1
.data.rel.ro:000000000021785D                 db    0
.data.rel.ro:000000000021785E                 db    0
.data.rel.ro:000000000021785F                 db    0
.data.rel.ro:0000000000217860                 db    0
.data.rel.ro:0000000000217861                 db    0
.data.rel.ro:0000000000217862                 db    0
.data.rel.ro:0000000000217863                 db    0
.data.rel.ro:0000000000217864                 db    0
.data.rel.ro:0000000000217865                 db    0
.data.rel.ro:0000000000217866                 db    0
.data.rel.ro:0000000000217867                 db    0
.data.rel.ro:0000000000217868                 db    0
.data.rel.ro:0000000000217869                 db    0
.data.rel.ro:000000000021786A                 db    0
.data.rel.ro:000000000021786B                 db    0
.data.rel.ro:000000000021786C                 db    0
.data.rel.ro:000000000021786D                 db    0
.data.rel.ro:000000000021786E                 db    0
.data.rel.ro:000000000021786F                 db    0
.data.rel.ro:0000000000217870                 db    0
.data.rel.ro:0000000000217871                 db    0
.data.rel.ro:0000000000217872                 db    0
.data.rel.ro:0000000000217873                 db    0
.data.rel.ro:0000000000217874                 db    0
.data.rel.ro:0000000000217875                 db    0
.data.rel.ro:0000000000217876                 db    0
.data.rel.ro:0000000000217877                 db    0
.data.rel.ro:0000000000217878                 db    0
.data.rel.ro:0000000000217879                 db    0
.data.rel.ro:000000000021787A                 db    0
.data.rel.ro:000000000021787B                 db    0
.data.rel.ro:000000000021787C                 db    0
.data.rel.ro:000000000021787D                 db    0
.data.rel.ro:000000000021787E                 db    0
.data.rel.ro:000000000021787F                 db    0
.data.rel.ro:0000000000217880 time_units_table dq offset aYear        ; DATA XREF: yyparse+19BE↑o
.data.rel.ro:0000000000217880                                         ; yyparse:loc_8771↑o
.data.rel.ro:0000000000217880                                         ; "YEAR"
.data.rel.ro:0000000000217888                 db    4
.data.rel.ro:0000000000217889                 db    1
.data.rel.ro:000000000021788A                 db    0
.data.rel.ro:000000000021788B                 db    0
.data.rel.ro:000000000021788C                 db    1
.data.rel.ro:000000000021788D                 db    0
.data.rel.ro:000000000021788E                 db    0
.data.rel.ro:000000000021788F                 db    0
.data.rel.ro:0000000000217890                 dq offset aMonth        ; "MONTH"
.data.rel.ro:0000000000217898                 db    5
.data.rel.ro:0000000000217899                 db    1
.data.rel.ro:000000000021789A                 db    0
.data.rel.ro:000000000021789B                 db    0
.data.rel.ro:000000000021789C                 db    1
.data.rel.ro:000000000021789D                 db    0
.data.rel.ro:000000000021789E                 db    0
.data.rel.ro:000000000021789F                 db    0
.data.rel.ro:00000000002178A0                 dq offset aFortnight    ; "FORTNIGHT"
.data.rel.ro:00000000002178A8                 db    9
.data.rel.ro:00000000002178A9                 db    1
.data.rel.ro:00000000002178AA                 db    0
.data.rel.ro:00000000002178AB                 db    0
.data.rel.ro:00000000002178AC                 db  0Eh
.data.rel.ro:00000000002178AD                 db    0
.data.rel.ro:00000000002178AE                 db    0
.data.rel.ro:00000000002178AF                 db    0
.data.rel.ro:00000000002178B0                 dq offset aWeek         ; "WEEK"
.data.rel.ro:00000000002178B8                 db    9
.data.rel.ro:00000000002178B9                 db    1
.data.rel.ro:00000000002178BA                 db    0
.data.rel.ro:00000000002178BB                 db    0
.data.rel.ro:00000000002178BC                 db    7
.data.rel.ro:00000000002178BD                 db    0
.data.rel.ro:00000000002178BE                 db    0
.data.rel.ro:00000000002178BF                 db    0
.data.rel.ro:00000000002178C0                 dq offset aFriday+3     ; "DAY"
.data.rel.ro:00000000002178C8                 db    9
.data.rel.ro:00000000002178C9                 db    1
.data.rel.ro:00000000002178CA                 db    0
.data.rel.ro:00000000002178CB                 db    0
.data.rel.ro:00000000002178CC                 db    1
.data.rel.ro:00000000002178CD                 db    0
.data.rel.ro:00000000002178CE                 db    0
.data.rel.ro:00000000002178CF                 db    0
.data.rel.ro:00000000002178D0                 dq offset aHour         ; "HOUR"
.data.rel.ro:00000000002178D8                 db    6
.data.rel.ro:00000000002178D9                 db    1
.data.rel.ro:00000000002178DA                 db    0
.data.rel.ro:00000000002178DB                 db    0
.data.rel.ro:00000000002178DC                 db    1
.data.rel.ro:00000000002178DD                 db    0
.data.rel.ro:00000000002178DE                 db    0
.data.rel.ro:00000000002178DF                 db    0
.data.rel.ro:00000000002178E0                 dq offset aMinute       ; "MINUTE"
.data.rel.ro:00000000002178E8                 db    7
.data.rel.ro:00000000002178E9                 db    1
.data.rel.ro:00000000002178EA                 db    0
.data.rel.ro:00000000002178EB                 db    0
.data.rel.ro:00000000002178EC                 db    1
.data.rel.ro:00000000002178ED                 db    0
.data.rel.ro:00000000002178EE                 db    0
.data.rel.ro:00000000002178EF                 db    0
.data.rel.ro:00000000002178F0                 dq offset aMin          ; "MIN"
.data.rel.ro:00000000002178F8                 db    7
.data.rel.ro:00000000002178F9                 db    1
.data.rel.ro:00000000002178FA                 db    0
.data.rel.ro:00000000002178FB                 db    0
.data.rel.ro:00000000002178FC                 db    1
.data.rel.ro:00000000002178FD                 db    0
.data.rel.ro:00000000002178FE                 db    0
.data.rel.ro:00000000002178FF                 db    0
.data.rel.ro:0000000000217900                 dq offset aSecond       ; "SECOND"
.data.rel.ro:0000000000217908                 db    8
.data.rel.ro:0000000000217909                 db    1
.data.rel.ro:000000000021790A                 db    0
.data.rel.ro:000000000021790B                 db    0
.data.rel.ro:000000000021790C                 db    1
.data.rel.ro:000000000021790D                 db    0
.data.rel.ro:000000000021790E                 db    0
.data.rel.ro:000000000021790F                 db    0
.data.rel.ro:0000000000217910                 dq offset unk_13578
.data.rel.ro:0000000000217918                 db    8
.data.rel.ro:0000000000217919                 db    1
.data.rel.ro:000000000021791A                 db    0
.data.rel.ro:000000000021791B                 db    0
.data.rel.ro:000000000021791C                 db    1
.data.rel.ro:000000000021791D                 db    0
.data.rel.ro:000000000021791E                 db    0
.data.rel.ro:000000000021791F                 db    0
.data.rel.ro:0000000000217920                 db    0
.data.rel.ro:0000000000217921                 db    0
.data.rel.ro:0000000000217922                 db    0
.data.rel.ro:0000000000217923                 db    0
.data.rel.ro:0000000000217924                 db    0
.data.rel.ro:0000000000217925                 db    0
.data.rel.ro:0000000000217926                 db    0
.data.rel.ro:0000000000217927                 db    0
.data.rel.ro:0000000000217928                 db    0
.data.rel.ro:0000000000217929                 db    0
.data.rel.ro:000000000021792A                 db    0
.data.rel.ro:000000000021792B                 db    0
.data.rel.ro:000000000021792C                 db    0
.data.rel.ro:000000000021792D                 db    0
.data.rel.ro:000000000021792E                 db    0
.data.rel.ro:000000000021792F                 db    0
.data.rel.ro:0000000000217930                 db    0
.data.rel.ro:0000000000217931                 db    0
.data.rel.ro:0000000000217932                 db    0
.data.rel.ro:0000000000217933                 db    0
.data.rel.ro:0000000000217934                 db    0
.data.rel.ro:0000000000217935                 db    0
.data.rel.ro:0000000000217936                 db    0
.data.rel.ro:0000000000217937                 db    0
.data.rel.ro:0000000000217938                 db    0
.data.rel.ro:0000000000217939                 db    0
.data.rel.ro:000000000021793A                 db    0
.data.rel.ro:000000000021793B                 db    0
.data.rel.ro:000000000021793C                 db    0
.data.rel.ro:000000000021793D                 db    0
.data.rel.ro:000000000021793E                 db    0
.data.rel.ro:000000000021793F                 db    0
.data.rel.ro:0000000000217940 month_and_day_table dq offset aJanuary  ; DATA XREF: yyparse:loc_857A↑o
.data.rel.ro:0000000000217940                                         ; "JANUARY"
.data.rel.ro:0000000000217948                 db  0Fh
.data.rel.ro:0000000000217949                 db    1
.data.rel.ro:000000000021794A                 db    0
.data.rel.ro:000000000021794B                 db    0
.data.rel.ro:000000000021794C                 db    1
.data.rel.ro:000000000021794D                 db    0
.data.rel.ro:000000000021794E                 db    0
.data.rel.ro:000000000021794F                 db    0
.data.rel.ro:0000000000217950                 dq offset aFebruary     ; "FEBRUARY"
.data.rel.ro:0000000000217958                 db  0Fh
.data.rel.ro:0000000000217959                 db    1
.data.rel.ro:000000000021795A                 db    0
.data.rel.ro:000000000021795B                 db    0
.data.rel.ro:000000000021795C                 db    2
.data.rel.ro:000000000021795D                 db    0
.data.rel.ro:000000000021795E                 db    0
.data.rel.ro:000000000021795F                 db    0
.data.rel.ro:0000000000217960                 dq offset aMarch        ; "MARCH"
.data.rel.ro:0000000000217968                 db  0Fh
.data.rel.ro:0000000000217969                 db    1
.data.rel.ro:000000000021796A                 db    0
.data.rel.ro:000000000021796B                 db    0
.data.rel.ro:000000000021796C                 db    3
.data.rel.ro:000000000021796D                 db    0
.data.rel.ro:000000000021796E                 db    0
.data.rel.ro:000000000021796F                 db    0
.data.rel.ro:0000000000217970                 dq offset aApril        ; "APRIL"
.data.rel.ro:0000000000217978                 db  0Fh
.data.rel.ro:0000000000217979                 db    1
.data.rel.ro:000000000021797A                 db    0
.data.rel.ro:000000000021797B                 db    0
.data.rel.ro:000000000021797C                 db    4
.data.rel.ro:000000000021797D                 db    0
.data.rel.ro:000000000021797E                 db    0
.data.rel.ro:000000000021797F                 db    0
.data.rel.ro:0000000000217980                 dq offset aMay          ; "MAY"
.data.rel.ro:0000000000217988                 db  0Fh
.data.rel.ro:0000000000217989                 db    1
.data.rel.ro:000000000021798A                 db    0
.data.rel.ro:000000000021798B                 db    0
.data.rel.ro:000000000021798C                 db    5
.data.rel.ro:000000000021798D                 db    0
.data.rel.ro:000000000021798E                 db    0
.data.rel.ro:000000000021798F                 db    0
.data.rel.ro:0000000000217990                 dq offset aJune         ; "JUNE"
.data.rel.ro:0000000000217998                 db  0Fh
.data.rel.ro:0000000000217999                 db    1
.data.rel.ro:000000000021799A                 db    0
.data.rel.ro:000000000021799B                 db    0
.data.rel.ro:000000000021799C                 db    6
.data.rel.ro:000000000021799D                 db    0
.data.rel.ro:000000000021799E                 db    0
.data.rel.ro:000000000021799F                 db    0
.data.rel.ro:00000000002179A0                 dq offset aJuly         ; "JULY"
.data.rel.ro:00000000002179A8                 db  0Fh
.data.rel.ro:00000000002179A9                 db    1
.data.rel.ro:00000000002179AA                 db    0
.data.rel.ro:00000000002179AB                 db    0
.data.rel.ro:00000000002179AC                 db    7
.data.rel.ro:00000000002179AD                 db    0
.data.rel.ro:00000000002179AE                 db    0
.data.rel.ro:00000000002179AF                 db    0
.data.rel.ro:00000000002179B0                 dq offset aAugust       ; "AUGUST"
.data.rel.ro:00000000002179B8                 db  0Fh
.data.rel.ro:00000000002179B9                 db    1
.data.rel.ro:00000000002179BA                 db    0
.data.rel.ro:00000000002179BB                 db    0
.data.rel.ro:00000000002179BC                 db    8
.data.rel.ro:00000000002179BD                 db    0
.data.rel.ro:00000000002179BE                 db    0
.data.rel.ro:00000000002179BF                 db    0
.data.rel.ro:00000000002179C0                 dq offset aSeptember    ; "SEPTEMBER"
.data.rel.ro:00000000002179C8                 db  0Fh
.data.rel.ro:00000000002179C9                 db    1
.data.rel.ro:00000000002179CA                 db    0
.data.rel.ro:00000000002179CB                 db    0
.data.rel.ro:00000000002179CC                 db    9
.data.rel.ro:00000000002179CD                 db    0
.data.rel.ro:00000000002179CE                 db    0
.data.rel.ro:00000000002179CF                 db    0
.data.rel.ro:00000000002179D0                 dq offset aSept         ; "SEPT"
.data.rel.ro:00000000002179D8                 db  0Fh
.data.rel.ro:00000000002179D9                 db    1
.data.rel.ro:00000000002179DA                 db    0
.data.rel.ro:00000000002179DB                 db    0
.data.rel.ro:00000000002179DC                 db    9
.data.rel.ro:00000000002179DD                 db    0
.data.rel.ro:00000000002179DE                 db    0
.data.rel.ro:00000000002179DF                 db    0
.data.rel.ro:00000000002179E0                 dq offset aOctober      ; "OCTOBER"
.data.rel.ro:00000000002179E8                 db  0Fh
.data.rel.ro:00000000002179E9                 db    1
.data.rel.ro:00000000002179EA                 db    0
.data.rel.ro:00000000002179EB                 db    0
.data.rel.ro:00000000002179EC                 db  0Ah
.data.rel.ro:00000000002179ED                 db    0
.data.rel.ro:00000000002179EE                 db    0
.data.rel.ro:00000000002179EF                 db    0
.data.rel.ro:00000000002179F0                 dq offset aNovember     ; "NOVEMBER"
.data.rel.ro:00000000002179F8                 db  0Fh
.data.rel.ro:00000000002179F9                 db    1
.data.rel.ro:00000000002179FA                 db    0
.data.rel.ro:00000000002179FB                 db    0
.data.rel.ro:00000000002179FC                 db  0Bh
.data.rel.ro:00000000002179FD                 db    0
.data.rel.ro:00000000002179FE                 db    0
.data.rel.ro:00000000002179FF                 db    0
.data.rel.ro:0000000000217A00                 dq offset aDecember     ; "DECEMBER"
.data.rel.ro:0000000000217A08                 db  0Fh
.data.rel.ro:0000000000217A09                 db    1
.data.rel.ro:0000000000217A0A                 db    0
.data.rel.ro:0000000000217A0B                 db    0
.data.rel.ro:0000000000217A0C                 db  0Ch
.data.rel.ro:0000000000217A0D                 db    0
.data.rel.ro:0000000000217A0E                 db    0
.data.rel.ro:0000000000217A0F                 db    0
.data.rel.ro:0000000000217A10                 dq offset aSunday       ; "SUNDAY"
.data.rel.ro:0000000000217A18                 db  0Bh
.data.rel.ro:0000000000217A19                 db    1
.data.rel.ro:0000000000217A1A                 db    0
.data.rel.ro:0000000000217A1B                 db    0
.data.rel.ro:0000000000217A1C                 db    0
.data.rel.ro:0000000000217A1D                 db    0
.data.rel.ro:0000000000217A1E                 db    0
.data.rel.ro:0000000000217A1F                 db    0
.data.rel.ro:0000000000217A20                 dq offset aMonday       ; "MONDAY"
.data.rel.ro:0000000000217A28                 db  0Bh
.data.rel.ro:0000000000217A29                 db    1
.data.rel.ro:0000000000217A2A                 db    0
.data.rel.ro:0000000000217A2B                 db    0
.data.rel.ro:0000000000217A2C                 db    1
.data.rel.ro:0000000000217A2D                 db    0
.data.rel.ro:0000000000217A2E                 db    0
.data.rel.ro:0000000000217A2F                 db    0
.data.rel.ro:0000000000217A30                 dq offset aTuesday      ; "TUESDAY"
.data.rel.ro:0000000000217A38                 db  0Bh
.data.rel.ro:0000000000217A39                 db    1
.data.rel.ro:0000000000217A3A                 db    0
.data.rel.ro:0000000000217A3B                 db    0
.data.rel.ro:0000000000217A3C                 db    2
.data.rel.ro:0000000000217A3D                 db    0
.data.rel.ro:0000000000217A3E                 db    0
.data.rel.ro:0000000000217A3F                 db    0
.data.rel.ro:0000000000217A40                 dq offset aTues         ; "TUES"
.data.rel.ro:0000000000217A48                 db  0Bh
.data.rel.ro:0000000000217A49                 db    1
.data.rel.ro:0000000000217A4A                 db    0
.data.rel.ro:0000000000217A4B                 db    0
.data.rel.ro:0000000000217A4C                 db    2
.data.rel.ro:0000000000217A4D                 db    0
.data.rel.ro:0000000000217A4E                 db    0
.data.rel.ro:0000000000217A4F                 db    0
.data.rel.ro:0000000000217A50                 dq offset aWednesday    ; "WEDNESDAY"
.data.rel.ro:0000000000217A58                 db  0Bh
.data.rel.ro:0000000000217A59                 db    1
.data.rel.ro:0000000000217A5A                 db    0
.data.rel.ro:0000000000217A5B                 db    0
.data.rel.ro:0000000000217A5C                 db    3
.data.rel.ro:0000000000217A5D                 db    0
.data.rel.ro:0000000000217A5E                 db    0
.data.rel.ro:0000000000217A5F                 db    0
.data.rel.ro:0000000000217A60                 dq offset aWednes       ; "WEDNES"
.data.rel.ro:0000000000217A68                 db  0Bh
.data.rel.ro:0000000000217A69                 db    1
.data.rel.ro:0000000000217A6A                 db    0
.data.rel.ro:0000000000217A6B                 db    0
.data.rel.ro:0000000000217A6C                 db    3
.data.rel.ro:0000000000217A6D                 db    0
.data.rel.ro:0000000000217A6E                 db    0
.data.rel.ro:0000000000217A6F                 db    0
.data.rel.ro:0000000000217A70                 dq offset aThursday     ; "THURSDAY"
.data.rel.ro:0000000000217A78                 db  0Bh
.data.rel.ro:0000000000217A79                 db    1
.data.rel.ro:0000000000217A7A                 db    0
.data.rel.ro:0000000000217A7B                 db    0
.data.rel.ro:0000000000217A7C                 db    4
.data.rel.ro:0000000000217A7D                 db    0
.data.rel.ro:0000000000217A7E                 db    0
.data.rel.ro:0000000000217A7F                 db    0
.data.rel.ro:0000000000217A80                 dq offset aThur         ; "THUR"
.data.rel.ro:0000000000217A88                 db  0Bh
.data.rel.ro:0000000000217A89                 db    1
.data.rel.ro:0000000000217A8A                 db    0
.data.rel.ro:0000000000217A8B                 db    0
.data.rel.ro:0000000000217A8C                 db    4
.data.rel.ro:0000000000217A8D                 db    0
.data.rel.ro:0000000000217A8E                 db    0
.data.rel.ro:0000000000217A8F                 db    0
.data.rel.ro:0000000000217A90                 dq offset aThurs        ; "THURS"
.data.rel.ro:0000000000217A98                 db  0Bh
.data.rel.ro:0000000000217A99                 db    1
.data.rel.ro:0000000000217A9A                 db    0
.data.rel.ro:0000000000217A9B                 db    0
.data.rel.ro:0000000000217A9C                 db    4
.data.rel.ro:0000000000217A9D                 db    0
.data.rel.ro:0000000000217A9E                 db    0
.data.rel.ro:0000000000217A9F                 db    0
.data.rel.ro:0000000000217AA0                 dq offset aFriday       ; "FRIDAY"
.data.rel.ro:0000000000217AA8                 db  0Bh
.data.rel.ro:0000000000217AA9                 db    1
.data.rel.ro:0000000000217AAA                 db    0
.data.rel.ro:0000000000217AAB                 db    0
.data.rel.ro:0000000000217AAC                 db    5
.data.rel.ro:0000000000217AAD                 db    0
.data.rel.ro:0000000000217AAE                 db    0
.data.rel.ro:0000000000217AAF                 db    0
.data.rel.ro:0000000000217AB0                 dq offset aSaturday     ; "SATURDAY"
.data.rel.ro:0000000000217AB8                 db  0Bh
.data.rel.ro:0000000000217AB9                 db    1
.data.rel.ro:0000000000217ABA                 db    0
.data.rel.ro:0000000000217ABB                 db    0
.data.rel.ro:0000000000217ABC                 db    6
.data.rel.ro:0000000000217ABD                 db    0
.data.rel.ro:0000000000217ABE                 db    0
.data.rel.ro:0000000000217ABF                 db    0
.data.rel.ro:0000000000217AC0                 db    0
.data.rel.ro:0000000000217AC1                 db    0
.data.rel.ro:0000000000217AC2                 db    0
.data.rel.ro:0000000000217AC3                 db    0
.data.rel.ro:0000000000217AC4                 db    0
.data.rel.ro:0000000000217AC5                 db    0
.data.rel.ro:0000000000217AC6                 db    0
.data.rel.ro:0000000000217AC7                 db    0
.data.rel.ro:0000000000217AC8                 db    0
.data.rel.ro:0000000000217AC9                 db    0
.data.rel.ro:0000000000217ACA                 db    0
.data.rel.ro:0000000000217ACB                 db    0
.data.rel.ro:0000000000217ACC                 db    0
.data.rel.ro:0000000000217ACD                 db    0
.data.rel.ro:0000000000217ACE                 db    0
.data.rel.ro:0000000000217ACF                 db    0
.data.rel.ro:0000000000217AD0 dst_table       dq offset aDst+1        ; DATA XREF: yyparse:loc_8765↑o
.data.rel.ro:0000000000217AD0                                         ; "DST"
.data.rel.ro:0000000000217AD8                 db    3
.data.rel.ro:0000000000217AD9                 db    1
.data.rel.ro:0000000000217ADA                 db    0
.data.rel.ro:0000000000217ADB                 db    0
.data.rel.ro:0000000000217ADC                 db    0
.data.rel.ro:0000000000217ADD                 db    0
.data.rel.ro:0000000000217ADE                 db    0
.data.rel.ro:0000000000217ADF                 db    0
.data.rel.ro:0000000000217AE0 meridian_table  dq offset aAm           ; DATA XREF: yyparse:loc_7562↑o
.data.rel.ro:0000000000217AE0                                         ; "AM"
.data.rel.ro:0000000000217AE8                 db  0Eh
.data.rel.ro:0000000000217AE9                 db    1
.data.rel.ro:0000000000217AEA                 db    0
.data.rel.ro:0000000000217AEB                 db    0
.data.rel.ro:0000000000217AEC                 db    0
.data.rel.ro:0000000000217AED                 db    0
.data.rel.ro:0000000000217AEE                 db    0
.data.rel.ro:0000000000217AEF                 db    0
.data.rel.ro:0000000000217AF0                 dq offset aAM           ; "A.M."
.data.rel.ro:0000000000217AF8                 db  0Eh
.data.rel.ro:0000000000217AF9                 db    1
.data.rel.ro:0000000000217AFA                 db    0
.data.rel.ro:0000000000217AFB                 db    0
.data.rel.ro:0000000000217AFC                 db    0
.data.rel.ro:0000000000217AFD                 db    0
.data.rel.ro:0000000000217AFE                 db    0
.data.rel.ro:0000000000217AFF                 db    0
.data.rel.ro:0000000000217B00                 dq offset aPm_0         ; "PM"
.data.rel.ro:0000000000217B08                 db  0Eh
.data.rel.ro:0000000000217B09                 db    1
.data.rel.ro:0000000000217B0A                 db    0
.data.rel.ro:0000000000217B0B                 db    0
.data.rel.ro:0000000000217B0C                 db    1
.data.rel.ro:0000000000217B0D                 db    0
.data.rel.ro:0000000000217B0E                 db    0
.data.rel.ro:0000000000217B0F                 db    0
.data.rel.ro:0000000000217B10                 dq offset aPM           ; "P.M."
.data.rel.ro:0000000000217B18                 db  0Eh
.data.rel.ro:0000000000217B19                 db    1
.data.rel.ro:0000000000217B1A                 db    0
.data.rel.ro:0000000000217B1B                 db    0
.data.rel.ro:0000000000217B1C                 db    1
.data.rel.ro:0000000000217B1D                 db    0
.data.rel.ro:0000000000217B1E                 db    0
.data.rel.ro:0000000000217B1F                 db    0
.data.rel.ro:0000000000217B20                 db    0
.data.rel.ro:0000000000217B21                 db    0
.data.rel.ro:0000000000217B22                 db    0
.data.rel.ro:0000000000217B23                 db    0
.data.rel.ro:0000000000217B24                 db    0
.data.rel.ro:0000000000217B25                 db    0
.data.rel.ro:0000000000217B26                 db    0
.data.rel.ro:0000000000217B27                 db    0
.data.rel.ro:0000000000217B28                 db    0
.data.rel.ro:0000000000217B29                 db    0
.data.rel.ro:0000000000217B2A                 db    0
.data.rel.ro:0000000000217B2B                 db    0
.data.rel.ro:0000000000217B2C                 db    0
.data.rel.ro:0000000000217B2D                 db    0
.data.rel.ro:0000000000217B2E                 db    0
.data.rel.ro:0000000000217B2F                 db    0
.data.rel.ro:0000000000217B30                 db    0
.data.rel.ro:0000000000217B31                 db    0
.data.rel.ro:0000000000217B32                 db    0
.data.rel.ro:0000000000217B33                 db    0
.data.rel.ro:0000000000217B34                 db    0
.data.rel.ro:0000000000217B35                 db    0
.data.rel.ro:0000000000217B36                 db    0
.data.rel.ro:0000000000217B37                 db    0
.data.rel.ro:0000000000217B38                 db    0
.data.rel.ro:0000000000217B39                 db    0
.data.rel.ro:0000000000217B3A                 db    0
.data.rel.ro:0000000000217B3B                 db    0
.data.rel.ro:0000000000217B3C                 db    0
.data.rel.ro:0000000000217B3D                 db    0
.data.rel.ro:0000000000217B3E                 db    0
.data.rel.ro:0000000000217B3F                 db    0
.data.rel.ro:0000000000217B40                 public quoting_style_args
.data.rel.ro:0000000000217B40 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000217B48                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000217B50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000217B58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000217B60                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000217B68                 dq offset aUtc+2        ; "c"
.data.rel.ro:0000000000217B70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000217B78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000217B80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000217B88                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000217B90                 db    0
.data.rel.ro:0000000000217B91                 db    0
.data.rel.ro:0000000000217B92                 db    0
.data.rel.ro:0000000000217B93                 db    0
.data.rel.ro:0000000000217B94                 db    0
.data.rel.ro:0000000000217B95                 db    0
.data.rel.ro:0000000000217B96                 db    0
.data.rel.ro:0000000000217B97                 db    0
.data.rel.ro:0000000000217B97 _data_rel_ro    ends
.data.rel.ro:0000000000217B97
LOAD:0000000000217B98 ; ELF Dynamic Information
LOAD:0000000000217B98 ; ===========================================================================
LOAD:0000000000217B98
LOAD:0000000000217B98 ; Segment type: Pure data
LOAD:0000000000217B98 ; Segment permissions: Read/Write
LOAD:0000000000217B98 LOAD            segment byte public 'DATA' use64
LOAD:0000000000217B98                 assume cs:LOAD
LOAD:0000000000217B98                 ;org 217B98h
LOAD:0000000000217B98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000217B98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000217B98                                         ; DT_NEEDED libc.so.6
LOAD:0000000000217BA8                 Elf64_Dyn <0Ch, 26F0h>  ; DT_INIT
LOAD:0000000000217BB8                 Elf64_Dyn <0Dh, 11640h> ; DT_FINI
LOAD:0000000000217BC8                 Elf64_Dyn <19h, 216FF0h> ; DT_INIT_ARRAY
LOAD:0000000000217BD8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000217BE8                 Elf64_Dyn <1Ah, 216FF8h> ; DT_FINI_ARRAY
LOAD:0000000000217BF8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000217C08                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000217C18                 Elf64_Dyn <5, 0AA8h>    ; DT_STRTAB
LOAD:0000000000217C28                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000217C38                 Elf64_Dyn <0Ah, 3A5h>   ; DT_STRSZ
LOAD:0000000000217C48                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000217C58                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000217C68                 Elf64_Dyn <3, 217D88h>  ; DT_PLTGOT
LOAD:0000000000217C78                 Elf64_Dyn <2, 660h>     ; DT_PLTRELSZ
LOAD:0000000000217C88                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000217C98                 Elf64_Dyn <17h, 2090h>  ; DT_JMPREL
LOAD:0000000000217CA8                 Elf64_Dyn <7, 0F68h>    ; DT_RELA
LOAD:0000000000217CB8                 Elf64_Dyn <8, 1128h>    ; DT_RELASZ
LOAD:0000000000217CC8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000217CD8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000217CE8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000217CF8                 Elf64_Dyn <6FFFFFFEh, 0EF8h> ; DT_VERNEED
LOAD:0000000000217D08                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000217D18                 Elf64_Dyn <6FFFFFF0h, 0E4Eh> ; DT_VERSYM
LOAD:0000000000217D28                 Elf64_Dyn <6FFFFFF9h, 0ABh> ; DT_RELACOUNT
LOAD:0000000000217D38                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000217D48                 db    0
LOAD:0000000000217D49                 db    0
LOAD:0000000000217D4A                 db    0
LOAD:0000000000217D4B                 db    0
LOAD:0000000000217D4C                 db    0
LOAD:0000000000217D4D                 db    0
LOAD:0000000000217D4E                 db    0
LOAD:0000000000217D4F                 db    0
LOAD:0000000000217D50                 db    0
LOAD:0000000000217D51                 db    0
LOAD:0000000000217D52                 db    0
LOAD:0000000000217D53                 db    0
LOAD:0000000000217D54                 db    0
LOAD:0000000000217D55                 db    0
LOAD:0000000000217D56                 db    0
LOAD:0000000000217D57                 db    0
LOAD:0000000000217D58                 db    0
LOAD:0000000000217D59                 db    0
LOAD:0000000000217D5A                 db    0
LOAD:0000000000217D5B                 db    0
LOAD:0000000000217D5C                 db    0
LOAD:0000000000217D5D                 db    0
LOAD:0000000000217D5E                 db    0
LOAD:0000000000217D5F                 db    0
LOAD:0000000000217D60                 db    0
LOAD:0000000000217D61                 db    0
LOAD:0000000000217D62                 db    0
LOAD:0000000000217D63                 db    0
LOAD:0000000000217D64                 db    0
LOAD:0000000000217D65                 db    0
LOAD:0000000000217D66                 db    0
LOAD:0000000000217D67                 db    0
LOAD:0000000000217D68                 db    0
LOAD:0000000000217D69                 db    0
LOAD:0000000000217D6A                 db    0
LOAD:0000000000217D6B                 db    0
LOAD:0000000000217D6C                 db    0
LOAD:0000000000217D6D                 db    0
LOAD:0000000000217D6E                 db    0
LOAD:0000000000217D6F                 db    0
LOAD:0000000000217D70                 db    0
LOAD:0000000000217D71                 db    0
LOAD:0000000000217D72                 db    0
LOAD:0000000000217D73                 db    0
LOAD:0000000000217D74                 db    0
LOAD:0000000000217D75                 db    0
LOAD:0000000000217D76                 db    0
LOAD:0000000000217D77                 db    0
LOAD:0000000000217D78                 db    0
LOAD:0000000000217D79                 db    0
LOAD:0000000000217D7A                 db    0
LOAD:0000000000217D7B                 db    0
LOAD:0000000000217D7C                 db    0
LOAD:0000000000217D7D                 db    0
LOAD:0000000000217D7E                 db    0
LOAD:0000000000217D7F                 db    0
LOAD:0000000000217D80                 db    0
LOAD:0000000000217D81                 db    0
LOAD:0000000000217D82                 db    0
LOAD:0000000000217D83                 db    0
LOAD:0000000000217D84                 db    0
LOAD:0000000000217D85                 db    0
LOAD:0000000000217D86                 db    0
LOAD:0000000000217D87                 db    0
LOAD:0000000000217D87 LOAD            ends
LOAD:0000000000217D87
.got:0000000000217D88 ; ===========================================================================
.got:0000000000217D88
.got:0000000000217D88 ; Segment type: Pure data
.got:0000000000217D88 ; Segment permissions: Read/Write
.got:0000000000217D88 _got            segment qword public 'DATA' use64
.got:0000000000217D88                 assume cs:_got
.got:0000000000217D88                 ;org 217D88h
.got:0000000000217D88 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000217D90 qword_217D90    dq 0                    ; DATA XREF: sub_2710↑r
.got:0000000000217D98 qword_217D98    dq 0                    ; DATA XREF: sub_2710+6↑r
.got:0000000000217DA0 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000217DA0                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000217DA8 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000217DB0 __snprintf_chk_ptr dq offset __snprintf_chk
.got:0000000000217DB0                                         ; DATA XREF: ___snprintf_chk↑r
.got:0000000000217DB8 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000217DC0 localtime_ptr   dq offset localtime     ; DATA XREF: _localtime↑r
.got:0000000000217DC8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000217DD0 __errno_location_ptr dq offset __errno_location
.got:0000000000217DD0                                         ; DATA XREF: ___errno_location↑r
.got:0000000000217DD8 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000217DE0 localtime_r_ptr dq offset localtime_r   ; DATA XREF: _localtime_r↑r
.got:0000000000217DE8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000217DF0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000217DF8 clock_gettime_ptr dq offset clock_gettime
.got:0000000000217DF8                                         ; DATA XREF: _clock_gettime↑r
.got:0000000000217E00 setenv_ptr      dq offset setenv        ; DATA XREF: _setenv↑r
.got:0000000000217E08 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000217E10 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000217E18 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000217E18                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000217E20 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000217E28 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000217E28                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000217E30 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000217E38 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000217E38                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000217E40 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000217E48 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000217E50 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000217E58 snprintf_ptr    dq offset snprintf      ; DATA XREF: _snprintf↑r
.got:0000000000217E60 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000217E68 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000217E70 gmtime_r_ptr    dq offset gmtime_r      ; DATA XREF: _gmtime_r↑r
.got:0000000000217E78 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000217E80 fputs_ptr       dq offset fputs         ; DATA XREF: _fputs↑r
.got:0000000000217E88 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000217E90 fputc_ptr       dq offset fputc         ; DATA XREF: _fputc↑r
.got:0000000000217E98 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000217EA0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000217EA0                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000217EA8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000217EB0 putenv_ptr      dq offset putenv        ; DATA XREF: _putenv↑r
.got:0000000000217EB8 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:0000000000217EC0 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000217EC8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000217ED0 tzset_ptr       dq offset tzset         ; DATA XREF: _tzset↑r
.got:0000000000217ED8 time_ptr        dq offset time          ; DATA XREF: _time↑r
.got:0000000000217EE0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000217EE8 __stpcpy_chk_ptr dq offset __stpcpy_chk ; DATA XREF: ___stpcpy_chk↑r
.got:0000000000217EF0 settimeofday_ptr dq offset settimeofday ; DATA XREF: _settimeofday↑r
.got:0000000000217EF8 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000217F00 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000217F08 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000217F10 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000217F18 clock_settime_ptr dq offset clock_settime
.got:0000000000217F18                                         ; DATA XREF: _clock_settime↑r
.got:0000000000217F20 mktime_ptr      dq offset mktime        ; DATA XREF: _mktime↑r
.got:0000000000217F28 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000217F30 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000217F38 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000217F40 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000217F48 timegm_ptr      dq offset timegm        ; DATA XREF: _timegm↑r
.got:0000000000217F50 strftime_ptr    dq offset strftime      ; DATA XREF: _strftime↑r
.got:0000000000217F58 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000217F60 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000217F68 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000217F70 unsetenv_ptr    dq offset unsetenv      ; DATA XREF: _unsetenv↑r
.got:0000000000217F78 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000217F80 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000217F88 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000217F90 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000217F90                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000217F98 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000217FA0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000217FA8 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000217FA8                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000217FB0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000217FB0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000217FB8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000217FB8                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000217FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000217FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000217FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000217FC8                                         ; DATA XREF: start+24↑r
.got:0000000000217FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000217FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000217FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000217FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000217FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000217FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000217FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000217FE0 _got            ends
.got:0000000000217FE0
LOAD:0000000000217FE8 ; ===========================================================================
LOAD:0000000000217FE8
LOAD:0000000000217FE8 ; Segment type: Pure data
LOAD:0000000000217FE8 ; Segment permissions: Read/Write
LOAD:0000000000217FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000217FE8                 assume cs:LOAD
LOAD:0000000000217FE8                 ;org 217FE8h
LOAD:0000000000217FE8                 align 20h
LOAD:0000000000217FE8 LOAD            ends
LOAD:0000000000217FE8
.data:0000000000218000 ; ===========================================================================
.data:0000000000218000
.data:0000000000218000 ; Segment type: Pure data
.data:0000000000218000 ; Segment permissions: Read/Write
.data:0000000000218000 _data           segment align_32 public 'DATA' use64
.data:0000000000218000                 assume cs:_data
.data:0000000000218000                 ;org 218000h
.data:0000000000218000                 public __data_start ; weak
.data:0000000000218000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000218000                                         ; data_start
.data:0000000000218001                 db    0
.data:0000000000218002                 db    0
.data:0000000000218003                 db    0
.data:0000000000218004                 db    0
.data:0000000000218005                 db    0
.data:0000000000218006                 db    0
.data:0000000000218007                 db    0
.data:0000000000218008                 public __dso_handle
.data:0000000000218008 ; void *_dso_handle
.data:0000000000218008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000218008                                         ; atexit↑r ...
.data:0000000000218010                 public Version
.data:0000000000218010 Version         dq offset a831          ; DATA XREF: main+17A↑r
.data:0000000000218010                                         ; "8.31"
.data:0000000000218018                 public argmatch_die
.data:0000000000218018 argmatch_die    dq offset __argmatch_die
.data:0000000000218018                                         ; DATA XREF: main+22E↑r
.data:0000000000218018                                         ; main:loc_2E30↑r
.data:0000000000218020                 public exit_failure
.data:0000000000218020 ; int exit_failure
.data:0000000000218020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_4112↑r
.data:0000000000218020                                         ; xalloc_die+17↑r
.data:0000000000218024                 align 20h
.data:0000000000218040                 public quote_quoting_options
.data:0000000000218040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000218040                                         ; quote_mem↑o ...
.data:0000000000218041                 db    0
.data:0000000000218042                 db    0
.data:0000000000218043                 db    0
.data:0000000000218044                 db    0
.data:0000000000218045                 db    0
.data:0000000000218046                 db    0
.data:0000000000218047                 db    0
.data:0000000000218048                 db    0
.data:0000000000218049                 db    0
.data:000000000021804A                 db    0
.data:000000000021804B                 db    0
.data:000000000021804C                 db    0
.data:000000000021804D                 db    0
.data:000000000021804E                 db    0
.data:000000000021804F                 db    0
.data:0000000000218050                 db    0
.data:0000000000218051                 db    0
.data:0000000000218052                 db    0
.data:0000000000218053                 db    0
.data:0000000000218054                 db    0
.data:0000000000218055                 db    0
.data:0000000000218056                 db    0
.data:0000000000218057                 db    0
.data:0000000000218058                 db    0
.data:0000000000218059                 db    0
.data:000000000021805A                 db    0
.data:000000000021805B                 db    0
.data:000000000021805C                 db    0
.data:000000000021805D                 db    0
.data:000000000021805E                 db    0
.data:000000000021805F                 db    0
.data:0000000000218060                 db    0
.data:0000000000218061                 db    0
.data:0000000000218062                 db    0
.data:0000000000218063                 db    0
.data:0000000000218064                 db    0
.data:0000000000218065                 db    0
.data:0000000000218066                 db    0
.data:0000000000218067                 db    0
.data:0000000000218068                 db    0
.data:0000000000218069                 db    0
.data:000000000021806A                 db    0
.data:000000000021806B                 db    0
.data:000000000021806C                 db    0
.data:000000000021806D                 db    0
.data:000000000021806E                 db    0
.data:000000000021806F                 db    0
.data:0000000000218070                 db    0
.data:0000000000218071                 db    0
.data:0000000000218072                 db    0
.data:0000000000218073                 db    0
.data:0000000000218074                 db    0
.data:0000000000218075                 db    0
.data:0000000000218076                 db    0
.data:0000000000218077                 db    0
.data:0000000000218078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000218078                                         ; quotearg_n_options:loc_BE6D↑r ...
.data:000000000021807C                 align 20h
.data:0000000000218080 ; void *slotvec
.data:0000000000218080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000218080                                         ; quotearg_n_options+76↑w ...
.data:0000000000218088                 align 10h
.data:0000000000218090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000218090                                         ; quotearg_n_options+187↑r ...
.data:0000000000218098 off_218098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000218098 _data           ends
.data:0000000000218098
.bss:00000000002180A0 ; ===========================================================================
.bss:00000000002180A0
.bss:00000000002180A0 ; Segment type: Uninitialized
.bss:00000000002180A0 ; Segment permissions: Read/Write
.bss:00000000002180A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002180A0                 assume cs:_bss
.bss:00000000002180A0                 ;org 2180A0h
.bss:00000000002180A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002180A0                 public __bss_start ; weak
.bss:00000000002180A0 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000009E8↑o
.bss:00000000002180A0                                         ; LOAD:0000000000000A48↑o ...
.bss:00000000002180A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002180A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002180A0                                         ; _edata
.bss:00000000002180A0                                         ; Copy of shared data
.bss:00000000002180A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002180A8 ; _IO_FILE *stdout
.bss:00000000002180A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009D0↑o
.bss:00000000002180A8                                         ; main+173↑r ...
.bss:00000000002180A8                                         ; Alternative name is 'stdout'
.bss:00000000002180A8                                         ; Copy of shared data
.bss:00000000002180B0                 public stdin@@GLIBC_2_2_5
.bss:00000000002180B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000A00↑o
.bss:00000000002180B0                                         ; main+404↑r
.bss:00000000002180B0                                         ; Alternative name is 'stdin'
.bss:00000000002180B0                                         ; Copy of shared data
.bss:00000000002180B8                 public optind@@GLIBC_2_2_5
.bss:00000000002180B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A78↑o
.bss:00000000002180B8                                         ; main+2DC↑r ...
.bss:00000000002180B8                                         ; Alternative name is 'optind'
.bss:00000000002180B8                                         ; Copy of shared data
.bss:00000000002180BC                 align 20h
.bss:00000000002180C0                 public optarg@@GLIBC_2_2_5
.bss:00000000002180C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A90↑o
.bss:00000000002180C0                                         ; main+FD↑r ...
.bss:00000000002180C0                                         ; Alternative name is 'optarg'
.bss:00000000002180C0                                         ; Copy of shared data
.bss:00000000002180C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002180C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002180C8                                         ; DATA XREF: LOAD:0000000000000A18↑o
.bss:00000000002180C8                                         ; LOAD:0000000000000A30↑o ...
.bss:00000000002180C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002180C8                                         ; Copy of shared data
.bss:00000000002180D0                 align 20h
.bss:00000000002180E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002180E0 ; FILE *stderr
.bss:00000000002180E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A60↑o
.bss:00000000002180E0                                         ; usage+3D↑r ...
.bss:00000000002180E0                                         ; Alternative name is 'stderr'
.bss:00000000002180E0                                         ; Copy of shared data
.bss:00000000002180E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002180E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002180E9                 align 4
.bss:00000000002180EC parse_datetime_flags dd ?               ; DATA XREF: main+156↑w
.bss:00000000002180EC                                         ; main+46B↑r ...
.bss:00000000002180F0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002180F0                                         ; close_stdout+1B↑r
.bss:00000000002180F1                 align 8
.bss:00000000002180F8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002180F8                                         ; close_stdout+56↑r
.bss:0000000000218100                 public program_name
.bss:0000000000218100 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000218100                                         ; set_program_name:loc_AA8D↑w
.bss:0000000000218108                 align 20h
.bss:0000000000218120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000218120                                         ; quotearg_free+46↑o ...
.bss:0000000000218121                 db    ? ;
.bss:0000000000218122                 db    ? ;
.bss:0000000000218123                 db    ? ;
.bss:0000000000218124                 db    ? ;
.bss:0000000000218125                 db    ? ;
.bss:0000000000218126                 db    ? ;
.bss:0000000000218127                 db    ? ;
.bss:0000000000218128                 db    ? ;
.bss:0000000000218129                 db    ? ;
.bss:000000000021812A                 db    ? ;
.bss:000000000021812B                 db    ? ;
.bss:000000000021812C                 db    ? ;
.bss:000000000021812D                 db    ? ;
.bss:000000000021812E                 db    ? ;
.bss:000000000021812F                 db    ? ;
.bss:0000000000218130                 db    ? ;
.bss:0000000000218131                 db    ? ;
.bss:0000000000218132                 db    ? ;
.bss:0000000000218133                 db    ? ;
.bss:0000000000218134                 db    ? ;
.bss:0000000000218135                 db    ? ;
.bss:0000000000218136                 db    ? ;
.bss:0000000000218137                 db    ? ;
.bss:0000000000218138                 db    ? ;
.bss:0000000000218139                 db    ? ;
.bss:000000000021813A                 db    ? ;
.bss:000000000021813B                 db    ? ;
.bss:000000000021813C                 db    ? ;
.bss:000000000021813D                 db    ? ;
.bss:000000000021813E                 db    ? ;
.bss:000000000021813F                 db    ? ;
.bss:0000000000218140                 db    ? ;
.bss:0000000000218141                 db    ? ;
.bss:0000000000218142                 db    ? ;
.bss:0000000000218143                 db    ? ;
.bss:0000000000218144                 db    ? ;
.bss:0000000000218145                 db    ? ;
.bss:0000000000218146                 db    ? ;
.bss:0000000000218147                 db    ? ;
.bss:0000000000218148                 db    ? ;
.bss:0000000000218149                 db    ? ;
.bss:000000000021814A                 db    ? ;
.bss:000000000021814B                 db    ? ;
.bss:000000000021814C                 db    ? ;
.bss:000000000021814D                 db    ? ;
.bss:000000000021814E                 db    ? ;
.bss:000000000021814F                 db    ? ;
.bss:0000000000218150                 db    ? ;
.bss:0000000000218151                 db    ? ;
.bss:0000000000218152                 db    ? ;
.bss:0000000000218153                 db    ? ;
.bss:0000000000218154                 db    ? ;
.bss:0000000000218155                 db    ? ;
.bss:0000000000218156                 db    ? ;
.bss:0000000000218157                 db    ? ;
.bss:0000000000218158                 db    ? ;
.bss:0000000000218159                 db    ? ;
.bss:000000000021815A                 db    ? ;
.bss:000000000021815B                 db    ? ;
.bss:000000000021815C                 db    ? ;
.bss:000000000021815D                 db    ? ;
.bss:000000000021815E                 db    ? ;
.bss:000000000021815F                 db    ? ;
.bss:0000000000218160                 db    ? ;
.bss:0000000000218161                 db    ? ;
.bss:0000000000218162                 db    ? ;
.bss:0000000000218163                 db    ? ;
.bss:0000000000218164                 db    ? ;
.bss:0000000000218165                 db    ? ;
.bss:0000000000218166                 db    ? ;
.bss:0000000000218167                 db    ? ;
.bss:0000000000218168                 db    ? ;
.bss:0000000000218169                 db    ? ;
.bss:000000000021816A                 db    ? ;
.bss:000000000021816B                 db    ? ;
.bss:000000000021816C                 db    ? ;
.bss:000000000021816D                 db    ? ;
.bss:000000000021816E                 db    ? ;
.bss:000000000021816F                 db    ? ;
.bss:0000000000218170                 db    ? ;
.bss:0000000000218171                 db    ? ;
.bss:0000000000218172                 db    ? ;
.bss:0000000000218173                 db    ? ;
.bss:0000000000218174                 db    ? ;
.bss:0000000000218175                 db    ? ;
.bss:0000000000218176                 db    ? ;
.bss:0000000000218177                 db    ? ;
.bss:0000000000218178                 db    ? ;
.bss:0000000000218179                 db    ? ;
.bss:000000000021817A                 db    ? ;
.bss:000000000021817B                 db    ? ;
.bss:000000000021817C                 db    ? ;
.bss:000000000021817D                 db    ? ;
.bss:000000000021817E                 db    ? ;
.bss:000000000021817F                 db    ? ;
.bss:0000000000218180                 db    ? ;
.bss:0000000000218181                 db    ? ;
.bss:0000000000218182                 db    ? ;
.bss:0000000000218183                 db    ? ;
.bss:0000000000218184                 db    ? ;
.bss:0000000000218185                 db    ? ;
.bss:0000000000218186                 db    ? ;
.bss:0000000000218187                 db    ? ;
.bss:0000000000218188                 db    ? ;
.bss:0000000000218189                 db    ? ;
.bss:000000000021818A                 db    ? ;
.bss:000000000021818B                 db    ? ;
.bss:000000000021818C                 db    ? ;
.bss:000000000021818D                 db    ? ;
.bss:000000000021818E                 db    ? ;
.bss:000000000021818F                 db    ? ;
.bss:0000000000218190                 db    ? ;
.bss:0000000000218191                 db    ? ;
.bss:0000000000218192                 db    ? ;
.bss:0000000000218193                 db    ? ;
.bss:0000000000218194                 db    ? ;
.bss:0000000000218195                 db    ? ;
.bss:0000000000218196                 db    ? ;
.bss:0000000000218197                 db    ? ;
.bss:0000000000218198                 db    ? ;
.bss:0000000000218199                 db    ? ;
.bss:000000000021819A                 db    ? ;
.bss:000000000021819B                 db    ? ;
.bss:000000000021819C                 db    ? ;
.bss:000000000021819D                 db    ? ;
.bss:000000000021819E                 db    ? ;
.bss:000000000021819F                 db    ? ;
.bss:00000000002181A0                 db    ? ;
.bss:00000000002181A1                 db    ? ;
.bss:00000000002181A2                 db    ? ;
.bss:00000000002181A3                 db    ? ;
.bss:00000000002181A4                 db    ? ;
.bss:00000000002181A5                 db    ? ;
.bss:00000000002181A6                 db    ? ;
.bss:00000000002181A7                 db    ? ;
.bss:00000000002181A8                 db    ? ;
.bss:00000000002181A9                 db    ? ;
.bss:00000000002181AA                 db    ? ;
.bss:00000000002181AB                 db    ? ;
.bss:00000000002181AC                 db    ? ;
.bss:00000000002181AD                 db    ? ;
.bss:00000000002181AE                 db    ? ;
.bss:00000000002181AF                 db    ? ;
.bss:00000000002181B0                 db    ? ;
.bss:00000000002181B1                 db    ? ;
.bss:00000000002181B2                 db    ? ;
.bss:00000000002181B3                 db    ? ;
.bss:00000000002181B4                 db    ? ;
.bss:00000000002181B5                 db    ? ;
.bss:00000000002181B6                 db    ? ;
.bss:00000000002181B7                 db    ? ;
.bss:00000000002181B8                 db    ? ;
.bss:00000000002181B9                 db    ? ;
.bss:00000000002181BA                 db    ? ;
.bss:00000000002181BB                 db    ? ;
.bss:00000000002181BC                 db    ? ;
.bss:00000000002181BD                 db    ? ;
.bss:00000000002181BE                 db    ? ;
.bss:00000000002181BF                 db    ? ;
.bss:00000000002181C0                 db    ? ;
.bss:00000000002181C1                 db    ? ;
.bss:00000000002181C2                 db    ? ;
.bss:00000000002181C3                 db    ? ;
.bss:00000000002181C4                 db    ? ;
.bss:00000000002181C5                 db    ? ;
.bss:00000000002181C6                 db    ? ;
.bss:00000000002181C7                 db    ? ;
.bss:00000000002181C8                 db    ? ;
.bss:00000000002181C9                 db    ? ;
.bss:00000000002181CA                 db    ? ;
.bss:00000000002181CB                 db    ? ;
.bss:00000000002181CC                 db    ? ;
.bss:00000000002181CD                 db    ? ;
.bss:00000000002181CE                 db    ? ;
.bss:00000000002181CF                 db    ? ;
.bss:00000000002181D0                 db    ? ;
.bss:00000000002181D1                 db    ? ;
.bss:00000000002181D2                 db    ? ;
.bss:00000000002181D3                 db    ? ;
.bss:00000000002181D4                 db    ? ;
.bss:00000000002181D5                 db    ? ;
.bss:00000000002181D6                 db    ? ;
.bss:00000000002181D7                 db    ? ;
.bss:00000000002181D8                 db    ? ;
.bss:00000000002181D9                 db    ? ;
.bss:00000000002181DA                 db    ? ;
.bss:00000000002181DB                 db    ? ;
.bss:00000000002181DC                 db    ? ;
.bss:00000000002181DD                 db    ? ;
.bss:00000000002181DE                 db    ? ;
.bss:00000000002181DF                 db    ? ;
.bss:00000000002181E0                 db    ? ;
.bss:00000000002181E1                 db    ? ;
.bss:00000000002181E2                 db    ? ;
.bss:00000000002181E3                 db    ? ;
.bss:00000000002181E4                 db    ? ;
.bss:00000000002181E5                 db    ? ;
.bss:00000000002181E6                 db    ? ;
.bss:00000000002181E7                 db    ? ;
.bss:00000000002181E8                 db    ? ;
.bss:00000000002181E9                 db    ? ;
.bss:00000000002181EA                 db    ? ;
.bss:00000000002181EB                 db    ? ;
.bss:00000000002181EC                 db    ? ;
.bss:00000000002181ED                 db    ? ;
.bss:00000000002181EE                 db    ? ;
.bss:00000000002181EF                 db    ? ;
.bss:00000000002181F0                 db    ? ;
.bss:00000000002181F1                 db    ? ;
.bss:00000000002181F2                 db    ? ;
.bss:00000000002181F3                 db    ? ;
.bss:00000000002181F4                 db    ? ;
.bss:00000000002181F5                 db    ? ;
.bss:00000000002181F6                 db    ? ;
.bss:00000000002181F7                 db    ? ;
.bss:00000000002181F8                 db    ? ;
.bss:00000000002181F9                 db    ? ;
.bss:00000000002181FA                 db    ? ;
.bss:00000000002181FB                 db    ? ;
.bss:00000000002181FC                 db    ? ;
.bss:00000000002181FD                 db    ? ;
.bss:00000000002181FE                 db    ? ;
.bss:00000000002181FF                 db    ? ;
.bss:0000000000218200                 db    ? ;
.bss:0000000000218201                 db    ? ;
.bss:0000000000218202                 db    ? ;
.bss:0000000000218203                 db    ? ;
.bss:0000000000218204                 db    ? ;
.bss:0000000000218205                 db    ? ;
.bss:0000000000218206                 db    ? ;
.bss:0000000000218207                 db    ? ;
.bss:0000000000218208                 db    ? ;
.bss:0000000000218209                 db    ? ;
.bss:000000000021820A                 db    ? ;
.bss:000000000021820B                 db    ? ;
.bss:000000000021820C                 db    ? ;
.bss:000000000021820D                 db    ? ;
.bss:000000000021820E                 db    ? ;
.bss:000000000021820F                 db    ? ;
.bss:0000000000218210                 db    ? ;
.bss:0000000000218211                 db    ? ;
.bss:0000000000218212                 db    ? ;
.bss:0000000000218213                 db    ? ;
.bss:0000000000218214                 db    ? ;
.bss:0000000000218215                 db    ? ;
.bss:0000000000218216                 db    ? ;
.bss:0000000000218217                 db    ? ;
.bss:0000000000218218                 db    ? ;
.bss:0000000000218219                 db    ? ;
.bss:000000000021821A                 db    ? ;
.bss:000000000021821B                 db    ? ;
.bss:000000000021821C                 db    ? ;
.bss:000000000021821D                 db    ? ;
.bss:000000000021821E                 db    ? ;
.bss:000000000021821F                 db    ? ;
.bss:0000000000218220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000218220                                         ; get_quoting_style↑o ...
.bss:0000000000218230 xmmword_218230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000218230                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000218240 xmmword_218240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000218240                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000218250 qword_218250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000218250                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000218250 _bss            ends
.bss:0000000000218250
.prgend:0000000000218258 ; ===========================================================================
.prgend:0000000000218258
.prgend:0000000000218258 ; Segment type: Zero-length
.prgend:0000000000218258 _prgend         segment byte public '' use64
.prgend:0000000000218258 _end            label byte
.prgend:0000000000218258 _prgend         ends
.prgend:0000000000218258
extern:0000000000218260 ; ===========================================================================
extern:0000000000218260
extern:0000000000218260 ; Segment type: Externs
extern:0000000000218260 ; extern
extern:0000000000218260 ; const __int32_t **_ctype_toupper_loc(void)
extern:0000000000218260                 extrn __ctype_toupper_loc:near
extern:0000000000218260                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:0000000000218260                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:0000000000218268 ; char *getenv(const char *name)
extern:0000000000218268                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000218268                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000218270                 extrn __snprintf_chk:near
extern:0000000000218270                                         ; CODE XREF: ___snprintf_chk↑j
extern:0000000000218270                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:0000000000218278 ; void free(void *ptr)
extern:0000000000218278                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000218278                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000218280 ; struct tm *localtime(const time_t *timer)
extern:0000000000218280                 extrn localtime:near    ; CODE XREF: _localtime↑j
extern:0000000000218280                                         ; DATA XREF: .got:localtime_ptr↑o
extern:0000000000218288 ; void __noreturn abort(void)
extern:0000000000218288                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000218288                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000218290 ; int *_errno_location(void)
extern:0000000000218290                 extrn __errno_location:near
extern:0000000000218290                                         ; CODE XREF: ___errno_location↑j
extern:0000000000218290                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000218298 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000218298                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000218298                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002182A0 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
extern:00000000002182A0                 extrn localtime_r:near  ; CODE XREF: _localtime_r↑j
extern:00000000002182A0                                         ; DATA XREF: .got:localtime_r_ptr↑o
extern:00000000002182A8 ; void __noreturn exit(int status)
extern:00000000002182A8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002182A8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002182B0 ; size_t _fpending(FILE *fp)
extern:00000000002182B0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002182B0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002182B8 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
extern:00000000002182B8                 extrn clock_gettime:near
extern:00000000002182B8                                         ; CODE XREF: _clock_gettime↑j
extern:00000000002182B8                                         ; DATA XREF: .got:clock_gettime_ptr↑o
extern:00000000002182C0 ; int setenv(const char *name, const char *value, int replace)
extern:00000000002182C0                 extrn setenv:near       ; CODE XREF: _setenv↑j
extern:00000000002182C0                                         ; DATA XREF: .got:setenv_ptr↑o
extern:00000000002182C8 ; char *textdomain(const char *domainname)
extern:00000000002182C8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002182C8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002182D0 ; int fclose(FILE *stream)
extern:00000000002182D0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002182D0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002182D8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002182D8                 extrn bindtextdomain:near
extern:00000000002182D8                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002182D8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002182E0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002182E0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002182E0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002182E8 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002182E8                 extrn __ctype_get_mb_cur_max:near
extern:00000000002182E8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002182E8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002182F0 ; size_t strlen(const char *s)
extern:00000000002182F0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002182F0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002182F8                 extrn __stack_chk_fail:near
extern:00000000002182F8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002182F8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000218300 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000218300                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000218300                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000218308 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000218308                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000218308                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000218310 ; char *strchr(const char *s, int c)
extern:0000000000218310                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000218310                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000218318 ; int snprintf(char *s, size_t maxlen, const char *format, ...)
extern:0000000000218318                 extrn snprintf:near     ; CODE XREF: _snprintf↑j
extern:0000000000218318                                         ; DATA XREF: .got:snprintf_ptr↑o
extern:0000000000218320 ; int _overflow(_IO_FILE *, int)
extern:0000000000218320                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000218320                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000218328 ; char *strrchr(const char *s, int c)
extern:0000000000218328                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000218328                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000218330 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
extern:0000000000218330                 extrn gmtime_r:near     ; CODE XREF: _gmtime_r↑j
extern:0000000000218330                                         ; DATA XREF: .got:gmtime_r_ptr↑o
extern:0000000000218338 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000218338                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000218338                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000218340 ; int fputs(const char *s, FILE *stream)
extern:0000000000218340                 extrn fputs:near        ; CODE XREF: _fputs↑j
extern:0000000000218340                                         ; DATA XREF: .got:fputs_ptr↑o
extern:0000000000218348 ; void *memset(void *s, int c, size_t n)
extern:0000000000218348                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000218348                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000218350 ; int fputc(int c, FILE *stream)
extern:0000000000218350                 extrn fputc:near        ; CODE XREF: _fputc↑j
extern:0000000000218350                                         ; DATA XREF: .got:fputc_ptr↑o
extern:0000000000218358 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000218358                 extrn __libc_start_main:near
extern:0000000000218358                                         ; CODE XREF: start+24↑p
extern:0000000000218358                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000218360 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000218360                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000218360                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000218368 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000218368                 extrn fputs_unlocked:near
extern:0000000000218368                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000218368                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000218370 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000218370                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000218370                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000218378 ; int putenv(char *string)
extern:0000000000218378                 extrn putenv:near       ; CODE XREF: _putenv↑j
extern:0000000000218378                                         ; DATA XREF: .got:putenv_ptr↑o
extern:0000000000218380 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:0000000000218380                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:0000000000218380                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:0000000000218388 ; int strcmp(const char *s1, const char *s2)
extern:0000000000218388                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000218388                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000218390 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000218390                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000218390                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000218398 ; void tzset(void)
extern:0000000000218398                 extrn tzset:near        ; CODE XREF: _tzset↑j
extern:0000000000218398                                         ; DATA XREF: .got:tzset_ptr↑o
extern:00000000002183A0 ; time_t time(time_t *timer)
extern:00000000002183A0                 extrn time:near         ; CODE XREF: _time↑j
extern:00000000002183A0                                         ; DATA XREF: .got:time_ptr↑o
extern:00000000002183A8 ; int fileno(FILE *stream)
extern:00000000002183A8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002183A8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002183B0                 extrn __stpcpy_chk:near ; CODE XREF: ___stpcpy_chk↑j
extern:00000000002183B0                                         ; DATA XREF: .got:__stpcpy_chk_ptr↑o
extern:00000000002183B8 ; int settimeofday(const struct timeval *tv, const struct timezone *tz)
extern:00000000002183B8                 extrn settimeofday:near ; CODE XREF: _settimeofday↑j
extern:00000000002183B8                                         ; DATA XREF: .got:settimeofday_ptr↑o
extern:00000000002183C0 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:00000000002183C0                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:00000000002183C0                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:00000000002183C8 ; void *malloc(size_t size)
extern:00000000002183C8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002183C8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002183D0 ; int fflush(FILE *stream)
extern:00000000002183D0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002183D0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002183D8 ; char *nl_langinfo(nl_item item)
extern:00000000002183D8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002183D8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002183E0 ; int clock_settime(clockid_t clock_id, const struct timespec *tp)
extern:00000000002183E0                 extrn clock_settime:near
extern:00000000002183E0                                         ; CODE XREF: _clock_settime↑j
extern:00000000002183E0                                         ; DATA XREF: .got:clock_settime_ptr↑o
extern:00000000002183E8 ; time_t mktime(struct tm *tp)
extern:00000000002183E8                 extrn mktime:near       ; CODE XREF: _mktime↑j
extern:00000000002183E8                                         ; DATA XREF: .got:mktime_ptr↑o
extern:00000000002183F0 ; int _freading(FILE *fp)
extern:00000000002183F0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002183F0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:00000000002183F8 ; void *realloc(void *ptr, size_t size)
extern:00000000002183F8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:00000000002183F8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000218400 ; char *setlocale(int category, const char *locale)
extern:0000000000218400                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000218400                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000218408                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000218408                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000218410 ; time_t timegm(struct tm *tp)
extern:0000000000218410                 extrn timegm:near       ; CODE XREF: _timegm↑j
extern:0000000000218410                                         ; DATA XREF: .got:timegm_ptr↑o
extern:0000000000218418 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
extern:0000000000218418                 extrn strftime:near     ; CODE XREF: _strftime↑j
extern:0000000000218418                                         ; DATA XREF: .got:strftime_ptr↑o
extern:0000000000218420 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000218420                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000218420                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000218428 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000218428                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000218428                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000218430 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000218430                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000218430                                         ; DATA XREF: .got:fopen_ptr↑o
extern:0000000000218438 ; int unsetenv(const char *name)
extern:0000000000218438                 extrn unsetenv:near     ; CODE XREF: _unsetenv↑j
extern:0000000000218438                                         ; DATA XREF: .got:unsetenv_ptr↑o
extern:0000000000218440 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000218440                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000218440                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000218448 ; void __noreturn exit(int status)
extern:0000000000218448                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000218448                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000218450 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000218450                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000218450                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000218458                 extrn __fprintf_chk:near
extern:0000000000218458                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000218458                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000218460 ; int mbsinit(const mbstate_t *ps)
extern:0000000000218460                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000218460                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000218468 ; int iswprint(wint_t wc)
extern:0000000000218468                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000218468                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000218470 ; int __fastcall __cxa_finalize(void *)
extern:0000000000218470                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000218470                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000218470                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000218478 ; const __int32_t **_ctype_tolower_loc(void)
extern:0000000000218478                 extrn __ctype_tolower_loc:near
extern:0000000000218478                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:0000000000218478                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:0000000000218480 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000218480                 extrn __ctype_b_loc:near
extern:0000000000218480                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000218480                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000218488                 extrn __sprintf_chk:near
extern:0000000000218488                                         ; CODE XREF: ___sprintf_chk↑j
extern:0000000000218488                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:0000000000218490                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000218490                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000218498                 extrn __gmon_start__:near ; weak
extern:0000000000218498                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000218498                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002184A0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002184A0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002184A0
extern:00000000002184A0
extern:00000000002184A0                 end start
