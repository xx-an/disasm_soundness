LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : CCBD096E2E070332EC27AFE043D2E76F098D372B16DC53CACDD3E0D67C5A060C
LOAD:0000000000000000 ; Input MD5    : BCFBD44A7A45CF8A4C059C4BBB538437
LOAD:0000000000000000 ; Input CRC32  : 5A2341D8
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/cut
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'cut.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'set-fields.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'getndelim2.c'
LOAD:0000000000000000 ; Source File : 'memchr2.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrndup.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'freadptr.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'freadseek.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'freadahead.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2DC60h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 88E0h                ; Size in file image
LOAD:00000000000000D8                 dq 88E0h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 8A50h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 208A50h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 650h                 ; Size in file image
LOAD:0000000000000110                 dq 858h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 8C18h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 208C18h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 78D0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 78D0h                ; Physical address
LOAD:00000000000001B0                 dq 2A4h                 ; Size in file image
LOAD:00000000000001B8                 dq 2A4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 8A50h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 208A50h              ; Physical address
LOAD:0000000000000220                 dq 5B0h                 ; Size in file image
LOAD:0000000000000228                 dq 5B0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0E5h, 0FCh, 2Ch, 3Fh, 38h, 83h, 0A1h, 68h, 8Dh, 2Ah ; Desc
LOAD:0000000000000284                 db 44h, 3Dh, 0AEh, 0, 0FEh, 53h, 0C0h, 87h, 13h, 37h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 3Dh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 3Dh, 3Eh, 44h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aUflow - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_970, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_970, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_970, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_970, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_970, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_970, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFerror - offset byte_970, 12h, 0, 0, \ ; "ferror"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aQsort - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aClearerrUnlock - offset byte_970, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_970, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFclose - offset byte_970, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aBindtextdomain - offset byte_970, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aDcgettext - offset byte_970, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_970, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrlen - offset byte_970, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStackChkFail - offset byte_970, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aGetoptLong - offset byte_970, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aMbrtowc - offset byte_970, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aOverflow - offset byte_970, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrrchr - offset byte_970, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aLseek - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000508                            0>
LOAD:0000000000000520                 Elf64_Sym <offset aAssertFail - offset byte_970, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemset - offset byte_970, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFgetc - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "fgetc"
LOAD:0000000000000550                            0>
LOAD:0000000000000568                 Elf64_Sym <offset aStrspn - offset byte_970, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aPosixFadvise - offset byte_970, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMemchr - offset byte_970, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aStrndup - offset byte_970, 12h, 0, 0, \ ; "strndup"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aLibcStartMain - offset byte_970, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcmp - offset byte_970, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFputsUnlocked - offset byte_970, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aCalloc - offset byte_970, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aGmonStart - offset byte_970, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aMemcpy - offset byte_970, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFileno - offset byte_970, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aMalloc - offset byte_970, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFflush - offset byte_970, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aNlLanginfo - offset byte_970, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aUngetc - offset byte_970, 12h, 0, 0, \ ; "ungetc"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFreading - offset byte_970, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFwriteUnlocked - offset byte_970, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aRealloc - offset byte_970, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aSetlocale - offset byte_970, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aPrintfChk - offset byte_970, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFreadChk - offset byte_970, 12h, 0, 0, \ ; "__fread_chk"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aMemmove - offset byte_970, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFerror+1 - offset byte_970, 12h, 0, 0, \ ; "error"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFseeko - offset byte_970, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFopen - offset byte_970, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000007A8                            0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCxaAtexit - offset byte_970, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aExit+1 - offset byte_970, 12h, 0, 0, \ ; "exit"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFwrite - offset byte_970, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFprintfChk - offset byte_970, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aItmRegistertmc - offset byte_970, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aMbsinit - offset byte_970, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aIswprint - offset byte_970, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aCxaFinalize - offset byte_970, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aCtypeBLoc - offset byte_970, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aStdout - offset byte_970, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000898                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aProgname - offset byte_970, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000008B0                            offset __bss_start, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aStdin - offset byte_970, 11h, 0, 19h, \ ; "stdin"
LOAD:00000000000008C8                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:00000000000008E0                 Elf64_Sym <offset aProgramInvocat - offset byte_970, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000008E0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008F8                 Elf64_Sym <offset aPrognameFull - offset byte_970, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000008F8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000910                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_970, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000910                            offset __bss_start, 8>
LOAD:0000000000000928                 Elf64_Sym <offset aStderr - offset byte_970, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000928                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aOptind - offset byte_970, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000940                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000958                 Elf64_Sym <offset aOptarg - offset byte_970, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000958                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000970 ; ELF String Table
LOAD:0000000000000970 byte_970        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000970                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000971 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000D20↓o
LOAD:000000000000097B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000982 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000730↑o
LOAD:000000000000098F aClearerrUnlock db 'clearerr_unlocked',0
LOAD:000000000000098F                                         ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:00000000000009A1 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000718↑o
LOAD:00000000000009AB aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000009B3 aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:00000000000009B9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000009C1 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:00000000000009C8 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009D0 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000009DA aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000009EB aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:00000000000009F4 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000700↑o
LOAD:00000000000009FC aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000A02 aStdin          db 'stdin',0            ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000A08 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000A08                                         ; LOAD:00000000000007D8↑o
LOAD:0000000000000A0E aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000A15 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000A1C aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A1C                                         ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000A34 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A42 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A42                                         ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A59 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000A67 aFgetc          db 'fgetc',0            ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A6D aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A74 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A7B aUngetc         db 'ungetc',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000A82 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A89 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000A9A aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000AA1 aStrndup        db 'strndup',0          ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000AA9 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AB7 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000ABE aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000AC4 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000ACB aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000AD2 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000AD9 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000AE1 aUflow          db '__uflow',0          ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000AE9 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000AF5 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B03 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000B0A aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000B15 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000B1C aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B28 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000B2F aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000B36 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000B41 aFreadChk       db '__fread_chk',0      ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000B4D aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000B4D                                         ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000B6B aQsort          db 'qsort',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000B71 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B80 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000B88 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000B88                                         ; LOAD:0000000000000400↑o
LOAD:0000000000000B97 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000BA7 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000BA7                                         ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000BB9 aFerror         db 'ferror',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000BB9                                         ; LOAD:0000000000000778↑o
LOAD:0000000000000BC0 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000BC7 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BD2 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000BE1 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000BE6 aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000BF1 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000C01 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000C0E aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000D30↓o
LOAD:0000000000000C18 aGlibc27        db 'GLIBC_2.7',0        ; DATA XREF: LOAD:0000000000000D40↓o
LOAD:0000000000000C22 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000D50↓o
LOAD:0000000000000C2E aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000D60↓o
LOAD:0000000000000C39 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000D70↓o
LOAD:0000000000000C43 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000D80↓o
LOAD:0000000000000C4F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000C4F                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000C6B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000C7A aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000C7A                                         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000C94 ; ELF GNU Symbol Version Table
LOAD:0000000000000C94                 dw 0
LOAD:0000000000000C96                 dw 2                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000C98                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000C9A                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C9C                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C9E                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000CA0                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000CA2                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000CA4                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000CA6                 dw 2                    ; ferror@@GLIBC_2.2.5
LOAD:0000000000000CA8                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:0000000000000CAA                 dw 2                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000CAC                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000CAE                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000CB0                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000CB2                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000CB4                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000CB6                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000CB8                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000CBA                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000CBC                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000CBE                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000CC0                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000CC2                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000CC4                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000CC6                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000CC8                 dw 2                    ; fgetc@@GLIBC_2.2.5
LOAD:0000000000000CCA                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000CCC                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000CCE                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000CD0                 dw 2                    ; strndup@@GLIBC_2.2.5
LOAD:0000000000000CD2                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000CD4                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000CD6                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000CD8                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000CDA                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000CDC                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000CDE                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000CE0                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000CE2                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000CE4                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000CE6                 dw 2                    ; ungetc@@GLIBC_2.2.5
LOAD:0000000000000CE8                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000CEA                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000CEC                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000CEE                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000CF0                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000CF2                 dw 6                    ; __fread_chk@@GLIBC_2.7
LOAD:0000000000000CF4                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000CF6                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000CF8                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000CFA                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000CFC                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000CFE                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000D00                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000D02                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D04                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000D06                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000D08                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000D0A                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D0C                 dw 7                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D0E                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D10                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D12                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000D14                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D16                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D18                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000D1A                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000D1C                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000D1E                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000D20 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000D20                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_970, 10h, 0> ; "libc.so.6"
LOAD:0000000000000D30                 Elf64_Vernaux <0D696913h, 0, 7, offset aGlibc23 - offset byte_970, \ ; "GLIBC_2.3"
LOAD:0000000000000D30                                10h>
LOAD:0000000000000D40                 Elf64_Vernaux <0D696917h, 0, 6, offset aGlibc27 - offset byte_970, \ ; "GLIBC_2.7"
LOAD:0000000000000D40                                10h>
LOAD:0000000000000D50                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_970, \ ; "GLIBC_2.3.4"
LOAD:0000000000000D50                                10h>
LOAD:0000000000000D60                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_970, \ ; "GLIBC_2.14"
LOAD:0000000000000D60                                10h>
LOAD:0000000000000D70                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_970, \ ; "GLIBC_2.4"
LOAD:0000000000000D70                                10h>
LOAD:0000000000000D80                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_970, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000D90 ; ELF RELA Relocation Table
LOAD:0000000000000D90                 Elf64_Rela <208A50h, 8, 1F60h> ; R_X86_64_RELATIVE +1F60h
LOAD:0000000000000DA8                 Elf64_Rela <208A58h, 8, 1F20h> ; R_X86_64_RELATIVE +1F20h
LOAD:0000000000000DC0                 Elf64_Rela <208A60h, 8, 65A4h> ; R_X86_64_RELATIVE +65A4h
LOAD:0000000000000DD8                 Elf64_Rela <208A80h, 8, 65AAh> ; R_X86_64_RELATIVE +65AAh
LOAD:0000000000000DF0                 Elf64_Rela <208AA0h, 8, 6F02h> ; R_X86_64_RELATIVE +6F02h
LOAD:0000000000000E08                 Elf64_Rela <208AC0h, 8, 65CBh> ; R_X86_64_RELATIVE +65CBh
LOAD:0000000000000E20                 Elf64_Rela <208AE0h, 8, 65B5h> ; R_X86_64_RELATIVE +65B5h
LOAD:0000000000000E38                 Elf64_Rela <208B00h, 8, 65C4h> ; R_X86_64_RELATIVE +65C4h
LOAD:0000000000000E50                 Elf64_Rela <208B20h, 8, 65D5h> ; R_X86_64_RELATIVE +65D5h
LOAD:0000000000000E68                 Elf64_Rela <208B40h, 8, 65E0h> ; R_X86_64_RELATIVE +65E0h
LOAD:0000000000000E80                 Elf64_Rela <208B60h, 8, 65F0h> ; R_X86_64_RELATIVE +65F0h
LOAD:0000000000000E98                 Elf64_Rela <208B80h, 8, 65F5h> ; R_X86_64_RELATIVE +65F5h
LOAD:0000000000000EB0                 Elf64_Rela <208BC0h, 8, 7079h> ; R_X86_64_RELATIVE +7079h
LOAD:0000000000000EC8                 Elf64_Rela <208BC8h, 8, 7081h> ; R_X86_64_RELATIVE +7081h
LOAD:0000000000000EE0                 Elf64_Rela <208BD0h, 8, 7087h> ; R_X86_64_RELATIVE +7087h
LOAD:0000000000000EF8                 Elf64_Rela <208BD8h, 8, 7094h> ; R_X86_64_RELATIVE +7094h
LOAD:0000000000000F10                 Elf64_Rela <208BE0h, 8, 70A1h> ; R_X86_64_RELATIVE +70A1h
LOAD:0000000000000F28                 Elf64_Rela <208BE8h, 8, 649Eh> ; R_X86_64_RELATIVE +649Eh
LOAD:0000000000000F40                 Elf64_Rela <208BF0h, 8, 70B5h> ; R_X86_64_RELATIVE +70B5h
LOAD:0000000000000F58                 Elf64_Rela <208BF8h, 8, 709Ah> ; R_X86_64_RELATIVE +709Ah
LOAD:0000000000000F70                 Elf64_Rela <208C00h, 8, 6565h> ; R_X86_64_RELATIVE +6565h
LOAD:0000000000000F88                 Elf64_Rela <208C08h, 8, 70BDh> ; R_X86_64_RELATIVE +70BDh
LOAD:0000000000000FA0                 Elf64_Rela <209008h, 8, 209008h> ; R_X86_64_RELATIVE +209008h
LOAD:0000000000000FB8                 Elf64_Rela <209018h, 8, 7001h> ; R_X86_64_RELATIVE +7001h
LOAD:0000000000000FD0                 Elf64_Rela <209080h, 8, 209090h> ; R_X86_64_RELATIVE +209090h
LOAD:0000000000000FE8                 Elf64_Rela <209098h, 8, 209160h> ; R_X86_64_RELATIVE +209160h
LOAD:0000000000001000                 Elf64_Rela <208FD8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001018                 Elf64_Rela <208FE0h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001030                 Elf64_Rela <208FE8h, 2300000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001048                 Elf64_Rela <208FF0h, 3800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001060                 Elf64_Rela <208FF8h, 3B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001078                 Elf64_Rela <2090A0h, 3E00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001090                 Elf64_Rela <2090A8h, 3D00000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000010A8                 Elf64_Rela <2090B0h, 3F00000005h, 0> ; R_X86_64_COPY stdin
LOAD:00000000000010C0                 Elf64_Rela <2090B8h, 4400000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000010D8                 Elf64_Rela <2090C0h, 4500000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000010F0                 Elf64_Rela <2090C8h, 4100000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001108                 Elf64_Rela <2090E0h, 4300000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001120 ; ELF JMPREL Relocation Table
LOAD:0000000000001120                 Elf64_Rela <208E20h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000001138                 Elf64_Rela <208E28h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001150                 Elf64_Rela <208E30h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001168                 Elf64_Rela <208E38h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001180                 Elf64_Rela <208E40h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001198                 Elf64_Rela <208E48h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000011B0                 Elf64_Rela <208E50h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000011C8                 Elf64_Rela <208E58h, 900000007h, 0> ; R_X86_64_JUMP_SLOT ferror
LOAD:00000000000011E0                 Elf64_Rela <208E60h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:00000000000011F8                 Elf64_Rela <208E68h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:0000000000001210                 Elf64_Rela <208E70h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001228                 Elf64_Rela <208E78h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001240                 Elf64_Rela <208E80h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001258                 Elf64_Rela <208E88h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001270                 Elf64_Rela <208E90h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001288                 Elf64_Rela <208E98h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000012A0                 Elf64_Rela <208EA0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000012B8                 Elf64_Rela <208EA8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000012D0                 Elf64_Rela <208EB0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000012E8                 Elf64_Rela <208EB8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001300                 Elf64_Rela <208EC0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001318                 Elf64_Rela <208EC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001330                 Elf64_Rela <208ED0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001348                 Elf64_Rela <208ED8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001360                 Elf64_Rela <208EE0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fgetc
LOAD:0000000000001378                 Elf64_Rela <208EE8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001390                 Elf64_Rela <208EF0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000013A8                 Elf64_Rela <208EF8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:00000000000013C0                 Elf64_Rela <208F00h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strndup
LOAD:00000000000013D8                 Elf64_Rela <208F08h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000013F0                 Elf64_Rela <208F10h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001408                 Elf64_Rela <208F18h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001420                 Elf64_Rela <208F20h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001438                 Elf64_Rela <208F28h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001450                 Elf64_Rela <208F30h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001468                 Elf64_Rela <208F38h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001480                 Elf64_Rela <208F40h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001498                 Elf64_Rela <208F48h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT ungetc
LOAD:00000000000014B0                 Elf64_Rela <208F50h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000014C8                 Elf64_Rela <208F58h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000014E0                 Elf64_Rela <208F60h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000014F8                 Elf64_Rela <208F68h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001510                 Elf64_Rela <208F70h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001528                 Elf64_Rela <208F78h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __fread_chk
LOAD:0000000000001540                 Elf64_Rela <208F80h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001558                 Elf64_Rela <208F88h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001570                 Elf64_Rela <208F90h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001588                 Elf64_Rela <208F98h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000015A0                 Elf64_Rela <208FA0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000015B8                 Elf64_Rela <208FA8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000015D0                 Elf64_Rela <208FB0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000015E8                 Elf64_Rela <208FB8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001600                 Elf64_Rela <208FC0h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001618                 Elf64_Rela <208FC8h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001630                 Elf64_Rela <208FD0h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001630 LOAD            ends
LOAD:0000000000001630
.init:0000000000001648 ; ===========================================================================
.init:0000000000001648
.init:0000000000001648 ; Segment type: Pure code
.init:0000000000001648 ; Segment permissions: Read/Execute
.init:0000000000001648 _init           segment dword public 'CODE' use64
.init:0000000000001648                 assume cs:_init
.init:0000000000001648                 ;org 1648h
.init:0000000000001648                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001648
.init:0000000000001648 ; =============== S U B R O U T I N E =======================================
.init:0000000000001648
.init:0000000000001648
.init:0000000000001648                 public _init_proc
.init:0000000000001648 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001648                 sub     rsp, 8          ; _init
.init:000000000000164C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001653                 test    rax, rax
.init:0000000000001656                 jz      short loc_165A
.init:0000000000001658                 call    rax ; __gmon_start__
.init:000000000000165A
.init:000000000000165A loc_165A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000165A                 add     rsp, 8
.init:000000000000165E                 retn
.init:000000000000165E _init_proc      endp
.init:000000000000165E
.init:000000000000165E _init           ends
.init:000000000000165E
LOAD:000000000000165F ; ===========================================================================
LOAD:000000000000165F
LOAD:000000000000165F ; Segment type: Pure code
LOAD:000000000000165F ; Segment permissions: Read/Execute
LOAD:000000000000165F LOAD            segment byte public 'CODE' use64
LOAD:000000000000165F                 assume cs:LOAD
LOAD:000000000000165F                 ;org 165Fh
LOAD:000000000000165F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000165F                 align 20h
LOAD:000000000000165F LOAD            ends
LOAD:000000000000165F
.plt:0000000000001660 ; ===========================================================================
.plt:0000000000001660
.plt:0000000000001660 ; Segment type: Pure code
.plt:0000000000001660 ; Segment permissions: Read/Execute
.plt:0000000000001660 _plt            segment para public 'CODE' use64
.plt:0000000000001660                 assume cs:_plt
.plt:0000000000001660                 ;org 1660h
.plt:0000000000001660                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660
.plt:0000000000001660 sub_1660        proc near               ; CODE XREF: .plt:000000000000167B↓j
.plt:0000000000001660                                         ; .plt:000000000000168B↓j ...
.plt:0000000000001660 ; __unwind {
.plt:0000000000001660                 push    cs:qword_208E10
.plt:0000000000001666                 jmp     cs:qword_208E18
.plt:0000000000001666 sub_1660        endp
.plt:0000000000001666
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:000000000000166C                 align 10h
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int __uflow(_IO_FILE *)
.plt:0000000000001670 ___uflow        proc near               ; CODE XREF: cut_file+166↓p
.plt:0000000000001670                                         ; cut_file+1B7↓p ...
.plt:0000000000001670                 jmp     cs:__uflow_ptr
.plt:0000000000001670 ___uflow        endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    0
.plt:000000000000167B                 jmp     sub_1660
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; void free(void *ptr)
.plt:0000000000001680 _free           proc near               ; CODE XREF: cut_file+700↓p
.plt:0000000000001680                                         ; set_fields+3F1↓p ...
.plt:0000000000001680                 jmp     cs:free_ptr
.plt:0000000000001680 _free           endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    1
.plt:000000000000168B                 jmp     sub_1660
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: noreturn thunk
.plt:0000000000001690
.plt:0000000000001690 ; void __noreturn abort(void)
.plt:0000000000001690 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001690                                         ; quotearg_buffer_restyled:def_3B51↓p ...
.plt:0000000000001690                 jmp     cs:abort_ptr
.plt:0000000000001690 _abort          endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    2
.plt:000000000000169B                 jmp     sub_1660
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; int *__errno_location(void)
.plt:00000000000016A0 ___errno_location proc near             ; CODE XREF: main+3A4↓p
.plt:00000000000016A0                                         ; cut_file+55F↓p ...
.plt:00000000000016A0                 jmp     cs:__errno_location_ptr
.plt:00000000000016A0 ___errno_location endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    3
.plt:00000000000016AB                 jmp     sub_1660
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000016B0 _strncmp        proc near               ; CODE XREF: usage+34C↓p
.plt:00000000000016B0                                         ; usage+40D↓p
.plt:00000000000016B0                 jmp     cs:strncmp_ptr
.plt:00000000000016B0 _strncmp        endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    4
.plt:00000000000016BB                 jmp     sub_1660
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: noreturn thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; void __noreturn _exit(int status)
.plt:00000000000016C0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000016C0                 jmp     cs:_exit_ptr
.plt:00000000000016C0 __exit          endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    5
.plt:00000000000016CB                 jmp     sub_1660
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; size_t __fpending(FILE *fp)
.plt:00000000000016D0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000016D0                 jmp     cs:__fpending_ptr
.plt:00000000000016D0 ___fpending     endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    6
.plt:00000000000016DB                 jmp     sub_1660
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; int ferror(FILE *stream)
.plt:00000000000016E0 _ferror         proc near               ; CODE XREF: freadseek+A4↓p
.plt:00000000000016E0                 jmp     cs:ferror_ptr
.plt:00000000000016E0 _ferror         endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    7
.plt:00000000000016EB                 jmp     sub_1660
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:00000000000016F0 _qsort          proc near               ; CODE XREF: set_fields+172↓p
.plt:00000000000016F0                 jmp     cs:qsort_ptr
.plt:00000000000016F0 _qsort          endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    8
.plt:00000000000016FB                 jmp     sub_1660
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; void clearerr_unlocked(FILE *stream)
.plt:0000000000001700 _clearerr_unlocked proc near            ; CODE XREF: cut_file:loc_24FA↓p
.plt:0000000000001700                 jmp     cs:clearerr_unlocked_ptr
.plt:0000000000001700 _clearerr_unlocked endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    9
.plt:000000000000170B                 jmp     sub_1660
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; char *textdomain(const char *domainname)
.plt:0000000000001710 _textdomain     proc near               ; CODE XREF: main+57↓p
.plt:0000000000001710                 jmp     cs:textdomain_ptr
.plt:0000000000001710 _textdomain     endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    0Ah
.plt:000000000000171B                 jmp     sub_1660
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int fclose(FILE *stream)
.plt:0000000000001720 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001720                                         ; rpl_fclose+6B↓j
.plt:0000000000001720                 jmp     cs:fclose_ptr
.plt:0000000000001720 _fclose         endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    0Bh
.plt:000000000000172B                 jmp     sub_1660
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001730 _bindtextdomain proc near               ; CODE XREF: main+4B↓p
.plt:0000000000001730                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001730 _bindtextdomain endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    0Ch
.plt:000000000000173B                 jmp     sub_1660
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001740 _dcgettext      proc near               ; CODE XREF: main+434↓p
.plt:0000000000001740                                         ; usage+38↓p ...
.plt:0000000000001740                 jmp     cs:dcgettext_ptr
.plt:0000000000001740 _dcgettext      endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    0Dh
.plt:000000000000174B                 jmp     sub_1660
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001750 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001750                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001750 ___ctype_get_mb_cur_max endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    0Eh
.plt:000000000000175B                 jmp     sub_1660
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; size_t strlen(const char *s)
.plt:0000000000001760 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001760                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001760                 jmp     cs:strlen_ptr
.plt:0000000000001760 _strlen         endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    0Fh
.plt:000000000000176B                 jmp     sub_1660
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: noreturn thunk
.plt:0000000000001770
.plt:0000000000001770 ___stack_chk_fail proc near             ; CODE XREF: getndelim2:loc_376A↓p
.plt:0000000000001770                                         ; quotearg_buffer_restyled:loc_4CB3↓p ...
.plt:0000000000001770                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001770 ___stack_chk_fail endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    10h
.plt:000000000000177B                 jmp     sub_1660
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001780 _getopt_long    proc near               ; CODE XREF: main+9E↓p
.plt:0000000000001780                 jmp     cs:getopt_long_ptr
.plt:0000000000001780 _getopt_long    endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    11h
.plt:000000000000178B                 jmp     sub_1660
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001790 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001790                 jmp     cs:mbrtowc_ptr
.plt:0000000000001790 _mbrtowc        endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    12h
.plt:000000000000179B                 jmp     sub_1660
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000017A0 ___overflow     proc near               ; CODE XREF: cut_file+28B↓p
.plt:00000000000017A0                                         ; cut_file+6DA↓p ...
.plt:00000000000017A0                 jmp     cs:__overflow_ptr
.plt:00000000000017A0 ___overflow     endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    13h
.plt:00000000000017AB                 jmp     sub_1660
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; char *strrchr(const char *s, int c)
.plt:00000000000017B0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000017B0                 jmp     cs:strrchr_ptr
.plt:00000000000017B0 _strrchr        endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    14h
.plt:00000000000017BB                 jmp     sub_1660
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000017C0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000017C0                                         ; rpl_fseeko+3B↓p ...
.plt:00000000000017C0                 jmp     cs:lseek_ptr
.plt:00000000000017C0 _lseek          endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    15h
.plt:00000000000017CB                 jmp     sub_1660
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: noreturn thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000017D0 ___assert_fail  proc near               ; CODE XREF: cut_file+7E2↓p
.plt:00000000000017D0                 jmp     cs:__assert_fail_ptr
.plt:00000000000017D0 ___assert_fail  endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    16h
.plt:00000000000017DB                 jmp     sub_1660
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000017E0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000017E0                                         ; xzalloc+12↓j
.plt:00000000000017E0                 jmp     cs:memset_ptr
.plt:00000000000017E0 _memset         endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    17h
.plt:00000000000017EB                 jmp     sub_1660
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; int fgetc(FILE *stream)
.plt:00000000000017F0 _fgetc          proc near               ; CODE XREF: freadseek+97↓p
.plt:00000000000017F0                 jmp     cs:fgetc_ptr
.plt:00000000000017F0 _fgetc          endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    18h
.plt:00000000000017FB                 jmp     sub_1660
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000001800 _strspn         proc near               ; CODE XREF: set_fields+4AE↓p
.plt:0000000000001800                 jmp     cs:strspn_ptr
.plt:0000000000001800 _strspn         endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    19h
.plt:000000000000180B                 jmp     sub_1660
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001810 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001810                                         ; fadvise+16↓j
.plt:0000000000001810                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001810 _posix_fadvise  endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    1Ah
.plt:000000000000181B                 jmp     sub_1660
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001820 _memchr         proc near               ; CODE XREF: memchr2+1A7↓j
.plt:0000000000001820                 jmp     cs:memchr_ptr
.plt:0000000000001820 _memchr         endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    1Bh
.plt:000000000000182B                 jmp     sub_1660
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; char *strndup(const char *string, size_t n)
.plt:0000000000001830 _strndup        proc near               ; CODE XREF: xstrndup+4↓p
.plt:0000000000001830                 jmp     cs:strndup_ptr
.plt:0000000000001830 _strndup        endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    1Ch
.plt:000000000000183B                 jmp     sub_1660
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001840 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001840                 jmp     cs:memcmp_ptr
.plt:0000000000001840 _memcmp         endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    1Dh
.plt:000000000000184B                 jmp     sub_1660
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001850 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001850                                         ; usage+C2↓p ...
.plt:0000000000001850                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001850 _fputs_unlocked endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    1Eh
.plt:000000000000185B                 jmp     sub_1660
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001860 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001860                 jmp     cs:calloc_ptr
.plt:0000000000001860 _calloc         endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    1Fh
.plt:000000000000186B                 jmp     sub_1660
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001870 _memcpy         proc near               ; CODE XREF: getndelim2+146↓p
.plt:0000000000001870                                         ; xmemdup+23↓j
.plt:0000000000001870                 jmp     cs:memcpy_ptr
.plt:0000000000001870 _memcpy         endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    20h ; ' '
.plt:000000000000187B                 jmp     sub_1660
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; int fileno(FILE *stream)
.plt:0000000000001880 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001880                                         ; rpl_fclose+7↓p ...
.plt:0000000000001880                 jmp     cs:fileno_ptr
.plt:0000000000001880 _fileno         endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    21h ; '!'
.plt:000000000000188B                 jmp     sub_1660
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; void *malloc(size_t size)
.plt:0000000000001890 _malloc         proc near               ; CODE XREF: getndelim2+2F1↓p
.plt:0000000000001890                                         ; xmalloc+4↓p
.plt:0000000000001890                 jmp     cs:malloc_ptr
.plt:0000000000001890 _malloc         endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    22h ; '"'
.plt:000000000000189B                 jmp     sub_1660
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; int fflush(FILE *stream)
.plt:00000000000018A0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000018A0                                         ; rpl_fflush+3B↓j
.plt:00000000000018A0                 jmp     cs:fflush_ptr
.plt:00000000000018A0 _fflush         endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    23h ; '#'
.plt:00000000000018AB                 jmp     sub_1660
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; char *nl_langinfo(nl_item item)
.plt:00000000000018B0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000018B0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000018B0 _nl_langinfo    endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    24h ; '$'
.plt:00000000000018BB                 jmp     sub_1660
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; int ungetc(int c, FILE *stream)
.plt:00000000000018C0 _ungetc         proc near               ; CODE XREF: cut_file+88↓p
.plt:00000000000018C0                                         ; cut_file+331↓p ...
.plt:00000000000018C0                 jmp     cs:ungetc_ptr
.plt:00000000000018C0 _ungetc         endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    25h ; '%'
.plt:00000000000018CB                 jmp     sub_1660
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; int __freading(FILE *fp)
.plt:00000000000018D0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000018D0                                         ; rpl_fflush+9↓p
.plt:00000000000018D0                 jmp     cs:__freading_ptr
.plt:00000000000018D0 ___freading     endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    26h ; '&'
.plt:00000000000018DB                 jmp     sub_1660
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000018E0 _fwrite_unlocked proc near              ; CODE XREF: cut_file+F3↓p
.plt:00000000000018E0                                         ; cut_file+23B↓p ...
.plt:00000000000018E0                 jmp     cs:fwrite_unlocked_ptr
.plt:00000000000018E0 _fwrite_unlocked endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    27h ; '''
.plt:00000000000018EB                 jmp     sub_1660
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000018F0 _realloc        proc near               ; CODE XREF: getndelim2+264↓p
.plt:00000000000018F0                                         ; xrealloc+11↓p
.plt:00000000000018F0                 jmp     cs:realloc_ptr
.plt:00000000000018F0 _realloc        endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    28h ; '('
.plt:00000000000018FB                 jmp     sub_1660
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; char *setlocale(int category, const char *locale)
.plt:0000000000001900 _setlocale      proc near               ; CODE XREF: main+38↓p
.plt:0000000000001900                                         ; usage+333↓p ...
.plt:0000000000001900                 jmp     cs:setlocale_ptr
.plt:0000000000001900 _setlocale      endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    29h ; ')'
.plt:000000000000190B                 jmp     sub_1660
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001910                                         ; usage+327↓p ...
.plt:0000000000001910                 jmp     cs:__printf_chk_ptr
.plt:0000000000001910 ___printf_chk   endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    2Ah ; '*'
.plt:000000000000191B                 jmp     sub_1660
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ___fread_chk    proc near               ; CODE XREF: freadseek+12E↓p
.plt:0000000000001920                 jmp     cs:__fread_chk_ptr
.plt:0000000000001920 ___fread_chk    endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    2Bh ; '+'
.plt:000000000000192B                 jmp     sub_1660
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001930 _memmove        proc near               ; CODE XREF: set_fields+1ED↓p
.plt:0000000000001930                 jmp     cs:memmove_ptr
.plt:0000000000001930 _memmove        endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    2Ch ; ','
.plt:000000000000193B                 jmp     sub_1660
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001940 _error          proc near               ; CODE XREF: main+3B9↓p
.plt:0000000000001940                                         ; main+442↓p ...
.plt:0000000000001940                 jmp     cs:error_ptr
.plt:0000000000001940 _error          endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    2Dh ; '-'
.plt:000000000000194B                 jmp     sub_1660
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001950 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_602A↓j
.plt:0000000000001950                 jmp     cs:fseeko_ptr
.plt:0000000000001950 _fseeko         endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    2Eh ; '.'
.plt:000000000000195B                 jmp     sub_1660
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001960 _fopen          proc near               ; CODE XREF: cut_file+53B↓p
.plt:0000000000001960                 jmp     cs:fopen_ptr
.plt:0000000000001960 _fopen          endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    2Fh ; '/'
.plt:000000000000196B                 jmp     sub_1660
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001970 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001970                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001970 ___cxa_atexit   endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    30h ; '0'
.plt:000000000000197B                 jmp     sub_1660
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: noreturn thunk
.plt:0000000000001980
.plt:0000000000001980 ; void __noreturn exit(int status)
.plt:0000000000001980 _exit           proc near               ; CODE XREF: main+13A↓p
.plt:0000000000001980                                         ; usage+58↓p
.plt:0000000000001980                 jmp     cs:exit_ptr
.plt:0000000000001980 _exit           endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    31h ; '1'
.plt:000000000000198B                 jmp     sub_1660
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001990 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001990                 jmp     cs:fwrite_ptr
.plt:0000000000001990 _fwrite         endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    32h ; '2'
.plt:000000000000199B                 jmp     sub_1660
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000019A0                                         ; version_etc_arn+37↓p ...
.plt:00000000000019A0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000019A0 ___fprintf_chk  endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    33h ; '3'
.plt:00000000000019AB                 jmp     sub_1660
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000019B0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000019B0                 jmp     cs:mbsinit_ptr
.plt:00000000000019B0 _mbsinit        endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    34h ; '4'
.plt:00000000000019BB                 jmp     sub_1660
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; int iswprint(wint_t wc)
.plt:00000000000019C0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000019C0                 jmp     cs:iswprint_ptr
.plt:00000000000019C0 _iswprint       endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    35h ; '5'
.plt:00000000000019CB                 jmp     sub_1660
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000019D0 ___ctype_b_loc  proc near               ; CODE XREF: set_fields+6B↓p
.plt:00000000000019D0                                         ; quotearg_buffer_restyled+513↓p
.plt:00000000000019D0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000019D0 ___ctype_b_loc  endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    36h ; '6'
.plt:00000000000019DB                 jmp     sub_1660
.plt:00000000000019DB ; } // starts at 1660
.plt:00000000000019DB _plt            ends
.plt:00000000000019DB
.plt.got:00000000000019E0 ; ===========================================================================
.plt.got:00000000000019E0
.plt.got:00000000000019E0 ; Segment type: Pure code
.plt.got:00000000000019E0 ; Segment permissions: Read/Execute
.plt.got:00000000000019E0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000019E0                 assume cs:_plt_got
.plt.got:00000000000019E0                 ;org 19E0h
.plt.got:00000000000019E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000019E0
.plt.got:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000019E0
.plt.got:00000000000019E0 ; Attributes: thunk
.plt.got:00000000000019E0
.plt.got:00000000000019E0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000019E0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000019E0 ; __unwind {
.plt.got:00000000000019E0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000019E0 __cxa_finalize  endp
.plt.got:00000000000019E0
.plt.got:00000000000019E0 ; ---------------------------------------------------------------------------
.plt.got:00000000000019E6                 align 8
.plt.got:00000000000019E6 ; } // starts at 19E0
.plt.got:00000000000019E6 _plt_got        ends
.plt.got:00000000000019E6
LOAD:00000000000019E8 ; ===========================================================================
LOAD:00000000000019E8
LOAD:00000000000019E8 ; Segment type: Pure code
LOAD:00000000000019E8 ; Segment permissions: Read/Execute
LOAD:00000000000019E8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000019E8                 assume cs:LOAD
LOAD:00000000000019E8                 ;org 19E8h
LOAD:00000000000019E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000019E8                 align 10h
LOAD:00000000000019E8 LOAD            ends
LOAD:00000000000019E8
.text:00000000000019F0 ; ===========================================================================
.text:00000000000019F0
.text:00000000000019F0 ; Segment type: Pure code
.text:00000000000019F0 ; Segment permissions: Read/Execute
.text:00000000000019F0 _text           segment para public 'CODE' use64
.text:00000000000019F0                 assume cs:_text
.text:00000000000019F0                 ;org 19F0h
.text:00000000000019F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000019F0
.text:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019F0
.text:00000000000019F0
.text:00000000000019F0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000019F0                 public main
.text:00000000000019F0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000019F0 ; __unwind {
.text:00000000000019F0                 push    r15
.text:00000000000019F2                 push    r14
.text:00000000000019F4                 xor     r14d, r14d
.text:00000000000019F7                 push    r13
.text:00000000000019F9                 push    r12
.text:00000000000019FB                 lea     r13, longopts
.text:0000000000001A02                 push    rbp
.text:0000000000001A03                 push    rbx
.text:0000000000001A04                 mov     ebp, edi
.text:0000000000001A06                 mov     rbx, rsi
.text:0000000000001A09                 lea     r12, shortopts  ; "b:c:d:f:nsz"
.text:0000000000001A10                 sub     rsp, 8
.text:0000000000001A14                 mov     rdi, [rsi]
.text:0000000000001A17                 call    set_program_name
.text:0000000000001A1C                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001A23                 mov     edi, 6          ; category
.text:0000000000001A28                 call    _setlocale
.text:0000000000001A2D                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001A34                 lea     rdi, domainname ; "coreutils"
.text:0000000000001A3B                 call    _bindtextdomain
.text:0000000000001A40                 lea     rdi, domainname ; "coreutils"
.text:0000000000001A47                 call    _textdomain
.text:0000000000001A4C                 lea     rdi, close_stdout
.text:0000000000001A53                 call    atexit
.text:0000000000001A58                 mov     cs:operating_mode, 0
.text:0000000000001A62                 mov     cs:suppress_non_delimited, 0
.text:0000000000001A69                 mov     cs:delim, 0
.text:0000000000001A70                 mov     cs:have_read_stdin, 0
.text:0000000000001A77                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001A80
.text:0000000000001A80 loc_1A80:                               ; CODE XREF: main+C5↓j
.text:0000000000001A80                                         ; main+D7↓j ...
.text:0000000000001A80                 xor     r8d, r8d        ; longind
.text:0000000000001A83                 mov     rcx, r13        ; longopts
.text:0000000000001A86                 mov     rdx, r12        ; shortopts
.text:0000000000001A89                 mov     rsi, rbx        ; argv
.text:0000000000001A8C                 mov     edi, ebp        ; argc
.text:0000000000001A8E                 call    _getopt_long
.text:0000000000001A93                 cmp     eax, 0FFFFFFFFh
.text:0000000000001A96                 jz      loc_1C38
.text:0000000000001A9C                 cmp     eax, 66h ; 'f'
.text:0000000000001A9F                 jz      loc_1B58
.text:0000000000001AA5                 jle     short loc_1AD0
.text:0000000000001AA7                 cmp     eax, 7Ah ; 'z'
.text:0000000000001AAA                 jz      loc_1BE0
.text:0000000000001AB0                 jg      short loc_1B30
.text:0000000000001AB2                 cmp     eax, 6Eh ; 'n'
.text:0000000000001AB5                 jz      short loc_1A80
.text:0000000000001AB7                 cmp     eax, 73h ; 's'
.text:0000000000001ABA                 jnz     loc_1E37
.text:0000000000001AC0                 mov     cs:suppress_non_delimited, 1
.text:0000000000001AC7                 jmp     short loc_1A80
.text:0000000000001AC7 ; ---------------------------------------------------------------------------
.text:0000000000001AC9                 align 10h
.text:0000000000001AD0
.text:0000000000001AD0 loc_1AD0:                               ; CODE XREF: main+B5↑j
.text:0000000000001AD0                 cmp     eax, 63h ; 'c'
.text:0000000000001AD3                 jg      loc_1BA8
.text:0000000000001AD9                 cmp     eax, 62h ; 'b'
.text:0000000000001ADC                 jge     loc_1B80
.text:0000000000001AE2                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001AE7                 jnz     loc_1E08
.text:0000000000001AED                 lea     rax, aJimMeyering ; "Jim Meyering"
.text:0000000000001AF4                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001AFB                 mov     rcx, cs:Version
.text:0000000000001B02                 push    0
.text:0000000000001B04                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001B0B                 lea     r8, aDavidMIhnat ; "David M. Ihnat"
.text:0000000000001B12                 push    rax
.text:0000000000001B13                 lea     rdx, unk_6527
.text:0000000000001B1A                 lea     rsi, aCut       ; "cut"
.text:0000000000001B21                 xor     eax, eax
.text:0000000000001B23                 call    version_etc
.text:0000000000001B28                 xor     edi, edi        ; status
.text:0000000000001B2A                 call    _exit
.text:0000000000001B2A ; ---------------------------------------------------------------------------
.text:0000000000001B2F                 align 10h
.text:0000000000001B30
.text:0000000000001B30 loc_1B30:                               ; CODE XREF: main+C0↑j
.text:0000000000001B30                 cmp     eax, 80h
.text:0000000000001B35                 jz      loc_1BF0
.text:0000000000001B3B                 cmp     eax, 81h
.text:0000000000001B40                 jnz     loc_1E37
.text:0000000000001B46                 mov     cs:complement, 1
.text:0000000000001B4D                 jmp     loc_1A80
.text:0000000000001B4D ; ---------------------------------------------------------------------------
.text:0000000000001B52                 align 8
.text:0000000000001B58
.text:0000000000001B58 loc_1B58:                               ; CODE XREF: main+AF↑j
.text:0000000000001B58                 mov     ecx, cs:operating_mode
.text:0000000000001B5E                 test    ecx, ecx
.text:0000000000001B60                 jnz     loc_1E51
.text:0000000000001B66                 mov     cs:operating_mode, 2
.text:0000000000001B70                 mov     r15, cs:optarg@@GLIBC_2_2_5
.text:0000000000001B77                 jmp     loc_1A80
.text:0000000000001B77 ; ---------------------------------------------------------------------------
.text:0000000000001B7C                 align 20h
.text:0000000000001B80
.text:0000000000001B80 loc_1B80:                               ; CODE XREF: main+EC↑j
.text:0000000000001B80                 mov     esi, cs:operating_mode
.text:0000000000001B86                 test    esi, esi
.text:0000000000001B88                 jnz     loc_1E51
.text:0000000000001B8E                 mov     cs:operating_mode, 1
.text:0000000000001B98                 mov     r15, cs:optarg@@GLIBC_2_2_5
.text:0000000000001B9F                 jmp     loc_1A80
.text:0000000000001B9F ; ---------------------------------------------------------------------------
.text:0000000000001BA4                 align 8
.text:0000000000001BA8
.text:0000000000001BA8 loc_1BA8:                               ; CODE XREF: main+E3↑j
.text:0000000000001BA8                 cmp     eax, 64h ; 'd'
.text:0000000000001BAB                 jnz     loc_1E37
.text:0000000000001BB1                 mov     rdx, cs:optarg@@GLIBC_2_2_5
.text:0000000000001BB8                 movzx   eax, byte ptr [rdx]
.text:0000000000001BBB                 test    al, al
.text:0000000000001BBD                 jz      short loc_1BC9
.text:0000000000001BBF                 cmp     byte ptr [rdx+1], 0
.text:0000000000001BC3                 jnz     loc_1E16
.text:0000000000001BC9
.text:0000000000001BC9 loc_1BC9:                               ; CODE XREF: main+1CD↑j
.text:0000000000001BC9                 mov     cs:delim, al
.text:0000000000001BCF                 mov     r14d, 1
.text:0000000000001BD5                 jmp     loc_1A80
.text:0000000000001BD5 ; ---------------------------------------------------------------------------
.text:0000000000001BDA                 align 20h
.text:0000000000001BE0
.text:0000000000001BE0 loc_1BE0:                               ; CODE XREF: main+BA↑j
.text:0000000000001BE0                 mov     cs:line_delim, 0
.text:0000000000001BE7                 jmp     loc_1A80
.text:0000000000001BE7 ; ---------------------------------------------------------------------------
.text:0000000000001BEC                 align 10h
.text:0000000000001BF0
.text:0000000000001BF0 loc_1BF0:                               ; CODE XREF: main+145↑j
.text:0000000000001BF0                 mov     rdx, cs:optarg@@GLIBC_2_2_5
.text:0000000000001BF7                 mov     cs:output_delimiter_specified, 1
.text:0000000000001BFE                 mov     eax, 1
.text:0000000000001C03                 cmp     byte ptr [rdx], 0
.text:0000000000001C06                 jz      short loc_1C1D
.text:0000000000001C08                 xor     eax, eax
.text:0000000000001C0A                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000001C0E                 mov     rdi, rdx
.text:0000000000001C11                 repne scasb
.text:0000000000001C13                 mov     rax, rcx
.text:0000000000001C16                 not     rax
.text:0000000000001C19                 sub     rax, 1
.text:0000000000001C1D
.text:0000000000001C1D loc_1C1D:                               ; CODE XREF: main+216↑j
.text:0000000000001C1D                 mov     rdi, rdx        ; src
.text:0000000000001C20                 mov     cs:output_delimiter_length, rax
.text:0000000000001C27                 call    xstrdup
.text:0000000000001C2C                 mov     cs:output_delimiter_string, rax
.text:0000000000001C33                 jmp     loc_1A80
.text:0000000000001C38 ; ---------------------------------------------------------------------------
.text:0000000000001C38
.text:0000000000001C38 loc_1C38:                               ; CODE XREF: main+A6↑j
.text:0000000000001C38                 mov     eax, cs:operating_mode
.text:0000000000001C3E                 mov     edx, 5
.text:0000000000001C43                 lea     rsi, aYouMustSpecify ; "you must specify a list of bytes, chara"...
.text:0000000000001C4A                 test    eax, eax
.text:0000000000001C4C                 jz      loc_1E22
.text:0000000000001C52                 test    r14b, r14b
.text:0000000000001C55                 jz      short loc_1C92
.text:0000000000001C57                 cmp     eax, 2
.text:0000000000001C5A                 mov     edx, 5
.text:0000000000001C5F                 lea     rsi, aAnInputDelimit ; "an input delimiter may be specified onl"...
.text:0000000000001C66                 jnz     loc_1E22
.text:0000000000001C6C                 cmp     cs:suppress_non_delimited, 0
.text:0000000000001C73                 jz      loc_1D62
.text:0000000000001C79                 cmp     cs:complement, 0
.text:0000000000001C80                 jnz     loc_1D71
.text:0000000000001C86                 xor     esi, esi
.text:0000000000001C88                 mov     rdi, r15
.text:0000000000001C8B                 call    set_fields
.text:0000000000001C90                 jmp     short loc_1CCC
.text:0000000000001C92 ; ---------------------------------------------------------------------------
.text:0000000000001C92
.text:0000000000001C92 loc_1C92:                               ; CODE XREF: main+265↑j
.text:0000000000001C92                 cmp     cs:suppress_non_delimited, 0
.text:0000000000001C99                 jnz     loc_1D2E
.text:0000000000001C9F                 xor     esi, esi
.text:0000000000001CA1                 cmp     eax, 2
.text:0000000000001CA4                 setnz   sil
.text:0000000000001CA8                 shl     esi, 2
.text:0000000000001CAB                 cmp     cs:complement, 0
.text:0000000000001CB2                 jnz     loc_1E41
.text:0000000000001CB8
.text:0000000000001CB8 loc_1CB8:                               ; CODE XREF: main+37B↓j
.text:0000000000001CB8                 mov     rdi, r15
.text:0000000000001CBB                 call    set_fields
.text:0000000000001CC0                 test    r14b, r14b
.text:0000000000001CC3                 jnz     short loc_1CCC
.text:0000000000001CC5
.text:0000000000001CC5 loc_1CC5:                               ; CODE XREF: main+36D↓j
.text:0000000000001CC5                                         ; main+413↓j ...
.text:0000000000001CC5                 mov     cs:delim, 9
.text:0000000000001CCC
.text:0000000000001CCC loc_1CCC:                               ; CODE XREF: main+2A0↑j
.text:0000000000001CCC                                         ; main+2D3↑j ...
.text:0000000000001CCC                 cmp     cs:output_delimiter_string, 0
.text:0000000000001CD4                 jz      loc_1DB3
.text:0000000000001CDA
.text:0000000000001CDA loc_1CDA:                               ; CODE XREF: main+3F0↓j
.text:0000000000001CDA                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001CE0                 cmp     eax, ebp
.text:0000000000001CE2                 jz      loc_1DE5
.text:0000000000001CE8                 mov     r12d, 1
.text:0000000000001CEE                 jge     short loc_1D11
.text:0000000000001CF0
.text:0000000000001CF0 loc_1CF0:                               ; CODE XREF: main+31F↓j
.text:0000000000001CF0                 cdqe
.text:0000000000001CF2                 mov     rdi, [rbx+rax*8]
.text:0000000000001CF6                 call    cut_file
.text:0000000000001CFB                 and     r12d, eax
.text:0000000000001CFE                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001D04                 add     eax, 1
.text:0000000000001D07                 cmp     eax, ebp
.text:0000000000001D09                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:0000000000001D0F                 jl      short loc_1CF0
.text:0000000000001D11
.text:0000000000001D11 loc_1D11:                               ; CODE XREF: main+2FE↑j
.text:0000000000001D11                                         ; main+404↓j
.text:0000000000001D11                 cmp     cs:have_read_stdin, 0
.text:0000000000001D18                 jnz     short loc_1D83
.text:0000000000001D1A
.text:0000000000001D1A loc_1D1A:                               ; CODE XREF: main+3A2↓j
.text:0000000000001D1A                                         ; main+3BE↓j
.text:0000000000001D1A                 xor     r12d, 1
.text:0000000000001D1E                 pop     rdx
.text:0000000000001D1F                 movzx   eax, r12b
.text:0000000000001D23                 pop     rbx
.text:0000000000001D24                 pop     rbp
.text:0000000000001D25                 pop     r12
.text:0000000000001D27                 pop     r13
.text:0000000000001D29                 pop     r14
.text:0000000000001D2B                 pop     r15
.text:0000000000001D2D                 retn
.text:0000000000001D2E ; ---------------------------------------------------------------------------
.text:0000000000001D2E
.text:0000000000001D2E loc_1D2E:                               ; CODE XREF: main+2A9↑j
.text:0000000000001D2E                 cmp     eax, 2
.text:0000000000001D31                 mov     edx, 5
.text:0000000000001D36                 lea     rsi, aSuppressingNon ; "suppressing non-delimited lines makes s"...
.text:0000000000001D3D                 jnz     loc_1E22
.text:0000000000001D43                 cmp     cs:complement, 0
.text:0000000000001D4A                 jz      loc_1DF9
.text:0000000000001D50                 mov     esi, 2
.text:0000000000001D55                 mov     rdi, r15
.text:0000000000001D58                 call    set_fields
.text:0000000000001D5D                 jmp     loc_1CC5
.text:0000000000001D62 ; ---------------------------------------------------------------------------
.text:0000000000001D62
.text:0000000000001D62 loc_1D62:                               ; CODE XREF: main+283↑j
.text:0000000000001D62                 xor     esi, esi
.text:0000000000001D64                 cmp     cs:complement, 0
.text:0000000000001D6B                 jz      loc_1CB8
.text:0000000000001D71
.text:0000000000001D71 loc_1D71:                               ; CODE XREF: main+290↑j
.text:0000000000001D71                 mov     esi, 2
.text:0000000000001D76                 mov     rdi, r15
.text:0000000000001D79                 call    set_fields
.text:0000000000001D7E                 jmp     loc_1CCC
.text:0000000000001D83 ; ---------------------------------------------------------------------------
.text:0000000000001D83
.text:0000000000001D83 loc_1D83:                               ; CODE XREF: main+328↑j
.text:0000000000001D83                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000001D8A                 call    rpl_fclose
.text:0000000000001D8F                 add     eax, 1
.text:0000000000001D92                 jnz     short loc_1D1A
.text:0000000000001D94                 call    ___errno_location
.text:0000000000001D99                 mov     esi, [rax]      ; errnum
.text:0000000000001D9B                 lea     rdx, aLt+2      ; format
.text:0000000000001DA2                 xor     edi, edi        ; status
.text:0000000000001DA4                 xor     eax, eax
.text:0000000000001DA6                 xor     r12d, r12d
.text:0000000000001DA9                 call    _error
.text:0000000000001DAE                 jmp     loc_1D1A
.text:0000000000001DB3 ; ---------------------------------------------------------------------------
.text:0000000000001DB3
.text:0000000000001DB3 loc_1DB3:                               ; CODE XREF: main+2E4↑j
.text:0000000000001DB3                 movzx   eax, cs:delim
.text:0000000000001DBA                 mov     cs:byte_2090F1, 0
.text:0000000000001DC1                 mov     cs:output_delimiter_length, 1
.text:0000000000001DCC                 mov     cs:dummy_7081, al
.text:0000000000001DD2                 lea     rax, dummy_7081
.text:0000000000001DD9                 mov     cs:output_delimiter_string, rax
.text:0000000000001DE0                 jmp     loc_1CDA
.text:0000000000001DE5 ; ---------------------------------------------------------------------------
.text:0000000000001DE5
.text:0000000000001DE5 loc_1DE5:                               ; CODE XREF: main+2F2↑j
.text:0000000000001DE5                 lea     rdi, aLt+2      ; "-"
.text:0000000000001DEC                 call    cut_file
.text:0000000000001DF1                 mov     r12d, eax
.text:0000000000001DF4                 jmp     loc_1D11
.text:0000000000001DF9 ; ---------------------------------------------------------------------------
.text:0000000000001DF9
.text:0000000000001DF9 loc_1DF9:                               ; CODE XREF: main+35A↑j
.text:0000000000001DF9                 xor     esi, esi
.text:0000000000001DFB                 mov     rdi, r15
.text:0000000000001DFE                 call    set_fields
.text:0000000000001E03                 jmp     loc_1CC5
.text:0000000000001E08 ; ---------------------------------------------------------------------------
.text:0000000000001E08
.text:0000000000001E08 loc_1E08:                               ; CODE XREF: main+F7↑j
.text:0000000000001E08                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001E0D                 jnz     short loc_1E37
.text:0000000000001E0F                 xor     edi, edi        ; status
.text:0000000000001E11                 call    usage
.text:0000000000001E16 ; ---------------------------------------------------------------------------
.text:0000000000001E16
.text:0000000000001E16 loc_1E16:                               ; CODE XREF: main+1D3↑j
.text:0000000000001E16                 lea     rsi, msgid      ; "the delimiter must be a single characte"...
.text:0000000000001E1D                 mov     edx, 5          ; category
.text:0000000000001E22
.text:0000000000001E22 loc_1E22:                               ; CODE XREF: main+25C↑j
.text:0000000000001E22                                         ; main+276↑j ...
.text:0000000000001E22                 xor     edi, edi        ; domainname
.text:0000000000001E24                 call    _dcgettext
.text:0000000000001E29                 xor     esi, esi        ; errnum
.text:0000000000001E2B                 mov     rdx, rax        ; format
.text:0000000000001E2E                 xor     edi, edi        ; status
.text:0000000000001E30                 xor     eax, eax
.text:0000000000001E32                 call    _error
.text:0000000000001E37
.text:0000000000001E37 loc_1E37:                               ; CODE XREF: main+CA↑j
.text:0000000000001E37                                         ; main+150↑j ...
.text:0000000000001E37                 mov     edi, 1          ; status
.text:0000000000001E3C                 call    usage
.text:0000000000001E41 ; ---------------------------------------------------------------------------
.text:0000000000001E41
.text:0000000000001E41 loc_1E41:                               ; CODE XREF: main+2C2↑j
.text:0000000000001E41                 or      esi, 2
.text:0000000000001E44                 mov     rdi, r15
.text:0000000000001E47                 call    set_fields
.text:0000000000001E4C                 jmp     loc_1CC5
.text:0000000000001E51 ; ---------------------------------------------------------------------------
.text:0000000000001E51
.text:0000000000001E51 loc_1E51:                               ; CODE XREF: main+170↑j
.text:0000000000001E51                                         ; main+198↑j
.text:0000000000001E51                 mov     edx, 5
.text:0000000000001E56                 lea     rsi, aOnlyOneTypeOfL ; "only one type of list may be specified"
.text:0000000000001E5D                 jmp     short loc_1E22
.text:0000000000001E5D ; } // starts at 19F0
.text:0000000000001E5D main            endp
.text:0000000000001E5D
.text:0000000000001E5D ; ---------------------------------------------------------------------------
.text:0000000000001E5F                 align 20h
.text:0000000000001E60
.text:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E60
.text:0000000000001E60 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001E60
.text:0000000000001E60 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001E60                 public start
.text:0000000000001E60 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001E60 ; __unwind {
.text:0000000000001E60                 xor     ebp, ebp
.text:0000000000001E62                 mov     r9, rdx         ; rtld_fini
.text:0000000000001E65                 pop     rsi             ; argc
.text:0000000000001E66                 mov     rdx, rsp        ; ubp_av
.text:0000000000001E69                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001E6D                 push    rax
.text:0000000000001E6E                 push    rsp             ; stack_end
.text:0000000000001E6F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001E76                 lea     rcx, __libc_csu_init ; init
.text:0000000000001E7D                 lea     rdi, main       ; main
.text:0000000000001E84                 call    cs:__libc_start_main_ptr
.text:0000000000001E8A                 hlt
.text:0000000000001E8A ; } // starts at 1E60
.text:0000000000001E8A start           endp
.text:0000000000001E8A
.text:0000000000001E8A ; ---------------------------------------------------------------------------
.text:0000000000001E8B                 align 10h
.text:0000000000001E90
.text:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E90
.text:0000000000001E90 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001E90
.text:0000000000001E90 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1F43↓p
.text:0000000000001E90                 lea     rdi, __bss_start
.text:0000000000001E97                 push    rbp
.text:0000000000001E98                 lea     rax, __bss_start
.text:0000000000001E9F                 cmp     rax, rdi
.text:0000000000001EA2                 mov     rbp, rsp
.text:0000000000001EA5                 jz      short loc_1EC0
.text:0000000000001EA7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001EAE                 test    rax, rax
.text:0000000000001EB1                 jz      short loc_1EC0
.text:0000000000001EB3                 pop     rbp
.text:0000000000001EB4                 jmp     rax
.text:0000000000001EB4 ; ---------------------------------------------------------------------------
.text:0000000000001EB6                 align 20h
.text:0000000000001EC0
.text:0000000000001EC0 loc_1EC0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001EC0                                         ; deregister_tm_clones+21↑j
.text:0000000000001EC0                 pop     rbp
.text:0000000000001EC1                 retn
.text:0000000000001EC1 deregister_tm_clones endp
.text:0000000000001EC1
.text:0000000000001EC1 ; ---------------------------------------------------------------------------
.text:0000000000001EC2                 align 10h
.text:0000000000001ED0
.text:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001ED0
.text:0000000000001ED0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001ED0
.text:0000000000001ED0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001ED0                 lea     rdi, __bss_start
.text:0000000000001ED7                 lea     rsi, __bss_start
.text:0000000000001EDE                 push    rbp
.text:0000000000001EDF                 sub     rsi, rdi
.text:0000000000001EE2                 mov     rbp, rsp
.text:0000000000001EE5                 sar     rsi, 3
.text:0000000000001EE9                 mov     rax, rsi
.text:0000000000001EEC                 shr     rax, 3Fh
.text:0000000000001EF0                 add     rsi, rax
.text:0000000000001EF3                 sar     rsi, 1
.text:0000000000001EF6                 jz      short loc_1F10
.text:0000000000001EF8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001EFF                 test    rax, rax
.text:0000000000001F02                 jz      short loc_1F10
.text:0000000000001F04                 pop     rbp
.text:0000000000001F05                 jmp     rax
.text:0000000000001F05 ; ---------------------------------------------------------------------------
.text:0000000000001F07                 align 10h
.text:0000000000001F10
.text:0000000000001F10 loc_1F10:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001F10                                         ; register_tm_clones+32↑j
.text:0000000000001F10                 pop     rbp
.text:0000000000001F11                 retn
.text:0000000000001F11 register_tm_clones endp
.text:0000000000001F11
.text:0000000000001F11 ; ---------------------------------------------------------------------------
.text:0000000000001F12                 align 20h
.text:0000000000001F20
.text:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F20
.text:0000000000001F20 ; Attributes: info_from_lumina
.text:0000000000001F20
.text:0000000000001F20 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001F20                 cmp     cs:completed_7697, 0
.text:0000000000001F27                 jnz     short locret_1F58
.text:0000000000001F29                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001F31                 push    rbp
.text:0000000000001F32                 mov     rbp, rsp
.text:0000000000001F35                 jz      short loc_1F43
.text:0000000000001F37                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001F3E                 call    __cxa_finalize
.text:0000000000001F43
.text:0000000000001F43 loc_1F43:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001F43                 call    deregister_tm_clones
.text:0000000000001F48                 mov     cs:completed_7697, 1
.text:0000000000001F4F                 pop     rbp
.text:0000000000001F50                 retn
.text:0000000000001F50 ; ---------------------------------------------------------------------------
.text:0000000000001F51                 align 8
.text:0000000000001F58
.text:0000000000001F58 locret_1F58:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001F58                 rep retn
.text:0000000000001F58 __do_global_dtors_aux endp
.text:0000000000001F58
.text:0000000000001F58 ; ---------------------------------------------------------------------------
.text:0000000000001F5A                 align 20h
.text:0000000000001F60
.text:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F60
.text:0000000000001F60 ; Attributes: bp-based frame
.text:0000000000001F60
.text:0000000000001F60 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001F60                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001F60                 push    rbp
.text:0000000000001F61                 mov     rbp, rsp
.text:0000000000001F64                 pop     rbp
.text:0000000000001F65                 jmp     register_tm_clones
.text:0000000000001F65 frame_dummy     endp
.text:0000000000001F65
.text:0000000000001F65 ; ---------------------------------------------------------------------------
.text:0000000000001F6A                 align 10h
.text:0000000000001F70
.text:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F70
.text:0000000000001F70
.text:0000000000001F70 cut_file        proc near               ; CODE XREF: main+306↑p
.text:0000000000001F70                                         ; main+3FC↑p
.text:0000000000001F70
.text:0000000000001F70 filename        = qword ptr -48h
.text:0000000000001F70 var_3C          = dword ptr -3Ch
.text:0000000000001F70
.text:0000000000001F70 ; __unwind {
.text:0000000000001F70                 push    r15
.text:0000000000001F72                 push    r14
.text:0000000000001F74                 mov     rsi, rdi
.text:0000000000001F77                 push    r13
.text:0000000000001F79                 push    r12
.text:0000000000001F7B                 mov     ecx, 2
.text:0000000000001F80                 push    rbp
.text:0000000000001F81                 push    rbx
.text:0000000000001F82                 sub     rsp, 18h
.text:0000000000001F86                 mov     [rsp+48h+filename], rdi
.text:0000000000001F8A                 lea     rdi, aLt+2      ; "-"
.text:0000000000001F91                 repe cmpsb
.text:0000000000001F93                 setnbe  al
.text:0000000000001F96                 sbb     al, 0
.text:0000000000001F98                 test    al, al
.text:0000000000001F9A                 jnz     loc_24A0
.text:0000000000001FA0                 mov     r15, cs:stdin@@GLIBC_2_2_5
.text:0000000000001FA7                 mov     cs:have_read_stdin, 1
.text:0000000000001FAE
.text:0000000000001FAE loc_1FAE:                               ; CODE XREF: cut_file+546↓j
.text:0000000000001FAE                 mov     esi, 2
.text:0000000000001FB3                 mov     rdi, r15
.text:0000000000001FB6                 call    fadvise
.text:0000000000001FBB                 cmp     cs:operating_mode, 1
.text:0000000000001FC2                 mov     rax, cs:frp
.text:0000000000001FC9                 mov     cs:current_rp, rax
.text:0000000000001FD0                 jz      loc_2513
.text:0000000000001FD6                 mov     rax, [r15+8]
.text:0000000000001FDA                 cmp     rax, [r15+10h]
.text:0000000000001FDE                 jnb     loc_243F
.text:0000000000001FE4                 lea     rdx, [rax+1]
.text:0000000000001FE8                 mov     [r15+8], rdx
.text:0000000000001FEC                 movzx   edi, byte ptr [rax] ; c
.text:0000000000001FEF
.text:0000000000001FEF loc_1FEF:                               ; CODE XREF: cut_file+4DC↓j
.text:0000000000001FEF                 mov     rsi, r15        ; stream
.text:0000000000001FF2                 mov     r13d, 1
.text:0000000000001FF8                 call    _ungetc
.text:0000000000001FFD                 mov     rax, cs:current_rp
.text:0000000000002004                 cmp     qword ptr [rax], 1
.text:0000000000002008                 setnbe  bpl
.text:000000000000200C                 xor     bpl, cs:suppress_non_delimited
.text:0000000000002013                 xor     r12d, r12d
.text:0000000000002016                 xor     r14d, r14d
.text:0000000000002019                 nop     dword ptr [rax+00000000h]
.text:0000000000002020
.text:0000000000002020 loc_2020:                               ; CODE XREF: cut_file+280↓j
.text:0000000000002020                                         ; cut_file+2EA↓j ...
.text:0000000000002020                 cmp     r13, 1
.text:0000000000002024                 setz    bl
.text:0000000000002027                 and     bl, bpl
.text:000000000000202A                 jnz     loc_2130
.text:0000000000002030                 mov     rax, cs:current_rp
.text:0000000000002037
.text:0000000000002037 loc_2037:                               ; CODE XREF: cut_file+2C8↓j
.text:0000000000002037                                         ; cut_file+459↓j
.text:0000000000002037                 cmp     [rax], r13
.text:000000000000203A                 ja      loc_211A
.text:0000000000002040                 test    r12b, r12b
.text:0000000000002043                 jz      loc_20C9
.text:0000000000002049                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002050                 mov     rdx, cs:output_delimiter_length ; n
.text:0000000000002057                 mov     esi, 1          ; size
.text:000000000000205C                 mov     rdi, cs:output_delimiter_string ; ptr
.text:0000000000002063                 call    _fwrite_unlocked
.text:0000000000002068                 jmp     short loc_20C9
.text:0000000000002068 ; ---------------------------------------------------------------------------
.text:000000000000206A                 align 10h
.text:0000000000002070
.text:0000000000002070 loc_2070:                               ; CODE XREF: cut_file+161↓j
.text:0000000000002070                 lea     rdx, [rax+1]
.text:0000000000002074                 mov     [r15+8], rdx
.text:0000000000002078                 movzx   ebx, byte ptr [rax]
.text:000000000000207B
.text:000000000000207B loc_207B:                               ; CODE XREF: cut_file+16D↓j
.text:000000000000207B                 movzx   eax, cs:delim
.text:0000000000002082                 movzx   edx, cs:line_delim
.text:0000000000002089                 cmp     ebx, eax
.text:000000000000208B                 mov     esi, eax
.text:000000000000208D                 jz      loc_2270
.text:0000000000002093                 movzx   eax, dl
.text:0000000000002096                 cmp     ebx, eax
.text:0000000000002098                 jz      loc_2370
.text:000000000000209E                 cmp     ebx, 0FFFFFFFFh
.text:00000000000020A1                 jz      loc_23A0
.text:00000000000020A7                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000020AE                 mov     rax, [rdi+28h]
.text:00000000000020B2                 cmp     rax, [rdi+30h]
.text:00000000000020B6                 jnb     loc_21F8
.text:00000000000020BC                 lea     rdx, [rax+1]
.text:00000000000020C0                 mov     [rdi+28h], rdx
.text:00000000000020C4                 mov     [rax], bl
.text:00000000000020C6
.text:00000000000020C6 loc_20C6:                               ; CODE XREF: cut_file+290↓j
.text:00000000000020C6                 mov     r14d, ebx
.text:00000000000020C9
.text:00000000000020C9 loc_20C9:                               ; CODE XREF: cut_file+D3↑j
.text:00000000000020C9                                         ; cut_file+F8↑j
.text:00000000000020C9                 mov     rax, [r15+8]
.text:00000000000020CD                 cmp     rax, [r15+10h]
.text:00000000000020D1                 jb      short loc_2070
.text:00000000000020D3                 mov     rdi, r15        ; _IO_FILE *
.text:00000000000020D6                 call    ___uflow
.text:00000000000020DB                 mov     ebx, eax
.text:00000000000020DD                 jmp     short loc_207B
.text:00000000000020DD ; ---------------------------------------------------------------------------
.text:00000000000020DF                 align 20h
.text:00000000000020E0
.text:00000000000020E0 loc_20E0:                               ; CODE XREF: cut_file+1B2↓j
.text:00000000000020E0                 lea     rdx, [rax+1]
.text:00000000000020E4                 mov     [r15+8], rdx
.text:00000000000020E8                 movzx   eax, byte ptr [rax]
.text:00000000000020EB
.text:00000000000020EB loc_20EB:                               ; CODE XREF: cut_file+1BC↓j
.text:00000000000020EB                 movzx   ecx, cs:delim
.text:00000000000020F2                 movzx   edx, cs:line_delim
.text:00000000000020F9                 cmp     ecx, eax
.text:00000000000020FB                 mov     esi, ecx
.text:00000000000020FD                 jz      loc_2240
.text:0000000000002103                 movzx   ecx, dl
.text:0000000000002106                 cmp     eax, ecx
.text:0000000000002108                 jz      loc_22B8
.text:000000000000210E                 cmp     eax, 0FFFFFFFFh
.text:0000000000002111                 jz      loc_23B8
.text:0000000000002117                 mov     r14d, eax
.text:000000000000211A
.text:000000000000211A loc_211A:                               ; CODE XREF: cut_file+CA↑j
.text:000000000000211A                 mov     rax, [r15+8]
.text:000000000000211E                 cmp     rax, [r15+10h]
.text:0000000000002122                 jb      short loc_20E0
.text:0000000000002124                 mov     rdi, r15        ; _IO_FILE *
.text:0000000000002127                 call    ___uflow
.text:000000000000212C                 jmp     short loc_20EB
.text:000000000000212C ; ---------------------------------------------------------------------------
.text:000000000000212E                 align 10h
.text:0000000000002130
.text:0000000000002130 loc_2130:                               ; CODE XREF: cut_file+BA↑j
.text:0000000000002130                 movzx   r9d, cs:line_delim
.text:0000000000002138                 movzx   r8d, cs:delim
.text:0000000000002140                 sub     rsp, 8
.text:0000000000002144                 push    r15
.text:0000000000002146                 lea     rsi, field_1_bufsize
.text:000000000000214D                 lea     rdi, field_1_buffer
.text:0000000000002154                 xor     edx, edx
.text:0000000000002156                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000215D                 call    getndelim2
.text:0000000000002162                 mov     r13, rax
.text:0000000000002165                 test    r13, r13
.text:0000000000002168                 pop     rax
.text:0000000000002169                 pop     rdx
.text:000000000000216A                 js      loc_2669
.text:0000000000002170                 jz      loc_2738
.text:0000000000002176                 mov     rdi, cs:field_1_buffer ; ptr
.text:000000000000217D                 movzx   eax, cs:delim
.text:0000000000002184                 lea     rdx, [r13-1]    ; n
.text:0000000000002188                 cmp     [rdi+r13-1], al
.text:000000000000218D                 jz      short loc_2208
.text:000000000000218F                 cmp     cs:suppress_non_delimited, 0
.text:0000000000002196                 jnz     loc_23D0
.text:000000000000219C                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000021A3                 mov     rdx, r13        ; n
.text:00000000000021A6                 mov     esi, 1          ; size
.text:00000000000021AB                 call    _fwrite_unlocked
.text:00000000000021B0                 mov     rdx, cs:field_1_buffer
.text:00000000000021B7                 movzx   r14d, cs:line_delim
.text:00000000000021BF                 movsx   edx, byte ptr [rdx+r13-1]
.text:00000000000021C5                 cmp     edx, r14d
.text:00000000000021C8                 jz      short loc_21EA
.text:00000000000021CA                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000021D1                 mov     rdx, [rdi+28h]
.text:00000000000021D5                 cmp     rdx, [rdi+30h]
.text:00000000000021D9                 jnb     loc_2654
.text:00000000000021DF                 lea     rcx, [rdx+1]
.text:00000000000021E3                 mov     [rdi+28h], rcx
.text:00000000000021E7                 mov     [rdx], r14b
.text:00000000000021EA
.text:00000000000021EA loc_21EA:                               ; CODE XREF: cut_file+258↑j
.text:00000000000021EA                                         ; cut_file+6F4↓j
.text:00000000000021EA                 mov     r13d, 1
.text:00000000000021F0                 jmp     loc_2020
.text:00000000000021F0 ; ---------------------------------------------------------------------------
.text:00000000000021F5                 align 8
.text:00000000000021F8
.text:00000000000021F8 loc_21F8:                               ; CODE XREF: cut_file+146↑j
.text:00000000000021F8                 movzx   esi, bl         ; int
.text:00000000000021FB                 call    ___overflow
.text:0000000000002200                 jmp     loc_20C6
.text:0000000000002200 ; ---------------------------------------------------------------------------
.text:0000000000002205                 align 8
.text:0000000000002208
.text:0000000000002208 loc_2208:                               ; CODE XREF: cut_file+21D↑j
.text:0000000000002208                 mov     rax, cs:current_rp
.text:000000000000220F                 cmp     qword ptr [rax], 1
.text:0000000000002213                 jbe     loc_23E0
.text:0000000000002219
.text:0000000000002219 loc_2219:                               ; CODE XREF: cut_file+49A↓j
.text:0000000000002219                                         ; cut_file+4CA↓j ...
.text:0000000000002219                 cmp     qword ptr [rax+8], 1
.text:000000000000221E                 ja      loc_23C0
.text:0000000000002224                 add     rax, 10h
.text:0000000000002228                 mov     r13d, 2
.text:000000000000222E                 xor     r14d, r14d
.text:0000000000002231                 mov     cs:current_rp, rax
.text:0000000000002238                 jmp     loc_2037
.text:0000000000002238 ; ---------------------------------------------------------------------------
.text:000000000000223D                 align 20h
.text:0000000000002240
.text:0000000000002240 loc_2240:                               ; CODE XREF: cut_file+18D↑j
.text:0000000000002240                 cmp     sil, dl
.text:0000000000002243                 mov     ecx, r14d
.text:0000000000002246                 mov     r14d, eax
.text:0000000000002249                 jz      short loc_2281
.text:000000000000224B
.text:000000000000224B loc_224B:                               ; CODE XREF: cut_file+30F↓j
.text:000000000000224B                                         ; cut_file+365↓j
.text:000000000000224B                 mov     rax, cs:current_rp
.text:0000000000002252                 add     r13, 1
.text:0000000000002256                 cmp     r13, [rax+8]
.text:000000000000225A                 jbe     loc_2020
.text:0000000000002260                 add     rax, 10h
.text:0000000000002264                 mov     cs:current_rp, rax
.text:000000000000226B                 jmp     loc_2020
.text:0000000000002270 ; ---------------------------------------------------------------------------
.text:0000000000002270
.text:0000000000002270 loc_2270:                               ; CODE XREF: cut_file+11D↑j
.text:0000000000002270                 cmp     sil, dl
.text:0000000000002273                 mov     ecx, r14d
.text:0000000000002276                 mov     r12d, 1
.text:000000000000227C                 mov     r14d, ebx
.text:000000000000227F                 jnz     short loc_224B
.text:0000000000002281
.text:0000000000002281 loc_2281:                               ; CODE XREF: cut_file+2D9↑j
.text:0000000000002281                                         ; cut_file+422↓j
.text:0000000000002281                 mov     rax, [r15+8]
.text:0000000000002285                 cmp     rax, [r15+10h]
.text:0000000000002289                 jnb     loc_2690
.text:000000000000228F                 lea     rdx, [rax+1]
.text:0000000000002293                 mov     [r15+8], rdx
.text:0000000000002297                 movzx   edi, byte ptr [rax] ; c
.text:000000000000229A
.text:000000000000229A loc_229A:                               ; CODE XREF: cut_file+735↓j
.text:000000000000229A                 mov     rsi, r15        ; stream
.text:000000000000229D                 mov     [rsp+48h+var_3C], ecx
.text:00000000000022A1                 call    _ungetc
.text:00000000000022A6                 movzx   eax, cs:delim
.text:00000000000022AD                 mov     ecx, [rsp+48h+var_3C]
.text:00000000000022B1                 mov     esi, eax
.text:00000000000022B3                 jmp     short loc_22CB
.text:00000000000022B3 ; ---------------------------------------------------------------------------
.text:00000000000022B5                 align 8
.text:00000000000022B8
.text:00000000000022B8 loc_22B8:                               ; CODE XREF: cut_file+198↑j
.text:00000000000022B8                 cmp     sil, dl
.text:00000000000022BB                 mov     ecx, r14d
.text:00000000000022BE                 mov     r14d, eax
.text:00000000000022C1                 movzx   eax, sil
.text:00000000000022C5                 jz      loc_2389
.text:00000000000022CB
.text:00000000000022CB loc_22CB:                               ; CODE XREF: cut_file+343↑j
.text:00000000000022CB                                         ; cut_file+413↓j
.text:00000000000022CB                 cmp     eax, r14d
.text:00000000000022CE                 movzx   edx, cs:line_delim
.text:00000000000022D5                 jz      loc_224B
.text:00000000000022DB
.text:00000000000022DB loc_22DB:                               ; CODE XREF: cut_file+41C↓j
.text:00000000000022DB                                         ; cut_file+43F↓j
.text:00000000000022DB                 cmp     r14d, 0FFFFFFFFh
.text:00000000000022DF                 movzx   eax, dl
.text:00000000000022E2                 setz    bl
.text:00000000000022E5                 cmp     eax, r14d
.text:00000000000022E8                 setz    dil
.text:00000000000022EC                 test    bl, bl
.text:00000000000022EE                 jnz     short loc_22F9
.text:00000000000022F0                 test    dil, dil
.text:00000000000022F3                 jz      loc_2020
.text:00000000000022F9
.text:00000000000022F9 loc_22F9:                               ; CODE XREF: cut_file+37E↑j
.text:00000000000022F9                                         ; cut_file+758↓j
.text:00000000000022F9                 test    r12b, r12b
.text:00000000000022FC                 jnz     short loc_230D
.text:00000000000022FE                 cmp     cs:suppress_non_delimited, 1
.text:0000000000002305                 jnz     short loc_230D
.text:0000000000002307                 cmp     r13, 1
.text:000000000000230B                 jz      short loc_2342
.text:000000000000230D
.text:000000000000230D loc_230D:                               ; CODE XREF: cut_file+38C↑j
.text:000000000000230D                                         ; cut_file+395↑j
.text:000000000000230D                 cmp     eax, ecx
.text:000000000000230F                 setnz   r9b
.text:0000000000002313                 cmp     sil, dl
.text:0000000000002316                 setz    cl
.text:0000000000002319                 or      r9b, cl
.text:000000000000231C                 jnz     short loc_2323
.text:000000000000231E                 test    dil, dil
.text:0000000000002321                 jz      short loc_2342
.text:0000000000002323
.text:0000000000002323 loc_2323:                               ; CODE XREF: cut_file+3AC↑j
.text:0000000000002323                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000232A                 mov     rcx, [rdi+28h]
.text:000000000000232E                 cmp     rcx, [rdi+30h]
.text:0000000000002332                 jnb     loc_2648
.text:0000000000002338                 lea     rax, [rcx+1]
.text:000000000000233C                 mov     [rdi+28h], rax
.text:0000000000002340                 mov     [rcx], dl
.text:0000000000002342
.text:0000000000002342 loc_2342:                               ; CODE XREF: cut_file+39B↑j
.text:0000000000002342                                         ; cut_file+3B1↑j ...
.text:0000000000002342                 test    bl, bl
.text:0000000000002344                 jnz     loc_2458
.text:000000000000234A                 mov     rax, cs:frp
.text:0000000000002351                 xor     r12d, r12d
.text:0000000000002354                 mov     r13d, 1
.text:000000000000235A                 mov     cs:current_rp, rax
.text:0000000000002361                 jmp     loc_2020
.text:0000000000002361 ; ---------------------------------------------------------------------------
.text:0000000000002366                 align 10h
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: cut_file+128↑j
.text:0000000000002370                 cmp     sil, dl
.text:0000000000002373                 mov     ecx, r14d
.text:0000000000002376                 mov     r12d, 1
.text:000000000000237C                 mov     r14d, ebx
.text:000000000000237F                 movzx   eax, sil
.text:0000000000002383                 jnz     loc_22CB
.text:0000000000002389
.text:0000000000002389 loc_2389:                               ; CODE XREF: cut_file+355↑j
.text:0000000000002389                 cmp     eax, r14d
.text:000000000000238C                 jnz     loc_22DB
.text:0000000000002392                 jmp     loc_2281
.text:0000000000002392 ; ---------------------------------------------------------------------------
.text:0000000000002397                 align 20h
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: cut_file+131↑j
.text:00000000000023A0                 mov     ecx, r14d
.text:00000000000023A3                 mov     r12d, 1
.text:00000000000023A9
.text:00000000000023A9 loc_23A9:                               ; CODE XREF: cut_file+44B↓j
.text:00000000000023A9                 mov     r14d, 0FFFFFFFFh
.text:00000000000023AF                 jmp     loc_22DB
.text:00000000000023AF ; ---------------------------------------------------------------------------
.text:00000000000023B4                 align 8
.text:00000000000023B8
.text:00000000000023B8 loc_23B8:                               ; CODE XREF: cut_file+1A1↑j
.text:00000000000023B8                 mov     ecx, r14d
.text:00000000000023BB                 jmp     short loc_23A9
.text:00000000000023BB ; ---------------------------------------------------------------------------
.text:00000000000023BD                 align 20h
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: cut_file+2AE↑j
.text:00000000000023C0                 mov     r13d, 2
.text:00000000000023C6                 xor     r14d, r14d
.text:00000000000023C9                 jmp     loc_2037
.text:00000000000023C9 ; ---------------------------------------------------------------------------
.text:00000000000023CE                 align 10h
.text:00000000000023D0
.text:00000000000023D0 loc_23D0:                               ; CODE XREF: cut_file+226↑j
.text:00000000000023D0                 mov     r13d, 1
.text:00000000000023D6                 xor     r14d, r14d
.text:00000000000023D9                 jmp     loc_2020
.text:00000000000023D9 ; ---------------------------------------------------------------------------
.text:00000000000023DE                 align 20h
.text:00000000000023E0
.text:00000000000023E0 loc_23E0:                               ; CODE XREF: cut_file+2A3↑j
.text:00000000000023E0                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000023E7                 mov     esi, 1          ; size
.text:00000000000023EC                 call    _fwrite_unlocked
.text:00000000000023F1                 movzx   eax, cs:line_delim
.text:00000000000023F8                 cmp     cs:delim, al
.text:00000000000023FE                 jz      short loc_240F
.text:0000000000002400                 mov     rax, cs:current_rp
.text:0000000000002407                 mov     r12d, ebx
.text:000000000000240A                 jmp     loc_2219
.text:000000000000240F ; ---------------------------------------------------------------------------
.text:000000000000240F
.text:000000000000240F loc_240F:                               ; CODE XREF: cut_file+48E↑j
.text:000000000000240F                 mov     rax, [r15+8]
.text:0000000000002413                 cmp     rax, [r15+10h]
.text:0000000000002417                 jnb     loc_270C
.text:000000000000241D                 lea     rdx, [rax+1]
.text:0000000000002421                 mov     [r15+8], rdx
.text:0000000000002425                 movzx   edi, byte ptr [rax] ; c
.text:0000000000002428
.text:0000000000002428 loc_2428:                               ; CODE XREF: cut_file+7A9↓j
.text:0000000000002428                 mov     rsi, r15        ; stream
.text:000000000000242B                 mov     r12d, ebx
.text:000000000000242E                 call    _ungetc
.text:0000000000002433                 mov     rax, cs:current_rp
.text:000000000000243A                 jmp     loc_2219
.text:000000000000243F ; ---------------------------------------------------------------------------
.text:000000000000243F
.text:000000000000243F loc_243F:                               ; CODE XREF: cut_file+6E↑j
.text:000000000000243F                 mov     rdi, r15        ; _IO_FILE *
.text:0000000000002442                 call    ___uflow
.text:0000000000002447                 cmp     eax, 0FFFFFFFFh
.text:000000000000244A                 mov     edi, eax
.text:000000000000244C                 jnz     loc_1FEF
.text:0000000000002452                 nop     word ptr [rax+rax+00h]
.text:0000000000002458
.text:0000000000002458 loc_2458:                               ; CODE XREF: cut_file+3D4↑j
.text:0000000000002458                                         ; cut_file+668↓j
.text:0000000000002458                 mov     eax, [r15]
.text:000000000000245B
.text:000000000000245B loc_245B:                               ; CODE XREF: cut_file+691↓j
.text:000000000000245B                                         ; cut_file+715↓j ...
.text:000000000000245B                 test    al, 20h
.text:000000000000245D                 jnz     short loc_24BC
.text:000000000000245F                 mov     rsi, [rsp+48h+filename]
.text:0000000000002463                 lea     rdi, aLt+2      ; "-"
.text:000000000000246A                 mov     ecx, 2
.text:000000000000246F                 repe cmpsb
.text:0000000000002471                 mov     rdi, r15        ; stream
.text:0000000000002474                 setnbe  al
.text:0000000000002477                 sbb     al, 0
.text:0000000000002479                 test    al, al
.text:000000000000247B                 jz      short loc_24FA
.text:000000000000247D                 call    rpl_fclose
.text:0000000000002482                 mov     edx, eax
.text:0000000000002484                 mov     eax, 1
.text:0000000000002489                 cmp     edx, 0FFFFFFFFh
.text:000000000000248C                 jz      short loc_24BC
.text:000000000000248E                 add     rsp, 18h
.text:0000000000002492                 pop     rbx
.text:0000000000002493                 pop     rbp
.text:0000000000002494                 pop     r12
.text:0000000000002496                 pop     r13
.text:0000000000002498                 pop     r14
.text:000000000000249A                 pop     r15
.text:000000000000249C                 retn
.text:000000000000249C ; ---------------------------------------------------------------------------
.text:000000000000249D                 align 20h
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: cut_file+2A↑j
.text:00000000000024A0                 mov     rdi, [rsp+48h+filename] ; filename
.text:00000000000024A4                 lea     rsi, modes      ; "r"
.text:00000000000024AB                 call    _fopen
.text:00000000000024B0                 test    rax, rax
.text:00000000000024B3                 mov     r15, rax
.text:00000000000024B6                 jnz     loc_1FAE
.text:00000000000024BC
.text:00000000000024BC loc_24BC:                               ; CODE XREF: cut_file+4ED↑j
.text:00000000000024BC                                         ; cut_file+51C↑j
.text:00000000000024BC                 mov     rdx, [rsp+48h+filename]
.text:00000000000024C0                 mov     esi, 3
.text:00000000000024C5                 xor     edi, edi
.text:00000000000024C7                 call    quotearg_n_style_colon
.text:00000000000024CC                 mov     rbx, rax
.text:00000000000024CF                 call    ___errno_location
.text:00000000000024D4                 mov     esi, [rax]      ; errnum
.text:00000000000024D6                 lea     rdx, format     ; format
.text:00000000000024DD                 mov     rcx, rbx
.text:00000000000024E0                 xor     eax, eax
.text:00000000000024E2                 xor     edi, edi        ; status
.text:00000000000024E4                 call    _error
.text:00000000000024E9                 add     rsp, 18h
.text:00000000000024ED                 xor     eax, eax
.text:00000000000024EF                 pop     rbx
.text:00000000000024F0                 pop     rbp
.text:00000000000024F1                 pop     r12
.text:00000000000024F3                 pop     r13
.text:00000000000024F5                 pop     r14
.text:00000000000024F7                 pop     r15
.text:00000000000024F9                 retn
.text:00000000000024FA ; ---------------------------------------------------------------------------
.text:00000000000024FA
.text:00000000000024FA loc_24FA:                               ; CODE XREF: cut_file+50B↑j
.text:00000000000024FA                 call    _clearerr_unlocked
.text:00000000000024FF                 add     rsp, 18h
.text:0000000000002503                 mov     eax, 1
.text:0000000000002508                 pop     rbx
.text:0000000000002509                 pop     rbp
.text:000000000000250A                 pop     r12
.text:000000000000250C                 pop     r13
.text:000000000000250E                 pop     r14
.text:0000000000002510                 pop     r15
.text:0000000000002512                 retn
.text:0000000000002513 ; ---------------------------------------------------------------------------
.text:0000000000002513
.text:0000000000002513 loc_2513:                               ; CODE XREF: cut_file+60↑j
.text:0000000000002513                 xor     ebx, ebx
.text:0000000000002515                 xor     r12d, r12d
.text:0000000000002518                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002520
.text:0000000000002520 loc_2520:                               ; CODE XREF: cut_file+5FA↓j
.text:0000000000002520                                         ; cut_file+6D3↓j ...
.text:0000000000002520                 mov     rax, [r15+8]
.text:0000000000002524                 cmp     rax, [r15+10h]
.text:0000000000002528                 jnb     loc_25B7
.text:000000000000252E
.text:000000000000252E loc_252E:                               ; CODE XREF: cut_file+641↓j
.text:000000000000252E                 lea     rdx, [rax+1]
.text:0000000000002532                 movzx   esi, cs:line_delim ; int
.text:0000000000002539                 mov     [r15+8], rdx
.text:000000000000253D                 movzx   ebp, byte ptr [rax]
.text:0000000000002540                 cmp     ebp, esi
.text:0000000000002542                 jz      loc_2610
.text:0000000000002548
.text:0000000000002548 loc_2548:                               ; CODE XREF: cut_file+65F↓j
.text:0000000000002548                 mov     rax, cs:current_rp
.text:000000000000254F                 add     rbx, 1
.text:0000000000002553                 cmp     rbx, [rax+8]
.text:0000000000002557                 jbe     short loc_2564
.text:0000000000002559                 add     rax, 10h
.text:000000000000255D                 mov     cs:current_rp, rax
.text:0000000000002564
.text:0000000000002564 loc_2564:                               ; CODE XREF: cut_file+5E7↑j
.text:0000000000002564                 mov     rax, [rax]
.text:0000000000002567                 cmp     rbx, rax
.text:000000000000256A                 jb      short loc_2520
.text:000000000000256C                 movzx   edx, cs:output_delimiter_specified
.text:0000000000002573                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000257A                 test    dl, dl
.text:000000000000257C                 jz      short loc_2590
.text:000000000000257E                 cmp     rbx, rax
.text:0000000000002581                 setz    al
.text:0000000000002584                 and     r12b, al
.text:0000000000002587                 jnz     loc_26E8
.text:000000000000258D                 mov     r12d, edx
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: cut_file+60C↑j
.text:0000000000002590                                         ; cut_file+797↓j
.text:0000000000002590                 mov     rax, [rcx+28h]
.text:0000000000002594                 cmp     rax, [rcx+30h]
.text:0000000000002598                 jnb     loc_26D7
.text:000000000000259E                 lea     rdx, [rax+1]
.text:00000000000025A2                 mov     [rcx+28h], rdx
.text:00000000000025A6                 mov     [rax], bpl
.text:00000000000025A9                 mov     rax, [r15+8]
.text:00000000000025AD                 cmp     rax, [r15+10h]
.text:00000000000025B1                 jb      loc_252E
.text:00000000000025B7
.text:00000000000025B7 loc_25B7:                               ; CODE XREF: cut_file+5B8↑j
.text:00000000000025B7                 mov     rdi, r15        ; _IO_FILE *
.text:00000000000025BA                 call    ___uflow
.text:00000000000025BF                 movzx   esi, cs:line_delim ; int
.text:00000000000025C6                 mov     ebp, eax
.text:00000000000025C8                 cmp     ebp, esi
.text:00000000000025CA                 jz      short loc_2610
.text:00000000000025CC                 cmp     ebp, 0FFFFFFFFh
.text:00000000000025CF                 jnz     loc_2548
.text:00000000000025D5                 test    rbx, rbx
.text:00000000000025D8                 jz      loc_2458
.text:00000000000025DE                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000025E5                 mov     rdx, [rdi+28h]
.text:00000000000025E9                 cmp     rdx, [rdi+30h]
.text:00000000000025ED                 jnb     loc_272B
.text:00000000000025F3                 lea     rcx, [rdx+1]
.text:00000000000025F7                 mov     [rdi+28h], rcx
.text:00000000000025FB                 mov     [rdx], sil
.text:00000000000025FE                 mov     eax, [r15]
.text:0000000000002601                 jmp     loc_245B
.text:0000000000002601 ; ---------------------------------------------------------------------------
.text:0000000000002606                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: cut_file+5D2↑j
.text:0000000000002610                                         ; cut_file+65A↑j
.text:0000000000002610                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002617                 mov     rax, [rdi+28h]
.text:000000000000261B                 cmp     rax, [rdi+30h]
.text:000000000000261F                 jnb     loc_26CD
.text:0000000000002625                 lea     rdx, [rax+1]
.text:0000000000002629                 mov     [rdi+28h], rdx
.text:000000000000262D                 mov     [rax], sil
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: cut_file+762↓j
.text:0000000000002630                 mov     rax, cs:frp
.text:0000000000002637                 xor     ebx, ebx
.text:0000000000002639                 xor     r12d, r12d
.text:000000000000263C                 mov     cs:current_rp, rax
.text:0000000000002643                 jmp     loc_2520
.text:0000000000002648 ; ---------------------------------------------------------------------------
.text:0000000000002648
.text:0000000000002648 loc_2648:                               ; CODE XREF: cut_file+3C2↑j
.text:0000000000002648                 mov     esi, eax        ; int
.text:000000000000264A                 call    ___overflow
.text:000000000000264F                 jmp     loc_2342
.text:0000000000002654 ; ---------------------------------------------------------------------------
.text:0000000000002654
.text:0000000000002654 loc_2654:                               ; CODE XREF: cut_file+269↑j
.text:0000000000002654                 mov     esi, r14d       ; int
.text:0000000000002657                 call    ___overflow
.text:000000000000265C                 movzx   r14d, cs:line_delim
.text:0000000000002664                 jmp     loc_21EA
.text:0000000000002669 ; ---------------------------------------------------------------------------
.text:0000000000002669
.text:0000000000002669 loc_2669:                               ; CODE XREF: cut_file+1FA↑j
.text:0000000000002669                 mov     rdi, cs:field_1_buffer ; ptr
.text:0000000000002670                 call    _free
.text:0000000000002675                 mov     eax, [r15]
.text:0000000000002678                 mov     cs:field_1_buffer, 0
.text:0000000000002683                 test    al, 30h
.text:0000000000002685                 jnz     loc_245B
.text:000000000000268B                 call    xalloc_die
.text:0000000000002690 ; ---------------------------------------------------------------------------
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: cut_file+319↑j
.text:0000000000002690                 mov     rdi, r15        ; _IO_FILE *
.text:0000000000002693                 mov     [rsp+48h+var_3C], ecx
.text:0000000000002697                 call    ___uflow
.text:000000000000269C                 cmp     eax, 0FFFFFFFFh
.text:000000000000269F                 mov     edi, eax
.text:00000000000026A1                 mov     ecx, [rsp+48h+var_3C]
.text:00000000000026A5                 jnz     loc_229A
.text:00000000000026AB                 movzx   eax, cs:line_delim
.text:00000000000026B2                 movzx   esi, cs:delim
.text:00000000000026B9                 mov     r14d, 0FFFFFFFFh
.text:00000000000026BF                 xor     edi, edi
.text:00000000000026C1                 mov     ebx, 1
.text:00000000000026C6                 mov     edx, eax
.text:00000000000026C8                 jmp     loc_22F9
.text:00000000000026CD ; ---------------------------------------------------------------------------
.text:00000000000026CD
.text:00000000000026CD loc_26CD:                               ; CODE XREF: cut_file+6AF↑j
.text:00000000000026CD                 call    ___overflow
.text:00000000000026D2                 jmp     loc_2630
.text:00000000000026D7 ; ---------------------------------------------------------------------------
.text:00000000000026D7
.text:00000000000026D7 loc_26D7:                               ; CODE XREF: cut_file+628↑j
.text:00000000000026D7                 movzx   esi, bpl        ; int
.text:00000000000026DB                 mov     rdi, rcx        ; _IO_FILE *
.text:00000000000026DE                 call    ___overflow
.text:00000000000026E3                 jmp     loc_2520
.text:00000000000026E8 ; ---------------------------------------------------------------------------
.text:00000000000026E8
.text:00000000000026E8 loc_26E8:                               ; CODE XREF: cut_file+617↑j
.text:00000000000026E8                 mov     rdx, cs:output_delimiter_length ; n
.text:00000000000026EF                 mov     rdi, cs:output_delimiter_string ; ptr
.text:00000000000026F6                 mov     esi, 1          ; size
.text:00000000000026FB                 call    _fwrite_unlocked
.text:0000000000002700                 mov     rcx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002707                 jmp     loc_2590
.text:000000000000270C ; ---------------------------------------------------------------------------
.text:000000000000270C
.text:000000000000270C loc_270C:                               ; CODE XREF: cut_file+4A7↑j
.text:000000000000270C                 mov     rdi, r15        ; _IO_FILE *
.text:000000000000270F                 call    ___uflow
.text:0000000000002714                 cmp     eax, 0FFFFFFFFh
.text:0000000000002717                 mov     edi, eax
.text:0000000000002719                 jnz     loc_2428
.text:000000000000271F                 mov     rax, cs:current_rp
.text:0000000000002726                 jmp     loc_2219
.text:000000000000272B ; ---------------------------------------------------------------------------
.text:000000000000272B
.text:000000000000272B loc_272B:                               ; CODE XREF: cut_file+67D↑j
.text:000000000000272B                 call    ___overflow
.text:0000000000002730                 mov     eax, [r15]
.text:0000000000002733                 jmp     loc_245B
.text:0000000000002738 ; ---------------------------------------------------------------------------
.text:0000000000002738
.text:0000000000002738 loc_2738:                               ; CODE XREF: cut_file+200↑j
.text:0000000000002738                 lea     rcx, __PRETTY_FUNCTION___7017 ; "cut_fields"
.text:000000000000273F                 lea     rsi, file       ; "../coreutils-8.31/src/cut.c"
.text:0000000000002746                 lea     rdi, assertion  ; "n_bytes != 0"
.text:000000000000274D                 mov     edx, 149h       ; line
.text:0000000000002752                 call    ___assert_fail
.text:0000000000002752 ; } // starts at 1F70
.text:0000000000002752 cut_file        endp
.text:0000000000002752
.text:0000000000002752 ; ---------------------------------------------------------------------------
.text:0000000000002757                 align 20h
.text:0000000000002760
.text:0000000000002760 ; =============== S U B R O U T I N E =======================================
.text:0000000000002760
.text:0000000000002760 ; Attributes: noreturn
.text:0000000000002760
.text:0000000000002760 ; void __fastcall __noreturn usage(int status)
.text:0000000000002760                 public usage
.text:0000000000002760 usage           proc near               ; CODE XREF: main+421↑p
.text:0000000000002760                                         ; main+44C↑p ...
.text:0000000000002760
.text:0000000000002760 var_A8          = qword ptr -0A8h
.text:0000000000002760 var_A0          = qword ptr -0A0h
.text:0000000000002760 var_98          = qword ptr -98h
.text:0000000000002760 var_90          = qword ptr -90h
.text:0000000000002760 var_88          = qword ptr -88h
.text:0000000000002760 var_80          = qword ptr -80h
.text:0000000000002760 var_78          = qword ptr -78h
.text:0000000000002760 var_70          = qword ptr -70h
.text:0000000000002760 var_68          = qword ptr -68h
.text:0000000000002760 var_60          = qword ptr -60h
.text:0000000000002760 var_58          = qword ptr -58h
.text:0000000000002760 var_50          = qword ptr -50h
.text:0000000000002760 var_48          = qword ptr -48h
.text:0000000000002760 var_40          = qword ptr -40h
.text:0000000000002760 var_30          = qword ptr -30h
.text:0000000000002760
.text:0000000000002760 ; __unwind {
.text:0000000000002760                 push    r13
.text:0000000000002762                 push    r12
.text:0000000000002764                 mov     edx, 5          ; category
.text:0000000000002769                 push    rbp
.text:000000000000276A                 push    rbx
.text:000000000000276B                 mov     ebp, edi
.text:000000000000276D                 sub     rsp, 88h
.text:0000000000002774                 mov     rbx, cs:program_name
.text:000000000000277B                 mov     rax, fs:28h
.text:0000000000002784                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002789                 xor     eax, eax
.text:000000000000278B                 test    edi, edi
.text:000000000000278D                 jz      short loc_27BD
.text:000000000000278F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002796                 xor     edi, edi        ; domainname
.text:0000000000002798                 call    _dcgettext
.text:000000000000279D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000027A4                 mov     rdx, rax
.text:00000000000027A7                 mov     rcx, rbx
.text:00000000000027AA                 mov     esi, 1
.text:00000000000027AF                 xor     eax, eax
.text:00000000000027B1                 call    ___fprintf_chk
.text:00000000000027B6
.text:00000000000027B6 loc_27B6:                               ; CODE XREF: usage+3C6↓j
.text:00000000000027B6                 mov     edi, ebp        ; status
.text:00000000000027B8                 call    _exit
.text:00000000000027BD ; ---------------------------------------------------------------------------
.text:00000000000027BD
.text:00000000000027BD loc_27BD:                               ; CODE XREF: usage+2D↑j
.text:00000000000027BD                 lea     rsi, aUsageSOptionFi ; "Usage: %s OPTION... [FILE]...\n"
.text:00000000000027C4                 xor     edi, edi        ; domainname
.text:00000000000027C6                 call    _dcgettext
.text:00000000000027CB                 mov     rdx, rbx
.text:00000000000027CE                 mov     rsi, rax
.text:00000000000027D1                 mov     edi, 1
.text:00000000000027D6                 xor     eax, eax
.text:00000000000027D8                 call    ___printf_chk
.text:00000000000027DD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000027E4                 lea     rsi, aPrintSelectedP ; "Print selected parts of lines from each"...
.text:00000000000027EB                 mov     edx, 5          ; category
.text:00000000000027F0                 xor     edi, edi        ; domainname
.text:00000000000027F2                 call    _dcgettext
.text:00000000000027F7                 mov     rsi, rbx        ; stream
.text:00000000000027FA                 mov     rdi, rax        ; s
.text:00000000000027FD                 call    _fputs_unlocked
.text:0000000000002802                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002809                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000002810                 mov     edx, 5          ; category
.text:0000000000002815                 xor     edi, edi        ; domainname
.text:0000000000002817                 call    _dcgettext
.text:000000000000281C                 mov     rsi, rbx        ; stream
.text:000000000000281F                 mov     rdi, rax        ; s
.text:0000000000002822                 call    _fputs_unlocked
.text:0000000000002827                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000282E                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002835                 mov     edx, 5          ; category
.text:000000000000283A                 xor     edi, edi        ; domainname
.text:000000000000283C                 call    _dcgettext
.text:0000000000002841                 mov     rsi, rbx        ; stream
.text:0000000000002844                 mov     rdi, rax        ; s
.text:0000000000002847                 call    _fputs_unlocked
.text:000000000000284C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002853                 lea     rsi, aBBytesListSele ; "  -b, --bytes=LIST        select only t"...
.text:000000000000285A                 mov     edx, 5          ; category
.text:000000000000285F                 xor     edi, edi        ; domainname
.text:0000000000002861                 call    _dcgettext
.text:0000000000002866                 mov     rsi, rbx        ; stream
.text:0000000000002869                 mov     rdi, rax        ; s
.text:000000000000286C                 call    _fputs_unlocked
.text:0000000000002871                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002878                 lea     rsi, aFFieldsListSel ; "  -f, --fields=LIST       select only t"...
.text:000000000000287F                 mov     edx, 5          ; category
.text:0000000000002884                 xor     edi, edi        ; domainname
.text:0000000000002886                 call    _dcgettext
.text:000000000000288B                 mov     rsi, rbx        ; stream
.text:000000000000288E                 mov     rdi, rax        ; s
.text:0000000000002891                 call    _fputs_unlocked
.text:0000000000002896                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000289D                 lea     rsi, aComplementComp ; "      --complement        complement th"...
.text:00000000000028A4                 mov     edx, 5          ; category
.text:00000000000028A9                 xor     edi, edi        ; domainname
.text:00000000000028AB                 call    _dcgettext
.text:00000000000028B0                 mov     rsi, rbx        ; stream
.text:00000000000028B3                 mov     rdi, rax        ; s
.text:00000000000028B6                 call    _fputs_unlocked
.text:00000000000028BB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000028C2                 lea     rsi, aSOnlyDelimited ; "  -s, --only-delimited    do not print "...
.text:00000000000028C9                 mov     edx, 5          ; category
.text:00000000000028CE                 xor     edi, edi        ; domainname
.text:00000000000028D0                 call    _dcgettext
.text:00000000000028D5                 mov     rsi, rbx        ; stream
.text:00000000000028D8                 mov     rdi, rax        ; s
.text:00000000000028DB                 call    _fputs_unlocked
.text:00000000000028E0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000028E7                 lea     rsi, aZZeroTerminate ; "  -z, --zero-terminated    line delimit"...
.text:00000000000028EE                 mov     edx, 5          ; category
.text:00000000000028F3                 xor     edi, edi        ; domainname
.text:00000000000028F5                 call    _dcgettext
.text:00000000000028FA                 mov     rsi, rbx        ; stream
.text:00000000000028FD                 mov     rdi, rax        ; s
.text:0000000000002900                 call    _fputs_unlocked
.text:0000000000002905                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000290C                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002913                 mov     edx, 5          ; category
.text:0000000000002918                 xor     edi, edi        ; domainname
.text:000000000000291A                 call    _dcgettext
.text:000000000000291F                 mov     rsi, rbx        ; stream
.text:0000000000002922                 mov     rdi, rax        ; s
.text:0000000000002925                 call    _fputs_unlocked
.text:000000000000292A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002931                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002938                 mov     edx, 5          ; category
.text:000000000000293D                 xor     edi, edi        ; domainname
.text:000000000000293F                 call    _dcgettext
.text:0000000000002944                 mov     rsi, rbx        ; stream
.text:0000000000002947                 mov     rdi, rax        ; s
.text:000000000000294A                 call    _fputs_unlocked
.text:000000000000294F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002956                 lea     rsi, aUseOneAndOnlyO ; "\nUse one, and only one of -b, -c or -f"...
.text:000000000000295D                 mov     edx, 5          ; category
.text:0000000000002962                 xor     edi, edi        ; domainname
.text:0000000000002964                 call    _dcgettext
.text:0000000000002969                 mov     rsi, rbx        ; stream
.text:000000000000296C                 mov     rdi, rax        ; s
.text:000000000000296F                 call    _fputs_unlocked
.text:0000000000002974                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000297B                 lea     rsi, aEachRangeIsOne ; "Each range is one of:\n\n  N     N'th b"...
.text:0000000000002982                 mov     edx, 5          ; category
.text:0000000000002987                 xor     edi, edi        ; domainname
.text:0000000000002989                 call    _dcgettext
.text:000000000000298E                 mov     rsi, rbx        ; stream
.text:0000000000002991                 mov     rdi, rax        ; s
.text:0000000000002994                 lea     rbx, aCut       ; "cut"
.text:000000000000299B                 call    _fputs_unlocked
.text:00000000000029A0                 lea     rax, asc_64B1   ; "["
.text:00000000000029A7                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000029AE                 mov     [rsp+0A8h+var_48], 0
.text:00000000000029B7                 mov     [rsp+0A8h+var_40], 0
.text:00000000000029C0                 mov     rdx, rsp
.text:00000000000029C3                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000029C7                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000029CE                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000029D3                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000029DA                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000029DF                 lea     rax, domainname ; "coreutils"
.text:00000000000029E6                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000029EB                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000029F2                 mov     [rsp+0A8h+var_98], rax
.text:00000000000029F7                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000029FE                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002A03                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002A08                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002A0F                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002A14                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002A1B                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002A20                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002A25                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002A2A                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002A2F                 nop
.text:0000000000002A30
.text:0000000000002A30 loc_2A30:                               ; CODE XREF: usage+2ED↓j
.text:0000000000002A30                 add     rdx, 10h
.text:0000000000002A34                 mov     rdi, [rdx]
.text:0000000000002A37                 test    rdi, rdi
.text:0000000000002A3A                 jz      short loc_2A4F
.text:0000000000002A3C                 mov     ecx, 4
.text:0000000000002A41                 mov     rsi, rbx
.text:0000000000002A44                 repe cmpsb
.text:0000000000002A46                 setnbe  al
.text:0000000000002A49                 sbb     al, 0
.text:0000000000002A4B                 test    al, al
.text:0000000000002A4D                 jnz     short loc_2A30
.text:0000000000002A4F
.text:0000000000002A4F loc_2A4F:                               ; CODE XREF: usage+2DA↑j
.text:0000000000002A4F                 mov     r12, [rdx+8]
.text:0000000000002A53                 xor     edi, edi        ; domainname
.text:0000000000002A55                 mov     edx, 5          ; category
.text:0000000000002A5A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002A61                 test    r12, r12
.text:0000000000002A64                 jz      loc_2B2B
.text:0000000000002A6A                 call    _dcgettext
.text:0000000000002A6F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002A76                 lea     rdx, unk_6527
.text:0000000000002A7D                 mov     rsi, rax
.text:0000000000002A80                 mov     edi, 1
.text:0000000000002A85                 xor     eax, eax
.text:0000000000002A87                 call    ___printf_chk
.text:0000000000002A8C                 xor     esi, esi        ; locale
.text:0000000000002A8E                 mov     edi, 5          ; category
.text:0000000000002A93                 call    _setlocale
.text:0000000000002A98                 test    rax, rax
.text:0000000000002A9B                 jz      short loc_2AB9
.text:0000000000002A9D                 lea     rsi, s2         ; "en_"
.text:0000000000002AA4                 mov     edx, 3          ; n
.text:0000000000002AA9                 mov     rdi, rax        ; s1
.text:0000000000002AAC                 call    _strncmp
.text:0000000000002AB1                 test    eax, eax
.text:0000000000002AB3                 jnz     loc_2BC0
.text:0000000000002AB9
.text:0000000000002AB9 loc_2AB9:                               ; CODE XREF: usage+33B↑j
.text:0000000000002AB9                                         ; usage+485↓j
.text:0000000000002AB9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002AC0                 xor     edi, edi        ; domainname
.text:0000000000002AC2                 mov     edx, 5          ; category
.text:0000000000002AC7                 call    _dcgettext
.text:0000000000002ACC                 lea     rcx, aCut       ; "cut"
.text:0000000000002AD3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002ADA                 mov     rsi, rax
.text:0000000000002ADD                 mov     edi, 1
.text:0000000000002AE2                 xor     eax, eax
.text:0000000000002AE4                 call    ___printf_chk
.text:0000000000002AE9                 cmp     r12, rbx
.text:0000000000002AEC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002AF3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002AFA                 cmovz   rbx, rcx
.text:0000000000002AFE
.text:0000000000002AFE loc_2AFE:                               ; CODE XREF: usage+454↓j
.text:0000000000002AFE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002B05                 xor     edi, edi        ; domainname
.text:0000000000002B07                 mov     edx, 5          ; category
.text:0000000000002B0C                 call    _dcgettext
.text:0000000000002B11                 mov     rcx, rbx
.text:0000000000002B14                 mov     rsi, rax
.text:0000000000002B17                 mov     rdx, r12
.text:0000000000002B1A                 mov     edi, 1
.text:0000000000002B1F                 xor     eax, eax
.text:0000000000002B21                 call    ___printf_chk
.text:0000000000002B26                 jmp     loc_27B6
.text:0000000000002B2B ; ---------------------------------------------------------------------------
.text:0000000000002B2B
.text:0000000000002B2B loc_2B2B:                               ; CODE XREF: usage+304↑j
.text:0000000000002B2B                 call    _dcgettext
.text:0000000000002B30                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002B37                 lea     rdx, unk_6527
.text:0000000000002B3E                 mov     rsi, rax
.text:0000000000002B41                 mov     edi, 1
.text:0000000000002B46                 xor     eax, eax
.text:0000000000002B48                 call    ___printf_chk
.text:0000000000002B4D                 xor     esi, esi        ; locale
.text:0000000000002B4F                 mov     edi, 5          ; category
.text:0000000000002B54                 call    _setlocale
.text:0000000000002B59                 test    rax, rax
.text:0000000000002B5C                 jz      short loc_2B76
.text:0000000000002B5E                 lea     rsi, s2         ; "en_"
.text:0000000000002B65                 mov     edx, 3          ; n
.text:0000000000002B6A                 mov     rdi, rax        ; s1
.text:0000000000002B6D                 call    _strncmp
.text:0000000000002B72                 test    eax, eax
.text:0000000000002B74                 jnz     short loc_2BB9
.text:0000000000002B76
.text:0000000000002B76 loc_2B76:                               ; CODE XREF: usage+3FC↑j
.text:0000000000002B76                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002B7D                 mov     edx, 5          ; category
.text:0000000000002B82                 xor     edi, edi        ; domainname
.text:0000000000002B84                 lea     r12, aCut       ; "cut"
.text:0000000000002B8B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002B92                 call    _dcgettext
.text:0000000000002B97                 lea     rcx, aCut       ; "cut"
.text:0000000000002B9E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002BA5                 mov     rsi, rax
.text:0000000000002BA8                 mov     edi, 1
.text:0000000000002BAD                 xor     eax, eax
.text:0000000000002BAF                 call    ___printf_chk
.text:0000000000002BB4                 jmp     loc_2AFE
.text:0000000000002BB9 ; ---------------------------------------------------------------------------
.text:0000000000002BB9
.text:0000000000002BB9 loc_2BB9:                               ; CODE XREF: usage+414↑j
.text:0000000000002BB9                 lea     r12, aCut       ; "cut"
.text:0000000000002BC0
.text:0000000000002BC0 loc_2BC0:                               ; CODE XREF: usage+353↑j
.text:0000000000002BC0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002BC7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002BCE                 xor     edi, edi        ; domainname
.text:0000000000002BD0                 mov     edx, 5          ; category
.text:0000000000002BD5                 call    _dcgettext
.text:0000000000002BDA                 mov     rsi, r13        ; stream
.text:0000000000002BDD                 mov     rdi, rax        ; s
.text:0000000000002BE0                 call    _fputs_unlocked
.text:0000000000002BE5                 jmp     loc_2AB9
.text:0000000000002BE5 ; } // starts at 2760
.text:0000000000002BE5 usage           endp
.text:0000000000002BE5
.text:0000000000002BE5 ; ---------------------------------------------------------------------------
.text:0000000000002BEA                 align 10h
.text:0000000000002BF0
.text:0000000000002BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BF0
.text:0000000000002BF0
.text:0000000000002BF0 ; int compare_ranges(const void *, const void *)
.text:0000000000002BF0 compare_ranges  proc near               ; DATA XREF: set_fields+161↓o
.text:0000000000002BF0 ; __unwind {
.text:0000000000002BF0                 mov     eax, [rsi]
.text:0000000000002BF2                 cmp     [rdi], eax
.text:0000000000002BF4                 jl      short loc_2C00
.text:0000000000002BF6                 setnle  al
.text:0000000000002BF9                 movzx   eax, al
.text:0000000000002BFC                 retn
.text:0000000000002BFC ; ---------------------------------------------------------------------------
.text:0000000000002BFD                 align 20h
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: compare_ranges+4↑j
.text:0000000000002C00                 mov     eax, 0FFFFFFFFh
.text:0000000000002C05                 retn
.text:0000000000002C05 ; } // starts at 2BF0
.text:0000000000002C05 compare_ranges  endp
.text:0000000000002C05
.text:0000000000002C05 ; ---------------------------------------------------------------------------
.text:0000000000002C06                 align 10h
.text:0000000000002C10
.text:0000000000002C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C10
.text:0000000000002C10
.text:0000000000002C10 add_range_pair  proc near               ; CODE XREF: set_fields+C2↓p
.text:0000000000002C10                                         ; set_fields+13F↓p ...
.text:0000000000002C10 ; __unwind {
.text:0000000000002C10                 push    rbp
.text:0000000000002C11                 push    rbx
.text:0000000000002C12                 mov     rbx, rsi
.text:0000000000002C15                 mov     rbp, rdi
.text:0000000000002C18                 sub     rsp, 8
.text:0000000000002C1C                 mov     rsi, cs:n_frp
.text:0000000000002C23                 cmp     rsi, cs:n_frp_allocated
.text:0000000000002C2A                 mov     rdi, cs:frp
.text:0000000000002C31                 jz      short loc_2C60
.text:0000000000002C33
.text:0000000000002C33 loc_2C33:                               ; CODE XREF: add_range_pair+90↓j
.text:0000000000002C33                 mov     rax, rsi
.text:0000000000002C36                 add     rsi, 1
.text:0000000000002C3A                 shl     rax, 4
.text:0000000000002C3E                 add     rdi, rax
.text:0000000000002C41                 mov     [rdi], rbp
.text:0000000000002C44                 mov     [rdi+8], rbx
.text:0000000000002C48                 mov     cs:n_frp, rsi
.text:0000000000002C4F                 add     rsp, 8
.text:0000000000002C53                 pop     rbx
.text:0000000000002C54                 pop     rbp
.text:0000000000002C55                 retn
.text:0000000000002C55 ; ---------------------------------------------------------------------------
.text:0000000000002C56                 align 20h
.text:0000000000002C60
.text:0000000000002C60 loc_2C60:                               ; CODE XREF: add_range_pair+21↑j
.text:0000000000002C60                 test    rdi, rdi
.text:0000000000002C63                 jz      short loc_2CA8
.text:0000000000002C65                 mov     rax, 555555555555554h
.text:0000000000002C6F                 cmp     rsi, rax
.text:0000000000002C72                 ja      short loc_2CCD
.text:0000000000002C74                 mov     rax, rsi
.text:0000000000002C77                 shr     rax, 1
.text:0000000000002C7A                 lea     rsi, [rsi+rax+1]
.text:0000000000002C7F
.text:0000000000002C7F loc_2C7F:                               ; CODE XREF: add_range_pair+BB↓j
.text:0000000000002C7F                 mov     cs:n_frp_allocated, rsi
.text:0000000000002C86                 shl     rsi, 4
.text:0000000000002C8A                 call    xrealloc
.text:0000000000002C8F                 mov     rsi, cs:n_frp
.text:0000000000002C96                 mov     rdi, rax
.text:0000000000002C99                 mov     cs:frp, rax
.text:0000000000002CA0                 jmp     short loc_2C33
.text:0000000000002CA0 ; ---------------------------------------------------------------------------
.text:0000000000002CA2                 align 8
.text:0000000000002CA8
.text:0000000000002CA8 loc_2CA8:                               ; CODE XREF: add_range_pair+53↑j
.text:0000000000002CA8                 test    rsi, rsi
.text:0000000000002CAB                 mov     eax, 8
.text:0000000000002CB0                 mov     edx, 10h
.text:0000000000002CB5                 cmovz   rsi, rax
.text:0000000000002CB9                 mov     rax, rdx
.text:0000000000002CBC                 xor     ecx, ecx
.text:0000000000002CBE                 mul     rsi
.text:0000000000002CC1                 jo      short loc_2CD2
.text:0000000000002CC3
.text:0000000000002CC3 loc_2CC3:                               ; CODE XREF: add_range_pair+C7↓j
.text:0000000000002CC3                 test    rax, rax
.text:0000000000002CC6                 js      short loc_2CCD
.text:0000000000002CC8                 test    rcx, rcx
.text:0000000000002CCB                 jz      short loc_2C7F
.text:0000000000002CCD
.text:0000000000002CCD loc_2CCD:                               ; CODE XREF: add_range_pair+62↑j
.text:0000000000002CCD                                         ; add_range_pair+B6↑j
.text:0000000000002CCD                 call    xalloc_die
.text:0000000000002CD2 ; ---------------------------------------------------------------------------
.text:0000000000002CD2
.text:0000000000002CD2 loc_2CD2:                               ; CODE XREF: add_range_pair+B1↑j
.text:0000000000002CD2                 mov     ecx, 1
.text:0000000000002CD7                 jmp     short loc_2CC3
.text:0000000000002CD7 ; } // starts at 2C10
.text:0000000000002CD7 add_range_pair  endp
.text:0000000000002CD7
.text:0000000000002CD7 ; ---------------------------------------------------------------------------
.text:0000000000002CD9                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CE0
.text:0000000000002CE0
.text:0000000000002CE0                 public set_fields
.text:0000000000002CE0 set_fields      proc near               ; CODE XREF: main+29B↑p
.text:0000000000002CE0                                         ; main+2CB↑p ...
.text:0000000000002CE0
.text:0000000000002CE0 var_50          = qword ptr -50h
.text:0000000000002CE0 var_48          = qword ptr -48h
.text:0000000000002CE0 var_40          = dword ptr -40h
.text:0000000000002CE0 var_3C          = dword ptr -3Ch
.text:0000000000002CE0
.text:0000000000002CE0 ; __unwind {
.text:0000000000002CE0                 push    r15
.text:0000000000002CE2                 push    r14
.text:0000000000002CE4                 mov     eax, esi
.text:0000000000002CE6                 push    r13
.text:0000000000002CE8                 push    r12
.text:0000000000002CEA                 mov     r14, rdi
.text:0000000000002CED                 push    rbp
.text:0000000000002CEE                 push    rbx
.text:0000000000002CEF                 sub     rsp, 28h
.text:0000000000002CF3                 and     eax, 1
.text:0000000000002CF6                 mov     [rsp+58h+var_3C], esi
.text:0000000000002CFA                 mov     [rsp+58h+var_40], eax
.text:0000000000002CFE                 jz      short loc_2D1E
.text:0000000000002D00                 lea     rdi, aLt+2      ; "-"
.text:0000000000002D07                 mov     ecx, 2
.text:0000000000002D0C                 mov     rsi, r14
.text:0000000000002D0F                 repe cmpsb
.text:0000000000002D11                 setnbe  al
.text:0000000000002D14                 sbb     al, 0
.text:0000000000002D16                 test    al, al
.text:0000000000002D18                 jz      loc_3019
.text:0000000000002D1E
.text:0000000000002D1E loc_2D1E:                               ; CODE XREF: set_fields+1E↑j
.text:0000000000002D1E                 xor     r15d, r15d
.text:0000000000002D21                 xor     ebx, ebx
.text:0000000000002D23
.text:0000000000002D23 loc_2D23:                               ; CODE XREF: set_fields+348↓j
.text:0000000000002D23                 mov     ebp, ebx
.text:0000000000002D25                 xor     r13d, r13d
.text:0000000000002D28                 xor     r12d, r12d
.text:0000000000002D2B                 mov     [rsp+58h+var_48], 1
.text:0000000000002D34                 jmp     loc_2DBE
.text:0000000000002D34 ; ---------------------------------------------------------------------------
.text:0000000000002D39                 align 20h
.text:0000000000002D40
.text:0000000000002D40 loc_2D40:                               ; CODE XREF: set_fields+E6↓j
.text:0000000000002D40                 cmp     r8b, 2Ch ; ','
.text:0000000000002D44                 mov     byte ptr [rsp+58h+var_50], r8b
.text:0000000000002D49                 jz      short loc_2D67
.text:0000000000002D4B                 call    ___ctype_b_loc
.text:0000000000002D50                 movzx   edx, byte ptr [rsp+58h+var_50]
.text:0000000000002D55                 mov     r10, [rax]
.text:0000000000002D58                 test    byte ptr [r10+rdx*2], 1
.text:0000000000002D5D                 jnz     short loc_2D67
.text:0000000000002D5F                 test    dl, dl
.text:0000000000002D61                 jnz     loc_2FA0
.text:0000000000002D67
.text:0000000000002D67 loc_2D67:                               ; CODE XREF: set_fields+69↑j
.text:0000000000002D67                                         ; set_fields+7D↑j
.text:0000000000002D67                 test    bpl, bpl
.text:0000000000002D6A                 jz      loc_2E10
.text:0000000000002D70                 test    bl, bl
.text:0000000000002D72                 jnz     loc_2F60
.text:0000000000002D78                 test    r12b, r12b
.text:0000000000002D7B                 jnz     loc_2F70
.text:0000000000002D81                 mov     eax, [rsp+58h+var_40]
.text:0000000000002D85                 test    eax, eax
.text:0000000000002D87                 jz      loc_31E9
.text:0000000000002D8D                 mov     [rsp+58h+var_48], 1
.text:0000000000002D96
.text:0000000000002D96 loc_2D96:                               ; CODE XREF: set_fields+283↓j
.text:0000000000002D96                 mov     rdi, [rsp+58h+var_48]
.text:0000000000002D9B                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000002DA2                 call    add_range_pair
.text:0000000000002DA7
.text:0000000000002DA7 loc_2DA7:                               ; CODE XREF: set_fields+2A8↓j
.text:0000000000002DA7                 cmp     byte ptr [r14], 0
.text:0000000000002DAB                 jz      short loc_2E2A
.text:0000000000002DAD
.text:0000000000002DAD loc_2DAD:                               ; CODE XREF: set_fields+148↓j
.text:0000000000002DAD                 xor     r15d, r15d
.text:0000000000002DB0                 xor     r13d, r13d
.text:0000000000002DB3                 xor     ebp, ebp
.text:0000000000002DB5                 xor     r12d, r12d
.text:0000000000002DB8                 xor     ebx, ebx
.text:0000000000002DBA
.text:0000000000002DBA loc_2DBA:                               ; CODE XREF: set_fields+124↓j
.text:0000000000002DBA                                         ; set_fields+2BA↓j ...
.text:0000000000002DBA                 add     r14, 1
.text:0000000000002DBE
.text:0000000000002DBE loc_2DBE:                               ; CODE XREF: set_fields+54↑j
.text:0000000000002DBE                 movzx   r8d, byte ptr [r14]
.text:0000000000002DC2                 cmp     r8b, 2Dh ; '-'
.text:0000000000002DC6                 jnz     loc_2D40
.text:0000000000002DCC                 test    bpl, bpl
.text:0000000000002DCF                 jnz     loc_315D
.text:0000000000002DD5                 test    r15, r15
.text:0000000000002DD8                 setz    r9b
.text:0000000000002DDC                 and     r9b, bl
.text:0000000000002DDF                 mov     r13d, r9d
.text:0000000000002DE2                 jnz     loc_3106
.text:0000000000002DE8                 test    bl, bl
.text:0000000000002DEA                 jnz     loc_2F90
.text:0000000000002DF0                 mov     r13d, ebx
.text:0000000000002DF3                 xor     r15d, r15d
.text:0000000000002DF6                 mov     ebp, 1
.text:0000000000002DFB                 mov     [rsp+58h+var_48], 1
.text:0000000000002E04                 jmp     short loc_2DBA
.text:0000000000002E04 ; ---------------------------------------------------------------------------
.text:0000000000002E06                 align 10h
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: set_fields+8A↑j
.text:0000000000002E10                 test    r15, r15
.text:0000000000002E13                 jz      loc_3106
.text:0000000000002E19                 mov     rsi, r15
.text:0000000000002E1C                 mov     rdi, r15
.text:0000000000002E1F                 call    add_range_pair
.text:0000000000002E24                 cmp     byte ptr [r14], 0
.text:0000000000002E28                 jnz     short loc_2DAD
.text:0000000000002E2A
.text:0000000000002E2A loc_2E2A:                               ; CODE XREF: set_fields+CB↑j
.text:0000000000002E2A                 mov     rsi, cs:n_frp   ; nmemb
.text:0000000000002E31                 test    rsi, rsi
.text:0000000000002E34                 jz      loc_321D
.text:0000000000002E3A                 mov     rdi, cs:frp     ; base
.text:0000000000002E41                 lea     rcx, compare_ranges ; compar
.text:0000000000002E48                 mov     edx, 10h        ; size
.text:0000000000002E4D                 xor     r15d, r15d
.text:0000000000002E50                 xor     ebp, ebp
.text:0000000000002E52                 call    _qsort
.text:0000000000002E57                 mov     rbx, cs:n_frp
.text:0000000000002E5E                 mov     rcx, cs:frp
.text:0000000000002E65                 cmp     r15, rbx
.text:0000000000002E68                 jnb     loc_2EFD
.text:0000000000002E6E                 xchg    ax, ax
.text:0000000000002E70
.text:0000000000002E70 loc_2E70:                               ; CODE XREF: set_fields+217↓j
.text:0000000000002E70                 add     r15, 1
.text:0000000000002E74                 cmp     r15, rbx
.text:0000000000002E77                 jnb     short loc_2EF0
.text:0000000000002E79                 mov     r13, r15
.text:0000000000002E7C                 lea     rdx, [rcx+rbp]
.text:0000000000002E80                 shl     r13, 4
.text:0000000000002E84                 lea     rdi, [rcx+r13]
.text:0000000000002E88                 mov     rax, [rdx+8]
.text:0000000000002E8C                 cmp     rax, [rdi]
.text:0000000000002E8F                 jb      short loc_2EF0
.text:0000000000002E91                 lea     r14, [rbp+20h]
.text:0000000000002E95                 jmp     short loc_2EB1
.text:0000000000002E95 ; ---------------------------------------------------------------------------
.text:0000000000002E97                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 loc_2EA0:                               ; CODE XREF: set_fields+20E↓j
.text:0000000000002EA0                 lea     rdi, [rcx+r13]  ; dest
.text:0000000000002EA4                 lea     rdx, [rcx+rbp]
.text:0000000000002EA8                 mov     rax, [rdx+8]
.text:0000000000002EAC                 cmp     [rdi], rax
.text:0000000000002EAF                 ja      short loc_2EF0
.text:0000000000002EB1
.text:0000000000002EB1 loc_2EB1:                               ; CODE XREF: set_fields+1B5↑j
.text:0000000000002EB1                 cmp     [rdi+8], rax
.text:0000000000002EB5                 lea     rsi, [rcx+r14]  ; src
.text:0000000000002EB9                 cmovnb  rax, [rdi+8]
.text:0000000000002EBE                 sub     rbx, r15
.text:0000000000002EC1                 shl     rbx, 4
.text:0000000000002EC5                 mov     [rdx+8], rax
.text:0000000000002EC9                 lea     rdx, [rbx-10h]  ; n
.text:0000000000002ECD                 call    _memmove
.text:0000000000002ED2                 mov     rax, cs:n_frp
.text:0000000000002ED9                 mov     rcx, cs:frp
.text:0000000000002EE0                 lea     rbx, [rax-1]
.text:0000000000002EE4                 cmp     rbx, r15
.text:0000000000002EE7                 mov     cs:n_frp, rbx
.text:0000000000002EEE                 ja      short loc_2EA0
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: set_fields+197↑j
.text:0000000000002EF0                                         ; set_fields+1AF↑j ...
.text:0000000000002EF0                 add     rbp, 10h
.text:0000000000002EF4                 cmp     r15, rbx
.text:0000000000002EF7                 jb      loc_2E70
.text:0000000000002EFD
.text:0000000000002EFD loc_2EFD:                               ; CODE XREF: set_fields+188↑j
.text:0000000000002EFD                 test    byte ptr [rsp+58h+var_3C], 2
.text:0000000000002F02                 jnz     loc_302D
.text:0000000000002F08
.text:0000000000002F08 loc_2F08:                               ; CODE XREF: set_fields+404↓j
.text:0000000000002F08                 add     rbx, 1
.text:0000000000002F0C                 mov     rdi, rcx
.text:0000000000002F0F                 mov     rsi, rbx
.text:0000000000002F12                 mov     cs:n_frp, rbx
.text:0000000000002F19                 shl     rsi, 4
.text:0000000000002F1D                 call    xrealloc
.text:0000000000002F22                 mov     rdx, cs:n_frp
.text:0000000000002F29                 mov     cs:frp, rax
.text:0000000000002F30                 shl     rdx, 4
.text:0000000000002F34                 lea     rax, [rax+rdx-10h]
.text:0000000000002F39                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002F40                 mov     [rax+8], rdx
.text:0000000000002F44                 mov     [rax], rdx
.text:0000000000002F47                 add     rsp, 28h
.text:0000000000002F4B                 pop     rbx
.text:0000000000002F4C                 pop     rbp
.text:0000000000002F4D                 pop     r12
.text:0000000000002F4F                 pop     r13
.text:0000000000002F51                 pop     r14
.text:0000000000002F53                 pop     r15
.text:0000000000002F55                 retn
.text:0000000000002F55 ; ---------------------------------------------------------------------------
.text:0000000000002F56                 align 20h
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: set_fields+92↑j
.text:0000000000002F60                 test    r12b, r12b
.text:0000000000002F63                 jz      loc_2D96
.text:0000000000002F69                 nop     dword ptr [rax+00000000h]
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: set_fields+9B↑j
.text:0000000000002F70                 cmp     [rsp+58h+var_48], r15
.text:0000000000002F75                 ja      loc_3148
.text:0000000000002F7B                 mov     rdi, [rsp+58h+var_48]
.text:0000000000002F80                 mov     rsi, r15
.text:0000000000002F83                 call    add_range_pair
.text:0000000000002F88                 jmp     loc_2DA7
.text:0000000000002F88 ; ---------------------------------------------------------------------------
.text:0000000000002F8D                 align 10h
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: set_fields+10A↑j
.text:0000000000002F90                 mov     [rsp+58h+var_48], r15
.text:0000000000002F95                 mov     ebp, ebx
.text:0000000000002F97                 xor     r15d, r15d
.text:0000000000002F9A                 jmp     loc_2DBA
.text:0000000000002F9A ; ---------------------------------------------------------------------------
.text:0000000000002F9F                 align 20h
.text:0000000000002FA0
.text:0000000000002FA0 loc_2FA0:                               ; CODE XREF: set_fields+81↑j
.text:0000000000002FA0                 movsx   eax, dl
.text:0000000000002FA3                 lea     edx, [rax-30h]
.text:0000000000002FA6                 cmp     edx, 9
.text:0000000000002FA9                 ja      loc_323C
.text:0000000000002FAF                 test    r13b, r13b
.text:0000000000002FB2                 jz      short loc_3010
.text:0000000000002FB4                 cmp     cs:num_start_6877, 0
.text:0000000000002FBC                 jz      short loc_3010
.text:0000000000002FBE
.text:0000000000002FBE loc_2FBE:                               ; CODE XREF: set_fields+337↓j
.text:0000000000002FBE                 test    bpl, bpl
.text:0000000000002FC1                 mov     edx, 1
.text:0000000000002FC6                 mov     rcx, 1999999999999999h
.text:0000000000002FD0                 cmovnz  r12d, ebp
.text:0000000000002FD4                 cmovz   ebx, edx
.text:0000000000002FD7                 cmp     r15, rcx
.text:0000000000002FDA                 ja      loc_317D
.text:0000000000002FE0                 sub     eax, 30h ; '0'
.text:0000000000002FE3                 lea     rdx, [r15+r15*4]
.text:0000000000002FE7                 cdqe
.text:0000000000002FE9                 lea     rax, [rax+rdx*2]
.text:0000000000002FED                 cmp     rax, r15
.text:0000000000002FF0                 jb      loc_317D
.text:0000000000002FF6                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002FFA                 jz      loc_317D
.text:0000000000003000                 mov     r15, rax
.text:0000000000003003                 mov     r13d, 1
.text:0000000000003009                 jmp     loc_2DBA
.text:0000000000003009 ; ---------------------------------------------------------------------------
.text:000000000000300E                 align 10h
.text:0000000000003010
.text:0000000000003010 loc_3010:                               ; CODE XREF: set_fields+2D2↑j
.text:0000000000003010                                         ; set_fields+2DC↑j
.text:0000000000003010                 mov     cs:num_start_6877, r14
.text:0000000000003017                 jmp     short loc_2FBE
.text:0000000000003019 ; ---------------------------------------------------------------------------
.text:0000000000003019
.text:0000000000003019 loc_3019:                               ; CODE XREF: set_fields+38↑j
.text:0000000000003019                 add     r14, 1
.text:000000000000301D                 mov     r15d, 1
.text:0000000000003023                 mov     ebx, 1
.text:0000000000003028                 jmp     loc_2D23
.text:000000000000302D ; ---------------------------------------------------------------------------
.text:000000000000302D
.text:000000000000302D loc_302D:                               ; CODE XREF: set_fields+222↑j
.text:000000000000302D                 mov     rax, [rcx]
.text:0000000000003030                 mov     cs:frp, 0
.text:000000000000303B                 mov     cs:n_frp, 0
.text:0000000000003046                 mov     cs:n_frp_allocated, 0
.text:0000000000003051                 cmp     rax, 1
.text:0000000000003055                 ja      loc_30E9
.text:000000000000305B
.text:000000000000305B loc_305B:                               ; CODE XREF: set_fields+421↓j
.text:000000000000305B                 cmp     rbx, 1
.text:000000000000305F                 jbe     short loc_30A5
.text:0000000000003061                 mov     rax, rbx
.text:0000000000003064                 lea     rbp, [rcx+8]
.text:0000000000003068                 shl     rax, 4
.text:000000000000306C                 lea     r12, [rcx+rax-8]
.text:0000000000003071                 nop     dword ptr [rax+00000000h]
.text:0000000000003078
.text:0000000000003078 loc_3078:                               ; CODE XREF: set_fields+3C3↓j
.text:0000000000003078                 mov     rax, [rbp+0]
.text:000000000000307C                 lea     rdi, [rax+1]
.text:0000000000003080                 mov     rax, [rbp+8]
.text:0000000000003084                 cmp     rdi, rax
.text:0000000000003087                 jz      short loc_309C
.text:0000000000003089                 lea     rsi, [rax-1]
.text:000000000000308D                 mov     [rsp+58h+var_50], rcx
.text:0000000000003092                 call    add_range_pair
.text:0000000000003097                 mov     rcx, [rsp+58h+var_50]
.text:000000000000309C
.text:000000000000309C loc_309C:                               ; CODE XREF: set_fields+3A7↑j
.text:000000000000309C                 add     rbp, 10h
.text:00000000000030A0                 cmp     r12, rbp
.text:00000000000030A3                 jnz     short loc_3078
.text:00000000000030A5
.text:00000000000030A5 loc_30A5:                               ; CODE XREF: set_fields+37F↑j
.text:00000000000030A5                 shl     rbx, 4
.text:00000000000030A9                 mov     rax, [rcx+rbx-8]
.text:00000000000030AE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000030B2                 jz      short loc_30CE
.text:00000000000030B4                 lea     rdi, [rax+1]
.text:00000000000030B8                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000030BF                 mov     [rsp+58h+var_50], rcx
.text:00000000000030C4                 call    add_range_pair
.text:00000000000030C9                 mov     rcx, [rsp+58h+var_50]
.text:00000000000030CE
.text:00000000000030CE loc_30CE:                               ; CODE XREF: set_fields+3D2↑j
.text:00000000000030CE                 mov     rdi, rcx        ; ptr
.text:00000000000030D1                 call    _free
.text:00000000000030D6                 mov     rbx, cs:n_frp
.text:00000000000030DD                 mov     rcx, cs:frp
.text:00000000000030E4                 jmp     loc_2F08
.text:00000000000030E9 ; ---------------------------------------------------------------------------
.text:00000000000030E9
.text:00000000000030E9 loc_30E9:                               ; CODE XREF: set_fields+375↑j
.text:00000000000030E9                 lea     rsi, [rax-1]
.text:00000000000030ED                 mov     edi, 1
.text:00000000000030F2                 mov     [rsp+58h+var_50], rcx
.text:00000000000030F7                 call    add_range_pair
.text:00000000000030FC                 mov     rcx, [rsp+58h+var_50]
.text:0000000000003101                 jmp     loc_305B
.text:0000000000003106 ; ---------------------------------------------------------------------------
.text:0000000000003106
.text:0000000000003106 loc_3106:                               ; CODE XREF: set_fields+102↑j
.text:0000000000003106                                         ; set_fields+133↑j
.text:0000000000003106                 test    byte ptr [rsp+58h+var_3C], 4
.text:000000000000310B                 mov     edx, 5          ; category
.text:0000000000003110                 jz      short loc_3138
.text:0000000000003112                 lea     rsi, aByteCharacterP ; "byte/character positions are numbered f"...
.text:0000000000003119                 xor     edi, edi        ; domainname
.text:000000000000311B                 call    _dcgettext
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: set_fields+466↓j
.text:0000000000003120                                         ; set_fields+47B↓j ...
.text:0000000000003120                 mov     rdx, rax        ; format
.text:0000000000003123                 xor     edi, edi        ; status
.text:0000000000003125                 xor     esi, esi        ; errnum
.text:0000000000003127                 xor     eax, eax
.text:0000000000003129                 call    _error
.text:000000000000312E                 mov     edi, 1          ; status
.text:0000000000003133                 call    usage
.text:0000000000003138 ; ---------------------------------------------------------------------------
.text:0000000000003138
.text:0000000000003138 loc_3138:                               ; CODE XREF: set_fields+430↑j
.text:0000000000003138                 lea     rsi, aFieldsAreNumbe ; "fields are numbered from 1"
.text:000000000000313F                 xor     edi, edi        ; domainname
.text:0000000000003141                 call    _dcgettext
.text:0000000000003146                 jmp     short loc_3120
.text:0000000000003148 ; ---------------------------------------------------------------------------
.text:0000000000003148
.text:0000000000003148 loc_3148:                               ; CODE XREF: set_fields+295↑j
.text:0000000000003148                 lea     rsi, aInvalidDecreas ; "invalid decreasing range"
.text:000000000000314F                 mov     edx, 5          ; category
.text:0000000000003154
.text:0000000000003154 loc_3154:                               ; CODE XREF: set_fields+515↓j
.text:0000000000003154                                         ; set_fields+5A3↓j
.text:0000000000003154                 xor     edi, edi        ; domainname
.text:0000000000003156                 call    _dcgettext
.text:000000000000315B                 jmp     short loc_3120
.text:000000000000315D ; ---------------------------------------------------------------------------
.text:000000000000315D
.text:000000000000315D loc_315D:                               ; CODE XREF: set_fields+EF↑j
.text:000000000000315D                 test    byte ptr [rsp+58h+var_3C], 4
.text:0000000000003162                 mov     edx, 5          ; category
.text:0000000000003167                 jz      loc_31FA
.text:000000000000316D                 lea     rsi, aInvalidByteOrC ; "invalid byte or character range"
.text:0000000000003174                 xor     edi, edi        ; domainname
.text:0000000000003176                 call    _dcgettext
.text:000000000000317B                 jmp     short loc_3120
.text:000000000000317D ; ---------------------------------------------------------------------------
.text:000000000000317D
.text:000000000000317D loc_317D:                               ; CODE XREF: set_fields+2FA↑j
.text:000000000000317D                                         ; set_fields+310↑j ...
.text:000000000000317D                 mov     rbx, cs:num_start_6877
.text:0000000000003184                 lea     rsi, accept     ; "0123456789"
.text:000000000000318B                 mov     rdi, rbx        ; s
.text:000000000000318E                 call    _strspn
.text:0000000000003193                 mov     rdi, rbx
.text:0000000000003196                 mov     rsi, rax
.text:0000000000003199                 call    xstrndup
.text:000000000000319E                 mov     rdi, rax
.text:00000000000031A1                 mov     rbx, rax
.text:00000000000031A4                 call    quote
.text:00000000000031A9                 test    byte ptr [rsp+58h+var_3C], 4
.text:00000000000031AE                 mov     rbp, rax
.text:00000000000031B1                 mov     edx, 5          ; category
.text:00000000000031B6                 jz      short loc_320D
.text:00000000000031B8                 lea     rsi, aByteCharacterO ; "byte/character offset %s is too large"
.text:00000000000031BF                 xor     edi, edi        ; domainname
.text:00000000000031C1                 call    _dcgettext
.text:00000000000031C6
.text:00000000000031C6 loc_31C6:                               ; CODE XREF: set_fields+53B↓j
.text:00000000000031C6                 mov     rdx, rax        ; format
.text:00000000000031C9                 mov     rcx, rbp
.text:00000000000031CC                 xor     esi, esi        ; errnum
.text:00000000000031CE                 xor     edi, edi        ; status
.text:00000000000031D0                 xor     eax, eax
.text:00000000000031D2                 call    _error
.text:00000000000031D7                 mov     rdi, rbx        ; ptr
.text:00000000000031DA                 call    _free
.text:00000000000031DF                 mov     edi, 1          ; status
.text:00000000000031E4                 call    usage
.text:00000000000031E9 ; ---------------------------------------------------------------------------
.text:00000000000031E9
.text:00000000000031E9 loc_31E9:                               ; CODE XREF: set_fields+A7↑j
.text:00000000000031E9                 mov     edx, 5
.text:00000000000031EE                 lea     rsi, aInvalidRangeWi ; "invalid range with no endpoint: -"
.text:00000000000031F5                 jmp     loc_3154
.text:00000000000031FA ; ---------------------------------------------------------------------------
.text:00000000000031FA
.text:00000000000031FA loc_31FA:                               ; CODE XREF: set_fields+487↑j
.text:00000000000031FA                 lea     rsi, aInvalidFieldRa ; "invalid field range"
.text:0000000000003201                 xor     edi, edi        ; domainname
.text:0000000000003203                 call    _dcgettext
.text:0000000000003208                 jmp     loc_3120
.text:000000000000320D ; ---------------------------------------------------------------------------
.text:000000000000320D
.text:000000000000320D loc_320D:                               ; CODE XREF: set_fields+4D6↑j
.text:000000000000320D                 lea     rsi, aFieldNumberSIs ; "field number %s is too large"
.text:0000000000003214                 xor     edi, edi        ; domainname
.text:0000000000003216                 call    _dcgettext
.text:000000000000321B                 jmp     short loc_31C6
.text:000000000000321D ; ---------------------------------------------------------------------------
.text:000000000000321D
.text:000000000000321D loc_321D:                               ; CODE XREF: set_fields+154↑j
.text:000000000000321D                 test    byte ptr [rsp+58h+var_3C], 4
.text:0000000000003222                 mov     edx, 5          ; category
.text:0000000000003227                 jz      short loc_327C
.text:0000000000003229                 lea     rsi, aMissingListOfB ; "missing list of byte/character position"...
.text:0000000000003230                 xor     edi, edi        ; domainname
.text:0000000000003232                 call    _dcgettext
.text:0000000000003237                 jmp     loc_3120
.text:000000000000323C ; ---------------------------------------------------------------------------
.text:000000000000323C
.text:000000000000323C loc_323C:                               ; CODE XREF: set_fields+2C9↑j
.text:000000000000323C                 mov     rdi, r14
.text:000000000000323F                 call    quote
.text:0000000000003244                 test    byte ptr [rsp+58h+var_3C], 4
.text:0000000000003249                 mov     rbx, rax
.text:000000000000324C                 mov     edx, 5          ; category
.text:0000000000003251                 jz      short loc_3288
.text:0000000000003253                 lea     rsi, aInvalidByteCha ; "invalid byte/character position %s"
.text:000000000000325A                 xor     edi, edi        ; domainname
.text:000000000000325C                 call    _dcgettext
.text:0000000000003261
.text:0000000000003261 loc_3261:                               ; CODE XREF: set_fields+5B6↓j
.text:0000000000003261                 mov     rdx, rax        ; format
.text:0000000000003264                 xor     edi, edi        ; status
.text:0000000000003266                 mov     rcx, rbx
.text:0000000000003269                 xor     esi, esi        ; errnum
.text:000000000000326B                 xor     eax, eax
.text:000000000000326D                 call    _error
.text:0000000000003272                 mov     edi, 1          ; status
.text:0000000000003277                 call    usage
.text:000000000000327C ; ---------------------------------------------------------------------------
.text:000000000000327C
.text:000000000000327C loc_327C:                               ; CODE XREF: set_fields+547↑j
.text:000000000000327C                 lea     rsi, aMissingListOfF ; "missing list of fields"
.text:0000000000003283                 jmp     loc_3154
.text:0000000000003288 ; ---------------------------------------------------------------------------
.text:0000000000003288
.text:0000000000003288 loc_3288:                               ; CODE XREF: set_fields+571↑j
.text:0000000000003288                 lea     rsi, aInvalidFieldVa ; "invalid field value %s"
.text:000000000000328F                 xor     edi, edi        ; domainname
.text:0000000000003291                 call    _dcgettext
.text:0000000000003296                 jmp     short loc_3261
.text:0000000000003296 ; } // starts at 2CE0
.text:0000000000003296 set_fields      endp
.text:0000000000003296
.text:0000000000003296 ; ---------------------------------------------------------------------------
.text:0000000000003298                 align 20h
.text:00000000000032A0
.text:00000000000032A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032A0
.text:00000000000032A0
.text:00000000000032A0                 public reset_fields
.text:00000000000032A0 reset_fields    proc near
.text:00000000000032A0 ; __unwind {
.text:00000000000032A0                 sub     rsp, 8
.text:00000000000032A4                 mov     rdi, cs:frp     ; ptr
.text:00000000000032AB                 mov     cs:n_frp, 0
.text:00000000000032B6                 mov     cs:n_frp_allocated, 0
.text:00000000000032C1                 call    _free
.text:00000000000032C6                 mov     cs:frp, 0
.text:00000000000032D1                 add     rsp, 8
.text:00000000000032D5                 retn
.text:00000000000032D5 ; } // starts at 32A0
.text:00000000000032D5 reset_fields    endp
.text:00000000000032D5
.text:00000000000032D5 ; ---------------------------------------------------------------------------
.text:00000000000032D6                 align 20h
.text:00000000000032E0
.text:00000000000032E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032E0
.text:00000000000032E0
.text:00000000000032E0                 public close_stdout_set_file_name
.text:00000000000032E0 close_stdout_set_file_name proc near
.text:00000000000032E0 ; __unwind {
.text:00000000000032E0                 mov     cs:file_name, rdi
.text:00000000000032E7                 retn
.text:00000000000032E7 ; } // starts at 32E0
.text:00000000000032E7 close_stdout_set_file_name endp
.text:00000000000032E7
.text:00000000000032E7 ; ---------------------------------------------------------------------------
.text:00000000000032E8                 align 10h
.text:00000000000032F0
.text:00000000000032F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032F0
.text:00000000000032F0
.text:00000000000032F0                 public close_stdout_set_ignore_EPIPE
.text:00000000000032F0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000032F0 ; __unwind {
.text:00000000000032F0                 mov     cs:ignore_EPIPE, dil
.text:00000000000032F7                 retn
.text:00000000000032F7 ; } // starts at 32F0
.text:00000000000032F7 close_stdout_set_ignore_EPIPE endp
.text:00000000000032F7
.text:00000000000032F7 ; ---------------------------------------------------------------------------
.text:00000000000032F8                 align 20h
.text:0000000000003300
.text:0000000000003300 ; =============== S U B R O U T I N E =======================================
.text:0000000000003300
.text:0000000000003300 ; Attributes: info_from_lumina
.text:0000000000003300
.text:0000000000003300 ; void __cdecl close_stdout()
.text:0000000000003300                 public close_stdout
.text:0000000000003300 close_stdout    proc near               ; DATA XREF: main+5C↑o
.text:0000000000003300 ; __unwind {
.text:0000000000003300                 push    rbp
.text:0000000000003301                 push    rbx
.text:0000000000003302                 sub     rsp, 8
.text:0000000000003306                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000330D                 call    close_stream
.text:0000000000003312                 test    eax, eax
.text:0000000000003314                 jz      short loc_332C
.text:0000000000003316                 call    ___errno_location
.text:000000000000331B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003322                 mov     rbx, rax
.text:0000000000003325                 jz      short loc_3343
.text:0000000000003327                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000332A                 jnz     short loc_3343
.text:000000000000332C
.text:000000000000332C loc_332C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000332C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003333                 call    close_stream
.text:0000000000003338                 test    eax, eax
.text:000000000000333A                 jnz     short loc_3382
.text:000000000000333C                 add     rsp, 8
.text:0000000000003340                 pop     rbx
.text:0000000000003341                 pop     rbp
.text:0000000000003342                 retn
.text:0000000000003343 ; ---------------------------------------------------------------------------
.text:0000000000003343
.text:0000000000003343 loc_3343:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003343                                         ; close_stdout+2A↑j
.text:0000000000003343                 lea     rsi, aWriteError ; "write error"
.text:000000000000334A                 xor     edi, edi        ; domainname
.text:000000000000334C                 mov     edx, 5          ; category
.text:0000000000003351                 call    _dcgettext
.text:0000000000003356                 mov     rdi, cs:file_name
.text:000000000000335D                 mov     rbp, rax
.text:0000000000003360                 test    rdi, rdi
.text:0000000000003363                 jz      short loc_338D
.text:0000000000003365                 call    quotearg_colon
.text:000000000000336A                 mov     esi, [rbx]      ; errnum
.text:000000000000336C                 lea     rdx, aS         ; "%s: "
.text:0000000000003373                 mov     rcx, rax
.text:0000000000003376                 mov     r8, rbp
.text:0000000000003379                 xor     edi, edi        ; status
.text:000000000000337B                 xor     eax, eax
.text:000000000000337D                 call    _error
.text:0000000000003382
.text:0000000000003382 loc_3382:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003382                                         ; close_stdout+A2↓j
.text:0000000000003382                 mov     edi, cs:exit_failure ; status
.text:0000000000003388                 call    __exit
.text:000000000000338D ; ---------------------------------------------------------------------------
.text:000000000000338D
.text:000000000000338D loc_338D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000338D                 mov     esi, [rbx]      ; errnum
.text:000000000000338F                 lea     rdx, format     ; format
.text:0000000000003396                 mov     rcx, rax
.text:0000000000003399                 xor     edi, edi        ; status
.text:000000000000339B                 xor     eax, eax
.text:000000000000339D                 call    _error
.text:00000000000033A2                 jmp     short loc_3382
.text:00000000000033A2 ; } // starts at 3300
.text:00000000000033A2 close_stdout    endp
.text:00000000000033A2
.text:00000000000033A2 ; ---------------------------------------------------------------------------
.text:00000000000033A4                 align 10h
.text:00000000000033B0
.text:00000000000033B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033B0
.text:00000000000033B0
.text:00000000000033B0 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:00000000000033B0                 public fdadvise
.text:00000000000033B0 fdadvise        proc near
.text:00000000000033B0 ; __unwind {
.text:00000000000033B0                 jmp     _posix_fadvise
.text:00000000000033B0 ; } // starts at 33B0
.text:00000000000033B0 fdadvise        endp
.text:00000000000033B0
.text:00000000000033B0 ; ---------------------------------------------------------------------------
.text:00000000000033B5                 align 20h
.text:00000000000033C0
.text:00000000000033C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033C0
.text:00000000000033C0
.text:00000000000033C0                 public fadvise
.text:00000000000033C0 fadvise         proc near               ; CODE XREF: cut_file+46↑p
.text:00000000000033C0 ; __unwind {
.text:00000000000033C0                 test    rdi, rdi
.text:00000000000033C3                 jz      short locret_33E0
.text:00000000000033C5                 push    rbx
.text:00000000000033C6                 mov     ebx, esi
.text:00000000000033C8                 call    _fileno
.text:00000000000033CD                 mov     ecx, ebx        ; advise
.text:00000000000033CF                 xor     edx, edx        ; len
.text:00000000000033D1                 xor     esi, esi        ; offset
.text:00000000000033D3                 pop     rbx
.text:00000000000033D4                 mov     edi, eax        ; fd
.text:00000000000033D6                 jmp     _posix_fadvise
.text:00000000000033D6 ; ---------------------------------------------------------------------------
.text:00000000000033DB                 align 20h
.text:00000000000033E0
.text:00000000000033E0 locret_33E0:                            ; CODE XREF: fadvise+3↑j
.text:00000000000033E0                 rep retn
.text:00000000000033E0 ; } // starts at 33C0
.text:00000000000033E0 fadvise         endp
.text:00000000000033E0
.text:00000000000033E0 ; ---------------------------------------------------------------------------
.text:00000000000033E2                 align 10h
.text:00000000000033F0
.text:00000000000033F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033F0
.text:00000000000033F0
.text:00000000000033F0                 public getndelim2
.text:00000000000033F0 getndelim2      proc near               ; CODE XREF: cut_file+1ED↑p
.text:00000000000033F0
.text:00000000000033F0 var_90          = qword ptr -90h
.text:00000000000033F0 var_84          = dword ptr -84h
.text:00000000000033F0 var_80          = qword ptr -80h
.text:00000000000033F0 var_78          = qword ptr -78h
.text:00000000000033F0 ptr             = qword ptr -70h
.text:00000000000033F0 var_68          = dword ptr -68h
.text:00000000000033F0 var_64          = dword ptr -64h
.text:00000000000033F0 var_60          = qword ptr -60h
.text:00000000000033F0 var_58          = qword ptr -58h
.text:00000000000033F0 var_50          = qword ptr -50h
.text:00000000000033F0 n               = qword ptr -48h
.text:00000000000033F0 var_40          = qword ptr -40h
.text:00000000000033F0 stream          = qword ptr  8
.text:00000000000033F0
.text:00000000000033F0 ; __unwind {
.text:00000000000033F0                 push    r15
.text:00000000000033F2                 push    r14
.text:00000000000033F4                 push    r13
.text:00000000000033F6                 push    r12
.text:00000000000033F8                 push    rbp
.text:00000000000033F9                 push    rbx
.text:00000000000033FA                 sub     rsp, 68h
.text:00000000000033FE                 mov     r15, [rdi]
.text:0000000000003401                 mov     r12, [rsi]
.text:0000000000003404                 mov     rbx, fs:28h
.text:000000000000340D                 mov     [rsp+98h+var_40], rbx
.text:0000000000003412                 xor     ebx, ebx
.text:0000000000003414                 mov     [rsp+98h+var_58], rdi
.text:0000000000003419                 mov     [rsp+98h+var_50], rsi
.text:000000000000341E                 test    r15, r15
.text:0000000000003421                 mov     [rsp+98h+var_78], rdx
.text:0000000000003426                 mov     [rsp+98h+var_90], rcx
.text:000000000000342B                 mov     [rsp+98h+var_84], r8d
.text:0000000000003430                 mov     [rsp+98h+var_64], r9d
.text:0000000000003435                 mov     r14, [rsp+98h+stream]
.text:000000000000343D                 jz      loc_36D0
.text:0000000000003443
.text:0000000000003443 loc_3443:                               ; CODE XREF: getndelim2+2FC↓j
.text:0000000000003443                 cmp     r12, [rsp+98h+var_78]
.text:0000000000003448                 jnb     short loc_3488
.text:000000000000344A
.text:000000000000344A loc_344A:                               ; CODE XREF: getndelim2+AD↓j
.text:000000000000344A                                         ; getndelim2+32F↓j ...
.text:000000000000344A                 mov     rax, [rsp+98h+var_58]
.text:000000000000344F                 mov     [rax], r15
.text:0000000000003452                 mov     rax, [rsp+98h+var_50]
.text:0000000000003457                 mov     [rax], r12
.text:000000000000345A
.text:000000000000345A loc_345A:                               ; CODE XREF: getndelim2+302↓j
.text:000000000000345A                                         ; getndelim2+364↓j
.text:000000000000345A                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003461
.text:0000000000003461 loc_3461:                               ; CODE XREF: getndelim2+35E↓j
.text:0000000000003461                 mov     rbx, [rsp+98h+var_40]
.text:0000000000003466                 xor     rbx, fs:28h
.text:000000000000346F                 jnz     loc_376A
.text:0000000000003475                 add     rsp, 68h
.text:0000000000003479                 pop     rbx
.text:000000000000347A                 pop     rbp
.text:000000000000347B                 pop     r12
.text:000000000000347D                 pop     r13
.text:000000000000347F                 pop     r14
.text:0000000000003481                 pop     r15
.text:0000000000003483                 retn
.text:0000000000003483 ; ---------------------------------------------------------------------------
.text:0000000000003484                 align 8
.text:0000000000003488
.text:0000000000003488 loc_3488:                               ; CODE XREF: getndelim2+58↑j
.text:0000000000003488                 mov     rbp, r12
.text:000000000000348B                 sub     rbp, [rsp+98h+var_78]
.text:0000000000003490                 setz    dl
.text:0000000000003493                 cmp     r12, [rsp+98h+var_90]
.text:0000000000003498                 setnb   al
.text:000000000000349B                 test    dl, al
.text:000000000000349D                 jnz     short loc_344A
.text:000000000000349F                 mov     eax, [rsp+98h+var_84]
.text:00000000000034A3                 cmp     eax, 0FFFFFFFFh
.text:00000000000034A6                 jz      loc_35D0
.text:00000000000034AC                 mov     ebx, [rsp+98h+var_64]
.text:00000000000034B0                 cmp     ebx, 0FFFFFFFFh
.text:00000000000034B3                 cmovz   ebx, eax
.text:00000000000034B6                 mov     [rsp+98h+var_64], ebx
.text:00000000000034BA
.text:00000000000034BA loc_34BA:                               ; CODE XREF: getndelim2+1E8↓j
.text:00000000000034BA                 mov     rax, [rsp+98h+var_78]
.text:00000000000034BF                 mov     [rsp+98h+ptr], r15
.text:00000000000034C4                 lea     rbx, [r15+rax]
.text:00000000000034C8                 lea     rax, [rsp+98h+n]
.text:00000000000034CD                 mov     [rsp+98h+var_80], rax
.text:00000000000034D2                 jmp     loc_3569
.text:00000000000034D2 ; ---------------------------------------------------------------------------
.text:00000000000034D7                 align 20h
.text:00000000000034E0
.text:00000000000034E0 loc_34E0:                               ; CODE XREF: getndelim2+18C↓j
.text:00000000000034E0                 cmp     [rsp+98h+var_84], 0FFFFFFFFh
.text:00000000000034E5                 mov     r13, [rsp+98h+n]
.text:00000000000034EA                 jnz     loc_3690
.text:00000000000034F0
.text:00000000000034F0 loc_34F0:                               ; CODE XREF: getndelim2+2B6↓j
.text:00000000000034F0                 lea     rcx, [r13+1]
.text:00000000000034F4                 xor     r13d, r13d
.text:00000000000034F7
.text:00000000000034F7 loc_34F7:                               ; CODE XREF: getndelim2+1D3↓j
.text:00000000000034F7                                         ; getndelim2+2D2↓j
.text:00000000000034F7                 mov     rdi, [rsp+98h+var_90]
.text:00000000000034FC                 cmp     r12, rdi
.text:00000000000034FF                 jnb     short loc_350A
.text:0000000000003501                 cmp     rbp, rcx
.text:0000000000003504                 jb      loc_35F0
.text:000000000000350A
.text:000000000000350A loc_350A:                               ; CODE XREF: getndelim2+10F↑j
.text:000000000000350A                                         ; getndelim2+282↓j
.text:000000000000350A                 cmp     rbp, 1
.text:000000000000350E                 jbe     short loc_3546
.text:0000000000003510                 lea     rcx, [rbp-1]
.text:0000000000003514                 cmp     [rsp+98h+n], rcx
.text:0000000000003519                 cmovbe  rcx, [rsp+98h+n]
.text:000000000000351F                 test    r15, r15
.text:0000000000003522                 jz      loc_35E0
.text:0000000000003528                 mov     rdx, rcx        ; n
.text:000000000000352B                 mov     rsi, r15        ; src
.text:000000000000352E                 mov     rdi, rbx        ; dest
.text:0000000000003531                 mov     [rsp+98h+var_60], rcx
.text:0000000000003536                 call    _memcpy
.text:000000000000353B                 mov     rcx, [rsp+98h+var_60]
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: getndelim2+1F7↓j
.text:0000000000003540                 add     rbx, rcx
.text:0000000000003543                 sub     rbp, rcx
.text:0000000000003546
.text:0000000000003546 loc_3546:                               ; CODE XREF: getndelim2+11E↑j
.text:0000000000003546                 test    r15, r15
.text:0000000000003549                 jz      short loc_3560
.text:000000000000354B                 mov     rsi, [rsp+98h+n]
.text:0000000000003550                 mov     rdi, r14        ; stream
.text:0000000000003553                 call    freadseek
.text:0000000000003558                 test    eax, eax
.text:000000000000355A                 jnz     loc_3760
.text:0000000000003560
.text:0000000000003560 loc_3560:                               ; CODE XREF: getndelim2+159↑j
.text:0000000000003560                 test    r13b, r13b
.text:0000000000003563                 jnz     loc_3728
.text:0000000000003569
.text:0000000000003569 loc_3569:                               ; CODE XREF: getndelim2+E2↑j
.text:0000000000003569                 mov     rsi, [rsp+98h+var_80]
.text:000000000000356E                 mov     rdi, r14
.text:0000000000003571                 call    freadptr
.text:0000000000003576                 test    rax, rax
.text:0000000000003579                 mov     r15, rax
.text:000000000000357C                 jnz     loc_34E0
.text:0000000000003582                 mov     rax, [r14+8]
.text:0000000000003586                 cmp     rax, [r14+10h]
.text:000000000000358A                 jnb     loc_3700
.text:0000000000003590                 lea     rdx, [rax+1]
.text:0000000000003594                 mov     [r14+8], rdx
.text:0000000000003598                 movzx   eax, byte ptr [rax]
.text:000000000000359B                 mov     [rsp+98h+var_68], eax
.text:000000000000359F
.text:000000000000359F loc_359F:                               ; CODE XREF: getndelim2+31F↓j
.text:000000000000359F                 mov     eax, [rsp+98h+var_68]
.text:00000000000035A3                 cmp     [rsp+98h+var_84], eax
.text:00000000000035A7                 mov     ecx, 2
.text:00000000000035AC                 mov     [rsp+98h+n], 1
.text:00000000000035B5                 setz    r13b
.text:00000000000035B9                 cmp     [rsp+98h+var_64], eax
.text:00000000000035BD                 setz    al
.text:00000000000035C0                 or      r13d, eax
.text:00000000000035C3                 jmp     loc_34F7
.text:00000000000035C3 ; ---------------------------------------------------------------------------
.text:00000000000035C8                 align 10h
.text:00000000000035D0
.text:00000000000035D0 loc_35D0:                               ; CODE XREF: getndelim2+B6↑j
.text:00000000000035D0                 mov     eax, [rsp+98h+var_64]
.text:00000000000035D4                 mov     [rsp+98h+var_84], eax
.text:00000000000035D8                 jmp     loc_34BA
.text:00000000000035D8 ; ---------------------------------------------------------------------------
.text:00000000000035DD                 align 20h
.text:00000000000035E0
.text:00000000000035E0 loc_35E0:                               ; CODE XREF: getndelim2+132↑j
.text:00000000000035E0                 movzx   eax, byte ptr [rsp+98h+var_68]
.text:00000000000035E5                 mov     [rbx], al
.text:00000000000035E7                 jmp     loc_3540
.text:00000000000035E7 ; ---------------------------------------------------------------------------
.text:00000000000035EC                 align 10h
.text:00000000000035F0
.text:00000000000035F0 loc_35F0:                               ; CODE XREF: getndelim2+114↑j
.text:00000000000035F0                 lea     rax, [r12+40h]
.text:00000000000035F5                 lea     rdx, [r12+r12]
.text:00000000000035F9                 cmp     r12, 3Fh ; '?'
.text:00000000000035FD                 cmovbe  rdx, rax
.text:0000000000003601                 sub     rbx, [rsp+98h+ptr]
.text:0000000000003606                 mov     rsi, rdx
.text:0000000000003609                 sub     rsi, rbx
.text:000000000000360C                 lea     rax, [rbx+rcx]
.text:0000000000003610                 cmp     rsi, rcx
.text:0000000000003613                 cmovb   rdx, rax
.text:0000000000003617                 cmp     r12, rdx
.text:000000000000361A                 jnb     short loc_3680
.text:000000000000361C                 cmp     rdx, rdi
.text:000000000000361F                 ja      short loc_3680
.text:0000000000003621
.text:0000000000003621 loc_3621:                               ; CODE XREF: getndelim2+295↓j
.text:0000000000003621                 mov     rax, [rsp+98h+var_78]
.text:0000000000003626                 cmp     rdx, rax
.text:0000000000003629                 jns     short loc_3641
.text:000000000000362B                 mov     rdx, 8000000000000000h
.text:0000000000003635                 add     rdx, rax
.text:0000000000003638                 cmp     r12, rdx
.text:000000000000363B                 jz      loc_3760
.text:0000000000003641
.text:0000000000003641 loc_3641:                               ; CODE XREF: getndelim2+239↑j
.text:0000000000003641                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:0000000000003646                 mov     rbp, rdx
.text:0000000000003649                 mov     rsi, rdx        ; size
.text:000000000000364C                 sub     rbp, rbx
.text:000000000000364F                 mov     [rsp+98h+var_60], rdx
.text:0000000000003654                 call    _realloc
.text:0000000000003659                 test    rax, rax
.text:000000000000365C                 jz      loc_3760
.text:0000000000003662                 mov     rdx, [rsp+98h+var_60]
.text:0000000000003667                 add     rbx, rax
.text:000000000000366A                 mov     [rsp+98h+ptr], rax
.text:000000000000366F                 mov     r12, rdx
.text:0000000000003672                 jmp     loc_350A
.text:0000000000003672 ; ---------------------------------------------------------------------------
.text:0000000000003677                 align 20h
.text:0000000000003680
.text:0000000000003680 loc_3680:                               ; CODE XREF: getndelim2+22A↑j
.text:0000000000003680                                         ; getndelim2+22F↑j
.text:0000000000003680                 mov     rdx, [rsp+98h+var_90]
.text:0000000000003685                 jmp     short loc_3621
.text:0000000000003685 ; ---------------------------------------------------------------------------
.text:0000000000003687                 align 10h
.text:0000000000003690
.text:0000000000003690 loc_3690:                               ; CODE XREF: getndelim2+FA↑j
.text:0000000000003690                 mov     edx, [rsp+98h+var_64]
.text:0000000000003694                 mov     esi, [rsp+98h+var_84]
.text:0000000000003698                 mov     rcx, r13
.text:000000000000369B                 mov     rdi, rax
.text:000000000000369E                 call    memchr2
.text:00000000000036A3                 test    rax, rax
.text:00000000000036A6                 jz      loc_34F0
.text:00000000000036AC                 sub     rax, r15
.text:00000000000036AF                 mov     r13d, 1
.text:00000000000036B5                 lea     rdx, [rax+1]
.text:00000000000036B9                 lea     rcx, [rax+2]
.text:00000000000036BD                 mov     [rsp+98h+n], rdx
.text:00000000000036C2                 jmp     loc_34F7
.text:00000000000036C2 ; ---------------------------------------------------------------------------
.text:00000000000036C7                 align 10h
.text:00000000000036D0
.text:00000000000036D0 loc_36D0:                               ; CODE XREF: getndelim2+4D↑j
.text:00000000000036D0                 cmp     rcx, 40h ; '@'
.text:00000000000036D4                 mov     r12d, 40h ; '@'
.text:00000000000036DA                 cmovbe  r12, rcx
.text:00000000000036DE                 mov     rdi, r12        ; size
.text:00000000000036E1                 call    _malloc
.text:00000000000036E6                 test    rax, rax
.text:00000000000036E9                 mov     r15, rax
.text:00000000000036EC                 jnz     loc_3443
.text:00000000000036F2                 jmp     loc_345A
.text:00000000000036F2 ; ---------------------------------------------------------------------------
.text:00000000000036F7                 align 20h
.text:0000000000003700
.text:0000000000003700 loc_3700:                               ; CODE XREF: getndelim2+19A↑j
.text:0000000000003700                 mov     rdi, r14        ; _IO_FILE *
.text:0000000000003703                 call    ___uflow
.text:0000000000003708                 cmp     eax, 0FFFFFFFFh
.text:000000000000370B                 mov     [rsp+98h+var_68], eax
.text:000000000000370F                 jnz     loc_359F
.text:0000000000003715                 mov     r15, [rsp+98h+ptr]
.text:000000000000371A                 cmp     rbx, r15
.text:000000000000371D                 jnz     short loc_372D
.text:000000000000371F                 jmp     loc_344A
.text:000000000000371F ; ---------------------------------------------------------------------------
.text:0000000000003724                 align 8
.text:0000000000003728
.text:0000000000003728 loc_3728:                               ; CODE XREF: getndelim2+173↑j
.text:0000000000003728                 mov     r15, [rsp+98h+ptr]
.text:000000000000372D
.text:000000000000372D loc_372D:                               ; CODE XREF: getndelim2+32D↑j
.text:000000000000372D                 mov     rsi, [rsp+98h+var_58]
.text:0000000000003732                 mov     rax, [rsp+98h+var_78]
.text:0000000000003737                 mov     byte ptr [rbx], 0
.text:000000000000373A                 mov     [rsi], r15
.text:000000000000373D                 mov     rsi, [rsp+98h+var_50]
.text:0000000000003742                 add     rax, r15
.text:0000000000003745                 sub     rbx, rax
.text:0000000000003748                 mov     rax, rbx
.text:000000000000374B                 mov     [rsi], r12
.text:000000000000374E                 jnz     loc_3461
.text:0000000000003754                 jmp     loc_345A
.text:0000000000003754 ; ---------------------------------------------------------------------------
.text:0000000000003759                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: getndelim2+16A↑j
.text:0000000000003760                                         ; getndelim2+24B↑j ...
.text:0000000000003760                 mov     r15, [rsp+98h+ptr]
.text:0000000000003765                 jmp     loc_344A
.text:000000000000376A ; ---------------------------------------------------------------------------
.text:000000000000376A
.text:000000000000376A loc_376A:                               ; CODE XREF: getndelim2+7F↑j
.text:000000000000376A                 call    ___stack_chk_fail
.text:000000000000376A ; } // starts at 33F0
.text:000000000000376A getndelim2      endp
.text:000000000000376A
.text:000000000000376A ; ---------------------------------------------------------------------------
.text:000000000000376F                 align 10h
.text:0000000000003770
.text:0000000000003770 ; =============== S U B R O U T I N E =======================================
.text:0000000000003770
.text:0000000000003770
.text:0000000000003770                 public memchr2
.text:0000000000003770 memchr2         proc near               ; CODE XREF: getndelim2+2AE↑p
.text:0000000000003770 ; __unwind {
.text:0000000000003770                 cmp     sil, dl
.text:0000000000003773                 jz      loc_3910
.text:0000000000003779                 test    rcx, rcx
.text:000000000000377C                 push    r15
.text:000000000000377E                 mov     r11d, edx
.text:0000000000003781                 push    r14
.text:0000000000003783                 push    r13
.text:0000000000003785                 push    r12
.text:0000000000003787                 push    rbp
.text:0000000000003788                 push    rbx
.text:0000000000003789                 mov     ebx, esi
.text:000000000000378B                 jz      short loc_37D4
.text:000000000000378D                 test    dil, 7
.text:0000000000003791                 jz      short loc_37D4
.text:0000000000003793                 movzx   eax, byte ptr [rdi]
.text:0000000000003796                 cmp     al, dl
.text:0000000000003798                 jz      loc_38F8
.text:000000000000379E                 cmp     al, sil
.text:00000000000037A1                 jnz     short loc_37CA
.text:00000000000037A3                 jmp     loc_38F8
.text:00000000000037A3 ; ---------------------------------------------------------------------------
.text:00000000000037A8                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: memchr2+62↓j
.text:00000000000037B0                 test    dil, 7
.text:00000000000037B4                 jz      short loc_37D4
.text:00000000000037B6                 movzx   eax, byte ptr [rdi]
.text:00000000000037B9                 cmp     al, r11b
.text:00000000000037BC                 jz      loc_38F8
.text:00000000000037C2                 cmp     al, bl
.text:00000000000037C4                 jz      loc_38F8
.text:00000000000037CA
.text:00000000000037CA loc_37CA:                               ; CODE XREF: memchr2+31↑j
.text:00000000000037CA                 add     rdi, 1
.text:00000000000037CE                 sub     rcx, 1
.text:00000000000037D2                 jnz     short loc_37B0
.text:00000000000037D4
.text:00000000000037D4 loc_37D4:                               ; CODE XREF: memchr2+1B↑j
.text:00000000000037D4                                         ; memchr2+21↑j ...
.text:00000000000037D4                 mov     r12d, esi
.text:00000000000037D7                 movzx   eax, sil
.text:00000000000037DB                 mov     r13d, edx
.text:00000000000037DE                 shl     r12d, 8
.text:00000000000037E2                 shl     r13d, 8
.text:00000000000037E6                 movzx   r12d, r12w
.text:00000000000037EA                 movzx   r13d, r13w
.text:00000000000037EE                 or      r12d, eax
.text:00000000000037F1                 movzx   eax, dl
.text:00000000000037F4                 movsxd  r12, r12d
.text:00000000000037F7                 or      r13d, eax
.text:00000000000037FA                 mov     rax, r12
.text:00000000000037FD                 movsxd  r13, r13d
.text:0000000000003800                 shl     rax, 10h
.text:0000000000003804                 or      r12, rax
.text:0000000000003807                 mov     rax, r13
.text:000000000000380A                 shl     rax, 10h
.text:000000000000380E                 or      r13, rax
.text:0000000000003811                 mov     rax, r12
.text:0000000000003814                 shl     rax, 20h
.text:0000000000003818                 or      r12, rax
.text:000000000000381B                 mov     rax, r13
.text:000000000000381E                 shl     rax, 20h
.text:0000000000003822                 or      r13, rax
.text:0000000000003825                 cmp     rcx, 7
.text:0000000000003829                 jbe     loc_391C
.text:000000000000382F                 mov     rax, [rdi]
.text:0000000000003832                 mov     r9, r12
.text:0000000000003835                 mov     rbp, 0FEFEFEFEFEFEFEFFh
.text:000000000000383F                 mov     r15, 8080808080808080h
.text:0000000000003849                 xor     r9, rax
.text:000000000000384C                 xor     rax, r13
.text:000000000000384F                 lea     r8, [r9+rbp]
.text:0000000000003853                 not     r9
.text:0000000000003856                 and     r8, r9
.text:0000000000003859                 lea     r9, [rax+rbp]
.text:000000000000385D                 not     rax
.text:0000000000003860                 and     rax, r9
.text:0000000000003863                 or      rax, r8
.text:0000000000003866                 test    rax, r15
.text:0000000000003869                 jnz     loc_3921
.text:000000000000386F                 lea     r9, [rcx-8]
.text:0000000000003873                 mov     rax, rdi
.text:0000000000003876                 mov     r14, r9
.text:0000000000003879                 and     r14d, 7
.text:000000000000387D                 jmp     short loc_38AC
.text:000000000000387D ; ---------------------------------------------------------------------------
.text:000000000000387F                 align 20h
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: memchr2+146↓j
.text:0000000000003880                 mov     rdi, [rax]
.text:0000000000003883                 mov     r10, rdi
.text:0000000000003886                 xor     rdi, r13
.text:0000000000003889                 xor     r10, r12
.text:000000000000388C                 lea     r8, [r10+rbp]
.text:0000000000003890                 not     r10
.text:0000000000003893                 and     r8, r10
.text:0000000000003896                 lea     r10, [rdi+rbp]
.text:000000000000389A                 not     rdi
.text:000000000000389D                 and     rdi, r10
.text:00000000000038A0                 or      r8, rdi
.text:00000000000038A3                 test    r8, r15
.text:00000000000038A6                 jnz     short loc_38B8
.text:00000000000038A8                 sub     r9, 8
.text:00000000000038AC
.text:00000000000038AC loc_38AC:                               ; CODE XREF: memchr2+10D↑j
.text:00000000000038AC                 add     rax, 8
.text:00000000000038B0                 cmp     r9, r14
.text:00000000000038B3                 mov     rcx, r9
.text:00000000000038B6                 jnz     short loc_3880
.text:00000000000038B8
.text:00000000000038B8 loc_38B8:                               ; CODE XREF: memchr2+136↑j
.text:00000000000038B8                                         ; memchr2+1AF↓j
.text:00000000000038B8                 test    rcx, rcx
.text:00000000000038BB                 jz      short loc_38E5
.text:00000000000038BD
.text:00000000000038BD loc_38BD:                               ; CODE XREF: memchr2+1B4↓j
.text:00000000000038BD                 movzx   edi, byte ptr [rax] ; s
.text:00000000000038C0                 cmp     dil, dl
.text:00000000000038C3                 jz      short loc_38E7
.text:00000000000038C5                 cmp     dil, sil
.text:00000000000038C8                 jz      short loc_38E7
.text:00000000000038CA                 lea     rdx, [rax+rcx]
.text:00000000000038CE                 jmp     short loc_38DC
.text:00000000000038D0 ; ---------------------------------------------------------------------------
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: memchr2+173↓j
.text:00000000000038D0                 movzx   ecx, byte ptr [rax]
.text:00000000000038D3                 cmp     cl, bl
.text:00000000000038D5                 jz      short loc_38E7
.text:00000000000038D7                 cmp     cl, r11b
.text:00000000000038DA                 jz      short loc_38E7
.text:00000000000038DC
.text:00000000000038DC loc_38DC:                               ; CODE XREF: memchr2+15E↑j
.text:00000000000038DC                 add     rax, 1
.text:00000000000038E0                 cmp     rax, rdx
.text:00000000000038E3                 jnz     short loc_38D0
.text:00000000000038E5
.text:00000000000038E5 loc_38E5:                               ; CODE XREF: memchr2+14B↑j
.text:00000000000038E5                 xor     eax, eax
.text:00000000000038E7
.text:00000000000038E7 loc_38E7:                               ; CODE XREF: memchr2+153↑j
.text:00000000000038E7                                         ; memchr2+158↑j ...
.text:00000000000038E7                 pop     rbx
.text:00000000000038E8                 pop     rbp
.text:00000000000038E9                 pop     r12
.text:00000000000038EB                 pop     r13
.text:00000000000038ED                 pop     r14
.text:00000000000038EF                 pop     r15
.text:00000000000038F1                 retn
.text:00000000000038F1 ; ---------------------------------------------------------------------------
.text:00000000000038F2                 align 8
.text:00000000000038F8
.text:00000000000038F8 loc_38F8:                               ; CODE XREF: memchr2+28↑j
.text:00000000000038F8                                         ; memchr2+33↑j ...
.text:00000000000038F8                 pop     rbx
.text:00000000000038F9                 mov     rax, rdi
.text:00000000000038FC                 pop     rbp
.text:00000000000038FD                 pop     r12
.text:00000000000038FF                 pop     r13
.text:0000000000003901                 pop     r14
.text:0000000000003903                 pop     r15
.text:0000000000003905                 retn
.text:0000000000003905 ; ---------------------------------------------------------------------------
.text:0000000000003906                 align 10h
.text:0000000000003910
.text:0000000000003910 loc_3910:                               ; CODE XREF: memchr2+3↑j
.text:0000000000003910                 movzx   esi, sil        ; c
.text:0000000000003914                 mov     rdx, rcx        ; n
.text:0000000000003917                 jmp     _memchr
.text:000000000000391C ; ---------------------------------------------------------------------------
.text:000000000000391C
.text:000000000000391C loc_391C:                               ; CODE XREF: memchr2+B9↑j
.text:000000000000391C                 mov     rax, rdi
.text:000000000000391F                 jmp     short loc_38B8
.text:0000000000003921 ; ---------------------------------------------------------------------------
.text:0000000000003921
.text:0000000000003921 loc_3921:                               ; CODE XREF: memchr2+F9↑j
.text:0000000000003921                 mov     rax, rdi
.text:0000000000003924                 jmp     short loc_38BD
.text:0000000000003924 ; } // starts at 3770
.text:0000000000003924 memchr2         endp
.text:0000000000003924
.text:0000000000003924 ; ---------------------------------------------------------------------------
.text:0000000000003926                 align 10h
.text:0000000000003930
.text:0000000000003930 ; =============== S U B R O U T I N E =======================================
.text:0000000000003930
.text:0000000000003930
.text:0000000000003930                 public set_program_name
.text:0000000000003930 set_program_name proc near              ; CODE XREF: main+27↑p
.text:0000000000003930 ; __unwind {
.text:0000000000003930                 test    rdi, rdi
.text:0000000000003933                 push    rbx
.text:0000000000003934                 jz      short loc_39AD
.text:0000000000003936                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000393B                 mov     rbx, rdi
.text:000000000000393E                 call    _strrchr
.text:0000000000003943                 test    rax, rax
.text:0000000000003946                 jz      short loc_399D
.text:0000000000003948                 lea     r8, [rax+1]
.text:000000000000394C                 mov     rdx, r8
.text:000000000000394F                 sub     rdx, rbx
.text:0000000000003952                 cmp     rdx, 6
.text:0000000000003956                 jle     short loc_399D
.text:0000000000003958                 lea     rsi, [rax-6]
.text:000000000000395C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003963                 mov     ecx, 7
.text:0000000000003968                 repe cmpsb
.text:000000000000396A                 setnbe  dl
.text:000000000000396D                 sbb     dl, 0
.text:0000000000003970                 test    dl, dl
.text:0000000000003972                 jnz     short loc_399D
.text:0000000000003974                 lea     rdi, aLt        ; "lt-"
.text:000000000000397B                 mov     ecx, 3
.text:0000000000003980                 mov     rsi, r8
.text:0000000000003983                 mov     rbx, r8
.text:0000000000003986                 repe cmpsb
.text:0000000000003988                 setnbe  dl
.text:000000000000398B                 sbb     dl, 0
.text:000000000000398E                 test    dl, dl
.text:0000000000003990                 jnz     short loc_399D
.text:0000000000003992                 lea     rbx, [rax+4]
.text:0000000000003996                 mov     cs:__bss_start, rbx
.text:000000000000399D
.text:000000000000399D loc_399D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000399D                                         ; set_program_name+26↑j ...
.text:000000000000399D                 mov     cs:program_name, rbx
.text:00000000000039A4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000039AB                 pop     rbx
.text:00000000000039AC                 retn
.text:00000000000039AD ; ---------------------------------------------------------------------------
.text:00000000000039AD
.text:00000000000039AD loc_39AD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000039AD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000039B4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000039BB                 mov     edx, 37h ; '7'  ; n
.text:00000000000039C0                 mov     esi, 1          ; size
.text:00000000000039C5                 call    _fwrite
.text:00000000000039CA                 call    _abort
.text:00000000000039CA ; } // starts at 3930
.text:00000000000039CA set_program_name endp
.text:00000000000039CA
.text:00000000000039CA ; ---------------------------------------------------------------------------
.text:00000000000039CF                 align 10h
.text:00000000000039D0
.text:00000000000039D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039D0
.text:00000000000039D0 ; Attributes: info_from_lumina
.text:00000000000039D0
.text:00000000000039D0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000039D0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000039D0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000039D0 ; __unwind {
.text:00000000000039D0                 push    rbp
.text:00000000000039D1                 push    rbx
.text:00000000000039D2                 mov     rbp, rdi
.text:00000000000039D5                 mov     ebx, esi
.text:00000000000039D7                 sub     rsp, 8
.text:00000000000039DB                 call    locale_charset
.text:00000000000039E0                 movzx   edx, byte ptr [rax]
.text:00000000000039E3                 and     edx, 0FFFFFFDFh
.text:00000000000039E6                 cmp     dl, 55h ; 'U'
.text:00000000000039E9                 jz      short loc_3A60
.text:00000000000039EB                 cmp     dl, 47h ; 'G'
.text:00000000000039EE                 jz      short loc_3A10
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000039F0                                         ; gettext_quote+50↓j ...
.text:00000000000039F0                 lea     rax, unk_7073
.text:00000000000039F7                 lea     rdx, asc_7075   ; "'"
.text:00000000000039FE                 cmp     ebx, 9
.text:0000000000003A01                 cmovnz  rax, rdx
.text:0000000000003A05                 add     rsp, 8
.text:0000000000003A09                 pop     rbx
.text:0000000000003A0A                 pop     rbp
.text:0000000000003A0B                 retn
.text:0000000000003A0B ; ---------------------------------------------------------------------------
.text:0000000000003A0C                 align 10h
.text:0000000000003A10
.text:0000000000003A10 loc_3A10:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003A10                 movzx   edx, byte ptr [rax+1]
.text:0000000000003A14                 and     edx, 0FFFFFFDFh
.text:0000000000003A17                 cmp     dl, 42h ; 'B'
.text:0000000000003A1A                 jnz     short loc_39F0
.text:0000000000003A1C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003A20                 jnz     short loc_39F0
.text:0000000000003A22                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003A26                 jnz     short loc_39F0
.text:0000000000003A28                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000003A2C                 jnz     short loc_39F0
.text:0000000000003A2E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003A32                 jnz     short loc_39F0
.text:0000000000003A34                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003A38                 jnz     short loc_39F0
.text:0000000000003A3A                 cmp     byte ptr [rax+7], 0
.text:0000000000003A3E                 jnz     short loc_39F0
.text:0000000000003A40                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003A44                 lea     rax, unk_706C
.text:0000000000003A4B                 lea     rdx, unk_7070
.text:0000000000003A52                 cmovnz  rax, rdx
.text:0000000000003A56                 add     rsp, 8
.text:0000000000003A5A                 pop     rbx
.text:0000000000003A5B                 pop     rbp
.text:0000000000003A5C                 retn
.text:0000000000003A5C ; ---------------------------------------------------------------------------
.text:0000000000003A5D                 align 20h
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003A60                 movzx   edx, byte ptr [rax+1]
.text:0000000000003A64                 and     edx, 0FFFFFFDFh
.text:0000000000003A67                 cmp     dl, 54h ; 'T'
.text:0000000000003A6A                 jnz     short loc_39F0
.text:0000000000003A6C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003A70                 and     edx, 0FFFFFFDFh
.text:0000000000003A73                 cmp     dl, 46h ; 'F'
.text:0000000000003A76                 jnz     loc_39F0
.text:0000000000003A7C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003A80                 jnz     loc_39F0
.text:0000000000003A86                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000003A8A                 jnz     loc_39F0
.text:0000000000003A90                 cmp     byte ptr [rax+5], 0
.text:0000000000003A94                 jnz     loc_39F0
.text:0000000000003A9A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003A9E                 lea     rax, unk_7064
.text:0000000000003AA5                 lea     rdx, unk_7068
.text:0000000000003AAC                 cmovnz  rax, rdx
.text:0000000000003AB0                 add     rsp, 8
.text:0000000000003AB4                 pop     rbx
.text:0000000000003AB5                 pop     rbp
.text:0000000000003AB6                 retn
.text:0000000000003AB6 ; } // starts at 39D0
.text:0000000000003AB6 gettext_quote   endp
.text:0000000000003AB6
.text:0000000000003AB6 ; ---------------------------------------------------------------------------
.text:0000000000003AB7                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AC0
.text:0000000000003AC0 ; Attributes: info_from_lumina
.text:0000000000003AC0
.text:0000000000003AC0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003AC0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003AC0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003AC0
.text:0000000000003AC0 var_E0          = dword ptr -0E0h
.text:0000000000003AC0 var_DB          = byte ptr -0DBh
.text:0000000000003AC0 var_DA          = byte ptr -0DAh
.text:0000000000003AC0 var_D9          = byte ptr -0D9h
.text:0000000000003AC0 s               = qword ptr -0D8h
.text:0000000000003AC0 n               = qword ptr -0D0h
.text:0000000000003AC0 var_C8          = qword ptr -0C8h
.text:0000000000003AC0 ps              = qword ptr -0C0h
.text:0000000000003AC0 var_B8          = qword ptr -0B8h
.text:0000000000003AC0 var_B0          = qword ptr -0B0h
.text:0000000000003AC0 var_A8          = qword ptr -0A8h
.text:0000000000003AC0 s2              = qword ptr -0A0h
.text:0000000000003AC0 var_98          = qword ptr -98h
.text:0000000000003AC0 var_90          = qword ptr -90h
.text:0000000000003AC0 var_88          = qword ptr -88h
.text:0000000000003AC0 var_80          = qword ptr -80h
.text:0000000000003AC0 var_78          = qword ptr -78h
.text:0000000000003AC0 var_70          = dword ptr -70h
.text:0000000000003AC0 var_6C          = byte ptr -6Ch
.text:0000000000003AC0 var_6B          = byte ptr -6Bh
.text:0000000000003AC0 var_6A          = byte ptr -6Ah
.text:0000000000003AC0 var_69          = byte ptr -69h
.text:0000000000003AC0 var_68          = qword ptr -68h
.text:0000000000003AC0 var_60          = qword ptr -60h
.text:0000000000003AC0 wc              = dword ptr -4Ch
.text:0000000000003AC0 var_48          = qword ptr -48h
.text:0000000000003AC0 var_40          = qword ptr -40h
.text:0000000000003AC0 arg_0           = qword ptr  8
.text:0000000000003AC0 arg_8           = qword ptr  10h
.text:0000000000003AC0 arg_10          = qword ptr  18h
.text:0000000000003AC0
.text:0000000000003AC0 ; __unwind {
.text:0000000000003AC0                 push    r15
.text:0000000000003AC2                 push    r14
.text:0000000000003AC4                 mov     r15d, r8d
.text:0000000000003AC7                 push    r13
.text:0000000000003AC9                 push    r12
.text:0000000000003ACB                 mov     r14, rdi
.text:0000000000003ACE                 push    rbp
.text:0000000000003ACF                 push    rbx
.text:0000000000003AD0                 mov     ebx, r9d
.text:0000000000003AD3                 mov     r13, rsi
.text:0000000000003AD6                 mov     rbp, rcx
.text:0000000000003AD9                 and     ebx, 2
.text:0000000000003ADC                 sub     rsp, 0B8h
.text:0000000000003AE3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000003AEB                 mov     [rsp+0E8h+s], rdx
.text:0000000000003AF0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003AF5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000003AFA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000003AFF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003B07                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003B0C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003B14                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003B19                 mov     rax, fs:28h
.text:0000000000003B22                 mov     [rsp+0E8h+var_40], rax
.text:0000000000003B2A                 xor     eax, eax
.text:0000000000003B2C                 call    ___ctype_get_mb_cur_max
.text:0000000000003B31                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003B35                 mov     [rsp+0E8h+var_90], rax
.text:0000000000003B3A                 ja      def_3B51        ; jumptable 00000000000121F1 default case
.text:0000000000003B40                 lea     rcx, jpt_3B51
.text:0000000000003B47                 mov     edx, r15d
.text:0000000000003B4A                 movsxd  rax, ds:(jpt_3B51 - 70E0h)[rcx+rdx*4]
.text:0000000000003B4E                 add     rax, rcx
.text:0000000000003B51                 jmp     rax             ; switch jump
.text:0000000000003B53 ; ---------------------------------------------------------------------------
.text:0000000000003B53
.text:0000000000003B53 loc_3B53:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003B53                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003B53                                         ; DATA XREF: ...
.text:0000000000003B53                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003B58                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B5D                 xor     r12d, r12d
.text:0000000000003B60                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B69                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003B6E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003B73
.text:0000000000003B73 loc_3B73:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003B73                 lea     rax, asc_7075   ; "'"
.text:0000000000003B7A                 mov     [rsp+0E8h+n], 1
.text:0000000000003B83                 xor     r15d, r15d
.text:0000000000003B86                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B8E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003B93
.text:0000000000003B93 loc_3B93:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003B93                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003B93                 xor     r11d, r11d
.text:0000000000003B96                 mov     rax, rbp
.text:0000000000003B99                 mov     r8d, r12d
.text:0000000000003B9C                 mov     rbp, r11
.text:0000000000003B9F                 mov     r11, rax
.text:0000000000003BA2                 nop     word ptr [rax+rax+00h]
.text:0000000000003BA8
.text:0000000000003BA8 loc_3BA8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003BA8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003BA8                 cmp     r11, rbp
.text:0000000000003BAB                 setnz   r12b
.text:0000000000003BAF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BB3                 jnz     short loc_3BC2
.text:0000000000003BB5                 mov     rax, [rsp+0E8h+s]
.text:0000000000003BBA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000003BBE                 setnz   r12b
.text:0000000000003BC2
.text:0000000000003BC2 loc_3BC2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003BC2                 test    r12b, r12b
.text:0000000000003BC5                 jz      loc_4220
.text:0000000000003BCB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003BD0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003BD5                 lea     r9, [rdi+rbp]
.text:0000000000003BD9                 setnz   al
.text:0000000000003BDC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003BE0                 mov     r10d, eax
.text:0000000000003BE3                 jz      loc_3C90
.text:0000000000003BE9                 mov     rax, [rsp+0E8h+n]
.text:0000000000003BEE                 test    rax, rax
.text:0000000000003BF1                 jz      loc_4020
.text:0000000000003BF7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BFB                 lea     rbx, [rbp+rax+0]
.text:0000000000003C00                 jnz     short loc_3C30
.text:0000000000003C02                 cmp     rax, 1
.text:0000000000003C06                 jbe     short loc_3C30
.text:0000000000003C08                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003C0D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003C12                 mov     [rsp+0E8h+ps], r9
.text:0000000000003C17                 call    _strlen
.text:0000000000003C1C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003C22                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003C28                 mov     r11, rax
.text:0000000000003C2B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003C30                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003C30                 cmp     rbx, r11
.text:0000000000003C33                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003C38                 ja      loc_41F0
.text:0000000000003C3E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003C43                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003C48                 mov     rdi, r9         ; s1
.text:0000000000003C4B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003C50                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003C55                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003C5A                 call    _memcmp
.text:0000000000003C5F                 test    eax, eax
.text:0000000000003C61                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003C66                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003C6C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003C71                 jnz     loc_41F0
.text:0000000000003C77                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C7C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003C82                 jnz     loc_4C05
.text:0000000000003C88                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003C90                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003C90                 movzx   ebx, byte ptr [r9]
.text:0000000000003C94                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003C97                 ja      def_3CAE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003C9D                 lea     rcx, jpt_3CAE
.text:0000000000003CA4                 movzx   edx, bl
.text:0000000000003CA7                 movsxd  rax, ds:(jpt_3CAE - 710Ch)[rcx+rdx*4]
.text:0000000000003CAB                 add     rax, rcx
.text:0000000000003CAE                 jmp     rax             ; switch jump
.text:0000000000003CB0 ; ---------------------------------------------------------------------------
.text:0000000000003CB0
.text:0000000000003CB0 loc_3CB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003CB0                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000003CB0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003CB3
.text:0000000000003CB3 loc_3CB3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003CB3                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003CB3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003CB7                 setnz   al
.text:0000000000003CBA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CBE                 jnz     short loc_3CCC
.text:0000000000003CC0                 mov     rax, [rsp+0E8h+s]
.text:0000000000003CC5                 cmp     byte ptr [rax+1], 0
.text:0000000000003CC9                 setnz   al
.text:0000000000003CCC
.text:0000000000003CCC loc_3CCC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000003CCC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003CD1                 setz    dl
.text:0000000000003CD4                 test    al, al
.text:0000000000003CD6                 jz      loc_3F28
.text:0000000000003CDC
.text:0000000000003CDC loc_3CDC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000003CDC                 xor     r12d, r12d
.text:0000000000003CDF                 xor     eax, eax
.text:0000000000003CE1                 nop     dword ptr [rax+00000000h]
.text:0000000000003CE8
.text:0000000000003CE8 loc_3CE8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003CE8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003CE8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000003CED                 jnz     loc_3E02
.text:0000000000003CF3                 test    dl, dl
.text:0000000000003CF5                 jnz     loc_3E02
.text:0000000000003CFB
.text:0000000000003CFB loc_3CFB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000003CFB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003D00                 test    rsi, rsi
.text:0000000000003D03                 jz      short loc_3D19
.text:0000000000003D05                 mov     edx, ebx
.text:0000000000003D07                 shr     dl, 5
.text:0000000000003D0A                 movzx   edx, dl
.text:0000000000003D0D                 mov     edx, [rsi+rdx*4]
.text:0000000000003D10                 bt      edx, ebx
.text:0000000000003D13                 jb      loc_3E63
.text:0000000000003D19
.text:0000000000003D19 loc_3D19:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003D19                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003D19                 test    r10b, r10b
.text:0000000000003D1C                 jnz     loc_3E63
.text:0000000000003D22                 xor     eax, 1
.text:0000000000003D25                 add     rbp, 1
.text:0000000000003D29                 and     eax, r8d
.text:0000000000003D2C
.text:0000000000003D2C loc_3D2C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000003D2C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000003D2C                 test    al, al
.text:0000000000003D2E                 jz      short loc_3D50
.text:0000000000003D30                 cmp     r13, r15
.text:0000000000003D33                 jbe     short loc_3D3A
.text:0000000000003D35                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003D3A
.text:0000000000003D3A loc_3D3A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000003D3A                 lea     rax, [r15+1]
.text:0000000000003D3E                 cmp     r13, rax
.text:0000000000003D41                 jbe     short loc_3D49
.text:0000000000003D43                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003D49
.text:0000000000003D49 loc_3D49:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003D49                 add     r15, 2
.text:0000000000003D4D                 xor     r8d, r8d
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003D50                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003D50                 cmp     r15, r13
.text:0000000000003D53                 jnb     short loc_3D59
.text:0000000000003D55                 mov     [r14+r15], bl
.text:0000000000003D59
.text:0000000000003D59 loc_3D59:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003D59                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000003D5E                 add     r15, 1
.text:0000000000003D62                 mov     eax, 0
.text:0000000000003D67                 test    r12b, r12b
.text:0000000000003D6A                 cmovz   edi, eax
.text:0000000000003D6D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003D72                 jmp     loc_3BA8
.text:0000000000003D72 ; ---------------------------------------------------------------------------
.text:0000000000003D77                 align 20h
.text:0000000000003D80
.text:0000000000003D80 loc_3D80:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003D80                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000003D80                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003D83
.text:0000000000003D83 loc_3D83:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D83                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003D83                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003D87                 cmp     eax, 2
.text:0000000000003D8A                 jz      loc_4348
.text:0000000000003D90                 cmp     eax, 5
.text:0000000000003D93                 jz      loc_4308
.text:0000000000003D99                 cmp     eax, 2
.text:0000000000003D9C                 mov     ebx, 3Fh ; '?'
.text:0000000000003DA1                 setz    dl
.text:0000000000003DA4                 xor     r12d, r12d
.text:0000000000003DA7                 xor     eax, eax
.text:0000000000003DA9                 jmp     loc_3CE8
.text:0000000000003DA9 ; ---------------------------------------------------------------------------
.text:0000000000003DAE                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 loc_3DB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003DB0                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000003DB0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003DB3
.text:0000000000003DB3 loc_3DB3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003DB3                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003DB3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003DB8                 jz      loc_42C0
.text:0000000000003DBE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003DC3                 xor     edx, edx
.text:0000000000003DC5                 xor     eax, eax
.text:0000000000003DC7                 mov     ebx, 27h ; '''
.text:0000000000003DCC                 jmp     loc_3CE8
.text:0000000000003DCC ; ---------------------------------------------------------------------------
.text:0000000000003DD1                 align 8
.text:0000000000003DD8
.text:0000000000003DD8 loc_3DD8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003DD8                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003DD8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000003DDD                 mov     ebx, 74h ; 't'
.text:0000000000003DE2
.text:0000000000003DE2 loc_3DE2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003DE2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003DE2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003DE7                 setz    al
.text:0000000000003DEA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003DEE                 jnz     loc_3F3E
.text:0000000000003DF4
.text:0000000000003DF4 loc_3DF4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003DF4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003DF4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003DF9                 jnz     short loc_3E60
.text:0000000000003DFB
.text:0000000000003DFB loc_3DFB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000003DFB                 mov     ebx, edx
.text:0000000000003DFD                 xor     r12d, r12d
.text:0000000000003E00                 xor     eax, eax
.text:0000000000003E02
.text:0000000000003E02 loc_3E02:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003E02                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003E02                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E07                 jnz     loc_3CFB
.text:0000000000003E0D                 jmp     loc_3D19
.text:0000000000003E0D ; ---------------------------------------------------------------------------
.text:0000000000003E12                 align 8
.text:0000000000003E18
.text:0000000000003E18 loc_3E18:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E18                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003E18                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000003E1D                 mov     ebx, 62h ; 'b'
.text:0000000000003E22                 jmp     short loc_3DF4
.text:0000000000003E22 ; ---------------------------------------------------------------------------
.text:0000000000003E24                 align 8
.text:0000000000003E28
.text:0000000000003E28 loc_3E28:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E28                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003E28                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000003E2D                 jz      loc_4200
.text:0000000000003E33                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003E38                 jz      loc_4050
.text:0000000000003E3E
.text:0000000000003E3E loc_3E3E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000003E3E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E43                 jz      loc_4050
.text:0000000000003E49                 cmp     [rsp+0E8h+n], 0
.text:0000000000003E4F                 jnz     loc_420B
.text:0000000000003E55                 mov     ebx, 5Ch ; '\'
.text:0000000000003E5A                 nop     word ptr [rax+rax+00h]
.text:0000000000003E60
.text:0000000000003E60 loc_3E60:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003E60                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003E60                 xor     r12d, r12d
.text:0000000000003E63
.text:0000000000003E63 loc_3E63:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003E63                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003E63                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E68                 setz    dl
.text:0000000000003E6B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003E70                 mov     eax, edx
.text:0000000000003E72                 jnz     loc_46C8
.text:0000000000003E78                 mov     eax, r8d
.text:0000000000003E7B                 xor     eax, 1
.text:0000000000003E7E                 and     al, dl
.text:0000000000003E80                 jz      short loc_3EB1
.text:0000000000003E82                 cmp     r13, r15
.text:0000000000003E85                 jbe     short loc_3E8C
.text:0000000000003E87                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003E8C
.text:0000000000003E8C loc_3E8C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000003E8C                 lea     rdx, [r15+1]
.text:0000000000003E90                 cmp     r13, rdx
.text:0000000000003E93                 jbe     short loc_3E9B
.text:0000000000003E95                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003E9B
.text:0000000000003E9B loc_3E9B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000003E9B                 lea     rdx, [r15+2]
.text:0000000000003E9F                 cmp     r13, rdx
.text:0000000000003EA2                 jbe     short loc_3EAA
.text:0000000000003EA4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003EAA
.text:0000000000003EAA loc_3EAA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000003EAA                 add     r15, 3
.text:0000000000003EAE                 mov     r8d, eax
.text:0000000000003EB1
.text:0000000000003EB1 loc_3EB1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003EB1                 cmp     r13, r15
.text:0000000000003EB4                 jbe     short loc_3EBB
.text:0000000000003EB6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003EBB
.text:0000000000003EBB loc_3EBB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000003EBB                 add     r15, 1
.text:0000000000003EBF                 add     rbp, 1
.text:0000000000003EC3                 jmp     loc_3D50
.text:0000000000003EC3 ; ---------------------------------------------------------------------------
.text:0000000000003EC8                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 loc_3ED0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003ED0                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003ED0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003ED5                 jnz     loc_40A3
.text:0000000000003EDB                 xor     edx, edx
.text:0000000000003EDD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003EE2                 jz      loc_3DFB
.text:0000000000003EE8                 add     rbp, 1
.text:0000000000003EEC                 jmp     loc_3BA8
.text:0000000000003EEC ; ---------------------------------------------------------------------------
.text:0000000000003EF1                 align 8
.text:0000000000003EF8
.text:0000000000003EF8 loc_3EF8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003EF8                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003EF8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000003EFD                 setz    dl
.text:0000000000003F00                 xor     eax, eax
.text:0000000000003F02                 jmp     loc_3CE8
.text:0000000000003F02 ; ---------------------------------------------------------------------------
.text:0000000000003F07                 align 10h
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F10                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F10                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003F15                 mov     ebx, 61h ; 'a'
.text:0000000000003F1A                 jmp     loc_3DF4
.text:0000000000003F1A ; ---------------------------------------------------------------------------
.text:0000000000003F1F                 align 20h
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F20                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003F25                 setz    dl
.text:0000000000003F28
.text:0000000000003F28 loc_3F28:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003F28                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003F28                 test    rbp, rbp
.text:0000000000003F2B                 jnz     loc_3CDC
.text:0000000000003F31
.text:0000000000003F31 loc_3F31:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003F31                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003F31                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003F36                 and     al, dl
.text:0000000000003F38                 jz      loc_3CE8
.text:0000000000003F3E
.text:0000000000003F3E loc_3F3E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000003F3E                 mov     rbp, r11
.text:0000000000003F41                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003F49                 jmp     loc_4649
.text:0000000000003F49 ; ---------------------------------------------------------------------------
.text:0000000000003F4E                 align 10h
.text:0000000000003F50
.text:0000000000003F50 loc_3F50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F50                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F50                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003F55                 setz    dl
.text:0000000000003F58                 xor     r12d, r12d
.text:0000000000003F5B                 jmp     short loc_3F31
.text:0000000000003F5B ; ---------------------------------------------------------------------------
.text:0000000000003F5D                 align 20h
.text:0000000000003F60
.text:0000000000003F60 loc_3F60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F60                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F60                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003F65                 mov     ebx, 20h ; ' '
.text:0000000000003F6A                 setz    dl
.text:0000000000003F6D                 jmp     short loc_3F31
.text:0000000000003F6D ; ---------------------------------------------------------------------------
.text:0000000000003F6F                 align 10h
.text:0000000000003F70
.text:0000000000003F70 loc_3F70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F70                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F70                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003F75                 mov     ebx, 72h ; 'r'
.text:0000000000003F7A                 jmp     loc_3DE2
.text:0000000000003F7A ; ---------------------------------------------------------------------------
.text:0000000000003F7F                 align 20h
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F80                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F80                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003F85                 mov     ebx, 66h ; 'f'
.text:0000000000003F8A                 jmp     loc_3DF4
.text:0000000000003F8A ; ---------------------------------------------------------------------------
.text:0000000000003F8F                 align 10h
.text:0000000000003F90
.text:0000000000003F90 loc_3F90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003F90                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003F90                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003F95                 mov     ebx, 76h ; 'v'
.text:0000000000003F9A                 jmp     loc_3DF4
.text:0000000000003F9A ; ---------------------------------------------------------------------------
.text:0000000000003F9F                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 loc_3FA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003FA0                                         ; DATA XREF: .rodata:jpt_3CAE↓o
.text:0000000000003FA0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003FA5                 mov     ebx, 6Eh ; 'n'
.text:0000000000003FAA                 jmp     loc_3DE2
.text:0000000000003FAA ; ---------------------------------------------------------------------------
.text:0000000000003FAF                 align 10h
.text:0000000000003FB0
.text:0000000000003FB0 def_403A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003FB0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003FB0                                         ; DATA XREF: ...
.text:0000000000003FB0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003FB3                 nop     dword ptr [rax+rax+00h]
.text:0000000000003FB8
.text:0000000000003FB8 def_3CAE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003FB8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003FB8                                         ; DATA XREF: ...
.text:0000000000003FB8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003FBE                 jnz     loc_4368
.text:0000000000003FC4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003FC9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000003FCE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003FD3                 call    ___ctype_b_loc
.text:0000000000003FD8                 mov     rcx, [rax]
.text:0000000000003FDB                 movzx   edx, bl
.text:0000000000003FDE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003FE4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003FEA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003FEF                 mov     edi, 1
.text:0000000000003FF4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003FF8                 and     ax, 4000h
.text:0000000000003FFC                 setnz   r12b
.text:0000000000004000                 setz    al
.text:0000000000004003                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004007
.text:0000000000004007 loc_4007:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004007                 test    al, al
.text:0000000000004009                 jnz     loc_49A1
.text:000000000000400F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004014                 setz    dl
.text:0000000000004017                 jmp     loc_3CE8
.text:0000000000004017 ; ---------------------------------------------------------------------------
.text:000000000000401C                 align 20h
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004020                 movzx   ebx, byte ptr [r9]
.text:0000000000004024                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004027                 ja      short def_403A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004029                 lea     rcx, jpt_403A
.text:0000000000004030                 movzx   edx, bl
.text:0000000000004033                 movsxd  rax, ds:(jpt_403A - 7308h)[rcx+rdx*4]
.text:0000000000004037                 add     rax, rcx
.text:000000000000403A                 jmp     rax             ; switch jump
.text:000000000000403A ; ---------------------------------------------------------------------------
.text:000000000000403C                 align 20h
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004040                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004040                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004043                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004048                 jnz     loc_3E3E
.text:000000000000404E                 xchg    ax, ax
.text:0000000000004050
.text:0000000000004050 loc_4050:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004050                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004050                 mov     edx, 5Ch ; '\'
.text:0000000000004055                 mov     ebx, 5Ch ; '\'
.text:000000000000405A                 jmp     loc_3DF4
.text:000000000000405A ; ---------------------------------------------------------------------------
.text:000000000000405F                 align 20h
.text:0000000000004060
.text:0000000000004060 loc_4060:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004060                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004060                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004065                 xor     r10d, r10d
.text:0000000000004068                 mov     ebx, 66h ; 'f'
.text:000000000000406D                 jmp     loc_3DF4
.text:000000000000406D ; ---------------------------------------------------------------------------
.text:0000000000004072                 align 8
.text:0000000000004078
.text:0000000000004078 loc_4078:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004078                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004078                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000407D                 xor     r10d, r10d
.text:0000000000004080                 mov     ebx, 6Eh ; 'n'
.text:0000000000004085                 jmp     loc_3DE2
.text:0000000000004085 ; ---------------------------------------------------------------------------
.text:000000000000408A                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004090                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004090                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004095                 jmp     loc_3E60
.text:0000000000004095 ; ---------------------------------------------------------------------------
.text:000000000000409A                 align 20h
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000040A0                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:00000000000040A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000040A3
.text:00000000000040A3 loc_40A3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000040A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040A8                 setz    dl
.text:00000000000040AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000040B0                 jnz     loc_4C4A
.text:00000000000040B6                 mov     eax, r8d
.text:00000000000040B9                 mov     rcx, r15
.text:00000000000040BC                 xor     eax, 1
.text:00000000000040BF                 and     al, dl
.text:00000000000040C1                 jz      short loc_40F0
.text:00000000000040C3                 cmp     r13, r15
.text:00000000000040C6                 jbe     short loc_40CD
.text:00000000000040C8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000040CD
.text:00000000000040CD loc_40CD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000040CD                 lea     rcx, [r15+1]
.text:00000000000040D1                 cmp     r13, rcx
.text:00000000000040D4                 jbe     short loc_40DC
.text:00000000000040D6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000040DC
.text:00000000000040DC loc_40DC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000040DC                 lea     rcx, [r15+2]
.text:00000000000040E0                 cmp     r13, rcx
.text:00000000000040E3                 ja      loc_4719
.text:00000000000040E9
.text:00000000000040E9 loc_40E9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000040E9                 lea     rcx, [r15+3]
.text:00000000000040ED                 mov     r8d, eax
.text:00000000000040F0
.text:00000000000040F0 loc_40F0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000040F0                 cmp     r13, rcx
.text:00000000000040F3                 jbe     short loc_40FA
.text:00000000000040F5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000040FA
.text:00000000000040FA loc_40FA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000040FA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040FF                 lea     r15, [rcx+1]
.text:0000000000004103                 jz      loc_4709
.text:0000000000004109                 lea     rax, [rbp+1]
.text:000000000000410D                 cmp     rax, r11
.text:0000000000004110                 jnb     short loc_412B
.text:0000000000004112                 mov     rax, [rsp+0E8h+s]
.text:0000000000004117                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000411C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004120                 sub     eax, 30h ; '0'
.text:0000000000004123                 cmp     al, 9
.text:0000000000004125                 jbe     loc_4959
.text:000000000000412B
.text:000000000000412B loc_412B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000412B                 mov     eax, r12d
.text:000000000000412E                 mov     ebx, 30h ; '0'
.text:0000000000004133                 xor     r12d, r12d
.text:0000000000004136                 jmp     loc_3CE8
.text:0000000000004136 ; ---------------------------------------------------------------------------
.text:000000000000413B                 align 20h
.text:0000000000004140
.text:0000000000004140 loc_4140:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004140                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004140                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004145                 mov     r12d, r10d
.text:0000000000004148                 setz    dl
.text:000000000000414B                 xor     r10d, r10d
.text:000000000000414E                 xor     eax, eax
.text:0000000000004150                 jmp     loc_3CE8
.text:0000000000004150 ; ---------------------------------------------------------------------------
.text:0000000000004155                 align 8
.text:0000000000004158
.text:0000000000004158 loc_4158:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004158                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004158                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000415D                 setz    dl
.text:0000000000004160                 xor     r10d, r10d
.text:0000000000004163                 jmp     loc_3F28
.text:0000000000004163 ; ---------------------------------------------------------------------------
.text:0000000000004168                 align 10h
.text:0000000000004170
.text:0000000000004170 loc_4170:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004170                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004170                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004175                 setz    dl
.text:0000000000004178                 xor     r10d, r10d
.text:000000000000417B                 xor     r12d, r12d
.text:000000000000417E                 jmp     loc_3F31
.text:000000000000417E ; ---------------------------------------------------------------------------
.text:0000000000004183                 align 8
.text:0000000000004188
.text:0000000000004188 loc_4188:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004188                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:0000000000004188                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000418D                 mov     r12d, r10d
.text:0000000000004190                 mov     ebx, 20h ; ' '
.text:0000000000004195                 setz    dl
.text:0000000000004198                 xor     r10d, r10d
.text:000000000000419B                 jmp     loc_3F31
.text:00000000000041A0 ; ---------------------------------------------------------------------------
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041A0                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:00000000000041A0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000041A5                 xor     r10d, r10d
.text:00000000000041A8                 mov     ebx, 72h ; 'r'
.text:00000000000041AD                 jmp     loc_3DE2
.text:00000000000041AD ; ---------------------------------------------------------------------------
.text:00000000000041B2                 align 8
.text:00000000000041B8
.text:00000000000041B8 loc_41B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041B8                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:00000000000041B8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000041BD                 jmp     loc_3E60
.text:00000000000041BD ; ---------------------------------------------------------------------------
.text:00000000000041C2                 align 8
.text:00000000000041C8
.text:00000000000041C8 loc_41C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041C8                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:00000000000041C8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000041CD                 xor     r10d, r10d
.text:00000000000041D0                 mov     ebx, 74h ; 't'
.text:00000000000041D5                 jmp     loc_3DE2
.text:00000000000041D5 ; ---------------------------------------------------------------------------
.text:00000000000041DA                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000041E0                                         ; DATA XREF: .rodata:jpt_403A↓o
.text:00000000000041E0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000041E5                 jmp     loc_3E60
.text:00000000000041E5 ; ---------------------------------------------------------------------------
.text:00000000000041EA                 align 10h
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000041F0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000041F0                 xor     r10d, r10d
.text:00000000000041F3                 jmp     loc_3C90
.text:00000000000041F3 ; ---------------------------------------------------------------------------
.text:00000000000041F8                 align 20h
.text:0000000000004200
.text:0000000000004200 loc_4200:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004200                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004205                 jnz     loc_4B70
.text:000000000000420B
.text:000000000000420B loc_420B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000420B                 add     rbp, 1
.text:000000000000420F                 mov     eax, r8d
.text:0000000000004212                 xor     r12d, r12d
.text:0000000000004215                 mov     ebx, 5Ch ; '\'
.text:000000000000421A                 jmp     loc_3D2C
.text:000000000000421A ; ---------------------------------------------------------------------------
.text:000000000000421F                 align 20h
.text:0000000000004220
.text:0000000000004220 loc_4220:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004220                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004225                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000422A                 mov     r12d, r8d
.text:000000000000422D                 mov     rbp, r11
.text:0000000000004230                 setz    dl
.text:0000000000004233                 mov     eax, ebx
.text:0000000000004235                 test    r15, r15
.text:0000000000004238                 setz    cl
.text:000000000000423B                 and     eax, edx
.text:000000000000423D                 and     al, cl
.text:000000000000423F                 jnz     loc_4CA6
.text:0000000000004245                 mov     eax, ebx
.text:0000000000004247                 xor     eax, 1
.text:000000000000424A                 and     dl, al
.text:000000000000424C                 jz      loc_4BBC
.text:0000000000004252                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004257                 jz      loc_4BBA
.text:000000000000425D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004262                 jnz     loc_4C5D
.text:0000000000004268                 test    r13, r13
.text:000000000000426B                 setz    al
.text:000000000000426E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004274                 setnz   dl
.text:0000000000004277                 and     al, dl
.text:0000000000004279                 jz      loc_4C9C
.text:000000000000427F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004284
.text:0000000000004284 loc_4284:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004284                 lea     rbx, asc_7075   ; "'"
.text:000000000000428B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000428F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004297                 mov     r15d, 1
.text:000000000000429D                 mov     [rsp+0E8h+n], 1
.text:00000000000042A6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000042AB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000042B0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000042B4                 jmp     loc_3B93
.text:00000000000042B4 ; ---------------------------------------------------------------------------
.text:00000000000042B9                 align 20h
.text:00000000000042C0
.text:00000000000042C0 loc_42C0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000042C0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000042C5                 jnz     loc_4B70
.text:00000000000042CB                 test    r13, r13
.text:00000000000042CE                 jz      loc_46D0
.text:00000000000042D4                 xor     edx, edx
.text:00000000000042D6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000042DC                 jnz     loc_46D0
.text:00000000000042E2
.text:00000000000042E2 loc_42E2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000042E2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000042E2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000042E7                 add     r15, 3
.text:00000000000042EB                 xor     eax, eax
.text:00000000000042ED                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000042F2                 xor     r8d, r8d
.text:00000000000042F5                 mov     r13, rdx
.text:00000000000042F8                 mov     ebx, 27h ; '''
.text:00000000000042FD                 jmp     loc_3D19
.text:00000000000042FD ; ---------------------------------------------------------------------------
.text:0000000000004302                 align 8
.text:0000000000004308
.text:0000000000004308 loc_4308:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004308                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000430D                 jz      short loc_4330
.text:000000000000430F                 lea     rcx, [rbp+2]
.text:0000000000004313                 cmp     rcx, r11
.text:0000000000004316                 jnb     short loc_4330
.text:0000000000004318                 mov     rax, [rsp+0E8h+s]
.text:000000000000431D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004322                 jz      loc_4AB2
.text:0000000000004328                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004330                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004330                 xor     edx, edx
.text:0000000000004332                 xor     r12d, r12d
.text:0000000000004335                 xor     eax, eax
.text:0000000000004337                 mov     ebx, 3Fh ; '?'
.text:000000000000433C                 jmp     loc_3CE8
.text:000000000000433C ; ---------------------------------------------------------------------------
.text:0000000000004341                 align 8
.text:0000000000004348
.text:0000000000004348 loc_4348:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004348                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000434D                 jnz     loc_4B70
.text:0000000000004353                 xor     r12d, r12d
.text:0000000000004356                 xor     eax, eax
.text:0000000000004358                 mov     ebx, 3Fh ; '?'
.text:000000000000435D                 jmp     loc_3D19
.text:000000000000435D ; ---------------------------------------------------------------------------
.text:0000000000004362                 align 8
.text:0000000000004368
.text:0000000000004368 loc_4368:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004368                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004370                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004374                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004380                 mov     [rsp+0E8h+ps], rax
.text:0000000000004385                 jnz     short loc_43B4
.text:0000000000004387                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000438C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004391                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004396                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000439B                 call    _strlen
.text:00000000000043A0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000043A6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000043AC                 mov     r11, rax
.text:00000000000043AF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000043B4
.text:00000000000043B4 loc_43B4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000043B4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000043BC                 xor     ecx, ecx
.text:00000000000043BE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000043C2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000043C7                 mov     rbx, rcx
.text:00000000000043CA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000043D2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000043D7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000043DC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000043E4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000043E9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000043EE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000043F3
.text:00000000000043F3 loc_43F3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000043F3                 mov     rax, [rsp+0E8h+s]
.text:00000000000043F8                 lea     r14, [rbp+rbx+0]
.text:00000000000043FD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004402                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004407                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000440C                 lea     r13, [rax+r14]
.text:0000000000004410                 sub     rdx, r14
.text:0000000000004413                 mov     rsi, r13
.text:0000000000004416                 call    rpl_mbrtowc
.text:000000000000441B                 test    rax, rax
.text:000000000000441E                 mov     r15, rax
.text:0000000000004421                 jz      short loc_4471
.text:0000000000004423                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004427                 jz      loc_4A45
.text:000000000000442D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004431                 jz      loc_49D1
.text:0000000000004437                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000443C                 setz    al
.text:000000000000443F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004443                 jnz     loc_45E0
.text:0000000000004449
.text:0000000000004449 loc_4449:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004449                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004449                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004450                 call    _iswprint
.text:0000000000004455                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000445A                 test    eax, eax
.text:000000000000445C                 mov     eax, 0
.text:0000000000004461                 cmovz   r12d, eax
.text:0000000000004465                 add     rbx, r15
.text:0000000000004468                 call    _mbsinit
.text:000000000000446D                 test    eax, eax
.text:000000000000446F                 jz      short loc_43F3
.text:0000000000004471
.text:0000000000004471 loc_4471:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004471                 mov     edx, r12d
.text:0000000000004474                 mov     rdi, rbx
.text:0000000000004477                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000447D                 xor     edx, 1
.text:0000000000004480                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004485                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000448B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000448F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004497                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000449C                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000044A1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000044A6
.text:00000000000044A6 loc_44A6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000044A6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000044A6                 cmp     rdi, 1
.text:00000000000044AA                 jbe     loc_4AAB
.text:00000000000044B0
.text:00000000000044B0 loc_44B0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000044B0                 mov     rcx, rdi
.text:00000000000044B3                 xor     esi, esi
.text:00000000000044B5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000044BB                 add     rcx, rbp
.text:00000000000044BE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000044C3                 jmp     loc_457E
.text:00000000000044C3 ; ---------------------------------------------------------------------------
.text:00000000000044C8                 align 10h
.text:00000000000044D0
.text:00000000000044D0 loc_44D0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000044D0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000044D5                 setz    al
.text:00000000000044D8                 test    r9b, r9b
.text:00000000000044DB                 jnz     loc_4990
.text:00000000000044E1                 mov     esi, r8d
.text:00000000000044E4                 xor     esi, 1
.text:00000000000044E7                 and     al, sil
.text:00000000000044EA                 jz      short loc_451B
.text:00000000000044EC                 cmp     r13, r15
.text:00000000000044EF                 jbe     short loc_44F6
.text:00000000000044F1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000044F6
.text:00000000000044F6 loc_44F6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000044F6                 lea     rsi, [r15+1]
.text:00000000000044FA                 cmp     r13, rsi
.text:00000000000044FD                 jbe     short loc_4505
.text:00000000000044FF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004505
.text:0000000000004505 loc_4505:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004505                 lea     rsi, [r15+2]
.text:0000000000004509                 cmp     r13, rsi
.text:000000000000450C                 jbe     short loc_4514
.text:000000000000450E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004514
.text:0000000000004514 loc_4514:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004514                 add     r15, 3
.text:0000000000004518                 mov     r8d, eax
.text:000000000000451B
.text:000000000000451B loc_451B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000451B                 cmp     r13, r15
.text:000000000000451E                 jbe     short loc_4525
.text:0000000000004520                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004525
.text:0000000000004525 loc_4525:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004525                 lea     rax, [r15+1]
.text:0000000000004529                 cmp     r13, rax
.text:000000000000452C                 jbe     short loc_453B
.text:000000000000452E                 mov     eax, ebx
.text:0000000000004530                 shr     al, 6
.text:0000000000004533                 add     eax, 30h ; '0'
.text:0000000000004536                 mov     [r14+r15+1], al
.text:000000000000453B
.text:000000000000453B loc_453B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000453B                 lea     rax, [r15+2]
.text:000000000000453F                 cmp     r13, rax
.text:0000000000004542                 jbe     short loc_4554
.text:0000000000004544                 mov     eax, ebx
.text:0000000000004546                 shr     al, 3
.text:0000000000004549                 and     eax, 7
.text:000000000000454C                 add     eax, 30h ; '0'
.text:000000000000454F                 mov     [r14+r15+2], al
.text:0000000000004554
.text:0000000000004554 loc_4554:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004554                 and     ebx, 7
.text:0000000000004557                 add     rbp, 1
.text:000000000000455B                 add     r15, 3
.text:000000000000455F                 add     ebx, 30h ; '0'
.text:0000000000004562                 cmp     rbp, rcx
.text:0000000000004565                 jnb     loc_3D50
.text:000000000000456B                 mov     esi, edx
.text:000000000000456D
.text:000000000000456D loc_456D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000456D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000456D                 cmp     r13, r15
.text:0000000000004570                 jbe     short loc_4576
.text:0000000000004572                 mov     [r14+r15], bl
.text:0000000000004576
.text:0000000000004576 loc_4576:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004576                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000457A                 add     r15, 1
.text:000000000000457E
.text:000000000000457E loc_457E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000457E                 test    dl, dl
.text:0000000000004580                 jnz     loc_44D0
.text:0000000000004586                 mov     eax, esi
.text:0000000000004588                 xor     eax, 1
.text:000000000000458B                 and     eax, r8d
.text:000000000000458E                 test    r10b, r10b
.text:0000000000004591                 jz      short loc_45A1
.text:0000000000004593                 cmp     r13, r15
.text:0000000000004596                 jbe     short loc_459D
.text:0000000000004598                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000459D
.text:000000000000459D loc_459D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000459D                 add     r15, 1
.text:00000000000045A1
.text:00000000000045A1 loc_45A1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000045A1                 add     rbp, 1
.text:00000000000045A5                 cmp     rbp, rcx
.text:00000000000045A8                 jnb     loc_3D2C
.text:00000000000045AE                 test    al, al
.text:00000000000045B0                 jz      loc_49AE
.text:00000000000045B6                 cmp     r13, r15
.text:00000000000045B9                 jbe     short loc_45C0
.text:00000000000045BB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000045C0
.text:00000000000045C0 loc_45C0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000045C0                 lea     rax, [r15+1]
.text:00000000000045C4                 cmp     r13, rax
.text:00000000000045C7                 jbe     short loc_45CF
.text:00000000000045C9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000045CF
.text:00000000000045CF loc_45CF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000045CF                 add     r15, 2
.text:00000000000045D3                 xor     r10d, r10d
.text:00000000000045D6                 xor     r8d, r8d
.text:00000000000045D9                 jmp     short loc_456D
.text:00000000000045D9 ; ---------------------------------------------------------------------------
.text:00000000000045DB                 align 20h
.text:00000000000045E0
.text:00000000000045E0 loc_45E0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000045E0                 cmp     r15, 1
.text:00000000000045E4                 jz      loc_4449
.text:00000000000045EA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000045EF                 lea     rcx, [rdi+r15]
.text:00000000000045F3                 lea     rdx, [rdi+r14+1]
.text:00000000000045F8                 lea     r8, [rcx+r14]
.text:00000000000045FC                 jmp     short loc_460D
.text:00000000000045FC ; ---------------------------------------------------------------------------
.text:00000000000045FE                 align 20h
.text:0000000000004600
.text:0000000000004600 loc_4600:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004600                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004600                 add     rdx, 1
.text:0000000000004604                 cmp     r8, rdx
.text:0000000000004607                 jz      loc_4449
.text:000000000000460D
.text:000000000000460D loc_460D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000460D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004610                 sub     ecx, 5Bh ; '['
.text:0000000000004613                 cmp     cl, 21h ; '!'
.text:0000000000004616                 ja      short loc_4600
.text:0000000000004618                 mov     esi, 1
.text:000000000000461D                 shl     rsi, cl
.text:0000000000004620                 mov     rcx, rsi
.text:0000000000004623                 mov     rsi, 20000002Bh
.text:000000000000462D                 test    rcx, rsi
.text:0000000000004630                 jz      short loc_4600
.text:0000000000004632                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004637                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000463C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004641                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004649
.text:0000000000004649 loc_4649:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004649                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004649                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000464E                 jz      short loc_4660
.text:0000000000004650                 test    al, al
.text:0000000000004652                 mov     eax, 4
.text:0000000000004657                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000465C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004660                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004660                 sub     rsp, 8
.text:0000000000004664                 mov     rcx, rbp
.text:0000000000004667                 mov     rsi, r13
.text:000000000000466A                 push    [rsp+0F0h+var_88]
.text:000000000000466E                 push    [rsp+0F8h+var_80]
.text:0000000000004672                 mov     rdi, r14
.text:0000000000004675                 push    0
.text:0000000000004677                 mov     r9d, [rsp+108h+var_70]
.text:000000000000467F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004684                 mov     rdx, [rsp+108h+s]
.text:0000000000004689                 and     r9d, 0FFFFFFFDh
.text:000000000000468D                 call    quotearg_buffer_restyled
.text:0000000000004692                 add     rsp, 20h
.text:0000000000004696                 mov     r15, rax
.text:0000000000004699
.text:0000000000004699 loc_4699:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004699                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004699                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000046A1                 xor     rbx, fs:28h
.text:00000000000046AA                 mov     rax, r15
.text:00000000000046AD                 jnz     loc_4CB3
.text:00000000000046B3                 add     rsp, 0B8h
.text:00000000000046BA                 pop     rbx
.text:00000000000046BB                 pop     rbp
.text:00000000000046BC                 pop     r12
.text:00000000000046BE                 pop     r13
.text:00000000000046C0                 pop     r14
.text:00000000000046C2                 pop     r15
.text:00000000000046C4                 retn
.text:00000000000046C4 ; ---------------------------------------------------------------------------
.text:00000000000046C5                 align 8
.text:00000000000046C8
.text:00000000000046C8 loc_46C8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000046C8                 mov     rbp, r11
.text:00000000000046CB                 jmp     loc_4649
.text:00000000000046D0 ; ---------------------------------------------------------------------------
.text:00000000000046D0
.text:00000000000046D0 loc_46D0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000046D0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000046D0                 cmp     r13, r15
.text:00000000000046D3                 jbe     short loc_46DA
.text:00000000000046D5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000046DA
.text:00000000000046DA loc_46DA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000046DA                 lea     rax, [r15+1]
.text:00000000000046DE                 cmp     r13, rax
.text:00000000000046E1                 jbe     short loc_46E9
.text:00000000000046E3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000046E9
.text:00000000000046E9 loc_46E9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000046E9                 lea     rax, [r15+2]
.text:00000000000046ED                 cmp     r13, rax
.text:00000000000046F0                 jbe     loc_4CE2
.text:00000000000046F6                 mov     rdx, r13
.text:00000000000046F9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000046FF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004704                 jmp     loc_42E2
.text:0000000000004709 ; ---------------------------------------------------------------------------
.text:0000000000004709
.text:0000000000004709 loc_4709:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004709                 mov     eax, r12d
.text:000000000000470C                 mov     ebx, 30h ; '0'
.text:0000000000004711                 xor     r12d, r12d
.text:0000000000004714                 jmp     loc_3D19
.text:0000000000004719 ; ---------------------------------------------------------------------------
.text:0000000000004719
.text:0000000000004719 loc_4719:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004719                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000471F                 jmp     loc_40E9
.text:0000000000004724 ; ---------------------------------------------------------------------------
.text:0000000000004724
.text:0000000000004724 loc_4724:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004724                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:0000000000004724                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004726                 jnz     loc_3B53        ; jumptable 00000000000121F1 case 1
.text:000000000000472C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004731
.text:0000000000004731 loc_4731:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004731                 test    r13, r13
.text:0000000000004734                 jnz     loc_4CCA
.text:000000000000473A                 lea     rax, asc_7075   ; "'"
.text:0000000000004741                 mov     [rsp+0E8h+var_98], 0
.text:000000000000474A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000474F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004754                 xor     r12d, r12d
.text:0000000000004757                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000475C                 mov     [rsp+0E8h+n], 1
.text:0000000000004765                 mov     [rsp+0E8h+s2], rax
.text:000000000000476A                 mov     r15d, 1
.text:0000000000004770                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004778                 jmp     loc_3B93
.text:0000000000004778 ; ---------------------------------------------------------------------------
.text:000000000000477D                 align 20h
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004780                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:0000000000004780                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004782                 jnz     loc_4B7D
.text:0000000000004788                 test    r13, r13
.text:000000000000478B                 jz      loc_49B6
.text:0000000000004791                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004795                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000479A                 xor     r12d, r12d
.text:000000000000479D                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000047A2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000047AB
.text:00000000000047AB loc_47AB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000047AB                 lea     rax, unk_7073
.text:00000000000047B2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000047B7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000047BC                 mov     [rsp+0E8h+n], 1
.text:00000000000047C5                 mov     r15d, 1
.text:00000000000047CB                 mov     [rsp+0E8h+s2], rax
.text:00000000000047D0                 jmp     loc_3B93
.text:00000000000047D5 ; ---------------------------------------------------------------------------
.text:00000000000047D5
.text:00000000000047D5 loc_47D5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000047D5                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:00000000000047D5                 lea     rax, unk_7073   ; jumptable 00000000000121F1 case 6
.text:00000000000047DC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000047E1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000047E6                 xor     r12d, r12d
.text:00000000000047E9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000047F2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000047F7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000047FC                 mov     [rsp+0E8h+n], 1
.text:0000000000004805                 xor     r15d, r15d
.text:0000000000004808                 mov     [rsp+0E8h+s2], rax
.text:000000000000480D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004815                 jmp     loc_3B93
.text:000000000000481A ; ---------------------------------------------------------------------------
.text:000000000000481A
.text:000000000000481A loc_481A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000481A                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:000000000000481A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000481F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004824                 xor     r12d, r12d
.text:0000000000004827                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004830                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004835                 xor     r15d, r15d
.text:0000000000004838                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000483D                 mov     [rsp+0E8h+n], 0
.text:0000000000004846                 mov     [rsp+0E8h+s2], 0
.text:000000000000484F                 jmp     loc_3B93
.text:0000000000004854 ; ---------------------------------------------------------------------------
.text:0000000000004854
.text:0000000000004854 loc_4854:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004854                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:0000000000004854                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004859                 jz      short loc_48B1
.text:000000000000485B                 lea     rsi, asc_7077   ; "`"
.text:0000000000004862                 xor     edi, edi        ; domainname
.text:0000000000004864                 mov     edx, 5          ; category
.text:0000000000004869                 call    _dcgettext
.text:000000000000486E                 mov     rcx, rax
.text:0000000000004871                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004876                 lea     rax, asc_7077   ; "`"
.text:000000000000487D                 cmp     rcx, rax
.text:0000000000004880                 jz      loc_4C1E
.text:0000000000004886
.text:0000000000004886 loc_4886:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004886                 lea     rsi, asc_7075   ; "'"
.text:000000000000488D                 xor     edi, edi        ; domainname
.text:000000000000488F                 mov     edx, 5          ; category
.text:0000000000004894                 call    _dcgettext
.text:0000000000004899                 mov     rcx, rax
.text:000000000000489C                 mov     [rsp+0E8h+var_88], rax
.text:00000000000048A1                 lea     rax, asc_7075   ; "'"
.text:00000000000048A8                 cmp     rcx, rax
.text:00000000000048AB                 jz      loc_4C34
.text:00000000000048B1
.text:00000000000048B1 loc_48B1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000048B1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000048B1                 xor     r15d, r15d
.text:00000000000048B4                 test    ebx, ebx
.text:00000000000048B6                 jz      loc_4A7D
.text:00000000000048BC
.text:00000000000048BC loc_48BC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000048BC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000048BC                 test    ebx, ebx
.text:00000000000048BE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000048C3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000048C8                 xor     r12d, r12d
.text:00000000000048CB                 mov     rdi, rbx        ; s
.text:00000000000048CE                 call    _strlen
.text:00000000000048D3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000048D8                 mov     [rsp+0E8h+n], rax
.text:00000000000048DD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000048E2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000048E7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000048F0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000048F5                 jmp     loc_3B93
.text:00000000000048FA ; ---------------------------------------------------------------------------
.text:00000000000048FA
.text:00000000000048FA loc_48FA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000048FA                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:00000000000048FA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000048FF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004904                 xor     r12d, r12d
.text:0000000000004907                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004910                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004915                 xor     r15d, r15d
.text:0000000000004918                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000491D                 mov     [rsp+0E8h+n], 0
.text:0000000000004926                 mov     [rsp+0E8h+s2], 0
.text:000000000000492F                 jmp     loc_3B93
.text:0000000000004934 ; ---------------------------------------------------------------------------
.text:0000000000004934
.text:0000000000004934 loc_4934:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004934                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:0000000000004934                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004939                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000493E                 xor     r12d, r12d
.text:0000000000004941                 mov     [rsp+0E8h+var_98], 0
.text:000000000000494A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000494F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004954                 jmp     loc_3B73
.text:0000000000004959 ; ---------------------------------------------------------------------------
.text:0000000000004959
.text:0000000000004959 loc_4959:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004959                 cmp     r13, r15
.text:000000000000495C                 jbe     short loc_4963
.text:000000000000495E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004963
.text:0000000000004963 loc_4963:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004963                 lea     rax, [rcx+2]
.text:0000000000004967                 cmp     r13, rax
.text:000000000000496A                 jbe     short loc_4972
.text:000000000000496C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004972
.text:0000000000004972 loc_4972:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004972                 mov     eax, r12d
.text:0000000000004975                 lea     r15, [rcx+3]
.text:0000000000004979                 xor     r12d, r12d
.text:000000000000497C                 mov     ebx, 30h ; '0'
.text:0000000000004981                 jmp     loc_3CE8
.text:0000000000004981 ; ---------------------------------------------------------------------------
.text:0000000000004986                 align 10h
.text:0000000000004990
.text:0000000000004990 loc_4990:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004990                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004995                 mov     rbp, r11
.text:0000000000004998                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000499C                 jmp     loc_4649
.text:00000000000049A1 ; ---------------------------------------------------------------------------
.text:00000000000049A1
.text:00000000000049A1 loc_49A1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000049A1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000049A6                 xor     r12d, r12d
.text:00000000000049A9                 jmp     loc_44B0
.text:00000000000049AE ; ---------------------------------------------------------------------------
.text:00000000000049AE
.text:00000000000049AE loc_49AE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000049AE                 xor     r10d, r10d
.text:00000000000049B1                 jmp     loc_456D
.text:00000000000049B6 ; ---------------------------------------------------------------------------
.text:00000000000049B6
.text:00000000000049B6 loc_49B6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000049B6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000049BF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000049C4                 xor     r12d, r12d
.text:00000000000049C7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000049CC                 jmp     loc_47AB
.text:00000000000049D1 ; ---------------------------------------------------------------------------
.text:00000000000049D1
.text:00000000000049D1 loc_49D1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000049D1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000049D6                 mov     rsi, r14
.text:00000000000049D9                 mov     rcx, r13
.text:00000000000049DC                 mov     rax, rbx
.text:00000000000049DF                 mov     rdi, rbx
.text:00000000000049E2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000049E8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000049ED                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000049F5                 cmp     rsi, r11
.text:00000000000049F8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000049FE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004A06                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004A0B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004A10                 jnb     short loc_4A38
.text:0000000000004A12                 cmp     byte ptr [rcx], 0
.text:0000000000004A15                 jnz     short loc_4A27
.text:0000000000004A17                 jmp     short loc_4A38
.text:0000000000004A17 ; ---------------------------------------------------------------------------
.text:0000000000004A19                 align 20h
.text:0000000000004A20
.text:0000000000004A20 loc_4A20:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004A20                 cmp     byte ptr [r9+rax], 0
.text:0000000000004A25                 jz      short loc_4A35
.text:0000000000004A27
.text:0000000000004A27 loc_4A27:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004A27                 add     rax, 1
.text:0000000000004A2B                 lea     rdx, [rbp+rax+0]
.text:0000000000004A30                 cmp     r11, rdx
.text:0000000000004A33                 ja      short loc_4A20
.text:0000000000004A35
.text:0000000000004A35 loc_4A35:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004A35                 mov     rdi, rax
.text:0000000000004A38
.text:0000000000004A38 loc_4A38:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004A38                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004A38                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004A3D                 xor     r12d, r12d
.text:0000000000004A40                 jmp     loc_44A6
.text:0000000000004A45 ; ---------------------------------------------------------------------------
.text:0000000000004A45
.text:0000000000004A45 loc_4A45:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004A45                 mov     rdi, rbx
.text:0000000000004A48                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004A4E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004A53                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004A59                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004A61                 xor     r12d, r12d
.text:0000000000004A64                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004A69                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004A6E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004A73                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004A78                 jmp     loc_44A6
.text:0000000000004A7D ; ---------------------------------------------------------------------------
.text:0000000000004A7D
.text:0000000000004A7D loc_4A7D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000004A7D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004A82                 movzx   eax, byte ptr [rdx]
.text:0000000000004A85                 test    al, al
.text:0000000000004A87                 jz      loc_48BC
.text:0000000000004A8D                 nop     dword ptr [rax]
.text:0000000000004A90
.text:0000000000004A90 loc_4A90:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004A90                 cmp     r13, r15
.text:0000000000004A93                 jbe     short loc_4A99
.text:0000000000004A95                 mov     [r14+r15], al
.text:0000000000004A99
.text:0000000000004A99 loc_4A99:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004A99                 add     r15, 1
.text:0000000000004A9D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004AA2                 test    al, al
.text:0000000000004AA4                 jnz     short loc_4A90
.text:0000000000004AA6                 jmp     loc_48BC
.text:0000000000004AAB ; ---------------------------------------------------------------------------
.text:0000000000004AAB
.text:0000000000004AAB loc_4AAB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000004AAB                 mov     eax, edx
.text:0000000000004AAD                 jmp     loc_4007
.text:0000000000004AB2 ; ---------------------------------------------------------------------------
.text:0000000000004AB2
.text:0000000000004AB2 loc_4AB2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004AB2                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004AB6                 cmp     bl, 3Eh ; '>'
.text:0000000000004AB9                 ja      loc_4330
.text:0000000000004ABF                 mov     rax, 7000A38200000000h
.text:0000000000004AC9                 bt      rax, rbx
.text:0000000000004ACD                 jnb     loc_4330
.text:0000000000004AD3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004AD8                 jnz     loc_4CC2
.text:0000000000004ADE                 cmp     r13, r15
.text:0000000000004AE1                 jbe     short loc_4AE8
.text:0000000000004AE3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004AE8
.text:0000000000004AE8 loc_4AE8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004AE8                 lea     rax, [r15+1]
.text:0000000000004AEC                 cmp     r13, rax
.text:0000000000004AEF                 jbe     short loc_4AF7
.text:0000000000004AF1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004AF7
.text:0000000000004AF7 loc_4AF7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004AF7                 lea     rax, [r15+2]
.text:0000000000004AFB                 cmp     r13, rax
.text:0000000000004AFE                 jbe     short loc_4B06
.text:0000000000004B00                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004B06
.text:0000000000004B06 loc_4B06:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004B06                 lea     rax, [r15+3]
.text:0000000000004B0A                 cmp     r13, rax
.text:0000000000004B0D                 jbe     short loc_4B15
.text:0000000000004B0F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004B15
.text:0000000000004B15 loc_4B15:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004B15                 add     r15, 4
.text:0000000000004B19                 xor     edx, edx
.text:0000000000004B1B                 xor     r12d, r12d
.text:0000000000004B1E                 xor     eax, eax
.text:0000000000004B20                 mov     rbp, rcx
.text:0000000000004B23                 jmp     loc_3CE8
.text:0000000000004B28 ; ---------------------------------------------------------------------------
.text:0000000000004B28
.text:0000000000004B28 loc_4B28:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004B28                                         ; DATA XREF: .rodata:jpt_3B51↓o
.text:0000000000004B28                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000004B2A                 jz      loc_4CB8
.text:0000000000004B30                 lea     rax, asc_7075   ; "'"
.text:0000000000004B37                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004B3C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004B41                 xor     r12d, r12d
.text:0000000000004B44                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004B4D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004B52                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004B57                 mov     [rsp+0E8h+n], 1
.text:0000000000004B60                 xor     r15d, r15d
.text:0000000000004B63                 mov     [rsp+0E8h+s2], rax
.text:0000000000004B68                 jmp     loc_3B93
.text:0000000000004B68 ; ---------------------------------------------------------------------------
.text:0000000000004B6D                 align 10h
.text:0000000000004B70
.text:0000000000004B70 loc_4B70:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004B70                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004B70                 mov     rbp, r11
.text:0000000000004B73                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004B78                 jmp     loc_4649
.text:0000000000004B7D ; ---------------------------------------------------------------------------
.text:0000000000004B7D
.text:0000000000004B7D loc_4B7D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000004B7D                 lea     rax, unk_7073
.text:0000000000004B84                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004B89                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004B8E                 xor     r12d, r12d
.text:0000000000004B91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004B9A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004B9F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004BA4                 mov     [rsp+0E8h+n], 1
.text:0000000000004BAD                 xor     r15d, r15d
.text:0000000000004BB0                 mov     [rsp+0E8h+s2], rax
.text:0000000000004BB5                 jmp     loc_3B93
.text:0000000000004BBA ; ---------------------------------------------------------------------------
.text:0000000000004BBA
.text:0000000000004BBA loc_4BBA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000004BBA                 mov     eax, edx
.text:0000000000004BBC
.text:0000000000004BBC loc_4BBC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000004BBC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000004BBC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004BC1                 test    rbx, rbx
.text:0000000000004BC4                 jz      short loc_4BF2
.text:0000000000004BC6                 test    al, al
.text:0000000000004BC8                 jz      short loc_4BF2
.text:0000000000004BCA                 movzx   ecx, byte ptr [rbx]
.text:0000000000004BCD                 mov     rax, rbx
.text:0000000000004BD0                 test    cl, cl
.text:0000000000004BD2                 jz      short loc_4BF2
.text:0000000000004BD4                 mov     rdx, r15
.text:0000000000004BD7                 sub     rax, r15
.text:0000000000004BDA
.text:0000000000004BDA loc_4BDA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000004BDA                 cmp     r13, rdx
.text:0000000000004BDD                 jbe     short loc_4BE3
.text:0000000000004BDF                 mov     [r14+rdx], cl
.text:0000000000004BE3
.text:0000000000004BE3 loc_4BE3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004BE3                 add     rdx, 1
.text:0000000000004BE7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000004BEB                 test    cl, cl
.text:0000000000004BED                 jnz     short loc_4BDA
.text:0000000000004BEF                 mov     r15, rdx
.text:0000000000004BF2
.text:0000000000004BF2 loc_4BF2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004BF2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004BF2                 cmp     r13, r15
.text:0000000000004BF5                 jbe     loc_4699
.text:0000000000004BFB                 mov     byte ptr [r14+r15], 0
.text:0000000000004C00                 jmp     loc_4699
.text:0000000000004C05 ; ---------------------------------------------------------------------------
.text:0000000000004C05
.text:0000000000004C05 loc_4C05:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004C05                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004C0A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004C0F                 mov     rbp, r11
.text:0000000000004C12                 setz    al
.text:0000000000004C15                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004C19                 jmp     loc_4649
.text:0000000000004C1E ; ---------------------------------------------------------------------------
.text:0000000000004C1E
.text:0000000000004C1E loc_4C1E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000004C1E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004C22                 mov     rdi, rcx
.text:0000000000004C25                 call    gettext_quote
.text:0000000000004C2A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004C2F                 jmp     loc_4886
.text:0000000000004C34 ; ---------------------------------------------------------------------------
.text:0000000000004C34
.text:0000000000004C34 loc_4C34:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004C34                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004C38                 mov     rdi, rcx
.text:0000000000004C3B                 call    gettext_quote
.text:0000000000004C40                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004C45                 jmp     loc_48B1
.text:0000000000004C4A ; ---------------------------------------------------------------------------
.text:0000000000004C4A
.text:0000000000004C4A loc_4C4A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000004C4A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004C4F                 mov     rbp, r11
.text:0000000000004C52                 mov     eax, edx
.text:0000000000004C54                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004C58                 jmp     loc_4649
.text:0000000000004C5D ; ---------------------------------------------------------------------------
.text:0000000000004C5D
.text:0000000000004C5D loc_4C5D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000004C5D                 sub     rsp, 8
.text:0000000000004C61                 mov     r8d, 5
.text:0000000000004C67                 mov     rcx, r11
.text:0000000000004C6A                 push    [rsp+0F0h+var_88]
.text:0000000000004C6E                 push    [rsp+0F8h+var_80]
.text:0000000000004C72                 mov     rdi, r14
.text:0000000000004C75                 push    [rsp+100h+var_C8]
.text:0000000000004C79                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004C81                 mov     rdx, [rsp+108h+s]
.text:0000000000004C86                 mov     rsi, [rsp+108h+var_98]
.text:0000000000004C8B                 call    quotearg_buffer_restyled
.text:0000000000004C90                 add     rsp, 20h
.text:0000000000004C94                 mov     r15, rax
.text:0000000000004C97                 jmp     loc_4699
.text:0000000000004C9C ; ---------------------------------------------------------------------------
.text:0000000000004C9C
.text:0000000000004C9C loc_4C9C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000004C9C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004CA1                 jmp     loc_4BBC
.text:0000000000004CA6 ; ---------------------------------------------------------------------------
.text:0000000000004CA6
.text:0000000000004CA6 loc_4CA6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004CA6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004CAE                 jmp     loc_4649
.text:0000000000004CB3 ; ---------------------------------------------------------------------------
.text:0000000000004CB3
.text:0000000000004CB3 loc_4CB3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004CB3                 call    ___stack_chk_fail
.text:0000000000004CB8 ; ---------------------------------------------------------------------------
.text:0000000000004CB8
.text:0000000000004CB8 loc_4CB8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004CB8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004CBD                 jmp     loc_4731
.text:0000000000004CC2 ; ---------------------------------------------------------------------------
.text:0000000000004CC2
.text:0000000000004CC2 loc_4CC2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004CC2                 mov     rbp, r11
.text:0000000000004CC5                 jmp     loc_4660
.text:0000000000004CCA ; ---------------------------------------------------------------------------
.text:0000000000004CCA
.text:0000000000004CCA loc_4CCA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000004CCA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004CCF                 xor     eax, eax
.text:0000000000004CD1                 xor     r12d, r12d
.text:0000000000004CD4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004CDD                 jmp     loc_4284
.text:0000000000004CE2 ; ---------------------------------------------------------------------------
.text:0000000000004CE2
.text:0000000000004CE2 loc_4CE2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004CE2                 mov     rdx, r13
.text:0000000000004CE5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004CEA                 jmp     loc_42E2
.text:0000000000004CEF ; ---------------------------------------------------------------------------
.text:0000000000004CEF
.text:0000000000004CEF def_3B51:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000004CEF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000004CEF ; } // starts at 3AC0
.text:0000000000004CEF quotearg_buffer_restyled endp
.text:0000000000004CEF
.text:0000000000004CEF ; ---------------------------------------------------------------------------
.text:0000000000004CF4                 align 20h
.text:0000000000004D00
.text:0000000000004D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D00
.text:0000000000004D00
.text:0000000000004D00 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004D00                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004D00
.text:0000000000004D00 var_50          = qword ptr -50h
.text:0000000000004D00 var_48          = qword ptr -48h
.text:0000000000004D00 var_40          = dword ptr -40h
.text:0000000000004D00 var_3C          = dword ptr -3Ch
.text:0000000000004D00
.text:0000000000004D00 ; __unwind {
.text:0000000000004D00                 push    r15
.text:0000000000004D02                 push    r14
.text:0000000000004D04                 movsxd  r15, edi
.text:0000000000004D07                 push    r13
.text:0000000000004D09                 push    r12
.text:0000000000004D0B                 mov     r14, rdx
.text:0000000000004D0E                 push    rbp
.text:0000000000004D0F                 push    rbx
.text:0000000000004D10                 mov     rbp, rcx
.text:0000000000004D13                 sub     rsp, 28h
.text:0000000000004D17                 mov     [rsp+58h+var_50], rsi
.text:0000000000004D1C                 call    ___errno_location
.text:0000000000004D21                 mov     r13, rax
.text:0000000000004D24                 mov     eax, [rax]
.text:0000000000004D26                 test    r15d, r15d
.text:0000000000004D29                 mov     rbx, cs:slotvec
.text:0000000000004D30                 mov     [rsp+58h+var_40], eax
.text:0000000000004D34                 js      loc_4EA1
.text:0000000000004D3A                 cmp     cs:nslots, r15d
.text:0000000000004D41                 jg      short loc_4DA5
.text:0000000000004D43                 cmp     r15d, 7FFFFFFFh
.text:0000000000004D4A                 jz      loc_4EA6
.text:0000000000004D50                 lea     r12d, [r15+1]
.text:0000000000004D54                 lea     rax, slotvec0
.text:0000000000004D5B                 movsxd  rsi, r12d
.text:0000000000004D5E                 shl     rsi, 4
.text:0000000000004D62                 cmp     rbx, rax
.text:0000000000004D65                 jz      loc_4E80
.text:0000000000004D6B                 mov     rdi, rbx
.text:0000000000004D6E                 call    xrealloc
.text:0000000000004D73                 mov     rbx, rax
.text:0000000000004D76                 mov     cs:slotvec, rax
.text:0000000000004D7D
.text:0000000000004D7D loc_4D7D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000004D7D                 movsxd  rdi, cs:nslots
.text:0000000000004D84                 mov     edx, r12d
.text:0000000000004D87                 xor     esi, esi        ; c
.text:0000000000004D89                 sub     edx, edi
.text:0000000000004D8B                 shl     rdi, 4
.text:0000000000004D8F                 movsxd  rdx, edx
.text:0000000000004D92                 add     rdi, rbx        ; s
.text:0000000000004D95                 shl     rdx, 4          ; n
.text:0000000000004D99                 call    _memset
.text:0000000000004D9E                 mov     cs:nslots, r12d
.text:0000000000004DA5
.text:0000000000004DA5 loc_4DA5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004DA5                 mov     eax, [rbp+4]
.text:0000000000004DA8                 shl     r15, 4
.text:0000000000004DAC                 sub     rsp, 8
.text:0000000000004DB0                 add     rbx, r15
.text:0000000000004DB3                 lea     r15, [rbp+8]
.text:0000000000004DB7                 mov     r8d, [rbp+0]
.text:0000000000004DBB                 mov     r11, [rbx]
.text:0000000000004DBE                 mov     r12, [rbx+8]
.text:0000000000004DC2                 mov     rcx, r14
.text:0000000000004DC5                 or      eax, 1
.text:0000000000004DC8                 mov     [rsp+60h+var_3C], eax
.text:0000000000004DCC                 push    qword ptr [rbp+30h]
.text:0000000000004DCF                 mov     r9d, eax
.text:0000000000004DD2                 push    qword ptr [rbp+28h]
.text:0000000000004DD5                 push    r15
.text:0000000000004DD7                 mov     rsi, r11
.text:0000000000004DDA                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004DDF                 mov     rdi, r12
.text:0000000000004DE2                 mov     [rsp+78h+var_48], r11
.text:0000000000004DE7                 call    quotearg_buffer_restyled
.text:0000000000004DEC                 add     rsp, 20h
.text:0000000000004DF0                 mov     r11, [rsp+58h+var_48]
.text:0000000000004DF5                 cmp     r11, rax
.text:0000000000004DF8                 ja      short loc_4E61
.text:0000000000004DFA                 lea     rsi, [rax+1]
.text:0000000000004DFE                 lea     rax, slot0
.text:0000000000004E05                 cmp     r12, rax
.text:0000000000004E08                 mov     [rbx], rsi
.text:0000000000004E0B                 jz      short loc_4E1F
.text:0000000000004E0D                 mov     rdi, r12        ; ptr
.text:0000000000004E10                 mov     [rsp+58h+var_48], rsi
.text:0000000000004E15                 call    _free
.text:0000000000004E1A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000004E1F
.text:0000000000004E1F loc_4E1F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000004E1F                 mov     rdi, rsi
.text:0000000000004E22                 mov     [rsp+58h+var_48], rsi
.text:0000000000004E27                 call    xmalloc
.text:0000000000004E2C                 sub     rsp, 8
.text:0000000000004E30                 mov     [rbx+8], rax
.text:0000000000004E34                 mov     r8d, [rbp+0]
.text:0000000000004E38                 push    qword ptr [rbp+30h]
.text:0000000000004E3B                 push    qword ptr [rbp+28h]
.text:0000000000004E3E                 mov     rcx, r14
.text:0000000000004E41                 push    r15
.text:0000000000004E43                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004E48                 mov     rdi, rax
.text:0000000000004E4B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004E50                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004E55                 mov     r12, rax
.text:0000000000004E58                 call    quotearg_buffer_restyled
.text:0000000000004E5D                 add     rsp, 20h
.text:0000000000004E61
.text:0000000000004E61 loc_4E61:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004E61                 mov     eax, [rsp+58h+var_40]
.text:0000000000004E65                 mov     [r13+0], eax
.text:0000000000004E69                 add     rsp, 28h
.text:0000000000004E6D                 mov     rax, r12
.text:0000000000004E70                 pop     rbx
.text:0000000000004E71                 pop     rbp
.text:0000000000004E72                 pop     r12
.text:0000000000004E74                 pop     r13
.text:0000000000004E76                 pop     r14
.text:0000000000004E78                 pop     r15
.text:0000000000004E7A                 retn
.text:0000000000004E7A ; ---------------------------------------------------------------------------
.text:0000000000004E7B                 align 20h
.text:0000000000004E80
.text:0000000000004E80 loc_4E80:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004E80                 xor     edi, edi
.text:0000000000004E82                 call    xrealloc
.text:0000000000004E87                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000004E8F                 mov     rbx, rax
.text:0000000000004E92                 mov     cs:slotvec, rax
.text:0000000000004E99                 movups  xmmword ptr [rax], xmm0
.text:0000000000004E9C                 jmp     loc_4D7D
.text:0000000000004EA1 ; ---------------------------------------------------------------------------
.text:0000000000004EA1
.text:0000000000004EA1 loc_4EA1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004EA1                 call    _abort
.text:0000000000004EA6 ; ---------------------------------------------------------------------------
.text:0000000000004EA6
.text:0000000000004EA6 loc_4EA6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004EA6                 call    xalloc_die
.text:0000000000004EA6 ; } // starts at 4D00
.text:0000000000004EA6 quotearg_n_options endp
.text:0000000000004EA6
.text:0000000000004EA6 ; ---------------------------------------------------------------------------
.text:0000000000004EAB                 align 10h
.text:0000000000004EB0
.text:0000000000004EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EB0
.text:0000000000004EB0 ; Attributes: info_from_lumina
.text:0000000000004EB0
.text:0000000000004EB0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004EB0                 public clone_quoting_options
.text:0000000000004EB0 clone_quoting_options proc near
.text:0000000000004EB0 ; __unwind {
.text:0000000000004EB0                 push    r12
.text:0000000000004EB2                 push    rbp
.text:0000000000004EB3                 push    rbx
.text:0000000000004EB4                 mov     rbx, rdi
.text:0000000000004EB7                 call    ___errno_location
.text:0000000000004EBC                 mov     r12d, [rax]
.text:0000000000004EBF                 mov     rbp, rax
.text:0000000000004EC2                 lea     rax, default_quoting_options
.text:0000000000004EC9                 test    rbx, rbx
.text:0000000000004ECC                 mov     esi, 38h ; '8'  ; n
.text:0000000000004ED1                 cmovz   rbx, rax
.text:0000000000004ED5                 mov     rdi, rbx        ; src
.text:0000000000004ED8                 call    xmemdup
.text:0000000000004EDD                 mov     [rbp+0], r12d
.text:0000000000004EE1                 pop     rbx
.text:0000000000004EE2                 pop     rbp
.text:0000000000004EE3                 pop     r12
.text:0000000000004EE5                 retn
.text:0000000000004EE5 ; } // starts at 4EB0
.text:0000000000004EE5 clone_quoting_options endp
.text:0000000000004EE5
.text:0000000000004EE5 ; ---------------------------------------------------------------------------
.text:0000000000004EE6                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0
.text:0000000000004EF0                 public get_quoting_style
.text:0000000000004EF0 get_quoting_style proc near
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 lea     rax, default_quoting_options
.text:0000000000004EF7                 test    rdi, rdi
.text:0000000000004EFA                 cmovz   rdi, rax
.text:0000000000004EFE                 mov     eax, [rdi]
.text:0000000000004F00                 retn
.text:0000000000004F00 ; } // starts at 4EF0
.text:0000000000004F00 get_quoting_style endp
.text:0000000000004F00
.text:0000000000004F00 ; ---------------------------------------------------------------------------
.text:0000000000004F01                 align 10h
.text:0000000000004F10
.text:0000000000004F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F10
.text:0000000000004F10
.text:0000000000004F10                 public set_quoting_style
.text:0000000000004F10 set_quoting_style proc near
.text:0000000000004F10 ; __unwind {
.text:0000000000004F10                 lea     rax, default_quoting_options
.text:0000000000004F17                 test    rdi, rdi
.text:0000000000004F1A                 cmovz   rdi, rax
.text:0000000000004F1E                 mov     [rdi], esi
.text:0000000000004F20                 retn
.text:0000000000004F20 ; } // starts at 4F10
.text:0000000000004F20 set_quoting_style endp
.text:0000000000004F20
.text:0000000000004F20 ; ---------------------------------------------------------------------------
.text:0000000000004F21                 align 10h
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30 ; Attributes: info_from_lumina
.text:0000000000004F30
.text:0000000000004F30 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004F30                 public set_char_quoting
.text:0000000000004F30 set_char_quoting proc near
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 lea     rax, default_quoting_options
.text:0000000000004F37                 test    rdi, rdi
.text:0000000000004F3A                 mov     ecx, esi
.text:0000000000004F3C                 cmovz   rdi, rax
.text:0000000000004F40                 mov     eax, esi
.text:0000000000004F42                 and     ecx, 1Fh
.text:0000000000004F45                 shr     al, 5
.text:0000000000004F48                 movzx   eax, al
.text:0000000000004F4B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004F50                 mov     esi, [rdi]
.text:0000000000004F52                 mov     eax, esi
.text:0000000000004F54                 shr     eax, cl
.text:0000000000004F56                 xor     edx, eax
.text:0000000000004F58                 and     eax, 1
.text:0000000000004F5B                 and     edx, 1
.text:0000000000004F5E                 shl     edx, cl
.text:0000000000004F60                 xor     edx, esi
.text:0000000000004F62                 mov     [rdi], edx
.text:0000000000004F64                 retn
.text:0000000000004F64 ; } // starts at 4F30
.text:0000000000004F64 set_char_quoting endp
.text:0000000000004F64
.text:0000000000004F64 ; ---------------------------------------------------------------------------
.text:0000000000004F65                 align 10h
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70
.text:0000000000004F70                 public set_quoting_flags
.text:0000000000004F70 set_quoting_flags proc near
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 lea     rax, default_quoting_options
.text:0000000000004F77                 test    rdi, rdi
.text:0000000000004F7A                 cmovz   rdi, rax
.text:0000000000004F7E                 mov     eax, [rdi+4]
.text:0000000000004F81                 mov     [rdi+4], esi
.text:0000000000004F84                 retn
.text:0000000000004F84 ; } // starts at 4F70
.text:0000000000004F84 set_quoting_flags endp
.text:0000000000004F84
.text:0000000000004F84 ; ---------------------------------------------------------------------------
.text:0000000000004F85                 align 10h
.text:0000000000004F90
.text:0000000000004F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F90
.text:0000000000004F90 ; Attributes: info_from_lumina
.text:0000000000004F90
.text:0000000000004F90 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004F90                 public set_custom_quoting
.text:0000000000004F90 set_custom_quoting proc near
.text:0000000000004F90 ; __unwind {
.text:0000000000004F90                 lea     rax, default_quoting_options
.text:0000000000004F97                 test    rdi, rdi
.text:0000000000004F9A                 cmovz   rdi, rax
.text:0000000000004F9E                 test    rsi, rsi
.text:0000000000004FA1                 mov     dword ptr [rdi], 0Ah
.text:0000000000004FA7                 jz      short loc_4FB7
.text:0000000000004FA9                 test    rdx, rdx
.text:0000000000004FAC                 jz      short loc_4FB7
.text:0000000000004FAE                 mov     [rdi+28h], rsi
.text:0000000000004FB2                 mov     [rdi+30h], rdx
.text:0000000000004FB6                 retn
.text:0000000000004FB7 ; ---------------------------------------------------------------------------
.text:0000000000004FB7
.text:0000000000004FB7 loc_4FB7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004FB7                                         ; set_custom_quoting+1C↑j
.text:0000000000004FB7                 sub     rsp, 8
.text:0000000000004FBB                 call    _abort
.text:0000000000004FBB ; } // starts at 4F90
.text:0000000000004FBB set_custom_quoting endp
.text:0000000000004FBB
.text:0000000000004FC0
.text:0000000000004FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FC0
.text:0000000000004FC0 ; Attributes: info_from_lumina
.text:0000000000004FC0
.text:0000000000004FC0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004FC0                 public quotearg_buffer
.text:0000000000004FC0 quotearg_buffer proc near
.text:0000000000004FC0
.text:0000000000004FC0 var_40          = qword ptr -40h
.text:0000000000004FC0
.text:0000000000004FC0 ; __unwind {
.text:0000000000004FC0                 push    r15
.text:0000000000004FC2                 push    r14
.text:0000000000004FC4                 lea     rax, default_quoting_options
.text:0000000000004FCB                 push    r13
.text:0000000000004FCD                 push    r12
.text:0000000000004FCF                 mov     r13, rdi
.text:0000000000004FD2                 push    rbp
.text:0000000000004FD3                 push    rbx
.text:0000000000004FD4                 mov     rbx, r8
.text:0000000000004FD7                 mov     r14, rsi
.text:0000000000004FDA                 mov     r15, rdx
.text:0000000000004FDD                 sub     rsp, 18h
.text:0000000000004FE1                 test    r8, r8
.text:0000000000004FE4                 cmovz   rbx, rax
.text:0000000000004FE8                 mov     [rsp+48h+var_40], rcx
.text:0000000000004FED                 call    ___errno_location
.text:0000000000004FF2                 mov     r12d, [rax]
.text:0000000000004FF5                 mov     rbp, rax
.text:0000000000004FF8                 lea     rax, [rbx+8]
.text:0000000000004FFC                 sub     rsp, 8
.text:0000000000005000                 mov     r9d, [rbx+4]
.text:0000000000005004                 push    qword ptr [rbx+30h]
.text:0000000000005007                 mov     r8d, [rbx]
.text:000000000000500A                 push    qword ptr [rbx+28h]
.text:000000000000500D                 mov     rdx, r15
.text:0000000000005010                 push    rax
.text:0000000000005011                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005016                 mov     rsi, r14
.text:0000000000005019                 mov     rdi, r13
.text:000000000000501C                 call    quotearg_buffer_restyled
.text:0000000000005021                 mov     [rbp+0], r12d
.text:0000000000005025                 add     rsp, 38h
.text:0000000000005029                 pop     rbx
.text:000000000000502A                 pop     rbp
.text:000000000000502B                 pop     r12
.text:000000000000502D                 pop     r13
.text:000000000000502F                 pop     r14
.text:0000000000005031                 pop     r15
.text:0000000000005033                 retn
.text:0000000000005033 ; } // starts at 4FC0
.text:0000000000005033 quotearg_buffer endp
.text:0000000000005033
.text:0000000000005033 ; ---------------------------------------------------------------------------
.text:0000000000005034                 align 20h
.text:0000000000005040
.text:0000000000005040 ; =============== S U B R O U T I N E =======================================
.text:0000000000005040
.text:0000000000005040 ; Attributes: info_from_lumina
.text:0000000000005040
.text:0000000000005040 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005040                 public quotearg_alloc_mem
.text:0000000000005040 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005040
.text:0000000000005040 var_5C          = dword ptr -5Ch
.text:0000000000005040 var_58          = qword ptr -58h
.text:0000000000005040 var_50          = qword ptr -50h
.text:0000000000005040 var_48          = qword ptr -48h
.text:0000000000005040 var_40          = qword ptr -40h
.text:0000000000005040
.text:0000000000005040 ; __unwind {
.text:0000000000005040                 push    r15
.text:0000000000005042                 push    r14
.text:0000000000005044                 lea     rax, default_quoting_options
.text:000000000000504B                 push    r13
.text:000000000000504D                 push    r12
.text:000000000000504F                 mov     r12, rdx
.text:0000000000005052                 push    rbp
.text:0000000000005053                 push    rbx
.text:0000000000005054                 mov     rbx, rcx
.text:0000000000005057                 mov     r14, rdi
.text:000000000000505A                 mov     r15, rsi
.text:000000000000505D                 sub     rsp, 38h
.text:0000000000005061                 test    rcx, rcx
.text:0000000000005064                 cmovz   rbx, rax
.text:0000000000005068                 xor     ebp, ebp
.text:000000000000506A                 call    ___errno_location
.text:000000000000506F                 test    r12, r12
.text:0000000000005072                 mov     r13, rax
.text:0000000000005075                 mov     eax, [rax]
.text:0000000000005077                 setz    bpl
.text:000000000000507B                 or      ebp, [rbx+4]
.text:000000000000507E                 lea     r10, [rbx+8]
.text:0000000000005082                 sub     rsp, 8
.text:0000000000005086                 mov     r8d, [rbx]
.text:0000000000005089                 mov     rcx, r15
.text:000000000000508C                 mov     [rsp+70h+var_5C], eax
.text:0000000000005090                 push    qword ptr [rbx+30h]
.text:0000000000005093                 mov     rdx, r14
.text:0000000000005096                 push    qword ptr [rbx+28h]
.text:0000000000005099                 push    r10
.text:000000000000509B                 xor     esi, esi
.text:000000000000509D                 mov     r9d, ebp
.text:00000000000050A0                 xor     edi, edi
.text:00000000000050A2                 mov     [rsp+88h+var_48], r10
.text:00000000000050A7                 call    quotearg_buffer_restyled
.text:00000000000050AC                 lea     rsi, [rax+1]
.text:00000000000050B0                 mov     [rsp+88h+var_40], rax
.text:00000000000050B5                 add     rsp, 20h
.text:00000000000050B9                 mov     rdi, rsi
.text:00000000000050BC                 mov     [rsp+68h+var_50], rsi
.text:00000000000050C1                 call    xmalloc
.text:00000000000050C6                 mov     [rsp+68h+var_58], rax
.text:00000000000050CB                 sub     rsp, 8
.text:00000000000050CF                 push    qword ptr [rbx+30h]
.text:00000000000050D2                 push    qword ptr [rbx+28h]
.text:00000000000050D5                 mov     r10, [rsp+80h+var_48]
.text:00000000000050DA                 mov     r9d, ebp
.text:00000000000050DD                 mov     r8d, [rbx]
.text:00000000000050E0                 mov     rcx, r15
.text:00000000000050E3                 mov     rdx, r14
.text:00000000000050E6                 mov     rdi, rax
.text:00000000000050E9                 push    r10
.text:00000000000050EB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000050F0                 call    quotearg_buffer_restyled
.text:00000000000050F5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000050F9                 add     rsp, 20h
.text:00000000000050FD                 test    r12, r12
.text:0000000000005100                 mov     [r13+0], eax
.text:0000000000005104                 jz      short loc_510F
.text:0000000000005106                 mov     r11, [rsp+68h+var_40]
.text:000000000000510B                 mov     [r12], r11
.text:000000000000510F
.text:000000000000510F loc_510F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000510F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005114                 add     rsp, 38h
.text:0000000000005118                 pop     rbx
.text:0000000000005119                 pop     rbp
.text:000000000000511A                 pop     r12
.text:000000000000511C                 pop     r13
.text:000000000000511E                 pop     r14
.text:0000000000005120                 pop     r15
.text:0000000000005122                 retn
.text:0000000000005122 ; } // starts at 5040
.text:0000000000005122 quotearg_alloc_mem endp
.text:0000000000005122
.text:0000000000005122 ; ---------------------------------------------------------------------------
.text:0000000000005123                 align 10h
.text:0000000000005130
.text:0000000000005130 ; =============== S U B R O U T I N E =======================================
.text:0000000000005130
.text:0000000000005130
.text:0000000000005130                 public quotearg_alloc
.text:0000000000005130 quotearg_alloc  proc near
.text:0000000000005130 ; __unwind {
.text:0000000000005130                 mov     rcx, rdx
.text:0000000000005133                 xor     edx, edx
.text:0000000000005135                 jmp     quotearg_alloc_mem
.text:0000000000005135 ; } // starts at 5130
.text:0000000000005135 quotearg_alloc  endp
.text:0000000000005135
.text:0000000000005135 ; ---------------------------------------------------------------------------
.text:000000000000513A                 align 20h
.text:0000000000005140
.text:0000000000005140 ; =============== S U B R O U T I N E =======================================
.text:0000000000005140
.text:0000000000005140 ; Attributes: info_from_lumina
.text:0000000000005140
.text:0000000000005140 ; void __cdecl quotearg_free()
.text:0000000000005140                 public quotearg_free
.text:0000000000005140 quotearg_free   proc near
.text:0000000000005140 ; __unwind {
.text:0000000000005140                 mov     eax, cs:nslots
.text:0000000000005146                 push    r12
.text:0000000000005148                 mov     r12, cs:slotvec
.text:000000000000514F                 push    rbp
.text:0000000000005150                 push    rbx
.text:0000000000005151                 cmp     eax, 1
.text:0000000000005154                 jle     short loc_5181
.text:0000000000005156                 sub     eax, 2
.text:0000000000005159                 lea     rbx, [r12+18h]
.text:000000000000515E                 shl     rax, 4
.text:0000000000005162                 lea     rbp, [r12+rax+28h]
.text:0000000000005167                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005170
.text:0000000000005170 loc_5170:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005170                 mov     rdi, [rbx]      ; ptr
.text:0000000000005173                 add     rbx, 10h
.text:0000000000005177                 call    _free
.text:000000000000517C                 cmp     rbx, rbp
.text:000000000000517F                 jnz     short loc_5170
.text:0000000000005181
.text:0000000000005181 loc_5181:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005181                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005186                 lea     rbx, slot0
.text:000000000000518D                 cmp     rdi, rbx
.text:0000000000005190                 jz      short loc_51A9
.text:0000000000005192                 call    _free
.text:0000000000005197                 mov     cs:slotvec0, 100h
.text:00000000000051A2                 mov     cs:off_209098, rbx
.text:00000000000051A9
.text:00000000000051A9 loc_51A9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000051A9                 lea     rbx, slotvec0
.text:00000000000051B0                 cmp     r12, rbx
.text:00000000000051B3                 jz      short loc_51C4
.text:00000000000051B5                 mov     rdi, r12        ; ptr
.text:00000000000051B8                 call    _free
.text:00000000000051BD                 mov     cs:slotvec, rbx
.text:00000000000051C4
.text:00000000000051C4 loc_51C4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000051C4                 pop     rbx
.text:00000000000051C5                 mov     cs:nslots, 1
.text:00000000000051CF                 pop     rbp
.text:00000000000051D0                 pop     r12
.text:00000000000051D2                 retn
.text:00000000000051D2 ; } // starts at 5140
.text:00000000000051D2 quotearg_free   endp
.text:00000000000051D2
.text:00000000000051D2 ; ---------------------------------------------------------------------------
.text:00000000000051D3                 align 20h
.text:00000000000051E0
.text:00000000000051E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051E0
.text:00000000000051E0
.text:00000000000051E0                 public quotearg_n
.text:00000000000051E0 quotearg_n      proc near
.text:00000000000051E0 ; __unwind {
.text:00000000000051E0                 lea     rcx, default_quoting_options
.text:00000000000051E7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000051EE                 jmp     quotearg_n_options
.text:00000000000051EE ; } // starts at 51E0
.text:00000000000051EE quotearg_n      endp
.text:00000000000051EE
.text:00000000000051EE ; ---------------------------------------------------------------------------
.text:00000000000051F3                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200
.text:0000000000005200                 public quotearg_n_mem
.text:0000000000005200 quotearg_n_mem  proc near
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 lea     rcx, default_quoting_options
.text:0000000000005207                 jmp     quotearg_n_options
.text:0000000000005207 ; } // starts at 5200
.text:0000000000005207 quotearg_n_mem  endp
.text:0000000000005207
.text:0000000000005207 ; ---------------------------------------------------------------------------
.text:000000000000520C                 align 10h
.text:0000000000005210
.text:0000000000005210 ; =============== S U B R O U T I N E =======================================
.text:0000000000005210
.text:0000000000005210
.text:0000000000005210                 public quotearg
.text:0000000000005210 quotearg        proc near
.text:0000000000005210 ; __unwind {
.text:0000000000005210                 lea     rcx, default_quoting_options
.text:0000000000005217                 mov     rsi, rdi
.text:000000000000521A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005221                 xor     edi, edi
.text:0000000000005223                 jmp     quotearg_n_options
.text:0000000000005223 ; } // starts at 5210
.text:0000000000005223 quotearg        endp
.text:0000000000005223
.text:0000000000005223 ; ---------------------------------------------------------------------------
.text:0000000000005228                 align 10h
.text:0000000000005230
.text:0000000000005230 ; =============== S U B R O U T I N E =======================================
.text:0000000000005230
.text:0000000000005230
.text:0000000000005230                 public quotearg_mem
.text:0000000000005230 quotearg_mem    proc near
.text:0000000000005230 ; __unwind {
.text:0000000000005230                 lea     rcx, default_quoting_options
.text:0000000000005237                 mov     rdx, rsi
.text:000000000000523A                 mov     rsi, rdi
.text:000000000000523D                 xor     edi, edi
.text:000000000000523F                 jmp     quotearg_n_options
.text:000000000000523F ; } // starts at 5230
.text:000000000000523F quotearg_mem    endp
.text:000000000000523F
.text:000000000000523F ; ---------------------------------------------------------------------------
.text:0000000000005244                 align 10h
.text:0000000000005250
.text:0000000000005250 ; =============== S U B R O U T I N E =======================================
.text:0000000000005250
.text:0000000000005250 ; Attributes: info_from_lumina
.text:0000000000005250
.text:0000000000005250 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005250                 public quotearg_n_style
.text:0000000000005250 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000005250
.text:0000000000005250 var_48          = dword ptr -48h
.text:0000000000005250 var_44          = qword ptr -44h
.text:0000000000005250 var_3C          = qword ptr -3Ch
.text:0000000000005250 var_34          = qword ptr -34h
.text:0000000000005250 var_2C          = qword ptr -2Ch
.text:0000000000005250 var_24          = qword ptr -24h
.text:0000000000005250 var_1C          = qword ptr -1Ch
.text:0000000000005250 var_14          = dword ptr -14h
.text:0000000000005250 var_10          = qword ptr -10h
.text:0000000000005250
.text:0000000000005250 ; __unwind {
.text:0000000000005250                 sub     rsp, 48h
.text:0000000000005254                 mov     rax, rdx
.text:0000000000005257                 mov     rdx, fs:28h
.text:0000000000005260                 mov     [rsp+48h+var_10], rdx
.text:0000000000005265                 xor     edx, edx
.text:0000000000005267                 cmp     esi, 0Ah
.text:000000000000526A                 jz      short loc_52D4
.text:000000000000526C                 mov     [rsp+48h+var_48], esi
.text:000000000000526F                 mov     rcx, rsp
.text:0000000000005272                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005279                 mov     rsi, rax
.text:000000000000527C                 mov     [rsp+48h+var_44], 0
.text:0000000000005285                 mov     [rsp+48h+var_3C], 0
.text:000000000000528E                 mov     [rsp+48h+var_34], 0
.text:0000000000005297                 mov     [rsp+48h+var_2C], 0
.text:00000000000052A0                 mov     [rsp+48h+var_24], 0
.text:00000000000052A9                 mov     [rsp+48h+var_1C], 0
.text:00000000000052B2                 mov     [rsp+48h+var_14], 0
.text:00000000000052BA                 call    quotearg_n_options
.text:00000000000052BF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000052C4                 xor     rcx, fs:28h
.text:00000000000052CD                 jnz     short loc_52D9
.text:00000000000052CF                 add     rsp, 48h
.text:00000000000052D3                 retn
.text:00000000000052D4 ; ---------------------------------------------------------------------------
.text:00000000000052D4
.text:00000000000052D4 loc_52D4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000052D4                 call    _abort
.text:00000000000052D9 ; ---------------------------------------------------------------------------
.text:00000000000052D9
.text:00000000000052D9 loc_52D9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000052D9                 call    ___stack_chk_fail
.text:00000000000052D9 ; } // starts at 5250
.text:00000000000052D9 quotearg_n_style endp
.text:00000000000052D9
.text:00000000000052D9 ; ---------------------------------------------------------------------------
.text:00000000000052DE                 align 20h
.text:00000000000052E0
.text:00000000000052E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052E0
.text:00000000000052E0 ; Attributes: info_from_lumina
.text:00000000000052E0
.text:00000000000052E0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000052E0                 public quotearg_n_style_mem
.text:00000000000052E0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000052E0
.text:00000000000052E0 var_48          = dword ptr -48h
.text:00000000000052E0 var_44          = qword ptr -44h
.text:00000000000052E0 var_3C          = qword ptr -3Ch
.text:00000000000052E0 var_34          = qword ptr -34h
.text:00000000000052E0 var_2C          = qword ptr -2Ch
.text:00000000000052E0 var_24          = qword ptr -24h
.text:00000000000052E0 var_1C          = qword ptr -1Ch
.text:00000000000052E0 var_14          = dword ptr -14h
.text:00000000000052E0 var_10          = qword ptr -10h
.text:00000000000052E0
.text:00000000000052E0 ; __unwind {
.text:00000000000052E0                 sub     rsp, 48h
.text:00000000000052E4                 mov     rax, rdx
.text:00000000000052E7                 mov     rdx, rcx
.text:00000000000052EA                 mov     rcx, fs:28h
.text:00000000000052F3                 mov     [rsp+48h+var_10], rcx
.text:00000000000052F8                 xor     ecx, ecx
.text:00000000000052FA                 cmp     esi, 0Ah
.text:00000000000052FD                 jz      short loc_5360
.text:00000000000052FF                 mov     [rsp+48h+var_48], esi
.text:0000000000005302                 mov     rcx, rsp
.text:0000000000005305                 mov     rsi, rax
.text:0000000000005308                 mov     [rsp+48h+var_44], 0
.text:0000000000005311                 mov     [rsp+48h+var_3C], 0
.text:000000000000531A                 mov     [rsp+48h+var_34], 0
.text:0000000000005323                 mov     [rsp+48h+var_2C], 0
.text:000000000000532C                 mov     [rsp+48h+var_24], 0
.text:0000000000005335                 mov     [rsp+48h+var_1C], 0
.text:000000000000533E                 mov     [rsp+48h+var_14], 0
.text:0000000000005346                 call    quotearg_n_options
.text:000000000000534B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005350                 xor     rdx, fs:28h
.text:0000000000005359                 jnz     short loc_5365
.text:000000000000535B                 add     rsp, 48h
.text:000000000000535F                 retn
.text:0000000000005360 ; ---------------------------------------------------------------------------
.text:0000000000005360
.text:0000000000005360 loc_5360:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005360                 call    _abort
.text:0000000000005365 ; ---------------------------------------------------------------------------
.text:0000000000005365
.text:0000000000005365 loc_5365:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005365                 call    ___stack_chk_fail
.text:0000000000005365 ; } // starts at 52E0
.text:0000000000005365 quotearg_n_style_mem endp
.text:0000000000005365
.text:0000000000005365 ; ---------------------------------------------------------------------------
.text:000000000000536A                 align 10h
.text:0000000000005370
.text:0000000000005370 ; =============== S U B R O U T I N E =======================================
.text:0000000000005370
.text:0000000000005370
.text:0000000000005370                 public quotearg_style
.text:0000000000005370 quotearg_style  proc near
.text:0000000000005370 ; __unwind {
.text:0000000000005370                 mov     rdx, rsi
.text:0000000000005373                 mov     esi, edi
.text:0000000000005375                 xor     edi, edi
.text:0000000000005377                 jmp     quotearg_n_style
.text:0000000000005377 ; } // starts at 5370
.text:0000000000005377 quotearg_style  endp
.text:0000000000005377
.text:0000000000005377 ; ---------------------------------------------------------------------------
.text:000000000000537C                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380
.text:0000000000005380                 public quotearg_style_mem
.text:0000000000005380 quotearg_style_mem proc near
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 mov     rcx, rdx
.text:0000000000005383                 mov     rdx, rsi
.text:0000000000005386                 mov     esi, edi
.text:0000000000005388                 xor     edi, edi
.text:000000000000538A                 jmp     quotearg_n_style_mem
.text:000000000000538A ; } // starts at 5380
.text:000000000000538A quotearg_style_mem endp
.text:000000000000538A
.text:000000000000538A ; ---------------------------------------------------------------------------
.text:000000000000538F                 align 10h
.text:0000000000005390
.text:0000000000005390 ; =============== S U B R O U T I N E =======================================
.text:0000000000005390
.text:0000000000005390 ; Attributes: info_from_lumina
.text:0000000000005390
.text:0000000000005390 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005390                 public quotearg_char_mem
.text:0000000000005390 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005390                                         ; quotearg_colon+C↓j ...
.text:0000000000005390
.text:0000000000005390 var_48          = xmmword ptr -48h
.text:0000000000005390 var_38          = xmmword ptr -38h
.text:0000000000005390 var_28          = xmmword ptr -28h
.text:0000000000005390 var_18          = qword ptr -18h
.text:0000000000005390 var_10          = qword ptr -10h
.text:0000000000005390
.text:0000000000005390 ; __unwind {
.text:0000000000005390                 sub     rsp, 48h
.text:0000000000005394                 mov     ecx, edx
.text:0000000000005396                 mov     rax, fs:28h
.text:000000000000539F                 mov     [rsp+48h+var_10], rax
.text:00000000000053A4                 xor     eax, eax
.text:00000000000053A6                 mov     rax, cs:qword_209290
.text:00000000000053AD                 mov     r8, rsp
.text:00000000000053B0                 and     ecx, 1Fh
.text:00000000000053B3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000053BB                 mov     [rsp+48h+var_18], rax
.text:00000000000053C0                 mov     eax, edx
.text:00000000000053C2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000053C6                 shr     al, 5
.text:00000000000053C9                 movzx   eax, al
.text:00000000000053CC                 lea     r9, [r8+rax*4+8]
.text:00000000000053D1                 movdqa  xmm0, cs:xmmword_209270
.text:00000000000053D9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000053DE                 movdqa  xmm0, cs:xmmword_209280
.text:00000000000053E6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000053EB                 mov     edx, [r9]
.text:00000000000053EE                 mov     eax, edx
.text:00000000000053F0                 shr     eax, cl
.text:00000000000053F2                 not     eax
.text:00000000000053F4                 and     eax, 1
.text:00000000000053F7                 shl     eax, cl
.text:00000000000053F9                 mov     rcx, r8
.text:00000000000053FC                 xor     eax, edx
.text:00000000000053FE                 mov     rdx, rsi
.text:0000000000005401                 mov     rsi, rdi
.text:0000000000005404                 mov     [r9], eax
.text:0000000000005407                 xor     edi, edi
.text:0000000000005409                 call    quotearg_n_options
.text:000000000000540E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005413                 xor     rsi, fs:28h
.text:000000000000541C                 jnz     short loc_5423
.text:000000000000541E                 add     rsp, 48h
.text:0000000000005422                 retn
.text:0000000000005423 ; ---------------------------------------------------------------------------
.text:0000000000005423
.text:0000000000005423 loc_5423:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005423                 call    ___stack_chk_fail
.text:0000000000005423 ; } // starts at 5390
.text:0000000000005423 quotearg_char_mem endp
.text:0000000000005423
.text:0000000000005423 ; ---------------------------------------------------------------------------
.text:0000000000005428                 align 10h
.text:0000000000005430
.text:0000000000005430 ; =============== S U B R O U T I N E =======================================
.text:0000000000005430
.text:0000000000005430
.text:0000000000005430                 public quotearg_char
.text:0000000000005430 quotearg_char   proc near
.text:0000000000005430 ; __unwind {
.text:0000000000005430                 movsx   edx, sil
.text:0000000000005434                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000543B                 jmp     quotearg_char_mem
.text:000000000000543B ; } // starts at 5430
.text:000000000000543B quotearg_char   endp
.text:000000000000543B
.text:0000000000005440
.text:0000000000005440 ; =============== S U B R O U T I N E =======================================
.text:0000000000005440
.text:0000000000005440
.text:0000000000005440                 public quotearg_colon
.text:0000000000005440 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005440 ; __unwind {
.text:0000000000005440                 mov     edx, 3Ah ; ':'
.text:0000000000005445                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000544C                 jmp     quotearg_char_mem
.text:000000000000544C ; } // starts at 5440
.text:000000000000544C quotearg_colon  endp
.text:000000000000544C
.text:000000000000544C ; ---------------------------------------------------------------------------
.text:0000000000005451                 align 20h
.text:0000000000005460
.text:0000000000005460 ; =============== S U B R O U T I N E =======================================
.text:0000000000005460
.text:0000000000005460
.text:0000000000005460                 public quotearg_colon_mem
.text:0000000000005460 quotearg_colon_mem proc near
.text:0000000000005460 ; __unwind {
.text:0000000000005460                 mov     edx, 3Ah ; ':'
.text:0000000000005465                 jmp     quotearg_char_mem
.text:0000000000005465 ; } // starts at 5460
.text:0000000000005465 quotearg_colon_mem endp
.text:0000000000005465
.text:0000000000005465 ; ---------------------------------------------------------------------------
.text:000000000000546A                 align 10h
.text:0000000000005470
.text:0000000000005470 ; =============== S U B R O U T I N E =======================================
.text:0000000000005470
.text:0000000000005470 ; Attributes: info_from_lumina
.text:0000000000005470
.text:0000000000005470 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005470                 public quotearg_n_style_colon
.text:0000000000005470 quotearg_n_style_colon proc near        ; CODE XREF: cut_file+557↑p
.text:0000000000005470
.text:0000000000005470 var_48          = dword ptr -48h
.text:0000000000005470 var_44          = qword ptr -44h
.text:0000000000005470 var_3C          = qword ptr -3Ch
.text:0000000000005470 var_34          = qword ptr -34h
.text:0000000000005470 var_2C          = qword ptr -2Ch
.text:0000000000005470 var_24          = qword ptr -24h
.text:0000000000005470 var_1C          = qword ptr -1Ch
.text:0000000000005470 var_14          = dword ptr -14h
.text:0000000000005470 var_10          = qword ptr -10h
.text:0000000000005470
.text:0000000000005470 ; __unwind {
.text:0000000000005470                 sub     rsp, 48h
.text:0000000000005474                 mov     rax, rdx
.text:0000000000005477                 mov     rdx, fs:28h
.text:0000000000005480                 mov     [rsp+48h+var_10], rdx
.text:0000000000005485                 xor     edx, edx
.text:0000000000005487                 cmp     esi, 0Ah
.text:000000000000548A                 jz      short loc_54F4
.text:000000000000548C                 mov     [rsp+48h+var_48], esi
.text:000000000000548F                 mov     rcx, rsp
.text:0000000000005492                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005499                 mov     rsi, rax
.text:000000000000549C                 mov     [rsp+48h+var_44], 0
.text:00000000000054A5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000054AE                 mov     [rsp+48h+var_34], 0
.text:00000000000054B7                 mov     [rsp+48h+var_2C], 0
.text:00000000000054C0                 mov     [rsp+48h+var_24], 0
.text:00000000000054C9                 mov     [rsp+48h+var_1C], 0
.text:00000000000054D2                 mov     [rsp+48h+var_14], 0
.text:00000000000054DA                 call    quotearg_n_options
.text:00000000000054DF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000054E4                 xor     rcx, fs:28h
.text:00000000000054ED                 jnz     short loc_54F9
.text:00000000000054EF                 add     rsp, 48h
.text:00000000000054F3                 retn
.text:00000000000054F4 ; ---------------------------------------------------------------------------
.text:00000000000054F4
.text:00000000000054F4 loc_54F4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000054F4                 call    _abort
.text:00000000000054F9 ; ---------------------------------------------------------------------------
.text:00000000000054F9
.text:00000000000054F9 loc_54F9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000054F9                 call    ___stack_chk_fail
.text:00000000000054F9 ; } // starts at 5470
.text:00000000000054F9 quotearg_n_style_colon endp
.text:00000000000054F9
.text:00000000000054F9 ; ---------------------------------------------------------------------------
.text:00000000000054FE                 align 20h
.text:0000000000005500
.text:0000000000005500 ; =============== S U B R O U T I N E =======================================
.text:0000000000005500
.text:0000000000005500 ; Attributes: info_from_lumina
.text:0000000000005500
.text:0000000000005500 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005500                 public quotearg_n_custom_mem
.text:0000000000005500 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005500                                         ; quotearg_custom+12↓j ...
.text:0000000000005500
.text:0000000000005500 var_48          = xmmword ptr -48h
.text:0000000000005500 var_38          = xmmword ptr -38h
.text:0000000000005500 var_28          = xmmword ptr -28h
.text:0000000000005500 var_18          = qword ptr -18h
.text:0000000000005500 var_10          = qword ptr -10h
.text:0000000000005500
.text:0000000000005500 ; __unwind {
.text:0000000000005500                 sub     rsp, 48h
.text:0000000000005504                 mov     r9, rcx
.text:0000000000005507                 mov     rcx, cs:qword_209290
.text:000000000000550E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005516                 mov     rax, fs:28h
.text:000000000000551F                 mov     [rsp+48h+var_10], rax
.text:0000000000005524                 xor     eax, eax
.text:0000000000005526                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000552A                 test    rsi, rsi
.text:000000000000552D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005532                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005539                 movdqa  xmm0, cs:xmmword_209270
.text:0000000000005541                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005546                 movdqa  xmm0, cs:xmmword_209280
.text:000000000000554E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005553                 jz      short loc_5587
.text:0000000000005555                 test    rdx, rdx
.text:0000000000005558                 jz      short loc_5587
.text:000000000000555A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000555F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005564                 mov     rcx, rsp
.text:0000000000005567                 mov     rdx, r8
.text:000000000000556A                 mov     rsi, r9
.text:000000000000556D                 call    quotearg_n_options
.text:0000000000005572                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005577                 xor     rdi, fs:28h
.text:0000000000005580                 jnz     short loc_558C
.text:0000000000005582                 add     rsp, 48h
.text:0000000000005586                 retn
.text:0000000000005587 ; ---------------------------------------------------------------------------
.text:0000000000005587
.text:0000000000005587 loc_5587:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005587                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005587                 call    _abort
.text:000000000000558C ; ---------------------------------------------------------------------------
.text:000000000000558C
.text:000000000000558C loc_558C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000558C                 call    ___stack_chk_fail
.text:000000000000558C ; } // starts at 5500
.text:000000000000558C quotearg_n_custom_mem endp
.text:000000000000558C
.text:000000000000558C ; ---------------------------------------------------------------------------
.text:0000000000005591                 align 20h
.text:00000000000055A0
.text:00000000000055A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055A0
.text:00000000000055A0
.text:00000000000055A0                 public quotearg_n_custom
.text:00000000000055A0 quotearg_n_custom proc near
.text:00000000000055A0 ; __unwind {
.text:00000000000055A0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000055A7                 jmp     quotearg_n_custom_mem
.text:00000000000055A7 ; } // starts at 55A0
.text:00000000000055A7 quotearg_n_custom endp
.text:00000000000055A7
.text:00000000000055A7 ; ---------------------------------------------------------------------------
.text:00000000000055AC                 align 10h
.text:00000000000055B0
.text:00000000000055B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055B0
.text:00000000000055B0
.text:00000000000055B0                 public quotearg_custom
.text:00000000000055B0 quotearg_custom proc near
.text:00000000000055B0 ; __unwind {
.text:00000000000055B0                 mov     rcx, rdx
.text:00000000000055B3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000055BA                 mov     rdx, rsi
.text:00000000000055BD                 mov     rsi, rdi
.text:00000000000055C0                 xor     edi, edi
.text:00000000000055C2                 jmp     quotearg_n_custom_mem
.text:00000000000055C2 ; } // starts at 55B0
.text:00000000000055C2 quotearg_custom endp
.text:00000000000055C2
.text:00000000000055C2 ; ---------------------------------------------------------------------------
.text:00000000000055C7                 align 10h
.text:00000000000055D0
.text:00000000000055D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055D0
.text:00000000000055D0
.text:00000000000055D0                 public quotearg_custom_mem
.text:00000000000055D0 quotearg_custom_mem proc near
.text:00000000000055D0 ; __unwind {
.text:00000000000055D0                 mov     r8, rcx
.text:00000000000055D3                 mov     rcx, rdx
.text:00000000000055D6                 mov     rdx, rsi
.text:00000000000055D9                 mov     rsi, rdi
.text:00000000000055DC                 xor     edi, edi
.text:00000000000055DE                 jmp     quotearg_n_custom_mem
.text:00000000000055DE ; } // starts at 55D0
.text:00000000000055DE quotearg_custom_mem endp
.text:00000000000055DE
.text:00000000000055DE ; ---------------------------------------------------------------------------
.text:00000000000055E3                 align 10h
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0
.text:00000000000055F0                 public quote_n_mem
.text:00000000000055F0 quote_n_mem     proc near
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 lea     rcx, quote_quoting_options
.text:00000000000055F7                 jmp     quotearg_n_options
.text:00000000000055F7 ; } // starts at 55F0
.text:00000000000055F7 quote_n_mem     endp
.text:00000000000055F7
.text:00000000000055F7 ; ---------------------------------------------------------------------------
.text:00000000000055FC                 align 20h
.text:0000000000005600
.text:0000000000005600 ; =============== S U B R O U T I N E =======================================
.text:0000000000005600
.text:0000000000005600
.text:0000000000005600                 public quote_mem
.text:0000000000005600 quote_mem       proc near
.text:0000000000005600 ; __unwind {
.text:0000000000005600                 lea     rcx, quote_quoting_options
.text:0000000000005607                 mov     rdx, rsi
.text:000000000000560A                 mov     rsi, rdi
.text:000000000000560D                 xor     edi, edi
.text:000000000000560F                 jmp     quotearg_n_options
.text:000000000000560F ; } // starts at 5600
.text:000000000000560F quote_mem       endp
.text:000000000000560F
.text:000000000000560F ; ---------------------------------------------------------------------------
.text:0000000000005614                 align 20h
.text:0000000000005620
.text:0000000000005620 ; =============== S U B R O U T I N E =======================================
.text:0000000000005620
.text:0000000000005620
.text:0000000000005620                 public quote_n
.text:0000000000005620 quote_n         proc near
.text:0000000000005620 ; __unwind {
.text:0000000000005620                 lea     rcx, quote_quoting_options
.text:0000000000005627                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000562E                 jmp     quotearg_n_options
.text:000000000000562E ; } // starts at 5620
.text:000000000000562E quote_n         endp
.text:000000000000562E
.text:000000000000562E ; ---------------------------------------------------------------------------
.text:0000000000005633                 align 20h
.text:0000000000005640
.text:0000000000005640 ; =============== S U B R O U T I N E =======================================
.text:0000000000005640
.text:0000000000005640
.text:0000000000005640                 public quote
.text:0000000000005640 quote           proc near               ; CODE XREF: set_fields+4C4↑p
.text:0000000000005640                                         ; set_fields+55F↑p
.text:0000000000005640 ; __unwind {
.text:0000000000005640                 lea     rcx, quote_quoting_options
.text:0000000000005647                 mov     rsi, rdi
.text:000000000000564A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005651                 xor     edi, edi
.text:0000000000005653                 jmp     quotearg_n_options
.text:0000000000005653 ; } // starts at 5640
.text:0000000000005653 quote           endp
.text:0000000000005653
.text:0000000000005653 ; ---------------------------------------------------------------------------
.text:0000000000005658                 align 20h
.text:0000000000005660
.text:0000000000005660 ; =============== S U B R O U T I N E =======================================
.text:0000000000005660
.text:0000000000005660
.text:0000000000005660 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005660                 public version_etc_arn
.text:0000000000005660 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_5A9B↓j
.text:0000000000005660                                         ; version_etc_va:loc_5AEB↓p ...
.text:0000000000005660
.text:0000000000005660 var_58          = qword ptr -58h
.text:0000000000005660 var_50          = qword ptr -50h
.text:0000000000005660 var_48          = qword ptr -48h
.text:0000000000005660 var_40          = qword ptr -40h
.text:0000000000005660
.text:0000000000005660 ; __unwind {
.text:0000000000005660                 push    r15
.text:0000000000005662                 push    r14
.text:0000000000005664                 push    r13
.text:0000000000005666                 push    r12
.text:0000000000005668                 mov     r12, r9
.text:000000000000566B                 push    rbp
.text:000000000000566C                 push    rbx
.text:000000000000566D                 mov     rbp, rdi
.text:0000000000005670                 mov     rbx, r8
.text:0000000000005673                 sub     rsp, 28h
.text:0000000000005677                 test    rsi, rsi
.text:000000000000567A                 jz      loc_5798
.text:0000000000005680                 mov     r8, rdx
.text:0000000000005683                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000568A                 mov     r9, rcx
.text:000000000000568D                 xor     eax, eax
.text:000000000000568F                 mov     rcx, rsi
.text:0000000000005692                 mov     esi, 1
.text:0000000000005697                 call    ___fprintf_chk
.text:000000000000569C
.text:000000000000569C loc_569C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000569C                 lea     rsi, aC_0       ; "(C)"
.text:00000000000056A3                 xor     edi, edi        ; domainname
.text:00000000000056A5                 mov     edx, 5          ; category
.text:00000000000056AA                 call    _dcgettext
.text:00000000000056AF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000056B6                 mov     rcx, rax
.text:00000000000056B9                 mov     r8d, 7E3h
.text:00000000000056BF                 mov     esi, 1
.text:00000000000056C4                 mov     rdi, rbp
.text:00000000000056C7                 xor     eax, eax
.text:00000000000056C9                 call    ___fprintf_chk
.text:00000000000056CE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000056D5                 xor     edi, edi        ; domainname
.text:00000000000056D7                 mov     edx, 5          ; category
.text:00000000000056DC                 call    _dcgettext
.text:00000000000056E1                 mov     rsi, rbp        ; stream
.text:00000000000056E4                 mov     rdi, rax        ; s
.text:00000000000056E7                 call    _fputs_unlocked
.text:00000000000056EC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000056F0                 ja      def_5704        ; jumptable 0000000000005704 default case
.text:00000000000056F6                 lea     rdx, jpt_5704
.text:00000000000056FD                 movsxd  rax, ds:(jpt_5704 - 7848h)[rdx+r12*4]
.text:0000000000005701                 add     rax, rdx
.text:0000000000005704                 jmp     rax             ; switch jump
.text:0000000000005704 ; ---------------------------------------------------------------------------
.text:0000000000005706                 align 10h
.text:0000000000005710
.text:0000000000005710 loc_5710:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005710                                         ; DATA XREF: .rodata:jpt_5704↓o
.text:0000000000005710                 mov     r9, [rbx+38h]   ; jumptable 0000000000005704 case 8
.text:0000000000005714                 mov     rax, [rbx+10h]
.text:0000000000005718                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000571F                 mov     r8, [rbx+8]
.text:0000000000005723                 mov     edx, 5          ; category
.text:0000000000005728                 xor     edi, edi        ; domainname
.text:000000000000572A                 mov     r13, [rbx+30h]
.text:000000000000572E                 mov     r12, [rbx+28h]
.text:0000000000005732                 mov     [rsp+58h+var_48], r9
.text:0000000000005737                 mov     r15, [rbx+20h]
.text:000000000000573B                 mov     r14, [rbx+18h]
.text:000000000000573F                 mov     [rsp+58h+var_58], rax
.text:0000000000005743                 mov     [rsp+58h+var_50], r8
.text:0000000000005748                 mov     rbx, [rbx]
.text:000000000000574B                 call    _dcgettext
.text:0000000000005750                 sub     rsp, 8
.text:0000000000005754
.text:0000000000005754 loc_5754:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005754                 mov     r9, [rsp+60h+var_48]
.text:0000000000005759                 mov     rdx, rax
.text:000000000000575C                 mov     rcx, rbx
.text:000000000000575F                 mov     esi, 1
.text:0000000000005764                 mov     rdi, rbp
.text:0000000000005767                 xor     eax, eax
.text:0000000000005769                 push    r9
.text:000000000000576B                 push    r13
.text:000000000000576D                 push    r12
.text:000000000000576F                 push    r15
.text:0000000000005771                 push    r14
.text:0000000000005773                 mov     r9, [rsp+88h+var_58]
.text:0000000000005778                 mov     r8, [rsp+88h+var_50]
.text:000000000000577D                 call    ___fprintf_chk
.text:0000000000005782                 add     rsp, 30h
.text:0000000000005786
.text:0000000000005786 loc_5786:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005786                                         ; DATA XREF: .rodata:jpt_5704↓o
.text:0000000000005786                 add     rsp, 28h        ; jumptable 0000000000005704 case 0
.text:000000000000578A                 pop     rbx
.text:000000000000578B                 pop     rbp
.text:000000000000578C                 pop     r12
.text:000000000000578E                 pop     r13
.text:0000000000005790                 pop     r14
.text:0000000000005792                 pop     r15
.text:0000000000005794                 retn
.text:0000000000005794 ; ---------------------------------------------------------------------------
.text:0000000000005795                 align 8
.text:0000000000005798
.text:0000000000005798 loc_5798:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005798                 mov     r8, rcx
.text:000000000000579B                 mov     rcx, rdx
.text:000000000000579E                 lea     rdx, aSS        ; "%s %s\n"
.text:00000000000057A5                 mov     esi, 1
.text:00000000000057AA                 xor     eax, eax
.text:00000000000057AC                 call    ___fprintf_chk
.text:00000000000057B1                 jmp     loc_569C
.text:00000000000057B1 ; ---------------------------------------------------------------------------
.text:00000000000057B6                 align 20h
.text:00000000000057C0
.text:00000000000057C0 loc_57C0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000057C0                                         ; DATA XREF: .rodata:jpt_5704↓o
.text:00000000000057C0                 mov     r10, [rbx+40h]  ; jumptable 0000000000005704 case 9
.text:00000000000057C4                 mov     r9, [rbx+38h]
.text:00000000000057C8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000057CF                 mov     rax, [rbx+10h]
.text:00000000000057D3                 mov     r8, [rbx+8]
.text:00000000000057D7                 mov     edx, 5          ; category
.text:00000000000057DC                 mov     r13, [rbx+30h]
.text:00000000000057E0                 mov     r12, [rbx+28h]
.text:00000000000057E4                 mov     r15, [rbx+20h]
.text:00000000000057E8                 mov     r14, [rbx+18h]
.text:00000000000057EC                 mov     rbx, [rbx]
.text:00000000000057EF                 mov     [rsp+58h+var_40], r10
.text:00000000000057F4                 mov     [rsp+58h+var_48], r9
.text:00000000000057F9                 mov     [rsp+58h+var_58], rax
.text:00000000000057FD                 mov     [rsp+58h+var_50], r8
.text:0000000000005802
.text:0000000000005802 loc_5802:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005802                 xor     edi, edi        ; domainname
.text:0000000000005804                 call    _dcgettext
.text:0000000000005809                 mov     r10, [rsp+58h+var_40]
.text:000000000000580E                 push    r10
.text:0000000000005810                 jmp     loc_5754
.text:0000000000005810 ; ---------------------------------------------------------------------------
.text:0000000000005815                 align 8
.text:0000000000005818
.text:0000000000005818 loc_5818:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005818                                         ; DATA XREF: .rodata:jpt_5704↓o
.text:0000000000005818                 mov     rbx, [rbx]      ; jumptable 0000000000005704 case 1
.text:000000000000581B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005822                 mov     edx, 5          ; category
.text:0000000000005827                 xor     edi, edi        ; domainname
.text:0000000000005829                 call    _dcgettext
.text:000000000000582E                 add     rsp, 28h
.text:0000000000005832                 mov     rcx, rbx
.text:0000000000005835                 mov     rdi, rbp
.text:0000000000005838                 pop     rbx
.text:0000000000005839                 pop     rbp
.text:000000000000583A                 pop     r12
.text:000000000000583C                 pop     r13
.text:000000000000583E                 pop     r14
.text:0000000000005840                 pop     r15
.text:0000000000005842                 mov     rdx, rax
.text:0000000000005845                 mov     esi, 1
.text:000000000000584A                 xor     eax, eax
.text:000000000000584C                 jmp     ___fprintf_chk
.text:000000000000584C ; ---------------------------------------------------------------------------
.text:0000000000005851                 align 8
.text:0000000000005858
.text:0000000000005858 loc_5858:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005858                                         ; DATA XREF: .rodata:jpt_5704↓o
.text:0000000000005858                 mov     r12, [rbx+8]    ; jumptable 0000000000005704 case 2
.text:000000000000585C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005863                 mov     rbx, [rbx]
.text:0000000000005866                 mov     edx, 5          ; category
.text:000000000000586B                 xor     edi, edi        ; domainname
.text:000000000000586D                 call    _dcgettext
.text:0000000000005872                 add     rsp, 28h
.text:0000000000005876                 mov     r8, r12
.text:0000000000005879                 mov     rcx, rbx
.text:000000000000587C                 mov     rdi, rbp
.text:000000000000587F                 mov     rdx, rax
.text:0000000000005882                 mov     esi, 1
.text:0000000000005887                 pop     rbx
.text:0000000000005888                 pop     rbp
.text:0000000000005889                 pop     r12
.text:000000000000588B                 pop     r13
.text:000000000000588D                 pop     r14
.text:000000000000588F                 pop     r15
.text:0000000000005891                 xor     eax, eax
.text:0000000000005893                 jmp     ___fprintf_chk
.text:0000000000005893 ; ---------------------------------------------------------------------------
.text:0000000000005898                 align 20h
.text:00000000000058A0
.text:00000000000058A0 loc_58A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000058A0                                         ; DATA XREF: .rodata:jpt_5704↓o
.text:00000000000058A0                 mov     r13, [rbx+10h]  ; jumptable 0000000000005704 case 3
.text:00000000000058A4                 mov     r12, [rbx+8]
.text:00000000000058A8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000058AF                 mov     rbx, [rbx]
.text:00000000000058B2                 mov     edx, 5          ; category
.text:00000000000058B7                 xor     edi, edi        ; domainname
.text:00000000000058B9                 call    _dcgettext
.text:00000000000058BE                 add     rsp, 28h
.text:00000000000058C2                 mov     r9, r13
.text:00000000000058C5                 mov     r8, r12
.text:00000000000058C8                 mov     rcx, rbx
.text:00000000000058CB                 mov     rdi, rbp
.text:00000000000058CE                 mov     rdx, rax
.text:00000000000058D1                 pop     rbx
.text:00000000000058D2                 pop     rbp
.text:00000000000058D3                 pop     r12
.text:00000000000058D5                 pop     r13
.text:00000000000058D7                 pop     r14
.text:00000000000058D9                 pop     r15
.text:00000000000058DB                 mov     esi, 1
.text:00000000000058E0                 xor     eax, eax
.text:00000000000058E2                 jmp     ___fprintf_chk
.text:00000000000058E2 ; ---------------------------------------------------------------------------
.text:00000000000058E7                 align 10h
.text:00000000000058F0
.text:00000000000058F0 loc_58F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000058F0                                         ; DATA XREF: .rodata:jpt_5704↓o
.text:00000000000058F0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005704 case 4
.text:00000000000058F7                 mov     edx, 5          ; category
.text:00000000000058FC                 xor     edi, edi        ; domainname
.text:00000000000058FE                 mov     r14, [rbx+18h]
.text:0000000000005902                 mov     r13, [rbx+10h]
.text:0000000000005906                 mov     r12, [rbx+8]
.text:000000000000590A                 mov     rbx, [rbx]
.text:000000000000590D                 call    _dcgettext
.text:0000000000005912                 sub     rsp, 8
.text:0000000000005916
.text:0000000000005916 loc_5916:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005916                 push    r14
.text:0000000000005918                 mov     rdx, rax
.text:000000000000591B                 mov     r9, r13
.text:000000000000591E                 mov     r8, r12
.text:0000000000005921                 mov     rcx, rbx
.text:0000000000005924                 mov     rdi, rbp
.text:0000000000005927                 mov     esi, 1
.text:000000000000592C                 xor     eax, eax
.text:000000000000592E                 call    ___fprintf_chk
.text:0000000000005933                 pop     rax
.text:0000000000005934                 pop     rdx
.text:0000000000005935                 add     rsp, 28h
.text:0000000000005939                 pop     rbx
.text:000000000000593A                 pop     rbp
.text:000000000000593B                 pop     r12
.text:000000000000593D                 pop     r13
.text:000000000000593F                 pop     r14
.text:0000000000005941                 pop     r15
.text:0000000000005943                 retn
.text:0000000000005943 ; ---------------------------------------------------------------------------
.text:0000000000005944                 align 8
.text:0000000000005948
.text:0000000000005948 loc_5948:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005948                                         ; DATA XREF: .rodata:jpt_5704↓o
.text:0000000000005948                 mov     r15, [rbx+20h]  ; jumptable 0000000000005704 case 5
.text:000000000000594C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005953                 mov     edx, 5          ; category
.text:0000000000005958                 xor     edi, edi        ; domainname
.text:000000000000595A                 mov     r14, [rbx+18h]
.text:000000000000595E                 mov     r13, [rbx+10h]
.text:0000000000005962                 mov     r12, [rbx+8]
.text:0000000000005966                 mov     rbx, [rbx]
.text:0000000000005969                 call    _dcgettext
.text:000000000000596E                 push    r15
.text:0000000000005970                 jmp     short loc_5916
.text:0000000000005970 ; ---------------------------------------------------------------------------
.text:0000000000005972                 align 8
.text:0000000000005978
.text:0000000000005978 loc_5978:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005978                                         ; DATA XREF: .rodata:jpt_5704↓o
.text:0000000000005978                 mov     r8, [rbx+8]     ; jumptable 0000000000005704 case 6
.text:000000000000597C                 mov     r12, [rbx+28h]
.text:0000000000005980                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005987                 mov     r15, [rbx+20h]
.text:000000000000598B                 mov     r14, [rbx+18h]
.text:000000000000598F                 mov     edx, 5          ; category
.text:0000000000005994                 mov     r13, [rbx+10h]
.text:0000000000005998                 xor     edi, edi        ; domainname
.text:000000000000599A                 mov     rbx, [rbx]
.text:000000000000599D                 mov     [rsp+58h+var_58], r8
.text:00000000000059A1                 call    _dcgettext
.text:00000000000059A6                 sub     rsp, 8
.text:00000000000059AA                 mov     r9, r13
.text:00000000000059AD                 push    r12
.text:00000000000059AF                 push    r15
.text:00000000000059B1                 push    r14
.text:00000000000059B3
.text:00000000000059B3 loc_59B3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000059B3                 mov     r8, [rsp+78h+var_58]
.text:00000000000059B8                 mov     rcx, rbx
.text:00000000000059BB                 mov     rdx, rax
.text:00000000000059BE                 mov     rdi, rbp
.text:00000000000059C1                 mov     esi, 1
.text:00000000000059C6                 xor     eax, eax
.text:00000000000059C8                 call    ___fprintf_chk
.text:00000000000059CD                 add     rsp, 20h
.text:00000000000059D1                 add     rsp, 28h
.text:00000000000059D5                 pop     rbx
.text:00000000000059D6                 pop     rbp
.text:00000000000059D7                 pop     r12
.text:00000000000059D9                 pop     r13
.text:00000000000059DB                 pop     r14
.text:00000000000059DD                 pop     r15
.text:00000000000059DF                 retn
.text:00000000000059E0 ; ---------------------------------------------------------------------------
.text:00000000000059E0
.text:00000000000059E0 loc_59E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000059E0                                         ; DATA XREF: .rodata:jpt_5704↓o
.text:00000000000059E0                 mov     r9, [rbx+10h]   ; jumptable 0000000000005704 case 7
.text:00000000000059E4                 mov     r13, [rbx+30h]
.text:00000000000059E8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000059EF                 mov     r12, [rbx+28h]
.text:00000000000059F3                 mov     r15, [rbx+20h]
.text:00000000000059F7                 mov     edx, 5          ; category
.text:00000000000059FC                 mov     r14, [rbx+18h]
.text:0000000000005A00                 mov     r8, [rbx+8]
.text:0000000000005A04                 xor     edi, edi        ; domainname
.text:0000000000005A06                 mov     [rsp+58h+var_50], r9
.text:0000000000005A0B                 mov     rbx, [rbx]
.text:0000000000005A0E                 mov     [rsp+58h+var_58], r8
.text:0000000000005A12                 call    _dcgettext
.text:0000000000005A17                 push    r13
.text:0000000000005A19                 push    r12
.text:0000000000005A1B                 push    r15
.text:0000000000005A1D                 push    r14
.text:0000000000005A1F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005A24                 jmp     short loc_59B3
.text:0000000000005A24 ; ---------------------------------------------------------------------------
.text:0000000000005A26                 align 10h
.text:0000000000005A30
.text:0000000000005A30 def_5704:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005A30                 mov     r10, [rbx+40h]  ; jumptable 0000000000005704 default case
.text:0000000000005A34                 mov     r9, [rbx+38h]
.text:0000000000005A38                 mov     edx, 5
.text:0000000000005A3D                 mov     rax, [rbx+10h]
.text:0000000000005A41                 mov     r8, [rbx+8]
.text:0000000000005A45                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000005A4C                 mov     r13, [rbx+30h]
.text:0000000000005A50                 mov     r12, [rbx+28h]
.text:0000000000005A54                 mov     r15, [rbx+20h]
.text:0000000000005A58                 mov     r14, [rbx+18h]
.text:0000000000005A5C                 mov     [rsp+58h+var_40], r10
.text:0000000000005A61                 mov     [rsp+58h+var_48], r9
.text:0000000000005A66                 mov     [rsp+58h+var_58], rax
.text:0000000000005A6A                 mov     [rsp+58h+var_50], r8
.text:0000000000005A6F                 mov     rbx, [rbx]
.text:0000000000005A72                 jmp     loc_5802
.text:0000000000005A72 ; } // starts at 5660
.text:0000000000005A72 version_etc_arn endp
.text:0000000000005A72
.text:0000000000005A72 ; ---------------------------------------------------------------------------
.text:0000000000005A77                 align 20h
.text:0000000000005A80
.text:0000000000005A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A80
.text:0000000000005A80 ; Attributes: info_from_lumina
.text:0000000000005A80
.text:0000000000005A80 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005A80                 public version_etc_ar
.text:0000000000005A80 version_etc_ar  proc near
.text:0000000000005A80 ; __unwind {
.text:0000000000005A80                 xor     r9d, r9d
.text:0000000000005A83                 cmp     qword ptr [r8], 0
.text:0000000000005A87                 jz      short loc_5A9B
.text:0000000000005A89                 nop     dword ptr [rax+00000000h]
.text:0000000000005A90
.text:0000000000005A90 loc_5A90:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005A90                 add     r9, 1
.text:0000000000005A94                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005A99                 jnz     short loc_5A90
.text:0000000000005A9B
.text:0000000000005A9B loc_5A9B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000005A9B                 jmp     version_etc_arn
.text:0000000000005A9B ; } // starts at 5A80
.text:0000000000005A9B version_etc_ar  endp
.text:0000000000005A9B
.text:0000000000005AA0
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0
.text:0000000000005AA0 ; Attributes: info_from_lumina
.text:0000000000005AA0
.text:0000000000005AA0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005AA0                 public version_etc_va
.text:0000000000005AA0 version_etc_va  proc near
.text:0000000000005AA0
.text:0000000000005AA0 authtab         = qword ptr -68h
.text:0000000000005AA0 var_10          = qword ptr -10h
.text:0000000000005AA0
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 sub     rsp, 68h
.text:0000000000005AA4                 mov     r10, r8
.text:0000000000005AA7                 xor     r9d, r9d
.text:0000000000005AAA                 mov     rax, fs:28h
.text:0000000000005AB3                 mov     [rsp+68h+var_10], rax
.text:0000000000005AB8                 xor     eax, eax
.text:0000000000005ABA                 mov     r8, rsp
.text:0000000000005ABD                 nop     dword ptr [rax]
.text:0000000000005AC0
.text:0000000000005AC0 loc_5AC0:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005AC0                 mov     eax, [r10]
.text:0000000000005AC3                 cmp     eax, 2Fh ; '/'
.text:0000000000005AC6                 ja      short loc_5B0A
.text:0000000000005AC8                 mov     r11d, eax
.text:0000000000005ACB                 add     r11, [r10+10h]
.text:0000000000005ACF                 add     eax, 8
.text:0000000000005AD2                 mov     [r10], eax
.text:0000000000005AD5
.text:0000000000005AD5 loc_5AD5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005AD5                 mov     rax, [r11]
.text:0000000000005AD8                 test    rax, rax
.text:0000000000005ADB                 mov     [r8+r9*8], rax
.text:0000000000005ADF                 jz      short loc_5AEB
.text:0000000000005AE1                 add     r9, 1
.text:0000000000005AE5                 cmp     r9, 0Ah
.text:0000000000005AE9                 jnz     short loc_5AC0
.text:0000000000005AEB
.text:0000000000005AEB loc_5AEB:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000005AEB                 call    version_etc_arn
.text:0000000000005AF0                 mov     rax, [rsp+68h+var_10]
.text:0000000000005AF5                 xor     rax, fs:28h
.text:0000000000005AFE                 jnz     short loc_5B05
.text:0000000000005B00                 add     rsp, 68h
.text:0000000000005B04                 retn
.text:0000000000005B05 ; ---------------------------------------------------------------------------
.text:0000000000005B05
.text:0000000000005B05 loc_5B05:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005B05                 call    ___stack_chk_fail
.text:0000000000005B0A ; ---------------------------------------------------------------------------
.text:0000000000005B0A
.text:0000000000005B0A loc_5B0A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000005B0A                 mov     r11, [r10+8]
.text:0000000000005B0E                 lea     rax, [r11+8]
.text:0000000000005B12                 mov     [r10+8], rax
.text:0000000000005B16                 jmp     short loc_5AD5
.text:0000000000005B16 ; } // starts at 5AA0
.text:0000000000005B16 version_etc_va  endp
.text:0000000000005B16
.text:0000000000005B16 ; ---------------------------------------------------------------------------
.text:0000000000005B18                 align 20h
.text:0000000000005B20
.text:0000000000005B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B20
.text:0000000000005B20 ; Attributes: info_from_lumina
.text:0000000000005B20
.text:0000000000005B20 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005B20                 public version_etc
.text:0000000000005B20 version_etc     proc near               ; CODE XREF: main+133↑p
.text:0000000000005B20
.text:0000000000005B20 var_C0          = dword ptr -0C0h
.text:0000000000005B20 var_B8          = qword ptr -0B8h
.text:0000000000005B20 var_B0          = qword ptr -0B0h
.text:0000000000005B20 var_A8          = byte ptr -0A8h
.text:0000000000005B20 var_50          = qword ptr -50h
.text:0000000000005B20 var_48          = byte ptr -48h
.text:0000000000005B20 var_28          = qword ptr -28h
.text:0000000000005B20 var_20          = qword ptr -20h
.text:0000000000005B20 arg_0           = byte ptr  8
.text:0000000000005B20
.text:0000000000005B20 ; __unwind {
.text:0000000000005B20                 push    rbp
.text:0000000000005B21                 push    rbx
.text:0000000000005B22                 mov     r10d, 20h ; ' '
.text:0000000000005B28                 xor     r11d, r11d
.text:0000000000005B2B                 sub     rsp, 0B8h
.text:0000000000005B32                 mov     rax, fs:28h
.text:0000000000005B3B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005B40                 xor     eax, eax
.text:0000000000005B42                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000005B4A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005B52                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000005B5A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000005B5F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005B67                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000005B6F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005B74                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000005B7C                 xor     r9d, r9d
.text:0000000000005B7F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005B84                 mov     rbp, rax
.text:0000000000005B87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005B90
.text:0000000000005B90 loc_5B90:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005B90                 cmp     r10d, 2Fh ; '/'
.text:0000000000005B94                 ja      short loc_5BEC
.text:0000000000005B96                 mov     eax, r10d
.text:0000000000005B99                 mov     r11d, 1
.text:0000000000005B9F                 add     r10d, 8
.text:0000000000005BA3                 add     rax, rbp
.text:0000000000005BA6
.text:0000000000005BA6 loc_5BA6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005BA6                 mov     rax, [rax]
.text:0000000000005BA9                 test    rax, rax
.text:0000000000005BAC                 mov     [r8+r9*8], rax
.text:0000000000005BB0                 jz      short loc_5BBC
.text:0000000000005BB2                 add     r9, 1
.text:0000000000005BB6                 cmp     r9, 0Ah
.text:0000000000005BBA                 jnz     short loc_5B90
.text:0000000000005BBC
.text:0000000000005BBC loc_5BBC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000005BBC                 test    r11b, r11b
.text:0000000000005BBF                 jnz     short loc_5BE5
.text:0000000000005BC1
.text:0000000000005BC1 loc_5BC1:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005BC1                 call    version_etc_arn
.text:0000000000005BC6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000005BCB                 xor     rax, fs:28h
.text:0000000000005BD4                 jnz     short loc_5BE0
.text:0000000000005BD6                 add     rsp, 0B8h
.text:0000000000005BDD                 pop     rbx
.text:0000000000005BDE                 pop     rbp
.text:0000000000005BDF                 retn
.text:0000000000005BE0 ; ---------------------------------------------------------------------------
.text:0000000000005BE0
.text:0000000000005BE0 loc_5BE0:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005BE0                 call    ___stack_chk_fail
.text:0000000000005BE5 ; ---------------------------------------------------------------------------
.text:0000000000005BE5
.text:0000000000005BE5 loc_5BE5:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005BE5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000005BEA                 jmp     short loc_5BC1
.text:0000000000005BEC ; ---------------------------------------------------------------------------
.text:0000000000005BEC
.text:0000000000005BEC loc_5BEC:                               ; CODE XREF: version_etc+74↑j
.text:0000000000005BEC                 mov     rax, rbx
.text:0000000000005BEF                 add     rbx, 8
.text:0000000000005BF3                 jmp     short loc_5BA6
.text:0000000000005BF3 ; } // starts at 5B20
.text:0000000000005BF3 version_etc     endp
.text:0000000000005BF3
.text:0000000000005BF3 ; ---------------------------------------------------------------------------
.text:0000000000005BF5                 align 20h
.text:0000000000005C00
.text:0000000000005C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C00
.text:0000000000005C00 ; Attributes: info_from_lumina
.text:0000000000005C00
.text:0000000000005C00 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005C00                 public emit_bug_reporting_address
.text:0000000000005C00 emit_bug_reporting_address proc near
.text:0000000000005C00 ; __unwind {
.text:0000000000005C00                 push    rbx
.text:0000000000005C01                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005C08                 mov     edx, 5          ; category
.text:0000000000005C0D                 xor     edi, edi        ; domainname
.text:0000000000005C0F                 call    _dcgettext
.text:0000000000005C14                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000005C1B                 mov     rsi, rax
.text:0000000000005C1E                 mov     edi, 1
.text:0000000000005C23                 xor     eax, eax
.text:0000000000005C25                 call    ___printf_chk
.text:0000000000005C2A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005C31                 mov     edx, 5          ; category
.text:0000000000005C36                 xor     edi, edi        ; domainname
.text:0000000000005C38                 call    _dcgettext
.text:0000000000005C3D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005C44                 lea     rdx, unk_6527
.text:0000000000005C4B                 mov     rsi, rax
.text:0000000000005C4E                 mov     edi, 1
.text:0000000000005C53                 xor     eax, eax
.text:0000000000005C55                 call    ___printf_chk
.text:0000000000005C5A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005C61                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005C68                 xor     edi, edi        ; domainname
.text:0000000000005C6A                 mov     edx, 5          ; category
.text:0000000000005C6F                 call    _dcgettext
.text:0000000000005C74                 mov     rsi, rbx        ; stream
.text:0000000000005C77                 mov     rdi, rax        ; s
.text:0000000000005C7A                 pop     rbx
.text:0000000000005C7B                 jmp     _fputs_unlocked
.text:0000000000005C7B ; } // starts at 5C00
.text:0000000000005C7B emit_bug_reporting_address endp
.text:0000000000005C7B
.text:0000000000005C80
.text:0000000000005C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C80
.text:0000000000005C80
.text:0000000000005C80                 public xmalloc
.text:0000000000005C80 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000005C80                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000005C80 ; __unwind {
.text:0000000000005C80                 push    rbx
.text:0000000000005C81                 mov     rbx, rdi
.text:0000000000005C84                 call    _malloc
.text:0000000000005C89                 test    rax, rax
.text:0000000000005C8C                 jnz     short loc_5C93
.text:0000000000005C8E                 test    rbx, rbx
.text:0000000000005C91                 jnz     short loc_5C95
.text:0000000000005C93
.text:0000000000005C93 loc_5C93:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005C93                 pop     rbx
.text:0000000000005C94                 retn
.text:0000000000005C95 ; ---------------------------------------------------------------------------
.text:0000000000005C95
.text:0000000000005C95 loc_5C95:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005C95                 call    xalloc_die
.text:0000000000005C95 ; } // starts at 5C80
.text:0000000000005C95 xmalloc         endp
.text:0000000000005C95
.text:0000000000005C95 ; ---------------------------------------------------------------------------
.text:0000000000005C9A                 align 20h
.text:0000000000005CA0
.text:0000000000005CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CA0
.text:0000000000005CA0 ; Attributes: info_from_lumina
.text:0000000000005CA0
.text:0000000000005CA0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005CA0                 public xnmalloc
.text:0000000000005CA0 xnmalloc        proc near
.text:0000000000005CA0 ; __unwind {
.text:0000000000005CA0                 mov     rax, rdi
.text:0000000000005CA3                 mul     rsi
.text:0000000000005CA6                 mov     rdi, rax
.text:0000000000005CA9                 seto    al
.text:0000000000005CAC                 test    rdi, rdi
.text:0000000000005CAF                 js      short loc_5CBB
.text:0000000000005CB1                 movzx   eax, al
.text:0000000000005CB4                 test    rax, rax
.text:0000000000005CB7                 jnz     short loc_5CBB
.text:0000000000005CB9                 jmp     short xmalloc
.text:0000000000005CBB ; ---------------------------------------------------------------------------
.text:0000000000005CBB
.text:0000000000005CBB loc_5CBB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000005CBB                                         ; xnmalloc+17↑j
.text:0000000000005CBB                 sub     rsp, 8
.text:0000000000005CBF                 call    xalloc_die
.text:0000000000005CBF ; } // starts at 5CA0
.text:0000000000005CBF xnmalloc        endp
.text:0000000000005CBF
.text:0000000000005CBF ; ---------------------------------------------------------------------------
.text:0000000000005CC4                 align 10h
.text:0000000000005CD0
.text:0000000000005CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CD0
.text:0000000000005CD0
.text:0000000000005CD0                 public xcharalloc
.text:0000000000005CD0 xcharalloc      proc near
.text:0000000000005CD0 ; __unwind {
.text:0000000000005CD0                 jmp     short xmalloc
.text:0000000000005CD0 ; } // starts at 5CD0
.text:0000000000005CD0 xcharalloc      endp
.text:0000000000005CD0
.text:0000000000005CD0 ; ---------------------------------------------------------------------------
.text:0000000000005CD2                 align 20h
.text:0000000000005CE0
.text:0000000000005CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CE0
.text:0000000000005CE0 ; Attributes: info_from_lumina
.text:0000000000005CE0
.text:0000000000005CE0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005CE0                 public xrealloc
.text:0000000000005CE0 xrealloc        proc near               ; CODE XREF: add_range_pair+7A↑p
.text:0000000000005CE0                                         ; set_fields+23D↑p ...
.text:0000000000005CE0 ; __unwind {
.text:0000000000005CE0                 test    rsi, rsi
.text:0000000000005CE3                 push    rbx
.text:0000000000005CE4                 mov     rbx, rsi
.text:0000000000005CE7                 jnz     short loc_5CEE
.text:0000000000005CE9                 test    rdi, rdi
.text:0000000000005CEC                 jnz     short loc_5D08
.text:0000000000005CEE
.text:0000000000005CEE loc_5CEE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000005CEE                 mov     rsi, rbx        ; size
.text:0000000000005CF1                 call    _realloc
.text:0000000000005CF6                 test    rax, rax
.text:0000000000005CF9                 jnz     short loc_5D00
.text:0000000000005CFB                 test    rbx, rbx
.text:0000000000005CFE                 jnz     short loc_5D11
.text:0000000000005D00
.text:0000000000005D00 loc_5D00:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005D00                 pop     rbx
.text:0000000000005D01                 retn
.text:0000000000005D01 ; ---------------------------------------------------------------------------
.text:0000000000005D02                 align 8
.text:0000000000005D08
.text:0000000000005D08 loc_5D08:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005D08                 call    _free
.text:0000000000005D0D                 xor     eax, eax
.text:0000000000005D0F                 pop     rbx
.text:0000000000005D10                 retn
.text:0000000000005D11 ; ---------------------------------------------------------------------------
.text:0000000000005D11
.text:0000000000005D11 loc_5D11:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005D11                 call    xalloc_die
.text:0000000000005D11 ; } // starts at 5CE0
.text:0000000000005D11 xrealloc        endp
.text:0000000000005D11
.text:0000000000005D11 ; ---------------------------------------------------------------------------
.text:0000000000005D16                 align 20h
.text:0000000000005D20
.text:0000000000005D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D20
.text:0000000000005D20 ; Attributes: info_from_lumina
.text:0000000000005D20
.text:0000000000005D20 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005D20                 public xnrealloc
.text:0000000000005D20 xnrealloc       proc near
.text:0000000000005D20 ; __unwind {
.text:0000000000005D20                 mov     rax, rsi
.text:0000000000005D23                 mul     rdx
.text:0000000000005D26                 mov     rsi, rax
.text:0000000000005D29                 seto    al
.text:0000000000005D2C                 test    rsi, rsi
.text:0000000000005D2F                 js      short loc_5D3B
.text:0000000000005D31                 movzx   eax, al
.text:0000000000005D34                 test    rax, rax
.text:0000000000005D37                 jnz     short loc_5D3B
.text:0000000000005D39                 jmp     short xrealloc
.text:0000000000005D3B ; ---------------------------------------------------------------------------
.text:0000000000005D3B
.text:0000000000005D3B loc_5D3B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000005D3B                                         ; xnrealloc+17↑j
.text:0000000000005D3B                 sub     rsp, 8
.text:0000000000005D3F                 call    xalloc_die
.text:0000000000005D3F ; } // starts at 5D20
.text:0000000000005D3F xnrealloc       endp
.text:0000000000005D3F
.text:0000000000005D3F ; ---------------------------------------------------------------------------
.text:0000000000005D44                 align 10h
.text:0000000000005D50
.text:0000000000005D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D50
.text:0000000000005D50 ; Attributes: info_from_lumina
.text:0000000000005D50
.text:0000000000005D50 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005D50                 public x2nrealloc
.text:0000000000005D50 x2nrealloc      proc near
.text:0000000000005D50 ; __unwind {
.text:0000000000005D50                 test    rdi, rdi
.text:0000000000005D53                 mov     r9, rdx
.text:0000000000005D56                 mov     rcx, [rsi]
.text:0000000000005D59                 jz      short loc_5D90
.text:0000000000005D5B                 xor     edx, edx
.text:0000000000005D5D                 mov     rax, 5555555555555554h
.text:0000000000005D67                 div     r9
.text:0000000000005D6A                 cmp     rax, rcx
.text:0000000000005D6D                 jbe     short loc_5DAB
.text:0000000000005D6F                 mov     rax, rcx
.text:0000000000005D72                 shr     rax, 1
.text:0000000000005D75                 lea     rcx, [rax+rcx+1]
.text:0000000000005D7A
.text:0000000000005D7A loc_5D7A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000005D7A                 mov     [rsi], rcx
.text:0000000000005D7D                 imul    rcx, r9
.text:0000000000005D81                 mov     rsi, rcx
.text:0000000000005D84                 jmp     xrealloc
.text:0000000000005D84 ; ---------------------------------------------------------------------------
.text:0000000000005D89                 align 10h
.text:0000000000005D90
.text:0000000000005D90 loc_5D90:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005D90                 test    rcx, rcx
.text:0000000000005D93                 jz      short loc_5DB8
.text:0000000000005D95
.text:0000000000005D95 loc_5D95:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005D95                 mov     rax, rcx
.text:0000000000005D98                 mul     r9
.text:0000000000005D9B                 seto    dl
.text:0000000000005D9E                 test    rax, rax
.text:0000000000005DA1                 movzx   edx, dl
.text:0000000000005DA4                 js      short loc_5DAB
.text:0000000000005DA6                 test    rdx, rdx
.text:0000000000005DA9                 jz      short loc_5D7A
.text:0000000000005DAB
.text:0000000000005DAB loc_5DAB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000005DAB                                         ; x2nrealloc+54↑j
.text:0000000000005DAB                 sub     rsp, 8
.text:0000000000005DAF                 call    xalloc_die
.text:0000000000005DAF ; ---------------------------------------------------------------------------
.text:0000000000005DB4                 align 8
.text:0000000000005DB8
.text:0000000000005DB8 loc_5DB8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005DB8                 xor     edx, edx
.text:0000000000005DBA                 mov     eax, 80h
.text:0000000000005DBF                 xor     r8d, r8d
.text:0000000000005DC2                 div     r9
.text:0000000000005DC5                 test    rax, rax
.text:0000000000005DC8                 setz    r8b
.text:0000000000005DCC                 lea     rcx, [r8+rax]
.text:0000000000005DD0                 jmp     short loc_5D95
.text:0000000000005DD0 ; } // starts at 5D50
.text:0000000000005DD0 x2nrealloc      endp
.text:0000000000005DD0
.text:0000000000005DD0 ; ---------------------------------------------------------------------------
.text:0000000000005DD2                 align 20h
.text:0000000000005DE0
.text:0000000000005DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DE0
.text:0000000000005DE0 ; Attributes: info_from_lumina
.text:0000000000005DE0
.text:0000000000005DE0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005DE0                 public x2realloc
.text:0000000000005DE0 x2realloc       proc near
.text:0000000000005DE0 ; __unwind {
.text:0000000000005DE0                 test    rdi, rdi
.text:0000000000005DE3                 mov     rax, [rsi]
.text:0000000000005DE6                 jz      short loc_5E10
.text:0000000000005DE8                 mov     rdx, 5555555555555553h
.text:0000000000005DF2                 cmp     rax, rdx
.text:0000000000005DF5                 ja      short loc_5E21
.text:0000000000005DF7                 mov     rdx, rax
.text:0000000000005DFA                 shr     rdx, 1
.text:0000000000005DFD                 lea     rax, [rdx+rax+1]
.text:0000000000005E02
.text:0000000000005E02 loc_5E02:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005E02                 mov     [rsi], rax
.text:0000000000005E05                 mov     rsi, rax
.text:0000000000005E08                 jmp     xrealloc
.text:0000000000005E08 ; ---------------------------------------------------------------------------
.text:0000000000005E0D                 align 10h
.text:0000000000005E10
.text:0000000000005E10 loc_5E10:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005E10                 test    rax, rax
.text:0000000000005E13                 mov     edx, 80h
.text:0000000000005E18                 cmovz   rax, rdx
.text:0000000000005E1C                 test    rax, rax
.text:0000000000005E1F                 jns     short loc_5E02
.text:0000000000005E21
.text:0000000000005E21 loc_5E21:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005E21                 sub     rsp, 8
.text:0000000000005E25                 call    xalloc_die
.text:0000000000005E25 ; } // starts at 5DE0
.text:0000000000005E25 x2realloc       endp
.text:0000000000005E25
.text:0000000000005E25 ; ---------------------------------------------------------------------------
.text:0000000000005E2A                 align 10h
.text:0000000000005E30
.text:0000000000005E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E30
.text:0000000000005E30
.text:0000000000005E30 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005E30                 public xzalloc
.text:0000000000005E30 xzalloc         proc near
.text:0000000000005E30 ; __unwind {
.text:0000000000005E30                 push    rbx
.text:0000000000005E31                 mov     rbx, rdi
.text:0000000000005E34                 call    xmalloc
.text:0000000000005E39                 mov     rdx, rbx        ; n
.text:0000000000005E3C                 xor     esi, esi        ; c
.text:0000000000005E3E                 mov     rdi, rax        ; s
.text:0000000000005E41                 pop     rbx
.text:0000000000005E42                 jmp     _memset
.text:0000000000005E42 ; } // starts at 5E30
.text:0000000000005E42 xzalloc         endp
.text:0000000000005E42
.text:0000000000005E42 ; ---------------------------------------------------------------------------
.text:0000000000005E47                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50 ; Attributes: info_from_lumina
.text:0000000000005E50
.text:0000000000005E50 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005E50                 public xcalloc
.text:0000000000005E50 xcalloc         proc near
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 mov     rax, rdi
.text:0000000000005E53                 sub     rsp, 8
.text:0000000000005E57                 mul     rsi
.text:0000000000005E5A                 seto    dl
.text:0000000000005E5D                 test    rax, rax
.text:0000000000005E60                 js      short loc_5E79
.text:0000000000005E62                 movzx   edx, dl
.text:0000000000005E65                 test    rdx, rdx
.text:0000000000005E68                 jnz     short loc_5E79
.text:0000000000005E6A                 call    _calloc
.text:0000000000005E6F                 test    rax, rax
.text:0000000000005E72                 jz      short loc_5E79
.text:0000000000005E74                 add     rsp, 8
.text:0000000000005E78                 retn
.text:0000000000005E79 ; ---------------------------------------------------------------------------
.text:0000000000005E79
.text:0000000000005E79 loc_5E79:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005E79                                         ; xcalloc+18↑j ...
.text:0000000000005E79                 call    xalloc_die
.text:0000000000005E79 ; } // starts at 5E50
.text:0000000000005E79 xcalloc         endp
.text:0000000000005E79
.text:0000000000005E79 ; ---------------------------------------------------------------------------
.text:0000000000005E7E                 align 20h
.text:0000000000005E80
.text:0000000000005E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E80
.text:0000000000005E80 ; Attributes: info_from_lumina
.text:0000000000005E80
.text:0000000000005E80 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005E80                 public xmemdup
.text:0000000000005E80 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005E80                                         ; xstrdup+11↓j
.text:0000000000005E80 ; __unwind {
.text:0000000000005E80                 push    rbp
.text:0000000000005E81                 push    rbx
.text:0000000000005E82                 mov     rbp, rdi
.text:0000000000005E85                 mov     rdi, rsi
.text:0000000000005E88                 mov     rbx, rsi
.text:0000000000005E8B                 sub     rsp, 8
.text:0000000000005E8F                 call    xmalloc
.text:0000000000005E94                 add     rsp, 8
.text:0000000000005E98                 mov     rdx, rbx        ; n
.text:0000000000005E9B                 mov     rsi, rbp        ; src
.text:0000000000005E9E                 pop     rbx
.text:0000000000005E9F                 pop     rbp
.text:0000000000005EA0                 mov     rdi, rax        ; dest
.text:0000000000005EA3                 jmp     _memcpy
.text:0000000000005EA3 ; } // starts at 5E80
.text:0000000000005EA3 xmemdup         endp
.text:0000000000005EA3
.text:0000000000005EA3 ; ---------------------------------------------------------------------------
.text:0000000000005EA8                 align 10h
.text:0000000000005EB0
.text:0000000000005EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EB0
.text:0000000000005EB0
.text:0000000000005EB0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005EB0                 public xstrdup
.text:0000000000005EB0 xstrdup         proc near               ; CODE XREF: main+237↑p
.text:0000000000005EB0 ; __unwind {
.text:0000000000005EB0                 push    rbx
.text:0000000000005EB1                 mov     rbx, rdi
.text:0000000000005EB4                 call    _strlen
.text:0000000000005EB9                 mov     rdi, rbx        ; src
.text:0000000000005EBC                 lea     rsi, [rax+1]    ; n
.text:0000000000005EC0                 pop     rbx
.text:0000000000005EC1                 jmp     short xmemdup
.text:0000000000005EC1 ; } // starts at 5EB0
.text:0000000000005EC1 xstrdup         endp
.text:0000000000005EC1
.text:0000000000005EC1 ; ---------------------------------------------------------------------------
.text:0000000000005EC3                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005ED0
.text:0000000000005ED0 ; Attributes: noreturn info_from_lumina
.text:0000000000005ED0
.text:0000000000005ED0 ; void __cdecl xalloc_die()
.text:0000000000005ED0                 public xalloc_die
.text:0000000000005ED0 xalloc_die      proc near               ; CODE XREF: cut_file+71B↑p
.text:0000000000005ED0                                         ; add_range_pair:loc_2CCD↑p ...
.text:0000000000005ED0 ; __unwind {
.text:0000000000005ED0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005ED7                 sub     rsp, 8
.text:0000000000005EDB                 mov     edx, 5          ; category
.text:0000000000005EE0                 xor     edi, edi        ; domainname
.text:0000000000005EE2                 call    _dcgettext
.text:0000000000005EE7                 mov     edi, cs:exit_failure ; status
.text:0000000000005EED                 lea     rdx, format     ; format
.text:0000000000005EF4                 mov     rcx, rax
.text:0000000000005EF7                 xor     esi, esi        ; errnum
.text:0000000000005EF9                 xor     eax, eax
.text:0000000000005EFB                 call    _error
.text:0000000000005F00                 call    _abort
.text:0000000000005F00 ; } // starts at 5ED0
.text:0000000000005F00 xalloc_die      endp
.text:0000000000005F00
.text:0000000000005F00 ; ---------------------------------------------------------------------------
.text:0000000000005F05                 align 10h
.text:0000000000005F10
.text:0000000000005F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F10
.text:0000000000005F10
.text:0000000000005F10                 public xstrndup
.text:0000000000005F10 xstrndup        proc near               ; CODE XREF: set_fields+4B9↑p
.text:0000000000005F10 ; __unwind {
.text:0000000000005F10                 sub     rsp, 8
.text:0000000000005F14                 call    _strndup
.text:0000000000005F19                 test    rax, rax
.text:0000000000005F1C                 jz      short loc_5F23
.text:0000000000005F1E                 add     rsp, 8
.text:0000000000005F22                 retn
.text:0000000000005F23 ; ---------------------------------------------------------------------------
.text:0000000000005F23
.text:0000000000005F23 loc_5F23:                               ; CODE XREF: xstrndup+C↑j
.text:0000000000005F23                 call    xalloc_die
.text:0000000000005F23 ; } // starts at 5F10
.text:0000000000005F23 xstrndup        endp
.text:0000000000005F23
.text:0000000000005F23 ; ---------------------------------------------------------------------------
.text:0000000000005F28                 align 10h
.text:0000000000005F30
.text:0000000000005F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F30
.text:0000000000005F30 ; Attributes: info_from_lumina
.text:0000000000005F30
.text:0000000000005F30 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005F30                 public rpl_fclose
.text:0000000000005F30 rpl_fclose      proc near               ; CODE XREF: main+39A↑p
.text:0000000000005F30                                         ; cut_file+50D↑p ...
.text:0000000000005F30 ; __unwind {
.text:0000000000005F30                 push    r12
.text:0000000000005F32                 push    rbp
.text:0000000000005F33                 push    rbx
.text:0000000000005F34                 mov     rbx, rdi
.text:0000000000005F37                 call    _fileno
.text:0000000000005F3C                 test    eax, eax
.text:0000000000005F3E                 mov     rdi, rbx        ; fp
.text:0000000000005F41                 js      short loc_5F97
.text:0000000000005F43                 call    ___freading
.text:0000000000005F48                 test    eax, eax
.text:0000000000005F4A                 jnz     short loc_5F78
.text:0000000000005F4C
.text:0000000000005F4C loc_5F4C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000005F4C                 mov     rdi, rbx        ; stream
.text:0000000000005F4F                 call    rpl_fflush
.text:0000000000005F54                 test    eax, eax
.text:0000000000005F56                 jz      short loc_5F94
.text:0000000000005F58                 call    ___errno_location
.text:0000000000005F5D                 mov     r12d, [rax]
.text:0000000000005F60                 mov     rdi, rbx        ; stream
.text:0000000000005F63                 mov     rbp, rax
.text:0000000000005F66                 call    _fclose
.text:0000000000005F6B                 test    r12d, r12d
.text:0000000000005F6E                 jnz     short loc_5FA0
.text:0000000000005F70
.text:0000000000005F70 loc_5F70:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005F70                 pop     rbx
.text:0000000000005F71                 pop     rbp
.text:0000000000005F72                 pop     r12
.text:0000000000005F74                 retn
.text:0000000000005F74 ; ---------------------------------------------------------------------------
.text:0000000000005F75                 align 8
.text:0000000000005F78
.text:0000000000005F78 loc_5F78:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005F78                 mov     rdi, rbx        ; stream
.text:0000000000005F7B                 call    _fileno
.text:0000000000005F80                 xor     esi, esi        ; offset
.text:0000000000005F82                 mov     edx, 1          ; whence
.text:0000000000005F87                 mov     edi, eax        ; fd
.text:0000000000005F89                 call    _lseek
.text:0000000000005F8E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F92                 jnz     short loc_5F4C
.text:0000000000005F94
.text:0000000000005F94 loc_5F94:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005F94                 mov     rdi, rbx        ; stream
.text:0000000000005F97
.text:0000000000005F97 loc_5F97:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005F97                 pop     rbx
.text:0000000000005F98                 pop     rbp
.text:0000000000005F99                 pop     r12
.text:0000000000005F9B                 jmp     _fclose
.text:0000000000005FA0 ; ---------------------------------------------------------------------------
.text:0000000000005FA0
.text:0000000000005FA0 loc_5FA0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005FA0                 mov     [rbp+0], r12d
.text:0000000000005FA4                 mov     eax, 0FFFFFFFFh
.text:0000000000005FA9                 jmp     short loc_5F70
.text:0000000000005FA9 ; } // starts at 5F30
.text:0000000000005FA9 rpl_fclose      endp
.text:0000000000005FA9
.text:0000000000005FA9 ; ---------------------------------------------------------------------------
.text:0000000000005FAB                 align 10h
.text:0000000000005FB0
.text:0000000000005FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FB0
.text:0000000000005FB0 ; Attributes: info_from_lumina
.text:0000000000005FB0
.text:0000000000005FB0 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005FB0                 public rpl_fflush
.text:0000000000005FB0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005FB0 ; __unwind {
.text:0000000000005FB0                 test    rdi, rdi
.text:0000000000005FB3                 push    rbx
.text:0000000000005FB4                 mov     rbx, rdi
.text:0000000000005FB7                 jz      short loc_5FCA
.text:0000000000005FB9                 call    ___freading
.text:0000000000005FBE                 test    eax, eax
.text:0000000000005FC0                 jz      short loc_5FCA
.text:0000000000005FC2                 test    dword ptr [rbx], 100h
.text:0000000000005FC8                 jnz     short loc_5FD8
.text:0000000000005FCA
.text:0000000000005FCA loc_5FCA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000005FCA                                         ; rpl_fflush+10↑j
.text:0000000000005FCA                 mov     rdi, rbx        ; stream
.text:0000000000005FCD                 pop     rbx
.text:0000000000005FCE                 jmp     _fflush
.text:0000000000005FCE ; ---------------------------------------------------------------------------
.text:0000000000005FD3                 align 8
.text:0000000000005FD8
.text:0000000000005FD8 loc_5FD8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005FD8                 mov     rdi, rbx
.text:0000000000005FDB                 mov     edx, 1
.text:0000000000005FE0                 xor     esi, esi
.text:0000000000005FE2                 call    rpl_fseeko
.text:0000000000005FE7                 mov     rdi, rbx        ; stream
.text:0000000000005FEA                 pop     rbx
.text:0000000000005FEB                 jmp     _fflush
.text:0000000000005FEB ; } // starts at 5FB0
.text:0000000000005FEB rpl_fflush      endp
.text:0000000000005FEB
.text:0000000000005FF0
.text:0000000000005FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FF0
.text:0000000000005FF0
.text:0000000000005FF0                 public freadptr
.text:0000000000005FF0 freadptr        proc near               ; CODE XREF: getndelim2+181↑p
.text:0000000000005FF0                                         ; freadseek+6A↓p
.text:0000000000005FF0 ; __unwind {
.text:0000000000005FF0                 mov     rax, [rdi+20h]
.text:0000000000005FF4                 cmp     [rdi+28h], rax
.text:0000000000005FF8                 ja      short loc_6010
.text:0000000000005FFA                 mov     rax, [rdi+8]
.text:0000000000005FFE                 mov     rdx, [rdi+10h]
.text:0000000000006002                 sub     rdx, rax
.text:0000000000006005                 jz      short loc_6010
.text:0000000000006007                 mov     [rsi], rdx
.text:000000000000600A                 retn
.text:000000000000600A ; ---------------------------------------------------------------------------
.text:000000000000600B                 align 10h
.text:0000000000006010
.text:0000000000006010 loc_6010:                               ; CODE XREF: freadptr+8↑j
.text:0000000000006010                                         ; freadptr+15↑j
.text:0000000000006010                 xor     eax, eax
.text:0000000000006012                 retn
.text:0000000000006012 ; } // starts at 5FF0
.text:0000000000006012 freadptr        endp
.text:0000000000006012
.text:0000000000006012 ; ---------------------------------------------------------------------------
.text:0000000000006013                 align 20h
.text:0000000000006020
.text:0000000000006020 ; =============== S U B R O U T I N E =======================================
.text:0000000000006020
.text:0000000000006020 ; Attributes: info_from_lumina
.text:0000000000006020
.text:0000000000006020 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006020                 public rpl_fseeko
.text:0000000000006020 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006020                                         ; freadseek+15E↓p
.text:0000000000006020 ; __unwind {
.text:0000000000006020                 mov     rax, [rdi+8]
.text:0000000000006024                 cmp     [rdi+10h], rax
.text:0000000000006028                 jz      short loc_6030
.text:000000000000602A
.text:000000000000602A loc_602A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000602A                                         ; rpl_fseeko+1F↓j
.text:000000000000602A                 jmp     _fseeko
.text:000000000000602A ; ---------------------------------------------------------------------------
.text:000000000000602F                 align 10h
.text:0000000000006030
.text:0000000000006030 loc_6030:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006030                 mov     rax, [rdi+20h]
.text:0000000000006034                 cmp     [rdi+28h], rax
.text:0000000000006038                 jnz     short loc_602A
.text:000000000000603A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000603F                 jnz     short loc_602A
.text:0000000000006041                 push    r12
.text:0000000000006043                 push    rbp
.text:0000000000006044                 mov     r12d, edx
.text:0000000000006047                 push    rbx
.text:0000000000006048                 mov     rbp, rsi
.text:000000000000604B                 mov     rbx, rdi
.text:000000000000604E                 call    _fileno
.text:0000000000006053                 mov     edx, r12d       ; whence
.text:0000000000006056                 mov     rsi, rbp        ; offset
.text:0000000000006059                 mov     edi, eax        ; fd
.text:000000000000605B                 call    _lseek
.text:0000000000006060                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006064                 jz      short loc_6072
.text:0000000000006066                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006069                 mov     [rbx+90h], rax
.text:0000000000006070                 xor     eax, eax
.text:0000000000006072
.text:0000000000006072 loc_6072:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006072                 pop     rbx
.text:0000000000006073                 pop     rbp
.text:0000000000006074                 pop     r12
.text:0000000000006076                 retn
.text:0000000000006076 ; } // starts at 6020
.text:0000000000006076 rpl_fseeko      endp
.text:0000000000006076
.text:0000000000006076 ; ---------------------------------------------------------------------------
.text:0000000000006077                 align 20h
.text:0000000000006080
.text:0000000000006080 ; =============== S U B R O U T I N E =======================================
.text:0000000000006080
.text:0000000000006080 ; Attributes: info_from_lumina
.text:0000000000006080
.text:0000000000006080 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000006080                 public rpl_mbrtowc
.text:0000000000006080 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000006080
.text:0000000000006080 pwc             = dword ptr -34h
.text:0000000000006080 var_30          = qword ptr -30h
.text:0000000000006080
.text:0000000000006080 ; __unwind {
.text:0000000000006080                 push    r13
.text:0000000000006082                 push    r12
.text:0000000000006084                 mov     r13, rsi
.text:0000000000006087                 push    rbp
.text:0000000000006088                 push    rbx
.text:0000000000006089                 mov     rbx, rdi
.text:000000000000608C                 mov     r12, rdx
.text:000000000000608F                 sub     rsp, 18h
.text:0000000000006093                 mov     rax, fs:28h
.text:000000000000609C                 mov     [rsp+38h+var_30], rax
.text:00000000000060A1                 xor     eax, eax
.text:00000000000060A3                 lea     rax, [rsp+38h+pwc]
.text:00000000000060A8                 test    rdi, rdi
.text:00000000000060AB                 cmovz   rbx, rax
.text:00000000000060AF                 mov     rdi, rbx        ; pwc
.text:00000000000060B2                 call    _mbrtowc
.text:00000000000060B7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000060BB                 mov     rbp, rax
.text:00000000000060BE                 jbe     short loc_60E0
.text:00000000000060C0                 test    r12, r12
.text:00000000000060C3                 jz      short loc_60E0
.text:00000000000060C5                 xor     edi, edi
.text:00000000000060C7                 call    hard_locale
.text:00000000000060CC                 test    al, al
.text:00000000000060CE                 jnz     short loc_60E0
.text:00000000000060D0                 movzx   eax, byte ptr [r13+0]
.text:00000000000060D5                 mov     ebp, 1
.text:00000000000060DA                 mov     [rbx], eax
.text:00000000000060DC                 nop     dword ptr [rax+00h]
.text:00000000000060E0
.text:00000000000060E0 loc_60E0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000060E0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000060E0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000060E5                 xor     rdx, fs:28h
.text:00000000000060EE                 mov     rax, rbp
.text:00000000000060F1                 jnz     short loc_60FE
.text:00000000000060F3                 add     rsp, 18h
.text:00000000000060F7                 pop     rbx
.text:00000000000060F8                 pop     rbp
.text:00000000000060F9                 pop     r12
.text:00000000000060FB                 pop     r13
.text:00000000000060FD                 retn
.text:00000000000060FE ; ---------------------------------------------------------------------------
.text:00000000000060FE
.text:00000000000060FE loc_60FE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000060FE                 call    ___stack_chk_fail
.text:00000000000060FE ; } // starts at 6080
.text:00000000000060FE rpl_mbrtowc     endp
.text:00000000000060FE
.text:00000000000060FE ; ---------------------------------------------------------------------------
.text:0000000000006103                 align 10h
.text:0000000000006110
.text:0000000000006110 ; =============== S U B R O U T I N E =======================================
.text:0000000000006110
.text:0000000000006110 ; Attributes: info_from_lumina
.text:0000000000006110
.text:0000000000006110 ; int __fastcall close_stream(FILE *stream)
.text:0000000000006110                 public close_stream
.text:0000000000006110 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000006110                                         ; close_stdout+33↑p
.text:0000000000006110 ; __unwind {
.text:0000000000006110                 push    r12
.text:0000000000006112                 push    rbp
.text:0000000000006113                 mov     rbp, rdi
.text:0000000000006116                 push    rbx
.text:0000000000006117                 call    ___fpending
.text:000000000000611C                 mov     ebx, [rbp+0]
.text:000000000000611F                 mov     rdi, rbp        ; stream
.text:0000000000006122                 mov     r12, rax
.text:0000000000006125                 call    rpl_fclose
.text:000000000000612A                 and     ebx, 20h
.text:000000000000612D                 test    ebx, ebx
.text:000000000000612F                 jnz     short loc_6148
.text:0000000000006131                 test    eax, eax
.text:0000000000006133                 jz      short loc_613F
.text:0000000000006135                 test    r12, r12
.text:0000000000006138                 mov     eax, 0FFFFFFFFh
.text:000000000000613D                 jz      short loc_6178
.text:000000000000613F
.text:000000000000613F loc_613F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000613F                 pop     rbx
.text:0000000000006140                 pop     rbp
.text:0000000000006141                 pop     r12
.text:0000000000006143                 retn
.text:0000000000006143 ; ---------------------------------------------------------------------------
.text:0000000000006144                 align 8
.text:0000000000006148
.text:0000000000006148 loc_6148:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000006148                 test    eax, eax
.text:000000000000614A                 jnz     short loc_6168
.text:000000000000614C                 call    ___errno_location
.text:0000000000006151                 mov     dword ptr [rax], 0
.text:0000000000006157                 mov     eax, 0FFFFFFFFh
.text:000000000000615C                 pop     rbx
.text:000000000000615D                 pop     rbp
.text:000000000000615E                 pop     r12
.text:0000000000006160                 retn
.text:0000000000006160 ; ---------------------------------------------------------------------------
.text:0000000000006161                 align 8
.text:0000000000006168
.text:0000000000006168 loc_6168:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006168                 pop     rbx
.text:0000000000006169                 mov     eax, 0FFFFFFFFh
.text:000000000000616E                 pop     rbp
.text:000000000000616F                 pop     r12
.text:0000000000006171                 retn
.text:0000000000006171 ; ---------------------------------------------------------------------------
.text:0000000000006172                 align 8
.text:0000000000006178
.text:0000000000006178 loc_6178:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006178                 call    ___errno_location
.text:000000000000617D                 cmp     dword ptr [rax], 9
.text:0000000000006180                 pop     rbx
.text:0000000000006181                 pop     rbp
.text:0000000000006182                 pop     r12
.text:0000000000006184                 setnz   al
.text:0000000000006187                 movzx   eax, al
.text:000000000000618A                 neg     eax
.text:000000000000618C                 retn
.text:000000000000618C ; } // starts at 6110
.text:000000000000618C close_stream    endp
.text:000000000000618C
.text:000000000000618C ; ---------------------------------------------------------------------------
.text:000000000000618D                 align 10h
.text:0000000000006190
.text:0000000000006190 ; =============== S U B R O U T I N E =======================================
.text:0000000000006190
.text:0000000000006190
.text:0000000000006190 ; __int64 __fastcall freadseek(FILE *stream)
.text:0000000000006190                 public freadseek
.text:0000000000006190 freadseek       proc near               ; CODE XREF: getndelim2+163↑p
.text:0000000000006190
.text:0000000000006190 var_1040        = qword ptr -1040h
.text:0000000000006190 var_1038        = byte ptr -1038h
.text:0000000000006190 var_30          = qword ptr -30h
.text:0000000000006190
.text:0000000000006190 ; __unwind {
.text:0000000000006190                 push    r14
.text:0000000000006192                 push    r13
.text:0000000000006194                 push    r12
.text:0000000000006196                 push    rbp
.text:0000000000006197                 push    rbx
.text:0000000000006198                 sub     rsp, 1020h
.text:000000000000619F                 mov     rax, fs:28h
.text:00000000000061A8                 mov     [rsp+1048h+var_30], rax
.text:00000000000061B0                 xor     eax, eax
.text:00000000000061B2                 test    rsi, rsi
.text:00000000000061B5                 jz      loc_6243
.text:00000000000061BB                 mov     r12, rdi
.text:00000000000061BE                 mov     rbx, rsi
.text:00000000000061C1                 call    freadahead
.text:00000000000061C6                 test    rax, rax
.text:00000000000061C9                 mov     rbp, rax
.text:00000000000061CC                 jz      loc_6278
.text:00000000000061D2                 lea     r13, [rsp+1048h+var_1040]
.text:00000000000061D7                 jmp     short loc_61F4
.text:00000000000061D7 ; ---------------------------------------------------------------------------
.text:00000000000061D9                 align 20h
.text:00000000000061E0
.text:00000000000061E0 loc_61E0:                               ; CODE XREF: freadseek+9F↓j
.text:00000000000061E0                 sub     rbx, 1
.text:00000000000061E4                 jz      loc_6270
.text:00000000000061EA                 sub     rbp, 1
.text:00000000000061EE                 jz      loc_6278
.text:00000000000061F4
.text:00000000000061F4 loc_61F4:                               ; CODE XREF: freadseek+47↑j
.text:00000000000061F4                 mov     rsi, r13
.text:00000000000061F7                 mov     rdi, r12
.text:00000000000061FA                 call    freadptr
.text:00000000000061FF                 test    rax, rax
.text:0000000000006202                 jz      short loc_6224
.text:0000000000006204                 mov     rax, [rsp+1048h+var_1040]
.text:0000000000006209                 test    rax, rax
.text:000000000000620C                 jz      short loc_6224
.text:000000000000620E                 cmp     rax, rbx
.text:0000000000006211                 cmova   rax, rbx
.text:0000000000006215                 add     [r12+8], rax
.text:000000000000621A                 sub     rbx, rax
.text:000000000000621D                 jz      short loc_6270
.text:000000000000621F                 sub     rbp, rax
.text:0000000000006222                 jz      short loc_6278
.text:0000000000006224
.text:0000000000006224 loc_6224:                               ; CODE XREF: freadseek+72↑j
.text:0000000000006224                                         ; freadseek+7C↑j
.text:0000000000006224                 mov     rdi, r12        ; stream
.text:0000000000006227                 call    _fgetc
.text:000000000000622C                 cmp     eax, 0FFFFFFFFh
.text:000000000000622F                 jnz     short loc_61E0
.text:0000000000006231
.text:0000000000006231 loc_6231:                               ; CODE XREF: freadseek+138↓j
.text:0000000000006231                 mov     rdi, r12        ; stream
.text:0000000000006234                 call    _ferror
.text:0000000000006239                 test    eax, eax
.text:000000000000623B                 setnz   al
.text:000000000000623E                 movzx   eax, al
.text:0000000000006241                 neg     eax
.text:0000000000006243
.text:0000000000006243 loc_6243:                               ; CODE XREF: freadseek+25↑j
.text:0000000000006243                                         ; freadseek+E2↓j ...
.text:0000000000006243                 mov     rcx, [rsp+1048h+var_30]
.text:000000000000624B                 xor     rcx, fs:28h
.text:0000000000006254                 jnz     loc_62F8
.text:000000000000625A                 add     rsp, 1020h
.text:0000000000006261                 pop     rbx
.text:0000000000006262                 pop     rbp
.text:0000000000006263                 pop     r12
.text:0000000000006265                 pop     r13
.text:0000000000006267                 pop     r14
.text:0000000000006269                 retn
.text:0000000000006269 ; ---------------------------------------------------------------------------
.text:000000000000626A                 align 10h
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: freadseek+54↑j
.text:0000000000006270                                         ; freadseek+8D↑j ...
.text:0000000000006270                 xor     eax, eax
.text:0000000000006272                 jmp     short loc_6243
.text:0000000000006272 ; ---------------------------------------------------------------------------
.text:0000000000006274                 align 8
.text:0000000000006278
.text:0000000000006278 loc_6278:                               ; CODE XREF: freadseek+3C↑j
.text:0000000000006278                                         ; freadseek+5E↑j ...
.text:0000000000006278                 mov     rdi, r12        ; stream
.text:000000000000627B                 call    _fileno
.text:0000000000006280                 test    eax, eax
.text:0000000000006282                 jns     short loc_62D0
.text:0000000000006284
.text:0000000000006284 loc_6284:                               ; CODE XREF: freadseek+151↓j
.text:0000000000006284                 lea     r14, [rsp+1048h+var_1038]
.text:0000000000006289                 mov     r13d, 1000h
.text:000000000000628F                 jmp     short loc_629D
.text:000000000000628F ; ---------------------------------------------------------------------------
.text:0000000000006291                 align 8
.text:0000000000006298
.text:0000000000006298 loc_6298:                               ; CODE XREF: freadseek+136↓j
.text:0000000000006298                 sub     rbx, rbp
.text:000000000000629B                 jz      short loc_6270
.text:000000000000629D
.text:000000000000629D loc_629D:                               ; CODE XREF: freadseek+FF↑j
.text:000000000000629D                 cmp     rbx, 1000h
.text:00000000000062A4                 mov     rbp, r13
.text:00000000000062A7                 mov     r8, r12
.text:00000000000062AA                 cmovbe  rbp, rbx
.text:00000000000062AE                 mov     edx, 1
.text:00000000000062B3                 mov     esi, 1000h
.text:00000000000062B8                 mov     rcx, rbp
.text:00000000000062BB                 mov     rdi, r14
.text:00000000000062BE                 call    ___fread_chk
.text:00000000000062C3                 cmp     rbp, rax
.text:00000000000062C6                 jbe     short loc_6298
.text:00000000000062C8                 jmp     loc_6231
.text:00000000000062C8 ; ---------------------------------------------------------------------------
.text:00000000000062CD                 align 10h
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: freadseek+F2↑j
.text:00000000000062D0                 xor     esi, esi        ; offset
.text:00000000000062D2                 mov     edx, 1          ; whence
.text:00000000000062D7                 mov     edi, eax        ; fd
.text:00000000000062D9                 call    _lseek
.text:00000000000062DE                 test    rax, rax
.text:00000000000062E1                 js      short loc_6284
.text:00000000000062E3                 mov     edx, 1
.text:00000000000062E8                 mov     rsi, rbx
.text:00000000000062EB                 mov     rdi, r12
.text:00000000000062EE                 call    rpl_fseeko
.text:00000000000062F3                 jmp     loc_6243
.text:00000000000062F8 ; ---------------------------------------------------------------------------
.text:00000000000062F8
.text:00000000000062F8 loc_62F8:                               ; CODE XREF: freadseek+C4↑j
.text:00000000000062F8                 call    ___stack_chk_fail
.text:00000000000062F8 ; } // starts at 6190
.text:00000000000062F8 freadseek       endp
.text:00000000000062F8
.text:00000000000062F8 ; ---------------------------------------------------------------------------
.text:00000000000062FD                 align 20h
.text:0000000000006300
.text:0000000000006300 ; =============== S U B R O U T I N E =======================================
.text:0000000000006300
.text:0000000000006300
.text:0000000000006300                 public hard_locale
.text:0000000000006300 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000006300 ; __unwind {
.text:0000000000006300                 sub     rsp, 8
.text:0000000000006304                 xor     esi, esi        ; locale
.text:0000000000006306                 call    _setlocale
.text:000000000000630B                 mov     rdx, rax
.text:000000000000630E                 mov     eax, 1
.text:0000000000006313                 test    rdx, rdx
.text:0000000000006316                 jz      short loc_6335
.text:0000000000006318                 lea     rdi, aC         ; "C"
.text:000000000000631F                 mov     ecx, 2
.text:0000000000006324                 mov     rsi, rdx
.text:0000000000006327                 repe cmpsb
.text:0000000000006329                 setnbe  cl
.text:000000000000632C                 sbb     cl, 0
.text:000000000000632F                 xor     eax, eax
.text:0000000000006331                 test    cl, cl
.text:0000000000006333                 jnz     short loc_6340
.text:0000000000006335
.text:0000000000006335 loc_6335:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000006335                 add     rsp, 8
.text:0000000000006339                 retn
.text:0000000000006339 ; ---------------------------------------------------------------------------
.text:000000000000633A                 align 20h
.text:0000000000006340
.text:0000000000006340 loc_6340:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000006340                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000006347                 mov     ecx, 6
.text:000000000000634C                 mov     rsi, rdx
.text:000000000000634F                 repe cmpsb
.text:0000000000006351                 setnbe  al
.text:0000000000006354                 sbb     al, 0
.text:0000000000006356                 test    al, al
.text:0000000000006358                 setnz   al
.text:000000000000635B                 add     rsp, 8
.text:000000000000635F                 retn
.text:000000000000635F ; } // starts at 6300
.text:000000000000635F hard_locale     endp
.text:000000000000635F
.text:0000000000006360
.text:0000000000006360 ; =============== S U B R O U T I N E =======================================
.text:0000000000006360
.text:0000000000006360
.text:0000000000006360                 public locale_charset
.text:0000000000006360 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000006360 ; __unwind {
.text:0000000000006360                 sub     rsp, 8
.text:0000000000006364                 mov     edi, 0Eh        ; item
.text:0000000000006369                 call    _nl_langinfo
.text:000000000000636E                 test    rax, rax
.text:0000000000006371                 jz      short loc_6390
.text:0000000000006373                 cmp     byte ptr [rax], 0
.text:0000000000006376                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000637D                 cmovz   rax, rdx
.text:0000000000006381                 add     rsp, 8
.text:0000000000006385                 retn
.text:0000000000006385 ; ---------------------------------------------------------------------------
.text:0000000000006386                 align 10h
.text:0000000000006390
.text:0000000000006390 loc_6390:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000006390                 lea     rax, aAscii     ; "ASCII"
.text:0000000000006397                 add     rsp, 8
.text:000000000000639B                 retn
.text:000000000000639B ; } // starts at 6360
.text:000000000000639B locale_charset  endp
.text:000000000000639B
.text:000000000000639B ; ---------------------------------------------------------------------------
.text:000000000000639C                 align 20h
.text:00000000000063A0
.text:00000000000063A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063A0
.text:00000000000063A0
.text:00000000000063A0                 public freadahead
.text:00000000000063A0 freadahead      proc near               ; CODE XREF: freadseek+31↑p
.text:00000000000063A0 ; __unwind {
.text:00000000000063A0                 xor     eax, eax
.text:00000000000063A2                 mov     rcx, [rdi+20h]
.text:00000000000063A6                 cmp     [rdi+28h], rcx
.text:00000000000063AA                 ja      short locret_63C7
.text:00000000000063AC                 mov     rax, [rdi+10h]
.text:00000000000063B0                 sub     rax, [rdi+8]
.text:00000000000063B4                 test    dword ptr [rdi], 100h
.text:00000000000063BA                 jz      short locret_63C7
.text:00000000000063BC                 mov     rdx, [rdi+58h]
.text:00000000000063C0                 sub     rdx, [rdi+48h]
.text:00000000000063C4                 add     rax, rdx
.text:00000000000063C7
.text:00000000000063C7 locret_63C7:                            ; CODE XREF: freadahead+A↑j
.text:00000000000063C7                                         ; freadahead+1A↑j
.text:00000000000063C7                 rep retn
.text:00000000000063C7 ; } // starts at 63A0
.text:00000000000063C7 freadahead      endp
.text:00000000000063C7
.text:00000000000063C7 ; ---------------------------------------------------------------------------
.text:00000000000063C9                 align 10h
.text:00000000000063D0
.text:00000000000063D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063D0
.text:00000000000063D0 ; Attributes: info_from_lumina
.text:00000000000063D0
.text:00000000000063D0 ; void _libc_csu_init(void)
.text:00000000000063D0                 public __libc_csu_init
.text:00000000000063D0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000063D0 ; __unwind {
.text:00000000000063D0                 push    r15
.text:00000000000063D2                 push    r14
.text:00000000000063D4                 mov     r15, rdx
.text:00000000000063D7                 push    r13
.text:00000000000063D9                 push    r12
.text:00000000000063DB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000063E2                 push    rbp
.text:00000000000063E3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000063EA                 push    rbx
.text:00000000000063EB                 mov     r13d, edi
.text:00000000000063EE                 mov     r14, rsi
.text:00000000000063F1                 sub     rbp, r12
.text:00000000000063F4                 sub     rsp, 8
.text:00000000000063F8                 sar     rbp, 3
.text:00000000000063FC                 call    _init_proc
.text:0000000000006401                 test    rbp, rbp
.text:0000000000006404                 jz      short loc_6426
.text:0000000000006406                 xor     ebx, ebx
.text:0000000000006408                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006410
.text:0000000000006410 loc_6410:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000006410                 mov     rdx, r15
.text:0000000000006413                 mov     rsi, r14
.text:0000000000006416                 mov     edi, r13d
.text:0000000000006419                 call    ds:(__frame_dummy_init_array_entry - 208A50h)[r12+rbx*8]
.text:000000000000641D                 add     rbx, 1
.text:0000000000006421                 cmp     rbp, rbx
.text:0000000000006424                 jnz     short loc_6410
.text:0000000000006426
.text:0000000000006426 loc_6426:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000006426                 add     rsp, 8
.text:000000000000642A                 pop     rbx
.text:000000000000642B                 pop     rbp
.text:000000000000642C                 pop     r12
.text:000000000000642E                 pop     r13
.text:0000000000006430                 pop     r14
.text:0000000000006432                 pop     r15
.text:0000000000006434                 retn
.text:0000000000006434 ; } // starts at 63D0
.text:0000000000006434 __libc_csu_init endp
.text:0000000000006434
.text:0000000000006434 ; ---------------------------------------------------------------------------
.text:0000000000006435                 align 20h
.text:0000000000006440
.text:0000000000006440 ; =============== S U B R O U T I N E =======================================
.text:0000000000006440
.text:0000000000006440
.text:0000000000006440 ; void _libc_csu_fini(void)
.text:0000000000006440                 public __libc_csu_fini
.text:0000000000006440 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000006440 ; __unwind {
.text:0000000000006440                 rep retn
.text:0000000000006440 ; } // starts at 6440
.text:0000000000006440 __libc_csu_fini endp
.text:0000000000006440
.text:0000000000006440 ; ---------------------------------------------------------------------------
.text:0000000000006442                 align 10h
.text:0000000000006450
.text:0000000000006450 ; =============== S U B R O U T I N E =======================================
.text:0000000000006450
.text:0000000000006450
.text:0000000000006450 atexit          proc near               ; CODE XREF: main+63↑p
.text:0000000000006450 ; __unwind {
.text:0000000000006450                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006457                 xor     esi, esi        ; obj
.text:0000000000006459                 jmp     ___cxa_atexit
.text:0000000000006459 ; } // starts at 6450
.text:0000000000006459 atexit          endp
.text:0000000000006459
.text:0000000000006459 _text           ends
.text:0000000000006459
LOAD:000000000000645E ; ===========================================================================
LOAD:000000000000645E
LOAD:000000000000645E ; Segment type: Pure code
LOAD:000000000000645E ; Segment permissions: Read/Execute
LOAD:000000000000645E LOAD            segment byte public 'CODE' use64
LOAD:000000000000645E                 assume cs:LOAD
LOAD:000000000000645E                 ;org 645Eh
LOAD:000000000000645E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000645E                 align 20h
LOAD:000000000000645E LOAD            ends
LOAD:000000000000645E
.fini:0000000000006460 ; ===========================================================================
.fini:0000000000006460
.fini:0000000000006460 ; Segment type: Pure code
.fini:0000000000006460 ; Segment permissions: Read/Execute
.fini:0000000000006460 _fini           segment dword public 'CODE' use64
.fini:0000000000006460                 assume cs:_fini
.fini:0000000000006460                 ;org 6460h
.fini:0000000000006460                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006460
.fini:0000000000006460 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006460
.fini:0000000000006460
.fini:0000000000006460                 public _term_proc
.fini:0000000000006460 _term_proc      proc near
.fini:0000000000006460                 sub     rsp, 8          ; _fini
.fini:0000000000006464                 add     rsp, 8
.fini:0000000000006468                 retn
.fini:0000000000006468 _term_proc      endp
.fini:0000000000006468
.fini:0000000000006468 _fini           ends
.fini:0000000000006468
LOAD:0000000000006469 ; ===========================================================================
LOAD:0000000000006469
LOAD:0000000000006469 ; Segment type: Pure code
LOAD:0000000000006469 ; Segment permissions: Read/Execute
LOAD:0000000000006469 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006469                 assume cs:LOAD
LOAD:0000000000006469                 ;org 6469h
LOAD:0000000000006469                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006469                 align 20h
LOAD:0000000000006469 LOAD            ends
LOAD:0000000000006469
.rodata:0000000000006480 ; ===========================================================================
.rodata:0000000000006480
.rodata:0000000000006480 ; Segment type: Pure data
.rodata:0000000000006480 ; Segment permissions: Read
.rodata:0000000000006480 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006480                 assume cs:_rodata
.rodata:0000000000006480                 ;org 6480h
.rodata:0000000000006480                 public _IO_stdin_used
.rodata:0000000000006480 _IO_stdin_used  db    1
.rodata:0000000000006481                 db    0
.rodata:0000000000006482                 db    2
.rodata:0000000000006483                 db    0
.rodata:0000000000006484 ; const char file[]
.rodata:0000000000006484 file            db '../coreutils-8.31/src/cut.c',0
.rodata:0000000000006484                                         ; DATA XREF: cut_file+7CF↑o
.rodata:00000000000064A0 ; const char assertion[]
.rodata:00000000000064A0 assertion       db 'n_bytes != 0',0     ; DATA XREF: cut_file+7D6↑o
.rodata:00000000000064AD aCut            db 'cut',0              ; DATA XREF: main+12A↑o
.rodata:00000000000064AD                                         ; usage+234↑o ...
.rodata:00000000000064B1 asc_64B1        db '[',0                ; DATA XREF: usage+240↑o
.rodata:00000000000064B3 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+267↑o
.rodata:00000000000064C3 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000064C3                                         ; DATA XREF: usage+297↑o
.rodata:00000000000064C3                                         ; usage+38C↑o ...
.rodata:00000000000064D9 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+2A8↑o
.rodata:00000000000064E3 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+2B4↑o
.rodata:00000000000064F2 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+247↑o
.rodata:00000000000064FC aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+273↑o
.rodata:0000000000006506 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+28B↑o
.rodata:0000000000006510 ; const char aSOnlineHelpS[]
.rodata:0000000000006510 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2FA↑o
.rodata:0000000000006510                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000006527 unk_6527        db  47h ; G             ; DATA XREF: main+123↑o
.rodata:0000000000006527                                         ; usage+316↑o ...
.rodata:0000000000006528                 db  4Eh ; N
.rodata:0000000000006529                 db  55h ; U
.rodata:000000000000652A                 db  20h
.rodata:000000000000652B ; const char domainname[]
.rodata:000000000000652B domainname      db 'coreutils',0        ; DATA XREF: main+44↑o
.rodata:000000000000652B                                         ; main+50↑o ...
.rodata:0000000000006535 ; const char s2[]
.rodata:0000000000006535 s2              db 'en_',0              ; DATA XREF: usage+33D↑o
.rodata:0000000000006535                                         ; usage+3FE↑o
.rodata:0000000000006539 ; const char aFullDocumentat[]
.rodata:0000000000006539 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000006539                                         ; DATA XREF: usage:loc_2AB9↑o
.rodata:0000000000006539                                         ; usage:loc_2B76↑o
.rodata:0000000000006554 ; const char dirname[]
.rodata:0000000000006554 dirname         db '/usr/local/share/locale',0
.rodata:0000000000006554                                         ; DATA XREF: main+3D↑o
.rodata:000000000000656C aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+114↑o
.rodata:000000000000657C aDavidMIhnat    db 'David M. Ihnat',0   ; DATA XREF: main+11B↑o
.rodata:000000000000658B aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+FD↑o
.rodata:0000000000006598 ; const char shortopts[]
.rodata:0000000000006598 shortopts       db 'b:c:d:f:nsz',0      ; DATA XREF: main+19↑o
.rodata:00000000000065A4 aBytes          db 'bytes',0            ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:00000000000065AA aCharacters     db 'characters',0       ; DATA XREF: .data.rel.ro:0000000000208A80↓o
.rodata:00000000000065B5 aOnlyDelimited  db 'only-delimited',0   ; DATA XREF: .data.rel.ro:0000000000208AE0↓o
.rodata:00000000000065C4 unk_65C4        db  6Fh ; o             ; DATA XREF: .data.rel.ro:0000000000208B00↓o
.rodata:00000000000065C5                 db  75h ; u
.rodata:00000000000065C6                 db  74h ; t
.rodata:00000000000065C7                 db  70h ; p
.rodata:00000000000065C8                 db  75h ; u
.rodata:00000000000065C9                 db  74h ; t
.rodata:00000000000065CA                 db  2Dh ; -
.rodata:00000000000065CB unk_65CB        db  64h ; d             ; DATA XREF: .data.rel.ro:0000000000208AC0↓o
.rodata:00000000000065CC                 db  65h ; e
.rodata:00000000000065CD                 db  6Ch ; l
.rodata:00000000000065CE                 db  69h ; i
.rodata:00000000000065CF                 db  6Dh ; m
.rodata:00000000000065D0                 db  69h ; i
.rodata:00000000000065D1                 db  74h ; t
.rodata:00000000000065D2                 db  65h ; e
.rodata:00000000000065D3 ; const char modes[2]
.rodata:00000000000065D3 modes           db 'r',0                ; DATA XREF: cut_file+534↑o
.rodata:00000000000065D5 aComplement     db 'complement',0       ; DATA XREF: .data.rel.ro:0000000000208B20↓o
.rodata:00000000000065E0 aZeroTerminated db 'zero-terminated',0  ; DATA XREF: .data.rel.ro:0000000000208B40↓o
.rodata:00000000000065F0 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000208B60↓o
.rodata:00000000000065F5 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000208B80↓o
.rodata:00000000000065FD                 align 20h
.rodata:0000000000006600 ; const char aTrySHelpForMor[]
.rodata:0000000000006600 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006600                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000006627                 align 8
.rodata:0000000000006628 ; const char aUsageSOptionFi[]
.rodata:0000000000006628 aUsageSOptionFi db 'Usage: %s OPTION... [FILE]...',0Ah,0
.rodata:0000000000006628                                         ; DATA XREF: usage:loc_27BD↑o
.rodata:0000000000006647                 align 8
.rodata:0000000000006648 ; const char aPrintSelectedP[]
.rodata:0000000000006648 aPrintSelectedP db 'Print selected parts of lines from each FILE to standard output.',0Ah
.rodata:0000000000006648                                         ; DATA XREF: usage+84↑o
.rodata:0000000000006648                 db 0
.rodata:000000000000668A                 align 10h
.rodata:0000000000006690 ; const char aWithNoFileOrWh[]
.rodata:0000000000006690 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000006690                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:00000000000066C8 ; const char aMandatoryArgum[]
.rodata:00000000000066C8 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:00000000000066C8                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:00000000000066C8                 db 'ns too.',0Ah,0
.rodata:0000000000006713                 align 8
.rodata:0000000000006718 ; const char aBBytesListSele[]
.rodata:0000000000006718 aBBytesListSele db '  -b, --bytes=LIST        select only these bytes',0Ah
.rodata:0000000000006718                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000006718                 db '  -c, --characters=LIST   select only these characters',0Ah
.rodata:0000000000006718                 db '  -d, --delimiter=DELIM   use DELIM instead of TAB for field deli'
.rodata:0000000000006718                 db 'miter',0Ah,0
.rodata:00000000000067C9                 align 10h
.rodata:00000000000067D0 ; const char aFFieldsListSel[]
.rodata:00000000000067D0 aFFieldsListSel db '  -f, --fields=LIST       select only these fields;  also print a'
.rodata:00000000000067D0                                         ; DATA XREF: usage+118↑o
.rodata:00000000000067D0                 db 'ny line',0Ah
.rodata:00000000000067D0                 db '                            that contains no delimiter character,'
.rodata:00000000000067D0                 db ' unless',0Ah
.rodata:00000000000067D0                 db '                            the -s option is specified',0Ah
.rodata:00000000000067D0                 db '  -n                      (ignored)',0Ah,0
.rodata:00000000000068BE                 align 20h
.rodata:00000000000068C0 ; const char aComplementComp[]
.rodata:00000000000068C0 aComplementComp db '      --complement        complement the set of selected bytes, c'
.rodata:00000000000068C0                                         ; DATA XREF: usage+13D↑o
.rodata:00000000000068C0                 db 'haracters',0Ah
.rodata:00000000000068C0                 db '                            or fields',0Ah,0
.rodata:0000000000006932                 align 8
.rodata:0000000000006938 ; const char aSOnlyDelimited[]
.rodata:0000000000006938 aSOnlyDelimited db '  -s, --only-delimited    do not print lines not containing delim'
.rodata:0000000000006938                                         ; DATA XREF: usage+162↑o
.rodata:0000000000006938                 db 'iters',0Ah
.rodata:0000000000006938                 db '      --output-delimiter=STRING  use STRING as the output delimit'
.rodata:0000000000006938                 db 'er',0Ah
.rodata:0000000000006938                 db '                            the default is to use the input delim'
.rodata:0000000000006938                 db 'iter',0Ah,0
.rodata:0000000000006A0A                 align 10h
.rodata:0000000000006A10 ; const char aZZeroTerminate[]
.rodata:0000000000006A10 aZZeroTerminate db '  -z, --zero-terminated    line delimiter is NUL, not newline',0Ah
.rodata:0000000000006A10                                         ; DATA XREF: usage+187↑o
.rodata:0000000000006A10                 db 0
.rodata:0000000000006A4F                 align 10h
.rodata:0000000000006A50 ; const char aHelpDisplayThi[]
.rodata:0000000000006A50 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006A50                                         ; DATA XREF: usage+1AC↑o
.rodata:0000000000006A7D                 align 20h
.rodata:0000000000006A80 ; const char aVersionOutputV[]
.rodata:0000000000006A80 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000006A80                                         ; DATA XREF: usage+1D1↑o
.rodata:0000000000006AB6                 align 8
.rodata:0000000000006AB8 ; const char aUseOneAndOnlyO[]
.rodata:0000000000006AB8 aUseOneAndOnlyO db 0Ah                  ; DATA XREF: usage+1F6↑o
.rodata:0000000000006AB8                 db 'Use one, and only one of -b, -c or -f.  Each LIST is made up of o'
.rodata:0000000000006AB8                 db 'ne',0Ah
.rodata:0000000000006AB8                 db 'range, or many ranges separated by commas.  Selected input is wri'
.rodata:0000000000006AB8                 db 'tten',0Ah
.rodata:0000000000006AB8                 db 'in the same order that it is read, and is written exactly once.',0Ah
.rodata:0000000000006AB8                 db 0
.rodata:0000000000006B84                 align 8
.rodata:0000000000006B88 ; const char aEachRangeIsOne[]
.rodata:0000000000006B88 aEachRangeIsOne db 'Each range is one of:',0Ah
.rodata:0000000000006B88                                         ; DATA XREF: usage+21B↑o
.rodata:0000000000006B88                 db 0Ah
.rodata:0000000000006B88                 db '  N     N',27h,'th byte, character or field, counted from 1',0Ah
.rodata:0000000000006B88                 db '  N-    from N',27h,'th byte, character or field, to end of line',0Ah
.rodata:0000000000006B88                 db '  N-M   from N',27h,'th to M',27h,'th (included) byte, character '
.rodata:0000000000006B88                 db 'or field',0Ah
.rodata:0000000000006B88                 db '  -M    from first to M',27h,'th (included) byte, character or fi'
.rodata:0000000000006B88                 db 'eld',0Ah,0
.rodata:0000000000006C8E                 align 10h
.rodata:0000000000006C90 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006C90                                         ; DATA XREF: usage+30F↑o
.rodata:0000000000006C90                                         ; usage+373↑o ...
.rodata:0000000000006CB8 ; const char aReportAnyTrans[]
.rodata:0000000000006CB8 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006CB8                                         ; DATA XREF: usage+467↑o
.rodata:0000000000006CB8                 db 'am/>',0Ah,0
.rodata:0000000000006CFF                 align 20h
.rodata:0000000000006D00 ; const char aOrAvailableLoc[]
.rodata:0000000000006D00 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000006D00                                         ; DATA XREF: usage:loc_2AFE↑o
.rodata:0000000000006D33                 align 8
.rodata:0000000000006D38 aOnlyOneTypeOfL db 'only one type of list may be specified',0
.rodata:0000000000006D38                                         ; DATA XREF: main+466↑o
.rodata:0000000000006D5F                 align 20h
.rodata:0000000000006D60 ; const char msgid[]
.rodata:0000000000006D60 msgid           db 'the delimiter must be a single character',0
.rodata:0000000000006D60                                         ; DATA XREF: main:loc_1E16↑o
.rodata:0000000000006D89                 align 10h
.rodata:0000000000006D90 aYouMustSpecify db 'you must specify a list of bytes, characters, or fields',0
.rodata:0000000000006D90                                         ; DATA XREF: main+253↑o
.rodata:0000000000006DC8 aAnInputDelimit db 'an input delimiter may be specified only when operating on fields'
.rodata:0000000000006DC8                                         ; DATA XREF: main+26F↑o
.rodata:0000000000006DC8                 db 0
.rodata:0000000000006E0A                 align 10h
.rodata:0000000000006E10 aSuppressingNon db 'suppressing non-delimited lines makes sense',0Ah
.rodata:0000000000006E10                                         ; DATA XREF: main+346↑o
.rodata:0000000000006E10                 db 9,'only when operating on fields',0
.rodata:0000000000006E5B                 align 20h
.rodata:0000000000006E60 ; const char _PRETTY_FUNCTION___7017[]
.rodata:0000000000006E60 __PRETTY_FUNCTION___7017 db 'cut_fields',0
.rodata:0000000000006E60                                         ; DATA XREF: cut_file:loc_2738↑o
.rodata:0000000000006E6B ; const char aInvalidFieldRa[]
.rodata:0000000000006E6B aInvalidFieldRa db 'invalid field range',0
.rodata:0000000000006E6B                                         ; DATA XREF: set_fields:loc_31FA↑o
.rodata:0000000000006E7F ; const char aFieldsAreNumbe[]
.rodata:0000000000006E7F aFieldsAreNumbe db 'fields are numbered from 1',0
.rodata:0000000000006E7F                                         ; DATA XREF: set_fields:loc_3138↑o
.rodata:0000000000006E9A ; const char aInvalidDecreas[]
.rodata:0000000000006E9A aInvalidDecreas db 'invalid decreasing range',0
.rodata:0000000000006E9A                                         ; DATA XREF: set_fields:loc_3148↑o
.rodata:0000000000006EB3 ; const char accept[]
.rodata:0000000000006EB3 accept          db '0123456789',0       ; DATA XREF: set_fields+4A4↑o
.rodata:0000000000006EBE ; const char aFieldNumberSIs[]
.rodata:0000000000006EBE aFieldNumberSIs db 'field number %s is too large',0
.rodata:0000000000006EBE                                         ; DATA XREF: set_fields:loc_320D↑o
.rodata:0000000000006EDB ; const char aInvalidFieldVa[]
.rodata:0000000000006EDB aInvalidFieldVa db 'invalid field value %s',0
.rodata:0000000000006EDB                                         ; DATA XREF: set_fields:loc_3288↑o
.rodata:0000000000006EF2 aMissingListOfF db 'missing list of fields',0
.rodata:0000000000006EF2                                         ; DATA XREF: set_fields:loc_327C↑o
.rodata:0000000000006F09                 align 10h
.rodata:0000000000006F10 ; const char aInvalidByteOrC[]
.rodata:0000000000006F10 aInvalidByteOrC db 'invalid byte or character range',0
.rodata:0000000000006F10                                         ; DATA XREF: set_fields+48D↑o
.rodata:0000000000006F30 ; const char aByteCharacterP[]
.rodata:0000000000006F30 aByteCharacterP db 'byte/character positions are numbered from 1',0
.rodata:0000000000006F30                                         ; DATA XREF: set_fields+432↑o
.rodata:0000000000006F5D                 align 20h
.rodata:0000000000006F60 aInvalidRangeWi db 'invalid range with no endpoint: -',0
.rodata:0000000000006F60                                         ; DATA XREF: set_fields+50E↑o
.rodata:0000000000006F82                 align 8
.rodata:0000000000006F88 ; const char aByteCharacterO[]
.rodata:0000000000006F88 aByteCharacterO db 'byte/character offset %s is too large',0
.rodata:0000000000006F88                                         ; DATA XREF: set_fields+4D8↑o
.rodata:0000000000006FAE                 align 10h
.rodata:0000000000006FB0 ; const char aInvalidByteCha[]
.rodata:0000000000006FB0 aInvalidByteCha db 'invalid byte/character position %s',0
.rodata:0000000000006FB0                                         ; DATA XREF: set_fields+573↑o
.rodata:0000000000006FD3                 align 8
.rodata:0000000000006FD8 ; const char aMissingListOfB[]
.rodata:0000000000006FD8 aMissingListOfB db 'missing list of byte/character positions',0
.rodata:0000000000006FD8                                         ; DATA XREF: set_fields+549↑o
.rodata:0000000000007001 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000007006 ; const char aWriteError[]
.rodata:0000000000007006 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3343↑o
.rodata:0000000000007012 ; const char aS[4]
.rodata:0000000000007012 aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000007016 ; const char format[]
.rodata:0000000000007016 format          dd offset jpt_403A+1Dh  ; DATA XREF: cut_file+566↑o
.rodata:0000000000007016                                         ; close_stdout+8F↑o ...
.rodata:000000000000701A                 align 20h
.rodata:0000000000007020 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000007020                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000007058 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000007060 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000007060                                         ; main+3AB↑o ...
.rodata:0000000000007064 unk_7064        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000007065                 db  80h
.rodata:0000000000007066                 db  98h
.rodata:0000000000007067                 db    0
.rodata:0000000000007068 unk_7068        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000007069                 db  80h
.rodata:000000000000706A                 db  99h
.rodata:000000000000706B                 db    0
.rodata:000000000000706C unk_706C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000706D                 db    7
.rodata:000000000000706E                 db  65h ; e
.rodata:000000000000706F                 db    0
.rodata:0000000000007070 unk_7070        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000007071                 db 0AFh
.rodata:0000000000007072                 db    0
.rodata:0000000000007073 unk_7073        db  22h ; "             ; DATA XREF: gettext_quote:loc_39F0↑o
.rodata:0000000000007073                                         ; quotearg_buffer_restyled:loc_47AB↑o ...
.rodata:0000000000007074                 db    0
.rodata:0000000000007075 ; const char asc_7075[2]
.rodata:0000000000007075 asc_7075        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000007075                                         ; quotearg_buffer_restyled:loc_3B73↑o ...
.rodata:0000000000007077 ; const char asc_7077[2]
.rodata:0000000000007077 asc_7077        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000007077                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000007079 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000007081 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000208BC8↓o
.rodata:0000000000007087 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000208BD0↓o
.rodata:0000000000007094 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000208BD8↓o
.rodata:0000000000007094                                         ; .data.rel.ro:0000000000208BF8↓o
.rodata:00000000000070A1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:00000000000070A1                                         ; DATA XREF: .data.rel.ro:0000000000208BE0↓o
.rodata:00000000000070B5 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000208BF0↓o
.rodata:00000000000070BD aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000208C08↓o
.rodata:00000000000070C5                 align 20h
.rodata:00000000000070E0 jpt_3B51        dd offset loc_48FA - 70E0h
.rodata:00000000000070E0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000070E0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000070E0                 dd offset loc_3B53 - 70E0h ; jump table for switch statement
.rodata:00000000000070E0                 dd offset loc_4B28 - 70E0h
.rodata:00000000000070E0                 dd offset loc_4934 - 70E0h
.rodata:00000000000070E0                 dd offset loc_4724 - 70E0h
.rodata:00000000000070E0                 dd offset loc_4780 - 70E0h
.rodata:00000000000070E0                 dd offset loc_47D5 - 70E0h
.rodata:00000000000070E0                 dd offset loc_481A - 70E0h
.rodata:00000000000070E0                 dd offset loc_4854 - 70E0h
.rodata:00000000000070E0                 dd offset loc_4854 - 70E0h
.rodata:00000000000070E0                 dd offset loc_4854 - 70E0h
.rodata:000000000000710C jpt_3CAE        dd offset loc_3ED0 - 710Ch, offset def_3CAE - 710Ch, offset def_3CAE - 710Ch
.rodata:000000000000710C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000710C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000710C                 dd offset def_3CAE - 710Ch, offset def_3CAE - 710Ch, offset def_3CAE - 710Ch ; jump table for switch statement
.rodata:000000000000710C                 dd offset def_3CAE - 710Ch, offset loc_3F10 - 710Ch, offset loc_3E18 - 710Ch
.rodata:000000000000710C                 dd offset loc_3DD8 - 710Ch, offset loc_3FA0 - 710Ch, offset loc_3F90 - 710Ch
.rodata:000000000000710C                 dd offset loc_3F80 - 710Ch, offset loc_3F70 - 710Ch, offset def_3CAE - 710Ch
.rodata:000000000000710C                 dd offset def_3CAE - 710Ch, offset def_3CAE - 710Ch, offset def_3CAE - 710Ch
.rodata:000000000000710C                 dd offset def_3CAE - 710Ch, offset def_3CAE - 710Ch, offset def_3CAE - 710Ch
.rodata:000000000000710C                 dd offset def_3CAE - 710Ch, offset def_3CAE - 710Ch, offset def_3CAE - 710Ch
.rodata:000000000000710C                 dd offset def_3CAE - 710Ch, offset def_3CAE - 710Ch, offset def_3CAE - 710Ch
.rodata:000000000000710C                 dd offset def_3CAE - 710Ch, offset def_3CAE - 710Ch, offset def_3CAE - 710Ch
.rodata:000000000000710C                 dd offset def_3CAE - 710Ch, offset def_3CAE - 710Ch, offset loc_3F60 - 710Ch
.rodata:000000000000710C                 dd offset loc_3F50 - 710Ch, offset loc_3F50 - 710Ch, offset loc_3F20 - 710Ch
.rodata:000000000000710C                 dd offset loc_3F50 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3F50 - 710Ch
.rodata:000000000000710C                 dd offset loc_3DB3 - 710Ch, offset loc_3F50 - 710Ch, offset loc_3F50 - 710Ch
.rodata:000000000000710C                 dd offset loc_3F50 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3F50 - 710Ch
.rodata:000000000000710C                 dd offset loc_3F50 - 710Ch, offset loc_3F50 - 710Ch, offset loc_3F50 - 710Ch
.rodata:000000000000710C                 dd offset loc_3D83 - 710Ch, offset def_3CAE - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3F50 - 710Ch, offset loc_3E28 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3F50 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3F50 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch, offset loc_3EF8 - 710Ch
.rodata:000000000000710C                 dd offset loc_3CB3 - 710Ch, offset loc_3F50 - 710Ch, offset loc_3CB3 - 710Ch
.rodata:000000000000710C                 dd offset loc_3F20 - 710Ch
.rodata:0000000000007308 jpt_403A        dd offset loc_40A0 - 7308h, offset def_403A - 7308h, offset def_403A - 7308h
.rodata:0000000000007308                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000007308                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000007308                 dd offset def_403A - 7308h, offset def_403A - 7308h, offset def_403A - 7308h ; jump table for switch statement
.rodata:0000000000007308                 dd offset def_403A - 7308h, offset loc_4090 - 7308h, offset loc_41E0 - 7308h
.rodata:0000000000007308                 dd offset loc_41C8 - 7308h, offset loc_4078 - 7308h, offset loc_41B8 - 7308h
.rodata:0000000000007308                 dd offset loc_4060 - 7308h, offset loc_41A0 - 7308h, offset def_403A - 7308h
.rodata:0000000000007308                 dd offset def_403A - 7308h, offset def_403A - 7308h, offset def_403A - 7308h
.rodata:0000000000007308                 dd offset def_403A - 7308h, offset def_403A - 7308h, offset def_403A - 7308h
.rodata:0000000000007308                 dd offset def_403A - 7308h, offset def_403A - 7308h, offset def_403A - 7308h
.rodata:0000000000007308                 dd offset def_403A - 7308h, offset def_403A - 7308h, offset def_403A - 7308h
.rodata:0000000000007308                 dd offset def_403A - 7308h, offset def_403A - 7308h, offset def_403A - 7308h
.rodata:0000000000007308                 dd offset def_403A - 7308h, offset def_403A - 7308h, offset loc_4188 - 7308h
.rodata:0000000000007308                 dd offset loc_4170 - 7308h, offset loc_4170 - 7308h, offset loc_4158 - 7308h
.rodata:0000000000007308                 dd offset loc_4170 - 7308h, offset loc_4140 - 7308h, offset loc_4170 - 7308h
.rodata:0000000000007308                 dd offset loc_3DB0 - 7308h, offset loc_4170 - 7308h, offset loc_4170 - 7308h
.rodata:0000000000007308                 dd offset loc_4170 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4170 - 7308h
.rodata:0000000000007308                 dd offset loc_4170 - 7308h, offset loc_4170 - 7308h, offset loc_4170 - 7308h
.rodata:0000000000007308                 dd offset loc_3D80 - 7308h, offset def_403A - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4170 - 7308h, offset loc_4040 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4170 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4170 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_4140 - 7308h, offset loc_4140 - 7308h, offset loc_4140 - 7308h
.rodata:0000000000007308                 dd offset loc_3CB0 - 7308h, offset loc_4170 - 7308h, offset loc_3CB0 - 7308h
.rodata:0000000000007308                 dd offset loc_4158 - 7308h
.rodata:0000000000007504                 align 20h
.rodata:0000000000007520                 public quoting_style_vals
.rodata:0000000000007520 quoting_style_vals db    0
.rodata:0000000000007521                 db    0
.rodata:0000000000007522                 db    0
.rodata:0000000000007523                 db    0
.rodata:0000000000007524                 db    1
.rodata:0000000000007525                 db    0
.rodata:0000000000007526                 db    0
.rodata:0000000000007527                 db    0
.rodata:0000000000007528                 db    2
.rodata:0000000000007529                 db    0
.rodata:000000000000752A                 db    0
.rodata:000000000000752B                 db    0
.rodata:000000000000752C                 db    3
.rodata:000000000000752D                 db    0
.rodata:000000000000752E                 db    0
.rodata:000000000000752F                 db    0
.rodata:0000000000007530                 db    4
.rodata:0000000000007531                 db    0
.rodata:0000000000007532                 db    0
.rodata:0000000000007533                 db    0
.rodata:0000000000007534                 db    5
.rodata:0000000000007535                 db    0
.rodata:0000000000007536                 db    0
.rodata:0000000000007537                 db    0
.rodata:0000000000007538                 db    6
.rodata:0000000000007539                 db    0
.rodata:000000000000753A                 db    0
.rodata:000000000000753B                 db    0
.rodata:000000000000753C                 db    7
.rodata:000000000000753D                 db    0
.rodata:000000000000753E                 db    0
.rodata:000000000000753F                 db    0
.rodata:0000000000007540                 db    8
.rodata:0000000000007541                 db    0
.rodata:0000000000007542                 db    0
.rodata:0000000000007543                 db    0
.rodata:0000000000007544                 db    9
.rodata:0000000000007545                 db    0
.rodata:0000000000007546                 db    0
.rodata:0000000000007547                 db    0
.rodata:0000000000007548 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000007554 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000755B ; const char aC_0[]
.rodata:000000000000755B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_569C↑o
.rodata:000000000000755F ; const char aWrittenByS[]
.rodata:000000000000755F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000755F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000756F ; const char aWrittenBySAndS[]
.rodata:000000000000756F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000756F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000007586 ; const char aWrittenBySSAnd[]
.rodata:0000000000007586 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000007586                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:00000000000075A2 ; const char aReportBugsToS[]
.rodata:00000000000075A2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:00000000000075A2                 db 'Report bugs to: %s',0Ah,0
.rodata:00000000000075B7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:00000000000075B7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:00000000000075CD ; const char aSHomePageS[]
.rodata:00000000000075CD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:00000000000075CD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000075E1                 align 8
.rodata:00000000000075E8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000075E8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000075E8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000075E8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000075E8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000075E8                 db '.',0Ah
.rodata:00000000000075E8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000075E8                 db 0Ah,0
.rodata:00000000000076B4                 align 8
.rodata:00000000000076B8 ; const char aWrittenBySSSAn[]
.rodata:00000000000076B8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000076B8                                         ; DATA XREF: version_etc_arn:loc_58F0↑o
.rodata:00000000000076B8                 db 'and %s.',0Ah,0
.rodata:00000000000076D8 ; const char aWrittenBySSSSA[]
.rodata:00000000000076D8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000076D8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000076D8                 db '%s, and %s.',0Ah,0
.rodata:00000000000076FC                 align 20h
.rodata:0000000000007700 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000007700 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007700                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000007700                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000007728 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000007728 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007728                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000007728                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000007754                 align 8
.rodata:0000000000007758 ; const char aWrittenBySSSSS[]
.rodata:0000000000007758 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007758                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000007758                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007758                 db 'and %s.',0Ah,0
.rodata:0000000000007788 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000007788 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007788                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000007788                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007788                 db '%s, and %s.',0Ah,0
.rodata:00000000000077BC                 align 20h
.rodata:00000000000077C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000077C0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000077C0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000077C0                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000077FC                 align 20h
.rodata:0000000000007800 ; const char aGeneralHelpUsi[]
.rodata:0000000000007800 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000007800                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000007800                 db 0
.rodata:0000000000007841                 align 8
.rodata:0000000000007848 jpt_5704        dd offset loc_5786 - 7848h
.rodata:0000000000007848                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000007848                                         ; version_etc_arn+9D↑r
.rodata:0000000000007848                 dd offset loc_5818 - 7848h ; jump table for switch statement
.rodata:0000000000007848                 dd offset loc_5858 - 7848h
.rodata:0000000000007848                 dd offset loc_58A0 - 7848h
.rodata:0000000000007848                 dd offset loc_58F0 - 7848h
.rodata:0000000000007848                 dd offset loc_5948 - 7848h
.rodata:0000000000007848                 dd offset loc_5978 - 7848h
.rodata:0000000000007848                 dd offset loc_59E0 - 7848h
.rodata:0000000000007848                 dd offset loc_5710 - 7848h
.rodata:0000000000007848                 dd offset loc_57C0 - 7848h
.rodata:0000000000007870                 align 20h
.rodata:0000000000007880                 public version_etc_copyright
.rodata:0000000000007880 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000007880                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000078AF ; const char aMemoryExhauste[]
.rodata:00000000000078AF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000078C0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000078C2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_6340↑o
.rodata:00000000000078C8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000078C8                                         ; locale_charset:loc_6390↑o
.rodata:00000000000078C8 _rodata         ends
.rodata:00000000000078C8
LOAD:00000000000078CE ; ===========================================================================
LOAD:00000000000078CE
LOAD:00000000000078CE ; Segment type: Pure code
LOAD:00000000000078CE ; Segment permissions: Read/Execute
LOAD:00000000000078CE LOAD            segment byte public 'CODE' use64
LOAD:00000000000078CE                 assume cs:LOAD
LOAD:00000000000078CE                 ;org 78CEh
LOAD:00000000000078CE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000078CE                 align 10h
LOAD:00000000000078CE LOAD            ends
LOAD:00000000000078CE
.eh_frame_hdr:00000000000078D0 ; ===========================================================================
.eh_frame_hdr:00000000000078D0
.eh_frame_hdr:00000000000078D0 ; Segment type: Pure data
.eh_frame_hdr:00000000000078D0 ; Segment permissions: Read
.eh_frame_hdr:00000000000078D0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000078D0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000078D0                 ;org 78D0h
.eh_frame_hdr:00000000000078D0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000078D1                 db  1Bh
.eh_frame_hdr:00000000000078D2                 db    3
.eh_frame_hdr:00000000000078D3                 db  3Bh ; ;
.eh_frame_hdr:00000000000078D4                 db 0A4h
.eh_frame_hdr:00000000000078D5                 db    2
.eh_frame_hdr:00000000000078D6                 db    0
.eh_frame_hdr:00000000000078D7                 db    0
.eh_frame_hdr:00000000000078D8                 db  53h ; S
.eh_frame_hdr:00000000000078D9                 db    0
.eh_frame_hdr:00000000000078DA                 db    0
.eh_frame_hdr:00000000000078DB                 db    0
.eh_frame_hdr:00000000000078DC                 db  90h
.eh_frame_hdr:00000000000078DD                 db  9Dh
.eh_frame_hdr:00000000000078DE                 db 0FFh
.eh_frame_hdr:00000000000078DF                 db 0FFh
.eh_frame_hdr:00000000000078E0                 db 0F0h
.eh_frame_hdr:00000000000078E1                 db    2
.eh_frame_hdr:00000000000078E2                 db    0
.eh_frame_hdr:00000000000078E3                 db    0
.eh_frame_hdr:00000000000078E4                 db  10h
.eh_frame_hdr:00000000000078E5                 db 0A1h
.eh_frame_hdr:00000000000078E6                 db 0FFh
.eh_frame_hdr:00000000000078E7                 db 0FFh
.eh_frame_hdr:00000000000078E8                 db  18h
.eh_frame_hdr:00000000000078E9                 db    3
.eh_frame_hdr:00000000000078EA                 db    0
.eh_frame_hdr:00000000000078EB                 db    0
.eh_frame_hdr:00000000000078EC                 db  20h
.eh_frame_hdr:00000000000078ED                 db 0A1h
.eh_frame_hdr:00000000000078EE                 db 0FFh
.eh_frame_hdr:00000000000078EF                 db 0FFh
.eh_frame_hdr:00000000000078F0                 db 0E8h
.eh_frame_hdr:00000000000078F1                 db    3
.eh_frame_hdr:00000000000078F2                 db    0
.eh_frame_hdr:00000000000078F3                 db    0
.eh_frame_hdr:00000000000078F4                 db  90h
.eh_frame_hdr:00000000000078F5                 db 0A5h
.eh_frame_hdr:00000000000078F6                 db 0FFh
.eh_frame_hdr:00000000000078F7                 db 0FFh
.eh_frame_hdr:00000000000078F8                 db 0C0h
.eh_frame_hdr:00000000000078F9                 db    2
.eh_frame_hdr:00000000000078FA                 db    0
.eh_frame_hdr:00000000000078FB                 db    0
.eh_frame_hdr:00000000000078FC                 db 0A0h
.eh_frame_hdr:00000000000078FD                 db 0A6h
.eh_frame_hdr:00000000000078FE                 db 0FFh
.eh_frame_hdr:00000000000078FF                 db 0FFh
.eh_frame_hdr:0000000000007900                 db  30h ; 0
.eh_frame_hdr:0000000000007901                 db    3
.eh_frame_hdr:0000000000007902                 db    0
.eh_frame_hdr:0000000000007903                 db    0
.eh_frame_hdr:0000000000007904                 db  90h
.eh_frame_hdr:0000000000007905                 db 0AEh
.eh_frame_hdr:0000000000007906                 db 0FFh
.eh_frame_hdr:0000000000007907                 db 0FFh
.eh_frame_hdr:0000000000007908                 db 0BCh
.eh_frame_hdr:0000000000007909                 db    3
.eh_frame_hdr:000000000000790A                 db    0
.eh_frame_hdr:000000000000790B                 db    0
.eh_frame_hdr:000000000000790C                 db  20h
.eh_frame_hdr:000000000000790D                 db 0B3h
.eh_frame_hdr:000000000000790E                 db 0FFh
.eh_frame_hdr:000000000000790F                 db 0FFh
.eh_frame_hdr:0000000000007910                 db  40h ; @
.eh_frame_hdr:0000000000007911                 db    4
.eh_frame_hdr:0000000000007912                 db    0
.eh_frame_hdr:0000000000007913                 db    0
.eh_frame_hdr:0000000000007914                 db  40h ; @
.eh_frame_hdr:0000000000007915                 db 0B3h
.eh_frame_hdr:0000000000007916                 db 0FFh
.eh_frame_hdr:0000000000007917                 db 0FFh
.eh_frame_hdr:0000000000007918                 db  54h ; T
.eh_frame_hdr:0000000000007919                 db    4
.eh_frame_hdr:000000000000791A                 db    0
.eh_frame_hdr:000000000000791B                 db    0
.eh_frame_hdr:000000000000791C                 db  10h
.eh_frame_hdr:000000000000791D                 db 0B4h
.eh_frame_hdr:000000000000791E                 db 0FFh
.eh_frame_hdr:000000000000791F                 db 0FFh
.eh_frame_hdr:0000000000007920                 db  80h
.eh_frame_hdr:0000000000007921                 db    4
.eh_frame_hdr:0000000000007922                 db    0
.eh_frame_hdr:0000000000007923                 db    0
.eh_frame_hdr:0000000000007924                 db 0D0h
.eh_frame_hdr:0000000000007925                 db 0B9h
.eh_frame_hdr:0000000000007926                 db 0FFh
.eh_frame_hdr:0000000000007927                 db 0FFh
.eh_frame_hdr:0000000000007928                 db 0CCh
.eh_frame_hdr:0000000000007929                 db    4
.eh_frame_hdr:000000000000792A                 db    0
.eh_frame_hdr:000000000000792B                 db    0
.eh_frame_hdr:000000000000792C                 db  10h
.eh_frame_hdr:000000000000792D                 db 0BAh
.eh_frame_hdr:000000000000792E                 db 0FFh
.eh_frame_hdr:000000000000792F                 db 0FFh
.eh_frame_hdr:0000000000007930                 db 0E8h
.eh_frame_hdr:0000000000007931                 db    4
.eh_frame_hdr:0000000000007932                 db    0
.eh_frame_hdr:0000000000007933                 db    0
.eh_frame_hdr:0000000000007934                 db  20h
.eh_frame_hdr:0000000000007935                 db 0BAh
.eh_frame_hdr:0000000000007936                 db 0FFh
.eh_frame_hdr:0000000000007937                 db 0FFh
.eh_frame_hdr:0000000000007938                 db 0FCh
.eh_frame_hdr:0000000000007939                 db    4
.eh_frame_hdr:000000000000793A                 db    0
.eh_frame_hdr:000000000000793B                 db    0
.eh_frame_hdr:000000000000793C                 db  30h ; 0
.eh_frame_hdr:000000000000793D                 db 0BAh
.eh_frame_hdr:000000000000793E                 db 0FFh
.eh_frame_hdr:000000000000793F                 db 0FFh
.eh_frame_hdr:0000000000007940                 db  10h
.eh_frame_hdr:0000000000007941                 db    5
.eh_frame_hdr:0000000000007942                 db    0
.eh_frame_hdr:0000000000007943                 db    0
.eh_frame_hdr:0000000000007944                 db 0E0h
.eh_frame_hdr:0000000000007945                 db 0BAh
.eh_frame_hdr:0000000000007946                 db 0FFh
.eh_frame_hdr:0000000000007947                 db 0FFh
.eh_frame_hdr:0000000000007948                 db  40h ; @
.eh_frame_hdr:0000000000007949                 db    5
.eh_frame_hdr:000000000000794A                 db    0
.eh_frame_hdr:000000000000794B                 db    0
.eh_frame_hdr:000000000000794C                 db 0F0h
.eh_frame_hdr:000000000000794D                 db 0BAh
.eh_frame_hdr:000000000000794E                 db 0FFh
.eh_frame_hdr:000000000000794F                 db 0FFh
.eh_frame_hdr:0000000000007950                 db  54h ; T
.eh_frame_hdr:0000000000007951                 db    5
.eh_frame_hdr:0000000000007952                 db    0
.eh_frame_hdr:0000000000007953                 db    0
.eh_frame_hdr:0000000000007954                 db  20h
.eh_frame_hdr:0000000000007955                 db 0BBh
.eh_frame_hdr:0000000000007956                 db 0FFh
.eh_frame_hdr:0000000000007957                 db 0FFh
.eh_frame_hdr:0000000000007958                 db  70h ; p
.eh_frame_hdr:0000000000007959                 db    5
.eh_frame_hdr:000000000000795A                 db    0
.eh_frame_hdr:000000000000795B                 db    0
.eh_frame_hdr:000000000000795C                 db 0A0h
.eh_frame_hdr:000000000000795D                 db 0BEh
.eh_frame_hdr:000000000000795E                 db 0FFh
.eh_frame_hdr:000000000000795F                 db 0FFh
.eh_frame_hdr:0000000000007960                 db 0C0h
.eh_frame_hdr:0000000000007961                 db    5
.eh_frame_hdr:0000000000007962                 db    0
.eh_frame_hdr:0000000000007963                 db    0
.eh_frame_hdr:0000000000007964                 db  60h ; `
.eh_frame_hdr:0000000000007965                 db 0C0h
.eh_frame_hdr:0000000000007966                 db 0FFh
.eh_frame_hdr:0000000000007967                 db 0FFh
.eh_frame_hdr:0000000000007968                 db  30h ; 0
.eh_frame_hdr:0000000000007969                 db    6
.eh_frame_hdr:000000000000796A                 db    0
.eh_frame_hdr:000000000000796B                 db    0
.eh_frame_hdr:000000000000796C                 db    0
.eh_frame_hdr:000000000000796D                 db 0C1h
.eh_frame_hdr:000000000000796E                 db 0FFh
.eh_frame_hdr:000000000000796F                 db 0FFh
.eh_frame_hdr:0000000000007970                 db  50h ; P
.eh_frame_hdr:0000000000007971                 db    6
.eh_frame_hdr:0000000000007972                 db    0
.eh_frame_hdr:0000000000007973                 db    0
.eh_frame_hdr:0000000000007974                 db 0F0h
.eh_frame_hdr:0000000000007975                 db 0C1h
.eh_frame_hdr:0000000000007976                 db 0FFh
.eh_frame_hdr:0000000000007977                 db 0FFh
.eh_frame_hdr:0000000000007978                 db  94h
.eh_frame_hdr:0000000000007979                 db    6
.eh_frame_hdr:000000000000797A                 db    0
.eh_frame_hdr:000000000000797B                 db    0
.eh_frame_hdr:000000000000797C                 db  30h ; 0
.eh_frame_hdr:000000000000797D                 db 0D4h
.eh_frame_hdr:000000000000797E                 db 0FFh
.eh_frame_hdr:000000000000797F                 db 0FFh
.eh_frame_hdr:0000000000007980                 db  0Ch
.eh_frame_hdr:0000000000007981                 db    7
.eh_frame_hdr:0000000000007982                 db    0
.eh_frame_hdr:0000000000007983                 db    0
.eh_frame_hdr:0000000000007984                 db 0E0h
.eh_frame_hdr:0000000000007985                 db 0D5h
.eh_frame_hdr:0000000000007986                 db 0FFh
.eh_frame_hdr:0000000000007987                 db 0FFh
.eh_frame_hdr:0000000000007988                 db  78h ; x
.eh_frame_hdr:0000000000007989                 db    7
.eh_frame_hdr:000000000000798A                 db    0
.eh_frame_hdr:000000000000798B                 db    0
.eh_frame_hdr:000000000000798C                 db  20h
.eh_frame_hdr:000000000000798D                 db 0D6h
.eh_frame_hdr:000000000000798E                 db 0FFh
.eh_frame_hdr:000000000000798F                 db 0FFh
.eh_frame_hdr:0000000000007990                 db 0A4h
.eh_frame_hdr:0000000000007991                 db    7
.eh_frame_hdr:0000000000007992                 db    0
.eh_frame_hdr:0000000000007993                 db    0
.eh_frame_hdr:0000000000007994                 db  40h ; @
.eh_frame_hdr:0000000000007995                 db 0D6h
.eh_frame_hdr:0000000000007996                 db 0FFh
.eh_frame_hdr:0000000000007997                 db 0FFh
.eh_frame_hdr:0000000000007998                 db 0B8h
.eh_frame_hdr:0000000000007999                 db    7
.eh_frame_hdr:000000000000799A                 db    0
.eh_frame_hdr:000000000000799B                 db    0
.eh_frame_hdr:000000000000799C                 db  60h ; `
.eh_frame_hdr:000000000000799D                 db 0D6h
.eh_frame_hdr:000000000000799E                 db 0FFh
.eh_frame_hdr:000000000000799F                 db 0FFh
.eh_frame_hdr:00000000000079A0                 db 0CCh
.eh_frame_hdr:00000000000079A1                 db    7
.eh_frame_hdr:00000000000079A2                 db    0
.eh_frame_hdr:00000000000079A3                 db    0
.eh_frame_hdr:00000000000079A4                 db 0A0h
.eh_frame_hdr:00000000000079A5                 db 0D6h
.eh_frame_hdr:00000000000079A6                 db 0FFh
.eh_frame_hdr:00000000000079A7                 db 0FFh
.eh_frame_hdr:00000000000079A8                 db 0E0h
.eh_frame_hdr:00000000000079A9                 db    7
.eh_frame_hdr:00000000000079AA                 db    0
.eh_frame_hdr:00000000000079AB                 db    0
.eh_frame_hdr:00000000000079AC                 db 0C0h
.eh_frame_hdr:00000000000079AD                 db 0D6h
.eh_frame_hdr:00000000000079AE                 db 0FFh
.eh_frame_hdr:00000000000079AF                 db 0FFh
.eh_frame_hdr:00000000000079B0                 db 0F4h
.eh_frame_hdr:00000000000079B1                 db    7
.eh_frame_hdr:00000000000079B2                 db    0
.eh_frame_hdr:00000000000079B3                 db    0
.eh_frame_hdr:00000000000079B4                 db 0F0h
.eh_frame_hdr:00000000000079B5                 db 0D6h
.eh_frame_hdr:00000000000079B6                 db 0FFh
.eh_frame_hdr:00000000000079B7                 db 0FFh
.eh_frame_hdr:00000000000079B8                 db    8
.eh_frame_hdr:00000000000079B9                 db    8
.eh_frame_hdr:00000000000079BA                 db    0
.eh_frame_hdr:00000000000079BB                 db    0
.eh_frame_hdr:00000000000079BC                 db  70h ; p
.eh_frame_hdr:00000000000079BD                 db 0D7h
.eh_frame_hdr:00000000000079BE                 db 0FFh
.eh_frame_hdr:00000000000079BF                 db 0FFh
.eh_frame_hdr:00000000000079C0                 db  5Ch ; \
.eh_frame_hdr:00000000000079C1                 db    8
.eh_frame_hdr:00000000000079C2                 db    0
.eh_frame_hdr:00000000000079C3                 db    0
.eh_frame_hdr:00000000000079C4                 db  60h ; `
.eh_frame_hdr:00000000000079C5                 db 0D8h
.eh_frame_hdr:00000000000079C6                 db 0FFh
.eh_frame_hdr:00000000000079C7                 db 0FFh
.eh_frame_hdr:00000000000079C8                 db 0C8h
.eh_frame_hdr:00000000000079C9                 db    8
.eh_frame_hdr:00000000000079CA                 db    0
.eh_frame_hdr:00000000000079CB                 db    0
.eh_frame_hdr:00000000000079CC                 db  70h ; p
.eh_frame_hdr:00000000000079CD                 db 0D8h
.eh_frame_hdr:00000000000079CE                 db 0FFh
.eh_frame_hdr:00000000000079CF                 db 0FFh
.eh_frame_hdr:00000000000079D0                 db 0DCh
.eh_frame_hdr:00000000000079D1                 db    8
.eh_frame_hdr:00000000000079D2                 db    0
.eh_frame_hdr:00000000000079D3                 db    0
.eh_frame_hdr:00000000000079D4                 db  10h
.eh_frame_hdr:00000000000079D5                 db 0D9h
.eh_frame_hdr:00000000000079D6                 db 0FFh
.eh_frame_hdr:00000000000079D7                 db 0FFh
.eh_frame_hdr:00000000000079D8                 db    8
.eh_frame_hdr:00000000000079D9                 db    9
.eh_frame_hdr:00000000000079DA                 db    0
.eh_frame_hdr:00000000000079DB                 db    0
.eh_frame_hdr:00000000000079DC                 db  30h ; 0
.eh_frame_hdr:00000000000079DD                 db 0D9h
.eh_frame_hdr:00000000000079DE                 db 0FFh
.eh_frame_hdr:00000000000079DF                 db 0FFh
.eh_frame_hdr:00000000000079E0                 db  1Ch
.eh_frame_hdr:00000000000079E1                 db    9
.eh_frame_hdr:00000000000079E2                 db    0
.eh_frame_hdr:00000000000079E3                 db    0
.eh_frame_hdr:00000000000079E4                 db  40h ; @
.eh_frame_hdr:00000000000079E5                 db 0D9h
.eh_frame_hdr:00000000000079E6                 db 0FFh
.eh_frame_hdr:00000000000079E7                 db 0FFh
.eh_frame_hdr:00000000000079E8                 db  30h ; 0
.eh_frame_hdr:00000000000079E9                 db    9
.eh_frame_hdr:00000000000079EA                 db    0
.eh_frame_hdr:00000000000079EB                 db    0
.eh_frame_hdr:00000000000079EC                 db  60h ; `
.eh_frame_hdr:00000000000079ED                 db 0D9h
.eh_frame_hdr:00000000000079EE                 db 0FFh
.eh_frame_hdr:00000000000079EF                 db 0FFh
.eh_frame_hdr:00000000000079F0                 db  44h ; D
.eh_frame_hdr:00000000000079F1                 db    9
.eh_frame_hdr:00000000000079F2                 db    0
.eh_frame_hdr:00000000000079F3                 db    0
.eh_frame_hdr:00000000000079F4                 db  80h
.eh_frame_hdr:00000000000079F5                 db 0D9h
.eh_frame_hdr:00000000000079F6                 db 0FFh
.eh_frame_hdr:00000000000079F7                 db 0FFh
.eh_frame_hdr:00000000000079F8                 db  58h ; X
.eh_frame_hdr:00000000000079F9                 db    9
.eh_frame_hdr:00000000000079FA                 db    0
.eh_frame_hdr:00000000000079FB                 db    0
.eh_frame_hdr:00000000000079FC                 db  10h
.eh_frame_hdr:00000000000079FD                 db 0DAh
.eh_frame_hdr:00000000000079FE                 db 0FFh
.eh_frame_hdr:00000000000079FF                 db 0FFh
.eh_frame_hdr:0000000000007A00                 db  74h ; t
.eh_frame_hdr:0000000000007A01                 db    9
.eh_frame_hdr:0000000000007A02                 db    0
.eh_frame_hdr:0000000000007A03                 db    0
.eh_frame_hdr:0000000000007A04                 db 0A0h
.eh_frame_hdr:0000000000007A05                 db 0DAh
.eh_frame_hdr:0000000000007A06                 db 0FFh
.eh_frame_hdr:0000000000007A07                 db 0FFh
.eh_frame_hdr:0000000000007A08                 db  90h
.eh_frame_hdr:0000000000007A09                 db    9
.eh_frame_hdr:0000000000007A0A                 db    0
.eh_frame_hdr:0000000000007A0B                 db    0
.eh_frame_hdr:0000000000007A0C                 db 0B0h
.eh_frame_hdr:0000000000007A0D                 db 0DAh
.eh_frame_hdr:0000000000007A0E                 db 0FFh
.eh_frame_hdr:0000000000007A0F                 db 0FFh
.eh_frame_hdr:0000000000007A10                 db 0A4h
.eh_frame_hdr:0000000000007A11                 db    9
.eh_frame_hdr:0000000000007A12                 db    0
.eh_frame_hdr:0000000000007A13                 db    0
.eh_frame_hdr:0000000000007A14                 db 0C0h
.eh_frame_hdr:0000000000007A15                 db 0DAh
.eh_frame_hdr:0000000000007A16                 db 0FFh
.eh_frame_hdr:0000000000007A17                 db 0FFh
.eh_frame_hdr:0000000000007A18                 db 0B8h
.eh_frame_hdr:0000000000007A19                 db    9
.eh_frame_hdr:0000000000007A1A                 db    0
.eh_frame_hdr:0000000000007A1B                 db    0
.eh_frame_hdr:0000000000007A1C                 db  60h ; `
.eh_frame_hdr:0000000000007A1D                 db 0DBh
.eh_frame_hdr:0000000000007A1E                 db 0FFh
.eh_frame_hdr:0000000000007A1F                 db 0FFh
.eh_frame_hdr:0000000000007A20                 db 0D4h
.eh_frame_hdr:0000000000007A21                 db    9
.eh_frame_hdr:0000000000007A22                 db    0
.eh_frame_hdr:0000000000007A23                 db    0
.eh_frame_hdr:0000000000007A24                 db  70h ; p
.eh_frame_hdr:0000000000007A25                 db 0DBh
.eh_frame_hdr:0000000000007A26                 db 0FFh
.eh_frame_hdr:0000000000007A27                 db 0FFh
.eh_frame_hdr:0000000000007A28                 db 0E8h
.eh_frame_hdr:0000000000007A29                 db    9
.eh_frame_hdr:0000000000007A2A                 db    0
.eh_frame_hdr:0000000000007A2B                 db    0
.eh_frame_hdr:0000000000007A2C                 db  90h
.eh_frame_hdr:0000000000007A2D                 db 0DBh
.eh_frame_hdr:0000000000007A2E                 db 0FFh
.eh_frame_hdr:0000000000007A2F                 db 0FFh
.eh_frame_hdr:0000000000007A30                 db 0FCh
.eh_frame_hdr:0000000000007A31                 db    9
.eh_frame_hdr:0000000000007A32                 db    0
.eh_frame_hdr:0000000000007A33                 db    0
.eh_frame_hdr:0000000000007A34                 db 0A0h
.eh_frame_hdr:0000000000007A35                 db 0DBh
.eh_frame_hdr:0000000000007A36                 db 0FFh
.eh_frame_hdr:0000000000007A37                 db 0FFh
.eh_frame_hdr:0000000000007A38                 db  10h
.eh_frame_hdr:0000000000007A39                 db  0Ah
.eh_frame_hdr:0000000000007A3A                 db    0
.eh_frame_hdr:0000000000007A3B                 db    0
.eh_frame_hdr:0000000000007A3C                 db  30h ; 0
.eh_frame_hdr:0000000000007A3D                 db 0DCh
.eh_frame_hdr:0000000000007A3E                 db 0FFh
.eh_frame_hdr:0000000000007A3F                 db 0FFh
.eh_frame_hdr:0000000000007A40                 db  2Ch ; ,
.eh_frame_hdr:0000000000007A41                 db  0Ah
.eh_frame_hdr:0000000000007A42                 db    0
.eh_frame_hdr:0000000000007A43                 db    0
.eh_frame_hdr:0000000000007A44                 db 0D0h
.eh_frame_hdr:0000000000007A45                 db 0DCh
.eh_frame_hdr:0000000000007A46                 db 0FFh
.eh_frame_hdr:0000000000007A47                 db 0FFh
.eh_frame_hdr:0000000000007A48                 db  48h ; H
.eh_frame_hdr:0000000000007A49                 db  0Ah
.eh_frame_hdr:0000000000007A4A                 db    0
.eh_frame_hdr:0000000000007A4B                 db    0
.eh_frame_hdr:0000000000007A4C                 db 0E0h
.eh_frame_hdr:0000000000007A4D                 db 0DCh
.eh_frame_hdr:0000000000007A4E                 db 0FFh
.eh_frame_hdr:0000000000007A4F                 db 0FFh
.eh_frame_hdr:0000000000007A50                 db  5Ch ; \
.eh_frame_hdr:0000000000007A51                 db  0Ah
.eh_frame_hdr:0000000000007A52                 db    0
.eh_frame_hdr:0000000000007A53                 db    0
.eh_frame_hdr:0000000000007A54                 db    0
.eh_frame_hdr:0000000000007A55                 db 0DDh
.eh_frame_hdr:0000000000007A56                 db 0FFh
.eh_frame_hdr:0000000000007A57                 db 0FFh
.eh_frame_hdr:0000000000007A58                 db  70h ; p
.eh_frame_hdr:0000000000007A59                 db  0Ah
.eh_frame_hdr:0000000000007A5A                 db    0
.eh_frame_hdr:0000000000007A5B                 db    0
.eh_frame_hdr:0000000000007A5C                 db  20h
.eh_frame_hdr:0000000000007A5D                 db 0DDh
.eh_frame_hdr:0000000000007A5E                 db 0FFh
.eh_frame_hdr:0000000000007A5F                 db 0FFh
.eh_frame_hdr:0000000000007A60                 db  84h
.eh_frame_hdr:0000000000007A61                 db  0Ah
.eh_frame_hdr:0000000000007A62                 db    0
.eh_frame_hdr:0000000000007A63                 db    0
.eh_frame_hdr:0000000000007A64                 db  30h ; 0
.eh_frame_hdr:0000000000007A65                 db 0DDh
.eh_frame_hdr:0000000000007A66                 db 0FFh
.eh_frame_hdr:0000000000007A67                 db 0FFh
.eh_frame_hdr:0000000000007A68                 db  98h
.eh_frame_hdr:0000000000007A69                 db  0Ah
.eh_frame_hdr:0000000000007A6A                 db    0
.eh_frame_hdr:0000000000007A6B                 db    0
.eh_frame_hdr:0000000000007A6C                 db  50h ; P
.eh_frame_hdr:0000000000007A6D                 db 0DDh
.eh_frame_hdr:0000000000007A6E                 db 0FFh
.eh_frame_hdr:0000000000007A6F                 db 0FFh
.eh_frame_hdr:0000000000007A70                 db 0ACh
.eh_frame_hdr:0000000000007A71                 db  0Ah
.eh_frame_hdr:0000000000007A72                 db    0
.eh_frame_hdr:0000000000007A73                 db    0
.eh_frame_hdr:0000000000007A74                 db  70h ; p
.eh_frame_hdr:0000000000007A75                 db 0DDh
.eh_frame_hdr:0000000000007A76                 db 0FFh
.eh_frame_hdr:0000000000007A77                 db 0FFh
.eh_frame_hdr:0000000000007A78                 db 0C0h
.eh_frame_hdr:0000000000007A79                 db  0Ah
.eh_frame_hdr:0000000000007A7A                 db    0
.eh_frame_hdr:0000000000007A7B                 db    0
.eh_frame_hdr:0000000000007A7C                 db  90h
.eh_frame_hdr:0000000000007A7D                 db 0DDh
.eh_frame_hdr:0000000000007A7E                 db 0FFh
.eh_frame_hdr:0000000000007A7F                 db 0FFh
.eh_frame_hdr:0000000000007A80                 db 0D8h
.eh_frame_hdr:0000000000007A81                 db  0Ah
.eh_frame_hdr:0000000000007A82                 db    0
.eh_frame_hdr:0000000000007A83                 db    0
.eh_frame_hdr:0000000000007A84                 db 0B0h
.eh_frame_hdr:0000000000007A85                 db 0E1h
.eh_frame_hdr:0000000000007A86                 db 0FFh
.eh_frame_hdr:0000000000007A87                 db 0FFh
.eh_frame_hdr:0000000000007A88                 db 0ECh
.eh_frame_hdr:0000000000007A89                 db  0Bh
.eh_frame_hdr:0000000000007A8A                 db    0
.eh_frame_hdr:0000000000007A8B                 db    0
.eh_frame_hdr:0000000000007A8C                 db 0D0h
.eh_frame_hdr:0000000000007A8D                 db 0E1h
.eh_frame_hdr:0000000000007A8E                 db 0FFh
.eh_frame_hdr:0000000000007A8F                 db 0FFh
.eh_frame_hdr:0000000000007A90                 db    0
.eh_frame_hdr:0000000000007A91                 db  0Ch
.eh_frame_hdr:0000000000007A92                 db    0
.eh_frame_hdr:0000000000007A93                 db    0
.eh_frame_hdr:0000000000007A94                 db  50h ; P
.eh_frame_hdr:0000000000007A95                 db 0E2h
.eh_frame_hdr:0000000000007A96                 db 0FFh
.eh_frame_hdr:0000000000007A97                 db 0FFh
.eh_frame_hdr:0000000000007A98                 db  1Ch
.eh_frame_hdr:0000000000007A99                 db  0Ch
.eh_frame_hdr:0000000000007A9A                 db    0
.eh_frame_hdr:0000000000007A9B                 db    0
.eh_frame_hdr:0000000000007A9C                 db  30h ; 0
.eh_frame_hdr:0000000000007A9D                 db 0E3h
.eh_frame_hdr:0000000000007A9E                 db 0FFh
.eh_frame_hdr:0000000000007A9F                 db 0FFh
.eh_frame_hdr:0000000000007AA0                 db  48h ; H
.eh_frame_hdr:0000000000007AA1                 db  0Ch
.eh_frame_hdr:0000000000007AA2                 db    0
.eh_frame_hdr:0000000000007AA3                 db    0
.eh_frame_hdr:0000000000007AA4                 db 0B0h
.eh_frame_hdr:0000000000007AA5                 db 0E3h
.eh_frame_hdr:0000000000007AA6                 db 0FFh
.eh_frame_hdr:0000000000007AA7                 db 0FFh
.eh_frame_hdr:0000000000007AA8                 db  68h ; h
.eh_frame_hdr:0000000000007AA9                 db  0Ch
.eh_frame_hdr:0000000000007AAA                 db    0
.eh_frame_hdr:0000000000007AAB                 db    0
.eh_frame_hdr:0000000000007AAC                 db 0D0h
.eh_frame_hdr:0000000000007AAD                 db 0E3h
.eh_frame_hdr:0000000000007AAE                 db 0FFh
.eh_frame_hdr:0000000000007AAF                 db 0FFh
.eh_frame_hdr:0000000000007AB0                 db  84h
.eh_frame_hdr:0000000000007AB1                 db  0Ch
.eh_frame_hdr:0000000000007AB2                 db    0
.eh_frame_hdr:0000000000007AB3                 db    0
.eh_frame_hdr:0000000000007AB4                 db    0
.eh_frame_hdr:0000000000007AB5                 db 0E4h
.eh_frame_hdr:0000000000007AB6                 db 0FFh
.eh_frame_hdr:0000000000007AB7                 db 0FFh
.eh_frame_hdr:0000000000007AB8                 db  98h
.eh_frame_hdr:0000000000007AB9                 db  0Ch
.eh_frame_hdr:0000000000007ABA                 db    0
.eh_frame_hdr:0000000000007ABB                 db    0
.eh_frame_hdr:0000000000007ABC                 db  10h
.eh_frame_hdr:0000000000007ABD                 db 0E4h
.eh_frame_hdr:0000000000007ABE                 db 0FFh
.eh_frame_hdr:0000000000007ABF                 db 0FFh
.eh_frame_hdr:0000000000007AC0                 db 0ACh
.eh_frame_hdr:0000000000007AC1                 db  0Ch
.eh_frame_hdr:0000000000007AC2                 db    0
.eh_frame_hdr:0000000000007AC3                 db    0
.eh_frame_hdr:0000000000007AC4                 db  50h ; P
.eh_frame_hdr:0000000000007AC5                 db 0E4h
.eh_frame_hdr:0000000000007AC6                 db 0FFh
.eh_frame_hdr:0000000000007AC7                 db 0FFh
.eh_frame_hdr:0000000000007AC8                 db 0D0h
.eh_frame_hdr:0000000000007AC9                 db  0Ch
.eh_frame_hdr:0000000000007ACA                 db    0
.eh_frame_hdr:0000000000007ACB                 db    0
.eh_frame_hdr:0000000000007ACC                 db  80h
.eh_frame_hdr:0000000000007ACD                 db 0E4h
.eh_frame_hdr:0000000000007ACE                 db 0FFh
.eh_frame_hdr:0000000000007ACF                 db 0FFh
.eh_frame_hdr:0000000000007AD0                 db 0E4h
.eh_frame_hdr:0000000000007AD1                 db  0Ch
.eh_frame_hdr:0000000000007AD2                 db    0
.eh_frame_hdr:0000000000007AD3                 db    0
.eh_frame_hdr:0000000000007AD4                 db  10h
.eh_frame_hdr:0000000000007AD5                 db 0E5h
.eh_frame_hdr:0000000000007AD6                 db 0FFh
.eh_frame_hdr:0000000000007AD7                 db 0FFh
.eh_frame_hdr:0000000000007AD8                 db 0FCh
.eh_frame_hdr:0000000000007AD9                 db  0Ch
.eh_frame_hdr:0000000000007ADA                 db    0
.eh_frame_hdr:0000000000007ADB                 db    0
.eh_frame_hdr:0000000000007ADC                 db  60h ; `
.eh_frame_hdr:0000000000007ADD                 db 0E5h
.eh_frame_hdr:0000000000007ADE                 db 0FFh
.eh_frame_hdr:0000000000007ADF                 db 0FFh
.eh_frame_hdr:0000000000007AE0                 db  14h
.eh_frame_hdr:0000000000007AE1                 db  0Dh
.eh_frame_hdr:0000000000007AE2                 db    0
.eh_frame_hdr:0000000000007AE3                 db    0
.eh_frame_hdr:0000000000007AE4                 db  80h
.eh_frame_hdr:0000000000007AE5                 db 0E5h
.eh_frame_hdr:0000000000007AE6                 db 0FFh
.eh_frame_hdr:0000000000007AE7                 db 0FFh
.eh_frame_hdr:0000000000007AE8                 db  30h ; 0
.eh_frame_hdr:0000000000007AE9                 db  0Dh
.eh_frame_hdr:0000000000007AEA                 db    0
.eh_frame_hdr:0000000000007AEB                 db    0
.eh_frame_hdr:0000000000007AEC                 db 0B0h
.eh_frame_hdr:0000000000007AED                 db 0E5h
.eh_frame_hdr:0000000000007AEE                 db 0FFh
.eh_frame_hdr:0000000000007AEF                 db 0FFh
.eh_frame_hdr:0000000000007AF0                 db  4Ch ; L
.eh_frame_hdr:0000000000007AF1                 db  0Dh
.eh_frame_hdr:0000000000007AF2                 db    0
.eh_frame_hdr:0000000000007AF3                 db    0
.eh_frame_hdr:0000000000007AF4                 db 0E0h
.eh_frame_hdr:0000000000007AF5                 db 0E5h
.eh_frame_hdr:0000000000007AF6                 db 0FFh
.eh_frame_hdr:0000000000007AF7                 db 0FFh
.eh_frame_hdr:0000000000007AF8                 db  74h ; t
.eh_frame_hdr:0000000000007AF9                 db  0Dh
.eh_frame_hdr:0000000000007AFA                 db    0
.eh_frame_hdr:0000000000007AFB                 db    0
.eh_frame_hdr:0000000000007AFC                 db    0
.eh_frame_hdr:0000000000007AFD                 db 0E6h
.eh_frame_hdr:0000000000007AFE                 db 0FFh
.eh_frame_hdr:0000000000007AFF                 db 0FFh
.eh_frame_hdr:0000000000007B00                 db  90h
.eh_frame_hdr:0000000000007B01                 db  0Dh
.eh_frame_hdr:0000000000007B02                 db    0
.eh_frame_hdr:0000000000007B03                 db    0
.eh_frame_hdr:0000000000007B04                 db  40h ; @
.eh_frame_hdr:0000000000007B05                 db 0E6h
.eh_frame_hdr:0000000000007B06                 db 0FFh
.eh_frame_hdr:0000000000007B07                 db 0FFh
.eh_frame_hdr:0000000000007B08                 db 0A8h
.eh_frame_hdr:0000000000007B09                 db  0Dh
.eh_frame_hdr:0000000000007B0A                 db    0
.eh_frame_hdr:0000000000007B0B                 db    0
.eh_frame_hdr:0000000000007B0C                 db  60h ; `
.eh_frame_hdr:0000000000007B0D                 db 0E6h
.eh_frame_hdr:0000000000007B0E                 db 0FFh
.eh_frame_hdr:0000000000007B0F                 db 0FFh
.eh_frame_hdr:0000000000007B10                 db 0C8h
.eh_frame_hdr:0000000000007B11                 db  0Dh
.eh_frame_hdr:0000000000007B12                 db    0
.eh_frame_hdr:0000000000007B13                 db    0
.eh_frame_hdr:0000000000007B14                 db 0E0h
.eh_frame_hdr:0000000000007B15                 db 0E6h
.eh_frame_hdr:0000000000007B16                 db 0FFh
.eh_frame_hdr:0000000000007B17                 db 0FFh
.eh_frame_hdr:0000000000007B18                 db    0
.eh_frame_hdr:0000000000007B19                 db  0Eh
.eh_frame_hdr:0000000000007B1A                 db    0
.eh_frame_hdr:0000000000007B1B                 db    0
.eh_frame_hdr:0000000000007B1C                 db  20h
.eh_frame_hdr:0000000000007B1D                 db 0E7h
.eh_frame_hdr:0000000000007B1E                 db 0FFh
.eh_frame_hdr:0000000000007B1F                 db 0FFh
.eh_frame_hdr:0000000000007B20                 db  20h
.eh_frame_hdr:0000000000007B21                 db  0Eh
.eh_frame_hdr:0000000000007B22                 db    0
.eh_frame_hdr:0000000000007B23                 db    0
.eh_frame_hdr:0000000000007B24                 db  50h ; P
.eh_frame_hdr:0000000000007B25                 db 0E7h
.eh_frame_hdr:0000000000007B26                 db 0FFh
.eh_frame_hdr:0000000000007B27                 db 0FFh
.eh_frame_hdr:0000000000007B28                 db  38h ; 8
.eh_frame_hdr:0000000000007B29                 db  0Eh
.eh_frame_hdr:0000000000007B2A                 db    0
.eh_frame_hdr:0000000000007B2B                 db    0
.eh_frame_hdr:0000000000007B2C                 db 0B0h
.eh_frame_hdr:0000000000007B2D                 db 0E7h
.eh_frame_hdr:0000000000007B2E                 db 0FFh
.eh_frame_hdr:0000000000007B2F                 db 0FFh
.eh_frame_hdr:0000000000007B30                 db  68h ; h
.eh_frame_hdr:0000000000007B31                 db  0Eh
.eh_frame_hdr:0000000000007B32                 db    0
.eh_frame_hdr:0000000000007B33                 db    0
.eh_frame_hdr:0000000000007B34                 db  40h ; @
.eh_frame_hdr:0000000000007B35                 db 0E8h
.eh_frame_hdr:0000000000007B36                 db 0FFh
.eh_frame_hdr:0000000000007B37                 db 0FFh
.eh_frame_hdr:0000000000007B38                 db 0A8h
.eh_frame_hdr:0000000000007B39                 db  0Eh
.eh_frame_hdr:0000000000007B3A                 db    0
.eh_frame_hdr:0000000000007B3B                 db    0
.eh_frame_hdr:0000000000007B3C                 db 0C0h
.eh_frame_hdr:0000000000007B3D                 db 0E8h
.eh_frame_hdr:0000000000007B3E                 db 0FFh
.eh_frame_hdr:0000000000007B3F                 db 0FFh
.eh_frame_hdr:0000000000007B40                 db 0F8h
.eh_frame_hdr:0000000000007B41                 db  0Eh
.eh_frame_hdr:0000000000007B42                 db    0
.eh_frame_hdr:0000000000007B43                 db    0
.eh_frame_hdr:0000000000007B44                 db  30h ; 0
.eh_frame_hdr:0000000000007B45                 db 0EAh
.eh_frame_hdr:0000000000007B46                 db 0FFh
.eh_frame_hdr:0000000000007B47                 db 0FFh
.eh_frame_hdr:0000000000007B48                 db  40h ; @
.eh_frame_hdr:0000000000007B49                 db  0Fh
.eh_frame_hdr:0000000000007B4A                 db    0
.eh_frame_hdr:0000000000007B4B                 db    0
.eh_frame_hdr:0000000000007B4C                 db  90h
.eh_frame_hdr:0000000000007B4D                 db 0EAh
.eh_frame_hdr:0000000000007B4E                 db 0FFh
.eh_frame_hdr:0000000000007B4F                 db 0FFh
.eh_frame_hdr:0000000000007B50                 db  60h ; `
.eh_frame_hdr:0000000000007B51                 db  0Fh
.eh_frame_hdr:0000000000007B52                 db    0
.eh_frame_hdr:0000000000007B53                 db    0
.eh_frame_hdr:0000000000007B54                 db 0D0h
.eh_frame_hdr:0000000000007B55                 db 0EAh
.eh_frame_hdr:0000000000007B56                 db 0FFh
.eh_frame_hdr:0000000000007B57                 db 0FFh
.eh_frame_hdr:0000000000007B58                 db  80h
.eh_frame_hdr:0000000000007B59                 db  0Fh
.eh_frame_hdr:0000000000007B5A                 db    0
.eh_frame_hdr:0000000000007B5B                 db    0
.eh_frame_hdr:0000000000007B5C                 db    0
.eh_frame_hdr:0000000000007B5D                 db 0EBh
.eh_frame_hdr:0000000000007B5E                 db 0FFh
.eh_frame_hdr:0000000000007B5F                 db 0FFh
.eh_frame_hdr:0000000000007B60                 db  98h
.eh_frame_hdr:0000000000007B61                 db  0Fh
.eh_frame_hdr:0000000000007B62                 db    0
.eh_frame_hdr:0000000000007B63                 db    0
.eh_frame_hdr:0000000000007B64                 db  70h ; p
.eh_frame_hdr:0000000000007B65                 db 0EBh
.eh_frame_hdr:0000000000007B66                 db 0FFh
.eh_frame_hdr:0000000000007B67                 db 0FFh
.eh_frame_hdr:0000000000007B68                 db 0E0h
.eh_frame_hdr:0000000000007B69                 db  0Fh
.eh_frame_hdr:0000000000007B6A                 db    0
.eh_frame_hdr:0000000000007B6B                 db    0
.eh_frame_hdr:0000000000007B6C                 db  80h
.eh_frame_hdr:0000000000007B6D                 db 0EBh
.eh_frame_hdr:0000000000007B6E                 db 0FFh
.eh_frame_hdr:0000000000007B6F                 db 0FFh
.eh_frame_hdr:0000000000007B70                 db 0F8h
.eh_frame_hdr:0000000000007B71                 db  0Fh
.eh_frame_hdr:0000000000007B72                 db    0
.eh_frame_hdr:0000000000007B73                 db    0
.eh_frame_hdr:0000000000007B73 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000007B73
LOAD:0000000000007B74 ; ===========================================================================
LOAD:0000000000007B74
LOAD:0000000000007B74 ; Segment type: Pure code
LOAD:0000000000007B74 ; Segment permissions: Read/Execute
LOAD:0000000000007B74 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007B74                 assume cs:LOAD
LOAD:0000000000007B74                 ;org 7B74h
LOAD:0000000000007B74                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007B74                 align 8
LOAD:0000000000007B74 LOAD            ends
LOAD:0000000000007B74
.eh_frame:0000000000007B78 ; ===========================================================================
.eh_frame:0000000000007B78
.eh_frame:0000000000007B78 ; Segment type: Pure data
.eh_frame:0000000000007B78 ; Segment permissions: Read
.eh_frame:0000000000007B78 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000007B78                 assume cs:_eh_frame
.eh_frame:0000000000007B78                 ;org 7B78h
.eh_frame:0000000000007B78                 db  14h
.eh_frame:0000000000007B79                 db    0
.eh_frame:0000000000007B7A                 db    0
.eh_frame:0000000000007B7B                 db    0
.eh_frame:0000000000007B7C                 db    0
.eh_frame:0000000000007B7D                 db    0
.eh_frame:0000000000007B7E                 db    0
.eh_frame:0000000000007B7F                 db    0
.eh_frame:0000000000007B80                 db    1
.eh_frame:0000000000007B81                 db  7Ah ; z
.eh_frame:0000000000007B82                 db  52h ; R
.eh_frame:0000000000007B83                 db    0
.eh_frame:0000000000007B84                 db    1
.eh_frame:0000000000007B85                 db  78h ; x
.eh_frame:0000000000007B86                 db  10h
.eh_frame:0000000000007B87                 db    1
.eh_frame:0000000000007B88                 db  1Bh
.eh_frame:0000000000007B89                 db  0Ch
.eh_frame:0000000000007B8A                 db    7
.eh_frame:0000000000007B8B                 db    8
.eh_frame:0000000000007B8C                 db  90h
.eh_frame:0000000000007B8D                 db    1
.eh_frame:0000000000007B8E                 db    7
.eh_frame:0000000000007B8F                 db  10h
.eh_frame:0000000000007B90                 db  14h
.eh_frame:0000000000007B91                 db    0
.eh_frame:0000000000007B92                 db    0
.eh_frame:0000000000007B93                 db    0
.eh_frame:0000000000007B94                 db  1Ch
.eh_frame:0000000000007B95                 db    0
.eh_frame:0000000000007B96                 db    0
.eh_frame:0000000000007B97                 db    0
.eh_frame:0000000000007B98                 db 0C8h
.eh_frame:0000000000007B99                 db 0A2h
.eh_frame:0000000000007B9A                 db 0FFh
.eh_frame:0000000000007B9B                 db 0FFh
.eh_frame:0000000000007B9C                 db  2Bh ; +
.eh_frame:0000000000007B9D                 db    0
.eh_frame:0000000000007B9E                 db    0
.eh_frame:0000000000007B9F                 db    0
.eh_frame:0000000000007BA0                 db    0
.eh_frame:0000000000007BA1                 db    0
.eh_frame:0000000000007BA2                 db    0
.eh_frame:0000000000007BA3                 db    0
.eh_frame:0000000000007BA4                 db    0
.eh_frame:0000000000007BA5                 db    0
.eh_frame:0000000000007BA6                 db    0
.eh_frame:0000000000007BA7                 db    0
.eh_frame:0000000000007BA8                 db  14h
.eh_frame:0000000000007BA9                 db    0
.eh_frame:0000000000007BAA                 db    0
.eh_frame:0000000000007BAB                 db    0
.eh_frame:0000000000007BAC                 db    0
.eh_frame:0000000000007BAD                 db    0
.eh_frame:0000000000007BAE                 db    0
.eh_frame:0000000000007BAF                 db    0
.eh_frame:0000000000007BB0                 db    1
.eh_frame:0000000000007BB1                 db  7Ah ; z
.eh_frame:0000000000007BB2                 db  52h ; R
.eh_frame:0000000000007BB3                 db    0
.eh_frame:0000000000007BB4                 db    1
.eh_frame:0000000000007BB5                 db  78h ; x
.eh_frame:0000000000007BB6                 db  10h
.eh_frame:0000000000007BB7                 db    1
.eh_frame:0000000000007BB8                 db  1Bh
.eh_frame:0000000000007BB9                 db  0Ch
.eh_frame:0000000000007BBA                 db    7
.eh_frame:0000000000007BBB                 db    8
.eh_frame:0000000000007BBC                 db  90h
.eh_frame:0000000000007BBD                 db    1
.eh_frame:0000000000007BBE                 db    0
.eh_frame:0000000000007BBF                 db    0
.eh_frame:0000000000007BC0                 db  24h ; $
.eh_frame:0000000000007BC1                 db    0
.eh_frame:0000000000007BC2                 db    0
.eh_frame:0000000000007BC3                 db    0
.eh_frame:0000000000007BC4                 db  1Ch
.eh_frame:0000000000007BC5                 db    0
.eh_frame:0000000000007BC6                 db    0
.eh_frame:0000000000007BC7                 db    0
.eh_frame:0000000000007BC8                 db  98h
.eh_frame:0000000000007BC9                 db  9Ah
.eh_frame:0000000000007BCA                 db 0FFh
.eh_frame:0000000000007BCB                 db 0FFh
.eh_frame:0000000000007BCC                 db  80h
.eh_frame:0000000000007BCD                 db    3
.eh_frame:0000000000007BCE                 db    0
.eh_frame:0000000000007BCF                 db    0
.eh_frame:0000000000007BD0                 db    0
.eh_frame:0000000000007BD1                 db  0Eh
.eh_frame:0000000000007BD2                 db  10h
.eh_frame:0000000000007BD3                 db  46h ; F
.eh_frame:0000000000007BD4                 db  0Eh
.eh_frame:0000000000007BD5                 db  18h
.eh_frame:0000000000007BD6                 db  4Ah ; J
.eh_frame:0000000000007BD7                 db  0Fh
.eh_frame:0000000000007BD8                 db  0Bh
.eh_frame:0000000000007BD9                 db  77h ; w
.eh_frame:0000000000007BDA                 db    8
.eh_frame:0000000000007BDB                 db  80h
.eh_frame:0000000000007BDC                 db    0
.eh_frame:0000000000007BDD                 db  3Fh ; ?
.eh_frame:0000000000007BDE                 db  1Ah
.eh_frame:0000000000007BDF                 db  3Bh ; ;
.eh_frame:0000000000007BE0                 db  2Ah ; *
.eh_frame:0000000000007BE1                 db  33h ; 3
.eh_frame:0000000000007BE2                 db  24h ; $
.eh_frame:0000000000007BE3                 db  22h ; "
.eh_frame:0000000000007BE4                 db    0
.eh_frame:0000000000007BE5                 db    0
.eh_frame:0000000000007BE6                 db    0
.eh_frame:0000000000007BE7                 db    0
.eh_frame:0000000000007BE8                 db  14h
.eh_frame:0000000000007BE9                 db    0
.eh_frame:0000000000007BEA                 db    0
.eh_frame:0000000000007BEB                 db    0
.eh_frame:0000000000007BEC                 db  44h ; D
.eh_frame:0000000000007BED                 db    0
.eh_frame:0000000000007BEE                 db    0
.eh_frame:0000000000007BEF                 db    0
.eh_frame:0000000000007BF0                 db 0F0h
.eh_frame:0000000000007BF1                 db  9Dh
.eh_frame:0000000000007BF2                 db 0FFh
.eh_frame:0000000000007BF3                 db 0FFh
.eh_frame:0000000000007BF4                 db    8
.eh_frame:0000000000007BF5                 db    0
.eh_frame:0000000000007BF6                 db    0
.eh_frame:0000000000007BF7                 db    0
.eh_frame:0000000000007BF8                 db    0
.eh_frame:0000000000007BF9                 db    0
.eh_frame:0000000000007BFA                 db    0
.eh_frame:0000000000007BFB                 db    0
.eh_frame:0000000000007BFC                 db    0
.eh_frame:0000000000007BFD                 db    0
.eh_frame:0000000000007BFE                 db    0
.eh_frame:0000000000007BFF                 db    0
.eh_frame:0000000000007C00                 db  88h
.eh_frame:0000000000007C01                 db    0
.eh_frame:0000000000007C02                 db    0
.eh_frame:0000000000007C03                 db    0
.eh_frame:0000000000007C04                 db  5Ch ; \
.eh_frame:0000000000007C05                 db    0
.eh_frame:0000000000007C06                 db    0
.eh_frame:0000000000007C07                 db    0
.eh_frame:0000000000007C08                 db  68h ; h
.eh_frame:0000000000007C09                 db 0A3h
.eh_frame:0000000000007C0A                 db 0FFh
.eh_frame:0000000000007C0B                 db 0FFh
.eh_frame:0000000000007C0C                 db 0E7h
.eh_frame:0000000000007C0D                 db    7
.eh_frame:0000000000007C0E                 db    0
.eh_frame:0000000000007C0F                 db    0
.eh_frame:0000000000007C10                 db    0
.eh_frame:0000000000007C11                 db  42h ; B
.eh_frame:0000000000007C12                 db  0Eh
.eh_frame:0000000000007C13                 db  10h
.eh_frame:0000000000007C14                 db  8Fh
.eh_frame:0000000000007C15                 db    2
.eh_frame:0000000000007C16                 db  42h ; B
.eh_frame:0000000000007C17                 db  0Eh
.eh_frame:0000000000007C18                 db  18h
.eh_frame:0000000000007C19                 db  8Eh
.eh_frame:0000000000007C1A                 db    3
.eh_frame:0000000000007C1B                 db  45h ; E
.eh_frame:0000000000007C1C                 db  0Eh
.eh_frame:0000000000007C1D                 db  20h
.eh_frame:0000000000007C1E                 db  8Dh
.eh_frame:0000000000007C1F                 db    4
.eh_frame:0000000000007C20                 db  42h ; B
.eh_frame:0000000000007C21                 db  0Eh
.eh_frame:0000000000007C22                 db  28h ; (
.eh_frame:0000000000007C23                 db  8Ch
.eh_frame:0000000000007C24                 db    5
.eh_frame:0000000000007C25                 db  46h ; F
.eh_frame:0000000000007C26                 db  0Eh
.eh_frame:0000000000007C27                 db  30h ; 0
.eh_frame:0000000000007C28                 db  86h
.eh_frame:0000000000007C29                 db    6
.eh_frame:0000000000007C2A                 db  41h ; A
.eh_frame:0000000000007C2B                 db  0Eh
.eh_frame:0000000000007C2C                 db  38h ; 8
.eh_frame:0000000000007C2D                 db  83h
.eh_frame:0000000000007C2E                 db    7
.eh_frame:0000000000007C2F                 db  44h ; D
.eh_frame:0000000000007C30                 db  0Eh
.eh_frame:0000000000007C31                 db  50h ; P
.eh_frame:0000000000007C32                 db    3
.eh_frame:0000000000007C33                 db 0BEh
.eh_frame:0000000000007C34                 db    1
.eh_frame:0000000000007C35                 db  0Eh
.eh_frame:0000000000007C36                 db  58h ; X
.eh_frame:0000000000007C37                 db  42h ; B
.eh_frame:0000000000007C38                 db  0Eh
.eh_frame:0000000000007C39                 db  60h ; `
.eh_frame:0000000000007C3A                 db  63h ; c
.eh_frame:0000000000007C3B                 db  0Eh
.eh_frame:0000000000007C3C                 db  58h ; X
.eh_frame:0000000000007C3D                 db  41h ; A
.eh_frame:0000000000007C3E                 db  0Eh
.eh_frame:0000000000007C3F                 db  50h ; P
.eh_frame:0000000000007C40                 db    3
.eh_frame:0000000000007C41                 db  28h ; (
.eh_frame:0000000000007C42                 db    3
.eh_frame:0000000000007C43                 db  0Ah
.eh_frame:0000000000007C44                 db  0Eh
.eh_frame:0000000000007C45                 db  38h ; 8
.eh_frame:0000000000007C46                 db  41h ; A
.eh_frame:0000000000007C47                 db  0Eh
.eh_frame:0000000000007C48                 db  30h ; 0
.eh_frame:0000000000007C49                 db  41h ; A
.eh_frame:0000000000007C4A                 db  0Eh
.eh_frame:0000000000007C4B                 db  28h ; (
.eh_frame:0000000000007C4C                 db  42h ; B
.eh_frame:0000000000007C4D                 db  0Eh
.eh_frame:0000000000007C4E                 db  20h
.eh_frame:0000000000007C4F                 db  42h ; B
.eh_frame:0000000000007C50                 db  0Eh
.eh_frame:0000000000007C51                 db  18h
.eh_frame:0000000000007C52                 db  42h ; B
.eh_frame:0000000000007C53                 db  0Eh
.eh_frame:0000000000007C54                 db  10h
.eh_frame:0000000000007C55                 db  42h ; B
.eh_frame:0000000000007C56                 db  0Eh
.eh_frame:0000000000007C57                 db    8
.eh_frame:0000000000007C58                 db  44h ; D
.eh_frame:0000000000007C59                 db  0Bh
.eh_frame:0000000000007C5A                 db    2
.eh_frame:0000000000007C5B                 db  4Dh ; M
.eh_frame:0000000000007C5C                 db  0Ah
.eh_frame:0000000000007C5D                 db  0Eh
.eh_frame:0000000000007C5E                 db  38h ; 8
.eh_frame:0000000000007C5F                 db  43h ; C
.eh_frame:0000000000007C60                 db  0Eh
.eh_frame:0000000000007C61                 db  30h ; 0
.eh_frame:0000000000007C62                 db  41h ; A
.eh_frame:0000000000007C63                 db  0Eh
.eh_frame:0000000000007C64                 db  28h ; (
.eh_frame:0000000000007C65                 db  42h ; B
.eh_frame:0000000000007C66                 db  0Eh
.eh_frame:0000000000007C67                 db  20h
.eh_frame:0000000000007C68                 db  42h ; B
.eh_frame:0000000000007C69                 db  0Eh
.eh_frame:0000000000007C6A                 db  18h
.eh_frame:0000000000007C6B                 db  42h ; B
.eh_frame:0000000000007C6C                 db  0Eh
.eh_frame:0000000000007C6D                 db  10h
.eh_frame:0000000000007C6E                 db  42h ; B
.eh_frame:0000000000007C6F                 db  0Eh
.eh_frame:0000000000007C70                 db    8
.eh_frame:0000000000007C71                 db  41h ; A
.eh_frame:0000000000007C72                 db  0Bh
.eh_frame:0000000000007C73                 db  49h ; I
.eh_frame:0000000000007C74                 db  0Ah
.eh_frame:0000000000007C75                 db  0Eh
.eh_frame:0000000000007C76                 db  38h ; 8
.eh_frame:0000000000007C77                 db  46h ; F
.eh_frame:0000000000007C78                 db  0Eh
.eh_frame:0000000000007C79                 db  30h ; 0
.eh_frame:0000000000007C7A                 db  41h ; A
.eh_frame:0000000000007C7B                 db  0Eh
.eh_frame:0000000000007C7C                 db  28h ; (
.eh_frame:0000000000007C7D                 db  42h ; B
.eh_frame:0000000000007C7E                 db  0Eh
.eh_frame:0000000000007C7F                 db  20h
.eh_frame:0000000000007C80                 db  42h ; B
.eh_frame:0000000000007C81                 db  0Eh
.eh_frame:0000000000007C82                 db  18h
.eh_frame:0000000000007C83                 db  42h ; B
.eh_frame:0000000000007C84                 db  0Eh
.eh_frame:0000000000007C85                 db  10h
.eh_frame:0000000000007C86                 db  42h ; B
.eh_frame:0000000000007C87                 db  0Eh
.eh_frame:0000000000007C88                 db    8
.eh_frame:0000000000007C89                 db  41h ; A
.eh_frame:0000000000007C8A                 db  0Bh
.eh_frame:0000000000007C8B                 db    0
.eh_frame:0000000000007C8C                 db  28h ; (
.eh_frame:0000000000007C8D                 db    0
.eh_frame:0000000000007C8E                 db    0
.eh_frame:0000000000007C8F                 db    0
.eh_frame:0000000000007C90                 db 0E8h
.eh_frame:0000000000007C91                 db    0
.eh_frame:0000000000007C92                 db    0
.eh_frame:0000000000007C93                 db    0
.eh_frame:0000000000007C94                 db 0CCh
.eh_frame:0000000000007C95                 db 0AAh
.eh_frame:0000000000007C96                 db 0FFh
.eh_frame:0000000000007C97                 db 0FFh
.eh_frame:0000000000007C98                 db  8Ah
.eh_frame:0000000000007C99                 db    4
.eh_frame:0000000000007C9A                 db    0
.eh_frame:0000000000007C9B                 db    0
.eh_frame:0000000000007C9C                 db    0
.eh_frame:0000000000007C9D                 db  42h ; B
.eh_frame:0000000000007C9E                 db  0Eh
.eh_frame:0000000000007C9F                 db  10h
.eh_frame:0000000000007CA0                 db  8Dh
.eh_frame:0000000000007CA1                 db    2
.eh_frame:0000000000007CA2                 db  42h ; B
.eh_frame:0000000000007CA3                 db  0Eh
.eh_frame:0000000000007CA4                 db  18h
.eh_frame:0000000000007CA5                 db  8Ch
.eh_frame:0000000000007CA6                 db    3
.eh_frame:0000000000007CA7                 db  46h ; F
.eh_frame:0000000000007CA8                 db  0Eh
.eh_frame:0000000000007CA9                 db  20h
.eh_frame:0000000000007CAA                 db  86h
.eh_frame:0000000000007CAB                 db    4
.eh_frame:0000000000007CAC                 db  41h ; A
.eh_frame:0000000000007CAD                 db  0Eh
.eh_frame:0000000000007CAE                 db  28h ; (
.eh_frame:0000000000007CAF                 db  83h
.eh_frame:0000000000007CB0                 db    5
.eh_frame:0000000000007CB1                 db  49h ; I
.eh_frame:0000000000007CB2                 db  0Eh
.eh_frame:0000000000007CB3                 db 0B0h
.eh_frame:0000000000007CB4                 db    1
.eh_frame:0000000000007CB5                 db    0
.eh_frame:0000000000007CB6                 db    0
.eh_frame:0000000000007CB7                 db    0
.eh_frame:0000000000007CB8                 db  54h ; T
.eh_frame:0000000000007CB9                 db    0
.eh_frame:0000000000007CBA                 db    0
.eh_frame:0000000000007CBB                 db    0
.eh_frame:0000000000007CBC                 db  14h
.eh_frame:0000000000007CBD                 db    1
.eh_frame:0000000000007CBE                 db    0
.eh_frame:0000000000007CBF                 db    0
.eh_frame:0000000000007CC0                 db  30h ; 0
.eh_frame:0000000000007CC1                 db  9Dh
.eh_frame:0000000000007CC2                 db 0FFh
.eh_frame:0000000000007CC3                 db 0FFh
.eh_frame:0000000000007CC4                 db  6Fh ; o
.eh_frame:0000000000007CC5                 db    4
.eh_frame:0000000000007CC6                 db    0
.eh_frame:0000000000007CC7                 db    0
.eh_frame:0000000000007CC8                 db    0
.eh_frame:0000000000007CC9                 db  42h ; B
.eh_frame:0000000000007CCA                 db  0Eh
.eh_frame:0000000000007CCB                 db  10h
.eh_frame:0000000000007CCC                 db  8Fh
.eh_frame:0000000000007CCD                 db    2
.eh_frame:0000000000007CCE                 db  42h ; B
.eh_frame:0000000000007CCF                 db  0Eh
.eh_frame:0000000000007CD0                 db  18h
.eh_frame:0000000000007CD1                 db  8Eh
.eh_frame:0000000000007CD2                 db    3
.eh_frame:0000000000007CD3                 db  45h ; E
.eh_frame:0000000000007CD4                 db  0Eh
.eh_frame:0000000000007CD5                 db  20h
.eh_frame:0000000000007CD6                 db  8Dh
.eh_frame:0000000000007CD7                 db    4
.eh_frame:0000000000007CD8                 db  42h ; B
.eh_frame:0000000000007CD9                 db  0Eh
.eh_frame:0000000000007CDA                 db  28h ; (
.eh_frame:0000000000007CDB                 db  8Ch
.eh_frame:0000000000007CDC                 db    5
.eh_frame:0000000000007CDD                 db  48h ; H
.eh_frame:0000000000007CDE                 db  0Eh
.eh_frame:0000000000007CDF                 db  30h ; 0
.eh_frame:0000000000007CE0                 db  86h
.eh_frame:0000000000007CE1                 db    6
.eh_frame:0000000000007CE2                 db  41h ; A
.eh_frame:0000000000007CE3                 db  0Eh
.eh_frame:0000000000007CE4                 db  38h ; 8
.eh_frame:0000000000007CE5                 db  83h
.eh_frame:0000000000007CE6                 db    7
.eh_frame:0000000000007CE7                 db  50h ; P
.eh_frame:0000000000007CE8                 db  0Eh
.eh_frame:0000000000007CE9                 db  40h ; @
.eh_frame:0000000000007CEA                 db    2
.eh_frame:0000000000007CEB                 db 0F0h
.eh_frame:0000000000007CEC                 db  0Ah
.eh_frame:0000000000007CED                 db  0Eh
.eh_frame:0000000000007CEE                 db  48h ; H
.eh_frame:0000000000007CEF                 db  4Fh ; O
.eh_frame:0000000000007CF0                 db  0Eh
.eh_frame:0000000000007CF1                 db  50h ; P
.eh_frame:0000000000007CF2                 db  5Dh ; ]
.eh_frame:0000000000007CF3                 db  0Bh
.eh_frame:0000000000007CF4                 db    3
.eh_frame:0000000000007CF5                 db 0EFh
.eh_frame:0000000000007CF6                 db    1
.eh_frame:0000000000007CF7                 db  0Ah
.eh_frame:0000000000007CF8                 db  0Eh
.eh_frame:0000000000007CF9                 db  38h ; 8
.eh_frame:0000000000007CFA                 db  45h ; E
.eh_frame:0000000000007CFB                 db  0Eh
.eh_frame:0000000000007CFC                 db  30h ; 0
.eh_frame:0000000000007CFD                 db  41h ; A
.eh_frame:0000000000007CFE                 db  0Eh
.eh_frame:0000000000007CFF                 db  28h ; (
.eh_frame:0000000000007D00                 db  42h ; B
.eh_frame:0000000000007D01                 db  0Eh
.eh_frame:0000000000007D02                 db  20h
.eh_frame:0000000000007D03                 db  42h ; B
.eh_frame:0000000000007D04                 db  0Eh
.eh_frame:0000000000007D05                 db  18h
.eh_frame:0000000000007D06                 db  42h ; B
.eh_frame:0000000000007D07                 db  0Eh
.eh_frame:0000000000007D08                 db  10h
.eh_frame:0000000000007D09                 db  42h ; B
.eh_frame:0000000000007D0A                 db  0Eh
.eh_frame:0000000000007D0B                 db    8
.eh_frame:0000000000007D0C                 db  41h ; A
.eh_frame:0000000000007D0D                 db  0Bh
.eh_frame:0000000000007D0E                 db    0
.eh_frame:0000000000007D0F                 db    0
.eh_frame:0000000000007D10                 db  10h
.eh_frame:0000000000007D11                 db    0
.eh_frame:0000000000007D12                 db    0
.eh_frame:0000000000007D13                 db    0
.eh_frame:0000000000007D14                 db  6Ch ; l
.eh_frame:0000000000007D15                 db    1
.eh_frame:0000000000007D16                 db    0
.eh_frame:0000000000007D17                 db    0
.eh_frame:0000000000007D18                 db 0D8h
.eh_frame:0000000000007D19                 db 0AEh
.eh_frame:0000000000007D1A                 db 0FFh
.eh_frame:0000000000007D1B                 db 0FFh
.eh_frame:0000000000007D1C                 db  16h
.eh_frame:0000000000007D1D                 db    0
.eh_frame:0000000000007D1E                 db    0
.eh_frame:0000000000007D1F                 db    0
.eh_frame:0000000000007D20                 db    0
.eh_frame:0000000000007D21                 db    0
.eh_frame:0000000000007D22                 db    0
.eh_frame:0000000000007D23                 db    0
.eh_frame:0000000000007D24                 db  28h ; (
.eh_frame:0000000000007D25                 db    0
.eh_frame:0000000000007D26                 db    0
.eh_frame:0000000000007D27                 db    0
.eh_frame:0000000000007D28                 db  80h
.eh_frame:0000000000007D29                 db    1
.eh_frame:0000000000007D2A                 db    0
.eh_frame:0000000000007D2B                 db    0
.eh_frame:0000000000007D2C                 db 0E4h
.eh_frame:0000000000007D2D                 db 0AEh
.eh_frame:0000000000007D2E                 db 0FFh
.eh_frame:0000000000007D2F                 db 0FFh
.eh_frame:0000000000007D30                 db 0C9h
.eh_frame:0000000000007D31                 db    0
.eh_frame:0000000000007D32                 db    0
.eh_frame:0000000000007D33                 db    0
.eh_frame:0000000000007D34                 db    0
.eh_frame:0000000000007D35                 db  41h ; A
.eh_frame:0000000000007D36                 db  0Eh
.eh_frame:0000000000007D37                 db  10h
.eh_frame:0000000000007D38                 db  86h
.eh_frame:0000000000007D39                 db    2
.eh_frame:0000000000007D3A                 db  41h ; A
.eh_frame:0000000000007D3B                 db  0Eh
.eh_frame:0000000000007D3C                 db  18h
.eh_frame:0000000000007D3D                 db  83h
.eh_frame:0000000000007D3E                 db    3
.eh_frame:0000000000007D3F                 db  4Ah ; J
.eh_frame:0000000000007D40                 db  0Eh
.eh_frame:0000000000007D41                 db  20h
.eh_frame:0000000000007D42                 db  77h ; w
.eh_frame:0000000000007D43                 db  0Ah
.eh_frame:0000000000007D44                 db  0Eh
.eh_frame:0000000000007D45                 db  18h
.eh_frame:0000000000007D46                 db  41h ; A
.eh_frame:0000000000007D47                 db  0Eh
.eh_frame:0000000000007D48                 db  10h
.eh_frame:0000000000007D49                 db  41h ; A
.eh_frame:0000000000007D4A                 db  0Eh
.eh_frame:0000000000007D4B                 db    8
.eh_frame:0000000000007D4C                 db  4Bh ; K
.eh_frame:0000000000007D4D                 db  0Bh
.eh_frame:0000000000007D4E                 db    0
.eh_frame:0000000000007D4F                 db    0
.eh_frame:0000000000007D50                 db  48h ; H
.eh_frame:0000000000007D51                 db    0
.eh_frame:0000000000007D52                 db    0
.eh_frame:0000000000007D53                 db    0
.eh_frame:0000000000007D54                 db 0ACh
.eh_frame:0000000000007D55                 db    1
.eh_frame:0000000000007D56                 db    0
.eh_frame:0000000000007D57                 db    0
.eh_frame:0000000000007D58                 db  88h
.eh_frame:0000000000007D59                 db 0AFh
.eh_frame:0000000000007D5A                 db 0FFh
.eh_frame:0000000000007D5B                 db 0FFh
.eh_frame:0000000000007D5C                 db 0B8h
.eh_frame:0000000000007D5D                 db    5
.eh_frame:0000000000007D5E                 db    0
.eh_frame:0000000000007D5F                 db    0
.eh_frame:0000000000007D60                 db    0
.eh_frame:0000000000007D61                 db  42h ; B
.eh_frame:0000000000007D62                 db  0Eh
.eh_frame:0000000000007D63                 db  10h
.eh_frame:0000000000007D64                 db  8Fh
.eh_frame:0000000000007D65                 db    2
.eh_frame:0000000000007D66                 db  42h ; B
.eh_frame:0000000000007D67                 db  0Eh
.eh_frame:0000000000007D68                 db  18h
.eh_frame:0000000000007D69                 db  8Eh
.eh_frame:0000000000007D6A                 db    3
.eh_frame:0000000000007D6B                 db  44h ; D
.eh_frame:0000000000007D6C                 db  0Eh
.eh_frame:0000000000007D6D                 db  20h
.eh_frame:0000000000007D6E                 db  8Dh
.eh_frame:0000000000007D6F                 db    4
.eh_frame:0000000000007D70                 db  42h ; B
.eh_frame:0000000000007D71                 db  0Eh
.eh_frame:0000000000007D72                 db  28h ; (
.eh_frame:0000000000007D73                 db  8Ch
.eh_frame:0000000000007D74                 db    5
.eh_frame:0000000000007D75                 db  44h ; D
.eh_frame:0000000000007D76                 db  0Eh
.eh_frame:0000000000007D77                 db  30h ; 0
.eh_frame:0000000000007D78                 db  86h
.eh_frame:0000000000007D79                 db    6
.eh_frame:0000000000007D7A                 db  41h ; A
.eh_frame:0000000000007D7B                 db  0Eh
.eh_frame:0000000000007D7C                 db  38h ; 8
.eh_frame:0000000000007D7D                 db  83h
.eh_frame:0000000000007D7E                 db    7
.eh_frame:0000000000007D7F                 db  44h ; D
.eh_frame:0000000000007D80                 db  0Eh
.eh_frame:0000000000007D81                 db  60h ; `
.eh_frame:0000000000007D82                 db    3
.eh_frame:0000000000007D83                 db  58h ; X
.eh_frame:0000000000007D84                 db    2
.eh_frame:0000000000007D85                 db  0Ah
.eh_frame:0000000000007D86                 db  0Eh
.eh_frame:0000000000007D87                 db  38h ; 8
.eh_frame:0000000000007D88                 db  41h ; A
.eh_frame:0000000000007D89                 db  0Eh
.eh_frame:0000000000007D8A                 db  30h ; 0
.eh_frame:0000000000007D8B                 db  41h ; A
.eh_frame:0000000000007D8C                 db  0Eh
.eh_frame:0000000000007D8D                 db  28h ; (
.eh_frame:0000000000007D8E                 db  42h ; B
.eh_frame:0000000000007D8F                 db  0Eh
.eh_frame:0000000000007D90                 db  20h
.eh_frame:0000000000007D91                 db  42h ; B
.eh_frame:0000000000007D92                 db  0Eh
.eh_frame:0000000000007D93                 db  18h
.eh_frame:0000000000007D94                 db  42h ; B
.eh_frame:0000000000007D95                 db  0Eh
.eh_frame:0000000000007D96                 db  10h
.eh_frame:0000000000007D97                 db  42h ; B
.eh_frame:0000000000007D98                 db  0Eh
.eh_frame:0000000000007D99                 db    8
.eh_frame:0000000000007D9A                 db  4Bh ; K
.eh_frame:0000000000007D9B                 db  0Bh
.eh_frame:0000000000007D9C                 db  18h
.eh_frame:0000000000007D9D                 db    0
.eh_frame:0000000000007D9E                 db    0
.eh_frame:0000000000007D9F                 db    0
.eh_frame:0000000000007DA0                 db 0F8h
.eh_frame:0000000000007DA1                 db    1
.eh_frame:0000000000007DA2                 db    0
.eh_frame:0000000000007DA3                 db    0
.eh_frame:0000000000007DA4                 db 0FCh
.eh_frame:0000000000007DA5                 db 0B4h
.eh_frame:0000000000007DA6                 db 0FFh
.eh_frame:0000000000007DA7                 db 0FFh
.eh_frame:0000000000007DA8                 db  36h ; 6
.eh_frame:0000000000007DA9                 db    0
.eh_frame:0000000000007DAA                 db    0
.eh_frame:0000000000007DAB                 db    0
.eh_frame:0000000000007DAC                 db    0
.eh_frame:0000000000007DAD                 db  44h ; D
.eh_frame:0000000000007DAE                 db  0Eh
.eh_frame:0000000000007DAF                 db  10h
.eh_frame:0000000000007DB0                 db  71h ; q
.eh_frame:0000000000007DB1                 db  0Eh
.eh_frame:0000000000007DB2                 db    8
.eh_frame:0000000000007DB3                 db    0
.eh_frame:0000000000007DB4                 db    0
.eh_frame:0000000000007DB5                 db    0
.eh_frame:0000000000007DB6                 db    0
.eh_frame:0000000000007DB7                 db    0
.eh_frame:0000000000007DB8                 db  10h
.eh_frame:0000000000007DB9                 db    0
.eh_frame:0000000000007DBA                 db    0
.eh_frame:0000000000007DBB                 db    0
.eh_frame:0000000000007DBC                 db  14h
.eh_frame:0000000000007DBD                 db    2
.eh_frame:0000000000007DBE                 db    0
.eh_frame:0000000000007DBF                 db    0
.eh_frame:0000000000007DC0                 db  20h
.eh_frame:0000000000007DC1                 db 0B5h
.eh_frame:0000000000007DC2                 db 0FFh
.eh_frame:0000000000007DC3                 db 0FFh
.eh_frame:0000000000007DC4                 db    8
.eh_frame:0000000000007DC5                 db    0
.eh_frame:0000000000007DC6                 db    0
.eh_frame:0000000000007DC7                 db    0
.eh_frame:0000000000007DC8                 db    0
.eh_frame:0000000000007DC9                 db    0
.eh_frame:0000000000007DCA                 db    0
.eh_frame:0000000000007DCB                 db    0
.eh_frame:0000000000007DCC                 db  10h
.eh_frame:0000000000007DCD                 db    0
.eh_frame:0000000000007DCE                 db    0
.eh_frame:0000000000007DCF                 db    0
.eh_frame:0000000000007DD0                 db  28h ; (
.eh_frame:0000000000007DD1                 db    2
.eh_frame:0000000000007DD2                 db    0
.eh_frame:0000000000007DD3                 db    0
.eh_frame:0000000000007DD4                 db  1Ch
.eh_frame:0000000000007DD5                 db 0B5h
.eh_frame:0000000000007DD6                 db 0FFh
.eh_frame:0000000000007DD7                 db 0FFh
.eh_frame:0000000000007DD8                 db    8
.eh_frame:0000000000007DD9                 db    0
.eh_frame:0000000000007DDA                 db    0
.eh_frame:0000000000007DDB                 db    0
.eh_frame:0000000000007DDC                 db    0
.eh_frame:0000000000007DDD                 db    0
.eh_frame:0000000000007DDE                 db    0
.eh_frame:0000000000007DDF                 db    0
.eh_frame:0000000000007DE0                 db  2Ch ; ,
.eh_frame:0000000000007DE1                 db    0
.eh_frame:0000000000007DE2                 db    0
.eh_frame:0000000000007DE3                 db    0
.eh_frame:0000000000007DE4                 db  3Ch ; <
.eh_frame:0000000000007DE5                 db    2
.eh_frame:0000000000007DE6                 db    0
.eh_frame:0000000000007DE7                 db    0
.eh_frame:0000000000007DE8                 db  18h
.eh_frame:0000000000007DE9                 db 0B5h
.eh_frame:0000000000007DEA                 db 0FFh
.eh_frame:0000000000007DEB                 db 0FFh
.eh_frame:0000000000007DEC                 db 0A4h
.eh_frame:0000000000007DED                 db    0
.eh_frame:0000000000007DEE                 db    0
.eh_frame:0000000000007DEF                 db    0
.eh_frame:0000000000007DF0                 db    0
.eh_frame:0000000000007DF1                 db  41h ; A
.eh_frame:0000000000007DF2                 db  0Eh
.eh_frame:0000000000007DF3                 db  10h
.eh_frame:0000000000007DF4                 db  86h
.eh_frame:0000000000007DF5                 db    2
.eh_frame:0000000000007DF6                 db  41h ; A
.eh_frame:0000000000007DF7                 db  0Eh
.eh_frame:0000000000007DF8                 db  18h
.eh_frame:0000000000007DF9                 db  83h
.eh_frame:0000000000007DFA                 db    3
.eh_frame:0000000000007DFB                 db  44h ; D
.eh_frame:0000000000007DFC                 db  0Eh
.eh_frame:0000000000007DFD                 db  20h
.eh_frame:0000000000007DFE                 db  7Ah ; z
.eh_frame:0000000000007DFF                 db  0Ah
.eh_frame:0000000000007E00                 db  0Eh
.eh_frame:0000000000007E01                 db  18h
.eh_frame:0000000000007E02                 db  41h ; A
.eh_frame:0000000000007E03                 db  0Eh
.eh_frame:0000000000007E04                 db  10h
.eh_frame:0000000000007E05                 db  41h ; A
.eh_frame:0000000000007E06                 db  0Eh
.eh_frame:0000000000007E07                 db    8
.eh_frame:0000000000007E08                 db  41h ; A
.eh_frame:0000000000007E09                 db  0Bh
.eh_frame:0000000000007E0A                 db    0
.eh_frame:0000000000007E0B                 db    0
.eh_frame:0000000000007E0C                 db    0
.eh_frame:0000000000007E0D                 db    0
.eh_frame:0000000000007E0E                 db    0
.eh_frame:0000000000007E0F                 db    0
.eh_frame:0000000000007E10                 db  10h
.eh_frame:0000000000007E11                 db    0
.eh_frame:0000000000007E12                 db    0
.eh_frame:0000000000007E13                 db    0
.eh_frame:0000000000007E14                 db  6Ch ; l
.eh_frame:0000000000007E15                 db    2
.eh_frame:0000000000007E16                 db    0
.eh_frame:0000000000007E17                 db    0
.eh_frame:0000000000007E18                 db  98h
.eh_frame:0000000000007E19                 db 0B5h
.eh_frame:0000000000007E1A                 db 0FFh
.eh_frame:0000000000007E1B                 db 0FFh
.eh_frame:0000000000007E1C                 db    5
.eh_frame:0000000000007E1D                 db    0
.eh_frame:0000000000007E1E                 db    0
.eh_frame:0000000000007E1F                 db    0
.eh_frame:0000000000007E20                 db    0
.eh_frame:0000000000007E21                 db    0
.eh_frame:0000000000007E22                 db    0
.eh_frame:0000000000007E23                 db    0
.eh_frame:0000000000007E24                 db  18h
.eh_frame:0000000000007E25                 db    0
.eh_frame:0000000000007E26                 db    0
.eh_frame:0000000000007E27                 db    0
.eh_frame:0000000000007E28                 db  80h
.eh_frame:0000000000007E29                 db    2
.eh_frame:0000000000007E2A                 db    0
.eh_frame:0000000000007E2B                 db    0
.eh_frame:0000000000007E2C                 db  94h
.eh_frame:0000000000007E2D                 db 0B5h
.eh_frame:0000000000007E2E                 db 0FFh
.eh_frame:0000000000007E2F                 db 0FFh
.eh_frame:0000000000007E30                 db  22h ; "
.eh_frame:0000000000007E31                 db    0
.eh_frame:0000000000007E32                 db    0
.eh_frame:0000000000007E33                 db    0
.eh_frame:0000000000007E34                 db    0
.eh_frame:0000000000007E35                 db  46h ; F
.eh_frame:0000000000007E36                 db  0Eh
.eh_frame:0000000000007E37                 db  10h
.eh_frame:0000000000007E38                 db  83h
.eh_frame:0000000000007E39                 db    2
.eh_frame:0000000000007E3A                 db  4Eh ; N
.eh_frame:0000000000007E3B                 db 0C3h
.eh_frame:0000000000007E3C                 db  0Eh
.eh_frame:0000000000007E3D                 db    8
.eh_frame:0000000000007E3E                 db    0
.eh_frame:0000000000007E3F                 db    0
.eh_frame:0000000000007E40                 db  4Ch ; L
.eh_frame:0000000000007E41                 db    0
.eh_frame:0000000000007E42                 db    0
.eh_frame:0000000000007E43                 db    0
.eh_frame:0000000000007E44                 db  9Ch
.eh_frame:0000000000007E45                 db    2
.eh_frame:0000000000007E46                 db    0
.eh_frame:0000000000007E47                 db    0
.eh_frame:0000000000007E48                 db 0A8h
.eh_frame:0000000000007E49                 db 0B5h
.eh_frame:0000000000007E4A                 db 0FFh
.eh_frame:0000000000007E4B                 db 0FFh
.eh_frame:0000000000007E4C                 db  7Fh ; 
.eh_frame:0000000000007E4D                 db    3
.eh_frame:0000000000007E4E                 db    0
.eh_frame:0000000000007E4F                 db    0
.eh_frame:0000000000007E50                 db    0
.eh_frame:0000000000007E51                 db  42h ; B
.eh_frame:0000000000007E52                 db  0Eh
.eh_frame:0000000000007E53                 db  10h
.eh_frame:0000000000007E54                 db  8Fh
.eh_frame:0000000000007E55                 db    2
.eh_frame:0000000000007E56                 db  42h ; B
.eh_frame:0000000000007E57                 db  0Eh
.eh_frame:0000000000007E58                 db  18h
.eh_frame:0000000000007E59                 db  8Eh
.eh_frame:0000000000007E5A                 db    3
.eh_frame:0000000000007E5B                 db  42h ; B
.eh_frame:0000000000007E5C                 db  0Eh
.eh_frame:0000000000007E5D                 db  20h
.eh_frame:0000000000007E5E                 db  8Dh
.eh_frame:0000000000007E5F                 db    4
.eh_frame:0000000000007E60                 db  42h ; B
.eh_frame:0000000000007E61                 db  0Eh
.eh_frame:0000000000007E62                 db  28h ; (
.eh_frame:0000000000007E63                 db  8Ch
.eh_frame:0000000000007E64                 db    5
.eh_frame:0000000000007E65                 db  41h ; A
.eh_frame:0000000000007E66                 db  0Eh
.eh_frame:0000000000007E67                 db  30h ; 0
.eh_frame:0000000000007E68                 db  86h
.eh_frame:0000000000007E69                 db    6
.eh_frame:0000000000007E6A                 db  41h ; A
.eh_frame:0000000000007E6B                 db  0Eh
.eh_frame:0000000000007E6C                 db  38h ; 8
.eh_frame:0000000000007E6D                 db  83h
.eh_frame:0000000000007E6E                 db    7
.eh_frame:0000000000007E6F                 db  44h ; D
.eh_frame:0000000000007E70                 db  0Eh
.eh_frame:0000000000007E71                 db 0A0h
.eh_frame:0000000000007E72                 db    1
.eh_frame:0000000000007E73                 db    2
.eh_frame:0000000000007E74                 db  7Bh ; {
.eh_frame:0000000000007E75                 db  0Ah
.eh_frame:0000000000007E76                 db  0Eh
.eh_frame:0000000000007E77                 db  38h ; 8
.eh_frame:0000000000007E78                 db  41h ; A
.eh_frame:0000000000007E79                 db  0Eh
.eh_frame:0000000000007E7A                 db  30h ; 0
.eh_frame:0000000000007E7B                 db  41h ; A
.eh_frame:0000000000007E7C                 db  0Eh
.eh_frame:0000000000007E7D                 db  28h ; (
.eh_frame:0000000000007E7E                 db  42h ; B
.eh_frame:0000000000007E7F                 db  0Eh
.eh_frame:0000000000007E80                 db  20h
.eh_frame:0000000000007E81                 db  42h ; B
.eh_frame:0000000000007E82                 db  0Eh
.eh_frame:0000000000007E83                 db  18h
.eh_frame:0000000000007E84                 db  42h ; B
.eh_frame:0000000000007E85                 db  0Eh
.eh_frame:0000000000007E86                 db  10h
.eh_frame:0000000000007E87                 db  42h ; B
.eh_frame:0000000000007E88                 db  0Eh
.eh_frame:0000000000007E89                 db    8
.eh_frame:0000000000007E8A                 db  45h ; E
.eh_frame:0000000000007E8B                 db  0Bh
.eh_frame:0000000000007E8C                 db    0
.eh_frame:0000000000007E8D                 db    0
.eh_frame:0000000000007E8E                 db    0
.eh_frame:0000000000007E8F                 db    0
.eh_frame:0000000000007E90                 db  6Ch ; l
.eh_frame:0000000000007E91                 db    0
.eh_frame:0000000000007E92                 db    0
.eh_frame:0000000000007E93                 db    0
.eh_frame:0000000000007E94                 db 0ECh
.eh_frame:0000000000007E95                 db    2
.eh_frame:0000000000007E96                 db    0
.eh_frame:0000000000007E97                 db    0
.eh_frame:0000000000007E98                 db 0D8h
.eh_frame:0000000000007E99                 db 0B8h
.eh_frame:0000000000007E9A                 db 0FFh
.eh_frame:0000000000007E9B                 db 0FFh
.eh_frame:0000000000007E9C                 db 0B6h
.eh_frame:0000000000007E9D                 db    1
.eh_frame:0000000000007E9E                 db    0
.eh_frame:0000000000007E9F                 db    0
.eh_frame:0000000000007EA0                 db    0
.eh_frame:0000000000007EA1                 db  4Eh ; N
.eh_frame:0000000000007EA2                 db  0Eh
.eh_frame:0000000000007EA3                 db  10h
.eh_frame:0000000000007EA4                 db  8Fh
.eh_frame:0000000000007EA5                 db    2
.eh_frame:0000000000007EA6                 db  45h ; E
.eh_frame:0000000000007EA7                 db  0Eh
.eh_frame:0000000000007EA8                 db  18h
.eh_frame:0000000000007EA9                 db  8Eh
.eh_frame:0000000000007EAA                 db    3
.eh_frame:0000000000007EAB                 db  42h ; B
.eh_frame:0000000000007EAC                 db  0Eh
.eh_frame:0000000000007EAD                 db  20h
.eh_frame:0000000000007EAE                 db  8Dh
.eh_frame:0000000000007EAF                 db    4
.eh_frame:0000000000007EB0                 db  42h ; B
.eh_frame:0000000000007EB1                 db  0Eh
.eh_frame:0000000000007EB2                 db  28h ; (
.eh_frame:0000000000007EB3                 db  8Ch
.eh_frame:0000000000007EB4                 db    5
.eh_frame:0000000000007EB5                 db  41h ; A
.eh_frame:0000000000007EB6                 db  0Eh
.eh_frame:0000000000007EB7                 db  30h ; 0
.eh_frame:0000000000007EB8                 db  86h
.eh_frame:0000000000007EB9                 db    6
.eh_frame:0000000000007EBA                 db  41h ; A
.eh_frame:0000000000007EBB                 db  0Eh
.eh_frame:0000000000007EBC                 db  38h ; 8
.eh_frame:0000000000007EBD                 db  83h
.eh_frame:0000000000007EBE                 db    7
.eh_frame:0000000000007EBF                 db    3
.eh_frame:0000000000007EC0                 db  5Fh ; _
.eh_frame:0000000000007EC1                 db    1
.eh_frame:0000000000007EC2                 db  0Ah
.eh_frame:0000000000007EC3                 db  0Eh
.eh_frame:0000000000007EC4                 db  30h ; 0
.eh_frame:0000000000007EC5                 db  41h ; A
.eh_frame:0000000000007EC6                 db  0Eh
.eh_frame:0000000000007EC7                 db  28h ; (
.eh_frame:0000000000007EC8                 db  42h ; B
.eh_frame:0000000000007EC9                 db  0Eh
.eh_frame:0000000000007ECA                 db  20h
.eh_frame:0000000000007ECB                 db  42h ; B
.eh_frame:0000000000007ECC                 db  0Eh
.eh_frame:0000000000007ECD                 db  18h
.eh_frame:0000000000007ECE                 db  42h ; B
.eh_frame:0000000000007ECF                 db  0Eh
.eh_frame:0000000000007ED0                 db  10h
.eh_frame:0000000000007ED1                 db  42h ; B
.eh_frame:0000000000007ED2                 db  0Eh
.eh_frame:0000000000007ED3                 db    8
.eh_frame:0000000000007ED4                 db  47h ; G
.eh_frame:0000000000007ED5                 db  0Bh
.eh_frame:0000000000007ED6                 db  41h ; A
.eh_frame:0000000000007ED7                 db  0Eh
.eh_frame:0000000000007ED8                 db  30h ; 0
.eh_frame:0000000000007ED9                 db  44h ; D
.eh_frame:0000000000007EDA                 db  0Eh
.eh_frame:0000000000007EDB                 db  28h ; (
.eh_frame:0000000000007EDC                 db  42h ; B
.eh_frame:0000000000007EDD                 db  0Eh
.eh_frame:0000000000007EDE                 db  20h
.eh_frame:0000000000007EDF                 db  42h ; B
.eh_frame:0000000000007EE0                 db  0Eh
.eh_frame:0000000000007EE1                 db  18h
.eh_frame:0000000000007EE2                 db  42h ; B
.eh_frame:0000000000007EE3                 db  0Eh
.eh_frame:0000000000007EE4                 db  10h
.eh_frame:0000000000007EE5                 db  42h ; B
.eh_frame:0000000000007EE6                 db  0Eh
.eh_frame:0000000000007EE7                 db    8
.eh_frame:0000000000007EE8                 db  4Bh ; K
.eh_frame:0000000000007EE9                 db 0C3h
.eh_frame:0000000000007EEA                 db 0C6h
.eh_frame:0000000000007EEB                 db 0CCh
.eh_frame:0000000000007EEC                 db 0CDh
.eh_frame:0000000000007EED                 db 0CEh
.eh_frame:0000000000007EEE                 db 0CFh
.eh_frame:0000000000007EEF                 db  4Ch ; L
.eh_frame:0000000000007EF0                 db  0Eh
.eh_frame:0000000000007EF1                 db  38h ; 8
.eh_frame:0000000000007EF2                 db  83h
.eh_frame:0000000000007EF3                 db    7
.eh_frame:0000000000007EF4                 db  86h
.eh_frame:0000000000007EF5                 db    6
.eh_frame:0000000000007EF6                 db  8Ch
.eh_frame:0000000000007EF7                 db    5
.eh_frame:0000000000007EF8                 db  8Dh
.eh_frame:0000000000007EF9                 db    4
.eh_frame:0000000000007EFA                 db  8Eh
.eh_frame:0000000000007EFB                 db    3
.eh_frame:0000000000007EFC                 db  8Fh
.eh_frame:0000000000007EFD                 db    2
.eh_frame:0000000000007EFE                 db    0
.eh_frame:0000000000007EFF                 db    0
.eh_frame:0000000000007F00                 db  1Ch
.eh_frame:0000000000007F01                 db    0
.eh_frame:0000000000007F02                 db    0
.eh_frame:0000000000007F03                 db    0
.eh_frame:0000000000007F04                 db  5Ch ; \
.eh_frame:0000000000007F05                 db    3
.eh_frame:0000000000007F06                 db    0
.eh_frame:0000000000007F07                 db    0
.eh_frame:0000000000007F08                 db  28h ; (
.eh_frame:0000000000007F09                 db 0BAh
.eh_frame:0000000000007F0A                 db 0FFh
.eh_frame:0000000000007F0B                 db 0FFh
.eh_frame:0000000000007F0C                 db  9Fh
.eh_frame:0000000000007F0D                 db    0
.eh_frame:0000000000007F0E                 db    0
.eh_frame:0000000000007F0F                 db    0
.eh_frame:0000000000007F10                 db    0
.eh_frame:0000000000007F11                 db  44h ; D
.eh_frame:0000000000007F12                 db  0Eh
.eh_frame:0000000000007F13                 db  10h
.eh_frame:0000000000007F14                 db  83h
.eh_frame:0000000000007F15                 db    2
.eh_frame:0000000000007F16                 db    2
.eh_frame:0000000000007F17                 db  78h ; x
.eh_frame:0000000000007F18                 db  0Ah
.eh_frame:0000000000007F19                 db  0Eh
.eh_frame:0000000000007F1A                 db    8
.eh_frame:0000000000007F1B                 db  41h ; A
.eh_frame:0000000000007F1C                 db  0Bh
.eh_frame:0000000000007F1D                 db    0
.eh_frame:0000000000007F1E                 db    0
.eh_frame:0000000000007F1F                 db    0
.eh_frame:0000000000007F20                 db  40h ; @
.eh_frame:0000000000007F21                 db    0
.eh_frame:0000000000007F22                 db    0
.eh_frame:0000000000007F23                 db    0
.eh_frame:0000000000007F24                 db  7Ch ; |
.eh_frame:0000000000007F25                 db    3
.eh_frame:0000000000007F26                 db    0
.eh_frame:0000000000007F27                 db    0
.eh_frame:0000000000007F28                 db 0A8h
.eh_frame:0000000000007F29                 db 0BAh
.eh_frame:0000000000007F2A                 db 0FFh
.eh_frame:0000000000007F2B                 db 0FFh
.eh_frame:0000000000007F2C                 db 0E7h
.eh_frame:0000000000007F2D                 db    0
.eh_frame:0000000000007F2E                 db    0
.eh_frame:0000000000007F2F                 db    0
.eh_frame:0000000000007F30                 db    0
.eh_frame:0000000000007F31                 db  41h ; A
.eh_frame:0000000000007F32                 db  0Eh
.eh_frame:0000000000007F33                 db  10h
.eh_frame:0000000000007F34                 db  86h
.eh_frame:0000000000007F35                 db    2
.eh_frame:0000000000007F36                 db  41h ; A
.eh_frame:0000000000007F37                 db  0Eh
.eh_frame:0000000000007F38                 db  18h
.eh_frame:0000000000007F39                 db  83h
.eh_frame:0000000000007F3A                 db    3
.eh_frame:0000000000007F3B                 db  49h ; I
.eh_frame:0000000000007F3C                 db  0Eh
.eh_frame:0000000000007F3D                 db  20h
.eh_frame:0000000000007F3E                 db  6Eh ; n
.eh_frame:0000000000007F3F                 db  0Ah
.eh_frame:0000000000007F40                 db  0Eh
.eh_frame:0000000000007F41                 db  18h
.eh_frame:0000000000007F42                 db  41h ; A
.eh_frame:0000000000007F43                 db  0Eh
.eh_frame:0000000000007F44                 db  10h
.eh_frame:0000000000007F45                 db  41h ; A
.eh_frame:0000000000007F46                 db  0Eh
.eh_frame:0000000000007F47                 db    8
.eh_frame:0000000000007F48                 db  45h ; E
.eh_frame:0000000000007F49                 db  0Bh
.eh_frame:0000000000007F4A                 db    2
.eh_frame:0000000000007F4B                 db  4Ah ; J
.eh_frame:0000000000007F4C                 db  0Ah
.eh_frame:0000000000007F4D                 db  0Eh
.eh_frame:0000000000007F4E                 db  18h
.eh_frame:0000000000007F4F                 db  41h ; A
.eh_frame:0000000000007F50                 db  0Eh
.eh_frame:0000000000007F51                 db  10h
.eh_frame:0000000000007F52                 db  41h ; A
.eh_frame:0000000000007F53                 db  0Eh
.eh_frame:0000000000007F54                 db    8
.eh_frame:0000000000007F55                 db  44h ; D
.eh_frame:0000000000007F56                 db  0Bh
.eh_frame:0000000000007F57                 db    2
.eh_frame:0000000000007F58                 db  54h ; T
.eh_frame:0000000000007F59                 db  0Eh
.eh_frame:0000000000007F5A                 db  18h
.eh_frame:0000000000007F5B                 db  41h ; A
.eh_frame:0000000000007F5C                 db  0Eh
.eh_frame:0000000000007F5D                 db  10h
.eh_frame:0000000000007F5E                 db  41h ; A
.eh_frame:0000000000007F5F                 db  0Eh
.eh_frame:0000000000007F60                 db    8
.eh_frame:0000000000007F61                 db    0
.eh_frame:0000000000007F62                 db    0
.eh_frame:0000000000007F63                 db    0
.eh_frame:0000000000007F64                 db  74h ; t
.eh_frame:0000000000007F65                 db    0
.eh_frame:0000000000007F66                 db    0
.eh_frame:0000000000007F67                 db    0
.eh_frame:0000000000007F68                 db 0C0h
.eh_frame:0000000000007F69                 db    3
.eh_frame:0000000000007F6A                 db    0
.eh_frame:0000000000007F6B                 db    0
.eh_frame:0000000000007F6C                 db  54h ; T
.eh_frame:0000000000007F6D                 db 0BBh
.eh_frame:0000000000007F6E                 db 0FFh
.eh_frame:0000000000007F6F                 db 0FFh
.eh_frame:0000000000007F70                 db  34h ; 4
.eh_frame:0000000000007F71                 db  12h
.eh_frame:0000000000007F72                 db    0
.eh_frame:0000000000007F73                 db    0
.eh_frame:0000000000007F74                 db    0
.eh_frame:0000000000007F75                 db  42h ; B
.eh_frame:0000000000007F76                 db  0Eh
.eh_frame:0000000000007F77                 db  10h
.eh_frame:0000000000007F78                 db  8Fh
.eh_frame:0000000000007F79                 db    2
.eh_frame:0000000000007F7A                 db  42h ; B
.eh_frame:0000000000007F7B                 db  0Eh
.eh_frame:0000000000007F7C                 db  18h
.eh_frame:0000000000007F7D                 db  8Eh
.eh_frame:0000000000007F7E                 db    3
.eh_frame:0000000000007F7F                 db  45h ; E
.eh_frame:0000000000007F80                 db  0Eh
.eh_frame:0000000000007F81                 db  20h
.eh_frame:0000000000007F82                 db  8Dh
.eh_frame:0000000000007F83                 db    4
.eh_frame:0000000000007F84                 db  42h ; B
.eh_frame:0000000000007F85                 db  0Eh
.eh_frame:0000000000007F86                 db  28h ; (
.eh_frame:0000000000007F87                 db  8Ch
.eh_frame:0000000000007F88                 db    5
.eh_frame:0000000000007F89                 db  44h ; D
.eh_frame:0000000000007F8A                 db  0Eh
.eh_frame:0000000000007F8B                 db  30h ; 0
.eh_frame:0000000000007F8C                 db  86h
.eh_frame:0000000000007F8D                 db    6
.eh_frame:0000000000007F8E                 db  41h ; A
.eh_frame:0000000000007F8F                 db  0Eh
.eh_frame:0000000000007F90                 db  38h ; 8
.eh_frame:0000000000007F91                 db  83h
.eh_frame:0000000000007F92                 db    7
.eh_frame:0000000000007F93                 db  53h ; S
.eh_frame:0000000000007F94                 db  0Eh
.eh_frame:0000000000007F95                 db 0F0h
.eh_frame:0000000000007F96                 db    1
.eh_frame:0000000000007F97                 db    3
.eh_frame:0000000000007F98                 db  81h
.eh_frame:0000000000007F99                 db  0Bh
.eh_frame:0000000000007F9A                 db  0Eh
.eh_frame:0000000000007F9B                 db 0F8h
.eh_frame:0000000000007F9C                 db    1
.eh_frame:0000000000007F9D                 db  4Ah ; J
.eh_frame:0000000000007F9E                 db  0Eh
.eh_frame:0000000000007F9F                 db  80h
.eh_frame:0000000000007FA0                 db    2
.eh_frame:0000000000007FA1                 db  44h ; D
.eh_frame:0000000000007FA2                 db  0Eh
.eh_frame:0000000000007FA3                 db  88h
.eh_frame:0000000000007FA4                 db    2
.eh_frame:0000000000007FA5                 db  45h ; E
.eh_frame:0000000000007FA6                 db  0Eh
.eh_frame:0000000000007FA7                 db  90h
.eh_frame:0000000000007FA8                 db    2
.eh_frame:0000000000007FA9                 db  5Fh ; _
.eh_frame:0000000000007FAA                 db  0Eh
.eh_frame:0000000000007FAB                 db 0F0h
.eh_frame:0000000000007FAC                 db    1
.eh_frame:0000000000007FAD                 db  64h ; d
.eh_frame:0000000000007FAE                 db  0Ah
.eh_frame:0000000000007FAF                 db  0Eh
.eh_frame:0000000000007FB0                 db  38h ; 8
.eh_frame:0000000000007FB1                 db  41h ; A
.eh_frame:0000000000007FB2                 db  0Eh
.eh_frame:0000000000007FB3                 db  30h ; 0
.eh_frame:0000000000007FB4                 db  41h ; A
.eh_frame:0000000000007FB5                 db  0Eh
.eh_frame:0000000000007FB6                 db  28h ; (
.eh_frame:0000000000007FB7                 db  42h ; B
.eh_frame:0000000000007FB8                 db  0Eh
.eh_frame:0000000000007FB9                 db  20h
.eh_frame:0000000000007FBA                 db  42h ; B
.eh_frame:0000000000007FBB                 db  0Eh
.eh_frame:0000000000007FBC                 db  18h
.eh_frame:0000000000007FBD                 db  42h ; B
.eh_frame:0000000000007FBE                 db  0Eh
.eh_frame:0000000000007FBF                 db  10h
.eh_frame:0000000000007FC0                 db  42h ; B
.eh_frame:0000000000007FC1                 db  0Eh
.eh_frame:0000000000007FC2                 db    8
.eh_frame:0000000000007FC3                 db  44h ; D
.eh_frame:0000000000007FC4                 db  0Bh
.eh_frame:0000000000007FC5                 db    3
.eh_frame:0000000000007FC6                 db  99h
.eh_frame:0000000000007FC7                 db    5
.eh_frame:0000000000007FC8                 db  0Eh
.eh_frame:0000000000007FC9                 db 0F8h
.eh_frame:0000000000007FCA                 db    1
.eh_frame:0000000000007FCB                 db  4Dh ; M
.eh_frame:0000000000007FCC                 db  0Eh
.eh_frame:0000000000007FCD                 db  80h
.eh_frame:0000000000007FCE                 db    2
.eh_frame:0000000000007FCF                 db  44h ; D
.eh_frame:0000000000007FD0                 db  0Eh
.eh_frame:0000000000007FD1                 db  88h
.eh_frame:0000000000007FD2                 db    2
.eh_frame:0000000000007FD3                 db  47h ; G
.eh_frame:0000000000007FD4                 db  0Eh
.eh_frame:0000000000007FD5                 db  90h
.eh_frame:0000000000007FD6                 db    2
.eh_frame:0000000000007FD7                 db  5Bh ; [
.eh_frame:0000000000007FD8                 db  0Eh
.eh_frame:0000000000007FD9                 db 0F0h
.eh_frame:0000000000007FDA                 db    1
.eh_frame:0000000000007FDB                 db    0
.eh_frame:0000000000007FDC                 db  68h ; h
.eh_frame:0000000000007FDD                 db    0
.eh_frame:0000000000007FDE                 db    0
.eh_frame:0000000000007FDF                 db    0
.eh_frame:0000000000007FE0                 db  38h ; 8
.eh_frame:0000000000007FE1                 db    4
.eh_frame:0000000000007FE2                 db    0
.eh_frame:0000000000007FE3                 db    0
.eh_frame:0000000000007FE4                 db  1Ch
.eh_frame:0000000000007FE5                 db 0CDh
.eh_frame:0000000000007FE6                 db 0FFh
.eh_frame:0000000000007FE7                 db 0FFh
.eh_frame:0000000000007FE8                 db 0ABh
.eh_frame:0000000000007FE9                 db    1
.eh_frame:0000000000007FEA                 db    0
.eh_frame:0000000000007FEB                 db    0
.eh_frame:0000000000007FEC                 db    0
.eh_frame:0000000000007FED                 db  42h ; B
.eh_frame:0000000000007FEE                 db  0Eh
.eh_frame:0000000000007FEF                 db  10h
.eh_frame:0000000000007FF0                 db  8Fh
.eh_frame:0000000000007FF1                 db    2
.eh_frame:0000000000007FF2                 db  42h ; B
.eh_frame:0000000000007FF3                 db  0Eh
.eh_frame:0000000000007FF4                 db  18h
.eh_frame:0000000000007FF5                 db  8Eh
.eh_frame:0000000000007FF6                 db    3
.eh_frame:0000000000007FF7                 db  45h ; E
.eh_frame:0000000000007FF8                 db  0Eh
.eh_frame:0000000000007FF9                 db  20h
.eh_frame:0000000000007FFA                 db  8Dh
.eh_frame:0000000000007FFB                 db    4
.eh_frame:0000000000007FFC                 db  42h ; B
.eh_frame:0000000000007FFD                 db  0Eh
.eh_frame:0000000000007FFE                 db  28h ; (
.eh_frame:0000000000007FFF                 db  8Ch
.eh_frame:0000000000008000                 db    5
.eh_frame:0000000000008001                 db  44h ; D
.eh_frame:0000000000008002                 db  0Eh
.eh_frame:0000000000008003                 db  30h ; 0
.eh_frame:0000000000008004                 db  86h
.eh_frame:0000000000008005                 db    6
.eh_frame:0000000000008006                 db  41h ; A
.eh_frame:0000000000008007                 db  0Eh
.eh_frame:0000000000008008                 db  38h ; 8
.eh_frame:0000000000008009                 db  83h
.eh_frame:000000000000800A                 db    7
.eh_frame:000000000000800B                 db  47h ; G
.eh_frame:000000000000800C                 db  0Eh
.eh_frame:000000000000800D                 db  60h ; `
.eh_frame:000000000000800E                 db    2
.eh_frame:000000000000800F                 db  99h
.eh_frame:0000000000008010                 db  0Eh
.eh_frame:0000000000008011                 db  68h ; h
.eh_frame:0000000000008012                 db  5Fh ; _
.eh_frame:0000000000008013                 db  0Eh
.eh_frame:0000000000008014                 db  70h ; p
.eh_frame:0000000000008015                 db  46h ; F
.eh_frame:0000000000008016                 db  0Eh
.eh_frame:0000000000008017                 db  78h ; x
.eh_frame:0000000000008018                 db  42h ; B
.eh_frame:0000000000008019                 db  0Eh
.eh_frame:000000000000801A                 db  80h
.eh_frame:000000000000801B                 db    1
.eh_frame:000000000000801C                 db  59h ; Y
.eh_frame:000000000000801D                 db  0Eh
.eh_frame:000000000000801E                 db  60h ; `
.eh_frame:000000000000801F                 db    2
.eh_frame:0000000000008020                 db  40h ; @
.eh_frame:0000000000008021                 db  0Eh
.eh_frame:0000000000008022                 db  68h ; h
.eh_frame:0000000000008023                 db  4Bh ; K
.eh_frame:0000000000008024                 db  0Eh
.eh_frame:0000000000008025                 db  70h ; p
.eh_frame:0000000000008026                 db  43h ; C
.eh_frame:0000000000008027                 db  0Eh
.eh_frame:0000000000008028                 db  78h ; x
.eh_frame:0000000000008029                 db  45h ; E
.eh_frame:000000000000802A                 db  0Eh
.eh_frame:000000000000802B                 db  80h
.eh_frame:000000000000802C                 db    1
.eh_frame:000000000000802D                 db  5Eh ; ^
.eh_frame:000000000000802E                 db  0Eh
.eh_frame:000000000000802F                 db  60h ; `
.eh_frame:0000000000008030                 db  4Ch ; L
.eh_frame:0000000000008031                 db  0Ah
.eh_frame:0000000000008032                 db  0Eh
.eh_frame:0000000000008033                 db  38h ; 8
.eh_frame:0000000000008034                 db  44h ; D
.eh_frame:0000000000008035                 db  0Eh
.eh_frame:0000000000008036                 db  30h ; 0
.eh_frame:0000000000008037                 db  41h ; A
.eh_frame:0000000000008038                 db  0Eh
.eh_frame:0000000000008039                 db  28h ; (
.eh_frame:000000000000803A                 db  42h ; B
.eh_frame:000000000000803B                 db  0Eh
.eh_frame:000000000000803C                 db  20h
.eh_frame:000000000000803D                 db  42h ; B
.eh_frame:000000000000803E                 db  0Eh
.eh_frame:000000000000803F                 db  18h
.eh_frame:0000000000008040                 db  42h ; B
.eh_frame:0000000000008041                 db  0Eh
.eh_frame:0000000000008042                 db  10h
.eh_frame:0000000000008043                 db  42h ; B
.eh_frame:0000000000008044                 db  0Eh
.eh_frame:0000000000008045                 db    8
.eh_frame:0000000000008046                 db  46h ; F
.eh_frame:0000000000008047                 db  0Bh
.eh_frame:0000000000008048                 db  28h ; (
.eh_frame:0000000000008049                 db    0
.eh_frame:000000000000804A                 db    0
.eh_frame:000000000000804B                 db    0
.eh_frame:000000000000804C                 db 0A4h
.eh_frame:000000000000804D                 db    4
.eh_frame:000000000000804E                 db    0
.eh_frame:000000000000804F                 db    0
.eh_frame:0000000000008050                 db  60h ; `
.eh_frame:0000000000008051                 db 0CEh
.eh_frame:0000000000008052                 db 0FFh
.eh_frame:0000000000008053                 db 0FFh
.eh_frame:0000000000008054                 db  36h ; 6
.eh_frame:0000000000008055                 db    0
.eh_frame:0000000000008056                 db    0
.eh_frame:0000000000008057                 db    0
.eh_frame:0000000000008058                 db    0
.eh_frame:0000000000008059                 db  42h ; B
.eh_frame:000000000000805A                 db  0Eh
.eh_frame:000000000000805B                 db  10h
.eh_frame:000000000000805C                 db  8Ch
.eh_frame:000000000000805D                 db    2
.eh_frame:000000000000805E                 db  41h ; A
.eh_frame:000000000000805F                 db  0Eh
.eh_frame:0000000000008060                 db  18h
.eh_frame:0000000000008061                 db  86h
.eh_frame:0000000000008062                 db    3
.eh_frame:0000000000008063                 db  41h ; A
.eh_frame:0000000000008064                 db  0Eh
.eh_frame:0000000000008065                 db  20h
.eh_frame:0000000000008066                 db  83h
.eh_frame:0000000000008067                 db    4
.eh_frame:0000000000008068                 db  6Eh ; n
.eh_frame:0000000000008069                 db  0Eh
.eh_frame:000000000000806A                 db  18h
.eh_frame:000000000000806B                 db  41h ; A
.eh_frame:000000000000806C                 db  0Eh
.eh_frame:000000000000806D                 db  10h
.eh_frame:000000000000806E                 db  42h ; B
.eh_frame:000000000000806F                 db  0Eh
.eh_frame:0000000000008070                 db    8
.eh_frame:0000000000008071                 db    0
.eh_frame:0000000000008072                 db    0
.eh_frame:0000000000008073                 db    0
.eh_frame:0000000000008074                 db  10h
.eh_frame:0000000000008075                 db    0
.eh_frame:0000000000008076                 db    0
.eh_frame:0000000000008077                 db    0
.eh_frame:0000000000008078                 db 0D0h
.eh_frame:0000000000008079                 db    4
.eh_frame:000000000000807A                 db    0
.eh_frame:000000000000807B                 db    0
.eh_frame:000000000000807C                 db  74h ; t
.eh_frame:000000000000807D                 db 0CEh
.eh_frame:000000000000807E                 db 0FFh
.eh_frame:000000000000807F                 db 0FFh
.eh_frame:0000000000008080                 db  11h
.eh_frame:0000000000008081                 db    0
.eh_frame:0000000000008082                 db    0
.eh_frame:0000000000008083                 db    0
.eh_frame:0000000000008084                 db    0
.eh_frame:0000000000008085                 db    0
.eh_frame:0000000000008086                 db    0
.eh_frame:0000000000008087                 db    0
.eh_frame:0000000000008088                 db  10h
.eh_frame:0000000000008089                 db    0
.eh_frame:000000000000808A                 db    0
.eh_frame:000000000000808B                 db    0
.eh_frame:000000000000808C                 db 0E4h
.eh_frame:000000000000808D                 db    4
.eh_frame:000000000000808E                 db    0
.eh_frame:000000000000808F                 db    0
.eh_frame:0000000000008090                 db  80h
.eh_frame:0000000000008091                 db 0CEh
.eh_frame:0000000000008092                 db 0FFh
.eh_frame:0000000000008093                 db 0FFh
.eh_frame:0000000000008094                 db  11h
.eh_frame:0000000000008095                 db    0
.eh_frame:0000000000008096                 db    0
.eh_frame:0000000000008097                 db    0
.eh_frame:0000000000008098                 db    0
.eh_frame:0000000000008099                 db    0
.eh_frame:000000000000809A                 db    0
.eh_frame:000000000000809B                 db    0
.eh_frame:000000000000809C                 db  10h
.eh_frame:000000000000809D                 db    0
.eh_frame:000000000000809E                 db    0
.eh_frame:000000000000809F                 db    0
.eh_frame:00000000000080A0                 db 0F8h
.eh_frame:00000000000080A1                 db    4
.eh_frame:00000000000080A2                 db    0
.eh_frame:00000000000080A3                 db    0
.eh_frame:00000000000080A4                 db  8Ch
.eh_frame:00000000000080A5                 db 0CEh
.eh_frame:00000000000080A6                 db 0FFh
.eh_frame:00000000000080A7                 db 0FFh
.eh_frame:00000000000080A8                 db  35h ; 5
.eh_frame:00000000000080A9                 db    0
.eh_frame:00000000000080AA                 db    0
.eh_frame:00000000000080AB                 db    0
.eh_frame:00000000000080AC                 db    0
.eh_frame:00000000000080AD                 db    0
.eh_frame:00000000000080AE                 db    0
.eh_frame:00000000000080AF                 db    0
.eh_frame:00000000000080B0                 db  10h
.eh_frame:00000000000080B1                 db    0
.eh_frame:00000000000080B2                 db    0
.eh_frame:00000000000080B3                 db    0
.eh_frame:00000000000080B4                 db  0Ch
.eh_frame:00000000000080B5                 db    5
.eh_frame:00000000000080B6                 db    0
.eh_frame:00000000000080B7                 db    0
.eh_frame:00000000000080B8                 db 0B8h
.eh_frame:00000000000080B9                 db 0CEh
.eh_frame:00000000000080BA                 db 0FFh
.eh_frame:00000000000080BB                 db 0FFh
.eh_frame:00000000000080BC                 db  15h
.eh_frame:00000000000080BD                 db    0
.eh_frame:00000000000080BE                 db    0
.eh_frame:00000000000080BF                 db    0
.eh_frame:00000000000080C0                 db    0
.eh_frame:00000000000080C1                 db    0
.eh_frame:00000000000080C2                 db    0
.eh_frame:00000000000080C3                 db    0
.eh_frame:00000000000080C4                 db  10h
.eh_frame:00000000000080C5                 db    0
.eh_frame:00000000000080C6                 db    0
.eh_frame:00000000000080C7                 db    0
.eh_frame:00000000000080C8                 db  20h
.eh_frame:00000000000080C9                 db    5
.eh_frame:00000000000080CA                 db    0
.eh_frame:00000000000080CB                 db    0
.eh_frame:00000000000080CC                 db 0C4h
.eh_frame:00000000000080CD                 db 0CEh
.eh_frame:00000000000080CE                 db 0FFh
.eh_frame:00000000000080CF                 db 0FFh
.eh_frame:00000000000080D0                 db  30h ; 0
.eh_frame:00000000000080D1                 db    0
.eh_frame:00000000000080D2                 db    0
.eh_frame:00000000000080D3                 db    0
.eh_frame:00000000000080D4                 db    0
.eh_frame:00000000000080D5                 db  6Bh ; k
.eh_frame:00000000000080D6                 db  0Eh
.eh_frame:00000000000080D7                 db  10h
.eh_frame:00000000000080D8                 db  50h ; P
.eh_frame:00000000000080D9                 db    0
.eh_frame:00000000000080DA                 db    0
.eh_frame:00000000000080DB                 db    0
.eh_frame:00000000000080DC                 db  34h ; 4
.eh_frame:00000000000080DD                 db    5
.eh_frame:00000000000080DE                 db    0
.eh_frame:00000000000080DF                 db    0
.eh_frame:00000000000080E0                 db 0E0h
.eh_frame:00000000000080E1                 db 0CEh
.eh_frame:00000000000080E2                 db 0FFh
.eh_frame:00000000000080E3                 db 0FFh
.eh_frame:00000000000080E4                 db  74h ; t
.eh_frame:00000000000080E5                 db    0
.eh_frame:00000000000080E6                 db    0
.eh_frame:00000000000080E7                 db    0
.eh_frame:00000000000080E8                 db    0
.eh_frame:00000000000080E9                 db  42h ; B
.eh_frame:00000000000080EA                 db  0Eh
.eh_frame:00000000000080EB                 db  10h
.eh_frame:00000000000080EC                 db  8Fh
.eh_frame:00000000000080ED                 db    2
.eh_frame:00000000000080EE                 db  42h ; B
.eh_frame:00000000000080EF                 db  0Eh
.eh_frame:00000000000080F0                 db  18h
.eh_frame:00000000000080F1                 db  8Eh
.eh_frame:00000000000080F2                 db    3
.eh_frame:00000000000080F3                 db  49h ; I
.eh_frame:00000000000080F4                 db  0Eh
.eh_frame:00000000000080F5                 db  20h
.eh_frame:00000000000080F6                 db  8Dh
.eh_frame:00000000000080F7                 db    4
.eh_frame:00000000000080F8                 db  42h ; B
.eh_frame:00000000000080F9                 db  0Eh
.eh_frame:00000000000080FA                 db  28h ; (
.eh_frame:00000000000080FB                 db  8Ch
.eh_frame:00000000000080FC                 db    5
.eh_frame:00000000000080FD                 db  44h ; D
.eh_frame:00000000000080FE                 db  0Eh
.eh_frame:00000000000080FF                 db  30h ; 0
.eh_frame:0000000000008100                 db  86h
.eh_frame:0000000000008101                 db    6
.eh_frame:0000000000008102                 db  41h ; A
.eh_frame:0000000000008103                 db  0Eh
.eh_frame:0000000000008104                 db  38h ; 8
.eh_frame:0000000000008105                 db  83h
.eh_frame:0000000000008106                 db    7
.eh_frame:0000000000008107                 db  4Dh ; M
.eh_frame:0000000000008108                 db  0Eh
.eh_frame:0000000000008109                 db  50h ; P
.eh_frame:000000000000810A                 db  5Fh ; _
.eh_frame:000000000000810B                 db  0Eh
.eh_frame:000000000000810C                 db  58h ; X
.eh_frame:000000000000810D                 db  47h ; G
.eh_frame:000000000000810E                 db  0Eh
.eh_frame:000000000000810F                 db  60h ; `
.eh_frame:0000000000008110                 db  46h ; F
.eh_frame:0000000000008111                 db  0Eh
.eh_frame:0000000000008112                 db  68h ; h
.eh_frame:0000000000008113                 db  44h ; D
.eh_frame:0000000000008114                 db  0Eh
.eh_frame:0000000000008115                 db  70h ; p
.eh_frame:0000000000008116                 db  58h ; X
.eh_frame:0000000000008117                 db  0Eh
.eh_frame:0000000000008118                 db  38h ; 8
.eh_frame:0000000000008119                 db  41h ; A
.eh_frame:000000000000811A                 db  0Eh
.eh_frame:000000000000811B                 db  30h ; 0
.eh_frame:000000000000811C                 db  41h ; A
.eh_frame:000000000000811D                 db  0Eh
.eh_frame:000000000000811E                 db  28h ; (
.eh_frame:000000000000811F                 db  42h ; B
.eh_frame:0000000000008120                 db  0Eh
.eh_frame:0000000000008121                 db  20h
.eh_frame:0000000000008122                 db  42h ; B
.eh_frame:0000000000008123                 db  0Eh
.eh_frame:0000000000008124                 db  18h
.eh_frame:0000000000008125                 db  42h ; B
.eh_frame:0000000000008126                 db  0Eh
.eh_frame:0000000000008127                 db  10h
.eh_frame:0000000000008128                 db  42h ; B
.eh_frame:0000000000008129                 db  0Eh
.eh_frame:000000000000812A                 db    8
.eh_frame:000000000000812B                 db    0
.eh_frame:000000000000812C                 db  68h ; h
.eh_frame:000000000000812D                 db    0
.eh_frame:000000000000812E                 db    0
.eh_frame:000000000000812F                 db    0
.eh_frame:0000000000008130                 db  88h
.eh_frame:0000000000008131                 db    5
.eh_frame:0000000000008132                 db    0
.eh_frame:0000000000008133                 db    0
.eh_frame:0000000000008134                 db  0Ch
.eh_frame:0000000000008135                 db 0CFh
.eh_frame:0000000000008136                 db 0FFh
.eh_frame:0000000000008137                 db 0FFh
.eh_frame:0000000000008138                 db 0E3h
.eh_frame:0000000000008139                 db    0
.eh_frame:000000000000813A                 db    0
.eh_frame:000000000000813B                 db    0
.eh_frame:000000000000813C                 db    0
.eh_frame:000000000000813D                 db  42h ; B
.eh_frame:000000000000813E                 db  0Eh
.eh_frame:000000000000813F                 db  10h
.eh_frame:0000000000008140                 db  8Fh
.eh_frame:0000000000008141                 db    2
.eh_frame:0000000000008142                 db  42h ; B
.eh_frame:0000000000008143                 db  0Eh
.eh_frame:0000000000008144                 db  18h
.eh_frame:0000000000008145                 db  8Eh
.eh_frame:0000000000008146                 db    3
.eh_frame:0000000000008147                 db  49h ; I
.eh_frame:0000000000008148                 db  0Eh
.eh_frame:0000000000008149                 db  20h
.eh_frame:000000000000814A                 db  8Dh
.eh_frame:000000000000814B                 db    4
.eh_frame:000000000000814C                 db  42h ; B
.eh_frame:000000000000814D                 db  0Eh
.eh_frame:000000000000814E                 db  28h ; (
.eh_frame:000000000000814F                 db  8Ch
.eh_frame:0000000000008150                 db    5
.eh_frame:0000000000008151                 db  44h ; D
.eh_frame:0000000000008152                 db  0Eh
.eh_frame:0000000000008153                 db  30h ; 0
.eh_frame:0000000000008154                 db  86h
.eh_frame:0000000000008155                 db    6
.eh_frame:0000000000008156                 db  41h ; A
.eh_frame:0000000000008157                 db  0Eh
.eh_frame:0000000000008158                 db  38h ; 8
.eh_frame:0000000000008159                 db  83h
.eh_frame:000000000000815A                 db    7
.eh_frame:000000000000815B                 db  4Dh ; M
.eh_frame:000000000000815C                 db  0Eh
.eh_frame:000000000000815D                 db  70h ; p
.eh_frame:000000000000815E                 db  65h ; e
.eh_frame:000000000000815F                 db  0Eh
.eh_frame:0000000000008160                 db  78h ; x
.eh_frame:0000000000008161                 db  4Dh ; M
.eh_frame:0000000000008162                 db  0Eh
.eh_frame:0000000000008163                 db  80h
.eh_frame:0000000000008164                 db    1
.eh_frame:0000000000008165                 db  46h ; F
.eh_frame:0000000000008166                 db  0Eh
.eh_frame:0000000000008167                 db  88h
.eh_frame:0000000000008168                 db    1
.eh_frame:0000000000008169                 db  42h ; B
.eh_frame:000000000000816A                 db  0Eh
.eh_frame:000000000000816B                 db  90h
.eh_frame:000000000000816C                 db    1
.eh_frame:000000000000816D                 db  5Eh ; ^
.eh_frame:000000000000816E                 db  0Eh
.eh_frame:000000000000816F                 db  70h ; p
.eh_frame:0000000000008170                 db  56h ; V
.eh_frame:0000000000008171                 db  0Eh
.eh_frame:0000000000008172                 db  78h ; x
.eh_frame:0000000000008173                 db  43h ; C
.eh_frame:0000000000008174                 db  0Eh
.eh_frame:0000000000008175                 db  80h
.eh_frame:0000000000008176                 db    1
.eh_frame:0000000000008177                 db  43h ; C
.eh_frame:0000000000008178                 db  0Eh
.eh_frame:0000000000008179                 db  88h
.eh_frame:000000000000817A                 db    1
.eh_frame:000000000000817B                 db  56h ; V
.eh_frame:000000000000817C                 db  0Eh
.eh_frame:000000000000817D                 db  90h
.eh_frame:000000000000817E                 db    1
.eh_frame:000000000000817F                 db  52h ; R
.eh_frame:0000000000008180                 db  0Eh
.eh_frame:0000000000008181                 db  70h ; p
.eh_frame:0000000000008182                 db  5Bh ; [
.eh_frame:0000000000008183                 db  0Eh
.eh_frame:0000000000008184                 db  38h ; 8
.eh_frame:0000000000008185                 db  41h ; A
.eh_frame:0000000000008186                 db  0Eh
.eh_frame:0000000000008187                 db  30h ; 0
.eh_frame:0000000000008188                 db  41h ; A
.eh_frame:0000000000008189                 db  0Eh
.eh_frame:000000000000818A                 db  28h ; (
.eh_frame:000000000000818B                 db  42h ; B
.eh_frame:000000000000818C                 db  0Eh
.eh_frame:000000000000818D                 db  20h
.eh_frame:000000000000818E                 db  42h ; B
.eh_frame:000000000000818F                 db  0Eh
.eh_frame:0000000000008190                 db  18h
.eh_frame:0000000000008191                 db  42h ; B
.eh_frame:0000000000008192                 db  0Eh
.eh_frame:0000000000008193                 db  10h
.eh_frame:0000000000008194                 db  42h ; B
.eh_frame:0000000000008195                 db  0Eh
.eh_frame:0000000000008196                 db    8
.eh_frame:0000000000008197                 db    0
.eh_frame:0000000000008198                 db  10h
.eh_frame:0000000000008199                 db    0
.eh_frame:000000000000819A                 db    0
.eh_frame:000000000000819B                 db    0
.eh_frame:000000000000819C                 db 0F4h
.eh_frame:000000000000819D                 db    5
.eh_frame:000000000000819E                 db    0
.eh_frame:000000000000819F                 db    0
.eh_frame:00000000000081A0                 db  90h
.eh_frame:00000000000081A1                 db 0CFh
.eh_frame:00000000000081A2                 db 0FFh
.eh_frame:00000000000081A3                 db 0FFh
.eh_frame:00000000000081A4                 db  0Ah
.eh_frame:00000000000081A5                 db    0
.eh_frame:00000000000081A6                 db    0
.eh_frame:00000000000081A7                 db    0
.eh_frame:00000000000081A8                 db    0
.eh_frame:00000000000081A9                 db    0
.eh_frame:00000000000081AA                 db    0
.eh_frame:00000000000081AB                 db    0
.eh_frame:00000000000081AC                 db  28h ; (
.eh_frame:00000000000081AD                 db    0
.eh_frame:00000000000081AE                 db    0
.eh_frame:00000000000081AF                 db    0
.eh_frame:00000000000081B0                 db    8
.eh_frame:00000000000081B1                 db    6
.eh_frame:00000000000081B2                 db    0
.eh_frame:00000000000081B3                 db    0
.eh_frame:00000000000081B4                 db  8Ch
.eh_frame:00000000000081B5                 db 0CFh
.eh_frame:00000000000081B6                 db 0FFh
.eh_frame:00000000000081B7                 db 0FFh
.eh_frame:00000000000081B8                 db  93h
.eh_frame:00000000000081B9                 db    0
.eh_frame:00000000000081BA                 db    0
.eh_frame:00000000000081BB                 db    0
.eh_frame:00000000000081BC                 db    0
.eh_frame:00000000000081BD                 db  48h ; H
.eh_frame:00000000000081BE                 db  0Eh
.eh_frame:00000000000081BF                 db  10h
.eh_frame:00000000000081C0                 db  8Ch
.eh_frame:00000000000081C1                 db    2
.eh_frame:00000000000081C2                 db  48h ; H
.eh_frame:00000000000081C3                 db  0Eh
.eh_frame:00000000000081C4                 db  18h
.eh_frame:00000000000081C5                 db  86h
.eh_frame:00000000000081C6                 db    3
.eh_frame:00000000000081C7                 db  41h ; A
.eh_frame:00000000000081C8                 db  0Eh
.eh_frame:00000000000081C9                 db  20h
.eh_frame:00000000000081CA                 db  83h
.eh_frame:00000000000081CB                 db    4
.eh_frame:00000000000081CC                 db    2
.eh_frame:00000000000081CD                 db  74h ; t
.eh_frame:00000000000081CE                 db  0Eh
.eh_frame:00000000000081CF                 db  18h
.eh_frame:00000000000081D0                 db  4Bh ; K
.eh_frame:00000000000081D1                 db  0Eh
.eh_frame:00000000000081D2                 db  10h
.eh_frame:00000000000081D3                 db  42h ; B
.eh_frame:00000000000081D4                 db  0Eh
.eh_frame:00000000000081D5                 db    8
.eh_frame:00000000000081D6                 db    0
.eh_frame:00000000000081D7                 db    0
.eh_frame:00000000000081D8                 db  10h
.eh_frame:00000000000081D9                 db    0
.eh_frame:00000000000081DA                 db    0
.eh_frame:00000000000081DB                 db    0
.eh_frame:00000000000081DC                 db  34h ; 4
.eh_frame:00000000000081DD                 db    6
.eh_frame:00000000000081DE                 db    0
.eh_frame:00000000000081DF                 db    0
.eh_frame:00000000000081E0                 db    0
.eh_frame:00000000000081E1                 db 0D0h
.eh_frame:00000000000081E2                 db 0FFh
.eh_frame:00000000000081E3                 db 0FFh
.eh_frame:00000000000081E4                 db  13h
.eh_frame:00000000000081E5                 db    0
.eh_frame:00000000000081E6                 db    0
.eh_frame:00000000000081E7                 db    0
.eh_frame:00000000000081E8                 db    0
.eh_frame:00000000000081E9                 db    0
.eh_frame:00000000000081EA                 db    0
.eh_frame:00000000000081EB                 db    0
.eh_frame:00000000000081EC                 db  10h
.eh_frame:00000000000081ED                 db    0
.eh_frame:00000000000081EE                 db    0
.eh_frame:00000000000081EF                 db    0
.eh_frame:00000000000081F0                 db  48h ; H
.eh_frame:00000000000081F1                 db    6
.eh_frame:00000000000081F2                 db    0
.eh_frame:00000000000081F3                 db    0
.eh_frame:00000000000081F4                 db  0Ch
.eh_frame:00000000000081F5                 db 0D0h
.eh_frame:00000000000081F6                 db 0FFh
.eh_frame:00000000000081F7                 db 0FFh
.eh_frame:00000000000081F8                 db  0Ch
.eh_frame:00000000000081F9                 db    0
.eh_frame:00000000000081FA                 db    0
.eh_frame:00000000000081FB                 db    0
.eh_frame:00000000000081FC                 db    0
.eh_frame:00000000000081FD                 db    0
.eh_frame:00000000000081FE                 db    0
.eh_frame:00000000000081FF                 db    0
.eh_frame:0000000000008200                 db  10h
.eh_frame:0000000000008201                 db    0
.eh_frame:0000000000008202                 db    0
.eh_frame:0000000000008203                 db    0
.eh_frame:0000000000008204                 db  5Ch ; \
.eh_frame:0000000000008205                 db    6
.eh_frame:0000000000008206                 db    0
.eh_frame:0000000000008207                 db    0
.eh_frame:0000000000008208                 db    8
.eh_frame:0000000000008209                 db 0D0h
.eh_frame:000000000000820A                 db 0FFh
.eh_frame:000000000000820B                 db 0FFh
.eh_frame:000000000000820C                 db  18h
.eh_frame:000000000000820D                 db    0
.eh_frame:000000000000820E                 db    0
.eh_frame:000000000000820F                 db    0
.eh_frame:0000000000008210                 db    0
.eh_frame:0000000000008211                 db    0
.eh_frame:0000000000008212                 db    0
.eh_frame:0000000000008213                 db    0
.eh_frame:0000000000008214                 db  10h
.eh_frame:0000000000008215                 db    0
.eh_frame:0000000000008216                 db    0
.eh_frame:0000000000008217                 db    0
.eh_frame:0000000000008218                 db  70h ; p
.eh_frame:0000000000008219                 db    6
.eh_frame:000000000000821A                 db    0
.eh_frame:000000000000821B                 db    0
.eh_frame:000000000000821C                 db  14h
.eh_frame:000000000000821D                 db 0D0h
.eh_frame:000000000000821E                 db 0FFh
.eh_frame:000000000000821F                 db 0FFh
.eh_frame:0000000000008220                 db  14h
.eh_frame:0000000000008221                 db    0
.eh_frame:0000000000008222                 db    0
.eh_frame:0000000000008223                 db    0
.eh_frame:0000000000008224                 db    0
.eh_frame:0000000000008225                 db    0
.eh_frame:0000000000008226                 db    0
.eh_frame:0000000000008227                 db    0
.eh_frame:0000000000008228                 db  18h
.eh_frame:0000000000008229                 db    0
.eh_frame:000000000000822A                 db    0
.eh_frame:000000000000822B                 db    0
.eh_frame:000000000000822C                 db  84h
.eh_frame:000000000000822D                 db    6
.eh_frame:000000000000822E                 db    0
.eh_frame:000000000000822F                 db    0
.eh_frame:0000000000008230                 db  20h
.eh_frame:0000000000008231                 db 0D0h
.eh_frame:0000000000008232                 db 0FFh
.eh_frame:0000000000008233                 db 0FFh
.eh_frame:0000000000008234                 db  8Eh
.eh_frame:0000000000008235                 db    0
.eh_frame:0000000000008236                 db    0
.eh_frame:0000000000008237                 db    0
.eh_frame:0000000000008238                 db    0
.eh_frame:0000000000008239                 db  44h ; D
.eh_frame:000000000000823A                 db  0Eh
.eh_frame:000000000000823B                 db  50h ; P
.eh_frame:000000000000823C                 db    2
.eh_frame:000000000000823D                 db  7Fh ; 
.eh_frame:000000000000823E                 db  0Ah
.eh_frame:000000000000823F                 db  0Eh
.eh_frame:0000000000008240                 db    8
.eh_frame:0000000000008241                 db  41h ; A
.eh_frame:0000000000008242                 db  0Bh
.eh_frame:0000000000008243                 db    0
.eh_frame:0000000000008244                 db  18h
.eh_frame:0000000000008245                 db    0
.eh_frame:0000000000008246                 db    0
.eh_frame:0000000000008247                 db    0
.eh_frame:0000000000008248                 db 0A0h
.eh_frame:0000000000008249                 db    6
.eh_frame:000000000000824A                 db    0
.eh_frame:000000000000824B                 db    0
.eh_frame:000000000000824C                 db  94h
.eh_frame:000000000000824D                 db 0D0h
.eh_frame:000000000000824E                 db 0FFh
.eh_frame:000000000000824F                 db 0FFh
.eh_frame:0000000000008250                 db  8Ah
.eh_frame:0000000000008251                 db    0
.eh_frame:0000000000008252                 db    0
.eh_frame:0000000000008253                 db    0
.eh_frame:0000000000008254                 db    0
.eh_frame:0000000000008255                 db  44h ; D
.eh_frame:0000000000008256                 db  0Eh
.eh_frame:0000000000008257                 db  50h ; P
.eh_frame:0000000000008258                 db    2
.eh_frame:0000000000008259                 db  7Bh ; {
.eh_frame:000000000000825A                 db  0Ah
.eh_frame:000000000000825B                 db  0Eh
.eh_frame:000000000000825C                 db    8
.eh_frame:000000000000825D                 db  41h ; A
.eh_frame:000000000000825E                 db  0Bh
.eh_frame:000000000000825F                 db    0
.eh_frame:0000000000008260                 db  10h
.eh_frame:0000000000008261                 db    0
.eh_frame:0000000000008262                 db    0
.eh_frame:0000000000008263                 db    0
.eh_frame:0000000000008264                 db 0BCh
.eh_frame:0000000000008265                 db    6
.eh_frame:0000000000008266                 db    0
.eh_frame:0000000000008267                 db    0
.eh_frame:0000000000008268                 db    8
.eh_frame:0000000000008269                 db 0D1h
.eh_frame:000000000000826A                 db 0FFh
.eh_frame:000000000000826B                 db 0FFh
.eh_frame:000000000000826C                 db  0Ch
.eh_frame:000000000000826D                 db    0
.eh_frame:000000000000826E                 db    0
.eh_frame:000000000000826F                 db    0
.eh_frame:0000000000008270                 db    0
.eh_frame:0000000000008271                 db    0
.eh_frame:0000000000008272                 db    0
.eh_frame:0000000000008273                 db    0
.eh_frame:0000000000008274                 db  10h
.eh_frame:0000000000008275                 db    0
.eh_frame:0000000000008276                 db    0
.eh_frame:0000000000008277                 db    0
.eh_frame:0000000000008278                 db 0D0h
.eh_frame:0000000000008279                 db    6
.eh_frame:000000000000827A                 db    0
.eh_frame:000000000000827B                 db    0
.eh_frame:000000000000827C                 db    4
.eh_frame:000000000000827D                 db 0D1h
.eh_frame:000000000000827E                 db 0FFh
.eh_frame:000000000000827F                 db 0FFh
.eh_frame:0000000000008280                 db  0Fh
.eh_frame:0000000000008281                 db    0
.eh_frame:0000000000008282                 db    0
.eh_frame:0000000000008283                 db    0
.eh_frame:0000000000008284                 db    0
.eh_frame:0000000000008285                 db    0
.eh_frame:0000000000008286                 db    0
.eh_frame:0000000000008287                 db    0
.eh_frame:0000000000008288                 db  18h
.eh_frame:0000000000008289                 db    0
.eh_frame:000000000000828A                 db    0
.eh_frame:000000000000828B                 db    0
.eh_frame:000000000000828C                 db 0E4h
.eh_frame:000000000000828D                 db    6
.eh_frame:000000000000828E                 db    0
.eh_frame:000000000000828F                 db    0
.eh_frame:0000000000008290                 db    0
.eh_frame:0000000000008291                 db 0D1h
.eh_frame:0000000000008292                 db 0FFh
.eh_frame:0000000000008293                 db 0FFh
.eh_frame:0000000000008294                 db  98h
.eh_frame:0000000000008295                 db    0
.eh_frame:0000000000008296                 db    0
.eh_frame:0000000000008297                 db    0
.eh_frame:0000000000008298                 db    0
.eh_frame:0000000000008299                 db  44h ; D
.eh_frame:000000000000829A                 db  0Eh
.eh_frame:000000000000829B                 db  50h ; P
.eh_frame:000000000000829C                 db    2
.eh_frame:000000000000829D                 db  8Eh
.eh_frame:000000000000829E                 db  0Ah
.eh_frame:000000000000829F                 db  0Eh
.eh_frame:00000000000082A0                 db    8
.eh_frame:00000000000082A1                 db  41h ; A
.eh_frame:00000000000082A2                 db  0Bh
.eh_frame:00000000000082A3                 db    0
.eh_frame:00000000000082A4                 db  10h
.eh_frame:00000000000082A5                 db    0
.eh_frame:00000000000082A6                 db    0
.eh_frame:00000000000082A7                 db    0
.eh_frame:00000000000082A8                 db    0
.eh_frame:00000000000082A9                 db    7
.eh_frame:00000000000082AA                 db    0
.eh_frame:00000000000082AB                 db    0
.eh_frame:00000000000082AC                 db  84h
.eh_frame:00000000000082AD                 db 0D1h
.eh_frame:00000000000082AE                 db 0FFh
.eh_frame:00000000000082AF                 db 0FFh
.eh_frame:00000000000082B0                 db  10h
.eh_frame:00000000000082B1                 db    0
.eh_frame:00000000000082B2                 db    0
.eh_frame:00000000000082B3                 db    0
.eh_frame:00000000000082B4                 db    0
.eh_frame:00000000000082B5                 db    0
.eh_frame:00000000000082B6                 db    0
.eh_frame:00000000000082B7                 db    0
.eh_frame:00000000000082B8                 db  10h
.eh_frame:00000000000082B9                 db    0
.eh_frame:00000000000082BA                 db    0
.eh_frame:00000000000082BB                 db    0
.eh_frame:00000000000082BC                 db  14h
.eh_frame:00000000000082BD                 db    7
.eh_frame:00000000000082BE                 db    0
.eh_frame:00000000000082BF                 db    0
.eh_frame:00000000000082C0                 db  80h
.eh_frame:00000000000082C1                 db 0D1h
.eh_frame:00000000000082C2                 db 0FFh
.eh_frame:00000000000082C3                 db 0FFh
.eh_frame:00000000000082C4                 db  11h
.eh_frame:00000000000082C5                 db    0
.eh_frame:00000000000082C6                 db    0
.eh_frame:00000000000082C7                 db    0
.eh_frame:00000000000082C8                 db    0
.eh_frame:00000000000082C9                 db    0
.eh_frame:00000000000082CA                 db    0
.eh_frame:00000000000082CB                 db    0
.eh_frame:00000000000082CC                 db  10h
.eh_frame:00000000000082CD                 db    0
.eh_frame:00000000000082CE                 db    0
.eh_frame:00000000000082CF                 db    0
.eh_frame:00000000000082D0                 db  28h ; (
.eh_frame:00000000000082D1                 db    7
.eh_frame:00000000000082D2                 db    0
.eh_frame:00000000000082D3                 db    0
.eh_frame:00000000000082D4                 db  8Ch
.eh_frame:00000000000082D5                 db 0D1h
.eh_frame:00000000000082D6                 db 0FFh
.eh_frame:00000000000082D7                 db 0FFh
.eh_frame:00000000000082D8                 db  0Ah
.eh_frame:00000000000082D9                 db    0
.eh_frame:00000000000082DA                 db    0
.eh_frame:00000000000082DB                 db    0
.eh_frame:00000000000082DC                 db    0
.eh_frame:00000000000082DD                 db    0
.eh_frame:00000000000082DE                 db    0
.eh_frame:00000000000082DF                 db    0
.eh_frame:00000000000082E0                 db  18h
.eh_frame:00000000000082E1                 db    0
.eh_frame:00000000000082E2                 db    0
.eh_frame:00000000000082E3                 db    0
.eh_frame:00000000000082E4                 db  3Ch ; <
.eh_frame:00000000000082E5                 db    7
.eh_frame:00000000000082E6                 db    0
.eh_frame:00000000000082E7                 db    0
.eh_frame:00000000000082E8                 db  88h
.eh_frame:00000000000082E9                 db 0D1h
.eh_frame:00000000000082EA                 db 0FFh
.eh_frame:00000000000082EB                 db 0FFh
.eh_frame:00000000000082EC                 db  8Eh
.eh_frame:00000000000082ED                 db    0
.eh_frame:00000000000082EE                 db    0
.eh_frame:00000000000082EF                 db    0
.eh_frame:00000000000082F0                 db    0
.eh_frame:00000000000082F1                 db  44h ; D
.eh_frame:00000000000082F2                 db  0Eh
.eh_frame:00000000000082F3                 db  50h ; P
.eh_frame:00000000000082F4                 db    2
.eh_frame:00000000000082F5                 db  7Fh ; 
.eh_frame:00000000000082F6                 db  0Ah
.eh_frame:00000000000082F7                 db  0Eh
.eh_frame:00000000000082F8                 db    8
.eh_frame:00000000000082F9                 db  41h ; A
.eh_frame:00000000000082FA                 db  0Bh
.eh_frame:00000000000082FB                 db    0
.eh_frame:00000000000082FC                 db  18h
.eh_frame:00000000000082FD                 db    0
.eh_frame:00000000000082FE                 db    0
.eh_frame:00000000000082FF                 db    0
.eh_frame:0000000000008300                 db  58h ; X
.eh_frame:0000000000008301                 db    7
.eh_frame:0000000000008302                 db    0
.eh_frame:0000000000008303                 db    0
.eh_frame:0000000000008304                 db 0FCh
.eh_frame:0000000000008305                 db 0D1h
.eh_frame:0000000000008306                 db 0FFh
.eh_frame:0000000000008307                 db 0FFh
.eh_frame:0000000000008308                 db  91h
.eh_frame:0000000000008309                 db    0
.eh_frame:000000000000830A                 db    0
.eh_frame:000000000000830B                 db    0
.eh_frame:000000000000830C                 db    0
.eh_frame:000000000000830D                 db  44h ; D
.eh_frame:000000000000830E                 db  0Eh
.eh_frame:000000000000830F                 db  50h ; P
.eh_frame:0000000000008310                 db    2
.eh_frame:0000000000008311                 db  82h
.eh_frame:0000000000008312                 db  0Ah
.eh_frame:0000000000008313                 db  0Eh
.eh_frame:0000000000008314                 db    8
.eh_frame:0000000000008315                 db  41h ; A
.eh_frame:0000000000008316                 db  0Bh
.eh_frame:0000000000008317                 db    0
.eh_frame:0000000000008318                 db  10h
.eh_frame:0000000000008319                 db    0
.eh_frame:000000000000831A                 db    0
.eh_frame:000000000000831B                 db    0
.eh_frame:000000000000831C                 db  74h ; t
.eh_frame:000000000000831D                 db    7
.eh_frame:000000000000831E                 db    0
.eh_frame:000000000000831F                 db    0
.eh_frame:0000000000008320                 db  80h
.eh_frame:0000000000008321                 db 0D2h
.eh_frame:0000000000008322                 db 0FFh
.eh_frame:0000000000008323                 db 0FFh
.eh_frame:0000000000008324                 db  0Ch
.eh_frame:0000000000008325                 db    0
.eh_frame:0000000000008326                 db    0
.eh_frame:0000000000008327                 db    0
.eh_frame:0000000000008328                 db    0
.eh_frame:0000000000008329                 db    0
.eh_frame:000000000000832A                 db    0
.eh_frame:000000000000832B                 db    0
.eh_frame:000000000000832C                 db  10h
.eh_frame:000000000000832D                 db    0
.eh_frame:000000000000832E                 db    0
.eh_frame:000000000000832F                 db    0
.eh_frame:0000000000008330                 db  88h
.eh_frame:0000000000008331                 db    7
.eh_frame:0000000000008332                 db    0
.eh_frame:0000000000008333                 db    0
.eh_frame:0000000000008334                 db  7Ch ; |
.eh_frame:0000000000008335                 db 0D2h
.eh_frame:0000000000008336                 db 0FFh
.eh_frame:0000000000008337                 db 0FFh
.eh_frame:0000000000008338                 db  17h
.eh_frame:0000000000008339                 db    0
.eh_frame:000000000000833A                 db    0
.eh_frame:000000000000833B                 db    0
.eh_frame:000000000000833C                 db    0
.eh_frame:000000000000833D                 db    0
.eh_frame:000000000000833E                 db    0
.eh_frame:000000000000833F                 db    0
.eh_frame:0000000000008340                 db  10h
.eh_frame:0000000000008341                 db    0
.eh_frame:0000000000008342                 db    0
.eh_frame:0000000000008343                 db    0
.eh_frame:0000000000008344                 db  9Ch
.eh_frame:0000000000008345                 db    7
.eh_frame:0000000000008346                 db    0
.eh_frame:0000000000008347                 db    0
.eh_frame:0000000000008348                 db  88h
.eh_frame:0000000000008349                 db 0D2h
.eh_frame:000000000000834A                 db 0FFh
.eh_frame:000000000000834B                 db 0FFh
.eh_frame:000000000000834C                 db  13h
.eh_frame:000000000000834D                 db    0
.eh_frame:000000000000834E                 db    0
.eh_frame:000000000000834F                 db    0
.eh_frame:0000000000008350                 db    0
.eh_frame:0000000000008351                 db    0
.eh_frame:0000000000008352                 db    0
.eh_frame:0000000000008353                 db    0
.eh_frame:0000000000008354                 db  10h
.eh_frame:0000000000008355                 db    0
.eh_frame:0000000000008356                 db    0
.eh_frame:0000000000008357                 db    0
.eh_frame:0000000000008358                 db 0B0h
.eh_frame:0000000000008359                 db    7
.eh_frame:000000000000835A                 db    0
.eh_frame:000000000000835B                 db    0
.eh_frame:000000000000835C                 db  94h
.eh_frame:000000000000835D                 db 0D2h
.eh_frame:000000000000835E                 db 0FFh
.eh_frame:000000000000835F                 db 0FFh
.eh_frame:0000000000008360                 db  0Ch
.eh_frame:0000000000008361                 db    0
.eh_frame:0000000000008362                 db    0
.eh_frame:0000000000008363                 db    0
.eh_frame:0000000000008364                 db    0
.eh_frame:0000000000008365                 db    0
.eh_frame:0000000000008366                 db    0
.eh_frame:0000000000008367                 db    0
.eh_frame:0000000000008368                 db  10h
.eh_frame:0000000000008369                 db    0
.eh_frame:000000000000836A                 db    0
.eh_frame:000000000000836B                 db    0
.eh_frame:000000000000836C                 db 0C4h
.eh_frame:000000000000836D                 db    7
.eh_frame:000000000000836E                 db    0
.eh_frame:000000000000836F                 db    0
.eh_frame:0000000000008370                 db  90h
.eh_frame:0000000000008371                 db 0D2h
.eh_frame:0000000000008372                 db 0FFh
.eh_frame:0000000000008373                 db 0FFh
.eh_frame:0000000000008374                 db  14h
.eh_frame:0000000000008375                 db    0
.eh_frame:0000000000008376                 db    0
.eh_frame:0000000000008377                 db    0
.eh_frame:0000000000008378                 db    0
.eh_frame:0000000000008379                 db    0
.eh_frame:000000000000837A                 db    0
.eh_frame:000000000000837B                 db    0
.eh_frame:000000000000837C                 db  10h
.eh_frame:000000000000837D                 db    0
.eh_frame:000000000000837E                 db    0
.eh_frame:000000000000837F                 db    0
.eh_frame:0000000000008380                 db 0D8h
.eh_frame:0000000000008381                 db    7
.eh_frame:0000000000008382                 db    0
.eh_frame:0000000000008383                 db    0
.eh_frame:0000000000008384                 db  9Ch
.eh_frame:0000000000008385                 db 0D2h
.eh_frame:0000000000008386                 db 0FFh
.eh_frame:0000000000008387                 db 0FFh
.eh_frame:0000000000008388                 db  13h
.eh_frame:0000000000008389                 db    0
.eh_frame:000000000000838A                 db    0
.eh_frame:000000000000838B                 db    0
.eh_frame:000000000000838C                 db    0
.eh_frame:000000000000838D                 db    0
.eh_frame:000000000000838E                 db    0
.eh_frame:000000000000838F                 db    0
.eh_frame:0000000000008390                 db  14h
.eh_frame:0000000000008391                 db    0
.eh_frame:0000000000008392                 db    0
.eh_frame:0000000000008393                 db    0
.eh_frame:0000000000008394                 db 0ECh
.eh_frame:0000000000008395                 db    7
.eh_frame:0000000000008396                 db    0
.eh_frame:0000000000008397                 db    0
.eh_frame:0000000000008398                 db 0A8h
.eh_frame:0000000000008399                 db 0D2h
.eh_frame:000000000000839A                 db 0FFh
.eh_frame:000000000000839B                 db 0FFh
.eh_frame:000000000000839C                 db  18h
.eh_frame:000000000000839D                 db    0
.eh_frame:000000000000839E                 db    0
.eh_frame:000000000000839F                 db    0
.eh_frame:00000000000083A0                 db    0
.eh_frame:00000000000083A1                 db    0
.eh_frame:00000000000083A2                 db    0
.eh_frame:00000000000083A3                 db    0
.eh_frame:00000000000083A4                 db    0
.eh_frame:00000000000083A5                 db    0
.eh_frame:00000000000083A6                 db    0
.eh_frame:00000000000083A7                 db    0
.eh_frame:00000000000083A8                 db  10h
.eh_frame:00000000000083A9                 db    1
.eh_frame:00000000000083AA                 db    0
.eh_frame:00000000000083AB                 db    0
.eh_frame:00000000000083AC                 db    4
.eh_frame:00000000000083AD                 db    8
.eh_frame:00000000000083AE                 db    0
.eh_frame:00000000000083AF                 db    0
.eh_frame:00000000000083B0                 db 0B0h
.eh_frame:00000000000083B1                 db 0D2h
.eh_frame:00000000000083B2                 db 0FFh
.eh_frame:00000000000083B3                 db 0FFh
.eh_frame:00000000000083B4                 db  17h
.eh_frame:00000000000083B5                 db    4
.eh_frame:00000000000083B6                 db    0
.eh_frame:00000000000083B7                 db    0
.eh_frame:00000000000083B8                 db    0
.eh_frame:00000000000083B9                 db  42h ; B
.eh_frame:00000000000083BA                 db  0Eh
.eh_frame:00000000000083BB                 db  10h
.eh_frame:00000000000083BC                 db  8Fh
.eh_frame:00000000000083BD                 db    2
.eh_frame:00000000000083BE                 db  42h ; B
.eh_frame:00000000000083BF                 db  0Eh
.eh_frame:00000000000083C0                 db  18h
.eh_frame:00000000000083C1                 db  8Eh
.eh_frame:00000000000083C2                 db    3
.eh_frame:00000000000083C3                 db  42h ; B
.eh_frame:00000000000083C4                 db  0Eh
.eh_frame:00000000000083C5                 db  20h
.eh_frame:00000000000083C6                 db  8Dh
.eh_frame:00000000000083C7                 db    4
.eh_frame:00000000000083C8                 db  42h ; B
.eh_frame:00000000000083C9                 db  0Eh
.eh_frame:00000000000083CA                 db  28h ; (
.eh_frame:00000000000083CB                 db  8Ch
.eh_frame:00000000000083CC                 db    5
.eh_frame:00000000000083CD                 db  44h ; D
.eh_frame:00000000000083CE                 db  0Eh
.eh_frame:00000000000083CF                 db  30h ; 0
.eh_frame:00000000000083D0                 db  86h
.eh_frame:00000000000083D1                 db    6
.eh_frame:00000000000083D2                 db  41h ; A
.eh_frame:00000000000083D3                 db  0Eh
.eh_frame:00000000000083D4                 db  38h ; 8
.eh_frame:00000000000083D5                 db  83h
.eh_frame:00000000000083D6                 db    7
.eh_frame:00000000000083D7                 db  4Ah ; J
.eh_frame:00000000000083D8                 db  0Eh
.eh_frame:00000000000083D9                 db  60h ; `
.eh_frame:00000000000083DA                 db    2
.eh_frame:00000000000083DB                 db 0DDh
.eh_frame:00000000000083DC                 db  0Eh
.eh_frame:00000000000083DD                 db  68h ; h
.eh_frame:00000000000083DE                 db  57h ; W
.eh_frame:00000000000083DF                 db  0Eh
.eh_frame:00000000000083E0                 db  70h ; p
.eh_frame:00000000000083E1                 db  42h ; B
.eh_frame:00000000000083E2                 db  0Eh
.eh_frame:00000000000083E3                 db  78h ; x
.eh_frame:00000000000083E4                 db  42h ; B
.eh_frame:00000000000083E5                 db  0Eh
.eh_frame:00000000000083E6                 db  80h
.eh_frame:00000000000083E7                 db    1
.eh_frame:00000000000083E8                 db  42h ; B
.eh_frame:00000000000083E9                 db  0Eh
.eh_frame:00000000000083EA                 db  88h
.eh_frame:00000000000083EB                 db    1
.eh_frame:00000000000083EC                 db  42h ; B
.eh_frame:00000000000083ED                 db  0Eh
.eh_frame:00000000000083EE                 db  90h
.eh_frame:00000000000083EF                 db    1
.eh_frame:00000000000083F0                 db  53h ; S
.eh_frame:00000000000083F1                 db  0Eh
.eh_frame:00000000000083F2                 db  60h ; `
.eh_frame:00000000000083F3                 db  44h ; D
.eh_frame:00000000000083F4                 db  0Ah
.eh_frame:00000000000083F5                 db  0Eh
.eh_frame:00000000000083F6                 db  38h ; 8
.eh_frame:00000000000083F7                 db  41h ; A
.eh_frame:00000000000083F8                 db  0Eh
.eh_frame:00000000000083F9                 db  30h ; 0
.eh_frame:00000000000083FA                 db  41h ; A
.eh_frame:00000000000083FB                 db  0Eh
.eh_frame:00000000000083FC                 db  28h ; (
.eh_frame:00000000000083FD                 db  42h ; B
.eh_frame:00000000000083FE                 db  0Eh
.eh_frame:00000000000083FF                 db  20h
.eh_frame:0000000000008400                 db  42h ; B
.eh_frame:0000000000008401                 db  0Eh
.eh_frame:0000000000008402                 db  18h
.eh_frame:0000000000008403                 db  42h ; B
.eh_frame:0000000000008404                 db  0Eh
.eh_frame:0000000000008405                 db  10h
.eh_frame:0000000000008406                 db  42h ; B
.eh_frame:0000000000008407                 db  0Eh
.eh_frame:0000000000008408                 db    8
.eh_frame:0000000000008409                 db  44h ; D
.eh_frame:000000000000840A                 db  0Bh
.eh_frame:000000000000840B                 db    2
.eh_frame:000000000000840C                 db  78h ; x
.eh_frame:000000000000840D                 db  0Ah
.eh_frame:000000000000840E                 db  0Eh
.eh_frame:000000000000840F                 db  68h ; h
.eh_frame:0000000000008410                 db  48h ; H
.eh_frame:0000000000008411                 db  0Bh
.eh_frame:0000000000008412                 db  5Ah ; Z
.eh_frame:0000000000008413                 db  0Ah
.eh_frame:0000000000008414                 db  0Eh
.eh_frame:0000000000008415                 db  38h ; 8
.eh_frame:0000000000008416                 db  47h ; G
.eh_frame:0000000000008417                 db  0Eh
.eh_frame:0000000000008418                 db  30h ; 0
.eh_frame:0000000000008419                 db  41h ; A
.eh_frame:000000000000841A                 db  0Eh
.eh_frame:000000000000841B                 db  28h ; (
.eh_frame:000000000000841C                 db  42h ; B
.eh_frame:000000000000841D                 db  0Eh
.eh_frame:000000000000841E                 db  20h
.eh_frame:000000000000841F                 db  42h ; B
.eh_frame:0000000000008420                 db  0Eh
.eh_frame:0000000000008421                 db  18h
.eh_frame:0000000000008422                 db  42h ; B
.eh_frame:0000000000008423                 db  0Eh
.eh_frame:0000000000008424                 db  10h
.eh_frame:0000000000008425                 db  42h ; B
.eh_frame:0000000000008426                 db  0Eh
.eh_frame:0000000000008427                 db    8
.eh_frame:0000000000008428                 db  56h ; V
.eh_frame:0000000000008429                 db  0Bh
.eh_frame:000000000000842A                 db  5Eh ; ^
.eh_frame:000000000000842B                 db  0Ah
.eh_frame:000000000000842C                 db  0Eh
.eh_frame:000000000000842D                 db  38h ; 8
.eh_frame:000000000000842E                 db  52h ; R
.eh_frame:000000000000842F                 db  0Eh
.eh_frame:0000000000008430                 db  30h ; 0
.eh_frame:0000000000008431                 db  41h ; A
.eh_frame:0000000000008432                 db  0Eh
.eh_frame:0000000000008433                 db  28h ; (
.eh_frame:0000000000008434                 db  42h ; B
.eh_frame:0000000000008435                 db  0Eh
.eh_frame:0000000000008436                 db  20h
.eh_frame:0000000000008437                 db  42h ; B
.eh_frame:0000000000008438                 db  0Eh
.eh_frame:0000000000008439                 db  18h
.eh_frame:000000000000843A                 db  42h ; B
.eh_frame:000000000000843B                 db  0Eh
.eh_frame:000000000000843C                 db  10h
.eh_frame:000000000000843D                 db  42h ; B
.eh_frame:000000000000843E                 db  0Eh
.eh_frame:000000000000843F                 db    8
.eh_frame:0000000000008440                 db  4Fh ; O
.eh_frame:0000000000008441                 db  0Bh
.eh_frame:0000000000008442                 db  62h ; b
.eh_frame:0000000000008443                 db  0Ah
.eh_frame:0000000000008444                 db  0Eh
.eh_frame:0000000000008445                 db  38h ; 8
.eh_frame:0000000000008446                 db  50h ; P
.eh_frame:0000000000008447                 db  0Eh
.eh_frame:0000000000008448                 db  30h ; 0
.eh_frame:0000000000008449                 db  41h ; A
.eh_frame:000000000000844A                 db  0Eh
.eh_frame:000000000000844B                 db  28h ; (
.eh_frame:000000000000844C                 db  42h ; B
.eh_frame:000000000000844D                 db  0Eh
.eh_frame:000000000000844E                 db  20h
.eh_frame:000000000000844F                 db  42h ; B
.eh_frame:0000000000008450                 db  0Eh
.eh_frame:0000000000008451                 db  18h
.eh_frame:0000000000008452                 db  42h ; B
.eh_frame:0000000000008453                 db  0Eh
.eh_frame:0000000000008454                 db  10h
.eh_frame:0000000000008455                 db  42h ; B
.eh_frame:0000000000008456                 db  0Eh
.eh_frame:0000000000008457                 db    8
.eh_frame:0000000000008458                 db  55h ; U
.eh_frame:0000000000008459                 db  0Bh
.eh_frame:000000000000845A                 db  66h ; f
.eh_frame:000000000000845B                 db  0Eh
.eh_frame:000000000000845C                 db  68h ; h
.eh_frame:000000000000845D                 db  42h ; B
.eh_frame:000000000000845E                 db  0Eh
.eh_frame:000000000000845F                 db  70h ; p
.eh_frame:0000000000008460                 db  5Ch ; \
.eh_frame:0000000000008461                 db  0Eh
.eh_frame:0000000000008462                 db  68h ; h
.eh_frame:0000000000008463                 db  41h ; A
.eh_frame:0000000000008464                 db  0Eh
.eh_frame:0000000000008465                 db  60h ; `
.eh_frame:0000000000008466                 db  44h ; D
.eh_frame:0000000000008467                 db  0Ah
.eh_frame:0000000000008468                 db  0Eh
.eh_frame:0000000000008469                 db  38h ; 8
.eh_frame:000000000000846A                 db  41h ; A
.eh_frame:000000000000846B                 db  0Eh
.eh_frame:000000000000846C                 db  30h ; 0
.eh_frame:000000000000846D                 db  41h ; A
.eh_frame:000000000000846E                 db  0Eh
.eh_frame:000000000000846F                 db  28h ; (
.eh_frame:0000000000008470                 db  42h ; B
.eh_frame:0000000000008471                 db  0Eh
.eh_frame:0000000000008472                 db  20h
.eh_frame:0000000000008473                 db  42h ; B
.eh_frame:0000000000008474                 db  0Eh
.eh_frame:0000000000008475                 db  18h
.eh_frame:0000000000008476                 db  42h ; B
.eh_frame:0000000000008477                 db  0Eh
.eh_frame:0000000000008478                 db  10h
.eh_frame:0000000000008479                 db  42h ; B
.eh_frame:000000000000847A                 db  0Eh
.eh_frame:000000000000847B                 db    8
.eh_frame:000000000000847C                 db  45h ; E
.eh_frame:000000000000847D                 db  0Bh
.eh_frame:000000000000847E                 db  68h ; h
.eh_frame:000000000000847F                 db  0Ah
.eh_frame:0000000000008480                 db  0Eh
.eh_frame:0000000000008481                 db  68h ; h
.eh_frame:0000000000008482                 db  48h ; H
.eh_frame:0000000000008483                 db  0Bh
.eh_frame:0000000000008484                 db  72h ; r
.eh_frame:0000000000008485                 db  0Eh
.eh_frame:0000000000008486                 db  68h ; h
.eh_frame:0000000000008487                 db  45h ; E
.eh_frame:0000000000008488                 db  0Eh
.eh_frame:0000000000008489                 db  70h ; p
.eh_frame:000000000000848A                 db  42h ; B
.eh_frame:000000000000848B                 db  0Eh
.eh_frame:000000000000848C                 db  78h ; x
.eh_frame:000000000000848D                 db  42h ; B
.eh_frame:000000000000848E                 db  0Eh
.eh_frame:000000000000848F                 db  80h
.eh_frame:0000000000008490                 db    1
.eh_frame:0000000000008491                 db  5Eh ; ^
.eh_frame:0000000000008492                 db  0Eh
.eh_frame:0000000000008493                 db  60h ; `
.eh_frame:0000000000008494                 db  44h ; D
.eh_frame:0000000000008495                 db  0Ah
.eh_frame:0000000000008496                 db  0Eh
.eh_frame:0000000000008497                 db  38h ; 8
.eh_frame:0000000000008498                 db  41h ; A
.eh_frame:0000000000008499                 db  0Eh
.eh_frame:000000000000849A                 db  30h ; 0
.eh_frame:000000000000849B                 db  41h ; A
.eh_frame:000000000000849C                 db  0Eh
.eh_frame:000000000000849D                 db  28h ; (
.eh_frame:000000000000849E                 db  42h ; B
.eh_frame:000000000000849F                 db  0Eh
.eh_frame:00000000000084A0                 db  20h
.eh_frame:00000000000084A1                 db  42h ; B
.eh_frame:00000000000084A2                 db  0Eh
.eh_frame:00000000000084A3                 db  18h
.eh_frame:00000000000084A4                 db  42h ; B
.eh_frame:00000000000084A5                 db  0Eh
.eh_frame:00000000000084A6                 db  10h
.eh_frame:00000000000084A7                 db  42h ; B
.eh_frame:00000000000084A8                 db  0Eh
.eh_frame:00000000000084A9                 db    8
.eh_frame:00000000000084AA                 db  41h ; A
.eh_frame:00000000000084AB                 db  0Bh
.eh_frame:00000000000084AC                 db  79h ; y
.eh_frame:00000000000084AD                 db  0Ah
.eh_frame:00000000000084AE                 db  0Eh
.eh_frame:00000000000084AF                 db  68h ; h
.eh_frame:00000000000084B0                 db  42h ; B
.eh_frame:00000000000084B1                 db  0Eh
.eh_frame:00000000000084B2                 db  70h ; p
.eh_frame:00000000000084B3                 db  42h ; B
.eh_frame:00000000000084B4                 db  0Eh
.eh_frame:00000000000084B5                 db  78h ; x
.eh_frame:00000000000084B6                 db  42h ; B
.eh_frame:00000000000084B7                 db  0Eh
.eh_frame:00000000000084B8                 db  80h
.eh_frame:00000000000084B9                 db    1
.eh_frame:00000000000084BA                 db  51h ; Q
.eh_frame:00000000000084BB                 db  0Bh
.eh_frame:00000000000084BC                 db  10h
.eh_frame:00000000000084BD                 db    0
.eh_frame:00000000000084BE                 db    0
.eh_frame:00000000000084BF                 db    0
.eh_frame:00000000000084C0                 db  18h
.eh_frame:00000000000084C1                 db    9
.eh_frame:00000000000084C2                 db    0
.eh_frame:00000000000084C3                 db    0
.eh_frame:00000000000084C4                 db 0BCh
.eh_frame:00000000000084C5                 db 0D5h
.eh_frame:00000000000084C6                 db 0FFh
.eh_frame:00000000000084C7                 db 0FFh
.eh_frame:00000000000084C8                 db  20h
.eh_frame:00000000000084C9                 db    0
.eh_frame:00000000000084CA                 db    0
.eh_frame:00000000000084CB                 db    0
.eh_frame:00000000000084CC                 db    0
.eh_frame:00000000000084CD                 db    0
.eh_frame:00000000000084CE                 db    0
.eh_frame:00000000000084CF                 db    0
.eh_frame:00000000000084D0                 db  18h
.eh_frame:00000000000084D1                 db    0
.eh_frame:00000000000084D2                 db    0
.eh_frame:00000000000084D3                 db    0
.eh_frame:00000000000084D4                 db  2Ch ; ,
.eh_frame:00000000000084D5                 db    9
.eh_frame:00000000000084D6                 db    0
.eh_frame:00000000000084D7                 db    0
.eh_frame:00000000000084D8                 db 0C8h
.eh_frame:00000000000084D9                 db 0D5h
.eh_frame:00000000000084DA                 db 0FFh
.eh_frame:00000000000084DB                 db 0FFh
.eh_frame:00000000000084DC                 db  78h ; x
.eh_frame:00000000000084DD                 db    0
.eh_frame:00000000000084DE                 db    0
.eh_frame:00000000000084DF                 db    0
.eh_frame:00000000000084E0                 db    0
.eh_frame:00000000000084E1                 db  44h ; D
.eh_frame:00000000000084E2                 db  0Eh
.eh_frame:00000000000084E3                 db  70h ; p
.eh_frame:00000000000084E4                 db    2
.eh_frame:00000000000084E5                 db  60h ; `
.eh_frame:00000000000084E6                 db  0Ah
.eh_frame:00000000000084E7                 db  0Eh
.eh_frame:00000000000084E8                 db    8
.eh_frame:00000000000084E9                 db  41h ; A
.eh_frame:00000000000084EA                 db  0Bh
.eh_frame:00000000000084EB                 db    0
.eh_frame:00000000000084EC                 db  28h ; (
.eh_frame:00000000000084ED                 db    0
.eh_frame:00000000000084EE                 db    0
.eh_frame:00000000000084EF                 db    0
.eh_frame:00000000000084F0                 db  48h ; H
.eh_frame:00000000000084F1                 db    9
.eh_frame:00000000000084F2                 db    0
.eh_frame:00000000000084F3                 db    0
.eh_frame:00000000000084F4                 db  2Ch ; ,
.eh_frame:00000000000084F5                 db 0D6h
.eh_frame:00000000000084F6                 db 0FFh
.eh_frame:00000000000084F7                 db 0FFh
.eh_frame:00000000000084F8                 db 0D5h
.eh_frame:00000000000084F9                 db    0
.eh_frame:00000000000084FA                 db    0
.eh_frame:00000000000084FB                 db    0
.eh_frame:00000000000084FC                 db    0
.eh_frame:00000000000084FD                 db  41h ; A
.eh_frame:00000000000084FE                 db  0Eh
.eh_frame:00000000000084FF                 db  10h
.eh_frame:0000000000008500                 db  86h
.eh_frame:0000000000008501                 db    2
.eh_frame:0000000000008502                 db  41h ; A
.eh_frame:0000000000008503                 db  0Eh
.eh_frame:0000000000008504                 db  18h
.eh_frame:0000000000008505                 db  83h
.eh_frame:0000000000008506                 db    3
.eh_frame:0000000000008507                 db  50h ; P
.eh_frame:0000000000008508                 db  0Eh
.eh_frame:0000000000008509                 db 0D0h
.eh_frame:000000000000850A                 db    1
.eh_frame:000000000000850B                 db    2
.eh_frame:000000000000850C                 db 0ABh
.eh_frame:000000000000850D                 db  0Ah
.eh_frame:000000000000850E                 db  0Eh
.eh_frame:000000000000850F                 db  18h
.eh_frame:0000000000008510                 db  41h ; A
.eh_frame:0000000000008511                 db  0Eh
.eh_frame:0000000000008512                 db  10h
.eh_frame:0000000000008513                 db  41h ; A
.eh_frame:0000000000008514                 db  0Eh
.eh_frame:0000000000008515                 db    8
.eh_frame:0000000000008516                 db  41h ; A
.eh_frame:0000000000008517                 db  0Bh
.eh_frame:0000000000008518                 db  1Ch
.eh_frame:0000000000008519                 db    0
.eh_frame:000000000000851A                 db    0
.eh_frame:000000000000851B                 db    0
.eh_frame:000000000000851C                 db  74h ; t
.eh_frame:000000000000851D                 db    9
.eh_frame:000000000000851E                 db    0
.eh_frame:000000000000851F                 db    0
.eh_frame:0000000000008520                 db 0E0h
.eh_frame:0000000000008521                 db 0D6h
.eh_frame:0000000000008522                 db 0FFh
.eh_frame:0000000000008523                 db 0FFh
.eh_frame:0000000000008524                 db  80h
.eh_frame:0000000000008525                 db    0
.eh_frame:0000000000008526                 db    0
.eh_frame:0000000000008527                 db    0
.eh_frame:0000000000008528                 db    0
.eh_frame:0000000000008529                 db  41h ; A
.eh_frame:000000000000852A                 db  0Eh
.eh_frame:000000000000852B                 db  10h
.eh_frame:000000000000852C                 db  83h
.eh_frame:000000000000852D                 db    2
.eh_frame:000000000000852E                 db    2
.eh_frame:000000000000852F                 db  7Ah ; z
.eh_frame:0000000000008530                 db  0Eh
.eh_frame:0000000000008531                 db    8
.eh_frame:0000000000008532                 db    0
.eh_frame:0000000000008533                 db    0
.eh_frame:0000000000008534                 db    0
.eh_frame:0000000000008535                 db    0
.eh_frame:0000000000008536                 db    0
.eh_frame:0000000000008537                 db    0
.eh_frame:0000000000008538                 db  18h
.eh_frame:0000000000008539                 db    0
.eh_frame:000000000000853A                 db    0
.eh_frame:000000000000853B                 db    0
.eh_frame:000000000000853C                 db  94h
.eh_frame:000000000000853D                 db    9
.eh_frame:000000000000853E                 db    0
.eh_frame:000000000000853F                 db    0
.eh_frame:0000000000008540                 db  40h ; @
.eh_frame:0000000000008541                 db 0D7h
.eh_frame:0000000000008542                 db 0FFh
.eh_frame:0000000000008543                 db 0FFh
.eh_frame:0000000000008544                 db  1Ah
.eh_frame:0000000000008545                 db    0
.eh_frame:0000000000008546                 db    0
.eh_frame:0000000000008547                 db    0
.eh_frame:0000000000008548                 db    0
.eh_frame:0000000000008549                 db  41h ; A
.eh_frame:000000000000854A                 db  0Eh
.eh_frame:000000000000854B                 db  10h
.eh_frame:000000000000854C                 db  83h
.eh_frame:000000000000854D                 db    2
.eh_frame:000000000000854E                 db  53h ; S
.eh_frame:000000000000854F                 db  0Ah
.eh_frame:0000000000008550                 db  0Eh
.eh_frame:0000000000008551                 db    8
.eh_frame:0000000000008552                 db  41h ; A
.eh_frame:0000000000008553                 db  0Bh
.eh_frame:0000000000008554                 db  10h
.eh_frame:0000000000008555                 db    0
.eh_frame:0000000000008556                 db    0
.eh_frame:0000000000008557                 db    0
.eh_frame:0000000000008558                 db 0B0h
.eh_frame:0000000000008559                 db    9
.eh_frame:000000000000855A                 db    0
.eh_frame:000000000000855B                 db    0
.eh_frame:000000000000855C                 db  44h ; D
.eh_frame:000000000000855D                 db 0D7h
.eh_frame:000000000000855E                 db 0FFh
.eh_frame:000000000000855F                 db 0FFh
.eh_frame:0000000000008560                 db  24h ; $
.eh_frame:0000000000008561                 db    0
.eh_frame:0000000000008562                 db    0
.eh_frame:0000000000008563                 db    0
.eh_frame:0000000000008564                 db    0
.eh_frame:0000000000008565                 db  5Fh ; _
.eh_frame:0000000000008566                 db  0Eh
.eh_frame:0000000000008567                 db  10h
.eh_frame:0000000000008568                 db  10h
.eh_frame:0000000000008569                 db    0
.eh_frame:000000000000856A                 db    0
.eh_frame:000000000000856B                 db    0
.eh_frame:000000000000856C                 db 0C4h
.eh_frame:000000000000856D                 db    9
.eh_frame:000000000000856E                 db    0
.eh_frame:000000000000856F                 db    0
.eh_frame:0000000000008570                 db  60h ; `
.eh_frame:0000000000008571                 db 0D7h
.eh_frame:0000000000008572                 db 0FFh
.eh_frame:0000000000008573                 db 0FFh
.eh_frame:0000000000008574                 db    2
.eh_frame:0000000000008575                 db    0
.eh_frame:0000000000008576                 db    0
.eh_frame:0000000000008577                 db    0
.eh_frame:0000000000008578                 db    0
.eh_frame:0000000000008579                 db    0
.eh_frame:000000000000857A                 db    0
.eh_frame:000000000000857B                 db    0
.eh_frame:000000000000857C                 db  20h
.eh_frame:000000000000857D                 db    0
.eh_frame:000000000000857E                 db    0
.eh_frame:000000000000857F                 db    0
.eh_frame:0000000000008580                 db 0D8h
.eh_frame:0000000000008581                 db    9
.eh_frame:0000000000008582                 db    0
.eh_frame:0000000000008583                 db    0
.eh_frame:0000000000008584                 db  5Ch ; \
.eh_frame:0000000000008585                 db 0D7h
.eh_frame:0000000000008586                 db 0FFh
.eh_frame:0000000000008587                 db 0FFh
.eh_frame:0000000000008588                 db  36h ; 6
.eh_frame:0000000000008589                 db    0
.eh_frame:000000000000858A                 db    0
.eh_frame:000000000000858B                 db    0
.eh_frame:000000000000858C                 db    0
.eh_frame:000000000000858D                 db  44h ; D
.eh_frame:000000000000858E                 db  0Eh
.eh_frame:000000000000858F                 db  10h
.eh_frame:0000000000008590                 db  83h
.eh_frame:0000000000008591                 db    2
.eh_frame:0000000000008592                 db  5Dh ; ]
.eh_frame:0000000000008593                 db  0Ah
.eh_frame:0000000000008594                 db  0Eh
.eh_frame:0000000000008595                 db    8
.eh_frame:0000000000008596                 db  47h ; G
.eh_frame:0000000000008597                 db  0Bh
.eh_frame:0000000000008598                 db  48h ; H
.eh_frame:0000000000008599                 db  0Ah
.eh_frame:000000000000859A                 db  0Eh
.eh_frame:000000000000859B                 db    8
.eh_frame:000000000000859C                 db  41h ; A
.eh_frame:000000000000859D                 db  0Bh
.eh_frame:000000000000859E                 db    0
.eh_frame:000000000000859F                 db    0
.eh_frame:00000000000085A0                 db  10h
.eh_frame:00000000000085A1                 db    0
.eh_frame:00000000000085A2                 db    0
.eh_frame:00000000000085A3                 db    0
.eh_frame:00000000000085A4                 db 0FCh
.eh_frame:00000000000085A5                 db    9
.eh_frame:00000000000085A6                 db    0
.eh_frame:00000000000085A7                 db    0
.eh_frame:00000000000085A8                 db  78h ; x
.eh_frame:00000000000085A9                 db 0D7h
.eh_frame:00000000000085AA                 db 0FFh
.eh_frame:00000000000085AB                 db 0FFh
.eh_frame:00000000000085AC                 db  24h ; $
.eh_frame:00000000000085AD                 db    0
.eh_frame:00000000000085AE                 db    0
.eh_frame:00000000000085AF                 db    0
.eh_frame:00000000000085B0                 db    0
.eh_frame:00000000000085B1                 db  5Fh ; _
.eh_frame:00000000000085B2                 db  0Eh
.eh_frame:00000000000085B3                 db  10h
.eh_frame:00000000000085B4                 db  14h
.eh_frame:00000000000085B5                 db    0
.eh_frame:00000000000085B6                 db    0
.eh_frame:00000000000085B7                 db    0
.eh_frame:00000000000085B8                 db  10h
.eh_frame:00000000000085B9                 db  0Ah
.eh_frame:00000000000085BA                 db    0
.eh_frame:00000000000085BB                 db    0
.eh_frame:00000000000085BC                 db  94h
.eh_frame:00000000000085BD                 db 0D7h
.eh_frame:00000000000085BE                 db 0FFh
.eh_frame:00000000000085BF                 db 0FFh
.eh_frame:00000000000085C0                 db  82h
.eh_frame:00000000000085C1                 db    0
.eh_frame:00000000000085C2                 db    0
.eh_frame:00000000000085C3                 db    0
.eh_frame:00000000000085C4                 db    0
.eh_frame:00000000000085C5                 db    2
.eh_frame:00000000000085C6                 db  5Fh ; _
.eh_frame:00000000000085C7                 db  0Eh
.eh_frame:00000000000085C8                 db  10h
.eh_frame:00000000000085C9                 db  49h ; I
.eh_frame:00000000000085CA                 db  0Eh
.eh_frame:00000000000085CB                 db    8
.eh_frame:00000000000085CC                 db  14h
.eh_frame:00000000000085CD                 db    0
.eh_frame:00000000000085CE                 db    0
.eh_frame:00000000000085CF                 db    0
.eh_frame:00000000000085D0                 db  28h ; (
.eh_frame:00000000000085D1                 db  0Ah
.eh_frame:00000000000085D2                 db    0
.eh_frame:00000000000085D3                 db    0
.eh_frame:00000000000085D4                 db  0Ch
.eh_frame:00000000000085D5                 db 0D8h
.eh_frame:00000000000085D6                 db 0FFh
.eh_frame:00000000000085D7                 db 0FFh
.eh_frame:00000000000085D8                 db  4Ah ; J
.eh_frame:00000000000085D9                 db    0
.eh_frame:00000000000085DA                 db    0
.eh_frame:00000000000085DB                 db    0
.eh_frame:00000000000085DC                 db    0
.eh_frame:00000000000085DD                 db    2
.eh_frame:00000000000085DE                 db  45h ; E
.eh_frame:00000000000085DF                 db  0Eh
.eh_frame:00000000000085E0                 db  10h
.eh_frame:00000000000085E1                 db    0
.eh_frame:00000000000085E2                 db    0
.eh_frame:00000000000085E3                 db    0
.eh_frame:00000000000085E4                 db  18h
.eh_frame:00000000000085E5                 db    0
.eh_frame:00000000000085E6                 db    0
.eh_frame:00000000000085E7                 db    0
.eh_frame:00000000000085E8                 db  40h ; @
.eh_frame:00000000000085E9                 db  0Ah
.eh_frame:00000000000085EA                 db    0
.eh_frame:00000000000085EB                 db    0
.eh_frame:00000000000085EC                 db  44h ; D
.eh_frame:00000000000085ED                 db 0D8h
.eh_frame:00000000000085EE                 db 0FFh
.eh_frame:00000000000085EF                 db 0FFh
.eh_frame:00000000000085F0                 db  17h
.eh_frame:00000000000085F1                 db    0
.eh_frame:00000000000085F2                 db    0
.eh_frame:00000000000085F3                 db    0
.eh_frame:00000000000085F4                 db    0
.eh_frame:00000000000085F5                 db  41h ; A
.eh_frame:00000000000085F6                 db  0Eh
.eh_frame:00000000000085F7                 db  10h
.eh_frame:00000000000085F8                 db  83h
.eh_frame:00000000000085F9                 db    2
.eh_frame:00000000000085FA                 db  51h ; Q
.eh_frame:00000000000085FB                 db  0Eh
.eh_frame:00000000000085FC                 db    8
.eh_frame:00000000000085FD                 db    0
.eh_frame:00000000000085FE                 db    0
.eh_frame:00000000000085FF                 db    0
.eh_frame:0000000000008600                 db  18h
.eh_frame:0000000000008601                 db    0
.eh_frame:0000000000008602                 db    0
.eh_frame:0000000000008603                 db    0
.eh_frame:0000000000008604                 db  5Ch ; \
.eh_frame:0000000000008605                 db  0Ah
.eh_frame:0000000000008606                 db    0
.eh_frame:0000000000008607                 db    0
.eh_frame:0000000000008608                 db  48h ; H
.eh_frame:0000000000008609                 db 0D8h
.eh_frame:000000000000860A                 db 0FFh
.eh_frame:000000000000860B                 db 0FFh
.eh_frame:000000000000860C                 db  2Eh ; .
.eh_frame:000000000000860D                 db    0
.eh_frame:000000000000860E                 db    0
.eh_frame:000000000000860F                 db    0
.eh_frame:0000000000008610                 db    0
.eh_frame:0000000000008611                 db  47h ; G
.eh_frame:0000000000008612                 db  0Eh
.eh_frame:0000000000008613                 db  10h
.eh_frame:0000000000008614                 db  61h ; a
.eh_frame:0000000000008615                 db  0Ah
.eh_frame:0000000000008616                 db  0Eh
.eh_frame:0000000000008617                 db    8
.eh_frame:0000000000008618                 db  41h ; A
.eh_frame:0000000000008619                 db  0Bh
.eh_frame:000000000000861A                 db    0
.eh_frame:000000000000861B                 db    0
.eh_frame:000000000000861C                 db  24h ; $
.eh_frame:000000000000861D                 db    0
.eh_frame:000000000000861E                 db    0
.eh_frame:000000000000861F                 db    0
.eh_frame:0000000000008620                 db  78h ; x
.eh_frame:0000000000008621                 db  0Ah
.eh_frame:0000000000008622                 db    0
.eh_frame:0000000000008623                 db    0
.eh_frame:0000000000008624                 db  5Ch ; \
.eh_frame:0000000000008625                 db 0D8h
.eh_frame:0000000000008626                 db 0FFh
.eh_frame:0000000000008627                 db 0FFh
.eh_frame:0000000000008628                 db  28h ; (
.eh_frame:0000000000008629                 db    0
.eh_frame:000000000000862A                 db    0
.eh_frame:000000000000862B                 db    0
.eh_frame:000000000000862C                 db    0
.eh_frame:000000000000862D                 db  41h ; A
.eh_frame:000000000000862E                 db  0Eh
.eh_frame:000000000000862F                 db  10h
.eh_frame:0000000000008630                 db  86h
.eh_frame:0000000000008631                 db    2
.eh_frame:0000000000008632                 db  41h ; A
.eh_frame:0000000000008633                 db  0Eh
.eh_frame:0000000000008634                 db  18h
.eh_frame:0000000000008635                 db  83h
.eh_frame:0000000000008636                 db    3
.eh_frame:0000000000008637                 db  4Dh ; M
.eh_frame:0000000000008638                 db  0Eh
.eh_frame:0000000000008639                 db  20h
.eh_frame:000000000000863A                 db  49h ; I
.eh_frame:000000000000863B                 db  0Eh
.eh_frame:000000000000863C                 db  18h
.eh_frame:000000000000863D                 db  47h ; G
.eh_frame:000000000000863E                 db  0Eh
.eh_frame:000000000000863F                 db  10h
.eh_frame:0000000000008640                 db  41h ; A
.eh_frame:0000000000008641                 db  0Eh
.eh_frame:0000000000008642                 db    8
.eh_frame:0000000000008643                 db    0
.eh_frame:0000000000008644                 db  18h
.eh_frame:0000000000008645                 db    0
.eh_frame:0000000000008646                 db    0
.eh_frame:0000000000008647                 db    0
.eh_frame:0000000000008648                 db 0A0h
.eh_frame:0000000000008649                 db  0Ah
.eh_frame:000000000000864A                 db    0
.eh_frame:000000000000864B                 db    0
.eh_frame:000000000000864C                 db  64h ; d
.eh_frame:000000000000864D                 db 0D8h
.eh_frame:000000000000864E                 db 0FFh
.eh_frame:000000000000864F                 db 0FFh
.eh_frame:0000000000008650                 db  13h
.eh_frame:0000000000008651                 db    0
.eh_frame:0000000000008652                 db    0
.eh_frame:0000000000008653                 db    0
.eh_frame:0000000000008654                 db    0
.eh_frame:0000000000008655                 db  41h ; A
.eh_frame:0000000000008656                 db  0Eh
.eh_frame:0000000000008657                 db  10h
.eh_frame:0000000000008658                 db  83h
.eh_frame:0000000000008659                 db    2
.eh_frame:000000000000865A                 db  50h ; P
.eh_frame:000000000000865B                 db  0Eh
.eh_frame:000000000000865C                 db    8
.eh_frame:000000000000865D                 db    0
.eh_frame:000000000000865E                 db    0
.eh_frame:000000000000865F                 db    0
.eh_frame:0000000000008660                 db  14h
.eh_frame:0000000000008661                 db    0
.eh_frame:0000000000008662                 db    0
.eh_frame:0000000000008663                 db    0
.eh_frame:0000000000008664                 db 0BCh
.eh_frame:0000000000008665                 db  0Ah
.eh_frame:0000000000008666                 db    0
.eh_frame:0000000000008667                 db    0
.eh_frame:0000000000008668                 db  68h ; h
.eh_frame:0000000000008669                 db 0D8h
.eh_frame:000000000000866A                 db 0FFh
.eh_frame:000000000000866B                 db 0FFh
.eh_frame:000000000000866C                 db  35h ; 5
.eh_frame:000000000000866D                 db    0
.eh_frame:000000000000866E                 db    0
.eh_frame:000000000000866F                 db    0
.eh_frame:0000000000008670                 db    0
.eh_frame:0000000000008671                 db  4Bh ; K
.eh_frame:0000000000008672                 db  0Eh
.eh_frame:0000000000008673                 db  10h
.eh_frame:0000000000008674                 db    0
.eh_frame:0000000000008675                 db    0
.eh_frame:0000000000008676                 db    0
.eh_frame:0000000000008677                 db    0
.eh_frame:0000000000008678                 db  1Ch
.eh_frame:0000000000008679                 db    0
.eh_frame:000000000000867A                 db    0
.eh_frame:000000000000867B                 db    0
.eh_frame:000000000000867C                 db 0D4h
.eh_frame:000000000000867D                 db  0Ah
.eh_frame:000000000000867E                 db    0
.eh_frame:000000000000867F                 db    0
.eh_frame:0000000000008680                 db  90h
.eh_frame:0000000000008681                 db 0D8h
.eh_frame:0000000000008682                 db 0FFh
.eh_frame:0000000000008683                 db 0FFh
.eh_frame:0000000000008684                 db  18h
.eh_frame:0000000000008685                 db    0
.eh_frame:0000000000008686                 db    0
.eh_frame:0000000000008687                 db    0
.eh_frame:0000000000008688                 db    0
.eh_frame:0000000000008689                 db  44h ; D
.eh_frame:000000000000868A                 db  0Eh
.eh_frame:000000000000868B                 db  10h
.eh_frame:000000000000868C                 db  4Eh ; N
.eh_frame:000000000000868D                 db  0Ah
.eh_frame:000000000000868E                 db  0Eh
.eh_frame:000000000000868F                 db    8
.eh_frame:0000000000008690                 db  41h ; A
.eh_frame:0000000000008691                 db  0Bh
.eh_frame:0000000000008692                 db    0
.eh_frame:0000000000008693                 db    0
.eh_frame:0000000000008694                 db    0
.eh_frame:0000000000008695                 db    0
.eh_frame:0000000000008696                 db    0
.eh_frame:0000000000008697                 db    0
.eh_frame:0000000000008698                 db  34h ; 4
.eh_frame:0000000000008699                 db    0
.eh_frame:000000000000869A                 db    0
.eh_frame:000000000000869B                 db    0
.eh_frame:000000000000869C                 db 0F4h
.eh_frame:000000000000869D                 db  0Ah
.eh_frame:000000000000869E                 db    0
.eh_frame:000000000000869F                 db    0
.eh_frame:00000000000086A0                 db  90h
.eh_frame:00000000000086A1                 db 0D8h
.eh_frame:00000000000086A2                 db 0FFh
.eh_frame:00000000000086A3                 db 0FFh
.eh_frame:00000000000086A4                 db  7Bh ; {
.eh_frame:00000000000086A5                 db    0
.eh_frame:00000000000086A6                 db    0
.eh_frame:00000000000086A7                 db    0
.eh_frame:00000000000086A8                 db    0
.eh_frame:00000000000086A9                 db  42h ; B
.eh_frame:00000000000086AA                 db  0Eh
.eh_frame:00000000000086AB                 db  10h
.eh_frame:00000000000086AC                 db  8Ch
.eh_frame:00000000000086AD                 db    2
.eh_frame:00000000000086AE                 db  41h ; A
.eh_frame:00000000000086AF                 db  0Eh
.eh_frame:00000000000086B0                 db  18h
.eh_frame:00000000000086B1                 db  86h
.eh_frame:00000000000086B2                 db    3
.eh_frame:00000000000086B3                 db  41h ; A
.eh_frame:00000000000086B4                 db  0Eh
.eh_frame:00000000000086B5                 db  20h
.eh_frame:00000000000086B6                 db  83h
.eh_frame:00000000000086B7                 db    4
.eh_frame:00000000000086B8                 db  7Dh ; }
.eh_frame:00000000000086B9                 db  0Ah
.eh_frame:00000000000086BA                 db  0Eh
.eh_frame:00000000000086BB                 db  18h
.eh_frame:00000000000086BC                 db  41h ; A
.eh_frame:00000000000086BD                 db  0Eh
.eh_frame:00000000000086BE                 db  10h
.eh_frame:00000000000086BF                 db  42h ; B
.eh_frame:00000000000086C0                 db  0Eh
.eh_frame:00000000000086C1                 db    8
.eh_frame:00000000000086C2                 db  44h ; D
.eh_frame:00000000000086C3                 db  0Bh
.eh_frame:00000000000086C4                 db  60h ; `
.eh_frame:00000000000086C5                 db  0Ah
.eh_frame:00000000000086C6                 db  0Eh
.eh_frame:00000000000086C7                 db  18h
.eh_frame:00000000000086C8                 db  41h ; A
.eh_frame:00000000000086C9                 db  0Eh
.eh_frame:00000000000086CA                 db  10h
.eh_frame:00000000000086CB                 db  42h ; B
.eh_frame:00000000000086CC                 db  0Eh
.eh_frame:00000000000086CD                 db    8
.eh_frame:00000000000086CE                 db  45h ; E
.eh_frame:00000000000086CF                 db  0Bh
.eh_frame:00000000000086D0                 db  1Ch
.eh_frame:00000000000086D1                 db    0
.eh_frame:00000000000086D2                 db    0
.eh_frame:00000000000086D3                 db    0
.eh_frame:00000000000086D4                 db  2Ch ; ,
.eh_frame:00000000000086D5                 db  0Bh
.eh_frame:00000000000086D6                 db    0
.eh_frame:00000000000086D7                 db    0
.eh_frame:00000000000086D8                 db 0D8h
.eh_frame:00000000000086D9                 db 0D8h
.eh_frame:00000000000086DA                 db 0FFh
.eh_frame:00000000000086DB                 db 0FFh
.eh_frame:00000000000086DC                 db  40h ; @
.eh_frame:00000000000086DD                 db    0
.eh_frame:00000000000086DE                 db    0
.eh_frame:00000000000086DF                 db    0
.eh_frame:00000000000086E0                 db    0
.eh_frame:00000000000086E1                 db  44h ; D
.eh_frame:00000000000086E2                 db  0Eh
.eh_frame:00000000000086E3                 db  10h
.eh_frame:00000000000086E4                 db  83h
.eh_frame:00000000000086E5                 db    2
.eh_frame:00000000000086E6                 db  5Ah ; Z
.eh_frame:00000000000086E7                 db  0Ah
.eh_frame:00000000000086E8                 db  0Eh
.eh_frame:00000000000086E9                 db    8
.eh_frame:00000000000086EA                 db  4Ah ; J
.eh_frame:00000000000086EB                 db  0Bh
.eh_frame:00000000000086EC                 db  53h ; S
.eh_frame:00000000000086ED                 db  0Eh
.eh_frame:00000000000086EE                 db    8
.eh_frame:00000000000086EF                 db    0
.eh_frame:00000000000086F0                 db  14h
.eh_frame:00000000000086F1                 db    0
.eh_frame:00000000000086F2                 db    0
.eh_frame:00000000000086F3                 db    0
.eh_frame:00000000000086F4                 db  4Ch ; L
.eh_frame:00000000000086F5                 db  0Bh
.eh_frame:00000000000086F6                 db    0
.eh_frame:00000000000086F7                 db    0
.eh_frame:00000000000086F8                 db 0F8h
.eh_frame:00000000000086F9                 db 0D8h
.eh_frame:00000000000086FA                 db 0FFh
.eh_frame:00000000000086FB                 db 0FFh
.eh_frame:00000000000086FC                 db  23h ; #
.eh_frame:00000000000086FD                 db    0
.eh_frame:00000000000086FE                 db    0
.eh_frame:00000000000086FF                 db    0
.eh_frame:0000000000008700                 db    0
.eh_frame:0000000000008701                 db    0
.eh_frame:0000000000008702                 db    0
.eh_frame:0000000000008703                 db    0
.eh_frame:0000000000008704                 db    0
.eh_frame:0000000000008705                 db    0
.eh_frame:0000000000008706                 db    0
.eh_frame:0000000000008707                 db    0
.eh_frame:0000000000008708                 db  2Ch ; ,
.eh_frame:0000000000008709                 db    0
.eh_frame:000000000000870A                 db    0
.eh_frame:000000000000870B                 db    0
.eh_frame:000000000000870C                 db  64h ; d
.eh_frame:000000000000870D                 db  0Bh
.eh_frame:000000000000870E                 db    0
.eh_frame:000000000000870F                 db    0
.eh_frame:0000000000008710                 db  10h
.eh_frame:0000000000008711                 db 0D9h
.eh_frame:0000000000008712                 db 0FFh
.eh_frame:0000000000008713                 db 0FFh
.eh_frame:0000000000008714                 db  57h ; W
.eh_frame:0000000000008715                 db    0
.eh_frame:0000000000008716                 db    0
.eh_frame:0000000000008717                 db    0
.eh_frame:0000000000008718                 db    0
.eh_frame:0000000000008719                 db  63h ; c
.eh_frame:000000000000871A                 db  0Eh
.eh_frame:000000000000871B                 db  10h
.eh_frame:000000000000871C                 db  8Ch
.eh_frame:000000000000871D                 db    2
.eh_frame:000000000000871E                 db  41h ; A
.eh_frame:000000000000871F                 db  0Eh
.eh_frame:0000000000008720                 db  18h
.eh_frame:0000000000008721                 db  86h
.eh_frame:0000000000008722                 db    3
.eh_frame:0000000000008723                 db  44h ; D
.eh_frame:0000000000008724                 db  0Eh
.eh_frame:0000000000008725                 db  20h
.eh_frame:0000000000008726                 db  83h
.eh_frame:0000000000008727                 db    4
.eh_frame:0000000000008728                 db  6Bh ; k
.eh_frame:0000000000008729                 db  0Eh
.eh_frame:000000000000872A                 db  18h
.eh_frame:000000000000872B                 db  41h ; A
.eh_frame:000000000000872C                 db  0Eh
.eh_frame:000000000000872D                 db  10h
.eh_frame:000000000000872E                 db  42h ; B
.eh_frame:000000000000872F                 db  0Eh
.eh_frame:0000000000008730                 db    8
.eh_frame:0000000000008731                 db    0
.eh_frame:0000000000008732                 db    0
.eh_frame:0000000000008733                 db    0
.eh_frame:0000000000008734                 db    0
.eh_frame:0000000000008735                 db    0
.eh_frame:0000000000008736                 db    0
.eh_frame:0000000000008737                 db    0
.eh_frame:0000000000008738                 db  3Ch ; <
.eh_frame:0000000000008739                 db    0
.eh_frame:000000000000873A                 db    0
.eh_frame:000000000000873B                 db    0
.eh_frame:000000000000873C                 db  94h
.eh_frame:000000000000873D                 db  0Bh
.eh_frame:000000000000873E                 db    0
.eh_frame:000000000000873F                 db    0
.eh_frame:0000000000008740                 db  40h ; @
.eh_frame:0000000000008741                 db 0D9h
.eh_frame:0000000000008742                 db 0FFh
.eh_frame:0000000000008743                 db 0FFh
.eh_frame:0000000000008744                 db  83h
.eh_frame:0000000000008745                 db    0
.eh_frame:0000000000008746                 db    0
.eh_frame:0000000000008747                 db    0
.eh_frame:0000000000008748                 db    0
.eh_frame:0000000000008749                 db  42h ; B
.eh_frame:000000000000874A                 db  0Eh
.eh_frame:000000000000874B                 db  10h
.eh_frame:000000000000874C                 db  8Dh
.eh_frame:000000000000874D                 db    2
.eh_frame:000000000000874E                 db  42h ; B
.eh_frame:000000000000874F                 db  0Eh
.eh_frame:0000000000008750                 db  18h
.eh_frame:0000000000008751                 db  8Ch
.eh_frame:0000000000008752                 db    3
.eh_frame:0000000000008753                 db  44h ; D
.eh_frame:0000000000008754                 db  0Eh
.eh_frame:0000000000008755                 db  20h
.eh_frame:0000000000008756                 db  86h
.eh_frame:0000000000008757                 db    4
.eh_frame:0000000000008758                 db  41h ; A
.eh_frame:0000000000008759                 db  0Eh
.eh_frame:000000000000875A                 db  28h ; (
.eh_frame:000000000000875B                 db  83h
.eh_frame:000000000000875C                 db    5
.eh_frame:000000000000875D                 db  4Ah ; J
.eh_frame:000000000000875E                 db  0Eh
.eh_frame:000000000000875F                 db  40h ; @
.eh_frame:0000000000008760                 db    2
.eh_frame:0000000000008761                 db  64h ; d
.eh_frame:0000000000008762                 db  0Ah
.eh_frame:0000000000008763                 db  0Eh
.eh_frame:0000000000008764                 db  28h ; (
.eh_frame:0000000000008765                 db  41h ; A
.eh_frame:0000000000008766                 db  0Eh
.eh_frame:0000000000008767                 db  20h
.eh_frame:0000000000008768                 db  41h ; A
.eh_frame:0000000000008769                 db  0Eh
.eh_frame:000000000000876A                 db  18h
.eh_frame:000000000000876B                 db  42h ; B
.eh_frame:000000000000876C                 db  0Eh
.eh_frame:000000000000876D                 db  10h
.eh_frame:000000000000876E                 db  42h ; B
.eh_frame:000000000000876F                 db  0Eh
.eh_frame:0000000000008770                 db    8
.eh_frame:0000000000008771                 db  41h ; A
.eh_frame:0000000000008772                 db  0Bh
.eh_frame:0000000000008773                 db    0
.eh_frame:0000000000008774                 db    0
.eh_frame:0000000000008775                 db    0
.eh_frame:0000000000008776                 db    0
.eh_frame:0000000000008777                 db    0
.eh_frame:0000000000008778                 db  4Ch ; L
.eh_frame:0000000000008779                 db    0
.eh_frame:000000000000877A                 db    0
.eh_frame:000000000000877B                 db    0
.eh_frame:000000000000877C                 db 0D4h
.eh_frame:000000000000877D                 db  0Bh
.eh_frame:000000000000877E                 db    0
.eh_frame:000000000000877F                 db    0
.eh_frame:0000000000008780                 db  90h
.eh_frame:0000000000008781                 db 0D9h
.eh_frame:0000000000008782                 db 0FFh
.eh_frame:0000000000008783                 db 0FFh
.eh_frame:0000000000008784                 db  7Dh ; }
.eh_frame:0000000000008785                 db    0
.eh_frame:0000000000008786                 db    0
.eh_frame:0000000000008787                 db    0
.eh_frame:0000000000008788                 db    0
.eh_frame:0000000000008789                 db  42h ; B
.eh_frame:000000000000878A                 db  0Eh
.eh_frame:000000000000878B                 db  10h
.eh_frame:000000000000878C                 db  8Ch
.eh_frame:000000000000878D                 db    2
.eh_frame:000000000000878E                 db  41h ; A
.eh_frame:000000000000878F                 db  0Eh
.eh_frame:0000000000008790                 db  18h
.eh_frame:0000000000008791                 db  86h
.eh_frame:0000000000008792                 db    3
.eh_frame:0000000000008793                 db  44h ; D
.eh_frame:0000000000008794                 db  0Eh
.eh_frame:0000000000008795                 db  20h
.eh_frame:0000000000008796                 db  83h
.eh_frame:0000000000008797                 db    4
.eh_frame:0000000000008798                 db  69h ; i
.eh_frame:0000000000008799                 db  0Ah
.eh_frame:000000000000879A                 db  0Eh
.eh_frame:000000000000879B                 db  18h
.eh_frame:000000000000879C                 db  41h ; A
.eh_frame:000000000000879D                 db  0Eh
.eh_frame:000000000000879E                 db  10h
.eh_frame:000000000000879F                 db  42h ; B
.eh_frame:00000000000087A0                 db  0Eh
.eh_frame:00000000000087A1                 db    8
.eh_frame:00000000000087A2                 db  45h ; E
.eh_frame:00000000000087A3                 db  0Bh
.eh_frame:00000000000087A4                 db  55h ; U
.eh_frame:00000000000087A5                 db  0Ah
.eh_frame:00000000000087A6                 db  0Eh
.eh_frame:00000000000087A7                 db  18h
.eh_frame:00000000000087A8                 db  41h ; A
.eh_frame:00000000000087A9                 db  0Eh
.eh_frame:00000000000087AA                 db  10h
.eh_frame:00000000000087AB                 db  42h ; B
.eh_frame:00000000000087AC                 db  0Eh
.eh_frame:00000000000087AD                 db    8
.eh_frame:00000000000087AE                 db  48h ; H
.eh_frame:00000000000087AF                 db  0Bh
.eh_frame:00000000000087B0                 db  41h ; A
.eh_frame:00000000000087B1                 db  0Ah
.eh_frame:00000000000087B2                 db  0Eh
.eh_frame:00000000000087B3                 db  18h
.eh_frame:00000000000087B4                 db  46h ; F
.eh_frame:00000000000087B5                 db  0Eh
.eh_frame:00000000000087B6                 db  10h
.eh_frame:00000000000087B7                 db  42h ; B
.eh_frame:00000000000087B8                 db  0Eh
.eh_frame:00000000000087B9                 db    8
.eh_frame:00000000000087BA                 db  47h ; G
.eh_frame:00000000000087BB                 db  0Bh
.eh_frame:00000000000087BC                 db  49h ; I
.eh_frame:00000000000087BD                 db  0Eh
.eh_frame:00000000000087BE                 db  18h
.eh_frame:00000000000087BF                 db  41h ; A
.eh_frame:00000000000087C0                 db  0Eh
.eh_frame:00000000000087C1                 db  10h
.eh_frame:00000000000087C2                 db  42h ; B
.eh_frame:00000000000087C3                 db  0Eh
.eh_frame:00000000000087C4                 db    8
.eh_frame:00000000000087C5                 db    0
.eh_frame:00000000000087C6                 db    0
.eh_frame:00000000000087C7                 db    0
.eh_frame:00000000000087C8                 db  44h ; D
.eh_frame:00000000000087C9                 db    0
.eh_frame:00000000000087CA                 db    0
.eh_frame:00000000000087CB                 db    0
.eh_frame:00000000000087CC                 db  24h ; $
.eh_frame:00000000000087CD                 db  0Ch
.eh_frame:00000000000087CE                 db    0
.eh_frame:00000000000087CF                 db    0
.eh_frame:00000000000087D0                 db 0C0h
.eh_frame:00000000000087D1                 db 0D9h
.eh_frame:00000000000087D2                 db 0FFh
.eh_frame:00000000000087D3                 db 0FFh
.eh_frame:00000000000087D4                 db  6Dh ; m
.eh_frame:00000000000087D5                 db    1
.eh_frame:00000000000087D6                 db    0
.eh_frame:00000000000087D7                 db    0
.eh_frame:00000000000087D8                 db    0
.eh_frame:00000000000087D9                 db  42h ; B
.eh_frame:00000000000087DA                 db  0Eh
.eh_frame:00000000000087DB                 db  10h
.eh_frame:00000000000087DC                 db  8Eh
.eh_frame:00000000000087DD                 db    2
.eh_frame:00000000000087DE                 db  42h ; B
.eh_frame:00000000000087DF                 db  0Eh
.eh_frame:00000000000087E0                 db  18h
.eh_frame:00000000000087E1                 db  8Dh
.eh_frame:00000000000087E2                 db    3
.eh_frame:00000000000087E3                 db  42h ; B
.eh_frame:00000000000087E4                 db  0Eh
.eh_frame:00000000000087E5                 db  20h
.eh_frame:00000000000087E6                 db  8Ch
.eh_frame:00000000000087E7                 db    4
.eh_frame:00000000000087E8                 db  41h ; A
.eh_frame:00000000000087E9                 db  0Eh
.eh_frame:00000000000087EA                 db  28h ; (
.eh_frame:00000000000087EB                 db  86h
.eh_frame:00000000000087EC                 db    5
.eh_frame:00000000000087ED                 db  41h ; A
.eh_frame:00000000000087EE                 db  0Eh
.eh_frame:00000000000087EF                 db  30h ; 0
.eh_frame:00000000000087F0                 db  83h
.eh_frame:00000000000087F1                 db    6
.eh_frame:00000000000087F2                 db  47h ; G
.eh_frame:00000000000087F3                 db  0Eh
.eh_frame:00000000000087F4                 db 0D0h
.eh_frame:00000000000087F5                 db  20h
.eh_frame:00000000000087F6                 db    2
.eh_frame:00000000000087F7                 db 0C2h
.eh_frame:00000000000087F8                 db  0Ah
.eh_frame:00000000000087F9                 db  0Eh
.eh_frame:00000000000087FA                 db  30h ; 0
.eh_frame:00000000000087FB                 db  41h ; A
.eh_frame:00000000000087FC                 db  0Eh
.eh_frame:00000000000087FD                 db  28h ; (
.eh_frame:00000000000087FE                 db  41h ; A
.eh_frame:00000000000087FF                 db  0Eh
.eh_frame:0000000000008800                 db  20h
.eh_frame:0000000000008801                 db  42h ; B
.eh_frame:0000000000008802                 db  0Eh
.eh_frame:0000000000008803                 db  18h
.eh_frame:0000000000008804                 db  42h ; B
.eh_frame:0000000000008805                 db  0Eh
.eh_frame:0000000000008806                 db  10h
.eh_frame:0000000000008807                 db  42h ; B
.eh_frame:0000000000008808                 db  0Eh
.eh_frame:0000000000008809                 db    8
.eh_frame:000000000000880A                 db  47h ; G
.eh_frame:000000000000880B                 db  0Bh
.eh_frame:000000000000880C                 db    0
.eh_frame:000000000000880D                 db    0
.eh_frame:000000000000880E                 db    0
.eh_frame:000000000000880F                 db    0
.eh_frame:0000000000008810                 db  1Ch
.eh_frame:0000000000008811                 db    0
.eh_frame:0000000000008812                 db    0
.eh_frame:0000000000008813                 db    0
.eh_frame:0000000000008814                 db  6Ch ; l
.eh_frame:0000000000008815                 db  0Ch
.eh_frame:0000000000008816                 db    0
.eh_frame:0000000000008817                 db    0
.eh_frame:0000000000008818                 db 0E8h
.eh_frame:0000000000008819                 db 0DAh
.eh_frame:000000000000881A                 db 0FFh
.eh_frame:000000000000881B                 db 0FFh
.eh_frame:000000000000881C                 db  60h ; `
.eh_frame:000000000000881D                 db    0
.eh_frame:000000000000881E                 db    0
.eh_frame:000000000000881F                 db    0
.eh_frame:0000000000008820                 db    0
.eh_frame:0000000000008821                 db  44h ; D
.eh_frame:0000000000008822                 db  0Eh
.eh_frame:0000000000008823                 db  10h
.eh_frame:0000000000008824                 db  75h ; u
.eh_frame:0000000000008825                 db  0Ah
.eh_frame:0000000000008826                 db  0Eh
.eh_frame:0000000000008827                 db    8
.eh_frame:0000000000008828                 db  47h ; G
.eh_frame:0000000000008829                 db  0Bh
.eh_frame:000000000000882A                 db  5Fh ; _
.eh_frame:000000000000882B                 db  0Eh
.eh_frame:000000000000882C                 db    8
.eh_frame:000000000000882D                 db    0
.eh_frame:000000000000882E                 db    0
.eh_frame:000000000000882F                 db    0
.eh_frame:0000000000008830                 db  1Ch
.eh_frame:0000000000008831                 db    0
.eh_frame:0000000000008832                 db    0
.eh_frame:0000000000008833                 db    0
.eh_frame:0000000000008834                 db  8Ch
.eh_frame:0000000000008835                 db  0Ch
.eh_frame:0000000000008836                 db    0
.eh_frame:0000000000008837                 db    0
.eh_frame:0000000000008838                 db  28h ; (
.eh_frame:0000000000008839                 db 0DBh
.eh_frame:000000000000883A                 db 0FFh
.eh_frame:000000000000883B                 db 0FFh
.eh_frame:000000000000883C                 db  3Ch ; <
.eh_frame:000000000000883D                 db    0
.eh_frame:000000000000883E                 db    0
.eh_frame:000000000000883F                 db    0
.eh_frame:0000000000008840                 db    0
.eh_frame:0000000000008841                 db  44h ; D
.eh_frame:0000000000008842                 db  0Eh
.eh_frame:0000000000008843                 db  10h
.eh_frame:0000000000008844                 db  61h ; a
.eh_frame:0000000000008845                 db  0Ah
.eh_frame:0000000000008846                 db  0Eh
.eh_frame:0000000000008847                 db    8
.eh_frame:0000000000008848                 db  4Bh ; K
.eh_frame:0000000000008849                 db  0Bh
.eh_frame:000000000000884A                 db  4Bh ; K
.eh_frame:000000000000884B                 db  0Eh
.eh_frame:000000000000884C                 db    8
.eh_frame:000000000000884D                 db    0
.eh_frame:000000000000884E                 db    0
.eh_frame:000000000000884F                 db    0
.eh_frame:0000000000008850                 db  14h
.eh_frame:0000000000008851                 db    0
.eh_frame:0000000000008852                 db    0
.eh_frame:0000000000008853                 db    0
.eh_frame:0000000000008854                 db 0ACh
.eh_frame:0000000000008855                 db  0Ch
.eh_frame:0000000000008856                 db    0
.eh_frame:0000000000008857                 db    0
.eh_frame:0000000000008858                 db  48h ; H
.eh_frame:0000000000008859                 db 0DBh
.eh_frame:000000000000885A                 db 0FFh
.eh_frame:000000000000885B                 db 0FFh
.eh_frame:000000000000885C                 db  29h ; )
.eh_frame:000000000000885D                 db    0
.eh_frame:000000000000885E                 db    0
.eh_frame:000000000000885F                 db    0
.eh_frame:0000000000008860                 db    0
.eh_frame:0000000000008861                 db    0
.eh_frame:0000000000008862                 db    0
.eh_frame:0000000000008863                 db    0
.eh_frame:0000000000008864                 db    0
.eh_frame:0000000000008865                 db    0
.eh_frame:0000000000008866                 db    0
.eh_frame:0000000000008867                 db    0
.eh_frame:0000000000008868                 db  44h ; D
.eh_frame:0000000000008869                 db    0
.eh_frame:000000000000886A                 db    0
.eh_frame:000000000000886B                 db    0
.eh_frame:000000000000886C                 db 0C4h
.eh_frame:000000000000886D                 db  0Ch
.eh_frame:000000000000886E                 db    0
.eh_frame:000000000000886F                 db    0
.eh_frame:0000000000008870                 db  60h ; `
.eh_frame:0000000000008871                 db 0DBh
.eh_frame:0000000000008872                 db 0FFh
.eh_frame:0000000000008873                 db 0FFh
.eh_frame:0000000000008874                 db  65h ; e
.eh_frame:0000000000008875                 db    0
.eh_frame:0000000000008876                 db    0
.eh_frame:0000000000008877                 db    0
.eh_frame:0000000000008878                 db    0
.eh_frame:0000000000008879                 db  42h ; B
.eh_frame:000000000000887A                 db  0Eh
.eh_frame:000000000000887B                 db  10h
.eh_frame:000000000000887C                 db  8Fh
.eh_frame:000000000000887D                 db    2
.eh_frame:000000000000887E                 db  42h ; B
.eh_frame:000000000000887F                 db  0Eh
.eh_frame:0000000000008880                 db  18h
.eh_frame:0000000000008881                 db  8Eh
.eh_frame:0000000000008882                 db    3
.eh_frame:0000000000008883                 db  45h ; E
.eh_frame:0000000000008884                 db  0Eh
.eh_frame:0000000000008885                 db  20h
.eh_frame:0000000000008886                 db  8Dh
.eh_frame:0000000000008887                 db    4
.eh_frame:0000000000008888                 db  42h ; B
.eh_frame:0000000000008889                 db  0Eh
.eh_frame:000000000000888A                 db  28h ; (
.eh_frame:000000000000888B                 db  8Ch
.eh_frame:000000000000888C                 db    5
.eh_frame:000000000000888D                 db  48h ; H
.eh_frame:000000000000888E                 db  0Eh
.eh_frame:000000000000888F                 db  30h ; 0
.eh_frame:0000000000008890                 db  86h
.eh_frame:0000000000008891                 db    6
.eh_frame:0000000000008892                 db  48h ; H
.eh_frame:0000000000008893                 db  0Eh
.eh_frame:0000000000008894                 db  38h ; 8
.eh_frame:0000000000008895                 db  83h
.eh_frame:0000000000008896                 db    7
.eh_frame:0000000000008897                 db  4Dh ; M
.eh_frame:0000000000008898                 db  0Eh
.eh_frame:0000000000008899                 db  40h ; @
.eh_frame:000000000000889A                 db  72h ; r
.eh_frame:000000000000889B                 db  0Eh
.eh_frame:000000000000889C                 db  38h ; 8
.eh_frame:000000000000889D                 db  41h ; A
.eh_frame:000000000000889E                 db  0Eh
.eh_frame:000000000000889F                 db  30h ; 0
.eh_frame:00000000000088A0                 db  41h ; A
.eh_frame:00000000000088A1                 db  0Eh
.eh_frame:00000000000088A2                 db  28h ; (
.eh_frame:00000000000088A3                 db  42h ; B
.eh_frame:00000000000088A4                 db  0Eh
.eh_frame:00000000000088A5                 db  20h
.eh_frame:00000000000088A6                 db  42h ; B
.eh_frame:00000000000088A7                 db  0Eh
.eh_frame:00000000000088A8                 db  18h
.eh_frame:00000000000088A9                 db  42h ; B
.eh_frame:00000000000088AA                 db  0Eh
.eh_frame:00000000000088AB                 db  10h
.eh_frame:00000000000088AC                 db  42h ; B
.eh_frame:00000000000088AD                 db  0Eh
.eh_frame:00000000000088AE                 db    8
.eh_frame:00000000000088AF                 db    0
.eh_frame:00000000000088B0                 db  14h
.eh_frame:00000000000088B1                 db    0
.eh_frame:00000000000088B2                 db    0
.eh_frame:00000000000088B3                 db    0
.eh_frame:00000000000088B4                 db  0Ch
.eh_frame:00000000000088B5                 db  0Dh
.eh_frame:00000000000088B6                 db    0
.eh_frame:00000000000088B7                 db    0
.eh_frame:00000000000088B8                 db  88h
.eh_frame:00000000000088B9                 db 0DBh
.eh_frame:00000000000088BA                 db 0FFh
.eh_frame:00000000000088BB                 db 0FFh
.eh_frame:00000000000088BC                 db    2
.eh_frame:00000000000088BD                 db    0
.eh_frame:00000000000088BE                 db    0
.eh_frame:00000000000088BF                 db    0
.eh_frame:00000000000088C0                 db    0
.eh_frame:00000000000088C1                 db    0
.eh_frame:00000000000088C2                 db    0
.eh_frame:00000000000088C3                 db    0
.eh_frame:00000000000088C4                 db    0
.eh_frame:00000000000088C5                 db    0
.eh_frame:00000000000088C6                 db    0
.eh_frame:00000000000088C7                 db    0
.eh_frame:00000000000088C8                 db  10h
.eh_frame:00000000000088C9                 db    0
.eh_frame:00000000000088CA                 db    0
.eh_frame:00000000000088CB                 db    0
.eh_frame:00000000000088CC                 db  24h ; $
.eh_frame:00000000000088CD                 db  0Dh
.eh_frame:00000000000088CE                 db    0
.eh_frame:00000000000088CF                 db    0
.eh_frame:00000000000088D0                 db  80h
.eh_frame:00000000000088D1                 db 0DBh
.eh_frame:00000000000088D2                 db 0FFh
.eh_frame:00000000000088D3                 db 0FFh
.eh_frame:00000000000088D4                 db  0Eh
.eh_frame:00000000000088D5                 db    0
.eh_frame:00000000000088D6                 db    0
.eh_frame:00000000000088D7                 db    0
.eh_frame:00000000000088D8                 db    0
.eh_frame:00000000000088D9                 db    0
.eh_frame:00000000000088DA                 db    0
.eh_frame:00000000000088DB                 db    0
.eh_frame:00000000000088DC __FRAME_END__   db    0
.eh_frame:00000000000088DD                 db    0
.eh_frame:00000000000088DE                 db    0
.eh_frame:00000000000088DF                 db    0
.eh_frame:00000000000088DF _eh_frame       ends
.eh_frame:00000000000088DF
.init_array:0000000000208A50 ; ELF Initialization Function Table
.init_array:0000000000208A50 ; ===========================================================================
.init_array:0000000000208A50
.init_array:0000000000208A50 ; Segment type: Pure data
.init_array:0000000000208A50 ; Segment permissions: Read/Write
.init_array:0000000000208A50 _init_array     segment qword public 'DATA' use64
.init_array:0000000000208A50                 assume cs:_init_array
.init_array:0000000000208A50                 ;org 208A50h
.init_array:0000000000208A50 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000208A50                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000208A50                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000208A50 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000208A50
.fini_array:0000000000208A58 ; ELF Termination Function Table
.fini_array:0000000000208A58 ; ===========================================================================
.fini_array:0000000000208A58
.fini_array:0000000000208A58 ; Segment type: Pure data
.fini_array:0000000000208A58 ; Segment permissions: Read/Write
.fini_array:0000000000208A58 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000208A58                 assume cs:_fini_array
.fini_array:0000000000208A58                 ;org 208A58h
.fini_array:0000000000208A58 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000208A58                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000208A58 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000208A58
.data.rel.ro:0000000000208A60 ; ===========================================================================
.data.rel.ro:0000000000208A60
.data.rel.ro:0000000000208A60 ; Segment type: Pure data
.data.rel.ro:0000000000208A60 ; Segment permissions: Read/Write
.data.rel.ro:0000000000208A60 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000208A60                 assume cs:_data_rel_ro
.data.rel.ro:0000000000208A60                 ;org 208A60h
.data.rel.ro:0000000000208A60 ; struct option longopts
.data.rel.ro:0000000000208A60 longopts        dq offset aBytes        ; name
.data.rel.ro:0000000000208A60                                         ; DATA XREF: main+B↑o
.data.rel.ro:0000000000208A60                 dd 1                    ; has_arg ; "bytes"
.data.rel.ro:0000000000208A60                 db 4 dup(0)
.data.rel.ro:0000000000208A60                 dq 0                    ; flag
.data.rel.ro:0000000000208A60                 dd 62h                  ; val
.data.rel.ro:0000000000208A60                 db 4 dup(0)
.data.rel.ro:0000000000208A80                 dq offset aCharacters   ; "characters"
.data.rel.ro:0000000000208A88                 db    1
.data.rel.ro:0000000000208A89                 db    0
.data.rel.ro:0000000000208A8A                 db    0
.data.rel.ro:0000000000208A8B                 db    0
.data.rel.ro:0000000000208A8C                 db    0
.data.rel.ro:0000000000208A8D                 db    0
.data.rel.ro:0000000000208A8E                 db    0
.data.rel.ro:0000000000208A8F                 db    0
.data.rel.ro:0000000000208A90                 db    0
.data.rel.ro:0000000000208A91                 db    0
.data.rel.ro:0000000000208A92                 db    0
.data.rel.ro:0000000000208A93                 db    0
.data.rel.ro:0000000000208A94                 db    0
.data.rel.ro:0000000000208A95                 db    0
.data.rel.ro:0000000000208A96                 db    0
.data.rel.ro:0000000000208A97                 db    0
.data.rel.ro:0000000000208A98                 db  63h ; c
.data.rel.ro:0000000000208A99                 db    0
.data.rel.ro:0000000000208A9A                 db    0
.data.rel.ro:0000000000208A9B                 db    0
.data.rel.ro:0000000000208A9C                 db    0
.data.rel.ro:0000000000208A9D                 db    0
.data.rel.ro:0000000000208A9E                 db    0
.data.rel.ro:0000000000208A9F                 db    0
.data.rel.ro:0000000000208AA0                 dq offset aMissingListOfF+10h ; "fields"
.data.rel.ro:0000000000208AA8                 db    1
.data.rel.ro:0000000000208AA9                 db    0
.data.rel.ro:0000000000208AAA                 db    0
.data.rel.ro:0000000000208AAB                 db    0
.data.rel.ro:0000000000208AAC                 db    0
.data.rel.ro:0000000000208AAD                 db    0
.data.rel.ro:0000000000208AAE                 db    0
.data.rel.ro:0000000000208AAF                 db    0
.data.rel.ro:0000000000208AB0                 db    0
.data.rel.ro:0000000000208AB1                 db    0
.data.rel.ro:0000000000208AB2                 db    0
.data.rel.ro:0000000000208AB3                 db    0
.data.rel.ro:0000000000208AB4                 db    0
.data.rel.ro:0000000000208AB5                 db    0
.data.rel.ro:0000000000208AB6                 db    0
.data.rel.ro:0000000000208AB7                 db    0
.data.rel.ro:0000000000208AB8                 db  66h ; f
.data.rel.ro:0000000000208AB9                 db    0
.data.rel.ro:0000000000208ABA                 db    0
.data.rel.ro:0000000000208ABB                 db    0
.data.rel.ro:0000000000208ABC                 db    0
.data.rel.ro:0000000000208ABD                 db    0
.data.rel.ro:0000000000208ABE                 db    0
.data.rel.ro:0000000000208ABF                 db    0
.data.rel.ro:0000000000208AC0                 dq offset unk_65CB
.data.rel.ro:0000000000208AC8                 db    1
.data.rel.ro:0000000000208AC9                 db    0
.data.rel.ro:0000000000208ACA                 db    0
.data.rel.ro:0000000000208ACB                 db    0
.data.rel.ro:0000000000208ACC                 db    0
.data.rel.ro:0000000000208ACD                 db    0
.data.rel.ro:0000000000208ACE                 db    0
.data.rel.ro:0000000000208ACF                 db    0
.data.rel.ro:0000000000208AD0                 db    0
.data.rel.ro:0000000000208AD1                 db    0
.data.rel.ro:0000000000208AD2                 db    0
.data.rel.ro:0000000000208AD3                 db    0
.data.rel.ro:0000000000208AD4                 db    0
.data.rel.ro:0000000000208AD5                 db    0
.data.rel.ro:0000000000208AD6                 db    0
.data.rel.ro:0000000000208AD7                 db    0
.data.rel.ro:0000000000208AD8                 db  64h ; d
.data.rel.ro:0000000000208AD9                 db    0
.data.rel.ro:0000000000208ADA                 db    0
.data.rel.ro:0000000000208ADB                 db    0
.data.rel.ro:0000000000208ADC                 db    0
.data.rel.ro:0000000000208ADD                 db    0
.data.rel.ro:0000000000208ADE                 db    0
.data.rel.ro:0000000000208ADF                 db    0
.data.rel.ro:0000000000208AE0                 dq offset aOnlyDelimited ; "only-delimited"
.data.rel.ro:0000000000208AE8                 db    0
.data.rel.ro:0000000000208AE9                 db    0
.data.rel.ro:0000000000208AEA                 db    0
.data.rel.ro:0000000000208AEB                 db    0
.data.rel.ro:0000000000208AEC                 db    0
.data.rel.ro:0000000000208AED                 db    0
.data.rel.ro:0000000000208AEE                 db    0
.data.rel.ro:0000000000208AEF                 db    0
.data.rel.ro:0000000000208AF0                 db    0
.data.rel.ro:0000000000208AF1                 db    0
.data.rel.ro:0000000000208AF2                 db    0
.data.rel.ro:0000000000208AF3                 db    0
.data.rel.ro:0000000000208AF4                 db    0
.data.rel.ro:0000000000208AF5                 db    0
.data.rel.ro:0000000000208AF6                 db    0
.data.rel.ro:0000000000208AF7                 db    0
.data.rel.ro:0000000000208AF8                 db  73h ; s
.data.rel.ro:0000000000208AF9                 db    0
.data.rel.ro:0000000000208AFA                 db    0
.data.rel.ro:0000000000208AFB                 db    0
.data.rel.ro:0000000000208AFC                 db    0
.data.rel.ro:0000000000208AFD                 db    0
.data.rel.ro:0000000000208AFE                 db    0
.data.rel.ro:0000000000208AFF                 db    0
.data.rel.ro:0000000000208B00                 dq offset unk_65C4
.data.rel.ro:0000000000208B08                 db    1
.data.rel.ro:0000000000208B09                 db    0
.data.rel.ro:0000000000208B0A                 db    0
.data.rel.ro:0000000000208B0B                 db    0
.data.rel.ro:0000000000208B0C                 db    0
.data.rel.ro:0000000000208B0D                 db    0
.data.rel.ro:0000000000208B0E                 db    0
.data.rel.ro:0000000000208B0F                 db    0
.data.rel.ro:0000000000208B10                 db    0
.data.rel.ro:0000000000208B11                 db    0
.data.rel.ro:0000000000208B12                 db    0
.data.rel.ro:0000000000208B13                 db    0
.data.rel.ro:0000000000208B14                 db    0
.data.rel.ro:0000000000208B15                 db    0
.data.rel.ro:0000000000208B16                 db    0
.data.rel.ro:0000000000208B17                 db    0
.data.rel.ro:0000000000208B18                 db  80h
.data.rel.ro:0000000000208B19                 db    0
.data.rel.ro:0000000000208B1A                 db    0
.data.rel.ro:0000000000208B1B                 db    0
.data.rel.ro:0000000000208B1C                 db    0
.data.rel.ro:0000000000208B1D                 db    0
.data.rel.ro:0000000000208B1E                 db    0
.data.rel.ro:0000000000208B1F                 db    0
.data.rel.ro:0000000000208B20                 dq offset aComplement   ; "complement"
.data.rel.ro:0000000000208B28                 db    0
.data.rel.ro:0000000000208B29                 db    0
.data.rel.ro:0000000000208B2A                 db    0
.data.rel.ro:0000000000208B2B                 db    0
.data.rel.ro:0000000000208B2C                 db    0
.data.rel.ro:0000000000208B2D                 db    0
.data.rel.ro:0000000000208B2E                 db    0
.data.rel.ro:0000000000208B2F                 db    0
.data.rel.ro:0000000000208B30                 db    0
.data.rel.ro:0000000000208B31                 db    0
.data.rel.ro:0000000000208B32                 db    0
.data.rel.ro:0000000000208B33                 db    0
.data.rel.ro:0000000000208B34                 db    0
.data.rel.ro:0000000000208B35                 db    0
.data.rel.ro:0000000000208B36                 db    0
.data.rel.ro:0000000000208B37                 db    0
.data.rel.ro:0000000000208B38                 db  81h
.data.rel.ro:0000000000208B39                 db    0
.data.rel.ro:0000000000208B3A                 db    0
.data.rel.ro:0000000000208B3B                 db    0
.data.rel.ro:0000000000208B3C                 db    0
.data.rel.ro:0000000000208B3D                 db    0
.data.rel.ro:0000000000208B3E                 db    0
.data.rel.ro:0000000000208B3F                 db    0
.data.rel.ro:0000000000208B40                 dq offset aZeroTerminated ; "zero-terminated"
.data.rel.ro:0000000000208B48                 db    0
.data.rel.ro:0000000000208B49                 db    0
.data.rel.ro:0000000000208B4A                 db    0
.data.rel.ro:0000000000208B4B                 db    0
.data.rel.ro:0000000000208B4C                 db    0
.data.rel.ro:0000000000208B4D                 db    0
.data.rel.ro:0000000000208B4E                 db    0
.data.rel.ro:0000000000208B4F                 db    0
.data.rel.ro:0000000000208B50                 db    0
.data.rel.ro:0000000000208B51                 db    0
.data.rel.ro:0000000000208B52                 db    0
.data.rel.ro:0000000000208B53                 db    0
.data.rel.ro:0000000000208B54                 db    0
.data.rel.ro:0000000000208B55                 db    0
.data.rel.ro:0000000000208B56                 db    0
.data.rel.ro:0000000000208B57                 db    0
.data.rel.ro:0000000000208B58                 db  7Ah ; z
.data.rel.ro:0000000000208B59                 db    0
.data.rel.ro:0000000000208B5A                 db    0
.data.rel.ro:0000000000208B5B                 db    0
.data.rel.ro:0000000000208B5C                 db    0
.data.rel.ro:0000000000208B5D                 db    0
.data.rel.ro:0000000000208B5E                 db    0
.data.rel.ro:0000000000208B5F                 db    0
.data.rel.ro:0000000000208B60                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000208B68                 db    0
.data.rel.ro:0000000000208B69                 db    0
.data.rel.ro:0000000000208B6A                 db    0
.data.rel.ro:0000000000208B6B                 db    0
.data.rel.ro:0000000000208B6C                 db    0
.data.rel.ro:0000000000208B6D                 db    0
.data.rel.ro:0000000000208B6E                 db    0
.data.rel.ro:0000000000208B6F                 db    0
.data.rel.ro:0000000000208B70                 db    0
.data.rel.ro:0000000000208B71                 db    0
.data.rel.ro:0000000000208B72                 db    0
.data.rel.ro:0000000000208B73                 db    0
.data.rel.ro:0000000000208B74                 db    0
.data.rel.ro:0000000000208B75                 db    0
.data.rel.ro:0000000000208B76                 db    0
.data.rel.ro:0000000000208B77                 db    0
.data.rel.ro:0000000000208B78                 db  7Eh ; ~
.data.rel.ro:0000000000208B79                 db 0FFh
.data.rel.ro:0000000000208B7A                 db 0FFh
.data.rel.ro:0000000000208B7B                 db 0FFh
.data.rel.ro:0000000000208B7C                 db    0
.data.rel.ro:0000000000208B7D                 db    0
.data.rel.ro:0000000000208B7E                 db    0
.data.rel.ro:0000000000208B7F                 db    0
.data.rel.ro:0000000000208B80                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000208B88                 db    0
.data.rel.ro:0000000000208B89                 db    0
.data.rel.ro:0000000000208B8A                 db    0
.data.rel.ro:0000000000208B8B                 db    0
.data.rel.ro:0000000000208B8C                 db    0
.data.rel.ro:0000000000208B8D                 db    0
.data.rel.ro:0000000000208B8E                 db    0
.data.rel.ro:0000000000208B8F                 db    0
.data.rel.ro:0000000000208B90                 db    0
.data.rel.ro:0000000000208B91                 db    0
.data.rel.ro:0000000000208B92                 db    0
.data.rel.ro:0000000000208B93                 db    0
.data.rel.ro:0000000000208B94                 db    0
.data.rel.ro:0000000000208B95                 db    0
.data.rel.ro:0000000000208B96                 db    0
.data.rel.ro:0000000000208B97                 db    0
.data.rel.ro:0000000000208B98                 db  7Dh ; }
.data.rel.ro:0000000000208B99                 db 0FFh
.data.rel.ro:0000000000208B9A                 db 0FFh
.data.rel.ro:0000000000208B9B                 db 0FFh
.data.rel.ro:0000000000208B9C                 db    0
.data.rel.ro:0000000000208B9D                 db    0
.data.rel.ro:0000000000208B9E                 db    0
.data.rel.ro:0000000000208B9F                 db    0
.data.rel.ro:0000000000208BA0                 db    0
.data.rel.ro:0000000000208BA1                 db    0
.data.rel.ro:0000000000208BA2                 db    0
.data.rel.ro:0000000000208BA3                 db    0
.data.rel.ro:0000000000208BA4                 db    0
.data.rel.ro:0000000000208BA5                 db    0
.data.rel.ro:0000000000208BA6                 db    0
.data.rel.ro:0000000000208BA7                 db    0
.data.rel.ro:0000000000208BA8                 db    0
.data.rel.ro:0000000000208BA9                 db    0
.data.rel.ro:0000000000208BAA                 db    0
.data.rel.ro:0000000000208BAB                 db    0
.data.rel.ro:0000000000208BAC                 db    0
.data.rel.ro:0000000000208BAD                 db    0
.data.rel.ro:0000000000208BAE                 db    0
.data.rel.ro:0000000000208BAF                 db    0
.data.rel.ro:0000000000208BB0                 db    0
.data.rel.ro:0000000000208BB1                 db    0
.data.rel.ro:0000000000208BB2                 db    0
.data.rel.ro:0000000000208BB3                 db    0
.data.rel.ro:0000000000208BB4                 db    0
.data.rel.ro:0000000000208BB5                 db    0
.data.rel.ro:0000000000208BB6                 db    0
.data.rel.ro:0000000000208BB7                 db    0
.data.rel.ro:0000000000208BB8                 db    0
.data.rel.ro:0000000000208BB9                 db    0
.data.rel.ro:0000000000208BBA                 db    0
.data.rel.ro:0000000000208BBB                 db    0
.data.rel.ro:0000000000208BBC                 db    0
.data.rel.ro:0000000000208BBD                 db    0
.data.rel.ro:0000000000208BBE                 db    0
.data.rel.ro:0000000000208BBF                 db    0
.data.rel.ro:0000000000208BC0                 public quoting_style_args
.data.rel.ro:0000000000208BC0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000208BC8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000208BD0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000208BD8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000208BE0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000208BE8                 dq offset file+1Ah      ; "c"
.data.rel.ro:0000000000208BF0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000208BF8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000208C00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000208C08                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000208C10                 db    0
.data.rel.ro:0000000000208C11                 db    0
.data.rel.ro:0000000000208C12                 db    0
.data.rel.ro:0000000000208C13                 db    0
.data.rel.ro:0000000000208C14                 db    0
.data.rel.ro:0000000000208C15                 db    0
.data.rel.ro:0000000000208C16                 db    0
.data.rel.ro:0000000000208C17                 db    0
.data.rel.ro:0000000000208C17 _data_rel_ro    ends
.data.rel.ro:0000000000208C17
LOAD:0000000000208C18 ; ELF Dynamic Information
LOAD:0000000000208C18 ; ===========================================================================
LOAD:0000000000208C18
LOAD:0000000000208C18 ; Segment type: Pure data
LOAD:0000000000208C18 ; Segment permissions: Read/Write
LOAD:0000000000208C18 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208C18                 assume cs:LOAD
LOAD:0000000000208C18                 ;org 208C18h
LOAD:0000000000208C18 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000208C18                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000208C18                                         ; DT_NEEDED libc.so.6
LOAD:0000000000208C28                 Elf64_Dyn <0Ch, 1648h>  ; DT_INIT
LOAD:0000000000208C38                 Elf64_Dyn <0Dh, 6460h>  ; DT_FINI
LOAD:0000000000208C48                 Elf64_Dyn <19h, 208A50h> ; DT_INIT_ARRAY
LOAD:0000000000208C58                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000208C68                 Elf64_Dyn <1Ah, 208A58h> ; DT_FINI_ARRAY
LOAD:0000000000208C78                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000208C88                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000208C98                 Elf64_Dyn <5, 970h>     ; DT_STRTAB
LOAD:0000000000208CA8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000208CB8                 Elf64_Dyn <0Ah, 324h>   ; DT_STRSZ
LOAD:0000000000208CC8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000208CD8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000208CE8                 Elf64_Dyn <3, 208E08h>  ; DT_PLTGOT
LOAD:0000000000208CF8                 Elf64_Dyn <2, 528h>     ; DT_PLTRELSZ
LOAD:0000000000208D08                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000208D18                 Elf64_Dyn <17h, 1120h>  ; DT_JMPREL
LOAD:0000000000208D28                 Elf64_Dyn <7, 0D90h>    ; DT_RELA
LOAD:0000000000208D38                 Elf64_Dyn <8, 390h>     ; DT_RELASZ
LOAD:0000000000208D48                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000208D58                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000208D68                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000208D78                 Elf64_Dyn <6FFFFFFEh, 0D20h> ; DT_VERNEED
LOAD:0000000000208D88                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000208D98                 Elf64_Dyn <6FFFFFF0h, 0C94h> ; DT_VERSYM
LOAD:0000000000208DA8                 Elf64_Dyn <6FFFFFF9h, 1Ah> ; DT_RELACOUNT
LOAD:0000000000208DB8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000208DC8                 db    0
LOAD:0000000000208DC9                 db    0
LOAD:0000000000208DCA                 db    0
LOAD:0000000000208DCB                 db    0
LOAD:0000000000208DCC                 db    0
LOAD:0000000000208DCD                 db    0
LOAD:0000000000208DCE                 db    0
LOAD:0000000000208DCF                 db    0
LOAD:0000000000208DD0                 db    0
LOAD:0000000000208DD1                 db    0
LOAD:0000000000208DD2                 db    0
LOAD:0000000000208DD3                 db    0
LOAD:0000000000208DD4                 db    0
LOAD:0000000000208DD5                 db    0
LOAD:0000000000208DD6                 db    0
LOAD:0000000000208DD7                 db    0
LOAD:0000000000208DD8                 db    0
LOAD:0000000000208DD9                 db    0
LOAD:0000000000208DDA                 db    0
LOAD:0000000000208DDB                 db    0
LOAD:0000000000208DDC                 db    0
LOAD:0000000000208DDD                 db    0
LOAD:0000000000208DDE                 db    0
LOAD:0000000000208DDF                 db    0
LOAD:0000000000208DE0                 db    0
LOAD:0000000000208DE1                 db    0
LOAD:0000000000208DE2                 db    0
LOAD:0000000000208DE3                 db    0
LOAD:0000000000208DE4                 db    0
LOAD:0000000000208DE5                 db    0
LOAD:0000000000208DE6                 db    0
LOAD:0000000000208DE7                 db    0
LOAD:0000000000208DE8                 db    0
LOAD:0000000000208DE9                 db    0
LOAD:0000000000208DEA                 db    0
LOAD:0000000000208DEB                 db    0
LOAD:0000000000208DEC                 db    0
LOAD:0000000000208DED                 db    0
LOAD:0000000000208DEE                 db    0
LOAD:0000000000208DEF                 db    0
LOAD:0000000000208DF0                 db    0
LOAD:0000000000208DF1                 db    0
LOAD:0000000000208DF2                 db    0
LOAD:0000000000208DF3                 db    0
LOAD:0000000000208DF4                 db    0
LOAD:0000000000208DF5                 db    0
LOAD:0000000000208DF6                 db    0
LOAD:0000000000208DF7                 db    0
LOAD:0000000000208DF8                 db    0
LOAD:0000000000208DF9                 db    0
LOAD:0000000000208DFA                 db    0
LOAD:0000000000208DFB                 db    0
LOAD:0000000000208DFC                 db    0
LOAD:0000000000208DFD                 db    0
LOAD:0000000000208DFE                 db    0
LOAD:0000000000208DFF                 db    0
LOAD:0000000000208E00                 db    0
LOAD:0000000000208E01                 db    0
LOAD:0000000000208E02                 db    0
LOAD:0000000000208E03                 db    0
LOAD:0000000000208E04                 db    0
LOAD:0000000000208E05                 db    0
LOAD:0000000000208E06                 db    0
LOAD:0000000000208E07                 db    0
LOAD:0000000000208E07 LOAD            ends
LOAD:0000000000208E07
.got:0000000000208E08 ; ===========================================================================
.got:0000000000208E08
.got:0000000000208E08 ; Segment type: Pure data
.got:0000000000208E08 ; Segment permissions: Read/Write
.got:0000000000208E08 _got            segment qword public 'DATA' use64
.got:0000000000208E08                 assume cs:_got
.got:0000000000208E08                 ;org 208E08h
.got:0000000000208E08 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000208E10 qword_208E10    dq 0                    ; DATA XREF: sub_1660↑r
.got:0000000000208E18 qword_208E18    dq 0                    ; DATA XREF: sub_1660+6↑r
.got:0000000000208E20 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000208E28 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000208E30 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000208E38 __errno_location_ptr dq offset __errno_location
.got:0000000000208E38                                         ; DATA XREF: ___errno_location↑r
.got:0000000000208E40 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000208E48 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000208E50 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000208E58 ferror_ptr      dq offset ferror        ; DATA XREF: _ferror↑r
.got:0000000000208E60 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:0000000000208E68 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:0000000000208E68                                         ; DATA XREF: _clearerr_unlocked↑r
.got:0000000000208E70 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000208E78 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000208E80 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000208E80                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000208E88 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000208E90 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000208E90                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000208E98 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000208EA0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000208EA0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000208EA8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000208EB0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000208EB8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000208EC0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000208EC8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000208ED0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000208ED0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000208ED8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000208EE0 fgetc_ptr       dq offset fgetc         ; DATA XREF: _fgetc↑r
.got:0000000000208EE8 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:0000000000208EF0 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000208EF0                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000208EF8 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:0000000000208F00 strndup_ptr     dq offset strndup       ; DATA XREF: _strndup↑r
.got:0000000000208F08 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000208F10 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000208F10                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000208F18 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000208F20 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000208F28 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000208F30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000208F38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000208F40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000208F48 ungetc_ptr      dq offset ungetc        ; DATA XREF: _ungetc↑r
.got:0000000000208F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000208F58 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000208F58                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000208F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000208F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000208F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000208F78 __fread_chk_ptr dq offset __fread_chk   ; DATA XREF: ___fread_chk↑r
.got:0000000000208F80 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000208F88 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000208F90 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000208F98 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000208FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000208FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000208FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000208FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000208FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000208FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000208FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000208FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000208FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000208FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000208FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000208FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000208FE0                                         ; DATA XREF: start+24↑r
.got:0000000000208FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000208FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000208FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000208FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000208FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000208FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000208FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000208FF8 _got            ends
.got:0000000000208FF8
.data:0000000000209000 ; ===========================================================================
.data:0000000000209000
.data:0000000000209000 ; Segment type: Pure data
.data:0000000000209000 ; Segment permissions: Read/Write
.data:0000000000209000 _data           segment align_32 public 'DATA' use64
.data:0000000000209000                 assume cs:_data
.data:0000000000209000                 ;org 209000h
.data:0000000000209000                 public __data_start ; weak
.data:0000000000209000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000209000                                         ; data_start
.data:0000000000209001                 db    0
.data:0000000000209002                 db    0
.data:0000000000209003                 db    0
.data:0000000000209004                 db    0
.data:0000000000209005                 db    0
.data:0000000000209006                 db    0
.data:0000000000209007                 db    0
.data:0000000000209008                 public __dso_handle
.data:0000000000209008 ; void *_dso_handle
.data:0000000000209008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000209008                                         ; atexit↑r ...
.data:0000000000209010 line_delim      db 0Ah                  ; DATA XREF: main:loc_1BE0↑w
.data:0000000000209010                                         ; cut_file+112↑r ...
.data:0000000000209011                 align 8
.data:0000000000209018                 public Version
.data:0000000000209018 Version         dq offset a831          ; DATA XREF: main+10B↑r
.data:0000000000209018                                         ; "8.31"
.data:0000000000209020                 public exit_failure
.data:0000000000209020 ; int exit_failure
.data:0000000000209020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3382↑r
.data:0000000000209020                                         ; xalloc_die+17↑r
.data:0000000000209024                 align 20h
.data:0000000000209040                 public quote_quoting_options
.data:0000000000209040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000209040                                         ; quote_mem↑o ...
.data:0000000000209041                 db    0
.data:0000000000209042                 db    0
.data:0000000000209043                 db    0
.data:0000000000209044                 db    0
.data:0000000000209045                 db    0
.data:0000000000209046                 db    0
.data:0000000000209047                 db    0
.data:0000000000209048                 db    0
.data:0000000000209049                 db    0
.data:000000000020904A                 db    0
.data:000000000020904B                 db    0
.data:000000000020904C                 db    0
.data:000000000020904D                 db    0
.data:000000000020904E                 db    0
.data:000000000020904F                 db    0
.data:0000000000209050                 db    0
.data:0000000000209051                 db    0
.data:0000000000209052                 db    0
.data:0000000000209053                 db    0
.data:0000000000209054                 db    0
.data:0000000000209055                 db    0
.data:0000000000209056                 db    0
.data:0000000000209057                 db    0
.data:0000000000209058                 db    0
.data:0000000000209059                 db    0
.data:000000000020905A                 db    0
.data:000000000020905B                 db    0
.data:000000000020905C                 db    0
.data:000000000020905D                 db    0
.data:000000000020905E                 db    0
.data:000000000020905F                 db    0
.data:0000000000209060                 db    0
.data:0000000000209061                 db    0
.data:0000000000209062                 db    0
.data:0000000000209063                 db    0
.data:0000000000209064                 db    0
.data:0000000000209065                 db    0
.data:0000000000209066                 db    0
.data:0000000000209067                 db    0
.data:0000000000209068                 db    0
.data:0000000000209069                 db    0
.data:000000000020906A                 db    0
.data:000000000020906B                 db    0
.data:000000000020906C                 db    0
.data:000000000020906D                 db    0
.data:000000000020906E                 db    0
.data:000000000020906F                 db    0
.data:0000000000209070                 db    0
.data:0000000000209071                 db    0
.data:0000000000209072                 db    0
.data:0000000000209073                 db    0
.data:0000000000209074                 db    0
.data:0000000000209075                 db    0
.data:0000000000209076                 db    0
.data:0000000000209077                 db    0
.data:0000000000209078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000209078                                         ; quotearg_n_options:loc_4D7D↑r ...
.data:000000000020907C                 align 20h
.data:0000000000209080 ; void *slotvec
.data:0000000000209080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000209080                                         ; quotearg_n_options+76↑w ...
.data:0000000000209088                 align 10h
.data:0000000000209090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000209090                                         ; quotearg_n_options+187↑r ...
.data:0000000000209098 off_209098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000209098 _data           ends
.data:0000000000209098
.bss:00000000002090A0 ; ===========================================================================
.bss:00000000002090A0
.bss:00000000002090A0 ; Segment type: Uninitialized
.bss:00000000002090A0 ; Segment permissions: Read/Write
.bss:00000000002090A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002090A0                 assume cs:_bss
.bss:00000000002090A0                 ;org 2090A0h
.bss:00000000002090A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002090A0                 public __bss_start ; weak
.bss:00000000002090A0 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000008B0↑o
.bss:00000000002090A0                                         ; LOAD:0000000000000910↑o ...
.bss:00000000002090A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002090A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002090A0                                         ; _edata
.bss:00000000002090A0                                         ; Copy of shared data
.bss:00000000002090A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002090A8 ; FILE *stdout
.bss:00000000002090A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:00000000002090A8                                         ; main+104↑r ...
.bss:00000000002090A8                                         ; Alternative name is 'stdout'
.bss:00000000002090A8                                         ; Copy of shared data
.bss:00000000002090B0                 public stdin@@GLIBC_2_2_5
.bss:00000000002090B0 ; FILE *stdin
.bss:00000000002090B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:00000000000008C8↑o
.bss:00000000002090B0                                         ; main:loc_1D83↑r ...
.bss:00000000002090B0                                         ; Alternative name is 'stdin'
.bss:00000000002090B0                                         ; Copy of shared data
.bss:00000000002090B8                 public optind@@GLIBC_2_2_5
.bss:00000000002090B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000940↑o
.bss:00000000002090B8                                         ; main:loc_1CDA↑r ...
.bss:00000000002090B8                                         ; Alternative name is 'optind'
.bss:00000000002090B8                                         ; Copy of shared data
.bss:00000000002090BC                 align 20h
.bss:00000000002090C0                 public optarg@@GLIBC_2_2_5
.bss:00000000002090C0 ; void *optarg
.bss:00000000002090C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000958↑o
.bss:00000000002090C0                                         ; main+180↑r ...
.bss:00000000002090C0                                         ; Alternative name is 'optarg'
.bss:00000000002090C0                                         ; Copy of shared data
.bss:00000000002090C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002090C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002090C8                                         ; DATA XREF: LOAD:00000000000008E0↑o
.bss:00000000002090C8                                         ; LOAD:00000000000008F8↑o ...
.bss:00000000002090C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002090C8                                         ; Copy of shared data
.bss:00000000002090D0                 align 20h
.bss:00000000002090E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002090E0 ; FILE *stderr
.bss:00000000002090E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000928↑o
.bss:00000000002090E0                                         ; usage+3D↑r ...
.bss:00000000002090E0                                         ; Alternative name is 'stderr'
.bss:00000000002090E0                                         ; Copy of shared data
.bss:00000000002090E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002090E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002090E9                 align 10h
.bss:00000000002090F0 dummy_7081      db ?                    ; DATA XREF: main+3DC↑w
.bss:00000000002090F0                                         ; main+3E2↑o
.bss:00000000002090F1 byte_2090F1     db ?                    ; DATA XREF: main+3CA↑w
.bss:00000000002090F2 have_read_stdin db ?                    ; DATA XREF: main+80↑w
.bss:00000000002090F2                                         ; main:loc_1D11↑r ...
.bss:00000000002090F3                 align 8
.bss:00000000002090F8 ; void *output_delimiter_string
.bss:00000000002090F8 output_delimiter_string dq ?            ; DATA XREF: main+23C↑w
.bss:00000000002090F8                                         ; main:loc_1CCC↑r ...
.bss:0000000000209100 ; size_t output_delimiter_length
.bss:0000000000209100 output_delimiter_length dq ?            ; DATA XREF: main+230↑w
.bss:0000000000209100                                         ; main+3D1↑w ...
.bss:0000000000209108 output_delimiter_specified db ?         ; DATA XREF: main+207↑w
.bss:0000000000209108                                         ; cut_file+5FC↑r
.bss:0000000000209109 delim           db ?                    ; DATA XREF: main+79↑w
.bss:0000000000209109                                         ; main:loc_1BC9↑w ...
.bss:000000000020910A complement      db ?                    ; DATA XREF: main+156↑w
.bss:000000000020910A                                         ; main+289↑r ...
.bss:000000000020910B suppress_non_delimited db ?             ; DATA XREF: main+72↑w
.bss:000000000020910B                                         ; main+D0↑w ...
.bss:000000000020910C operating_mode  dd ?                    ; DATA XREF: main+68↑w
.bss:000000000020910C                                         ; main:loc_1B58↑r ...
.bss:0000000000209110 field_1_bufsize db    ? ;               ; DATA XREF: cut_file+1D6↑o
.bss:0000000000209111                 db    ? ;
.bss:0000000000209112                 db    ? ;
.bss:0000000000209113                 db    ? ;
.bss:0000000000209114                 db    ? ;
.bss:0000000000209115                 db    ? ;
.bss:0000000000209116                 db    ? ;
.bss:0000000000209117                 db    ? ;
.bss:0000000000209118 ; void *field_1_buffer
.bss:0000000000209118 field_1_buffer  dq ?                    ; DATA XREF: cut_file+1DD↑o
.bss:0000000000209118                                         ; cut_file+206↑r ...
.bss:0000000000209120 current_rp      dq ?                    ; DATA XREF: cut_file+59↑w
.bss:0000000000209120                                         ; cut_file+8D↑r ...
.bss:0000000000209128 ; char *num_start_6877
.bss:0000000000209128 num_start_6877  dq ?                    ; DATA XREF: set_fields+2D4↑r
.bss:0000000000209128                                         ; set_fields:loc_3010↑w ...
.bss:0000000000209130 n_frp_allocated dq ?                    ; DATA XREF: add_range_pair+13↑r
.bss:0000000000209130                                         ; add_range_pair:loc_2C7F↑w ...
.bss:0000000000209138 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000209138                                         ; close_stdout+1B↑r
.bss:0000000000209139                 align 20h
.bss:0000000000209140 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000209140                                         ; close_stdout+56↑r
.bss:0000000000209148                 public program_name
.bss:0000000000209148 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000209148                                         ; set_program_name:loc_399D↑w
.bss:0000000000209150                 align 20h
.bss:0000000000209160 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000209160                                         ; quotearg_free+46↑o ...
.bss:0000000000209161                 db    ? ;
.bss:0000000000209162                 db    ? ;
.bss:0000000000209163                 db    ? ;
.bss:0000000000209164                 db    ? ;
.bss:0000000000209165                 db    ? ;
.bss:0000000000209166                 db    ? ;
.bss:0000000000209167                 db    ? ;
.bss:0000000000209168                 db    ? ;
.bss:0000000000209169                 db    ? ;
.bss:000000000020916A                 db    ? ;
.bss:000000000020916B                 db    ? ;
.bss:000000000020916C                 db    ? ;
.bss:000000000020916D                 db    ? ;
.bss:000000000020916E                 db    ? ;
.bss:000000000020916F                 db    ? ;
.bss:0000000000209170                 db    ? ;
.bss:0000000000209171                 db    ? ;
.bss:0000000000209172                 db    ? ;
.bss:0000000000209173                 db    ? ;
.bss:0000000000209174                 db    ? ;
.bss:0000000000209175                 db    ? ;
.bss:0000000000209176                 db    ? ;
.bss:0000000000209177                 db    ? ;
.bss:0000000000209178                 db    ? ;
.bss:0000000000209179                 db    ? ;
.bss:000000000020917A                 db    ? ;
.bss:000000000020917B                 db    ? ;
.bss:000000000020917C                 db    ? ;
.bss:000000000020917D                 db    ? ;
.bss:000000000020917E                 db    ? ;
.bss:000000000020917F                 db    ? ;
.bss:0000000000209180                 db    ? ;
.bss:0000000000209181                 db    ? ;
.bss:0000000000209182                 db    ? ;
.bss:0000000000209183                 db    ? ;
.bss:0000000000209184                 db    ? ;
.bss:0000000000209185                 db    ? ;
.bss:0000000000209186                 db    ? ;
.bss:0000000000209187                 db    ? ;
.bss:0000000000209188                 db    ? ;
.bss:0000000000209189                 db    ? ;
.bss:000000000020918A                 db    ? ;
.bss:000000000020918B                 db    ? ;
.bss:000000000020918C                 db    ? ;
.bss:000000000020918D                 db    ? ;
.bss:000000000020918E                 db    ? ;
.bss:000000000020918F                 db    ? ;
.bss:0000000000209190                 db    ? ;
.bss:0000000000209191                 db    ? ;
.bss:0000000000209192                 db    ? ;
.bss:0000000000209193                 db    ? ;
.bss:0000000000209194                 db    ? ;
.bss:0000000000209195                 db    ? ;
.bss:0000000000209196                 db    ? ;
.bss:0000000000209197                 db    ? ;
.bss:0000000000209198                 db    ? ;
.bss:0000000000209199                 db    ? ;
.bss:000000000020919A                 db    ? ;
.bss:000000000020919B                 db    ? ;
.bss:000000000020919C                 db    ? ;
.bss:000000000020919D                 db    ? ;
.bss:000000000020919E                 db    ? ;
.bss:000000000020919F                 db    ? ;
.bss:00000000002091A0                 db    ? ;
.bss:00000000002091A1                 db    ? ;
.bss:00000000002091A2                 db    ? ;
.bss:00000000002091A3                 db    ? ;
.bss:00000000002091A4                 db    ? ;
.bss:00000000002091A5                 db    ? ;
.bss:00000000002091A6                 db    ? ;
.bss:00000000002091A7                 db    ? ;
.bss:00000000002091A8                 db    ? ;
.bss:00000000002091A9                 db    ? ;
.bss:00000000002091AA                 db    ? ;
.bss:00000000002091AB                 db    ? ;
.bss:00000000002091AC                 db    ? ;
.bss:00000000002091AD                 db    ? ;
.bss:00000000002091AE                 db    ? ;
.bss:00000000002091AF                 db    ? ;
.bss:00000000002091B0                 db    ? ;
.bss:00000000002091B1                 db    ? ;
.bss:00000000002091B2                 db    ? ;
.bss:00000000002091B3                 db    ? ;
.bss:00000000002091B4                 db    ? ;
.bss:00000000002091B5                 db    ? ;
.bss:00000000002091B6                 db    ? ;
.bss:00000000002091B7                 db    ? ;
.bss:00000000002091B8                 db    ? ;
.bss:00000000002091B9                 db    ? ;
.bss:00000000002091BA                 db    ? ;
.bss:00000000002091BB                 db    ? ;
.bss:00000000002091BC                 db    ? ;
.bss:00000000002091BD                 db    ? ;
.bss:00000000002091BE                 db    ? ;
.bss:00000000002091BF                 db    ? ;
.bss:00000000002091C0                 db    ? ;
.bss:00000000002091C1                 db    ? ;
.bss:00000000002091C2                 db    ? ;
.bss:00000000002091C3                 db    ? ;
.bss:00000000002091C4                 db    ? ;
.bss:00000000002091C5                 db    ? ;
.bss:00000000002091C6                 db    ? ;
.bss:00000000002091C7                 db    ? ;
.bss:00000000002091C8                 db    ? ;
.bss:00000000002091C9                 db    ? ;
.bss:00000000002091CA                 db    ? ;
.bss:00000000002091CB                 db    ? ;
.bss:00000000002091CC                 db    ? ;
.bss:00000000002091CD                 db    ? ;
.bss:00000000002091CE                 db    ? ;
.bss:00000000002091CF                 db    ? ;
.bss:00000000002091D0                 db    ? ;
.bss:00000000002091D1                 db    ? ;
.bss:00000000002091D2                 db    ? ;
.bss:00000000002091D3                 db    ? ;
.bss:00000000002091D4                 db    ? ;
.bss:00000000002091D5                 db    ? ;
.bss:00000000002091D6                 db    ? ;
.bss:00000000002091D7                 db    ? ;
.bss:00000000002091D8                 db    ? ;
.bss:00000000002091D9                 db    ? ;
.bss:00000000002091DA                 db    ? ;
.bss:00000000002091DB                 db    ? ;
.bss:00000000002091DC                 db    ? ;
.bss:00000000002091DD                 db    ? ;
.bss:00000000002091DE                 db    ? ;
.bss:00000000002091DF                 db    ? ;
.bss:00000000002091E0                 db    ? ;
.bss:00000000002091E1                 db    ? ;
.bss:00000000002091E2                 db    ? ;
.bss:00000000002091E3                 db    ? ;
.bss:00000000002091E4                 db    ? ;
.bss:00000000002091E5                 db    ? ;
.bss:00000000002091E6                 db    ? ;
.bss:00000000002091E7                 db    ? ;
.bss:00000000002091E8                 db    ? ;
.bss:00000000002091E9                 db    ? ;
.bss:00000000002091EA                 db    ? ;
.bss:00000000002091EB                 db    ? ;
.bss:00000000002091EC                 db    ? ;
.bss:00000000002091ED                 db    ? ;
.bss:00000000002091EE                 db    ? ;
.bss:00000000002091EF                 db    ? ;
.bss:00000000002091F0                 db    ? ;
.bss:00000000002091F1                 db    ? ;
.bss:00000000002091F2                 db    ? ;
.bss:00000000002091F3                 db    ? ;
.bss:00000000002091F4                 db    ? ;
.bss:00000000002091F5                 db    ? ;
.bss:00000000002091F6                 db    ? ;
.bss:00000000002091F7                 db    ? ;
.bss:00000000002091F8                 db    ? ;
.bss:00000000002091F9                 db    ? ;
.bss:00000000002091FA                 db    ? ;
.bss:00000000002091FB                 db    ? ;
.bss:00000000002091FC                 db    ? ;
.bss:00000000002091FD                 db    ? ;
.bss:00000000002091FE                 db    ? ;
.bss:00000000002091FF                 db    ? ;
.bss:0000000000209200                 db    ? ;
.bss:0000000000209201                 db    ? ;
.bss:0000000000209202                 db    ? ;
.bss:0000000000209203                 db    ? ;
.bss:0000000000209204                 db    ? ;
.bss:0000000000209205                 db    ? ;
.bss:0000000000209206                 db    ? ;
.bss:0000000000209207                 db    ? ;
.bss:0000000000209208                 db    ? ;
.bss:0000000000209209                 db    ? ;
.bss:000000000020920A                 db    ? ;
.bss:000000000020920B                 db    ? ;
.bss:000000000020920C                 db    ? ;
.bss:000000000020920D                 db    ? ;
.bss:000000000020920E                 db    ? ;
.bss:000000000020920F                 db    ? ;
.bss:0000000000209210                 db    ? ;
.bss:0000000000209211                 db    ? ;
.bss:0000000000209212                 db    ? ;
.bss:0000000000209213                 db    ? ;
.bss:0000000000209214                 db    ? ;
.bss:0000000000209215                 db    ? ;
.bss:0000000000209216                 db    ? ;
.bss:0000000000209217                 db    ? ;
.bss:0000000000209218                 db    ? ;
.bss:0000000000209219                 db    ? ;
.bss:000000000020921A                 db    ? ;
.bss:000000000020921B                 db    ? ;
.bss:000000000020921C                 db    ? ;
.bss:000000000020921D                 db    ? ;
.bss:000000000020921E                 db    ? ;
.bss:000000000020921F                 db    ? ;
.bss:0000000000209220                 db    ? ;
.bss:0000000000209221                 db    ? ;
.bss:0000000000209222                 db    ? ;
.bss:0000000000209223                 db    ? ;
.bss:0000000000209224                 db    ? ;
.bss:0000000000209225                 db    ? ;
.bss:0000000000209226                 db    ? ;
.bss:0000000000209227                 db    ? ;
.bss:0000000000209228                 db    ? ;
.bss:0000000000209229                 db    ? ;
.bss:000000000020922A                 db    ? ;
.bss:000000000020922B                 db    ? ;
.bss:000000000020922C                 db    ? ;
.bss:000000000020922D                 db    ? ;
.bss:000000000020922E                 db    ? ;
.bss:000000000020922F                 db    ? ;
.bss:0000000000209230                 db    ? ;
.bss:0000000000209231                 db    ? ;
.bss:0000000000209232                 db    ? ;
.bss:0000000000209233                 db    ? ;
.bss:0000000000209234                 db    ? ;
.bss:0000000000209235                 db    ? ;
.bss:0000000000209236                 db    ? ;
.bss:0000000000209237                 db    ? ;
.bss:0000000000209238                 db    ? ;
.bss:0000000000209239                 db    ? ;
.bss:000000000020923A                 db    ? ;
.bss:000000000020923B                 db    ? ;
.bss:000000000020923C                 db    ? ;
.bss:000000000020923D                 db    ? ;
.bss:000000000020923E                 db    ? ;
.bss:000000000020923F                 db    ? ;
.bss:0000000000209240                 db    ? ;
.bss:0000000000209241                 db    ? ;
.bss:0000000000209242                 db    ? ;
.bss:0000000000209243                 db    ? ;
.bss:0000000000209244                 db    ? ;
.bss:0000000000209245                 db    ? ;
.bss:0000000000209246                 db    ? ;
.bss:0000000000209247                 db    ? ;
.bss:0000000000209248                 db    ? ;
.bss:0000000000209249                 db    ? ;
.bss:000000000020924A                 db    ? ;
.bss:000000000020924B                 db    ? ;
.bss:000000000020924C                 db    ? ;
.bss:000000000020924D                 db    ? ;
.bss:000000000020924E                 db    ? ;
.bss:000000000020924F                 db    ? ;
.bss:0000000000209250                 db    ? ;
.bss:0000000000209251                 db    ? ;
.bss:0000000000209252                 db    ? ;
.bss:0000000000209253                 db    ? ;
.bss:0000000000209254                 db    ? ;
.bss:0000000000209255                 db    ? ;
.bss:0000000000209256                 db    ? ;
.bss:0000000000209257                 db    ? ;
.bss:0000000000209258                 db    ? ;
.bss:0000000000209259                 db    ? ;
.bss:000000000020925A                 db    ? ;
.bss:000000000020925B                 db    ? ;
.bss:000000000020925C                 db    ? ;
.bss:000000000020925D                 db    ? ;
.bss:000000000020925E                 db    ? ;
.bss:000000000020925F                 db    ? ;
.bss:0000000000209260 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000209260                                         ; get_quoting_style↑o ...
.bss:0000000000209270 xmmword_209270  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000209270                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000209280 xmmword_209280  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000209280                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000209290 qword_209290    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000209290                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000209298                 public frp
.bss:0000000000209298 ; void *frp
.bss:0000000000209298 frp             dq ?                    ; DATA XREF: cut_file+52↑r
.bss:0000000000209298                                         ; cut_file+3DA↑r ...
.bss:00000000002092A0                 public n_frp
.bss:00000000002092A0 ; size_t n_frp
.bss:00000000002092A0 n_frp           dq ?                    ; DATA XREF: add_range_pair+C↑r
.bss:00000000002092A0                                         ; add_range_pair+38↑w ...
.bss:00000000002092A0 _bss            ends
.bss:00000000002092A0
.prgend:00000000002092A8 ; ===========================================================================
.prgend:00000000002092A8
.prgend:00000000002092A8 ; Segment type: Zero-length
.prgend:00000000002092A8 _prgend         segment byte public '' use64
.prgend:00000000002092A8 _end            label byte
.prgend:00000000002092A8 _prgend         ends
.prgend:00000000002092A8
extern:00000000002092B0 ; ===========================================================================
extern:00000000002092B0
extern:00000000002092B0 ; Segment type: Externs
extern:00000000002092B0 ; extern
extern:00000000002092B0 ; int _uflow(_IO_FILE *)
extern:00000000002092B0                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:00000000002092B0                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:00000000002092B8 ; void free(void *ptr)
extern:00000000002092B8                 extrn free:near         ; CODE XREF: _free↑j
extern:00000000002092B8                                         ; DATA XREF: .got:free_ptr↑o
extern:00000000002092C0 ; void __noreturn abort(void)
extern:00000000002092C0                 extrn abort:near        ; CODE XREF: _abort↑j
extern:00000000002092C0                                         ; DATA XREF: .got:abort_ptr↑o
extern:00000000002092C8 ; int *_errno_location(void)
extern:00000000002092C8                 extrn __errno_location:near
extern:00000000002092C8                                         ; CODE XREF: ___errno_location↑j
extern:00000000002092C8                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002092D0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002092D0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002092D0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002092D8 ; void __noreturn exit(int status)
extern:00000000002092D8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002092D8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002092E0 ; size_t _fpending(FILE *fp)
extern:00000000002092E0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002092E0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002092E8 ; int ferror(FILE *stream)
extern:00000000002092E8                 extrn ferror:near       ; CODE XREF: _ferror↑j
extern:00000000002092E8                                         ; DATA XREF: .got:ferror_ptr↑o
extern:00000000002092F0 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:00000000002092F0                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:00000000002092F0                                         ; DATA XREF: .got:qsort_ptr↑o
extern:00000000002092F8 ; void clearerr_unlocked(FILE *stream)
extern:00000000002092F8                 extrn clearerr_unlocked:near
extern:00000000002092F8                                         ; CODE XREF: _clearerr_unlocked↑j
extern:00000000002092F8                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:0000000000209300 ; char *textdomain(const char *domainname)
extern:0000000000209300                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000209300                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000209308 ; int fclose(FILE *stream)
extern:0000000000209308                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000209308                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000209310 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000209310                 extrn bindtextdomain:near
extern:0000000000209310                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000209310                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000209318 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000209318                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000209318                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000209320 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000209320                 extrn __ctype_get_mb_cur_max:near
extern:0000000000209320                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000209320                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000209328 ; size_t strlen(const char *s)
extern:0000000000209328                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000209328                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000209330                 extrn __stack_chk_fail:near
extern:0000000000209330                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000209330                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000209338 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000209338                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000209338                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000209340 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000209340                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000209340                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000209348 ; int _overflow(_IO_FILE *, int)
extern:0000000000209348                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000209348                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000209350 ; char *strrchr(const char *s, int c)
extern:0000000000209350                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000209350                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000209358 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000209358                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000209358                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000209360 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000209360                 extrn __assert_fail:near
extern:0000000000209360                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000209360                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000209368 ; void *memset(void *s, int c, size_t n)
extern:0000000000209368                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000209368                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000209370 ; int fgetc(FILE *stream)
extern:0000000000209370                 extrn fgetc:near        ; CODE XREF: _fgetc↑j
extern:0000000000209370                                         ; DATA XREF: .got:fgetc_ptr↑o
extern:0000000000209378 ; size_t strspn(const char *s, const char *accept)
extern:0000000000209378                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:0000000000209378                                         ; DATA XREF: .got:strspn_ptr↑o
extern:0000000000209380 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:0000000000209380                 extrn posix_fadvise:near
extern:0000000000209380                                         ; CODE XREF: _posix_fadvise↑j
extern:0000000000209380                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000209388 ; void *memchr(const void *s, int c, size_t n)
extern:0000000000209388                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:0000000000209388                                         ; DATA XREF: .got:memchr_ptr↑o
extern:0000000000209390 ; char *strndup(const char *string, size_t n)
extern:0000000000209390                 extrn strndup:near      ; CODE XREF: _strndup↑j
extern:0000000000209390                                         ; DATA XREF: .got:strndup_ptr↑o
extern:0000000000209398 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000209398                 extrn __libc_start_main:near
extern:0000000000209398                                         ; CODE XREF: start+24↑p
extern:0000000000209398                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002093A0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002093A0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002093A0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002093A8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002093A8                 extrn fputs_unlocked:near
extern:00000000002093A8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002093A8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002093B0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002093B0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002093B0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002093B8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002093B8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002093B8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002093C0 ; int fileno(FILE *stream)
extern:00000000002093C0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002093C0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002093C8 ; void *malloc(size_t size)
extern:00000000002093C8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002093C8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002093D0 ; int fflush(FILE *stream)
extern:00000000002093D0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002093D0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002093D8 ; char *nl_langinfo(nl_item item)
extern:00000000002093D8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002093D8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002093E0 ; int ungetc(int c, FILE *stream)
extern:00000000002093E0                 extrn ungetc:near       ; CODE XREF: _ungetc↑j
extern:00000000002093E0                                         ; DATA XREF: .got:ungetc_ptr↑o
extern:00000000002093E8 ; int _freading(FILE *fp)
extern:00000000002093E8                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002093E8                                         ; DATA XREF: .got:__freading_ptr↑o
extern:00000000002093F0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:00000000002093F0                 extrn fwrite_unlocked:near
extern:00000000002093F0                                         ; CODE XREF: _fwrite_unlocked↑j
extern:00000000002093F0                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:00000000002093F8 ; void *realloc(void *ptr, size_t size)
extern:00000000002093F8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:00000000002093F8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000209400 ; char *setlocale(int category, const char *locale)
extern:0000000000209400                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000209400                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000209408                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000209408                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000209410                 extrn __fread_chk:near  ; CODE XREF: ___fread_chk↑j
extern:0000000000209410                                         ; DATA XREF: .got:__fread_chk_ptr↑o
extern:0000000000209418 ; void *memmove(void *dest, const void *src, size_t n)
extern:0000000000209418                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:0000000000209418                                         ; DATA XREF: .got:memmove_ptr↑o
extern:0000000000209420 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000209420                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000209420                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000209428 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000209428                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000209428                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000209430 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000209430                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000209430                                         ; DATA XREF: .got:fopen_ptr↑o
extern:0000000000209438 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000209438                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000209438                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000209440 ; void __noreturn exit(int status)
extern:0000000000209440                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000209440                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000209448 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000209448                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000209448                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000209450                 extrn __fprintf_chk:near
extern:0000000000209450                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000209450                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000209458 ; int mbsinit(const mbstate_t *ps)
extern:0000000000209458                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000209458                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000209460 ; int iswprint(wint_t wc)
extern:0000000000209460                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000209460                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000209468 ; int __fastcall __cxa_finalize(void *)
extern:0000000000209468                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000209468                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000209468                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000209470 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000209470                 extrn __ctype_b_loc:near
extern:0000000000209470                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000209470                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000209478                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000209478                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000209480                 extrn __gmon_start__:near ; weak
extern:0000000000209480                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000209480                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000209488                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000209488                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000209488
extern:0000000000209488
extern:0000000000209488                 end start
