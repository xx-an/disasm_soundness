LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : A20D1F033D7F504EFAF40DF97EA935DDD0BD174FBDFEFC16B07BA5068033FAD1
LOAD:0000000000000000 ; Input MD5    : E18F2B3312078F2BD9E3A44B2F8DC583
LOAD:0000000000000000 ; Input CRC32  : 82F20FA6
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/who
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'who.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'canon-host.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'imaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'asprintf.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'readutmp.c'
LOAD:0000000000000000 ; Source File : 'vasprintf.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 374C8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0A8C8h               ; Size in file image
LOAD:00000000000000D8                 dq 0A8C8h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0A930h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20A930h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 770h                 ; Size in file image
LOAD:0000000000000110                 dq 9C8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0ABD8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20ABD8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 97BCh                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 97BCh                ; Physical address
LOAD:00000000000001B0                 dq 2BCh                 ; Size in file image
LOAD:00000000000001B8                 dq 2BCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0A930h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20A930h              ; Physical address
LOAD:0000000000000220                 dq 6D0h                 ; Size in file image
LOAD:0000000000000228                 dq 6D0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 63h, 9Bh, 63h, 83h, 3Ah, 73h, 0B0h, 0E8h, 0A9h, 62h ; Desc
LOAD:0000000000000284                 db 76h, 16h, 0F5h, 38h, 5Ch, 4Ch, 88h, 0FFh, 0Fh, 89h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 43h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 43h, 44h, 49h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aUtmpxname - offset byte_9C8, 12h, 0, 0, \ ; "utmpxname"
LOAD:00000000000002F0                            offset dword_0, 0>
LOAD:0000000000000308                 Elf64_Sym <offset aSnprintfChk - offset byte_9C8, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000308                            offset dword_0, 0>
LOAD:0000000000000320                 Elf64_Sym <offset aFree - offset byte_9C8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000320                            0>
LOAD:0000000000000338                 Elf64_Sym <offset aLocaltime - offset byte_9C8, 12h, 0, 0, \ ; "localtime"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aAbort - offset byte_9C8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000350                            0>
LOAD:0000000000000368                 Elf64_Sym <offset aErrnoLocation - offset byte_9C8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aStrncpy - offset byte_9C8, 12h, 0, 0, \ ; "strncpy"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aStrncmp - offset byte_9C8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aItmDeregistert - offset byte_9C8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aExit - offset byte_9C8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003C8                            0>
LOAD:00000000000003E0                 Elf64_Sym <offset aStrcpy - offset byte_9C8, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aFpending - offset byte_9C8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aPuts - offset byte_9C8, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:0000000000000410                            0>
LOAD:0000000000000428                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_9C8, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aEndutxent - offset byte_9C8, 12h, 0, 0, \ ; "endutxent"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aFclose - offset byte_9C8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aBindtextdomain - offset byte_9C8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aDcgettext - offset byte_9C8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_9C8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aStrlen - offset byte_9C8, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aStackChkFail - offset byte_9C8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aGetoptLong - offset byte_9C8, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aMbrtowc - offset byte_9C8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aStrchr - offset byte_9C8, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aGaiStrerror - offset byte_9C8, 12h, 0, 0, \ ; "gai_strerror"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aStrrchr - offset byte_9C8, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aLseek - offset byte_9C8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000560                            0>
LOAD:0000000000000578                 Elf64_Sym <offset aAssertFail - offset byte_9C8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aMemset - offset byte_9C8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aStrncat - offset byte_9C8, 12h, 0, 0, \ ; "strncat"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aLibcStartMain - offset byte_9C8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aMemcmp - offset byte_9C8, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aFputsUnlocked - offset byte_9C8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aCalloc - offset byte_9C8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aSetutxent - offset byte_9C8, 12h, 0, 0, \ ; "setutxent"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aGmonStart - offset byte_9C8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aMemcpy - offset byte_9C8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aKill - offset byte_9C8, 12h, 0, 0, offset dword_0, \ ; "kill"
LOAD:0000000000000668                            0>
LOAD:0000000000000680                 Elf64_Sym <offset aStrftime+4 - offset byte_9C8, 12h, 0, 0, \ ; "time"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aFileno - offset byte_9C8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aXstat - offset byte_9C8, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:00000000000006B0                            0>
LOAD:00000000000006C8                 Elf64_Sym <offset aMalloc - offset byte_9C8, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aFflush - offset byte_9C8, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aNlLanginfo - offset byte_9C8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aFreading - offset byte_9C8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aTtyname - offset byte_9C8, 12h, 0, 0, \ ; "ttyname"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aRealloc - offset byte_9C8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aSetlocale - offset byte_9C8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aPrintfChk - offset byte_9C8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aStrftime - offset byte_9C8, 12h, 0, 0, \ ; "strftime"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aGetutxent - offset byte_9C8, 12h, 0, 0, \ ; "getutxent"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aGaiStrerror+7 - offset byte_9C8, 12h, 0, 0, \ ; "error"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aFseeko - offset byte_9C8, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aCxaAtexit - offset byte_9C8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000007E8                            offset dword_0, 0>
LOAD:0000000000000800                 Elf64_Sym <offset aExit+1 - offset byte_9C8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000800                            offset dword_0, 0>
LOAD:0000000000000818                 Elf64_Sym <offset aFwrite - offset byte_9C8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000818                            offset dword_0, 0>
LOAD:0000000000000830                 Elf64_Sym <offset aFprintfChk - offset byte_9C8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000830                            offset dword_0, 0>
LOAD:0000000000000848                 Elf64_Sym <offset aItmRegistertmc - offset byte_9C8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000848                            offset dword_0, 0>
LOAD:0000000000000860                 Elf64_Sym <offset aGetaddrinfo - offset byte_9C8, 12h, 0, 0, \ ; "getaddrinfo"
LOAD:0000000000000860                            offset dword_0, 0>
LOAD:0000000000000878                 Elf64_Sym <offset aStrdup - offset byte_9C8, 12h, 0, 0, \ ; "strdup"
LOAD:0000000000000878                            offset dword_0, 0>
LOAD:0000000000000890                 Elf64_Sym <offset aMbsinit - offset byte_9C8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000890                            offset dword_0, 0>
LOAD:00000000000008A8                 Elf64_Sym <offset aIswprint - offset byte_9C8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000008A8                            offset dword_0, 0>
LOAD:00000000000008C0                 Elf64_Sym <offset aCxaFinalize - offset byte_9C8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000008C0                            offset dword_0, 0>
LOAD:00000000000008D8                 Elf64_Sym <offset aCtypeBLoc - offset byte_9C8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000008D8                            offset dword_0, 0>
LOAD:00000000000008F0                 Elf64_Sym <offset aFreeaddrinfo - offset byte_9C8, 12h, 0, 0, \ ; "freeaddrinfo"
LOAD:00000000000008F0                            offset dword_0, 0>
LOAD:0000000000000908                 Elf64_Sym <offset aSprintfChk - offset byte_9C8, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000908                            offset dword_0, 0>
LOAD:0000000000000920                 Elf64_Sym <offset aStdout - offset byte_9C8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000920                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000938                 Elf64_Sym <offset aProgname - offset byte_9C8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000938                            offset __bss_start, 8>
LOAD:0000000000000950                 Elf64_Sym <offset aProgramInvocat - offset byte_9C8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000950                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000968                 Elf64_Sym <offset aPrognameFull - offset byte_9C8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000968                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000980                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_9C8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000980                            offset __bss_start, 8>
LOAD:0000000000000998                 Elf64_Sym <offset aStderr - offset byte_9C8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000998                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000009B0                 Elf64_Sym <offset aOptind - offset byte_9C8, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000009B0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009C8 ; ELF String Table
LOAD:00000000000009C8 byte_9C8        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:00000000000009C8                                         ; LOAD:0000000000000308↑o ...
LOAD:00000000000009C9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000DA0↓o
LOAD:00000000000009D3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:00000000000009DA aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:00000000000009E1 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000770↑o
LOAD:00000000000009EE aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000758↑o
LOAD:00000000000009F8 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000500↑o
LOAD:0000000000000A00 aGaiStrerror    db 'gai_strerror',0     ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000A00                                         ; LOAD:00000000000007B8↑o
LOAD:0000000000000A0D aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000398↑o
LOAD:0000000000000A15 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000009B0↑o
LOAD:0000000000000A1C aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000A24 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000A2E aStrncpy        db 'strncpy',0          ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000A36 aPuts           db 'puts',0             ; DATA XREF: LOAD:0000000000000410↑o
LOAD:0000000000000A3B aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000A4C aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000008A8↑o
LOAD:0000000000000A55 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000A5D aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000A63 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:0000000000000A63                                         ; LOAD:0000000000000800↑o
LOAD:0000000000000A69 aKill           db 'kill',0             ; DATA XREF: LOAD:0000000000000668↑o
LOAD:0000000000000A6E aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A6E                                         ; DATA XREF: LOAD:0000000000000950↑o
LOAD:0000000000000A86 aStrdup         db 'strdup',0           ; DATA XREF: LOAD:0000000000000878↑o
LOAD:0000000000000A8D aStrftime       db 'strftime',0         ; DATA XREF: LOAD:0000000000000788↑o
LOAD:0000000000000A8D                                         ; LOAD:0000000000000680↑o
LOAD:0000000000000A96 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000AA4 aSetutxent      db 'setutxent',0        ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000AAE aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000AAE                                         ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:0000000000000AC5 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000608↑o
LOAD:0000000000000ACC aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000AD3 aGetaddrinfo    db 'getaddrinfo',0      ; DATA XREF: LOAD:0000000000000860↑o
LOAD:0000000000000ADF aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000AE6 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000AF7 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000AFE aTtyname        db 'ttyname',0          ; DATA XREF: LOAD:0000000000000728↑o
LOAD:0000000000000B06 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000B14 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000920↑o
LOAD:0000000000000B1B aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000B21 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000B28 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000B2F aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000B36 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000890↑o
LOAD:0000000000000B3E aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:0000000000000B4A aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000008D8↑o
LOAD:0000000000000B58 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000B63 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000998↑o
LOAD:0000000000000B6A aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000B79 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:0000000000000B85 aUtmpxname      db 'utmpxname',0        ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000B8F aStrncat        db 'strncat',0          ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000B97 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000698↑o
LOAD:0000000000000B9E aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000818↑o
LOAD:0000000000000BA5 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:0000000000000BB0 aLocaltime      db 'localtime',0        ; DATA XREF: LOAD:0000000000000338↑o
LOAD:0000000000000BBA aEndutxent      db 'endutxent',0        ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000BC4 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000518↑o
LOAD:0000000000000BCB aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000BCB                                         ; DATA XREF: LOAD:0000000000000980↑o
LOAD:0000000000000BE9 aGetutxent      db 'getutxent',0        ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:0000000000000BF3 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000008C0↑o
LOAD:0000000000000C02 aFreeaddrinfo   db 'freeaddrinfo',0     ; DATA XREF: LOAD:00000000000008F0↑o
LOAD:0000000000000C0F aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000908↑o
LOAD:0000000000000C1D aXstat          db '__xstat',0          ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:0000000000000C25 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000470↑o
LOAD:0000000000000C25                                         ; LOAD:0000000000000428↑o
LOAD:0000000000000C34 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C34                                         ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000C46 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:0000000000000C4D aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000C5C aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000C61 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000938↑o
LOAD:0000000000000C6C aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000968↑o
LOAD:0000000000000C7C aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:0000000000000C89 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000DB0↓o
LOAD:0000000000000C93 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000DC0↓o
LOAD:0000000000000C9E aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000DD0↓o
LOAD:0000000000000CA8 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000DE0↓o
LOAD:0000000000000CB4 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000DF0↓o
LOAD:0000000000000CC0 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000CC0                                         ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000CDC aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000638↑o
LOAD:0000000000000CEB aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000CEB                                         ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000D05                 align 2
LOAD:0000000000000D06 ; ELF GNU Symbol Version Table
LOAD:0000000000000D06                 dw 0
LOAD:0000000000000D08                 dw 2                    ; utmpxname@@GLIBC_2.2.5
LOAD:0000000000000D0A                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D0C                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000D0E                 dw 2                    ; localtime@@GLIBC_2.2.5
LOAD:0000000000000D10                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000D12                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000D14                 dw 2                    ; strncpy@@GLIBC_2.2.5
LOAD:0000000000000D16                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D18                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D1A                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D1C                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000D1E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D20                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000D22                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D24                 dw 2                    ; endutxent@@GLIBC_2.2.5
LOAD:0000000000000D26                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D28                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D2A                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D2C                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D2E                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D30                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D32                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D34                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D36                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000D38                 dw 2                    ; gai_strerror@@GLIBC_2.2.5
LOAD:0000000000000D3A                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000D3C                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D3E                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000D40                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D42                 dw 2                    ; strncat@@GLIBC_2.2.5
LOAD:0000000000000D44                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D46                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D48                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D4A                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D4C                 dw 2                    ; setutxent@@GLIBC_2.2.5
LOAD:0000000000000D4E                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D50                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D52                 dw 2                    ; kill@@GLIBC_2.2.5
LOAD:0000000000000D54                 dw 2                    ; time@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000D5A                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000D5C                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000D5E                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000D60                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000D62                 dw 2                    ; ttyname@@GLIBC_2.2.5
LOAD:0000000000000D64                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000D66                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000D68                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000D6A                 dw 2                    ; strftime@@GLIBC_2.2.5
LOAD:0000000000000D6C                 dw 2                    ; getutxent@@GLIBC_2.2.5
LOAD:0000000000000D6E                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000D70                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000D72                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000D74                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000D76                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000D78                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D7A                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000D7C                 dw 2                    ; getaddrinfo@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 2                    ; strdup@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000D82                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000D84                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D86                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D88                 dw 2                    ; freeaddrinfo@@GLIBC_2.2.5
LOAD:0000000000000D8A                 dw 3                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D8C                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D8E                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D90                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D92                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D94                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000D96                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000D98                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000D9A                 dw 0
LOAD:0000000000000D9C                 dw 0
LOAD:0000000000000D9E                 dw 0
LOAD:0000000000000DA0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000DA0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_9C8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000DB0                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_9C8, \ ; "GLIBC_2.3"
LOAD:0000000000000DB0                                10h>
LOAD:0000000000000DC0                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_9C8, \ ; "GLIBC_2.14"
LOAD:0000000000000DC0                                10h>
LOAD:0000000000000DD0                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_9C8, \ ; "GLIBC_2.4"
LOAD:0000000000000DD0                                10h>
LOAD:0000000000000DE0                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_9C8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000DE0                                10h>
LOAD:0000000000000DF0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_9C8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000E00 ; ELF RELA Relocation Table
LOAD:0000000000000E00                 Elf64_Rela <20A930h, 8, 2040h> ; R_X86_64_RELATIVE +2040h
LOAD:0000000000000E18                 Elf64_Rela <20A938h, 8, 2000h> ; R_X86_64_RELATIVE +2000h
LOAD:0000000000000E30                 Elf64_Rela <20A940h, 8, 86B9h> ; R_X86_64_RELATIVE +86B9h
LOAD:0000000000000E48                 Elf64_Rela <20A960h, 8, 8546h> ; R_X86_64_RELATIVE +8546h
LOAD:0000000000000E60                 Elf64_Rela <20A980h, 8, 86BDh> ; R_X86_64_RELATIVE +86BDh
LOAD:0000000000000E78                 Elf64_Rela <20A9A0h, 8, 86C3h> ; R_X86_64_RELATIVE +86C3h
LOAD:0000000000000E90                 Elf64_Rela <20A9C0h, 8, 86C8h> ; R_X86_64_RELATIVE +86C8h
LOAD:0000000000000EA8                 Elf64_Rela <20A9E0h, 8, 86D0h> ; R_X86_64_RELATIVE +86D0h
LOAD:0000000000000EC0                 Elf64_Rela <20AA00h, 8, 86D6h> ; R_X86_64_RELATIVE +86D6h
LOAD:0000000000000ED8                 Elf64_Rela <20AA20h, 8, 86DDh> ; R_X86_64_RELATIVE +86DDh
LOAD:0000000000000EF0                 Elf64_Rela <20AA40h, 8, 86E5h> ; R_X86_64_RELATIVE +86E5h
LOAD:0000000000000F08                 Elf64_Rela <20AA60h, 8, 86EAh> ; R_X86_64_RELATIVE +86EAh
LOAD:0000000000000F20                 Elf64_Rela <20AA80h, 8, 86F2h> ; R_X86_64_RELATIVE +86F2h
LOAD:0000000000000F38                 Elf64_Rela <20AAA0h, 8, 86FBh> ; R_X86_64_RELATIVE +86FBh
LOAD:0000000000000F50                 Elf64_Rela <20AAC0h, 8, 8701h> ; R_X86_64_RELATIVE +8701h
LOAD:0000000000000F68                 Elf64_Rela <20AAE0h, 8, 8706h> ; R_X86_64_RELATIVE +8706h
LOAD:0000000000000F80                 Elf64_Rela <20AB00h, 8, 870Ch> ; R_X86_64_RELATIVE +870Ch
LOAD:0000000000000F98                 Elf64_Rela <20AB20h, 8, 8715h> ; R_X86_64_RELATIVE +8715h
LOAD:0000000000000FB0                 Elf64_Rela <20AB40h, 8, 871Ah> ; R_X86_64_RELATIVE +871Ah
LOAD:0000000000000FC8                 Elf64_Rela <20AB80h, 8, 8D49h> ; R_X86_64_RELATIVE +8D49h
LOAD:0000000000000FE0                 Elf64_Rela <20AB88h, 8, 8D51h> ; R_X86_64_RELATIVE +8D51h
LOAD:0000000000000FF8                 Elf64_Rela <20AB90h, 8, 8D57h> ; R_X86_64_RELATIVE +8D57h
LOAD:0000000000001010                 Elf64_Rela <20AB98h, 8, 8D64h> ; R_X86_64_RELATIVE +8D64h
LOAD:0000000000001028                 Elf64_Rela <20ABA0h, 8, 8D71h> ; R_X86_64_RELATIVE +8D71h
LOAD:0000000000001040                 Elf64_Rela <20ABA8h, 8, 8532h> ; R_X86_64_RELATIVE +8532h
LOAD:0000000000001058                 Elf64_Rela <20ABB0h, 8, 8D85h> ; R_X86_64_RELATIVE +8D85h
LOAD:0000000000001070                 Elf64_Rela <20ABB8h, 8, 8D6Ah> ; R_X86_64_RELATIVE +8D6Ah
LOAD:0000000000001088                 Elf64_Rela <20ABC0h, 8, 8648h> ; R_X86_64_RELATIVE +8648h
LOAD:00000000000010A0                 Elf64_Rela <20ABC8h, 8, 8D8Dh> ; R_X86_64_RELATIVE +8D8Dh
LOAD:00000000000010B8                 Elf64_Rela <20B008h, 8, 20B008h> ; R_X86_64_RELATIVE +20B008h
LOAD:00000000000010D0                 Elf64_Rela <20B020h, 8, 8CCCh> ; R_X86_64_RELATIVE +8CCCh
LOAD:00000000000010E8                 Elf64_Rela <20B080h, 8, 20B090h> ; R_X86_64_RELATIVE +20B090h
LOAD:0000000000001100                 Elf64_Rela <20B098h, 8, 20B1C0h> ; R_X86_64_RELATIVE +20B1C0h
LOAD:0000000000001118                 Elf64_Rela <20AFC8h, 900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001130                 Elf64_Rela <20AFD0h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001148                 Elf64_Rela <20AFD8h, 2400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001160                 Elf64_Rela <20AFE0h, 3A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001178                 Elf64_Rela <20AFE8h, 3F00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001190                 Elf64_Rela <20B0A0h, 4400000005h, 0> ; R_X86_64_COPY __progname
LOAD:00000000000011A8                 Elf64_Rela <20B0A8h, 4300000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000011C0                 Elf64_Rela <20B0B0h, 4900000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000011D8                 Elf64_Rela <20B0B8h, 4600000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000011F0                 Elf64_Rela <20B0C0h, 4800000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001208 ; ELF JMPREL Relocation Table
LOAD:0000000000001208                 Elf64_Rela <20ADE0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT utmpxname
LOAD:0000000000001220                 Elf64_Rela <20ADE8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001238                 Elf64_Rela <20ADF0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001250                 Elf64_Rela <20ADF8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT localtime
LOAD:0000000000001268                 Elf64_Rela <20AE00h, 500000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001280                 Elf64_Rela <20AE08h, 600000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001298                 Elf64_Rela <20AE10h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strncpy
LOAD:00000000000012B0                 Elf64_Rela <20AE18h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000012C8                 Elf64_Rela <20AE20h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000012E0                 Elf64_Rela <20AE28h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:00000000000012F8                 Elf64_Rela <20AE30h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001310                 Elf64_Rela <20AE38h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000001328                 Elf64_Rela <20AE40h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001340                 Elf64_Rela <20AE48h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT endutxent
LOAD:0000000000001358                 Elf64_Rela <20AE50h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001370                 Elf64_Rela <20AE58h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001388                 Elf64_Rela <20AE60h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000013A0                 Elf64_Rela <20AE68h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000013B8                 Elf64_Rela <20AE70h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000013D0                 Elf64_Rela <20AE78h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000013E8                 Elf64_Rela <20AE80h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001400                 Elf64_Rela <20AE88h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001418                 Elf64_Rela <20AE90h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001430                 Elf64_Rela <20AE98h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT gai_strerror
LOAD:0000000000001448                 Elf64_Rela <20AEA0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001460                 Elf64_Rela <20AEA8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001478                 Elf64_Rela <20AEB0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001490                 Elf64_Rela <20AEB8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000014A8                 Elf64_Rela <20AEC0h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strncat
LOAD:00000000000014C0                 Elf64_Rela <20AEC8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000014D8                 Elf64_Rela <20AED0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000014F0                 Elf64_Rela <20AED8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001508                 Elf64_Rela <20AEE0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT setutxent
LOAD:0000000000001520                 Elf64_Rela <20AEE8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001538                 Elf64_Rela <20AEF0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT kill
LOAD:0000000000001550                 Elf64_Rela <20AEF8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT time
LOAD:0000000000001568                 Elf64_Rela <20AF00h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001580                 Elf64_Rela <20AF08h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001598                 Elf64_Rela <20AF10h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000015B0                 Elf64_Rela <20AF18h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000015C8                 Elf64_Rela <20AF20h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000015E0                 Elf64_Rela <20AF28h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000015F8                 Elf64_Rela <20AF30h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT ttyname
LOAD:0000000000001610                 Elf64_Rela <20AF38h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001628                 Elf64_Rela <20AF40h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001640                 Elf64_Rela <20AF48h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001658                 Elf64_Rela <20AF50h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT strftime
LOAD:0000000000001670                 Elf64_Rela <20AF58h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT getutxent
LOAD:0000000000001688                 Elf64_Rela <20AF60h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000016A0                 Elf64_Rela <20AF68h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000016B8                 Elf64_Rela <20AF70h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000016D0                 Elf64_Rela <20AF78h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000016E8                 Elf64_Rela <20AF80h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001700                 Elf64_Rela <20AF88h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001718                 Elf64_Rela <20AF90h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT getaddrinfo
LOAD:0000000000001730                 Elf64_Rela <20AF98h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT strdup
LOAD:0000000000001748                 Elf64_Rela <20AFA0h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001760                 Elf64_Rela <20AFA8h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001778                 Elf64_Rela <20AFB0h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001790                 Elf64_Rela <20AFB8h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT freeaddrinfo
LOAD:00000000000017A8                 Elf64_Rela <20AFC0h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:00000000000017A8 LOAD            ends
LOAD:00000000000017A8
.init:00000000000017C0 ; ===========================================================================
.init:00000000000017C0
.init:00000000000017C0 ; Segment type: Pure code
.init:00000000000017C0 ; Segment permissions: Read/Execute
.init:00000000000017C0 _init           segment dword public 'CODE' use64
.init:00000000000017C0                 assume cs:_init
.init:00000000000017C0                 ;org 17C0h
.init:00000000000017C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000017C0
.init:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.init:00000000000017C0
.init:00000000000017C0
.init:00000000000017C0                 public _init_proc
.init:00000000000017C0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000017C0                 sub     rsp, 8          ; _init
.init:00000000000017C4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000017CB                 test    rax, rax
.init:00000000000017CE                 jz      short loc_17D2
.init:00000000000017D0                 call    rax ; __gmon_start__
.init:00000000000017D2
.init:00000000000017D2 loc_17D2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000017D2                 add     rsp, 8
.init:00000000000017D6                 retn
.init:00000000000017D6 _init_proc      endp
.init:00000000000017D6
.init:00000000000017D6 _init           ends
.init:00000000000017D6
LOAD:00000000000017D7 ; ===========================================================================
LOAD:00000000000017D7
LOAD:00000000000017D7 ; Segment type: Pure code
LOAD:00000000000017D7 ; Segment permissions: Read/Execute
LOAD:00000000000017D7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000017D7                 assume cs:LOAD
LOAD:00000000000017D7                 ;org 17D7h
LOAD:00000000000017D7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000017D7                 align 20h
LOAD:00000000000017D7 LOAD            ends
LOAD:00000000000017D7
.plt:00000000000017E0 ; ===========================================================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Segment type: Pure code
.plt:00000000000017E0 ; Segment permissions: Read/Execute
.plt:00000000000017E0 _plt            segment para public 'CODE' use64
.plt:00000000000017E0                 assume cs:_plt
.plt:00000000000017E0                 ;org 17E0h
.plt:00000000000017E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0
.plt:00000000000017E0 sub_17E0        proc near               ; CODE XREF: .plt:00000000000017FB↓j
.plt:00000000000017E0                                         ; .plt:000000000000180B↓j ...
.plt:00000000000017E0 ; __unwind {
.plt:00000000000017E0                 push    cs:qword_20ADD0
.plt:00000000000017E6                 jmp     cs:qword_20ADD8
.plt:00000000000017E6 sub_17E0        endp
.plt:00000000000017E6
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017EC                 align 10h
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; int utmpxname(const char *file)
.plt:00000000000017F0 _utmpxname      proc near               ; CODE XREF: read_utmp+2C↓p
.plt:00000000000017F0                 jmp     cs:utmpxname_ptr
.plt:00000000000017F0 _utmpxname      endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    0
.plt:00000000000017FB                 jmp     sub_17E0
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000001800                                         ; vasnprintf+6F0↓p ...
.plt:0000000000001800                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001800 ___snprintf_chk endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    1
.plt:000000000000180B                 jmp     sub_17E0
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; void free(void *ptr)
.plt:0000000000001810 _free           proc near               ; CODE XREF: print_line+187↓p
.plt:0000000000001810                                         ; print_line+1B1↓j ...
.plt:0000000000001810                 jmp     cs:free_ptr
.plt:0000000000001810 _free           endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    2
.plt:000000000000181B                 jmp     sub_17E0
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; struct tm *localtime(const time_t *timer)
.plt:0000000000001820 _localtime      proc near               ; CODE XREF: time_string_isra_1+1E↓p
.plt:0000000000001820                 jmp     cs:localtime_ptr
.plt:0000000000001820 _localtime      endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    3
.plt:000000000000182B                 jmp     sub_17E0
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: noreturn thunk
.plt:0000000000001830
.plt:0000000000001830 ; void __noreturn abort(void)
.plt:0000000000001830 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001830                                         ; quotearg_buffer_restyled:def_3A41↓p ...
.plt:0000000000001830                 jmp     cs:abort_ptr
.plt:0000000000001830 _abort          endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    4
.plt:000000000000183B                 jmp     sub_17E0
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; int *__errno_location(void)
.plt:0000000000001840 ___errno_location proc near             ; CODE XREF: who+7A8↓p
.plt:0000000000001840                                         ; close_stdout+16↓p ...
.plt:0000000000001840                 jmp     cs:__errno_location_ptr
.plt:0000000000001840 ___errno_location endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    5
.plt:000000000000184B                 jmp     sub_17E0
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; char *strncpy(char *dest, const char *src, size_t n)
.plt:0000000000001850 _strncpy        proc near               ; CODE XREF: extract_trimmed_name+22↓p
.plt:0000000000001850                 jmp     cs:strncpy_ptr
.plt:0000000000001850 _strncpy        endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    6
.plt:000000000000185B                 jmp     sub_17E0
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001860 _strncmp        proc near               ; CODE XREF: who+B6↓p
.plt:0000000000001860                                         ; who+36F↓p ...
.plt:0000000000001860                 jmp     cs:strncmp_ptr
.plt:0000000000001860 _strncmp        endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    7
.plt:000000000000186B                 jmp     sub_17E0
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: noreturn thunk
.plt:0000000000001870
.plt:0000000000001870 ; void __noreturn _exit(int status)
.plt:0000000000001870 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001870                 jmp     cs:_exit_ptr
.plt:0000000000001870 __exit          endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    8
.plt:000000000000187B                 jmp     sub_17E0
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; char *strcpy(char *dest, const char *src)
.plt:0000000000001880 _strcpy         proc near               ; CODE XREF: make_id_equals_comment+49↓p
.plt:0000000000001880                 jmp     cs:strcpy_ptr
.plt:0000000000001880 _strcpy         endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    9
.plt:000000000000188B                 jmp     sub_17E0
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; size_t __fpending(FILE *fp)
.plt:0000000000001890 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001890                 jmp     cs:__fpending_ptr
.plt:0000000000001890 ___fpending     endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    0Ah
.plt:000000000000189B                 jmp     sub_17E0
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; int puts(const char *s)
.plt:00000000000018A0 _puts           proc near               ; CODE XREF: print_line+17D↓p
.plt:00000000000018A0                 jmp     cs:puts_ptr
.plt:00000000000018A0 _puts           endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    0Bh
.plt:00000000000018AB                 jmp     sub_17E0
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; char *textdomain(const char *domainname)
.plt:00000000000018B0 _textdomain     proc near               ; CODE XREF: main+42↓p
.plt:00000000000018B0                 jmp     cs:textdomain_ptr
.plt:00000000000018B0 _textdomain     endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    0Ch
.plt:00000000000018BB                 jmp     sub_17E0
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; void endutxent(void)
.plt:00000000000018C0 _endutxent      proc near               ; CODE XREF: read_utmp:loc_6061↓p
.plt:00000000000018C0                 jmp     cs:endutxent_ptr
.plt:00000000000018C0 _endutxent      endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    0Dh
.plt:00000000000018CB                 jmp     sub_17E0
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; int fclose(FILE *stream)
.plt:00000000000018D0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000018D0                                         ; rpl_fclose+6B↓j
.plt:00000000000018D0                 jmp     cs:fclose_ptr
.plt:00000000000018D0 _fclose         endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    0Eh
.plt:00000000000018DB                 jmp     sub_17E0
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000018E0 _bindtextdomain proc near               ; CODE XREF: main+36↓p
.plt:00000000000018E0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000018E0 _bindtextdomain endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    0Fh
.plt:00000000000018EB                 jmp     sub_17E0
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000018F0 _dcgettext      proc near               ; CODE XREF: main+353↓p
.plt:00000000000018F0                                         ; make_id_equals_comment+17↓p ...
.plt:00000000000018F0                 jmp     cs:dcgettext_ptr
.plt:00000000000018F0 _dcgettext      endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    10h
.plt:00000000000018FB                 jmp     sub_17E0
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001900 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001900                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001900 ___ctype_get_mb_cur_max endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    11h
.plt:000000000000190B                 jmp     sub_17E0
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; size_t strlen(const char *s)
.plt:0000000000001910 _strlen         proc near               ; CODE XREF: print_line+8A↓p
.plt:0000000000001910                                         ; print_line+B6↓p ...
.plt:0000000000001910                 jmp     cs:strlen_ptr
.plt:0000000000001910 _strlen         endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    12h
.plt:000000000000191B                 jmp     sub_17E0
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: noreturn thunk
.plt:0000000000001920
.plt:0000000000001920 ___stack_chk_fail proc near             ; CODE XREF: print_line:loc_22BD↓p
.plt:0000000000001920                                         ; time_string_isra_1:loc_23B2↓p ...
.plt:0000000000001920                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001920 ___stack_chk_fail endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    13h
.plt:000000000000192B                 jmp     sub_17E0
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001930 _getopt_long    proc near               ; CODE XREF: main+6E↓p
.plt:0000000000001930                 jmp     cs:getopt_long_ptr
.plt:0000000000001930 _getopt_long    endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    14h
.plt:000000000000193B                 jmp     sub_17E0
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001940 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001940                 jmp     cs:mbrtowc_ptr
.plt:0000000000001940 _mbrtowc        endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    15h
.plt:000000000000194B                 jmp     sub_17E0
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; char *strchr(const char *s, int c)
.plt:0000000000001950 _strchr         proc near               ; CODE XREF: print_user+132↓p
.plt:0000000000001950                 jmp     cs:strchr_ptr
.plt:0000000000001950 _strchr         endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    16h
.plt:000000000000195B                 jmp     sub_17E0
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; const char *gai_strerror(int ecode)
.plt:0000000000001960 _gai_strerror   proc near               ; CODE XREF: ch_strerror+6↓j
.plt:0000000000001960                 jmp     cs:gai_strerror_ptr
.plt:0000000000001960 _gai_strerror   endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    17h
.plt:000000000000196B                 jmp     sub_17E0
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; char *strrchr(const char *s, int c)
.plt:0000000000001970 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001970                 jmp     cs:strrchr_ptr
.plt:0000000000001970 _strrchr        endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    18h
.plt:000000000000197B                 jmp     sub_17E0
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001980 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001980                                         ; rpl_fseeko+3B↓p
.plt:0000000000001980                 jmp     cs:lseek_ptr
.plt:0000000000001980 _lseek          endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    19h
.plt:000000000000198B                 jmp     sub_17E0
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: noreturn thunk
.plt:0000000000001990
.plt:0000000000001990 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001990 ___assert_fail  proc near               ; CODE XREF: print_user+5AD↓p
.plt:0000000000001990                 jmp     cs:__assert_fail_ptr
.plt:0000000000001990 ___assert_fail  endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    1Ah
.plt:000000000000199B                 jmp     sub_17E0
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000019A0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000019A0                                         ; xzalloc+12↓j
.plt:00000000000019A0                 jmp     cs:memset_ptr
.plt:00000000000019A0 _memset         endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    1Bh
.plt:00000000000019AB                 jmp     sub_17E0
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; char *strncat(char *dest, const char *src, size_t n)
.plt:00000000000019B0 _strncat        proc near               ; CODE XREF: make_id_equals_comment+5A↓p
.plt:00000000000019B0                 jmp     cs:strncat_ptr
.plt:00000000000019B0 _strncat        endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    1Ch
.plt:00000000000019BB                 jmp     sub_17E0
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000019C0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000019C0                 jmp     cs:memcmp_ptr
.plt:00000000000019C0 _memcmp         endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    1Dh
.plt:00000000000019CB                 jmp     sub_17E0
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000019D0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000019D0                                         ; usage+C2↓p ...
.plt:00000000000019D0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000019D0 _fputs_unlocked endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    1Eh
.plt:00000000000019DB                 jmp     sub_17E0
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000019E0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000019E0                 jmp     cs:calloc_ptr
.plt:00000000000019E0 _calloc         endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    1Fh
.plt:00000000000019EB                 jmp     sub_17E0
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; void setutxent(void)
.plt:00000000000019F0 _setutxent      proc near               ; CODE XREF: read_utmp+31↓p
.plt:00000000000019F0                 jmp     cs:setutxent_ptr
.plt:00000000000019F0 _setutxent      endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    20h ; ' '
.plt:00000000000019FB                 jmp     sub_17E0
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001A00 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001A00                                         ; vasnprintf+2AE↓p ...
.plt:0000000000001A00                 jmp     cs:memcpy_ptr
.plt:0000000000001A00 _memcpy         endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    21h ; '!'
.plt:0000000000001A0B                 jmp     sub_17E0
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; int kill(__pid_t pid, int sig)
.plt:0000000000001A10 _kill           proc near               ; CODE XREF: read_utmp+F7↓p
.plt:0000000000001A10                 jmp     cs:kill_ptr
.plt:0000000000001A10 _kill           endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    22h ; '"'
.plt:0000000000001A1B                 jmp     sub_17E0
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; time_t time(time_t *timer)
.plt:0000000000001A20 _time           proc near               ; CODE XREF: print_user+487↓p
.plt:0000000000001A20                 jmp     cs:time_ptr
.plt:0000000000001A20 _time           endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    23h ; '#'
.plt:0000000000001A2B                 jmp     sub_17E0
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int fileno(FILE *stream)
.plt:0000000000001A30 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001A30                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001A30                 jmp     cs:fileno_ptr
.plt:0000000000001A30 _fileno         endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    24h ; '$'
.plt:0000000000001A3B                 jmp     sub_17E0
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001A40 ___xstat        proc near               ; CODE XREF: print_user+9C↓p
.plt:0000000000001A40                 jmp     cs:__xstat_ptr
.plt:0000000000001A40 ___xstat        endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    25h ; '%'
.plt:0000000000001A4B                 jmp     sub_17E0
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; void *malloc(size_t size)
.plt:0000000000001A50 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001A50                                         ; vasnprintf+D2↓p ...
.plt:0000000000001A50                 jmp     cs:malloc_ptr
.plt:0000000000001A50 _malloc         endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    26h ; '&'
.plt:0000000000001A5B                 jmp     sub_17E0
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int fflush(FILE *stream)
.plt:0000000000001A60 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001A60                                         ; rpl_fflush+3B↓j
.plt:0000000000001A60                 jmp     cs:fflush_ptr
.plt:0000000000001A60 _fflush         endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    27h ; '''
.plt:0000000000001A6B                 jmp     sub_17E0
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; char *nl_langinfo(nl_item item)
.plt:0000000000001A70 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001A70                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001A70 _nl_langinfo    endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    28h ; '('
.plt:0000000000001A7B                 jmp     sub_17E0
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; int __freading(FILE *fp)
.plt:0000000000001A80 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001A80                                         ; rpl_fflush+9↓p
.plt:0000000000001A80                 jmp     cs:__freading_ptr
.plt:0000000000001A80 ___freading     endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    29h ; ')'
.plt:0000000000001A8B                 jmp     sub_17E0
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; char *ttyname(int fd)
.plt:0000000000001A90 _ttyname        proc near               ; CODE XREF: who+34F↓p
.plt:0000000000001A90                 jmp     cs:ttyname_ptr
.plt:0000000000001A90 _ttyname        endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    2Ah ; '*'
.plt:0000000000001A9B                 jmp     sub_17E0
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001AA0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001AA0                                         ; vasnprintf+285↓p ...
.plt:0000000000001AA0                 jmp     cs:realloc_ptr
.plt:0000000000001AA0 _realloc        endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    2Bh ; '+'
.plt:0000000000001AAB                 jmp     sub_17E0
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; char *setlocale(int category, const char *locale)
.plt:0000000000001AB0 _setlocale      proc near               ; CODE XREF: main+23↓p
.plt:0000000000001AB0                                         ; usage+2D3↓p ...
.plt:0000000000001AB0                 jmp     cs:setlocale_ptr
.plt:0000000000001AB0 _setlocale      endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    2Ch ; ','
.plt:0000000000001ABB                 jmp     sub_17E0
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ___printf_chk   proc near               ; CODE XREF: who+20F↓p
.plt:0000000000001AC0                                         ; who+23C↓p ...
.plt:0000000000001AC0                 jmp     cs:__printf_chk_ptr
.plt:0000000000001AC0 ___printf_chk   endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    2Dh ; '-'
.plt:0000000000001ACB                 jmp     sub_17E0
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
.plt:0000000000001AD0 _strftime       proc near               ; CODE XREF: time_string_isra_1+3E↓p
.plt:0000000000001AD0                 jmp     cs:strftime_ptr
.plt:0000000000001AD0 _strftime       endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    2Eh ; '.'
.plt:0000000000001ADB                 jmp     sub_17E0
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; struct utmpx *getutxent(void)
.plt:0000000000001AE0 _getutxent      proc near               ; CODE XREF: read_utmp:loc_5FE6↓p
.plt:0000000000001AE0                                         ; read_utmp+A4↓p
.plt:0000000000001AE0                 jmp     cs:getutxent_ptr
.plt:0000000000001AE0 _getutxent      endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    2Fh ; '/'
.plt:0000000000001AEB                 jmp     sub_17E0
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001AF0 _error          proc near               ; CODE XREF: main+364↓p
.plt:0000000000001AF0                                         ; who+7C0↓p ...
.plt:0000000000001AF0                 jmp     cs:error_ptr
.plt:0000000000001AF0 _error          endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    30h ; '0'
.plt:0000000000001AFB                 jmp     sub_17E0
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001B00 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_634A↓j
.plt:0000000000001B00                 jmp     cs:fseeko_ptr
.plt:0000000000001B00 _fseeko         endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    31h ; '1'
.plt:0000000000001B0B                 jmp     sub_17E0
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001B10 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001B10                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001B10 ___cxa_atexit   endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    32h ; '2'
.plt:0000000000001B1B                 jmp     sub_17E0
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: noreturn thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; void __noreturn exit(int status)
.plt:0000000000001B20 _exit           proc near               ; CODE XREF: main+186↓p
.plt:0000000000001B20                                         ; usage+58↓p
.plt:0000000000001B20                 jmp     cs:exit_ptr
.plt:0000000000001B20 _exit           endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    33h ; '3'
.plt:0000000000001B2B                 jmp     sub_17E0
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001B30 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001B30                 jmp     cs:fwrite_ptr
.plt:0000000000001B30 _fwrite         endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    34h ; '4'
.plt:0000000000001B3B                 jmp     sub_17E0
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001B40                                         ; version_etc_arn+37↓p ...
.plt:0000000000001B40                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001B40 ___fprintf_chk  endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    35h ; '5'
.plt:0000000000001B4B                 jmp     sub_17E0
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; int getaddrinfo(const char *name, const char *service, const struct addrinfo *req, struct addrinfo **pai)
.plt:0000000000001B50 _getaddrinfo    proc near               ; CODE XREF: canon_host_r+3C↓p
.plt:0000000000001B50                 jmp     cs:getaddrinfo_ptr
.plt:0000000000001B50 _getaddrinfo    endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    36h ; '6'
.plt:0000000000001B5B                 jmp     sub_17E0
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; char *strdup(const char *s)
.plt:0000000000001B60 _strdup         proc near               ; CODE XREF: canon_host_r+55↓p
.plt:0000000000001B60                 jmp     cs:strdup_ptr
.plt:0000000000001B60 _strdup         endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    37h ; '7'
.plt:0000000000001B6B                 jmp     sub_17E0
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001B70 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001B70                 jmp     cs:mbsinit_ptr
.plt:0000000000001B70 _mbsinit        endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    38h ; '8'
.plt:0000000000001B7B                 jmp     sub_17E0
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; int iswprint(wint_t wc)
.plt:0000000000001B80 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001B80                 jmp     cs:iswprint_ptr
.plt:0000000000001B80 _iswprint       endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    39h ; '9'
.plt:0000000000001B8B                 jmp     sub_17E0
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001B90 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001B90                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001B90 ___ctype_b_loc  endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    3Ah ; ':'
.plt:0000000000001B9B                 jmp     sub_17E0
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; void freeaddrinfo(struct addrinfo *ai)
.plt:0000000000001BA0 _freeaddrinfo   proc near               ; CODE XREF: canon_host_r+70↓p
.plt:0000000000001BA0                 jmp     cs:freeaddrinfo_ptr
.plt:0000000000001BA0 _freeaddrinfo   endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    3Bh ; ';'
.plt:0000000000001BAB                 jmp     sub_17E0
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ___sprintf_chk  proc near               ; CODE XREF: print_line+1F7↓p
.plt:0000000000001BB0                                         ; print_line+22D↓p ...
.plt:0000000000001BB0                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001BB0 ___sprintf_chk  endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    3Ch ; '<'
.plt:0000000000001BBB                 jmp     sub_17E0
.plt:0000000000001BBB ; } // starts at 17E0
.plt:0000000000001BBB _plt            ends
.plt:0000000000001BBB
.plt.got:0000000000001BC0 ; ===========================================================================
.plt.got:0000000000001BC0
.plt.got:0000000000001BC0 ; Segment type: Pure code
.plt.got:0000000000001BC0 ; Segment permissions: Read/Execute
.plt.got:0000000000001BC0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001BC0                 assume cs:_plt_got
.plt.got:0000000000001BC0                 ;org 1BC0h
.plt.got:0000000000001BC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001BC0
.plt.got:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001BC0
.plt.got:0000000000001BC0 ; Attributes: thunk
.plt.got:0000000000001BC0
.plt.got:0000000000001BC0 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001BC0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001BC0 ; __unwind {
.plt.got:0000000000001BC0                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001BC0 __cxa_finalize  endp
.plt.got:0000000000001BC0
.plt.got:0000000000001BC0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001BC6                 align 8
.plt.got:0000000000001BC6 ; } // starts at 1BC0
.plt.got:0000000000001BC6 _plt_got        ends
.plt.got:0000000000001BC6
LOAD:0000000000001BC8 ; ===========================================================================
LOAD:0000000000001BC8
LOAD:0000000000001BC8 ; Segment type: Pure code
LOAD:0000000000001BC8 ; Segment permissions: Read/Execute
LOAD:0000000000001BC8 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001BC8                 assume cs:LOAD
LOAD:0000000000001BC8                 ;org 1BC8h
LOAD:0000000000001BC8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001BC8                 align 10h
LOAD:0000000000001BC8 LOAD            ends
LOAD:0000000000001BC8
.text:0000000000001BD0 ; ===========================================================================
.text:0000000000001BD0
.text:0000000000001BD0 ; Segment type: Pure code
.text:0000000000001BD0 ; Segment permissions: Read/Execute
.text:0000000000001BD0 _text           segment para public 'CODE' use64
.text:0000000000001BD0                 assume cs:_text
.text:0000000000001BD0                 ;org 1BD0h
.text:0000000000001BD0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001BD0
.text:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BD0
.text:0000000000001BD0
.text:0000000000001BD0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001BD0                 public main
.text:0000000000001BD0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001BD0 ; __unwind {
.text:0000000000001BD0                 push    r12
.text:0000000000001BD2                 push    rbp
.text:0000000000001BD3                 mov     rbp, rsi
.text:0000000000001BD6                 push    rbx
.text:0000000000001BD7                 mov     ebx, edi
.text:0000000000001BD9                 mov     rdi, [rsi]
.text:0000000000001BDC                 mov     r12d, 1
.text:0000000000001BE2                 call    set_program_name
.text:0000000000001BE7                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001BEE                 mov     edi, 6          ; category
.text:0000000000001BF3                 call    _setlocale
.text:0000000000001BF8                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001BFF                 lea     rdi, domainname ; "coreutils"
.text:0000000000001C06                 call    _bindtextdomain
.text:0000000000001C0B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001C12                 call    _textdomain
.text:0000000000001C17                 lea     rdi, close_stdout
.text:0000000000001C1E                 call    atexit
.text:0000000000001C23                 nop     dword ptr [rax+rax+00h]
.text:0000000000001C28
.text:0000000000001C28 loc_1C28:                               ; CODE XREF: main+BA↓j
.text:0000000000001C28                                         ; main+F9↓j ...
.text:0000000000001C28                 lea     rcx, longopts   ; longopts
.text:0000000000001C2F                 lea     rdx, shortopts  ; "abdlmpqrstuwHT"
.text:0000000000001C36                 xor     r8d, r8d        ; longind
.text:0000000000001C39                 mov     rsi, rbp        ; argv
.text:0000000000001C3C                 mov     edi, ebx        ; argc
.text:0000000000001C3E                 call    _getopt_long
.text:0000000000001C43                 cmp     eax, 0FFFFFFFFh
.text:0000000000001C46                 jz      loc_1E55
.text:0000000000001C4C                 cmp     eax, 6Dh ; 'm'
.text:0000000000001C4F                 jz      loc_1D82
.text:0000000000001C55                 jle     short loc_1C90
.text:0000000000001C57                 cmp     eax, 73h ; 's'
.text:0000000000001C5A                 jz      loc_1D67
.text:0000000000001C60                 jle     short loc_1CD0
.text:0000000000001C62                 cmp     eax, 75h ; 'u'
.text:0000000000001C65                 jz      loc_1DA9
.text:0000000000001C6B                 jl      loc_1D9A
.text:0000000000001C71                 cmp     eax, 77h ; 'w'
.text:0000000000001C74                 jz      loc_1D8E
.text:0000000000001C7A                 add     eax, 0FFFFFF80h
.text:0000000000001C7D                 jnz     loc_1D0F
.text:0000000000001C83                 mov     cs:do_lookup, 1
.text:0000000000001C8A                 jmp     short loc_1C28
.text:0000000000001C8A ; ---------------------------------------------------------------------------
.text:0000000000001C8C                 align 10h
.text:0000000000001C90
.text:0000000000001C90 loc_1C90:                               ; CODE XREF: main+85↑j
.text:0000000000001C90                 cmp     eax, 54h ; 'T'
.text:0000000000001C93                 jz      loc_1D8E
.text:0000000000001C99                 jle     short loc_1CF8
.text:0000000000001C9B                 cmp     eax, 62h ; 'b'
.text:0000000000001C9E                 jz      loc_1D73
.text:0000000000001CA4                 jle     loc_1DDC
.text:0000000000001CAA                 cmp     eax, 64h ; 'd'
.text:0000000000001CAD                 jz      loc_1DBF
.text:0000000000001CB3                 cmp     eax, 6Ch ; 'l'
.text:0000000000001CB6                 jnz     short loc_1D0F
.text:0000000000001CB8                 mov     cs:need_login, 1
.text:0000000000001CBF                 mov     cs:include_idle, 1
.text:0000000000001CC6                 xor     r12d, r12d
.text:0000000000001CC9                 jmp     loc_1C28
.text:0000000000001CC9 ; ---------------------------------------------------------------------------
.text:0000000000001CCE                 align 10h
.text:0000000000001CD0
.text:0000000000001CD0 loc_1CD0:                               ; CODE XREF: main+90↑j
.text:0000000000001CD0                 cmp     eax, 71h ; 'q'
.text:0000000000001CD3                 jz      loc_1E49
.text:0000000000001CD9                 jg      loc_1E33
.text:0000000000001CDF                 cmp     eax, 70h ; 'p'
.text:0000000000001CE2                 jnz     short loc_1D0F
.text:0000000000001CE4                 mov     cs:need_initspawn, 1
.text:0000000000001CEB                 xor     r12d, r12d
.text:0000000000001CEE                 jmp     loc_1C28
.text:0000000000001CEE ; ---------------------------------------------------------------------------
.text:0000000000001CF3                 align 8
.text:0000000000001CF8
.text:0000000000001CF8 loc_1CF8:                               ; CODE XREF: main+C9↑j
.text:0000000000001CF8                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001CFD                 jz      loc_1F01
.text:0000000000001D03                 cmp     eax, 48h ; 'H'
.text:0000000000001D06                 jz      short loc_1D5B
.text:0000000000001D08                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001D0D                 jz      short loc_1D19
.text:0000000000001D0F
.text:0000000000001D0F loc_1D0F:                               ; CODE XREF: main+AD↑j
.text:0000000000001D0F                                         ; main+E6↑j ...
.text:0000000000001D0F                 mov     edi, 1          ; status
.text:0000000000001D14                 call    usage
.text:0000000000001D19 ; ---------------------------------------------------------------------------
.text:0000000000001D19
.text:0000000000001D19 loc_1D19:                               ; CODE XREF: main+13D↑j
.text:0000000000001D19                 lea     rax, aMichaelStone ; "Michael Stone"
.text:0000000000001D20                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D27                 mov     rcx, cs:Version
.text:0000000000001D2E                 push    0
.text:0000000000001D30                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001D37                 lea     r8, aJosephArceneau ; "Joseph Arceneaux"
.text:0000000000001D3E                 push    rax
.text:0000000000001D3F                 lea     rdx, unk_860A
.text:0000000000001D46                 lea     rsi, aWho       ; "who"
.text:0000000000001D4D                 xor     eax, eax
.text:0000000000001D4F                 call    version_etc
.text:0000000000001D54                 xor     edi, edi        ; status
.text:0000000000001D56                 call    _exit
.text:0000000000001D5B ; ---------------------------------------------------------------------------
.text:0000000000001D5B
.text:0000000000001D5B loc_1D5B:                               ; CODE XREF: main+136↑j
.text:0000000000001D5B                 mov     cs:include_heading, 1
.text:0000000000001D62                 jmp     loc_1C28
.text:0000000000001D67 ; ---------------------------------------------------------------------------
.text:0000000000001D67
.text:0000000000001D67 loc_1D67:                               ; CODE XREF: main+8A↑j
.text:0000000000001D67                 mov     cs:short_output, 1
.text:0000000000001D6E                 jmp     loc_1C28
.text:0000000000001D73 ; ---------------------------------------------------------------------------
.text:0000000000001D73
.text:0000000000001D73 loc_1D73:                               ; CODE XREF: main+CE↑j
.text:0000000000001D73                 mov     cs:need_boottime, 1
.text:0000000000001D7A                 xor     r12d, r12d
.text:0000000000001D7D                 jmp     loc_1C28
.text:0000000000001D82 ; ---------------------------------------------------------------------------
.text:0000000000001D82
.text:0000000000001D82 loc_1D82:                               ; CODE XREF: main+7F↑j
.text:0000000000001D82                 mov     cs:my_line_only, 1
.text:0000000000001D89                 jmp     loc_1C28
.text:0000000000001D8E ; ---------------------------------------------------------------------------
.text:0000000000001D8E
.text:0000000000001D8E loc_1D8E:                               ; CODE XREF: main+A4↑j
.text:0000000000001D8E                                         ; main+C3↑j
.text:0000000000001D8E                 mov     cs:include_mesg, 1
.text:0000000000001D95                 jmp     loc_1C28
.text:0000000000001D9A ; ---------------------------------------------------------------------------
.text:0000000000001D9A
.text:0000000000001D9A loc_1D9A:                               ; CODE XREF: main+9B↑j
.text:0000000000001D9A                 mov     cs:need_clockchange, 1
.text:0000000000001DA1                 xor     r12d, r12d
.text:0000000000001DA4                 jmp     loc_1C28
.text:0000000000001DA9 ; ---------------------------------------------------------------------------
.text:0000000000001DA9
.text:0000000000001DA9 loc_1DA9:                               ; CODE XREF: main+95↑j
.text:0000000000001DA9                 mov     cs:need_users, 1
.text:0000000000001DB0                 mov     cs:include_idle, 1
.text:0000000000001DB7                 xor     r12d, r12d
.text:0000000000001DBA                 jmp     loc_1C28
.text:0000000000001DBF ; ---------------------------------------------------------------------------
.text:0000000000001DBF
.text:0000000000001DBF loc_1DBF:                               ; CODE XREF: main+DD↑j
.text:0000000000001DBF                 mov     cs:need_deadprocs, 1
.text:0000000000001DC6                 mov     cs:include_idle, 1
.text:0000000000001DCD                 xor     r12d, r12d
.text:0000000000001DD0                 mov     cs:include_exit, 1
.text:0000000000001DD7                 jmp     loc_1C28
.text:0000000000001DDC ; ---------------------------------------------------------------------------
.text:0000000000001DDC
.text:0000000000001DDC loc_1DDC:                               ; CODE XREF: main+D4↑j
.text:0000000000001DDC                 cmp     eax, 61h ; 'a'
.text:0000000000001DDF                 jnz     loc_1D0F
.text:0000000000001DE5                 mov     cs:need_boottime, 1
.text:0000000000001DEC                 mov     cs:need_deadprocs, 1
.text:0000000000001DF3                 xor     r12d, r12d
.text:0000000000001DF6                 mov     cs:need_login, 1
.text:0000000000001DFD                 mov     cs:need_initspawn, 1
.text:0000000000001E04                 mov     cs:need_runlevel, 1
.text:0000000000001E0B                 mov     cs:need_clockchange, 1
.text:0000000000001E12                 mov     cs:need_users, 1
.text:0000000000001E19                 mov     cs:include_mesg, 1
.text:0000000000001E20                 mov     cs:include_idle, 1
.text:0000000000001E27                 mov     cs:include_exit, 1
.text:0000000000001E2E                 jmp     loc_1C28
.text:0000000000001E33 ; ---------------------------------------------------------------------------
.text:0000000000001E33
.text:0000000000001E33 loc_1E33:                               ; CODE XREF: main+109↑j
.text:0000000000001E33                 mov     cs:need_runlevel, 1
.text:0000000000001E3A                 mov     cs:include_idle, 1
.text:0000000000001E41                 xor     r12d, r12d
.text:0000000000001E44                 jmp     loc_1C28
.text:0000000000001E49 ; ---------------------------------------------------------------------------
.text:0000000000001E49
.text:0000000000001E49 loc_1E49:                               ; CODE XREF: main+103↑j
.text:0000000000001E49                 mov     cs:short_list, 1
.text:0000000000001E50                 jmp     loc_1C28
.text:0000000000001E55 ; ---------------------------------------------------------------------------
.text:0000000000001E55
.text:0000000000001E55 loc_1E55:                               ; CODE XREF: main+76↑j
.text:0000000000001E55                 test    r12b, r12b
.text:0000000000001E58                 jz      short loc_1E68
.text:0000000000001E5A                 mov     cs:need_users, 1
.text:0000000000001E61                 mov     cs:short_output, 1
.text:0000000000001E68
.text:0000000000001E68 loc_1E68:                               ; CODE XREF: main+288↑j
.text:0000000000001E68                 cmp     cs:include_exit, 0
.text:0000000000001E6F                 jz      short loc_1E78
.text:0000000000001E71                 mov     cs:short_output, 0
.text:0000000000001E78
.text:0000000000001E78 loc_1E78:                               ; CODE XREF: main+29F↑j
.text:0000000000001E78                 mov     edi, 2
.text:0000000000001E7D                 call    hard_locale
.text:0000000000001E82                 test    al, al
.text:0000000000001E84                 jnz     short loc_1ECB
.text:0000000000001E86                 lea     rax, aBEHM      ; "%b %e %H:%M"
.text:0000000000001E8D                 mov     cs:time_format_width, 0Ch
.text:0000000000001E97                 mov     cs:time_format, rax
.text:0000000000001E9E
.text:0000000000001E9E loc_1E9E:                               ; CODE XREF: main+313↓j
.text:0000000000001E9E                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001EA5                 sub     ebx, eax
.text:0000000000001EA7                 cmp     ebx, 1
.text:0000000000001EAA                 jz      short loc_1EF3
.text:0000000000001EAC                 jg      short loc_1EE5
.text:0000000000001EAE                 add     ebx, 1
.text:0000000000001EB1                 jl      short loc_1F08
.text:0000000000001EB3
.text:0000000000001EB3 loc_1EB3:                               ; CODE XREF: main+321↓j
.text:0000000000001EB3                 lea     rdi, aVarRunUtmp ; "/var/run/utmp"
.text:0000000000001EBA                 mov     esi, 1
.text:0000000000001EBF                 call    who
.text:0000000000001EC4
.text:0000000000001EC4 loc_1EC4:                               ; CODE XREF: main+32F↓j
.text:0000000000001EC4                 pop     rbx
.text:0000000000001EC5                 xor     eax, eax
.text:0000000000001EC7                 pop     rbp
.text:0000000000001EC8                 pop     r12
.text:0000000000001ECA                 retn
.text:0000000000001ECB ; ---------------------------------------------------------------------------
.text:0000000000001ECB
.text:0000000000001ECB loc_1ECB:                               ; CODE XREF: main+2B4↑j
.text:0000000000001ECB                 lea     rax, aYMDHM     ; "%Y-%m-%d %H:%M"
.text:0000000000001ED2                 mov     cs:time_format_width, 10h
.text:0000000000001EDC                 mov     cs:time_format, rax
.text:0000000000001EE3                 jmp     short loc_1E9E
.text:0000000000001EE5 ; ---------------------------------------------------------------------------
.text:0000000000001EE5
.text:0000000000001EE5 loc_1EE5:                               ; CODE XREF: main+2DC↑j
.text:0000000000001EE5                 cmp     ebx, 2
.text:0000000000001EE8                 jnz     short loc_1F08
.text:0000000000001EEA                 mov     cs:my_line_only, 1
.text:0000000000001EF1                 jmp     short loc_1EB3
.text:0000000000001EF3 ; ---------------------------------------------------------------------------
.text:0000000000001EF3
.text:0000000000001EF3 loc_1EF3:                               ; CODE XREF: main+2DA↑j
.text:0000000000001EF3                 mov     rdi, [rbp+rax*8+0]
.text:0000000000001EF8                 xor     esi, esi
.text:0000000000001EFA                 call    who
.text:0000000000001EFF                 jmp     short loc_1EC4
.text:0000000000001F01 ; ---------------------------------------------------------------------------
.text:0000000000001F01
.text:0000000000001F01 loc_1F01:                               ; CODE XREF: main+12D↑j
.text:0000000000001F01                 xor     edi, edi        ; status
.text:0000000000001F03                 call    usage
.text:0000000000001F08 ; ---------------------------------------------------------------------------
.text:0000000000001F08
.text:0000000000001F08 loc_1F08:                               ; CODE XREF: main+2E1↑j
.text:0000000000001F08                                         ; main+318↑j
.text:0000000000001F08                 mov     rdi, [rbp+rax*8+10h]
.text:0000000000001F0D                 call    quote
.text:0000000000001F12                 lea     rsi, msgid      ; "extra operand %s"
.text:0000000000001F19                 mov     rbx, rax
.text:0000000000001F1C                 xor     edi, edi        ; domainname
.text:0000000000001F1E                 mov     edx, 5          ; category
.text:0000000000001F23                 call    _dcgettext
.text:0000000000001F28                 mov     rcx, rbx
.text:0000000000001F2B                 mov     rdx, rax        ; format
.text:0000000000001F2E                 xor     esi, esi        ; errnum
.text:0000000000001F30                 xor     edi, edi        ; status
.text:0000000000001F32                 xor     eax, eax
.text:0000000000001F34                 call    _error
.text:0000000000001F39                 jmp     loc_1D0F
.text:0000000000001F39 ; } // starts at 1BD0
.text:0000000000001F39 main            endp
.text:0000000000001F39
.text:0000000000001F39 ; ---------------------------------------------------------------------------
.text:0000000000001F3E                 align 20h
.text:0000000000001F40
.text:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F40
.text:0000000000001F40 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001F40
.text:0000000000001F40 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001F40                 public start
.text:0000000000001F40 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001F40 ; __unwind {
.text:0000000000001F40                 xor     ebp, ebp
.text:0000000000001F42                 mov     r9, rdx         ; rtld_fini
.text:0000000000001F45                 pop     rsi             ; argc
.text:0000000000001F46                 mov     rdx, rsp        ; ubp_av
.text:0000000000001F49                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001F4D                 push    rax
.text:0000000000001F4E                 push    rsp             ; stack_end
.text:0000000000001F4F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001F56                 lea     rcx, __libc_csu_init ; init
.text:0000000000001F5D                 lea     rdi, main       ; main
.text:0000000000001F64                 call    cs:__libc_start_main_ptr
.text:0000000000001F6A                 hlt
.text:0000000000001F6A ; } // starts at 1F40
.text:0000000000001F6A start           endp
.text:0000000000001F6A
.text:0000000000001F6A ; ---------------------------------------------------------------------------
.text:0000000000001F6B                 align 10h
.text:0000000000001F70
.text:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F70
.text:0000000000001F70 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001F70
.text:0000000000001F70 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2023↓p
.text:0000000000001F70                 lea     rdi, __bss_start
.text:0000000000001F77                 push    rbp
.text:0000000000001F78                 lea     rax, __bss_start
.text:0000000000001F7F                 cmp     rax, rdi
.text:0000000000001F82                 mov     rbp, rsp
.text:0000000000001F85                 jz      short loc_1FA0
.text:0000000000001F87                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001F8E                 test    rax, rax
.text:0000000000001F91                 jz      short loc_1FA0
.text:0000000000001F93                 pop     rbp
.text:0000000000001F94                 jmp     rax
.text:0000000000001F94 ; ---------------------------------------------------------------------------
.text:0000000000001F96                 align 20h
.text:0000000000001FA0
.text:0000000000001FA0 loc_1FA0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001FA0                                         ; deregister_tm_clones+21↑j
.text:0000000000001FA0                 pop     rbp
.text:0000000000001FA1                 retn
.text:0000000000001FA1 deregister_tm_clones endp
.text:0000000000001FA1
.text:0000000000001FA1 ; ---------------------------------------------------------------------------
.text:0000000000001FA2                 align 10h
.text:0000000000001FB0
.text:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FB0
.text:0000000000001FB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001FB0
.text:0000000000001FB0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001FB0                 lea     rdi, __bss_start
.text:0000000000001FB7                 lea     rsi, __bss_start
.text:0000000000001FBE                 push    rbp
.text:0000000000001FBF                 sub     rsi, rdi
.text:0000000000001FC2                 mov     rbp, rsp
.text:0000000000001FC5                 sar     rsi, 3
.text:0000000000001FC9                 mov     rax, rsi
.text:0000000000001FCC                 shr     rax, 3Fh
.text:0000000000001FD0                 add     rsi, rax
.text:0000000000001FD3                 sar     rsi, 1
.text:0000000000001FD6                 jz      short loc_1FF0
.text:0000000000001FD8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001FDF                 test    rax, rax
.text:0000000000001FE2                 jz      short loc_1FF0
.text:0000000000001FE4                 pop     rbp
.text:0000000000001FE5                 jmp     rax
.text:0000000000001FE5 ; ---------------------------------------------------------------------------
.text:0000000000001FE7                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001FF0                                         ; register_tm_clones+32↑j
.text:0000000000001FF0                 pop     rbp
.text:0000000000001FF1                 retn
.text:0000000000001FF1 register_tm_clones endp
.text:0000000000001FF1
.text:0000000000001FF1 ; ---------------------------------------------------------------------------
.text:0000000000001FF2                 align 20h
.text:0000000000002000
.text:0000000000002000 ; =============== S U B R O U T I N E =======================================
.text:0000000000002000
.text:0000000000002000 ; Attributes: info_from_lumina
.text:0000000000002000
.text:0000000000002000 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002000                 cmp     cs:completed_7697, 0
.text:0000000000002007                 jnz     short locret_2038
.text:0000000000002009                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002011                 push    rbp
.text:0000000000002012                 mov     rbp, rsp
.text:0000000000002015                 jz      short loc_2023
.text:0000000000002017                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000201E                 call    __cxa_finalize
.text:0000000000002023
.text:0000000000002023 loc_2023:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002023                 call    deregister_tm_clones
.text:0000000000002028                 mov     cs:completed_7697, 1
.text:000000000000202F                 pop     rbp
.text:0000000000002030                 retn
.text:0000000000002030 ; ---------------------------------------------------------------------------
.text:0000000000002031                 align 8
.text:0000000000002038
.text:0000000000002038 locret_2038:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002038                 rep retn
.text:0000000000002038 __do_global_dtors_aux endp
.text:0000000000002038
.text:0000000000002038 ; ---------------------------------------------------------------------------
.text:000000000000203A                 align 20h
.text:0000000000002040
.text:0000000000002040 ; =============== S U B R O U T I N E =======================================
.text:0000000000002040
.text:0000000000002040 ; Attributes: bp-based frame
.text:0000000000002040
.text:0000000000002040 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002040                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002040                 push    rbp
.text:0000000000002041                 mov     rbp, rsp
.text:0000000000002044                 pop     rbp
.text:0000000000002045                 jmp     register_tm_clones
.text:0000000000002045 frame_dummy     endp
.text:0000000000002045
.text:0000000000002045 ; ---------------------------------------------------------------------------
.text:000000000000204A                 align 10h
.text:0000000000002050
.text:0000000000002050 ; =============== S U B R O U T I N E =======================================
.text:0000000000002050
.text:0000000000002050
.text:0000000000002050 ; __int64 __fastcall print_line(int, int, int, int, int, int, char *, char *s, __int64, __int64)
.text:0000000000002050 print_line      proc near               ; CODE XREF: print_user+223↓p
.text:0000000000002050                                         ; who+33F↓p ...
.text:0000000000002050
.text:0000000000002050 var_88          = dword ptr -88h
.text:0000000000002050 var_84          = dword ptr -84h
.text:0000000000002050 var_80          = qword ptr -80h
.text:0000000000002050 var_78          = qword ptr -78h
.text:0000000000002050 var_70          = qword ptr -70h
.text:0000000000002050 var_60          = qword ptr -60h
.text:0000000000002050 var_55          = byte ptr -55h
.text:0000000000002050 var_4D          = byte ptr -4Dh
.text:0000000000002050 var_40          = qword ptr -40h
.text:0000000000002050 arg_0           = qword ptr  8
.text:0000000000002050 s               = qword ptr  10h
.text:0000000000002050 arg_10          = qword ptr  18h
.text:0000000000002050 arg_18          = qword ptr  20h
.text:0000000000002050
.text:0000000000002050 ; __unwind {
.text:0000000000002050                 push    r15
.text:0000000000002052                 push    r14
.text:0000000000002054                 mov     r15, r8
.text:0000000000002057                 push    r13
.text:0000000000002059                 push    r12
.text:000000000000205B                 mov     r14, r9
.text:000000000000205E                 push    rbp
.text:000000000000205F                 push    rbx
.text:0000000000002060                 mov     rbx, rsi
.text:0000000000002063                 sub     rsp, 58h
.text:0000000000002067                 mov     cs:byte_20B019, dl
.text:000000000000206D                 movzx   r12d, cs:short_output
.text:0000000000002075                 mov     rax, [rsp+88h+arg_10]
.text:000000000000207D                 mov     [rsp+88h+var_88], edi
.text:0000000000002080                 mov     [rsp+88h+var_84], ecx
.text:0000000000002084                 mov     r8, [rsp+88h+arg_0]
.text:000000000000208C                 mov     rbp, [rsp+88h+s]
.text:0000000000002094                 mov     [rsp+88h+var_80], rax
.text:0000000000002099                 mov     rax, [rsp+88h+arg_18]
.text:00000000000020A1                 mov     [rsp+88h+var_78], rax
.text:00000000000020A6                 mov     rax, fs:28h
.text:00000000000020AF                 mov     [rsp+88h+var_40], rax
.text:00000000000020B4                 xor     eax, eax
.text:00000000000020B6                 cmp     cs:include_idle, 0
.text:00000000000020BD                 jz      short loc_20C8
.text:00000000000020BF                 test    r12b, r12b
.text:00000000000020C2                 jz      loc_2210
.text:00000000000020C8
.text:00000000000020C8 loc_20C8:                               ; CODE XREF: print_line+6D↑j
.text:00000000000020C8                                         ; print_line+1D6↓j
.text:00000000000020C8                 lea     r13, [rsp+88h+var_55]
.text:00000000000020CD                 mov     [rsp+88h+var_55], 0
.text:00000000000020D2
.text:00000000000020D2 loc_20D2:                               ; CODE XREF: print_line+204↓j
.text:00000000000020D2                 test    r12b, r12b
.text:00000000000020D5                 jnz     short loc_20E9
.text:00000000000020D7                 mov     rdi, rbp        ; s
.text:00000000000020DA                 call    _strlen
.text:00000000000020DF                 cmp     rax, 0Bh
.text:00000000000020E3                 jbe     loc_2290
.text:00000000000020E9
.text:00000000000020E9 loc_20E9:                               ; CODE XREF: print_line+85↑j
.text:00000000000020E9                 lea     r12, [rsp+88h+var_4D]
.text:00000000000020EE                 mov     [rsp+88h+var_4D], 0
.text:00000000000020F3
.text:00000000000020F3 loc_20F3:                               ; CODE XREF: print_line+263↓j
.text:00000000000020F3                 cmp     cs:include_exit, 0
.text:00000000000020FA                 mov     edi, 1
.text:00000000000020FF                 jz      short loc_211C
.text:0000000000002101                 mov     rdi, [rsp+88h+var_78] ; s
.text:0000000000002106                 call    _strlen
.text:000000000000210B                 lea     rdi, [rax+2]
.text:000000000000210F                 cmp     rax, 0Bh
.text:0000000000002113                 mov     eax, 0Eh
.text:0000000000002118                 cmovbe  rdi, rax
.text:000000000000211C
.text:000000000000211C loc_211C:                               ; CODE XREF: print_line+AF↑j
.text:000000000000211C                 call    xmalloc
.text:0000000000002121                 cmp     cs:include_exit, 0
.text:0000000000002128                 mov     rbp, rax
.text:000000000000212B                 jnz     loc_2260
.text:0000000000002131                 mov     byte ptr [rax], 0
.text:0000000000002134
.text:0000000000002134 loc_2134:                               ; CODE XREF: print_line+232↓j
.text:0000000000002134                 cmp     cs:include_mesg, 0
.text:000000000000213B                 lea     rax, mesg_7721
.text:0000000000002142                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002149                 lea     rdi, [rsp+88h+var_60]
.text:000000000000214E                 lea     rsi, a8SS12SSSS8sS ; "%-8.*s%s %-12.*s %-*s%s%s %-8s%s"
.text:0000000000002155                 cmovnz  r8, rax
.text:0000000000002159                 lea     rax, asc_8464   ; "   ."
.text:0000000000002160                 test    rbx, rbx
.text:0000000000002163                 cmovz   rbx, rax
.text:0000000000002167                 mov     eax, cs:time_format_width
.text:000000000000216D                 sub     rsp, 8
.text:0000000000002171                 push    rbp
.text:0000000000002172                 push    [rsp+98h+var_80]
.text:0000000000002176                 mov     rcx, rbx
.text:0000000000002179                 push    r12
.text:000000000000217B                 push    r13
.text:000000000000217D                 push    r14
.text:000000000000217F                 push    rax
.text:0000000000002180                 xor     eax, eax
.text:0000000000002182                 push    r15
.text:0000000000002184                 mov     r9d, [rsp+0C8h+var_84]
.text:0000000000002189                 mov     edx, [rsp+0C8h+var_88]
.text:000000000000218D                 call    gzprintf
.text:0000000000002192                 add     rsp, 40h
.text:0000000000002196                 cmp     eax, 0FFFFFFFFh
.text:0000000000002199                 jz      loc_22B8
.text:000000000000219F                 mov     rbx, [rsp+88h+var_60]
.text:00000000000021A4                 mov     rdi, rbx        ; s
.text:00000000000021A7                 call    _strlen
.text:00000000000021AC                 add     rax, rbx
.text:00000000000021AF                 jmp     short loc_21BB
.text:00000000000021AF ; ---------------------------------------------------------------------------
.text:00000000000021B1                 align 8
.text:00000000000021B8
.text:00000000000021B8 loc_21B8:                               ; CODE XREF: print_line+173↓j
.text:00000000000021B8                 mov     rax, rdx
.text:00000000000021BB
.text:00000000000021BB loc_21BB:                               ; CODE XREF: print_line+15F↑j
.text:00000000000021BB                 cmp     byte ptr [rax-1], 20h ; ' '
.text:00000000000021BF                 lea     rdx, [rax-1]
.text:00000000000021C3                 jz      short loc_21B8
.text:00000000000021C5                 mov     byte ptr [rax], 0
.text:00000000000021C8                 mov     rdi, [rsp+88h+var_60] ; s
.text:00000000000021CD                 call    _puts
.text:00000000000021D2                 mov     rdi, [rsp+88h+var_60] ; ptr
.text:00000000000021D7                 call    _free
.text:00000000000021DC                 mov     rax, [rsp+88h+var_40]
.text:00000000000021E1                 xor     rax, fs:28h
.text:00000000000021EA                 jnz     loc_22BD
.text:00000000000021F0                 add     rsp, 58h
.text:00000000000021F4                 mov     rdi, rbp        ; ptr
.text:00000000000021F7                 pop     rbx
.text:00000000000021F8                 pop     rbp
.text:00000000000021F9                 pop     r12
.text:00000000000021FB                 pop     r13
.text:00000000000021FD                 pop     r14
.text:00000000000021FF                 pop     r15
.text:0000000000002201                 jmp     _free
.text:0000000000002201 ; ---------------------------------------------------------------------------
.text:0000000000002206                 align 10h
.text:0000000000002210
.text:0000000000002210 loc_2210:                               ; CODE XREF: print_line+72↑j
.text:0000000000002210                 mov     rdi, r8         ; s
.text:0000000000002213                 mov     [rsp+88h+var_70], r8
.text:0000000000002218                 call    _strlen
.text:000000000000221D                 cmp     rax, 6
.text:0000000000002221                 mov     r8, [rsp+88h+var_70]
.text:0000000000002226                 ja      loc_20C8
.text:000000000000222C                 lea     r13, [rsp+88h+var_55]
.text:0000000000002231                 lea     rcx, a6s        ; " %-6s"
.text:0000000000002238                 mov     edx, 8
.text:000000000000223D                 mov     esi, 1
.text:0000000000002242                 xor     eax, eax
.text:0000000000002244                 mov     rdi, r13
.text:0000000000002247                 call    ___sprintf_chk
.text:000000000000224C                 movzx   r12d, cs:short_output
.text:0000000000002254                 jmp     loc_20D2
.text:0000000000002254 ; ---------------------------------------------------------------------------
.text:0000000000002259                 align 20h
.text:0000000000002260
.text:0000000000002260 loc_2260:                               ; CODE XREF: print_line+DB↑j
.text:0000000000002260                 mov     r8, [rsp+88h+var_78]
.text:0000000000002265                 lea     rcx, a12s       ; " %-12s"
.text:000000000000226C                 mov     rdi, rax
.text:000000000000226F                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002276                 mov     esi, 1
.text:000000000000227B                 xor     eax, eax
.text:000000000000227D                 call    ___sprintf_chk
.text:0000000000002282                 jmp     loc_2134
.text:0000000000002282 ; ---------------------------------------------------------------------------
.text:0000000000002287                 align 10h
.text:0000000000002290
.text:0000000000002290 loc_2290:                               ; CODE XREF: print_line+93↑j
.text:0000000000002290                 lea     r12, [rsp+88h+var_4D]
.text:0000000000002295                 lea     rcx, a10s       ; " %10s"
.text:000000000000229C                 mov     r8, rbp
.text:000000000000229F                 mov     edx, 0Dh
.text:00000000000022A4                 mov     esi, 1
.text:00000000000022A9                 xor     eax, eax
.text:00000000000022AB                 mov     rdi, r12
.text:00000000000022AE                 call    ___sprintf_chk
.text:00000000000022B3                 jmp     loc_20F3
.text:00000000000022B8 ; ---------------------------------------------------------------------------
.text:00000000000022B8
.text:00000000000022B8 loc_22B8:                               ; CODE XREF: print_line+149↑j
.text:00000000000022B8                 call    xalloc_die
.text:00000000000022BD ; ---------------------------------------------------------------------------
.text:00000000000022BD
.text:00000000000022BD loc_22BD:                               ; CODE XREF: print_line+19A↑j
.text:00000000000022BD                 call    ___stack_chk_fail
.text:00000000000022BD ; } // starts at 2050
.text:00000000000022BD print_line      endp
.text:00000000000022BD
.text:00000000000022BD ; ---------------------------------------------------------------------------
.text:00000000000022C2                 align 10h
.text:00000000000022D0
.text:00000000000022D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022D0
.text:00000000000022D0
.text:00000000000022D0 make_id_equals_comment proc near        ; CODE XREF: who+4BF↓p
.text:00000000000022D0                                         ; who+534↓p ...
.text:00000000000022D0 ; __unwind {
.text:00000000000022D0                 push    rbp
.text:00000000000022D1                 push    rbx
.text:00000000000022D2                 lea     rsi, aId        ; "id="
.text:00000000000022D9                 mov     edx, 5          ; category
.text:00000000000022DE                 mov     rbp, rdi
.text:00000000000022E1                 xor     edi, edi        ; domainname
.text:00000000000022E3                 sub     rsp, 8
.text:00000000000022E7                 call    _dcgettext
.text:00000000000022EC                 mov     rdi, rax        ; s
.text:00000000000022EF                 call    _strlen
.text:00000000000022F4                 lea     rdi, [rax+5]
.text:00000000000022F8                 call    xmalloc
.text:00000000000022FD                 lea     rsi, aId        ; "id="
.text:0000000000002304                 mov     rbx, rax
.text:0000000000002307                 mov     edx, 5          ; category
.text:000000000000230C                 xor     edi, edi        ; domainname
.text:000000000000230E                 call    _dcgettext
.text:0000000000002313                 mov     rdi, rbx        ; dest
.text:0000000000002316                 mov     rsi, rax        ; src
.text:0000000000002319                 call    _strcpy
.text:000000000000231E                 lea     rsi, [rbp+28h]  ; src
.text:0000000000002322                 mov     rdi, rbx        ; dest
.text:0000000000002325                 mov     edx, 4          ; n
.text:000000000000232A                 call    _strncat
.text:000000000000232F                 add     rsp, 8
.text:0000000000002333                 pop     rbx
.text:0000000000002334                 pop     rbp
.text:0000000000002335                 retn
.text:0000000000002335 ; } // starts at 22D0
.text:0000000000002335 make_id_equals_comment endp
.text:0000000000002335
.text:0000000000002335 ; ---------------------------------------------------------------------------
.text:0000000000002336                 align 20h
.text:0000000000002340
.text:0000000000002340 ; =============== S U B R O U T I N E =======================================
.text:0000000000002340
.text:0000000000002340
.text:0000000000002340 time_string_isra_1 proc near            ; CODE XREF: print_user+1FF↓p
.text:0000000000002340                                         ; who+31E↓p ...
.text:0000000000002340
.text:0000000000002340 var_18          = qword ptr -18h
.text:0000000000002340 var_10          = qword ptr -10h
.text:0000000000002340
.text:0000000000002340 ; __unwind {
.text:0000000000002340                 sub     rsp, 18h
.text:0000000000002344                 movsxd  rdi, edi
.text:0000000000002347                 mov     [rsp+18h+var_18], rdi
.text:000000000000234B                 mov     rdi, rsp        ; timer
.text:000000000000234E                 mov     rax, fs:28h
.text:0000000000002357                 mov     [rsp+18h+var_10], rax
.text:000000000000235C                 xor     eax, eax
.text:000000000000235E                 call    _localtime
.text:0000000000002363                 test    rax, rax
.text:0000000000002366                 jz      short loc_23A0
.text:0000000000002368                 mov     rdx, cs:time_format ; format
.text:000000000000236F                 lea     rdi, buf_7706   ; s
.text:0000000000002376                 mov     rcx, rax        ; tp
.text:0000000000002379                 mov     esi, 21h ; '!'  ; maxsize
.text:000000000000237E                 call    _strftime
.text:0000000000002383                 lea     rax, buf_7706
.text:000000000000238A
.text:000000000000238A loc_238A:                               ; CODE XREF: time_string_isra_1+70↓j
.text:000000000000238A                 mov     rdx, [rsp+18h+var_10]
.text:000000000000238F                 xor     rdx, fs:28h
.text:0000000000002398                 jnz     short loc_23B2
.text:000000000000239A                 add     rsp, 18h
.text:000000000000239E                 retn
.text:000000000000239E ; ---------------------------------------------------------------------------
.text:000000000000239F                 align 20h
.text:00000000000023A0
.text:00000000000023A0 loc_23A0:                               ; CODE XREF: time_string_isra_1+26↑j
.text:00000000000023A0                 mov     rdi, [rsp+18h+var_18]
.text:00000000000023A4                 lea     rsi, buf_7706
.text:00000000000023AB                 call    imaxtostr
.text:00000000000023B0                 jmp     short loc_238A
.text:00000000000023B2 ; ---------------------------------------------------------------------------
.text:00000000000023B2
.text:00000000000023B2 loc_23B2:                               ; CODE XREF: time_string_isra_1+58↑j
.text:00000000000023B2                 call    ___stack_chk_fail
.text:00000000000023B2 ; } // starts at 2340
.text:00000000000023B2 time_string_isra_1 endp
.text:00000000000023B2
.text:00000000000023B2 ; ---------------------------------------------------------------------------
.text:00000000000023B7                 align 20h
.text:00000000000023C0
.text:00000000000023C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023C0
.text:00000000000023C0
.text:00000000000023C0 print_user      proc near               ; CODE XREF: who+6A7↓p
.text:00000000000023C0
.text:00000000000023C0 var_24C         = dword ptr -24Ch
.text:00000000000023C0 var_248         = qword ptr -248h
.text:00000000000023C0 var_240         = qword ptr -240h
.text:00000000000023C0 ptr             = qword ptr -238h
.text:00000000000023C0 var_230         = qword ptr -230h
.text:00000000000023C0 stat_buf        = stat ptr -228h
.text:00000000000023C0 var_18B         = byte ptr -18Bh
.text:00000000000023C0 var_184         = byte ptr -184h
.text:00000000000023C0 filename        = byte ptr -178h
.text:00000000000023C0 var_174         = word ptr -174h
.text:00000000000023C0 s               = byte ptr -148h
.text:00000000000023C0 var_40          = qword ptr -40h
.text:00000000000023C0
.text:00000000000023C0 ; __unwind {
.text:00000000000023C0                 push    r15
.text:00000000000023C2                 push    r14
.text:00000000000023C4                 lea     rcx, aLd        ; "%ld"
.text:00000000000023CB                 push    r13
.text:00000000000023CD                 push    r12
.text:00000000000023CF                 mov     edx, 0Ch
.text:00000000000023D4                 push    rbp
.text:00000000000023D5                 push    rbx
.text:00000000000023D6                 mov     r12, rsi
.text:00000000000023D9                 mov     rbx, rdi
.text:00000000000023DC                 mov     esi, 1
.text:00000000000023E1                 sub     rsp, 228h
.text:00000000000023E8                 movsxd  r8, dword ptr [rdi+4]
.text:00000000000023EC                 lea     rbp, [rsp+258h+var_184]
.text:00000000000023F4                 mov     rax, fs:28h
.text:00000000000023FD                 mov     [rsp+258h+var_40], rax
.text:0000000000002405                 xor     eax, eax
.text:0000000000002407                 mov     rdi, rbp
.text:000000000000240A                 call    ___sprintf_chk
.text:000000000000240F                 movzx   ecx, byte ptr [rbx+8]
.text:0000000000002413                 cmp     cl, 2Fh ; '/'
.text:0000000000002416                 jnz     loc_26D0
.text:000000000000241C                 lea     rax, [rbx+8]
.text:0000000000002420                 lea     rsi, [rsp+258h+filename] ; filename
.text:0000000000002428                 lea     rdi, [rbx+28h]
.text:000000000000242C                 mov     r15, rax
.text:000000000000242F                 mov     rdx, rsi
.text:0000000000002432                 jmp     short loc_243F
.text:0000000000002432 ; ---------------------------------------------------------------------------
.text:0000000000002434                 align 8
.text:0000000000002438
.text:0000000000002438 loc_2438:                               ; CODE XREF: print_user+8D↓j
.text:0000000000002438                 movzx   ecx, byte ptr [rax]
.text:000000000000243B                 test    cl, cl
.text:000000000000243D                 jz      short loc_244F
.text:000000000000243F
.text:000000000000243F loc_243F:                               ; CODE XREF: print_user+72↑j
.text:000000000000243F                                         ; print_user+341↓j
.text:000000000000243F                 add     rax, 1
.text:0000000000002443                 add     rdx, 1
.text:0000000000002447                 mov     [rdx-1], cl
.text:000000000000244A                 cmp     rdi, rax
.text:000000000000244D                 ja      short loc_2438
.text:000000000000244F
.text:000000000000244F loc_244F:                               ; CODE XREF: print_user+7D↑j
.text:000000000000244F                                         ; print_user+347↓j
.text:000000000000244F                 mov     byte ptr [rdx], 0
.text:0000000000002452                 lea     rdx, [rsp+258h+stat_buf] ; stat_buf
.text:0000000000002457                 mov     edi, 1          ; ver
.text:000000000000245C                 call    ___xstat
.text:0000000000002461                 test    eax, eax
.text:0000000000002463                 jnz     loc_2710
.text:0000000000002469                 mov     eax, [rsp+258h+stat_buf.st_mode]
.text:000000000000246D                 mov     r14, [rsp+258h+stat_buf.st_atim.tv_sec]
.text:0000000000002472                 and     eax, 10h
.text:0000000000002475                 cmp     eax, 1
.text:0000000000002478                 sbb     r13d, r13d
.text:000000000000247B                 and     r13d, 2
.text:000000000000247F                 add     r13d, 2Bh ; '+'
.text:0000000000002483                 test    r14, r14
.text:0000000000002486                 jnz     loc_2618
.text:000000000000248C                 movsx   eax, r13b
.text:0000000000002490                 mov     [rsp+258h+var_24C], eax
.text:0000000000002494
.text:0000000000002494 loc_2494:                               ; CODE XREF: print_user+358↓j
.text:0000000000002494                 movzx   edx, byte ptr [rbx+4Ch]
.text:0000000000002498                 mov     dword ptr [rsp+258h+var_18B], 3F2020h
.text:00000000000024A3                 lea     r14, [rsp+258h+var_18B]
.text:00000000000024AB                 test    dl, dl
.text:00000000000024AD                 jz      loc_26A3
.text:00000000000024B3
.text:00000000000024B3 loc_24B3:                               ; CODE XREF: print_user+2DD↓j
.text:00000000000024B3                 lea     r12, [rsp+258h+s]
.text:00000000000024BB                 lea     rax, [rbx+4Ch]
.text:00000000000024BF                 lea     rsi, [rbx+14Ch]
.text:00000000000024C6                 mov     rcx, r12
.text:00000000000024C9                 jmp     short loc_24D7
.text:00000000000024C9 ; ---------------------------------------------------------------------------
.text:00000000000024CB                 align 10h
.text:00000000000024D0
.text:00000000000024D0 loc_24D0:                               ; CODE XREF: print_user+125↓j
.text:00000000000024D0                 movzx   edx, byte ptr [rax]
.text:00000000000024D3                 test    dl, dl
.text:00000000000024D5                 jz      short loc_24E7
.text:00000000000024D7
.text:00000000000024D7 loc_24D7:                               ; CODE XREF: print_user+109↑j
.text:00000000000024D7                 add     rax, 1
.text:00000000000024DB                 add     rcx, 1
.text:00000000000024DF                 mov     [rcx-1], dl
.text:00000000000024E2                 cmp     rsi, rax
.text:00000000000024E5                 ja      short loc_24D0
.text:00000000000024E7
.text:00000000000024E7 loc_24E7:                               ; CODE XREF: print_user+115↑j
.text:00000000000024E7                 mov     byte ptr [rcx], 0
.text:00000000000024EA                 mov     esi, 3Ah ; ':'  ; c
.text:00000000000024EF                 mov     rdi, r12        ; s
.text:00000000000024F2                 call    _strchr
.text:00000000000024F7                 test    rax, rax
.text:00000000000024FA                 jz      loc_2778
.text:0000000000002500                 mov     byte ptr [rax], 0
.text:0000000000002503                 cmp     [rsp+258h+s], 0
.text:000000000000250B                 lea     rsi, [rax+1]
.text:000000000000250F                 mov     r13, r12
.text:0000000000002512                 mov     [rsp+258h+var_248], rsi
.text:0000000000002517                 jnz     loc_2720
.text:000000000000251D
.text:000000000000251D loc_251D:                               ; CODE XREF: print_user+367↓j
.text:000000000000251D                                         ; print_user+37F↓j
.text:000000000000251D                 mov     rdi, r13        ; s
.text:0000000000002520                 call    _strlen
.text:0000000000002525                 mov     rdi, [rsp+258h+var_248] ; s
.text:000000000000252A                 mov     [rsp+258h+var_230], rax
.text:000000000000252F                 mov     rcx, cs:hostlen_7743
.text:0000000000002536                 mov     r10, cs:hoststr_7742
.text:000000000000253D                 test    rdi, rdi
.text:0000000000002540                 jz      loc_27DD
.text:0000000000002546                 mov     [rsp+258h+ptr], r10
.text:000000000000254B                 mov     [rsp+258h+var_240], rcx
.text:0000000000002550                 call    _strlen
.text:0000000000002555                 mov     rdx, [rsp+258h+var_230]
.text:000000000000255A                 mov     rcx, [rsp+258h+var_240]
.text:000000000000255F                 mov     r10, [rsp+258h+ptr]
.text:0000000000002564                 lea     rax, [rdx+rax+4]
.text:0000000000002569                 cmp     rax, rcx
.text:000000000000256C                 ja      loc_2810
.text:0000000000002572
.text:0000000000002572 loc_2572:                               ; CODE XREF: print_user+47B↓j
.text:0000000000002572                 mov     r9, [rsp+258h+var_248]
.text:0000000000002577                 lea     rcx, aSS        ; "(%s:%s)"
.text:000000000000257E                 mov     r8, r13
.text:0000000000002581                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002588                 mov     esi, 1
.text:000000000000258D                 mov     rdi, r10
.text:0000000000002590                 xor     eax, eax
.text:0000000000002592                 call    ___sprintf_chk
.text:0000000000002597
.text:0000000000002597 loc_2597:                               ; CODE XREF: print_user+446↓j
.text:0000000000002597                 cmp     r13, r12
.text:000000000000259A                 jz      short loc_25A4
.text:000000000000259C                 mov     rdi, r13        ; ptr
.text:000000000000259F                 call    _free
.text:00000000000025A4
.text:00000000000025A4 loc_25A4:                               ; CODE XREF: print_user+1DA↑j
.text:00000000000025A4                 mov     r12, cs:hoststr_7742
.text:00000000000025AB                 lea     r13, aWrittenBySSAnd+1Bh ; ""
.text:00000000000025B2                 test    r12, r12
.text:00000000000025B5                 cmovz   r12, r13
.text:00000000000025B9
.text:00000000000025B9 loc_25B9:                               ; CODE XREF: print_user+304↓j
.text:00000000000025B9                 mov     edi, [rbx+154h]
.text:00000000000025BF                 call    time_string_isra_1
.text:00000000000025C4                 push    r13             ; __int64
.text:00000000000025C6                 push    r12             ; __int64
.text:00000000000025C8                 lea     rsi, [rbx+2Ch]  ; int
.text:00000000000025CC                 push    rbp             ; s
.text:00000000000025CD                 push    r14             ; char *
.text:00000000000025CF                 mov     r9, rax         ; int
.text:00000000000025D2                 mov     edx, [rsp+278h+var_24C] ; int
.text:00000000000025D6                 mov     r8, r15         ; int
.text:00000000000025D9                 mov     ecx, 20h ; ' '  ; int
.text:00000000000025DE                 mov     edi, 20h ; ' '  ; int
.text:00000000000025E3                 call    print_line
.text:00000000000025E8                 add     rsp, 20h
.text:00000000000025EC                 mov     rax, [rsp+258h+var_40]
.text:00000000000025F4                 xor     rax, fs:28h
.text:00000000000025FD                 jnz     loc_294E
.text:0000000000002603                 add     rsp, 228h
.text:000000000000260A                 pop     rbx
.text:000000000000260B                 pop     rbp
.text:000000000000260C                 pop     r12
.text:000000000000260E                 pop     r13
.text:0000000000002610                 pop     r14
.text:0000000000002612                 pop     r15
.text:0000000000002614                 retn
.text:0000000000002614 ; ---------------------------------------------------------------------------
.text:0000000000002615                 align 8
.text:0000000000002618
.text:0000000000002618 loc_2618:                               ; CODE XREF: print_user+C6↑j
.text:0000000000002618                 mov     rax, 8000000000000000h
.text:0000000000002622                 cmp     cs:now_7699, rax
.text:0000000000002629                 jz      loc_2840
.text:000000000000262F
.text:000000000000262F loc_262F:                               ; CODE XREF: print_user+48C↓j
.text:000000000000262F                 cmp     r14, r12
.text:0000000000002632                 jle     short loc_2650
.text:0000000000002634                 mov     rax, cs:now_7699
.text:000000000000263B                 lea     rdx, [rax-1517Fh]
.text:0000000000002642                 cmp     r14, rdx
.text:0000000000002645                 jl      short loc_2650
.text:0000000000002647                 cmp     r14, rax
.text:000000000000264A                 jle     loc_2881
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: print_user+272↑j
.text:0000000000002650                                         ; print_user+285↑j
.text:0000000000002650                 lea     rsi, aOld       ; " old "
.text:0000000000002657                 mov     edx, 5          ; category
.text:000000000000265C                 xor     edi, edi        ; domainname
.text:000000000000265E                 call    _dcgettext
.text:0000000000002663                 mov     r9, rax
.text:0000000000002666
.text:0000000000002666 loc_2666:                               ; CODE XREF: print_user+532↓j
.text:0000000000002666                                         ; print_user+569↓j
.text:0000000000002666                 lea     r14, [rsp+258h+var_18B]
.text:000000000000266E                 lea     rcx, aS         ; "%.*s"
.text:0000000000002675                 mov     edx, 7
.text:000000000000267A                 xor     eax, eax
.text:000000000000267C                 mov     r8d, 6
.text:0000000000002682                 mov     esi, 1
.text:0000000000002687                 mov     rdi, r14
.text:000000000000268A                 call    ___sprintf_chk
.text:000000000000268F                 movzx   edx, byte ptr [rbx+4Ch]
.text:0000000000002693                 movsx   eax, r13b
.text:0000000000002697                 mov     [rsp+258h+var_24C], eax
.text:000000000000269B                 test    dl, dl
.text:000000000000269D                 jnz     loc_24B3
.text:00000000000026A3
.text:00000000000026A3 loc_26A3:                               ; CODE XREF: print_user+ED↑j
.text:00000000000026A3                 cmp     cs:hostlen_7743, 0
.text:00000000000026AB                 mov     r12, cs:hoststr_7742
.text:00000000000026B2                 jz      loc_2748
.text:00000000000026B8
.text:00000000000026B8 loc_26B8:                               ; CODE XREF: print_user+3AF↓j
.text:00000000000026B8                 mov     byte ptr [r12], 0
.text:00000000000026BD                 lea     r13, aWrittenBySSAnd+1Bh ; ""
.text:00000000000026C4                 jmp     loc_25B9
.text:00000000000026C4 ; ---------------------------------------------------------------------------
.text:00000000000026C9                 align 10h
.text:00000000000026D0
.text:00000000000026D0 loc_26D0:                               ; CODE XREF: print_user+56↑j
.text:00000000000026D0                 mov     eax, 2Fh ; '/'
.text:00000000000026D5                 lea     rsi, [rsp+258h+filename]
.text:00000000000026DD                 test    cl, cl
.text:00000000000026DF                 mov     [rsp+258h+var_174], ax
.text:00000000000026E7                 lea     rax, [rbx+8]
.text:00000000000026EB                 mov     dword ptr [rsp+258h+filename], 7665642Fh
.text:00000000000026F6                 lea     rdi, [rbx+28h]
.text:00000000000026FA                 lea     rdx, [rsi+5]
.text:00000000000026FE                 mov     r15, rax
.text:0000000000002701                 jnz     loc_243F
.text:0000000000002707                 jmp     loc_244F
.text:0000000000002707 ; ---------------------------------------------------------------------------
.text:000000000000270C                 align 10h
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: print_user+A3↑j
.text:0000000000002710                 mov     [rsp+258h+var_24C], 3Fh ; '?'
.text:0000000000002718                 jmp     loc_2494
.text:0000000000002718 ; ---------------------------------------------------------------------------
.text:000000000000271D                 align 20h
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: print_user+157↑j
.text:0000000000002720                 cmp     cs:do_lookup, 0
.text:0000000000002727                 jz      loc_251D
.text:000000000000272D                 mov     rdi, r12
.text:0000000000002730                 call    canon_host
.text:0000000000002735                 mov     r13, rax
.text:0000000000002738                 test    rax, rax
.text:000000000000273B                 cmovz   r13, r12
.text:000000000000273F                 jmp     loc_251D
.text:000000000000273F ; ---------------------------------------------------------------------------
.text:0000000000002744                 align 8
.text:0000000000002748
.text:0000000000002748 loc_2748:                               ; CODE XREF: print_user+2F2↑j
.text:0000000000002748                 mov     rdi, r12        ; ptr
.text:000000000000274B                 mov     cs:hostlen_7743, 1
.text:0000000000002756                 call    _free
.text:000000000000275B                 mov     edi, 1
.text:0000000000002760                 call    xmalloc
.text:0000000000002765                 mov     r12, rax
.text:0000000000002768                 mov     cs:hoststr_7742, rax
.text:000000000000276F                 jmp     loc_26B8
.text:000000000000276F ; ---------------------------------------------------------------------------
.text:0000000000002774                 align 8
.text:0000000000002778
.text:0000000000002778 loc_2778:                               ; CODE XREF: print_user+13A↑j
.text:0000000000002778                 cmp     [rsp+258h+s], 0
.text:0000000000002780                 jz      short loc_278F
.text:0000000000002782                 cmp     cs:do_lookup, 0
.text:0000000000002789                 jnz     loc_28F7
.text:000000000000278F
.text:000000000000278F loc_278F:                               ; CODE XREF: print_user+3C0↑j
.text:000000000000278F                 mov     rax, r12
.text:0000000000002792
.text:0000000000002792 loc_2792:                               ; CODE XREF: print_user+3E8↓j
.text:0000000000002792                 mov     ecx, [rax]
.text:0000000000002794                 add     rax, 4
.text:0000000000002798                 lea     edx, [rcx-1010101h]
.text:000000000000279E                 not     ecx
.text:00000000000027A0                 and     edx, ecx
.text:00000000000027A2                 and     edx, 80808080h
.text:00000000000027A8                 jz      short loc_2792
.text:00000000000027AA
.text:00000000000027AA loc_27AA:                               ; CODE XREF: print_user+589↓j
.text:00000000000027AA                 mov     ecx, edx
.text:00000000000027AC                 mov     r10, cs:hoststr_7742
.text:00000000000027B3                 mov     r13, r12
.text:00000000000027B6                 shr     ecx, 10h
.text:00000000000027B9                 test    edx, 8080h
.text:00000000000027BF                 cmovz   edx, ecx
.text:00000000000027C2                 lea     rcx, [rax+2]
.text:00000000000027C6                 mov     esi, edx
.text:00000000000027C8                 cmovz   rax, rcx
.text:00000000000027CC                 add     sil, dl
.text:00000000000027CF                 mov     rcx, cs:hostlen_7743
.text:00000000000027D6                 sbb     rax, 3
.text:00000000000027DA                 sub     rax, r12
.text:00000000000027DD
.text:00000000000027DD loc_27DD:                               ; CODE XREF: print_user+180↑j
.text:00000000000027DD                                         ; print_user+55D↓j
.text:00000000000027DD                 add     rax, 3
.text:00000000000027E1                 cmp     rax, rcx
.text:00000000000027E4                 ja      short loc_2851
.text:00000000000027E6
.text:00000000000027E6 loc_27E6:                               ; CODE XREF: print_user+4BC↓j
.text:00000000000027E6                 lea     rcx, aS_0       ; "(%s)"
.text:00000000000027ED                 mov     r8, r13
.text:00000000000027F0                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000027F7                 mov     esi, 1
.text:00000000000027FC                 mov     rdi, r10
.text:00000000000027FF                 xor     eax, eax
.text:0000000000002801                 call    ___sprintf_chk
.text:0000000000002806                 jmp     loc_2597
.text:0000000000002806 ; ---------------------------------------------------------------------------
.text:000000000000280B                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: print_user+1AC↑j
.text:0000000000002810                 mov     rdi, r10        ; ptr
.text:0000000000002813                 mov     cs:hostlen_7743, rax
.text:000000000000281A                 mov     [rsp+258h+var_240], rax
.text:000000000000281F                 call    _free
.text:0000000000002824                 mov     rax, [rsp+258h+var_240]
.text:0000000000002829                 mov     rdi, rax
.text:000000000000282C                 call    xmalloc
.text:0000000000002831                 mov     r10, rax
.text:0000000000002834                 mov     cs:hoststr_7742, rax
.text:000000000000283B                 jmp     loc_2572
.text:0000000000002840 ; ---------------------------------------------------------------------------
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: print_user+269↑j
.text:0000000000002840                 lea     rdi, now_7699   ; timer
.text:0000000000002847                 call    _time
.text:000000000000284C                 jmp     loc_262F
.text:0000000000002851 ; ---------------------------------------------------------------------------
.text:0000000000002851
.text:0000000000002851 loc_2851:                               ; CODE XREF: print_user+424↑j
.text:0000000000002851                 mov     rdi, r10        ; ptr
.text:0000000000002854                 mov     cs:hostlen_7743, rax
.text:000000000000285B                 mov     [rsp+258h+var_248], rax
.text:0000000000002860                 call    _free
.text:0000000000002865                 mov     rax, [rsp+258h+var_248]
.text:000000000000286A                 mov     rdi, rax
.text:000000000000286D                 call    xmalloc
.text:0000000000002872                 mov     r10, rax
.text:0000000000002875                 mov     cs:hoststr_7742, rax
.text:000000000000287C                 jmp     loc_27E6
.text:0000000000002881 ; ---------------------------------------------------------------------------
.text:0000000000002881
.text:0000000000002881 loc_2881:                               ; CODE XREF: print_user+28A↑j
.text:0000000000002881                 mov     ecx, eax
.text:0000000000002883                 sub     ecx, r14d
.text:0000000000002886                 cmp     ecx, 3Bh ; ';'
.text:0000000000002889                 jle     loc_2922
.text:000000000000288F                 cmp     ecx, 1517Fh
.text:0000000000002895                 jg      loc_2953
.text:000000000000289B                 mov     eax, ecx
.text:000000000000289D                 mov     edx, 91A2B3C5h
.text:00000000000028A2                 lea     rdi, idle_hhmm_7701
.text:00000000000028A9                 imul    edx
.text:00000000000028AB                 mov     eax, ecx
.text:00000000000028AD                 mov     esi, 1
.text:00000000000028B2                 sar     eax, 1Fh
.text:00000000000028B5                 lea     r8d, [rdx+rcx]
.text:00000000000028B9                 mov     edx, 88888889h
.text:00000000000028BE                 sar     r8d, 0Bh
.text:00000000000028C2                 sub     r8d, eax
.text:00000000000028C5                 imul    eax, r8d, 0E10h
.text:00000000000028CC                 sub     ecx, eax
.text:00000000000028CE                 mov     eax, ecx
.text:00000000000028D0                 lea     rcx, a02d02d    ; "%02d:%02d"
.text:00000000000028D7                 mul     edx
.text:00000000000028D9                 xor     eax, eax
.text:00000000000028DB                 shr     edx, 5
.text:00000000000028DE                 mov     r9d, edx
.text:00000000000028E1                 mov     edx, 6
.text:00000000000028E6                 call    ___sprintf_chk
.text:00000000000028EB                 lea     r9, idle_hhmm_7701
.text:00000000000028F2                 jmp     loc_2666
.text:00000000000028F7 ; ---------------------------------------------------------------------------
.text:00000000000028F7
.text:00000000000028F7 loc_28F7:                               ; CODE XREF: print_user+3C9↑j
.text:00000000000028F7                 mov     rdi, r12
.text:00000000000028FA                 call    canon_host
.text:00000000000028FF                 test    rax, rax
.text:0000000000002902                 mov     r13, rax
.text:0000000000002905                 jz      short loc_292E
.text:0000000000002907                 mov     rdi, rax        ; s
.text:000000000000290A                 call    _strlen
.text:000000000000290F                 mov     rcx, cs:hostlen_7743
.text:0000000000002916                 mov     r10, cs:hoststr_7742
.text:000000000000291D                 jmp     loc_27DD
.text:0000000000002922 ; ---------------------------------------------------------------------------
.text:0000000000002922
.text:0000000000002922 loc_2922:                               ; CODE XREF: print_user+4C9↑j
.text:0000000000002922                 lea     r9, asc_8480    ; "  .  "
.text:0000000000002929                 jmp     loc_2666
.text:000000000000292E ; ---------------------------------------------------------------------------
.text:000000000000292E
.text:000000000000292E loc_292E:                               ; CODE XREF: print_user+545↑j
.text:000000000000292E                 mov     rax, r12
.text:0000000000002931
.text:0000000000002931 loc_2931:                               ; CODE XREF: print_user+587↓j
.text:0000000000002931                 mov     ecx, [rax]
.text:0000000000002933                 add     rax, 4
.text:0000000000002937                 lea     edx, [rcx-1010101h]
.text:000000000000293D                 not     ecx
.text:000000000000293F                 and     edx, ecx
.text:0000000000002941                 and     edx, 80808080h
.text:0000000000002947                 jz      short loc_2931
.text:0000000000002949                 jmp     loc_27AA
.text:000000000000294E ; ---------------------------------------------------------------------------
.text:000000000000294E
.text:000000000000294E loc_294E:                               ; CODE XREF: print_user+23D↑j
.text:000000000000294E                 call    ___stack_chk_fail
.text:0000000000002953 ; ---------------------------------------------------------------------------
.text:0000000000002953
.text:0000000000002953 loc_2953:                               ; CODE XREF: print_user+4D5↑j
.text:0000000000002953                 lea     rcx, __PRETTY_FUNCTION___7702 ; "idle_string"
.text:000000000000295A                 lea     rsi, file       ; "../coreutils-8.31/src/who.c"
.text:0000000000002961                 lea     rdi, assertion  ; "seconds_idle / (60 * 60) < 24"
.text:0000000000002968                 mov     edx, 0CDh       ; line
.text:000000000000296D                 call    ___assert_fail
.text:000000000000296D ; } // starts at 23C0
.text:000000000000296D print_user      endp
.text:000000000000296D
.text:000000000000296D ; ---------------------------------------------------------------------------
.text:0000000000002972                 align 20h
.text:0000000000002980
.text:0000000000002980 ; =============== S U B R O U T I N E =======================================
.text:0000000000002980
.text:0000000000002980
.text:0000000000002980 who             proc near               ; CODE XREF: main+2EF↑p
.text:0000000000002980                                         ; main+32A↑p
.text:0000000000002980
.text:0000000000002980 var_88          = dword ptr -88h
.text:0000000000002980 s               = qword ptr -80h
.text:0000000000002980 var_78          = qword ptr -78h
.text:0000000000002980 var_70          = qword ptr -70h
.text:0000000000002980 var_60          = qword ptr -60h
.text:0000000000002980 ptr             = qword ptr -58h
.text:0000000000002980 var_4C          = byte ptr -4Ch
.text:0000000000002980 var_40          = qword ptr -40h
.text:0000000000002980
.text:0000000000002980 ; __unwind {
.text:0000000000002980                 push    r15
.text:0000000000002982                 push    r14
.text:0000000000002984                 mov     ecx, esi
.text:0000000000002986                 push    r13
.text:0000000000002988                 push    r12
.text:000000000000298A                 push    rbp
.text:000000000000298B                 push    rbx
.text:000000000000298C                 mov     rbx, rdi
.text:000000000000298F                 sub     rsp, 58h
.text:0000000000002993                 lea     rdx, [rsp+88h+ptr]
.text:0000000000002998                 lea     rsi, [rsp+88h+var_60]
.text:000000000000299D                 mov     rax, fs:28h
.text:00000000000029A6                 mov     [rsp+88h+var_40], rax
.text:00000000000029AB                 xor     eax, eax
.text:00000000000029AD                 call    read_utmp
.text:00000000000029B2                 test    eax, eax
.text:00000000000029B4                 jnz     loc_3116
.text:00000000000029BA                 cmp     cs:short_list, 0
.text:00000000000029C1                 mov     r15, [rsp+88h+ptr]
.text:00000000000029C6                 mov     r13, [rsp+88h+var_60]
.text:00000000000029CB                 jnz     loc_2B2E
.text:00000000000029D1                 cmp     cs:include_heading, 0
.text:00000000000029D8                 jnz     loc_2D05
.text:00000000000029DE
.text:00000000000029DE loc_29DE:                               ; CODE XREF: who+44D↓j
.text:00000000000029DE                 cmp     cs:my_line_only, 0
.text:00000000000029E5                 jnz     loc_2CCD
.text:00000000000029EB
.text:00000000000029EB loc_29EB:                               ; CODE XREF: who+376↓j
.text:00000000000029EB                                         ; who+380↓j
.text:00000000000029EB                 mov     rax, 8000000000000000h
.text:00000000000029F5                 test    r13, r13
.text:00000000000029F8                 lea     r12, [r13-1]
.text:00000000000029FC                 mov     qword ptr [rsp+88h+var_88], rax
.text:0000000000002A00                 jz      loc_2B01
.text:0000000000002A06                 lea     rax, [rsp+88h+var_4C]
.text:0000000000002A0B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002A12                 mov     r14, r12
.text:0000000000002A15                 mov     r12, r15
.text:0000000000002A18                 mov     [rsp+88h+s], rax
.text:0000000000002A1D                 nop     dword ptr [rax]
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: who+17B↓j
.text:0000000000002A20                 cmp     cs:my_line_only, 0
.text:0000000000002A27                 jz      short loc_2A43
.text:0000000000002A29                 lea     rsi, [r12+8]    ; s2
.text:0000000000002A2E                 mov     edx, 20h ; ' '  ; n
.text:0000000000002A33                 mov     rdi, rbp        ; s1
.text:0000000000002A36                 call    _strncmp
.text:0000000000002A3B                 test    eax, eax
.text:0000000000002A3D                 jnz     loc_2AD8
.text:0000000000002A43
.text:0000000000002A43 loc_2A43:                               ; CODE XREF: who+A7↑j
.text:0000000000002A43                 cmp     cs:need_users, 0
.text:0000000000002A4A                 movzx   eax, word ptr [r12]
.text:0000000000002A4F                 jz      short loc_2A63
.text:0000000000002A51                 cmp     byte ptr [r12+2Ch], 0
.text:0000000000002A57                 jz      short loc_2A63
.text:0000000000002A59                 cmp     ax, 7
.text:0000000000002A5D                 jz      loc_3020
.text:0000000000002A63
.text:0000000000002A63 loc_2A63:                               ; CODE XREF: who+CF↑j
.text:0000000000002A63                                         ; who+D7↑j
.text:0000000000002A63                 cmp     cs:need_runlevel, 0
.text:0000000000002A6A                 jz      short loc_2A76
.text:0000000000002A6C                 cmp     ax, 1
.text:0000000000002A70                 jz      loc_2BCE
.text:0000000000002A76
.text:0000000000002A76 loc_2A76:                               ; CODE XREF: who+EA↑j
.text:0000000000002A76                 cmp     cs:need_boottime, 0
.text:0000000000002A7D                 jz      short loc_2A89
.text:0000000000002A7F                 cmp     ax, 2
.text:0000000000002A83                 jz      loc_2DD2
.text:0000000000002A89
.text:0000000000002A89 loc_2A89:                               ; CODE XREF: who+FD↑j
.text:0000000000002A89                 cmp     cs:need_clockchange, 0
.text:0000000000002A90                 jz      short loc_2A9C
.text:0000000000002A92                 cmp     ax, 3
.text:0000000000002A96                 jz      loc_2E1E
.text:0000000000002A9C
.text:0000000000002A9C loc_2A9C:                               ; CODE XREF: who+110↑j
.text:0000000000002A9C                 cmp     cs:need_initspawn, 0
.text:0000000000002AA3                 jz      short loc_2AAF
.text:0000000000002AA5                 cmp     ax, 5
.text:0000000000002AA9                 jz      loc_2E3C
.text:0000000000002AAF
.text:0000000000002AAF loc_2AAF:                               ; CODE XREF: who+123↑j
.text:0000000000002AAF                 cmp     cs:need_login, 0
.text:0000000000002AB6                 jz      short loc_2AC2
.text:0000000000002AB8                 cmp     ax, 6
.text:0000000000002ABC                 jz      loc_2EB1
.text:0000000000002AC2
.text:0000000000002AC2 loc_2AC2:                               ; CODE XREF: who+136↑j
.text:0000000000002AC2                 cmp     cs:need_deadprocs, 0
.text:0000000000002AC9                 jz      short loc_2AD8
.text:0000000000002ACB                 cmp     ax, 8
.text:0000000000002ACF                 jz      loc_2F23
.text:0000000000002AD5                 nop     dword ptr [rax]
.text:0000000000002AD8
.text:0000000000002AD8 loc_2AD8:                               ; CODE XREF: who+BD↑j
.text:0000000000002AD8                                         ; who+149↑j ...
.text:0000000000002AD8                 cmp     word ptr [r12], 2
.text:0000000000002ADE                 jnz     short loc_2AEC
.text:0000000000002AE0                 movsxd  rax, dword ptr [r12+154h]
.text:0000000000002AE8                 mov     qword ptr [rsp+88h+var_88], rax
.text:0000000000002AEC
.text:0000000000002AEC loc_2AEC:                               ; CODE XREF: who+15E↑j
.text:0000000000002AEC                 sub     r14, 1
.text:0000000000002AF0                 add     r12, 180h
.text:0000000000002AF7                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:0000000000002AFB                 jnz     loc_2A20
.text:0000000000002B01
.text:0000000000002B01 loc_2B01:                               ; CODE XREF: who+80↑j
.text:0000000000002B01                                         ; who+214↓j ...
.text:0000000000002B01                 mov     rdi, [rsp+88h+ptr] ; ptr
.text:0000000000002B06                 call    _free
.text:0000000000002B0B                 mov     rax, [rsp+88h+var_40]
.text:0000000000002B10                 xor     rax, fs:28h
.text:0000000000002B19                 jnz     loc_3145
.text:0000000000002B1F                 add     rsp, 58h
.text:0000000000002B23                 pop     rbx
.text:0000000000002B24                 pop     rbp
.text:0000000000002B25                 pop     r12
.text:0000000000002B27                 pop     r13
.text:0000000000002B29                 pop     r14
.text:0000000000002B2B                 pop     r15
.text:0000000000002B2D                 retn
.text:0000000000002B2E ; ---------------------------------------------------------------------------
.text:0000000000002B2E
.text:0000000000002B2E loc_2B2E:                               ; CODE XREF: who+4B↑j
.text:0000000000002B2E                 xor     ebp, ebp
.text:0000000000002B30                 test    r13, r13
.text:0000000000002B33                 lea     rbx, [r13-1]
.text:0000000000002B37                 jz      short loc_2B6F
.text:0000000000002B39                 lea     r12, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002B40                 lea     r14, asc_8480+4 ; " "
.text:0000000000002B47                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002B50
.text:0000000000002B50 loc_2B50:                               ; CODE XREF: who+1ED↓j
.text:0000000000002B50                 cmp     byte ptr [r15+2Ch], 0
.text:0000000000002B55                 jz      short loc_2B5E
.text:0000000000002B57                 cmp     word ptr [r15], 7
.text:0000000000002B5C                 jz      short loc_2B99
.text:0000000000002B5E
.text:0000000000002B5E loc_2B5E:                               ; CODE XREF: who+1D5↑j
.text:0000000000002B5E                                         ; who+24C↓j
.text:0000000000002B5E                 sub     rbx, 1
.text:0000000000002B62                 add     r15, 180h
.text:0000000000002B69                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002B6D                 jnz     short loc_2B50
.text:0000000000002B6F
.text:0000000000002B6F loc_2B6F:                               ; CODE XREF: who+1B7↑j
.text:0000000000002B6F                 lea     rsi, aUsersLu   ; "\n# users=%lu\n"
.text:0000000000002B76                 xor     edi, edi        ; domainname
.text:0000000000002B78                 mov     edx, 5          ; category
.text:0000000000002B7D                 call    _dcgettext
.text:0000000000002B82                 mov     rdx, rbp
.text:0000000000002B85                 mov     rsi, rax
.text:0000000000002B88                 mov     edi, 1
.text:0000000000002B8D                 xor     eax, eax
.text:0000000000002B8F                 call    ___printf_chk
.text:0000000000002B94                 jmp     loc_2B01
.text:0000000000002B99 ; ---------------------------------------------------------------------------
.text:0000000000002B99
.text:0000000000002B99 loc_2B99:                               ; CODE XREF: who+1DC↑j
.text:0000000000002B99                 mov     rdi, r15
.text:0000000000002B9C                 add     rbp, 1
.text:0000000000002BA0                 call    extract_trimmed_name
.text:0000000000002BA5                 lea     rsi, aSS_0      ; "%s%s"
.text:0000000000002BAC                 mov     rcx, rax
.text:0000000000002BAF                 mov     rdx, r12
.text:0000000000002BB2                 mov     r13, rax
.text:0000000000002BB5                 mov     edi, 1
.text:0000000000002BBA                 xor     eax, eax
.text:0000000000002BBC                 call    ___printf_chk
.text:0000000000002BC1                 mov     rdi, r13        ; ptr
.text:0000000000002BC4                 mov     r12, r14
.text:0000000000002BC7                 call    _free
.text:0000000000002BCC                 jmp     short loc_2B5E
.text:0000000000002BCE ; ---------------------------------------------------------------------------
.text:0000000000002BCE
.text:0000000000002BCE loc_2BCE:                               ; CODE XREF: who+F0↑j
.text:0000000000002BCE                 mov     eax, [r12+4]
.text:0000000000002BD3                 mov     ecx, 100h
.text:0000000000002BD8                 cdq
.text:0000000000002BD9                 idiv    ecx
.text:0000000000002BDB                 cmp     cs:runlevline_7780, 0
.text:0000000000002BE3                 mov     r15d, edx
.text:0000000000002BE6                 mov     r13d, eax
.text:0000000000002BE9                 jz      loc_3031
.text:0000000000002BEF
.text:0000000000002BEF loc_2BEF:                               ; CODE XREF: who+6E5↓j
.text:0000000000002BEF                 lea     rsi, aRunLevel  ; "run-level"
.text:0000000000002BF6                 xor     edi, edi        ; domainname
.text:0000000000002BF8                 mov     edx, 5          ; category
.text:0000000000002BFD                 call    _dcgettext
.text:0000000000002C02                 mov     rdi, cs:runlevline_7780
.text:0000000000002C09                 lea     rcx, aSC        ; "%s %c"
.text:0000000000002C10                 mov     r8, rax
.text:0000000000002C13                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002C17                 xor     eax, eax
.text:0000000000002C19                 movzx   r9d, r15b
.text:0000000000002C1D                 mov     esi, 1
.text:0000000000002C22                 call    ___sprintf_chk
.text:0000000000002C27                 cmp     cs:comment_7781, 0
.text:0000000000002C2F                 jz      loc_306A
.text:0000000000002C35
.text:0000000000002C35 loc_2C35:                               ; CODE XREF: who+71A↓j
.text:0000000000002C35                 cmp     r13b, 4Eh ; 'N'
.text:0000000000002C39                 movzx   r15d, r13b
.text:0000000000002C3D                 lea     rsi, aLast      ; "last="
.text:0000000000002C44                 mov     r13d, 53h ; 'S'
.text:0000000000002C4A                 mov     edx, 5          ; category
.text:0000000000002C4F                 cmovnz  r13d, r15d
.text:0000000000002C53                 xor     edi, edi        ; domainname
.text:0000000000002C55                 sub     r15d, 20h ; ' '
.text:0000000000002C59                 call    _dcgettext
.text:0000000000002C5E                 mov     rdi, cs:comment_7781
.text:0000000000002C65                 lea     rcx, aSC_0      ; "%s%c"
.text:0000000000002C6C                 mov     r8, rax
.text:0000000000002C6F                 mov     r9d, r13d
.text:0000000000002C72                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002C76                 xor     eax, eax
.text:0000000000002C78                 mov     esi, 1
.text:0000000000002C7D                 lea     r13, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002C84                 call    ___sprintf_chk
.text:0000000000002C89                 cmp     r15d, 5Eh ; '^'
.text:0000000000002C8D                 ja      short loc_2C96
.text:0000000000002C8F                 mov     r13, cs:comment_7781
.text:0000000000002C96
.text:0000000000002C96 loc_2C96:                               ; CODE XREF: who+30D↑j
.text:0000000000002C96                 mov     edi, [r12+154h]
.text:0000000000002C9E                 call    time_string_isra_1
.text:0000000000002CA3                 mov     r8, cs:runlevline_7780 ; int
.text:0000000000002CAA                 push    rbx             ; __int64
.text:0000000000002CAB                 or      ecx, 0FFFFFFFFh ; int
.text:0000000000002CAE                 push    r13             ; __int64
.text:0000000000002CB0                 push    rbx             ; s
.text:0000000000002CB1                 mov     r9, rax         ; int
.text:0000000000002CB4                 push    rbx             ; char *
.text:0000000000002CB5                 mov     edx, 20h ; ' '  ; int
.text:0000000000002CBA                 mov     rsi, rbx        ; int
.text:0000000000002CBD                 mov     edi, ecx        ; int
.text:0000000000002CBF                 call    print_line
.text:0000000000002CC4                 add     rsp, 20h
.text:0000000000002CC8                 jmp     loc_2AD8
.text:0000000000002CCD ; ---------------------------------------------------------------------------
.text:0000000000002CCD
.text:0000000000002CCD loc_2CCD:                               ; CODE XREF: who+65↑j
.text:0000000000002CCD                 xor     edi, edi        ; fd
.text:0000000000002CCF                 call    _ttyname
.text:0000000000002CD4                 test    rax, rax
.text:0000000000002CD7                 mov     rbp, rax
.text:0000000000002CDA                 jz      loc_2B01
.text:0000000000002CE0                 lea     rsi, s2         ; "/dev/"
.text:0000000000002CE7                 mov     edx, 5          ; n
.text:0000000000002CEC                 mov     rdi, rax        ; s1
.text:0000000000002CEF                 call    _strncmp
.text:0000000000002CF4                 test    eax, eax
.text:0000000000002CF6                 jnz     loc_29EB
.text:0000000000002CFC                 add     rbp, 5
.text:0000000000002D00                 jmp     loc_29EB
.text:0000000000002D05 ; ---------------------------------------------------------------------------
.text:0000000000002D05
.text:0000000000002D05 loc_2D05:                               ; CODE XREF: who+58↑j
.text:0000000000002D05                 lea     rsi, aExit_0    ; "EXIT"
.text:0000000000002D0C                 mov     edx, 5          ; category
.text:0000000000002D11                 xor     edi, edi        ; domainname
.text:0000000000002D13                 call    _dcgettext
.text:0000000000002D18                 lea     rsi, aComment   ; "COMMENT"
.text:0000000000002D1F                 mov     edx, 5          ; category
.text:0000000000002D24                 xor     edi, edi        ; domainname
.text:0000000000002D26                 mov     [rsp+88h+var_78], rax
.text:0000000000002D2B                 call    _dcgettext
.text:0000000000002D30                 lea     rsi, aPid       ; "PID"
.text:0000000000002D37                 mov     edx, 5          ; category
.text:0000000000002D3C                 xor     edi, edi        ; domainname
.text:0000000000002D3E                 mov     r12, rax
.text:0000000000002D41                 call    _dcgettext
.text:0000000000002D46                 lea     rsi, aIdle      ; "IDLE"
.text:0000000000002D4D                 mov     edx, 5          ; category
.text:0000000000002D52                 xor     edi, edi        ; domainname
.text:0000000000002D54                 mov     rbx, rax
.text:0000000000002D57                 call    _dcgettext
.text:0000000000002D5C                 lea     rsi, aTime      ; "TIME"
.text:0000000000002D63                 mov     edx, 5          ; category
.text:0000000000002D68                 xor     edi, edi        ; domainname
.text:0000000000002D6A                 mov     r14, rax
.text:0000000000002D6D                 call    _dcgettext
.text:0000000000002D72                 lea     rsi, aLine      ; "LINE"
.text:0000000000002D79                 mov     edx, 5          ; category
.text:0000000000002D7E                 xor     edi, edi        ; domainname
.text:0000000000002D80                 mov     [rsp+88h+s], rax
.text:0000000000002D85                 call    _dcgettext
.text:0000000000002D8A                 lea     rsi, aName      ; "NAME"
.text:0000000000002D91                 mov     edx, 5          ; category
.text:0000000000002D96                 xor     edi, edi        ; domainname
.text:0000000000002D98                 mov     qword ptr [rsp+88h+var_88], rax
.text:0000000000002D9C                 call    _dcgettext
.text:0000000000002DA1                 mov     r8, [rsp+88h+var_78]
.text:0000000000002DA6                 or      ecx, 0FFFFFFFFh ; int
.text:0000000000002DA9                 mov     edx, 20h ; ' '  ; int
.text:0000000000002DAE                 mov     rsi, rax        ; int
.text:0000000000002DB1                 mov     edi, ecx        ; int
.text:0000000000002DB3                 push    r8              ; __int64
.text:0000000000002DB5                 push    r12             ; __int64
.text:0000000000002DB7                 push    rbx             ; s
.text:0000000000002DB8                 push    r14             ; char *
.text:0000000000002DBA                 mov     r9, [rsp+0A8h+s] ; int
.text:0000000000002DBF                 mov     r8, qword ptr [rsp+0A8h+var_88] ; int
.text:0000000000002DC4                 call    print_line
.text:0000000000002DC9                 add     rsp, 20h
.text:0000000000002DCD                 jmp     loc_29DE
.text:0000000000002DD2 ; ---------------------------------------------------------------------------
.text:0000000000002DD2
.text:0000000000002DD2 loc_2DD2:                               ; CODE XREF: who+103↑j
.text:0000000000002DD2                 mov     edi, [r12+154h]
.text:0000000000002DDA                 call    time_string_isra_1
.text:0000000000002DDF                 lea     rsi, aSystemBoot ; "system boot"
.text:0000000000002DE6                 mov     r13, rax
.text:0000000000002DE9                 mov     edx, 5          ; category
.text:0000000000002DEE
.text:0000000000002DEE loc_2DEE:                               ; CODE XREF: who+4BA↓j
.text:0000000000002DEE                 xor     edi, edi        ; domainname
.text:0000000000002DF0                 call    _dcgettext
.text:0000000000002DF5                 push    rbx             ; __int64
.text:0000000000002DF6                 or      ecx, 0FFFFFFFFh ; int
.text:0000000000002DF9                 push    rbx             ; __int64
.text:0000000000002DFA                 lea     rsi, aWrittenBySSAnd+1Bh ; int
.text:0000000000002E01                 push    rbx             ; s
.text:0000000000002E02                 push    rbx             ; char *
.text:0000000000002E03                 mov     r8, rax         ; int
.text:0000000000002E06                 mov     r9, r13         ; int
.text:0000000000002E09                 mov     edx, 20h ; ' '  ; int
.text:0000000000002E0E                 mov     edi, ecx        ; int
.text:0000000000002E10                 call    print_line
.text:0000000000002E15                 add     rsp, 20h
.text:0000000000002E19                 jmp     loc_2AD8
.text:0000000000002E1E ; ---------------------------------------------------------------------------
.text:0000000000002E1E
.text:0000000000002E1E loc_2E1E:                               ; CODE XREF: who+116↑j
.text:0000000000002E1E                 mov     edi, [r12+154h]
.text:0000000000002E26                 call    time_string_isra_1
.text:0000000000002E2B                 mov     edx, 5
.text:0000000000002E30                 mov     r13, rax
.text:0000000000002E33                 lea     rsi, aClockChange ; "clock change"
.text:0000000000002E3A                 jmp     short loc_2DEE
.text:0000000000002E3C ; ---------------------------------------------------------------------------
.text:0000000000002E3C
.text:0000000000002E3C loc_2E3C:                               ; CODE XREF: who+129↑j
.text:0000000000002E3C                 mov     rdi, r12
.text:0000000000002E3F                 call    make_id_equals_comment
.text:0000000000002E44                 mov     r15, [rsp+88h+s]
.text:0000000000002E49                 movsxd  r8, dword ptr [r12+4]
.text:0000000000002E4E                 lea     rcx, aLd        ; "%ld"
.text:0000000000002E55                 mov     edx, 0Ch
.text:0000000000002E5A                 mov     esi, 1
.text:0000000000002E5F                 mov     r13, rax
.text:0000000000002E62                 xor     eax, eax
.text:0000000000002E64                 mov     rdi, r15
.text:0000000000002E67                 call    ___sprintf_chk
.text:0000000000002E6C                 mov     edi, [r12+154h]
.text:0000000000002E74                 call    time_string_isra_1
.text:0000000000002E79                 push    rbx             ; __int64
.text:0000000000002E7A                 lea     r8, [r12+8]     ; int
.text:0000000000002E7F                 push    r13             ; __int64
.text:0000000000002E81                 lea     rsi, aWrittenBySSAnd+1Bh ; int
.text:0000000000002E88                 push    r15             ; s
.text:0000000000002E8A                 push    rbx             ; char *
.text:0000000000002E8B                 mov     r9, rax         ; int
.text:0000000000002E8E                 mov     ecx, 20h ; ' '  ; int
.text:0000000000002E93                 mov     edx, 20h ; ' '  ; int
.text:0000000000002E98
.text:0000000000002E98 loc_2E98:                               ; CODE XREF: who+59E↓j
.text:0000000000002E98                 or      edi, 0FFFFFFFFh ; int
.text:0000000000002E9B                 call    print_line
.text:0000000000002EA0                 add     rsp, 20h
.text:0000000000002EA4                 mov     rdi, r13        ; ptr
.text:0000000000002EA7                 call    _free
.text:0000000000002EAC                 jmp     loc_2AD8
.text:0000000000002EB1 ; ---------------------------------------------------------------------------
.text:0000000000002EB1
.text:0000000000002EB1 loc_2EB1:                               ; CODE XREF: who+13C↑j
.text:0000000000002EB1                 mov     rdi, r12
.text:0000000000002EB4                 call    make_id_equals_comment
.text:0000000000002EB9                 movsxd  r8, dword ptr [r12+4]
.text:0000000000002EBE                 mov     rdi, [rsp+88h+s]
.text:0000000000002EC3                 lea     rcx, aLd        ; "%ld"
.text:0000000000002ECA                 mov     edx, 0Ch
.text:0000000000002ECF                 mov     esi, 1
.text:0000000000002ED4                 mov     r13, rax
.text:0000000000002ED7                 xor     eax, eax
.text:0000000000002ED9                 call    ___sprintf_chk
.text:0000000000002EDE                 mov     edi, [r12+154h]
.text:0000000000002EE6                 call    time_string_isra_1
.text:0000000000002EEB                 lea     rsi, aLogin     ; "LOGIN"
.text:0000000000002EF2                 mov     r15, rax
.text:0000000000002EF5                 mov     edx, 5          ; category
.text:0000000000002EFA                 xor     edi, edi        ; domainname
.text:0000000000002EFC                 call    _dcgettext
.text:0000000000002F01                 push    rbx
.text:0000000000002F02                 mov     r9, r15
.text:0000000000002F05                 push    r13
.text:0000000000002F07                 lea     r8, [r12+8]
.text:0000000000002F0C                 push    [rsp+98h+s]
.text:0000000000002F10                 mov     ecx, 20h ; ' '
.text:0000000000002F15                 push    rbx
.text:0000000000002F16                 mov     edx, 20h ; ' '
.text:0000000000002F1B                 mov     rsi, rax
.text:0000000000002F1E                 jmp     loc_2E98
.text:0000000000002F23 ; ---------------------------------------------------------------------------
.text:0000000000002F23
.text:0000000000002F23 loc_2F23:                               ; CODE XREF: who+14F↑j
.text:0000000000002F23                 mov     rdi, r12
.text:0000000000002F26                 call    make_id_equals_comment
.text:0000000000002F2B                 movsxd  r8, dword ptr [r12+4]
.text:0000000000002F30                 mov     rdi, [rsp+88h+s]
.text:0000000000002F35                 lea     rcx, aLd        ; "%ld"
.text:0000000000002F3C                 mov     r13, rax
.text:0000000000002F3F                 mov     edx, 0Ch
.text:0000000000002F44                 xor     eax, eax
.text:0000000000002F46                 mov     esi, 1
.text:0000000000002F4B                 call    ___sprintf_chk
.text:0000000000002F50                 cmp     cs:exitstr_7761, 0
.text:0000000000002F58                 jz      loc_309F
.text:0000000000002F5E
.text:0000000000002F5E loc_2F5E:                               ; CODE XREF: who+791↓j
.text:0000000000002F5E                 movsx   r9d, word ptr [r12+14Eh]
.text:0000000000002F67                 lea     rsi, aExit_1    ; "exit="
.text:0000000000002F6E                 xor     edi, edi        ; domainname
.text:0000000000002F70                 mov     edx, 5          ; category
.text:0000000000002F75                 mov     dword ptr [rsp+88h+var_70], r9d
.text:0000000000002F7A                 call    _dcgettext
.text:0000000000002F7F                 mov     r15, rax
.text:0000000000002F82                 movsx   eax, word ptr [r12+14Ch]
.text:0000000000002F8B                 lea     rsi, aTerm      ; "term="
.text:0000000000002F92                 xor     edi, edi        ; domainname
.text:0000000000002F94                 mov     edx, 5          ; category
.text:0000000000002F99                 mov     dword ptr [rsp+88h+var_78], eax
.text:0000000000002F9D                 call    _dcgettext
.text:0000000000002FA2                 mov     r9d, dword ptr [rsp+88h+var_70]
.text:0000000000002FA7                 mov     rdi, cs:exitstr_7761
.text:0000000000002FAE                 lea     rcx, aSDSD      ; "%s%d %s%d"
.text:0000000000002FB5                 mov     r8, rax
.text:0000000000002FB8                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002FBC                 mov     esi, 1
.text:0000000000002FC1                 xor     eax, eax
.text:0000000000002FC3                 push    r9
.text:0000000000002FC5                 push    r15
.text:0000000000002FC7                 mov     r9d, dword ptr [rsp+98h+var_78]
.text:0000000000002FCC                 call    ___sprintf_chk
.text:0000000000002FD1                 mov     r15, cs:exitstr_7761
.text:0000000000002FD8                 mov     edi, [r12+154h]
.text:0000000000002FE0                 call    time_string_isra_1
.text:0000000000002FE5                 push    r15             ; __int64
.text:0000000000002FE7                 lea     r8, [r12+8]     ; int
.text:0000000000002FEC                 push    r13             ; __int64
.text:0000000000002FEE                 lea     rsi, aWrittenBySSAnd+1Bh ; int
.text:0000000000002FF5                 push    [rsp+0A8h+s]    ; s
.text:0000000000002FF9                 push    rbx             ; char *
.text:0000000000002FFA                 or      edi, 0FFFFFFFFh ; int
.text:0000000000002FFD                 mov     r9, rax         ; int
.text:0000000000003000                 mov     ecx, 20h ; ' '  ; int
.text:0000000000003005                 mov     edx, 20h ; ' '  ; int
.text:000000000000300A                 call    print_line
.text:000000000000300F                 add     rsp, 30h
.text:0000000000003013                 mov     rdi, r13        ; ptr
.text:0000000000003016                 call    _free
.text:000000000000301B                 jmp     loc_2AD8
.text:0000000000003020 ; ---------------------------------------------------------------------------
.text:0000000000003020
.text:0000000000003020 loc_3020:                               ; CODE XREF: who+DD↑j
.text:0000000000003020                 mov     rsi, qword ptr [rsp+88h+var_88]
.text:0000000000003024                 mov     rdi, r12
.text:0000000000003027                 call    print_user
.text:000000000000302C                 jmp     loc_2AD8
.text:0000000000003031 ; ---------------------------------------------------------------------------
.text:0000000000003031
.text:0000000000003031 loc_3031:                               ; CODE XREF: who+269↑j
.text:0000000000003031                 lea     rsi, aRunLevel  ; "run-level"
.text:0000000000003038                 mov     edx, 5          ; category
.text:000000000000303D                 xor     edi, edi        ; domainname
.text:000000000000303F                 call    _dcgettext
.text:0000000000003044                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003048                 mov     rdi, rax
.text:000000000000304B                 xor     eax, eax
.text:000000000000304D                 repne scasb
.text:000000000000304F                 mov     rax, rcx
.text:0000000000003052                 not     rax
.text:0000000000003055                 lea     rdi, [rax+2]
.text:0000000000003059                 call    xmalloc
.text:000000000000305E                 mov     cs:runlevline_7780, rax
.text:0000000000003065                 jmp     loc_2BEF
.text:000000000000306A ; ---------------------------------------------------------------------------
.text:000000000000306A
.text:000000000000306A loc_306A:                               ; CODE XREF: who+2AF↑j
.text:000000000000306A                 lea     rsi, aLast      ; "last="
.text:0000000000003071                 mov     edx, 5          ; category
.text:0000000000003076                 xor     edi, edi        ; domainname
.text:0000000000003078                 call    _dcgettext
.text:000000000000307D                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003081                 mov     rdi, rax
.text:0000000000003084                 xor     eax, eax
.text:0000000000003086                 repne scasb
.text:0000000000003088                 neg     rcx
.text:000000000000308B                 mov     rdi, rcx
.text:000000000000308E                 call    xmalloc
.text:0000000000003093                 mov     cs:comment_7781, rax
.text:000000000000309A                 jmp     loc_2C35
.text:000000000000309F ; ---------------------------------------------------------------------------
.text:000000000000309F
.text:000000000000309F loc_309F:                               ; CODE XREF: who+5D8↑j
.text:000000000000309F                 lea     rsi, aTerm      ; "term="
.text:00000000000030A6                 mov     edx, 5          ; category
.text:00000000000030AB                 xor     edi, edi        ; domainname
.text:00000000000030AD                 xor     r15d, r15d
.text:00000000000030B0                 call    _dcgettext
.text:00000000000030B5                 or      r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000030B9                 mov     rdi, rax
.text:00000000000030BC                 mov     eax, r15d
.text:00000000000030BF                 mov     rcx, r8
.text:00000000000030C2                 mov     [rsp+88h+var_70], r8
.text:00000000000030C7                 lea     rsi, aExit_1    ; "exit="
.text:00000000000030CE                 repne scasb
.text:00000000000030D0                 mov     edx, 5          ; category
.text:00000000000030D5                 xor     edi, edi        ; domainname
.text:00000000000030D7                 not     rcx
.text:00000000000030DA                 lea     rax, [rcx+r8]
.text:00000000000030DE                 mov     [rsp+88h+var_78], rax
.text:00000000000030E3                 call    _dcgettext
.text:00000000000030E8                 mov     r8, [rsp+88h+var_70]
.text:00000000000030ED                 mov     rdi, rax
.text:00000000000030F0                 mov     eax, r15d
.text:00000000000030F3                 mov     rcx, r8
.text:00000000000030F6                 repne scasb
.text:00000000000030F8                 mov     rax, [rsp+88h+var_78]
.text:00000000000030FD                 not     rcx
.text:0000000000003100                 lea     rdi, [rax+rcx+0Dh]
.text:0000000000003105                 call    xmalloc
.text:000000000000310A                 mov     cs:exitstr_7761, rax
.text:0000000000003111                 jmp     loc_2F5E
.text:0000000000003116 ; ---------------------------------------------------------------------------
.text:0000000000003116
.text:0000000000003116 loc_3116:                               ; CODE XREF: who+34↑j
.text:0000000000003116                 mov     rdx, rbx
.text:0000000000003119                 mov     esi, 3
.text:000000000000311E                 xor     edi, edi
.text:0000000000003120                 call    quotearg_n_style_colon
.text:0000000000003125                 mov     rbx, rax
.text:0000000000003128                 call    ___errno_location
.text:000000000000312D                 mov     esi, [rax]      ; errnum
.text:000000000000312F                 lea     rdx, format+4   ; format
.text:0000000000003136                 mov     rcx, rbx
.text:0000000000003139                 mov     edi, 1          ; status
.text:000000000000313E                 xor     eax, eax
.text:0000000000003140                 call    _error
.text:0000000000003145
.text:0000000000003145 loc_3145:                               ; CODE XREF: who+199↑j
.text:0000000000003145                 call    ___stack_chk_fail
.text:0000000000003145 ; } // starts at 2980
.text:0000000000003145 who             endp
.text:0000000000003145
.text:0000000000003145 ; ---------------------------------------------------------------------------
.text:000000000000314A                 align 10h
.text:0000000000003150
.text:0000000000003150 ; =============== S U B R O U T I N E =======================================
.text:0000000000003150
.text:0000000000003150 ; Attributes: noreturn
.text:0000000000003150
.text:0000000000003150 ; void __fastcall __noreturn usage(int status)
.text:0000000000003150                 public usage
.text:0000000000003150 usage           proc near               ; CODE XREF: main+144↑p
.text:0000000000003150                                         ; main+333↑p
.text:0000000000003150
.text:0000000000003150 var_A8          = qword ptr -0A8h
.text:0000000000003150 var_A0          = qword ptr -0A0h
.text:0000000000003150 var_98          = qword ptr -98h
.text:0000000000003150 var_90          = qword ptr -90h
.text:0000000000003150 var_88          = qword ptr -88h
.text:0000000000003150 var_80          = qword ptr -80h
.text:0000000000003150 var_78          = qword ptr -78h
.text:0000000000003150 var_70          = qword ptr -70h
.text:0000000000003150 var_68          = qword ptr -68h
.text:0000000000003150 var_60          = qword ptr -60h
.text:0000000000003150 var_58          = qword ptr -58h
.text:0000000000003150 var_50          = qword ptr -50h
.text:0000000000003150 var_48          = qword ptr -48h
.text:0000000000003150 var_40          = qword ptr -40h
.text:0000000000003150 var_30          = qword ptr -30h
.text:0000000000003150
.text:0000000000003150 ; __unwind {
.text:0000000000003150                 push    r13
.text:0000000000003152                 push    r12
.text:0000000000003154                 mov     edx, 5          ; category
.text:0000000000003159                 push    rbp
.text:000000000000315A                 push    rbx
.text:000000000000315B                 mov     ebp, edi
.text:000000000000315D                 sub     rsp, 88h
.text:0000000000003164                 mov     rbx, cs:program_name
.text:000000000000316B                 mov     rax, fs:28h
.text:0000000000003174                 mov     [rsp+0A8h+var_30], rax
.text:0000000000003179                 xor     eax, eax
.text:000000000000317B                 test    edi, edi
.text:000000000000317D                 jz      short loc_31AD
.text:000000000000317F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000003186                 xor     edi, edi        ; domainname
.text:0000000000003188                 call    _dcgettext
.text:000000000000318D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003194                 mov     rdx, rax
.text:0000000000003197                 mov     rcx, rbx
.text:000000000000319A                 mov     esi, 1
.text:000000000000319F                 xor     eax, eax
.text:00000000000031A1                 call    ___fprintf_chk
.text:00000000000031A6
.text:00000000000031A6 loc_31A6:                               ; CODE XREF: usage+366↓j
.text:00000000000031A6                 mov     edi, ebp        ; status
.text:00000000000031A8                 call    _exit
.text:00000000000031AD ; ---------------------------------------------------------------------------
.text:00000000000031AD
.text:00000000000031AD loc_31AD:                               ; CODE XREF: usage+2D↑j
.text:00000000000031AD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [ FILE | ARG1 ARG"...
.text:00000000000031B4                 xor     edi, edi        ; domainname
.text:00000000000031B6                 call    _dcgettext
.text:00000000000031BB                 mov     rdx, rbx
.text:00000000000031BE                 mov     rsi, rax
.text:00000000000031C1                 mov     edi, 1
.text:00000000000031C6                 xor     eax, eax
.text:00000000000031C8                 call    ___printf_chk
.text:00000000000031CD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000031D4                 lea     rsi, aPrintInformati ; "Print information about users who are c"...
.text:00000000000031DB                 mov     edx, 5          ; category
.text:00000000000031E0                 xor     edi, edi        ; domainname
.text:00000000000031E2                 call    _dcgettext
.text:00000000000031E7                 mov     rsi, rbx        ; stream
.text:00000000000031EA                 mov     rdi, rax        ; s
.text:00000000000031ED                 call    _fputs_unlocked
.text:00000000000031F2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000031F9                 lea     rsi, aAAllSameAsBDLo ; "\n  -a, --all         same as -b -d --l"...
.text:0000000000003200                 mov     edx, 5          ; category
.text:0000000000003205                 xor     edi, edi        ; domainname
.text:0000000000003207                 call    _dcgettext
.text:000000000000320C                 mov     rsi, rbx        ; stream
.text:000000000000320F                 mov     rdi, rax        ; s
.text:0000000000003212                 call    _fputs_unlocked
.text:0000000000003217                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000321E                 lea     rsi, aLLoginPrintSys ; "  -l, --login       print system login "...
.text:0000000000003225                 mov     edx, 5          ; category
.text:000000000000322A                 xor     edi, edi        ; domainname
.text:000000000000322C                 call    _dcgettext
.text:0000000000003231                 mov     rsi, rbx        ; stream
.text:0000000000003234                 mov     rdi, rax        ; s
.text:0000000000003237                 call    _fputs_unlocked
.text:000000000000323C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003243                 lea     rsi, aLookupAttemptT ; "      --lookup      attempt to canonica"...
.text:000000000000324A                 mov     edx, 5          ; category
.text:000000000000324F                 xor     edi, edi        ; domainname
.text:0000000000003251                 call    _dcgettext
.text:0000000000003256                 mov     rsi, rbx        ; stream
.text:0000000000003259                 mov     rdi, rax        ; s
.text:000000000000325C                 call    _fputs_unlocked
.text:0000000000003261                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003268                 lea     rsi, aQCountAllLogin ; "  -q, --count       all login names and"...
.text:000000000000326F                 mov     edx, 5          ; category
.text:0000000000003274                 xor     edi, edi        ; domainname
.text:0000000000003276                 call    _dcgettext
.text:000000000000327B                 mov     rsi, rbx        ; stream
.text:000000000000327E                 mov     rdi, rax        ; s
.text:0000000000003281                 call    _fputs_unlocked
.text:0000000000003286                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000328D                 lea     rsi, aTWMesgAddUserS ; "  -T, -w, --mesg    add user's message "...
.text:0000000000003294                 mov     edx, 5          ; category
.text:0000000000003299                 xor     edi, edi        ; domainname
.text:000000000000329B                 call    _dcgettext
.text:00000000000032A0                 mov     rsi, rbx        ; stream
.text:00000000000032A3                 mov     rdi, rax        ; s
.text:00000000000032A6                 call    _fputs_unlocked
.text:00000000000032AB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000032B2                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000032B9                 mov     edx, 5          ; category
.text:00000000000032BE                 xor     edi, edi        ; domainname
.text:00000000000032C0                 call    _dcgettext
.text:00000000000032C5                 mov     rsi, rbx        ; stream
.text:00000000000032C8                 mov     rdi, rax        ; s
.text:00000000000032CB                 call    _fputs_unlocked
.text:00000000000032D0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000032D7                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000032DE                 mov     edx, 5          ; category
.text:00000000000032E3                 xor     edi, edi        ; domainname
.text:00000000000032E5                 call    _dcgettext
.text:00000000000032EA                 mov     rsi, rbx        ; stream
.text:00000000000032ED                 mov     rdi, rax        ; s
.text:00000000000032F0                 lea     rbx, aWho       ; "who"
.text:00000000000032F7                 call    _fputs_unlocked
.text:00000000000032FC                 lea     rsi, aIfFileIsNotSpe ; "\nIf FILE is not specified, use %s.  %s"...
.text:0000000000003303                 mov     edx, 5          ; category
.text:0000000000003308                 xor     edi, edi        ; domainname
.text:000000000000330A                 call    _dcgettext
.text:000000000000330F                 lea     rcx, aVarLogWtmp ; "/var/log/wtmp"
.text:0000000000003316                 lea     rdx, aVarRunUtmp ; "/var/run/utmp"
.text:000000000000331D                 mov     rsi, rax
.text:0000000000003320                 mov     edi, 1
.text:0000000000003325                 xor     eax, eax
.text:0000000000003327                 call    ___printf_chk
.text:000000000000332C                 lea     rax, asc_8594   ; "["
.text:0000000000003333                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000333A                 mov     [rsp+0A8h+var_48], 0
.text:0000000000003343                 mov     [rsp+0A8h+var_40], 0
.text:000000000000334C                 mov     rdx, rsp
.text:000000000000334F                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000003353                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000335A                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000335F                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000003366                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000336B                 lea     rax, domainname ; "coreutils"
.text:0000000000003372                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000003377                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000337E                 mov     [rsp+0A8h+var_98], rax
.text:0000000000003383                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000338A                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000338F                 mov     [rsp+0A8h+var_90], rax
.text:0000000000003394                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000339B                 mov     [rsp+0A8h+var_88], rax
.text:00000000000033A0                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000033A7                 mov     [rsp+0A8h+var_80], rax
.text:00000000000033AC                 mov     [rsp+0A8h+var_70], rax
.text:00000000000033B1                 mov     [rsp+0A8h+var_60], rax
.text:00000000000033B6                 mov     [rsp+0A8h+var_50], rax
.text:00000000000033BB                 nop     dword ptr [rax+rax+00h]
.text:00000000000033C0
.text:00000000000033C0 loc_33C0:                               ; CODE XREF: usage+28D↓j
.text:00000000000033C0                 add     rdx, 10h
.text:00000000000033C4                 mov     rdi, [rdx]
.text:00000000000033C7                 test    rdi, rdi
.text:00000000000033CA                 jz      short loc_33DF
.text:00000000000033CC                 mov     ecx, 4
.text:00000000000033D1                 mov     rsi, rbx
.text:00000000000033D4                 repe cmpsb
.text:00000000000033D6                 setnbe  al
.text:00000000000033D9                 sbb     al, 0
.text:00000000000033DB                 test    al, al
.text:00000000000033DD                 jnz     short loc_33C0
.text:00000000000033DF
.text:00000000000033DF loc_33DF:                               ; CODE XREF: usage+27A↑j
.text:00000000000033DF                 mov     r12, [rdx+8]
.text:00000000000033E3                 xor     edi, edi        ; domainname
.text:00000000000033E5                 mov     edx, 5          ; category
.text:00000000000033EA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000033F1                 test    r12, r12
.text:00000000000033F4                 jz      loc_34BB
.text:00000000000033FA                 call    _dcgettext
.text:00000000000033FF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003406                 lea     rdx, unk_860A
.text:000000000000340D                 mov     rsi, rax
.text:0000000000003410                 mov     edi, 1
.text:0000000000003415                 xor     eax, eax
.text:0000000000003417                 call    ___printf_chk
.text:000000000000341C                 xor     esi, esi        ; locale
.text:000000000000341E                 mov     edi, 5          ; category
.text:0000000000003423                 call    _setlocale
.text:0000000000003428                 test    rax, rax
.text:000000000000342B                 jz      short loc_3449
.text:000000000000342D                 lea     rsi, aEn        ; "en_"
.text:0000000000003434                 mov     edx, 3          ; n
.text:0000000000003439                 mov     rdi, rax        ; s1
.text:000000000000343C                 call    _strncmp
.text:0000000000003441                 test    eax, eax
.text:0000000000003443                 jnz     loc_3550
.text:0000000000003449
.text:0000000000003449 loc_3449:                               ; CODE XREF: usage+2DB↑j
.text:0000000000003449                                         ; usage+425↓j
.text:0000000000003449                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003450                 xor     edi, edi        ; domainname
.text:0000000000003452                 mov     edx, 5          ; category
.text:0000000000003457                 call    _dcgettext
.text:000000000000345C                 lea     rcx, aWho       ; "who"
.text:0000000000003463                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000346A                 mov     rsi, rax
.text:000000000000346D                 mov     edi, 1
.text:0000000000003472                 xor     eax, eax
.text:0000000000003474                 call    ___printf_chk
.text:0000000000003479                 cmp     r12, rbx
.text:000000000000347C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003483                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000348A                 cmovz   rbx, rcx
.text:000000000000348E
.text:000000000000348E loc_348E:                               ; CODE XREF: usage+3F4↓j
.text:000000000000348E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003495                 xor     edi, edi        ; domainname
.text:0000000000003497                 mov     edx, 5          ; category
.text:000000000000349C                 call    _dcgettext
.text:00000000000034A1                 mov     rcx, rbx
.text:00000000000034A4                 mov     rsi, rax
.text:00000000000034A7                 mov     rdx, r12
.text:00000000000034AA                 mov     edi, 1
.text:00000000000034AF                 xor     eax, eax
.text:00000000000034B1                 call    ___printf_chk
.text:00000000000034B6                 jmp     loc_31A6
.text:00000000000034BB ; ---------------------------------------------------------------------------
.text:00000000000034BB
.text:00000000000034BB loc_34BB:                               ; CODE XREF: usage+2A4↑j
.text:00000000000034BB                 call    _dcgettext
.text:00000000000034C0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000034C7                 lea     rdx, unk_860A
.text:00000000000034CE                 mov     rsi, rax
.text:00000000000034D1                 mov     edi, 1
.text:00000000000034D6                 xor     eax, eax
.text:00000000000034D8                 call    ___printf_chk
.text:00000000000034DD                 xor     esi, esi        ; locale
.text:00000000000034DF                 mov     edi, 5          ; category
.text:00000000000034E4                 call    _setlocale
.text:00000000000034E9                 test    rax, rax
.text:00000000000034EC                 jz      short loc_3506
.text:00000000000034EE                 lea     rsi, aEn        ; "en_"
.text:00000000000034F5                 mov     edx, 3          ; n
.text:00000000000034FA                 mov     rdi, rax        ; s1
.text:00000000000034FD                 call    _strncmp
.text:0000000000003502                 test    eax, eax
.text:0000000000003504                 jnz     short loc_3549
.text:0000000000003506
.text:0000000000003506 loc_3506:                               ; CODE XREF: usage+39C↑j
.text:0000000000003506                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000350D                 mov     edx, 5          ; category
.text:0000000000003512                 xor     edi, edi        ; domainname
.text:0000000000003514                 lea     r12, aWho       ; "who"
.text:000000000000351B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003522                 call    _dcgettext
.text:0000000000003527                 lea     rcx, aWho       ; "who"
.text:000000000000352E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003535                 mov     rsi, rax
.text:0000000000003538                 mov     edi, 1
.text:000000000000353D                 xor     eax, eax
.text:000000000000353F                 call    ___printf_chk
.text:0000000000003544                 jmp     loc_348E
.text:0000000000003549 ; ---------------------------------------------------------------------------
.text:0000000000003549
.text:0000000000003549 loc_3549:                               ; CODE XREF: usage+3B4↑j
.text:0000000000003549                 lea     r12, aWho       ; "who"
.text:0000000000003550
.text:0000000000003550 loc_3550:                               ; CODE XREF: usage+2F3↑j
.text:0000000000003550                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000003557                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000355E                 xor     edi, edi        ; domainname
.text:0000000000003560                 mov     edx, 5          ; category
.text:0000000000003565                 call    _dcgettext
.text:000000000000356A                 mov     rsi, r13        ; stream
.text:000000000000356D                 mov     rdi, rax        ; s
.text:0000000000003570                 call    _fputs_unlocked
.text:0000000000003575                 jmp     loc_3449
.text:0000000000003575 ; } // starts at 3150
.text:0000000000003575 usage           endp
.text:0000000000003575
.text:0000000000003575 ; ---------------------------------------------------------------------------
.text:000000000000357A                 align 20h
.text:0000000000003580
.text:0000000000003580 ; =============== S U B R O U T I N E =======================================
.text:0000000000003580
.text:0000000000003580
.text:0000000000003580 ; __int64 __fastcall canon_host_r(char *s)
.text:0000000000003580                 public canon_host_r
.text:0000000000003580 canon_host_r    proc near               ; CODE XREF: canon_host+7↓j
.text:0000000000003580
.text:0000000000003580 ai              = qword ptr -28h
.text:0000000000003580 var_20          = qword ptr -20h
.text:0000000000003580
.text:0000000000003580 ; __unwind {
.text:0000000000003580                 push    r12
.text:0000000000003582                 push    rbp
.text:0000000000003583                 lea     rdx, hints_3317 ; req
.text:000000000000358A                 push    rbx
.text:000000000000358B                 mov     rbx, rsi
.text:000000000000358E                 xor     esi, esi        ; service
.text:0000000000003590                 mov     rbp, rdi
.text:0000000000003593                 sub     rsp, 10h
.text:0000000000003597                 mov     cs:hints_3317.ai_flags, 2
.text:00000000000035A1                 mov     rcx, rsp        ; pai
.text:00000000000035A4                 mov     [rsp+28h+ai], 0
.text:00000000000035AC                 mov     rax, fs:28h
.text:00000000000035B5                 mov     [rsp+28h+var_20], rax
.text:00000000000035BA                 xor     eax, eax
.text:00000000000035BC                 call    _getaddrinfo
.text:00000000000035C1                 test    eax, eax
.text:00000000000035C3                 jnz     short loc_3618
.text:00000000000035C5                 mov     r12, [rsp+28h+ai]
.text:00000000000035C9                 mov     rdi, [r12+20h]
.text:00000000000035CE                 test    rdi, rdi
.text:00000000000035D1                 cmovz   rdi, rbp        ; s
.text:00000000000035D5                 call    _strdup
.text:00000000000035DA                 test    rax, rax
.text:00000000000035DD                 mov     rbp, rax
.text:00000000000035E0                 jnz     short loc_35ED
.text:00000000000035E2                 test    rbx, rbx
.text:00000000000035E5                 jz      short loc_35ED
.text:00000000000035E7                 mov     dword ptr [rbx], 0FFFFFFF6h
.text:00000000000035ED
.text:00000000000035ED loc_35ED:                               ; CODE XREF: canon_host_r+60↑j
.text:00000000000035ED                                         ; canon_host_r+65↑j
.text:00000000000035ED                 mov     rdi, r12        ; ai
.text:00000000000035F0                 call    _freeaddrinfo
.text:00000000000035F5
.text:00000000000035F5 loc_35F5:                               ; CODE XREF: canon_host_r+9D↓j
.text:00000000000035F5                                         ; canon_host_r+A1↓j
.text:00000000000035F5                 mov     rdx, [rsp+28h+var_20]
.text:00000000000035FA                 xor     rdx, fs:28h
.text:0000000000003603                 mov     rax, rbp
.text:0000000000003606                 jnz     short loc_3623
.text:0000000000003608                 add     rsp, 10h
.text:000000000000360C                 pop     rbx
.text:000000000000360D                 pop     rbp
.text:000000000000360E                 pop     r12
.text:0000000000003610                 retn
.text:0000000000003610 ; ---------------------------------------------------------------------------
.text:0000000000003611                 align 8
.text:0000000000003618
.text:0000000000003618 loc_3618:                               ; CODE XREF: canon_host_r+43↑j
.text:0000000000003618                 xor     ebp, ebp
.text:000000000000361A                 test    rbx, rbx
.text:000000000000361D                 jz      short loc_35F5
.text:000000000000361F                 mov     [rbx], eax
.text:0000000000003621                 jmp     short loc_35F5
.text:0000000000003623 ; ---------------------------------------------------------------------------
.text:0000000000003623
.text:0000000000003623 loc_3623:                               ; CODE XREF: canon_host_r+86↑j
.text:0000000000003623                 call    ___stack_chk_fail
.text:0000000000003623 ; } // starts at 3580
.text:0000000000003623 canon_host_r    endp
.text:0000000000003623
.text:0000000000003623 ; ---------------------------------------------------------------------------
.text:0000000000003628                 align 10h
.text:0000000000003630
.text:0000000000003630 ; =============== S U B R O U T I N E =======================================
.text:0000000000003630
.text:0000000000003630
.text:0000000000003630                 public canon_host
.text:0000000000003630 canon_host      proc near               ; CODE XREF: print_user+370↑p
.text:0000000000003630                                         ; print_user+53A↑p
.text:0000000000003630 ; __unwind {
.text:0000000000003630                 lea     rsi, last_cherror
.text:0000000000003637                 jmp     canon_host_r
.text:0000000000003637 ; } // starts at 3630
.text:0000000000003637 canon_host      endp
.text:0000000000003637
.text:0000000000003637 ; ---------------------------------------------------------------------------
.text:000000000000363C                 align 20h
.text:0000000000003640
.text:0000000000003640 ; =============== S U B R O U T I N E =======================================
.text:0000000000003640
.text:0000000000003640
.text:0000000000003640                 public ch_strerror
.text:0000000000003640 ch_strerror     proc near
.text:0000000000003640 ; __unwind {
.text:0000000000003640                 mov     edi, cs:last_cherror ; ecode
.text:0000000000003646                 jmp     _gai_strerror
.text:0000000000003646 ; } // starts at 3640
.text:0000000000003646 ch_strerror     endp
.text:0000000000003646
.text:0000000000003646 ; ---------------------------------------------------------------------------
.text:000000000000364B                 align 10h
.text:0000000000003650
.text:0000000000003650 ; =============== S U B R O U T I N E =======================================
.text:0000000000003650
.text:0000000000003650
.text:0000000000003650                 public close_stdout_set_file_name
.text:0000000000003650 close_stdout_set_file_name proc near
.text:0000000000003650 ; __unwind {
.text:0000000000003650                 mov     cs:file_name, rdi
.text:0000000000003657                 retn
.text:0000000000003657 ; } // starts at 3650
.text:0000000000003657 close_stdout_set_file_name endp
.text:0000000000003657
.text:0000000000003657 ; ---------------------------------------------------------------------------
.text:0000000000003658                 align 20h
.text:0000000000003660
.text:0000000000003660 ; =============== S U B R O U T I N E =======================================
.text:0000000000003660
.text:0000000000003660
.text:0000000000003660                 public close_stdout_set_ignore_EPIPE
.text:0000000000003660 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003660 ; __unwind {
.text:0000000000003660                 mov     cs:ignore_EPIPE, dil
.text:0000000000003667                 retn
.text:0000000000003667 ; } // starts at 3660
.text:0000000000003667 close_stdout_set_ignore_EPIPE endp
.text:0000000000003667
.text:0000000000003667 ; ---------------------------------------------------------------------------
.text:0000000000003668                 align 10h
.text:0000000000003670
.text:0000000000003670 ; =============== S U B R O U T I N E =======================================
.text:0000000000003670
.text:0000000000003670 ; Attributes: info_from_lumina
.text:0000000000003670
.text:0000000000003670 ; void __cdecl close_stdout()
.text:0000000000003670                 public close_stdout
.text:0000000000003670 close_stdout    proc near               ; DATA XREF: main+47↑o
.text:0000000000003670 ; __unwind {
.text:0000000000003670                 push    rbp
.text:0000000000003671                 push    rbx
.text:0000000000003672                 sub     rsp, 8
.text:0000000000003676                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000367D                 call    close_stream
.text:0000000000003682                 test    eax, eax
.text:0000000000003684                 jz      short loc_369C
.text:0000000000003686                 call    ___errno_location
.text:000000000000368B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003692                 mov     rbx, rax
.text:0000000000003695                 jz      short loc_36B3
.text:0000000000003697                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000369A                 jnz     short loc_36B3
.text:000000000000369C
.text:000000000000369C loc_369C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000369C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000036A3                 call    close_stream
.text:00000000000036A8                 test    eax, eax
.text:00000000000036AA                 jnz     short loc_36F2
.text:00000000000036AC                 add     rsp, 8
.text:00000000000036B0                 pop     rbx
.text:00000000000036B1                 pop     rbp
.text:00000000000036B2                 retn
.text:00000000000036B3 ; ---------------------------------------------------------------------------
.text:00000000000036B3
.text:00000000000036B3 loc_36B3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000036B3                                         ; close_stdout+2A↑j
.text:00000000000036B3                 lea     rsi, aWriteError ; "write error"
.text:00000000000036BA                 xor     edi, edi        ; domainname
.text:00000000000036BC                 mov     edx, 5          ; category
.text:00000000000036C1                 call    _dcgettext
.text:00000000000036C6                 mov     rdi, cs:file_name
.text:00000000000036CD                 mov     rbp, rax
.text:00000000000036D0                 test    rdi, rdi
.text:00000000000036D3                 jz      short loc_36FD
.text:00000000000036D5                 call    quotearg_colon
.text:00000000000036DA                 mov     esi, [rbx]      ; errnum
.text:00000000000036DC                 lea     rdx, format     ; "%s: %s"
.text:00000000000036E3                 mov     rcx, rax
.text:00000000000036E6                 mov     r8, rbp
.text:00000000000036E9                 xor     edi, edi        ; status
.text:00000000000036EB                 xor     eax, eax
.text:00000000000036ED                 call    _error
.text:00000000000036F2
.text:00000000000036F2 loc_36F2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000036F2                                         ; close_stdout+A2↓j
.text:00000000000036F2                 mov     edi, cs:exit_failure ; status
.text:00000000000036F8                 call    __exit
.text:00000000000036FD ; ---------------------------------------------------------------------------
.text:00000000000036FD
.text:00000000000036FD loc_36FD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000036FD                 mov     esi, [rbx]      ; errnum
.text:00000000000036FF                 lea     rdx, format+4   ; format
.text:0000000000003706                 mov     rcx, rax
.text:0000000000003709                 xor     edi, edi        ; status
.text:000000000000370B                 xor     eax, eax
.text:000000000000370D                 call    _error
.text:0000000000003712                 jmp     short loc_36F2
.text:0000000000003712 ; } // starts at 3670
.text:0000000000003712 close_stdout    endp
.text:0000000000003712
.text:0000000000003712 ; ---------------------------------------------------------------------------
.text:0000000000003714                 align 20h
.text:0000000000003720
.text:0000000000003720 ; =============== S U B R O U T I N E =======================================
.text:0000000000003720
.text:0000000000003720
.text:0000000000003720                 public hard_locale
.text:0000000000003720 hard_locale     proc near               ; CODE XREF: main+2AD↑p
.text:0000000000003720                                         ; rpl_mbrtowc+47↓p
.text:0000000000003720 ; __unwind {
.text:0000000000003720                 sub     rsp, 8
.text:0000000000003724                 xor     esi, esi        ; locale
.text:0000000000003726                 call    _setlocale
.text:000000000000372B                 mov     rdx, rax
.text:000000000000372E                 mov     eax, 1
.text:0000000000003733                 test    rdx, rdx
.text:0000000000003736                 jz      short loc_3755
.text:0000000000003738                 lea     rdi, aC         ; "C"
.text:000000000000373F                 mov     ecx, 2
.text:0000000000003744                 mov     rsi, rdx
.text:0000000000003747                 repe cmpsb
.text:0000000000003749                 setnbe  cl
.text:000000000000374C                 sbb     cl, 0
.text:000000000000374F                 xor     eax, eax
.text:0000000000003751                 test    cl, cl
.text:0000000000003753                 jnz     short loc_3760
.text:0000000000003755
.text:0000000000003755 loc_3755:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000003755                 add     rsp, 8
.text:0000000000003759                 retn
.text:0000000000003759 ; ---------------------------------------------------------------------------
.text:000000000000375A                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000003760                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000003767                 mov     ecx, 6
.text:000000000000376C                 mov     rsi, rdx
.text:000000000000376F                 repe cmpsb
.text:0000000000003771                 setnbe  al
.text:0000000000003774                 sbb     al, 0
.text:0000000000003776                 test    al, al
.text:0000000000003778                 setnz   al
.text:000000000000377B                 add     rsp, 8
.text:000000000000377F                 retn
.text:000000000000377F ; } // starts at 3720
.text:000000000000377F hard_locale     endp
.text:000000000000377F
.text:0000000000003780
.text:0000000000003780 ; =============== S U B R O U T I N E =======================================
.text:0000000000003780
.text:0000000000003780 ; Attributes: info_from_lumina
.text:0000000000003780
.text:0000000000003780 ; char *__fastcall imaxtostr(intmax_t i, char *buf)
.text:0000000000003780                 public imaxtostr
.text:0000000000003780 imaxtostr       proc near               ; CODE XREF: time_string_isra_1+6B↑p
.text:0000000000003780 ; __unwind {
.text:0000000000003780                 test    rdi, rdi
.text:0000000000003783                 lea     rcx, [rsi+14h]
.text:0000000000003787                 mov     byte ptr [rsi+14h], 0
.text:000000000000378B                 mov     r9, 6666666666666667h
.text:0000000000003795                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:000000000000379F                 mov     r8d, 30h ; '0'
.text:00000000000037A5                 js      short loc_37E3
.text:00000000000037A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: imaxtostr+54↓j
.text:00000000000037B0                 mov     rax, rdi
.text:00000000000037B3                 sub     rcx, 1
.text:00000000000037B7                 mul     rsi
.text:00000000000037BA                 shr     rdx, 3
.text:00000000000037BE                 lea     rax, [rdx+rdx*4]
.text:00000000000037C2                 add     rax, rax
.text:00000000000037C5                 sub     rdi, rax
.text:00000000000037C8                 add     edi, 30h ; '0'
.text:00000000000037CB                 test    rdx, rdx
.text:00000000000037CE                 mov     [rcx], dil
.text:00000000000037D1                 mov     rdi, rdx
.text:00000000000037D4                 jnz     short loc_37B0
.text:00000000000037D6                 mov     rax, rcx
.text:00000000000037D9                 retn
.text:00000000000037D9 ; ---------------------------------------------------------------------------
.text:00000000000037DA                 align 20h
.text:00000000000037E0
.text:00000000000037E0 loc_37E0:                               ; CODE XREF: imaxtostr+8E↓j
.text:00000000000037E0                 mov     rcx, rsi
.text:00000000000037E3
.text:00000000000037E3 loc_37E3:                               ; CODE XREF: imaxtostr+25↑j
.text:00000000000037E3                 mov     rax, rdi
.text:00000000000037E6                 lea     rsi, [rcx-1]
.text:00000000000037EA                 imul    r9
.text:00000000000037ED                 mov     rax, rdi
.text:00000000000037F0                 sar     rax, 3Fh
.text:00000000000037F4                 sar     rdx, 2
.text:00000000000037F8                 sub     rdx, rax
.text:00000000000037FB                 lea     rax, [rdx+rdx*4]
.text:00000000000037FF                 lea     eax, [r8+rax*2]
.text:0000000000003803                 sub     eax, edi
.text:0000000000003805                 test    rdx, rdx
.text:0000000000003808                 mov     rdi, rdx
.text:000000000000380B                 mov     [rcx-1], al
.text:000000000000380E                 jnz     short loc_37E0
.text:0000000000003810                 sub     rcx, 2
.text:0000000000003814                 mov     byte ptr [rsi-1], 2Dh ; '-'
.text:0000000000003818                 mov     rax, rcx
.text:000000000000381B                 retn
.text:000000000000381B ; } // starts at 3780
.text:000000000000381B imaxtostr       endp
.text:000000000000381B
.text:000000000000381B ; ---------------------------------------------------------------------------
.text:000000000000381C                 align 20h
.text:0000000000003820
.text:0000000000003820 ; =============== S U B R O U T I N E =======================================
.text:0000000000003820
.text:0000000000003820
.text:0000000000003820                 public set_program_name
.text:0000000000003820 set_program_name proc near              ; CODE XREF: main+12↑p
.text:0000000000003820 ; __unwind {
.text:0000000000003820                 test    rdi, rdi
.text:0000000000003823                 push    rbx
.text:0000000000003824                 jz      short loc_389D
.text:0000000000003826                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000382B                 mov     rbx, rdi
.text:000000000000382E                 call    _strrchr
.text:0000000000003833                 test    rax, rax
.text:0000000000003836                 jz      short loc_388D
.text:0000000000003838                 lea     r8, [rax+1]
.text:000000000000383C                 mov     rdx, r8
.text:000000000000383F                 sub     rdx, rbx
.text:0000000000003842                 cmp     rdx, 6
.text:0000000000003846                 jle     short loc_388D
.text:0000000000003848                 lea     rsi, [rax-6]
.text:000000000000384C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003853                 mov     ecx, 7
.text:0000000000003858                 repe cmpsb
.text:000000000000385A                 setnbe  dl
.text:000000000000385D                 sbb     dl, 0
.text:0000000000003860                 test    dl, dl
.text:0000000000003862                 jnz     short loc_388D
.text:0000000000003864                 lea     rdi, aLt        ; "lt-"
.text:000000000000386B                 mov     ecx, 3
.text:0000000000003870                 mov     rsi, r8
.text:0000000000003873                 mov     rbx, r8
.text:0000000000003876                 repe cmpsb
.text:0000000000003878                 setnbe  dl
.text:000000000000387B                 sbb     dl, 0
.text:000000000000387E                 test    dl, dl
.text:0000000000003880                 jnz     short loc_388D
.text:0000000000003882                 lea     rbx, [rax+4]
.text:0000000000003886                 mov     cs:__bss_start, rbx
.text:000000000000388D
.text:000000000000388D loc_388D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000388D                                         ; set_program_name+26↑j ...
.text:000000000000388D                 mov     cs:program_name, rbx
.text:0000000000003894                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000389B                 pop     rbx
.text:000000000000389C                 retn
.text:000000000000389D ; ---------------------------------------------------------------------------
.text:000000000000389D
.text:000000000000389D loc_389D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000389D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000038A4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000038AB                 mov     edx, 37h ; '7'  ; n
.text:00000000000038B0                 mov     esi, 1          ; size
.text:00000000000038B5                 call    _fwrite
.text:00000000000038BA                 call    _abort
.text:00000000000038BA ; } // starts at 3820
.text:00000000000038BA set_program_name endp
.text:00000000000038BA
.text:00000000000038BA ; ---------------------------------------------------------------------------
.text:00000000000038BF                 align 20h
.text:00000000000038C0
.text:00000000000038C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038C0
.text:00000000000038C0 ; Attributes: info_from_lumina
.text:00000000000038C0
.text:00000000000038C0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000038C0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000038C0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000038C0 ; __unwind {
.text:00000000000038C0                 push    rbp
.text:00000000000038C1                 push    rbx
.text:00000000000038C2                 mov     rbp, rdi
.text:00000000000038C5                 mov     ebx, esi
.text:00000000000038C7                 sub     rsp, 8
.text:00000000000038CB                 call    locale_charset
.text:00000000000038D0                 movzx   edx, byte ptr [rax]
.text:00000000000038D3                 and     edx, 0FFFFFFDFh
.text:00000000000038D6                 cmp     dl, 55h ; 'U'
.text:00000000000038D9                 jz      short loc_3950
.text:00000000000038DB                 cmp     dl, 47h ; 'G'
.text:00000000000038DE                 jz      short loc_3900
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000038E0                                         ; gettext_quote+50↓j ...
.text:00000000000038E0                 lea     rax, unk_8D43
.text:00000000000038E7                 lea     rdx, asc_8D45   ; "'"
.text:00000000000038EE                 cmp     ebx, 9
.text:00000000000038F1                 cmovnz  rax, rdx
.text:00000000000038F5                 add     rsp, 8
.text:00000000000038F9                 pop     rbx
.text:00000000000038FA                 pop     rbp
.text:00000000000038FB                 retn
.text:00000000000038FB ; ---------------------------------------------------------------------------
.text:00000000000038FC                 align 20h
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003900                 movzx   edx, byte ptr [rax+1]
.text:0000000000003904                 and     edx, 0FFFFFFDFh
.text:0000000000003907                 cmp     dl, 42h ; 'B'
.text:000000000000390A                 jnz     short loc_38E0
.text:000000000000390C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003910                 jnz     short loc_38E0
.text:0000000000003912                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003916                 jnz     short loc_38E0
.text:0000000000003918                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000391C                 jnz     short loc_38E0
.text:000000000000391E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003922                 jnz     short loc_38E0
.text:0000000000003924                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003928                 jnz     short loc_38E0
.text:000000000000392A                 cmp     byte ptr [rax+7], 0
.text:000000000000392E                 jnz     short loc_38E0
.text:0000000000003930                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003934                 lea     rax, unk_8D3C
.text:000000000000393B                 lea     rdx, unk_8D40
.text:0000000000003942                 cmovnz  rax, rdx
.text:0000000000003946                 add     rsp, 8
.text:000000000000394A                 pop     rbx
.text:000000000000394B                 pop     rbp
.text:000000000000394C                 retn
.text:000000000000394C ; ---------------------------------------------------------------------------
.text:000000000000394D                 align 10h
.text:0000000000003950
.text:0000000000003950 loc_3950:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003950                 movzx   edx, byte ptr [rax+1]
.text:0000000000003954                 and     edx, 0FFFFFFDFh
.text:0000000000003957                 cmp     dl, 54h ; 'T'
.text:000000000000395A                 jnz     short loc_38E0
.text:000000000000395C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003960                 and     edx, 0FFFFFFDFh
.text:0000000000003963                 cmp     dl, 46h ; 'F'
.text:0000000000003966                 jnz     loc_38E0
.text:000000000000396C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003970                 jnz     loc_38E0
.text:0000000000003976                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000397A                 jnz     loc_38E0
.text:0000000000003980                 cmp     byte ptr [rax+5], 0
.text:0000000000003984                 jnz     loc_38E0
.text:000000000000398A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000398E                 lea     rax, unk_8D34
.text:0000000000003995                 lea     rdx, unk_8D38
.text:000000000000399C                 cmovnz  rax, rdx
.text:00000000000039A0                 add     rsp, 8
.text:00000000000039A4                 pop     rbx
.text:00000000000039A5                 pop     rbp
.text:00000000000039A6                 retn
.text:00000000000039A6 ; } // starts at 38C0
.text:00000000000039A6 gettext_quote   endp
.text:00000000000039A6
.text:00000000000039A6 ; ---------------------------------------------------------------------------
.text:00000000000039A7                 align 10h
.text:00000000000039B0
.text:00000000000039B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039B0
.text:00000000000039B0 ; Attributes: info_from_lumina
.text:00000000000039B0
.text:00000000000039B0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000039B0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000039B0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000039B0
.text:00000000000039B0 var_E0          = dword ptr -0E0h
.text:00000000000039B0 var_DB          = byte ptr -0DBh
.text:00000000000039B0 var_DA          = byte ptr -0DAh
.text:00000000000039B0 var_D9          = byte ptr -0D9h
.text:00000000000039B0 s               = qword ptr -0D8h
.text:00000000000039B0 n               = qword ptr -0D0h
.text:00000000000039B0 var_C8          = qword ptr -0C8h
.text:00000000000039B0 ps              = qword ptr -0C0h
.text:00000000000039B0 var_B8          = qword ptr -0B8h
.text:00000000000039B0 var_B0          = qword ptr -0B0h
.text:00000000000039B0 var_A8          = qword ptr -0A8h
.text:00000000000039B0 s2              = qword ptr -0A0h
.text:00000000000039B0 var_98          = qword ptr -98h
.text:00000000000039B0 var_90          = qword ptr -90h
.text:00000000000039B0 var_88          = qword ptr -88h
.text:00000000000039B0 var_80          = qword ptr -80h
.text:00000000000039B0 var_78          = qword ptr -78h
.text:00000000000039B0 var_70          = dword ptr -70h
.text:00000000000039B0 var_6C          = byte ptr -6Ch
.text:00000000000039B0 var_6B          = byte ptr -6Bh
.text:00000000000039B0 var_6A          = byte ptr -6Ah
.text:00000000000039B0 var_69          = byte ptr -69h
.text:00000000000039B0 var_68          = qword ptr -68h
.text:00000000000039B0 var_60          = qword ptr -60h
.text:00000000000039B0 wc              = dword ptr -4Ch
.text:00000000000039B0 var_48          = qword ptr -48h
.text:00000000000039B0 var_40          = qword ptr -40h
.text:00000000000039B0 arg_0           = qword ptr  8
.text:00000000000039B0 arg_8           = qword ptr  10h
.text:00000000000039B0 arg_10          = qword ptr  18h
.text:00000000000039B0
.text:00000000000039B0 ; __unwind {
.text:00000000000039B0                 push    r15
.text:00000000000039B2                 push    r14
.text:00000000000039B4                 mov     r15d, r8d
.text:00000000000039B7                 push    r13
.text:00000000000039B9                 push    r12
.text:00000000000039BB                 mov     r14, rdi
.text:00000000000039BE                 push    rbp
.text:00000000000039BF                 push    rbx
.text:00000000000039C0                 mov     ebx, r9d
.text:00000000000039C3                 mov     r13, rsi
.text:00000000000039C6                 mov     rbp, rcx
.text:00000000000039C9                 and     ebx, 2
.text:00000000000039CC                 sub     rsp, 0B8h
.text:00000000000039D3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000039DB                 mov     [rsp+0E8h+s], rdx
.text:00000000000039E0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000039E5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000039EA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000039EF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000039F7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000039FC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003A04                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003A09                 mov     rax, fs:28h
.text:0000000000003A12                 mov     [rsp+0E8h+var_40], rax
.text:0000000000003A1A                 xor     eax, eax
.text:0000000000003A1C                 call    ___ctype_get_mb_cur_max
.text:0000000000003A21                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003A25                 mov     [rsp+0E8h+var_90], rax
.text:0000000000003A2A                 ja      def_3A41        ; jumptable 00000000000121F1 default case
.text:0000000000003A30                 lea     rcx, jpt_3A41
.text:0000000000003A37                 mov     edx, r15d
.text:0000000000003A3A                 movsxd  rax, ds:(jpt_3A41 - 8DA0h)[rcx+rdx*4]
.text:0000000000003A3E                 add     rax, rcx
.text:0000000000003A41                 jmp     rax             ; switch jump
.text:0000000000003A43 ; ---------------------------------------------------------------------------
.text:0000000000003A43
.text:0000000000003A43 loc_3A43:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A43                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003A43                                         ; DATA XREF: ...
.text:0000000000003A43                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003A48                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A4D                 xor     r12d, r12d
.text:0000000000003A50                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A59                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003A5E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003A63
.text:0000000000003A63 loc_3A63:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003A63                 lea     rax, asc_8D45   ; "'"
.text:0000000000003A6A                 mov     [rsp+0E8h+n], 1
.text:0000000000003A73                 xor     r15d, r15d
.text:0000000000003A76                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003A7E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003A83
.text:0000000000003A83 loc_3A83:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003A83                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003A83                 xor     r11d, r11d
.text:0000000000003A86                 mov     rax, rbp
.text:0000000000003A89                 mov     r8d, r12d
.text:0000000000003A8C                 mov     rbp, r11
.text:0000000000003A8F                 mov     r11, rax
.text:0000000000003A92                 nop     word ptr [rax+rax+00h]
.text:0000000000003A98
.text:0000000000003A98 loc_3A98:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003A98                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003A98                 cmp     r11, rbp
.text:0000000000003A9B                 setnz   r12b
.text:0000000000003A9F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AA3                 jnz     short loc_3AB2
.text:0000000000003AA5                 mov     rax, [rsp+0E8h+s]
.text:0000000000003AAA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000003AAE                 setnz   r12b
.text:0000000000003AB2
.text:0000000000003AB2 loc_3AB2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003AB2                 test    r12b, r12b
.text:0000000000003AB5                 jz      loc_4110
.text:0000000000003ABB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003AC0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003AC5                 lea     r9, [rdi+rbp]
.text:0000000000003AC9                 setnz   al
.text:0000000000003ACC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003AD0                 mov     r10d, eax
.text:0000000000003AD3                 jz      loc_3B80
.text:0000000000003AD9                 mov     rax, [rsp+0E8h+n]
.text:0000000000003ADE                 test    rax, rax
.text:0000000000003AE1                 jz      loc_3F10
.text:0000000000003AE7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AEB                 lea     rbx, [rbp+rax+0]
.text:0000000000003AF0                 jnz     short loc_3B20
.text:0000000000003AF2                 cmp     rax, 1
.text:0000000000003AF6                 jbe     short loc_3B20
.text:0000000000003AF8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003AFD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003B02                 mov     [rsp+0E8h+ps], r9
.text:0000000000003B07                 call    _strlen
.text:0000000000003B0C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003B12                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003B18                 mov     r11, rax
.text:0000000000003B1B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003B20                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003B20                 cmp     rbx, r11
.text:0000000000003B23                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003B28                 ja      loc_40E0
.text:0000000000003B2E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003B33                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003B38                 mov     rdi, r9         ; s1
.text:0000000000003B3B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003B40                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003B45                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003B4A                 call    _memcmp
.text:0000000000003B4F                 test    eax, eax
.text:0000000000003B51                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003B56                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003B5C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003B61                 jnz     loc_40E0
.text:0000000000003B67                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003B6C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003B72                 jnz     loc_4AF5
.text:0000000000003B78                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003B80                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003B80                 movzx   ebx, byte ptr [r9]
.text:0000000000003B84                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003B87                 ja      def_3B9E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003B8D                 lea     rcx, jpt_3B9E
.text:0000000000003B94                 movzx   edx, bl
.text:0000000000003B97                 movsxd  rax, ds:(jpt_3B9E - 8DCCh)[rcx+rdx*4]
.text:0000000000003B9B                 add     rax, rcx
.text:0000000000003B9E                 jmp     rax             ; switch jump
.text:0000000000003BA0 ; ---------------------------------------------------------------------------
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003BA0                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000003BA0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003BA3
.text:0000000000003BA3 loc_3BA3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003BA3                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003BA3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003BA7                 setnz   al
.text:0000000000003BAA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BAE                 jnz     short loc_3BBC
.text:0000000000003BB0                 mov     rax, [rsp+0E8h+s]
.text:0000000000003BB5                 cmp     byte ptr [rax+1], 0
.text:0000000000003BB9                 setnz   al
.text:0000000000003BBC
.text:0000000000003BBC loc_3BBC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000003BBC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003BC1                 setz    dl
.text:0000000000003BC4                 test    al, al
.text:0000000000003BC6                 jz      loc_3E18
.text:0000000000003BCC
.text:0000000000003BCC loc_3BCC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000003BCC                 xor     r12d, r12d
.text:0000000000003BCF                 xor     eax, eax
.text:0000000000003BD1                 nop     dword ptr [rax+00000000h]
.text:0000000000003BD8
.text:0000000000003BD8 loc_3BD8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003BD8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003BD8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000003BDD                 jnz     loc_3CF2
.text:0000000000003BE3                 test    dl, dl
.text:0000000000003BE5                 jnz     loc_3CF2
.text:0000000000003BEB
.text:0000000000003BEB loc_3BEB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000003BEB                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003BF0                 test    rsi, rsi
.text:0000000000003BF3                 jz      short loc_3C09
.text:0000000000003BF5                 mov     edx, ebx
.text:0000000000003BF7                 shr     dl, 5
.text:0000000000003BFA                 movzx   edx, dl
.text:0000000000003BFD                 mov     edx, [rsi+rdx*4]
.text:0000000000003C00                 bt      edx, ebx
.text:0000000000003C03                 jb      loc_3D53
.text:0000000000003C09
.text:0000000000003C09 loc_3C09:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003C09                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003C09                 test    r10b, r10b
.text:0000000000003C0C                 jnz     loc_3D53
.text:0000000000003C12                 xor     eax, 1
.text:0000000000003C15                 add     rbp, 1
.text:0000000000003C19                 and     eax, r8d
.text:0000000000003C1C
.text:0000000000003C1C loc_3C1C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000003C1C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000003C1C                 test    al, al
.text:0000000000003C1E                 jz      short loc_3C40
.text:0000000000003C20                 cmp     r13, r15
.text:0000000000003C23                 jbe     short loc_3C2A
.text:0000000000003C25                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003C2A
.text:0000000000003C2A loc_3C2A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000003C2A                 lea     rax, [r15+1]
.text:0000000000003C2E                 cmp     r13, rax
.text:0000000000003C31                 jbe     short loc_3C39
.text:0000000000003C33                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003C39
.text:0000000000003C39 loc_3C39:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003C39                 add     r15, 2
.text:0000000000003C3D                 xor     r8d, r8d
.text:0000000000003C40
.text:0000000000003C40 loc_3C40:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003C40                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003C40                 cmp     r15, r13
.text:0000000000003C43                 jnb     short loc_3C49
.text:0000000000003C45                 mov     [r14+r15], bl
.text:0000000000003C49
.text:0000000000003C49 loc_3C49:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003C49                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000003C4E                 add     r15, 1
.text:0000000000003C52                 mov     eax, 0
.text:0000000000003C57                 test    r12b, r12b
.text:0000000000003C5A                 cmovz   edi, eax
.text:0000000000003C5D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003C62                 jmp     loc_3A98
.text:0000000000003C62 ; ---------------------------------------------------------------------------
.text:0000000000003C67                 align 10h
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003C70                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000003C70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003C73
.text:0000000000003C73 loc_3C73:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003C73                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003C73                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003C77                 cmp     eax, 2
.text:0000000000003C7A                 jz      loc_4238
.text:0000000000003C80                 cmp     eax, 5
.text:0000000000003C83                 jz      loc_41F8
.text:0000000000003C89                 cmp     eax, 2
.text:0000000000003C8C                 mov     ebx, 3Fh ; '?'
.text:0000000000003C91                 setz    dl
.text:0000000000003C94                 xor     r12d, r12d
.text:0000000000003C97                 xor     eax, eax
.text:0000000000003C99                 jmp     loc_3BD8
.text:0000000000003C99 ; ---------------------------------------------------------------------------
.text:0000000000003C9E                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 loc_3CA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003CA0                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000003CA0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003CA3
.text:0000000000003CA3 loc_3CA3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003CA3                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003CA3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003CA8                 jz      loc_41B0
.text:0000000000003CAE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003CB3                 xor     edx, edx
.text:0000000000003CB5                 xor     eax, eax
.text:0000000000003CB7                 mov     ebx, 27h ; '''
.text:0000000000003CBC                 jmp     loc_3BD8
.text:0000000000003CBC ; ---------------------------------------------------------------------------
.text:0000000000003CC1                 align 8
.text:0000000000003CC8
.text:0000000000003CC8 loc_3CC8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003CC8                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003CC8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000003CCD                 mov     ebx, 74h ; 't'
.text:0000000000003CD2
.text:0000000000003CD2 loc_3CD2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003CD2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003CD2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003CD7                 setz    al
.text:0000000000003CDA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003CDE                 jnz     loc_3E2E
.text:0000000000003CE4
.text:0000000000003CE4 loc_3CE4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003CE4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003CE4                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003CE9                 jnz     short loc_3D50
.text:0000000000003CEB
.text:0000000000003CEB loc_3CEB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000003CEB                 mov     ebx, edx
.text:0000000000003CED                 xor     r12d, r12d
.text:0000000000003CF0                 xor     eax, eax
.text:0000000000003CF2
.text:0000000000003CF2 loc_3CF2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003CF2                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003CF2                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003CF7                 jnz     loc_3BEB
.text:0000000000003CFD                 jmp     loc_3C09
.text:0000000000003CFD ; ---------------------------------------------------------------------------
.text:0000000000003D02                 align 8
.text:0000000000003D08
.text:0000000000003D08 loc_3D08:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D08                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003D08                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000003D0D                 mov     ebx, 62h ; 'b'
.text:0000000000003D12                 jmp     short loc_3CE4
.text:0000000000003D12 ; ---------------------------------------------------------------------------
.text:0000000000003D14                 align 8
.text:0000000000003D18
.text:0000000000003D18 loc_3D18:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003D18                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003D18                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000003D1D                 jz      loc_40F0
.text:0000000000003D23                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003D28                 jz      loc_3F40
.text:0000000000003D2E
.text:0000000000003D2E loc_3D2E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000003D2E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003D33                 jz      loc_3F40
.text:0000000000003D39                 cmp     [rsp+0E8h+n], 0
.text:0000000000003D3F                 jnz     loc_40FB
.text:0000000000003D45                 mov     ebx, 5Ch ; '\'
.text:0000000000003D4A                 nop     word ptr [rax+rax+00h]
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003D50                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003D50                 xor     r12d, r12d
.text:0000000000003D53
.text:0000000000003D53 loc_3D53:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003D53                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003D53                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D58                 setz    dl
.text:0000000000003D5B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003D60                 mov     eax, edx
.text:0000000000003D62                 jnz     loc_45B8
.text:0000000000003D68                 mov     eax, r8d
.text:0000000000003D6B                 xor     eax, 1
.text:0000000000003D6E                 and     al, dl
.text:0000000000003D70                 jz      short loc_3DA1
.text:0000000000003D72                 cmp     r13, r15
.text:0000000000003D75                 jbe     short loc_3D7C
.text:0000000000003D77                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003D7C
.text:0000000000003D7C loc_3D7C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000003D7C                 lea     rdx, [r15+1]
.text:0000000000003D80                 cmp     r13, rdx
.text:0000000000003D83                 jbe     short loc_3D8B
.text:0000000000003D85                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003D8B
.text:0000000000003D8B loc_3D8B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000003D8B                 lea     rdx, [r15+2]
.text:0000000000003D8F                 cmp     r13, rdx
.text:0000000000003D92                 jbe     short loc_3D9A
.text:0000000000003D94                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003D9A
.text:0000000000003D9A loc_3D9A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000003D9A                 add     r15, 3
.text:0000000000003D9E                 mov     r8d, eax
.text:0000000000003DA1
.text:0000000000003DA1 loc_3DA1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003DA1                 cmp     r13, r15
.text:0000000000003DA4                 jbe     short loc_3DAB
.text:0000000000003DA6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003DAB
.text:0000000000003DAB loc_3DAB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000003DAB                 add     r15, 1
.text:0000000000003DAF                 add     rbp, 1
.text:0000000000003DB3                 jmp     loc_3C40
.text:0000000000003DB3 ; ---------------------------------------------------------------------------
.text:0000000000003DB8                 align 20h
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003DC0                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003DC0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003DC5                 jnz     loc_3F93
.text:0000000000003DCB                 xor     edx, edx
.text:0000000000003DCD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003DD2                 jz      loc_3CEB
.text:0000000000003DD8                 add     rbp, 1
.text:0000000000003DDC                 jmp     loc_3A98
.text:0000000000003DDC ; ---------------------------------------------------------------------------
.text:0000000000003DE1                 align 8
.text:0000000000003DE8
.text:0000000000003DE8 loc_3DE8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003DE8                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003DE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000003DED                 setz    dl
.text:0000000000003DF0                 xor     eax, eax
.text:0000000000003DF2                 jmp     loc_3BD8
.text:0000000000003DF2 ; ---------------------------------------------------------------------------
.text:0000000000003DF7                 align 20h
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E00                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003E00                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003E05                 mov     ebx, 61h ; 'a'
.text:0000000000003E0A                 jmp     loc_3CE4
.text:0000000000003E0A ; ---------------------------------------------------------------------------
.text:0000000000003E0F                 align 10h
.text:0000000000003E10
.text:0000000000003E10 loc_3E10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E10                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003E10                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003E15                 setz    dl
.text:0000000000003E18
.text:0000000000003E18 loc_3E18:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003E18                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003E18                 test    rbp, rbp
.text:0000000000003E1B                 jnz     loc_3BCC
.text:0000000000003E21
.text:0000000000003E21 loc_3E21:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003E21                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003E21                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003E26                 and     al, dl
.text:0000000000003E28                 jz      loc_3BD8
.text:0000000000003E2E
.text:0000000000003E2E loc_3E2E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000003E2E                 mov     rbp, r11
.text:0000000000003E31                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E39                 jmp     loc_4539
.text:0000000000003E39 ; ---------------------------------------------------------------------------
.text:0000000000003E3E                 align 20h
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E40                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003E40                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003E45                 setz    dl
.text:0000000000003E48                 xor     r12d, r12d
.text:0000000000003E4B                 jmp     short loc_3E21
.text:0000000000003E4B ; ---------------------------------------------------------------------------
.text:0000000000003E4D                 align 10h
.text:0000000000003E50
.text:0000000000003E50 loc_3E50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E50                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003E50                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003E55                 mov     ebx, 20h ; ' '
.text:0000000000003E5A                 setz    dl
.text:0000000000003E5D                 jmp     short loc_3E21
.text:0000000000003E5D ; ---------------------------------------------------------------------------
.text:0000000000003E5F                 align 20h
.text:0000000000003E60
.text:0000000000003E60 loc_3E60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E60                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003E60                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003E65                 mov     ebx, 72h ; 'r'
.text:0000000000003E6A                 jmp     loc_3CD2
.text:0000000000003E6A ; ---------------------------------------------------------------------------
.text:0000000000003E6F                 align 10h
.text:0000000000003E70
.text:0000000000003E70 loc_3E70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E70                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003E70                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003E75                 mov     ebx, 66h ; 'f'
.text:0000000000003E7A                 jmp     loc_3CE4
.text:0000000000003E7A ; ---------------------------------------------------------------------------
.text:0000000000003E7F                 align 20h
.text:0000000000003E80
.text:0000000000003E80 loc_3E80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E80                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003E80                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003E85                 mov     ebx, 76h ; 'v'
.text:0000000000003E8A                 jmp     loc_3CE4
.text:0000000000003E8A ; ---------------------------------------------------------------------------
.text:0000000000003E8F                 align 10h
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003E90                                         ; DATA XREF: .rodata:jpt_3B9E↓o
.text:0000000000003E90                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003E95                 mov     ebx, 6Eh ; 'n'
.text:0000000000003E9A                 jmp     loc_3CD2
.text:0000000000003E9A ; ---------------------------------------------------------------------------
.text:0000000000003E9F                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 def_3F2A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003EA0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003EA0                                         ; DATA XREF: ...
.text:0000000000003EA0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003EA3                 nop     dword ptr [rax+rax+00h]
.text:0000000000003EA8
.text:0000000000003EA8 def_3B9E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003EA8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003EA8                                         ; DATA XREF: ...
.text:0000000000003EA8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003EAE                 jnz     loc_4258
.text:0000000000003EB4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003EB9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000003EBE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003EC3                 call    ___ctype_b_loc
.text:0000000000003EC8                 mov     rcx, [rax]
.text:0000000000003ECB                 movzx   edx, bl
.text:0000000000003ECE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003ED4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003EDA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003EDF                 mov     edi, 1
.text:0000000000003EE4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003EE8                 and     ax, 4000h
.text:0000000000003EEC                 setnz   r12b
.text:0000000000003EF0                 setz    al
.text:0000000000003EF3                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003EF7
.text:0000000000003EF7 loc_3EF7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003EF7                 test    al, al
.text:0000000000003EF9                 jnz     loc_4891
.text:0000000000003EFF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003F04                 setz    dl
.text:0000000000003F07                 jmp     loc_3BD8
.text:0000000000003F07 ; ---------------------------------------------------------------------------
.text:0000000000003F0C                 align 10h
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003F10                 movzx   ebx, byte ptr [r9]
.text:0000000000003F14                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003F17                 ja      short def_3F2A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003F19                 lea     rcx, jpt_3F2A
.text:0000000000003F20                 movzx   edx, bl
.text:0000000000003F23                 movsxd  rax, ds:(jpt_3F2A - 8FC8h)[rcx+rdx*4]
.text:0000000000003F27                 add     rax, rcx
.text:0000000000003F2A                 jmp     rax             ; switch jump
.text:0000000000003F2A ; ---------------------------------------------------------------------------
.text:0000000000003F2C                 align 10h
.text:0000000000003F30
.text:0000000000003F30 loc_3F30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F30                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000003F30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003F33                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003F38                 jnz     loc_3D2E
.text:0000000000003F3E                 xchg    ax, ax
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003F40                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003F40                 mov     edx, 5Ch ; '\'
.text:0000000000003F45                 mov     ebx, 5Ch ; '\'
.text:0000000000003F4A                 jmp     loc_3CE4
.text:0000000000003F4A ; ---------------------------------------------------------------------------
.text:0000000000003F4F                 align 10h
.text:0000000000003F50
.text:0000000000003F50 loc_3F50:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F50                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000003F50                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003F55                 xor     r10d, r10d
.text:0000000000003F58                 mov     ebx, 66h ; 'f'
.text:0000000000003F5D                 jmp     loc_3CE4
.text:0000000000003F5D ; ---------------------------------------------------------------------------
.text:0000000000003F62                 align 8
.text:0000000000003F68
.text:0000000000003F68 loc_3F68:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F68                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000003F68                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000003F6D                 xor     r10d, r10d
.text:0000000000003F70                 mov     ebx, 6Eh ; 'n'
.text:0000000000003F75                 jmp     loc_3CD2
.text:0000000000003F75 ; ---------------------------------------------------------------------------
.text:0000000000003F7A                 align 20h
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F80                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000003F80                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003F85                 jmp     loc_3D50
.text:0000000000003F85 ; ---------------------------------------------------------------------------
.text:0000000000003F8A                 align 10h
.text:0000000000003F90
.text:0000000000003F90 loc_3F90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003F90                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000003F90                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003F93
.text:0000000000003F93 loc_3F93:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003F93                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003F98                 setz    dl
.text:0000000000003F9B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003FA0                 jnz     loc_4B3A
.text:0000000000003FA6                 mov     eax, r8d
.text:0000000000003FA9                 mov     rcx, r15
.text:0000000000003FAC                 xor     eax, 1
.text:0000000000003FAF                 and     al, dl
.text:0000000000003FB1                 jz      short loc_3FE0
.text:0000000000003FB3                 cmp     r13, r15
.text:0000000000003FB6                 jbe     short loc_3FBD
.text:0000000000003FB8                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003FBD
.text:0000000000003FBD loc_3FBD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000003FBD                 lea     rcx, [r15+1]
.text:0000000000003FC1                 cmp     r13, rcx
.text:0000000000003FC4                 jbe     short loc_3FCC
.text:0000000000003FC6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003FCC
.text:0000000000003FCC loc_3FCC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000003FCC                 lea     rcx, [r15+2]
.text:0000000000003FD0                 cmp     r13, rcx
.text:0000000000003FD3                 ja      loc_4609
.text:0000000000003FD9
.text:0000000000003FD9 loc_3FD9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003FD9                 lea     rcx, [r15+3]
.text:0000000000003FDD                 mov     r8d, eax
.text:0000000000003FE0
.text:0000000000003FE0 loc_3FE0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003FE0                 cmp     r13, rcx
.text:0000000000003FE3                 jbe     short loc_3FEA
.text:0000000000003FE5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000003FEA
.text:0000000000003FEA loc_3FEA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000003FEA                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003FEF                 lea     r15, [rcx+1]
.text:0000000000003FF3                 jz      loc_45F9
.text:0000000000003FF9                 lea     rax, [rbp+1]
.text:0000000000003FFD                 cmp     rax, r11
.text:0000000000004000                 jnb     short loc_401B
.text:0000000000004002                 mov     rax, [rsp+0E8h+s]
.text:0000000000004007                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000400C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004010                 sub     eax, 30h ; '0'
.text:0000000000004013                 cmp     al, 9
.text:0000000000004015                 jbe     loc_4849
.text:000000000000401B
.text:000000000000401B loc_401B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000401B                 mov     eax, r12d
.text:000000000000401E                 mov     ebx, 30h ; '0'
.text:0000000000004023                 xor     r12d, r12d
.text:0000000000004026                 jmp     loc_3BD8
.text:0000000000004026 ; ---------------------------------------------------------------------------
.text:000000000000402B                 align 10h
.text:0000000000004030
.text:0000000000004030 loc_4030:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004030                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000004030                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004035                 mov     r12d, r10d
.text:0000000000004038                 setz    dl
.text:000000000000403B                 xor     r10d, r10d
.text:000000000000403E                 xor     eax, eax
.text:0000000000004040                 jmp     loc_3BD8
.text:0000000000004040 ; ---------------------------------------------------------------------------
.text:0000000000004045                 align 8
.text:0000000000004048
.text:0000000000004048 loc_4048:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004048                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000004048                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000404D                 setz    dl
.text:0000000000004050                 xor     r10d, r10d
.text:0000000000004053                 jmp     loc_3E18
.text:0000000000004053 ; ---------------------------------------------------------------------------
.text:0000000000004058                 align 20h
.text:0000000000004060
.text:0000000000004060 loc_4060:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004060                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000004060                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004065                 setz    dl
.text:0000000000004068                 xor     r10d, r10d
.text:000000000000406B                 xor     r12d, r12d
.text:000000000000406E                 jmp     loc_3E21
.text:000000000000406E ; ---------------------------------------------------------------------------
.text:0000000000004073                 align 8
.text:0000000000004078
.text:0000000000004078 loc_4078:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004078                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000004078                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000407D                 mov     r12d, r10d
.text:0000000000004080                 mov     ebx, 20h ; ' '
.text:0000000000004085                 setz    dl
.text:0000000000004088                 xor     r10d, r10d
.text:000000000000408B                 jmp     loc_3E21
.text:0000000000004090 ; ---------------------------------------------------------------------------
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004090                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:0000000000004090                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000004095                 xor     r10d, r10d
.text:0000000000004098                 mov     ebx, 72h ; 'r'
.text:000000000000409D                 jmp     loc_3CD2
.text:000000000000409D ; ---------------------------------------------------------------------------
.text:00000000000040A2                 align 8
.text:00000000000040A8
.text:00000000000040A8 loc_40A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000040A8                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:00000000000040A8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000040AD                 jmp     loc_3D50
.text:00000000000040AD ; ---------------------------------------------------------------------------
.text:00000000000040B2                 align 8
.text:00000000000040B8
.text:00000000000040B8 loc_40B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000040B8                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:00000000000040B8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000040BD                 xor     r10d, r10d
.text:00000000000040C0                 mov     ebx, 74h ; 't'
.text:00000000000040C5                 jmp     loc_3CD2
.text:00000000000040C5 ; ---------------------------------------------------------------------------
.text:00000000000040CA                 align 10h
.text:00000000000040D0
.text:00000000000040D0 loc_40D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000040D0                                         ; DATA XREF: .rodata:jpt_3F2A↓o
.text:00000000000040D0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000040D5                 jmp     loc_3D50
.text:00000000000040D5 ; ---------------------------------------------------------------------------
.text:00000000000040DA                 align 20h
.text:00000000000040E0
.text:00000000000040E0 loc_40E0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000040E0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000040E0                 xor     r10d, r10d
.text:00000000000040E3                 jmp     loc_3B80
.text:00000000000040E3 ; ---------------------------------------------------------------------------
.text:00000000000040E8                 align 10h
.text:00000000000040F0
.text:00000000000040F0 loc_40F0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000040F0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000040F5                 jnz     loc_4A60
.text:00000000000040FB
.text:00000000000040FB loc_40FB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000040FB                 add     rbp, 1
.text:00000000000040FF                 mov     eax, r8d
.text:0000000000004102                 xor     r12d, r12d
.text:0000000000004105                 mov     ebx, 5Ch ; '\'
.text:000000000000410A                 jmp     loc_3C1C
.text:000000000000410A ; ---------------------------------------------------------------------------
.text:000000000000410F                 align 10h
.text:0000000000004110
.text:0000000000004110 loc_4110:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004110                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004115                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000411A                 mov     r12d, r8d
.text:000000000000411D                 mov     rbp, r11
.text:0000000000004120                 setz    dl
.text:0000000000004123                 mov     eax, ebx
.text:0000000000004125                 test    r15, r15
.text:0000000000004128                 setz    cl
.text:000000000000412B                 and     eax, edx
.text:000000000000412D                 and     al, cl
.text:000000000000412F                 jnz     loc_4B96
.text:0000000000004135                 mov     eax, ebx
.text:0000000000004137                 xor     eax, 1
.text:000000000000413A                 and     dl, al
.text:000000000000413C                 jz      loc_4AAC
.text:0000000000004142                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004147                 jz      loc_4AAA
.text:000000000000414D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004152                 jnz     loc_4B4D
.text:0000000000004158                 test    r13, r13
.text:000000000000415B                 setz    al
.text:000000000000415E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000004164                 setnz   dl
.text:0000000000004167                 and     al, dl
.text:0000000000004169                 jz      loc_4B8C
.text:000000000000416F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004174
.text:0000000000004174 loc_4174:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000004174                 lea     rbx, asc_8D45   ; "'"
.text:000000000000417B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000417F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004187                 mov     r15d, 1
.text:000000000000418D                 mov     [rsp+0E8h+n], 1
.text:0000000000004196                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000419B                 mov     [rsp+0E8h+s2], rbx
.text:00000000000041A0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000041A4                 jmp     loc_3A83
.text:00000000000041A4 ; ---------------------------------------------------------------------------
.text:00000000000041A9                 align 10h
.text:00000000000041B0
.text:00000000000041B0 loc_41B0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000041B0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000041B5                 jnz     loc_4A60
.text:00000000000041BB                 test    r13, r13
.text:00000000000041BE                 jz      loc_45C0
.text:00000000000041C4                 xor     edx, edx
.text:00000000000041C6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000041CC                 jnz     loc_45C0
.text:00000000000041D2
.text:00000000000041D2 loc_41D2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000041D2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000041D2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000041D7                 add     r15, 3
.text:00000000000041DB                 xor     eax, eax
.text:00000000000041DD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000041E2                 xor     r8d, r8d
.text:00000000000041E5                 mov     r13, rdx
.text:00000000000041E8                 mov     ebx, 27h ; '''
.text:00000000000041ED                 jmp     loc_3C09
.text:00000000000041ED ; ---------------------------------------------------------------------------
.text:00000000000041F2                 align 8
.text:00000000000041F8
.text:00000000000041F8 loc_41F8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000041F8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000041FD                 jz      short loc_4220
.text:00000000000041FF                 lea     rcx, [rbp+2]
.text:0000000000004203                 cmp     rcx, r11
.text:0000000000004206                 jnb     short loc_4220
.text:0000000000004208                 mov     rax, [rsp+0E8h+s]
.text:000000000000420D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004212                 jz      loc_49A2
.text:0000000000004218                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004220
.text:0000000000004220 loc_4220:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004220                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004220                 xor     edx, edx
.text:0000000000004222                 xor     r12d, r12d
.text:0000000000004225                 xor     eax, eax
.text:0000000000004227                 mov     ebx, 3Fh ; '?'
.text:000000000000422C                 jmp     loc_3BD8
.text:000000000000422C ; ---------------------------------------------------------------------------
.text:0000000000004231                 align 8
.text:0000000000004238
.text:0000000000004238 loc_4238:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004238                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000423D                 jnz     loc_4A60
.text:0000000000004243                 xor     r12d, r12d
.text:0000000000004246                 xor     eax, eax
.text:0000000000004248                 mov     ebx, 3Fh ; '?'
.text:000000000000424D                 jmp     loc_3C09
.text:000000000000424D ; ---------------------------------------------------------------------------
.text:0000000000004252                 align 8
.text:0000000000004258
.text:0000000000004258 loc_4258:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004258                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000004260                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004264                 mov     [rsp+0E8h+var_48], 0
.text:0000000000004270                 mov     [rsp+0E8h+ps], rax
.text:0000000000004275                 jnz     short loc_42A4
.text:0000000000004277                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000427C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000004281                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000004286                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000428B                 call    _strlen
.text:0000000000004290                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000004296                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000429C                 mov     r11, rax
.text:000000000000429F                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000042A4
.text:00000000000042A4 loc_42A4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000042A4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000042AC                 xor     ecx, ecx
.text:00000000000042AE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000042B2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000042B7                 mov     rbx, rcx
.text:00000000000042BA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000042C2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000042C7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000042CC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000042D4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000042D9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000042DE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000042E3
.text:00000000000042E3 loc_42E3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000042E3                 mov     rax, [rsp+0E8h+s]
.text:00000000000042E8                 lea     r14, [rbp+rbx+0]
.text:00000000000042ED                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000042F2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000042F7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000042FC                 lea     r13, [rax+r14]
.text:0000000000004300                 sub     rdx, r14
.text:0000000000004303                 mov     rsi, r13
.text:0000000000004306                 call    rpl_mbrtowc
.text:000000000000430B                 test    rax, rax
.text:000000000000430E                 mov     r15, rax
.text:0000000000004311                 jz      short loc_4361
.text:0000000000004313                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004317                 jz      loc_4935
.text:000000000000431D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004321                 jz      loc_48C1
.text:0000000000004327                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000432C                 setz    al
.text:000000000000432F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004333                 jnz     loc_44D0
.text:0000000000004339
.text:0000000000004339 loc_4339:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004339                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004339                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004340                 call    _iswprint
.text:0000000000004345                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000434A                 test    eax, eax
.text:000000000000434C                 mov     eax, 0
.text:0000000000004351                 cmovz   r12d, eax
.text:0000000000004355                 add     rbx, r15
.text:0000000000004358                 call    _mbsinit
.text:000000000000435D                 test    eax, eax
.text:000000000000435F                 jz      short loc_42E3
.text:0000000000004361
.text:0000000000004361 loc_4361:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004361                 mov     edx, r12d
.text:0000000000004364                 mov     rdi, rbx
.text:0000000000004367                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000436D                 xor     edx, 1
.text:0000000000004370                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004375                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000437B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000437F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004387                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000438C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004391                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004396
.text:0000000000004396 loc_4396:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004396                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004396                 cmp     rdi, 1
.text:000000000000439A                 jbe     loc_499B
.text:00000000000043A0
.text:00000000000043A0 loc_43A0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000043A0                 mov     rcx, rdi
.text:00000000000043A3                 xor     esi, esi
.text:00000000000043A5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000043AB                 add     rcx, rbp
.text:00000000000043AE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000043B3                 jmp     loc_446E
.text:00000000000043B3 ; ---------------------------------------------------------------------------
.text:00000000000043B8                 align 20h
.text:00000000000043C0
.text:00000000000043C0 loc_43C0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000043C0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000043C5                 setz    al
.text:00000000000043C8                 test    r9b, r9b
.text:00000000000043CB                 jnz     loc_4880
.text:00000000000043D1                 mov     esi, r8d
.text:00000000000043D4                 xor     esi, 1
.text:00000000000043D7                 and     al, sil
.text:00000000000043DA                 jz      short loc_440B
.text:00000000000043DC                 cmp     r13, r15
.text:00000000000043DF                 jbe     short loc_43E6
.text:00000000000043E1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000043E6
.text:00000000000043E6 loc_43E6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000043E6                 lea     rsi, [r15+1]
.text:00000000000043EA                 cmp     r13, rsi
.text:00000000000043ED                 jbe     short loc_43F5
.text:00000000000043EF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000043F5
.text:00000000000043F5 loc_43F5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000043F5                 lea     rsi, [r15+2]
.text:00000000000043F9                 cmp     r13, rsi
.text:00000000000043FC                 jbe     short loc_4404
.text:00000000000043FE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004404
.text:0000000000004404 loc_4404:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004404                 add     r15, 3
.text:0000000000004408                 mov     r8d, eax
.text:000000000000440B
.text:000000000000440B loc_440B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000440B                 cmp     r13, r15
.text:000000000000440E                 jbe     short loc_4415
.text:0000000000004410                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004415
.text:0000000000004415 loc_4415:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004415                 lea     rax, [r15+1]
.text:0000000000004419                 cmp     r13, rax
.text:000000000000441C                 jbe     short loc_442B
.text:000000000000441E                 mov     eax, ebx
.text:0000000000004420                 shr     al, 6
.text:0000000000004423                 add     eax, 30h ; '0'
.text:0000000000004426                 mov     [r14+r15+1], al
.text:000000000000442B
.text:000000000000442B loc_442B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000442B                 lea     rax, [r15+2]
.text:000000000000442F                 cmp     r13, rax
.text:0000000000004432                 jbe     short loc_4444
.text:0000000000004434                 mov     eax, ebx
.text:0000000000004436                 shr     al, 3
.text:0000000000004439                 and     eax, 7
.text:000000000000443C                 add     eax, 30h ; '0'
.text:000000000000443F                 mov     [r14+r15+2], al
.text:0000000000004444
.text:0000000000004444 loc_4444:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004444                 and     ebx, 7
.text:0000000000004447                 add     rbp, 1
.text:000000000000444B                 add     r15, 3
.text:000000000000444F                 add     ebx, 30h ; '0'
.text:0000000000004452                 cmp     rbp, rcx
.text:0000000000004455                 jnb     loc_3C40
.text:000000000000445B                 mov     esi, edx
.text:000000000000445D
.text:000000000000445D loc_445D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000445D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000445D                 cmp     r13, r15
.text:0000000000004460                 jbe     short loc_4466
.text:0000000000004462                 mov     [r14+r15], bl
.text:0000000000004466
.text:0000000000004466 loc_4466:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004466                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000446A                 add     r15, 1
.text:000000000000446E
.text:000000000000446E loc_446E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000446E                 test    dl, dl
.text:0000000000004470                 jnz     loc_43C0
.text:0000000000004476                 mov     eax, esi
.text:0000000000004478                 xor     eax, 1
.text:000000000000447B                 and     eax, r8d
.text:000000000000447E                 test    r10b, r10b
.text:0000000000004481                 jz      short loc_4491
.text:0000000000004483                 cmp     r13, r15
.text:0000000000004486                 jbe     short loc_448D
.text:0000000000004488                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000448D
.text:000000000000448D loc_448D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000448D                 add     r15, 1
.text:0000000000004491
.text:0000000000004491 loc_4491:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004491                 add     rbp, 1
.text:0000000000004495                 cmp     rbp, rcx
.text:0000000000004498                 jnb     loc_3C1C
.text:000000000000449E                 test    al, al
.text:00000000000044A0                 jz      loc_489E
.text:00000000000044A6                 cmp     r13, r15
.text:00000000000044A9                 jbe     short loc_44B0
.text:00000000000044AB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000044B0
.text:00000000000044B0 loc_44B0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000044B0                 lea     rax, [r15+1]
.text:00000000000044B4                 cmp     r13, rax
.text:00000000000044B7                 jbe     short loc_44BF
.text:00000000000044B9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000044BF
.text:00000000000044BF loc_44BF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000044BF                 add     r15, 2
.text:00000000000044C3                 xor     r10d, r10d
.text:00000000000044C6                 xor     r8d, r8d
.text:00000000000044C9                 jmp     short loc_445D
.text:00000000000044C9 ; ---------------------------------------------------------------------------
.text:00000000000044CB                 align 10h
.text:00000000000044D0
.text:00000000000044D0 loc_44D0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000044D0                 cmp     r15, 1
.text:00000000000044D4                 jz      loc_4339
.text:00000000000044DA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000044DF                 lea     rcx, [rdi+r15]
.text:00000000000044E3                 lea     rdx, [rdi+r14+1]
.text:00000000000044E8                 lea     r8, [rcx+r14]
.text:00000000000044EC                 jmp     short loc_44FD
.text:00000000000044EC ; ---------------------------------------------------------------------------
.text:00000000000044EE                 align 10h
.text:00000000000044F0
.text:00000000000044F0 loc_44F0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000044F0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000044F0                 add     rdx, 1
.text:00000000000044F4                 cmp     r8, rdx
.text:00000000000044F7                 jz      loc_4339
.text:00000000000044FD
.text:00000000000044FD loc_44FD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000044FD                 movzx   ecx, byte ptr [rdx]
.text:0000000000004500                 sub     ecx, 5Bh ; '['
.text:0000000000004503                 cmp     cl, 21h ; '!'
.text:0000000000004506                 ja      short loc_44F0
.text:0000000000004508                 mov     esi, 1
.text:000000000000450D                 shl     rsi, cl
.text:0000000000004510                 mov     rcx, rsi
.text:0000000000004513                 mov     rsi, 20000002Bh
.text:000000000000451D                 test    rcx, rsi
.text:0000000000004520                 jz      short loc_44F0
.text:0000000000004522                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004527                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000452C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004531                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004539
.text:0000000000004539 loc_4539:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004539                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004539                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000453E                 jz      short loc_4550
.text:0000000000004540                 test    al, al
.text:0000000000004542                 mov     eax, 4
.text:0000000000004547                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000454C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004550
.text:0000000000004550 loc_4550:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004550                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004550                 sub     rsp, 8
.text:0000000000004554                 mov     rcx, rbp
.text:0000000000004557                 mov     rsi, r13
.text:000000000000455A                 push    [rsp+0F0h+var_88]
.text:000000000000455E                 push    [rsp+0F8h+var_80]
.text:0000000000004562                 mov     rdi, r14
.text:0000000000004565                 push    0
.text:0000000000004567                 mov     r9d, [rsp+108h+var_70]
.text:000000000000456F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004574                 mov     rdx, [rsp+108h+s]
.text:0000000000004579                 and     r9d, 0FFFFFFFDh
.text:000000000000457D                 call    quotearg_buffer_restyled
.text:0000000000004582                 add     rsp, 20h
.text:0000000000004586                 mov     r15, rax
.text:0000000000004589
.text:0000000000004589 loc_4589:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004589                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004589                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004591                 xor     rbx, fs:28h
.text:000000000000459A                 mov     rax, r15
.text:000000000000459D                 jnz     loc_4BA3
.text:00000000000045A3                 add     rsp, 0B8h
.text:00000000000045AA                 pop     rbx
.text:00000000000045AB                 pop     rbp
.text:00000000000045AC                 pop     r12
.text:00000000000045AE                 pop     r13
.text:00000000000045B0                 pop     r14
.text:00000000000045B2                 pop     r15
.text:00000000000045B4                 retn
.text:00000000000045B4 ; ---------------------------------------------------------------------------
.text:00000000000045B5                 align 8
.text:00000000000045B8
.text:00000000000045B8 loc_45B8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000045B8                 mov     rbp, r11
.text:00000000000045BB                 jmp     loc_4539
.text:00000000000045C0 ; ---------------------------------------------------------------------------
.text:00000000000045C0
.text:00000000000045C0 loc_45C0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000045C0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000045C0                 cmp     r13, r15
.text:00000000000045C3                 jbe     short loc_45CA
.text:00000000000045C5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000045CA
.text:00000000000045CA loc_45CA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000045CA                 lea     rax, [r15+1]
.text:00000000000045CE                 cmp     r13, rax
.text:00000000000045D1                 jbe     short loc_45D9
.text:00000000000045D3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000045D9
.text:00000000000045D9 loc_45D9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000045D9                 lea     rax, [r15+2]
.text:00000000000045DD                 cmp     r13, rax
.text:00000000000045E0                 jbe     loc_4BD2
.text:00000000000045E6                 mov     rdx, r13
.text:00000000000045E9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000045EF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000045F4                 jmp     loc_41D2
.text:00000000000045F9 ; ---------------------------------------------------------------------------
.text:00000000000045F9
.text:00000000000045F9 loc_45F9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000045F9                 mov     eax, r12d
.text:00000000000045FC                 mov     ebx, 30h ; '0'
.text:0000000000004601                 xor     r12d, r12d
.text:0000000000004604                 jmp     loc_3C09
.text:0000000000004609 ; ---------------------------------------------------------------------------
.text:0000000000004609
.text:0000000000004609 loc_4609:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004609                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000460F                 jmp     loc_3FD9
.text:0000000000004614 ; ---------------------------------------------------------------------------
.text:0000000000004614
.text:0000000000004614 loc_4614:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004614                                         ; DATA XREF: .rodata:jpt_3A41↓o
.text:0000000000004614                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004616                 jnz     loc_3A43        ; jumptable 00000000000121F1 case 1
.text:000000000000461C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004621
.text:0000000000004621 loc_4621:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004621                 test    r13, r13
.text:0000000000004624                 jnz     loc_4BBA
.text:000000000000462A                 lea     rax, asc_8D45   ; "'"
.text:0000000000004631                 mov     [rsp+0E8h+var_98], 0
.text:000000000000463A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000463F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004644                 xor     r12d, r12d
.text:0000000000004647                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000464C                 mov     [rsp+0E8h+n], 1
.text:0000000000004655                 mov     [rsp+0E8h+s2], rax
.text:000000000000465A                 mov     r15d, 1
.text:0000000000004660                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004668                 jmp     loc_3A83
.text:0000000000004668 ; ---------------------------------------------------------------------------
.text:000000000000466D                 align 10h
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004670                                         ; DATA XREF: .rodata:jpt_3A41↓o
.text:0000000000004670                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004672                 jnz     loc_4A6D
.text:0000000000004678                 test    r13, r13
.text:000000000000467B                 jz      loc_48A6
.text:0000000000004681                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004685                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000468A                 xor     r12d, r12d
.text:000000000000468D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004692                 mov     [rsp+0E8h+var_98], 0
.text:000000000000469B
.text:000000000000469B loc_469B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000469B                 lea     rax, unk_8D43
.text:00000000000046A2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000046A7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000046AC                 mov     [rsp+0E8h+n], 1
.text:00000000000046B5                 mov     r15d, 1
.text:00000000000046BB                 mov     [rsp+0E8h+s2], rax
.text:00000000000046C0                 jmp     loc_3A83
.text:00000000000046C5 ; ---------------------------------------------------------------------------
.text:00000000000046C5
.text:00000000000046C5 loc_46C5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000046C5                                         ; DATA XREF: .rodata:jpt_3A41↓o
.text:00000000000046C5                 lea     rax, unk_8D43   ; jumptable 00000000000121F1 case 6
.text:00000000000046CC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000046D1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000046D6                 xor     r12d, r12d
.text:00000000000046D9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000046E2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000046E7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000046EC                 mov     [rsp+0E8h+n], 1
.text:00000000000046F5                 xor     r15d, r15d
.text:00000000000046F8                 mov     [rsp+0E8h+s2], rax
.text:00000000000046FD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004705                 jmp     loc_3A83
.text:000000000000470A ; ---------------------------------------------------------------------------
.text:000000000000470A
.text:000000000000470A loc_470A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000470A                                         ; DATA XREF: .rodata:jpt_3A41↓o
.text:000000000000470A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000470F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004714                 xor     r12d, r12d
.text:0000000000004717                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004720                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004725                 xor     r15d, r15d
.text:0000000000004728                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000472D                 mov     [rsp+0E8h+n], 0
.text:0000000000004736                 mov     [rsp+0E8h+s2], 0
.text:000000000000473F                 jmp     loc_3A83
.text:0000000000004744 ; ---------------------------------------------------------------------------
.text:0000000000004744
.text:0000000000004744 loc_4744:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004744                                         ; DATA XREF: .rodata:jpt_3A41↓o
.text:0000000000004744                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004749                 jz      short loc_47A1
.text:000000000000474B                 lea     rsi, asc_8D47   ; "`"
.text:0000000000004752                 xor     edi, edi        ; domainname
.text:0000000000004754                 mov     edx, 5          ; category
.text:0000000000004759                 call    _dcgettext
.text:000000000000475E                 mov     rcx, rax
.text:0000000000004761                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004766                 lea     rax, asc_8D47   ; "`"
.text:000000000000476D                 cmp     rcx, rax
.text:0000000000004770                 jz      loc_4B0E
.text:0000000000004776
.text:0000000000004776 loc_4776:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004776                 lea     rsi, asc_8D45   ; "'"
.text:000000000000477D                 xor     edi, edi        ; domainname
.text:000000000000477F                 mov     edx, 5          ; category
.text:0000000000004784                 call    _dcgettext
.text:0000000000004789                 mov     rcx, rax
.text:000000000000478C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004791                 lea     rax, asc_8D45   ; "'"
.text:0000000000004798                 cmp     rcx, rax
.text:000000000000479B                 jz      loc_4B24
.text:00000000000047A1
.text:00000000000047A1 loc_47A1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000047A1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000047A1                 xor     r15d, r15d
.text:00000000000047A4                 test    ebx, ebx
.text:00000000000047A6                 jz      loc_496D
.text:00000000000047AC
.text:00000000000047AC loc_47AC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000047AC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000047AC                 test    ebx, ebx
.text:00000000000047AE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000047B3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000047B8                 xor     r12d, r12d
.text:00000000000047BB                 mov     rdi, rbx        ; s
.text:00000000000047BE                 call    _strlen
.text:00000000000047C3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000047C8                 mov     [rsp+0E8h+n], rax
.text:00000000000047CD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000047D2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000047D7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000047E0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000047E5                 jmp     loc_3A83
.text:00000000000047EA ; ---------------------------------------------------------------------------
.text:00000000000047EA
.text:00000000000047EA loc_47EA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000047EA                                         ; DATA XREF: .rodata:jpt_3A41↓o
.text:00000000000047EA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000047EF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000047F4                 xor     r12d, r12d
.text:00000000000047F7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004800                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004805                 xor     r15d, r15d
.text:0000000000004808                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000480D                 mov     [rsp+0E8h+n], 0
.text:0000000000004816                 mov     [rsp+0E8h+s2], 0
.text:000000000000481F                 jmp     loc_3A83
.text:0000000000004824 ; ---------------------------------------------------------------------------
.text:0000000000004824
.text:0000000000004824 loc_4824:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004824                                         ; DATA XREF: .rodata:jpt_3A41↓o
.text:0000000000004824                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004829                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000482E                 xor     r12d, r12d
.text:0000000000004831                 mov     [rsp+0E8h+var_98], 0
.text:000000000000483A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000483F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004844                 jmp     loc_3A63
.text:0000000000004849 ; ---------------------------------------------------------------------------
.text:0000000000004849
.text:0000000000004849 loc_4849:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004849                 cmp     r13, r15
.text:000000000000484C                 jbe     short loc_4853
.text:000000000000484E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004853
.text:0000000000004853 loc_4853:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004853                 lea     rax, [rcx+2]
.text:0000000000004857                 cmp     r13, rax
.text:000000000000485A                 jbe     short loc_4862
.text:000000000000485C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004862
.text:0000000000004862 loc_4862:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004862                 mov     eax, r12d
.text:0000000000004865                 lea     r15, [rcx+3]
.text:0000000000004869                 xor     r12d, r12d
.text:000000000000486C                 mov     ebx, 30h ; '0'
.text:0000000000004871                 jmp     loc_3BD8
.text:0000000000004871 ; ---------------------------------------------------------------------------
.text:0000000000004876                 align 20h
.text:0000000000004880
.text:0000000000004880 loc_4880:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004880                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004885                 mov     rbp, r11
.text:0000000000004888                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000488C                 jmp     loc_4539
.text:0000000000004891 ; ---------------------------------------------------------------------------
.text:0000000000004891
.text:0000000000004891 loc_4891:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004891                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004896                 xor     r12d, r12d
.text:0000000000004899                 jmp     loc_43A0
.text:000000000000489E ; ---------------------------------------------------------------------------
.text:000000000000489E
.text:000000000000489E loc_489E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000489E                 xor     r10d, r10d
.text:00000000000048A1                 jmp     loc_445D
.text:00000000000048A6 ; ---------------------------------------------------------------------------
.text:00000000000048A6
.text:00000000000048A6 loc_48A6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000048A6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000048AF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000048B4                 xor     r12d, r12d
.text:00000000000048B7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000048BC                 jmp     loc_469B
.text:00000000000048C1 ; ---------------------------------------------------------------------------
.text:00000000000048C1
.text:00000000000048C1 loc_48C1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000048C1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000048C6                 mov     rsi, r14
.text:00000000000048C9                 mov     rcx, r13
.text:00000000000048CC                 mov     rax, rbx
.text:00000000000048CF                 mov     rdi, rbx
.text:00000000000048D2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000048D8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000048DD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000048E5                 cmp     rsi, r11
.text:00000000000048E8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000048EE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000048F6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000048FB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004900                 jnb     short loc_4928
.text:0000000000004902                 cmp     byte ptr [rcx], 0
.text:0000000000004905                 jnz     short loc_4917
.text:0000000000004907                 jmp     short loc_4928
.text:0000000000004907 ; ---------------------------------------------------------------------------
.text:0000000000004909                 align 10h
.text:0000000000004910
.text:0000000000004910 loc_4910:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004910                 cmp     byte ptr [r9+rax], 0
.text:0000000000004915                 jz      short loc_4925
.text:0000000000004917
.text:0000000000004917 loc_4917:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004917                 add     rax, 1
.text:000000000000491B                 lea     rdx, [rbp+rax+0]
.text:0000000000004920                 cmp     r11, rdx
.text:0000000000004923                 ja      short loc_4910
.text:0000000000004925
.text:0000000000004925 loc_4925:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004925                 mov     rdi, rax
.text:0000000000004928
.text:0000000000004928 loc_4928:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004928                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004928                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000492D                 xor     r12d, r12d
.text:0000000000004930                 jmp     loc_4396
.text:0000000000004935 ; ---------------------------------------------------------------------------
.text:0000000000004935
.text:0000000000004935 loc_4935:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004935                 mov     rdi, rbx
.text:0000000000004938                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000493E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004943                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004949                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004951                 xor     r12d, r12d
.text:0000000000004954                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004959                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000495E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004963                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004968                 jmp     loc_4396
.text:000000000000496D ; ---------------------------------------------------------------------------
.text:000000000000496D
.text:000000000000496D loc_496D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000496D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004972                 movzx   eax, byte ptr [rdx]
.text:0000000000004975                 test    al, al
.text:0000000000004977                 jz      loc_47AC
.text:000000000000497D                 nop     dword ptr [rax]
.text:0000000000004980
.text:0000000000004980 loc_4980:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004980                 cmp     r13, r15
.text:0000000000004983                 jbe     short loc_4989
.text:0000000000004985                 mov     [r14+r15], al
.text:0000000000004989
.text:0000000000004989 loc_4989:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004989                 add     r15, 1
.text:000000000000498D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004992                 test    al, al
.text:0000000000004994                 jnz     short loc_4980
.text:0000000000004996                 jmp     loc_47AC
.text:000000000000499B ; ---------------------------------------------------------------------------
.text:000000000000499B
.text:000000000000499B loc_499B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000499B                 mov     eax, edx
.text:000000000000499D                 jmp     loc_3EF7
.text:00000000000049A2 ; ---------------------------------------------------------------------------
.text:00000000000049A2
.text:00000000000049A2 loc_49A2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000049A2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000049A6                 cmp     bl, 3Eh ; '>'
.text:00000000000049A9                 ja      loc_4220
.text:00000000000049AF                 mov     rax, 7000A38200000000h
.text:00000000000049B9                 bt      rax, rbx
.text:00000000000049BD                 jnb     loc_4220
.text:00000000000049C3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000049C8                 jnz     loc_4BB2
.text:00000000000049CE                 cmp     r13, r15
.text:00000000000049D1                 jbe     short loc_49D8
.text:00000000000049D3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000049D8
.text:00000000000049D8 loc_49D8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000049D8                 lea     rax, [r15+1]
.text:00000000000049DC                 cmp     r13, rax
.text:00000000000049DF                 jbe     short loc_49E7
.text:00000000000049E1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000049E7
.text:00000000000049E7 loc_49E7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000049E7                 lea     rax, [r15+2]
.text:00000000000049EB                 cmp     r13, rax
.text:00000000000049EE                 jbe     short loc_49F6
.text:00000000000049F0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000049F6
.text:00000000000049F6 loc_49F6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000049F6                 lea     rax, [r15+3]
.text:00000000000049FA                 cmp     r13, rax
.text:00000000000049FD                 jbe     short loc_4A05
.text:00000000000049FF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004A05
.text:0000000000004A05 loc_4A05:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004A05                 add     r15, 4
.text:0000000000004A09                 xor     edx, edx
.text:0000000000004A0B                 xor     r12d, r12d
.text:0000000000004A0E                 xor     eax, eax
.text:0000000000004A10                 mov     rbp, rcx
.text:0000000000004A13                 jmp     loc_3BD8
.text:0000000000004A18 ; ---------------------------------------------------------------------------
.text:0000000000004A18
.text:0000000000004A18 loc_4A18:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004A18                                         ; DATA XREF: .rodata:jpt_3A41↓o
.text:0000000000004A18                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000004A1A                 jz      loc_4BA8
.text:0000000000004A20                 lea     rax, asc_8D45   ; "'"
.text:0000000000004A27                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004A2C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004A31                 xor     r12d, r12d
.text:0000000000004A34                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004A3D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004A42                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004A47                 mov     [rsp+0E8h+n], 1
.text:0000000000004A50                 xor     r15d, r15d
.text:0000000000004A53                 mov     [rsp+0E8h+s2], rax
.text:0000000000004A58                 jmp     loc_3A83
.text:0000000000004A58 ; ---------------------------------------------------------------------------
.text:0000000000004A5D                 align 20h
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004A60                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004A60                 mov     rbp, r11
.text:0000000000004A63                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004A68                 jmp     loc_4539
.text:0000000000004A6D ; ---------------------------------------------------------------------------
.text:0000000000004A6D
.text:0000000000004A6D loc_4A6D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000004A6D                 lea     rax, unk_8D43
.text:0000000000004A74                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004A79                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004A7E                 xor     r12d, r12d
.text:0000000000004A81                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004A8A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004A8F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004A94                 mov     [rsp+0E8h+n], 1
.text:0000000000004A9D                 xor     r15d, r15d
.text:0000000000004AA0                 mov     [rsp+0E8h+s2], rax
.text:0000000000004AA5                 jmp     loc_3A83
.text:0000000000004AAA ; ---------------------------------------------------------------------------
.text:0000000000004AAA
.text:0000000000004AAA loc_4AAA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000004AAA                 mov     eax, edx
.text:0000000000004AAC
.text:0000000000004AAC loc_4AAC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000004AAC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000004AAC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004AB1                 test    rbx, rbx
.text:0000000000004AB4                 jz      short loc_4AE2
.text:0000000000004AB6                 test    al, al
.text:0000000000004AB8                 jz      short loc_4AE2
.text:0000000000004ABA                 movzx   ecx, byte ptr [rbx]
.text:0000000000004ABD                 mov     rax, rbx
.text:0000000000004AC0                 test    cl, cl
.text:0000000000004AC2                 jz      short loc_4AE2
.text:0000000000004AC4                 mov     rdx, r15
.text:0000000000004AC7                 sub     rax, r15
.text:0000000000004ACA
.text:0000000000004ACA loc_4ACA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000004ACA                 cmp     r13, rdx
.text:0000000000004ACD                 jbe     short loc_4AD3
.text:0000000000004ACF                 mov     [r14+rdx], cl
.text:0000000000004AD3
.text:0000000000004AD3 loc_4AD3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004AD3                 add     rdx, 1
.text:0000000000004AD7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000004ADB                 test    cl, cl
.text:0000000000004ADD                 jnz     short loc_4ACA
.text:0000000000004ADF                 mov     r15, rdx
.text:0000000000004AE2
.text:0000000000004AE2 loc_4AE2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004AE2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004AE2                 cmp     r13, r15
.text:0000000000004AE5                 jbe     loc_4589
.text:0000000000004AEB                 mov     byte ptr [r14+r15], 0
.text:0000000000004AF0                 jmp     loc_4589
.text:0000000000004AF5 ; ---------------------------------------------------------------------------
.text:0000000000004AF5
.text:0000000000004AF5 loc_4AF5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004AF5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004AFA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004AFF                 mov     rbp, r11
.text:0000000000004B02                 setz    al
.text:0000000000004B05                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004B09                 jmp     loc_4539
.text:0000000000004B0E ; ---------------------------------------------------------------------------
.text:0000000000004B0E
.text:0000000000004B0E loc_4B0E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000004B0E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004B12                 mov     rdi, rcx
.text:0000000000004B15                 call    gettext_quote
.text:0000000000004B1A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004B1F                 jmp     loc_4776
.text:0000000000004B24 ; ---------------------------------------------------------------------------
.text:0000000000004B24
.text:0000000000004B24 loc_4B24:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004B24                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004B28                 mov     rdi, rcx
.text:0000000000004B2B                 call    gettext_quote
.text:0000000000004B30                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004B35                 jmp     loc_47A1
.text:0000000000004B3A ; ---------------------------------------------------------------------------
.text:0000000000004B3A
.text:0000000000004B3A loc_4B3A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000004B3A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004B3F                 mov     rbp, r11
.text:0000000000004B42                 mov     eax, edx
.text:0000000000004B44                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004B48                 jmp     loc_4539
.text:0000000000004B4D ; ---------------------------------------------------------------------------
.text:0000000000004B4D
.text:0000000000004B4D loc_4B4D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000004B4D                 sub     rsp, 8
.text:0000000000004B51                 mov     r8d, 5
.text:0000000000004B57                 mov     rcx, r11
.text:0000000000004B5A                 push    [rsp+0F0h+var_88]
.text:0000000000004B5E                 push    [rsp+0F8h+var_80]
.text:0000000000004B62                 mov     rdi, r14
.text:0000000000004B65                 push    [rsp+100h+var_C8]
.text:0000000000004B69                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004B71                 mov     rdx, [rsp+108h+s]
.text:0000000000004B76                 mov     rsi, [rsp+108h+var_98]
.text:0000000000004B7B                 call    quotearg_buffer_restyled
.text:0000000000004B80                 add     rsp, 20h
.text:0000000000004B84                 mov     r15, rax
.text:0000000000004B87                 jmp     loc_4589
.text:0000000000004B8C ; ---------------------------------------------------------------------------
.text:0000000000004B8C
.text:0000000000004B8C loc_4B8C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000004B8C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004B91                 jmp     loc_4AAC
.text:0000000000004B96 ; ---------------------------------------------------------------------------
.text:0000000000004B96
.text:0000000000004B96 loc_4B96:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004B96                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004B9E                 jmp     loc_4539
.text:0000000000004BA3 ; ---------------------------------------------------------------------------
.text:0000000000004BA3
.text:0000000000004BA3 loc_4BA3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004BA3                 call    ___stack_chk_fail
.text:0000000000004BA8 ; ---------------------------------------------------------------------------
.text:0000000000004BA8
.text:0000000000004BA8 loc_4BA8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004BA8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004BAD                 jmp     loc_4621
.text:0000000000004BB2 ; ---------------------------------------------------------------------------
.text:0000000000004BB2
.text:0000000000004BB2 loc_4BB2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004BB2                 mov     rbp, r11
.text:0000000000004BB5                 jmp     loc_4550
.text:0000000000004BBA ; ---------------------------------------------------------------------------
.text:0000000000004BBA
.text:0000000000004BBA loc_4BBA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000004BBA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004BBF                 xor     eax, eax
.text:0000000000004BC1                 xor     r12d, r12d
.text:0000000000004BC4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004BCD                 jmp     loc_4174
.text:0000000000004BD2 ; ---------------------------------------------------------------------------
.text:0000000000004BD2
.text:0000000000004BD2 loc_4BD2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004BD2                 mov     rdx, r13
.text:0000000000004BD5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004BDA                 jmp     loc_41D2
.text:0000000000004BDF ; ---------------------------------------------------------------------------
.text:0000000000004BDF
.text:0000000000004BDF def_3A41:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000004BDF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000004BDF ; } // starts at 39B0
.text:0000000000004BDF quotearg_buffer_restyled endp
.text:0000000000004BDF
.text:0000000000004BDF ; ---------------------------------------------------------------------------
.text:0000000000004BE4                 align 10h
.text:0000000000004BF0
.text:0000000000004BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BF0
.text:0000000000004BF0
.text:0000000000004BF0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004BF0                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004BF0
.text:0000000000004BF0 var_50          = qword ptr -50h
.text:0000000000004BF0 var_48          = qword ptr -48h
.text:0000000000004BF0 var_40          = dword ptr -40h
.text:0000000000004BF0 var_3C          = dword ptr -3Ch
.text:0000000000004BF0
.text:0000000000004BF0 ; __unwind {
.text:0000000000004BF0                 push    r15
.text:0000000000004BF2                 push    r14
.text:0000000000004BF4                 movsxd  r15, edi
.text:0000000000004BF7                 push    r13
.text:0000000000004BF9                 push    r12
.text:0000000000004BFB                 mov     r14, rdx
.text:0000000000004BFE                 push    rbp
.text:0000000000004BFF                 push    rbx
.text:0000000000004C00                 mov     rbp, rcx
.text:0000000000004C03                 sub     rsp, 28h
.text:0000000000004C07                 mov     [rsp+58h+var_50], rsi
.text:0000000000004C0C                 call    ___errno_location
.text:0000000000004C11                 mov     r13, rax
.text:0000000000004C14                 mov     eax, [rax]
.text:0000000000004C16                 test    r15d, r15d
.text:0000000000004C19                 mov     rbx, cs:slotvec
.text:0000000000004C20                 mov     [rsp+58h+var_40], eax
.text:0000000000004C24                 js      loc_4D91
.text:0000000000004C2A                 cmp     cs:nslots, r15d
.text:0000000000004C31                 jg      short loc_4C95
.text:0000000000004C33                 cmp     r15d, 7FFFFFFFh
.text:0000000000004C3A                 jz      loc_4D96
.text:0000000000004C40                 lea     r12d, [r15+1]
.text:0000000000004C44                 lea     rax, slotvec0
.text:0000000000004C4B                 movsxd  rsi, r12d
.text:0000000000004C4E                 shl     rsi, 4
.text:0000000000004C52                 cmp     rbx, rax
.text:0000000000004C55                 jz      loc_4D70
.text:0000000000004C5B                 mov     rdi, rbx
.text:0000000000004C5E                 call    xrealloc
.text:0000000000004C63                 mov     rbx, rax
.text:0000000000004C66                 mov     cs:slotvec, rax
.text:0000000000004C6D
.text:0000000000004C6D loc_4C6D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000004C6D                 movsxd  rdi, cs:nslots
.text:0000000000004C74                 mov     edx, r12d
.text:0000000000004C77                 xor     esi, esi        ; c
.text:0000000000004C79                 sub     edx, edi
.text:0000000000004C7B                 shl     rdi, 4
.text:0000000000004C7F                 movsxd  rdx, edx
.text:0000000000004C82                 add     rdi, rbx        ; s
.text:0000000000004C85                 shl     rdx, 4          ; n
.text:0000000000004C89                 call    _memset
.text:0000000000004C8E                 mov     cs:nslots, r12d
.text:0000000000004C95
.text:0000000000004C95 loc_4C95:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004C95                 mov     eax, [rbp+4]
.text:0000000000004C98                 shl     r15, 4
.text:0000000000004C9C                 sub     rsp, 8
.text:0000000000004CA0                 add     rbx, r15
.text:0000000000004CA3                 lea     r15, [rbp+8]
.text:0000000000004CA7                 mov     r8d, [rbp+0]
.text:0000000000004CAB                 mov     r11, [rbx]
.text:0000000000004CAE                 mov     r12, [rbx+8]
.text:0000000000004CB2                 mov     rcx, r14
.text:0000000000004CB5                 or      eax, 1
.text:0000000000004CB8                 mov     [rsp+60h+var_3C], eax
.text:0000000000004CBC                 push    qword ptr [rbp+30h]
.text:0000000000004CBF                 mov     r9d, eax
.text:0000000000004CC2                 push    qword ptr [rbp+28h]
.text:0000000000004CC5                 push    r15
.text:0000000000004CC7                 mov     rsi, r11
.text:0000000000004CCA                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004CCF                 mov     rdi, r12
.text:0000000000004CD2                 mov     [rsp+78h+var_48], r11
.text:0000000000004CD7                 call    quotearg_buffer_restyled
.text:0000000000004CDC                 add     rsp, 20h
.text:0000000000004CE0                 mov     r11, [rsp+58h+var_48]
.text:0000000000004CE5                 cmp     r11, rax
.text:0000000000004CE8                 ja      short loc_4D51
.text:0000000000004CEA                 lea     rsi, [rax+1]
.text:0000000000004CEE                 lea     rax, slot0
.text:0000000000004CF5                 cmp     r12, rax
.text:0000000000004CF8                 mov     [rbx], rsi
.text:0000000000004CFB                 jz      short loc_4D0F
.text:0000000000004CFD                 mov     rdi, r12        ; ptr
.text:0000000000004D00                 mov     [rsp+58h+var_48], rsi
.text:0000000000004D05                 call    _free
.text:0000000000004D0A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000004D0F
.text:0000000000004D0F loc_4D0F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000004D0F                 mov     rdi, rsi
.text:0000000000004D12                 mov     [rsp+58h+var_48], rsi
.text:0000000000004D17                 call    xmalloc
.text:0000000000004D1C                 sub     rsp, 8
.text:0000000000004D20                 mov     [rbx+8], rax
.text:0000000000004D24                 mov     r8d, [rbp+0]
.text:0000000000004D28                 push    qword ptr [rbp+30h]
.text:0000000000004D2B                 push    qword ptr [rbp+28h]
.text:0000000000004D2E                 mov     rcx, r14
.text:0000000000004D31                 push    r15
.text:0000000000004D33                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004D38                 mov     rdi, rax
.text:0000000000004D3B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004D40                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004D45                 mov     r12, rax
.text:0000000000004D48                 call    quotearg_buffer_restyled
.text:0000000000004D4D                 add     rsp, 20h
.text:0000000000004D51
.text:0000000000004D51 loc_4D51:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004D51                 mov     eax, [rsp+58h+var_40]
.text:0000000000004D55                 mov     [r13+0], eax
.text:0000000000004D59                 add     rsp, 28h
.text:0000000000004D5D                 mov     rax, r12
.text:0000000000004D60                 pop     rbx
.text:0000000000004D61                 pop     rbp
.text:0000000000004D62                 pop     r12
.text:0000000000004D64                 pop     r13
.text:0000000000004D66                 pop     r14
.text:0000000000004D68                 pop     r15
.text:0000000000004D6A                 retn
.text:0000000000004D6A ; ---------------------------------------------------------------------------
.text:0000000000004D6B                 align 10h
.text:0000000000004D70
.text:0000000000004D70 loc_4D70:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004D70                 xor     edi, edi
.text:0000000000004D72                 call    xrealloc
.text:0000000000004D77                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000004D7F                 mov     rbx, rax
.text:0000000000004D82                 mov     cs:slotvec, rax
.text:0000000000004D89                 movups  xmmword ptr [rax], xmm0
.text:0000000000004D8C                 jmp     loc_4C6D
.text:0000000000004D91 ; ---------------------------------------------------------------------------
.text:0000000000004D91
.text:0000000000004D91 loc_4D91:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004D91                 call    _abort
.text:0000000000004D96 ; ---------------------------------------------------------------------------
.text:0000000000004D96
.text:0000000000004D96 loc_4D96:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004D96                 call    xalloc_die
.text:0000000000004D96 ; } // starts at 4BF0
.text:0000000000004D96 quotearg_n_options endp
.text:0000000000004D96
.text:0000000000004D96 ; ---------------------------------------------------------------------------
.text:0000000000004D9B                 align 20h
.text:0000000000004DA0
.text:0000000000004DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DA0
.text:0000000000004DA0 ; Attributes: info_from_lumina
.text:0000000000004DA0
.text:0000000000004DA0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004DA0                 public clone_quoting_options
.text:0000000000004DA0 clone_quoting_options proc near
.text:0000000000004DA0 ; __unwind {
.text:0000000000004DA0                 push    r12
.text:0000000000004DA2                 push    rbp
.text:0000000000004DA3                 push    rbx
.text:0000000000004DA4                 mov     rbx, rdi
.text:0000000000004DA7                 call    ___errno_location
.text:0000000000004DAC                 mov     r12d, [rax]
.text:0000000000004DAF                 mov     rbp, rax
.text:0000000000004DB2                 lea     rax, default_quoting_options
.text:0000000000004DB9                 test    rbx, rbx
.text:0000000000004DBC                 mov     esi, 38h ; '8'  ; n
.text:0000000000004DC1                 cmovz   rbx, rax
.text:0000000000004DC5                 mov     rdi, rbx        ; src
.text:0000000000004DC8                 call    xmemdup
.text:0000000000004DCD                 mov     [rbp+0], r12d
.text:0000000000004DD1                 pop     rbx
.text:0000000000004DD2                 pop     rbp
.text:0000000000004DD3                 pop     r12
.text:0000000000004DD5                 retn
.text:0000000000004DD5 ; } // starts at 4DA0
.text:0000000000004DD5 clone_quoting_options endp
.text:0000000000004DD5
.text:0000000000004DD5 ; ---------------------------------------------------------------------------
.text:0000000000004DD6                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DE0
.text:0000000000004DE0
.text:0000000000004DE0                 public get_quoting_style
.text:0000000000004DE0 get_quoting_style proc near
.text:0000000000004DE0 ; __unwind {
.text:0000000000004DE0                 lea     rax, default_quoting_options
.text:0000000000004DE7                 test    rdi, rdi
.text:0000000000004DEA                 cmovz   rdi, rax
.text:0000000000004DEE                 mov     eax, [rdi]
.text:0000000000004DF0                 retn
.text:0000000000004DF0 ; } // starts at 4DE0
.text:0000000000004DF0 get_quoting_style endp
.text:0000000000004DF0
.text:0000000000004DF0 ; ---------------------------------------------------------------------------
.text:0000000000004DF1                 align 20h
.text:0000000000004E00
.text:0000000000004E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E00
.text:0000000000004E00
.text:0000000000004E00                 public set_quoting_style
.text:0000000000004E00 set_quoting_style proc near
.text:0000000000004E00 ; __unwind {
.text:0000000000004E00                 lea     rax, default_quoting_options
.text:0000000000004E07                 test    rdi, rdi
.text:0000000000004E0A                 cmovz   rdi, rax
.text:0000000000004E0E                 mov     [rdi], esi
.text:0000000000004E10                 retn
.text:0000000000004E10 ; } // starts at 4E00
.text:0000000000004E10 set_quoting_style endp
.text:0000000000004E10
.text:0000000000004E10 ; ---------------------------------------------------------------------------
.text:0000000000004E11                 align 20h
.text:0000000000004E20
.text:0000000000004E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E20
.text:0000000000004E20 ; Attributes: info_from_lumina
.text:0000000000004E20
.text:0000000000004E20 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004E20                 public set_char_quoting
.text:0000000000004E20 set_char_quoting proc near
.text:0000000000004E20 ; __unwind {
.text:0000000000004E20                 lea     rax, default_quoting_options
.text:0000000000004E27                 test    rdi, rdi
.text:0000000000004E2A                 mov     ecx, esi
.text:0000000000004E2C                 cmovz   rdi, rax
.text:0000000000004E30                 mov     eax, esi
.text:0000000000004E32                 and     ecx, 1Fh
.text:0000000000004E35                 shr     al, 5
.text:0000000000004E38                 movzx   eax, al
.text:0000000000004E3B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004E40                 mov     esi, [rdi]
.text:0000000000004E42                 mov     eax, esi
.text:0000000000004E44                 shr     eax, cl
.text:0000000000004E46                 xor     edx, eax
.text:0000000000004E48                 and     eax, 1
.text:0000000000004E4B                 and     edx, 1
.text:0000000000004E4E                 shl     edx, cl
.text:0000000000004E50                 xor     edx, esi
.text:0000000000004E52                 mov     [rdi], edx
.text:0000000000004E54                 retn
.text:0000000000004E54 ; } // starts at 4E20
.text:0000000000004E54 set_char_quoting endp
.text:0000000000004E54
.text:0000000000004E54 ; ---------------------------------------------------------------------------
.text:0000000000004E55                 align 20h
.text:0000000000004E60
.text:0000000000004E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E60
.text:0000000000004E60
.text:0000000000004E60                 public set_quoting_flags
.text:0000000000004E60 set_quoting_flags proc near
.text:0000000000004E60 ; __unwind {
.text:0000000000004E60                 lea     rax, default_quoting_options
.text:0000000000004E67                 test    rdi, rdi
.text:0000000000004E6A                 cmovz   rdi, rax
.text:0000000000004E6E                 mov     eax, [rdi+4]
.text:0000000000004E71                 mov     [rdi+4], esi
.text:0000000000004E74                 retn
.text:0000000000004E74 ; } // starts at 4E60
.text:0000000000004E74 set_quoting_flags endp
.text:0000000000004E74
.text:0000000000004E74 ; ---------------------------------------------------------------------------
.text:0000000000004E75                 align 20h
.text:0000000000004E80
.text:0000000000004E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E80
.text:0000000000004E80 ; Attributes: info_from_lumina
.text:0000000000004E80
.text:0000000000004E80 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004E80                 public set_custom_quoting
.text:0000000000004E80 set_custom_quoting proc near
.text:0000000000004E80 ; __unwind {
.text:0000000000004E80                 lea     rax, default_quoting_options
.text:0000000000004E87                 test    rdi, rdi
.text:0000000000004E8A                 cmovz   rdi, rax
.text:0000000000004E8E                 test    rsi, rsi
.text:0000000000004E91                 mov     dword ptr [rdi], 0Ah
.text:0000000000004E97                 jz      short loc_4EA7
.text:0000000000004E99                 test    rdx, rdx
.text:0000000000004E9C                 jz      short loc_4EA7
.text:0000000000004E9E                 mov     [rdi+28h], rsi
.text:0000000000004EA2                 mov     [rdi+30h], rdx
.text:0000000000004EA6                 retn
.text:0000000000004EA7 ; ---------------------------------------------------------------------------
.text:0000000000004EA7
.text:0000000000004EA7 loc_4EA7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004EA7                                         ; set_custom_quoting+1C↑j
.text:0000000000004EA7                 sub     rsp, 8
.text:0000000000004EAB                 call    _abort
.text:0000000000004EAB ; } // starts at 4E80
.text:0000000000004EAB set_custom_quoting endp
.text:0000000000004EAB
.text:0000000000004EB0
.text:0000000000004EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EB0
.text:0000000000004EB0 ; Attributes: info_from_lumina
.text:0000000000004EB0
.text:0000000000004EB0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004EB0                 public quotearg_buffer
.text:0000000000004EB0 quotearg_buffer proc near
.text:0000000000004EB0
.text:0000000000004EB0 var_40          = qword ptr -40h
.text:0000000000004EB0
.text:0000000000004EB0 ; __unwind {
.text:0000000000004EB0                 push    r15
.text:0000000000004EB2                 push    r14
.text:0000000000004EB4                 lea     rax, default_quoting_options
.text:0000000000004EBB                 push    r13
.text:0000000000004EBD                 push    r12
.text:0000000000004EBF                 mov     r13, rdi
.text:0000000000004EC2                 push    rbp
.text:0000000000004EC3                 push    rbx
.text:0000000000004EC4                 mov     rbx, r8
.text:0000000000004EC7                 mov     r14, rsi
.text:0000000000004ECA                 mov     r15, rdx
.text:0000000000004ECD                 sub     rsp, 18h
.text:0000000000004ED1                 test    r8, r8
.text:0000000000004ED4                 cmovz   rbx, rax
.text:0000000000004ED8                 mov     [rsp+48h+var_40], rcx
.text:0000000000004EDD                 call    ___errno_location
.text:0000000000004EE2                 mov     r12d, [rax]
.text:0000000000004EE5                 mov     rbp, rax
.text:0000000000004EE8                 lea     rax, [rbx+8]
.text:0000000000004EEC                 sub     rsp, 8
.text:0000000000004EF0                 mov     r9d, [rbx+4]
.text:0000000000004EF4                 push    qword ptr [rbx+30h]
.text:0000000000004EF7                 mov     r8d, [rbx]
.text:0000000000004EFA                 push    qword ptr [rbx+28h]
.text:0000000000004EFD                 mov     rdx, r15
.text:0000000000004F00                 push    rax
.text:0000000000004F01                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004F06                 mov     rsi, r14
.text:0000000000004F09                 mov     rdi, r13
.text:0000000000004F0C                 call    quotearg_buffer_restyled
.text:0000000000004F11                 mov     [rbp+0], r12d
.text:0000000000004F15                 add     rsp, 38h
.text:0000000000004F19                 pop     rbx
.text:0000000000004F1A                 pop     rbp
.text:0000000000004F1B                 pop     r12
.text:0000000000004F1D                 pop     r13
.text:0000000000004F1F                 pop     r14
.text:0000000000004F21                 pop     r15
.text:0000000000004F23                 retn
.text:0000000000004F23 ; } // starts at 4EB0
.text:0000000000004F23 quotearg_buffer endp
.text:0000000000004F23
.text:0000000000004F23 ; ---------------------------------------------------------------------------
.text:0000000000004F24                 align 10h
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30 ; Attributes: info_from_lumina
.text:0000000000004F30
.text:0000000000004F30 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004F30                 public quotearg_alloc_mem
.text:0000000000004F30 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004F30
.text:0000000000004F30 var_5C          = dword ptr -5Ch
.text:0000000000004F30 var_58          = qword ptr -58h
.text:0000000000004F30 var_50          = qword ptr -50h
.text:0000000000004F30 var_48          = qword ptr -48h
.text:0000000000004F30 var_40          = qword ptr -40h
.text:0000000000004F30
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 push    r15
.text:0000000000004F32                 push    r14
.text:0000000000004F34                 lea     rax, default_quoting_options
.text:0000000000004F3B                 push    r13
.text:0000000000004F3D                 push    r12
.text:0000000000004F3F                 mov     r12, rdx
.text:0000000000004F42                 push    rbp
.text:0000000000004F43                 push    rbx
.text:0000000000004F44                 mov     rbx, rcx
.text:0000000000004F47                 mov     r14, rdi
.text:0000000000004F4A                 mov     r15, rsi
.text:0000000000004F4D                 sub     rsp, 38h
.text:0000000000004F51                 test    rcx, rcx
.text:0000000000004F54                 cmovz   rbx, rax
.text:0000000000004F58                 xor     ebp, ebp
.text:0000000000004F5A                 call    ___errno_location
.text:0000000000004F5F                 test    r12, r12
.text:0000000000004F62                 mov     r13, rax
.text:0000000000004F65                 mov     eax, [rax]
.text:0000000000004F67                 setz    bpl
.text:0000000000004F6B                 or      ebp, [rbx+4]
.text:0000000000004F6E                 lea     r10, [rbx+8]
.text:0000000000004F72                 sub     rsp, 8
.text:0000000000004F76                 mov     r8d, [rbx]
.text:0000000000004F79                 mov     rcx, r15
.text:0000000000004F7C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004F80                 push    qword ptr [rbx+30h]
.text:0000000000004F83                 mov     rdx, r14
.text:0000000000004F86                 push    qword ptr [rbx+28h]
.text:0000000000004F89                 push    r10
.text:0000000000004F8B                 xor     esi, esi
.text:0000000000004F8D                 mov     r9d, ebp
.text:0000000000004F90                 xor     edi, edi
.text:0000000000004F92                 mov     [rsp+88h+var_48], r10
.text:0000000000004F97                 call    quotearg_buffer_restyled
.text:0000000000004F9C                 lea     rsi, [rax+1]
.text:0000000000004FA0                 mov     [rsp+88h+var_40], rax
.text:0000000000004FA5                 add     rsp, 20h
.text:0000000000004FA9                 mov     rdi, rsi
.text:0000000000004FAC                 mov     [rsp+68h+var_50], rsi
.text:0000000000004FB1                 call    xmalloc
.text:0000000000004FB6                 mov     [rsp+68h+var_58], rax
.text:0000000000004FBB                 sub     rsp, 8
.text:0000000000004FBF                 push    qword ptr [rbx+30h]
.text:0000000000004FC2                 push    qword ptr [rbx+28h]
.text:0000000000004FC5                 mov     r10, [rsp+80h+var_48]
.text:0000000000004FCA                 mov     r9d, ebp
.text:0000000000004FCD                 mov     r8d, [rbx]
.text:0000000000004FD0                 mov     rcx, r15
.text:0000000000004FD3                 mov     rdx, r14
.text:0000000000004FD6                 mov     rdi, rax
.text:0000000000004FD9                 push    r10
.text:0000000000004FDB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004FE0                 call    quotearg_buffer_restyled
.text:0000000000004FE5                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004FE9                 add     rsp, 20h
.text:0000000000004FED                 test    r12, r12
.text:0000000000004FF0                 mov     [r13+0], eax
.text:0000000000004FF4                 jz      short loc_4FFF
.text:0000000000004FF6                 mov     r11, [rsp+68h+var_40]
.text:0000000000004FFB                 mov     [r12], r11
.text:0000000000004FFF
.text:0000000000004FFF loc_4FFF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000004FFF                 mov     rax, [rsp+68h+var_58]
.text:0000000000005004                 add     rsp, 38h
.text:0000000000005008                 pop     rbx
.text:0000000000005009                 pop     rbp
.text:000000000000500A                 pop     r12
.text:000000000000500C                 pop     r13
.text:000000000000500E                 pop     r14
.text:0000000000005010                 pop     r15
.text:0000000000005012                 retn
.text:0000000000005012 ; } // starts at 4F30
.text:0000000000005012 quotearg_alloc_mem endp
.text:0000000000005012
.text:0000000000005012 ; ---------------------------------------------------------------------------
.text:0000000000005013                 align 20h
.text:0000000000005020
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020
.text:0000000000005020
.text:0000000000005020                 public quotearg_alloc
.text:0000000000005020 quotearg_alloc  proc near
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 mov     rcx, rdx
.text:0000000000005023                 xor     edx, edx
.text:0000000000005025                 jmp     quotearg_alloc_mem
.text:0000000000005025 ; } // starts at 5020
.text:0000000000005025 quotearg_alloc  endp
.text:0000000000005025
.text:0000000000005025 ; ---------------------------------------------------------------------------
.text:000000000000502A                 align 10h
.text:0000000000005030
.text:0000000000005030 ; =============== S U B R O U T I N E =======================================
.text:0000000000005030
.text:0000000000005030 ; Attributes: info_from_lumina
.text:0000000000005030
.text:0000000000005030 ; void __cdecl quotearg_free()
.text:0000000000005030                 public quotearg_free
.text:0000000000005030 quotearg_free   proc near
.text:0000000000005030 ; __unwind {
.text:0000000000005030                 mov     eax, cs:nslots
.text:0000000000005036                 push    r12
.text:0000000000005038                 mov     r12, cs:slotvec
.text:000000000000503F                 push    rbp
.text:0000000000005040                 push    rbx
.text:0000000000005041                 cmp     eax, 1
.text:0000000000005044                 jle     short loc_5071
.text:0000000000005046                 sub     eax, 2
.text:0000000000005049                 lea     rbx, [r12+18h]
.text:000000000000504E                 shl     rax, 4
.text:0000000000005052                 lea     rbp, [r12+rax+28h]
.text:0000000000005057                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005060
.text:0000000000005060 loc_5060:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005060                 mov     rdi, [rbx]      ; ptr
.text:0000000000005063                 add     rbx, 10h
.text:0000000000005067                 call    _free
.text:000000000000506C                 cmp     rbx, rbp
.text:000000000000506F                 jnz     short loc_5060
.text:0000000000005071
.text:0000000000005071 loc_5071:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005071                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005076                 lea     rbx, slot0
.text:000000000000507D                 cmp     rdi, rbx
.text:0000000000005080                 jz      short loc_5099
.text:0000000000005082                 call    _free
.text:0000000000005087                 mov     cs:slotvec0, 100h
.text:0000000000005092                 mov     cs:off_20B098, rbx
.text:0000000000005099
.text:0000000000005099 loc_5099:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000005099                 lea     rbx, slotvec0
.text:00000000000050A0                 cmp     r12, rbx
.text:00000000000050A3                 jz      short loc_50B4
.text:00000000000050A5                 mov     rdi, r12        ; ptr
.text:00000000000050A8                 call    _free
.text:00000000000050AD                 mov     cs:slotvec, rbx
.text:00000000000050B4
.text:00000000000050B4 loc_50B4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000050B4                 pop     rbx
.text:00000000000050B5                 mov     cs:nslots, 1
.text:00000000000050BF                 pop     rbp
.text:00000000000050C0                 pop     r12
.text:00000000000050C2                 retn
.text:00000000000050C2 ; } // starts at 5030
.text:00000000000050C2 quotearg_free   endp
.text:00000000000050C2
.text:00000000000050C2 ; ---------------------------------------------------------------------------
.text:00000000000050C3                 align 10h
.text:00000000000050D0
.text:00000000000050D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050D0
.text:00000000000050D0
.text:00000000000050D0                 public quotearg_n
.text:00000000000050D0 quotearg_n      proc near
.text:00000000000050D0 ; __unwind {
.text:00000000000050D0                 lea     rcx, default_quoting_options
.text:00000000000050D7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000050DE                 jmp     quotearg_n_options
.text:00000000000050DE ; } // starts at 50D0
.text:00000000000050DE quotearg_n      endp
.text:00000000000050DE
.text:00000000000050DE ; ---------------------------------------------------------------------------
.text:00000000000050E3                 align 10h
.text:00000000000050F0
.text:00000000000050F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050F0
.text:00000000000050F0
.text:00000000000050F0                 public quotearg_n_mem
.text:00000000000050F0 quotearg_n_mem  proc near
.text:00000000000050F0 ; __unwind {
.text:00000000000050F0                 lea     rcx, default_quoting_options
.text:00000000000050F7                 jmp     quotearg_n_options
.text:00000000000050F7 ; } // starts at 50F0
.text:00000000000050F7 quotearg_n_mem  endp
.text:00000000000050F7
.text:00000000000050F7 ; ---------------------------------------------------------------------------
.text:00000000000050FC                 align 20h
.text:0000000000005100
.text:0000000000005100 ; =============== S U B R O U T I N E =======================================
.text:0000000000005100
.text:0000000000005100
.text:0000000000005100                 public quotearg
.text:0000000000005100 quotearg        proc near
.text:0000000000005100 ; __unwind {
.text:0000000000005100                 lea     rcx, default_quoting_options
.text:0000000000005107                 mov     rsi, rdi
.text:000000000000510A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005111                 xor     edi, edi
.text:0000000000005113                 jmp     quotearg_n_options
.text:0000000000005113 ; } // starts at 5100
.text:0000000000005113 quotearg        endp
.text:0000000000005113
.text:0000000000005113 ; ---------------------------------------------------------------------------
.text:0000000000005118                 align 20h
.text:0000000000005120
.text:0000000000005120 ; =============== S U B R O U T I N E =======================================
.text:0000000000005120
.text:0000000000005120
.text:0000000000005120                 public quotearg_mem
.text:0000000000005120 quotearg_mem    proc near
.text:0000000000005120 ; __unwind {
.text:0000000000005120                 lea     rcx, default_quoting_options
.text:0000000000005127                 mov     rdx, rsi
.text:000000000000512A                 mov     rsi, rdi
.text:000000000000512D                 xor     edi, edi
.text:000000000000512F                 jmp     quotearg_n_options
.text:000000000000512F ; } // starts at 5120
.text:000000000000512F quotearg_mem    endp
.text:000000000000512F
.text:000000000000512F ; ---------------------------------------------------------------------------
.text:0000000000005134                 align 20h
.text:0000000000005140
.text:0000000000005140 ; =============== S U B R O U T I N E =======================================
.text:0000000000005140
.text:0000000000005140 ; Attributes: info_from_lumina
.text:0000000000005140
.text:0000000000005140 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005140                 public quotearg_n_style
.text:0000000000005140 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000005140
.text:0000000000005140 var_48          = dword ptr -48h
.text:0000000000005140 var_44          = qword ptr -44h
.text:0000000000005140 var_3C          = qword ptr -3Ch
.text:0000000000005140 var_34          = qword ptr -34h
.text:0000000000005140 var_2C          = qword ptr -2Ch
.text:0000000000005140 var_24          = qword ptr -24h
.text:0000000000005140 var_1C          = qword ptr -1Ch
.text:0000000000005140 var_14          = dword ptr -14h
.text:0000000000005140 var_10          = qword ptr -10h
.text:0000000000005140
.text:0000000000005140 ; __unwind {
.text:0000000000005140                 sub     rsp, 48h
.text:0000000000005144                 mov     rax, rdx
.text:0000000000005147                 mov     rdx, fs:28h
.text:0000000000005150                 mov     [rsp+48h+var_10], rdx
.text:0000000000005155                 xor     edx, edx
.text:0000000000005157                 cmp     esi, 0Ah
.text:000000000000515A                 jz      short loc_51C4
.text:000000000000515C                 mov     [rsp+48h+var_48], esi
.text:000000000000515F                 mov     rcx, rsp
.text:0000000000005162                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005169                 mov     rsi, rax
.text:000000000000516C                 mov     [rsp+48h+var_44], 0
.text:0000000000005175                 mov     [rsp+48h+var_3C], 0
.text:000000000000517E                 mov     [rsp+48h+var_34], 0
.text:0000000000005187                 mov     [rsp+48h+var_2C], 0
.text:0000000000005190                 mov     [rsp+48h+var_24], 0
.text:0000000000005199                 mov     [rsp+48h+var_1C], 0
.text:00000000000051A2                 mov     [rsp+48h+var_14], 0
.text:00000000000051AA                 call    quotearg_n_options
.text:00000000000051AF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000051B4                 xor     rcx, fs:28h
.text:00000000000051BD                 jnz     short loc_51C9
.text:00000000000051BF                 add     rsp, 48h
.text:00000000000051C3                 retn
.text:00000000000051C4 ; ---------------------------------------------------------------------------
.text:00000000000051C4
.text:00000000000051C4 loc_51C4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000051C4                 call    _abort
.text:00000000000051C9 ; ---------------------------------------------------------------------------
.text:00000000000051C9
.text:00000000000051C9 loc_51C9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000051C9                 call    ___stack_chk_fail
.text:00000000000051C9 ; } // starts at 5140
.text:00000000000051C9 quotearg_n_style endp
.text:00000000000051C9
.text:00000000000051C9 ; ---------------------------------------------------------------------------
.text:00000000000051CE                 align 10h
.text:00000000000051D0
.text:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051D0
.text:00000000000051D0 ; Attributes: info_from_lumina
.text:00000000000051D0
.text:00000000000051D0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000051D0                 public quotearg_n_style_mem
.text:00000000000051D0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000051D0
.text:00000000000051D0 var_48          = dword ptr -48h
.text:00000000000051D0 var_44          = qword ptr -44h
.text:00000000000051D0 var_3C          = qword ptr -3Ch
.text:00000000000051D0 var_34          = qword ptr -34h
.text:00000000000051D0 var_2C          = qword ptr -2Ch
.text:00000000000051D0 var_24          = qword ptr -24h
.text:00000000000051D0 var_1C          = qword ptr -1Ch
.text:00000000000051D0 var_14          = dword ptr -14h
.text:00000000000051D0 var_10          = qword ptr -10h
.text:00000000000051D0
.text:00000000000051D0 ; __unwind {
.text:00000000000051D0                 sub     rsp, 48h
.text:00000000000051D4                 mov     rax, rdx
.text:00000000000051D7                 mov     rdx, rcx
.text:00000000000051DA                 mov     rcx, fs:28h
.text:00000000000051E3                 mov     [rsp+48h+var_10], rcx
.text:00000000000051E8                 xor     ecx, ecx
.text:00000000000051EA                 cmp     esi, 0Ah
.text:00000000000051ED                 jz      short loc_5250
.text:00000000000051EF                 mov     [rsp+48h+var_48], esi
.text:00000000000051F2                 mov     rcx, rsp
.text:00000000000051F5                 mov     rsi, rax
.text:00000000000051F8                 mov     [rsp+48h+var_44], 0
.text:0000000000005201                 mov     [rsp+48h+var_3C], 0
.text:000000000000520A                 mov     [rsp+48h+var_34], 0
.text:0000000000005213                 mov     [rsp+48h+var_2C], 0
.text:000000000000521C                 mov     [rsp+48h+var_24], 0
.text:0000000000005225                 mov     [rsp+48h+var_1C], 0
.text:000000000000522E                 mov     [rsp+48h+var_14], 0
.text:0000000000005236                 call    quotearg_n_options
.text:000000000000523B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005240                 xor     rdx, fs:28h
.text:0000000000005249                 jnz     short loc_5255
.text:000000000000524B                 add     rsp, 48h
.text:000000000000524F                 retn
.text:0000000000005250 ; ---------------------------------------------------------------------------
.text:0000000000005250
.text:0000000000005250 loc_5250:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005250                 call    _abort
.text:0000000000005255 ; ---------------------------------------------------------------------------
.text:0000000000005255
.text:0000000000005255 loc_5255:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005255                 call    ___stack_chk_fail
.text:0000000000005255 ; } // starts at 51D0
.text:0000000000005255 quotearg_n_style_mem endp
.text:0000000000005255
.text:0000000000005255 ; ---------------------------------------------------------------------------
.text:000000000000525A                 align 20h
.text:0000000000005260
.text:0000000000005260 ; =============== S U B R O U T I N E =======================================
.text:0000000000005260
.text:0000000000005260
.text:0000000000005260                 public quotearg_style
.text:0000000000005260 quotearg_style  proc near
.text:0000000000005260 ; __unwind {
.text:0000000000005260                 mov     rdx, rsi
.text:0000000000005263                 mov     esi, edi
.text:0000000000005265                 xor     edi, edi
.text:0000000000005267                 jmp     quotearg_n_style
.text:0000000000005267 ; } // starts at 5260
.text:0000000000005267 quotearg_style  endp
.text:0000000000005267
.text:0000000000005267 ; ---------------------------------------------------------------------------
.text:000000000000526C                 align 10h
.text:0000000000005270
.text:0000000000005270 ; =============== S U B R O U T I N E =======================================
.text:0000000000005270
.text:0000000000005270
.text:0000000000005270                 public quotearg_style_mem
.text:0000000000005270 quotearg_style_mem proc near
.text:0000000000005270 ; __unwind {
.text:0000000000005270                 mov     rcx, rdx
.text:0000000000005273                 mov     rdx, rsi
.text:0000000000005276                 mov     esi, edi
.text:0000000000005278                 xor     edi, edi
.text:000000000000527A                 jmp     quotearg_n_style_mem
.text:000000000000527A ; } // starts at 5270
.text:000000000000527A quotearg_style_mem endp
.text:000000000000527A
.text:000000000000527A ; ---------------------------------------------------------------------------
.text:000000000000527F                 align 20h
.text:0000000000005280
.text:0000000000005280 ; =============== S U B R O U T I N E =======================================
.text:0000000000005280
.text:0000000000005280 ; Attributes: info_from_lumina
.text:0000000000005280
.text:0000000000005280 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000005280                 public quotearg_char_mem
.text:0000000000005280 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000005280                                         ; quotearg_colon+C↓j ...
.text:0000000000005280
.text:0000000000005280 var_48          = xmmword ptr -48h
.text:0000000000005280 var_38          = xmmword ptr -38h
.text:0000000000005280 var_28          = xmmword ptr -28h
.text:0000000000005280 var_18          = qword ptr -18h
.text:0000000000005280 var_10          = qword ptr -10h
.text:0000000000005280
.text:0000000000005280 ; __unwind {
.text:0000000000005280                 sub     rsp, 48h
.text:0000000000005284                 mov     ecx, edx
.text:0000000000005286                 mov     rax, fs:28h
.text:000000000000528F                 mov     [rsp+48h+var_10], rax
.text:0000000000005294                 xor     eax, eax
.text:0000000000005296                 mov     rax, cs:qword_20B2F0
.text:000000000000529D                 mov     r8, rsp
.text:00000000000052A0                 and     ecx, 1Fh
.text:00000000000052A3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000052AB                 mov     [rsp+48h+var_18], rax
.text:00000000000052B0                 mov     eax, edx
.text:00000000000052B2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000052B6                 shr     al, 5
.text:00000000000052B9                 movzx   eax, al
.text:00000000000052BC                 lea     r9, [r8+rax*4+8]
.text:00000000000052C1                 movdqa  xmm0, cs:xmmword_20B2D0
.text:00000000000052C9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000052CE                 movdqa  xmm0, cs:xmmword_20B2E0
.text:00000000000052D6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000052DB                 mov     edx, [r9]
.text:00000000000052DE                 mov     eax, edx
.text:00000000000052E0                 shr     eax, cl
.text:00000000000052E2                 not     eax
.text:00000000000052E4                 and     eax, 1
.text:00000000000052E7                 shl     eax, cl
.text:00000000000052E9                 mov     rcx, r8
.text:00000000000052EC                 xor     eax, edx
.text:00000000000052EE                 mov     rdx, rsi
.text:00000000000052F1                 mov     rsi, rdi
.text:00000000000052F4                 mov     [r9], eax
.text:00000000000052F7                 xor     edi, edi
.text:00000000000052F9                 call    quotearg_n_options
.text:00000000000052FE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005303                 xor     rsi, fs:28h
.text:000000000000530C                 jnz     short loc_5313
.text:000000000000530E                 add     rsp, 48h
.text:0000000000005312                 retn
.text:0000000000005313 ; ---------------------------------------------------------------------------
.text:0000000000005313
.text:0000000000005313 loc_5313:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005313                 call    ___stack_chk_fail
.text:0000000000005313 ; } // starts at 5280
.text:0000000000005313 quotearg_char_mem endp
.text:0000000000005313
.text:0000000000005313 ; ---------------------------------------------------------------------------
.text:0000000000005318                 align 20h
.text:0000000000005320
.text:0000000000005320 ; =============== S U B R O U T I N E =======================================
.text:0000000000005320
.text:0000000000005320
.text:0000000000005320                 public quotearg_char
.text:0000000000005320 quotearg_char   proc near
.text:0000000000005320 ; __unwind {
.text:0000000000005320                 movsx   edx, sil
.text:0000000000005324                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000532B                 jmp     quotearg_char_mem
.text:000000000000532B ; } // starts at 5320
.text:000000000000532B quotearg_char   endp
.text:000000000000532B
.text:0000000000005330
.text:0000000000005330 ; =============== S U B R O U T I N E =======================================
.text:0000000000005330
.text:0000000000005330
.text:0000000000005330                 public quotearg_colon
.text:0000000000005330 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005330 ; __unwind {
.text:0000000000005330                 mov     edx, 3Ah ; ':'
.text:0000000000005335                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000533C                 jmp     quotearg_char_mem
.text:000000000000533C ; } // starts at 5330
.text:000000000000533C quotearg_colon  endp
.text:000000000000533C
.text:000000000000533C ; ---------------------------------------------------------------------------
.text:0000000000005341                 align 10h
.text:0000000000005350
.text:0000000000005350 ; =============== S U B R O U T I N E =======================================
.text:0000000000005350
.text:0000000000005350
.text:0000000000005350                 public quotearg_colon_mem
.text:0000000000005350 quotearg_colon_mem proc near
.text:0000000000005350 ; __unwind {
.text:0000000000005350                 mov     edx, 3Ah ; ':'
.text:0000000000005355                 jmp     quotearg_char_mem
.text:0000000000005355 ; } // starts at 5350
.text:0000000000005355 quotearg_colon_mem endp
.text:0000000000005355
.text:0000000000005355 ; ---------------------------------------------------------------------------
.text:000000000000535A                 align 20h
.text:0000000000005360
.text:0000000000005360 ; =============== S U B R O U T I N E =======================================
.text:0000000000005360
.text:0000000000005360 ; Attributes: info_from_lumina
.text:0000000000005360
.text:0000000000005360 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005360                 public quotearg_n_style_colon
.text:0000000000005360 quotearg_n_style_colon proc near        ; CODE XREF: who+7A0↑p
.text:0000000000005360
.text:0000000000005360 var_48          = dword ptr -48h
.text:0000000000005360 var_44          = qword ptr -44h
.text:0000000000005360 var_3C          = qword ptr -3Ch
.text:0000000000005360 var_34          = qword ptr -34h
.text:0000000000005360 var_2C          = qword ptr -2Ch
.text:0000000000005360 var_24          = qword ptr -24h
.text:0000000000005360 var_1C          = qword ptr -1Ch
.text:0000000000005360 var_14          = dword ptr -14h
.text:0000000000005360 var_10          = qword ptr -10h
.text:0000000000005360
.text:0000000000005360 ; __unwind {
.text:0000000000005360                 sub     rsp, 48h
.text:0000000000005364                 mov     rax, rdx
.text:0000000000005367                 mov     rdx, fs:28h
.text:0000000000005370                 mov     [rsp+48h+var_10], rdx
.text:0000000000005375                 xor     edx, edx
.text:0000000000005377                 cmp     esi, 0Ah
.text:000000000000537A                 jz      short loc_53E4
.text:000000000000537C                 mov     [rsp+48h+var_48], esi
.text:000000000000537F                 mov     rcx, rsp
.text:0000000000005382                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005389                 mov     rsi, rax
.text:000000000000538C                 mov     [rsp+48h+var_44], 0
.text:0000000000005395                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000539E                 mov     [rsp+48h+var_34], 0
.text:00000000000053A7                 mov     [rsp+48h+var_2C], 0
.text:00000000000053B0                 mov     [rsp+48h+var_24], 0
.text:00000000000053B9                 mov     [rsp+48h+var_1C], 0
.text:00000000000053C2                 mov     [rsp+48h+var_14], 0
.text:00000000000053CA                 call    quotearg_n_options
.text:00000000000053CF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000053D4                 xor     rcx, fs:28h
.text:00000000000053DD                 jnz     short loc_53E9
.text:00000000000053DF                 add     rsp, 48h
.text:00000000000053E3                 retn
.text:00000000000053E4 ; ---------------------------------------------------------------------------
.text:00000000000053E4
.text:00000000000053E4 loc_53E4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000053E4                 call    _abort
.text:00000000000053E9 ; ---------------------------------------------------------------------------
.text:00000000000053E9
.text:00000000000053E9 loc_53E9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000053E9                 call    ___stack_chk_fail
.text:00000000000053E9 ; } // starts at 5360
.text:00000000000053E9 quotearg_n_style_colon endp
.text:00000000000053E9
.text:00000000000053E9 ; ---------------------------------------------------------------------------
.text:00000000000053EE                 align 10h
.text:00000000000053F0
.text:00000000000053F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053F0
.text:00000000000053F0 ; Attributes: info_from_lumina
.text:00000000000053F0
.text:00000000000053F0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000053F0                 public quotearg_n_custom_mem
.text:00000000000053F0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000053F0                                         ; quotearg_custom+12↓j ...
.text:00000000000053F0
.text:00000000000053F0 var_48          = xmmword ptr -48h
.text:00000000000053F0 var_38          = xmmword ptr -38h
.text:00000000000053F0 var_28          = xmmword ptr -28h
.text:00000000000053F0 var_18          = qword ptr -18h
.text:00000000000053F0 var_10          = qword ptr -10h
.text:00000000000053F0
.text:00000000000053F0 ; __unwind {
.text:00000000000053F0                 sub     rsp, 48h
.text:00000000000053F4                 mov     r9, rcx
.text:00000000000053F7                 mov     rcx, cs:qword_20B2F0
.text:00000000000053FE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005406                 mov     rax, fs:28h
.text:000000000000540F                 mov     [rsp+48h+var_10], rax
.text:0000000000005414                 xor     eax, eax
.text:0000000000005416                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000541A                 test    rsi, rsi
.text:000000000000541D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005422                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005429                 movdqa  xmm0, cs:xmmword_20B2D0
.text:0000000000005431                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005436                 movdqa  xmm0, cs:xmmword_20B2E0
.text:000000000000543E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005443                 jz      short loc_5477
.text:0000000000005445                 test    rdx, rdx
.text:0000000000005448                 jz      short loc_5477
.text:000000000000544A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000544F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005454                 mov     rcx, rsp
.text:0000000000005457                 mov     rdx, r8
.text:000000000000545A                 mov     rsi, r9
.text:000000000000545D                 call    quotearg_n_options
.text:0000000000005462                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005467                 xor     rdi, fs:28h
.text:0000000000005470                 jnz     short loc_547C
.text:0000000000005472                 add     rsp, 48h
.text:0000000000005476                 retn
.text:0000000000005477 ; ---------------------------------------------------------------------------
.text:0000000000005477
.text:0000000000005477 loc_5477:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005477                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005477                 call    _abort
.text:000000000000547C ; ---------------------------------------------------------------------------
.text:000000000000547C
.text:000000000000547C loc_547C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000547C                 call    ___stack_chk_fail
.text:000000000000547C ; } // starts at 53F0
.text:000000000000547C quotearg_n_custom_mem endp
.text:000000000000547C
.text:000000000000547C ; ---------------------------------------------------------------------------
.text:0000000000005481                 align 10h
.text:0000000000005490
.text:0000000000005490 ; =============== S U B R O U T I N E =======================================
.text:0000000000005490
.text:0000000000005490
.text:0000000000005490                 public quotearg_n_custom
.text:0000000000005490 quotearg_n_custom proc near
.text:0000000000005490 ; __unwind {
.text:0000000000005490                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005497                 jmp     quotearg_n_custom_mem
.text:0000000000005497 ; } // starts at 5490
.text:0000000000005497 quotearg_n_custom endp
.text:0000000000005497
.text:0000000000005497 ; ---------------------------------------------------------------------------
.text:000000000000549C                 align 20h
.text:00000000000054A0
.text:00000000000054A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054A0
.text:00000000000054A0
.text:00000000000054A0                 public quotearg_custom
.text:00000000000054A0 quotearg_custom proc near
.text:00000000000054A0 ; __unwind {
.text:00000000000054A0                 mov     rcx, rdx
.text:00000000000054A3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000054AA                 mov     rdx, rsi
.text:00000000000054AD                 mov     rsi, rdi
.text:00000000000054B0                 xor     edi, edi
.text:00000000000054B2                 jmp     quotearg_n_custom_mem
.text:00000000000054B2 ; } // starts at 54A0
.text:00000000000054B2 quotearg_custom endp
.text:00000000000054B2
.text:00000000000054B2 ; ---------------------------------------------------------------------------
.text:00000000000054B7                 align 20h
.text:00000000000054C0
.text:00000000000054C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054C0
.text:00000000000054C0
.text:00000000000054C0                 public quotearg_custom_mem
.text:00000000000054C0 quotearg_custom_mem proc near
.text:00000000000054C0 ; __unwind {
.text:00000000000054C0                 mov     r8, rcx
.text:00000000000054C3                 mov     rcx, rdx
.text:00000000000054C6                 mov     rdx, rsi
.text:00000000000054C9                 mov     rsi, rdi
.text:00000000000054CC                 xor     edi, edi
.text:00000000000054CE                 jmp     quotearg_n_custom_mem
.text:00000000000054CE ; } // starts at 54C0
.text:00000000000054CE quotearg_custom_mem endp
.text:00000000000054CE
.text:00000000000054CE ; ---------------------------------------------------------------------------
.text:00000000000054D3                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0
.text:00000000000054E0                 public quote_n_mem
.text:00000000000054E0 quote_n_mem     proc near
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 lea     rcx, quote_quoting_options
.text:00000000000054E7                 jmp     quotearg_n_options
.text:00000000000054E7 ; } // starts at 54E0
.text:00000000000054E7 quote_n_mem     endp
.text:00000000000054E7
.text:00000000000054E7 ; ---------------------------------------------------------------------------
.text:00000000000054EC                 align 10h
.text:00000000000054F0
.text:00000000000054F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054F0
.text:00000000000054F0
.text:00000000000054F0                 public quote_mem
.text:00000000000054F0 quote_mem       proc near
.text:00000000000054F0 ; __unwind {
.text:00000000000054F0                 lea     rcx, quote_quoting_options
.text:00000000000054F7                 mov     rdx, rsi
.text:00000000000054FA                 mov     rsi, rdi
.text:00000000000054FD                 xor     edi, edi
.text:00000000000054FF                 jmp     quotearg_n_options
.text:00000000000054FF ; } // starts at 54F0
.text:00000000000054FF quote_mem       endp
.text:00000000000054FF
.text:00000000000054FF ; ---------------------------------------------------------------------------
.text:0000000000005504                 align 10h
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510
.text:0000000000005510                 public quote_n
.text:0000000000005510 quote_n         proc near
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 lea     rcx, quote_quoting_options
.text:0000000000005517                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000551E                 jmp     quotearg_n_options
.text:000000000000551E ; } // starts at 5510
.text:000000000000551E quote_n         endp
.text:000000000000551E
.text:000000000000551E ; ---------------------------------------------------------------------------
.text:0000000000005523                 align 10h
.text:0000000000005530
.text:0000000000005530 ; =============== S U B R O U T I N E =======================================
.text:0000000000005530
.text:0000000000005530
.text:0000000000005530                 public quote
.text:0000000000005530 quote           proc near               ; CODE XREF: main+33D↑p
.text:0000000000005530 ; __unwind {
.text:0000000000005530                 lea     rcx, quote_quoting_options
.text:0000000000005537                 mov     rsi, rdi
.text:000000000000553A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005541                 xor     edi, edi
.text:0000000000005543                 jmp     quotearg_n_options
.text:0000000000005543 ; } // starts at 5530
.text:0000000000005543 quote           endp
.text:0000000000005543
.text:0000000000005543 ; ---------------------------------------------------------------------------
.text:0000000000005548                 align 10h
.text:0000000000005550
.text:0000000000005550 ; =============== S U B R O U T I N E =======================================
.text:0000000000005550
.text:0000000000005550
.text:0000000000005550 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005550                 public version_etc_arn
.text:0000000000005550 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_598B↓j
.text:0000000000005550                                         ; version_etc_va:loc_59DB↓p ...
.text:0000000000005550
.text:0000000000005550 var_58          = qword ptr -58h
.text:0000000000005550 var_50          = qword ptr -50h
.text:0000000000005550 var_48          = qword ptr -48h
.text:0000000000005550 var_40          = qword ptr -40h
.text:0000000000005550
.text:0000000000005550 ; __unwind {
.text:0000000000005550                 push    r15
.text:0000000000005552                 push    r14
.text:0000000000005554                 push    r13
.text:0000000000005556                 push    r12
.text:0000000000005558                 mov     r12, r9
.text:000000000000555B                 push    rbp
.text:000000000000555C                 push    rbx
.text:000000000000555D                 mov     rbp, rdi
.text:0000000000005560                 mov     rbx, r8
.text:0000000000005563                 sub     rsp, 28h
.text:0000000000005567                 test    rsi, rsi
.text:000000000000556A                 jz      loc_5688
.text:0000000000005570                 mov     r8, rdx
.text:0000000000005573                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000557A                 mov     r9, rcx
.text:000000000000557D                 xor     eax, eax
.text:000000000000557F                 mov     rcx, rsi
.text:0000000000005582                 mov     esi, 1
.text:0000000000005587                 call    ___fprintf_chk
.text:000000000000558C
.text:000000000000558C loc_558C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000558C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005593                 xor     edi, edi        ; domainname
.text:0000000000005595                 mov     edx, 5          ; category
.text:000000000000559A                 call    _dcgettext
.text:000000000000559F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000055A6                 mov     rcx, rax
.text:00000000000055A9                 mov     r8d, 7E3h
.text:00000000000055AF                 mov     esi, 1
.text:00000000000055B4                 mov     rdi, rbp
.text:00000000000055B7                 xor     eax, eax
.text:00000000000055B9                 call    ___fprintf_chk
.text:00000000000055BE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000055C5                 xor     edi, edi        ; domainname
.text:00000000000055C7                 mov     edx, 5          ; category
.text:00000000000055CC                 call    _dcgettext
.text:00000000000055D1                 mov     rsi, rbp        ; stream
.text:00000000000055D4                 mov     rdi, rax        ; s
.text:00000000000055D7                 call    _fputs_unlocked
.text:00000000000055DC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000055E0                 ja      def_55F4        ; jumptable 00000000000055F4 default case
.text:00000000000055E6                 lea     rdx, jpt_55F4
.text:00000000000055ED                 movsxd  rax, ds:(jpt_55F4 - 9508h)[rdx+r12*4]
.text:00000000000055F1                 add     rax, rdx
.text:00000000000055F4                 jmp     rax             ; switch jump
.text:00000000000055F4 ; ---------------------------------------------------------------------------
.text:00000000000055F6                 align 20h
.text:0000000000005600
.text:0000000000005600 loc_5600:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005600                                         ; DATA XREF: .rodata:jpt_55F4↓o
.text:0000000000005600                 mov     r9, [rbx+38h]   ; jumptable 00000000000055F4 case 8
.text:0000000000005604                 mov     rax, [rbx+10h]
.text:0000000000005608                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000560F                 mov     r8, [rbx+8]
.text:0000000000005613                 mov     edx, 5          ; category
.text:0000000000005618                 xor     edi, edi        ; domainname
.text:000000000000561A                 mov     r13, [rbx+30h]
.text:000000000000561E                 mov     r12, [rbx+28h]
.text:0000000000005622                 mov     [rsp+58h+var_48], r9
.text:0000000000005627                 mov     r15, [rbx+20h]
.text:000000000000562B                 mov     r14, [rbx+18h]
.text:000000000000562F                 mov     [rsp+58h+var_58], rax
.text:0000000000005633                 mov     [rsp+58h+var_50], r8
.text:0000000000005638                 mov     rbx, [rbx]
.text:000000000000563B                 call    _dcgettext
.text:0000000000005640                 sub     rsp, 8
.text:0000000000005644
.text:0000000000005644 loc_5644:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005644                 mov     r9, [rsp+60h+var_48]
.text:0000000000005649                 mov     rdx, rax
.text:000000000000564C                 mov     rcx, rbx
.text:000000000000564F                 mov     esi, 1
.text:0000000000005654                 mov     rdi, rbp
.text:0000000000005657                 xor     eax, eax
.text:0000000000005659                 push    r9
.text:000000000000565B                 push    r13
.text:000000000000565D                 push    r12
.text:000000000000565F                 push    r15
.text:0000000000005661                 push    r14
.text:0000000000005663                 mov     r9, [rsp+88h+var_58]
.text:0000000000005668                 mov     r8, [rsp+88h+var_50]
.text:000000000000566D                 call    ___fprintf_chk
.text:0000000000005672                 add     rsp, 30h
.text:0000000000005676
.text:0000000000005676 loc_5676:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005676                                         ; DATA XREF: .rodata:jpt_55F4↓o
.text:0000000000005676                 add     rsp, 28h        ; jumptable 00000000000055F4 case 0
.text:000000000000567A                 pop     rbx
.text:000000000000567B                 pop     rbp
.text:000000000000567C                 pop     r12
.text:000000000000567E                 pop     r13
.text:0000000000005680                 pop     r14
.text:0000000000005682                 pop     r15
.text:0000000000005684                 retn
.text:0000000000005684 ; ---------------------------------------------------------------------------
.text:0000000000005685                 align 8
.text:0000000000005688
.text:0000000000005688 loc_5688:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005688                 mov     r8, rcx
.text:000000000000568B                 mov     rcx, rdx
.text:000000000000568E                 lea     rdx, aSS_2      ; "%s %s\n"
.text:0000000000005695                 mov     esi, 1
.text:000000000000569A                 xor     eax, eax
.text:000000000000569C                 call    ___fprintf_chk
.text:00000000000056A1                 jmp     loc_558C
.text:00000000000056A1 ; ---------------------------------------------------------------------------
.text:00000000000056A6                 align 10h
.text:00000000000056B0
.text:00000000000056B0 loc_56B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000056B0                                         ; DATA XREF: .rodata:jpt_55F4↓o
.text:00000000000056B0                 mov     r10, [rbx+40h]  ; jumptable 00000000000055F4 case 9
.text:00000000000056B4                 mov     r9, [rbx+38h]
.text:00000000000056B8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000056BF                 mov     rax, [rbx+10h]
.text:00000000000056C3                 mov     r8, [rbx+8]
.text:00000000000056C7                 mov     edx, 5          ; category
.text:00000000000056CC                 mov     r13, [rbx+30h]
.text:00000000000056D0                 mov     r12, [rbx+28h]
.text:00000000000056D4                 mov     r15, [rbx+20h]
.text:00000000000056D8                 mov     r14, [rbx+18h]
.text:00000000000056DC                 mov     rbx, [rbx]
.text:00000000000056DF                 mov     [rsp+58h+var_40], r10
.text:00000000000056E4                 mov     [rsp+58h+var_48], r9
.text:00000000000056E9                 mov     [rsp+58h+var_58], rax
.text:00000000000056ED                 mov     [rsp+58h+var_50], r8
.text:00000000000056F2
.text:00000000000056F2 loc_56F2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000056F2                 xor     edi, edi        ; domainname
.text:00000000000056F4                 call    _dcgettext
.text:00000000000056F9                 mov     r10, [rsp+58h+var_40]
.text:00000000000056FE                 push    r10
.text:0000000000005700                 jmp     loc_5644
.text:0000000000005700 ; ---------------------------------------------------------------------------
.text:0000000000005705                 align 8
.text:0000000000005708
.text:0000000000005708 loc_5708:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005708                                         ; DATA XREF: .rodata:jpt_55F4↓o
.text:0000000000005708                 mov     rbx, [rbx]      ; jumptable 00000000000055F4 case 1
.text:000000000000570B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005712                 mov     edx, 5          ; category
.text:0000000000005717                 xor     edi, edi        ; domainname
.text:0000000000005719                 call    _dcgettext
.text:000000000000571E                 add     rsp, 28h
.text:0000000000005722                 mov     rcx, rbx
.text:0000000000005725                 mov     rdi, rbp
.text:0000000000005728                 pop     rbx
.text:0000000000005729                 pop     rbp
.text:000000000000572A                 pop     r12
.text:000000000000572C                 pop     r13
.text:000000000000572E                 pop     r14
.text:0000000000005730                 pop     r15
.text:0000000000005732                 mov     rdx, rax
.text:0000000000005735                 mov     esi, 1
.text:000000000000573A                 xor     eax, eax
.text:000000000000573C                 jmp     ___fprintf_chk
.text:000000000000573C ; ---------------------------------------------------------------------------
.text:0000000000005741                 align 8
.text:0000000000005748
.text:0000000000005748 loc_5748:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005748                                         ; DATA XREF: .rodata:jpt_55F4↓o
.text:0000000000005748                 mov     r12, [rbx+8]    ; jumptable 00000000000055F4 case 2
.text:000000000000574C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005753                 mov     rbx, [rbx]
.text:0000000000005756                 mov     edx, 5          ; category
.text:000000000000575B                 xor     edi, edi        ; domainname
.text:000000000000575D                 call    _dcgettext
.text:0000000000005762                 add     rsp, 28h
.text:0000000000005766                 mov     r8, r12
.text:0000000000005769                 mov     rcx, rbx
.text:000000000000576C                 mov     rdi, rbp
.text:000000000000576F                 mov     rdx, rax
.text:0000000000005772                 mov     esi, 1
.text:0000000000005777                 pop     rbx
.text:0000000000005778                 pop     rbp
.text:0000000000005779                 pop     r12
.text:000000000000577B                 pop     r13
.text:000000000000577D                 pop     r14
.text:000000000000577F                 pop     r15
.text:0000000000005781                 xor     eax, eax
.text:0000000000005783                 jmp     ___fprintf_chk
.text:0000000000005783 ; ---------------------------------------------------------------------------
.text:0000000000005788                 align 10h
.text:0000000000005790
.text:0000000000005790 loc_5790:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005790                                         ; DATA XREF: .rodata:jpt_55F4↓o
.text:0000000000005790                 mov     r13, [rbx+10h]  ; jumptable 00000000000055F4 case 3
.text:0000000000005794                 mov     r12, [rbx+8]
.text:0000000000005798                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000579F                 mov     rbx, [rbx]
.text:00000000000057A2                 mov     edx, 5          ; category
.text:00000000000057A7                 xor     edi, edi        ; domainname
.text:00000000000057A9                 call    _dcgettext
.text:00000000000057AE                 add     rsp, 28h
.text:00000000000057B2                 mov     r9, r13
.text:00000000000057B5                 mov     r8, r12
.text:00000000000057B8                 mov     rcx, rbx
.text:00000000000057BB                 mov     rdi, rbp
.text:00000000000057BE                 mov     rdx, rax
.text:00000000000057C1                 pop     rbx
.text:00000000000057C2                 pop     rbp
.text:00000000000057C3                 pop     r12
.text:00000000000057C5                 pop     r13
.text:00000000000057C7                 pop     r14
.text:00000000000057C9                 pop     r15
.text:00000000000057CB                 mov     esi, 1
.text:00000000000057D0                 xor     eax, eax
.text:00000000000057D2                 jmp     ___fprintf_chk
.text:00000000000057D2 ; ---------------------------------------------------------------------------
.text:00000000000057D7                 align 20h
.text:00000000000057E0
.text:00000000000057E0 loc_57E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000057E0                                         ; DATA XREF: .rodata:jpt_55F4↓o
.text:00000000000057E0                 lea     rsi, aWrittenBySSSAn ; jumptable 00000000000055F4 case 4
.text:00000000000057E7                 mov     edx, 5          ; category
.text:00000000000057EC                 xor     edi, edi        ; domainname
.text:00000000000057EE                 mov     r14, [rbx+18h]
.text:00000000000057F2                 mov     r13, [rbx+10h]
.text:00000000000057F6                 mov     r12, [rbx+8]
.text:00000000000057FA                 mov     rbx, [rbx]
.text:00000000000057FD                 call    _dcgettext
.text:0000000000005802                 sub     rsp, 8
.text:0000000000005806
.text:0000000000005806 loc_5806:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005806                 push    r14
.text:0000000000005808                 mov     rdx, rax
.text:000000000000580B                 mov     r9, r13
.text:000000000000580E                 mov     r8, r12
.text:0000000000005811                 mov     rcx, rbx
.text:0000000000005814                 mov     rdi, rbp
.text:0000000000005817                 mov     esi, 1
.text:000000000000581C                 xor     eax, eax
.text:000000000000581E                 call    ___fprintf_chk
.text:0000000000005823                 pop     rax
.text:0000000000005824                 pop     rdx
.text:0000000000005825                 add     rsp, 28h
.text:0000000000005829                 pop     rbx
.text:000000000000582A                 pop     rbp
.text:000000000000582B                 pop     r12
.text:000000000000582D                 pop     r13
.text:000000000000582F                 pop     r14
.text:0000000000005831                 pop     r15
.text:0000000000005833                 retn
.text:0000000000005833 ; ---------------------------------------------------------------------------
.text:0000000000005834                 align 8
.text:0000000000005838
.text:0000000000005838 loc_5838:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005838                                         ; DATA XREF: .rodata:jpt_55F4↓o
.text:0000000000005838                 mov     r15, [rbx+20h]  ; jumptable 00000000000055F4 case 5
.text:000000000000583C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005843                 mov     edx, 5          ; category
.text:0000000000005848                 xor     edi, edi        ; domainname
.text:000000000000584A                 mov     r14, [rbx+18h]
.text:000000000000584E                 mov     r13, [rbx+10h]
.text:0000000000005852                 mov     r12, [rbx+8]
.text:0000000000005856                 mov     rbx, [rbx]
.text:0000000000005859                 call    _dcgettext
.text:000000000000585E                 push    r15
.text:0000000000005860                 jmp     short loc_5806
.text:0000000000005860 ; ---------------------------------------------------------------------------
.text:0000000000005862                 align 8
.text:0000000000005868
.text:0000000000005868 loc_5868:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005868                                         ; DATA XREF: .rodata:jpt_55F4↓o
.text:0000000000005868                 mov     r8, [rbx+8]     ; jumptable 00000000000055F4 case 6
.text:000000000000586C                 mov     r12, [rbx+28h]
.text:0000000000005870                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005877                 mov     r15, [rbx+20h]
.text:000000000000587B                 mov     r14, [rbx+18h]
.text:000000000000587F                 mov     edx, 5          ; category
.text:0000000000005884                 mov     r13, [rbx+10h]
.text:0000000000005888                 xor     edi, edi        ; domainname
.text:000000000000588A                 mov     rbx, [rbx]
.text:000000000000588D                 mov     [rsp+58h+var_58], r8
.text:0000000000005891                 call    _dcgettext
.text:0000000000005896                 sub     rsp, 8
.text:000000000000589A                 mov     r9, r13
.text:000000000000589D                 push    r12
.text:000000000000589F                 push    r15
.text:00000000000058A1                 push    r14
.text:00000000000058A3
.text:00000000000058A3 loc_58A3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000058A3                 mov     r8, [rsp+78h+var_58]
.text:00000000000058A8                 mov     rcx, rbx
.text:00000000000058AB                 mov     rdx, rax
.text:00000000000058AE                 mov     rdi, rbp
.text:00000000000058B1                 mov     esi, 1
.text:00000000000058B6                 xor     eax, eax
.text:00000000000058B8                 call    ___fprintf_chk
.text:00000000000058BD                 add     rsp, 20h
.text:00000000000058C1                 add     rsp, 28h
.text:00000000000058C5                 pop     rbx
.text:00000000000058C6                 pop     rbp
.text:00000000000058C7                 pop     r12
.text:00000000000058C9                 pop     r13
.text:00000000000058CB                 pop     r14
.text:00000000000058CD                 pop     r15
.text:00000000000058CF                 retn
.text:00000000000058D0 ; ---------------------------------------------------------------------------
.text:00000000000058D0
.text:00000000000058D0 loc_58D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000058D0                                         ; DATA XREF: .rodata:jpt_55F4↓o
.text:00000000000058D0                 mov     r9, [rbx+10h]   ; jumptable 00000000000055F4 case 7
.text:00000000000058D4                 mov     r13, [rbx+30h]
.text:00000000000058D8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000058DF                 mov     r12, [rbx+28h]
.text:00000000000058E3                 mov     r15, [rbx+20h]
.text:00000000000058E7                 mov     edx, 5          ; category
.text:00000000000058EC                 mov     r14, [rbx+18h]
.text:00000000000058F0                 mov     r8, [rbx+8]
.text:00000000000058F4                 xor     edi, edi        ; domainname
.text:00000000000058F6                 mov     [rsp+58h+var_50], r9
.text:00000000000058FB                 mov     rbx, [rbx]
.text:00000000000058FE                 mov     [rsp+58h+var_58], r8
.text:0000000000005902                 call    _dcgettext
.text:0000000000005907                 push    r13
.text:0000000000005909                 push    r12
.text:000000000000590B                 push    r15
.text:000000000000590D                 push    r14
.text:000000000000590F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005914                 jmp     short loc_58A3
.text:0000000000005914 ; ---------------------------------------------------------------------------
.text:0000000000005916                 align 20h
.text:0000000000005920
.text:0000000000005920 def_55F4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005920                 mov     r10, [rbx+40h]  ; jumptable 00000000000055F4 default case
.text:0000000000005924                 mov     r9, [rbx+38h]
.text:0000000000005928                 mov     edx, 5
.text:000000000000592D                 mov     rax, [rbx+10h]
.text:0000000000005931                 mov     r8, [rbx+8]
.text:0000000000005935                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000593C                 mov     r13, [rbx+30h]
.text:0000000000005940                 mov     r12, [rbx+28h]
.text:0000000000005944                 mov     r15, [rbx+20h]
.text:0000000000005948                 mov     r14, [rbx+18h]
.text:000000000000594C                 mov     [rsp+58h+var_40], r10
.text:0000000000005951                 mov     [rsp+58h+var_48], r9
.text:0000000000005956                 mov     [rsp+58h+var_58], rax
.text:000000000000595A                 mov     [rsp+58h+var_50], r8
.text:000000000000595F                 mov     rbx, [rbx]
.text:0000000000005962                 jmp     loc_56F2
.text:0000000000005962 ; } // starts at 5550
.text:0000000000005962 version_etc_arn endp
.text:0000000000005962
.text:0000000000005962 ; ---------------------------------------------------------------------------
.text:0000000000005967                 align 10h
.text:0000000000005970
.text:0000000000005970 ; =============== S U B R O U T I N E =======================================
.text:0000000000005970
.text:0000000000005970 ; Attributes: info_from_lumina
.text:0000000000005970
.text:0000000000005970 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005970                 public version_etc_ar
.text:0000000000005970 version_etc_ar  proc near
.text:0000000000005970 ; __unwind {
.text:0000000000005970                 xor     r9d, r9d
.text:0000000000005973                 cmp     qword ptr [r8], 0
.text:0000000000005977                 jz      short loc_598B
.text:0000000000005979                 nop     dword ptr [rax+00000000h]
.text:0000000000005980
.text:0000000000005980 loc_5980:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005980                 add     r9, 1
.text:0000000000005984                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005989                 jnz     short loc_5980
.text:000000000000598B
.text:000000000000598B loc_598B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000598B                 jmp     version_etc_arn
.text:000000000000598B ; } // starts at 5970
.text:000000000000598B version_etc_ar  endp
.text:000000000000598B
.text:0000000000005990
.text:0000000000005990 ; =============== S U B R O U T I N E =======================================
.text:0000000000005990
.text:0000000000005990 ; Attributes: info_from_lumina
.text:0000000000005990
.text:0000000000005990 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005990                 public version_etc_va
.text:0000000000005990 version_etc_va  proc near
.text:0000000000005990
.text:0000000000005990 authtab         = qword ptr -68h
.text:0000000000005990 var_10          = qword ptr -10h
.text:0000000000005990
.text:0000000000005990 ; __unwind {
.text:0000000000005990                 sub     rsp, 68h
.text:0000000000005994                 mov     r10, r8
.text:0000000000005997                 xor     r9d, r9d
.text:000000000000599A                 mov     rax, fs:28h
.text:00000000000059A3                 mov     [rsp+68h+var_10], rax
.text:00000000000059A8                 xor     eax, eax
.text:00000000000059AA                 mov     r8, rsp
.text:00000000000059AD                 nop     dword ptr [rax]
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000059B0                 mov     eax, [r10]
.text:00000000000059B3                 cmp     eax, 2Fh ; '/'
.text:00000000000059B6                 ja      short loc_59FA
.text:00000000000059B8                 mov     r11d, eax
.text:00000000000059BB                 add     r11, [r10+10h]
.text:00000000000059BF                 add     eax, 8
.text:00000000000059C2                 mov     [r10], eax
.text:00000000000059C5
.text:00000000000059C5 loc_59C5:                               ; CODE XREF: version_etc_va+76↓j
.text:00000000000059C5                 mov     rax, [r11]
.text:00000000000059C8                 test    rax, rax
.text:00000000000059CB                 mov     [r8+r9*8], rax
.text:00000000000059CF                 jz      short loc_59DB
.text:00000000000059D1                 add     r9, 1
.text:00000000000059D5                 cmp     r9, 0Ah
.text:00000000000059D9                 jnz     short loc_59B0
.text:00000000000059DB
.text:00000000000059DB loc_59DB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000059DB                 call    version_etc_arn
.text:00000000000059E0                 mov     rax, [rsp+68h+var_10]
.text:00000000000059E5                 xor     rax, fs:28h
.text:00000000000059EE                 jnz     short loc_59F5
.text:00000000000059F0                 add     rsp, 68h
.text:00000000000059F4                 retn
.text:00000000000059F5 ; ---------------------------------------------------------------------------
.text:00000000000059F5
.text:00000000000059F5 loc_59F5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000059F5                 call    ___stack_chk_fail
.text:00000000000059FA ; ---------------------------------------------------------------------------
.text:00000000000059FA
.text:00000000000059FA loc_59FA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000059FA                 mov     r11, [r10+8]
.text:00000000000059FE                 lea     rax, [r11+8]
.text:0000000000005A02                 mov     [r10+8], rax
.text:0000000000005A06                 jmp     short loc_59C5
.text:0000000000005A06 ; } // starts at 5990
.text:0000000000005A06 version_etc_va  endp
.text:0000000000005A06
.text:0000000000005A06 ; ---------------------------------------------------------------------------
.text:0000000000005A08                 align 10h
.text:0000000000005A10
.text:0000000000005A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A10
.text:0000000000005A10 ; Attributes: info_from_lumina
.text:0000000000005A10
.text:0000000000005A10 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005A10                 public version_etc
.text:0000000000005A10 version_etc     proc near               ; CODE XREF: main+17F↑p
.text:0000000000005A10
.text:0000000000005A10 var_C0          = dword ptr -0C0h
.text:0000000000005A10 var_B8          = qword ptr -0B8h
.text:0000000000005A10 var_B0          = qword ptr -0B0h
.text:0000000000005A10 var_A8          = byte ptr -0A8h
.text:0000000000005A10 var_50          = qword ptr -50h
.text:0000000000005A10 var_48          = byte ptr -48h
.text:0000000000005A10 var_28          = qword ptr -28h
.text:0000000000005A10 var_20          = qword ptr -20h
.text:0000000000005A10 arg_0           = byte ptr  8
.text:0000000000005A10
.text:0000000000005A10 ; __unwind {
.text:0000000000005A10                 push    rbp
.text:0000000000005A11                 push    rbx
.text:0000000000005A12                 mov     r10d, 20h ; ' '
.text:0000000000005A18                 xor     r11d, r11d
.text:0000000000005A1B                 sub     rsp, 0B8h
.text:0000000000005A22                 mov     rax, fs:28h
.text:0000000000005A2B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005A30                 xor     eax, eax
.text:0000000000005A32                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000005A3A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005A42                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000005A4A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000005A4F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005A57                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000005A5F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005A64                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000005A6C                 xor     r9d, r9d
.text:0000000000005A6F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005A74                 mov     rbp, rax
.text:0000000000005A77                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005A80
.text:0000000000005A80 loc_5A80:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005A80                 cmp     r10d, 2Fh ; '/'
.text:0000000000005A84                 ja      short loc_5ADC
.text:0000000000005A86                 mov     eax, r10d
.text:0000000000005A89                 mov     r11d, 1
.text:0000000000005A8F                 add     r10d, 8
.text:0000000000005A93                 add     rax, rbp
.text:0000000000005A96
.text:0000000000005A96 loc_5A96:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005A96                 mov     rax, [rax]
.text:0000000000005A99                 test    rax, rax
.text:0000000000005A9C                 mov     [r8+r9*8], rax
.text:0000000000005AA0                 jz      short loc_5AAC
.text:0000000000005AA2                 add     r9, 1
.text:0000000000005AA6                 cmp     r9, 0Ah
.text:0000000000005AAA                 jnz     short loc_5A80
.text:0000000000005AAC
.text:0000000000005AAC loc_5AAC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000005AAC                 test    r11b, r11b
.text:0000000000005AAF                 jnz     short loc_5AD5
.text:0000000000005AB1
.text:0000000000005AB1 loc_5AB1:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005AB1                 call    version_etc_arn
.text:0000000000005AB6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000005ABB                 xor     rax, fs:28h
.text:0000000000005AC4                 jnz     short loc_5AD0
.text:0000000000005AC6                 add     rsp, 0B8h
.text:0000000000005ACD                 pop     rbx
.text:0000000000005ACE                 pop     rbp
.text:0000000000005ACF                 retn
.text:0000000000005AD0 ; ---------------------------------------------------------------------------
.text:0000000000005AD0
.text:0000000000005AD0 loc_5AD0:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005AD0                 call    ___stack_chk_fail
.text:0000000000005AD5 ; ---------------------------------------------------------------------------
.text:0000000000005AD5
.text:0000000000005AD5 loc_5AD5:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005AD5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000005ADA                 jmp     short loc_5AB1
.text:0000000000005ADC ; ---------------------------------------------------------------------------
.text:0000000000005ADC
.text:0000000000005ADC loc_5ADC:                               ; CODE XREF: version_etc+74↑j
.text:0000000000005ADC                 mov     rax, rbx
.text:0000000000005ADF                 add     rbx, 8
.text:0000000000005AE3                 jmp     short loc_5A96
.text:0000000000005AE3 ; } // starts at 5A10
.text:0000000000005AE3 version_etc     endp
.text:0000000000005AE3
.text:0000000000005AE3 ; ---------------------------------------------------------------------------
.text:0000000000005AE5                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0
.text:0000000000005AF0 ; Attributes: info_from_lumina
.text:0000000000005AF0
.text:0000000000005AF0 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005AF0                 public emit_bug_reporting_address
.text:0000000000005AF0 emit_bug_reporting_address proc near
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 push    rbx
.text:0000000000005AF1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005AF8                 mov     edx, 5          ; category
.text:0000000000005AFD                 xor     edi, edi        ; domainname
.text:0000000000005AFF                 call    _dcgettext
.text:0000000000005B04                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000005B0B                 mov     rsi, rax
.text:0000000000005B0E                 mov     edi, 1
.text:0000000000005B13                 xor     eax, eax
.text:0000000000005B15                 call    ___printf_chk
.text:0000000000005B1A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005B21                 mov     edx, 5          ; category
.text:0000000000005B26                 xor     edi, edi        ; domainname
.text:0000000000005B28                 call    _dcgettext
.text:0000000000005B2D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005B34                 lea     rdx, unk_860A
.text:0000000000005B3B                 mov     rsi, rax
.text:0000000000005B3E                 mov     edi, 1
.text:0000000000005B43                 xor     eax, eax
.text:0000000000005B45                 call    ___printf_chk
.text:0000000000005B4A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005B51                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005B58                 xor     edi, edi        ; domainname
.text:0000000000005B5A                 mov     edx, 5          ; category
.text:0000000000005B5F                 call    _dcgettext
.text:0000000000005B64                 mov     rsi, rbx        ; stream
.text:0000000000005B67                 mov     rdi, rax        ; s
.text:0000000000005B6A                 pop     rbx
.text:0000000000005B6B                 jmp     _fputs_unlocked
.text:0000000000005B6B ; } // starts at 5AF0
.text:0000000000005B6B emit_bug_reporting_address endp
.text:0000000000005B6B
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70
.text:0000000000005B70                 public xmalloc
.text:0000000000005B70 xmalloc         proc near               ; CODE XREF: print_line:loc_211C↑p
.text:0000000000005B70                                         ; make_id_equals_comment+28↑p ...
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 push    rbx
.text:0000000000005B71                 mov     rbx, rdi
.text:0000000000005B74                 call    _malloc
.text:0000000000005B79                 test    rax, rax
.text:0000000000005B7C                 jnz     short loc_5B83
.text:0000000000005B7E                 test    rbx, rbx
.text:0000000000005B81                 jnz     short loc_5B85
.text:0000000000005B83
.text:0000000000005B83 loc_5B83:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005B83                 pop     rbx
.text:0000000000005B84                 retn
.text:0000000000005B85 ; ---------------------------------------------------------------------------
.text:0000000000005B85
.text:0000000000005B85 loc_5B85:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005B85                 call    xalloc_die
.text:0000000000005B85 ; } // starts at 5B70
.text:0000000000005B85 xmalloc         endp
.text:0000000000005B85
.text:0000000000005B85 ; ---------------------------------------------------------------------------
.text:0000000000005B8A                 align 10h
.text:0000000000005B90
.text:0000000000005B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B90
.text:0000000000005B90 ; Attributes: info_from_lumina
.text:0000000000005B90
.text:0000000000005B90 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005B90                 public xnmalloc
.text:0000000000005B90 xnmalloc        proc near
.text:0000000000005B90 ; __unwind {
.text:0000000000005B90                 mov     rax, rdi
.text:0000000000005B93                 mul     rsi
.text:0000000000005B96                 mov     rdi, rax
.text:0000000000005B99                 seto    al
.text:0000000000005B9C                 test    rdi, rdi
.text:0000000000005B9F                 js      short loc_5BAB
.text:0000000000005BA1                 movzx   eax, al
.text:0000000000005BA4                 test    rax, rax
.text:0000000000005BA7                 jnz     short loc_5BAB
.text:0000000000005BA9                 jmp     short xmalloc
.text:0000000000005BAB ; ---------------------------------------------------------------------------
.text:0000000000005BAB
.text:0000000000005BAB loc_5BAB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000005BAB                                         ; xnmalloc+17↑j
.text:0000000000005BAB                 sub     rsp, 8
.text:0000000000005BAF                 call    xalloc_die
.text:0000000000005BAF ; } // starts at 5B90
.text:0000000000005BAF xnmalloc        endp
.text:0000000000005BAF
.text:0000000000005BAF ; ---------------------------------------------------------------------------
.text:0000000000005BB4                 align 20h
.text:0000000000005BC0
.text:0000000000005BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BC0
.text:0000000000005BC0
.text:0000000000005BC0                 public xcharalloc
.text:0000000000005BC0 xcharalloc      proc near
.text:0000000000005BC0 ; __unwind {
.text:0000000000005BC0                 jmp     short xmalloc
.text:0000000000005BC0 ; } // starts at 5BC0
.text:0000000000005BC0 xcharalloc      endp
.text:0000000000005BC0
.text:0000000000005BC0 ; ---------------------------------------------------------------------------
.text:0000000000005BC2                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BD0
.text:0000000000005BD0 ; Attributes: info_from_lumina
.text:0000000000005BD0
.text:0000000000005BD0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005BD0                 public xrealloc
.text:0000000000005BD0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005BD0                                         ; quotearg_n_options+182↑p ...
.text:0000000000005BD0 ; __unwind {
.text:0000000000005BD0                 test    rsi, rsi
.text:0000000000005BD3                 push    rbx
.text:0000000000005BD4                 mov     rbx, rsi
.text:0000000000005BD7                 jnz     short loc_5BDE
.text:0000000000005BD9                 test    rdi, rdi
.text:0000000000005BDC                 jnz     short loc_5BF8
.text:0000000000005BDE
.text:0000000000005BDE loc_5BDE:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000005BDE                 mov     rsi, rbx        ; size
.text:0000000000005BE1                 call    _realloc
.text:0000000000005BE6                 test    rax, rax
.text:0000000000005BE9                 jnz     short loc_5BF0
.text:0000000000005BEB                 test    rbx, rbx
.text:0000000000005BEE                 jnz     short loc_5C01
.text:0000000000005BF0
.text:0000000000005BF0 loc_5BF0:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005BF0                 pop     rbx
.text:0000000000005BF1                 retn
.text:0000000000005BF1 ; ---------------------------------------------------------------------------
.text:0000000000005BF2                 align 8
.text:0000000000005BF8
.text:0000000000005BF8 loc_5BF8:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005BF8                 call    _free
.text:0000000000005BFD                 xor     eax, eax
.text:0000000000005BFF                 pop     rbx
.text:0000000000005C00                 retn
.text:0000000000005C01 ; ---------------------------------------------------------------------------
.text:0000000000005C01
.text:0000000000005C01 loc_5C01:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005C01                 call    xalloc_die
.text:0000000000005C01 ; } // starts at 5BD0
.text:0000000000005C01 xrealloc        endp
.text:0000000000005C01
.text:0000000000005C01 ; ---------------------------------------------------------------------------
.text:0000000000005C06                 align 10h
.text:0000000000005C10
.text:0000000000005C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C10
.text:0000000000005C10 ; Attributes: info_from_lumina
.text:0000000000005C10
.text:0000000000005C10 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005C10                 public xnrealloc
.text:0000000000005C10 xnrealloc       proc near
.text:0000000000005C10 ; __unwind {
.text:0000000000005C10                 mov     rax, rsi
.text:0000000000005C13                 mul     rdx
.text:0000000000005C16                 mov     rsi, rax
.text:0000000000005C19                 seto    al
.text:0000000000005C1C                 test    rsi, rsi
.text:0000000000005C1F                 js      short loc_5C2B
.text:0000000000005C21                 movzx   eax, al
.text:0000000000005C24                 test    rax, rax
.text:0000000000005C27                 jnz     short loc_5C2B
.text:0000000000005C29                 jmp     short xrealloc
.text:0000000000005C2B ; ---------------------------------------------------------------------------
.text:0000000000005C2B
.text:0000000000005C2B loc_5C2B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000005C2B                                         ; xnrealloc+17↑j
.text:0000000000005C2B                 sub     rsp, 8
.text:0000000000005C2F                 call    xalloc_die
.text:0000000000005C2F ; } // starts at 5C10
.text:0000000000005C2F xnrealloc       endp
.text:0000000000005C2F
.text:0000000000005C2F ; ---------------------------------------------------------------------------
.text:0000000000005C34                 align 20h
.text:0000000000005C40
.text:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C40
.text:0000000000005C40 ; Attributes: info_from_lumina
.text:0000000000005C40
.text:0000000000005C40 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005C40                 public x2nrealloc
.text:0000000000005C40 x2nrealloc      proc near
.text:0000000000005C40 ; __unwind {
.text:0000000000005C40                 test    rdi, rdi
.text:0000000000005C43                 mov     r9, rdx
.text:0000000000005C46                 mov     rcx, [rsi]
.text:0000000000005C49                 jz      short loc_5C80
.text:0000000000005C4B                 xor     edx, edx
.text:0000000000005C4D                 mov     rax, 5555555555555554h
.text:0000000000005C57                 div     r9
.text:0000000000005C5A                 cmp     rax, rcx
.text:0000000000005C5D                 jbe     short loc_5C9B
.text:0000000000005C5F                 mov     rax, rcx
.text:0000000000005C62                 shr     rax, 1
.text:0000000000005C65                 lea     rcx, [rax+rcx+1]
.text:0000000000005C6A
.text:0000000000005C6A loc_5C6A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000005C6A                 mov     [rsi], rcx
.text:0000000000005C6D                 imul    rcx, r9
.text:0000000000005C71                 mov     rsi, rcx
.text:0000000000005C74                 jmp     xrealloc
.text:0000000000005C74 ; ---------------------------------------------------------------------------
.text:0000000000005C79                 align 20h
.text:0000000000005C80
.text:0000000000005C80 loc_5C80:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005C80                 test    rcx, rcx
.text:0000000000005C83                 jz      short loc_5CA8
.text:0000000000005C85
.text:0000000000005C85 loc_5C85:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005C85                 mov     rax, rcx
.text:0000000000005C88                 mul     r9
.text:0000000000005C8B                 seto    dl
.text:0000000000005C8E                 test    rax, rax
.text:0000000000005C91                 movzx   edx, dl
.text:0000000000005C94                 js      short loc_5C9B
.text:0000000000005C96                 test    rdx, rdx
.text:0000000000005C99                 jz      short loc_5C6A
.text:0000000000005C9B
.text:0000000000005C9B loc_5C9B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000005C9B                                         ; x2nrealloc+54↑j
.text:0000000000005C9B                 sub     rsp, 8
.text:0000000000005C9F                 call    xalloc_die
.text:0000000000005C9F ; ---------------------------------------------------------------------------
.text:0000000000005CA4                 align 8
.text:0000000000005CA8
.text:0000000000005CA8 loc_5CA8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005CA8                 xor     edx, edx
.text:0000000000005CAA                 mov     eax, 80h
.text:0000000000005CAF                 xor     r8d, r8d
.text:0000000000005CB2                 div     r9
.text:0000000000005CB5                 test    rax, rax
.text:0000000000005CB8                 setz    r8b
.text:0000000000005CBC                 lea     rcx, [r8+rax]
.text:0000000000005CC0                 jmp     short loc_5C85
.text:0000000000005CC0 ; } // starts at 5C40
.text:0000000000005CC0 x2nrealloc      endp
.text:0000000000005CC0
.text:0000000000005CC0 ; ---------------------------------------------------------------------------
.text:0000000000005CC2                 align 10h
.text:0000000000005CD0
.text:0000000000005CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CD0
.text:0000000000005CD0 ; Attributes: info_from_lumina
.text:0000000000005CD0
.text:0000000000005CD0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005CD0                 public x2realloc
.text:0000000000005CD0 x2realloc       proc near
.text:0000000000005CD0 ; __unwind {
.text:0000000000005CD0                 test    rdi, rdi
.text:0000000000005CD3                 mov     rax, [rsi]
.text:0000000000005CD6                 jz      short loc_5D00
.text:0000000000005CD8                 mov     rdx, 5555555555555553h
.text:0000000000005CE2                 cmp     rax, rdx
.text:0000000000005CE5                 ja      short loc_5D11
.text:0000000000005CE7                 mov     rdx, rax
.text:0000000000005CEA                 shr     rdx, 1
.text:0000000000005CED                 lea     rax, [rdx+rax+1]
.text:0000000000005CF2
.text:0000000000005CF2 loc_5CF2:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005CF2                 mov     [rsi], rax
.text:0000000000005CF5                 mov     rsi, rax
.text:0000000000005CF8                 jmp     xrealloc
.text:0000000000005CF8 ; ---------------------------------------------------------------------------
.text:0000000000005CFD                 align 20h
.text:0000000000005D00
.text:0000000000005D00 loc_5D00:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005D00                 test    rax, rax
.text:0000000000005D03                 mov     edx, 80h
.text:0000000000005D08                 cmovz   rax, rdx
.text:0000000000005D0C                 test    rax, rax
.text:0000000000005D0F                 jns     short loc_5CF2
.text:0000000000005D11
.text:0000000000005D11 loc_5D11:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005D11                 sub     rsp, 8
.text:0000000000005D15                 call    xalloc_die
.text:0000000000005D15 ; } // starts at 5CD0
.text:0000000000005D15 x2realloc       endp
.text:0000000000005D15
.text:0000000000005D15 ; ---------------------------------------------------------------------------
.text:0000000000005D1A                 align 20h
.text:0000000000005D20
.text:0000000000005D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D20
.text:0000000000005D20
.text:0000000000005D20 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005D20                 public xzalloc
.text:0000000000005D20 xzalloc         proc near
.text:0000000000005D20 ; __unwind {
.text:0000000000005D20                 push    rbx
.text:0000000000005D21                 mov     rbx, rdi
.text:0000000000005D24                 call    xmalloc
.text:0000000000005D29                 mov     rdx, rbx        ; n
.text:0000000000005D2C                 xor     esi, esi        ; c
.text:0000000000005D2E                 mov     rdi, rax        ; s
.text:0000000000005D31                 pop     rbx
.text:0000000000005D32                 jmp     _memset
.text:0000000000005D32 ; } // starts at 5D20
.text:0000000000005D32 xzalloc         endp
.text:0000000000005D32
.text:0000000000005D32 ; ---------------------------------------------------------------------------
.text:0000000000005D37                 align 20h
.text:0000000000005D40
.text:0000000000005D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D40
.text:0000000000005D40 ; Attributes: info_from_lumina
.text:0000000000005D40
.text:0000000000005D40 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005D40                 public xcalloc
.text:0000000000005D40 xcalloc         proc near
.text:0000000000005D40 ; __unwind {
.text:0000000000005D40                 mov     rax, rdi
.text:0000000000005D43                 sub     rsp, 8
.text:0000000000005D47                 mul     rsi
.text:0000000000005D4A                 seto    dl
.text:0000000000005D4D                 test    rax, rax
.text:0000000000005D50                 js      short loc_5D69
.text:0000000000005D52                 movzx   edx, dl
.text:0000000000005D55                 test    rdx, rdx
.text:0000000000005D58                 jnz     short loc_5D69
.text:0000000000005D5A                 call    _calloc
.text:0000000000005D5F                 test    rax, rax
.text:0000000000005D62                 jz      short loc_5D69
.text:0000000000005D64                 add     rsp, 8
.text:0000000000005D68                 retn
.text:0000000000005D69 ; ---------------------------------------------------------------------------
.text:0000000000005D69
.text:0000000000005D69 loc_5D69:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005D69                                         ; xcalloc+18↑j ...
.text:0000000000005D69                 call    xalloc_die
.text:0000000000005D69 ; } // starts at 5D40
.text:0000000000005D69 xcalloc         endp
.text:0000000000005D69
.text:0000000000005D69 ; ---------------------------------------------------------------------------
.text:0000000000005D6E                 align 10h
.text:0000000000005D70
.text:0000000000005D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D70
.text:0000000000005D70 ; Attributes: info_from_lumina
.text:0000000000005D70
.text:0000000000005D70 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005D70                 public xmemdup
.text:0000000000005D70 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005D70                                         ; xstrdup+11↓j
.text:0000000000005D70 ; __unwind {
.text:0000000000005D70                 push    rbp
.text:0000000000005D71                 push    rbx
.text:0000000000005D72                 mov     rbp, rdi
.text:0000000000005D75                 mov     rdi, rsi
.text:0000000000005D78                 mov     rbx, rsi
.text:0000000000005D7B                 sub     rsp, 8
.text:0000000000005D7F                 call    xmalloc
.text:0000000000005D84                 add     rsp, 8
.text:0000000000005D88                 mov     rdx, rbx        ; n
.text:0000000000005D8B                 mov     rsi, rbp        ; src
.text:0000000000005D8E                 pop     rbx
.text:0000000000005D8F                 pop     rbp
.text:0000000000005D90                 mov     rdi, rax        ; dest
.text:0000000000005D93                 jmp     _memcpy
.text:0000000000005D93 ; } // starts at 5D70
.text:0000000000005D93 xmemdup         endp
.text:0000000000005D93
.text:0000000000005D93 ; ---------------------------------------------------------------------------
.text:0000000000005D98                 align 20h
.text:0000000000005DA0
.text:0000000000005DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DA0
.text:0000000000005DA0
.text:0000000000005DA0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005DA0                 public xstrdup
.text:0000000000005DA0 xstrdup         proc near
.text:0000000000005DA0 ; __unwind {
.text:0000000000005DA0                 push    rbx
.text:0000000000005DA1                 mov     rbx, rdi
.text:0000000000005DA4                 call    _strlen
.text:0000000000005DA9                 mov     rdi, rbx        ; src
.text:0000000000005DAC                 lea     rsi, [rax+1]    ; n
.text:0000000000005DB0                 pop     rbx
.text:0000000000005DB1                 jmp     short xmemdup
.text:0000000000005DB1 ; } // starts at 5DA0
.text:0000000000005DB1 xstrdup         endp
.text:0000000000005DB1
.text:0000000000005DB1 ; ---------------------------------------------------------------------------
.text:0000000000005DB3                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DC0
.text:0000000000005DC0 ; Attributes: noreturn info_from_lumina
.text:0000000000005DC0
.text:0000000000005DC0 ; void __cdecl xalloc_die()
.text:0000000000005DC0                 public xalloc_die
.text:0000000000005DC0 xalloc_die      proc near               ; CODE XREF: print_line:loc_22B8↑p
.text:0000000000005DC0                                         ; quotearg_n_options:loc_4D96↑p ...
.text:0000000000005DC0 ; __unwind {
.text:0000000000005DC0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005DC7                 sub     rsp, 8
.text:0000000000005DCB                 mov     edx, 5          ; category
.text:0000000000005DD0                 xor     edi, edi        ; domainname
.text:0000000000005DD2                 call    _dcgettext
.text:0000000000005DD7                 mov     edi, cs:exit_failure ; status
.text:0000000000005DDD                 lea     rdx, format+4   ; format
.text:0000000000005DE4                 mov     rcx, rax
.text:0000000000005DE7                 xor     esi, esi        ; errnum
.text:0000000000005DE9                 xor     eax, eax
.text:0000000000005DEB                 call    _error
.text:0000000000005DF0                 call    _abort
.text:0000000000005DF0 ; } // starts at 5DC0
.text:0000000000005DF0 xalloc_die      endp
.text:0000000000005DF0
.text:0000000000005DF0 ; ---------------------------------------------------------------------------
.text:0000000000005DF5                 align 20h
.text:0000000000005E00
.text:0000000000005E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E00
.text:0000000000005E00 ; Attributes: info_from_lumina
.text:0000000000005E00
.text:0000000000005E00 ; int gzprintf(gzFile_0 file, const char *format, ...)
.text:0000000000005E00                 public gzprintf
.text:0000000000005E00 gzprintf        proc near               ; CODE XREF: print_line+13D↑p
.text:0000000000005E00
.text:0000000000005E00 var_D8          = dword ptr -0D8h
.text:0000000000005E00 var_D4          = dword ptr -0D4h
.text:0000000000005E00 var_D0          = qword ptr -0D0h
.text:0000000000005E00 var_C8          = qword ptr -0C8h
.text:0000000000005E00 var_C0          = qword ptr -0C0h
.text:0000000000005E00 var_B8          = byte ptr -0B8h
.text:0000000000005E00 var_A8          = qword ptr -0A8h
.text:0000000000005E00 var_A0          = qword ptr -0A0h
.text:0000000000005E00 var_98          = qword ptr -98h
.text:0000000000005E00 var_90          = qword ptr -90h
.text:0000000000005E00 var_88          = xmmword ptr -88h
.text:0000000000005E00 var_78          = xmmword ptr -78h
.text:0000000000005E00 var_68          = xmmword ptr -68h
.text:0000000000005E00 var_58          = xmmword ptr -58h
.text:0000000000005E00 var_48          = xmmword ptr -48h
.text:0000000000005E00 var_38          = xmmword ptr -38h
.text:0000000000005E00 var_28          = xmmword ptr -28h
.text:0000000000005E00 var_18          = xmmword ptr -18h
.text:0000000000005E00 arg_0           = byte ptr  8
.text:0000000000005E00
.text:0000000000005E00 ; __unwind {
.text:0000000000005E00                 sub     rsp, 0D8h
.text:0000000000005E07                 test    al, al
.text:0000000000005E09                 mov     [rsp+0D8h+var_A8], rdx
.text:0000000000005E0E                 mov     [rsp+0D8h+var_A0], rcx
.text:0000000000005E13                 mov     [rsp+0D8h+var_98], r8
.text:0000000000005E18                 mov     [rsp+0D8h+var_90], r9
.text:0000000000005E1D                 jz      short loc_5E56
.text:0000000000005E1F                 movaps  [rsp+0D8h+var_88], xmm0
.text:0000000000005E24                 movaps  [rsp+0D8h+var_78], xmm1
.text:0000000000005E29                 movaps  [rsp+0D8h+var_68], xmm2
.text:0000000000005E2E                 movaps  [rsp+0D8h+var_58], xmm3
.text:0000000000005E36                 movaps  [rsp+0D8h+var_48], xmm4
.text:0000000000005E3E                 movaps  [rsp+0D8h+var_38], xmm5
.text:0000000000005E46                 movaps  [rsp+0D8h+var_28], xmm6
.text:0000000000005E4E                 movaps  [rsp+0D8h+var_18], xmm7
.text:0000000000005E56
.text:0000000000005E56 loc_5E56:                               ; CODE XREF: gzprintf+1D↑j
.text:0000000000005E56                 mov     rax, fs:28h
.text:0000000000005E5F                 mov     [rsp+0D8h+var_C0], rax
.text:0000000000005E64                 xor     eax, eax
.text:0000000000005E66                 lea     rax, [rsp+0D8h+arg_0]
.text:0000000000005E6E                 mov     rdx, rsp
.text:0000000000005E71                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000005E76                 lea     rax, [rsp+0D8h+var_B8]
.text:0000000000005E7B                 mov     [rsp+0D8h+var_D8], 10h
.text:0000000000005E82                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:0000000000005E8A                 mov     [rsp+0D8h+var_C8], rax
.text:0000000000005E8F                 call    u16_u16_vasprintf
.text:0000000000005E94                 mov     rcx, [rsp+0D8h+var_C0]
.text:0000000000005E99                 xor     rcx, fs:28h
.text:0000000000005EA2                 jnz     short loc_5EAC
.text:0000000000005EA4                 add     rsp, 0D8h
.text:0000000000005EAB                 retn
.text:0000000000005EAC ; ---------------------------------------------------------------------------
.text:0000000000005EAC
.text:0000000000005EAC loc_5EAC:                               ; CODE XREF: gzprintf+A2↑j
.text:0000000000005EAC                 call    ___stack_chk_fail
.text:0000000000005EAC ; } // starts at 5E00
.text:0000000000005EAC gzprintf        endp
.text:0000000000005EAC
.text:0000000000005EAC ; ---------------------------------------------------------------------------
.text:0000000000005EB1                 align 20h
.text:0000000000005EC0
.text:0000000000005EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EC0
.text:0000000000005EC0 ; Attributes: info_from_lumina
.text:0000000000005EC0
.text:0000000000005EC0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005EC0                 public rpl_mbrtowc
.text:0000000000005EC0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005EC0
.text:0000000000005EC0 pwc             = dword ptr -34h
.text:0000000000005EC0 var_30          = qword ptr -30h
.text:0000000000005EC0
.text:0000000000005EC0 ; __unwind {
.text:0000000000005EC0                 push    r13
.text:0000000000005EC2                 push    r12
.text:0000000000005EC4                 mov     r13, rsi
.text:0000000000005EC7                 push    rbp
.text:0000000000005EC8                 push    rbx
.text:0000000000005EC9                 mov     rbx, rdi
.text:0000000000005ECC                 mov     r12, rdx
.text:0000000000005ECF                 sub     rsp, 18h
.text:0000000000005ED3                 mov     rax, fs:28h
.text:0000000000005EDC                 mov     [rsp+38h+var_30], rax
.text:0000000000005EE1                 xor     eax, eax
.text:0000000000005EE3                 lea     rax, [rsp+38h+pwc]
.text:0000000000005EE8                 test    rdi, rdi
.text:0000000000005EEB                 cmovz   rbx, rax
.text:0000000000005EEF                 mov     rdi, rbx        ; pwc
.text:0000000000005EF2                 call    _mbrtowc
.text:0000000000005EF7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000005EFB                 mov     rbp, rax
.text:0000000000005EFE                 jbe     short loc_5F20
.text:0000000000005F00                 test    r12, r12
.text:0000000000005F03                 jz      short loc_5F20
.text:0000000000005F05                 xor     edi, edi
.text:0000000000005F07                 call    hard_locale
.text:0000000000005F0C                 test    al, al
.text:0000000000005F0E                 jnz     short loc_5F20
.text:0000000000005F10                 movzx   eax, byte ptr [r13+0]
.text:0000000000005F15                 mov     ebp, 1
.text:0000000000005F1A                 mov     [rbx], eax
.text:0000000000005F1C                 nop     dword ptr [rax+00h]
.text:0000000000005F20
.text:0000000000005F20 loc_5F20:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005F20                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005F20                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005F25                 xor     rdx, fs:28h
.text:0000000000005F2E                 mov     rax, rbp
.text:0000000000005F31                 jnz     short loc_5F3E
.text:0000000000005F33                 add     rsp, 18h
.text:0000000000005F37                 pop     rbx
.text:0000000000005F38                 pop     rbp
.text:0000000000005F39                 pop     r12
.text:0000000000005F3B                 pop     r13
.text:0000000000005F3D                 retn
.text:0000000000005F3E ; ---------------------------------------------------------------------------
.text:0000000000005F3E
.text:0000000000005F3E loc_5F3E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000005F3E                 call    ___stack_chk_fail
.text:0000000000005F3E ; } // starts at 5EC0
.text:0000000000005F3E rpl_mbrtowc     endp
.text:0000000000005F3E
.text:0000000000005F3E ; ---------------------------------------------------------------------------
.text:0000000000005F43                 align 10h
.text:0000000000005F50
.text:0000000000005F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F50
.text:0000000000005F50
.text:0000000000005F50                 public extract_trimmed_name
.text:0000000000005F50 extract_trimmed_name proc near          ; CODE XREF: who+220↑p
.text:0000000000005F50 ; __unwind {
.text:0000000000005F50                 push    rbp
.text:0000000000005F51                 push    rbx
.text:0000000000005F52                 mov     rbp, rdi
.text:0000000000005F55                 mov     edi, 21h ; '!'
.text:0000000000005F5A                 sub     rsp, 8
.text:0000000000005F5E                 call    xmalloc
.text:0000000000005F63                 lea     rsi, [rbp+2Ch]  ; src
.text:0000000000005F67                 mov     rbx, rax
.text:0000000000005F6A                 mov     edx, 20h ; ' '  ; n
.text:0000000000005F6F                 mov     rdi, rax        ; dest
.text:0000000000005F72                 call    _strncpy
.text:0000000000005F77                 mov     rdi, rbx        ; s
.text:0000000000005F7A                 mov     byte ptr [rbx+20h], 0
.text:0000000000005F7E                 call    _strlen
.text:0000000000005F83                 add     rax, rbx
.text:0000000000005F86                 cmp     rbx, rax
.text:0000000000005F89                 jnb     short loc_5F91
.text:0000000000005F8B
.text:0000000000005F8B loc_5F8B:                               ; CODE XREF: extract_trimmed_name+5A↓j
.text:0000000000005F8B                 cmp     byte ptr [rax-1], 20h ; ' '
.text:0000000000005F8F                 jz      short loc_5FA0
.text:0000000000005F91
.text:0000000000005F91 loc_5F91:                               ; CODE XREF: extract_trimmed_name+39↑j
.text:0000000000005F91                                         ; extract_trimmed_name+5C↓j
.text:0000000000005F91                 add     rsp, 8
.text:0000000000005F95                 mov     rax, rbx
.text:0000000000005F98                 pop     rbx
.text:0000000000005F99                 pop     rbp
.text:0000000000005F9A                 retn
.text:0000000000005F9A ; ---------------------------------------------------------------------------
.text:0000000000005F9B                 align 20h
.text:0000000000005FA0
.text:0000000000005FA0 loc_5FA0:                               ; CODE XREF: extract_trimmed_name+3F↑j
.text:0000000000005FA0                 sub     rax, 1
.text:0000000000005FA4                 mov     byte ptr [rax], 0
.text:0000000000005FA7                 cmp     rbx, rax
.text:0000000000005FAA                 jnz     short loc_5F8B
.text:0000000000005FAC                 jmp     short loc_5F91
.text:0000000000005FAC ; } // starts at 5F50
.text:0000000000005FAC extract_trimmed_name endp
.text:0000000000005FAC
.text:0000000000005FAC ; ---------------------------------------------------------------------------
.text:0000000000005FAE                 align 10h
.text:0000000000005FB0
.text:0000000000005FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FB0
.text:0000000000005FB0
.text:0000000000005FB0                 public read_utmp
.text:0000000000005FB0 read_utmp       proc near               ; CODE XREF: who+2D↑p
.text:0000000000005FB0
.text:0000000000005FB0 var_48          = qword ptr -48h
.text:0000000000005FB0 var_40          = qword ptr -40h
.text:0000000000005FB0
.text:0000000000005FB0 ; __unwind {
.text:0000000000005FB0                 push    r15
.text:0000000000005FB2                 push    r14
.text:0000000000005FB4                 xor     r14d, r14d
.text:0000000000005FB7                 push    r13
.text:0000000000005FB9                 mov     r13d, ecx
.text:0000000000005FBC                 push    r12
.text:0000000000005FBE                 push    rbp
.text:0000000000005FBF                 push    rbx
.text:0000000000005FC0                 mov     r12d, r13d
.text:0000000000005FC3                 xor     ebx, ebx
.text:0000000000005FC5                 xor     ebp, ebp
.text:0000000000005FC7                 and     r12d, 2
.text:0000000000005FCB                 sub     rsp, 18h
.text:0000000000005FCF                 and     r13d, 1
.text:0000000000005FD3                 mov     [rsp+48h+var_48], rsi
.text:0000000000005FD7                 mov     [rsp+48h+var_40], rdx
.text:0000000000005FDC                 call    _utmpxname
.text:0000000000005FE1                 call    _setutxent
.text:0000000000005FE6
.text:0000000000005FE6 loc_5FE6:                               ; CODE XREF: read_utmp+58↓j
.text:0000000000005FE6                                         ; read_utmp+10C↓j
.text:0000000000005FE6                 call    _getutxent
.text:0000000000005FEB                 test    rax, rax
.text:0000000000005FEE                 mov     r15, rax
.text:0000000000005FF1                 jz      short loc_6061
.text:0000000000005FF3
.text:0000000000005FF3 loc_5FF3:                               ; CODE XREF: read_utmp+AF↓j
.text:0000000000005FF3                 cmp     word ptr [r15], 7
.text:0000000000005FF8                 jnz     short loc_6005
.text:0000000000005FFA                 cmp     byte ptr [r15+2Ch], 0
.text:0000000000005FFF                 jnz     loc_6090
.text:0000000000006005
.text:0000000000006005 loc_6005:                               ; CODE XREF: read_utmp+48↑j
.text:0000000000006005                 test    r12d, r12d
.text:0000000000006008                 jnz     short loc_5FE6
.text:000000000000600A
.text:000000000000600A loc_600A:                               ; CODE XREF: read_utmp+E6↓j
.text:000000000000600A                                         ; read_utmp+EF↓j ...
.text:000000000000600A                 cmp     rbp, rbx
.text:000000000000600D                 jz      loc_60D0
.text:0000000000006013
.text:0000000000006013 loc_6013:                               ; CODE XREF: read_utmp+115↓j
.text:0000000000006013                                         ; read_utmp+153↓j
.text:0000000000006013                 lea     rax, [rbx+rbx*2]
.text:0000000000006017                 mov     rdx, [r15]
.text:000000000000601A                 mov     rsi, r15
.text:000000000000601D                 add     rbx, 1
.text:0000000000006021                 shl     rax, 7
.text:0000000000006025                 add     rax, r14
.text:0000000000006028                 mov     [rax], rdx
.text:000000000000602B                 lea     rdi, [rax+8]
.text:000000000000602F                 mov     rdx, [r15+178h]
.text:0000000000006036                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000000603A                 mov     [rax+178h], rdx
.text:0000000000006041                 sub     rax, rdi
.text:0000000000006044                 sub     rsi, rax
.text:0000000000006047                 add     eax, 180h
.text:000000000000604C                 shr     eax, 3
.text:000000000000604F                 mov     ecx, eax
.text:0000000000006051                 rep movsq
.text:0000000000006054                 call    _getutxent
.text:0000000000006059                 test    rax, rax
.text:000000000000605C                 mov     r15, rax
.text:000000000000605F                 jnz     short loc_5FF3
.text:0000000000006061
.text:0000000000006061 loc_6061:                               ; CODE XREF: read_utmp+41↑j
.text:0000000000006061                 call    _endutxent
.text:0000000000006066                 mov     rax, [rsp+48h+var_48]
.text:000000000000606A                 mov     [rax], rbx
.text:000000000000606D                 mov     rax, [rsp+48h+var_40]
.text:0000000000006072                 mov     [rax], r14
.text:0000000000006075                 add     rsp, 18h
.text:0000000000006079                 xor     eax, eax
.text:000000000000607B                 pop     rbx
.text:000000000000607C                 pop     rbp
.text:000000000000607D                 pop     r12
.text:000000000000607F                 pop     r13
.text:0000000000006081                 pop     r14
.text:0000000000006083                 pop     r15
.text:0000000000006085                 retn
.text:0000000000006085 ; ---------------------------------------------------------------------------
.text:0000000000006086                 align 10h
.text:0000000000006090
.text:0000000000006090 loc_6090:                               ; CODE XREF: read_utmp+4F↑j
.text:0000000000006090                 mov     edi, [r15+4]    ; pid
.text:0000000000006094                 test    edi, edi
.text:0000000000006096                 jle     loc_600A
.text:000000000000609C                 test    r13b, r13b
.text:000000000000609F                 jz      loc_600A
.text:00000000000060A5                 xor     esi, esi        ; sig
.text:00000000000060A7                 call    _kill
.text:00000000000060AC                 test    eax, eax
.text:00000000000060AE                 jns     loc_600A
.text:00000000000060B4                 call    ___errno_location
.text:00000000000060B9                 cmp     dword ptr [rax], 3
.text:00000000000060BC                 jz      loc_5FE6
.text:00000000000060C2                 cmp     rbp, rbx
.text:00000000000060C5                 jnz     loc_6013
.text:00000000000060CB                 nop     dword ptr [rax+rax+00h]
.text:00000000000060D0
.text:00000000000060D0 loc_60D0:                               ; CODE XREF: read_utmp+5D↑j
.text:00000000000060D0                 test    r14, r14
.text:00000000000060D3                 jz      short loc_6108
.text:00000000000060D5                 mov     rax, 38E38E38E38E37h
.text:00000000000060DF                 cmp     rbp, rax
.text:00000000000060E2                 ja      short loc_612D
.text:00000000000060E4                 mov     rax, rbp
.text:00000000000060E7                 shr     rax, 1
.text:00000000000060EA                 lea     rbp, [rbp+rax+1]
.text:00000000000060EF
.text:00000000000060EF loc_60EF:                               ; CODE XREF: read_utmp+17B↓j
.text:00000000000060EF                 lea     rsi, [rbp+rbp*2+0]
.text:00000000000060F4                 mov     rdi, r14
.text:00000000000060F7                 shl     rsi, 7
.text:00000000000060FB                 call    xrealloc
.text:0000000000006100                 mov     r14, rax
.text:0000000000006103                 jmp     loc_6013
.text:0000000000006108 ; ---------------------------------------------------------------------------
.text:0000000000006108
.text:0000000000006108 loc_6108:                               ; CODE XREF: read_utmp+123↑j
.text:0000000000006108                 test    rbp, rbp
.text:000000000000610B                 mov     eax, 1
.text:0000000000006110                 mov     edx, 180h
.text:0000000000006115                 cmovz   rbp, rax
.text:0000000000006119                 mov     rax, rdx
.text:000000000000611C                 xor     esi, esi
.text:000000000000611E                 mul     rbp
.text:0000000000006121                 jo      short loc_6132
.text:0000000000006123
.text:0000000000006123 loc_6123:                               ; CODE XREF: read_utmp+187↓j
.text:0000000000006123                 test    rax, rax
.text:0000000000006126                 js      short loc_612D
.text:0000000000006128                 test    rsi, rsi
.text:000000000000612B                 jz      short loc_60EF
.text:000000000000612D
.text:000000000000612D loc_612D:                               ; CODE XREF: read_utmp+132↑j
.text:000000000000612D                                         ; read_utmp+176↑j
.text:000000000000612D                 call    xalloc_die
.text:0000000000006132 ; ---------------------------------------------------------------------------
.text:0000000000006132
.text:0000000000006132 loc_6132:                               ; CODE XREF: read_utmp+171↑j
.text:0000000000006132                 mov     esi, 1
.text:0000000000006137                 jmp     short loc_6123
.text:0000000000006137 ; } // starts at 5FB0
.text:0000000000006137 read_utmp       endp
.text:0000000000006137
.text:0000000000006137 ; ---------------------------------------------------------------------------
.text:0000000000006139                 align 20h
.text:0000000000006140
.text:0000000000006140 ; =============== S U B R O U T I N E =======================================
.text:0000000000006140
.text:0000000000006140 ; Attributes: info_from_lumina
.text:0000000000006140
.text:0000000000006140                 public u16_u16_vasprintf
.text:0000000000006140 u16_u16_vasprintf proc near             ; CODE XREF: gzprintf+8F↑p
.text:0000000000006140
.text:0000000000006140 var_18          = qword ptr -18h
.text:0000000000006140 var_10          = qword ptr -10h
.text:0000000000006140
.text:0000000000006140 ; __unwind {
.text:0000000000006140                 push    rbx
.text:0000000000006141                 mov     rax, rsi
.text:0000000000006144                 mov     rbx, rdi
.text:0000000000006147                 xor     edi, edi
.text:0000000000006149                 sub     rsp, 10h
.text:000000000000614D                 mov     rcx, fs:28h
.text:0000000000006156                 mov     [rsp+18h+var_10], rcx
.text:000000000000615B                 xor     ecx, ecx
.text:000000000000615D                 mov     rsi, rsp
.text:0000000000006160                 mov     rcx, rdx
.text:0000000000006163                 mov     rdx, rax
.text:0000000000006166                 call    vasnprintf
.text:000000000000616B                 test    rax, rax
.text:000000000000616E                 jz      short loc_61B2
.text:0000000000006170                 mov     rdx, [rsp+18h+var_18]
.text:0000000000006174                 cmp     rdx, 7FFFFFFFh
.text:000000000000617B                 ja      short loc_6198
.text:000000000000617D                 mov     [rbx], rax
.text:0000000000006180                 mov     eax, edx
.text:0000000000006182
.text:0000000000006182 loc_6182:                               ; CODE XREF: u16_u16_vasprintf+70↓j
.text:0000000000006182                                         ; u16_u16_vasprintf+77↓j
.text:0000000000006182                 mov     rbx, [rsp+18h+var_10]
.text:0000000000006187                 xor     rbx, fs:28h
.text:0000000000006190                 jnz     short loc_61B9
.text:0000000000006192                 add     rsp, 10h
.text:0000000000006196                 pop     rbx
.text:0000000000006197                 retn
.text:0000000000006198 ; ---------------------------------------------------------------------------
.text:0000000000006198
.text:0000000000006198 loc_6198:                               ; CODE XREF: u16_u16_vasprintf+3B↑j
.text:0000000000006198                 mov     rdi, rax        ; ptr
.text:000000000000619B                 call    _free
.text:00000000000061A0                 call    ___errno_location
.text:00000000000061A5                 mov     dword ptr [rax], 4Bh ; 'K'
.text:00000000000061AB                 mov     eax, 0FFFFFFFFh
.text:00000000000061B0                 jmp     short loc_6182
.text:00000000000061B2 ; ---------------------------------------------------------------------------
.text:00000000000061B2
.text:00000000000061B2 loc_61B2:                               ; CODE XREF: u16_u16_vasprintf+2E↑j
.text:00000000000061B2                 mov     eax, 0FFFFFFFFh
.text:00000000000061B7                 jmp     short loc_6182
.text:00000000000061B9 ; ---------------------------------------------------------------------------
.text:00000000000061B9
.text:00000000000061B9 loc_61B9:                               ; CODE XREF: u16_u16_vasprintf+50↑j
.text:00000000000061B9                 call    ___stack_chk_fail
.text:00000000000061B9 ; } // starts at 6140
.text:00000000000061B9 u16_u16_vasprintf endp
.text:00000000000061B9
.text:00000000000061B9 ; ---------------------------------------------------------------------------
.text:00000000000061BE                 align 20h
.text:00000000000061C0
.text:00000000000061C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061C0
.text:00000000000061C0 ; Attributes: info_from_lumina
.text:00000000000061C0
.text:00000000000061C0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000061C0                 public close_stream
.text:00000000000061C0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000061C0                                         ; close_stdout+33↑p
.text:00000000000061C0 ; __unwind {
.text:00000000000061C0                 push    r12
.text:00000000000061C2                 push    rbp
.text:00000000000061C3                 mov     rbp, rdi
.text:00000000000061C6                 push    rbx
.text:00000000000061C7                 call    ___fpending
.text:00000000000061CC                 mov     ebx, [rbp+0]
.text:00000000000061CF                 mov     rdi, rbp        ; stream
.text:00000000000061D2                 mov     r12, rax
.text:00000000000061D5                 call    rpl_fclose
.text:00000000000061DA                 and     ebx, 20h
.text:00000000000061DD                 test    ebx, ebx
.text:00000000000061DF                 jnz     short loc_61F8
.text:00000000000061E1                 test    eax, eax
.text:00000000000061E3                 jz      short loc_61EF
.text:00000000000061E5                 test    r12, r12
.text:00000000000061E8                 mov     eax, 0FFFFFFFFh
.text:00000000000061ED                 jz      short loc_6228
.text:00000000000061EF
.text:00000000000061EF loc_61EF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000061EF                 pop     rbx
.text:00000000000061F0                 pop     rbp
.text:00000000000061F1                 pop     r12
.text:00000000000061F3                 retn
.text:00000000000061F3 ; ---------------------------------------------------------------------------
.text:00000000000061F4                 align 8
.text:00000000000061F8
.text:00000000000061F8 loc_61F8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000061F8                 test    eax, eax
.text:00000000000061FA                 jnz     short loc_6218
.text:00000000000061FC                 call    ___errno_location
.text:0000000000006201                 mov     dword ptr [rax], 0
.text:0000000000006207                 mov     eax, 0FFFFFFFFh
.text:000000000000620C                 pop     rbx
.text:000000000000620D                 pop     rbp
.text:000000000000620E                 pop     r12
.text:0000000000006210                 retn
.text:0000000000006210 ; ---------------------------------------------------------------------------
.text:0000000000006211                 align 8
.text:0000000000006218
.text:0000000000006218 loc_6218:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006218                 pop     rbx
.text:0000000000006219                 mov     eax, 0FFFFFFFFh
.text:000000000000621E                 pop     rbp
.text:000000000000621F                 pop     r12
.text:0000000000006221                 retn
.text:0000000000006221 ; ---------------------------------------------------------------------------
.text:0000000000006222                 align 8
.text:0000000000006228
.text:0000000000006228 loc_6228:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006228                 call    ___errno_location
.text:000000000000622D                 cmp     dword ptr [rax], 9
.text:0000000000006230                 pop     rbx
.text:0000000000006231                 pop     rbp
.text:0000000000006232                 pop     r12
.text:0000000000006234                 setnz   al
.text:0000000000006237                 movzx   eax, al
.text:000000000000623A                 neg     eax
.text:000000000000623C                 retn
.text:000000000000623C ; } // starts at 61C0
.text:000000000000623C close_stream    endp
.text:000000000000623C
.text:000000000000623C ; ---------------------------------------------------------------------------
.text:000000000000623D                 align 20h
.text:0000000000006240
.text:0000000000006240 ; =============== S U B R O U T I N E =======================================
.text:0000000000006240
.text:0000000000006240
.text:0000000000006240                 public locale_charset
.text:0000000000006240 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000006240 ; __unwind {
.text:0000000000006240                 sub     rsp, 8
.text:0000000000006244                 mov     edi, 0Eh        ; item
.text:0000000000006249                 call    _nl_langinfo
.text:000000000000624E                 test    rax, rax
.text:0000000000006251                 jz      short loc_6270
.text:0000000000006253                 cmp     byte ptr [rax], 0
.text:0000000000006256                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000625D                 cmovz   rax, rdx
.text:0000000000006261                 add     rsp, 8
.text:0000000000006265                 retn
.text:0000000000006265 ; ---------------------------------------------------------------------------
.text:0000000000006266                 align 10h
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000006270                 lea     rax, aAscii     ; "ASCII"
.text:0000000000006277                 add     rsp, 8
.text:000000000000627B                 retn
.text:000000000000627B ; } // starts at 6240
.text:000000000000627B locale_charset  endp
.text:000000000000627B
.text:000000000000627B ; ---------------------------------------------------------------------------
.text:000000000000627C                 align 20h
.text:0000000000006280
.text:0000000000006280 ; =============== S U B R O U T I N E =======================================
.text:0000000000006280
.text:0000000000006280 ; Attributes: info_from_lumina
.text:0000000000006280
.text:0000000000006280 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006280                 public rpl_fclose
.text:0000000000006280 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000006280 ; __unwind {
.text:0000000000006280                 push    r12
.text:0000000000006282                 push    rbp
.text:0000000000006283                 push    rbx
.text:0000000000006284                 mov     rbx, rdi
.text:0000000000006287                 call    _fileno
.text:000000000000628C                 test    eax, eax
.text:000000000000628E                 mov     rdi, rbx        ; fp
.text:0000000000006291                 js      short loc_62E7
.text:0000000000006293                 call    ___freading
.text:0000000000006298                 test    eax, eax
.text:000000000000629A                 jnz     short loc_62C8
.text:000000000000629C
.text:000000000000629C loc_629C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000629C                 mov     rdi, rbx        ; stream
.text:000000000000629F                 call    rpl_fflush
.text:00000000000062A4                 test    eax, eax
.text:00000000000062A6                 jz      short loc_62E4
.text:00000000000062A8                 call    ___errno_location
.text:00000000000062AD                 mov     r12d, [rax]
.text:00000000000062B0                 mov     rdi, rbx        ; stream
.text:00000000000062B3                 mov     rbp, rax
.text:00000000000062B6                 call    _fclose
.text:00000000000062BB                 test    r12d, r12d
.text:00000000000062BE                 jnz     short loc_62F0
.text:00000000000062C0
.text:00000000000062C0 loc_62C0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000062C0                 pop     rbx
.text:00000000000062C1                 pop     rbp
.text:00000000000062C2                 pop     r12
.text:00000000000062C4                 retn
.text:00000000000062C4 ; ---------------------------------------------------------------------------
.text:00000000000062C5                 align 8
.text:00000000000062C8
.text:00000000000062C8 loc_62C8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000062C8                 mov     rdi, rbx        ; stream
.text:00000000000062CB                 call    _fileno
.text:00000000000062D0                 xor     esi, esi        ; offset
.text:00000000000062D2                 mov     edx, 1          ; whence
.text:00000000000062D7                 mov     edi, eax        ; fd
.text:00000000000062D9                 call    _lseek
.text:00000000000062DE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000062E2                 jnz     short loc_629C
.text:00000000000062E4
.text:00000000000062E4 loc_62E4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000062E4                 mov     rdi, rbx        ; stream
.text:00000000000062E7
.text:00000000000062E7 loc_62E7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000062E7                 pop     rbx
.text:00000000000062E8                 pop     rbp
.text:00000000000062E9                 pop     r12
.text:00000000000062EB                 jmp     _fclose
.text:00000000000062F0 ; ---------------------------------------------------------------------------
.text:00000000000062F0
.text:00000000000062F0 loc_62F0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000062F0                 mov     [rbp+0], r12d
.text:00000000000062F4                 mov     eax, 0FFFFFFFFh
.text:00000000000062F9                 jmp     short loc_62C0
.text:00000000000062F9 ; } // starts at 6280
.text:00000000000062F9 rpl_fclose      endp
.text:00000000000062F9
.text:00000000000062F9 ; ---------------------------------------------------------------------------
.text:00000000000062FB                 align 20h
.text:0000000000006300
.text:0000000000006300 ; =============== S U B R O U T I N E =======================================
.text:0000000000006300
.text:0000000000006300 ; Attributes: info_from_lumina
.text:0000000000006300
.text:0000000000006300 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000006300                 public rpl_fflush
.text:0000000000006300 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000006300 ; __unwind {
.text:0000000000006300                 test    rdi, rdi
.text:0000000000006303                 push    rbx
.text:0000000000006304                 mov     rbx, rdi
.text:0000000000006307                 jz      short loc_631A
.text:0000000000006309                 call    ___freading
.text:000000000000630E                 test    eax, eax
.text:0000000000006310                 jz      short loc_631A
.text:0000000000006312                 test    dword ptr [rbx], 100h
.text:0000000000006318                 jnz     short loc_6328
.text:000000000000631A
.text:000000000000631A loc_631A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000631A                                         ; rpl_fflush+10↑j
.text:000000000000631A                 mov     rdi, rbx        ; stream
.text:000000000000631D                 pop     rbx
.text:000000000000631E                 jmp     _fflush
.text:000000000000631E ; ---------------------------------------------------------------------------
.text:0000000000006323                 align 8
.text:0000000000006328
.text:0000000000006328 loc_6328:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006328                 mov     rdi, rbx
.text:000000000000632B                 mov     edx, 1
.text:0000000000006330                 xor     esi, esi
.text:0000000000006332                 call    rpl_fseeko
.text:0000000000006337                 mov     rdi, rbx        ; stream
.text:000000000000633A                 pop     rbx
.text:000000000000633B                 jmp     _fflush
.text:000000000000633B ; } // starts at 6300
.text:000000000000633B rpl_fflush      endp
.text:000000000000633B
.text:0000000000006340
.text:0000000000006340 ; =============== S U B R O U T I N E =======================================
.text:0000000000006340
.text:0000000000006340 ; Attributes: info_from_lumina
.text:0000000000006340
.text:0000000000006340 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006340                 public rpl_fseeko
.text:0000000000006340 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006340 ; __unwind {
.text:0000000000006340                 mov     rax, [rdi+8]
.text:0000000000006344                 cmp     [rdi+10h], rax
.text:0000000000006348                 jz      short loc_6350
.text:000000000000634A
.text:000000000000634A loc_634A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000634A                                         ; rpl_fseeko+1F↓j
.text:000000000000634A                 jmp     _fseeko
.text:000000000000634A ; ---------------------------------------------------------------------------
.text:000000000000634F                 align 10h
.text:0000000000006350
.text:0000000000006350 loc_6350:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006350                 mov     rax, [rdi+20h]
.text:0000000000006354                 cmp     [rdi+28h], rax
.text:0000000000006358                 jnz     short loc_634A
.text:000000000000635A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000635F                 jnz     short loc_634A
.text:0000000000006361                 push    r12
.text:0000000000006363                 push    rbp
.text:0000000000006364                 mov     r12d, edx
.text:0000000000006367                 push    rbx
.text:0000000000006368                 mov     rbp, rsi
.text:000000000000636B                 mov     rbx, rdi
.text:000000000000636E                 call    _fileno
.text:0000000000006373                 mov     edx, r12d       ; whence
.text:0000000000006376                 mov     rsi, rbp        ; offset
.text:0000000000006379                 mov     edi, eax        ; fd
.text:000000000000637B                 call    _lseek
.text:0000000000006380                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006384                 jz      short loc_6392
.text:0000000000006386                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006389                 mov     [rbx+90h], rax
.text:0000000000006390                 xor     eax, eax
.text:0000000000006392
.text:0000000000006392 loc_6392:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006392                 pop     rbx
.text:0000000000006393                 pop     rbp
.text:0000000000006394                 pop     r12
.text:0000000000006396                 retn
.text:0000000000006396 ; } // starts at 6340
.text:0000000000006396 rpl_fseeko      endp
.text:0000000000006396
.text:0000000000006396 ; ---------------------------------------------------------------------------
.text:0000000000006397                 align 20h
.text:00000000000063A0
.text:00000000000063A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063A0
.text:00000000000063A0 ; Attributes: bp-based frame
.text:00000000000063A0
.text:00000000000063A0                 public vasnprintf
.text:00000000000063A0 vasnprintf      proc near               ; CODE XREF: u16_u16_vasprintf+26↑p
.text:00000000000063A0
.text:00000000000063A0 var_450         = tbyte ptr -450h
.text:00000000000063A0 var_440         = tbyte ptr -440h
.text:00000000000063A0 var_430         = qword ptr -430h
.text:00000000000063A0 var_421         = byte ptr -421h
.text:00000000000063A0 ptr             = qword ptr -420h
.text:00000000000063A0 var_418         = qword ptr -418h
.text:00000000000063A0 var_410         = qword ptr -410h
.text:00000000000063A0 var_408         = qword ptr -408h
.text:00000000000063A0 var_400         = qword ptr -400h
.text:00000000000063A0 var_3F8         = qword ptr -3F8h
.text:00000000000063A0 var_3F0         = qword ptr -3F0h
.text:00000000000063A0 src             = qword ptr -3E8h
.text:00000000000063A0 var_3E0         = qword ptr -3E0h
.text:00000000000063A0 var_3D8         = qword ptr -3D8h
.text:00000000000063A0 var_3D0         = qword ptr -3D0h
.text:00000000000063A0 n               = qword ptr -3C8h
.text:00000000000063A0 var_3BC         = dword ptr -3BCh
.text:00000000000063A0 var_3B8         = dword ptr -3B8h
.text:00000000000063A0 var_3B4         = dword ptr -3B4h
.text:00000000000063A0 var_3B0         = byte ptr -3B0h
.text:00000000000063A0 var_3A8         = qword ptr -3A8h
.text:00000000000063A0 var_2C0         = qword ptr -2C0h
.text:00000000000063A0 var_2B8         = qword ptr -2B8h
.text:00000000000063A0 var_2B0         = qword ptr -2B0h
.text:00000000000063A0 var_2A8         = qword ptr -2A8h
.text:00000000000063A0 var_38          = qword ptr -38h
.text:00000000000063A0
.text:00000000000063A0 ; __unwind {
.text:00000000000063A0                 push    rbp
.text:00000000000063A1                 mov     rbp, rsp
.text:00000000000063A4                 push    r15
.text:00000000000063A6                 push    r14
.text:00000000000063A8                 push    r13
.text:00000000000063AA                 push    r12
.text:00000000000063AC                 lea     r14, [rbp+var_3B0]
.text:00000000000063B3                 push    rbx
.text:00000000000063B4                 mov     rbx, rdx
.text:00000000000063B7                 mov     r12, rcx
.text:00000000000063BA                 mov     rdx, r14
.text:00000000000063BD                 sub     rsp, 408h
.text:00000000000063C4                 mov     [rbp+var_418], rsi
.text:00000000000063CB                 lea     rsi, [rbp+var_2C0]
.text:00000000000063D2                 mov     [rbp+src], rdi
.text:00000000000063D9                 mov     rdi, rbx
.text:00000000000063DC                 mov     [rbp+var_410], r14
.text:00000000000063E3                 mov     rax, fs:28h
.text:00000000000063EC                 mov     [rbp+var_38], rax
.text:00000000000063F0                 xor     eax, eax
.text:00000000000063F2                 mov     [rbp+var_408], rsi
.text:00000000000063F9                 call    printf_parse
.text:00000000000063FE                 test    eax, eax
.text:0000000000006400                 js      loc_7268
.text:0000000000006406                 mov     rsi, r14
.text:0000000000006409                 mov     rdi, r12
.text:000000000000640C                 call    printf_fetchargs
.text:0000000000006411                 test    eax, eax
.text:0000000000006413                 js      loc_72D0
.text:0000000000006419                 mov     rax, [rbp+var_2B0]
.text:0000000000006420                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006427                 add     rax, 7
.text:000000000000642B                 cmp     rax, 6
.text:000000000000642F                 cmovbe  rax, rdx
.text:0000000000006433                 add     rax, [rbp+var_2A8]
.text:000000000000643A                 jb      loc_6E68
.text:0000000000006440                 mov     rdi, rax
.text:0000000000006443                 xor     r8d, r8d
.text:0000000000006446                 add     rdi, 6          ; size
.text:000000000000644A                 setb    r8b
.text:000000000000644E                 jb      loc_6E68
.text:0000000000006454                 cmp     rdi, 0F9Fh
.text:000000000000645B                 jbe     loc_65A8
.text:0000000000006461                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006465                 mov     [rbp+n], r8
.text:000000000000646C                 jz      loc_6E68
.text:0000000000006472                 call    _malloc
.text:0000000000006477                 test    rax, rax
.text:000000000000647A                 mov     [rbp+var_3D8], rax
.text:0000000000006481                 jz      loc_6E68
.text:0000000000006487                 mov     r8, [rbp+n]
.text:000000000000648E                 mov     [rbp+ptr], rax
.text:0000000000006495
.text:0000000000006495 loc_6495:                               ; CODE XREF: vasnprintf+22E↓j
.text:0000000000006495                 xor     r12d, r12d
.text:0000000000006498                 cmp     [rbp+src], 0
.text:00000000000064A0                 jz      short loc_64AC
.text:00000000000064A2                 mov     rax, [rbp+var_418]
.text:00000000000064A9                 mov     r12, [rax]
.text:00000000000064AC
.text:00000000000064AC loc_64AC:                               ; CODE XREF: vasnprintf+100↑j
.text:00000000000064AC                 mov     r13, [rbp+var_2B8]
.text:00000000000064B3                 lea     rax, [rbp+var_3BC]
.text:00000000000064BA                 mov     r15, [rbp+src]
.text:00000000000064C1                 mov     [rbp+var_400], 0
.text:00000000000064CC                 mov     [rbp+var_3F0], rax
.text:00000000000064D3                 mov     rax, rbx
.text:00000000000064D6                 mov     rbx, r8
.text:00000000000064D9                 mov     rcx, [r13+0]
.text:00000000000064DD                 mov     r8, rax
.text:00000000000064E0                 cmp     rcx, r8
.text:00000000000064E3                 jz      loc_6E51
.text:00000000000064E9
.text:00000000000064E9 loc_64E9:                               ; CODE XREF: vasnprintf+AAB↓j
.text:00000000000064E9                 sub     rcx, r8
.text:00000000000064EC                 mov     rax, rbx
.text:00000000000064EF                 add     rax, rcx
.text:00000000000064F2                 mov     r14, rax
.text:00000000000064F5                 jnb     loc_65D8
.text:00000000000064FB                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000064FF                 jz      loc_6FD0
.text:0000000000006505
.text:0000000000006505 loc_6505:                               ; CODE XREF: vasnprintf+4E2↓j
.text:0000000000006505                                         ; vasnprintf+A86↓j ...
.text:0000000000006505                 call    ___errno_location
.text:000000000000650A                 mov     [rbp+n], rax
.text:0000000000006511
.text:0000000000006511 loc_6511:                               ; CODE XREF: vasnprintf+640↓j
.text:0000000000006511                                         ; vasnprintf+652↓j ...
.text:0000000000006511                 cmp     r15, [rbp+src]
.text:0000000000006518                 jz      short loc_6523
.text:000000000000651A                 test    r15, r15
.text:000000000000651D                 jnz     loc_7000
.text:0000000000006523
.text:0000000000006523 loc_6523:                               ; CODE XREF: vasnprintf+178↑j
.text:0000000000006523                                         ; vasnprintf+C68↓j
.text:0000000000006523                 mov     rax, [rbp+ptr]
.text:000000000000652A                 test    rax, rax
.text:000000000000652D                 jz      short loc_6537
.text:000000000000652F                 mov     rdi, rax        ; ptr
.text:0000000000006532                 call    _free
.text:0000000000006537
.text:0000000000006537 loc_6537:                               ; CODE XREF: vasnprintf+18D↑j
.text:0000000000006537                                         ; vasnprintf+AD4↓j
.text:0000000000006537                 mov     rax, [rbp+var_408]
.text:000000000000653E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006545                 add     rax, 20h ; ' '
.text:0000000000006549                 cmp     rdi, rax
.text:000000000000654C                 jz      short loc_6553
.text:000000000000654E                 call    _free
.text:0000000000006553
.text:0000000000006553 loc_6553:                               ; CODE XREF: vasnprintf+1AC↑j
.text:0000000000006553                 mov     rax, [rbp+var_410]
.text:000000000000655A                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006561                 add     rax, 10h
.text:0000000000006565                 cmp     rdi, rax
.text:0000000000006568                 jz      short loc_656F
.text:000000000000656A                 call    _free
.text:000000000000656F
.text:000000000000656F loc_656F:                               ; CODE XREF: vasnprintf+1C8↑j
.text:000000000000656F                 mov     rax, [rbp+n]
.text:0000000000006576                 xor     r15d, r15d
.text:0000000000006579                 mov     dword ptr [rax], 0Ch
.text:000000000000657F
.text:000000000000657F loc_657F:                               ; CODE XREF: vasnprintf+7BA↓j
.text:000000000000657F                                         ; vasnprintf+EBE↓j ...
.text:000000000000657F                 mov     rdi, [rbp+var_38]
.text:0000000000006583                 xor     rdi, fs:28h
.text:000000000000658C                 mov     rax, r15
.text:000000000000658F                 jnz     loc_7497
.text:0000000000006595                 lea     rsp, [rbp-28h]
.text:0000000000006599                 pop     rbx
.text:000000000000659A                 pop     r12
.text:000000000000659C                 pop     r13
.text:000000000000659E                 pop     r14
.text:00000000000065A0                 pop     r15
.text:00000000000065A2                 pop     rbp
.text:00000000000065A3                 retn
.text:00000000000065A3 ; ---------------------------------------------------------------------------
.text:00000000000065A4                 align 8
.text:00000000000065A8
.text:00000000000065A8 loc_65A8:                               ; CODE XREF: vasnprintf+BB↑j
.text:00000000000065A8                 add     rax, 24h ; '$'
.text:00000000000065AC                 mov     [rbp+ptr], 0
.text:00000000000065B7                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:00000000000065BB                 sub     rsp, rax
.text:00000000000065BE                 lea     rax, [rsp+430h+var_421]
.text:00000000000065C3                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:00000000000065C7                 mov     [rbp+var_3D8], rax
.text:00000000000065CE                 jmp     loc_6495
.text:00000000000065CE ; ---------------------------------------------------------------------------
.text:00000000000065D3                 align 8
.text:00000000000065D8
.text:00000000000065D8 loc_65D8:                               ; CODE XREF: vasnprintf+155↑j
.text:00000000000065D8                 cmp     r12, rax
.text:00000000000065DB                 jnb     short loc_6644
.text:00000000000065DD                 test    r12, r12
.text:00000000000065E0                 jnz     loc_6F10
.text:00000000000065E6                 cmp     rax, 0Ch
.text:00000000000065EA                 ja      loc_6F22
.text:00000000000065F0                 mov     r12d, 0Ch
.text:00000000000065F6
.text:00000000000065F6 loc_65F6:                               ; CODE XREF: vasnprintf+B7C↓j
.text:00000000000065F6                 cmp     r15, [rbp+src]
.text:00000000000065FD                 setz    dl
.text:0000000000006600                 test    r15, r15
.text:0000000000006603                 jz      loc_6F48
.text:0000000000006609
.text:0000000000006609 loc_6609:                               ; CODE XREF: vasnprintf+B9C↓j
.text:0000000000006609                 test    dl, dl
.text:000000000000660B                 jnz     loc_6F48
.text:0000000000006611                 mov     rsi, r12        ; size
.text:0000000000006614                 mov     rdi, r15        ; ptr
.text:0000000000006617                 mov     [rbp+var_3D0], r8
.text:000000000000661E                 mov     [rbp+n], rcx
.text:0000000000006625                 call    _realloc
.text:000000000000662A                 test    rax, rax
.text:000000000000662D                 mov     rcx, [rbp+n]
.text:0000000000006634                 mov     r8, [rbp+var_3D0]
.text:000000000000663B                 jz      loc_6FEB
.text:0000000000006641                 mov     r15, rax
.text:0000000000006644
.text:0000000000006644 loc_6644:                               ; CODE XREF: vasnprintf+23B↑j
.text:0000000000006644                                         ; vasnprintf+C23↓j ...
.text:0000000000006644                 lea     rdi, [r15+rbx]  ; dest
.text:0000000000006648                 mov     rdx, rcx        ; n
.text:000000000000664B                 mov     rsi, r8         ; src
.text:000000000000664E                 call    _memcpy
.text:0000000000006653
.text:0000000000006653 loc_6653:                               ; CODE XREF: vasnprintf+AB4↓j
.text:0000000000006653                 mov     rax, [rbp+var_400]
.text:000000000000665A                 cmp     [rbp+var_2C0], rax
.text:0000000000006661                 jz      loc_731B
.text:0000000000006667                 movzx   edx, byte ptr [r13+48h]
.text:000000000000666C                 mov     rax, [r13+50h]
.text:0000000000006670                 cmp     dl, 25h ; '%'
.text:0000000000006673                 jz      loc_6E08
.text:0000000000006679                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000667D                 jz      def_68FB        ; jumptable 00000000000068FB default case, case 0
.text:000000000000667D                                         ; jumptable 0000000000006EA0 default case
.text:0000000000006683                 mov     r8, [rbp+var_3A8]
.text:000000000000668A                 shl     rax, 5
.text:000000000000668E                 add     rax, r8
.text:0000000000006691                 cmp     dl, 6Eh ; 'n'
.text:0000000000006694                 mov     edi, [rax]
.text:0000000000006696                 mov     dword ptr [rbp+var_3D0], edi
.text:000000000000669C                 jz      loc_6E80
.text:00000000000066A2                 mov     eax, [r13+10h]
.text:00000000000066A6                 mov     rdi, [rbp+var_3D8]
.text:00000000000066AD                 test    al, 1
.text:00000000000066AF                 mov     byte ptr [rdi], 25h ; '%'
.text:00000000000066B2                 lea     rbx, [rdi+1]
.text:00000000000066B6                 jz      short loc_66C7
.text:00000000000066B8                 mov     rdi, [rbp+var_3D8]
.text:00000000000066BF                 lea     rbx, [rdi+2]
.text:00000000000066C3                 mov     byte ptr [rdi+1], 27h ; '''
.text:00000000000066C7
.text:00000000000066C7 loc_66C7:                               ; CODE XREF: vasnprintf+316↑j
.text:00000000000066C7                 test    al, 2
.text:00000000000066C9                 jz      short loc_66D2
.text:00000000000066CB                 mov     byte ptr [rbx], 2Dh ; '-'
.text:00000000000066CE                 add     rbx, 1
.text:00000000000066D2
.text:00000000000066D2 loc_66D2:                               ; CODE XREF: vasnprintf+329↑j
.text:00000000000066D2                 test    al, 4
.text:00000000000066D4                 jz      short loc_66DD
.text:00000000000066D6                 mov     byte ptr [rbx], 2Bh ; '+'
.text:00000000000066D9                 add     rbx, 1
.text:00000000000066DD
.text:00000000000066DD loc_66DD:                               ; CODE XREF: vasnprintf+334↑j
.text:00000000000066DD                 test    al, 8
.text:00000000000066DF                 jz      short loc_66E8
.text:00000000000066E1                 mov     byte ptr [rbx], 20h ; ' '
.text:00000000000066E4                 add     rbx, 1
.text:00000000000066E8
.text:00000000000066E8 loc_66E8:                               ; CODE XREF: vasnprintf+33F↑j
.text:00000000000066E8                 test    al, 10h
.text:00000000000066EA                 jz      short loc_66F3
.text:00000000000066EC                 mov     byte ptr [rbx], 23h ; '#'
.text:00000000000066EF                 add     rbx, 1
.text:00000000000066F3
.text:00000000000066F3 loc_66F3:                               ; CODE XREF: vasnprintf+34A↑j
.text:00000000000066F3                 test    al, 40h
.text:00000000000066F5                 jz      short loc_66FE
.text:00000000000066F7                 mov     byte ptr [rbx], 49h ; 'I'
.text:00000000000066FA                 add     rbx, 1
.text:00000000000066FE
.text:00000000000066FE loc_66FE:                               ; CODE XREF: vasnprintf+355↑j
.text:00000000000066FE                 test    al, 20h
.text:0000000000006700                 jz      short loc_6709
.text:0000000000006702                 mov     byte ptr [rbx], 30h ; '0'
.text:0000000000006705                 add     rbx, 1
.text:0000000000006709
.text:0000000000006709 loc_6709:                               ; CODE XREF: vasnprintf+360↑j
.text:0000000000006709                 mov     rsi, [r13+18h]  ; src
.text:000000000000670D                 mov     rdx, [r13+20h]
.text:0000000000006711                 cmp     rsi, rdx
.text:0000000000006714                 jz      short loc_6746
.text:0000000000006716                 mov     rcx, rdx
.text:0000000000006719                 mov     rdi, rbx        ; dest
.text:000000000000671C                 mov     [rbp+var_3E0], r8
.text:0000000000006723                 sub     rcx, rsi
.text:0000000000006726                 mov     rdx, rcx        ; n
.text:0000000000006729                 mov     [rbp+n], rcx
.text:0000000000006730                 call    _memcpy
.text:0000000000006735                 mov     rcx, [rbp+n]
.text:000000000000673C                 mov     r8, [rbp+var_3E0]
.text:0000000000006743                 add     rbx, rcx
.text:0000000000006746
.text:0000000000006746 loc_6746:                               ; CODE XREF: vasnprintf+374↑j
.text:0000000000006746                 mov     rsi, [r13+30h]  ; src
.text:000000000000674A                 mov     rdx, [r13+38h]
.text:000000000000674E                 cmp     rsi, rdx
.text:0000000000006751                 jz      short loc_6783
.text:0000000000006753                 mov     rcx, rdx
.text:0000000000006756                 mov     rdi, rbx        ; dest
.text:0000000000006759                 mov     [rbp+var_3E0], r8
.text:0000000000006760                 sub     rcx, rsi
.text:0000000000006763                 mov     rdx, rcx        ; n
.text:0000000000006766                 mov     [rbp+n], rcx
.text:000000000000676D                 call    _memcpy
.text:0000000000006772                 mov     rcx, [rbp+n]
.text:0000000000006779                 mov     r8, [rbp+var_3E0]
.text:0000000000006780                 add     rbx, rcx
.text:0000000000006783
.text:0000000000006783 loc_6783:                               ; CODE XREF: vasnprintf+3B1↑j
.text:0000000000006783                 mov     edi, dword ptr [rbp+var_3D0]
.text:0000000000006789                 cmp     edi, 10h
.text:000000000000678C                 ja      short loc_67BB
.text:000000000000678E                 mov     eax, 1
.text:0000000000006793                 mov     ecx, edi
.text:0000000000006795                 shl     rax, cl
.text:0000000000006798                 test    eax, 14180h
.text:000000000000679D                 jnz     short loc_67B4
.text:000000000000679F                 test    ah, 10h
.text:00000000000067A2                 jnz     loc_7100
.text:00000000000067A8                 test    ah, 6
.text:00000000000067AB                 jz      short loc_67BB
.text:00000000000067AD                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:00000000000067B0                 add     rbx, 1
.text:00000000000067B4
.text:00000000000067B4 loc_67B4:                               ; CODE XREF: vasnprintf+3FD↑j
.text:00000000000067B4                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:00000000000067B7                 add     rbx, 1
.text:00000000000067BB
.text:00000000000067BB loc_67BB:                               ; CODE XREF: vasnprintf+3EC↑j
.text:00000000000067BB                                         ; vasnprintf+40B↑j ...
.text:00000000000067BB                 movzx   eax, byte ptr [r13+48h]
.text:00000000000067C0                 mov     byte ptr [rbx+1], 0
.text:00000000000067C4                 mov     [rbx], al
.text:00000000000067C6                 mov     rax, [r13+28h]
.text:00000000000067CA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000067CE                 jz      loc_6F00
.text:00000000000067D4                 shl     rax, 5
.text:00000000000067D8                 add     rax, r8
.text:00000000000067DB                 cmp     dword ptr [rax], 5
.text:00000000000067DE                 jnz     def_68FB        ; jumptable 00000000000068FB default case, case 0
.text:00000000000067DE                                         ; jumptable 0000000000006EA0 default case
.text:00000000000067E4                 mov     eax, [rax+10h]
.text:00000000000067E7                 mov     dword ptr [rbp+var_3E0], 1
.text:00000000000067F1                 mov     [rbp+var_3B8], eax
.text:00000000000067F7
.text:00000000000067F7 loc_67F7:                               ; CODE XREF: vasnprintf+B6A↓j
.text:00000000000067F7                 mov     rax, [r13+40h]
.text:00000000000067FB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000067FF                 jz      short loc_682C
.text:0000000000006801                 shl     rax, 5
.text:0000000000006805                 add     r8, rax
.text:0000000000006808                 cmp     dword ptr [r8], 5
.text:000000000000680C                 jnz     def_68FB        ; jumptable 00000000000068FB default case, case 0
.text:000000000000680C                                         ; jumptable 0000000000006EA0 default case
.text:0000000000006812                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006818                 mov     edx, [r8+10h]
.text:000000000000681C                 mov     [rbp+rax*4+var_3B8], edx
.text:0000000000006823                 lea     eax, [rax+1]
.text:0000000000006826                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000682C
.text:000000000000682C loc_682C:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000682C                 mov     rax, r14
.text:000000000000682F                 xor     edx, edx
.text:0000000000006831                 add     rax, 2
.text:0000000000006835                 jb      loc_749C
.text:000000000000683B                 cmp     r12, rax
.text:000000000000683E                 jnb     short loc_688B
.text:0000000000006840                 test    r12, r12
.text:0000000000006843                 jnz     loc_7068
.text:0000000000006849                 cmp     rax, 0Ch
.text:000000000000684D                 ja      loc_7080
.text:0000000000006853                 mov     r12d, 0Ch
.text:0000000000006859
.text:0000000000006859 loc_6859:                               ; CODE XREF: vasnprintf+CD4↓j
.text:0000000000006859                 cmp     r15, [rbp+src]
.text:0000000000006860                 setz    dl
.text:0000000000006863                 test    r15, r15
.text:0000000000006866                 jz      loc_70B0
.text:000000000000686C
.text:000000000000686C loc_686C:                               ; CODE XREF: vasnprintf+D03↓j
.text:000000000000686C                 test    dl, dl
.text:000000000000686E                 jnz     loc_70B0
.text:0000000000006874                 mov     rsi, r12        ; size
.text:0000000000006877                 mov     rdi, r15        ; ptr
.text:000000000000687A                 call    _realloc
.text:000000000000687F                 test    rax, rax
.text:0000000000006882                 jz      loc_6505
.text:0000000000006888                 mov     r15, rax
.text:000000000000688B
.text:000000000000688B loc_688B:                               ; CODE XREF: vasnprintf+49E↑j
.text:000000000000688B                                         ; vasnprintf+D53↓j ...
.text:000000000000688B                 mov     byte ptr [r15+r14], 0
.text:0000000000006890                 call    ___errno_location
.text:0000000000006895                 mov     [rbp+n], rax
.text:000000000000689C                 mov     eax, [rax]
.text:000000000000689E                 mov     [rbp+var_3F8], rbx
.text:00000000000068A5                 mov     [rbp-424h], eax
.text:00000000000068AB                 nop     dword ptr [rax+rax+00h]
.text:00000000000068B0
.text:00000000000068B0 loc_68B0:                               ; CODE XREF: vasnprintf+637↓j
.text:00000000000068B0                                         ; vasnprintf+68D↓j ...
.text:00000000000068B0                 mov     rax, [rbp+n]
.text:00000000000068B7                 mov     rbx, r12
.text:00000000000068BA                 mov     r10d, 7FFFFFFFh
.text:00000000000068C0                 sub     rbx, r14
.text:00000000000068C3                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:00000000000068CD                 cmp     rbx, 7FFFFFFFh
.text:00000000000068D4                 mov     dword ptr [rax], 0
.text:00000000000068DA                 mov     eax, dword ptr [rbp+var_3D0]
.text:00000000000068E0                 cmovbe  r10, rbx
.text:00000000000068E4                 cmp     eax, 11h        ; switch 18 cases
.text:00000000000068E7                 ja      def_68FB        ; jumptable 00000000000068FB default case, case 0
.text:00000000000068E7                                         ; jumptable 0000000000006EA0 default case
.text:00000000000068ED                 lea     rsi, jpt_68FB
.text:00000000000068F4                 movsxd  rax, ds:(jpt_68FB - 9588h)[rsi+rax*4]
.text:00000000000068F8                 add     rax, rsi
.text:00000000000068FB                 jmp     rax             ; switch jump
.text:00000000000068FB ; ---------------------------------------------------------------------------
.text:00000000000068FD                 align 20h
.text:0000000000006900
.text:0000000000006900 loc_6900:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006900                                         ; DATA XREF: .rodata:jpt_68FB↓o
.text:0000000000006900                 mov     rax, [r13+50h]  ; jumptable 00000000000068FB cases 7-10,15-17
.text:0000000000006904                 lea     rdi, [r15+r14]
.text:0000000000006908                 shl     rax, 5
.text:000000000000690C                 add     rax, [rbp+var_3A8]
.text:0000000000006913                 mov     r9, [rax+10h]
.text:0000000000006917                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000691D                 cmp     eax, 1
.text:0000000000006920                 jz      loc_6DE8
.text:0000000000006926                 cmp     eax, 2
.text:0000000000006929                 jz      loc_6DD0
.text:000000000000692F                 sub     rsp, 8
.text:0000000000006933                 push    [rbp+var_3F0]
.text:0000000000006939
.text:0000000000006939 loc_6939:                               ; CODE XREF: vasnprintf+CBE↓j
.text:0000000000006939                 mov     r8, [rbp+var_3D8]
.text:0000000000006940                 mov     rsi, r10
.text:0000000000006943                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000694A                 mov     edx, 1
.text:000000000000694F                 xor     eax, eax
.text:0000000000006951                 mov     [rbp+var_430], r10
.text:0000000000006958                 call    ___snprintf_chk
.text:000000000000695D                 pop     rsi
.text:000000000000695E                 pop     rdi
.text:000000000000695F                 mov     r10, [rbp+var_430]
.text:0000000000006966
.text:0000000000006966 loc_6966:                               ; CODE XREF: vasnprintf+83D↓j
.text:0000000000006966                                         ; vasnprintf+8BE↓j ...
.text:0000000000006966                 mov     ecx, [rbp+var_3BC]
.text:000000000000696C                 test    ecx, ecx
.text:000000000000696E                 js      loc_6AAC
.text:0000000000006974
.text:0000000000006974 loc_6974:                               ; CODE XREF: vasnprintf+706↓j
.text:0000000000006974                 movsxd  rdx, ecx
.text:0000000000006977                 cmp     rdx, r10
.text:000000000000697A                 jnb     short loc_698A
.text:000000000000697C                 add     rdx, r15
.text:000000000000697F                 cmp     byte ptr [rdx+r14], 0
.text:0000000000006984                 jnz     def_68FB        ; jumptable 00000000000068FB default case, case 0
.text:0000000000006984                                         ; jumptable 0000000000006EA0 default case
.text:000000000000698A
.text:000000000000698A loc_698A:                               ; CODE XREF: vasnprintf+5DA↑j
.text:000000000000698A                 cmp     ecx, eax
.text:000000000000698C                 jge     short loc_6996
.text:000000000000698E
.text:000000000000698E loc_698E:                               ; CODE XREF: vasnprintf+71F↓j
.text:000000000000698E                 mov     [rbp+var_3BC], eax
.text:0000000000006994                 mov     ecx, eax
.text:0000000000006996
.text:0000000000006996 loc_6996:                               ; CODE XREF: vasnprintf+5EC↑j
.text:0000000000006996                 lea     eax, [rcx+1]
.text:0000000000006999                 cmp     rax, r10
.text:000000000000699C                 jb      loc_71D0
.text:00000000000069A2                 cmp     rbx, 7FFFFFFEh
.text:00000000000069A9                 ja      loc_71F0
.text:00000000000069AF                 lea     rsi, [r12+r12]
.text:00000000000069B3                 lea     edx, [rcx+2]
.text:00000000000069B6                 test    r12, r12
.text:00000000000069B9                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000069C0                 cmovns  rax, rsi
.text:00000000000069C4                 add     rdx, r14
.text:00000000000069C7                 jb      loc_7488
.text:00000000000069CD                 cmp     rax, rdx
.text:00000000000069D0                 cmovb   rax, rdx
.text:00000000000069D4                 cmp     r12, rax
.text:00000000000069D7                 jnb     loc_68B0
.text:00000000000069DD                 test    r12, r12
.text:00000000000069E0                 js      loc_6511
.text:00000000000069E6                 cmp     rsi, rax
.text:00000000000069E9                 mov     r12, rsi
.text:00000000000069EC                 jnb     short loc_69FB
.text:00000000000069EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000069F2                 jz      loc_6511
.text:00000000000069F8                 mov     r12, rax
.text:00000000000069FB
.text:00000000000069FB loc_69FB:                               ; CODE XREF: vasnprintf+64C↑j
.text:00000000000069FB                 cmp     r15, [rbp+src]
.text:0000000000006A02                 setz    bl
.text:0000000000006A05                 test    r15, r15
.text:0000000000006A08                 jz      loc_6D90
.text:0000000000006A0E                 test    bl, bl
.text:0000000000006A10                 jnz     loc_6D90
.text:0000000000006A16                 mov     rsi, r12        ; size
.text:0000000000006A19                 mov     rdi, r15        ; ptr
.text:0000000000006A1C                 call    _realloc
.text:0000000000006A21                 test    rax, rax
.text:0000000000006A24                 jz      loc_6511
.text:0000000000006A2A                 mov     r15, rax
.text:0000000000006A2D                 jmp     loc_68B0
.text:0000000000006A2D ; ---------------------------------------------------------------------------
.text:0000000000006A32                 align 8
.text:0000000000006A38
.text:0000000000006A38 loc_6A38:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006A38                                         ; DATA XREF: .rodata:jpt_68FB↓o
.text:0000000000006A38                 mov     rax, [r13+50h]  ; jumptable 00000000000068FB cases 5,6,13,14
.text:0000000000006A3C                 lea     rdi, [r15+r14]
.text:0000000000006A40                 shl     rax, 5
.text:0000000000006A44                 add     rax, [rbp+var_3A8]
.text:0000000000006A4B                 mov     r9d, [rax+10h]
.text:0000000000006A4F                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006A55                 cmp     eax, 1
.text:0000000000006A58                 jz      loc_6C90
.text:0000000000006A5E
.text:0000000000006A5E loc_6A5E:                               ; CODE XREF: vasnprintf+8E9↓j
.text:0000000000006A5E                                         ; vasnprintf+9B1↓j ...
.text:0000000000006A5E                 cmp     eax, 2
.text:0000000000006A61                 jz      loc_6CD8
.text:0000000000006A67
.text:0000000000006A67 loc_6A67:                               ; CODE XREF: vasnprintf+92E↓j
.text:0000000000006A67                 sub     rsp, 8
.text:0000000000006A6B                 push    [rbp+var_3F0]
.text:0000000000006A71
.text:0000000000006A71 loc_6A71:                               ; CODE XREF: vasnprintf+8FF↓j
.text:0000000000006A71                 mov     r8, [rbp+var_3D8]
.text:0000000000006A78                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A7F                 mov     edx, 1
.text:0000000000006A84                 mov     rsi, r10
.text:0000000000006A87                 xor     eax, eax
.text:0000000000006A89                 mov     [rbp+var_430], r10
.text:0000000000006A90                 call    ___snprintf_chk
.text:0000000000006A95                 pop     rdx
.text:0000000000006A96                 pop     rcx
.text:0000000000006A97                 mov     ecx, [rbp+var_3BC]
.text:0000000000006A9D                 mov     r10, [rbp+var_430]
.text:0000000000006AA4                 test    ecx, ecx
.text:0000000000006AA6                 jns     loc_6974
.text:0000000000006AAC
.text:0000000000006AAC loc_6AAC:                               ; CODE XREF: vasnprintf+5CE↑j
.text:0000000000006AAC                 mov     rdi, [rbp+var_3F8]
.text:0000000000006AB3                 cmp     byte ptr [rdi+1], 0
.text:0000000000006AB7                 jnz     loc_6DF8
.text:0000000000006ABD                 test    eax, eax
.text:0000000000006ABF                 jns     loc_698E
.text:0000000000006AC5                 mov     rax, [rbp+n]
.text:0000000000006ACC                 mov     ebx, [rax]
.text:0000000000006ACE                 test    ebx, ebx
.text:0000000000006AD0                 jnz     short loc_6AF0
.text:0000000000006AD2                 movzx   eax, byte ptr [r13+48h]
.text:0000000000006AD7                 mov     ebx, 16h
.text:0000000000006ADC                 and     eax, 0FFFFFFEFh
.text:0000000000006ADF                 cmp     al, 63h ; 'c'
.text:0000000000006AE1                 mov     eax, 54h ; 'T'
.text:0000000000006AE6                 cmovz   ebx, eax
.text:0000000000006AE9                 nop     dword ptr [rax+00000000h]
.text:0000000000006AF0
.text:0000000000006AF0 loc_6AF0:                               ; CODE XREF: vasnprintf+730↑j
.text:0000000000006AF0                 cmp     r15, [rbp+src]
.text:0000000000006AF7                 jz      short loc_6B02
.text:0000000000006AF9                 test    r15, r15
.text:0000000000006AFC                 jnz     loc_72AC
.text:0000000000006B02
.text:0000000000006B02 loc_6B02:                               ; CODE XREF: vasnprintf+757↑j
.text:0000000000006B02                                         ; vasnprintf+F14↓j
.text:0000000000006B02                 mov     rax, [rbp+ptr]
.text:0000000000006B09                 test    rax, rax
.text:0000000000006B0C                 jz      short loc_6B16
.text:0000000000006B0E                 mov     rdi, rax        ; ptr
.text:0000000000006B11                 call    _free
.text:0000000000006B16
.text:0000000000006B16 loc_6B16:                               ; CODE XREF: vasnprintf+76C↑j
.text:0000000000006B16                 mov     rax, [rbp+var_408]
.text:0000000000006B1D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006B24                 add     rax, 20h ; ' '
.text:0000000000006B28                 cmp     rdi, rax
.text:0000000000006B2B                 jz      short loc_6B32
.text:0000000000006B2D                 call    _free
.text:0000000000006B32
.text:0000000000006B32 loc_6B32:                               ; CODE XREF: vasnprintf+78B↑j
.text:0000000000006B32                 mov     rax, [rbp+var_410]
.text:0000000000006B39                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006B40                 add     rax, 10h
.text:0000000000006B44                 cmp     rdi, rax
.text:0000000000006B47                 jz      short loc_6B4E
.text:0000000000006B49                 call    _free
.text:0000000000006B4E
.text:0000000000006B4E loc_6B4E:                               ; CODE XREF: vasnprintf+7A7↑j
.text:0000000000006B4E                 mov     rax, [rbp+n]
.text:0000000000006B55                 xor     r15d, r15d
.text:0000000000006B58                 mov     [rax], ebx
.text:0000000000006B5A                 jmp     loc_657F
.text:0000000000006B5A ; ---------------------------------------------------------------------------
.text:0000000000006B5F                 align 20h
.text:0000000000006B60
.text:0000000000006B60 loc_6B60:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006B60                                         ; DATA XREF: .rodata:jpt_68FB↓o
.text:0000000000006B60                 mov     rax, [r13+50h]  ; jumptable 00000000000068FB case 12
.text:0000000000006B64                 lea     rdi, [r15+r14]
.text:0000000000006B68                 shl     rax, 5
.text:0000000000006B6C                 add     rax, [rbp+var_3A8]
.text:0000000000006B73                 fld     tbyte ptr [rax+10h]
.text:0000000000006B76                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006B7C                 cmp     eax, 1
.text:0000000000006B7F                 jz      loc_71B0
.text:0000000000006B85                 cmp     eax, 2
.text:0000000000006B88                 jnz     loc_7050
.text:0000000000006B8E                 mov     eax, [rbp+var_3B4]
.text:0000000000006B94                 sub     rsp, 8
.text:0000000000006B98                 push    [rbp+var_3F0]
.text:0000000000006B9E                 mov     r9d, [rbp+var_3B8]
.text:0000000000006BA5                 mov     r8, [rbp+var_3D8]
.text:0000000000006BAC                 mov     rsi, r10
.text:0000000000006BAF                 sub     rsp, 18h
.text:0000000000006BB3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006BBA                 mov     edx, 1
.text:0000000000006BBF                 fstp    [rsp+458h+var_450]
.text:0000000000006BC3                 push    rax
.text:0000000000006BC4                 xor     eax, eax
.text:0000000000006BC6                 mov     [rbp+var_430], r10
.text:0000000000006BCD                 call    ___snprintf_chk
.text:0000000000006BD2                 add     rsp, 30h
.text:0000000000006BD6                 mov     r10, [rbp+var_430]
.text:0000000000006BDD                 jmp     loc_6966
.text:0000000000006BDD ; ---------------------------------------------------------------------------
.text:0000000000006BE2                 align 8
.text:0000000000006BE8
.text:0000000000006BE8 loc_6BE8:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006BE8                                         ; DATA XREF: .rodata:jpt_68FB↓o
.text:0000000000006BE8                 mov     rax, [r13+50h]  ; jumptable 00000000000068FB case 11
.text:0000000000006BEC                 lea     rdi, [r15+r14]
.text:0000000000006BF0                 shl     rax, 5
.text:0000000000006BF4                 add     rax, [rbp+var_3A8]
.text:0000000000006BFB                 movsd   xmm0, qword ptr [rax+10h]
.text:0000000000006C00                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006C06                 cmp     eax, 1
.text:0000000000006C09                 jz      loc_71A0
.text:0000000000006C0F                 cmp     eax, 2
.text:0000000000006C12                 jnz     loc_7010
.text:0000000000006C18                 mov     eax, [rbp+var_3B4]
.text:0000000000006C1E                 push    [rbp+var_3F0]
.text:0000000000006C24                 push    rax
.text:0000000000006C25
.text:0000000000006C25 loc_6C25:                               ; CODE XREF: vasnprintf+E0A↓j
.text:0000000000006C25                 mov     r9d, [rbp+var_3B8]
.text:0000000000006C2C                 mov     r8, [rbp+var_3D8]
.text:0000000000006C33                 mov     rsi, r10
.text:0000000000006C36                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006C3D                 mov     edx, 1
.text:0000000000006C42                 mov     eax, 1
.text:0000000000006C47                 mov     [rbp+var_430], r10
.text:0000000000006C4E                 call    ___snprintf_chk
.text:0000000000006C53                 pop     r8
.text:0000000000006C55                 mov     r10, [rbp+var_430]
.text:0000000000006C5C                 pop     r9
.text:0000000000006C5E                 jmp     loc_6966
.text:0000000000006C5E ; ---------------------------------------------------------------------------
.text:0000000000006C63                 align 8
.text:0000000000006C68
.text:0000000000006C68 loc_6C68:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006C68                                         ; DATA XREF: .rodata:jpt_68FB↓o
.text:0000000000006C68                 mov     rax, [r13+50h]  ; jumptable 00000000000068FB case 4
.text:0000000000006C6C                 lea     rdi, [r15+r14]
.text:0000000000006C70                 shl     rax, 5
.text:0000000000006C74                 add     rax, [rbp+var_3A8]
.text:0000000000006C7B                 movzx   r9d, word ptr [rax+10h]
.text:0000000000006C80                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006C86                 cmp     eax, 1
.text:0000000000006C89                 jnz     loc_6A5E
.text:0000000000006C8F                 nop
.text:0000000000006C90
.text:0000000000006C90 loc_6C90:                               ; CODE XREF: vasnprintf+6B8↑j
.text:0000000000006C90                                         ; vasnprintf+929↓j ...
.text:0000000000006C90                 push    [rbp+var_3F0]
.text:0000000000006C96                 push    r9
.text:0000000000006C98
.text:0000000000006C98 loc_6C98:                               ; CODE XREF: vasnprintf+A50↓j
.text:0000000000006C98                 mov     r9d, [rbp+var_3B8]
.text:0000000000006C9F                 jmp     loc_6A71
.text:0000000000006C9F ; ---------------------------------------------------------------------------
.text:0000000000006CA4                 align 8
.text:0000000000006CA8
.text:0000000000006CA8 loc_6CA8:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006CA8                                         ; DATA XREF: .rodata:jpt_68FB↓o
.text:0000000000006CA8                 mov     rax, [r13+50h]  ; jumptable 00000000000068FB case 3
.text:0000000000006CAC                 lea     rdi, [r15+r14]
.text:0000000000006CB0                 shl     rax, 5
.text:0000000000006CB4                 add     rax, [rbp+var_3A8]
.text:0000000000006CBB                 movsx   r9d, word ptr [rax+10h]
.text:0000000000006CC0                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006CC6                 cmp     eax, 1
.text:0000000000006CC9                 jz      short loc_6C90
.text:0000000000006CCB                 cmp     eax, 2
.text:0000000000006CCE                 jnz     loc_6A67
.text:0000000000006CD4                 nop     dword ptr [rax+00h]
.text:0000000000006CD8
.text:0000000000006CD8 loc_6CD8:                               ; CODE XREF: vasnprintf+6C1↑j
.text:0000000000006CD8                 sub     rsp, 8
.text:0000000000006CDC                 push    [rbp+var_3F0]
.text:0000000000006CE2                 push    r9
.text:0000000000006CE4
.text:0000000000006CE4 loc_6CE4:                               ; CODE XREF: vasnprintf+A3C↓j
.text:0000000000006CE4                 mov     eax, [rbp+var_3B4]
.text:0000000000006CEA                 push    rax
.text:0000000000006CEB
.text:0000000000006CEB loc_6CEB:                               ; CODE XREF: vasnprintf+E21↓j
.text:0000000000006CEB                 mov     r9d, [rbp+var_3B8]
.text:0000000000006CF2                 mov     r8, [rbp+var_3D8]
.text:0000000000006CF9                 mov     rsi, r10
.text:0000000000006CFC                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006D03                 mov     edx, 1
.text:0000000000006D08                 xor     eax, eax
.text:0000000000006D0A                 mov     [rbp+var_430], r10
.text:0000000000006D11                 call    ___snprintf_chk
.text:0000000000006D16                 add     rsp, 20h
.text:0000000000006D1A                 mov     r10, [rbp+var_430]
.text:0000000000006D21                 jmp     loc_6966
.text:0000000000006D21 ; ---------------------------------------------------------------------------
.text:0000000000006D26                 align 10h
.text:0000000000006D30
.text:0000000000006D30 loc_6D30:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006D30                                         ; DATA XREF: .rodata:jpt_68FB↓o
.text:0000000000006D30                 mov     rax, [r13+50h]  ; jumptable 00000000000068FB case 2
.text:0000000000006D34                 lea     rdi, [r15+r14]
.text:0000000000006D38                 shl     rax, 5
.text:0000000000006D3C                 add     rax, [rbp+var_3A8]
.text:0000000000006D43                 movzx   r9d, byte ptr [rax+10h]
.text:0000000000006D48                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006D4E                 cmp     eax, 1
.text:0000000000006D51                 jnz     loc_6A5E
.text:0000000000006D57                 jmp     loc_6C90
.text:0000000000006D57 ; ---------------------------------------------------------------------------
.text:0000000000006D5C                 align 20h
.text:0000000000006D60
.text:0000000000006D60 loc_6D60:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006D60                                         ; DATA XREF: .rodata:jpt_68FB↓o
.text:0000000000006D60                 mov     rax, [r13+50h]  ; jumptable 00000000000068FB case 1
.text:0000000000006D64                 lea     rdi, [r15+r14]
.text:0000000000006D68                 shl     rax, 5
.text:0000000000006D6C                 add     rax, [rbp+var_3A8]
.text:0000000000006D73                 movsx   r9d, byte ptr [rax+10h]
.text:0000000000006D78                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006D7E                 cmp     eax, 1
.text:0000000000006D81                 jnz     loc_6A5E
.text:0000000000006D87                 jmp     loc_6C90
.text:0000000000006D87 ; ---------------------------------------------------------------------------
.text:0000000000006D8C                 align 10h
.text:0000000000006D90
.text:0000000000006D90 loc_6D90:                               ; CODE XREF: vasnprintf+668↑j
.text:0000000000006D90                                         ; vasnprintf+670↑j
.text:0000000000006D90                 mov     rdi, r12        ; size
.text:0000000000006D93                 call    _malloc
.text:0000000000006D98                 test    rax, rax
.text:0000000000006D9B                 mov     rcx, rax
.text:0000000000006D9E                 jz      loc_6511
.text:0000000000006DA4                 test    r14, r14
.text:0000000000006DA7                 jz      loc_6E60
.text:0000000000006DAD                 test    bl, bl
.text:0000000000006DAF                 jz      loc_6E60
.text:0000000000006DB5                 mov     rsi, r15        ; src
.text:0000000000006DB8                 mov     rdx, r14        ; n
.text:0000000000006DBB                 mov     rdi, rax        ; dest
.text:0000000000006DBE                 call    _memcpy
.text:0000000000006DC3                 mov     r15, rax
.text:0000000000006DC6                 jmp     loc_68B0
.text:0000000000006DC6 ; ---------------------------------------------------------------------------
.text:0000000000006DCB                 align 10h
.text:0000000000006DD0
.text:0000000000006DD0 loc_6DD0:                               ; CODE XREF: vasnprintf+589↑j
.text:0000000000006DD0                 sub     rsp, 8
.text:0000000000006DD4                 push    [rbp+var_3F0]
.text:0000000000006DDA                 push    r9
.text:0000000000006DDC                 jmp     loc_6CE4
.text:0000000000006DDC ; ---------------------------------------------------------------------------
.text:0000000000006DE1                 align 8
.text:0000000000006DE8
.text:0000000000006DE8 loc_6DE8:                               ; CODE XREF: vasnprintf+580↑j
.text:0000000000006DE8                 push    [rbp+var_3F0]
.text:0000000000006DEE                 push    r9
.text:0000000000006DF0                 jmp     loc_6C98
.text:0000000000006DF0 ; ---------------------------------------------------------------------------
.text:0000000000006DF5                 align 8
.text:0000000000006DF8
.text:0000000000006DF8 loc_6DF8:                               ; CODE XREF: vasnprintf+717↑j
.text:0000000000006DF8                 mov     byte ptr [rdi+1], 0
.text:0000000000006DFC                 jmp     loc_68B0
.text:0000000000006DFC ; ---------------------------------------------------------------------------
.text:0000000000006E01                 align 8
.text:0000000000006E08
.text:0000000000006E08 loc_6E08:                               ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000006E08                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006E0C                 jnz     def_68FB        ; jumptable 00000000000068FB default case, case 0
.text:0000000000006E0C                                         ; jumptable 0000000000006EA0 default case
.text:0000000000006E12                 mov     rax, r14
.text:0000000000006E15                 add     rax, 1
.text:0000000000006E19                 mov     rbx, rax
.text:0000000000006E1C                 jnb     loc_6EA8
.text:0000000000006E22                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006E26                 jnz     loc_6505
.text:0000000000006E2C                 mov     rbx, r12
.text:0000000000006E2F
.text:0000000000006E2F loc_6E2F:                               ; CODE XREF: vasnprintf+B0B↓j
.text:0000000000006E2F                                         ; vasnprintf+B58↓j ...
.text:0000000000006E2F                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000006E34
.text:0000000000006E34 loc_6E34:                               ; CODE XREF: vasnprintf+C46↓j
.text:0000000000006E34                                         ; vasnprintf+D76↓j ...
.text:0000000000006E34                 mov     r8, [r13+8]
.text:0000000000006E38                 add     r13, 58h ; 'X'
.text:0000000000006E3C                 mov     rcx, [r13+0]
.text:0000000000006E40                 add     [rbp+var_400], 1
.text:0000000000006E48                 cmp     rcx, r8
.text:0000000000006E4B                 jnz     loc_64E9
.text:0000000000006E51
.text:0000000000006E51 loc_6E51:                               ; CODE XREF: vasnprintf+143↑j
.text:0000000000006E51                 mov     r14, rbx
.text:0000000000006E54                 jmp     loc_6653
.text:0000000000006E54 ; ---------------------------------------------------------------------------
.text:0000000000006E59                 align 20h
.text:0000000000006E60
.text:0000000000006E60 loc_6E60:                               ; CODE XREF: vasnprintf+A07↑j
.text:0000000000006E60                                         ; vasnprintf+A0F↑j
.text:0000000000006E60                 mov     r15, rcx
.text:0000000000006E63                 jmp     loc_68B0
.text:0000000000006E68 ; ---------------------------------------------------------------------------
.text:0000000000006E68
.text:0000000000006E68 loc_6E68:                               ; CODE XREF: vasnprintf+9A↑j
.text:0000000000006E68                                         ; vasnprintf+AE↑j ...
.text:0000000000006E68                 call    ___errno_location
.text:0000000000006E6D                 mov     [rbp+n], rax
.text:0000000000006E74                 jmp     loc_6537
.text:0000000000006E74 ; ---------------------------------------------------------------------------
.text:0000000000006E79                 align 20h
.text:0000000000006E80
.text:0000000000006E80 loc_6E80:                               ; CODE XREF: vasnprintf+2FC↑j
.text:0000000000006E80                 mov     edx, edi
.text:0000000000006E82                 sub     edx, 12h        ; switch 5 cases
.text:0000000000006E85                 cmp     edx, 4
.text:0000000000006E88                 ja      def_68FB        ; jumptable 00000000000068FB default case, case 0
.text:0000000000006E88                                         ; jumptable 0000000000006EA0 default case
.text:0000000000006E8E                 lea     rdi, jpt_6EA0
.text:0000000000006E95                 mov     rax, [rax+10h]
.text:0000000000006E99                 movsxd  rdx, ds:(jpt_6EA0 - 95D0h)[rdi+rdx*4]
.text:0000000000006E9D                 add     rdx, rdi
.text:0000000000006EA0                 jmp     rdx             ; switch jump
.text:0000000000006EA0 ; ---------------------------------------------------------------------------
.text:0000000000006EA2                 align 8
.text:0000000000006EA8
.text:0000000000006EA8 loc_6EA8:                               ; CODE XREF: vasnprintf+A7C↑j
.text:0000000000006EA8                 cmp     r12, rax
.text:0000000000006EAB                 jnb     short loc_6E2F
.text:0000000000006EAD                 test    r12, r12
.text:0000000000006EB0                 jnz     loc_7280
.text:0000000000006EB6                 cmp     rax, 0Ch
.text:0000000000006EBA                 ja      loc_7292
.text:0000000000006EC0                 mov     r12d, 0Ch
.text:0000000000006EC6
.text:0000000000006EC6 loc_6EC6:                               ; CODE XREF: vasnprintf+EEC↓j
.text:0000000000006EC6                                         ; vasnprintf+EFF↓j
.text:0000000000006EC6                 cmp     r15, [rbp+src]
.text:0000000000006ECD                 setz    dl
.text:0000000000006ED0                 test    r15, r15
.text:0000000000006ED3                 jz      loc_7140
.text:0000000000006ED9                 test    dl, dl
.text:0000000000006EDB                 jnz     loc_7140
.text:0000000000006EE1                 mov     rsi, r12        ; size
.text:0000000000006EE4                 mov     rdi, r15        ; ptr
.text:0000000000006EE7                 call    _realloc
.text:0000000000006EEC                 test    rax, rax
.text:0000000000006EEF                 jz      loc_6FEB
.text:0000000000006EF5                 mov     r15, rax
.text:0000000000006EF8                 jmp     loc_6E2F
.text:0000000000006EF8 ; ---------------------------------------------------------------------------
.text:0000000000006EFD                 align 20h
.text:0000000000006F00
.text:0000000000006F00 loc_6F00:                               ; CODE XREF: vasnprintf+42E↑j
.text:0000000000006F00                 mov     dword ptr [rbp+var_3E0], 0
.text:0000000000006F0A                 jmp     loc_67F7
.text:0000000000006F0A ; ---------------------------------------------------------------------------
.text:0000000000006F0F                 align 10h
.text:0000000000006F10
.text:0000000000006F10 loc_6F10:                               ; CODE XREF: vasnprintf+240↑j
.text:0000000000006F10                 js      loc_6505
.text:0000000000006F16                 add     r12, r12
.text:0000000000006F19                 cmp     r12, rax
.text:0000000000006F1C                 jnb     loc_65F6
.text:0000000000006F22
.text:0000000000006F22 loc_6F22:                               ; CODE XREF: vasnprintf+24A↑j
.text:0000000000006F22                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F26                 jz      loc_6505
.text:0000000000006F2C                 cmp     r15, [rbp+src]
.text:0000000000006F33                 mov     r12, rax
.text:0000000000006F36                 setz    dl
.text:0000000000006F39                 test    r15, r15
.text:0000000000006F3C                 jnz     loc_6609
.text:0000000000006F42                 nop     word ptr [rax+rax+00h]
.text:0000000000006F48
.text:0000000000006F48 loc_6F48:                               ; CODE XREF: vasnprintf+263↑j
.text:0000000000006F48                                         ; vasnprintf+26B↑j
.text:0000000000006F48                 mov     rdi, r12        ; size
.text:0000000000006F4B                 mov     [rbp+var_3E0], r8
.text:0000000000006F52                 mov     byte ptr [rbp+var_3D0], dl
.text:0000000000006F58                 mov     [rbp+n], rcx
.text:0000000000006F5F                 call    _malloc
.text:0000000000006F64                 test    rax, rax
.text:0000000000006F67                 mov     r9, rax
.text:0000000000006F6A                 mov     rcx, [rbp+n]
.text:0000000000006F71                 movzx   edx, byte ptr [rbp+var_3D0]
.text:0000000000006F78                 mov     r8, [rbp+var_3E0]
.text:0000000000006F7F                 jz      loc_6505
.text:0000000000006F85                 test    rbx, rbx
.text:0000000000006F88                 jz      loc_7190
.text:0000000000006F8E                 test    dl, dl
.text:0000000000006F90                 jz      loc_7190
.text:0000000000006F96                 mov     rsi, r15        ; src
.text:0000000000006F99                 mov     rdx, rbx        ; n
.text:0000000000006F9C                 mov     rdi, rax        ; dest
.text:0000000000006F9F                 mov     [rbp+var_3D0], r8
.text:0000000000006FA6                 mov     [rbp+n], rcx
.text:0000000000006FAD                 call    _memcpy
.text:0000000000006FB2                 mov     rcx, [rbp+n]
.text:0000000000006FB9                 mov     r15, rax
.text:0000000000006FBC                 mov     r8, [rbp+var_3D0]
.text:0000000000006FC3                 jmp     loc_6644
.text:0000000000006FC3 ; ---------------------------------------------------------------------------
.text:0000000000006FC8                 align 10h
.text:0000000000006FD0
.text:0000000000006FD0 loc_6FD0:                               ; CODE XREF: vasnprintf+15F↑j
.text:0000000000006FD0                 mov     r14, r12
.text:0000000000006FD3                 jmp     loc_6644
.text:0000000000006FD3 ; ---------------------------------------------------------------------------
.text:0000000000006FD8                 align 20h
.text:0000000000006FE0
.text:0000000000006FE0 loc_6FE0:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006FE0                                         ; DATA XREF: .rodata:jpt_6EA0↓o
.text:0000000000006FE0                 mov     [rax], r14      ; jumptable 0000000000006EA0 cases 21,22
.text:0000000000006FE3                 mov     rbx, r14
.text:0000000000006FE6                 jmp     loc_6E34
.text:0000000000006FEB ; ---------------------------------------------------------------------------
.text:0000000000006FEB
.text:0000000000006FEB loc_6FEB:                               ; CODE XREF: vasnprintf+29B↑j
.text:0000000000006FEB                                         ; vasnprintf+B4F↑j ...
.text:0000000000006FEB                 call    ___errno_location
.text:0000000000006FF0                 mov     [rbp+n], rax
.text:0000000000006FF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007000
.text:0000000000007000 loc_7000:                               ; CODE XREF: vasnprintf+17D↑j
.text:0000000000007000                 mov     rdi, r15        ; ptr
.text:0000000000007003                 call    _free
.text:0000000000007008                 jmp     loc_6523
.text:0000000000007008 ; ---------------------------------------------------------------------------
.text:000000000000700D                 align 10h
.text:0000000000007010
.text:0000000000007010 loc_7010:                               ; CODE XREF: vasnprintf+872↑j
.text:0000000000007010                 mov     r9, [rbp+var_3F0]
.text:0000000000007017                 mov     r8, [rbp+var_3D8]
.text:000000000000701E                 mov     rsi, r10
.text:0000000000007021                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007028                 mov     edx, 1
.text:000000000000702D                 mov     eax, 1
.text:0000000000007032                 mov     [rbp+var_430], r10
.text:0000000000007039                 call    ___snprintf_chk
.text:000000000000703E                 mov     r10, [rbp+var_430]
.text:0000000000007045                 jmp     loc_6966
.text:0000000000007045 ; ---------------------------------------------------------------------------
.text:000000000000704A                 align 10h
.text:0000000000007050
.text:0000000000007050 loc_7050:                               ; CODE XREF: vasnprintf+7E8↑j
.text:0000000000007050                 sub     rsp, 10h
.text:0000000000007054                 mov     r9, [rbp+var_3F0]
.text:000000000000705B                 fstp    [rsp+440h+var_440]
.text:000000000000705E                 jmp     loc_6939
.text:000000000000705E ; ---------------------------------------------------------------------------
.text:0000000000007063                 align 8
.text:0000000000007068
.text:0000000000007068 loc_7068:                               ; CODE XREF: vasnprintf+4A3↑j
.text:0000000000007068                 js      loc_6505
.text:000000000000706E                 add     r12, r12
.text:0000000000007071                 cmp     r12, rax
.text:0000000000007074                 jnb     loc_6859
.text:000000000000707A                 nop     word ptr [rax+rax+00h]
.text:0000000000007080
.text:0000000000007080 loc_7080:                               ; CODE XREF: vasnprintf+4AD↑j
.text:0000000000007080                                         ; vasnprintf+1114↓j
.text:0000000000007080                 test    rdx, rdx
.text:0000000000007083                 jnz     loc_6505
.text:0000000000007089                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000708D                 jz      loc_6505
.text:0000000000007093                 cmp     r15, [rbp+src]
.text:000000000000709A                 mov     r12, rax
.text:000000000000709D                 setz    dl
.text:00000000000070A0                 test    r15, r15
.text:00000000000070A3                 jnz     loc_686C
.text:00000000000070A9                 nop     dword ptr [rax+00000000h]
.text:00000000000070B0
.text:00000000000070B0 loc_70B0:                               ; CODE XREF: vasnprintf+4C6↑j
.text:00000000000070B0                                         ; vasnprintf+4CE↑j
.text:00000000000070B0                 mov     rdi, r12        ; size
.text:00000000000070B3                 mov     byte ptr [rbp+n], dl
.text:00000000000070B9                 call    _malloc
.text:00000000000070BE                 test    rax, rax
.text:00000000000070C1                 mov     rcx, rax
.text:00000000000070C4                 movzx   edx, byte ptr [rbp+n]
.text:00000000000070CB                 jz      loc_6505
.text:00000000000070D1                 test    r14, r14
.text:00000000000070D4                 jz      loc_7270
.text:00000000000070DA                 test    dl, dl
.text:00000000000070DC                 jz      loc_7270
.text:00000000000070E2                 mov     rsi, r15        ; src
.text:00000000000070E5                 mov     rdx, r14        ; n
.text:00000000000070E8                 mov     rdi, rax        ; dest
.text:00000000000070EB                 call    _memcpy
.text:00000000000070F0                 mov     r15, rax
.text:00000000000070F3                 jmp     loc_688B
.text:00000000000070F3 ; ---------------------------------------------------------------------------
.text:00000000000070F8                 align 20h
.text:0000000000007100
.text:0000000000007100 loc_7100:                               ; CODE XREF: vasnprintf+402↑j
.text:0000000000007100                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000007103                 add     rbx, 1
.text:0000000000007107                 jmp     loc_67BB
.text:0000000000007107 ; ---------------------------------------------------------------------------
.text:000000000000710C                 align 10h
.text:0000000000007110
.text:0000000000007110 loc_7110:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000007110                                         ; DATA XREF: .rodata:jpt_6EA0↓o
.text:0000000000007110                 mov     [rax], r14b     ; jumptable 0000000000006EA0 case 18
.text:0000000000007113                 mov     rbx, r14
.text:0000000000007116                 jmp     loc_6E34
.text:0000000000007116 ; ---------------------------------------------------------------------------
.text:000000000000711B                 align 20h
.text:0000000000007120
.text:0000000000007120 loc_7120:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000007120                                         ; DATA XREF: .rodata:jpt_6EA0↓o
.text:0000000000007120                 mov     [rax], r14d     ; jumptable 0000000000006EA0 case 20
.text:0000000000007123                 mov     rbx, r14
.text:0000000000007126                 jmp     loc_6E34
.text:0000000000007126 ; ---------------------------------------------------------------------------
.text:000000000000712B                 align 10h
.text:0000000000007130
.text:0000000000007130 loc_7130:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000007130                                         ; DATA XREF: .rodata:jpt_6EA0↓o
.text:0000000000007130                 mov     [rax], r14w     ; jumptable 0000000000006EA0 case 19
.text:0000000000007134                 mov     rbx, r14
.text:0000000000007137                 jmp     loc_6E34
.text:0000000000007137 ; ---------------------------------------------------------------------------
.text:000000000000713C                 align 20h
.text:0000000000007140
.text:0000000000007140 loc_7140:                               ; CODE XREF: vasnprintf+B33↑j
.text:0000000000007140                                         ; vasnprintf+B3B↑j
.text:0000000000007140                 mov     rdi, r12        ; size
.text:0000000000007143                 mov     byte ptr [rbp+n], dl
.text:0000000000007149                 call    _malloc
.text:000000000000714E                 test    rax, rax
.text:0000000000007151                 mov     rcx, rax
.text:0000000000007154                 movzx   edx, byte ptr [rbp+n]
.text:000000000000715B                 jz      loc_6505
.text:0000000000007161                 test    r14, r14
.text:0000000000007164                 jz      loc_72A4
.text:000000000000716A                 test    dl, dl
.text:000000000000716C                 jz      loc_72A4
.text:0000000000007172                 mov     rsi, r15        ; src
.text:0000000000007175                 mov     rdx, r14        ; n
.text:0000000000007178                 mov     rdi, rax        ; dest
.text:000000000000717B                 call    _memcpy
.text:0000000000007180                 mov     r15, rax
.text:0000000000007183                 jmp     loc_6E2F
.text:0000000000007183 ; ---------------------------------------------------------------------------
.text:0000000000007188                 align 10h
.text:0000000000007190
.text:0000000000007190 loc_7190:                               ; CODE XREF: vasnprintf+BE8↑j
.text:0000000000007190                                         ; vasnprintf+BF0↑j
.text:0000000000007190                 mov     r15, r9
.text:0000000000007193                 jmp     loc_6644
.text:0000000000007193 ; ---------------------------------------------------------------------------
.text:0000000000007198                 align 20h
.text:00000000000071A0
.text:00000000000071A0 loc_71A0:                               ; CODE XREF: vasnprintf+869↑j
.text:00000000000071A0                 sub     rsp, 8
.text:00000000000071A4                 push    [rbp+var_3F0]
.text:00000000000071AA                 jmp     loc_6C25
.text:00000000000071AA ; ---------------------------------------------------------------------------
.text:00000000000071AF                 align 10h
.text:00000000000071B0
.text:00000000000071B0 loc_71B0:                               ; CODE XREF: vasnprintf+7DF↑j
.text:00000000000071B0                 sub     rsp, 8
.text:00000000000071B4                 push    [rbp+var_3F0]
.text:00000000000071BA                 sub     rsp, 10h
.text:00000000000071BE                 fstp    [rsp+450h+var_450]
.text:00000000000071C1                 jmp     loc_6CEB
.text:00000000000071C1 ; ---------------------------------------------------------------------------
.text:00000000000071C6                 align 10h
.text:00000000000071D0
.text:00000000000071D0 loc_71D0:                               ; CODE XREF: vasnprintf+5FC↑j
.text:00000000000071D0                 mov     rax, [rbp+n]
.text:00000000000071D7                 mov     edi, [rbp-424h]
.text:00000000000071DD                 movsxd  rbx, ecx
.text:00000000000071E0                 add     rbx, r14
.text:00000000000071E3                 mov     [rax], edi
.text:00000000000071E5                 jmp     loc_6E34
.text:00000000000071E5 ; ---------------------------------------------------------------------------
.text:00000000000071EA                 align 10h
.text:00000000000071F0
.text:00000000000071F0 loc_71F0:                               ; CODE XREF: vasnprintf+609↑j
.text:00000000000071F0                 cmp     r15, [rbp+src]
.text:00000000000071F7                 jz      short loc_7202
.text:00000000000071F9                 test    r15, r15
.text:00000000000071FC                 jnz     loc_72B9
.text:0000000000007202
.text:0000000000007202 loc_7202:                               ; CODE XREF: vasnprintf+E57↑j
.text:0000000000007202                                         ; vasnprintf+F21↓j
.text:0000000000007202                 mov     rax, [rbp+ptr]
.text:0000000000007209                 test    rax, rax
.text:000000000000720C                 jz      short loc_7216
.text:000000000000720E                 mov     rdi, rax        ; ptr
.text:0000000000007211                 call    _free
.text:0000000000007216
.text:0000000000007216 loc_7216:                               ; CODE XREF: vasnprintf+E6C↑j
.text:0000000000007216                 mov     rax, [rbp+var_408]
.text:000000000000721D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000007224                 add     rax, 20h ; ' '
.text:0000000000007228                 cmp     rdi, rax
.text:000000000000722B                 jz      short loc_7232
.text:000000000000722D                 call    _free
.text:0000000000007232
.text:0000000000007232 loc_7232:                               ; CODE XREF: vasnprintf+E8B↑j
.text:0000000000007232                 mov     rax, [rbp+var_410]
.text:0000000000007239                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000007240                 add     rax, 10h
.text:0000000000007244                 cmp     rdi, rax
.text:0000000000007247                 jz      short loc_724E
.text:0000000000007249                 call    _free
.text:000000000000724E
.text:000000000000724E loc_724E:                               ; CODE XREF: vasnprintf+EA7↑j
.text:000000000000724E                 mov     rax, [rbp+n]
.text:0000000000007255                 xor     r15d, r15d
.text:0000000000007258                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000725E                 jmp     loc_657F
.text:000000000000725E ; ---------------------------------------------------------------------------
.text:0000000000007263                 align 8
.text:0000000000007268
.text:0000000000007268 loc_7268:                               ; CODE XREF: vasnprintf+60↑j
.text:0000000000007268                 xor     r15d, r15d
.text:000000000000726B                 jmp     loc_657F
.text:0000000000007270 ; ---------------------------------------------------------------------------
.text:0000000000007270
.text:0000000000007270 loc_7270:                               ; CODE XREF: vasnprintf+D34↑j
.text:0000000000007270                                         ; vasnprintf+D3C↑j
.text:0000000000007270                 mov     r15, rcx
.text:0000000000007273                 jmp     loc_688B
.text:0000000000007273 ; ---------------------------------------------------------------------------
.text:0000000000007278                 align 20h
.text:0000000000007280
.text:0000000000007280 loc_7280:                               ; CODE XREF: vasnprintf+B10↑j
.text:0000000000007280                 js      loc_6505
.text:0000000000007286                 add     r12, r12
.text:0000000000007289                 cmp     r12, rax
.text:000000000000728C                 jnb     loc_6EC6
.text:0000000000007292
.text:0000000000007292 loc_7292:                               ; CODE XREF: vasnprintf+B1A↑j
.text:0000000000007292                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007296                 jz      loc_6505
.text:000000000000729C                 mov     r12, rax
.text:000000000000729F                 jmp     loc_6EC6
.text:00000000000072A4 ; ---------------------------------------------------------------------------
.text:00000000000072A4
.text:00000000000072A4 loc_72A4:                               ; CODE XREF: vasnprintf+DC4↑j
.text:00000000000072A4                                         ; vasnprintf+DCC↑j
.text:00000000000072A4                 mov     r15, rcx
.text:00000000000072A7                 jmp     loc_6E2F
.text:00000000000072AC ; ---------------------------------------------------------------------------
.text:00000000000072AC
.text:00000000000072AC loc_72AC:                               ; CODE XREF: vasnprintf+75C↑j
.text:00000000000072AC                 mov     rdi, r15        ; ptr
.text:00000000000072AF                 call    _free
.text:00000000000072B4                 jmp     loc_6B02
.text:00000000000072B9 ; ---------------------------------------------------------------------------
.text:00000000000072B9
.text:00000000000072B9 loc_72B9:                               ; CODE XREF: vasnprintf+E5C↑j
.text:00000000000072B9                 mov     rdi, r15        ; ptr
.text:00000000000072BC                 call    _free
.text:00000000000072C1                 jmp     loc_7202
.text:00000000000072C6 ; ---------------------------------------------------------------------------
.text:00000000000072C6
.text:00000000000072C6 def_68FB:                               ; CODE XREF: vasnprintf+2DD↑j
.text:00000000000072C6                                         ; vasnprintf+43E↑j ...
.text:00000000000072C6                 call    _abort          ; jumptable 00000000000068FB default case, case 0
.text:00000000000072C6                                         ; jumptable 0000000000006EA0 default case
.text:00000000000072C6 ; ---------------------------------------------------------------------------
.text:00000000000072CB                 align 10h
.text:00000000000072D0
.text:00000000000072D0 loc_72D0:                               ; CODE XREF: vasnprintf+73↑j
.text:00000000000072D0                 mov     rax, [rbp+var_408]
.text:00000000000072D7                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000072DE                 add     rax, 20h ; ' '
.text:00000000000072E2                 cmp     rdi, rax
.text:00000000000072E5                 jz      short loc_72EC
.text:00000000000072E7                 call    _free
.text:00000000000072EC
.text:00000000000072EC loc_72EC:                               ; CODE XREF: vasnprintf+F45↑j
.text:00000000000072EC                 mov     rax, [rbp+var_410]
.text:00000000000072F3                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000072FA                 add     rax, 10h
.text:00000000000072FE                 cmp     rdi, rax
.text:0000000000007301                 jz      short loc_7308
.text:0000000000007303                 call    _free
.text:0000000000007308
.text:0000000000007308 loc_7308:                               ; CODE XREF: vasnprintf+F61↑j
.text:0000000000007308                 call    ___errno_location
.text:000000000000730D                 xor     r15d, r15d
.text:0000000000007310                 mov     dword ptr [rax], 16h
.text:0000000000007316                 jmp     loc_657F
.text:000000000000731B ; ---------------------------------------------------------------------------
.text:000000000000731B
.text:000000000000731B loc_731B:                               ; CODE XREF: vasnprintf+2C1↑j
.text:000000000000731B                 mov     rbx, r14
.text:000000000000731E                 xor     eax, eax
.text:0000000000007320                 add     rbx, 1
.text:0000000000007324                 jb      loc_7430
.text:000000000000732A                 cmp     r12, rbx
.text:000000000000732D                 jnb     short loc_737C
.text:000000000000732F                 test    r12, r12
.text:0000000000007332                 jnz     loc_7469
.text:0000000000007338                 cmp     rbx, 0Ch
.text:000000000000733C                 ja      loc_744E
.text:0000000000007342                 mov     r12d, 0Ch
.text:0000000000007348
.text:0000000000007348 loc_7348:                               ; CODE XREF: vasnprintf+10C4↓j
.text:0000000000007348                                         ; vasnprintf+10D5↓j
.text:0000000000007348                 cmp     r15, [rbp+src]
.text:000000000000734F                 setz    r13b
.text:0000000000007353                 test    r15, r15
.text:0000000000007356                 jz      loc_73FC
.text:000000000000735C                 test    r13b, r13b
.text:000000000000735F                 jnz     loc_73FC
.text:0000000000007365                 mov     rsi, r12        ; size
.text:0000000000007368                 mov     rdi, r15        ; ptr
.text:000000000000736B                 call    _realloc
.text:0000000000007370                 test    rax, rax
.text:0000000000007373                 jz      loc_6FEB
.text:0000000000007379                 mov     r15, rax
.text:000000000000737C
.text:000000000000737C loc_737C:                               ; CODE XREF: vasnprintf+F8D↑j
.text:000000000000737C                                         ; vasnprintf+108B↓j ...
.text:000000000000737C                 cmp     r15, [rbp+src]
.text:0000000000007383                 mov     byte ptr [r15+r14], 0
.text:0000000000007388                 jz      short loc_73A1
.text:000000000000738A                 cmp     r12, rbx
.text:000000000000738D                 jbe     short loc_73A1
.text:000000000000738F                 mov     rdi, r15        ; ptr
.text:0000000000007392                 mov     rsi, rbx        ; size
.text:0000000000007395                 call    _realloc
.text:000000000000739A                 test    rax, rax
.text:000000000000739D                 cmovnz  r15, rax
.text:00000000000073A1
.text:00000000000073A1 loc_73A1:                               ; CODE XREF: vasnprintf+FE8↑j
.text:00000000000073A1                                         ; vasnprintf+FED↑j
.text:00000000000073A1                 mov     rax, [rbp+ptr]
.text:00000000000073A8                 test    rax, rax
.text:00000000000073AB                 jz      short loc_73B5
.text:00000000000073AD                 mov     rdi, rax        ; ptr
.text:00000000000073B0                 call    _free
.text:00000000000073B5
.text:00000000000073B5 loc_73B5:                               ; CODE XREF: vasnprintf+100B↑j
.text:00000000000073B5                 mov     rax, [rbp+var_408]
.text:00000000000073BC                 mov     rdi, [rbp+var_2B8] ; ptr
.text:00000000000073C3                 add     rax, 20h ; ' '
.text:00000000000073C7                 cmp     rdi, rax
.text:00000000000073CA                 jz      short loc_73D1
.text:00000000000073CC                 call    _free
.text:00000000000073D1
.text:00000000000073D1 loc_73D1:                               ; CODE XREF: vasnprintf+102A↑j
.text:00000000000073D1                 mov     rax, [rbp+var_410]
.text:00000000000073D8                 mov     rdi, [rbp+var_3A8] ; ptr
.text:00000000000073DF                 add     rax, 10h
.text:00000000000073E3                 cmp     rdi, rax
.text:00000000000073E6                 jz      short loc_73ED
.text:00000000000073E8                 call    _free
.text:00000000000073ED
.text:00000000000073ED loc_73ED:                               ; CODE XREF: vasnprintf+1046↑j
.text:00000000000073ED                 mov     rax, [rbp+var_418]
.text:00000000000073F4                 mov     [rax], r14
.text:00000000000073F7                 jmp     loc_657F
.text:00000000000073FC ; ---------------------------------------------------------------------------
.text:00000000000073FC
.text:00000000000073FC loc_73FC:                               ; CODE XREF: vasnprintf+FB6↑j
.text:00000000000073FC                                         ; vasnprintf+FBF↑j
.text:00000000000073FC                 mov     rdi, r12        ; size
.text:00000000000073FF                 call    _malloc
.text:0000000000007404                 test    rax, rax
.text:0000000000007407                 mov     rcx, rax
.text:000000000000740A                 jz      loc_6505
.text:0000000000007410                 test    r14, r14
.text:0000000000007413                 jz      short loc_7480
.text:0000000000007415                 test    r13b, r13b
.text:0000000000007418                 jz      short loc_7480
.text:000000000000741A                 mov     rsi, r15        ; src
.text:000000000000741D                 mov     rdx, r14        ; n
.text:0000000000007420                 mov     rdi, rax        ; dest
.text:0000000000007423                 call    _memcpy
.text:0000000000007428                 mov     r15, rax
.text:000000000000742B                 jmp     loc_737C
.text:0000000000007430 ; ---------------------------------------------------------------------------
.text:0000000000007430
.text:0000000000007430 loc_7430:                               ; CODE XREF: vasnprintf+F84↑j
.text:0000000000007430                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000007434                 mov     eax, 1
.text:0000000000007439                 jz      loc_737C
.text:000000000000743F                 test    r12, r12
.text:0000000000007442                 jz      loc_6505
.text:0000000000007448                 js      loc_6505
.text:000000000000744E
.text:000000000000744E loc_744E:                               ; CODE XREF: vasnprintf+F9C↑j
.text:000000000000744E                                         ; vasnprintf+10DB↓j
.text:000000000000744E                 test    rax, rax
.text:0000000000007451                 jnz     loc_6505
.text:0000000000007457                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000745B                 jz      loc_6505
.text:0000000000007461                 mov     r12, rbx
.text:0000000000007464                 jmp     loc_7348
.text:0000000000007469 ; ---------------------------------------------------------------------------
.text:0000000000007469
.text:0000000000007469 loc_7469:                               ; CODE XREF: vasnprintf+F92↑j
.text:0000000000007469                 js      loc_6505
.text:000000000000746F                 add     r12, r12
.text:0000000000007472                 cmp     r12, rbx
.text:0000000000007475                 jnb     loc_7348
.text:000000000000747B                 jmp     short loc_744E
.text:000000000000747B ; ---------------------------------------------------------------------------
.text:000000000000747D                 align 20h
.text:0000000000007480
.text:0000000000007480 loc_7480:                               ; CODE XREF: vasnprintf+1073↑j
.text:0000000000007480                                         ; vasnprintf+1078↑j
.text:0000000000007480                 mov     r15, rcx
.text:0000000000007483                 jmp     loc_737C
.text:0000000000007488 ; ---------------------------------------------------------------------------
.text:0000000000007488
.text:0000000000007488 loc_7488:                               ; CODE XREF: vasnprintf+627↑j
.text:0000000000007488                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000748C                 jz      loc_68B0
.text:0000000000007492                 jmp     loc_6511
.text:0000000000007497 ; ---------------------------------------------------------------------------
.text:0000000000007497
.text:0000000000007497 loc_7497:                               ; CODE XREF: vasnprintf+1EF↑j
.text:0000000000007497                 call    ___stack_chk_fail
.text:000000000000749C ; ---------------------------------------------------------------------------
.text:000000000000749C
.text:000000000000749C loc_749C:                               ; CODE XREF: vasnprintf+495↑j
.text:000000000000749C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000074A0                 mov     edx, 1
.text:00000000000074A5                 jz      loc_688B
.text:00000000000074AB                 test    r12, r12
.text:00000000000074AE                 jz      loc_6505
.text:00000000000074B4                 jns     loc_7080
.text:00000000000074BA                 jmp     loc_6505
.text:00000000000074BA ; } // starts at 63A0
.text:00000000000074BA vasnprintf      endp
.text:00000000000074BA
.text:00000000000074BA ; ---------------------------------------------------------------------------
.text:00000000000074BF                 align 20h
.text:00000000000074C0
.text:00000000000074C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074C0
.text:00000000000074C0
.text:00000000000074C0                 public printf_fetchargs
.text:00000000000074C0 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:00000000000074C0 ; __unwind {
.text:00000000000074C0                 cmp     qword ptr [rsi], 0
.text:00000000000074C4                 mov     rax, [rsi+8]
.text:00000000000074C8                 jz      short loc_752D
.text:00000000000074CA                 lea     r8, jpt_74F6
.text:00000000000074D1                 lea     r10, wide_null_string_2696
.text:00000000000074D8                 lea     r9, aNull       ; "(NULL)"
.text:00000000000074DF                 xor     ecx, ecx
.text:00000000000074E1                 nop     dword ptr [rax+00000000h]
.text:00000000000074E8
.text:00000000000074E8 loc_74E8:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:00000000000074E8                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:00000000000074EB                 ja      short def_74F6  ; jumptable 00000000000074F6 default case, case 0
.text:00000000000074ED                 mov     edx, [rax]
.text:00000000000074EF                 movsxd  rdx, ds:(jpt_74F6 - 95F0h)[r8+rdx*4]
.text:00000000000074F3                 add     rdx, r8
.text:00000000000074F6                 jmp     rdx             ; switch jump
.text:00000000000074F6 ; ---------------------------------------------------------------------------
.text:00000000000074F8                 align 20h
.text:0000000000007500
.text:0000000000007500 loc_7500:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007500                                         ; DATA XREF: .rodata:jpt_74F6↓o
.text:0000000000007500                 mov     rdx, [rdi+8]    ; jumptable 00000000000074F6 case 12
.text:0000000000007504                 add     rdx, 0Fh
.text:0000000000007508                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000000750C                 lea     r11, [rdx+10h]
.text:0000000000007510                 mov     [rdi+8], r11
.text:0000000000007514                 fld     tbyte ptr [rdx]
.text:0000000000007516                 fstp    tbyte ptr [rax+10h]
.text:0000000000007519                 nop     dword ptr [rax+00000000h]
.text:0000000000007520
.text:0000000000007520 loc_7520:                               ; CODE XREF: printf_fetchargs+98↓j
.text:0000000000007520                                         ; printf_fetchargs+BA↓j ...
.text:0000000000007520                 add     rcx, 1
.text:0000000000007524                 add     rax, 20h ; ' '
.text:0000000000007528                 cmp     [rsi], rcx
.text:000000000000752B                 ja      short loc_74E8
.text:000000000000752D
.text:000000000000752D loc_752D:                               ; CODE XREF: printf_fetchargs+8↑j
.text:000000000000752D                 xor     eax, eax
.text:000000000000752F                 retn
.text:0000000000007530 ; ---------------------------------------------------------------------------
.text:0000000000007530
.text:0000000000007530 def_74F6:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:0000000000007530                                         ; printf_fetchargs+36↑j
.text:0000000000007530                                         ; DATA XREF: ...
.text:0000000000007530                 mov     eax, 0FFFFFFFFh ; jumptable 00000000000074F6 default case, case 0
.text:0000000000007535                 retn
.text:0000000000007536 ; ---------------------------------------------------------------------------
.text:0000000000007536
.text:0000000000007536 loc_7536:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007536                                         ; DATA XREF: .rodata:jpt_74F6↓o
.text:0000000000007536                 mov     r11d, [rdi]     ; jumptable 00000000000074F6 cases 7-10,17-22
.text:0000000000007539                 cmp     r11d, 2Fh ; '/'
.text:000000000000753D                 ja      loc_767A
.text:0000000000007543                 mov     edx, r11d
.text:0000000000007546                 add     rdx, [rdi+10h]
.text:000000000000754A                 add     r11d, 8
.text:000000000000754E                 mov     [rdi], r11d
.text:0000000000007551
.text:0000000000007551 loc_7551:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:0000000000007551                 mov     rdx, [rdx]
.text:0000000000007554                 mov     [rax+10h], rdx
.text:0000000000007558                 jmp     short loc_7520
.text:000000000000755A ; ---------------------------------------------------------------------------
.text:000000000000755A
.text:000000000000755A loc_755A:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000755A                                         ; DATA XREF: .rodata:jpt_74F6↓o
.text:000000000000755A                 mov     r11d, [rdi]     ; jumptable 00000000000074F6 cases 5,6,13,14
.text:000000000000755D                 cmp     r11d, 2Fh ; '/'
.text:0000000000007561                 ja      loc_769C
.text:0000000000007567                 mov     edx, r11d
.text:000000000000756A                 add     rdx, [rdi+10h]
.text:000000000000756E                 add     r11d, 8
.text:0000000000007572                 mov     [rdi], r11d
.text:0000000000007575
.text:0000000000007575 loc_7575:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:0000000000007575                 mov     edx, [rdx]
.text:0000000000007577                 mov     [rax+10h], edx
.text:000000000000757A                 jmp     short loc_7520
.text:000000000000757C ; ---------------------------------------------------------------------------
.text:000000000000757C
.text:000000000000757C loc_757C:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000757C                                         ; DATA XREF: .rodata:jpt_74F6↓o
.text:000000000000757C                 mov     r11d, [rdi]     ; jumptable 00000000000074F6 cases 1,2
.text:000000000000757F                 cmp     r11d, 2Fh ; '/'
.text:0000000000007583                 ja      loc_768B
.text:0000000000007589                 mov     edx, r11d
.text:000000000000758C                 add     rdx, [rdi+10h]
.text:0000000000007590                 add     r11d, 8
.text:0000000000007594                 mov     [rdi], r11d
.text:0000000000007597
.text:0000000000007597 loc_7597:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:0000000000007597                 mov     edx, [rdx]
.text:0000000000007599                 mov     [rax+10h], dl
.text:000000000000759C                 jmp     short loc_7520
.text:000000000000759E ; ---------------------------------------------------------------------------
.text:000000000000759E
.text:000000000000759E loc_759E:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000759E                                         ; DATA XREF: .rodata:jpt_74F6↓o
.text:000000000000759E                 mov     r11d, [rdi]     ; jumptable 00000000000074F6 cases 3,4
.text:00000000000075A1                 cmp     r11d, 2Fh ; '/'
.text:00000000000075A5                 ja      loc_764A
.text:00000000000075AB                 mov     edx, r11d
.text:00000000000075AE                 add     rdx, [rdi+10h]
.text:00000000000075B2                 add     r11d, 8
.text:00000000000075B6                 mov     [rdi], r11d
.text:00000000000075B9
.text:00000000000075B9 loc_75B9:                               ; CODE XREF: printf_fetchargs+196↓j
.text:00000000000075B9                 mov     edx, [rdx]
.text:00000000000075BB                 mov     [rax+10h], dx
.text:00000000000075BF                 jmp     loc_7520
.text:00000000000075C4 ; ---------------------------------------------------------------------------
.text:00000000000075C4
.text:00000000000075C4 loc_75C4:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000075C4                                         ; DATA XREF: .rodata:jpt_74F6↓o
.text:00000000000075C4                 mov     r11d, [rdi]     ; jumptable 00000000000074F6 case 15
.text:00000000000075C7                 cmp     r11d, 2Fh ; '/'
.text:00000000000075CB                 ja      loc_765B
.text:00000000000075D1                 mov     edx, r11d
.text:00000000000075D4                 add     rdx, [rdi+10h]
.text:00000000000075D8                 add     r11d, 8
.text:00000000000075DC                 mov     [rdi], r11d
.text:00000000000075DF
.text:00000000000075DF loc_75DF:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:00000000000075DF                 mov     rdx, [rdx]
.text:00000000000075E2                 test    rdx, rdx
.text:00000000000075E5                 cmovz   rdx, r9
.text:00000000000075E9                 mov     [rax+10h], rdx
.text:00000000000075ED                 jmp     loc_7520
.text:00000000000075F2 ; ---------------------------------------------------------------------------
.text:00000000000075F2
.text:00000000000075F2 loc_75F2:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000075F2                                         ; DATA XREF: .rodata:jpt_74F6↓o
.text:00000000000075F2                 mov     r11d, [rdi+4]   ; jumptable 00000000000074F6 case 11
.text:00000000000075F6                 cmp     r11d, 0AFh
.text:00000000000075FD                 ja      loc_76AD
.text:0000000000007603                 mov     edx, r11d
.text:0000000000007606                 add     rdx, [rdi+10h]
.text:000000000000760A                 add     r11d, 10h
.text:000000000000760E                 mov     [rdi+4], r11d
.text:0000000000007612
.text:0000000000007612 loc_7612:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:0000000000007612                 movsd   xmm0, qword ptr [rdx]
.text:0000000000007616                 movsd   qword ptr [rax+10h], xmm0
.text:000000000000761B                 jmp     loc_7520
.text:0000000000007620 ; ---------------------------------------------------------------------------
.text:0000000000007620
.text:0000000000007620 loc_7620:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007620                                         ; DATA XREF: .rodata:jpt_74F6↓o
.text:0000000000007620                 mov     r11d, [rdi]     ; jumptable 00000000000074F6 case 16
.text:0000000000007623                 cmp     r11d, 2Fh ; '/'
.text:0000000000007627                 ja      short loc_766C
.text:0000000000007629                 mov     edx, r11d
.text:000000000000762C                 add     rdx, [rdi+10h]
.text:0000000000007630                 add     r11d, 8
.text:0000000000007634                 mov     [rdi], r11d
.text:0000000000007637
.text:0000000000007637 loc_7637:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:0000000000007637                 mov     rdx, [rdx]
.text:000000000000763A                 test    rdx, rdx
.text:000000000000763D                 cmovz   rdx, r10
.text:0000000000007641                 mov     [rax+10h], rdx
.text:0000000000007645                 jmp     loc_7520
.text:000000000000764A ; ---------------------------------------------------------------------------
.text:000000000000764A
.text:000000000000764A loc_764A:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:000000000000764A                 mov     rdx, [rdi+8]
.text:000000000000764E                 lea     r11, [rdx+8]
.text:0000000000007652                 mov     [rdi+8], r11
.text:0000000000007656                 jmp     loc_75B9
.text:000000000000765B ; ---------------------------------------------------------------------------
.text:000000000000765B
.text:000000000000765B loc_765B:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:000000000000765B                 mov     rdx, [rdi+8]
.text:000000000000765F                 lea     r11, [rdx+8]
.text:0000000000007663                 mov     [rdi+8], r11
.text:0000000000007667                 jmp     loc_75DF
.text:000000000000766C ; ---------------------------------------------------------------------------
.text:000000000000766C
.text:000000000000766C loc_766C:                               ; CODE XREF: printf_fetchargs+167↑j
.text:000000000000766C                 mov     rdx, [rdi+8]
.text:0000000000007670                 lea     r11, [rdx+8]
.text:0000000000007674                 mov     [rdi+8], r11
.text:0000000000007678                 jmp     short loc_7637
.text:000000000000767A ; ---------------------------------------------------------------------------
.text:000000000000767A
.text:000000000000767A loc_767A:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:000000000000767A                 mov     rdx, [rdi+8]
.text:000000000000767E                 lea     r11, [rdx+8]
.text:0000000000007682                 mov     [rdi+8], r11
.text:0000000000007686                 jmp     loc_7551
.text:000000000000768B ; ---------------------------------------------------------------------------
.text:000000000000768B
.text:000000000000768B loc_768B:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:000000000000768B                 mov     rdx, [rdi+8]
.text:000000000000768F                 lea     r11, [rdx+8]
.text:0000000000007693                 mov     [rdi+8], r11
.text:0000000000007697                 jmp     loc_7597
.text:000000000000769C ; ---------------------------------------------------------------------------
.text:000000000000769C
.text:000000000000769C loc_769C:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:000000000000769C                 mov     rdx, [rdi+8]
.text:00000000000076A0                 lea     r11, [rdx+8]
.text:00000000000076A4                 mov     [rdi+8], r11
.text:00000000000076A8                 jmp     loc_7575
.text:00000000000076AD ; ---------------------------------------------------------------------------
.text:00000000000076AD
.text:00000000000076AD loc_76AD:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:00000000000076AD                 mov     rdx, [rdi+8]
.text:00000000000076B1                 lea     r11, [rdx+8]
.text:00000000000076B5                 mov     [rdi+8], r11
.text:00000000000076B9                 jmp     loc_7612
.text:00000000000076B9 ; } // starts at 74C0
.text:00000000000076B9 printf_fetchargs endp
.text:00000000000076B9
.text:00000000000076B9 ; ---------------------------------------------------------------------------
.text:00000000000076BE                 align 20h
.text:00000000000076C0 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:00000000000076C0 ; Format      : ELF64 for x86-64 (Relocatable)
.text:00000000000076C0 ;
.text:00000000000076C0 ; Source File : 'printf-parse.c'
.text:00000000000076C0
.text:00000000000076C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076C0
.text:00000000000076C0 ; Attributes: info_from_lumina
.text:00000000000076C0
.text:00000000000076C0 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:00000000000076C0                 public printf_parse
.text:00000000000076C0 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:00000000000076C0
.text:00000000000076C0 src             = qword ptr -80h
.text:00000000000076C0 var_78          = qword ptr -78h
.text:00000000000076C0 var_70          = qword ptr -70h
.text:00000000000076C0 var_68          = qword ptr -68h
.text:00000000000076C0 var_60          = qword ptr -60h
.text:00000000000076C0 var_58          = qword ptr -58h
.text:00000000000076C0 var_50          = qword ptr -50h
.text:00000000000076C0 var_48          = qword ptr -48h
.text:00000000000076C0 var_40          = qword ptr -40h
.text:00000000000076C0
.text:00000000000076C0 ; __unwind {
.text:00000000000076C0                 push    r15
.text:00000000000076C2                 push    r14
.text:00000000000076C4                 lea     rcx, [rsi+20h]
.text:00000000000076C8                 push    r13
.text:00000000000076CA                 push    r12
.text:00000000000076CC                 lea     rax, [rdx+10h]
.text:00000000000076D0                 push    rbp
.text:00000000000076D1                 push    rbx
.text:00000000000076D2                 mov     r14, rsi
.text:00000000000076D5                 mov     r15, rdx
.text:00000000000076D8                 xor     ebx, ebx
.text:00000000000076DA                 mov     r9d, 7
.text:00000000000076E0                 sub     rsp, 58h
.text:00000000000076E4                 mov     r10d, 7
.text:00000000000076EA                 mov     qword ptr [rsi], 0
.text:00000000000076F1                 mov     [rsi+8], rcx
.text:00000000000076F5                 mov     [rsp+88h+var_60], rcx
.text:00000000000076FA                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000007701                 mov     qword ptr [rdx], 0
.text:0000000000007708                 mov     [rsp+88h+src], rax
.text:000000000000770D                 mov     [rdx+8], rax
.text:0000000000007711                 mov     [rsp+88h+var_70], 0
.text:000000000000771A                 mov     [rsp+88h+var_78], 0
.text:0000000000007723                 mov     [rsp+88h+var_68], 0
.text:000000000000772C                 jmp     short loc_773B
.text:000000000000772C ; ---------------------------------------------------------------------------
.text:000000000000772E                 align 10h
.text:0000000000007730
.text:0000000000007730 loc_7730:                               ; CODE XREF: printf_parse+80↓j
.text:0000000000007730                 cmp     al, 25h ; '%'
.text:0000000000007732                 lea     rbp, [rdi+1]
.text:0000000000007736                 jz      short loc_7778
.text:0000000000007738
.text:0000000000007738 loc_7738:                               ; CODE XREF: printf_parse+35B↓j
.text:0000000000007738                                         ; printf_parse+364↓j
.text:0000000000007738                 mov     rdi, rbp
.text:000000000000773B
.text:000000000000773B loc_773B:                               ; CODE XREF: printf_parse+6C↑j
.text:000000000000773B                 movzx   eax, byte ptr [rdi]
.text:000000000000773E                 test    al, al
.text:0000000000007740                 jnz     short loc_7730
.text:0000000000007742                 lea     rax, [rbx+rbx*4]
.text:0000000000007746                 lea     rax, [rbx+rax*2]
.text:000000000000774A                 mov     [rcx+rax*8], rdi
.text:000000000000774E                 mov     rax, [rsp+88h+var_78]
.text:0000000000007753                 mov     [r14+10h], rax
.text:0000000000007757                 mov     rax, [rsp+88h+var_70]
.text:000000000000775C                 mov     [r14+18h], rax
.text:0000000000007760                 xor     eax, eax
.text:0000000000007762
.text:0000000000007762 loc_7762:                               ; CODE XREF: printf_parse+87E↓j
.text:0000000000007762                                         ; printf_parse+B1C↓j
.text:0000000000007762                 add     rsp, 58h
.text:0000000000007766                 pop     rbx
.text:0000000000007767                 pop     rbp
.text:0000000000007768                 pop     r12
.text:000000000000776A                 pop     r13
.text:000000000000776C                 pop     r14
.text:000000000000776E                 pop     r15
.text:0000000000007770                 retn
.text:0000000000007770 ; ---------------------------------------------------------------------------
.text:0000000000007771                 align 8
.text:0000000000007778
.text:0000000000007778 loc_7778:                               ; CODE XREF: printf_parse+76↑j
.text:0000000000007778                 lea     rax, [rbx+rbx*4]
.text:000000000000777C                 mov     r13, r8
.text:000000000000777F                 lea     rax, [rbx+rax*2]
.text:0000000000007783                 lea     r12, [rcx+rax*8]
.text:0000000000007787                 mov     [r12], rdi
.text:000000000000778B                 mov     dword ptr [r12+10h], 0
.text:0000000000007794                 mov     qword ptr [r12+18h], 0
.text:000000000000779D                 mov     qword ptr [r12+20h], 0
.text:00000000000077A6                 mov     [r12+28h], r8
.text:00000000000077AB                 mov     qword ptr [r12+30h], 0
.text:00000000000077B4                 mov     qword ptr [r12+38h], 0
.text:00000000000077BD                 mov     [r12+40h], r8
.text:00000000000077C2                 mov     [r12+50h], r8
.text:00000000000077C7                 movzx   ebx, byte ptr [rdi+1]
.text:00000000000077CB                 lea     eax, [rbx-30h]
.text:00000000000077CE                 cmp     al, 9
.text:00000000000077D0                 ja      short loc_780E
.text:00000000000077D2                 jmp     loc_7C0A
.text:00000000000077D2 ; ---------------------------------------------------------------------------
.text:00000000000077D7                 align 20h
.text:00000000000077E0
.text:00000000000077E0 loc_77E0:                               ; CODE XREF: printf_parse+158↓j
.text:00000000000077E0                 cmp     bl, 2Dh ; '-'
.text:00000000000077E3                 jz      short loc_7828
.text:00000000000077E5                 cmp     bl, 2Bh ; '+'
.text:00000000000077E8                 jz      short loc_7830
.text:00000000000077EA                 cmp     bl, 20h ; ' '
.text:00000000000077ED                 jz      short loc_7840
.text:00000000000077EF                 cmp     bl, 23h ; '#'
.text:00000000000077F2                 jz      short loc_7850
.text:00000000000077F4                 cmp     bl, 30h ; '0'
.text:00000000000077F7                 jz      short loc_7860
.text:00000000000077F9                 cmp     bl, 49h ; 'I'
.text:00000000000077FC                 jnz     short loc_7870
.text:00000000000077FE                 or      dword ptr [r12+10h], 40h
.text:0000000000007804                 nop     dword ptr [rax+00h]
.text:0000000000007808
.text:0000000000007808 loc_7808:                               ; CODE XREF: printf_parse+160↓j
.text:0000000000007808                                         ; printf_parse+16E↓j ...
.text:0000000000007808                 movzx   ebx, byte ptr [rax]
.text:000000000000780B                 mov     rbp, rax
.text:000000000000780E
.text:000000000000780E loc_780E:                               ; CODE XREF: printf_parse+110↑j
.text:000000000000780E                                         ; printf_parse+565↓j ...
.text:000000000000780E                 lea     rax, [rbp+1]
.text:0000000000007812                 cmp     bl, 27h ; '''
.text:0000000000007815                 mov     rdx, rax
.text:0000000000007818                 jnz     short loc_77E0
.text:000000000000781A                 or      dword ptr [r12+10h], 1
.text:0000000000007820                 jmp     short loc_7808
.text:0000000000007820 ; ---------------------------------------------------------------------------
.text:0000000000007822                 align 8
.text:0000000000007828
.text:0000000000007828 loc_7828:                               ; CODE XREF: printf_parse+123↑j
.text:0000000000007828                 or      dword ptr [r12+10h], 2
.text:000000000000782E                 jmp     short loc_7808
.text:0000000000007830 ; ---------------------------------------------------------------------------
.text:0000000000007830
.text:0000000000007830 loc_7830:                               ; CODE XREF: printf_parse+128↑j
.text:0000000000007830                 or      dword ptr [r12+10h], 4
.text:0000000000007836                 jmp     short loc_7808
.text:0000000000007836 ; ---------------------------------------------------------------------------
.text:0000000000007838                 align 20h
.text:0000000000007840
.text:0000000000007840 loc_7840:                               ; CODE XREF: printf_parse+12D↑j
.text:0000000000007840                 or      dword ptr [r12+10h], 8
.text:0000000000007846                 jmp     short loc_7808
.text:0000000000007846 ; ---------------------------------------------------------------------------
.text:0000000000007848                 align 10h
.text:0000000000007850
.text:0000000000007850 loc_7850:                               ; CODE XREF: printf_parse+132↑j
.text:0000000000007850                 or      dword ptr [r12+10h], 10h
.text:0000000000007856                 jmp     short loc_7808
.text:0000000000007856 ; ---------------------------------------------------------------------------
.text:0000000000007858                 align 20h
.text:0000000000007860
.text:0000000000007860 loc_7860:                               ; CODE XREF: printf_parse+137↑j
.text:0000000000007860                 or      dword ptr [r12+10h], 20h
.text:0000000000007866                 jmp     short loc_7808
.text:0000000000007866 ; ---------------------------------------------------------------------------
.text:0000000000007868                 align 10h
.text:0000000000007870
.text:0000000000007870 loc_7870:                               ; CODE XREF: printf_parse+13C↑j
.text:0000000000007870                 cmp     bl, 2Ah ; '*'
.text:0000000000007873                 jz      loc_7A29
.text:0000000000007879                 lea     ecx, [rbx-30h]
.text:000000000000787C                 cmp     cl, 9
.text:000000000000787F                 jbe     loc_7C97
.text:0000000000007885
.text:0000000000007885 loc_7885:                               ; CODE XREF: printf_parse+629↓j
.text:0000000000007885                                         ; printf_parse+96C↓j
.text:0000000000007885                 cmp     bl, 2Eh ; '.'
.text:0000000000007888                 jz      loc_7B5F
.text:000000000000788E
.text:000000000000788E loc_788E:                               ; CODE XREF: printf_parse+499↓j
.text:000000000000788E                                         ; printf_parse+545↓j ...
.text:000000000000788E                 xor     eax, eax
.text:0000000000007890                 mov     esi, 1
.text:0000000000007895                 jmp     short loc_78C7
.text:0000000000007895 ; ---------------------------------------------------------------------------
.text:0000000000007897                 align 20h
.text:00000000000078A0
.text:00000000000078A0 loc_78A0:                               ; CODE XREF: printf_parse+20E↓j
.text:00000000000078A0                 cmp     bl, 4Ch ; 'L'
.text:00000000000078A3                 jz      short loc_78E0
.text:00000000000078A5                 cmp     bl, 6Ch ; 'l'
.text:00000000000078A8                 jz      short loc_78C0
.text:00000000000078AA                 cmp     bl, 6Ah ; 'j'
.text:00000000000078AD                 jz      short loc_78C0
.text:00000000000078AF                 mov     edx, ebx
.text:00000000000078B1                 and     edx, 0FFFFFFDFh
.text:00000000000078B4                 cmp     dl, 5Ah ; 'Z'
.text:00000000000078B7                 jz      short loc_78C0
.text:00000000000078B9                 cmp     bl, 74h ; 't'
.text:00000000000078BC                 jnz     short loc_78E8
.text:00000000000078BE                 xchg    ax, ax
.text:00000000000078C0
.text:00000000000078C0 loc_78C0:                               ; CODE XREF: printf_parse+1E8↑j
.text:00000000000078C0                                         ; printf_parse+1ED↑j ...
.text:00000000000078C0                 add     eax, 8
.text:00000000000078C3
.text:00000000000078C3 loc_78C3:                               ; CODE XREF: printf_parse+21B↓j
.text:00000000000078C3                                         ; printf_parse+223↓j
.text:00000000000078C3                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000078C7
.text:00000000000078C7 loc_78C7:                               ; CODE XREF: printf_parse+1D5↑j
.text:00000000000078C7                 add     rbp, 1
.text:00000000000078CB                 cmp     bl, 68h ; 'h'
.text:00000000000078CE                 jnz     short loc_78A0
.text:00000000000078D0                 mov     ecx, eax
.text:00000000000078D2                 mov     edx, esi
.text:00000000000078D4                 and     ecx, 1
.text:00000000000078D7                 shl     edx, cl
.text:00000000000078D9                 or      eax, edx
.text:00000000000078DB                 jmp     short loc_78C3
.text:00000000000078DB ; ---------------------------------------------------------------------------
.text:00000000000078DD                 align 20h
.text:00000000000078E0
.text:00000000000078E0 loc_78E0:                               ; CODE XREF: printf_parse+1E3↑j
.text:00000000000078E0                 or      eax, 4
.text:00000000000078E3                 jmp     short loc_78C3
.text:00000000000078E3 ; ---------------------------------------------------------------------------
.text:00000000000078E5                 align 8
.text:00000000000078E8
.text:00000000000078E8 loc_78E8:                               ; CODE XREF: printf_parse+1FC↑j
.text:00000000000078E8                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:00000000000078EB                 cmp     dl, 53h
.text:00000000000078EE                 ja      def_7905        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000078F4                 lea     rcx, jpt_7905
.text:00000000000078FB                 movzx   edx, dl
.text:00000000000078FE                 movsxd  rdx, ds:(jpt_7905 - 966Ch)[rcx+rdx*4]
.text:0000000000007902                 add     rdx, rcx
.text:0000000000007905                 jmp     rdx             ; switch jump
.text:0000000000007907 ; ---------------------------------------------------------------------------
.text:0000000000007907
.text:0000000000007907 loc_7907:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007907                                         ; DATA XREF: .rodata:jpt_7905↓o
.text:0000000000007907                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000000790D                 mov     ebx, 73h ; 's'
.text:0000000000007912                 nop     word ptr [rax+rax+00h]
.text:0000000000007918
.text:0000000000007918 loc_7918:                               ; CODE XREF: printf_parse+705↓j
.text:0000000000007918                                         ; printf_parse+70D↓j ...
.text:0000000000007918                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000791C                 jz      loc_7FD7
.text:0000000000007922                 mov     [r12+50h], r13
.text:0000000000007927
.text:0000000000007927 loc_7927:                               ; CODE XREF: printf_parse+939↓j
.text:0000000000007927                 cmp     r9, r13
.text:000000000000792A                 mov     rcx, [r15+8]
.text:000000000000792E                 jbe     loc_7F50
.text:0000000000007934
.text:0000000000007934 loc_7934:                               ; CODE XREF: printf_parse+912↓j
.text:0000000000007934                 mov     rax, [r15]
.text:0000000000007937                 mov     rdx, rax
.text:000000000000793A                 shl     rdx, 5
.text:000000000000793E                 add     rdx, rcx
.text:0000000000007941                 cmp     rax, r13
.text:0000000000007944                 ja      short loc_7966
.text:0000000000007946                 db      2Eh
.text:0000000000007946                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007950
.text:0000000000007950 loc_7950:                               ; CODE XREF: printf_parse+2A1↓j
.text:0000000000007950                 add     rax, 1
.text:0000000000007954                 mov     dword ptr [rdx], 0
.text:000000000000795A                 add     rdx, 20h ; ' '
.text:000000000000795E                 cmp     rax, r13
.text:0000000000007961                 jbe     short loc_7950
.text:0000000000007963                 mov     [r15], rax
.text:0000000000007966
.text:0000000000007966 loc_7966:                               ; CODE XREF: printf_parse+284↑j
.text:0000000000007966                 shl     r13, 5
.text:000000000000796A                 lea     rax, [rcx+r13]
.text:000000000000796E                 mov     edx, [rax]
.text:0000000000007970                 test    edx, edx
.text:0000000000007972                 jnz     loc_7F43
.text:0000000000007978                 mov     [rax], r11d
.text:000000000000797B
.text:000000000000797B loc_797B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000797B                                         ; printf_parse+886↓j
.text:000000000000797B                                         ; DATA XREF: ...
.text:000000000000797B                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:0000000000007980                 mov     rax, [r14]
.text:0000000000007983                 mov     [r12+8], rbp
.text:0000000000007988                 lea     rbx, [rax+1]
.text:000000000000798C                 cmp     r10, rbx
.text:000000000000798F                 mov     [r14], rbx
.text:0000000000007992                 ja      loc_7A20
.text:0000000000007998                 test    r10, r10
.text:000000000000799B                 js      loc_8347
.text:00000000000079A1                 add     r10, r10
.text:00000000000079A4                 mov     rax, 2E8BA2E8BA2E8BAh
.text:00000000000079AE                 cmp     r10, rax
.text:00000000000079B1                 ja      loc_8347
.text:00000000000079B7                 lea     rax, [r10+r10*4]
.text:00000000000079BB                 mov     rdi, [r14+8]    ; ptr
.text:00000000000079BF                 cmp     [rsp+88h+var_60], rdi
.text:00000000000079C4                 mov     [rsp+88h+var_48], r9
.text:00000000000079C9                 mov     [rsp+88h+var_50], r10
.text:00000000000079CE                 lea     rax, [r10+rax*2]
.text:00000000000079D2                 mov     [rsp+88h+var_58], r8
.text:00000000000079D7                 lea     rsi, ds:0[rax*8] ; size
.text:00000000000079DF                 jz      loc_809D
.text:00000000000079E5                 call    _realloc        ; PIC mode
.text:00000000000079EA                 test    rax, rax
.text:00000000000079ED                 mov     rcx, rax
.text:00000000000079F0                 mov     r8, [rsp+88h+var_58]
.text:00000000000079F5                 mov     r10, [rsp+88h+var_50]
.text:00000000000079FA                 mov     r9, [rsp+88h+var_48]
.text:00000000000079FF                 jz      loc_8347
.text:0000000000007A05                 mov     rax, [rsp+88h+var_60]
.text:0000000000007A0A                 cmp     rax, [r14+8]
.text:0000000000007A0E                 mov     rbx, [r14]
.text:0000000000007A11                 jz      loc_80C0
.text:0000000000007A17
.text:0000000000007A17 loc_7A17:                               ; CODE XREF: printf_parse+A3D↓j
.text:0000000000007A17                 mov     [r14+8], rcx
.text:0000000000007A1B                 jmp     loc_7738
.text:0000000000007A20 ; ---------------------------------------------------------------------------
.text:0000000000007A20
.text:0000000000007A20 loc_7A20:                               ; CODE XREF: printf_parse+2D2↑j
.text:0000000000007A20                 mov     rcx, [r14+8]
.text:0000000000007A24                 jmp     loc_7738
.text:0000000000007A29 ; ---------------------------------------------------------------------------
.text:0000000000007A29
.text:0000000000007A29 loc_7A29:                               ; CODE XREF: printf_parse+1B3↑j
.text:0000000000007A29                 mov     rsi, [rsp+88h+var_78]
.text:0000000000007A2E                 mov     ecx, 1
.text:0000000000007A33                 mov     [r12+18h], rbp
.text:0000000000007A38                 mov     [r12+20h], rax
.text:0000000000007A3D                 test    rsi, rsi
.text:0000000000007A40                 cmovnz  rcx, rsi
.text:0000000000007A44                 mov     [rsp+88h+var_78], rcx
.text:0000000000007A49                 movzx   ecx, byte ptr [rbp+1]
.text:0000000000007A4D                 lea     esi, [rcx-30h]
.text:0000000000007A50                 cmp     sil, 9
.text:0000000000007A54                 jbe     loc_7D35
.text:0000000000007A5A
.text:0000000000007A5A loc_7A5A:                               ; CODE XREF: printf_parse+68D↓j
.text:0000000000007A5A                 mov     rsi, [rsp+88h+var_68]
.text:0000000000007A5F                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007A63                 lea     rdx, [rsi+1]
.text:0000000000007A67                 mov     [r12+28h], rsi
.text:0000000000007A6C                 jz      def_7905        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007A72                 mov     rbx, [rsp+88h+var_68]
.text:0000000000007A77                 mov     rbp, rax
.text:0000000000007A7A                 mov     [rsp+88h+var_68], rdx
.text:0000000000007A7F
.text:0000000000007A7F loc_7A7F:                               ; CODE XREF: printf_parse+6F7↓j
.text:0000000000007A7F                 cmp     r9, rbx
.text:0000000000007A82                 mov     rcx, [r15+8]
.text:0000000000007A86                 ja      loc_8102
.text:0000000000007A8C                 add     r9, r9
.text:0000000000007A8F                 lea     rax, [rbx+1]
.text:0000000000007A93                 cmp     r9, rbx
.text:0000000000007A96                 cmovbe  r9, rax
.text:0000000000007A9A                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007AA4                 cmp     r9, rax
.text:0000000000007AA7                 ja      loc_834B
.text:0000000000007AAD                 mov     rsi, r9
.text:0000000000007AB0                 mov     [rsp+88h+var_48], r9
.text:0000000000007AB5                 mov     [rsp+88h+var_50], r10
.text:0000000000007ABA                 shl     rsi, 5          ; size
.text:0000000000007ABE                 cmp     [rsp+88h+src], rcx
.text:0000000000007AC3                 mov     [rsp+88h+var_58], r8
.text:0000000000007AC8                 jz      loc_81E1
.text:0000000000007ACE                 mov     rdi, rcx        ; ptr
.text:0000000000007AD1                 call    _realloc        ; PIC mode
.text:0000000000007AD6                 mov     rdx, [r15+8]
.text:0000000000007ADA                 mov     r8, [rsp+88h+var_58]
.text:0000000000007ADF                 mov     rcx, rax
.text:0000000000007AE2                 mov     r10, [rsp+88h+var_50]
.text:0000000000007AE7                 mov     r9, [rsp+88h+var_48]
.text:0000000000007AEC
.text:0000000000007AEC loc_7AEC:                               ; CODE XREF: printf_parse+B40↓j
.text:0000000000007AEC                 test    rcx, rcx
.text:0000000000007AEF                 jz      loc_83A7
.text:0000000000007AF5                 cmp     [rsp+88h+src], rdx
.text:0000000000007AFA                 mov     rax, [r15]
.text:0000000000007AFD                 jz      loc_82BB
.text:0000000000007B03
.text:0000000000007B03 loc_7B03:                               ; CODE XREF: printf_parse+C33↓j
.text:0000000000007B03                 mov     [r15+8], rcx
.text:0000000000007B07
.text:0000000000007B07 loc_7B07:                               ; CODE XREF: printf_parse+A45↓j
.text:0000000000007B07                 mov     rdx, rax
.text:0000000000007B0A                 shl     rdx, 5
.text:0000000000007B0E                 add     rdx, rcx
.text:0000000000007B11                 cmp     rax, rbx
.text:0000000000007B14                 ja      short loc_7B36
.text:0000000000007B16                 db      2Eh
.text:0000000000007B16                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007B20
.text:0000000000007B20 loc_7B20:                               ; CODE XREF: printf_parse+471↓j
.text:0000000000007B20                 add     rax, 1
.text:0000000000007B24                 mov     dword ptr [rdx], 0
.text:0000000000007B2A                 add     rdx, 20h ; ' '
.text:0000000000007B2E                 cmp     rax, rbx
.text:0000000000007B31                 jbe     short loc_7B20
.text:0000000000007B33                 mov     [r15], rax
.text:0000000000007B36
.text:0000000000007B36 loc_7B36:                               ; CODE XREF: printf_parse+454↑j
.text:0000000000007B36                 shl     rbx, 5
.text:0000000000007B3A                 lea     rax, [rcx+rbx]
.text:0000000000007B3E                 mov     edx, [rax]
.text:0000000000007B40                 test    edx, edx
.text:0000000000007B42                 jnz     loc_801B
.text:0000000000007B48                 mov     dword ptr [rax], 5
.text:0000000000007B4E                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007B52                 lea     rdx, [rbp+1]
.text:0000000000007B56                 cmp     bl, 2Eh ; '.'
.text:0000000000007B59                 jnz     loc_788E
.text:0000000000007B5F
.text:0000000000007B5F loc_7B5F:                               ; CODE XREF: printf_parse+1C8↑j
.text:0000000000007B5F                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:0000000000007B63                 mov     [r12+30h], rbp
.text:0000000000007B68                 jnz     loc_7CEE
.text:0000000000007B6E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007B73                 lea     r11, [rbp+2]
.text:0000000000007B77                 mov     eax, 2
.text:0000000000007B7C                 mov     [r12+38h], r11
.text:0000000000007B81                 cmp     rsi, 2
.text:0000000000007B85                 cmovnb  rax, rsi
.text:0000000000007B89                 mov     [rsp+88h+var_70], rax
.text:0000000000007B8E                 movsx   eax, byte ptr [rbp+2]
.text:0000000000007B92                 lea     edx, [rax-30h]
.text:0000000000007B95                 cmp     dl, 9
.text:0000000000007B98                 jbe     loc_822C
.text:0000000000007B9E
.text:0000000000007B9E loc_7B9E:                               ; CODE XREF: printf_parse+B82↓j
.text:0000000000007B9E                 mov     rbx, [r12+40h]
.text:0000000000007BA3                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007BA7                 jz      loc_8205
.text:0000000000007BAD
.text:0000000000007BAD loc_7BAD:                               ; CODE XREF: printf_parse+B67↓j
.text:0000000000007BAD                                         ; printf_parse+C59↓j
.text:0000000000007BAD                 cmp     r9, rbx
.text:0000000000007BB0                 mov     rcx, [r15+8]
.text:0000000000007BB4                 jbe     loc_811F
.text:0000000000007BBA                 mov     rax, [r15]
.text:0000000000007BBD
.text:0000000000007BBD loc_7BBD:                               ; CODE XREF: printf_parse+AE4↓j
.text:0000000000007BBD                 mov     rdx, rax
.text:0000000000007BC0                 shl     rdx, 5
.text:0000000000007BC4                 add     rdx, rcx
.text:0000000000007BC7                 cmp     rax, rbx
.text:0000000000007BCA                 ja      short loc_7BE6
.text:0000000000007BCC                 nop     dword ptr [rax+00h]
.text:0000000000007BD0
.text:0000000000007BD0 loc_7BD0:                               ; CODE XREF: printf_parse+521↓j
.text:0000000000007BD0                 add     rax, 1
.text:0000000000007BD4                 mov     dword ptr [rdx], 0
.text:0000000000007BDA                 add     rdx, 20h ; ' '
.text:0000000000007BDE                 cmp     rax, rbx
.text:0000000000007BE1                 jbe     short loc_7BD0
.text:0000000000007BE3                 mov     [r15], rax
.text:0000000000007BE6
.text:0000000000007BE6 loc_7BE6:                               ; CODE XREF: printf_parse+50A↑j
.text:0000000000007BE6                 shl     rbx, 5
.text:0000000000007BEA                 lea     rax, [rcx+rbx]
.text:0000000000007BEE                 mov     edx, [rax]
.text:0000000000007BF0                 test    edx, edx
.text:0000000000007BF2                 jnz     loc_810A
.text:0000000000007BF8                 mov     dword ptr [rax], 5
.text:0000000000007BFE                 mov     rbp, r11
.text:0000000000007C01                 movzx   ebx, byte ptr [r11]
.text:0000000000007C05                 jmp     loc_788E
.text:0000000000007C0A ; ---------------------------------------------------------------------------
.text:0000000000007C0A
.text:0000000000007C0A loc_7C0A:                               ; CODE XREF: printf_parse+112↑j
.text:0000000000007C0A                 mov     rax, rbp
.text:0000000000007C0D                 nop     dword ptr [rax]
.text:0000000000007C10
.text:0000000000007C10 loc_7C10:                               ; CODE XREF: printf_parse+55D↓j
.text:0000000000007C10                 add     rax, 1
.text:0000000000007C14                 movzx   edx, byte ptr [rax]
.text:0000000000007C17                 lea     ecx, [rdx-30h]
.text:0000000000007C1A                 cmp     cl, 9
.text:0000000000007C1D                 jbe     short loc_7C10
.text:0000000000007C1F                 cmp     dl, 24h ; '$'
.text:0000000000007C22                 mov     r13, r8
.text:0000000000007C25                 jnz     loc_780E
.text:0000000000007C2B                 xor     edx, edx
.text:0000000000007C2D
.text:0000000000007C2D loc_7C2D:                               ; CODE XREF: printf_parse+5B7↓j
.text:0000000000007C2D                 movsx   eax, bl
.text:0000000000007C30                 mov     rdi, 1999999999999999h
.text:0000000000007C3A                 mov     rsi, r8
.text:0000000000007C3D                 sub     eax, 30h ; '0'
.text:0000000000007C40                 cmp     rdx, rdi
.text:0000000000007C43                 cdqe
.text:0000000000007C45                 ja      short loc_7C4E
.text:0000000000007C47                 lea     rsi, [rdx+rdx*4]
.text:0000000000007C4B                 add     rsi, rsi
.text:0000000000007C4E
.text:0000000000007C4E loc_7C4E:                               ; CODE XREF: printf_parse+585↑j
.text:0000000000007C4E                 mov     rcx, rbp
.text:0000000000007C51
.text:0000000000007C51 loc_7C51:                               ; CODE XREF: printf_parse+956↓j
.text:0000000000007C51                 add     rax, rsi
.text:0000000000007C54                 movzx   ebx, byte ptr [rbp+1]
.text:0000000000007C58                 setb    sil
.text:0000000000007C5C                 add     rbp, 1
.text:0000000000007C60                 mov     rdx, rax
.text:0000000000007C63                 movzx   esi, sil
.text:0000000000007C67                 test    rsi, rsi
.text:0000000000007C6A                 lea     edi, [rbx-30h]
.text:0000000000007C6D                 jnz     loc_7FFE
.text:0000000000007C73                 cmp     dil, 9
.text:0000000000007C77                 jbe     short loc_7C2D
.text:0000000000007C79                 mov     r13, rax
.text:0000000000007C7C                 sub     r13, 1
.text:0000000000007C80                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:0000000000007C84                 ja      def_7905        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007C8A                 lea     rbp, [rcx+2]
.text:0000000000007C8E                 movzx   ebx, byte ptr [rcx+2]
.text:0000000000007C92                 jmp     loc_780E
.text:0000000000007C97 ; ---------------------------------------------------------------------------
.text:0000000000007C97
.text:0000000000007C97 loc_7C97:                               ; CODE XREF: printf_parse+1BF↑j
.text:0000000000007C97                 mov     [r12+18h], rbp
.text:0000000000007C9C                 movzx   edi, byte ptr [rbp+0]
.text:0000000000007CA0                 mov     rsi, rbp
.text:0000000000007CA3                 lea     ecx, [rdi-30h]
.text:0000000000007CA6                 cmp     cl, 9
.text:0000000000007CA9                 jbe     short loc_7CB7
.text:0000000000007CAB                 jmp     short loc_7CE0
.text:0000000000007CAB ; ---------------------------------------------------------------------------
.text:0000000000007CAD                 align 10h
.text:0000000000007CB0
.text:0000000000007CB0 loc_7CB0:                               ; CODE XREF: printf_parse+600↓j
.text:0000000000007CB0                 mov     rbp, rax
.text:0000000000007CB3                 add     rax, 1
.text:0000000000007CB7
.text:0000000000007CB7 loc_7CB7:                               ; CODE XREF: printf_parse+5E9↑j
.text:0000000000007CB7                 movzx   edi, byte ptr [rax]
.text:0000000000007CBA                 lea     edx, [rdi-30h]
.text:0000000000007CBD                 cmp     dl, 9
.text:0000000000007CC0                 jbe     short loc_7CB0
.text:0000000000007CC2                 mov     rcx, rax
.text:0000000000007CC5                 lea     rdx, [rbp+2]
.text:0000000000007CC9                 mov     rbp, rax
.text:0000000000007CCC                 sub     rcx, rsi
.text:0000000000007CCF                 mov     rsi, [rsp+88h+var_78]
.text:0000000000007CD4                 cmp     rsi, rcx
.text:0000000000007CD7                 cmovnb  rcx, rsi
.text:0000000000007CDB                 mov     [rsp+88h+var_78], rcx
.text:0000000000007CE0
.text:0000000000007CE0 loc_7CE0:                               ; CODE XREF: printf_parse+5EB↑j
.text:0000000000007CE0                 mov     [r12+20h], rbp
.text:0000000000007CE5                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007CE9                 jmp     loc_7885
.text:0000000000007CEE ; ---------------------------------------------------------------------------
.text:0000000000007CEE
.text:0000000000007CEE loc_7CEE:                               ; CODE XREF: printf_parse+4A8↑j
.text:0000000000007CEE                 movzx   eax, byte ptr [rbp+1]
.text:0000000000007CF2                 sub     eax, 30h ; '0'
.text:0000000000007CF5                 cmp     al, 9
.text:0000000000007CF7                 ja      short loc_7D0E
.text:0000000000007CF9                 nop     dword ptr [rax+00000000h]
.text:0000000000007D00
.text:0000000000007D00 loc_7D00:                               ; CODE XREF: printf_parse+64C↓j
.text:0000000000007D00                 add     rdx, 1
.text:0000000000007D04                 movzx   eax, byte ptr [rdx]
.text:0000000000007D07                 sub     eax, 30h ; '0'
.text:0000000000007D0A                 cmp     al, 9
.text:0000000000007D0C                 jbe     short loc_7D00
.text:0000000000007D0E
.text:0000000000007D0E loc_7D0E:                               ; CODE XREF: printf_parse+637↑j
.text:0000000000007D0E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007D13                 mov     rax, rdx
.text:0000000000007D16                 mov     [r12+38h], rdx
.text:0000000000007D1B                 sub     rax, rbp
.text:0000000000007D1E                 movzx   ebx, byte ptr [rdx]
.text:0000000000007D21                 mov     rbp, rdx
.text:0000000000007D24                 cmp     rsi, rax
.text:0000000000007D27                 cmovnb  rax, rsi
.text:0000000000007D2B                 mov     [rsp+88h+var_70], rax
.text:0000000000007D30                 jmp     loc_788E
.text:0000000000007D35 ; ---------------------------------------------------------------------------
.text:0000000000007D35
.text:0000000000007D35 loc_7D35:                               ; CODE XREF: printf_parse+394↑j
.text:0000000000007D35                 mov     rsi, rax
.text:0000000000007D38
.text:0000000000007D38 loc_7D38:                               ; CODE XREF: printf_parse+687↓j
.text:0000000000007D38                 add     rsi, 1
.text:0000000000007D3C                 movzx   edi, byte ptr [rsi]
.text:0000000000007D3F                 lea     r11d, [rdi-30h]
.text:0000000000007D43                 cmp     r11b, 9
.text:0000000000007D47                 jbe     short loc_7D38
.text:0000000000007D49                 cmp     dil, 24h ; '$'
.text:0000000000007D4D                 jnz     loc_7A5A
.text:0000000000007D53                 xor     esi, esi
.text:0000000000007D55
.text:0000000000007D55 loc_7D55:                               ; CODE XREF: printf_parse+6DE↓j
.text:0000000000007D55                 movsx   eax, cl
.text:0000000000007D58                 mov     rdi, 1999999999999999h
.text:0000000000007D62                 mov     rcx, r8
.text:0000000000007D65                 sub     eax, 30h ; '0'
.text:0000000000007D68                 cmp     rsi, rdi
.text:0000000000007D6B                 cdqe
.text:0000000000007D6D                 ja      short loc_7D76
.text:0000000000007D6F                 lea     rcx, [rsi+rsi*4]
.text:0000000000007D73                 add     rcx, rcx
.text:0000000000007D76
.text:0000000000007D76 loc_7D76:                               ; CODE XREF: printf_parse+6AD↑j
.text:0000000000007D76                 mov     rbp, rdx
.text:0000000000007D79
.text:0000000000007D79 loc_7D79:                               ; CODE XREF: printf_parse+BF6↓j
.text:0000000000007D79                 xor     r11d, r11d
.text:0000000000007D7C                 add     rax, rcx
.text:0000000000007D7F                 movzx   ecx, byte ptr [rdx+1]
.text:0000000000007D83                 setb    r11b
.text:0000000000007D87                 add     rdx, 1
.text:0000000000007D8B                 mov     rsi, rax
.text:0000000000007D8E                 test    r11, r11
.text:0000000000007D91                 lea     edi, [rcx-30h]
.text:0000000000007D94                 jnz     loc_829E
.text:0000000000007D9A                 cmp     dil, 9
.text:0000000000007D9E                 jbe     short loc_7D55
.text:0000000000007DA0                 lea     rbx, [rax-1]
.text:0000000000007DA4                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000007DA8                 ja      def_7905        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007DAE                 mov     [r12+28h], rbx
.text:0000000000007DB3                 add     rbp, 2
.text:0000000000007DB7                 jmp     loc_7A7F
.text:0000000000007DBC ; ---------------------------------------------------------------------------
.text:0000000000007DBC
.text:0000000000007DBC loc_7DBC:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007DBC                                         ; DATA XREF: .rodata:jpt_7905↓o
.text:0000000000007DBC                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:0000000000007DBF                 mov     r11d, 16h
.text:0000000000007DC5                 jg      loc_7918
.text:0000000000007DCB                 test    al, 4
.text:0000000000007DCD                 jnz     loc_7918
.text:0000000000007DD3                 cmp     eax, 7
.text:0000000000007DD6                 mov     r11d, 15h
.text:0000000000007DDC                 jg      loc_7918
.text:0000000000007DE2                 test    al, 2
.text:0000000000007DE4                 mov     r11d, 12h
.text:0000000000007DEA                 jnz     loc_7918
.text:0000000000007DF0                 xor     r11d, r11d
.text:0000000000007DF3                 test    al, 1
.text:0000000000007DF5                 setz    r11b
.text:0000000000007DF9                 add     r11d, 13h
.text:0000000000007DFD                 jmp     loc_7918
.text:0000000000007DFD ; ---------------------------------------------------------------------------
.text:0000000000007E02                 align 8
.text:0000000000007E08
.text:0000000000007E08 loc_7E08:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007E08                                         ; DATA XREF: .rodata:jpt_7905↓o
.text:0000000000007E08                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:0000000000007E0B                 cmp     eax, 7
.text:0000000000007E0E                 setnle  r11b
.text:0000000000007E12                 add     r11d, 0Dh
.text:0000000000007E16                 jmp     loc_7918
.text:0000000000007E1B ; ---------------------------------------------------------------------------
.text:0000000000007E1B
.text:0000000000007E1B loc_7E1B:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007E1B                                         ; DATA XREF: .rodata:jpt_7905↓o
.text:0000000000007E1B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:0000000000007E1E                 mov     r11d, 9
.text:0000000000007E24                 jg      loc_7918
.text:0000000000007E2A                 test    al, 4
.text:0000000000007E2C                 jnz     loc_7918
.text:0000000000007E32                 cmp     eax, 7
.text:0000000000007E35                 mov     r11d, 7
.text:0000000000007E3B                 jg      loc_7918
.text:0000000000007E41                 test    al, 2
.text:0000000000007E43                 mov     r11d, 1
.text:0000000000007E49                 jnz     loc_7918
.text:0000000000007E4F                 and     eax, 1
.text:0000000000007E52                 cmp     eax, 1
.text:0000000000007E55                 sbb     r11d, r11d
.text:0000000000007E58                 and     r11d, 2
.text:0000000000007E5C                 add     r11d, 3
.text:0000000000007E60                 jmp     loc_7918
.text:0000000000007E60 ; ---------------------------------------------------------------------------
.text:0000000000007E65                 align 8
.text:0000000000007E68
.text:0000000000007E68 loc_7E68:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007E68                                         ; DATA XREF: .rodata:jpt_7905↓o
.text:0000000000007E68                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:0000000000007E6B                 cmp     eax, 7
.text:0000000000007E6E                 setnle  r11b
.text:0000000000007E72                 add     r11d, 0Fh
.text:0000000000007E76                 jmp     loc_7918
.text:0000000000007E7B ; ---------------------------------------------------------------------------
.text:0000000000007E7B
.text:0000000000007E7B loc_7E7B:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007E7B                                         ; DATA XREF: .rodata:jpt_7905↓o
.text:0000000000007E7B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:0000000000007E7E                 mov     r11d, 0Ch
.text:0000000000007E84                 jg      loc_7918
.text:0000000000007E8A                 xor     r11d, r11d
.text:0000000000007E8D                 test    al, 4
.text:0000000000007E8F                 setnz   r11b
.text:0000000000007E93                 add     r11d, 0Bh
.text:0000000000007E97                 jmp     loc_7918
.text:0000000000007E9C ; ---------------------------------------------------------------------------
.text:0000000000007E9C
.text:0000000000007E9C loc_7E9C:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007E9C                                         ; DATA XREF: .rodata:jpt_7905↓o
.text:0000000000007E9C                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:0000000000007EA2                 mov     ebx, 63h ; 'c'
.text:0000000000007EA7                 jmp     loc_7918
.text:0000000000007EAC ; ---------------------------------------------------------------------------
.text:0000000000007EAC
.text:0000000000007EAC loc_7EAC:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007EAC                                         ; DATA XREF: .rodata:jpt_7905↓o
.text:0000000000007EAC                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:0000000000007EAF                 mov     r11d, 0Ah
.text:0000000000007EB5                 jg      loc_7918
.text:0000000000007EBB                 test    al, 4
.text:0000000000007EBD                 jnz     loc_7918
.text:0000000000007EC3                 cmp     eax, 7
.text:0000000000007EC6                 mov     r11d, 8
.text:0000000000007ECC                 jg      loc_7918
.text:0000000000007ED2                 test    al, 2
.text:0000000000007ED4                 mov     r11d, 2
.text:0000000000007EDA                 jnz     loc_7918
.text:0000000000007EE0                 and     eax, 1
.text:0000000000007EE3                 cmp     eax, 1
.text:0000000000007EE6                 sbb     r11d, r11d
.text:0000000000007EE9                 and     r11d, 2
.text:0000000000007EED                 add     r11d, 4
.text:0000000000007EF1                 jmp     loc_7918
.text:0000000000007EF1 ; ---------------------------------------------------------------------------
.text:0000000000007EF6                 align 20h
.text:0000000000007F00
.text:0000000000007F00 loc_7F00:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007F00                                         ; DATA XREF: .rodata:jpt_7905↓o
.text:0000000000007F00                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:0000000000007F06                 jmp     loc_7918
.text:0000000000007F0B ; ---------------------------------------------------------------------------
.text:0000000000007F0B
.text:0000000000007F0B def_7905:                               ; CODE XREF: printf_parse+22E↑j
.text:0000000000007F0B                                         ; printf_parse+245↑j ...
.text:0000000000007F0B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007F0F
.text:0000000000007F0F loc_7F0F:                               ; CODE XREF: printf_parse+88C↓j
.text:0000000000007F0F                                         ; printf_parse+95E↓j ...
.text:0000000000007F0F                 cmp     [rsp+88h+src], rcx
.text:0000000000007F14                 jz      short loc_7F1E
.text:0000000000007F16                 mov     rdi, rcx        ; ptr
.text:0000000000007F19                 call    _free           ; PIC mode
.text:0000000000007F1E
.text:0000000000007F1E loc_7F1E:                               ; CODE XREF: printf_parse+854↑j
.text:0000000000007F1E                 mov     rdi, [r14+8]    ; ptr
.text:0000000000007F22                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007F27                 jz      short loc_7F2E
.text:0000000000007F29                 call    _free           ; PIC mode
.text:0000000000007F2E
.text:0000000000007F2E loc_7F2E:                               ; CODE XREF: printf_parse+867↑j
.text:0000000000007F2E                 call    ___errno_location ; PIC mode
.text:0000000000007F33                 mov     dword ptr [rax], 16h
.text:0000000000007F39                 mov     eax, 0FFFFFFFFh
.text:0000000000007F3E                 jmp     loc_7762
.text:0000000000007F43 ; ---------------------------------------------------------------------------
.text:0000000000007F43
.text:0000000000007F43 loc_7F43:                               ; CODE XREF: printf_parse+2B2↑j
.text:0000000000007F43                 cmp     edx, r11d
.text:0000000000007F46                 jz      loc_797B        ; jumptable 0000000000000245 case 37
.text:0000000000007F4C                 jmp     short loc_7F0F
.text:0000000000007F4C ; ---------------------------------------------------------------------------
.text:0000000000007F4E                 align 10h
.text:0000000000007F50
.text:0000000000007F50 loc_7F50:                               ; CODE XREF: printf_parse+26E↑j
.text:0000000000007F50                 add     r9, r9
.text:0000000000007F53                 lea     rax, [r13+1]
.text:0000000000007F57                 cmp     r9, r13
.text:0000000000007F5A                 cmovbe  r9, rax
.text:0000000000007F5E                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007F68                 cmp     r9, rax
.text:0000000000007F6B                 ja      loc_834B
.text:0000000000007F71                 mov     rsi, r9
.text:0000000000007F74                 mov     [rsp+88h+var_40], r9
.text:0000000000007F79                 mov     [rsp+88h+var_48], r10
.text:0000000000007F7E                 shl     rsi, 5          ; size
.text:0000000000007F82                 cmp     [rsp+88h+src], rcx
.text:0000000000007F87                 mov     [rsp+88h+var_50], r8
.text:0000000000007F8C                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000007F91                 jz      loc_8031
.text:0000000000007F97                 mov     rdi, rcx        ; ptr
.text:0000000000007F9A                 call    _realloc        ; PIC mode
.text:0000000000007F9F                 test    rax, rax
.text:0000000000007FA2                 mov     rcx, rax
.text:0000000000007FA5                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007FAA                 mov     r8, [rsp+88h+var_50]
.text:0000000000007FAF                 mov     r10, [rsp+88h+var_48]
.text:0000000000007FB4                 mov     r9, [rsp+88h+var_40]
.text:0000000000007FB9                 jz      loc_8347
.text:0000000000007FBF                 mov     rax, [rsp+88h+src]
.text:0000000000007FC4                 cmp     rax, [r15+8]
.text:0000000000007FC8                 jz      loc_8059
.text:0000000000007FCE
.text:0000000000007FCE loc_7FCE:                               ; CODE XREF: printf_parse+9D8↓j
.text:0000000000007FCE                 mov     [r15+8], rcx
.text:0000000000007FD2                 jmp     loc_7934
.text:0000000000007FD7 ; ---------------------------------------------------------------------------
.text:0000000000007FD7
.text:0000000000007FD7 loc_7FD7:                               ; CODE XREF: printf_parse+25C↑j
.text:0000000000007FD7                 mov     rsi, [rsp+88h+var_68]
.text:0000000000007FDC                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007FE0                 lea     rax, [rsi+1]
.text:0000000000007FE4                 mov     [r12+50h], rsi
.text:0000000000007FE9                 jz      def_7905        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007FEF                 mov     r13, [rsp+88h+var_68]
.text:0000000000007FF4                 mov     [rsp+88h+var_68], rax
.text:0000000000007FF9                 jmp     loc_7927
.text:0000000000007FFE ; ---------------------------------------------------------------------------
.text:0000000000007FFE
.text:0000000000007FFE loc_7FFE:                               ; CODE XREF: printf_parse+5AD↑j
.text:0000000000007FFE                 cmp     dil, 9
.text:0000000000008002                 ja      def_7905        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000008008                 movsx   eax, bl
.text:000000000000800B                 mov     rsi, r8
.text:000000000000800E                 mov     rcx, rbp
.text:0000000000008011                 sub     eax, 30h ; '0'
.text:0000000000008014                 cdqe
.text:0000000000008016                 jmp     loc_7C51
.text:000000000000801B ; ---------------------------------------------------------------------------
.text:000000000000801B
.text:000000000000801B loc_801B:                               ; CODE XREF: printf_parse+482↑j
.text:000000000000801B                 cmp     edx, 5
.text:000000000000801E                 jnz     loc_7F0F
.text:0000000000008024                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000008028                 lea     rdx, [rbp+1]
.text:000000000000802C                 jmp     loc_7885
.text:0000000000008031 ; ---------------------------------------------------------------------------
.text:0000000000008031
.text:0000000000008031 loc_8031:                               ; CODE XREF: printf_parse+8D1↑j
.text:0000000000008031                 mov     rdi, rsi        ; size
.text:0000000000008034                 call    _malloc         ; PIC mode
.text:0000000000008039                 test    rax, rax
.text:000000000000803C                 mov     rcx, rax
.text:000000000000803F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000008044                 mov     r8, [rsp+88h+var_50]
.text:0000000000008049                 mov     r10, [rsp+88h+var_48]
.text:000000000000804E                 mov     r9, [rsp+88h+var_40]
.text:0000000000008053                 jz      loc_81BC
.text:0000000000008059
.text:0000000000008059 loc_8059:                               ; CODE XREF: printf_parse+908↑j
.text:0000000000008059                 mov     rdx, [r15]
.text:000000000000805C                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000008061                 mov     rdi, rcx        ; dest
.text:0000000000008064                 mov     [rsp+88h+var_40], r9
.text:0000000000008069                 mov     [rsp+88h+var_48], r10
.text:000000000000806E                 mov     [rsp+88h+var_50], r8
.text:0000000000008073                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000008078                 shl     rdx, 5          ; n
.text:000000000000807C                 call    _memcpy         ; PIC mode
.text:0000000000008081                 mov     r9, [rsp+88h+var_40]
.text:0000000000008086                 mov     r10, [rsp+88h+var_48]
.text:000000000000808B                 mov     rcx, rax
.text:000000000000808E                 mov     r8, [rsp+88h+var_50]
.text:0000000000008093                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000008098                 jmp     loc_7FCE
.text:000000000000809D ; ---------------------------------------------------------------------------
.text:000000000000809D
.text:000000000000809D loc_809D:                               ; CODE XREF: printf_parse+31F↑j
.text:000000000000809D                 mov     rdi, rsi        ; size
.text:00000000000080A0                 call    _malloc         ; PIC mode
.text:00000000000080A5                 test    rax, rax
.text:00000000000080A8                 mov     rcx, rax
.text:00000000000080AB                 mov     r8, [rsp+88h+var_58]
.text:00000000000080B0                 mov     r10, [rsp+88h+var_50]
.text:00000000000080B5                 mov     r9, [rsp+88h+var_48]
.text:00000000000080BA                 jz      loc_81A9
.text:00000000000080C0
.text:00000000000080C0 loc_80C0:                               ; CODE XREF: printf_parse+351↑j
.text:00000000000080C0                 lea     rax, [rbx+rbx*4]
.text:00000000000080C4                 mov     rsi, [rsp+88h+var_60] ; src
.text:00000000000080C9                 mov     rdi, rcx        ; dest
.text:00000000000080CC                 mov     [rsp+88h+var_48], r9
.text:00000000000080D1                 mov     [rsp+88h+var_50], r10
.text:00000000000080D6                 lea     rdx, [rbx+rax*2]
.text:00000000000080DA                 mov     [rsp+88h+var_58], r8
.text:00000000000080DF                 shl     rdx, 3          ; n
.text:00000000000080E3                 call    _memcpy         ; PIC mode
.text:00000000000080E8                 mov     rbx, [r14]
.text:00000000000080EB                 mov     rcx, rax
.text:00000000000080EE                 mov     r9, [rsp+88h+var_48]
.text:00000000000080F3                 mov     r10, [rsp+88h+var_50]
.text:00000000000080F8                 mov     r8, [rsp+88h+var_58]
.text:00000000000080FD                 jmp     loc_7A17
.text:0000000000008102 ; ---------------------------------------------------------------------------
.text:0000000000008102
.text:0000000000008102 loc_8102:                               ; CODE XREF: printf_parse+3C6↑j
.text:0000000000008102                 mov     rax, [r15]
.text:0000000000008105                 jmp     loc_7B07
.text:000000000000810A ; ---------------------------------------------------------------------------
.text:000000000000810A
.text:000000000000810A loc_810A:                               ; CODE XREF: printf_parse+532↑j
.text:000000000000810A                 cmp     edx, 5
.text:000000000000810D                 jnz     loc_7F0F
.text:0000000000008113                 movzx   ebx, byte ptr [r11]
.text:0000000000008117                 mov     rbp, r11
.text:000000000000811A                 jmp     loc_788E
.text:000000000000811F ; ---------------------------------------------------------------------------
.text:000000000000811F
.text:000000000000811F loc_811F:                               ; CODE XREF: printf_parse+4F4↑j
.text:000000000000811F                 add     r9, r9
.text:0000000000008122                 lea     rax, [rbx+1]
.text:0000000000008126                 cmp     r9, rbx
.text:0000000000008129                 cmovbe  r9, rax
.text:000000000000812D                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000008137                 cmp     r9, rax
.text:000000000000813A                 ja      loc_834B
.text:0000000000008140                 mov     rsi, r9
.text:0000000000008143                 mov     [rsp+88h+var_40], r9
.text:0000000000008148                 mov     [rsp+88h+var_48], r10
.text:000000000000814D                 shl     rsi, 5          ; size
.text:0000000000008151                 cmp     [rsp+88h+src], rcx
.text:0000000000008156                 mov     [rsp+88h+var_50], r8
.text:000000000000815B                 mov     [rsp+88h+var_58], r11
.text:0000000000008160                 jz      loc_831E
.text:0000000000008166                 mov     rdi, rcx        ; ptr
.text:0000000000008169                 call    _realloc        ; PIC mode
.text:000000000000816E                 mov     rdx, [r15+8]
.text:0000000000008172                 mov     r11, [rsp+88h+var_58]
.text:0000000000008177                 mov     rcx, rax
.text:000000000000817A                 mov     r8, [rsp+88h+var_50]
.text:000000000000817F                 mov     r10, [rsp+88h+var_48]
.text:0000000000008184                 mov     r9, [rsp+88h+var_40]
.text:0000000000008189
.text:0000000000008189 loc_8189:                               ; CODE XREF: printf_parse+C82↓j
.text:0000000000008189                 test    rcx, rcx
.text:000000000000818C                 jz      loc_83A7
.text:0000000000008192                 cmp     [rsp+88h+src], rdx
.text:0000000000008197                 mov     rax, [r15]
.text:000000000000819A                 jz      loc_8360
.text:00000000000081A0
.text:00000000000081A0 loc_81A0:                               ; CODE XREF: printf_parse+CE2↓j
.text:00000000000081A0                 mov     [r15+8], rcx
.text:00000000000081A4                 jmp     loc_7BBD
.text:00000000000081A9 ; ---------------------------------------------------------------------------
.text:00000000000081A9
.text:00000000000081A9 loc_81A9:                               ; CODE XREF: printf_parse+9FA↑j
.text:00000000000081A9                 mov     rcx, [r15+8]
.text:00000000000081AD                 cmp     [rsp+88h+src], rcx
.text:00000000000081B2                 jz      short loc_81CC
.text:00000000000081B4
.text:00000000000081B4 loc_81B4:                               ; CODE XREF: printf_parse+C90↓j
.text:00000000000081B4                 mov     rdi, rcx        ; ptr
.text:00000000000081B7                 call    _free           ; PIC mode
.text:00000000000081BC
.text:00000000000081BC loc_81BC:                               ; CODE XREF: printf_parse+993↑j
.text:00000000000081BC                                         ; printf_parse+C96↓j
.text:00000000000081BC                 mov     rdi, [r14+8]    ; ptr
.text:00000000000081C0                 cmp     [rsp+88h+var_60], rdi
.text:00000000000081C5                 jz      short loc_81CC
.text:00000000000081C7                 call    _free           ; PIC mode
.text:00000000000081CC
.text:00000000000081CC loc_81CC:                               ; CODE XREF: printf_parse+AF2↑j
.text:00000000000081CC                                         ; printf_parse+B05↑j
.text:00000000000081CC                 call    ___errno_location ; PIC mode
.text:00000000000081D1                 mov     dword ptr [rax], 0Ch
.text:00000000000081D7                 mov     eax, 0FFFFFFFFh
.text:00000000000081DC                 jmp     loc_7762
.text:00000000000081E1 ; ---------------------------------------------------------------------------
.text:00000000000081E1
.text:00000000000081E1 loc_81E1:                               ; CODE XREF: printf_parse+408↑j
.text:00000000000081E1                 mov     rdi, rsi        ; size
.text:00000000000081E4                 call    _malloc         ; PIC mode
.text:00000000000081E9                 mov     rdx, [rsp+88h+src]
.text:00000000000081EE                 mov     rcx, rax
.text:00000000000081F1                 mov     r9, [rsp+88h+var_48]
.text:00000000000081F6                 mov     r10, [rsp+88h+var_50]
.text:00000000000081FB                 mov     r8, [rsp+88h+var_58]
.text:0000000000008200                 jmp     loc_7AEC
.text:0000000000008205 ; ---------------------------------------------------------------------------
.text:0000000000008205
.text:0000000000008205 loc_8205:                               ; CODE XREF: printf_parse+4E7↑j
.text:0000000000008205                 mov     rsi, [rsp+88h+var_68]
.text:000000000000820A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000820E                 lea     rax, [rsi+1]
.text:0000000000008212                 mov     [r12+40h], rsi
.text:0000000000008217                 jz      def_7905        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000821D                 mov     rbx, [rsp+88h+var_68]
.text:0000000000008222                 mov     [rsp+88h+var_68], rax
.text:0000000000008227                 jmp     loc_7BAD
.text:000000000000822C ; ---------------------------------------------------------------------------
.text:000000000000822C
.text:000000000000822C loc_822C:                               ; CODE XREF: printf_parse+4D8↑j
.text:000000000000822C                 mov     rdx, r11
.text:000000000000822F
.text:000000000000822F loc_822F:                               ; CODE XREF: printf_parse+B7D↓j
.text:000000000000822F                 add     rdx, 1
.text:0000000000008233                 movzx   ecx, byte ptr [rdx]
.text:0000000000008236                 lea     esi, [rcx-30h]
.text:0000000000008239                 cmp     sil, 9
.text:000000000000823D                 jbe     short loc_822F
.text:000000000000823F                 cmp     cl, 24h ; '$'
.text:0000000000008242                 jnz     loc_7B9E
.text:0000000000008248                 xor     ecx, ecx
.text:000000000000824A
.text:000000000000824A loc_824A:                               ; CODE XREF: printf_parse+C3C↓j
.text:000000000000824A                 mov     rsi, 1999999999999999h
.text:0000000000008254                 sub     eax, 30h ; '0'
.text:0000000000008257                 mov     rdx, r8
.text:000000000000825A                 cmp     rcx, rsi
.text:000000000000825D                 cdqe
.text:000000000000825F                 ja      short loc_8268
.text:0000000000008261                 lea     rdx, [rcx+rcx*4]
.text:0000000000008265                 add     rdx, rdx
.text:0000000000008268
.text:0000000000008268 loc_8268:                               ; CODE XREF: printf_parse+B9F↑j
.text:0000000000008268                 mov     rsi, r11
.text:000000000000826B
.text:000000000000826B loc_826B:                               ; CODE XREF: printf_parse+BDC↓j
.text:000000000000826B                 xor     ebx, ebx
.text:000000000000826D                 add     rdx, rax
.text:0000000000008270                 movsx   eax, byte ptr [r11+1]
.text:0000000000008275                 setb    bl
.text:0000000000008278                 add     r11, 1
.text:000000000000827C                 mov     rcx, rdx
.text:000000000000827F                 test    rbx, rbx
.text:0000000000008282                 lea     edi, [rax-30h]
.text:0000000000008285                 jz      short loc_82F8
.text:0000000000008287                 cmp     dil, 9
.text:000000000000828B                 ja      def_7905        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000008291                 sub     eax, 30h ; '0'
.text:0000000000008294                 mov     rdx, r8
.text:0000000000008297                 mov     rsi, r11
.text:000000000000829A                 cdqe
.text:000000000000829C                 jmp     short loc_826B
.text:000000000000829E ; ---------------------------------------------------------------------------
.text:000000000000829E
.text:000000000000829E loc_829E:                               ; CODE XREF: printf_parse+6D4↑j
.text:000000000000829E                 cmp     dil, 9
.text:00000000000082A2                 ja      def_7905        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000082A8                 movsx   eax, cl
.text:00000000000082AB                 mov     rbp, rdx
.text:00000000000082AE                 mov     rcx, r8
.text:00000000000082B1                 sub     eax, 30h ; '0'
.text:00000000000082B4                 cdqe
.text:00000000000082B6                 jmp     loc_7D79
.text:00000000000082BB ; ---------------------------------------------------------------------------
.text:00000000000082BB
.text:00000000000082BB loc_82BB:                               ; CODE XREF: printf_parse+43D↑j
.text:00000000000082BB                 mov     rsi, [rsp+88h+src] ; src
.text:00000000000082C0                 shl     rax, 5
.text:00000000000082C4                 mov     rdi, rcx        ; dest
.text:00000000000082C7                 mov     rdx, rax        ; n
.text:00000000000082CA                 mov     [rsp+88h+var_48], r9
.text:00000000000082CF                 mov     [rsp+88h+var_50], r10
.text:00000000000082D4                 mov     [rsp+88h+var_58], r8
.text:00000000000082D9                 call    _memcpy         ; PIC mode
.text:00000000000082DE                 mov     r9, [rsp+88h+var_48]
.text:00000000000082E3                 mov     rcx, rax
.text:00000000000082E6                 mov     r10, [rsp+88h+var_50]
.text:00000000000082EB                 mov     rax, [r15]
.text:00000000000082EE                 mov     r8, [rsp+88h+var_58]
.text:00000000000082F3                 jmp     loc_7B03
.text:00000000000082F8 ; ---------------------------------------------------------------------------
.text:00000000000082F8
.text:00000000000082F8 loc_82F8:                               ; CODE XREF: printf_parse+BC5↑j
.text:00000000000082F8                 cmp     dil, 9
.text:00000000000082FC                 jbe     loc_824A
.text:0000000000008302                 lea     rbx, [rdx-1]
.text:0000000000008306                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000830A                 ja      def_7905        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000008310                 mov     [r12+40h], rbx
.text:0000000000008315                 lea     r11, [rsi+2]
.text:0000000000008319                 jmp     loc_7BAD
.text:000000000000831E ; ---------------------------------------------------------------------------
.text:000000000000831E
.text:000000000000831E loc_831E:                               ; CODE XREF: printf_parse+AA0↑j
.text:000000000000831E                 mov     rdi, rsi        ; size
.text:0000000000008321                 call    _malloc         ; PIC mode
.text:0000000000008326                 mov     rdx, [rsp+88h+src]
.text:000000000000832B                 mov     rcx, rax
.text:000000000000832E                 mov     r9, [rsp+88h+var_40]
.text:0000000000008333                 mov     r10, [rsp+88h+var_48]
.text:0000000000008338                 mov     r8, [rsp+88h+var_50]
.text:000000000000833D                 mov     r11, [rsp+88h+var_58]
.text:0000000000008342                 jmp     loc_8189
.text:0000000000008347 ; ---------------------------------------------------------------------------
.text:0000000000008347
.text:0000000000008347 loc_8347:                               ; CODE XREF: printf_parse+2DB↑j
.text:0000000000008347                                         ; printf_parse+2F1↑j ...
.text:0000000000008347                 mov     rcx, [r15+8]
.text:000000000000834B
.text:000000000000834B loc_834B:                               ; CODE XREF: printf_parse+3E7↑j
.text:000000000000834B                                         ; printf_parse+8AB↑j ...
.text:000000000000834B                 cmp     [rsp+88h+src], rcx
.text:0000000000008350                 jnz     loc_81B4
.text:0000000000008356                 jmp     loc_81BC
.text:0000000000008356 ; ---------------------------------------------------------------------------
.text:000000000000835B                 align 20h
.text:0000000000008360
.text:0000000000008360 loc_8360:                               ; CODE XREF: printf_parse+ADA↑j
.text:0000000000008360                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000008365                 shl     rax, 5
.text:0000000000008369                 mov     rdi, rcx        ; dest
.text:000000000000836C                 mov     rdx, rax        ; n
.text:000000000000836F                 mov     [rsp+88h+var_40], r9
.text:0000000000008374                 mov     [rsp+88h+var_48], r10
.text:0000000000008379                 mov     [rsp+88h+var_50], r8
.text:000000000000837E                 mov     [rsp+88h+var_58], r11
.text:0000000000008383                 call    _memcpy         ; PIC mode
.text:0000000000008388                 mov     r9, [rsp+88h+var_40]
.text:000000000000838D                 mov     rcx, rax
.text:0000000000008390                 mov     r10, [rsp+88h+var_48]
.text:0000000000008395                 mov     rax, [r15]
.text:0000000000008398                 mov     r8, [rsp+88h+var_50]
.text:000000000000839D                 mov     r11, [rsp+88h+var_58]
.text:00000000000083A2                 jmp     loc_81A0
.text:00000000000083A7 ; ---------------------------------------------------------------------------
.text:00000000000083A7
.text:00000000000083A7 loc_83A7:                               ; CODE XREF: printf_parse+42F↑j
.text:00000000000083A7                                         ; printf_parse+ACC↑j
.text:00000000000083A7                 mov     rcx, rdx
.text:00000000000083AA                 jmp     short loc_834B
.text:00000000000083AA ; } // starts at 76C0
.text:00000000000083AA printf_parse    endp
.text:00000000000083AA
.text:00000000000083AA ; ---------------------------------------------------------------------------
.text:00000000000083AC                 align 10h
.text:00000000000083B0
.text:00000000000083B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083B0
.text:00000000000083B0 ; Attributes: info_from_lumina
.text:00000000000083B0
.text:00000000000083B0 ; void _libc_csu_init(void)
.text:00000000000083B0                 public __libc_csu_init
.text:00000000000083B0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000083B0 ; __unwind {
.text:00000000000083B0                 push    r15
.text:00000000000083B2                 push    r14
.text:00000000000083B4                 mov     r15, rdx
.text:00000000000083B7                 push    r13
.text:00000000000083B9                 push    r12
.text:00000000000083BB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000083C2                 push    rbp
.text:00000000000083C3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000083CA                 push    rbx
.text:00000000000083CB                 mov     r13d, edi
.text:00000000000083CE                 mov     r14, rsi
.text:00000000000083D1                 sub     rbp, r12
.text:00000000000083D4                 sub     rsp, 8
.text:00000000000083D8                 sar     rbp, 3
.text:00000000000083DC                 call    _init_proc
.text:00000000000083E1                 test    rbp, rbp
.text:00000000000083E4                 jz      short loc_8406
.text:00000000000083E6                 xor     ebx, ebx
.text:00000000000083E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000083F0
.text:00000000000083F0 loc_83F0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000083F0                 mov     rdx, r15
.text:00000000000083F3                 mov     rsi, r14
.text:00000000000083F6                 mov     edi, r13d
.text:00000000000083F9                 call    ds:(__frame_dummy_init_array_entry - 20A930h)[r12+rbx*8]
.text:00000000000083FD                 add     rbx, 1
.text:0000000000008401                 cmp     rbp, rbx
.text:0000000000008404                 jnz     short loc_83F0
.text:0000000000008406
.text:0000000000008406 loc_8406:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000008406                 add     rsp, 8
.text:000000000000840A                 pop     rbx
.text:000000000000840B                 pop     rbp
.text:000000000000840C                 pop     r12
.text:000000000000840E                 pop     r13
.text:0000000000008410                 pop     r14
.text:0000000000008412                 pop     r15
.text:0000000000008414                 retn
.text:0000000000008414 ; } // starts at 83B0
.text:0000000000008414 __libc_csu_init endp
.text:0000000000008414
.text:0000000000008414 ; ---------------------------------------------------------------------------
.text:0000000000008415                 align 20h
.text:0000000000008420
.text:0000000000008420 ; =============== S U B R O U T I N E =======================================
.text:0000000000008420
.text:0000000000008420
.text:0000000000008420 ; void _libc_csu_fini(void)
.text:0000000000008420                 public __libc_csu_fini
.text:0000000000008420 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000008420 ; __unwind {
.text:0000000000008420                 rep retn
.text:0000000000008420 ; } // starts at 8420
.text:0000000000008420 __libc_csu_fini endp
.text:0000000000008420
.text:0000000000008420 ; ---------------------------------------------------------------------------
.text:0000000000008422                 align 10h
.text:0000000000008430
.text:0000000000008430 ; =============== S U B R O U T I N E =======================================
.text:0000000000008430
.text:0000000000008430
.text:0000000000008430 atexit          proc near               ; CODE XREF: main+4E↑p
.text:0000000000008430 ; __unwind {
.text:0000000000008430                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000008437                 xor     esi, esi        ; obj
.text:0000000000008439                 jmp     ___cxa_atexit
.text:0000000000008439 ; } // starts at 8430
.text:0000000000008439 atexit          endp
.text:0000000000008439
.text:0000000000008439 _text           ends
.text:0000000000008439
LOAD:000000000000843E ; ===========================================================================
LOAD:000000000000843E
LOAD:000000000000843E ; Segment type: Pure code
LOAD:000000000000843E ; Segment permissions: Read/Execute
LOAD:000000000000843E LOAD            segment byte public 'CODE' use64
LOAD:000000000000843E                 assume cs:LOAD
LOAD:000000000000843E                 ;org 843Eh
LOAD:000000000000843E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000843E                 align 20h
LOAD:000000000000843E LOAD            ends
LOAD:000000000000843E
.fini:0000000000008440 ; ===========================================================================
.fini:0000000000008440
.fini:0000000000008440 ; Segment type: Pure code
.fini:0000000000008440 ; Segment permissions: Read/Execute
.fini:0000000000008440 _fini           segment dword public 'CODE' use64
.fini:0000000000008440                 assume cs:_fini
.fini:0000000000008440                 ;org 8440h
.fini:0000000000008440                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000008440
.fini:0000000000008440 ; =============== S U B R O U T I N E =======================================
.fini:0000000000008440
.fini:0000000000008440
.fini:0000000000008440                 public _term_proc
.fini:0000000000008440 _term_proc      proc near
.fini:0000000000008440                 sub     rsp, 8          ; _fini
.fini:0000000000008444                 add     rsp, 8
.fini:0000000000008448                 retn
.fini:0000000000008448 _term_proc      endp
.fini:0000000000008448
.fini:0000000000008448 _fini           ends
.fini:0000000000008448
LOAD:0000000000008449 ; ===========================================================================
LOAD:0000000000008449
LOAD:0000000000008449 ; Segment type: Pure code
LOAD:0000000000008449 ; Segment permissions: Read/Execute
LOAD:0000000000008449 LOAD            segment byte public 'CODE' use64
LOAD:0000000000008449                 assume cs:LOAD
LOAD:0000000000008449                 ;org 8449h
LOAD:0000000000008449                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000008449                 align 20h
LOAD:0000000000008449 LOAD            ends
LOAD:0000000000008449
.rodata:0000000000008460 ; ===========================================================================
.rodata:0000000000008460
.rodata:0000000000008460 ; Segment type: Pure data
.rodata:0000000000008460 ; Segment permissions: Read
.rodata:0000000000008460 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000008460                 assume cs:_rodata
.rodata:0000000000008460                 ;org 8460h
.rodata:0000000000008460                 public _IO_stdin_used
.rodata:0000000000008460 _IO_stdin_used  db    1
.rodata:0000000000008461                 db    0
.rodata:0000000000008462                 db    2
.rodata:0000000000008463                 db    0
.rodata:0000000000008464 asc_8464        db '   .',0             ; DATA XREF: print_line+109↑o
.rodata:0000000000008469 a6s             db ' %-6s',0            ; DATA XREF: print_line+1E1↑o
.rodata:000000000000846F a10s            db ' %10s',0            ; DATA XREF: print_line+245↑o
.rodata:0000000000008475 a12s            db ' %-12s',0           ; DATA XREF: print_line+215↑o
.rodata:000000000000847C ; const char aId[]
.rodata:000000000000847C aId             db 'id=',0              ; DATA XREF: make_id_equals_comment+2↑o
.rodata:000000000000847C                                         ; make_id_equals_comment+2D↑o
.rodata:0000000000008480 asc_8480        db '  .  ',0            ; DATA XREF: print_user:loc_2922↑o
.rodata:0000000000008480                                         ; who+1C0↑o
.rodata:0000000000008486 aLd             db '%ld',0              ; DATA XREF: print_user+4↑o
.rodata:0000000000008486                                         ; who+4CE↑o ...
.rodata:000000000000848A ; const char file[]
.rodata:000000000000848A file            db '../coreutils-8.31/src/who.c',0
.rodata:000000000000848A                                         ; DATA XREF: print_user+59A↑o
.rodata:00000000000084A6 ; const char assertion[]
.rodata:00000000000084A6 assertion       db 'seconds_idle / (60 * 60) < 24',0
.rodata:00000000000084A6                                         ; DATA XREF: print_user+5A1↑o
.rodata:00000000000084C4 a02d02d         db '%02d:%02d',0        ; DATA XREF: print_user+510↑o
.rodata:00000000000084CE ; const char aOld[]
.rodata:00000000000084CE aOld            db ' old ',0            ; DATA XREF: print_user:loc_2650↑o
.rodata:00000000000084D4 aS              db '%.*s',0             ; DATA XREF: print_user+2AE↑o
.rodata:00000000000084D9 aSS             db '(%s:%s)',0          ; DATA XREF: print_user+1B7↑o
.rodata:00000000000084E1 aS_0            db '(%s)',0             ; DATA XREF: print_user:loc_27E6↑o
.rodata:00000000000084E6 aSS_0           db '%s%s',0             ; DATA XREF: who+225↑o
.rodata:00000000000084EB ; const char aUsersLu[]
.rodata:00000000000084EB aUsersLu        db 0Ah                  ; DATA XREF: who:loc_2B6F↑o
.rodata:00000000000084EB                 db '# users=%lu',0Ah,0
.rodata:00000000000084F9 ; const char aExit_0[]
.rodata:00000000000084F9 aExit_0         db 'EXIT',0             ; DATA XREF: who:loc_2D05↑o
.rodata:00000000000084FE ; const char aComment[]
.rodata:00000000000084FE aComment        db 'COMMENT',0          ; DATA XREF: who+398↑o
.rodata:0000000000008506 ; const char aPid[]
.rodata:0000000000008506 aPid            db 'PID',0              ; DATA XREF: who+3B0↑o
.rodata:000000000000850A ; const char aIdle[]
.rodata:000000000000850A aIdle           db 'IDLE',0             ; DATA XREF: who+3C6↑o
.rodata:000000000000850F ; const char aTime[]
.rodata:000000000000850F aTime           db 'TIME',0             ; DATA XREF: who+3DC↑o
.rodata:0000000000008514 ; const char aLine[]
.rodata:0000000000008514 aLine           db 'LINE',0             ; DATA XREF: who+3F2↑o
.rodata:0000000000008519 ; const char aName[]
.rodata:0000000000008519 aName           db 'NAME',0             ; DATA XREF: who+40A↑o
.rodata:000000000000851E ; const char s2[]
.rodata:000000000000851E s2              db '/dev/',0            ; DATA XREF: who+360↑o
.rodata:0000000000008524 ; const char aRunLevel[]
.rodata:0000000000008524 aRunLevel       db 'run-level',0        ; DATA XREF: who:loc_2BEF↑o
.rodata:0000000000008524                                         ; who:loc_3031↑o
.rodata:000000000000852E aSC             db '%s %c',0            ; DATA XREF: who+289↑o
.rodata:000000000000852E                                         ; .data.rel.ro:000000000020ABA8↓o
.rodata:0000000000008534 ; const char aLast[]
.rodata:0000000000008534 aLast           db 'last=',0            ; DATA XREF: who+2BD↑o
.rodata:0000000000008534                                         ; who:loc_306A↑o
.rodata:000000000000853A aSC_0           db '%s%c',0             ; DATA XREF: who+2E5↑o
.rodata:000000000000853F ; const char aSystemBoot[]
.rodata:000000000000853F aSystemBoot     db 'system boot',0      ; DATA XREF: who+45F↑o
.rodata:000000000000853F                                         ; .data.rel.ro:000000000020A960↓o
.rodata:000000000000854B aClockChange    db 'clock change',0     ; DATA XREF: who+4B3↑o
.rodata:0000000000008558 ; const char aLogin[]
.rodata:0000000000008558 aLogin          db 'LOGIN',0            ; DATA XREF: who+56B↑o
.rodata:000000000000855E ; const char aTerm[]
.rodata:000000000000855E aTerm           db 'term=',0            ; DATA XREF: who+60B↑o
.rodata:000000000000855E                                         ; who:loc_309F↑o
.rodata:0000000000008564 ; const char aExit_1[]
.rodata:0000000000008564 aExit_1         db 'exit=',0            ; DATA XREF: who+5E7↑o
.rodata:0000000000008564                                         ; who+747↑o
.rodata:000000000000856A aSDSD           db '%s%d %s%d',0        ; DATA XREF: who+62E↑o
.rodata:0000000000008574 aWho            db 'who',0              ; DATA XREF: main+176↑o
.rodata:0000000000008574                                         ; usage+1A0↑o ...
.rodata:0000000000008578 aVarLogWtmp     db '/var/log/wtmp',0    ; DATA XREF: usage+1BF↑o
.rodata:0000000000008586 aVarRunUtmp     db '/var/run/utmp',0    ; DATA XREF: main:loc_1EB3↑o
.rodata:0000000000008586                                         ; usage+1C6↑o
.rodata:0000000000008594 asc_8594        db '[',0                ; DATA XREF: usage+1DC↑o
.rodata:0000000000008596 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+203↑o
.rodata:00000000000085A6 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000085A6                                         ; DATA XREF: usage+233↑o
.rodata:00000000000085A6                                         ; usage+32C↑o ...
.rodata:00000000000085BC aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+244↑o
.rodata:00000000000085C6 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+250↑o
.rodata:00000000000085D5 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1E3↑o
.rodata:00000000000085DF aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+20F↑o
.rodata:00000000000085E9 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+227↑o
.rodata:00000000000085F3 ; const char aSOnlineHelpS[]
.rodata:00000000000085F3 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+29A↑o
.rodata:00000000000085F3                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000860A unk_860A        db  47h ; G             ; DATA XREF: main+16F↑o
.rodata:000000000000860A                                         ; usage+2B6↑o ...
.rodata:000000000000860B                 db  4Eh ; N
.rodata:000000000000860C                 db  55h ; U
.rodata:000000000000860D                 db  20h
.rodata:000000000000860E ; const char domainname[]
.rodata:000000000000860E domainname      db 'coreutils',0        ; DATA XREF: main+2F↑o
.rodata:000000000000860E                                         ; main+3B↑o ...
.rodata:0000000000008618 ; const char aEn[]
.rodata:0000000000008618 aEn             db 'en_',0              ; DATA XREF: usage+2DD↑o
.rodata:0000000000008618                                         ; usage+39E↑o
.rodata:000000000000861C ; const char aFullDocumentat[]
.rodata:000000000000861C aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000861C                                         ; DATA XREF: usage:loc_3449↑o
.rodata:000000000000861C                                         ; usage:loc_3506↑o
.rodata:0000000000008637 ; const char dirname[]
.rodata:0000000000008637 dirname         db '/usr/local/share/locale',0
.rodata:0000000000008637                                         ; DATA XREF: main+28↑o
.rodata:000000000000864F aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+160↑o
.rodata:000000000000865F aJosephArceneau db 'Joseph Arceneaux',0 ; DATA XREF: main+167↑o
.rodata:0000000000008670 aMichaelStone   db 'Michael Stone',0    ; DATA XREF: main:loc_1D19↑o
.rodata:000000000000867E ; const char shortopts[]
.rodata:000000000000867E shortopts       db 'abdlmpqrstuwHT',0   ; DATA XREF: main+5F↑o
.rodata:000000000000868D aYMDHM          db '%Y-%m-%d %H:%M',0   ; DATA XREF: main:loc_1ECB↑o
.rodata:000000000000869C aBEHM           db '%b %e %H:%M',0      ; DATA XREF: main+2B6↑o
.rodata:00000000000086A8 ; const char msgid[]
.rodata:00000000000086A8 msgid           db 'extra operand %s',0 ; DATA XREF: main+342↑o
.rodata:00000000000086B9 aAll            db 'all',0              ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:00000000000086BD aCount          db 'count',0            ; DATA XREF: .data.rel.ro:000000000020A980↓o
.rodata:00000000000086C3 aDead           db 'dead',0             ; DATA XREF: .data.rel.ro:000000000020A9A0↓o
.rodata:00000000000086C8 aHeading        db 'heading',0          ; DATA XREF: .data.rel.ro:000000000020A9C0↓o
.rodata:00000000000086D0 aLogin_0        db 'login',0            ; DATA XREF: .data.rel.ro:000000000020A9E0↓o
.rodata:00000000000086D6 aLookup         db 'lookup',0           ; DATA XREF: .data.rel.ro:000000000020AA00↓o
.rodata:00000000000086DD aMessage        db 'message',0          ; DATA XREF: .data.rel.ro:000000000020AA20↓o
.rodata:00000000000086E5 aMesg           db 'mesg',0             ; DATA XREF: .data.rel.ro:000000000020AA40↓o
.rodata:00000000000086EA aProcess        db 'process',0          ; DATA XREF: .data.rel.ro:000000000020AA60↓o
.rodata:00000000000086F2 aRunlevel       db 'runlevel',0         ; DATA XREF: .data.rel.ro:000000000020AA80↓o
.rodata:00000000000086FB aShort          db 'short',0            ; DATA XREF: .data.rel.ro:000000000020AAA0↓o
.rodata:0000000000008701 aTime_0         db 'time',0             ; DATA XREF: .data.rel.ro:000000000020AAC0↓o
.rodata:0000000000008706 aUsers          db 'users',0            ; DATA XREF: .data.rel.ro:000000000020AAE0↓o
.rodata:000000000000870C aWritable       db 'writable',0         ; DATA XREF: .data.rel.ro:000000000020AB00↓o
.rodata:0000000000008715 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020AB20↓o
.rodata:000000000000871A aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020AB40↓o
.rodata:0000000000008722                 align 8
.rodata:0000000000008728 a8SS12SSSS8sS   db '%-8.*s%s %-12.*s %-*s%s%s %-8s%s',0
.rodata:0000000000008728                                         ; DATA XREF: print_line+FE↑o
.rodata:0000000000008749                 align 10h
.rodata:0000000000008750 ; const char aTrySHelpForMor[]
.rodata:0000000000008750 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000008750                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000008777                 align 8
.rodata:0000000000008778 ; const char aUsageSOptionFi[]
.rodata:0000000000008778 aUsageSOptionFi db 'Usage: %s [OPTION]... [ FILE | ARG1 ARG2 ]',0Ah,0
.rodata:0000000000008778                                         ; DATA XREF: usage:loc_31AD↑o
.rodata:00000000000087A4                 align 8
.rodata:00000000000087A8 ; const char aPrintInformati[]
.rodata:00000000000087A8 aPrintInformati db 'Print information about users who are currently logged in.',0Ah,0
.rodata:00000000000087A8                                         ; DATA XREF: usage+84↑o
.rodata:00000000000087E4                 align 8
.rodata:00000000000087E8 ; const char aAAllSameAsBDLo[]
.rodata:00000000000087E8 aAAllSameAsBDLo db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:00000000000087E8                 db '  -a, --all         same as -b -d --login -p -r -t -T -u',0Ah
.rodata:00000000000087E8                 db '  -b, --boot        time of last system boot',0Ah
.rodata:00000000000087E8                 db '  -d, --dead        print dead processes',0Ah
.rodata:00000000000087E8                 db '  -H, --heading     print line of column headings',0Ah,0
.rodata:00000000000088AB                 align 10h
.rodata:00000000000088B0 ; const char aLLoginPrintSys[]
.rodata:00000000000088B0 aLLoginPrintSys db '  -l, --login       print system login processes',0Ah,0
.rodata:00000000000088B0                                         ; DATA XREF: usage+CE↑o
.rodata:00000000000088E2                 align 8
.rodata:00000000000088E8 ; const char aLookupAttemptT[]
.rodata:00000000000088E8 aLookupAttemptT db '      --lookup      attempt to canonicalize hostnames via DNS',0Ah
.rodata:00000000000088E8                                         ; DATA XREF: usage+F3↑o
.rodata:00000000000088E8                 db '  -m                only hostname and user associated with stdin',0Ah
.rodata:00000000000088E8                 db '  -p, --process     print active processes spawned by init',0Ah,0
.rodata:00000000000089A3                 align 8
.rodata:00000000000089A8 ; const char aQCountAllLogin[]
.rodata:00000000000089A8 aQCountAllLogin db '  -q, --count       all login names and number of users logged on'
.rodata:00000000000089A8                                         ; DATA XREF: usage+118↑o
.rodata:00000000000089A8                 db 0Ah
.rodata:00000000000089A8                 db '  -r, --runlevel    print current runlevel',0Ah
.rodata:00000000000089A8                 db '  -s, --short       print only name, line, and time (default)',0Ah
.rodata:00000000000089A8                 db '  -t, --time        print last system clock change',0Ah,0
.rodata:0000000000008A87                 align 8
.rodata:0000000000008A88 ; const char aTWMesgAddUserS[]
.rodata:0000000000008A88 aTWMesgAddUserS db '  -T, -w, --mesg    add user',27h,'s message status as +, - or ?',0Ah
.rodata:0000000000008A88                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000008A88                 db '  -u, --users       list users logged in',0Ah
.rodata:0000000000008A88                 db '      --message     same as -T',0Ah
.rodata:0000000000008A88                 db '      --writable    same as -T',0Ah,0
.rodata:0000000000008B2B                 align 10h
.rodata:0000000000008B30 ; const char aHelpDisplayThi[]
.rodata:0000000000008B30 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000008B30                                         ; DATA XREF: usage+162↑o
.rodata:0000000000008B5D                 align 20h
.rodata:0000000000008B60 ; const char aVersionOutputV[]
.rodata:0000000000008B60 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000008B60                                         ; DATA XREF: usage+187↑o
.rodata:0000000000008B96                 align 8
.rodata:0000000000008B98 ; const char aIfFileIsNotSpe[]
.rodata:0000000000008B98 aIfFileIsNotSpe db 0Ah                  ; DATA XREF: usage+1AC↑o
.rodata:0000000000008B98                 db 'If FILE is not specified, use %s.  %s as FILE is common.',0Ah
.rodata:0000000000008B98                 db 'If ARG1 ARG2 given, -m presumed: ',27h,'am i',27h,' or ',27h,'mom'
.rodata:0000000000008B98                 db ' likes',27h,' are usual.',0Ah,0
.rodata:0000000000008C15                 align 8
.rodata:0000000000008C18 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000008C18                                         ; DATA XREF: usage+2AF↑o
.rodata:0000000000008C18                                         ; usage+313↑o ...
.rodata:0000000000008C40 ; const char aReportAnyTrans[]
.rodata:0000000000008C40 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000008C40                                         ; DATA XREF: usage+407↑o
.rodata:0000000000008C40                 db 'am/>',0Ah,0
.rodata:0000000000008C87                 align 8
.rodata:0000000000008C88 ; const char aOrAvailableLoc[]
.rodata:0000000000008C88 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000008C88                                         ; DATA XREF: usage:loc_348E↑o
.rodata:0000000000008CBB                 align 20h
.rodata:0000000000008CC0 ; const char _PRETTY_FUNCTION___7702[]
.rodata:0000000000008CC0 __PRETTY_FUNCTION___7702 db 'idle_string',0
.rodata:0000000000008CC0                                         ; DATA XREF: print_user:loc_2953↑o
.rodata:0000000000008CCC a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000008CD1 ; const char aWriteError[]
.rodata:0000000000008CD1 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_36B3↑o
.rodata:0000000000008CDD ; const char format[]
.rodata:0000000000008CDD format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000008CDD                                         ; who+7AF↑o ...
.rodata:0000000000008CE4 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000008CE6 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_3760↑o
.rodata:0000000000008CEC                 align 10h
.rodata:0000000000008CF0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000008CF0                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000008D28 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000008D30 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000008D34 unk_8D34        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000008D35                 db  80h
.rodata:0000000000008D36                 db  98h
.rodata:0000000000008D37                 db    0
.rodata:0000000000008D38 unk_8D38        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000008D39                 db  80h
.rodata:0000000000008D3A                 db  99h
.rodata:0000000000008D3B                 db    0
.rodata:0000000000008D3C unk_8D3C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000008D3D                 db    7
.rodata:0000000000008D3E                 db  65h ; e
.rodata:0000000000008D3F                 db    0
.rodata:0000000000008D40 unk_8D40        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000008D41                 db 0AFh
.rodata:0000000000008D42                 db    0
.rodata:0000000000008D43 unk_8D43        db  22h ; "             ; DATA XREF: gettext_quote:loc_38E0↑o
.rodata:0000000000008D43                                         ; quotearg_buffer_restyled:loc_469B↑o ...
.rodata:0000000000008D44                 db    0
.rodata:0000000000008D45 ; const char asc_8D45[2]
.rodata:0000000000008D45 asc_8D45        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000008D45                                         ; quotearg_buffer_restyled:loc_3A63↑o ...
.rodata:0000000000008D47 ; const char asc_8D47[2]
.rodata:0000000000008D47 asc_8D47        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000008D47                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000008D49 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000008D51 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020AB88↓o
.rodata:0000000000008D57 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020AB90↓o
.rodata:0000000000008D64 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020AB98↓o
.rodata:0000000000008D64                                         ; .data.rel.ro:000000000020ABB8↓o
.rodata:0000000000008D71 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000008D71                                         ; DATA XREF: .data.rel.ro:000000000020ABA0↓o
.rodata:0000000000008D85 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020ABB0↓o
.rodata:0000000000008D8D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020ABC8↓o
.rodata:0000000000008D95                 align 20h
.rodata:0000000000008DA0 jpt_3A41        dd offset loc_47EA - 8DA0h
.rodata:0000000000008DA0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000008DA0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000008DA0                 dd offset loc_3A43 - 8DA0h ; jump table for switch statement
.rodata:0000000000008DA0                 dd offset loc_4A18 - 8DA0h
.rodata:0000000000008DA0                 dd offset loc_4824 - 8DA0h
.rodata:0000000000008DA0                 dd offset loc_4614 - 8DA0h
.rodata:0000000000008DA0                 dd offset loc_4670 - 8DA0h
.rodata:0000000000008DA0                 dd offset loc_46C5 - 8DA0h
.rodata:0000000000008DA0                 dd offset loc_470A - 8DA0h
.rodata:0000000000008DA0                 dd offset loc_4744 - 8DA0h
.rodata:0000000000008DA0                 dd offset loc_4744 - 8DA0h
.rodata:0000000000008DA0                 dd offset loc_4744 - 8DA0h
.rodata:0000000000008DCC jpt_3B9E        dd offset loc_3DC0 - 8DCCh, offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh
.rodata:0000000000008DCC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000008DCC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000008DCC                 dd offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh ; jump table for switch statement
.rodata:0000000000008DCC                 dd offset def_3B9E - 8DCCh, offset loc_3E00 - 8DCCh, offset loc_3D08 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3CC8 - 8DCCh, offset loc_3E90 - 8DCCh, offset loc_3E80 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3E70 - 8DCCh, offset loc_3E60 - 8DCCh, offset def_3B9E - 8DCCh
.rodata:0000000000008DCC                 dd offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh
.rodata:0000000000008DCC                 dd offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh
.rodata:0000000000008DCC                 dd offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh
.rodata:0000000000008DCC                 dd offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh
.rodata:0000000000008DCC                 dd offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh
.rodata:0000000000008DCC                 dd offset def_3B9E - 8DCCh, offset def_3B9E - 8DCCh, offset loc_3E50 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3E40 - 8DCCh, offset loc_3E40 - 8DCCh, offset loc_3E10 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3E40 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3E40 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3CA3 - 8DCCh, offset loc_3E40 - 8DCCh, offset loc_3E40 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3E40 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3E40 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3E40 - 8DCCh, offset loc_3E40 - 8DCCh, offset loc_3E40 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3C73 - 8DCCh, offset def_3B9E - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3E40 - 8DCCh, offset loc_3D18 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3E40 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3E40 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh, offset loc_3DE8 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3BA3 - 8DCCh, offset loc_3E40 - 8DCCh, offset loc_3BA3 - 8DCCh
.rodata:0000000000008DCC                 dd offset loc_3E10 - 8DCCh
.rodata:0000000000008FC8 jpt_3F2A        dd offset loc_3F90 - 8FC8h, offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h
.rodata:0000000000008FC8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000008FC8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000008FC8                 dd offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h ; jump table for switch statement
.rodata:0000000000008FC8                 dd offset def_3F2A - 8FC8h, offset loc_3F80 - 8FC8h, offset loc_40D0 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_40B8 - 8FC8h, offset loc_3F68 - 8FC8h, offset loc_40A8 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_3F50 - 8FC8h, offset loc_4090 - 8FC8h, offset def_3F2A - 8FC8h
.rodata:0000000000008FC8                 dd offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h
.rodata:0000000000008FC8                 dd offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h
.rodata:0000000000008FC8                 dd offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h
.rodata:0000000000008FC8                 dd offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h
.rodata:0000000000008FC8                 dd offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h
.rodata:0000000000008FC8                 dd offset def_3F2A - 8FC8h, offset def_3F2A - 8FC8h, offset loc_4078 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4060 - 8FC8h, offset loc_4060 - 8FC8h, offset loc_4048 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4060 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4060 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_3CA0 - 8FC8h, offset loc_4060 - 8FC8h, offset loc_4060 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4060 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4060 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4060 - 8FC8h, offset loc_4060 - 8FC8h, offset loc_4060 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_3C70 - 8FC8h, offset def_3F2A - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4060 - 8FC8h, offset loc_3F30 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4060 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4060 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h, offset loc_4030 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_3BA0 - 8FC8h, offset loc_4060 - 8FC8h, offset loc_3BA0 - 8FC8h
.rodata:0000000000008FC8                 dd offset loc_4048 - 8FC8h
.rodata:00000000000091C4                 align 20h
.rodata:00000000000091E0                 public quoting_style_vals
.rodata:00000000000091E0 quoting_style_vals db    0
.rodata:00000000000091E1                 db    0
.rodata:00000000000091E2                 db    0
.rodata:00000000000091E3                 db    0
.rodata:00000000000091E4                 db    1
.rodata:00000000000091E5                 db    0
.rodata:00000000000091E6                 db    0
.rodata:00000000000091E7                 db    0
.rodata:00000000000091E8                 db    2
.rodata:00000000000091E9                 db    0
.rodata:00000000000091EA                 db    0
.rodata:00000000000091EB                 db    0
.rodata:00000000000091EC                 db    3
.rodata:00000000000091ED                 db    0
.rodata:00000000000091EE                 db    0
.rodata:00000000000091EF                 db    0
.rodata:00000000000091F0                 db    4
.rodata:00000000000091F1                 db    0
.rodata:00000000000091F2                 db    0
.rodata:00000000000091F3                 db    0
.rodata:00000000000091F4                 db    5
.rodata:00000000000091F5                 db    0
.rodata:00000000000091F6                 db    0
.rodata:00000000000091F7                 db    0
.rodata:00000000000091F8                 db    6
.rodata:00000000000091F9                 db    0
.rodata:00000000000091FA                 db    0
.rodata:00000000000091FB                 db    0
.rodata:00000000000091FC                 db    7
.rodata:00000000000091FD                 db    0
.rodata:00000000000091FE                 db    0
.rodata:00000000000091FF                 db    0
.rodata:0000000000009200                 db    8
.rodata:0000000000009201                 db    0
.rodata:0000000000009202                 db    0
.rodata:0000000000009203                 db    0
.rodata:0000000000009204                 db    9
.rodata:0000000000009205                 db    0
.rodata:0000000000009206                 db    0
.rodata:0000000000009207                 db    0
.rodata:0000000000009208 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000009214 aSS_2           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000921B ; const char aC_0[]
.rodata:000000000000921B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_558C↑o
.rodata:000000000000921F ; const char aWrittenByS[]
.rodata:000000000000921F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000921F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000922F ; const char aWrittenBySAndS[]
.rodata:000000000000922F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000922F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000009246 ; const char aWrittenBySSAnd[]
.rodata:0000000000009246 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000009246                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000009262 ; const char aReportBugsToS[]
.rodata:0000000000009262 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000009262                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000009277 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000009277                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000928D ; const char aSHomePageS[]
.rodata:000000000000928D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000928D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000092A1                 align 8
.rodata:00000000000092A8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000092A8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000092A8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000092A8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000092A8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000092A8                 db '.',0Ah
.rodata:00000000000092A8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000092A8                 db 0Ah,0
.rodata:0000000000009374                 align 8
.rodata:0000000000009378 ; const char aWrittenBySSSAn[]
.rodata:0000000000009378 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009378                                         ; DATA XREF: version_etc_arn:loc_57E0↑o
.rodata:0000000000009378                 db 'and %s.',0Ah,0
.rodata:0000000000009398 ; const char aWrittenBySSSSA[]
.rodata:0000000000009398 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009398                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000009398                 db '%s, and %s.',0Ah,0
.rodata:00000000000093BC                 align 20h
.rodata:00000000000093C0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000093C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000093C0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000093C0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000093E8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000093E8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000093E8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000093E8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000009414                 align 8
.rodata:0000000000009418 ; const char aWrittenBySSSSS[]
.rodata:0000000000009418 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009418                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000009418                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009418                 db 'and %s.',0Ah,0
.rodata:0000000000009448 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000009448 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009448                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000009448                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009448                 db '%s, and %s.',0Ah,0
.rodata:000000000000947C                 align 20h
.rodata:0000000000009480 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000009480                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000009480                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000009480                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000094BC                 align 20h
.rodata:00000000000094C0 ; const char aGeneralHelpUsi[]
.rodata:00000000000094C0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000094C0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000094C0                 db 0
.rodata:0000000000009501                 align 8
.rodata:0000000000009508 jpt_55F4        dd offset loc_5676 - 9508h
.rodata:0000000000009508                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000009508                                         ; version_etc_arn+9D↑r
.rodata:0000000000009508                 dd offset loc_5708 - 9508h ; jump table for switch statement
.rodata:0000000000009508                 dd offset loc_5748 - 9508h
.rodata:0000000000009508                 dd offset loc_5790 - 9508h
.rodata:0000000000009508                 dd offset loc_57E0 - 9508h
.rodata:0000000000009508                 dd offset loc_5838 - 9508h
.rodata:0000000000009508                 dd offset loc_5868 - 9508h
.rodata:0000000000009508                 dd offset loc_58D0 - 9508h
.rodata:0000000000009508                 dd offset loc_5600 - 9508h
.rodata:0000000000009508                 dd offset loc_56B0 - 9508h
.rodata:0000000000009530                 align 20h
.rodata:0000000000009540                 public version_etc_copyright
.rodata:0000000000009540 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000009540                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000956F ; const char aMemoryExhauste[]
.rodata:000000000000956F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000009580 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000009580                                         ; locale_charset:loc_6270↑o
.rodata:0000000000009586                 align 8
.rodata:0000000000009588 jpt_68FB        dd offset def_68FB - 9588h
.rodata:0000000000009588                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:0000000000009588                                         ; vasnprintf+554↑r
.rodata:0000000000009588                 dd offset loc_6D60 - 9588h ; jump table for switch statement
.rodata:0000000000009588                 dd offset loc_6D30 - 9588h
.rodata:0000000000009588                 dd offset loc_6CA8 - 9588h
.rodata:0000000000009588                 dd offset loc_6C68 - 9588h
.rodata:0000000000009588                 dd offset loc_6A38 - 9588h
.rodata:0000000000009588                 dd offset loc_6A38 - 9588h
.rodata:0000000000009588                 dd offset loc_6900 - 9588h
.rodata:0000000000009588                 dd offset loc_6900 - 9588h
.rodata:0000000000009588                 dd offset loc_6900 - 9588h
.rodata:0000000000009588                 dd offset loc_6900 - 9588h
.rodata:0000000000009588                 dd offset loc_6BE8 - 9588h
.rodata:0000000000009588                 dd offset loc_6B60 - 9588h
.rodata:0000000000009588                 dd offset loc_6A38 - 9588h
.rodata:0000000000009588                 dd offset loc_6A38 - 9588h
.rodata:0000000000009588                 dd offset loc_6900 - 9588h
.rodata:0000000000009588                 dd offset loc_6900 - 9588h
.rodata:0000000000009588                 dd offset loc_6900 - 9588h
.rodata:00000000000095D0 jpt_6EA0        dd offset loc_7110 - 95D0h
.rodata:00000000000095D0                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:00000000000095D0                                         ; vasnprintf+AF9↑r
.rodata:00000000000095D0                 dd offset loc_7130 - 95D0h ; jump table for switch statement
.rodata:00000000000095D0                 dd offset loc_7120 - 95D0h
.rodata:00000000000095D0                 dd offset loc_6FE0 - 95D0h
.rodata:00000000000095D0                 dd offset loc_6FE0 - 95D0h
.rodata:00000000000095E4 aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:00000000000095EB                 align 10h
.rodata:00000000000095F0 jpt_74F6        dd offset def_74F6 - 95F0h
.rodata:00000000000095F0                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:00000000000095F0                                         ; printf_fetchargs+2F↑r
.rodata:00000000000095F0                 dd offset loc_757C - 95F0h ; jump table for switch statement
.rodata:00000000000095F0                 dd offset loc_757C - 95F0h
.rodata:00000000000095F0                 dd offset loc_759E - 95F0h
.rodata:00000000000095F0                 dd offset loc_759E - 95F0h
.rodata:00000000000095F0                 dd offset loc_755A - 95F0h
.rodata:00000000000095F0                 dd offset loc_755A - 95F0h
.rodata:00000000000095F0                 dd offset loc_7536 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7536 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7536 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7536 - 95F0h
.rodata:00000000000095F0                 dd offset loc_75F2 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7500 - 95F0h
.rodata:00000000000095F0                 dd offset loc_755A - 95F0h
.rodata:00000000000095F0                 dd offset loc_755A - 95F0h
.rodata:00000000000095F0                 dd offset loc_75C4 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7620 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7536 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7536 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7536 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7536 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7536 - 95F0h
.rodata:00000000000095F0                 dd offset loc_7536 - 95F0h
.rodata:000000000000964C                 align 10h
.rodata:0000000000009650 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000009651                 db    0
.rodata:0000000000009652                 db    0
.rodata:0000000000009653                 db    0
.rodata:0000000000009654                 db  4Eh ; N
.rodata:0000000000009655                 db    0
.rodata:0000000000009656                 db    0
.rodata:0000000000009657                 db    0
.rodata:0000000000009658                 db  55h ; U
.rodata:0000000000009659                 db    0
.rodata:000000000000965A                 db    0
.rodata:000000000000965B                 db    0
.rodata:000000000000965C                 db  4Ch ; L
.rodata:000000000000965D                 db    0
.rodata:000000000000965E                 db    0
.rodata:000000000000965F                 db    0
.rodata:0000000000009660                 db  4Ch ; L
.rodata:0000000000009661                 db    0
.rodata:0000000000009662                 db    0
.rodata:0000000000009663                 db    0
.rodata:0000000000009664                 db  29h ; )
.rodata:0000000000009665                 db    0
.rodata:0000000000009666                 db    0
.rodata:0000000000009667                 db    0
.rodata:0000000000009668                 db    0
.rodata:0000000000009669                 db    0
.rodata:000000000000966A                 db    0
.rodata:000000000000966B                 db    0
.rodata:000000000000966C jpt_7905        dd offset loc_797B - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                                         ; DATA XREF: printf_parse+234↑o
.rodata:000000000000966C                                         ; printf_parse+23E↑r
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch ; jump table for switch statement
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset loc_7E7B - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset loc_7E9C - 966Ch, offset def_7905 - 966Ch, offset loc_7E7B - 966Ch
.rodata:000000000000966C                 dd offset loc_7E7B - 966Ch, offset loc_7E7B - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset loc_7907 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset loc_7EAC - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset loc_7E7B - 966Ch, offset def_7905 - 966Ch, offset loc_7E08 - 966Ch
.rodata:000000000000966C                 dd offset loc_7E1B - 966Ch, offset loc_7E7B - 966Ch, offset loc_7E7B - 966Ch
.rodata:000000000000966C                 dd offset loc_7E7B - 966Ch, offset def_7905 - 966Ch, offset loc_7E1B - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset loc_7DBC - 966Ch, offset loc_7EAC - 966Ch
.rodata:000000000000966C                 dd offset loc_7F00 - 966Ch, offset def_7905 - 966Ch, offset def_7905 - 966Ch
.rodata:000000000000966C                 dd offset loc_7E68 - 966Ch, offset def_7905 - 966Ch, offset loc_7EAC - 966Ch
.rodata:000000000000966C                 dd offset def_7905 - 966Ch, offset def_7905 - 966Ch, offset loc_7EAC - 966Ch
.rodata:000000000000966C _rodata         ends
.rodata:000000000000966C
.eh_frame_hdr:00000000000097BC ; ===========================================================================
.eh_frame_hdr:00000000000097BC
.eh_frame_hdr:00000000000097BC ; Segment type: Pure data
.eh_frame_hdr:00000000000097BC ; Segment permissions: Read
.eh_frame_hdr:00000000000097BC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000097BC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000097BC                 ;org 97BCh
.eh_frame_hdr:00000000000097BC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000097BD                 db  1Bh
.eh_frame_hdr:00000000000097BE                 db    3
.eh_frame_hdr:00000000000097BF                 db  3Bh ; ;
.eh_frame_hdr:00000000000097C0                 db 0B8h
.eh_frame_hdr:00000000000097C1                 db    2
.eh_frame_hdr:00000000000097C2                 db    0
.eh_frame_hdr:00000000000097C3                 db    0
.eh_frame_hdr:00000000000097C4                 db  56h ; V
.eh_frame_hdr:00000000000097C5                 db    0
.eh_frame_hdr:00000000000097C6                 db    0
.eh_frame_hdr:00000000000097C7                 db    0
.eh_frame_hdr:00000000000097C8                 db  24h ; $
.eh_frame_hdr:00000000000097C9                 db  80h
.eh_frame_hdr:00000000000097CA                 db 0FFh
.eh_frame_hdr:00000000000097CB                 db 0FFh
.eh_frame_hdr:00000000000097CC                 db    4
.eh_frame_hdr:00000000000097CD                 db    3
.eh_frame_hdr:00000000000097CE                 db    0
.eh_frame_hdr:00000000000097CF                 db    0
.eh_frame_hdr:00000000000097D0                 db    4
.eh_frame_hdr:00000000000097D1                 db  84h
.eh_frame_hdr:00000000000097D2                 db 0FFh
.eh_frame_hdr:00000000000097D3                 db 0FFh
.eh_frame_hdr:00000000000097D4                 db  2Ch ; ,
.eh_frame_hdr:00000000000097D5                 db    3
.eh_frame_hdr:00000000000097D6                 db    0
.eh_frame_hdr:00000000000097D7                 db    0
.eh_frame_hdr:00000000000097D8                 db  14h
.eh_frame_hdr:00000000000097D9                 db  84h
.eh_frame_hdr:00000000000097DA                 db 0FFh
.eh_frame_hdr:00000000000097DB                 db 0FFh
.eh_frame_hdr:00000000000097DC                 db  60h ; `
.eh_frame_hdr:00000000000097DD                 db    5
.eh_frame_hdr:00000000000097DE                 db    0
.eh_frame_hdr:00000000000097DF                 db    0
.eh_frame_hdr:00000000000097E0                 db  84h
.eh_frame_hdr:00000000000097E1                 db  87h
.eh_frame_hdr:00000000000097E2                 db 0FFh
.eh_frame_hdr:00000000000097E3                 db 0FFh
.eh_frame_hdr:00000000000097E4                 db 0D4h
.eh_frame_hdr:00000000000097E5                 db    2
.eh_frame_hdr:00000000000097E6                 db    0
.eh_frame_hdr:00000000000097E7                 db    0
.eh_frame_hdr:00000000000097E8                 db  94h
.eh_frame_hdr:00000000000097E9                 db  88h
.eh_frame_hdr:00000000000097EA                 db 0FFh
.eh_frame_hdr:00000000000097EB                 db 0FFh
.eh_frame_hdr:00000000000097EC                 db  44h ; D
.eh_frame_hdr:00000000000097ED                 db    3
.eh_frame_hdr:00000000000097EE                 db    0
.eh_frame_hdr:00000000000097EF                 db    0
.eh_frame_hdr:00000000000097F0                 db  14h
.eh_frame_hdr:00000000000097F1                 db  8Bh
.eh_frame_hdr:00000000000097F2                 db 0FFh
.eh_frame_hdr:00000000000097F3                 db 0FFh
.eh_frame_hdr:00000000000097F4                 db 0B8h
.eh_frame_hdr:00000000000097F5                 db    3
.eh_frame_hdr:00000000000097F6                 db    0
.eh_frame_hdr:00000000000097F7                 db    0
.eh_frame_hdr:00000000000097F8                 db  84h
.eh_frame_hdr:00000000000097F9                 db  8Bh
.eh_frame_hdr:00000000000097FA                 db 0FFh
.eh_frame_hdr:00000000000097FB                 db 0FFh
.eh_frame_hdr:00000000000097FC                 db 0E0h
.eh_frame_hdr:00000000000097FD                 db    3
.eh_frame_hdr:00000000000097FE                 db    0
.eh_frame_hdr:00000000000097FF                 db    0
.eh_frame_hdr:0000000000009800                 db    4
.eh_frame_hdr:0000000000009801                 db  8Ch
.eh_frame_hdr:0000000000009802                 db 0FFh
.eh_frame_hdr:0000000000009803                 db 0FFh
.eh_frame_hdr:0000000000009804                 db 0FCh
.eh_frame_hdr:0000000000009805                 db    3
.eh_frame_hdr:0000000000009806                 db    0
.eh_frame_hdr:0000000000009807                 db    0
.eh_frame_hdr:0000000000009808                 db 0C4h
.eh_frame_hdr:0000000000009809                 db  91h
.eh_frame_hdr:000000000000980A                 db 0FFh
.eh_frame_hdr:000000000000980B                 db 0FFh
.eh_frame_hdr:000000000000980C                 db  60h ; `
.eh_frame_hdr:000000000000980D                 db    4
.eh_frame_hdr:000000000000980E                 db    0
.eh_frame_hdr:000000000000980F                 db    0
.eh_frame_hdr:0000000000009810                 db  94h
.eh_frame_hdr:0000000000009811                 db  99h
.eh_frame_hdr:0000000000009812                 db 0FFh
.eh_frame_hdr:0000000000009813                 db 0FFh
.eh_frame_hdr:0000000000009814                 db  34h ; 4
.eh_frame_hdr:0000000000009815                 db    5
.eh_frame_hdr:0000000000009816                 db    0
.eh_frame_hdr:0000000000009817                 db    0
.eh_frame_hdr:0000000000009818                 db 0C4h
.eh_frame_hdr:0000000000009819                 db  9Dh
.eh_frame_hdr:000000000000981A                 db 0FFh
.eh_frame_hdr:000000000000981B                 db 0FFh
.eh_frame_hdr:000000000000981C                 db  9Ch
.eh_frame_hdr:000000000000981D                 db    5
.eh_frame_hdr:000000000000981E                 db    0
.eh_frame_hdr:000000000000981F                 db    0
.eh_frame_hdr:0000000000009820                 db  74h ; t
.eh_frame_hdr:0000000000009821                 db  9Eh
.eh_frame_hdr:0000000000009822                 db 0FFh
.eh_frame_hdr:0000000000009823                 db 0FFh
.eh_frame_hdr:0000000000009824                 db 0D0h
.eh_frame_hdr:0000000000009825                 db    5
.eh_frame_hdr:0000000000009826                 db    0
.eh_frame_hdr:0000000000009827                 db    0
.eh_frame_hdr:0000000000009828                 db  84h
.eh_frame_hdr:0000000000009829                 db  9Eh
.eh_frame_hdr:000000000000982A                 db 0FFh
.eh_frame_hdr:000000000000982B                 db 0FFh
.eh_frame_hdr:000000000000982C                 db 0E4h
.eh_frame_hdr:000000000000982D                 db    5
.eh_frame_hdr:000000000000982E                 db    0
.eh_frame_hdr:000000000000982F                 db    0
.eh_frame_hdr:0000000000009830                 db  94h
.eh_frame_hdr:0000000000009831                 db  9Eh
.eh_frame_hdr:0000000000009832                 db 0FFh
.eh_frame_hdr:0000000000009833                 db 0FFh
.eh_frame_hdr:0000000000009834                 db 0FCh
.eh_frame_hdr:0000000000009835                 db    5
.eh_frame_hdr:0000000000009836                 db    0
.eh_frame_hdr:0000000000009837                 db    0
.eh_frame_hdr:0000000000009838                 db 0A4h
.eh_frame_hdr:0000000000009839                 db  9Eh
.eh_frame_hdr:000000000000983A                 db 0FFh
.eh_frame_hdr:000000000000983B                 db 0FFh
.eh_frame_hdr:000000000000983C                 db  10h
.eh_frame_hdr:000000000000983D                 db    6
.eh_frame_hdr:000000000000983E                 db    0
.eh_frame_hdr:000000000000983F                 db    0
.eh_frame_hdr:0000000000009840                 db 0B4h
.eh_frame_hdr:0000000000009841                 db  9Eh
.eh_frame_hdr:0000000000009842                 db 0FFh
.eh_frame_hdr:0000000000009843                 db 0FFh
.eh_frame_hdr:0000000000009844                 db  24h ; $
.eh_frame_hdr:0000000000009845                 db    6
.eh_frame_hdr:0000000000009846                 db    0
.eh_frame_hdr:0000000000009847                 db    0
.eh_frame_hdr:0000000000009848                 db  64h ; d
.eh_frame_hdr:0000000000009849                 db  9Fh
.eh_frame_hdr:000000000000984A                 db 0FFh
.eh_frame_hdr:000000000000984B                 db 0FFh
.eh_frame_hdr:000000000000984C                 db  54h ; T
.eh_frame_hdr:000000000000984D                 db    6
.eh_frame_hdr:000000000000984E                 db    0
.eh_frame_hdr:000000000000984F                 db    0
.eh_frame_hdr:0000000000009850                 db 0C4h
.eh_frame_hdr:0000000000009851                 db  9Fh
.eh_frame_hdr:0000000000009852                 db 0FFh
.eh_frame_hdr:0000000000009853                 db 0FFh
.eh_frame_hdr:0000000000009854                 db  74h ; t
.eh_frame_hdr:0000000000009855                 db    6
.eh_frame_hdr:0000000000009856                 db    0
.eh_frame_hdr:0000000000009857                 db    0
.eh_frame_hdr:0000000000009858                 db  64h ; d
.eh_frame_hdr:0000000000009859                 db 0A0h
.eh_frame_hdr:000000000000985A                 db 0FFh
.eh_frame_hdr:000000000000985B                 db 0FFh
.eh_frame_hdr:000000000000985C                 db  8Ch
.eh_frame_hdr:000000000000985D                 db    6
.eh_frame_hdr:000000000000985E                 db    0
.eh_frame_hdr:000000000000985F                 db    0
.eh_frame_hdr:0000000000009860                 db    4
.eh_frame_hdr:0000000000009861                 db 0A1h
.eh_frame_hdr:0000000000009862                 db 0FFh
.eh_frame_hdr:0000000000009863                 db 0FFh
.eh_frame_hdr:0000000000009864                 db 0ACh
.eh_frame_hdr:0000000000009865                 db    6
.eh_frame_hdr:0000000000009866                 db    0
.eh_frame_hdr:0000000000009867                 db    0
.eh_frame_hdr:0000000000009868                 db 0F4h
.eh_frame_hdr:0000000000009869                 db 0A1h
.eh_frame_hdr:000000000000986A                 db 0FFh
.eh_frame_hdr:000000000000986B                 db 0FFh
.eh_frame_hdr:000000000000986C                 db 0F0h
.eh_frame_hdr:000000000000986D                 db    6
.eh_frame_hdr:000000000000986E                 db    0
.eh_frame_hdr:000000000000986F                 db    0
.eh_frame_hdr:0000000000009870                 db  34h ; 4
.eh_frame_hdr:0000000000009871                 db 0B4h
.eh_frame_hdr:0000000000009872                 db 0FFh
.eh_frame_hdr:0000000000009873                 db 0FFh
.eh_frame_hdr:0000000000009874                 db  68h ; h
.eh_frame_hdr:0000000000009875                 db    7
.eh_frame_hdr:0000000000009876                 db    0
.eh_frame_hdr:0000000000009877                 db    0
.eh_frame_hdr:0000000000009878                 db 0E4h
.eh_frame_hdr:0000000000009879                 db 0B5h
.eh_frame_hdr:000000000000987A                 db 0FFh
.eh_frame_hdr:000000000000987B                 db 0FFh
.eh_frame_hdr:000000000000987C                 db 0D4h
.eh_frame_hdr:000000000000987D                 db    7
.eh_frame_hdr:000000000000987E                 db    0
.eh_frame_hdr:000000000000987F                 db    0
.eh_frame_hdr:0000000000009880                 db  24h ; $
.eh_frame_hdr:0000000000009881                 db 0B6h
.eh_frame_hdr:0000000000009882                 db 0FFh
.eh_frame_hdr:0000000000009883                 db 0FFh
.eh_frame_hdr:0000000000009884                 db    0
.eh_frame_hdr:0000000000009885                 db    8
.eh_frame_hdr:0000000000009886                 db    0
.eh_frame_hdr:0000000000009887                 db    0
.eh_frame_hdr:0000000000009888                 db  44h ; D
.eh_frame_hdr:0000000000009889                 db 0B6h
.eh_frame_hdr:000000000000988A                 db 0FFh
.eh_frame_hdr:000000000000988B                 db 0FFh
.eh_frame_hdr:000000000000988C                 db  14h
.eh_frame_hdr:000000000000988D                 db    8
.eh_frame_hdr:000000000000988E                 db    0
.eh_frame_hdr:000000000000988F                 db    0
.eh_frame_hdr:0000000000009890                 db  64h ; d
.eh_frame_hdr:0000000000009891                 db 0B6h
.eh_frame_hdr:0000000000009892                 db 0FFh
.eh_frame_hdr:0000000000009893                 db 0FFh
.eh_frame_hdr:0000000000009894                 db  28h ; (
.eh_frame_hdr:0000000000009895                 db    8
.eh_frame_hdr:0000000000009896                 db    0
.eh_frame_hdr:0000000000009897                 db    0
.eh_frame_hdr:0000000000009898                 db 0A4h
.eh_frame_hdr:0000000000009899                 db 0B6h
.eh_frame_hdr:000000000000989A                 db 0FFh
.eh_frame_hdr:000000000000989B                 db 0FFh
.eh_frame_hdr:000000000000989C                 db  3Ch ; <
.eh_frame_hdr:000000000000989D                 db    8
.eh_frame_hdr:000000000000989E                 db    0
.eh_frame_hdr:000000000000989F                 db    0
.eh_frame_hdr:00000000000098A0                 db 0C4h
.eh_frame_hdr:00000000000098A1                 db 0B6h
.eh_frame_hdr:00000000000098A2                 db 0FFh
.eh_frame_hdr:00000000000098A3                 db 0FFh
.eh_frame_hdr:00000000000098A4                 db  50h ; P
.eh_frame_hdr:00000000000098A5                 db    8
.eh_frame_hdr:00000000000098A6                 db    0
.eh_frame_hdr:00000000000098A7                 db    0
.eh_frame_hdr:00000000000098A8                 db 0F4h
.eh_frame_hdr:00000000000098A9                 db 0B6h
.eh_frame_hdr:00000000000098AA                 db 0FFh
.eh_frame_hdr:00000000000098AB                 db 0FFh
.eh_frame_hdr:00000000000098AC                 db  64h ; d
.eh_frame_hdr:00000000000098AD                 db    8
.eh_frame_hdr:00000000000098AE                 db    0
.eh_frame_hdr:00000000000098AF                 db    0
.eh_frame_hdr:00000000000098B0                 db  74h ; t
.eh_frame_hdr:00000000000098B1                 db 0B7h
.eh_frame_hdr:00000000000098B2                 db 0FFh
.eh_frame_hdr:00000000000098B3                 db 0FFh
.eh_frame_hdr:00000000000098B4                 db 0B8h
.eh_frame_hdr:00000000000098B5                 db    8
.eh_frame_hdr:00000000000098B6                 db    0
.eh_frame_hdr:00000000000098B7                 db    0
.eh_frame_hdr:00000000000098B8                 db  64h ; d
.eh_frame_hdr:00000000000098B9                 db 0B8h
.eh_frame_hdr:00000000000098BA                 db 0FFh
.eh_frame_hdr:00000000000098BB                 db 0FFh
.eh_frame_hdr:00000000000098BC                 db  24h ; $
.eh_frame_hdr:00000000000098BD                 db    9
.eh_frame_hdr:00000000000098BE                 db    0
.eh_frame_hdr:00000000000098BF                 db    0
.eh_frame_hdr:00000000000098C0                 db  74h ; t
.eh_frame_hdr:00000000000098C1                 db 0B8h
.eh_frame_hdr:00000000000098C2                 db 0FFh
.eh_frame_hdr:00000000000098C3                 db 0FFh
.eh_frame_hdr:00000000000098C4                 db  38h ; 8
.eh_frame_hdr:00000000000098C5                 db    9
.eh_frame_hdr:00000000000098C6                 db    0
.eh_frame_hdr:00000000000098C7                 db    0
.eh_frame_hdr:00000000000098C8                 db  14h
.eh_frame_hdr:00000000000098C9                 db 0B9h
.eh_frame_hdr:00000000000098CA                 db 0FFh
.eh_frame_hdr:00000000000098CB                 db 0FFh
.eh_frame_hdr:00000000000098CC                 db  64h ; d
.eh_frame_hdr:00000000000098CD                 db    9
.eh_frame_hdr:00000000000098CE                 db    0
.eh_frame_hdr:00000000000098CF                 db    0
.eh_frame_hdr:00000000000098D0                 db  34h ; 4
.eh_frame_hdr:00000000000098D1                 db 0B9h
.eh_frame_hdr:00000000000098D2                 db 0FFh
.eh_frame_hdr:00000000000098D3                 db 0FFh
.eh_frame_hdr:00000000000098D4                 db  78h ; x
.eh_frame_hdr:00000000000098D5                 db    9
.eh_frame_hdr:00000000000098D6                 db    0
.eh_frame_hdr:00000000000098D7                 db    0
.eh_frame_hdr:00000000000098D8                 db  44h ; D
.eh_frame_hdr:00000000000098D9                 db 0B9h
.eh_frame_hdr:00000000000098DA                 db 0FFh
.eh_frame_hdr:00000000000098DB                 db 0FFh
.eh_frame_hdr:00000000000098DC                 db  8Ch
.eh_frame_hdr:00000000000098DD                 db    9
.eh_frame_hdr:00000000000098DE                 db    0
.eh_frame_hdr:00000000000098DF                 db    0
.eh_frame_hdr:00000000000098E0                 db  64h ; d
.eh_frame_hdr:00000000000098E1                 db 0B9h
.eh_frame_hdr:00000000000098E2                 db 0FFh
.eh_frame_hdr:00000000000098E3                 db 0FFh
.eh_frame_hdr:00000000000098E4                 db 0A0h
.eh_frame_hdr:00000000000098E5                 db    9
.eh_frame_hdr:00000000000098E6                 db    0
.eh_frame_hdr:00000000000098E7                 db    0
.eh_frame_hdr:00000000000098E8                 db  84h
.eh_frame_hdr:00000000000098E9                 db 0B9h
.eh_frame_hdr:00000000000098EA                 db 0FFh
.eh_frame_hdr:00000000000098EB                 db 0FFh
.eh_frame_hdr:00000000000098EC                 db 0B4h
.eh_frame_hdr:00000000000098ED                 db    9
.eh_frame_hdr:00000000000098EE                 db    0
.eh_frame_hdr:00000000000098EF                 db    0
.eh_frame_hdr:00000000000098F0                 db  14h
.eh_frame_hdr:00000000000098F1                 db 0BAh
.eh_frame_hdr:00000000000098F2                 db 0FFh
.eh_frame_hdr:00000000000098F3                 db 0FFh
.eh_frame_hdr:00000000000098F4                 db 0D0h
.eh_frame_hdr:00000000000098F5                 db    9
.eh_frame_hdr:00000000000098F6                 db    0
.eh_frame_hdr:00000000000098F7                 db    0
.eh_frame_hdr:00000000000098F8                 db 0A4h
.eh_frame_hdr:00000000000098F9                 db 0BAh
.eh_frame_hdr:00000000000098FA                 db 0FFh
.eh_frame_hdr:00000000000098FB                 db 0FFh
.eh_frame_hdr:00000000000098FC                 db 0ECh
.eh_frame_hdr:00000000000098FD                 db    9
.eh_frame_hdr:00000000000098FE                 db    0
.eh_frame_hdr:00000000000098FF                 db    0
.eh_frame_hdr:0000000000009900                 db 0B4h
.eh_frame_hdr:0000000000009901                 db 0BAh
.eh_frame_hdr:0000000000009902                 db 0FFh
.eh_frame_hdr:0000000000009903                 db 0FFh
.eh_frame_hdr:0000000000009904                 db    0
.eh_frame_hdr:0000000000009905                 db  0Ah
.eh_frame_hdr:0000000000009906                 db    0
.eh_frame_hdr:0000000000009907                 db    0
.eh_frame_hdr:0000000000009908                 db 0C4h
.eh_frame_hdr:0000000000009909                 db 0BAh
.eh_frame_hdr:000000000000990A                 db 0FFh
.eh_frame_hdr:000000000000990B                 db 0FFh
.eh_frame_hdr:000000000000990C                 db  14h
.eh_frame_hdr:000000000000990D                 db  0Ah
.eh_frame_hdr:000000000000990E                 db    0
.eh_frame_hdr:000000000000990F                 db    0
.eh_frame_hdr:0000000000009910                 db  64h ; d
.eh_frame_hdr:0000000000009911                 db 0BBh
.eh_frame_hdr:0000000000009912                 db 0FFh
.eh_frame_hdr:0000000000009913                 db 0FFh
.eh_frame_hdr:0000000000009914                 db  30h ; 0
.eh_frame_hdr:0000000000009915                 db  0Ah
.eh_frame_hdr:0000000000009916                 db    0
.eh_frame_hdr:0000000000009917                 db    0
.eh_frame_hdr:0000000000009918                 db  74h ; t
.eh_frame_hdr:0000000000009919                 db 0BBh
.eh_frame_hdr:000000000000991A                 db 0FFh
.eh_frame_hdr:000000000000991B                 db 0FFh
.eh_frame_hdr:000000000000991C                 db  44h ; D
.eh_frame_hdr:000000000000991D                 db  0Ah
.eh_frame_hdr:000000000000991E                 db    0
.eh_frame_hdr:000000000000991F                 db    0
.eh_frame_hdr:0000000000009920                 db  94h
.eh_frame_hdr:0000000000009921                 db 0BBh
.eh_frame_hdr:0000000000009922                 db 0FFh
.eh_frame_hdr:0000000000009923                 db 0FFh
.eh_frame_hdr:0000000000009924                 db  58h ; X
.eh_frame_hdr:0000000000009925                 db  0Ah
.eh_frame_hdr:0000000000009926                 db    0
.eh_frame_hdr:0000000000009927                 db    0
.eh_frame_hdr:0000000000009928                 db 0A4h
.eh_frame_hdr:0000000000009929                 db 0BBh
.eh_frame_hdr:000000000000992A                 db 0FFh
.eh_frame_hdr:000000000000992B                 db 0FFh
.eh_frame_hdr:000000000000992C                 db  6Ch ; l
.eh_frame_hdr:000000000000992D                 db  0Ah
.eh_frame_hdr:000000000000992E                 db    0
.eh_frame_hdr:000000000000992F                 db    0
.eh_frame_hdr:0000000000009930                 db  34h ; 4
.eh_frame_hdr:0000000000009931                 db 0BCh
.eh_frame_hdr:0000000000009932                 db 0FFh
.eh_frame_hdr:0000000000009933                 db 0FFh
.eh_frame_hdr:0000000000009934                 db  88h
.eh_frame_hdr:0000000000009935                 db  0Ah
.eh_frame_hdr:0000000000009936                 db    0
.eh_frame_hdr:0000000000009937                 db    0
.eh_frame_hdr:0000000000009938                 db 0D4h
.eh_frame_hdr:0000000000009939                 db 0BCh
.eh_frame_hdr:000000000000993A                 db 0FFh
.eh_frame_hdr:000000000000993B                 db 0FFh
.eh_frame_hdr:000000000000993C                 db 0A4h
.eh_frame_hdr:000000000000993D                 db  0Ah
.eh_frame_hdr:000000000000993E                 db    0
.eh_frame_hdr:000000000000993F                 db    0
.eh_frame_hdr:0000000000009940                 db 0E4h
.eh_frame_hdr:0000000000009941                 db 0BCh
.eh_frame_hdr:0000000000009942                 db 0FFh
.eh_frame_hdr:0000000000009943                 db 0FFh
.eh_frame_hdr:0000000000009944                 db 0B8h
.eh_frame_hdr:0000000000009945                 db  0Ah
.eh_frame_hdr:0000000000009946                 db    0
.eh_frame_hdr:0000000000009947                 db    0
.eh_frame_hdr:0000000000009948                 db    4
.eh_frame_hdr:0000000000009949                 db 0BDh
.eh_frame_hdr:000000000000994A                 db 0FFh
.eh_frame_hdr:000000000000994B                 db 0FFh
.eh_frame_hdr:000000000000994C                 db 0CCh
.eh_frame_hdr:000000000000994D                 db  0Ah
.eh_frame_hdr:000000000000994E                 db    0
.eh_frame_hdr:000000000000994F                 db    0
.eh_frame_hdr:0000000000009950                 db  24h ; $
.eh_frame_hdr:0000000000009951                 db 0BDh
.eh_frame_hdr:0000000000009952                 db 0FFh
.eh_frame_hdr:0000000000009953                 db 0FFh
.eh_frame_hdr:0000000000009954                 db 0E0h
.eh_frame_hdr:0000000000009955                 db  0Ah
.eh_frame_hdr:0000000000009956                 db    0
.eh_frame_hdr:0000000000009957                 db    0
.eh_frame_hdr:0000000000009958                 db  34h ; 4
.eh_frame_hdr:0000000000009959                 db 0BDh
.eh_frame_hdr:000000000000995A                 db 0FFh
.eh_frame_hdr:000000000000995B                 db 0FFh
.eh_frame_hdr:000000000000995C                 db 0F4h
.eh_frame_hdr:000000000000995D                 db  0Ah
.eh_frame_hdr:000000000000995E                 db    0
.eh_frame_hdr:000000000000995F                 db    0
.eh_frame_hdr:0000000000009960                 db  54h ; T
.eh_frame_hdr:0000000000009961                 db 0BDh
.eh_frame_hdr:0000000000009962                 db 0FFh
.eh_frame_hdr:0000000000009963                 db 0FFh
.eh_frame_hdr:0000000000009964                 db    8
.eh_frame_hdr:0000000000009965                 db  0Bh
.eh_frame_hdr:0000000000009966                 db    0
.eh_frame_hdr:0000000000009967                 db    0
.eh_frame_hdr:0000000000009968                 db  74h ; t
.eh_frame_hdr:0000000000009969                 db 0BDh
.eh_frame_hdr:000000000000996A                 db 0FFh
.eh_frame_hdr:000000000000996B                 db 0FFh
.eh_frame_hdr:000000000000996C                 db  1Ch
.eh_frame_hdr:000000000000996D                 db  0Bh
.eh_frame_hdr:000000000000996E                 db    0
.eh_frame_hdr:000000000000996F                 db    0
.eh_frame_hdr:0000000000009970                 db  94h
.eh_frame_hdr:0000000000009971                 db 0BDh
.eh_frame_hdr:0000000000009972                 db 0FFh
.eh_frame_hdr:0000000000009973                 db 0FFh
.eh_frame_hdr:0000000000009974                 db  34h ; 4
.eh_frame_hdr:0000000000009975                 db  0Bh
.eh_frame_hdr:0000000000009976                 db    0
.eh_frame_hdr:0000000000009977                 db    0
.eh_frame_hdr:0000000000009978                 db 0B4h
.eh_frame_hdr:0000000000009979                 db 0C1h
.eh_frame_hdr:000000000000997A                 db 0FFh
.eh_frame_hdr:000000000000997B                 db 0FFh
.eh_frame_hdr:000000000000997C                 db  48h ; H
.eh_frame_hdr:000000000000997D                 db  0Ch
.eh_frame_hdr:000000000000997E                 db    0
.eh_frame_hdr:000000000000997F                 db    0
.eh_frame_hdr:0000000000009980                 db 0D4h
.eh_frame_hdr:0000000000009981                 db 0C1h
.eh_frame_hdr:0000000000009982                 db 0FFh
.eh_frame_hdr:0000000000009983                 db 0FFh
.eh_frame_hdr:0000000000009984                 db  5Ch ; \
.eh_frame_hdr:0000000000009985                 db  0Ch
.eh_frame_hdr:0000000000009986                 db    0
.eh_frame_hdr:0000000000009987                 db    0
.eh_frame_hdr:0000000000009988                 db  54h ; T
.eh_frame_hdr:0000000000009989                 db 0C2h
.eh_frame_hdr:000000000000998A                 db 0FFh
.eh_frame_hdr:000000000000998B                 db 0FFh
.eh_frame_hdr:000000000000998C                 db  78h ; x
.eh_frame_hdr:000000000000998D                 db  0Ch
.eh_frame_hdr:000000000000998E                 db    0
.eh_frame_hdr:000000000000998F                 db    0
.eh_frame_hdr:0000000000009990                 db  34h ; 4
.eh_frame_hdr:0000000000009991                 db 0C3h
.eh_frame_hdr:0000000000009992                 db 0FFh
.eh_frame_hdr:0000000000009993                 db 0FFh
.eh_frame_hdr:0000000000009994                 db 0A4h
.eh_frame_hdr:0000000000009995                 db  0Ch
.eh_frame_hdr:0000000000009996                 db    0
.eh_frame_hdr:0000000000009997                 db    0
.eh_frame_hdr:0000000000009998                 db 0B4h
.eh_frame_hdr:0000000000009999                 db 0C3h
.eh_frame_hdr:000000000000999A                 db 0FFh
.eh_frame_hdr:000000000000999B                 db 0FFh
.eh_frame_hdr:000000000000999C                 db 0C4h
.eh_frame_hdr:000000000000999D                 db  0Ch
.eh_frame_hdr:000000000000999E                 db    0
.eh_frame_hdr:000000000000999F                 db    0
.eh_frame_hdr:00000000000099A0                 db 0D4h
.eh_frame_hdr:00000000000099A1                 db 0C3h
.eh_frame_hdr:00000000000099A2                 db 0FFh
.eh_frame_hdr:00000000000099A3                 db 0FFh
.eh_frame_hdr:00000000000099A4                 db 0E0h
.eh_frame_hdr:00000000000099A5                 db  0Ch
.eh_frame_hdr:00000000000099A6                 db    0
.eh_frame_hdr:00000000000099A7                 db    0
.eh_frame_hdr:00000000000099A8                 db    4
.eh_frame_hdr:00000000000099A9                 db 0C4h
.eh_frame_hdr:00000000000099AA                 db 0FFh
.eh_frame_hdr:00000000000099AB                 db 0FFh
.eh_frame_hdr:00000000000099AC                 db 0F4h
.eh_frame_hdr:00000000000099AD                 db  0Ch
.eh_frame_hdr:00000000000099AE                 db    0
.eh_frame_hdr:00000000000099AF                 db    0
.eh_frame_hdr:00000000000099B0                 db  14h
.eh_frame_hdr:00000000000099B1                 db 0C4h
.eh_frame_hdr:00000000000099B2                 db 0FFh
.eh_frame_hdr:00000000000099B3                 db 0FFh
.eh_frame_hdr:00000000000099B4                 db    8
.eh_frame_hdr:00000000000099B5                 db  0Dh
.eh_frame_hdr:00000000000099B6                 db    0
.eh_frame_hdr:00000000000099B7                 db    0
.eh_frame_hdr:00000000000099B8                 db  54h ; T
.eh_frame_hdr:00000000000099B9                 db 0C4h
.eh_frame_hdr:00000000000099BA                 db 0FFh
.eh_frame_hdr:00000000000099BB                 db 0FFh
.eh_frame_hdr:00000000000099BC                 db  2Ch ; ,
.eh_frame_hdr:00000000000099BD                 db  0Dh
.eh_frame_hdr:00000000000099BE                 db    0
.eh_frame_hdr:00000000000099BF                 db    0
.eh_frame_hdr:00000000000099C0                 db  84h
.eh_frame_hdr:00000000000099C1                 db 0C4h
.eh_frame_hdr:00000000000099C2                 db 0FFh
.eh_frame_hdr:00000000000099C3                 db 0FFh
.eh_frame_hdr:00000000000099C4                 db  40h ; @
.eh_frame_hdr:00000000000099C5                 db  0Dh
.eh_frame_hdr:00000000000099C6                 db    0
.eh_frame_hdr:00000000000099C7                 db    0
.eh_frame_hdr:00000000000099C8                 db  14h
.eh_frame_hdr:00000000000099C9                 db 0C5h
.eh_frame_hdr:00000000000099CA                 db 0FFh
.eh_frame_hdr:00000000000099CB                 db 0FFh
.eh_frame_hdr:00000000000099CC                 db  58h ; X
.eh_frame_hdr:00000000000099CD                 db  0Dh
.eh_frame_hdr:00000000000099CE                 db    0
.eh_frame_hdr:00000000000099CF                 db    0
.eh_frame_hdr:00000000000099D0                 db  64h ; d
.eh_frame_hdr:00000000000099D1                 db 0C5h
.eh_frame_hdr:00000000000099D2                 db 0FFh
.eh_frame_hdr:00000000000099D3                 db 0FFh
.eh_frame_hdr:00000000000099D4                 db  70h ; p
.eh_frame_hdr:00000000000099D5                 db  0Dh
.eh_frame_hdr:00000000000099D6                 db    0
.eh_frame_hdr:00000000000099D7                 db    0
.eh_frame_hdr:00000000000099D8                 db  84h
.eh_frame_hdr:00000000000099D9                 db 0C5h
.eh_frame_hdr:00000000000099DA                 db 0FFh
.eh_frame_hdr:00000000000099DB                 db 0FFh
.eh_frame_hdr:00000000000099DC                 db  8Ch
.eh_frame_hdr:00000000000099DD                 db  0Dh
.eh_frame_hdr:00000000000099DE                 db    0
.eh_frame_hdr:00000000000099DF                 db    0
.eh_frame_hdr:00000000000099E0                 db 0B4h
.eh_frame_hdr:00000000000099E1                 db 0C5h
.eh_frame_hdr:00000000000099E2                 db 0FFh
.eh_frame_hdr:00000000000099E3                 db 0FFh
.eh_frame_hdr:00000000000099E4                 db 0A8h
.eh_frame_hdr:00000000000099E5                 db  0Dh
.eh_frame_hdr:00000000000099E6                 db    0
.eh_frame_hdr:00000000000099E7                 db    0
.eh_frame_hdr:00000000000099E8                 db 0E4h
.eh_frame_hdr:00000000000099E9                 db 0C5h
.eh_frame_hdr:00000000000099EA                 db 0FFh
.eh_frame_hdr:00000000000099EB                 db 0FFh
.eh_frame_hdr:00000000000099EC                 db 0D0h
.eh_frame_hdr:00000000000099ED                 db  0Dh
.eh_frame_hdr:00000000000099EE                 db    0
.eh_frame_hdr:00000000000099EF                 db    0
.eh_frame_hdr:00000000000099F0                 db    4
.eh_frame_hdr:00000000000099F1                 db 0C6h
.eh_frame_hdr:00000000000099F2                 db 0FFh
.eh_frame_hdr:00000000000099F3                 db 0FFh
.eh_frame_hdr:00000000000099F4                 db 0ECh
.eh_frame_hdr:00000000000099F5                 db  0Dh
.eh_frame_hdr:00000000000099F6                 db    0
.eh_frame_hdr:00000000000099F7                 db    0
.eh_frame_hdr:00000000000099F8                 db  44h ; D
.eh_frame_hdr:00000000000099F9                 db 0C6h
.eh_frame_hdr:00000000000099FA                 db 0FFh
.eh_frame_hdr:00000000000099FB                 db 0FFh
.eh_frame_hdr:00000000000099FC                 db    4
.eh_frame_hdr:00000000000099FD                 db  0Eh
.eh_frame_hdr:00000000000099FE                 db    0
.eh_frame_hdr:00000000000099FF                 db    0
.eh_frame_hdr:0000000000009A00                 db    4
.eh_frame_hdr:0000000000009A01                 db 0C7h
.eh_frame_hdr:0000000000009A02                 db 0FFh
.eh_frame_hdr:0000000000009A03                 db 0FFh
.eh_frame_hdr:0000000000009A04                 db  24h ; $
.eh_frame_hdr:0000000000009A05                 db  0Eh
.eh_frame_hdr:0000000000009A06                 db    0
.eh_frame_hdr:0000000000009A07                 db    0
.eh_frame_hdr:0000000000009A08                 db  94h
.eh_frame_hdr:0000000000009A09                 db 0C7h
.eh_frame_hdr:0000000000009A0A                 db 0FFh
.eh_frame_hdr:0000000000009A0B                 db 0FFh
.eh_frame_hdr:0000000000009A0C                 db  64h ; d
.eh_frame_hdr:0000000000009A0D                 db  0Eh
.eh_frame_hdr:0000000000009A0E                 db    0
.eh_frame_hdr:0000000000009A0F                 db    0
.eh_frame_hdr:0000000000009A10                 db 0F4h
.eh_frame_hdr:0000000000009A11                 db 0C7h
.eh_frame_hdr:0000000000009A12                 db 0FFh
.eh_frame_hdr:0000000000009A13                 db 0FFh
.eh_frame_hdr:0000000000009A14                 db  90h
.eh_frame_hdr:0000000000009A15                 db  0Eh
.eh_frame_hdr:0000000000009A16                 db    0
.eh_frame_hdr:0000000000009A17                 db    0
.eh_frame_hdr:0000000000009A18                 db  84h
.eh_frame_hdr:0000000000009A19                 db 0C9h
.eh_frame_hdr:0000000000009A1A                 db 0FFh
.eh_frame_hdr:0000000000009A1B                 db 0FFh
.eh_frame_hdr:0000000000009A1C                 db 0DCh
.eh_frame_hdr:0000000000009A1D                 db  0Eh
.eh_frame_hdr:0000000000009A1E                 db    0
.eh_frame_hdr:0000000000009A1F                 db    0
.eh_frame_hdr:0000000000009A20                 db    4
.eh_frame_hdr:0000000000009A21                 db 0CAh
.eh_frame_hdr:0000000000009A22                 db 0FFh
.eh_frame_hdr:0000000000009A23                 db 0FFh
.eh_frame_hdr:0000000000009A24                 db    4
.eh_frame_hdr:0000000000009A25                 db  0Fh
.eh_frame_hdr:0000000000009A26                 db    0
.eh_frame_hdr:0000000000009A27                 db    0
.eh_frame_hdr:0000000000009A28                 db  84h
.eh_frame_hdr:0000000000009A29                 db 0CAh
.eh_frame_hdr:0000000000009A2A                 db 0FFh
.eh_frame_hdr:0000000000009A2B                 db 0FFh
.eh_frame_hdr:0000000000009A2C                 db  54h ; T
.eh_frame_hdr:0000000000009A2D                 db  0Fh
.eh_frame_hdr:0000000000009A2E                 db    0
.eh_frame_hdr:0000000000009A2F                 db    0
.eh_frame_hdr:0000000000009A30                 db 0C4h
.eh_frame_hdr:0000000000009A31                 db 0CAh
.eh_frame_hdr:0000000000009A32                 db 0FFh
.eh_frame_hdr:0000000000009A33                 db 0FFh
.eh_frame_hdr:0000000000009A34                 db  74h ; t
.eh_frame_hdr:0000000000009A35                 db  0Fh
.eh_frame_hdr:0000000000009A36                 db    0
.eh_frame_hdr:0000000000009A37                 db    0
.eh_frame_hdr:0000000000009A38                 db  44h ; D
.eh_frame_hdr:0000000000009A39                 db 0CBh
.eh_frame_hdr:0000000000009A3A                 db 0FFh
.eh_frame_hdr:0000000000009A3B                 db 0FFh
.eh_frame_hdr:0000000000009A3C                 db 0ACh
.eh_frame_hdr:0000000000009A3D                 db  0Fh
.eh_frame_hdr:0000000000009A3E                 db    0
.eh_frame_hdr:0000000000009A3F                 db    0
.eh_frame_hdr:0000000000009A40                 db  84h
.eh_frame_hdr:0000000000009A41                 db 0CBh
.eh_frame_hdr:0000000000009A42                 db 0FFh
.eh_frame_hdr:0000000000009A43                 db 0FFh
.eh_frame_hdr:0000000000009A44                 db 0CCh
.eh_frame_hdr:0000000000009A45                 db  0Fh
.eh_frame_hdr:0000000000009A46                 db    0
.eh_frame_hdr:0000000000009A47                 db    0
.eh_frame_hdr:0000000000009A48                 db 0E4h
.eh_frame_hdr:0000000000009A49                 db 0CBh
.eh_frame_hdr:0000000000009A4A                 db 0FFh
.eh_frame_hdr:0000000000009A4B                 db 0FFh
.eh_frame_hdr:0000000000009A4C                 db 0FCh
.eh_frame_hdr:0000000000009A4D                 db  0Fh
.eh_frame_hdr:0000000000009A4E                 db    0
.eh_frame_hdr:0000000000009A4F                 db    0
.eh_frame_hdr:0000000000009A50                 db    4
.eh_frame_hdr:0000000000009A51                 db 0DDh
.eh_frame_hdr:0000000000009A52                 db 0FFh
.eh_frame_hdr:0000000000009A53                 db 0FFh
.eh_frame_hdr:0000000000009A54                 db  2Ch ; ,
.eh_frame_hdr:0000000000009A55                 db  10h
.eh_frame_hdr:0000000000009A56                 db    0
.eh_frame_hdr:0000000000009A57                 db    0
.eh_frame_hdr:0000000000009A58                 db    4
.eh_frame_hdr:0000000000009A59                 db 0DFh
.eh_frame_hdr:0000000000009A5A                 db 0FFh
.eh_frame_hdr:0000000000009A5B                 db 0FFh
.eh_frame_hdr:0000000000009A5C                 db  44h ; D
.eh_frame_hdr:0000000000009A5D                 db  10h
.eh_frame_hdr:0000000000009A5E                 db    0
.eh_frame_hdr:0000000000009A5F                 db    0
.eh_frame_hdr:0000000000009A60                 db 0F4h
.eh_frame_hdr:0000000000009A61                 db 0EBh
.eh_frame_hdr:0000000000009A62                 db 0FFh
.eh_frame_hdr:0000000000009A63                 db 0FFh
.eh_frame_hdr:0000000000009A64                 db  94h
.eh_frame_hdr:0000000000009A65                 db  10h
.eh_frame_hdr:0000000000009A66                 db    0
.eh_frame_hdr:0000000000009A67                 db    0
.eh_frame_hdr:0000000000009A68                 db  64h ; d
.eh_frame_hdr:0000000000009A69                 db 0ECh
.eh_frame_hdr:0000000000009A6A                 db 0FFh
.eh_frame_hdr:0000000000009A6B                 db 0FFh
.eh_frame_hdr:0000000000009A6C                 db 0DCh
.eh_frame_hdr:0000000000009A6D                 db  10h
.eh_frame_hdr:0000000000009A6E                 db    0
.eh_frame_hdr:0000000000009A6F                 db    0
.eh_frame_hdr:0000000000009A70                 db  74h ; t
.eh_frame_hdr:0000000000009A71                 db 0ECh
.eh_frame_hdr:0000000000009A72                 db 0FFh
.eh_frame_hdr:0000000000009A73                 db 0FFh
.eh_frame_hdr:0000000000009A74                 db 0F4h
.eh_frame_hdr:0000000000009A75                 db  10h
.eh_frame_hdr:0000000000009A76                 db    0
.eh_frame_hdr:0000000000009A77                 db    0
.eh_frame_hdr:0000000000009A77 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000009A77
.eh_frame:0000000000009A78 ; ===========================================================================
.eh_frame:0000000000009A78
.eh_frame:0000000000009A78 ; Segment type: Pure data
.eh_frame:0000000000009A78 ; Segment permissions: Read
.eh_frame:0000000000009A78 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000009A78                 assume cs:_eh_frame
.eh_frame:0000000000009A78                 ;org 9A78h
.eh_frame:0000000000009A78                 db  14h
.eh_frame:0000000000009A79                 db    0
.eh_frame:0000000000009A7A                 db    0
.eh_frame:0000000000009A7B                 db    0
.eh_frame:0000000000009A7C                 db    0
.eh_frame:0000000000009A7D                 db    0
.eh_frame:0000000000009A7E                 db    0
.eh_frame:0000000000009A7F                 db    0
.eh_frame:0000000000009A80                 db    1
.eh_frame:0000000000009A81                 db  7Ah ; z
.eh_frame:0000000000009A82                 db  52h ; R
.eh_frame:0000000000009A83                 db    0
.eh_frame:0000000000009A84                 db    1
.eh_frame:0000000000009A85                 db  78h ; x
.eh_frame:0000000000009A86                 db  10h
.eh_frame:0000000000009A87                 db    1
.eh_frame:0000000000009A88                 db  1Bh
.eh_frame:0000000000009A89                 db  0Ch
.eh_frame:0000000000009A8A                 db    7
.eh_frame:0000000000009A8B                 db    8
.eh_frame:0000000000009A8C                 db  90h
.eh_frame:0000000000009A8D                 db    1
.eh_frame:0000000000009A8E                 db    7
.eh_frame:0000000000009A8F                 db  10h
.eh_frame:0000000000009A90                 db  14h
.eh_frame:0000000000009A91                 db    0
.eh_frame:0000000000009A92                 db    0
.eh_frame:0000000000009A93                 db    0
.eh_frame:0000000000009A94                 db  1Ch
.eh_frame:0000000000009A95                 db    0
.eh_frame:0000000000009A96                 db    0
.eh_frame:0000000000009A97                 db    0
.eh_frame:0000000000009A98                 db 0A8h
.eh_frame:0000000000009A99                 db  84h
.eh_frame:0000000000009A9A                 db 0FFh
.eh_frame:0000000000009A9B                 db 0FFh
.eh_frame:0000000000009A9C                 db  2Bh ; +
.eh_frame:0000000000009A9D                 db    0
.eh_frame:0000000000009A9E                 db    0
.eh_frame:0000000000009A9F                 db    0
.eh_frame:0000000000009AA0                 db    0
.eh_frame:0000000000009AA1                 db    0
.eh_frame:0000000000009AA2                 db    0
.eh_frame:0000000000009AA3                 db    0
.eh_frame:0000000000009AA4                 db    0
.eh_frame:0000000000009AA5                 db    0
.eh_frame:0000000000009AA6                 db    0
.eh_frame:0000000000009AA7                 db    0
.eh_frame:0000000000009AA8                 db  14h
.eh_frame:0000000000009AA9                 db    0
.eh_frame:0000000000009AAA                 db    0
.eh_frame:0000000000009AAB                 db    0
.eh_frame:0000000000009AAC                 db    0
.eh_frame:0000000000009AAD                 db    0
.eh_frame:0000000000009AAE                 db    0
.eh_frame:0000000000009AAF                 db    0
.eh_frame:0000000000009AB0                 db    1
.eh_frame:0000000000009AB1                 db  7Ah ; z
.eh_frame:0000000000009AB2                 db  52h ; R
.eh_frame:0000000000009AB3                 db    0
.eh_frame:0000000000009AB4                 db    1
.eh_frame:0000000000009AB5                 db  78h ; x
.eh_frame:0000000000009AB6                 db  10h
.eh_frame:0000000000009AB7                 db    1
.eh_frame:0000000000009AB8                 db  1Bh
.eh_frame:0000000000009AB9                 db  0Ch
.eh_frame:0000000000009ABA                 db    7
.eh_frame:0000000000009ABB                 db    8
.eh_frame:0000000000009ABC                 db  90h
.eh_frame:0000000000009ABD                 db    1
.eh_frame:0000000000009ABE                 db    0
.eh_frame:0000000000009ABF                 db    0
.eh_frame:0000000000009AC0                 db  24h ; $
.eh_frame:0000000000009AC1                 db    0
.eh_frame:0000000000009AC2                 db    0
.eh_frame:0000000000009AC3                 db    0
.eh_frame:0000000000009AC4                 db  1Ch
.eh_frame:0000000000009AC5                 db    0
.eh_frame:0000000000009AC6                 db    0
.eh_frame:0000000000009AC7                 db    0
.eh_frame:0000000000009AC8                 db  18h
.eh_frame:0000000000009AC9                 db  7Dh ; }
.eh_frame:0000000000009ACA                 db 0FFh
.eh_frame:0000000000009ACB                 db 0FFh
.eh_frame:0000000000009ACC                 db 0E0h
.eh_frame:0000000000009ACD                 db    3
.eh_frame:0000000000009ACE                 db    0
.eh_frame:0000000000009ACF                 db    0
.eh_frame:0000000000009AD0                 db    0
.eh_frame:0000000000009AD1                 db  0Eh
.eh_frame:0000000000009AD2                 db  10h
.eh_frame:0000000000009AD3                 db  46h ; F
.eh_frame:0000000000009AD4                 db  0Eh
.eh_frame:0000000000009AD5                 db  18h
.eh_frame:0000000000009AD6                 db  4Ah ; J
.eh_frame:0000000000009AD7                 db  0Fh
.eh_frame:0000000000009AD8                 db  0Bh
.eh_frame:0000000000009AD9                 db  77h ; w
.eh_frame:0000000000009ADA                 db    8
.eh_frame:0000000000009ADB                 db  80h
.eh_frame:0000000000009ADC                 db    0
.eh_frame:0000000000009ADD                 db  3Fh ; ?
.eh_frame:0000000000009ADE                 db  1Ah
.eh_frame:0000000000009ADF                 db  3Bh ; ;
.eh_frame:0000000000009AE0                 db  2Ah ; *
.eh_frame:0000000000009AE1                 db  33h ; 3
.eh_frame:0000000000009AE2                 db  24h ; $
.eh_frame:0000000000009AE3                 db  22h ; "
.eh_frame:0000000000009AE4                 db    0
.eh_frame:0000000000009AE5                 db    0
.eh_frame:0000000000009AE6                 db    0
.eh_frame:0000000000009AE7                 db    0
.eh_frame:0000000000009AE8                 db  14h
.eh_frame:0000000000009AE9                 db    0
.eh_frame:0000000000009AEA                 db    0
.eh_frame:0000000000009AEB                 db    0
.eh_frame:0000000000009AEC                 db  44h ; D
.eh_frame:0000000000009AED                 db    0
.eh_frame:0000000000009AEE                 db    0
.eh_frame:0000000000009AEF                 db    0
.eh_frame:0000000000009AF0                 db 0D0h
.eh_frame:0000000000009AF1                 db  80h
.eh_frame:0000000000009AF2                 db 0FFh
.eh_frame:0000000000009AF3                 db 0FFh
.eh_frame:0000000000009AF4                 db    8
.eh_frame:0000000000009AF5                 db    0
.eh_frame:0000000000009AF6                 db    0
.eh_frame:0000000000009AF7                 db    0
.eh_frame:0000000000009AF8                 db    0
.eh_frame:0000000000009AF9                 db    0
.eh_frame:0000000000009AFA                 db    0
.eh_frame:0000000000009AFB                 db    0
.eh_frame:0000000000009AFC                 db    0
.eh_frame:0000000000009AFD                 db    0
.eh_frame:0000000000009AFE                 db    0
.eh_frame:0000000000009AFF                 db    0
.eh_frame:0000000000009B00                 db  70h ; p
.eh_frame:0000000000009B01                 db    0
.eh_frame:0000000000009B02                 db    0
.eh_frame:0000000000009B03                 db    0
.eh_frame:0000000000009B04                 db  5Ch ; \
.eh_frame:0000000000009B05                 db    0
.eh_frame:0000000000009B06                 db    0
.eh_frame:0000000000009B07                 db    0
.eh_frame:0000000000009B08                 db  48h ; H
.eh_frame:0000000000009B09                 db  85h
.eh_frame:0000000000009B0A                 db 0FFh
.eh_frame:0000000000009B0B                 db 0FFh
.eh_frame:0000000000009B0C                 db  72h ; r
.eh_frame:0000000000009B0D                 db    2
.eh_frame:0000000000009B0E                 db    0
.eh_frame:0000000000009B0F                 db    0
.eh_frame:0000000000009B10                 db    0
.eh_frame:0000000000009B11                 db  42h ; B
.eh_frame:0000000000009B12                 db  0Eh
.eh_frame:0000000000009B13                 db  10h
.eh_frame:0000000000009B14                 db  8Fh
.eh_frame:0000000000009B15                 db    2
.eh_frame:0000000000009B16                 db  42h ; B
.eh_frame:0000000000009B17                 db  0Eh
.eh_frame:0000000000009B18                 db  18h
.eh_frame:0000000000009B19                 db  8Eh
.eh_frame:0000000000009B1A                 db    3
.eh_frame:0000000000009B1B                 db  45h ; E
.eh_frame:0000000000009B1C                 db  0Eh
.eh_frame:0000000000009B1D                 db  20h
.eh_frame:0000000000009B1E                 db  8Dh
.eh_frame:0000000000009B1F                 db    4
.eh_frame:0000000000009B20                 db  42h ; B
.eh_frame:0000000000009B21                 db  0Eh
.eh_frame:0000000000009B22                 db  28h ; (
.eh_frame:0000000000009B23                 db  8Ch
.eh_frame:0000000000009B24                 db    5
.eh_frame:0000000000009B25                 db  44h ; D
.eh_frame:0000000000009B26                 db  0Eh
.eh_frame:0000000000009B27                 db  30h ; 0
.eh_frame:0000000000009B28                 db  86h
.eh_frame:0000000000009B29                 db    6
.eh_frame:0000000000009B2A                 db  41h ; A
.eh_frame:0000000000009B2B                 db  0Eh
.eh_frame:0000000000009B2C                 db  38h ; 8
.eh_frame:0000000000009B2D                 db  83h
.eh_frame:0000000000009B2E                 db    7
.eh_frame:0000000000009B2F                 db  47h ; G
.eh_frame:0000000000009B30                 db  0Eh
.eh_frame:0000000000009B31                 db  90h
.eh_frame:0000000000009B32                 db    1
.eh_frame:0000000000009B33                 db    3
.eh_frame:0000000000009B34                 db  0Ah
.eh_frame:0000000000009B35                 db    1
.eh_frame:0000000000009B36                 db  0Eh
.eh_frame:0000000000009B37                 db  98h
.eh_frame:0000000000009B38                 db    1
.eh_frame:0000000000009B39                 db  41h ; A
.eh_frame:0000000000009B3A                 db  0Eh
.eh_frame:0000000000009B3B                 db 0A0h
.eh_frame:0000000000009B3C                 db    1
.eh_frame:0000000000009B3D                 db  44h ; D
.eh_frame:0000000000009B3E                 db  0Eh
.eh_frame:0000000000009B3F                 db 0A8h
.eh_frame:0000000000009B40                 db    1
.eh_frame:0000000000009B41                 db  45h ; E
.eh_frame:0000000000009B42                 db  0Eh
.eh_frame:0000000000009B43                 db 0B0h
.eh_frame:0000000000009B44                 db    1
.eh_frame:0000000000009B45                 db  42h ; B
.eh_frame:0000000000009B46                 db  0Eh
.eh_frame:0000000000009B47                 db 0B8h
.eh_frame:0000000000009B48                 db    1
.eh_frame:0000000000009B49                 db  42h ; B
.eh_frame:0000000000009B4A                 db  0Eh
.eh_frame:0000000000009B4B                 db 0C0h
.eh_frame:0000000000009B4C                 db    1
.eh_frame:0000000000009B4D                 db  41h ; A
.eh_frame:0000000000009B4E                 db  0Eh
.eh_frame:0000000000009B4F                 db 0C8h
.eh_frame:0000000000009B50                 db    1
.eh_frame:0000000000009B51                 db  44h ; D
.eh_frame:0000000000009B52                 db  0Eh
.eh_frame:0000000000009B53                 db 0D0h
.eh_frame:0000000000009B54                 db    1
.eh_frame:0000000000009B55                 db  52h ; R
.eh_frame:0000000000009B56                 db  0Eh
.eh_frame:0000000000009B57                 db  90h
.eh_frame:0000000000009B58                 db    1
.eh_frame:0000000000009B59                 db    2
.eh_frame:0000000000009B5A                 db  5Eh ; ^
.eh_frame:0000000000009B5B                 db  0Ah
.eh_frame:0000000000009B5C                 db  0Eh
.eh_frame:0000000000009B5D                 db  38h ; 8
.eh_frame:0000000000009B5E                 db  44h ; D
.eh_frame:0000000000009B5F                 db  0Eh
.eh_frame:0000000000009B60                 db  30h ; 0
.eh_frame:0000000000009B61                 db  41h ; A
.eh_frame:0000000000009B62                 db  0Eh
.eh_frame:0000000000009B63                 db  28h ; (
.eh_frame:0000000000009B64                 db  42h ; B
.eh_frame:0000000000009B65                 db  0Eh
.eh_frame:0000000000009B66                 db  20h
.eh_frame:0000000000009B67                 db  42h ; B
.eh_frame:0000000000009B68                 db  0Eh
.eh_frame:0000000000009B69                 db  18h
.eh_frame:0000000000009B6A                 db  42h ; B
.eh_frame:0000000000009B6B                 db  0Eh
.eh_frame:0000000000009B6C                 db  10h
.eh_frame:0000000000009B6D                 db  42h ; B
.eh_frame:0000000000009B6E                 db  0Eh
.eh_frame:0000000000009B6F                 db    8
.eh_frame:0000000000009B70                 db  4Fh ; O
.eh_frame:0000000000009B71                 db  0Bh
.eh_frame:0000000000009B72                 db    0
.eh_frame:0000000000009B73                 db    0
.eh_frame:0000000000009B74                 db  24h ; $
.eh_frame:0000000000009B75                 db    0
.eh_frame:0000000000009B76                 db    0
.eh_frame:0000000000009B77                 db    0
.eh_frame:0000000000009B78                 db 0D0h
.eh_frame:0000000000009B79                 db    0
.eh_frame:0000000000009B7A                 db    0
.eh_frame:0000000000009B7B                 db    0
.eh_frame:0000000000009B7C                 db  54h ; T
.eh_frame:0000000000009B7D                 db  87h
.eh_frame:0000000000009B7E                 db 0FFh
.eh_frame:0000000000009B7F                 db 0FFh
.eh_frame:0000000000009B80                 db  66h ; f
.eh_frame:0000000000009B81                 db    0
.eh_frame:0000000000009B82                 db    0
.eh_frame:0000000000009B83                 db    0
.eh_frame:0000000000009B84                 db    0
.eh_frame:0000000000009B85                 db  41h ; A
.eh_frame:0000000000009B86                 db  0Eh
.eh_frame:0000000000009B87                 db  10h
.eh_frame:0000000000009B88                 db  86h
.eh_frame:0000000000009B89                 db    2
.eh_frame:0000000000009B8A                 db  41h ; A
.eh_frame:0000000000009B8B                 db  0Eh
.eh_frame:0000000000009B8C                 db  18h
.eh_frame:0000000000009B8D                 db  83h
.eh_frame:0000000000009B8E                 db    3
.eh_frame:0000000000009B8F                 db  55h ; U
.eh_frame:0000000000009B90                 db  0Eh
.eh_frame:0000000000009B91                 db  20h
.eh_frame:0000000000009B92                 db    2
.eh_frame:0000000000009B93                 db  4Ch ; L
.eh_frame:0000000000009B94                 db  0Eh
.eh_frame:0000000000009B95                 db  18h
.eh_frame:0000000000009B96                 db  41h ; A
.eh_frame:0000000000009B97                 db  0Eh
.eh_frame:0000000000009B98                 db  10h
.eh_frame:0000000000009B99                 db  41h ; A
.eh_frame:0000000000009B9A                 db  0Eh
.eh_frame:0000000000009B9B                 db    8
.eh_frame:0000000000009B9C                 db  18h
.eh_frame:0000000000009B9D                 db    0
.eh_frame:0000000000009B9E                 db    0
.eh_frame:0000000000009B9F                 db    0
.eh_frame:0000000000009BA0                 db 0F8h
.eh_frame:0000000000009BA1                 db    0
.eh_frame:0000000000009BA2                 db    0
.eh_frame:0000000000009BA3                 db    0
.eh_frame:0000000000009BA4                 db  9Ch
.eh_frame:0000000000009BA5                 db  87h
.eh_frame:0000000000009BA6                 db 0FFh
.eh_frame:0000000000009BA7                 db 0FFh
.eh_frame:0000000000009BA8                 db  77h ; w
.eh_frame:0000000000009BA9                 db    0
.eh_frame:0000000000009BAA                 db    0
.eh_frame:0000000000009BAB                 db    0
.eh_frame:0000000000009BAC                 db    0
.eh_frame:0000000000009BAD                 db  44h ; D
.eh_frame:0000000000009BAE                 db  0Eh
.eh_frame:0000000000009BAF                 db  20h
.eh_frame:0000000000009BB0                 db    2
.eh_frame:0000000000009BB1                 db  5Ah ; Z
.eh_frame:0000000000009BB2                 db  0Ah
.eh_frame:0000000000009BB3                 db  0Eh
.eh_frame:0000000000009BB4                 db    8
.eh_frame:0000000000009BB5                 db  42h ; B
.eh_frame:0000000000009BB6                 db  0Bh
.eh_frame:0000000000009BB7                 db    0
.eh_frame:0000000000009BB8                 db  60h ; `
.eh_frame:0000000000009BB9                 db    0
.eh_frame:0000000000009BBA                 db    0
.eh_frame:0000000000009BBB                 db    0
.eh_frame:0000000000009BBC                 db  14h
.eh_frame:0000000000009BBD                 db    1
.eh_frame:0000000000009BBE                 db    0
.eh_frame:0000000000009BBF                 db    0
.eh_frame:0000000000009BC0                 db    0
.eh_frame:0000000000009BC1                 db  88h
.eh_frame:0000000000009BC2                 db 0FFh
.eh_frame:0000000000009BC3                 db 0FFh
.eh_frame:0000000000009BC4                 db 0B2h
.eh_frame:0000000000009BC5                 db    5
.eh_frame:0000000000009BC6                 db    0
.eh_frame:0000000000009BC7                 db    0
.eh_frame:0000000000009BC8                 db    0
.eh_frame:0000000000009BC9                 db  42h ; B
.eh_frame:0000000000009BCA                 db  0Eh
.eh_frame:0000000000009BCB                 db  10h
.eh_frame:0000000000009BCC                 db  8Fh
.eh_frame:0000000000009BCD                 db    2
.eh_frame:0000000000009BCE                 db  42h ; B
.eh_frame:0000000000009BCF                 db  0Eh
.eh_frame:0000000000009BD0                 db  18h
.eh_frame:0000000000009BD1                 db  8Eh
.eh_frame:0000000000009BD2                 db    3
.eh_frame:0000000000009BD3                 db  49h ; I
.eh_frame:0000000000009BD4                 db  0Eh
.eh_frame:0000000000009BD5                 db  20h
.eh_frame:0000000000009BD6                 db  8Dh
.eh_frame:0000000000009BD7                 db    4
.eh_frame:0000000000009BD8                 db  42h ; B
.eh_frame:0000000000009BD9                 db  0Eh
.eh_frame:0000000000009BDA                 db  28h ; (
.eh_frame:0000000000009BDB                 db  8Ch
.eh_frame:0000000000009BDC                 db    5
.eh_frame:0000000000009BDD                 db  46h ; F
.eh_frame:0000000000009BDE                 db  0Eh
.eh_frame:0000000000009BDF                 db  30h ; 0
.eh_frame:0000000000009BE0                 db  86h
.eh_frame:0000000000009BE1                 db    6
.eh_frame:0000000000009BE2                 db  41h ; A
.eh_frame:0000000000009BE3                 db  0Eh
.eh_frame:0000000000009BE4                 db  38h ; 8
.eh_frame:0000000000009BE5                 db  83h
.eh_frame:0000000000009BE6                 db    7
.eh_frame:0000000000009BE7                 db  52h ; R
.eh_frame:0000000000009BE8                 db  0Eh
.eh_frame:0000000000009BE9                 db 0E0h
.eh_frame:0000000000009BEA                 db    4
.eh_frame:0000000000009BEB                 db    3
.eh_frame:0000000000009BEC                 db 0DEh
.eh_frame:0000000000009BED                 db    1
.eh_frame:0000000000009BEE                 db  0Eh
.eh_frame:0000000000009BEF                 db 0E8h
.eh_frame:0000000000009BF0                 db    4
.eh_frame:0000000000009BF1                 db  42h ; B
.eh_frame:0000000000009BF2                 db  0Eh
.eh_frame:0000000000009BF3                 db 0F0h
.eh_frame:0000000000009BF4                 db    4
.eh_frame:0000000000009BF5                 db  45h ; E
.eh_frame:0000000000009BF6                 db  0Eh
.eh_frame:0000000000009BF7                 db 0F8h
.eh_frame:0000000000009BF8                 db    4
.eh_frame:0000000000009BF9                 db  42h ; B
.eh_frame:0000000000009BFA                 db  0Eh
.eh_frame:0000000000009BFB                 db  80h
.eh_frame:0000000000009BFC                 db    5
.eh_frame:0000000000009BFD                 db  5Dh ; ]
.eh_frame:0000000000009BFE                 db  0Eh
.eh_frame:0000000000009BFF                 db 0E0h
.eh_frame:0000000000009C00                 db    4
.eh_frame:0000000000009C01                 db  5Eh ; ^
.eh_frame:0000000000009C02                 db  0Ah
.eh_frame:0000000000009C03                 db  0Eh
.eh_frame:0000000000009C04                 db  38h ; 8
.eh_frame:0000000000009C05                 db  41h ; A
.eh_frame:0000000000009C06                 db  0Eh
.eh_frame:0000000000009C07                 db  30h ; 0
.eh_frame:0000000000009C08                 db  41h ; A
.eh_frame:0000000000009C09                 db  0Eh
.eh_frame:0000000000009C0A                 db  28h ; (
.eh_frame:0000000000009C0B                 db  42h ; B
.eh_frame:0000000000009C0C                 db  0Eh
.eh_frame:0000000000009C0D                 db  20h
.eh_frame:0000000000009C0E                 db  42h ; B
.eh_frame:0000000000009C0F                 db  0Eh
.eh_frame:0000000000009C10                 db  18h
.eh_frame:0000000000009C11                 db  42h ; B
.eh_frame:0000000000009C12                 db  0Eh
.eh_frame:0000000000009C13                 db  10h
.eh_frame:0000000000009C14                 db  42h ; B
.eh_frame:0000000000009C15                 db  0Eh
.eh_frame:0000000000009C16                 db    8
.eh_frame:0000000000009C17                 db  44h ; D
.eh_frame:0000000000009C18                 db  0Bh
.eh_frame:0000000000009C19                 db    0
.eh_frame:0000000000009C1A                 db    0
.eh_frame:0000000000009C1B                 db    0
.eh_frame:0000000000009C1C                 db 0D0h
.eh_frame:0000000000009C1D                 db    0
.eh_frame:0000000000009C1E                 db    0
.eh_frame:0000000000009C1F                 db    0
.eh_frame:0000000000009C20                 db  78h ; x
.eh_frame:0000000000009C21                 db    1
.eh_frame:0000000000009C22                 db    0
.eh_frame:0000000000009C23                 db    0
.eh_frame:0000000000009C24                 db  5Ch ; \
.eh_frame:0000000000009C25                 db  8Dh
.eh_frame:0000000000009C26                 db 0FFh
.eh_frame:0000000000009C27                 db 0FFh
.eh_frame:0000000000009C28                 db 0CAh
.eh_frame:0000000000009C29                 db    7
.eh_frame:0000000000009C2A                 db    0
.eh_frame:0000000000009C2B                 db    0
.eh_frame:0000000000009C2C                 db    0
.eh_frame:0000000000009C2D                 db  42h ; B
.eh_frame:0000000000009C2E                 db  0Eh
.eh_frame:0000000000009C2F                 db  10h
.eh_frame:0000000000009C30                 db  8Fh
.eh_frame:0000000000009C31                 db    2
.eh_frame:0000000000009C32                 db  42h ; B
.eh_frame:0000000000009C33                 db  0Eh
.eh_frame:0000000000009C34                 db  18h
.eh_frame:0000000000009C35                 db  8Eh
.eh_frame:0000000000009C36                 db    3
.eh_frame:0000000000009C37                 db  44h ; D
.eh_frame:0000000000009C38                 db  0Eh
.eh_frame:0000000000009C39                 db  20h
.eh_frame:0000000000009C3A                 db  8Dh
.eh_frame:0000000000009C3B                 db    4
.eh_frame:0000000000009C3C                 db  42h ; B
.eh_frame:0000000000009C3D                 db  0Eh
.eh_frame:0000000000009C3E                 db  28h ; (
.eh_frame:0000000000009C3F                 db  8Ch
.eh_frame:0000000000009C40                 db    5
.eh_frame:0000000000009C41                 db  41h ; A
.eh_frame:0000000000009C42                 db  0Eh
.eh_frame:0000000000009C43                 db  30h ; 0
.eh_frame:0000000000009C44                 db  86h
.eh_frame:0000000000009C45                 db    6
.eh_frame:0000000000009C46                 db  41h ; A
.eh_frame:0000000000009C47                 db  0Eh
.eh_frame:0000000000009C48                 db  38h ; 8
.eh_frame:0000000000009C49                 db  83h
.eh_frame:0000000000009C4A                 db    7
.eh_frame:0000000000009C4B                 db  47h ; G
.eh_frame:0000000000009C4C                 db  0Eh
.eh_frame:0000000000009C4D                 db  90h
.eh_frame:0000000000009C4E                 db    1
.eh_frame:0000000000009C4F                 db    3
.eh_frame:0000000000009C50                 db  90h
.eh_frame:0000000000009C51                 db    1
.eh_frame:0000000000009C52                 db  0Ah
.eh_frame:0000000000009C53                 db  0Eh
.eh_frame:0000000000009C54                 db  38h ; 8
.eh_frame:0000000000009C55                 db  41h ; A
.eh_frame:0000000000009C56                 db  0Eh
.eh_frame:0000000000009C57                 db  30h ; 0
.eh_frame:0000000000009C58                 db  41h ; A
.eh_frame:0000000000009C59                 db  0Eh
.eh_frame:0000000000009C5A                 db  28h ; (
.eh_frame:0000000000009C5B                 db  42h ; B
.eh_frame:0000000000009C5C                 db  0Eh
.eh_frame:0000000000009C5D                 db  20h
.eh_frame:0000000000009C5E                 db  42h ; B
.eh_frame:0000000000009C5F                 db  0Eh
.eh_frame:0000000000009C60                 db  18h
.eh_frame:0000000000009C61                 db  42h ; B
.eh_frame:0000000000009C62                 db  0Eh
.eh_frame:0000000000009C63                 db  10h
.eh_frame:0000000000009C64                 db  42h ; B
.eh_frame:0000000000009C65                 db  0Eh
.eh_frame:0000000000009C66                 db    8
.eh_frame:0000000000009C67                 db  41h ; A
.eh_frame:0000000000009C68                 db  0Bh
.eh_frame:0000000000009C69                 db    3
.eh_frame:0000000000009C6A                 db  7Dh ; }
.eh_frame:0000000000009C6B                 db    1
.eh_frame:0000000000009C6C                 db  0Eh
.eh_frame:0000000000009C6D                 db  98h
.eh_frame:0000000000009C6E                 db    1
.eh_frame:0000000000009C6F                 db  45h ; E
.eh_frame:0000000000009C70                 db  0Eh
.eh_frame:0000000000009C71                 db 0A0h
.eh_frame:0000000000009C72                 db    1
.eh_frame:0000000000009C73                 db  41h ; A
.eh_frame:0000000000009C74                 db  0Eh
.eh_frame:0000000000009C75                 db 0A8h
.eh_frame:0000000000009C76                 db    1
.eh_frame:0000000000009C77                 db  44h ; D
.eh_frame:0000000000009C78                 db  0Eh
.eh_frame:0000000000009C79                 db 0B0h
.eh_frame:0000000000009C7A                 db    1
.eh_frame:0000000000009C7B                 db  53h ; S
.eh_frame:0000000000009C7C                 db  0Eh
.eh_frame:0000000000009C7D                 db  90h
.eh_frame:0000000000009C7E                 db    1
.eh_frame:0000000000009C7F                 db    2
.eh_frame:0000000000009C80                 db 0EDh
.eh_frame:0000000000009C81                 db  0Eh
.eh_frame:0000000000009C82                 db  98h
.eh_frame:0000000000009C83                 db    1
.eh_frame:0000000000009C84                 db  42h ; B
.eh_frame:0000000000009C85                 db  0Eh
.eh_frame:0000000000009C86                 db 0A0h
.eh_frame:0000000000009C87                 db    1
.eh_frame:0000000000009C88                 db  41h ; A
.eh_frame:0000000000009C89                 db  0Eh
.eh_frame:0000000000009C8A                 db 0A8h
.eh_frame:0000000000009C8B                 db    1
.eh_frame:0000000000009C8C                 db  42h ; B
.eh_frame:0000000000009C8D                 db  0Eh
.eh_frame:0000000000009C8E                 db 0B0h
.eh_frame:0000000000009C8F                 db    1
.eh_frame:0000000000009C90                 db  53h ; S
.eh_frame:0000000000009C91                 db  0Eh
.eh_frame:0000000000009C92                 db  90h
.eh_frame:0000000000009C93                 db    1
.eh_frame:0000000000009C94                 db  69h ; i
.eh_frame:0000000000009C95                 db  0Eh
.eh_frame:0000000000009C96                 db  98h
.eh_frame:0000000000009C97                 db    1
.eh_frame:0000000000009C98                 db  44h ; D
.eh_frame:0000000000009C99                 db  0Eh
.eh_frame:0000000000009C9A                 db 0A0h
.eh_frame:0000000000009C9B                 db    1
.eh_frame:0000000000009C9C                 db  48h ; H
.eh_frame:0000000000009C9D                 db  0Eh
.eh_frame:0000000000009C9E                 db 0A8h
.eh_frame:0000000000009C9F                 db    1
.eh_frame:0000000000009CA0                 db  41h ; A
.eh_frame:0000000000009CA1                 db  0Eh
.eh_frame:0000000000009CA2                 db 0B0h
.eh_frame:0000000000009CA3                 db    1
.eh_frame:0000000000009CA4                 db  56h ; V
.eh_frame:0000000000009CA5                 db  0Eh
.eh_frame:0000000000009CA6                 db  90h
.eh_frame:0000000000009CA7                 db    1
.eh_frame:0000000000009CA8                 db    2
.eh_frame:0000000000009CA9                 db  61h ; a
.eh_frame:0000000000009CAA                 db  0Eh
.eh_frame:0000000000009CAB                 db  98h
.eh_frame:0000000000009CAC                 db    1
.eh_frame:0000000000009CAD                 db  47h ; G
.eh_frame:0000000000009CAE                 db  0Eh
.eh_frame:0000000000009CAF                 db 0A0h
.eh_frame:0000000000009CB0                 db    1
.eh_frame:0000000000009CB1                 db  49h ; I
.eh_frame:0000000000009CB2                 db  0Eh
.eh_frame:0000000000009CB3                 db 0A8h
.eh_frame:0000000000009CB4                 db    1
.eh_frame:0000000000009CB5                 db  41h ; A
.eh_frame:0000000000009CB6                 db  0Eh
.eh_frame:0000000000009CB7                 db 0B0h
.eh_frame:0000000000009CB8                 db    1
.eh_frame:0000000000009CB9                 db  59h ; Y
.eh_frame:0000000000009CBA                 db  0Eh
.eh_frame:0000000000009CBB                 db  90h
.eh_frame:0000000000009CBC                 db    1
.eh_frame:0000000000009CBD                 db    2
.eh_frame:0000000000009CBE                 db  5Eh ; ^
.eh_frame:0000000000009CBF                 db  0Ah
.eh_frame:0000000000009CC0                 db  0Eh
.eh_frame:0000000000009CC1                 db  98h
.eh_frame:0000000000009CC2                 db    1
.eh_frame:0000000000009CC3                 db  45h ; E
.eh_frame:0000000000009CC4                 db  0Eh
.eh_frame:0000000000009CC5                 db 0A0h
.eh_frame:0000000000009CC6                 db    1
.eh_frame:0000000000009CC7                 db  49h ; I
.eh_frame:0000000000009CC8                 db  0Eh
.eh_frame:0000000000009CC9                 db 0A8h
.eh_frame:0000000000009CCA                 db    1
.eh_frame:0000000000009CCB                 db  46h ; F
.eh_frame:0000000000009CCC                 db  0Eh
.eh_frame:0000000000009CCD                 db 0B0h
.eh_frame:0000000000009CCE                 db    1
.eh_frame:0000000000009CCF                 db  4Dh ; M
.eh_frame:0000000000009CD0                 db  0Bh
.eh_frame:0000000000009CD1                 db    2
.eh_frame:0000000000009CD2                 db 0A2h
.eh_frame:0000000000009CD3                 db  0Eh
.eh_frame:0000000000009CD4                 db  98h
.eh_frame:0000000000009CD5                 db    1
.eh_frame:0000000000009CD6                 db  42h ; B
.eh_frame:0000000000009CD7                 db  0Eh
.eh_frame:0000000000009CD8                 db 0A0h
.eh_frame:0000000000009CD9                 db    1
.eh_frame:0000000000009CDA                 db  60h ; `
.eh_frame:0000000000009CDB                 db  0Eh
.eh_frame:0000000000009CDC                 db 0A8h
.eh_frame:0000000000009CDD                 db    1
.eh_frame:0000000000009CDE                 db  47h ; G
.eh_frame:0000000000009CDF                 db  0Eh
.eh_frame:0000000000009CE0                 db 0B0h
.eh_frame:0000000000009CE1                 db    1
.eh_frame:0000000000009CE2                 db  4Bh ; K
.eh_frame:0000000000009CE3                 db  0Eh
.eh_frame:0000000000009CE4                 db 0B8h
.eh_frame:0000000000009CE5                 db    1
.eh_frame:0000000000009CE6                 db  41h ; A
.eh_frame:0000000000009CE7                 db  0Eh
.eh_frame:0000000000009CE8                 db 0C0h
.eh_frame:0000000000009CE9                 db    1
.eh_frame:0000000000009CEA                 db  59h ; Y
.eh_frame:0000000000009CEB                 db  0Eh
.eh_frame:0000000000009CEC                 db  90h
.eh_frame:0000000000009CED                 db    1
.eh_frame:0000000000009CEE                 db    0
.eh_frame:0000000000009CEF                 db    0
.eh_frame:0000000000009CF0                 db  28h ; (
.eh_frame:0000000000009CF1                 db    0
.eh_frame:0000000000009CF2                 db    0
.eh_frame:0000000000009CF3                 db    0
.eh_frame:0000000000009CF4                 db  4Ch ; L
.eh_frame:0000000000009CF5                 db    2
.eh_frame:0000000000009CF6                 db    0
.eh_frame:0000000000009CF7                 db    0
.eh_frame:0000000000009CF8                 db  58h ; X
.eh_frame:0000000000009CF9                 db  94h
.eh_frame:0000000000009CFA                 db 0FFh
.eh_frame:0000000000009CFB                 db 0FFh
.eh_frame:0000000000009CFC                 db  2Ah ; *
.eh_frame:0000000000009CFD                 db    4
.eh_frame:0000000000009CFE                 db    0
.eh_frame:0000000000009CFF                 db    0
.eh_frame:0000000000009D00                 db    0
.eh_frame:0000000000009D01                 db  42h ; B
.eh_frame:0000000000009D02                 db  0Eh
.eh_frame:0000000000009D03                 db  10h
.eh_frame:0000000000009D04                 db  8Dh
.eh_frame:0000000000009D05                 db    2
.eh_frame:0000000000009D06                 db  42h ; B
.eh_frame:0000000000009D07                 db  0Eh
.eh_frame:0000000000009D08                 db  18h
.eh_frame:0000000000009D09                 db  8Ch
.eh_frame:0000000000009D0A                 db    3
.eh_frame:0000000000009D0B                 db  46h ; F
.eh_frame:0000000000009D0C                 db  0Eh
.eh_frame:0000000000009D0D                 db  20h
.eh_frame:0000000000009D0E                 db  86h
.eh_frame:0000000000009D0F                 db    4
.eh_frame:0000000000009D10                 db  41h ; A
.eh_frame:0000000000009D11                 db  0Eh
.eh_frame:0000000000009D12                 db  28h ; (
.eh_frame:0000000000009D13                 db  83h
.eh_frame:0000000000009D14                 db    5
.eh_frame:0000000000009D15                 db  49h ; I
.eh_frame:0000000000009D16                 db  0Eh
.eh_frame:0000000000009D17                 db 0B0h
.eh_frame:0000000000009D18                 db    1
.eh_frame:0000000000009D19                 db    0
.eh_frame:0000000000009D1A                 db    0
.eh_frame:0000000000009D1B                 db    0
.eh_frame:0000000000009D1C                 db  38h ; 8
.eh_frame:0000000000009D1D                 db    0
.eh_frame:0000000000009D1E                 db    0
.eh_frame:0000000000009D1F                 db    0
.eh_frame:0000000000009D20                 db  78h ; x
.eh_frame:0000000000009D21                 db    2
.eh_frame:0000000000009D22                 db    0
.eh_frame:0000000000009D23                 db    0
.eh_frame:0000000000009D24                 db 0ACh
.eh_frame:0000000000009D25                 db  7Eh ; ~
.eh_frame:0000000000009D26                 db 0FFh
.eh_frame:0000000000009D27                 db 0FFh
.eh_frame:0000000000009D28                 db  6Eh ; n
.eh_frame:0000000000009D29                 db    3
.eh_frame:0000000000009D2A                 db    0
.eh_frame:0000000000009D2B                 db    0
.eh_frame:0000000000009D2C                 db    0
.eh_frame:0000000000009D2D                 db  42h ; B
.eh_frame:0000000000009D2E                 db  0Eh
.eh_frame:0000000000009D2F                 db  10h
.eh_frame:0000000000009D30                 db  8Ch
.eh_frame:0000000000009D31                 db    2
.eh_frame:0000000000009D32                 db  41h ; A
.eh_frame:0000000000009D33                 db  0Eh
.eh_frame:0000000000009D34                 db  18h
.eh_frame:0000000000009D35                 db  86h
.eh_frame:0000000000009D36                 db    3
.eh_frame:0000000000009D37                 db  44h ; D
.eh_frame:0000000000009D38                 db  0Eh
.eh_frame:0000000000009D39                 db  20h
.eh_frame:0000000000009D3A                 db  83h
.eh_frame:0000000000009D3B                 db    4
.eh_frame:0000000000009D3C                 db    3
.eh_frame:0000000000009D3D                 db  59h ; Y
.eh_frame:0000000000009D3E                 db    1
.eh_frame:0000000000009D3F                 db  0Ah
.eh_frame:0000000000009D40                 db  0Eh
.eh_frame:0000000000009D41                 db  28h ; (
.eh_frame:0000000000009D42                 db  4Fh ; O
.eh_frame:0000000000009D43                 db  0Eh
.eh_frame:0000000000009D44                 db  30h ; 0
.eh_frame:0000000000009D45                 db  5Ch ; \
.eh_frame:0000000000009D46                 db  0Bh
.eh_frame:0000000000009D47                 db    3
.eh_frame:0000000000009D48                 db  6Ah ; j
.eh_frame:0000000000009D49                 db    1
.eh_frame:0000000000009D4A                 db  0Ah
.eh_frame:0000000000009D4B                 db  0Eh
.eh_frame:0000000000009D4C                 db  18h
.eh_frame:0000000000009D4D                 db  43h ; C
.eh_frame:0000000000009D4E                 db  0Eh
.eh_frame:0000000000009D4F                 db  10h
.eh_frame:0000000000009D50                 db  42h ; B
.eh_frame:0000000000009D51                 db  0Eh
.eh_frame:0000000000009D52                 db    8
.eh_frame:0000000000009D53                 db  41h ; A
.eh_frame:0000000000009D54                 db  0Bh
.eh_frame:0000000000009D55                 db    0
.eh_frame:0000000000009D56                 db    0
.eh_frame:0000000000009D57                 db    0
.eh_frame:0000000000009D58                 db  30h ; 0
.eh_frame:0000000000009D59                 db    0
.eh_frame:0000000000009D5A                 db    0
.eh_frame:0000000000009D5B                 db    0
.eh_frame:0000000000009D5C                 db 0B4h
.eh_frame:0000000000009D5D                 db    2
.eh_frame:0000000000009D5E                 db    0
.eh_frame:0000000000009D5F                 db    0
.eh_frame:0000000000009D60                 db  20h
.eh_frame:0000000000009D61                 db  98h
.eh_frame:0000000000009D62                 db 0FFh
.eh_frame:0000000000009D63                 db 0FFh
.eh_frame:0000000000009D64                 db 0A8h
.eh_frame:0000000000009D65                 db    0
.eh_frame:0000000000009D66                 db    0
.eh_frame:0000000000009D67                 db    0
.eh_frame:0000000000009D68                 db    0
.eh_frame:0000000000009D69                 db  42h ; B
.eh_frame:0000000000009D6A                 db  0Eh
.eh_frame:0000000000009D6B                 db  10h
.eh_frame:0000000000009D6C                 db  8Ch
.eh_frame:0000000000009D6D                 db    2
.eh_frame:0000000000009D6E                 db  41h ; A
.eh_frame:0000000000009D6F                 db  0Eh
.eh_frame:0000000000009D70                 db  18h
.eh_frame:0000000000009D71                 db  86h
.eh_frame:0000000000009D72                 db    3
.eh_frame:0000000000009D73                 db  48h ; H
.eh_frame:0000000000009D74                 db  0Eh
.eh_frame:0000000000009D75                 db  20h
.eh_frame:0000000000009D76                 db  83h
.eh_frame:0000000000009D77                 db    4
.eh_frame:0000000000009D78                 db  4Ch ; L
.eh_frame:0000000000009D79                 db  0Eh
.eh_frame:0000000000009D7A                 db  30h ; 0
.eh_frame:0000000000009D7B                 db    2
.eh_frame:0000000000009D7C                 db  75h ; u
.eh_frame:0000000000009D7D                 db  0Ah
.eh_frame:0000000000009D7E                 db  0Eh
.eh_frame:0000000000009D7F                 db  20h
.eh_frame:0000000000009D80                 db  41h ; A
.eh_frame:0000000000009D81                 db  0Eh
.eh_frame:0000000000009D82                 db  18h
.eh_frame:0000000000009D83                 db  41h ; A
.eh_frame:0000000000009D84                 db  0Eh
.eh_frame:0000000000009D85                 db  10h
.eh_frame:0000000000009D86                 db  42h ; B
.eh_frame:0000000000009D87                 db  0Eh
.eh_frame:0000000000009D88                 db    8
.eh_frame:0000000000009D89                 db  48h ; H
.eh_frame:0000000000009D8A                 db  0Bh
.eh_frame:0000000000009D8B                 db    0
.eh_frame:0000000000009D8C                 db  10h
.eh_frame:0000000000009D8D                 db    0
.eh_frame:0000000000009D8E                 db    0
.eh_frame:0000000000009D8F                 db    0
.eh_frame:0000000000009D90                 db 0E8h
.eh_frame:0000000000009D91                 db    2
.eh_frame:0000000000009D92                 db    0
.eh_frame:0000000000009D93                 db    0
.eh_frame:0000000000009D94                 db  9Ch
.eh_frame:0000000000009D95                 db  98h
.eh_frame:0000000000009D96                 db 0FFh
.eh_frame:0000000000009D97                 db 0FFh
.eh_frame:0000000000009D98                 db  0Ch
.eh_frame:0000000000009D99                 db    0
.eh_frame:0000000000009D9A                 db    0
.eh_frame:0000000000009D9B                 db    0
.eh_frame:0000000000009D9C                 db    0
.eh_frame:0000000000009D9D                 db    0
.eh_frame:0000000000009D9E                 db    0
.eh_frame:0000000000009D9F                 db    0
.eh_frame:0000000000009DA0                 db  14h
.eh_frame:0000000000009DA1                 db    0
.eh_frame:0000000000009DA2                 db    0
.eh_frame:0000000000009DA3                 db    0
.eh_frame:0000000000009DA4                 db 0FCh
.eh_frame:0000000000009DA5                 db    2
.eh_frame:0000000000009DA6                 db    0
.eh_frame:0000000000009DA7                 db    0
.eh_frame:0000000000009DA8                 db  98h
.eh_frame:0000000000009DA9                 db  98h
.eh_frame:0000000000009DAA                 db 0FFh
.eh_frame:0000000000009DAB                 db 0FFh
.eh_frame:0000000000009DAC                 db  0Bh
.eh_frame:0000000000009DAD                 db    0
.eh_frame:0000000000009DAE                 db    0
.eh_frame:0000000000009DAF                 db    0
.eh_frame:0000000000009DB0                 db    0
.eh_frame:0000000000009DB1                 db    0
.eh_frame:0000000000009DB2                 db    0
.eh_frame:0000000000009DB3                 db    0
.eh_frame:0000000000009DB4                 db    0
.eh_frame:0000000000009DB5                 db    0
.eh_frame:0000000000009DB6                 db    0
.eh_frame:0000000000009DB7                 db    0
.eh_frame:0000000000009DB8                 db  10h
.eh_frame:0000000000009DB9                 db    0
.eh_frame:0000000000009DBA                 db    0
.eh_frame:0000000000009DBB                 db    0
.eh_frame:0000000000009DBC                 db  14h
.eh_frame:0000000000009DBD                 db    3
.eh_frame:0000000000009DBE                 db    0
.eh_frame:0000000000009DBF                 db    0
.eh_frame:0000000000009DC0                 db  90h
.eh_frame:0000000000009DC1                 db  98h
.eh_frame:0000000000009DC2                 db 0FFh
.eh_frame:0000000000009DC3                 db 0FFh
.eh_frame:0000000000009DC4                 db    8
.eh_frame:0000000000009DC5                 db    0
.eh_frame:0000000000009DC6                 db    0
.eh_frame:0000000000009DC7                 db    0
.eh_frame:0000000000009DC8                 db    0
.eh_frame:0000000000009DC9                 db    0
.eh_frame:0000000000009DCA                 db    0
.eh_frame:0000000000009DCB                 db    0
.eh_frame:0000000000009DCC                 db  10h
.eh_frame:0000000000009DCD                 db    0
.eh_frame:0000000000009DCE                 db    0
.eh_frame:0000000000009DCF                 db    0
.eh_frame:0000000000009DD0                 db  28h ; (
.eh_frame:0000000000009DD1                 db    3
.eh_frame:0000000000009DD2                 db    0
.eh_frame:0000000000009DD3                 db    0
.eh_frame:0000000000009DD4                 db  8Ch
.eh_frame:0000000000009DD5                 db  98h
.eh_frame:0000000000009DD6                 db 0FFh
.eh_frame:0000000000009DD7                 db 0FFh
.eh_frame:0000000000009DD8                 db    8
.eh_frame:0000000000009DD9                 db    0
.eh_frame:0000000000009DDA                 db    0
.eh_frame:0000000000009DDB                 db    0
.eh_frame:0000000000009DDC                 db    0
.eh_frame:0000000000009DDD                 db    0
.eh_frame:0000000000009DDE                 db    0
.eh_frame:0000000000009DDF                 db    0
.eh_frame:0000000000009DE0                 db  2Ch ; ,
.eh_frame:0000000000009DE1                 db    0
.eh_frame:0000000000009DE2                 db    0
.eh_frame:0000000000009DE3                 db    0
.eh_frame:0000000000009DE4                 db  3Ch ; <
.eh_frame:0000000000009DE5                 db    3
.eh_frame:0000000000009DE6                 db    0
.eh_frame:0000000000009DE7                 db    0
.eh_frame:0000000000009DE8                 db  88h
.eh_frame:0000000000009DE9                 db  98h
.eh_frame:0000000000009DEA                 db 0FFh
.eh_frame:0000000000009DEB                 db 0FFh
.eh_frame:0000000000009DEC                 db 0A4h
.eh_frame:0000000000009DED                 db    0
.eh_frame:0000000000009DEE                 db    0
.eh_frame:0000000000009DEF                 db    0
.eh_frame:0000000000009DF0                 db    0
.eh_frame:0000000000009DF1                 db  41h ; A
.eh_frame:0000000000009DF2                 db  0Eh
.eh_frame:0000000000009DF3                 db  10h
.eh_frame:0000000000009DF4                 db  86h
.eh_frame:0000000000009DF5                 db    2
.eh_frame:0000000000009DF6                 db  41h ; A
.eh_frame:0000000000009DF7                 db  0Eh
.eh_frame:0000000000009DF8                 db  18h
.eh_frame:0000000000009DF9                 db  83h
.eh_frame:0000000000009DFA                 db    3
.eh_frame:0000000000009DFB                 db  44h ; D
.eh_frame:0000000000009DFC                 db  0Eh
.eh_frame:0000000000009DFD                 db  20h
.eh_frame:0000000000009DFE                 db  7Ah ; z
.eh_frame:0000000000009DFF                 db  0Ah
.eh_frame:0000000000009E00                 db  0Eh
.eh_frame:0000000000009E01                 db  18h
.eh_frame:0000000000009E02                 db  41h ; A
.eh_frame:0000000000009E03                 db  0Eh
.eh_frame:0000000000009E04                 db  10h
.eh_frame:0000000000009E05                 db  41h ; A
.eh_frame:0000000000009E06                 db  0Eh
.eh_frame:0000000000009E07                 db    8
.eh_frame:0000000000009E08                 db  41h ; A
.eh_frame:0000000000009E09                 db  0Bh
.eh_frame:0000000000009E0A                 db    0
.eh_frame:0000000000009E0B                 db    0
.eh_frame:0000000000009E0C                 db    0
.eh_frame:0000000000009E0D                 db    0
.eh_frame:0000000000009E0E                 db    0
.eh_frame:0000000000009E0F                 db    0
.eh_frame:0000000000009E10                 db  1Ch
.eh_frame:0000000000009E11                 db    0
.eh_frame:0000000000009E12                 db    0
.eh_frame:0000000000009E13                 db    0
.eh_frame:0000000000009E14                 db  6Ch ; l
.eh_frame:0000000000009E15                 db    3
.eh_frame:0000000000009E16                 db    0
.eh_frame:0000000000009E17                 db    0
.eh_frame:0000000000009E18                 db    8
.eh_frame:0000000000009E19                 db  99h
.eh_frame:0000000000009E1A                 db 0FFh
.eh_frame:0000000000009E1B                 db 0FFh
.eh_frame:0000000000009E1C                 db  60h ; `
.eh_frame:0000000000009E1D                 db    0
.eh_frame:0000000000009E1E                 db    0
.eh_frame:0000000000009E1F                 db    0
.eh_frame:0000000000009E20                 db    0
.eh_frame:0000000000009E21                 db  44h ; D
.eh_frame:0000000000009E22                 db  0Eh
.eh_frame:0000000000009E23                 db  10h
.eh_frame:0000000000009E24                 db  75h ; u
.eh_frame:0000000000009E25                 db  0Ah
.eh_frame:0000000000009E26                 db  0Eh
.eh_frame:0000000000009E27                 db    8
.eh_frame:0000000000009E28                 db  47h ; G
.eh_frame:0000000000009E29                 db  0Bh
.eh_frame:0000000000009E2A                 db  5Fh ; _
.eh_frame:0000000000009E2B                 db  0Eh
.eh_frame:0000000000009E2C                 db    8
.eh_frame:0000000000009E2D                 db    0
.eh_frame:0000000000009E2E                 db    0
.eh_frame:0000000000009E2F                 db    0
.eh_frame:0000000000009E30                 db  14h
.eh_frame:0000000000009E31                 db    0
.eh_frame:0000000000009E32                 db    0
.eh_frame:0000000000009E33                 db    0
.eh_frame:0000000000009E34                 db  8Ch
.eh_frame:0000000000009E35                 db    3
.eh_frame:0000000000009E36                 db    0
.eh_frame:0000000000009E37                 db    0
.eh_frame:0000000000009E38                 db  48h ; H
.eh_frame:0000000000009E39                 db  99h
.eh_frame:0000000000009E3A                 db 0FFh
.eh_frame:0000000000009E3B                 db 0FFh
.eh_frame:0000000000009E3C                 db  9Ch
.eh_frame:0000000000009E3D                 db    0
.eh_frame:0000000000009E3E                 db    0
.eh_frame:0000000000009E3F                 db    0
.eh_frame:0000000000009E40                 db    0
.eh_frame:0000000000009E41                 db    0
.eh_frame:0000000000009E42                 db    0
.eh_frame:0000000000009E43                 db    0
.eh_frame:0000000000009E44                 db    0
.eh_frame:0000000000009E45                 db    0
.eh_frame:0000000000009E46                 db    0
.eh_frame:0000000000009E47                 db    0
.eh_frame:0000000000009E48                 db  1Ch
.eh_frame:0000000000009E49                 db    0
.eh_frame:0000000000009E4A                 db    0
.eh_frame:0000000000009E4B                 db    0
.eh_frame:0000000000009E4C                 db 0A4h
.eh_frame:0000000000009E4D                 db    3
.eh_frame:0000000000009E4E                 db    0
.eh_frame:0000000000009E4F                 db    0
.eh_frame:0000000000009E50                 db 0D0h
.eh_frame:0000000000009E51                 db  99h
.eh_frame:0000000000009E52                 db 0FFh
.eh_frame:0000000000009E53                 db 0FFh
.eh_frame:0000000000009E54                 db  9Fh
.eh_frame:0000000000009E55                 db    0
.eh_frame:0000000000009E56                 db    0
.eh_frame:0000000000009E57                 db    0
.eh_frame:0000000000009E58                 db    0
.eh_frame:0000000000009E59                 db  44h ; D
.eh_frame:0000000000009E5A                 db  0Eh
.eh_frame:0000000000009E5B                 db  10h
.eh_frame:0000000000009E5C                 db  83h
.eh_frame:0000000000009E5D                 db    2
.eh_frame:0000000000009E5E                 db    2
.eh_frame:0000000000009E5F                 db  78h ; x
.eh_frame:0000000000009E60                 db  0Ah
.eh_frame:0000000000009E61                 db  0Eh
.eh_frame:0000000000009E62                 db    8
.eh_frame:0000000000009E63                 db  41h ; A
.eh_frame:0000000000009E64                 db  0Bh
.eh_frame:0000000000009E65                 db    0
.eh_frame:0000000000009E66                 db    0
.eh_frame:0000000000009E67                 db    0
.eh_frame:0000000000009E68                 db  40h ; @
.eh_frame:0000000000009E69                 db    0
.eh_frame:0000000000009E6A                 db    0
.eh_frame:0000000000009E6B                 db    0
.eh_frame:0000000000009E6C                 db 0C4h
.eh_frame:0000000000009E6D                 db    3
.eh_frame:0000000000009E6E                 db    0
.eh_frame:0000000000009E6F                 db    0
.eh_frame:0000000000009E70                 db  50h ; P
.eh_frame:0000000000009E71                 db  9Ah
.eh_frame:0000000000009E72                 db 0FFh
.eh_frame:0000000000009E73                 db 0FFh
.eh_frame:0000000000009E74                 db 0E7h
.eh_frame:0000000000009E75                 db    0
.eh_frame:0000000000009E76                 db    0
.eh_frame:0000000000009E77                 db    0
.eh_frame:0000000000009E78                 db    0
.eh_frame:0000000000009E79                 db  41h ; A
.eh_frame:0000000000009E7A                 db  0Eh
.eh_frame:0000000000009E7B                 db  10h
.eh_frame:0000000000009E7C                 db  86h
.eh_frame:0000000000009E7D                 db    2
.eh_frame:0000000000009E7E                 db  41h ; A
.eh_frame:0000000000009E7F                 db  0Eh
.eh_frame:0000000000009E80                 db  18h
.eh_frame:0000000000009E81                 db  83h
.eh_frame:0000000000009E82                 db    3
.eh_frame:0000000000009E83                 db  49h ; I
.eh_frame:0000000000009E84                 db  0Eh
.eh_frame:0000000000009E85                 db  20h
.eh_frame:0000000000009E86                 db  6Eh ; n
.eh_frame:0000000000009E87                 db  0Ah
.eh_frame:0000000000009E88                 db  0Eh
.eh_frame:0000000000009E89                 db  18h
.eh_frame:0000000000009E8A                 db  41h ; A
.eh_frame:0000000000009E8B                 db  0Eh
.eh_frame:0000000000009E8C                 db  10h
.eh_frame:0000000000009E8D                 db  41h ; A
.eh_frame:0000000000009E8E                 db  0Eh
.eh_frame:0000000000009E8F                 db    8
.eh_frame:0000000000009E90                 db  45h ; E
.eh_frame:0000000000009E91                 db  0Bh
.eh_frame:0000000000009E92                 db    2
.eh_frame:0000000000009E93                 db  4Ah ; J
.eh_frame:0000000000009E94                 db  0Ah
.eh_frame:0000000000009E95                 db  0Eh
.eh_frame:0000000000009E96                 db  18h
.eh_frame:0000000000009E97                 db  41h ; A
.eh_frame:0000000000009E98                 db  0Eh
.eh_frame:0000000000009E99                 db  10h
.eh_frame:0000000000009E9A                 db  41h ; A
.eh_frame:0000000000009E9B                 db  0Eh
.eh_frame:0000000000009E9C                 db    8
.eh_frame:0000000000009E9D                 db  44h ; D
.eh_frame:0000000000009E9E                 db  0Bh
.eh_frame:0000000000009E9F                 db    2
.eh_frame:0000000000009EA0                 db  54h ; T
.eh_frame:0000000000009EA1                 db  0Eh
.eh_frame:0000000000009EA2                 db  18h
.eh_frame:0000000000009EA3                 db  41h ; A
.eh_frame:0000000000009EA4                 db  0Eh
.eh_frame:0000000000009EA5                 db  10h
.eh_frame:0000000000009EA6                 db  41h ; A
.eh_frame:0000000000009EA7                 db  0Eh
.eh_frame:0000000000009EA8                 db    8
.eh_frame:0000000000009EA9                 db    0
.eh_frame:0000000000009EAA                 db    0
.eh_frame:0000000000009EAB                 db    0
.eh_frame:0000000000009EAC                 db  74h ; t
.eh_frame:0000000000009EAD                 db    0
.eh_frame:0000000000009EAE                 db    0
.eh_frame:0000000000009EAF                 db    0
.eh_frame:0000000000009EB0                 db    8
.eh_frame:0000000000009EB1                 db    4
.eh_frame:0000000000009EB2                 db    0
.eh_frame:0000000000009EB3                 db    0
.eh_frame:0000000000009EB4                 db 0FCh
.eh_frame:0000000000009EB5                 db  9Ah
.eh_frame:0000000000009EB6                 db 0FFh
.eh_frame:0000000000009EB7                 db 0FFh
.eh_frame:0000000000009EB8                 db  34h ; 4
.eh_frame:0000000000009EB9                 db  12h
.eh_frame:0000000000009EBA                 db    0
.eh_frame:0000000000009EBB                 db    0
.eh_frame:0000000000009EBC                 db    0
.eh_frame:0000000000009EBD                 db  42h ; B
.eh_frame:0000000000009EBE                 db  0Eh
.eh_frame:0000000000009EBF                 db  10h
.eh_frame:0000000000009EC0                 db  8Fh
.eh_frame:0000000000009EC1                 db    2
.eh_frame:0000000000009EC2                 db  42h ; B
.eh_frame:0000000000009EC3                 db  0Eh
.eh_frame:0000000000009EC4                 db  18h
.eh_frame:0000000000009EC5                 db  8Eh
.eh_frame:0000000000009EC6                 db    3
.eh_frame:0000000000009EC7                 db  45h ; E
.eh_frame:0000000000009EC8                 db  0Eh
.eh_frame:0000000000009EC9                 db  20h
.eh_frame:0000000000009ECA                 db  8Dh
.eh_frame:0000000000009ECB                 db    4
.eh_frame:0000000000009ECC                 db  42h ; B
.eh_frame:0000000000009ECD                 db  0Eh
.eh_frame:0000000000009ECE                 db  28h ; (
.eh_frame:0000000000009ECF                 db  8Ch
.eh_frame:0000000000009ED0                 db    5
.eh_frame:0000000000009ED1                 db  44h ; D
.eh_frame:0000000000009ED2                 db  0Eh
.eh_frame:0000000000009ED3                 db  30h ; 0
.eh_frame:0000000000009ED4                 db  86h
.eh_frame:0000000000009ED5                 db    6
.eh_frame:0000000000009ED6                 db  41h ; A
.eh_frame:0000000000009ED7                 db  0Eh
.eh_frame:0000000000009ED8                 db  38h ; 8
.eh_frame:0000000000009ED9                 db  83h
.eh_frame:0000000000009EDA                 db    7
.eh_frame:0000000000009EDB                 db  53h ; S
.eh_frame:0000000000009EDC                 db  0Eh
.eh_frame:0000000000009EDD                 db 0F0h
.eh_frame:0000000000009EDE                 db    1
.eh_frame:0000000000009EDF                 db    3
.eh_frame:0000000000009EE0                 db  81h
.eh_frame:0000000000009EE1                 db  0Bh
.eh_frame:0000000000009EE2                 db  0Eh
.eh_frame:0000000000009EE3                 db 0F8h
.eh_frame:0000000000009EE4                 db    1
.eh_frame:0000000000009EE5                 db  4Ah ; J
.eh_frame:0000000000009EE6                 db  0Eh
.eh_frame:0000000000009EE7                 db  80h
.eh_frame:0000000000009EE8                 db    2
.eh_frame:0000000000009EE9                 db  44h ; D
.eh_frame:0000000000009EEA                 db  0Eh
.eh_frame:0000000000009EEB                 db  88h
.eh_frame:0000000000009EEC                 db    2
.eh_frame:0000000000009EED                 db  45h ; E
.eh_frame:0000000000009EEE                 db  0Eh
.eh_frame:0000000000009EEF                 db  90h
.eh_frame:0000000000009EF0                 db    2
.eh_frame:0000000000009EF1                 db  5Fh ; _
.eh_frame:0000000000009EF2                 db  0Eh
.eh_frame:0000000000009EF3                 db 0F0h
.eh_frame:0000000000009EF4                 db    1
.eh_frame:0000000000009EF5                 db  64h ; d
.eh_frame:0000000000009EF6                 db  0Ah
.eh_frame:0000000000009EF7                 db  0Eh
.eh_frame:0000000000009EF8                 db  38h ; 8
.eh_frame:0000000000009EF9                 db  41h ; A
.eh_frame:0000000000009EFA                 db  0Eh
.eh_frame:0000000000009EFB                 db  30h ; 0
.eh_frame:0000000000009EFC                 db  41h ; A
.eh_frame:0000000000009EFD                 db  0Eh
.eh_frame:0000000000009EFE                 db  28h ; (
.eh_frame:0000000000009EFF                 db  42h ; B
.eh_frame:0000000000009F00                 db  0Eh
.eh_frame:0000000000009F01                 db  20h
.eh_frame:0000000000009F02                 db  42h ; B
.eh_frame:0000000000009F03                 db  0Eh
.eh_frame:0000000000009F04                 db  18h
.eh_frame:0000000000009F05                 db  42h ; B
.eh_frame:0000000000009F06                 db  0Eh
.eh_frame:0000000000009F07                 db  10h
.eh_frame:0000000000009F08                 db  42h ; B
.eh_frame:0000000000009F09                 db  0Eh
.eh_frame:0000000000009F0A                 db    8
.eh_frame:0000000000009F0B                 db  44h ; D
.eh_frame:0000000000009F0C                 db  0Bh
.eh_frame:0000000000009F0D                 db    3
.eh_frame:0000000000009F0E                 db  99h
.eh_frame:0000000000009F0F                 db    5
.eh_frame:0000000000009F10                 db  0Eh
.eh_frame:0000000000009F11                 db 0F8h
.eh_frame:0000000000009F12                 db    1
.eh_frame:0000000000009F13                 db  4Dh ; M
.eh_frame:0000000000009F14                 db  0Eh
.eh_frame:0000000000009F15                 db  80h
.eh_frame:0000000000009F16                 db    2
.eh_frame:0000000000009F17                 db  44h ; D
.eh_frame:0000000000009F18                 db  0Eh
.eh_frame:0000000000009F19                 db  88h
.eh_frame:0000000000009F1A                 db    2
.eh_frame:0000000000009F1B                 db  47h ; G
.eh_frame:0000000000009F1C                 db  0Eh
.eh_frame:0000000000009F1D                 db  90h
.eh_frame:0000000000009F1E                 db    2
.eh_frame:0000000000009F1F                 db  5Bh ; [
.eh_frame:0000000000009F20                 db  0Eh
.eh_frame:0000000000009F21                 db 0F0h
.eh_frame:0000000000009F22                 db    1
.eh_frame:0000000000009F23                 db    0
.eh_frame:0000000000009F24                 db  68h ; h
.eh_frame:0000000000009F25                 db    0
.eh_frame:0000000000009F26                 db    0
.eh_frame:0000000000009F27                 db    0
.eh_frame:0000000000009F28                 db  80h
.eh_frame:0000000000009F29                 db    4
.eh_frame:0000000000009F2A                 db    0
.eh_frame:0000000000009F2B                 db    0
.eh_frame:0000000000009F2C                 db 0C4h
.eh_frame:0000000000009F2D                 db 0ACh
.eh_frame:0000000000009F2E                 db 0FFh
.eh_frame:0000000000009F2F                 db 0FFh
.eh_frame:0000000000009F30                 db 0ABh
.eh_frame:0000000000009F31                 db    1
.eh_frame:0000000000009F32                 db    0
.eh_frame:0000000000009F33                 db    0
.eh_frame:0000000000009F34                 db    0
.eh_frame:0000000000009F35                 db  42h ; B
.eh_frame:0000000000009F36                 db  0Eh
.eh_frame:0000000000009F37                 db  10h
.eh_frame:0000000000009F38                 db  8Fh
.eh_frame:0000000000009F39                 db    2
.eh_frame:0000000000009F3A                 db  42h ; B
.eh_frame:0000000000009F3B                 db  0Eh
.eh_frame:0000000000009F3C                 db  18h
.eh_frame:0000000000009F3D                 db  8Eh
.eh_frame:0000000000009F3E                 db    3
.eh_frame:0000000000009F3F                 db  45h ; E
.eh_frame:0000000000009F40                 db  0Eh
.eh_frame:0000000000009F41                 db  20h
.eh_frame:0000000000009F42                 db  8Dh
.eh_frame:0000000000009F43                 db    4
.eh_frame:0000000000009F44                 db  42h ; B
.eh_frame:0000000000009F45                 db  0Eh
.eh_frame:0000000000009F46                 db  28h ; (
.eh_frame:0000000000009F47                 db  8Ch
.eh_frame:0000000000009F48                 db    5
.eh_frame:0000000000009F49                 db  44h ; D
.eh_frame:0000000000009F4A                 db  0Eh
.eh_frame:0000000000009F4B                 db  30h ; 0
.eh_frame:0000000000009F4C                 db  86h
.eh_frame:0000000000009F4D                 db    6
.eh_frame:0000000000009F4E                 db  41h ; A
.eh_frame:0000000000009F4F                 db  0Eh
.eh_frame:0000000000009F50                 db  38h ; 8
.eh_frame:0000000000009F51                 db  83h
.eh_frame:0000000000009F52                 db    7
.eh_frame:0000000000009F53                 db  47h ; G
.eh_frame:0000000000009F54                 db  0Eh
.eh_frame:0000000000009F55                 db  60h ; `
.eh_frame:0000000000009F56                 db    2
.eh_frame:0000000000009F57                 db  99h
.eh_frame:0000000000009F58                 db  0Eh
.eh_frame:0000000000009F59                 db  68h ; h
.eh_frame:0000000000009F5A                 db  5Fh ; _
.eh_frame:0000000000009F5B                 db  0Eh
.eh_frame:0000000000009F5C                 db  70h ; p
.eh_frame:0000000000009F5D                 db  46h ; F
.eh_frame:0000000000009F5E                 db  0Eh
.eh_frame:0000000000009F5F                 db  78h ; x
.eh_frame:0000000000009F60                 db  42h ; B
.eh_frame:0000000000009F61                 db  0Eh
.eh_frame:0000000000009F62                 db  80h
.eh_frame:0000000000009F63                 db    1
.eh_frame:0000000000009F64                 db  59h ; Y
.eh_frame:0000000000009F65                 db  0Eh
.eh_frame:0000000000009F66                 db  60h ; `
.eh_frame:0000000000009F67                 db    2
.eh_frame:0000000000009F68                 db  40h ; @
.eh_frame:0000000000009F69                 db  0Eh
.eh_frame:0000000000009F6A                 db  68h ; h
.eh_frame:0000000000009F6B                 db  4Bh ; K
.eh_frame:0000000000009F6C                 db  0Eh
.eh_frame:0000000000009F6D                 db  70h ; p
.eh_frame:0000000000009F6E                 db  43h ; C
.eh_frame:0000000000009F6F                 db  0Eh
.eh_frame:0000000000009F70                 db  78h ; x
.eh_frame:0000000000009F71                 db  45h ; E
.eh_frame:0000000000009F72                 db  0Eh
.eh_frame:0000000000009F73                 db  80h
.eh_frame:0000000000009F74                 db    1
.eh_frame:0000000000009F75                 db  5Eh ; ^
.eh_frame:0000000000009F76                 db  0Eh
.eh_frame:0000000000009F77                 db  60h ; `
.eh_frame:0000000000009F78                 db  4Ch ; L
.eh_frame:0000000000009F79                 db  0Ah
.eh_frame:0000000000009F7A                 db  0Eh
.eh_frame:0000000000009F7B                 db  38h ; 8
.eh_frame:0000000000009F7C                 db  44h ; D
.eh_frame:0000000000009F7D                 db  0Eh
.eh_frame:0000000000009F7E                 db  30h ; 0
.eh_frame:0000000000009F7F                 db  41h ; A
.eh_frame:0000000000009F80                 db  0Eh
.eh_frame:0000000000009F81                 db  28h ; (
.eh_frame:0000000000009F82                 db  42h ; B
.eh_frame:0000000000009F83                 db  0Eh
.eh_frame:0000000000009F84                 db  20h
.eh_frame:0000000000009F85                 db  42h ; B
.eh_frame:0000000000009F86                 db  0Eh
.eh_frame:0000000000009F87                 db  18h
.eh_frame:0000000000009F88                 db  42h ; B
.eh_frame:0000000000009F89                 db  0Eh
.eh_frame:0000000000009F8A                 db  10h
.eh_frame:0000000000009F8B                 db  42h ; B
.eh_frame:0000000000009F8C                 db  0Eh
.eh_frame:0000000000009F8D                 db    8
.eh_frame:0000000000009F8E                 db  46h ; F
.eh_frame:0000000000009F8F                 db  0Bh
.eh_frame:0000000000009F90                 db  28h ; (
.eh_frame:0000000000009F91                 db    0
.eh_frame:0000000000009F92                 db    0
.eh_frame:0000000000009F93                 db    0
.eh_frame:0000000000009F94                 db 0ECh
.eh_frame:0000000000009F95                 db    4
.eh_frame:0000000000009F96                 db    0
.eh_frame:0000000000009F97                 db    0
.eh_frame:0000000000009F98                 db    8
.eh_frame:0000000000009F99                 db 0AEh
.eh_frame:0000000000009F9A                 db 0FFh
.eh_frame:0000000000009F9B                 db 0FFh
.eh_frame:0000000000009F9C                 db  36h ; 6
.eh_frame:0000000000009F9D                 db    0
.eh_frame:0000000000009F9E                 db    0
.eh_frame:0000000000009F9F                 db    0
.eh_frame:0000000000009FA0                 db    0
.eh_frame:0000000000009FA1                 db  42h ; B
.eh_frame:0000000000009FA2                 db  0Eh
.eh_frame:0000000000009FA3                 db  10h
.eh_frame:0000000000009FA4                 db  8Ch
.eh_frame:0000000000009FA5                 db    2
.eh_frame:0000000000009FA6                 db  41h ; A
.eh_frame:0000000000009FA7                 db  0Eh
.eh_frame:0000000000009FA8                 db  18h
.eh_frame:0000000000009FA9                 db  86h
.eh_frame:0000000000009FAA                 db    3
.eh_frame:0000000000009FAB                 db  41h ; A
.eh_frame:0000000000009FAC                 db  0Eh
.eh_frame:0000000000009FAD                 db  20h
.eh_frame:0000000000009FAE                 db  83h
.eh_frame:0000000000009FAF                 db    4
.eh_frame:0000000000009FB0                 db  6Eh ; n
.eh_frame:0000000000009FB1                 db  0Eh
.eh_frame:0000000000009FB2                 db  18h
.eh_frame:0000000000009FB3                 db  41h ; A
.eh_frame:0000000000009FB4                 db  0Eh
.eh_frame:0000000000009FB5                 db  10h
.eh_frame:0000000000009FB6                 db  42h ; B
.eh_frame:0000000000009FB7                 db  0Eh
.eh_frame:0000000000009FB8                 db    8
.eh_frame:0000000000009FB9                 db    0
.eh_frame:0000000000009FBA                 db    0
.eh_frame:0000000000009FBB                 db    0
.eh_frame:0000000000009FBC                 db  10h
.eh_frame:0000000000009FBD                 db    0
.eh_frame:0000000000009FBE                 db    0
.eh_frame:0000000000009FBF                 db    0
.eh_frame:0000000000009FC0                 db  18h
.eh_frame:0000000000009FC1                 db    5
.eh_frame:0000000000009FC2                 db    0
.eh_frame:0000000000009FC3                 db    0
.eh_frame:0000000000009FC4                 db  1Ch
.eh_frame:0000000000009FC5                 db 0AEh
.eh_frame:0000000000009FC6                 db 0FFh
.eh_frame:0000000000009FC7                 db 0FFh
.eh_frame:0000000000009FC8                 db  11h
.eh_frame:0000000000009FC9                 db    0
.eh_frame:0000000000009FCA                 db    0
.eh_frame:0000000000009FCB                 db    0
.eh_frame:0000000000009FCC                 db    0
.eh_frame:0000000000009FCD                 db    0
.eh_frame:0000000000009FCE                 db    0
.eh_frame:0000000000009FCF                 db    0
.eh_frame:0000000000009FD0                 db  10h
.eh_frame:0000000000009FD1                 db    0
.eh_frame:0000000000009FD2                 db    0
.eh_frame:0000000000009FD3                 db    0
.eh_frame:0000000000009FD4                 db  2Ch ; ,
.eh_frame:0000000000009FD5                 db    5
.eh_frame:0000000000009FD6                 db    0
.eh_frame:0000000000009FD7                 db    0
.eh_frame:0000000000009FD8                 db  28h ; (
.eh_frame:0000000000009FD9                 db 0AEh
.eh_frame:0000000000009FDA                 db 0FFh
.eh_frame:0000000000009FDB                 db 0FFh
.eh_frame:0000000000009FDC                 db  11h
.eh_frame:0000000000009FDD                 db    0
.eh_frame:0000000000009FDE                 db    0
.eh_frame:0000000000009FDF                 db    0
.eh_frame:0000000000009FE0                 db    0
.eh_frame:0000000000009FE1                 db    0
.eh_frame:0000000000009FE2                 db    0
.eh_frame:0000000000009FE3                 db    0
.eh_frame:0000000000009FE4                 db  10h
.eh_frame:0000000000009FE5                 db    0
.eh_frame:0000000000009FE6                 db    0
.eh_frame:0000000000009FE7                 db    0
.eh_frame:0000000000009FE8                 db  40h ; @
.eh_frame:0000000000009FE9                 db    5
.eh_frame:0000000000009FEA                 db    0
.eh_frame:0000000000009FEB                 db    0
.eh_frame:0000000000009FEC                 db  34h ; 4
.eh_frame:0000000000009FED                 db 0AEh
.eh_frame:0000000000009FEE                 db 0FFh
.eh_frame:0000000000009FEF                 db 0FFh
.eh_frame:0000000000009FF0                 db  35h ; 5
.eh_frame:0000000000009FF1                 db    0
.eh_frame:0000000000009FF2                 db    0
.eh_frame:0000000000009FF3                 db    0
.eh_frame:0000000000009FF4                 db    0
.eh_frame:0000000000009FF5                 db    0
.eh_frame:0000000000009FF6                 db    0
.eh_frame:0000000000009FF7                 db    0
.eh_frame:0000000000009FF8                 db  10h
.eh_frame:0000000000009FF9                 db    0
.eh_frame:0000000000009FFA                 db    0
.eh_frame:0000000000009FFB                 db    0
.eh_frame:0000000000009FFC                 db  54h ; T
.eh_frame:0000000000009FFD                 db    5
.eh_frame:0000000000009FFE                 db    0
.eh_frame:0000000000009FFF                 db    0
.eh_frame:000000000000A000                 db  60h ; `
.eh_frame:000000000000A001                 db 0AEh
.eh_frame:000000000000A002                 db 0FFh
.eh_frame:000000000000A003                 db 0FFh
.eh_frame:000000000000A004                 db  15h
.eh_frame:000000000000A005                 db    0
.eh_frame:000000000000A006                 db    0
.eh_frame:000000000000A007                 db    0
.eh_frame:000000000000A008                 db    0
.eh_frame:000000000000A009                 db    0
.eh_frame:000000000000A00A                 db    0
.eh_frame:000000000000A00B                 db    0
.eh_frame:000000000000A00C                 db  10h
.eh_frame:000000000000A00D                 db    0
.eh_frame:000000000000A00E                 db    0
.eh_frame:000000000000A00F                 db    0
.eh_frame:000000000000A010                 db  68h ; h
.eh_frame:000000000000A011                 db    5
.eh_frame:000000000000A012                 db    0
.eh_frame:000000000000A013                 db    0
.eh_frame:000000000000A014                 db  6Ch ; l
.eh_frame:000000000000A015                 db 0AEh
.eh_frame:000000000000A016                 db 0FFh
.eh_frame:000000000000A017                 db 0FFh
.eh_frame:000000000000A018                 db  30h ; 0
.eh_frame:000000000000A019                 db    0
.eh_frame:000000000000A01A                 db    0
.eh_frame:000000000000A01B                 db    0
.eh_frame:000000000000A01C                 db    0
.eh_frame:000000000000A01D                 db  6Bh ; k
.eh_frame:000000000000A01E                 db  0Eh
.eh_frame:000000000000A01F                 db  10h
.eh_frame:000000000000A020                 db  50h ; P
.eh_frame:000000000000A021                 db    0
.eh_frame:000000000000A022                 db    0
.eh_frame:000000000000A023                 db    0
.eh_frame:000000000000A024                 db  7Ch ; |
.eh_frame:000000000000A025                 db    5
.eh_frame:000000000000A026                 db    0
.eh_frame:000000000000A027                 db    0
.eh_frame:000000000000A028                 db  88h
.eh_frame:000000000000A029                 db 0AEh
.eh_frame:000000000000A02A                 db 0FFh
.eh_frame:000000000000A02B                 db 0FFh
.eh_frame:000000000000A02C                 db  74h ; t
.eh_frame:000000000000A02D                 db    0
.eh_frame:000000000000A02E                 db    0
.eh_frame:000000000000A02F                 db    0
.eh_frame:000000000000A030                 db    0
.eh_frame:000000000000A031                 db  42h ; B
.eh_frame:000000000000A032                 db  0Eh
.eh_frame:000000000000A033                 db  10h
.eh_frame:000000000000A034                 db  8Fh
.eh_frame:000000000000A035                 db    2
.eh_frame:000000000000A036                 db  42h ; B
.eh_frame:000000000000A037                 db  0Eh
.eh_frame:000000000000A038                 db  18h
.eh_frame:000000000000A039                 db  8Eh
.eh_frame:000000000000A03A                 db    3
.eh_frame:000000000000A03B                 db  49h ; I
.eh_frame:000000000000A03C                 db  0Eh
.eh_frame:000000000000A03D                 db  20h
.eh_frame:000000000000A03E                 db  8Dh
.eh_frame:000000000000A03F                 db    4
.eh_frame:000000000000A040                 db  42h ; B
.eh_frame:000000000000A041                 db  0Eh
.eh_frame:000000000000A042                 db  28h ; (
.eh_frame:000000000000A043                 db  8Ch
.eh_frame:000000000000A044                 db    5
.eh_frame:000000000000A045                 db  44h ; D
.eh_frame:000000000000A046                 db  0Eh
.eh_frame:000000000000A047                 db  30h ; 0
.eh_frame:000000000000A048                 db  86h
.eh_frame:000000000000A049                 db    6
.eh_frame:000000000000A04A                 db  41h ; A
.eh_frame:000000000000A04B                 db  0Eh
.eh_frame:000000000000A04C                 db  38h ; 8
.eh_frame:000000000000A04D                 db  83h
.eh_frame:000000000000A04E                 db    7
.eh_frame:000000000000A04F                 db  4Dh ; M
.eh_frame:000000000000A050                 db  0Eh
.eh_frame:000000000000A051                 db  50h ; P
.eh_frame:000000000000A052                 db  5Fh ; _
.eh_frame:000000000000A053                 db  0Eh
.eh_frame:000000000000A054                 db  58h ; X
.eh_frame:000000000000A055                 db  47h ; G
.eh_frame:000000000000A056                 db  0Eh
.eh_frame:000000000000A057                 db  60h ; `
.eh_frame:000000000000A058                 db  46h ; F
.eh_frame:000000000000A059                 db  0Eh
.eh_frame:000000000000A05A                 db  68h ; h
.eh_frame:000000000000A05B                 db  44h ; D
.eh_frame:000000000000A05C                 db  0Eh
.eh_frame:000000000000A05D                 db  70h ; p
.eh_frame:000000000000A05E                 db  58h ; X
.eh_frame:000000000000A05F                 db  0Eh
.eh_frame:000000000000A060                 db  38h ; 8
.eh_frame:000000000000A061                 db  41h ; A
.eh_frame:000000000000A062                 db  0Eh
.eh_frame:000000000000A063                 db  30h ; 0
.eh_frame:000000000000A064                 db  41h ; A
.eh_frame:000000000000A065                 db  0Eh
.eh_frame:000000000000A066                 db  28h ; (
.eh_frame:000000000000A067                 db  42h ; B
.eh_frame:000000000000A068                 db  0Eh
.eh_frame:000000000000A069                 db  20h
.eh_frame:000000000000A06A                 db  42h ; B
.eh_frame:000000000000A06B                 db  0Eh
.eh_frame:000000000000A06C                 db  18h
.eh_frame:000000000000A06D                 db  42h ; B
.eh_frame:000000000000A06E                 db  0Eh
.eh_frame:000000000000A06F                 db  10h
.eh_frame:000000000000A070                 db  42h ; B
.eh_frame:000000000000A071                 db  0Eh
.eh_frame:000000000000A072                 db    8
.eh_frame:000000000000A073                 db    0
.eh_frame:000000000000A074                 db  68h ; h
.eh_frame:000000000000A075                 db    0
.eh_frame:000000000000A076                 db    0
.eh_frame:000000000000A077                 db    0
.eh_frame:000000000000A078                 db 0D0h
.eh_frame:000000000000A079                 db    5
.eh_frame:000000000000A07A                 db    0
.eh_frame:000000000000A07B                 db    0
.eh_frame:000000000000A07C                 db 0B4h
.eh_frame:000000000000A07D                 db 0AEh
.eh_frame:000000000000A07E                 db 0FFh
.eh_frame:000000000000A07F                 db 0FFh
.eh_frame:000000000000A080                 db 0E3h
.eh_frame:000000000000A081                 db    0
.eh_frame:000000000000A082                 db    0
.eh_frame:000000000000A083                 db    0
.eh_frame:000000000000A084                 db    0
.eh_frame:000000000000A085                 db  42h ; B
.eh_frame:000000000000A086                 db  0Eh
.eh_frame:000000000000A087                 db  10h
.eh_frame:000000000000A088                 db  8Fh
.eh_frame:000000000000A089                 db    2
.eh_frame:000000000000A08A                 db  42h ; B
.eh_frame:000000000000A08B                 db  0Eh
.eh_frame:000000000000A08C                 db  18h
.eh_frame:000000000000A08D                 db  8Eh
.eh_frame:000000000000A08E                 db    3
.eh_frame:000000000000A08F                 db  49h ; I
.eh_frame:000000000000A090                 db  0Eh
.eh_frame:000000000000A091                 db  20h
.eh_frame:000000000000A092                 db  8Dh
.eh_frame:000000000000A093                 db    4
.eh_frame:000000000000A094                 db  42h ; B
.eh_frame:000000000000A095                 db  0Eh
.eh_frame:000000000000A096                 db  28h ; (
.eh_frame:000000000000A097                 db  8Ch
.eh_frame:000000000000A098                 db    5
.eh_frame:000000000000A099                 db  44h ; D
.eh_frame:000000000000A09A                 db  0Eh
.eh_frame:000000000000A09B                 db  30h ; 0
.eh_frame:000000000000A09C                 db  86h
.eh_frame:000000000000A09D                 db    6
.eh_frame:000000000000A09E                 db  41h ; A
.eh_frame:000000000000A09F                 db  0Eh
.eh_frame:000000000000A0A0                 db  38h ; 8
.eh_frame:000000000000A0A1                 db  83h
.eh_frame:000000000000A0A2                 db    7
.eh_frame:000000000000A0A3                 db  4Dh ; M
.eh_frame:000000000000A0A4                 db  0Eh
.eh_frame:000000000000A0A5                 db  70h ; p
.eh_frame:000000000000A0A6                 db  65h ; e
.eh_frame:000000000000A0A7                 db  0Eh
.eh_frame:000000000000A0A8                 db  78h ; x
.eh_frame:000000000000A0A9                 db  4Dh ; M
.eh_frame:000000000000A0AA                 db  0Eh
.eh_frame:000000000000A0AB                 db  80h
.eh_frame:000000000000A0AC                 db    1
.eh_frame:000000000000A0AD                 db  46h ; F
.eh_frame:000000000000A0AE                 db  0Eh
.eh_frame:000000000000A0AF                 db  88h
.eh_frame:000000000000A0B0                 db    1
.eh_frame:000000000000A0B1                 db  42h ; B
.eh_frame:000000000000A0B2                 db  0Eh
.eh_frame:000000000000A0B3                 db  90h
.eh_frame:000000000000A0B4                 db    1
.eh_frame:000000000000A0B5                 db  5Eh ; ^
.eh_frame:000000000000A0B6                 db  0Eh
.eh_frame:000000000000A0B7                 db  70h ; p
.eh_frame:000000000000A0B8                 db  56h ; V
.eh_frame:000000000000A0B9                 db  0Eh
.eh_frame:000000000000A0BA                 db  78h ; x
.eh_frame:000000000000A0BB                 db  43h ; C
.eh_frame:000000000000A0BC                 db  0Eh
.eh_frame:000000000000A0BD                 db  80h
.eh_frame:000000000000A0BE                 db    1
.eh_frame:000000000000A0BF                 db  43h ; C
.eh_frame:000000000000A0C0                 db  0Eh
.eh_frame:000000000000A0C1                 db  88h
.eh_frame:000000000000A0C2                 db    1
.eh_frame:000000000000A0C3                 db  56h ; V
.eh_frame:000000000000A0C4                 db  0Eh
.eh_frame:000000000000A0C5                 db  90h
.eh_frame:000000000000A0C6                 db    1
.eh_frame:000000000000A0C7                 db  52h ; R
.eh_frame:000000000000A0C8                 db  0Eh
.eh_frame:000000000000A0C9                 db  70h ; p
.eh_frame:000000000000A0CA                 db  5Bh ; [
.eh_frame:000000000000A0CB                 db  0Eh
.eh_frame:000000000000A0CC                 db  38h ; 8
.eh_frame:000000000000A0CD                 db  41h ; A
.eh_frame:000000000000A0CE                 db  0Eh
.eh_frame:000000000000A0CF                 db  30h ; 0
.eh_frame:000000000000A0D0                 db  41h ; A
.eh_frame:000000000000A0D1                 db  0Eh
.eh_frame:000000000000A0D2                 db  28h ; (
.eh_frame:000000000000A0D3                 db  42h ; B
.eh_frame:000000000000A0D4                 db  0Eh
.eh_frame:000000000000A0D5                 db  20h
.eh_frame:000000000000A0D6                 db  42h ; B
.eh_frame:000000000000A0D7                 db  0Eh
.eh_frame:000000000000A0D8                 db  18h
.eh_frame:000000000000A0D9                 db  42h ; B
.eh_frame:000000000000A0DA                 db  0Eh
.eh_frame:000000000000A0DB                 db  10h
.eh_frame:000000000000A0DC                 db  42h ; B
.eh_frame:000000000000A0DD                 db  0Eh
.eh_frame:000000000000A0DE                 db    8
.eh_frame:000000000000A0DF                 db    0
.eh_frame:000000000000A0E0                 db  10h
.eh_frame:000000000000A0E1                 db    0
.eh_frame:000000000000A0E2                 db    0
.eh_frame:000000000000A0E3                 db    0
.eh_frame:000000000000A0E4                 db  3Ch ; <
.eh_frame:000000000000A0E5                 db    6
.eh_frame:000000000000A0E6                 db    0
.eh_frame:000000000000A0E7                 db    0
.eh_frame:000000000000A0E8                 db  38h ; 8
.eh_frame:000000000000A0E9                 db 0AFh
.eh_frame:000000000000A0EA                 db 0FFh
.eh_frame:000000000000A0EB                 db 0FFh
.eh_frame:000000000000A0EC                 db  0Ah
.eh_frame:000000000000A0ED                 db    0
.eh_frame:000000000000A0EE                 db    0
.eh_frame:000000000000A0EF                 db    0
.eh_frame:000000000000A0F0                 db    0
.eh_frame:000000000000A0F1                 db    0
.eh_frame:000000000000A0F2                 db    0
.eh_frame:000000000000A0F3                 db    0
.eh_frame:000000000000A0F4                 db  28h ; (
.eh_frame:000000000000A0F5                 db    0
.eh_frame:000000000000A0F6                 db    0
.eh_frame:000000000000A0F7                 db    0
.eh_frame:000000000000A0F8                 db  50h ; P
.eh_frame:000000000000A0F9                 db    6
.eh_frame:000000000000A0FA                 db    0
.eh_frame:000000000000A0FB                 db    0
.eh_frame:000000000000A0FC                 db  34h ; 4
.eh_frame:000000000000A0FD                 db 0AFh
.eh_frame:000000000000A0FE                 db 0FFh
.eh_frame:000000000000A0FF                 db 0FFh
.eh_frame:000000000000A100                 db  93h
.eh_frame:000000000000A101                 db    0
.eh_frame:000000000000A102                 db    0
.eh_frame:000000000000A103                 db    0
.eh_frame:000000000000A104                 db    0
.eh_frame:000000000000A105                 db  48h ; H
.eh_frame:000000000000A106                 db  0Eh
.eh_frame:000000000000A107                 db  10h
.eh_frame:000000000000A108                 db  8Ch
.eh_frame:000000000000A109                 db    2
.eh_frame:000000000000A10A                 db  48h ; H
.eh_frame:000000000000A10B                 db  0Eh
.eh_frame:000000000000A10C                 db  18h
.eh_frame:000000000000A10D                 db  86h
.eh_frame:000000000000A10E                 db    3
.eh_frame:000000000000A10F                 db  41h ; A
.eh_frame:000000000000A110                 db  0Eh
.eh_frame:000000000000A111                 db  20h
.eh_frame:000000000000A112                 db  83h
.eh_frame:000000000000A113                 db    4
.eh_frame:000000000000A114                 db    2
.eh_frame:000000000000A115                 db  74h ; t
.eh_frame:000000000000A116                 db  0Eh
.eh_frame:000000000000A117                 db  18h
.eh_frame:000000000000A118                 db  4Bh ; K
.eh_frame:000000000000A119                 db  0Eh
.eh_frame:000000000000A11A                 db  10h
.eh_frame:000000000000A11B                 db  42h ; B
.eh_frame:000000000000A11C                 db  0Eh
.eh_frame:000000000000A11D                 db    8
.eh_frame:000000000000A11E                 db    0
.eh_frame:000000000000A11F                 db    0
.eh_frame:000000000000A120                 db  10h
.eh_frame:000000000000A121                 db    0
.eh_frame:000000000000A122                 db    0
.eh_frame:000000000000A123                 db    0
.eh_frame:000000000000A124                 db  7Ch ; |
.eh_frame:000000000000A125                 db    6
.eh_frame:000000000000A126                 db    0
.eh_frame:000000000000A127                 db    0
.eh_frame:000000000000A128                 db 0A8h
.eh_frame:000000000000A129                 db 0AFh
.eh_frame:000000000000A12A                 db 0FFh
.eh_frame:000000000000A12B                 db 0FFh
.eh_frame:000000000000A12C                 db  13h
.eh_frame:000000000000A12D                 db    0
.eh_frame:000000000000A12E                 db    0
.eh_frame:000000000000A12F                 db    0
.eh_frame:000000000000A130                 db    0
.eh_frame:000000000000A131                 db    0
.eh_frame:000000000000A132                 db    0
.eh_frame:000000000000A133                 db    0
.eh_frame:000000000000A134                 db  10h
.eh_frame:000000000000A135                 db    0
.eh_frame:000000000000A136                 db    0
.eh_frame:000000000000A137                 db    0
.eh_frame:000000000000A138                 db  90h
.eh_frame:000000000000A139                 db    6
.eh_frame:000000000000A13A                 db    0
.eh_frame:000000000000A13B                 db    0
.eh_frame:000000000000A13C                 db 0B4h
.eh_frame:000000000000A13D                 db 0AFh
.eh_frame:000000000000A13E                 db 0FFh
.eh_frame:000000000000A13F                 db 0FFh
.eh_frame:000000000000A140                 db  0Ch
.eh_frame:000000000000A141                 db    0
.eh_frame:000000000000A142                 db    0
.eh_frame:000000000000A143                 db    0
.eh_frame:000000000000A144                 db    0
.eh_frame:000000000000A145                 db    0
.eh_frame:000000000000A146                 db    0
.eh_frame:000000000000A147                 db    0
.eh_frame:000000000000A148                 db  10h
.eh_frame:000000000000A149                 db    0
.eh_frame:000000000000A14A                 db    0
.eh_frame:000000000000A14B                 db    0
.eh_frame:000000000000A14C                 db 0A4h
.eh_frame:000000000000A14D                 db    6
.eh_frame:000000000000A14E                 db    0
.eh_frame:000000000000A14F                 db    0
.eh_frame:000000000000A150                 db 0B0h
.eh_frame:000000000000A151                 db 0AFh
.eh_frame:000000000000A152                 db 0FFh
.eh_frame:000000000000A153                 db 0FFh
.eh_frame:000000000000A154                 db  18h
.eh_frame:000000000000A155                 db    0
.eh_frame:000000000000A156                 db    0
.eh_frame:000000000000A157                 db    0
.eh_frame:000000000000A158                 db    0
.eh_frame:000000000000A159                 db    0
.eh_frame:000000000000A15A                 db    0
.eh_frame:000000000000A15B                 db    0
.eh_frame:000000000000A15C                 db  10h
.eh_frame:000000000000A15D                 db    0
.eh_frame:000000000000A15E                 db    0
.eh_frame:000000000000A15F                 db    0
.eh_frame:000000000000A160                 db 0B8h
.eh_frame:000000000000A161                 db    6
.eh_frame:000000000000A162                 db    0
.eh_frame:000000000000A163                 db    0
.eh_frame:000000000000A164                 db 0BCh
.eh_frame:000000000000A165                 db 0AFh
.eh_frame:000000000000A166                 db 0FFh
.eh_frame:000000000000A167                 db 0FFh
.eh_frame:000000000000A168                 db  14h
.eh_frame:000000000000A169                 db    0
.eh_frame:000000000000A16A                 db    0
.eh_frame:000000000000A16B                 db    0
.eh_frame:000000000000A16C                 db    0
.eh_frame:000000000000A16D                 db    0
.eh_frame:000000000000A16E                 db    0
.eh_frame:000000000000A16F                 db    0
.eh_frame:000000000000A170                 db  18h
.eh_frame:000000000000A171                 db    0
.eh_frame:000000000000A172                 db    0
.eh_frame:000000000000A173                 db    0
.eh_frame:000000000000A174                 db 0CCh
.eh_frame:000000000000A175                 db    6
.eh_frame:000000000000A176                 db    0
.eh_frame:000000000000A177                 db    0
.eh_frame:000000000000A178                 db 0C8h
.eh_frame:000000000000A179                 db 0AFh
.eh_frame:000000000000A17A                 db 0FFh
.eh_frame:000000000000A17B                 db 0FFh
.eh_frame:000000000000A17C                 db  8Eh
.eh_frame:000000000000A17D                 db    0
.eh_frame:000000000000A17E                 db    0
.eh_frame:000000000000A17F                 db    0
.eh_frame:000000000000A180                 db    0
.eh_frame:000000000000A181                 db  44h ; D
.eh_frame:000000000000A182                 db  0Eh
.eh_frame:000000000000A183                 db  50h ; P
.eh_frame:000000000000A184                 db    2
.eh_frame:000000000000A185                 db  7Fh ; 
.eh_frame:000000000000A186                 db  0Ah
.eh_frame:000000000000A187                 db  0Eh
.eh_frame:000000000000A188                 db    8
.eh_frame:000000000000A189                 db  41h ; A
.eh_frame:000000000000A18A                 db  0Bh
.eh_frame:000000000000A18B                 db    0
.eh_frame:000000000000A18C                 db  18h
.eh_frame:000000000000A18D                 db    0
.eh_frame:000000000000A18E                 db    0
.eh_frame:000000000000A18F                 db    0
.eh_frame:000000000000A190                 db 0E8h
.eh_frame:000000000000A191                 db    6
.eh_frame:000000000000A192                 db    0
.eh_frame:000000000000A193                 db    0
.eh_frame:000000000000A194                 db  3Ch ; <
.eh_frame:000000000000A195                 db 0B0h
.eh_frame:000000000000A196                 db 0FFh
.eh_frame:000000000000A197                 db 0FFh
.eh_frame:000000000000A198                 db  8Ah
.eh_frame:000000000000A199                 db    0
.eh_frame:000000000000A19A                 db    0
.eh_frame:000000000000A19B                 db    0
.eh_frame:000000000000A19C                 db    0
.eh_frame:000000000000A19D                 db  44h ; D
.eh_frame:000000000000A19E                 db  0Eh
.eh_frame:000000000000A19F                 db  50h ; P
.eh_frame:000000000000A1A0                 db    2
.eh_frame:000000000000A1A1                 db  7Bh ; {
.eh_frame:000000000000A1A2                 db  0Ah
.eh_frame:000000000000A1A3                 db  0Eh
.eh_frame:000000000000A1A4                 db    8
.eh_frame:000000000000A1A5                 db  41h ; A
.eh_frame:000000000000A1A6                 db  0Bh
.eh_frame:000000000000A1A7                 db    0
.eh_frame:000000000000A1A8                 db  10h
.eh_frame:000000000000A1A9                 db    0
.eh_frame:000000000000A1AA                 db    0
.eh_frame:000000000000A1AB                 db    0
.eh_frame:000000000000A1AC                 db    4
.eh_frame:000000000000A1AD                 db    7
.eh_frame:000000000000A1AE                 db    0
.eh_frame:000000000000A1AF                 db    0
.eh_frame:000000000000A1B0                 db 0B0h
.eh_frame:000000000000A1B1                 db 0B0h
.eh_frame:000000000000A1B2                 db 0FFh
.eh_frame:000000000000A1B3                 db 0FFh
.eh_frame:000000000000A1B4                 db  0Ch
.eh_frame:000000000000A1B5                 db    0
.eh_frame:000000000000A1B6                 db    0
.eh_frame:000000000000A1B7                 db    0
.eh_frame:000000000000A1B8                 db    0
.eh_frame:000000000000A1B9                 db    0
.eh_frame:000000000000A1BA                 db    0
.eh_frame:000000000000A1BB                 db    0
.eh_frame:000000000000A1BC                 db  10h
.eh_frame:000000000000A1BD                 db    0
.eh_frame:000000000000A1BE                 db    0
.eh_frame:000000000000A1BF                 db    0
.eh_frame:000000000000A1C0                 db  18h
.eh_frame:000000000000A1C1                 db    7
.eh_frame:000000000000A1C2                 db    0
.eh_frame:000000000000A1C3                 db    0
.eh_frame:000000000000A1C4                 db 0ACh
.eh_frame:000000000000A1C5                 db 0B0h
.eh_frame:000000000000A1C6                 db 0FFh
.eh_frame:000000000000A1C7                 db 0FFh
.eh_frame:000000000000A1C8                 db  0Fh
.eh_frame:000000000000A1C9                 db    0
.eh_frame:000000000000A1CA                 db    0
.eh_frame:000000000000A1CB                 db    0
.eh_frame:000000000000A1CC                 db    0
.eh_frame:000000000000A1CD                 db    0
.eh_frame:000000000000A1CE                 db    0
.eh_frame:000000000000A1CF                 db    0
.eh_frame:000000000000A1D0                 db  18h
.eh_frame:000000000000A1D1                 db    0
.eh_frame:000000000000A1D2                 db    0
.eh_frame:000000000000A1D3                 db    0
.eh_frame:000000000000A1D4                 db  2Ch ; ,
.eh_frame:000000000000A1D5                 db    7
.eh_frame:000000000000A1D6                 db    0
.eh_frame:000000000000A1D7                 db    0
.eh_frame:000000000000A1D8                 db 0A8h
.eh_frame:000000000000A1D9                 db 0B0h
.eh_frame:000000000000A1DA                 db 0FFh
.eh_frame:000000000000A1DB                 db 0FFh
.eh_frame:000000000000A1DC                 db  98h
.eh_frame:000000000000A1DD                 db    0
.eh_frame:000000000000A1DE                 db    0
.eh_frame:000000000000A1DF                 db    0
.eh_frame:000000000000A1E0                 db    0
.eh_frame:000000000000A1E1                 db  44h ; D
.eh_frame:000000000000A1E2                 db  0Eh
.eh_frame:000000000000A1E3                 db  50h ; P
.eh_frame:000000000000A1E4                 db    2
.eh_frame:000000000000A1E5                 db  8Eh
.eh_frame:000000000000A1E6                 db  0Ah
.eh_frame:000000000000A1E7                 db  0Eh
.eh_frame:000000000000A1E8                 db    8
.eh_frame:000000000000A1E9                 db  41h ; A
.eh_frame:000000000000A1EA                 db  0Bh
.eh_frame:000000000000A1EB                 db    0
.eh_frame:000000000000A1EC                 db  10h
.eh_frame:000000000000A1ED                 db    0
.eh_frame:000000000000A1EE                 db    0
.eh_frame:000000000000A1EF                 db    0
.eh_frame:000000000000A1F0                 db  48h ; H
.eh_frame:000000000000A1F1                 db    7
.eh_frame:000000000000A1F2                 db    0
.eh_frame:000000000000A1F3                 db    0
.eh_frame:000000000000A1F4                 db  2Ch ; ,
.eh_frame:000000000000A1F5                 db 0B1h
.eh_frame:000000000000A1F6                 db 0FFh
.eh_frame:000000000000A1F7                 db 0FFh
.eh_frame:000000000000A1F8                 db  10h
.eh_frame:000000000000A1F9                 db    0
.eh_frame:000000000000A1FA                 db    0
.eh_frame:000000000000A1FB                 db    0
.eh_frame:000000000000A1FC                 db    0
.eh_frame:000000000000A1FD                 db    0
.eh_frame:000000000000A1FE                 db    0
.eh_frame:000000000000A1FF                 db    0
.eh_frame:000000000000A200                 db  10h
.eh_frame:000000000000A201                 db    0
.eh_frame:000000000000A202                 db    0
.eh_frame:000000000000A203                 db    0
.eh_frame:000000000000A204                 db  5Ch ; \
.eh_frame:000000000000A205                 db    7
.eh_frame:000000000000A206                 db    0
.eh_frame:000000000000A207                 db    0
.eh_frame:000000000000A208                 db  28h ; (
.eh_frame:000000000000A209                 db 0B1h
.eh_frame:000000000000A20A                 db 0FFh
.eh_frame:000000000000A20B                 db 0FFh
.eh_frame:000000000000A20C                 db  11h
.eh_frame:000000000000A20D                 db    0
.eh_frame:000000000000A20E                 db    0
.eh_frame:000000000000A20F                 db    0
.eh_frame:000000000000A210                 db    0
.eh_frame:000000000000A211                 db    0
.eh_frame:000000000000A212                 db    0
.eh_frame:000000000000A213                 db    0
.eh_frame:000000000000A214                 db  10h
.eh_frame:000000000000A215                 db    0
.eh_frame:000000000000A216                 db    0
.eh_frame:000000000000A217                 db    0
.eh_frame:000000000000A218                 db  70h ; p
.eh_frame:000000000000A219                 db    7
.eh_frame:000000000000A21A                 db    0
.eh_frame:000000000000A21B                 db    0
.eh_frame:000000000000A21C                 db  34h ; 4
.eh_frame:000000000000A21D                 db 0B1h
.eh_frame:000000000000A21E                 db 0FFh
.eh_frame:000000000000A21F                 db 0FFh
.eh_frame:000000000000A220                 db  0Ah
.eh_frame:000000000000A221                 db    0
.eh_frame:000000000000A222                 db    0
.eh_frame:000000000000A223                 db    0
.eh_frame:000000000000A224                 db    0
.eh_frame:000000000000A225                 db    0
.eh_frame:000000000000A226                 db    0
.eh_frame:000000000000A227                 db    0
.eh_frame:000000000000A228                 db  18h
.eh_frame:000000000000A229                 db    0
.eh_frame:000000000000A22A                 db    0
.eh_frame:000000000000A22B                 db    0
.eh_frame:000000000000A22C                 db  84h
.eh_frame:000000000000A22D                 db    7
.eh_frame:000000000000A22E                 db    0
.eh_frame:000000000000A22F                 db    0
.eh_frame:000000000000A230                 db  30h ; 0
.eh_frame:000000000000A231                 db 0B1h
.eh_frame:000000000000A232                 db 0FFh
.eh_frame:000000000000A233                 db 0FFh
.eh_frame:000000000000A234                 db  8Eh
.eh_frame:000000000000A235                 db    0
.eh_frame:000000000000A236                 db    0
.eh_frame:000000000000A237                 db    0
.eh_frame:000000000000A238                 db    0
.eh_frame:000000000000A239                 db  44h ; D
.eh_frame:000000000000A23A                 db  0Eh
.eh_frame:000000000000A23B                 db  50h ; P
.eh_frame:000000000000A23C                 db    2
.eh_frame:000000000000A23D                 db  7Fh ; 
.eh_frame:000000000000A23E                 db  0Ah
.eh_frame:000000000000A23F                 db  0Eh
.eh_frame:000000000000A240                 db    8
.eh_frame:000000000000A241                 db  41h ; A
.eh_frame:000000000000A242                 db  0Bh
.eh_frame:000000000000A243                 db    0
.eh_frame:000000000000A244                 db  18h
.eh_frame:000000000000A245                 db    0
.eh_frame:000000000000A246                 db    0
.eh_frame:000000000000A247                 db    0
.eh_frame:000000000000A248                 db 0A0h
.eh_frame:000000000000A249                 db    7
.eh_frame:000000000000A24A                 db    0
.eh_frame:000000000000A24B                 db    0
.eh_frame:000000000000A24C                 db 0A4h
.eh_frame:000000000000A24D                 db 0B1h
.eh_frame:000000000000A24E                 db 0FFh
.eh_frame:000000000000A24F                 db 0FFh
.eh_frame:000000000000A250                 db  91h
.eh_frame:000000000000A251                 db    0
.eh_frame:000000000000A252                 db    0
.eh_frame:000000000000A253                 db    0
.eh_frame:000000000000A254                 db    0
.eh_frame:000000000000A255                 db  44h ; D
.eh_frame:000000000000A256                 db  0Eh
.eh_frame:000000000000A257                 db  50h ; P
.eh_frame:000000000000A258                 db    2
.eh_frame:000000000000A259                 db  82h
.eh_frame:000000000000A25A                 db  0Ah
.eh_frame:000000000000A25B                 db  0Eh
.eh_frame:000000000000A25C                 db    8
.eh_frame:000000000000A25D                 db  41h ; A
.eh_frame:000000000000A25E                 db  0Bh
.eh_frame:000000000000A25F                 db    0
.eh_frame:000000000000A260                 db  10h
.eh_frame:000000000000A261                 db    0
.eh_frame:000000000000A262                 db    0
.eh_frame:000000000000A263                 db    0
.eh_frame:000000000000A264                 db 0BCh
.eh_frame:000000000000A265                 db    7
.eh_frame:000000000000A266                 db    0
.eh_frame:000000000000A267                 db    0
.eh_frame:000000000000A268                 db  28h ; (
.eh_frame:000000000000A269                 db 0B2h
.eh_frame:000000000000A26A                 db 0FFh
.eh_frame:000000000000A26B                 db 0FFh
.eh_frame:000000000000A26C                 db  0Ch
.eh_frame:000000000000A26D                 db    0
.eh_frame:000000000000A26E                 db    0
.eh_frame:000000000000A26F                 db    0
.eh_frame:000000000000A270                 db    0
.eh_frame:000000000000A271                 db    0
.eh_frame:000000000000A272                 db    0
.eh_frame:000000000000A273                 db    0
.eh_frame:000000000000A274                 db  10h
.eh_frame:000000000000A275                 db    0
.eh_frame:000000000000A276                 db    0
.eh_frame:000000000000A277                 db    0
.eh_frame:000000000000A278                 db 0D0h
.eh_frame:000000000000A279                 db    7
.eh_frame:000000000000A27A                 db    0
.eh_frame:000000000000A27B                 db    0
.eh_frame:000000000000A27C                 db  24h ; $
.eh_frame:000000000000A27D                 db 0B2h
.eh_frame:000000000000A27E                 db 0FFh
.eh_frame:000000000000A27F                 db 0FFh
.eh_frame:000000000000A280                 db  17h
.eh_frame:000000000000A281                 db    0
.eh_frame:000000000000A282                 db    0
.eh_frame:000000000000A283                 db    0
.eh_frame:000000000000A284                 db    0
.eh_frame:000000000000A285                 db    0
.eh_frame:000000000000A286                 db    0
.eh_frame:000000000000A287                 db    0
.eh_frame:000000000000A288                 db  10h
.eh_frame:000000000000A289                 db    0
.eh_frame:000000000000A28A                 db    0
.eh_frame:000000000000A28B                 db    0
.eh_frame:000000000000A28C                 db 0E4h
.eh_frame:000000000000A28D                 db    7
.eh_frame:000000000000A28E                 db    0
.eh_frame:000000000000A28F                 db    0
.eh_frame:000000000000A290                 db  30h ; 0
.eh_frame:000000000000A291                 db 0B2h
.eh_frame:000000000000A292                 db 0FFh
.eh_frame:000000000000A293                 db 0FFh
.eh_frame:000000000000A294                 db  13h
.eh_frame:000000000000A295                 db    0
.eh_frame:000000000000A296                 db    0
.eh_frame:000000000000A297                 db    0
.eh_frame:000000000000A298                 db    0
.eh_frame:000000000000A299                 db    0
.eh_frame:000000000000A29A                 db    0
.eh_frame:000000000000A29B                 db    0
.eh_frame:000000000000A29C                 db  10h
.eh_frame:000000000000A29D                 db    0
.eh_frame:000000000000A29E                 db    0
.eh_frame:000000000000A29F                 db    0
.eh_frame:000000000000A2A0                 db 0F8h
.eh_frame:000000000000A2A1                 db    7
.eh_frame:000000000000A2A2                 db    0
.eh_frame:000000000000A2A3                 db    0
.eh_frame:000000000000A2A4                 db  3Ch ; <
.eh_frame:000000000000A2A5                 db 0B2h
.eh_frame:000000000000A2A6                 db 0FFh
.eh_frame:000000000000A2A7                 db 0FFh
.eh_frame:000000000000A2A8                 db  0Ch
.eh_frame:000000000000A2A9                 db    0
.eh_frame:000000000000A2AA                 db    0
.eh_frame:000000000000A2AB                 db    0
.eh_frame:000000000000A2AC                 db    0
.eh_frame:000000000000A2AD                 db    0
.eh_frame:000000000000A2AE                 db    0
.eh_frame:000000000000A2AF                 db    0
.eh_frame:000000000000A2B0                 db  10h
.eh_frame:000000000000A2B1                 db    0
.eh_frame:000000000000A2B2                 db    0
.eh_frame:000000000000A2B3                 db    0
.eh_frame:000000000000A2B4                 db  0Ch
.eh_frame:000000000000A2B5                 db    8
.eh_frame:000000000000A2B6                 db    0
.eh_frame:000000000000A2B7                 db    0
.eh_frame:000000000000A2B8                 db  38h ; 8
.eh_frame:000000000000A2B9                 db 0B2h
.eh_frame:000000000000A2BA                 db 0FFh
.eh_frame:000000000000A2BB                 db 0FFh
.eh_frame:000000000000A2BC                 db  14h
.eh_frame:000000000000A2BD                 db    0
.eh_frame:000000000000A2BE                 db    0
.eh_frame:000000000000A2BF                 db    0
.eh_frame:000000000000A2C0                 db    0
.eh_frame:000000000000A2C1                 db    0
.eh_frame:000000000000A2C2                 db    0
.eh_frame:000000000000A2C3                 db    0
.eh_frame:000000000000A2C4                 db  10h
.eh_frame:000000000000A2C5                 db    0
.eh_frame:000000000000A2C6                 db    0
.eh_frame:000000000000A2C7                 db    0
.eh_frame:000000000000A2C8                 db  20h
.eh_frame:000000000000A2C9                 db    8
.eh_frame:000000000000A2CA                 db    0
.eh_frame:000000000000A2CB                 db    0
.eh_frame:000000000000A2CC                 db  44h ; D
.eh_frame:000000000000A2CD                 db 0B2h
.eh_frame:000000000000A2CE                 db 0FFh
.eh_frame:000000000000A2CF                 db 0FFh
.eh_frame:000000000000A2D0                 db  13h
.eh_frame:000000000000A2D1                 db    0
.eh_frame:000000000000A2D2                 db    0
.eh_frame:000000000000A2D3                 db    0
.eh_frame:000000000000A2D4                 db    0
.eh_frame:000000000000A2D5                 db    0
.eh_frame:000000000000A2D6                 db    0
.eh_frame:000000000000A2D7                 db    0
.eh_frame:000000000000A2D8                 db  14h
.eh_frame:000000000000A2D9                 db    0
.eh_frame:000000000000A2DA                 db    0
.eh_frame:000000000000A2DB                 db    0
.eh_frame:000000000000A2DC                 db  34h ; 4
.eh_frame:000000000000A2DD                 db    8
.eh_frame:000000000000A2DE                 db    0
.eh_frame:000000000000A2DF                 db    0
.eh_frame:000000000000A2E0                 db  50h ; P
.eh_frame:000000000000A2E1                 db 0B2h
.eh_frame:000000000000A2E2                 db 0FFh
.eh_frame:000000000000A2E3                 db 0FFh
.eh_frame:000000000000A2E4                 db  18h
.eh_frame:000000000000A2E5                 db    0
.eh_frame:000000000000A2E6                 db    0
.eh_frame:000000000000A2E7                 db    0
.eh_frame:000000000000A2E8                 db    0
.eh_frame:000000000000A2E9                 db    0
.eh_frame:000000000000A2EA                 db    0
.eh_frame:000000000000A2EB                 db    0
.eh_frame:000000000000A2EC                 db    0
.eh_frame:000000000000A2ED                 db    0
.eh_frame:000000000000A2EE                 db    0
.eh_frame:000000000000A2EF                 db    0
.eh_frame:000000000000A2F0                 db  10h
.eh_frame:000000000000A2F1                 db    1
.eh_frame:000000000000A2F2                 db    0
.eh_frame:000000000000A2F3                 db    0
.eh_frame:000000000000A2F4                 db  4Ch ; L
.eh_frame:000000000000A2F5                 db    8
.eh_frame:000000000000A2F6                 db    0
.eh_frame:000000000000A2F7                 db    0
.eh_frame:000000000000A2F8                 db  58h ; X
.eh_frame:000000000000A2F9                 db 0B2h
.eh_frame:000000000000A2FA                 db 0FFh
.eh_frame:000000000000A2FB                 db 0FFh
.eh_frame:000000000000A2FC                 db  17h
.eh_frame:000000000000A2FD                 db    4
.eh_frame:000000000000A2FE                 db    0
.eh_frame:000000000000A2FF                 db    0
.eh_frame:000000000000A300                 db    0
.eh_frame:000000000000A301                 db  42h ; B
.eh_frame:000000000000A302                 db  0Eh
.eh_frame:000000000000A303                 db  10h
.eh_frame:000000000000A304                 db  8Fh
.eh_frame:000000000000A305                 db    2
.eh_frame:000000000000A306                 db  42h ; B
.eh_frame:000000000000A307                 db  0Eh
.eh_frame:000000000000A308                 db  18h
.eh_frame:000000000000A309                 db  8Eh
.eh_frame:000000000000A30A                 db    3
.eh_frame:000000000000A30B                 db  42h ; B
.eh_frame:000000000000A30C                 db  0Eh
.eh_frame:000000000000A30D                 db  20h
.eh_frame:000000000000A30E                 db  8Dh
.eh_frame:000000000000A30F                 db    4
.eh_frame:000000000000A310                 db  42h ; B
.eh_frame:000000000000A311                 db  0Eh
.eh_frame:000000000000A312                 db  28h ; (
.eh_frame:000000000000A313                 db  8Ch
.eh_frame:000000000000A314                 db    5
.eh_frame:000000000000A315                 db  44h ; D
.eh_frame:000000000000A316                 db  0Eh
.eh_frame:000000000000A317                 db  30h ; 0
.eh_frame:000000000000A318                 db  86h
.eh_frame:000000000000A319                 db    6
.eh_frame:000000000000A31A                 db  41h ; A
.eh_frame:000000000000A31B                 db  0Eh
.eh_frame:000000000000A31C                 db  38h ; 8
.eh_frame:000000000000A31D                 db  83h
.eh_frame:000000000000A31E                 db    7
.eh_frame:000000000000A31F                 db  4Ah ; J
.eh_frame:000000000000A320                 db  0Eh
.eh_frame:000000000000A321                 db  60h ; `
.eh_frame:000000000000A322                 db    2
.eh_frame:000000000000A323                 db 0DDh
.eh_frame:000000000000A324                 db  0Eh
.eh_frame:000000000000A325                 db  68h ; h
.eh_frame:000000000000A326                 db  57h ; W
.eh_frame:000000000000A327                 db  0Eh
.eh_frame:000000000000A328                 db  70h ; p
.eh_frame:000000000000A329                 db  42h ; B
.eh_frame:000000000000A32A                 db  0Eh
.eh_frame:000000000000A32B                 db  78h ; x
.eh_frame:000000000000A32C                 db  42h ; B
.eh_frame:000000000000A32D                 db  0Eh
.eh_frame:000000000000A32E                 db  80h
.eh_frame:000000000000A32F                 db    1
.eh_frame:000000000000A330                 db  42h ; B
.eh_frame:000000000000A331                 db  0Eh
.eh_frame:000000000000A332                 db  88h
.eh_frame:000000000000A333                 db    1
.eh_frame:000000000000A334                 db  42h ; B
.eh_frame:000000000000A335                 db  0Eh
.eh_frame:000000000000A336                 db  90h
.eh_frame:000000000000A337                 db    1
.eh_frame:000000000000A338                 db  53h ; S
.eh_frame:000000000000A339                 db  0Eh
.eh_frame:000000000000A33A                 db  60h ; `
.eh_frame:000000000000A33B                 db  44h ; D
.eh_frame:000000000000A33C                 db  0Ah
.eh_frame:000000000000A33D                 db  0Eh
.eh_frame:000000000000A33E                 db  38h ; 8
.eh_frame:000000000000A33F                 db  41h ; A
.eh_frame:000000000000A340                 db  0Eh
.eh_frame:000000000000A341                 db  30h ; 0
.eh_frame:000000000000A342                 db  41h ; A
.eh_frame:000000000000A343                 db  0Eh
.eh_frame:000000000000A344                 db  28h ; (
.eh_frame:000000000000A345                 db  42h ; B
.eh_frame:000000000000A346                 db  0Eh
.eh_frame:000000000000A347                 db  20h
.eh_frame:000000000000A348                 db  42h ; B
.eh_frame:000000000000A349                 db  0Eh
.eh_frame:000000000000A34A                 db  18h
.eh_frame:000000000000A34B                 db  42h ; B
.eh_frame:000000000000A34C                 db  0Eh
.eh_frame:000000000000A34D                 db  10h
.eh_frame:000000000000A34E                 db  42h ; B
.eh_frame:000000000000A34F                 db  0Eh
.eh_frame:000000000000A350                 db    8
.eh_frame:000000000000A351                 db  44h ; D
.eh_frame:000000000000A352                 db  0Bh
.eh_frame:000000000000A353                 db    2
.eh_frame:000000000000A354                 db  78h ; x
.eh_frame:000000000000A355                 db  0Ah
.eh_frame:000000000000A356                 db  0Eh
.eh_frame:000000000000A357                 db  68h ; h
.eh_frame:000000000000A358                 db  48h ; H
.eh_frame:000000000000A359                 db  0Bh
.eh_frame:000000000000A35A                 db  5Ah ; Z
.eh_frame:000000000000A35B                 db  0Ah
.eh_frame:000000000000A35C                 db  0Eh
.eh_frame:000000000000A35D                 db  38h ; 8
.eh_frame:000000000000A35E                 db  47h ; G
.eh_frame:000000000000A35F                 db  0Eh
.eh_frame:000000000000A360                 db  30h ; 0
.eh_frame:000000000000A361                 db  41h ; A
.eh_frame:000000000000A362                 db  0Eh
.eh_frame:000000000000A363                 db  28h ; (
.eh_frame:000000000000A364                 db  42h ; B
.eh_frame:000000000000A365                 db  0Eh
.eh_frame:000000000000A366                 db  20h
.eh_frame:000000000000A367                 db  42h ; B
.eh_frame:000000000000A368                 db  0Eh
.eh_frame:000000000000A369                 db  18h
.eh_frame:000000000000A36A                 db  42h ; B
.eh_frame:000000000000A36B                 db  0Eh
.eh_frame:000000000000A36C                 db  10h
.eh_frame:000000000000A36D                 db  42h ; B
.eh_frame:000000000000A36E                 db  0Eh
.eh_frame:000000000000A36F                 db    8
.eh_frame:000000000000A370                 db  56h ; V
.eh_frame:000000000000A371                 db  0Bh
.eh_frame:000000000000A372                 db  5Eh ; ^
.eh_frame:000000000000A373                 db  0Ah
.eh_frame:000000000000A374                 db  0Eh
.eh_frame:000000000000A375                 db  38h ; 8
.eh_frame:000000000000A376                 db  52h ; R
.eh_frame:000000000000A377                 db  0Eh
.eh_frame:000000000000A378                 db  30h ; 0
.eh_frame:000000000000A379                 db  41h ; A
.eh_frame:000000000000A37A                 db  0Eh
.eh_frame:000000000000A37B                 db  28h ; (
.eh_frame:000000000000A37C                 db  42h ; B
.eh_frame:000000000000A37D                 db  0Eh
.eh_frame:000000000000A37E                 db  20h
.eh_frame:000000000000A37F                 db  42h ; B
.eh_frame:000000000000A380                 db  0Eh
.eh_frame:000000000000A381                 db  18h
.eh_frame:000000000000A382                 db  42h ; B
.eh_frame:000000000000A383                 db  0Eh
.eh_frame:000000000000A384                 db  10h
.eh_frame:000000000000A385                 db  42h ; B
.eh_frame:000000000000A386                 db  0Eh
.eh_frame:000000000000A387                 db    8
.eh_frame:000000000000A388                 db  4Fh ; O
.eh_frame:000000000000A389                 db  0Bh
.eh_frame:000000000000A38A                 db  62h ; b
.eh_frame:000000000000A38B                 db  0Ah
.eh_frame:000000000000A38C                 db  0Eh
.eh_frame:000000000000A38D                 db  38h ; 8
.eh_frame:000000000000A38E                 db  50h ; P
.eh_frame:000000000000A38F                 db  0Eh
.eh_frame:000000000000A390                 db  30h ; 0
.eh_frame:000000000000A391                 db  41h ; A
.eh_frame:000000000000A392                 db  0Eh
.eh_frame:000000000000A393                 db  28h ; (
.eh_frame:000000000000A394                 db  42h ; B
.eh_frame:000000000000A395                 db  0Eh
.eh_frame:000000000000A396                 db  20h
.eh_frame:000000000000A397                 db  42h ; B
.eh_frame:000000000000A398                 db  0Eh
.eh_frame:000000000000A399                 db  18h
.eh_frame:000000000000A39A                 db  42h ; B
.eh_frame:000000000000A39B                 db  0Eh
.eh_frame:000000000000A39C                 db  10h
.eh_frame:000000000000A39D                 db  42h ; B
.eh_frame:000000000000A39E                 db  0Eh
.eh_frame:000000000000A39F                 db    8
.eh_frame:000000000000A3A0                 db  55h ; U
.eh_frame:000000000000A3A1                 db  0Bh
.eh_frame:000000000000A3A2                 db  66h ; f
.eh_frame:000000000000A3A3                 db  0Eh
.eh_frame:000000000000A3A4                 db  68h ; h
.eh_frame:000000000000A3A5                 db  42h ; B
.eh_frame:000000000000A3A6                 db  0Eh
.eh_frame:000000000000A3A7                 db  70h ; p
.eh_frame:000000000000A3A8                 db  5Ch ; \
.eh_frame:000000000000A3A9                 db  0Eh
.eh_frame:000000000000A3AA                 db  68h ; h
.eh_frame:000000000000A3AB                 db  41h ; A
.eh_frame:000000000000A3AC                 db  0Eh
.eh_frame:000000000000A3AD                 db  60h ; `
.eh_frame:000000000000A3AE                 db  44h ; D
.eh_frame:000000000000A3AF                 db  0Ah
.eh_frame:000000000000A3B0                 db  0Eh
.eh_frame:000000000000A3B1                 db  38h ; 8
.eh_frame:000000000000A3B2                 db  41h ; A
.eh_frame:000000000000A3B3                 db  0Eh
.eh_frame:000000000000A3B4                 db  30h ; 0
.eh_frame:000000000000A3B5                 db  41h ; A
.eh_frame:000000000000A3B6                 db  0Eh
.eh_frame:000000000000A3B7                 db  28h ; (
.eh_frame:000000000000A3B8                 db  42h ; B
.eh_frame:000000000000A3B9                 db  0Eh
.eh_frame:000000000000A3BA                 db  20h
.eh_frame:000000000000A3BB                 db  42h ; B
.eh_frame:000000000000A3BC                 db  0Eh
.eh_frame:000000000000A3BD                 db  18h
.eh_frame:000000000000A3BE                 db  42h ; B
.eh_frame:000000000000A3BF                 db  0Eh
.eh_frame:000000000000A3C0                 db  10h
.eh_frame:000000000000A3C1                 db  42h ; B
.eh_frame:000000000000A3C2                 db  0Eh
.eh_frame:000000000000A3C3                 db    8
.eh_frame:000000000000A3C4                 db  45h ; E
.eh_frame:000000000000A3C5                 db  0Bh
.eh_frame:000000000000A3C6                 db  68h ; h
.eh_frame:000000000000A3C7                 db  0Ah
.eh_frame:000000000000A3C8                 db  0Eh
.eh_frame:000000000000A3C9                 db  68h ; h
.eh_frame:000000000000A3CA                 db  48h ; H
.eh_frame:000000000000A3CB                 db  0Bh
.eh_frame:000000000000A3CC                 db  72h ; r
.eh_frame:000000000000A3CD                 db  0Eh
.eh_frame:000000000000A3CE                 db  68h ; h
.eh_frame:000000000000A3CF                 db  45h ; E
.eh_frame:000000000000A3D0                 db  0Eh
.eh_frame:000000000000A3D1                 db  70h ; p
.eh_frame:000000000000A3D2                 db  42h ; B
.eh_frame:000000000000A3D3                 db  0Eh
.eh_frame:000000000000A3D4                 db  78h ; x
.eh_frame:000000000000A3D5                 db  42h ; B
.eh_frame:000000000000A3D6                 db  0Eh
.eh_frame:000000000000A3D7                 db  80h
.eh_frame:000000000000A3D8                 db    1
.eh_frame:000000000000A3D9                 db  5Eh ; ^
.eh_frame:000000000000A3DA                 db  0Eh
.eh_frame:000000000000A3DB                 db  60h ; `
.eh_frame:000000000000A3DC                 db  44h ; D
.eh_frame:000000000000A3DD                 db  0Ah
.eh_frame:000000000000A3DE                 db  0Eh
.eh_frame:000000000000A3DF                 db  38h ; 8
.eh_frame:000000000000A3E0                 db  41h ; A
.eh_frame:000000000000A3E1                 db  0Eh
.eh_frame:000000000000A3E2                 db  30h ; 0
.eh_frame:000000000000A3E3                 db  41h ; A
.eh_frame:000000000000A3E4                 db  0Eh
.eh_frame:000000000000A3E5                 db  28h ; (
.eh_frame:000000000000A3E6                 db  42h ; B
.eh_frame:000000000000A3E7                 db  0Eh
.eh_frame:000000000000A3E8                 db  20h
.eh_frame:000000000000A3E9                 db  42h ; B
.eh_frame:000000000000A3EA                 db  0Eh
.eh_frame:000000000000A3EB                 db  18h
.eh_frame:000000000000A3EC                 db  42h ; B
.eh_frame:000000000000A3ED                 db  0Eh
.eh_frame:000000000000A3EE                 db  10h
.eh_frame:000000000000A3EF                 db  42h ; B
.eh_frame:000000000000A3F0                 db  0Eh
.eh_frame:000000000000A3F1                 db    8
.eh_frame:000000000000A3F2                 db  41h ; A
.eh_frame:000000000000A3F3                 db  0Bh
.eh_frame:000000000000A3F4                 db  79h ; y
.eh_frame:000000000000A3F5                 db  0Ah
.eh_frame:000000000000A3F6                 db  0Eh
.eh_frame:000000000000A3F7                 db  68h ; h
.eh_frame:000000000000A3F8                 db  42h ; B
.eh_frame:000000000000A3F9                 db  0Eh
.eh_frame:000000000000A3FA                 db  70h ; p
.eh_frame:000000000000A3FB                 db  42h ; B
.eh_frame:000000000000A3FC                 db  0Eh
.eh_frame:000000000000A3FD                 db  78h ; x
.eh_frame:000000000000A3FE                 db  42h ; B
.eh_frame:000000000000A3FF                 db  0Eh
.eh_frame:000000000000A400                 db  80h
.eh_frame:000000000000A401                 db    1
.eh_frame:000000000000A402                 db  51h ; Q
.eh_frame:000000000000A403                 db  0Bh
.eh_frame:000000000000A404                 db  10h
.eh_frame:000000000000A405                 db    0
.eh_frame:000000000000A406                 db    0
.eh_frame:000000000000A407                 db    0
.eh_frame:000000000000A408                 db  60h ; `
.eh_frame:000000000000A409                 db    9
.eh_frame:000000000000A40A                 db    0
.eh_frame:000000000000A40B                 db    0
.eh_frame:000000000000A40C                 db  64h ; d
.eh_frame:000000000000A40D                 db 0B5h
.eh_frame:000000000000A40E                 db 0FFh
.eh_frame:000000000000A40F                 db 0FFh
.eh_frame:000000000000A410                 db  20h
.eh_frame:000000000000A411                 db    0
.eh_frame:000000000000A412                 db    0
.eh_frame:000000000000A413                 db    0
.eh_frame:000000000000A414                 db    0
.eh_frame:000000000000A415                 db    0
.eh_frame:000000000000A416                 db    0
.eh_frame:000000000000A417                 db    0
.eh_frame:000000000000A418                 db  18h
.eh_frame:000000000000A419                 db    0
.eh_frame:000000000000A41A                 db    0
.eh_frame:000000000000A41B                 db    0
.eh_frame:000000000000A41C                 db  74h ; t
.eh_frame:000000000000A41D                 db    9
.eh_frame:000000000000A41E                 db    0
.eh_frame:000000000000A41F                 db    0
.eh_frame:000000000000A420                 db  70h ; p
.eh_frame:000000000000A421                 db 0B5h
.eh_frame:000000000000A422                 db 0FFh
.eh_frame:000000000000A423                 db 0FFh
.eh_frame:000000000000A424                 db  78h ; x
.eh_frame:000000000000A425                 db    0
.eh_frame:000000000000A426                 db    0
.eh_frame:000000000000A427                 db    0
.eh_frame:000000000000A428                 db    0
.eh_frame:000000000000A429                 db  44h ; D
.eh_frame:000000000000A42A                 db  0Eh
.eh_frame:000000000000A42B                 db  70h ; p
.eh_frame:000000000000A42C                 db    2
.eh_frame:000000000000A42D                 db  60h ; `
.eh_frame:000000000000A42E                 db  0Ah
.eh_frame:000000000000A42F                 db  0Eh
.eh_frame:000000000000A430                 db    8
.eh_frame:000000000000A431                 db  41h ; A
.eh_frame:000000000000A432                 db  0Bh
.eh_frame:000000000000A433                 db    0
.eh_frame:000000000000A434                 db  28h ; (
.eh_frame:000000000000A435                 db    0
.eh_frame:000000000000A436                 db    0
.eh_frame:000000000000A437                 db    0
.eh_frame:000000000000A438                 db  90h
.eh_frame:000000000000A439                 db    9
.eh_frame:000000000000A43A                 db    0
.eh_frame:000000000000A43B                 db    0
.eh_frame:000000000000A43C                 db 0D4h
.eh_frame:000000000000A43D                 db 0B5h
.eh_frame:000000000000A43E                 db 0FFh
.eh_frame:000000000000A43F                 db 0FFh
.eh_frame:000000000000A440                 db 0D5h
.eh_frame:000000000000A441                 db    0
.eh_frame:000000000000A442                 db    0
.eh_frame:000000000000A443                 db    0
.eh_frame:000000000000A444                 db    0
.eh_frame:000000000000A445                 db  41h ; A
.eh_frame:000000000000A446                 db  0Eh
.eh_frame:000000000000A447                 db  10h
.eh_frame:000000000000A448                 db  86h
.eh_frame:000000000000A449                 db    2
.eh_frame:000000000000A44A                 db  41h ; A
.eh_frame:000000000000A44B                 db  0Eh
.eh_frame:000000000000A44C                 db  18h
.eh_frame:000000000000A44D                 db  83h
.eh_frame:000000000000A44E                 db    3
.eh_frame:000000000000A44F                 db  50h ; P
.eh_frame:000000000000A450                 db  0Eh
.eh_frame:000000000000A451                 db 0D0h
.eh_frame:000000000000A452                 db    1
.eh_frame:000000000000A453                 db    2
.eh_frame:000000000000A454                 db 0ABh
.eh_frame:000000000000A455                 db  0Ah
.eh_frame:000000000000A456                 db  0Eh
.eh_frame:000000000000A457                 db  18h
.eh_frame:000000000000A458                 db  41h ; A
.eh_frame:000000000000A459                 db  0Eh
.eh_frame:000000000000A45A                 db  10h
.eh_frame:000000000000A45B                 db  41h ; A
.eh_frame:000000000000A45C                 db  0Eh
.eh_frame:000000000000A45D                 db    8
.eh_frame:000000000000A45E                 db  41h ; A
.eh_frame:000000000000A45F                 db  0Bh
.eh_frame:000000000000A460                 db  1Ch
.eh_frame:000000000000A461                 db    0
.eh_frame:000000000000A462                 db    0
.eh_frame:000000000000A463                 db    0
.eh_frame:000000000000A464                 db 0BCh
.eh_frame:000000000000A465                 db    9
.eh_frame:000000000000A466                 db    0
.eh_frame:000000000000A467                 db    0
.eh_frame:000000000000A468                 db  88h
.eh_frame:000000000000A469                 db 0B6h
.eh_frame:000000000000A46A                 db 0FFh
.eh_frame:000000000000A46B                 db 0FFh
.eh_frame:000000000000A46C                 db  80h
.eh_frame:000000000000A46D                 db    0
.eh_frame:000000000000A46E                 db    0
.eh_frame:000000000000A46F                 db    0
.eh_frame:000000000000A470                 db    0
.eh_frame:000000000000A471                 db  41h ; A
.eh_frame:000000000000A472                 db  0Eh
.eh_frame:000000000000A473                 db  10h
.eh_frame:000000000000A474                 db  83h
.eh_frame:000000000000A475                 db    2
.eh_frame:000000000000A476                 db    2
.eh_frame:000000000000A477                 db  7Ah ; z
.eh_frame:000000000000A478                 db  0Eh
.eh_frame:000000000000A479                 db    8
.eh_frame:000000000000A47A                 db    0
.eh_frame:000000000000A47B                 db    0
.eh_frame:000000000000A47C                 db    0
.eh_frame:000000000000A47D                 db    0
.eh_frame:000000000000A47E                 db    0
.eh_frame:000000000000A47F                 db    0
.eh_frame:000000000000A480                 db  18h
.eh_frame:000000000000A481                 db    0
.eh_frame:000000000000A482                 db    0
.eh_frame:000000000000A483                 db    0
.eh_frame:000000000000A484                 db 0DCh
.eh_frame:000000000000A485                 db    9
.eh_frame:000000000000A486                 db    0
.eh_frame:000000000000A487                 db    0
.eh_frame:000000000000A488                 db 0E8h
.eh_frame:000000000000A489                 db 0B6h
.eh_frame:000000000000A48A                 db 0FFh
.eh_frame:000000000000A48B                 db 0FFh
.eh_frame:000000000000A48C                 db  1Ah
.eh_frame:000000000000A48D                 db    0
.eh_frame:000000000000A48E                 db    0
.eh_frame:000000000000A48F                 db    0
.eh_frame:000000000000A490                 db    0
.eh_frame:000000000000A491                 db  41h ; A
.eh_frame:000000000000A492                 db  0Eh
.eh_frame:000000000000A493                 db  10h
.eh_frame:000000000000A494                 db  83h
.eh_frame:000000000000A495                 db    2
.eh_frame:000000000000A496                 db  53h ; S
.eh_frame:000000000000A497                 db  0Ah
.eh_frame:000000000000A498                 db  0Eh
.eh_frame:000000000000A499                 db    8
.eh_frame:000000000000A49A                 db  41h ; A
.eh_frame:000000000000A49B                 db  0Bh
.eh_frame:000000000000A49C                 db  10h
.eh_frame:000000000000A49D                 db    0
.eh_frame:000000000000A49E                 db    0
.eh_frame:000000000000A49F                 db    0
.eh_frame:000000000000A4A0                 db 0F8h
.eh_frame:000000000000A4A1                 db    9
.eh_frame:000000000000A4A2                 db    0
.eh_frame:000000000000A4A3                 db    0
.eh_frame:000000000000A4A4                 db 0ECh
.eh_frame:000000000000A4A5                 db 0B6h
.eh_frame:000000000000A4A6                 db 0FFh
.eh_frame:000000000000A4A7                 db 0FFh
.eh_frame:000000000000A4A8                 db  24h ; $
.eh_frame:000000000000A4A9                 db    0
.eh_frame:000000000000A4AA                 db    0
.eh_frame:000000000000A4AB                 db    0
.eh_frame:000000000000A4AC                 db    0
.eh_frame:000000000000A4AD                 db  5Fh ; _
.eh_frame:000000000000A4AE                 db  0Eh
.eh_frame:000000000000A4AF                 db  10h
.eh_frame:000000000000A4B0                 db  10h
.eh_frame:000000000000A4B1                 db    0
.eh_frame:000000000000A4B2                 db    0
.eh_frame:000000000000A4B3                 db    0
.eh_frame:000000000000A4B4                 db  0Ch
.eh_frame:000000000000A4B5                 db  0Ah
.eh_frame:000000000000A4B6                 db    0
.eh_frame:000000000000A4B7                 db    0
.eh_frame:000000000000A4B8                 db    8
.eh_frame:000000000000A4B9                 db 0B7h
.eh_frame:000000000000A4BA                 db 0FFh
.eh_frame:000000000000A4BB                 db 0FFh
.eh_frame:000000000000A4BC                 db    2
.eh_frame:000000000000A4BD                 db    0
.eh_frame:000000000000A4BE                 db    0
.eh_frame:000000000000A4BF                 db    0
.eh_frame:000000000000A4C0                 db    0
.eh_frame:000000000000A4C1                 db    0
.eh_frame:000000000000A4C2                 db    0
.eh_frame:000000000000A4C3                 db    0
.eh_frame:000000000000A4C4                 db  20h
.eh_frame:000000000000A4C5                 db    0
.eh_frame:000000000000A4C6                 db    0
.eh_frame:000000000000A4C7                 db    0
.eh_frame:000000000000A4C8                 db  20h
.eh_frame:000000000000A4C9                 db  0Ah
.eh_frame:000000000000A4CA                 db    0
.eh_frame:000000000000A4CB                 db    0
.eh_frame:000000000000A4CC                 db    4
.eh_frame:000000000000A4CD                 db 0B7h
.eh_frame:000000000000A4CE                 db 0FFh
.eh_frame:000000000000A4CF                 db 0FFh
.eh_frame:000000000000A4D0                 db  36h ; 6
.eh_frame:000000000000A4D1                 db    0
.eh_frame:000000000000A4D2                 db    0
.eh_frame:000000000000A4D3                 db    0
.eh_frame:000000000000A4D4                 db    0
.eh_frame:000000000000A4D5                 db  44h ; D
.eh_frame:000000000000A4D6                 db  0Eh
.eh_frame:000000000000A4D7                 db  10h
.eh_frame:000000000000A4D8                 db  83h
.eh_frame:000000000000A4D9                 db    2
.eh_frame:000000000000A4DA                 db  5Dh ; ]
.eh_frame:000000000000A4DB                 db  0Ah
.eh_frame:000000000000A4DC                 db  0Eh
.eh_frame:000000000000A4DD                 db    8
.eh_frame:000000000000A4DE                 db  47h ; G
.eh_frame:000000000000A4DF                 db  0Bh
.eh_frame:000000000000A4E0                 db  48h ; H
.eh_frame:000000000000A4E1                 db  0Ah
.eh_frame:000000000000A4E2                 db  0Eh
.eh_frame:000000000000A4E3                 db    8
.eh_frame:000000000000A4E4                 db  41h ; A
.eh_frame:000000000000A4E5                 db  0Bh
.eh_frame:000000000000A4E6                 db    0
.eh_frame:000000000000A4E7                 db    0
.eh_frame:000000000000A4E8                 db  10h
.eh_frame:000000000000A4E9                 db    0
.eh_frame:000000000000A4EA                 db    0
.eh_frame:000000000000A4EB                 db    0
.eh_frame:000000000000A4EC                 db  44h ; D
.eh_frame:000000000000A4ED                 db  0Ah
.eh_frame:000000000000A4EE                 db    0
.eh_frame:000000000000A4EF                 db    0
.eh_frame:000000000000A4F0                 db  20h
.eh_frame:000000000000A4F1                 db 0B7h
.eh_frame:000000000000A4F2                 db 0FFh
.eh_frame:000000000000A4F3                 db 0FFh
.eh_frame:000000000000A4F4                 db  24h ; $
.eh_frame:000000000000A4F5                 db    0
.eh_frame:000000000000A4F6                 db    0
.eh_frame:000000000000A4F7                 db    0
.eh_frame:000000000000A4F8                 db    0
.eh_frame:000000000000A4F9                 db  5Fh ; _
.eh_frame:000000000000A4FA                 db  0Eh
.eh_frame:000000000000A4FB                 db  10h
.eh_frame:000000000000A4FC                 db  14h
.eh_frame:000000000000A4FD                 db    0
.eh_frame:000000000000A4FE                 db    0
.eh_frame:000000000000A4FF                 db    0
.eh_frame:000000000000A500                 db  58h ; X
.eh_frame:000000000000A501                 db  0Ah
.eh_frame:000000000000A502                 db    0
.eh_frame:000000000000A503                 db    0
.eh_frame:000000000000A504                 db  3Ch ; <
.eh_frame:000000000000A505                 db 0B7h
.eh_frame:000000000000A506                 db 0FFh
.eh_frame:000000000000A507                 db 0FFh
.eh_frame:000000000000A508                 db  82h
.eh_frame:000000000000A509                 db    0
.eh_frame:000000000000A50A                 db    0
.eh_frame:000000000000A50B                 db    0
.eh_frame:000000000000A50C                 db    0
.eh_frame:000000000000A50D                 db    2
.eh_frame:000000000000A50E                 db  5Fh ; _
.eh_frame:000000000000A50F                 db  0Eh
.eh_frame:000000000000A510                 db  10h
.eh_frame:000000000000A511                 db  49h ; I
.eh_frame:000000000000A512                 db  0Eh
.eh_frame:000000000000A513                 db    8
.eh_frame:000000000000A514                 db  14h
.eh_frame:000000000000A515                 db    0
.eh_frame:000000000000A516                 db    0
.eh_frame:000000000000A517                 db    0
.eh_frame:000000000000A518                 db  70h ; p
.eh_frame:000000000000A519                 db  0Ah
.eh_frame:000000000000A51A                 db    0
.eh_frame:000000000000A51B                 db    0
.eh_frame:000000000000A51C                 db 0B4h
.eh_frame:000000000000A51D                 db 0B7h
.eh_frame:000000000000A51E                 db 0FFh
.eh_frame:000000000000A51F                 db 0FFh
.eh_frame:000000000000A520                 db  4Ah ; J
.eh_frame:000000000000A521                 db    0
.eh_frame:000000000000A522                 db    0
.eh_frame:000000000000A523                 db    0
.eh_frame:000000000000A524                 db    0
.eh_frame:000000000000A525                 db    2
.eh_frame:000000000000A526                 db  45h ; E
.eh_frame:000000000000A527                 db  0Eh
.eh_frame:000000000000A528                 db  10h
.eh_frame:000000000000A529                 db    0
.eh_frame:000000000000A52A                 db    0
.eh_frame:000000000000A52B                 db    0
.eh_frame:000000000000A52C                 db  18h
.eh_frame:000000000000A52D                 db    0
.eh_frame:000000000000A52E                 db    0
.eh_frame:000000000000A52F                 db    0
.eh_frame:000000000000A530                 db  88h
.eh_frame:000000000000A531                 db  0Ah
.eh_frame:000000000000A532                 db    0
.eh_frame:000000000000A533                 db    0
.eh_frame:000000000000A534                 db 0ECh
.eh_frame:000000000000A535                 db 0B7h
.eh_frame:000000000000A536                 db 0FFh
.eh_frame:000000000000A537                 db 0FFh
.eh_frame:000000000000A538                 db  17h
.eh_frame:000000000000A539                 db    0
.eh_frame:000000000000A53A                 db    0
.eh_frame:000000000000A53B                 db    0
.eh_frame:000000000000A53C                 db    0
.eh_frame:000000000000A53D                 db  41h ; A
.eh_frame:000000000000A53E                 db  0Eh
.eh_frame:000000000000A53F                 db  10h
.eh_frame:000000000000A540                 db  83h
.eh_frame:000000000000A541                 db    2
.eh_frame:000000000000A542                 db  51h ; Q
.eh_frame:000000000000A543                 db  0Eh
.eh_frame:000000000000A544                 db    8
.eh_frame:000000000000A545                 db    0
.eh_frame:000000000000A546                 db    0
.eh_frame:000000000000A547                 db    0
.eh_frame:000000000000A548                 db  18h
.eh_frame:000000000000A549                 db    0
.eh_frame:000000000000A54A                 db    0
.eh_frame:000000000000A54B                 db    0
.eh_frame:000000000000A54C                 db 0A4h
.eh_frame:000000000000A54D                 db  0Ah
.eh_frame:000000000000A54E                 db    0
.eh_frame:000000000000A54F                 db    0
.eh_frame:000000000000A550                 db 0F0h
.eh_frame:000000000000A551                 db 0B7h
.eh_frame:000000000000A552                 db 0FFh
.eh_frame:000000000000A553                 db 0FFh
.eh_frame:000000000000A554                 db  2Eh ; .
.eh_frame:000000000000A555                 db    0
.eh_frame:000000000000A556                 db    0
.eh_frame:000000000000A557                 db    0
.eh_frame:000000000000A558                 db    0
.eh_frame:000000000000A559                 db  47h ; G
.eh_frame:000000000000A55A                 db  0Eh
.eh_frame:000000000000A55B                 db  10h
.eh_frame:000000000000A55C                 db  61h ; a
.eh_frame:000000000000A55D                 db  0Ah
.eh_frame:000000000000A55E                 db  0Eh
.eh_frame:000000000000A55F                 db    8
.eh_frame:000000000000A560                 db  41h ; A
.eh_frame:000000000000A561                 db  0Bh
.eh_frame:000000000000A562                 db    0
.eh_frame:000000000000A563                 db    0
.eh_frame:000000000000A564                 db  24h ; $
.eh_frame:000000000000A565                 db    0
.eh_frame:000000000000A566                 db    0
.eh_frame:000000000000A567                 db    0
.eh_frame:000000000000A568                 db 0C0h
.eh_frame:000000000000A569                 db  0Ah
.eh_frame:000000000000A56A                 db    0
.eh_frame:000000000000A56B                 db    0
.eh_frame:000000000000A56C                 db    4
.eh_frame:000000000000A56D                 db 0B8h
.eh_frame:000000000000A56E                 db 0FFh
.eh_frame:000000000000A56F                 db 0FFh
.eh_frame:000000000000A570                 db  28h ; (
.eh_frame:000000000000A571                 db    0
.eh_frame:000000000000A572                 db    0
.eh_frame:000000000000A573                 db    0
.eh_frame:000000000000A574                 db    0
.eh_frame:000000000000A575                 db  41h ; A
.eh_frame:000000000000A576                 db  0Eh
.eh_frame:000000000000A577                 db  10h
.eh_frame:000000000000A578                 db  86h
.eh_frame:000000000000A579                 db    2
.eh_frame:000000000000A57A                 db  41h ; A
.eh_frame:000000000000A57B                 db  0Eh
.eh_frame:000000000000A57C                 db  18h
.eh_frame:000000000000A57D                 db  83h
.eh_frame:000000000000A57E                 db    3
.eh_frame:000000000000A57F                 db  4Dh ; M
.eh_frame:000000000000A580                 db  0Eh
.eh_frame:000000000000A581                 db  20h
.eh_frame:000000000000A582                 db  49h ; I
.eh_frame:000000000000A583                 db  0Eh
.eh_frame:000000000000A584                 db  18h
.eh_frame:000000000000A585                 db  47h ; G
.eh_frame:000000000000A586                 db  0Eh
.eh_frame:000000000000A587                 db  10h
.eh_frame:000000000000A588                 db  41h ; A
.eh_frame:000000000000A589                 db  0Eh
.eh_frame:000000000000A58A                 db    8
.eh_frame:000000000000A58B                 db    0
.eh_frame:000000000000A58C                 db  18h
.eh_frame:000000000000A58D                 db    0
.eh_frame:000000000000A58E                 db    0
.eh_frame:000000000000A58F                 db    0
.eh_frame:000000000000A590                 db 0E8h
.eh_frame:000000000000A591                 db  0Ah
.eh_frame:000000000000A592                 db    0
.eh_frame:000000000000A593                 db    0
.eh_frame:000000000000A594                 db  0Ch
.eh_frame:000000000000A595                 db 0B8h
.eh_frame:000000000000A596                 db 0FFh
.eh_frame:000000000000A597                 db 0FFh
.eh_frame:000000000000A598                 db  13h
.eh_frame:000000000000A599                 db    0
.eh_frame:000000000000A59A                 db    0
.eh_frame:000000000000A59B                 db    0
.eh_frame:000000000000A59C                 db    0
.eh_frame:000000000000A59D                 db  41h ; A
.eh_frame:000000000000A59E                 db  0Eh
.eh_frame:000000000000A59F                 db  10h
.eh_frame:000000000000A5A0                 db  83h
.eh_frame:000000000000A5A1                 db    2
.eh_frame:000000000000A5A2                 db  50h ; P
.eh_frame:000000000000A5A3                 db  0Eh
.eh_frame:000000000000A5A4                 db    8
.eh_frame:000000000000A5A5                 db    0
.eh_frame:000000000000A5A6                 db    0
.eh_frame:000000000000A5A7                 db    0
.eh_frame:000000000000A5A8                 db  14h
.eh_frame:000000000000A5A9                 db    0
.eh_frame:000000000000A5AA                 db    0
.eh_frame:000000000000A5AB                 db    0
.eh_frame:000000000000A5AC                 db    4
.eh_frame:000000000000A5AD                 db  0Bh
.eh_frame:000000000000A5AE                 db    0
.eh_frame:000000000000A5AF                 db    0
.eh_frame:000000000000A5B0                 db  10h
.eh_frame:000000000000A5B1                 db 0B8h
.eh_frame:000000000000A5B2                 db 0FFh
.eh_frame:000000000000A5B3                 db 0FFh
.eh_frame:000000000000A5B4                 db  35h ; 5
.eh_frame:000000000000A5B5                 db    0
.eh_frame:000000000000A5B6                 db    0
.eh_frame:000000000000A5B7                 db    0
.eh_frame:000000000000A5B8                 db    0
.eh_frame:000000000000A5B9                 db  4Bh ; K
.eh_frame:000000000000A5BA                 db  0Eh
.eh_frame:000000000000A5BB                 db  10h
.eh_frame:000000000000A5BC                 db    0
.eh_frame:000000000000A5BD                 db    0
.eh_frame:000000000000A5BE                 db    0
.eh_frame:000000000000A5BF                 db    0
.eh_frame:000000000000A5C0                 db  1Ch
.eh_frame:000000000000A5C1                 db    0
.eh_frame:000000000000A5C2                 db    0
.eh_frame:000000000000A5C3                 db    0
.eh_frame:000000000000A5C4                 db  1Ch
.eh_frame:000000000000A5C5                 db  0Bh
.eh_frame:000000000000A5C6                 db    0
.eh_frame:000000000000A5C7                 db    0
.eh_frame:000000000000A5C8                 db  38h ; 8
.eh_frame:000000000000A5C9                 db 0B8h
.eh_frame:000000000000A5CA                 db 0FFh
.eh_frame:000000000000A5CB                 db 0FFh
.eh_frame:000000000000A5CC                 db 0B1h
.eh_frame:000000000000A5CD                 db    0
.eh_frame:000000000000A5CE                 db    0
.eh_frame:000000000000A5CF                 db    0
.eh_frame:000000000000A5D0                 db    0
.eh_frame:000000000000A5D1                 db  47h ; G
.eh_frame:000000000000A5D2                 db  0Eh
.eh_frame:000000000000A5D3                 db 0E0h
.eh_frame:000000000000A5D4                 db    1
.eh_frame:000000000000A5D5                 db    2
.eh_frame:000000000000A5D6                 db 0A4h
.eh_frame:000000000000A5D7                 db  0Ah
.eh_frame:000000000000A5D8                 db  0Eh
.eh_frame:000000000000A5D9                 db    8
.eh_frame:000000000000A5DA                 db  41h ; A
.eh_frame:000000000000A5DB                 db  0Bh
.eh_frame:000000000000A5DC                 db    0
.eh_frame:000000000000A5DD                 db    0
.eh_frame:000000000000A5DE                 db    0
.eh_frame:000000000000A5DF                 db    0
.eh_frame:000000000000A5E0                 db  3Ch ; <
.eh_frame:000000000000A5E1                 db    0
.eh_frame:000000000000A5E2                 db    0
.eh_frame:000000000000A5E3                 db    0
.eh_frame:000000000000A5E4                 db  3Ch ; <
.eh_frame:000000000000A5E5                 db  0Bh
.eh_frame:000000000000A5E6                 db    0
.eh_frame:000000000000A5E7                 db    0
.eh_frame:000000000000A5E8                 db 0D8h
.eh_frame:000000000000A5E9                 db 0B8h
.eh_frame:000000000000A5EA                 db 0FFh
.eh_frame:000000000000A5EB                 db 0FFh
.eh_frame:000000000000A5EC                 db  83h
.eh_frame:000000000000A5ED                 db    0
.eh_frame:000000000000A5EE                 db    0
.eh_frame:000000000000A5EF                 db    0
.eh_frame:000000000000A5F0                 db    0
.eh_frame:000000000000A5F1                 db  42h ; B
.eh_frame:000000000000A5F2                 db  0Eh
.eh_frame:000000000000A5F3                 db  10h
.eh_frame:000000000000A5F4                 db  8Dh
.eh_frame:000000000000A5F5                 db    2
.eh_frame:000000000000A5F6                 db  42h ; B
.eh_frame:000000000000A5F7                 db  0Eh
.eh_frame:000000000000A5F8                 db  18h
.eh_frame:000000000000A5F9                 db  8Ch
.eh_frame:000000000000A5FA                 db    3
.eh_frame:000000000000A5FB                 db  44h ; D
.eh_frame:000000000000A5FC                 db  0Eh
.eh_frame:000000000000A5FD                 db  20h
.eh_frame:000000000000A5FE                 db  86h
.eh_frame:000000000000A5FF                 db    4
.eh_frame:000000000000A600                 db  41h ; A
.eh_frame:000000000000A601                 db  0Eh
.eh_frame:000000000000A602                 db  28h ; (
.eh_frame:000000000000A603                 db  83h
.eh_frame:000000000000A604                 db    5
.eh_frame:000000000000A605                 db  4Ah ; J
.eh_frame:000000000000A606                 db  0Eh
.eh_frame:000000000000A607                 db  40h ; @
.eh_frame:000000000000A608                 db    2
.eh_frame:000000000000A609                 db  64h ; d
.eh_frame:000000000000A60A                 db  0Ah
.eh_frame:000000000000A60B                 db  0Eh
.eh_frame:000000000000A60C                 db  28h ; (
.eh_frame:000000000000A60D                 db  41h ; A
.eh_frame:000000000000A60E                 db  0Eh
.eh_frame:000000000000A60F                 db  20h
.eh_frame:000000000000A610                 db  41h ; A
.eh_frame:000000000000A611                 db  0Eh
.eh_frame:000000000000A612                 db  18h
.eh_frame:000000000000A613                 db  42h ; B
.eh_frame:000000000000A614                 db  0Eh
.eh_frame:000000000000A615                 db  10h
.eh_frame:000000000000A616                 db  42h ; B
.eh_frame:000000000000A617                 db  0Eh
.eh_frame:000000000000A618                 db    8
.eh_frame:000000000000A619                 db  41h ; A
.eh_frame:000000000000A61A                 db  0Bh
.eh_frame:000000000000A61B                 db    0
.eh_frame:000000000000A61C                 db    0
.eh_frame:000000000000A61D                 db    0
.eh_frame:000000000000A61E                 db    0
.eh_frame:000000000000A61F                 db    0
.eh_frame:000000000000A620                 db  28h ; (
.eh_frame:000000000000A621                 db    0
.eh_frame:000000000000A622                 db    0
.eh_frame:000000000000A623                 db    0
.eh_frame:000000000000A624                 db  7Ch ; |
.eh_frame:000000000000A625                 db  0Bh
.eh_frame:000000000000A626                 db    0
.eh_frame:000000000000A627                 db    0
.eh_frame:000000000000A628                 db  28h ; (
.eh_frame:000000000000A629                 db 0B9h
.eh_frame:000000000000A62A                 db 0FFh
.eh_frame:000000000000A62B                 db 0FFh
.eh_frame:000000000000A62C                 db  5Eh ; ^
.eh_frame:000000000000A62D                 db    0
.eh_frame:000000000000A62E                 db    0
.eh_frame:000000000000A62F                 db    0
.eh_frame:000000000000A630                 db    0
.eh_frame:000000000000A631                 db  41h ; A
.eh_frame:000000000000A632                 db  0Eh
.eh_frame:000000000000A633                 db  10h
.eh_frame:000000000000A634                 db  86h
.eh_frame:000000000000A635                 db    2
.eh_frame:000000000000A636                 db  41h ; A
.eh_frame:000000000000A637                 db  0Eh
.eh_frame:000000000000A638                 db  18h
.eh_frame:000000000000A639                 db  83h
.eh_frame:000000000000A63A                 db    3
.eh_frame:000000000000A63B                 db  4Ch ; L
.eh_frame:000000000000A63C                 db  0Eh
.eh_frame:000000000000A63D                 db  20h
.eh_frame:000000000000A63E                 db  77h ; w
.eh_frame:000000000000A63F                 db  0Ah
.eh_frame:000000000000A640                 db  0Eh
.eh_frame:000000000000A641                 db  18h
.eh_frame:000000000000A642                 db  44h ; D
.eh_frame:000000000000A643                 db  0Eh
.eh_frame:000000000000A644                 db  10h
.eh_frame:000000000000A645                 db  41h ; A
.eh_frame:000000000000A646                 db  0Eh
.eh_frame:000000000000A647                 db    8
.eh_frame:000000000000A648                 db  46h ; F
.eh_frame:000000000000A649                 db  0Bh
.eh_frame:000000000000A64A                 db    0
.eh_frame:000000000000A64B                 db    0
.eh_frame:000000000000A64C                 db  48h ; H
.eh_frame:000000000000A64D                 db    0
.eh_frame:000000000000A64E                 db    0
.eh_frame:000000000000A64F                 db    0
.eh_frame:000000000000A650                 db 0A8h
.eh_frame:000000000000A651                 db  0Bh
.eh_frame:000000000000A652                 db    0
.eh_frame:000000000000A653                 db    0
.eh_frame:000000000000A654                 db  5Ch ; \
.eh_frame:000000000000A655                 db 0B9h
.eh_frame:000000000000A656                 db 0FFh
.eh_frame:000000000000A657                 db 0FFh
.eh_frame:000000000000A658                 db  89h
.eh_frame:000000000000A659                 db    1
.eh_frame:000000000000A65A                 db    0
.eh_frame:000000000000A65B                 db    0
.eh_frame:000000000000A65C                 db    0
.eh_frame:000000000000A65D                 db  42h ; B
.eh_frame:000000000000A65E                 db  0Eh
.eh_frame:000000000000A65F                 db  10h
.eh_frame:000000000000A660                 db  8Fh
.eh_frame:000000000000A661                 db    2
.eh_frame:000000000000A662                 db  42h ; B
.eh_frame:000000000000A663                 db  0Eh
.eh_frame:000000000000A664                 db  18h
.eh_frame:000000000000A665                 db  8Eh
.eh_frame:000000000000A666                 db    3
.eh_frame:000000000000A667                 db  45h ; E
.eh_frame:000000000000A668                 db  0Eh
.eh_frame:000000000000A669                 db  20h
.eh_frame:000000000000A66A                 db  8Dh
.eh_frame:000000000000A66B                 db    4
.eh_frame:000000000000A66C                 db  45h ; E
.eh_frame:000000000000A66D                 db  0Eh
.eh_frame:000000000000A66E                 db  28h ; (
.eh_frame:000000000000A66F                 db  8Ch
.eh_frame:000000000000A670                 db    5
.eh_frame:000000000000A671                 db  41h ; A
.eh_frame:000000000000A672                 db  0Eh
.eh_frame:000000000000A673                 db  30h ; 0
.eh_frame:000000000000A674                 db  86h
.eh_frame:000000000000A675                 db    6
.eh_frame:000000000000A676                 db  41h ; A
.eh_frame:000000000000A677                 db  0Eh
.eh_frame:000000000000A678                 db  38h ; 8
.eh_frame:000000000000A679                 db  83h
.eh_frame:000000000000A67A                 db    7
.eh_frame:000000000000A67B                 db  4Fh ; O
.eh_frame:000000000000A67C                 db  0Eh
.eh_frame:000000000000A67D                 db  50h ; P
.eh_frame:000000000000A67E                 db    2
.eh_frame:000000000000A67F                 db 0AAh
.eh_frame:000000000000A680                 db  0Ah
.eh_frame:000000000000A681                 db  0Eh
.eh_frame:000000000000A682                 db  38h ; 8
.eh_frame:000000000000A683                 db  43h ; C
.eh_frame:000000000000A684                 db  0Eh
.eh_frame:000000000000A685                 db  30h ; 0
.eh_frame:000000000000A686                 db  41h ; A
.eh_frame:000000000000A687                 db  0Eh
.eh_frame:000000000000A688                 db  28h ; (
.eh_frame:000000000000A689                 db  42h ; B
.eh_frame:000000000000A68A                 db  0Eh
.eh_frame:000000000000A68B                 db  20h
.eh_frame:000000000000A68C                 db  42h ; B
.eh_frame:000000000000A68D                 db  0Eh
.eh_frame:000000000000A68E                 db  18h
.eh_frame:000000000000A68F                 db  42h ; B
.eh_frame:000000000000A690                 db  0Eh
.eh_frame:000000000000A691                 db  10h
.eh_frame:000000000000A692                 db  42h ; B
.eh_frame:000000000000A693                 db  0Eh
.eh_frame:000000000000A694                 db    8
.eh_frame:000000000000A695                 db  4Bh ; K
.eh_frame:000000000000A696                 db  0Bh
.eh_frame:000000000000A697                 db    0
.eh_frame:000000000000A698                 db  24h ; $
.eh_frame:000000000000A699                 db    0
.eh_frame:000000000000A69A                 db    0
.eh_frame:000000000000A69B                 db    0
.eh_frame:000000000000A69C                 db 0F4h
.eh_frame:000000000000A69D                 db  0Bh
.eh_frame:000000000000A69E                 db    0
.eh_frame:000000000000A69F                 db    0
.eh_frame:000000000000A6A0                 db 0A0h
.eh_frame:000000000000A6A1                 db 0BAh
.eh_frame:000000000000A6A2                 db 0FFh
.eh_frame:000000000000A6A3                 db 0FFh
.eh_frame:000000000000A6A4                 db  7Eh ; ~
.eh_frame:000000000000A6A5                 db    0
.eh_frame:000000000000A6A6                 db    0
.eh_frame:000000000000A6A7                 db    0
.eh_frame:000000000000A6A8                 db    0
.eh_frame:000000000000A6A9                 db  41h ; A
.eh_frame:000000000000A6AA                 db  0Eh
.eh_frame:000000000000A6AB                 db  10h
.eh_frame:000000000000A6AC                 db  83h
.eh_frame:000000000000A6AD                 db    2
.eh_frame:000000000000A6AE                 db  4Ch ; L
.eh_frame:000000000000A6AF                 db  0Eh
.eh_frame:000000000000A6B0                 db  20h
.eh_frame:000000000000A6B1                 db    2
.eh_frame:000000000000A6B2                 db  49h ; I
.eh_frame:000000000000A6B3                 db  0Ah
.eh_frame:000000000000A6B4                 db  0Eh
.eh_frame:000000000000A6B5                 db  10h
.eh_frame:000000000000A6B6                 db  41h ; A
.eh_frame:000000000000A6B7                 db  0Eh
.eh_frame:000000000000A6B8                 db    8
.eh_frame:000000000000A6B9                 db  41h ; A
.eh_frame:000000000000A6BA                 db  0Bh
.eh_frame:000000000000A6BB                 db    0
.eh_frame:000000000000A6BC                 db    0
.eh_frame:000000000000A6BD                 db    0
.eh_frame:000000000000A6BE                 db    0
.eh_frame:000000000000A6BF                 db    0
.eh_frame:000000000000A6C0                 db  4Ch ; L
.eh_frame:000000000000A6C1                 db    0
.eh_frame:000000000000A6C2                 db    0
.eh_frame:000000000000A6C3                 db    0
.eh_frame:000000000000A6C4                 db  1Ch
.eh_frame:000000000000A6C5                 db  0Ch
.eh_frame:000000000000A6C6                 db    0
.eh_frame:000000000000A6C7                 db    0
.eh_frame:000000000000A6C8                 db 0F8h
.eh_frame:000000000000A6C9                 db 0BAh
.eh_frame:000000000000A6CA                 db 0FFh
.eh_frame:000000000000A6CB                 db 0FFh
.eh_frame:000000000000A6CC                 db  7Dh ; }
.eh_frame:000000000000A6CD                 db    0
.eh_frame:000000000000A6CE                 db    0
.eh_frame:000000000000A6CF                 db    0
.eh_frame:000000000000A6D0                 db    0
.eh_frame:000000000000A6D1                 db  42h ; B
.eh_frame:000000000000A6D2                 db  0Eh
.eh_frame:000000000000A6D3                 db  10h
.eh_frame:000000000000A6D4                 db  8Ch
.eh_frame:000000000000A6D5                 db    2
.eh_frame:000000000000A6D6                 db  41h ; A
.eh_frame:000000000000A6D7                 db  0Eh
.eh_frame:000000000000A6D8                 db  18h
.eh_frame:000000000000A6D9                 db  86h
.eh_frame:000000000000A6DA                 db    3
.eh_frame:000000000000A6DB                 db  44h ; D
.eh_frame:000000000000A6DC                 db  0Eh
.eh_frame:000000000000A6DD                 db  20h
.eh_frame:000000000000A6DE                 db  83h
.eh_frame:000000000000A6DF                 db    4
.eh_frame:000000000000A6E0                 db  69h ; i
.eh_frame:000000000000A6E1                 db  0Ah
.eh_frame:000000000000A6E2                 db  0Eh
.eh_frame:000000000000A6E3                 db  18h
.eh_frame:000000000000A6E4                 db  41h ; A
.eh_frame:000000000000A6E5                 db  0Eh
.eh_frame:000000000000A6E6                 db  10h
.eh_frame:000000000000A6E7                 db  42h ; B
.eh_frame:000000000000A6E8                 db  0Eh
.eh_frame:000000000000A6E9                 db    8
.eh_frame:000000000000A6EA                 db  45h ; E
.eh_frame:000000000000A6EB                 db  0Bh
.eh_frame:000000000000A6EC                 db  55h ; U
.eh_frame:000000000000A6ED                 db  0Ah
.eh_frame:000000000000A6EE                 db  0Eh
.eh_frame:000000000000A6EF                 db  18h
.eh_frame:000000000000A6F0                 db  41h ; A
.eh_frame:000000000000A6F1                 db  0Eh
.eh_frame:000000000000A6F2                 db  10h
.eh_frame:000000000000A6F3                 db  42h ; B
.eh_frame:000000000000A6F4                 db  0Eh
.eh_frame:000000000000A6F5                 db    8
.eh_frame:000000000000A6F6                 db  48h ; H
.eh_frame:000000000000A6F7                 db  0Bh
.eh_frame:000000000000A6F8                 db  41h ; A
.eh_frame:000000000000A6F9                 db  0Ah
.eh_frame:000000000000A6FA                 db  0Eh
.eh_frame:000000000000A6FB                 db  18h
.eh_frame:000000000000A6FC                 db  46h ; F
.eh_frame:000000000000A6FD                 db  0Eh
.eh_frame:000000000000A6FE                 db  10h
.eh_frame:000000000000A6FF                 db  42h ; B
.eh_frame:000000000000A700                 db  0Eh
.eh_frame:000000000000A701                 db    8
.eh_frame:000000000000A702                 db  47h ; G
.eh_frame:000000000000A703                 db  0Bh
.eh_frame:000000000000A704                 db  49h ; I
.eh_frame:000000000000A705                 db  0Eh
.eh_frame:000000000000A706                 db  18h
.eh_frame:000000000000A707                 db  41h ; A
.eh_frame:000000000000A708                 db  0Eh
.eh_frame:000000000000A709                 db  10h
.eh_frame:000000000000A70A                 db  42h ; B
.eh_frame:000000000000A70B                 db  0Eh
.eh_frame:000000000000A70C                 db    8
.eh_frame:000000000000A70D                 db    0
.eh_frame:000000000000A70E                 db    0
.eh_frame:000000000000A70F                 db    0
.eh_frame:000000000000A710                 db  1Ch
.eh_frame:000000000000A711                 db    0
.eh_frame:000000000000A712                 db    0
.eh_frame:000000000000A713                 db    0
.eh_frame:000000000000A714                 db  6Ch ; l
.eh_frame:000000000000A715                 db  0Ch
.eh_frame:000000000000A716                 db    0
.eh_frame:000000000000A717                 db    0
.eh_frame:000000000000A718                 db  28h ; (
.eh_frame:000000000000A719                 db 0BBh
.eh_frame:000000000000A71A                 db 0FFh
.eh_frame:000000000000A71B                 db 0FFh
.eh_frame:000000000000A71C                 db  3Ch ; <
.eh_frame:000000000000A71D                 db    0
.eh_frame:000000000000A71E                 db    0
.eh_frame:000000000000A71F                 db    0
.eh_frame:000000000000A720                 db    0
.eh_frame:000000000000A721                 db  44h ; D
.eh_frame:000000000000A722                 db  0Eh
.eh_frame:000000000000A723                 db  10h
.eh_frame:000000000000A724                 db  61h ; a
.eh_frame:000000000000A725                 db  0Ah
.eh_frame:000000000000A726                 db  0Eh
.eh_frame:000000000000A727                 db    8
.eh_frame:000000000000A728                 db  4Bh ; K
.eh_frame:000000000000A729                 db  0Bh
.eh_frame:000000000000A72A                 db  4Bh ; K
.eh_frame:000000000000A72B                 db  0Eh
.eh_frame:000000000000A72C                 db    8
.eh_frame:000000000000A72D                 db    0
.eh_frame:000000000000A72E                 db    0
.eh_frame:000000000000A72F                 db    0
.eh_frame:000000000000A730                 db  34h ; 4
.eh_frame:000000000000A731                 db    0
.eh_frame:000000000000A732                 db    0
.eh_frame:000000000000A733                 db    0
.eh_frame:000000000000A734                 db  8Ch
.eh_frame:000000000000A735                 db  0Ch
.eh_frame:000000000000A736                 db    0
.eh_frame:000000000000A737                 db    0
.eh_frame:000000000000A738                 db  48h ; H
.eh_frame:000000000000A739                 db 0BBh
.eh_frame:000000000000A73A                 db 0FFh
.eh_frame:000000000000A73B                 db 0FFh
.eh_frame:000000000000A73C                 db  7Bh ; {
.eh_frame:000000000000A73D                 db    0
.eh_frame:000000000000A73E                 db    0
.eh_frame:000000000000A73F                 db    0
.eh_frame:000000000000A740                 db    0
.eh_frame:000000000000A741                 db  42h ; B
.eh_frame:000000000000A742                 db  0Eh
.eh_frame:000000000000A743                 db  10h
.eh_frame:000000000000A744                 db  8Ch
.eh_frame:000000000000A745                 db    2
.eh_frame:000000000000A746                 db  41h ; A
.eh_frame:000000000000A747                 db  0Eh
.eh_frame:000000000000A748                 db  18h
.eh_frame:000000000000A749                 db  86h
.eh_frame:000000000000A74A                 db    3
.eh_frame:000000000000A74B                 db  41h ; A
.eh_frame:000000000000A74C                 db  0Eh
.eh_frame:000000000000A74D                 db  20h
.eh_frame:000000000000A74E                 db  83h
.eh_frame:000000000000A74F                 db    4
.eh_frame:000000000000A750                 db  7Dh ; }
.eh_frame:000000000000A751                 db  0Ah
.eh_frame:000000000000A752                 db  0Eh
.eh_frame:000000000000A753                 db  18h
.eh_frame:000000000000A754                 db  41h ; A
.eh_frame:000000000000A755                 db  0Eh
.eh_frame:000000000000A756                 db  10h
.eh_frame:000000000000A757                 db  42h ; B
.eh_frame:000000000000A758                 db  0Eh
.eh_frame:000000000000A759                 db    8
.eh_frame:000000000000A75A                 db  44h ; D
.eh_frame:000000000000A75B                 db  0Bh
.eh_frame:000000000000A75C                 db  60h ; `
.eh_frame:000000000000A75D                 db  0Ah
.eh_frame:000000000000A75E                 db  0Eh
.eh_frame:000000000000A75F                 db  18h
.eh_frame:000000000000A760                 db  41h ; A
.eh_frame:000000000000A761                 db  0Eh
.eh_frame:000000000000A762                 db  10h
.eh_frame:000000000000A763                 db  42h ; B
.eh_frame:000000000000A764                 db  0Eh
.eh_frame:000000000000A765                 db    8
.eh_frame:000000000000A766                 db  45h ; E
.eh_frame:000000000000A767                 db  0Bh
.eh_frame:000000000000A768                 db  1Ch
.eh_frame:000000000000A769                 db    0
.eh_frame:000000000000A76A                 db    0
.eh_frame:000000000000A76B                 db    0
.eh_frame:000000000000A76C                 db 0C4h
.eh_frame:000000000000A76D                 db  0Ch
.eh_frame:000000000000A76E                 db    0
.eh_frame:000000000000A76F                 db    0
.eh_frame:000000000000A770                 db  90h
.eh_frame:000000000000A771                 db 0BBh
.eh_frame:000000000000A772                 db 0FFh
.eh_frame:000000000000A773                 db 0FFh
.eh_frame:000000000000A774                 db  40h ; @
.eh_frame:000000000000A775                 db    0
.eh_frame:000000000000A776                 db    0
.eh_frame:000000000000A777                 db    0
.eh_frame:000000000000A778                 db    0
.eh_frame:000000000000A779                 db  44h ; D
.eh_frame:000000000000A77A                 db  0Eh
.eh_frame:000000000000A77B                 db  10h
.eh_frame:000000000000A77C                 db  83h
.eh_frame:000000000000A77D                 db    2
.eh_frame:000000000000A77E                 db  5Ah ; Z
.eh_frame:000000000000A77F                 db  0Ah
.eh_frame:000000000000A780                 db  0Eh
.eh_frame:000000000000A781                 db    8
.eh_frame:000000000000A782                 db  4Ah ; J
.eh_frame:000000000000A783                 db  0Bh
.eh_frame:000000000000A784                 db  53h ; S
.eh_frame:000000000000A785                 db  0Eh
.eh_frame:000000000000A786                 db    8
.eh_frame:000000000000A787                 db    0
.eh_frame:000000000000A788                 db  2Ch ; ,
.eh_frame:000000000000A789                 db    0
.eh_frame:000000000000A78A                 db    0
.eh_frame:000000000000A78B                 db    0
.eh_frame:000000000000A78C                 db 0E4h
.eh_frame:000000000000A78D                 db  0Ch
.eh_frame:000000000000A78E                 db    0
.eh_frame:000000000000A78F                 db    0
.eh_frame:000000000000A790                 db 0B0h
.eh_frame:000000000000A791                 db 0BBh
.eh_frame:000000000000A792                 db 0FFh
.eh_frame:000000000000A793                 db 0FFh
.eh_frame:000000000000A794                 db  57h ; W
.eh_frame:000000000000A795                 db    0
.eh_frame:000000000000A796                 db    0
.eh_frame:000000000000A797                 db    0
.eh_frame:000000000000A798                 db    0
.eh_frame:000000000000A799                 db  63h ; c
.eh_frame:000000000000A79A                 db  0Eh
.eh_frame:000000000000A79B                 db  10h
.eh_frame:000000000000A79C                 db  8Ch
.eh_frame:000000000000A79D                 db    2
.eh_frame:000000000000A79E                 db  41h ; A
.eh_frame:000000000000A79F                 db  0Eh
.eh_frame:000000000000A7A0                 db  18h
.eh_frame:000000000000A7A1                 db  86h
.eh_frame:000000000000A7A2                 db    3
.eh_frame:000000000000A7A3                 db  44h ; D
.eh_frame:000000000000A7A4                 db  0Eh
.eh_frame:000000000000A7A5                 db  20h
.eh_frame:000000000000A7A6                 db  83h
.eh_frame:000000000000A7A7                 db    4
.eh_frame:000000000000A7A8                 db  6Bh ; k
.eh_frame:000000000000A7A9                 db  0Eh
.eh_frame:000000000000A7AA                 db  18h
.eh_frame:000000000000A7AB                 db  41h ; A
.eh_frame:000000000000A7AC                 db  0Eh
.eh_frame:000000000000A7AD                 db  10h
.eh_frame:000000000000A7AE                 db  42h ; B
.eh_frame:000000000000A7AF                 db  0Eh
.eh_frame:000000000000A7B0                 db    8
.eh_frame:000000000000A7B1                 db    0
.eh_frame:000000000000A7B2                 db    0
.eh_frame:000000000000A7B3                 db    0
.eh_frame:000000000000A7B4                 db    0
.eh_frame:000000000000A7B5                 db    0
.eh_frame:000000000000A7B6                 db    0
.eh_frame:000000000000A7B7                 db    0
.eh_frame:000000000000A7B8                 db  2Ch ; ,
.eh_frame:000000000000A7B9                 db    0
.eh_frame:000000000000A7BA                 db    0
.eh_frame:000000000000A7BB                 db    0
.eh_frame:000000000000A7BC                 db  14h
.eh_frame:000000000000A7BD                 db  0Dh
.eh_frame:000000000000A7BE                 db    0
.eh_frame:000000000000A7BF                 db    0
.eh_frame:000000000000A7C0                 db 0E0h
.eh_frame:000000000000A7C1                 db 0BBh
.eh_frame:000000000000A7C2                 db 0FFh
.eh_frame:000000000000A7C3                 db 0FFh
.eh_frame:000000000000A7C4                 db  1Fh
.eh_frame:000000000000A7C5                 db  11h
.eh_frame:000000000000A7C6                 db    0
.eh_frame:000000000000A7C7                 db    0
.eh_frame:000000000000A7C8                 db    0
.eh_frame:000000000000A7C9                 db  41h ; A
.eh_frame:000000000000A7CA                 db  0Eh
.eh_frame:000000000000A7CB                 db  10h
.eh_frame:000000000000A7CC                 db  86h
.eh_frame:000000000000A7CD                 db    2
.eh_frame:000000000000A7CE                 db  43h ; C
.eh_frame:000000000000A7CF                 db  0Dh
.eh_frame:000000000000A7D0                 db    6
.eh_frame:000000000000A7D1                 db  48h ; H
.eh_frame:000000000000A7D2                 db  8Fh
.eh_frame:000000000000A7D3                 db    3
.eh_frame:000000000000A7D4                 db  8Eh
.eh_frame:000000000000A7D5                 db    4
.eh_frame:000000000000A7D6                 db  8Dh
.eh_frame:000000000000A7D7                 db    5
.eh_frame:000000000000A7D8                 db  8Ch
.eh_frame:000000000000A7D9                 db    6
.eh_frame:000000000000A7DA                 db  48h ; H
.eh_frame:000000000000A7DB                 db  83h
.eh_frame:000000000000A7DC                 db    7
.eh_frame:000000000000A7DD                 db    3
.eh_frame:000000000000A7DE                 db 0EFh
.eh_frame:000000000000A7DF                 db    1
.eh_frame:000000000000A7E0                 db  0Ah
.eh_frame:000000000000A7E1                 db  0Ch
.eh_frame:000000000000A7E2                 db    7
.eh_frame:000000000000A7E3                 db    8
.eh_frame:000000000000A7E4                 db  45h ; E
.eh_frame:000000000000A7E5                 db  0Bh
.eh_frame:000000000000A7E6                 db    0
.eh_frame:000000000000A7E7                 db    0
.eh_frame:000000000000A7E8                 db  14h
.eh_frame:000000000000A7E9                 db    0
.eh_frame:000000000000A7EA                 db    0
.eh_frame:000000000000A7EB                 db    0
.eh_frame:000000000000A7EC                 db  44h ; D
.eh_frame:000000000000A7ED                 db  0Dh
.eh_frame:000000000000A7EE                 db    0
.eh_frame:000000000000A7EF                 db    0
.eh_frame:000000000000A7F0                 db 0D0h
.eh_frame:000000000000A7F1                 db 0CCh
.eh_frame:000000000000A7F2                 db 0FFh
.eh_frame:000000000000A7F3                 db 0FFh
.eh_frame:000000000000A7F4                 db 0FEh
.eh_frame:000000000000A7F5                 db    1
.eh_frame:000000000000A7F6                 db    0
.eh_frame:000000000000A7F7                 db    0
.eh_frame:000000000000A7F8                 db    0
.eh_frame:000000000000A7F9                 db    0
.eh_frame:000000000000A7FA                 db    0
.eh_frame:000000000000A7FB                 db    0
.eh_frame:000000000000A7FC                 db    0
.eh_frame:000000000000A7FD                 db    0
.eh_frame:000000000000A7FE                 db    0
.eh_frame:000000000000A7FF                 db    0
.eh_frame:000000000000A800                 db  4Ch ; L
.eh_frame:000000000000A801                 db    0
.eh_frame:000000000000A802                 db    0
.eh_frame:000000000000A803                 db    0
.eh_frame:000000000000A804                 db  5Ch ; \
.eh_frame:000000000000A805                 db  0Dh
.eh_frame:000000000000A806                 db    0
.eh_frame:000000000000A807                 db    0
.eh_frame:000000000000A808                 db 0B8h
.eh_frame:000000000000A809                 db 0CEh
.eh_frame:000000000000A80A                 db 0FFh
.eh_frame:000000000000A80B                 db 0FFh
.eh_frame:000000000000A80C                 db 0ECh
.eh_frame:000000000000A80D                 db  0Ch
.eh_frame:000000000000A80E                 db    0
.eh_frame:000000000000A80F                 db    0
.eh_frame:000000000000A810                 db    0
.eh_frame:000000000000A811                 db  42h ; B
.eh_frame:000000000000A812                 db  0Eh
.eh_frame:000000000000A813                 db  10h
.eh_frame:000000000000A814                 db  8Fh
.eh_frame:000000000000A815                 db    2
.eh_frame:000000000000A816                 db  42h ; B
.eh_frame:000000000000A817                 db  0Eh
.eh_frame:000000000000A818                 db  18h
.eh_frame:000000000000A819                 db  8Eh
.eh_frame:000000000000A81A                 db    3
.eh_frame:000000000000A81B                 db  46h ; F
.eh_frame:000000000000A81C                 db  0Eh
.eh_frame:000000000000A81D                 db  20h
.eh_frame:000000000000A81E                 db  8Dh
.eh_frame:000000000000A81F                 db    4
.eh_frame:000000000000A820                 db  42h ; B
.eh_frame:000000000000A821                 db  0Eh
.eh_frame:000000000000A822                 db  28h ; (
.eh_frame:000000000000A823                 db  8Ch
.eh_frame:000000000000A824                 db    5
.eh_frame:000000000000A825                 db  45h ; E
.eh_frame:000000000000A826                 db  0Eh
.eh_frame:000000000000A827                 db  30h ; 0
.eh_frame:000000000000A828                 db  86h
.eh_frame:000000000000A829                 db    6
.eh_frame:000000000000A82A                 db  41h ; A
.eh_frame:000000000000A82B                 db  0Eh
.eh_frame:000000000000A82C                 db  38h ; 8
.eh_frame:000000000000A82D                 db  83h
.eh_frame:000000000000A82E                 db    7
.eh_frame:000000000000A82F                 db  52h ; R
.eh_frame:000000000000A830                 db  0Eh
.eh_frame:000000000000A831                 db  90h
.eh_frame:000000000000A832                 db    1
.eh_frame:000000000000A833                 db    2
.eh_frame:000000000000A834                 db  82h
.eh_frame:000000000000A835                 db  0Ah
.eh_frame:000000000000A836                 db  0Eh
.eh_frame:000000000000A837                 db  38h ; 8
.eh_frame:000000000000A838                 db  41h ; A
.eh_frame:000000000000A839                 db  0Eh
.eh_frame:000000000000A83A                 db  30h ; 0
.eh_frame:000000000000A83B                 db  41h ; A
.eh_frame:000000000000A83C                 db  0Eh
.eh_frame:000000000000A83D                 db  28h ; (
.eh_frame:000000000000A83E                 db  42h ; B
.eh_frame:000000000000A83F                 db  0Eh
.eh_frame:000000000000A840                 db  20h
.eh_frame:000000000000A841                 db  42h ; B
.eh_frame:000000000000A842                 db  0Eh
.eh_frame:000000000000A843                 db  18h
.eh_frame:000000000000A844                 db  42h ; B
.eh_frame:000000000000A845                 db  0Eh
.eh_frame:000000000000A846                 db  10h
.eh_frame:000000000000A847                 db  42h ; B
.eh_frame:000000000000A848                 db  0Eh
.eh_frame:000000000000A849                 db    8
.eh_frame:000000000000A84A                 db  48h ; H
.eh_frame:000000000000A84B                 db  0Bh
.eh_frame:000000000000A84C                 db    0
.eh_frame:000000000000A84D                 db    0
.eh_frame:000000000000A84E                 db    0
.eh_frame:000000000000A84F                 db    0
.eh_frame:000000000000A850                 db  44h ; D
.eh_frame:000000000000A851                 db    0
.eh_frame:000000000000A852                 db    0
.eh_frame:000000000000A853                 db    0
.eh_frame:000000000000A854                 db 0ACh
.eh_frame:000000000000A855                 db  0Dh
.eh_frame:000000000000A856                 db    0
.eh_frame:000000000000A857                 db    0
.eh_frame:000000000000A858                 db  58h ; X
.eh_frame:000000000000A859                 db 0DBh
.eh_frame:000000000000A85A                 db 0FFh
.eh_frame:000000000000A85B                 db 0FFh
.eh_frame:000000000000A85C                 db  65h ; e
.eh_frame:000000000000A85D                 db    0
.eh_frame:000000000000A85E                 db    0
.eh_frame:000000000000A85F                 db    0
.eh_frame:000000000000A860                 db    0
.eh_frame:000000000000A861                 db  42h ; B
.eh_frame:000000000000A862                 db  0Eh
.eh_frame:000000000000A863                 db  10h
.eh_frame:000000000000A864                 db  8Fh
.eh_frame:000000000000A865                 db    2
.eh_frame:000000000000A866                 db  42h ; B
.eh_frame:000000000000A867                 db  0Eh
.eh_frame:000000000000A868                 db  18h
.eh_frame:000000000000A869                 db  8Eh
.eh_frame:000000000000A86A                 db    3
.eh_frame:000000000000A86B                 db  45h ; E
.eh_frame:000000000000A86C                 db  0Eh
.eh_frame:000000000000A86D                 db  20h
.eh_frame:000000000000A86E                 db  8Dh
.eh_frame:000000000000A86F                 db    4
.eh_frame:000000000000A870                 db  42h ; B
.eh_frame:000000000000A871                 db  0Eh
.eh_frame:000000000000A872                 db  28h ; (
.eh_frame:000000000000A873                 db  8Ch
.eh_frame:000000000000A874                 db    5
.eh_frame:000000000000A875                 db  48h ; H
.eh_frame:000000000000A876                 db  0Eh
.eh_frame:000000000000A877                 db  30h ; 0
.eh_frame:000000000000A878                 db  86h
.eh_frame:000000000000A879                 db    6
.eh_frame:000000000000A87A                 db  48h ; H
.eh_frame:000000000000A87B                 db  0Eh
.eh_frame:000000000000A87C                 db  38h ; 8
.eh_frame:000000000000A87D                 db  83h
.eh_frame:000000000000A87E                 db    7
.eh_frame:000000000000A87F                 db  4Dh ; M
.eh_frame:000000000000A880                 db  0Eh
.eh_frame:000000000000A881                 db  40h ; @
.eh_frame:000000000000A882                 db  72h ; r
.eh_frame:000000000000A883                 db  0Eh
.eh_frame:000000000000A884                 db  38h ; 8
.eh_frame:000000000000A885                 db  41h ; A
.eh_frame:000000000000A886                 db  0Eh
.eh_frame:000000000000A887                 db  30h ; 0
.eh_frame:000000000000A888                 db  41h ; A
.eh_frame:000000000000A889                 db  0Eh
.eh_frame:000000000000A88A                 db  28h ; (
.eh_frame:000000000000A88B                 db  42h ; B
.eh_frame:000000000000A88C                 db  0Eh
.eh_frame:000000000000A88D                 db  20h
.eh_frame:000000000000A88E                 db  42h ; B
.eh_frame:000000000000A88F                 db  0Eh
.eh_frame:000000000000A890                 db  18h
.eh_frame:000000000000A891                 db  42h ; B
.eh_frame:000000000000A892                 db  0Eh
.eh_frame:000000000000A893                 db  10h
.eh_frame:000000000000A894                 db  42h ; B
.eh_frame:000000000000A895                 db  0Eh
.eh_frame:000000000000A896                 db    8
.eh_frame:000000000000A897                 db    0
.eh_frame:000000000000A898                 db  14h
.eh_frame:000000000000A899                 db    0
.eh_frame:000000000000A89A                 db    0
.eh_frame:000000000000A89B                 db    0
.eh_frame:000000000000A89C                 db 0F4h
.eh_frame:000000000000A89D                 db  0Dh
.eh_frame:000000000000A89E                 db    0
.eh_frame:000000000000A89F                 db    0
.eh_frame:000000000000A8A0                 db  80h
.eh_frame:000000000000A8A1                 db 0DBh
.eh_frame:000000000000A8A2                 db 0FFh
.eh_frame:000000000000A8A3                 db 0FFh
.eh_frame:000000000000A8A4                 db    2
.eh_frame:000000000000A8A5                 db    0
.eh_frame:000000000000A8A6                 db    0
.eh_frame:000000000000A8A7                 db    0
.eh_frame:000000000000A8A8                 db    0
.eh_frame:000000000000A8A9                 db    0
.eh_frame:000000000000A8AA                 db    0
.eh_frame:000000000000A8AB                 db    0
.eh_frame:000000000000A8AC                 db    0
.eh_frame:000000000000A8AD                 db    0
.eh_frame:000000000000A8AE                 db    0
.eh_frame:000000000000A8AF                 db    0
.eh_frame:000000000000A8B0                 db  10h
.eh_frame:000000000000A8B1                 db    0
.eh_frame:000000000000A8B2                 db    0
.eh_frame:000000000000A8B3                 db    0
.eh_frame:000000000000A8B4                 db  0Ch
.eh_frame:000000000000A8B5                 db  0Eh
.eh_frame:000000000000A8B6                 db    0
.eh_frame:000000000000A8B7                 db    0
.eh_frame:000000000000A8B8                 db  78h ; x
.eh_frame:000000000000A8B9                 db 0DBh
.eh_frame:000000000000A8BA                 db 0FFh
.eh_frame:000000000000A8BB                 db 0FFh
.eh_frame:000000000000A8BC                 db  0Eh
.eh_frame:000000000000A8BD                 db    0
.eh_frame:000000000000A8BE                 db    0
.eh_frame:000000000000A8BF                 db    0
.eh_frame:000000000000A8C0                 db    0
.eh_frame:000000000000A8C1                 db    0
.eh_frame:000000000000A8C2                 db    0
.eh_frame:000000000000A8C3                 db    0
.eh_frame:000000000000A8C4 __FRAME_END__   db    0
.eh_frame:000000000000A8C5                 db    0
.eh_frame:000000000000A8C6                 db    0
.eh_frame:000000000000A8C7                 db    0
.eh_frame:000000000000A8C7 _eh_frame       ends
.eh_frame:000000000000A8C7
.init_array:000000000020A930 ; ELF Initialization Function Table
.init_array:000000000020A930 ; ===========================================================================
.init_array:000000000020A930
.init_array:000000000020A930 ; Segment type: Pure data
.init_array:000000000020A930 ; Segment permissions: Read/Write
.init_array:000000000020A930 _init_array     segment qword public 'DATA' use64
.init_array:000000000020A930                 assume cs:_init_array
.init_array:000000000020A930                 ;org 20A930h
.init_array:000000000020A930 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020A930                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020A930                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020A930 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020A930
.fini_array:000000000020A938 ; ELF Termination Function Table
.fini_array:000000000020A938 ; ===========================================================================
.fini_array:000000000020A938
.fini_array:000000000020A938 ; Segment type: Pure data
.fini_array:000000000020A938 ; Segment permissions: Read/Write
.fini_array:000000000020A938 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020A938                 assume cs:_fini_array
.fini_array:000000000020A938                 ;org 20A938h
.fini_array:000000000020A938 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020A938                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020A938 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020A938
.data.rel.ro:000000000020A940 ; ===========================================================================
.data.rel.ro:000000000020A940
.data.rel.ro:000000000020A940 ; Segment type: Pure data
.data.rel.ro:000000000020A940 ; Segment permissions: Read/Write
.data.rel.ro:000000000020A940 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020A940                 assume cs:_data_rel_ro
.data.rel.ro:000000000020A940                 ;org 20A940h
.data.rel.ro:000000000020A940 ; struct option longopts
.data.rel.ro:000000000020A940 longopts        dq offset aAll          ; name
.data.rel.ro:000000000020A940                                         ; DATA XREF: main:loc_1C28↑o
.data.rel.ro:000000000020A940                 dd 0                    ; has_arg ; "all"
.data.rel.ro:000000000020A940                 db 4 dup(0)
.data.rel.ro:000000000020A940                 dq 0                    ; flag
.data.rel.ro:000000000020A940                 dd 61h                  ; val
.data.rel.ro:000000000020A940                 db 4 dup(0)
.data.rel.ro:000000000020A960                 dq offset aSystemBoot+7 ; "boot"
.data.rel.ro:000000000020A968                 db    0
.data.rel.ro:000000000020A969                 db    0
.data.rel.ro:000000000020A96A                 db    0
.data.rel.ro:000000000020A96B                 db    0
.data.rel.ro:000000000020A96C                 db    0
.data.rel.ro:000000000020A96D                 db    0
.data.rel.ro:000000000020A96E                 db    0
.data.rel.ro:000000000020A96F                 db    0
.data.rel.ro:000000000020A970                 db    0
.data.rel.ro:000000000020A971                 db    0
.data.rel.ro:000000000020A972                 db    0
.data.rel.ro:000000000020A973                 db    0
.data.rel.ro:000000000020A974                 db    0
.data.rel.ro:000000000020A975                 db    0
.data.rel.ro:000000000020A976                 db    0
.data.rel.ro:000000000020A977                 db    0
.data.rel.ro:000000000020A978                 db  62h ; b
.data.rel.ro:000000000020A979                 db    0
.data.rel.ro:000000000020A97A                 db    0
.data.rel.ro:000000000020A97B                 db    0
.data.rel.ro:000000000020A97C                 db    0
.data.rel.ro:000000000020A97D                 db    0
.data.rel.ro:000000000020A97E                 db    0
.data.rel.ro:000000000020A97F                 db    0
.data.rel.ro:000000000020A980                 dq offset aCount        ; "count"
.data.rel.ro:000000000020A988                 db    0
.data.rel.ro:000000000020A989                 db    0
.data.rel.ro:000000000020A98A                 db    0
.data.rel.ro:000000000020A98B                 db    0
.data.rel.ro:000000000020A98C                 db    0
.data.rel.ro:000000000020A98D                 db    0
.data.rel.ro:000000000020A98E                 db    0
.data.rel.ro:000000000020A98F                 db    0
.data.rel.ro:000000000020A990                 db    0
.data.rel.ro:000000000020A991                 db    0
.data.rel.ro:000000000020A992                 db    0
.data.rel.ro:000000000020A993                 db    0
.data.rel.ro:000000000020A994                 db    0
.data.rel.ro:000000000020A995                 db    0
.data.rel.ro:000000000020A996                 db    0
.data.rel.ro:000000000020A997                 db    0
.data.rel.ro:000000000020A998                 db  71h ; q
.data.rel.ro:000000000020A999                 db    0
.data.rel.ro:000000000020A99A                 db    0
.data.rel.ro:000000000020A99B                 db    0
.data.rel.ro:000000000020A99C                 db    0
.data.rel.ro:000000000020A99D                 db    0
.data.rel.ro:000000000020A99E                 db    0
.data.rel.ro:000000000020A99F                 db    0
.data.rel.ro:000000000020A9A0                 dq offset aDead         ; "dead"
.data.rel.ro:000000000020A9A8                 db    0
.data.rel.ro:000000000020A9A9                 db    0
.data.rel.ro:000000000020A9AA                 db    0
.data.rel.ro:000000000020A9AB                 db    0
.data.rel.ro:000000000020A9AC                 db    0
.data.rel.ro:000000000020A9AD                 db    0
.data.rel.ro:000000000020A9AE                 db    0
.data.rel.ro:000000000020A9AF                 db    0
.data.rel.ro:000000000020A9B0                 db    0
.data.rel.ro:000000000020A9B1                 db    0
.data.rel.ro:000000000020A9B2                 db    0
.data.rel.ro:000000000020A9B3                 db    0
.data.rel.ro:000000000020A9B4                 db    0
.data.rel.ro:000000000020A9B5                 db    0
.data.rel.ro:000000000020A9B6                 db    0
.data.rel.ro:000000000020A9B7                 db    0
.data.rel.ro:000000000020A9B8                 db  64h ; d
.data.rel.ro:000000000020A9B9                 db    0
.data.rel.ro:000000000020A9BA                 db    0
.data.rel.ro:000000000020A9BB                 db    0
.data.rel.ro:000000000020A9BC                 db    0
.data.rel.ro:000000000020A9BD                 db    0
.data.rel.ro:000000000020A9BE                 db    0
.data.rel.ro:000000000020A9BF                 db    0
.data.rel.ro:000000000020A9C0                 dq offset aHeading      ; "heading"
.data.rel.ro:000000000020A9C8                 db    0
.data.rel.ro:000000000020A9C9                 db    0
.data.rel.ro:000000000020A9CA                 db    0
.data.rel.ro:000000000020A9CB                 db    0
.data.rel.ro:000000000020A9CC                 db    0
.data.rel.ro:000000000020A9CD                 db    0
.data.rel.ro:000000000020A9CE                 db    0
.data.rel.ro:000000000020A9CF                 db    0
.data.rel.ro:000000000020A9D0                 db    0
.data.rel.ro:000000000020A9D1                 db    0
.data.rel.ro:000000000020A9D2                 db    0
.data.rel.ro:000000000020A9D3                 db    0
.data.rel.ro:000000000020A9D4                 db    0
.data.rel.ro:000000000020A9D5                 db    0
.data.rel.ro:000000000020A9D6                 db    0
.data.rel.ro:000000000020A9D7                 db    0
.data.rel.ro:000000000020A9D8                 db  48h ; H
.data.rel.ro:000000000020A9D9                 db    0
.data.rel.ro:000000000020A9DA                 db    0
.data.rel.ro:000000000020A9DB                 db    0
.data.rel.ro:000000000020A9DC                 db    0
.data.rel.ro:000000000020A9DD                 db    0
.data.rel.ro:000000000020A9DE                 db    0
.data.rel.ro:000000000020A9DF                 db    0
.data.rel.ro:000000000020A9E0                 dq offset aLogin_0      ; "login"
.data.rel.ro:000000000020A9E8                 db    0
.data.rel.ro:000000000020A9E9                 db    0
.data.rel.ro:000000000020A9EA                 db    0
.data.rel.ro:000000000020A9EB                 db    0
.data.rel.ro:000000000020A9EC                 db    0
.data.rel.ro:000000000020A9ED                 db    0
.data.rel.ro:000000000020A9EE                 db    0
.data.rel.ro:000000000020A9EF                 db    0
.data.rel.ro:000000000020A9F0                 db    0
.data.rel.ro:000000000020A9F1                 db    0
.data.rel.ro:000000000020A9F2                 db    0
.data.rel.ro:000000000020A9F3                 db    0
.data.rel.ro:000000000020A9F4                 db    0
.data.rel.ro:000000000020A9F5                 db    0
.data.rel.ro:000000000020A9F6                 db    0
.data.rel.ro:000000000020A9F7                 db    0
.data.rel.ro:000000000020A9F8                 db  6Ch ; l
.data.rel.ro:000000000020A9F9                 db    0
.data.rel.ro:000000000020A9FA                 db    0
.data.rel.ro:000000000020A9FB                 db    0
.data.rel.ro:000000000020A9FC                 db    0
.data.rel.ro:000000000020A9FD                 db    0
.data.rel.ro:000000000020A9FE                 db    0
.data.rel.ro:000000000020A9FF                 db    0
.data.rel.ro:000000000020AA00                 dq offset aLookup       ; "lookup"
.data.rel.ro:000000000020AA08                 db    0
.data.rel.ro:000000000020AA09                 db    0
.data.rel.ro:000000000020AA0A                 db    0
.data.rel.ro:000000000020AA0B                 db    0
.data.rel.ro:000000000020AA0C                 db    0
.data.rel.ro:000000000020AA0D                 db    0
.data.rel.ro:000000000020AA0E                 db    0
.data.rel.ro:000000000020AA0F                 db    0
.data.rel.ro:000000000020AA10                 db    0
.data.rel.ro:000000000020AA11                 db    0
.data.rel.ro:000000000020AA12                 db    0
.data.rel.ro:000000000020AA13                 db    0
.data.rel.ro:000000000020AA14                 db    0
.data.rel.ro:000000000020AA15                 db    0
.data.rel.ro:000000000020AA16                 db    0
.data.rel.ro:000000000020AA17                 db    0
.data.rel.ro:000000000020AA18                 db  80h
.data.rel.ro:000000000020AA19                 db    0
.data.rel.ro:000000000020AA1A                 db    0
.data.rel.ro:000000000020AA1B                 db    0
.data.rel.ro:000000000020AA1C                 db    0
.data.rel.ro:000000000020AA1D                 db    0
.data.rel.ro:000000000020AA1E                 db    0
.data.rel.ro:000000000020AA1F                 db    0
.data.rel.ro:000000000020AA20                 dq offset aMessage      ; "message"
.data.rel.ro:000000000020AA28                 db    0
.data.rel.ro:000000000020AA29                 db    0
.data.rel.ro:000000000020AA2A                 db    0
.data.rel.ro:000000000020AA2B                 db    0
.data.rel.ro:000000000020AA2C                 db    0
.data.rel.ro:000000000020AA2D                 db    0
.data.rel.ro:000000000020AA2E                 db    0
.data.rel.ro:000000000020AA2F                 db    0
.data.rel.ro:000000000020AA30                 db    0
.data.rel.ro:000000000020AA31                 db    0
.data.rel.ro:000000000020AA32                 db    0
.data.rel.ro:000000000020AA33                 db    0
.data.rel.ro:000000000020AA34                 db    0
.data.rel.ro:000000000020AA35                 db    0
.data.rel.ro:000000000020AA36                 db    0
.data.rel.ro:000000000020AA37                 db    0
.data.rel.ro:000000000020AA38                 db  54h ; T
.data.rel.ro:000000000020AA39                 db    0
.data.rel.ro:000000000020AA3A                 db    0
.data.rel.ro:000000000020AA3B                 db    0
.data.rel.ro:000000000020AA3C                 db    0
.data.rel.ro:000000000020AA3D                 db    0
.data.rel.ro:000000000020AA3E                 db    0
.data.rel.ro:000000000020AA3F                 db    0
.data.rel.ro:000000000020AA40                 dq offset aMesg         ; "mesg"
.data.rel.ro:000000000020AA48                 db    0
.data.rel.ro:000000000020AA49                 db    0
.data.rel.ro:000000000020AA4A                 db    0
.data.rel.ro:000000000020AA4B                 db    0
.data.rel.ro:000000000020AA4C                 db    0
.data.rel.ro:000000000020AA4D                 db    0
.data.rel.ro:000000000020AA4E                 db    0
.data.rel.ro:000000000020AA4F                 db    0
.data.rel.ro:000000000020AA50                 db    0
.data.rel.ro:000000000020AA51                 db    0
.data.rel.ro:000000000020AA52                 db    0
.data.rel.ro:000000000020AA53                 db    0
.data.rel.ro:000000000020AA54                 db    0
.data.rel.ro:000000000020AA55                 db    0
.data.rel.ro:000000000020AA56                 db    0
.data.rel.ro:000000000020AA57                 db    0
.data.rel.ro:000000000020AA58                 db  54h ; T
.data.rel.ro:000000000020AA59                 db    0
.data.rel.ro:000000000020AA5A                 db    0
.data.rel.ro:000000000020AA5B                 db    0
.data.rel.ro:000000000020AA5C                 db    0
.data.rel.ro:000000000020AA5D                 db    0
.data.rel.ro:000000000020AA5E                 db    0
.data.rel.ro:000000000020AA5F                 db    0
.data.rel.ro:000000000020AA60                 dq offset aProcess      ; "process"
.data.rel.ro:000000000020AA68                 db    0
.data.rel.ro:000000000020AA69                 db    0
.data.rel.ro:000000000020AA6A                 db    0
.data.rel.ro:000000000020AA6B                 db    0
.data.rel.ro:000000000020AA6C                 db    0
.data.rel.ro:000000000020AA6D                 db    0
.data.rel.ro:000000000020AA6E                 db    0
.data.rel.ro:000000000020AA6F                 db    0
.data.rel.ro:000000000020AA70                 db    0
.data.rel.ro:000000000020AA71                 db    0
.data.rel.ro:000000000020AA72                 db    0
.data.rel.ro:000000000020AA73                 db    0
.data.rel.ro:000000000020AA74                 db    0
.data.rel.ro:000000000020AA75                 db    0
.data.rel.ro:000000000020AA76                 db    0
.data.rel.ro:000000000020AA77                 db    0
.data.rel.ro:000000000020AA78                 db  70h ; p
.data.rel.ro:000000000020AA79                 db    0
.data.rel.ro:000000000020AA7A                 db    0
.data.rel.ro:000000000020AA7B                 db    0
.data.rel.ro:000000000020AA7C                 db    0
.data.rel.ro:000000000020AA7D                 db    0
.data.rel.ro:000000000020AA7E                 db    0
.data.rel.ro:000000000020AA7F                 db    0
.data.rel.ro:000000000020AA80                 dq offset aRunlevel     ; "runlevel"
.data.rel.ro:000000000020AA88                 db    0
.data.rel.ro:000000000020AA89                 db    0
.data.rel.ro:000000000020AA8A                 db    0
.data.rel.ro:000000000020AA8B                 db    0
.data.rel.ro:000000000020AA8C                 db    0
.data.rel.ro:000000000020AA8D                 db    0
.data.rel.ro:000000000020AA8E                 db    0
.data.rel.ro:000000000020AA8F                 db    0
.data.rel.ro:000000000020AA90                 db    0
.data.rel.ro:000000000020AA91                 db    0
.data.rel.ro:000000000020AA92                 db    0
.data.rel.ro:000000000020AA93                 db    0
.data.rel.ro:000000000020AA94                 db    0
.data.rel.ro:000000000020AA95                 db    0
.data.rel.ro:000000000020AA96                 db    0
.data.rel.ro:000000000020AA97                 db    0
.data.rel.ro:000000000020AA98                 db  72h ; r
.data.rel.ro:000000000020AA99                 db    0
.data.rel.ro:000000000020AA9A                 db    0
.data.rel.ro:000000000020AA9B                 db    0
.data.rel.ro:000000000020AA9C                 db    0
.data.rel.ro:000000000020AA9D                 db    0
.data.rel.ro:000000000020AA9E                 db    0
.data.rel.ro:000000000020AA9F                 db    0
.data.rel.ro:000000000020AAA0                 dq offset aShort        ; "short"
.data.rel.ro:000000000020AAA8                 db    0
.data.rel.ro:000000000020AAA9                 db    0
.data.rel.ro:000000000020AAAA                 db    0
.data.rel.ro:000000000020AAAB                 db    0
.data.rel.ro:000000000020AAAC                 db    0
.data.rel.ro:000000000020AAAD                 db    0
.data.rel.ro:000000000020AAAE                 db    0
.data.rel.ro:000000000020AAAF                 db    0
.data.rel.ro:000000000020AAB0                 db    0
.data.rel.ro:000000000020AAB1                 db    0
.data.rel.ro:000000000020AAB2                 db    0
.data.rel.ro:000000000020AAB3                 db    0
.data.rel.ro:000000000020AAB4                 db    0
.data.rel.ro:000000000020AAB5                 db    0
.data.rel.ro:000000000020AAB6                 db    0
.data.rel.ro:000000000020AAB7                 db    0
.data.rel.ro:000000000020AAB8                 db  73h ; s
.data.rel.ro:000000000020AAB9                 db    0
.data.rel.ro:000000000020AABA                 db    0
.data.rel.ro:000000000020AABB                 db    0
.data.rel.ro:000000000020AABC                 db    0
.data.rel.ro:000000000020AABD                 db    0
.data.rel.ro:000000000020AABE                 db    0
.data.rel.ro:000000000020AABF                 db    0
.data.rel.ro:000000000020AAC0                 dq offset aTime_0       ; "time"
.data.rel.ro:000000000020AAC8                 db    0
.data.rel.ro:000000000020AAC9                 db    0
.data.rel.ro:000000000020AACA                 db    0
.data.rel.ro:000000000020AACB                 db    0
.data.rel.ro:000000000020AACC                 db    0
.data.rel.ro:000000000020AACD                 db    0
.data.rel.ro:000000000020AACE                 db    0
.data.rel.ro:000000000020AACF                 db    0
.data.rel.ro:000000000020AAD0                 db    0
.data.rel.ro:000000000020AAD1                 db    0
.data.rel.ro:000000000020AAD2                 db    0
.data.rel.ro:000000000020AAD3                 db    0
.data.rel.ro:000000000020AAD4                 db    0
.data.rel.ro:000000000020AAD5                 db    0
.data.rel.ro:000000000020AAD6                 db    0
.data.rel.ro:000000000020AAD7                 db    0
.data.rel.ro:000000000020AAD8                 db  74h ; t
.data.rel.ro:000000000020AAD9                 db    0
.data.rel.ro:000000000020AADA                 db    0
.data.rel.ro:000000000020AADB                 db    0
.data.rel.ro:000000000020AADC                 db    0
.data.rel.ro:000000000020AADD                 db    0
.data.rel.ro:000000000020AADE                 db    0
.data.rel.ro:000000000020AADF                 db    0
.data.rel.ro:000000000020AAE0                 dq offset aUsers        ; "users"
.data.rel.ro:000000000020AAE8                 db    0
.data.rel.ro:000000000020AAE9                 db    0
.data.rel.ro:000000000020AAEA                 db    0
.data.rel.ro:000000000020AAEB                 db    0
.data.rel.ro:000000000020AAEC                 db    0
.data.rel.ro:000000000020AAED                 db    0
.data.rel.ro:000000000020AAEE                 db    0
.data.rel.ro:000000000020AAEF                 db    0
.data.rel.ro:000000000020AAF0                 db    0
.data.rel.ro:000000000020AAF1                 db    0
.data.rel.ro:000000000020AAF2                 db    0
.data.rel.ro:000000000020AAF3                 db    0
.data.rel.ro:000000000020AAF4                 db    0
.data.rel.ro:000000000020AAF5                 db    0
.data.rel.ro:000000000020AAF6                 db    0
.data.rel.ro:000000000020AAF7                 db    0
.data.rel.ro:000000000020AAF8                 db  75h ; u
.data.rel.ro:000000000020AAF9                 db    0
.data.rel.ro:000000000020AAFA                 db    0
.data.rel.ro:000000000020AAFB                 db    0
.data.rel.ro:000000000020AAFC                 db    0
.data.rel.ro:000000000020AAFD                 db    0
.data.rel.ro:000000000020AAFE                 db    0
.data.rel.ro:000000000020AAFF                 db    0
.data.rel.ro:000000000020AB00                 dq offset aWritable     ; "writable"
.data.rel.ro:000000000020AB08                 db    0
.data.rel.ro:000000000020AB09                 db    0
.data.rel.ro:000000000020AB0A                 db    0
.data.rel.ro:000000000020AB0B                 db    0
.data.rel.ro:000000000020AB0C                 db    0
.data.rel.ro:000000000020AB0D                 db    0
.data.rel.ro:000000000020AB0E                 db    0
.data.rel.ro:000000000020AB0F                 db    0
.data.rel.ro:000000000020AB10                 db    0
.data.rel.ro:000000000020AB11                 db    0
.data.rel.ro:000000000020AB12                 db    0
.data.rel.ro:000000000020AB13                 db    0
.data.rel.ro:000000000020AB14                 db    0
.data.rel.ro:000000000020AB15                 db    0
.data.rel.ro:000000000020AB16                 db    0
.data.rel.ro:000000000020AB17                 db    0
.data.rel.ro:000000000020AB18                 db  54h ; T
.data.rel.ro:000000000020AB19                 db    0
.data.rel.ro:000000000020AB1A                 db    0
.data.rel.ro:000000000020AB1B                 db    0
.data.rel.ro:000000000020AB1C                 db    0
.data.rel.ro:000000000020AB1D                 db    0
.data.rel.ro:000000000020AB1E                 db    0
.data.rel.ro:000000000020AB1F                 db    0
.data.rel.ro:000000000020AB20                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020AB28                 db    0
.data.rel.ro:000000000020AB29                 db    0
.data.rel.ro:000000000020AB2A                 db    0
.data.rel.ro:000000000020AB2B                 db    0
.data.rel.ro:000000000020AB2C                 db    0
.data.rel.ro:000000000020AB2D                 db    0
.data.rel.ro:000000000020AB2E                 db    0
.data.rel.ro:000000000020AB2F                 db    0
.data.rel.ro:000000000020AB30                 db    0
.data.rel.ro:000000000020AB31                 db    0
.data.rel.ro:000000000020AB32                 db    0
.data.rel.ro:000000000020AB33                 db    0
.data.rel.ro:000000000020AB34                 db    0
.data.rel.ro:000000000020AB35                 db    0
.data.rel.ro:000000000020AB36                 db    0
.data.rel.ro:000000000020AB37                 db    0
.data.rel.ro:000000000020AB38                 db  7Eh ; ~
.data.rel.ro:000000000020AB39                 db 0FFh
.data.rel.ro:000000000020AB3A                 db 0FFh
.data.rel.ro:000000000020AB3B                 db 0FFh
.data.rel.ro:000000000020AB3C                 db    0
.data.rel.ro:000000000020AB3D                 db    0
.data.rel.ro:000000000020AB3E                 db    0
.data.rel.ro:000000000020AB3F                 db    0
.data.rel.ro:000000000020AB40                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020AB48                 db    0
.data.rel.ro:000000000020AB49                 db    0
.data.rel.ro:000000000020AB4A                 db    0
.data.rel.ro:000000000020AB4B                 db    0
.data.rel.ro:000000000020AB4C                 db    0
.data.rel.ro:000000000020AB4D                 db    0
.data.rel.ro:000000000020AB4E                 db    0
.data.rel.ro:000000000020AB4F                 db    0
.data.rel.ro:000000000020AB50                 db    0
.data.rel.ro:000000000020AB51                 db    0
.data.rel.ro:000000000020AB52                 db    0
.data.rel.ro:000000000020AB53                 db    0
.data.rel.ro:000000000020AB54                 db    0
.data.rel.ro:000000000020AB55                 db    0
.data.rel.ro:000000000020AB56                 db    0
.data.rel.ro:000000000020AB57                 db    0
.data.rel.ro:000000000020AB58                 db  7Dh ; }
.data.rel.ro:000000000020AB59                 db 0FFh
.data.rel.ro:000000000020AB5A                 db 0FFh
.data.rel.ro:000000000020AB5B                 db 0FFh
.data.rel.ro:000000000020AB5C                 db    0
.data.rel.ro:000000000020AB5D                 db    0
.data.rel.ro:000000000020AB5E                 db    0
.data.rel.ro:000000000020AB5F                 db    0
.data.rel.ro:000000000020AB60                 db    0
.data.rel.ro:000000000020AB61                 db    0
.data.rel.ro:000000000020AB62                 db    0
.data.rel.ro:000000000020AB63                 db    0
.data.rel.ro:000000000020AB64                 db    0
.data.rel.ro:000000000020AB65                 db    0
.data.rel.ro:000000000020AB66                 db    0
.data.rel.ro:000000000020AB67                 db    0
.data.rel.ro:000000000020AB68                 db    0
.data.rel.ro:000000000020AB69                 db    0
.data.rel.ro:000000000020AB6A                 db    0
.data.rel.ro:000000000020AB6B                 db    0
.data.rel.ro:000000000020AB6C                 db    0
.data.rel.ro:000000000020AB6D                 db    0
.data.rel.ro:000000000020AB6E                 db    0
.data.rel.ro:000000000020AB6F                 db    0
.data.rel.ro:000000000020AB70                 db    0
.data.rel.ro:000000000020AB71                 db    0
.data.rel.ro:000000000020AB72                 db    0
.data.rel.ro:000000000020AB73                 db    0
.data.rel.ro:000000000020AB74                 db    0
.data.rel.ro:000000000020AB75                 db    0
.data.rel.ro:000000000020AB76                 db    0
.data.rel.ro:000000000020AB77                 db    0
.data.rel.ro:000000000020AB78                 db    0
.data.rel.ro:000000000020AB79                 db    0
.data.rel.ro:000000000020AB7A                 db    0
.data.rel.ro:000000000020AB7B                 db    0
.data.rel.ro:000000000020AB7C                 db    0
.data.rel.ro:000000000020AB7D                 db    0
.data.rel.ro:000000000020AB7E                 db    0
.data.rel.ro:000000000020AB7F                 db    0
.data.rel.ro:000000000020AB80                 public quoting_style_args
.data.rel.ro:000000000020AB80 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020AB88                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020AB90                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020AB98                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020ABA0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020ABA8                 dq offset aSC+4         ; "c"
.data.rel.ro:000000000020ABB0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020ABB8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020ABC0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020ABC8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020ABD0                 db    0
.data.rel.ro:000000000020ABD1                 db    0
.data.rel.ro:000000000020ABD2                 db    0
.data.rel.ro:000000000020ABD3                 db    0
.data.rel.ro:000000000020ABD4                 db    0
.data.rel.ro:000000000020ABD5                 db    0
.data.rel.ro:000000000020ABD6                 db    0
.data.rel.ro:000000000020ABD7                 db    0
.data.rel.ro:000000000020ABD7 _data_rel_ro    ends
.data.rel.ro:000000000020ABD7
LOAD:000000000020ABD8 ; ELF Dynamic Information
LOAD:000000000020ABD8 ; ===========================================================================
LOAD:000000000020ABD8
LOAD:000000000020ABD8 ; Segment type: Pure data
LOAD:000000000020ABD8 ; Segment permissions: Read/Write
LOAD:000000000020ABD8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020ABD8                 assume cs:LOAD
LOAD:000000000020ABD8                 ;org 20ABD8h
LOAD:000000000020ABD8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020ABD8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020ABD8                                         ; DT_NEEDED libc.so.6
LOAD:000000000020ABE8                 Elf64_Dyn <0Ch, 17C0h>  ; DT_INIT
LOAD:000000000020ABF8                 Elf64_Dyn <0Dh, 8440h>  ; DT_FINI
LOAD:000000000020AC08                 Elf64_Dyn <19h, 20A930h> ; DT_INIT_ARRAY
LOAD:000000000020AC18                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020AC28                 Elf64_Dyn <1Ah, 20A938h> ; DT_FINI_ARRAY
LOAD:000000000020AC38                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020AC48                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020AC58                 Elf64_Dyn <5, 9C8h>     ; DT_STRTAB
LOAD:000000000020AC68                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:000000000020AC78                 Elf64_Dyn <0Ah, 33Dh>   ; DT_STRSZ
LOAD:000000000020AC88                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020AC98                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020ACA8                 Elf64_Dyn <3, 20ADC8h>  ; DT_PLTGOT
LOAD:000000000020ACB8                 Elf64_Dyn <2, 5B8h>     ; DT_PLTRELSZ
LOAD:000000000020ACC8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020ACD8                 Elf64_Dyn <17h, 1208h>  ; DT_JMPREL
LOAD:000000000020ACE8                 Elf64_Dyn <7, 0E00h>    ; DT_RELA
LOAD:000000000020ACF8                 Elf64_Dyn <8, 408h>     ; DT_RELASZ
LOAD:000000000020AD08                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020AD18                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020AD28                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020AD38                 Elf64_Dyn <6FFFFFFEh, 0DA0h> ; DT_VERNEED
LOAD:000000000020AD48                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020AD58                 Elf64_Dyn <6FFFFFF0h, 0D06h> ; DT_VERSYM
LOAD:000000000020AD68                 Elf64_Dyn <6FFFFFF9h, 21h> ; DT_RELACOUNT
LOAD:000000000020AD78                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020AD88                 db    0
LOAD:000000000020AD89                 db    0
LOAD:000000000020AD8A                 db    0
LOAD:000000000020AD8B                 db    0
LOAD:000000000020AD8C                 db    0
LOAD:000000000020AD8D                 db    0
LOAD:000000000020AD8E                 db    0
LOAD:000000000020AD8F                 db    0
LOAD:000000000020AD90                 db    0
LOAD:000000000020AD91                 db    0
LOAD:000000000020AD92                 db    0
LOAD:000000000020AD93                 db    0
LOAD:000000000020AD94                 db    0
LOAD:000000000020AD95                 db    0
LOAD:000000000020AD96                 db    0
LOAD:000000000020AD97                 db    0
LOAD:000000000020AD98                 db    0
LOAD:000000000020AD99                 db    0
LOAD:000000000020AD9A                 db    0
LOAD:000000000020AD9B                 db    0
LOAD:000000000020AD9C                 db    0
LOAD:000000000020AD9D                 db    0
LOAD:000000000020AD9E                 db    0
LOAD:000000000020AD9F                 db    0
LOAD:000000000020ADA0                 db    0
LOAD:000000000020ADA1                 db    0
LOAD:000000000020ADA2                 db    0
LOAD:000000000020ADA3                 db    0
LOAD:000000000020ADA4                 db    0
LOAD:000000000020ADA5                 db    0
LOAD:000000000020ADA6                 db    0
LOAD:000000000020ADA7                 db    0
LOAD:000000000020ADA8                 db    0
LOAD:000000000020ADA9                 db    0
LOAD:000000000020ADAA                 db    0
LOAD:000000000020ADAB                 db    0
LOAD:000000000020ADAC                 db    0
LOAD:000000000020ADAD                 db    0
LOAD:000000000020ADAE                 db    0
LOAD:000000000020ADAF                 db    0
LOAD:000000000020ADB0                 db    0
LOAD:000000000020ADB1                 db    0
LOAD:000000000020ADB2                 db    0
LOAD:000000000020ADB3                 db    0
LOAD:000000000020ADB4                 db    0
LOAD:000000000020ADB5                 db    0
LOAD:000000000020ADB6                 db    0
LOAD:000000000020ADB7                 db    0
LOAD:000000000020ADB8                 db    0
LOAD:000000000020ADB9                 db    0
LOAD:000000000020ADBA                 db    0
LOAD:000000000020ADBB                 db    0
LOAD:000000000020ADBC                 db    0
LOAD:000000000020ADBD                 db    0
LOAD:000000000020ADBE                 db    0
LOAD:000000000020ADBF                 db    0
LOAD:000000000020ADC0                 db    0
LOAD:000000000020ADC1                 db    0
LOAD:000000000020ADC2                 db    0
LOAD:000000000020ADC3                 db    0
LOAD:000000000020ADC4                 db    0
LOAD:000000000020ADC5                 db    0
LOAD:000000000020ADC6                 db    0
LOAD:000000000020ADC7                 db    0
LOAD:000000000020ADC7 LOAD            ends
LOAD:000000000020ADC7
.got:000000000020ADC8 ; ===========================================================================
.got:000000000020ADC8
.got:000000000020ADC8 ; Segment type: Pure data
.got:000000000020ADC8 ; Segment permissions: Read/Write
.got:000000000020ADC8 _got            segment qword public 'DATA' use64
.got:000000000020ADC8                 assume cs:_got
.got:000000000020ADC8                 ;org 20ADC8h
.got:000000000020ADC8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020ADD0 qword_20ADD0    dq 0                    ; DATA XREF: sub_17E0↑r
.got:000000000020ADD8 qword_20ADD8    dq 0                    ; DATA XREF: sub_17E0+6↑r
.got:000000000020ADE0 utmpxname_ptr   dq offset utmpxname     ; DATA XREF: _utmpxname↑r
.got:000000000020ADE8 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000020ADE8                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000020ADF0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020ADF8 localtime_ptr   dq offset localtime     ; DATA XREF: _localtime↑r
.got:000000000020AE00 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020AE08 __errno_location_ptr dq offset __errno_location
.got:000000000020AE08                                         ; DATA XREF: ___errno_location↑r
.got:000000000020AE10 strncpy_ptr     dq offset strncpy       ; DATA XREF: _strncpy↑r
.got:000000000020AE18 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020AE20 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020AE28 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000020AE30 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020AE38 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:000000000020AE40 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020AE48 endutxent_ptr   dq offset endutxent     ; DATA XREF: _endutxent↑r
.got:000000000020AE50 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020AE58 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020AE58                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020AE60 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020AE68 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020AE68                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020AE70 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020AE78 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020AE78                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020AE80 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020AE88 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020AE90 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020AE98 gai_strerror_ptr dq offset gai_strerror ; DATA XREF: _gai_strerror↑r
.got:000000000020AEA0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020AEA8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020AEB0 __assert_fail_ptr dq offset __assert_fail
.got:000000000020AEB0                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020AEB8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020AEC0 strncat_ptr     dq offset strncat       ; DATA XREF: _strncat↑r
.got:000000000020AEC8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020AED0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020AED0                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020AED8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020AEE0 setutxent_ptr   dq offset setutxent     ; DATA XREF: _setutxent↑r
.got:000000000020AEE8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020AEF0 kill_ptr        dq offset kill          ; DATA XREF: _kill↑r
.got:000000000020AEF8 time_ptr        dq offset time          ; DATA XREF: _time↑r
.got:000000000020AF00 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020AF08 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020AF10 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020AF18 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020AF20 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020AF28 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020AF30 ttyname_ptr     dq offset ttyname       ; DATA XREF: _ttyname↑r
.got:000000000020AF38 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020AF40 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020AF48 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020AF50 strftime_ptr    dq offset strftime      ; DATA XREF: _strftime↑r
.got:000000000020AF58 getutxent_ptr   dq offset getutxent     ; DATA XREF: _getutxent↑r
.got:000000000020AF60 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020AF68 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020AF70 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020AF78 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020AF80 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020AF88 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020AF88                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020AF90 getaddrinfo_ptr dq offset getaddrinfo   ; DATA XREF: _getaddrinfo↑r
.got:000000000020AF98 strdup_ptr      dq offset strdup        ; DATA XREF: _strdup↑r
.got:000000000020AFA0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020AFA8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020AFB0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020AFB0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020AFB8 freeaddrinfo_ptr dq offset freeaddrinfo ; DATA XREF: _freeaddrinfo↑r
.got:000000000020AFC0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:000000000020AFC0                                         ; DATA XREF: ___sprintf_chk↑r
.got:000000000020AFC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020AFC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020AFD0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020AFD0                                         ; DATA XREF: start+24↑r
.got:000000000020AFD8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020AFD8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020AFE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020AFE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020AFE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020AFE8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020AFE8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020AFE8 _got            ends
.got:000000000020AFE8
LOAD:000000000020AFF0 ; ===========================================================================
LOAD:000000000020AFF0
LOAD:000000000020AFF0 ; Segment type: Pure data
LOAD:000000000020AFF0 ; Segment permissions: Read/Write
LOAD:000000000020AFF0 LOAD            segment byte public 'DATA' use64
LOAD:000000000020AFF0                 assume cs:LOAD
LOAD:000000000020AFF0                 ;org 20AFF0h
LOAD:000000000020AFF0                 align 20h
LOAD:000000000020AFF0 LOAD            ends
LOAD:000000000020AFF0
.data:000000000020B000 ; ===========================================================================
.data:000000000020B000
.data:000000000020B000 ; Segment type: Pure data
.data:000000000020B000 ; Segment permissions: Read/Write
.data:000000000020B000 _data           segment align_32 public 'DATA' use64
.data:000000000020B000                 assume cs:_data
.data:000000000020B000                 ;org 20B000h
.data:000000000020B000                 public __data_start ; weak
.data:000000000020B000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020B000                                         ; data_start
.data:000000000020B001                 db    0
.data:000000000020B002                 db    0
.data:000000000020B003                 db    0
.data:000000000020B004                 db    0
.data:000000000020B005                 db    0
.data:000000000020B006                 db    0
.data:000000000020B007                 db    0
.data:000000000020B008                 public __dso_handle
.data:000000000020B008 ; void *_dso_handle
.data:000000000020B008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020B008                                         ; atexit↑r ...
.data:000000000020B010 ; time_t now_7699
.data:000000000020B010 now_7699        dq 8000000000000000h    ; DATA XREF: print_user+262↑r
.data:000000000020B010                                         ; print_user+274↑r ...
.data:000000000020B018 mesg_7721       db  20h                 ; DATA XREF: print_line+EB↑o
.data:000000000020B019 byte_20B019     db 78h                  ; DATA XREF: print_line+17↑w
.data:000000000020B01A                 align 20h
.data:000000000020B020                 public Version
.data:000000000020B020 Version         dq offset a831          ; DATA XREF: main+157↑r
.data:000000000020B020                                         ; "8.31"
.data:000000000020B028                 public exit_failure
.data:000000000020B028 ; int exit_failure
.data:000000000020B028 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_36F2↑r
.data:000000000020B028                                         ; xalloc_die+17↑r
.data:000000000020B02C                 align 20h
.data:000000000020B040                 public quote_quoting_options
.data:000000000020B040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020B040                                         ; quote_mem↑o ...
.data:000000000020B041                 db    0
.data:000000000020B042                 db    0
.data:000000000020B043                 db    0
.data:000000000020B044                 db    0
.data:000000000020B045                 db    0
.data:000000000020B046                 db    0
.data:000000000020B047                 db    0
.data:000000000020B048                 db    0
.data:000000000020B049                 db    0
.data:000000000020B04A                 db    0
.data:000000000020B04B                 db    0
.data:000000000020B04C                 db    0
.data:000000000020B04D                 db    0
.data:000000000020B04E                 db    0
.data:000000000020B04F                 db    0
.data:000000000020B050                 db    0
.data:000000000020B051                 db    0
.data:000000000020B052                 db    0
.data:000000000020B053                 db    0
.data:000000000020B054                 db    0
.data:000000000020B055                 db    0
.data:000000000020B056                 db    0
.data:000000000020B057                 db    0
.data:000000000020B058                 db    0
.data:000000000020B059                 db    0
.data:000000000020B05A                 db    0
.data:000000000020B05B                 db    0
.data:000000000020B05C                 db    0
.data:000000000020B05D                 db    0
.data:000000000020B05E                 db    0
.data:000000000020B05F                 db    0
.data:000000000020B060                 db    0
.data:000000000020B061                 db    0
.data:000000000020B062                 db    0
.data:000000000020B063                 db    0
.data:000000000020B064                 db    0
.data:000000000020B065                 db    0
.data:000000000020B066                 db    0
.data:000000000020B067                 db    0
.data:000000000020B068                 db    0
.data:000000000020B069                 db    0
.data:000000000020B06A                 db    0
.data:000000000020B06B                 db    0
.data:000000000020B06C                 db    0
.data:000000000020B06D                 db    0
.data:000000000020B06E                 db    0
.data:000000000020B06F                 db    0
.data:000000000020B070                 db    0
.data:000000000020B071                 db    0
.data:000000000020B072                 db    0
.data:000000000020B073                 db    0
.data:000000000020B074                 db    0
.data:000000000020B075                 db    0
.data:000000000020B076                 db    0
.data:000000000020B077                 db    0
.data:000000000020B078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020B078                                         ; quotearg_n_options:loc_4C6D↑r ...
.data:000000000020B07C                 align 20h
.data:000000000020B080 ; void *slotvec
.data:000000000020B080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020B080                                         ; quotearg_n_options+76↑w ...
.data:000000000020B088                 align 10h
.data:000000000020B090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020B090                                         ; quotearg_n_options+187↑r ...
.data:000000000020B098 off_20B098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020B098 _data           ends
.data:000000000020B098
.bss:000000000020B0A0 ; ===========================================================================
.bss:000000000020B0A0
.bss:000000000020B0A0 ; Segment type: Uninitialized
.bss:000000000020B0A0 ; Segment permissions: Read/Write
.bss:000000000020B0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020B0A0                 assume cs:_bss
.bss:000000000020B0A0                 ;org 20B0A0h
.bss:000000000020B0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020B0A0                 public __bss_start ; weak
.bss:000000000020B0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000938↑o
.bss:000000000020B0A0                                         ; LOAD:0000000000000980↑o ...
.bss:000000000020B0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020B0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020B0A0                                         ; _edata
.bss:000000000020B0A0                                         ; Copy of shared data
.bss:000000000020B0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020B0A8 ; FILE *stdout
.bss:000000000020B0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000920↑o
.bss:000000000020B0A8                                         ; main+150↑r ...
.bss:000000000020B0A8                                         ; Alternative name is 'stdout'
.bss:000000000020B0A8                                         ; Copy of shared data
.bss:000000000020B0B0                 public optind@@GLIBC_2_2_5
.bss:000000000020B0B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000009B0↑o
.bss:000000000020B0B0                                         ; main:loc_1E9E↑r
.bss:000000000020B0B0                                         ; Alternative name is 'optind'
.bss:000000000020B0B0                                         ; Copy of shared data
.bss:000000000020B0B4                 align 8
.bss:000000000020B0B8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020B0B8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020B0B8                                         ; DATA XREF: LOAD:0000000000000950↑o
.bss:000000000020B0B8                                         ; LOAD:0000000000000968↑o ...
.bss:000000000020B0B8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020B0B8                                         ; Copy of shared data
.bss:000000000020B0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020B0C0 ; FILE *stderr
.bss:000000000020B0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000998↑o
.bss:000000000020B0C0                                         ; usage+3D↑r ...
.bss:000000000020B0C0                                         ; Alternative name is 'stderr'
.bss:000000000020B0C0                                         ; Copy of shared data
.bss:000000000020B0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020B0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020B0C9                 align 20h
.bss:000000000020B0E0 ; __int64 exitstr_7761
.bss:000000000020B0E0 exitstr_7761    dq ?                    ; DATA XREF: who+5D0↑r
.bss:000000000020B0E0                                         ; who+627↑r ...
.bss:000000000020B0E8 comment_7781    dq ?                    ; DATA XREF: who+2A7↑r
.bss:000000000020B0E8                                         ; who+2DE↑r ...
.bss:000000000020B0F0 ; int runlevline_7780
.bss:000000000020B0F0 runlevline_7780 dq ?                    ; DATA XREF: who+25B↑r
.bss:000000000020B0F0                                         ; who+282↑r ...
.bss:000000000020B0F8                 align 20h
.bss:000000000020B100 ; char buf_7706[33]
.bss:000000000020B100 buf_7706        db 21h dup(?)           ; DATA XREF: time_string_isra_1+2F↑o
.bss:000000000020B100                                         ; time_string_isra_1+43↑o ...
.bss:000000000020B121 idle_hhmm_7701  db    ? ;               ; DATA XREF: print_user+4E2↑o
.bss:000000000020B121                                         ; print_user+52B↑o
.bss:000000000020B122                 db    ? ;
.bss:000000000020B123                 db    ? ;
.bss:000000000020B124                 db    ? ;
.bss:000000000020B125                 db    ? ;
.bss:000000000020B126                 db    ? ;
.bss:000000000020B127                 db    ? ;
.bss:000000000020B128 ; void *hoststr_7742
.bss:000000000020B128 hoststr_7742    dq ?                    ; DATA XREF: print_user+176↑r
.bss:000000000020B128                                         ; print_user:loc_25A4↑r ...
.bss:000000000020B130 hostlen_7743    dq ?                    ; DATA XREF: print_user+16F↑r
.bss:000000000020B130                                         ; print_user:loc_26A3↑r ...
.bss:000000000020B138 time_format_width dd ?                  ; DATA XREF: main+2BD↑w
.bss:000000000020B138                                         ; main+302↑w ...
.bss:000000000020B13C                 align 20h
.bss:000000000020B140 ; char *time_format
.bss:000000000020B140 time_format     dq ?                    ; DATA XREF: main+2C7↑w
.bss:000000000020B140                                         ; main+30C↑w ...
.bss:000000000020B148 my_line_only    db ?                    ; DATA XREF: main:loc_1D82↑w
.bss:000000000020B148                                         ; main+31A↑w ...
.bss:000000000020B149 need_users      db ?                    ; DATA XREF: main:loc_1DA9↑w
.bss:000000000020B149                                         ; main+242↑w ...
.bss:000000000020B14A need_runlevel   db ?                    ; DATA XREF: main+234↑w
.bss:000000000020B14A                                         ; main:loc_1E33↑w ...
.bss:000000000020B14B need_clockchange db ?                   ; DATA XREF: main:loc_1D9A↑w
.bss:000000000020B14B                                         ; main+23B↑w ...
.bss:000000000020B14C need_initspawn  db ?                    ; DATA XREF: main+114↑w
.bss:000000000020B14C                                         ; main+22D↑w ...
.bss:000000000020B14D need_login      db ?                    ; DATA XREF: main+E8↑w
.bss:000000000020B14D                                         ; main+226↑w ...
.bss:000000000020B14E need_deadprocs  db ?                    ; DATA XREF: main:loc_1DBF↑w
.bss:000000000020B14E                                         ; main+21C↑w ...
.bss:000000000020B14F need_boottime   db ?                    ; DATA XREF: main:loc_1D73↑w
.bss:000000000020B14F                                         ; main+215↑w ...
.bss:000000000020B150 include_exit    db ?                    ; DATA XREF: main+200↑w
.bss:000000000020B150                                         ; main+257↑w ...
.bss:000000000020B151 include_mesg    db ?                    ; DATA XREF: main:loc_1D8E↑w
.bss:000000000020B151                                         ; main+249↑w ...
.bss:000000000020B152 include_heading db ?                    ; DATA XREF: main:loc_1D5B↑w
.bss:000000000020B152                                         ; who+51↑r
.bss:000000000020B153 include_idle    db ?                    ; DATA XREF: main+EF↑w
.bss:000000000020B153                                         ; main+1E0↑w ...
.bss:000000000020B154 short_output    db ?                    ; DATA XREF: main:loc_1D67↑w
.bss:000000000020B154                                         ; main+291↑w ...
.bss:000000000020B155 short_list      db ?                    ; DATA XREF: main:loc_1E49↑w
.bss:000000000020B155                                         ; who+3A↑r
.bss:000000000020B156 do_lookup       db ?                    ; DATA XREF: main+B3↑w
.bss:000000000020B156                                         ; print_user:loc_2720↑r ...
.bss:000000000020B157                 align 20h
.bss:000000000020B160 ; struct addrinfo hints_3317
.bss:000000000020B160 hints_3317      addrinfo <?>            ; DATA XREF: canon_host_r+3↑o
.bss:000000000020B160                                         ; canon_host_r+17↑w
.bss:000000000020B190 ; int last_cherror
.bss:000000000020B190 last_cherror    dd ?                    ; DATA XREF: canon_host↑o
.bss:000000000020B190                                         ; ch_strerror↑r
.bss:000000000020B194                 align 8
.bss:000000000020B198 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020B198                                         ; close_stdout+1B↑r
.bss:000000000020B199                 align 20h
.bss:000000000020B1A0 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020B1A0                                         ; close_stdout+56↑r
.bss:000000000020B1A8                 public program_name
.bss:000000000020B1A8 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020B1A8                                         ; set_program_name:loc_388D↑w
.bss:000000000020B1B0                 align 20h
.bss:000000000020B1C0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020B1C0                                         ; quotearg_free+46↑o ...
.bss:000000000020B1C1                 db    ? ;
.bss:000000000020B1C2                 db    ? ;
.bss:000000000020B1C3                 db    ? ;
.bss:000000000020B1C4                 db    ? ;
.bss:000000000020B1C5                 db    ? ;
.bss:000000000020B1C6                 db    ? ;
.bss:000000000020B1C7                 db    ? ;
.bss:000000000020B1C8                 db    ? ;
.bss:000000000020B1C9                 db    ? ;
.bss:000000000020B1CA                 db    ? ;
.bss:000000000020B1CB                 db    ? ;
.bss:000000000020B1CC                 db    ? ;
.bss:000000000020B1CD                 db    ? ;
.bss:000000000020B1CE                 db    ? ;
.bss:000000000020B1CF                 db    ? ;
.bss:000000000020B1D0                 db    ? ;
.bss:000000000020B1D1                 db    ? ;
.bss:000000000020B1D2                 db    ? ;
.bss:000000000020B1D3                 db    ? ;
.bss:000000000020B1D4                 db    ? ;
.bss:000000000020B1D5                 db    ? ;
.bss:000000000020B1D6                 db    ? ;
.bss:000000000020B1D7                 db    ? ;
.bss:000000000020B1D8                 db    ? ;
.bss:000000000020B1D9                 db    ? ;
.bss:000000000020B1DA                 db    ? ;
.bss:000000000020B1DB                 db    ? ;
.bss:000000000020B1DC                 db    ? ;
.bss:000000000020B1DD                 db    ? ;
.bss:000000000020B1DE                 db    ? ;
.bss:000000000020B1DF                 db    ? ;
.bss:000000000020B1E0                 db    ? ;
.bss:000000000020B1E1                 db    ? ;
.bss:000000000020B1E2                 db    ? ;
.bss:000000000020B1E3                 db    ? ;
.bss:000000000020B1E4                 db    ? ;
.bss:000000000020B1E5                 db    ? ;
.bss:000000000020B1E6                 db    ? ;
.bss:000000000020B1E7                 db    ? ;
.bss:000000000020B1E8                 db    ? ;
.bss:000000000020B1E9                 db    ? ;
.bss:000000000020B1EA                 db    ? ;
.bss:000000000020B1EB                 db    ? ;
.bss:000000000020B1EC                 db    ? ;
.bss:000000000020B1ED                 db    ? ;
.bss:000000000020B1EE                 db    ? ;
.bss:000000000020B1EF                 db    ? ;
.bss:000000000020B1F0                 db    ? ;
.bss:000000000020B1F1                 db    ? ;
.bss:000000000020B1F2                 db    ? ;
.bss:000000000020B1F3                 db    ? ;
.bss:000000000020B1F4                 db    ? ;
.bss:000000000020B1F5                 db    ? ;
.bss:000000000020B1F6                 db    ? ;
.bss:000000000020B1F7                 db    ? ;
.bss:000000000020B1F8                 db    ? ;
.bss:000000000020B1F9                 db    ? ;
.bss:000000000020B1FA                 db    ? ;
.bss:000000000020B1FB                 db    ? ;
.bss:000000000020B1FC                 db    ? ;
.bss:000000000020B1FD                 db    ? ;
.bss:000000000020B1FE                 db    ? ;
.bss:000000000020B1FF                 db    ? ;
.bss:000000000020B200                 db    ? ;
.bss:000000000020B201                 db    ? ;
.bss:000000000020B202                 db    ? ;
.bss:000000000020B203                 db    ? ;
.bss:000000000020B204                 db    ? ;
.bss:000000000020B205                 db    ? ;
.bss:000000000020B206                 db    ? ;
.bss:000000000020B207                 db    ? ;
.bss:000000000020B208                 db    ? ;
.bss:000000000020B209                 db    ? ;
.bss:000000000020B20A                 db    ? ;
.bss:000000000020B20B                 db    ? ;
.bss:000000000020B20C                 db    ? ;
.bss:000000000020B20D                 db    ? ;
.bss:000000000020B20E                 db    ? ;
.bss:000000000020B20F                 db    ? ;
.bss:000000000020B210                 db    ? ;
.bss:000000000020B211                 db    ? ;
.bss:000000000020B212                 db    ? ;
.bss:000000000020B213                 db    ? ;
.bss:000000000020B214                 db    ? ;
.bss:000000000020B215                 db    ? ;
.bss:000000000020B216                 db    ? ;
.bss:000000000020B217                 db    ? ;
.bss:000000000020B218                 db    ? ;
.bss:000000000020B219                 db    ? ;
.bss:000000000020B21A                 db    ? ;
.bss:000000000020B21B                 db    ? ;
.bss:000000000020B21C                 db    ? ;
.bss:000000000020B21D                 db    ? ;
.bss:000000000020B21E                 db    ? ;
.bss:000000000020B21F                 db    ? ;
.bss:000000000020B220                 db    ? ;
.bss:000000000020B221                 db    ? ;
.bss:000000000020B222                 db    ? ;
.bss:000000000020B223                 db    ? ;
.bss:000000000020B224                 db    ? ;
.bss:000000000020B225                 db    ? ;
.bss:000000000020B226                 db    ? ;
.bss:000000000020B227                 db    ? ;
.bss:000000000020B228                 db    ? ;
.bss:000000000020B229                 db    ? ;
.bss:000000000020B22A                 db    ? ;
.bss:000000000020B22B                 db    ? ;
.bss:000000000020B22C                 db    ? ;
.bss:000000000020B22D                 db    ? ;
.bss:000000000020B22E                 db    ? ;
.bss:000000000020B22F                 db    ? ;
.bss:000000000020B230                 db    ? ;
.bss:000000000020B231                 db    ? ;
.bss:000000000020B232                 db    ? ;
.bss:000000000020B233                 db    ? ;
.bss:000000000020B234                 db    ? ;
.bss:000000000020B235                 db    ? ;
.bss:000000000020B236                 db    ? ;
.bss:000000000020B237                 db    ? ;
.bss:000000000020B238                 db    ? ;
.bss:000000000020B239                 db    ? ;
.bss:000000000020B23A                 db    ? ;
.bss:000000000020B23B                 db    ? ;
.bss:000000000020B23C                 db    ? ;
.bss:000000000020B23D                 db    ? ;
.bss:000000000020B23E                 db    ? ;
.bss:000000000020B23F                 db    ? ;
.bss:000000000020B240                 db    ? ;
.bss:000000000020B241                 db    ? ;
.bss:000000000020B242                 db    ? ;
.bss:000000000020B243                 db    ? ;
.bss:000000000020B244                 db    ? ;
.bss:000000000020B245                 db    ? ;
.bss:000000000020B246                 db    ? ;
.bss:000000000020B247                 db    ? ;
.bss:000000000020B248                 db    ? ;
.bss:000000000020B249                 db    ? ;
.bss:000000000020B24A                 db    ? ;
.bss:000000000020B24B                 db    ? ;
.bss:000000000020B24C                 db    ? ;
.bss:000000000020B24D                 db    ? ;
.bss:000000000020B24E                 db    ? ;
.bss:000000000020B24F                 db    ? ;
.bss:000000000020B250                 db    ? ;
.bss:000000000020B251                 db    ? ;
.bss:000000000020B252                 db    ? ;
.bss:000000000020B253                 db    ? ;
.bss:000000000020B254                 db    ? ;
.bss:000000000020B255                 db    ? ;
.bss:000000000020B256                 db    ? ;
.bss:000000000020B257                 db    ? ;
.bss:000000000020B258                 db    ? ;
.bss:000000000020B259                 db    ? ;
.bss:000000000020B25A                 db    ? ;
.bss:000000000020B25B                 db    ? ;
.bss:000000000020B25C                 db    ? ;
.bss:000000000020B25D                 db    ? ;
.bss:000000000020B25E                 db    ? ;
.bss:000000000020B25F                 db    ? ;
.bss:000000000020B260                 db    ? ;
.bss:000000000020B261                 db    ? ;
.bss:000000000020B262                 db    ? ;
.bss:000000000020B263                 db    ? ;
.bss:000000000020B264                 db    ? ;
.bss:000000000020B265                 db    ? ;
.bss:000000000020B266                 db    ? ;
.bss:000000000020B267                 db    ? ;
.bss:000000000020B268                 db    ? ;
.bss:000000000020B269                 db    ? ;
.bss:000000000020B26A                 db    ? ;
.bss:000000000020B26B                 db    ? ;
.bss:000000000020B26C                 db    ? ;
.bss:000000000020B26D                 db    ? ;
.bss:000000000020B26E                 db    ? ;
.bss:000000000020B26F                 db    ? ;
.bss:000000000020B270                 db    ? ;
.bss:000000000020B271                 db    ? ;
.bss:000000000020B272                 db    ? ;
.bss:000000000020B273                 db    ? ;
.bss:000000000020B274                 db    ? ;
.bss:000000000020B275                 db    ? ;
.bss:000000000020B276                 db    ? ;
.bss:000000000020B277                 db    ? ;
.bss:000000000020B278                 db    ? ;
.bss:000000000020B279                 db    ? ;
.bss:000000000020B27A                 db    ? ;
.bss:000000000020B27B                 db    ? ;
.bss:000000000020B27C                 db    ? ;
.bss:000000000020B27D                 db    ? ;
.bss:000000000020B27E                 db    ? ;
.bss:000000000020B27F                 db    ? ;
.bss:000000000020B280                 db    ? ;
.bss:000000000020B281                 db    ? ;
.bss:000000000020B282                 db    ? ;
.bss:000000000020B283                 db    ? ;
.bss:000000000020B284                 db    ? ;
.bss:000000000020B285                 db    ? ;
.bss:000000000020B286                 db    ? ;
.bss:000000000020B287                 db    ? ;
.bss:000000000020B288                 db    ? ;
.bss:000000000020B289                 db    ? ;
.bss:000000000020B28A                 db    ? ;
.bss:000000000020B28B                 db    ? ;
.bss:000000000020B28C                 db    ? ;
.bss:000000000020B28D                 db    ? ;
.bss:000000000020B28E                 db    ? ;
.bss:000000000020B28F                 db    ? ;
.bss:000000000020B290                 db    ? ;
.bss:000000000020B291                 db    ? ;
.bss:000000000020B292                 db    ? ;
.bss:000000000020B293                 db    ? ;
.bss:000000000020B294                 db    ? ;
.bss:000000000020B295                 db    ? ;
.bss:000000000020B296                 db    ? ;
.bss:000000000020B297                 db    ? ;
.bss:000000000020B298                 db    ? ;
.bss:000000000020B299                 db    ? ;
.bss:000000000020B29A                 db    ? ;
.bss:000000000020B29B                 db    ? ;
.bss:000000000020B29C                 db    ? ;
.bss:000000000020B29D                 db    ? ;
.bss:000000000020B29E                 db    ? ;
.bss:000000000020B29F                 db    ? ;
.bss:000000000020B2A0                 db    ? ;
.bss:000000000020B2A1                 db    ? ;
.bss:000000000020B2A2                 db    ? ;
.bss:000000000020B2A3                 db    ? ;
.bss:000000000020B2A4                 db    ? ;
.bss:000000000020B2A5                 db    ? ;
.bss:000000000020B2A6                 db    ? ;
.bss:000000000020B2A7                 db    ? ;
.bss:000000000020B2A8                 db    ? ;
.bss:000000000020B2A9                 db    ? ;
.bss:000000000020B2AA                 db    ? ;
.bss:000000000020B2AB                 db    ? ;
.bss:000000000020B2AC                 db    ? ;
.bss:000000000020B2AD                 db    ? ;
.bss:000000000020B2AE                 db    ? ;
.bss:000000000020B2AF                 db    ? ;
.bss:000000000020B2B0                 db    ? ;
.bss:000000000020B2B1                 db    ? ;
.bss:000000000020B2B2                 db    ? ;
.bss:000000000020B2B3                 db    ? ;
.bss:000000000020B2B4                 db    ? ;
.bss:000000000020B2B5                 db    ? ;
.bss:000000000020B2B6                 db    ? ;
.bss:000000000020B2B7                 db    ? ;
.bss:000000000020B2B8                 db    ? ;
.bss:000000000020B2B9                 db    ? ;
.bss:000000000020B2BA                 db    ? ;
.bss:000000000020B2BB                 db    ? ;
.bss:000000000020B2BC                 db    ? ;
.bss:000000000020B2BD                 db    ? ;
.bss:000000000020B2BE                 db    ? ;
.bss:000000000020B2BF                 db    ? ;
.bss:000000000020B2C0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020B2C0                                         ; get_quoting_style↑o ...
.bss:000000000020B2D0 xmmword_20B2D0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020B2D0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020B2E0 xmmword_20B2E0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020B2E0                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020B2F0 qword_20B2F0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020B2F0                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020B2F0 _bss            ends
.bss:000000000020B2F0
.prgend:000000000020B2F8 ; ===========================================================================
.prgend:000000000020B2F8
.prgend:000000000020B2F8 ; Segment type: Zero-length
.prgend:000000000020B2F8 _prgend         segment byte public '' use64
.prgend:000000000020B2F8 _end            label byte
.prgend:000000000020B2F8 _prgend         ends
.prgend:000000000020B2F8
extern:000000000020B300 ; ===========================================================================
extern:000000000020B300
extern:000000000020B300 ; Segment type: Externs
extern:000000000020B300 ; extern
extern:000000000020B300 ; int utmpxname(const char *file)
extern:000000000020B300                 extrn utmpxname:near    ; CODE XREF: _utmpxname↑j
extern:000000000020B300                                         ; DATA XREF: .got:utmpxname_ptr↑o
extern:000000000020B308                 extrn __snprintf_chk:near
extern:000000000020B308                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000020B308                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000020B310 ; void free(void *ptr)
extern:000000000020B310                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020B310                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020B318 ; struct tm *localtime(const time_t *timer)
extern:000000000020B318                 extrn localtime:near    ; CODE XREF: _localtime↑j
extern:000000000020B318                                         ; DATA XREF: .got:localtime_ptr↑o
extern:000000000020B320 ; void __noreturn abort(void)
extern:000000000020B320                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020B320                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020B328 ; int *_errno_location(void)
extern:000000000020B328                 extrn __errno_location:near
extern:000000000020B328                                         ; CODE XREF: ___errno_location↑j
extern:000000000020B328                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020B330 ; char *strncpy(char *dest, const char *src, size_t n)
extern:000000000020B330                 extrn strncpy:near      ; CODE XREF: _strncpy↑j
extern:000000000020B330                                         ; DATA XREF: .got:strncpy_ptr↑o
extern:000000000020B338 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020B338                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020B338                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020B340 ; void __noreturn exit(int status)
extern:000000000020B340                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020B340                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020B348 ; char *strcpy(char *dest, const char *src)
extern:000000000020B348                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000020B348                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000020B350 ; size_t _fpending(FILE *fp)
extern:000000000020B350                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020B350                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020B358 ; int puts(const char *s)
extern:000000000020B358                 extrn puts:near         ; CODE XREF: _puts↑j
extern:000000000020B358                                         ; DATA XREF: .got:puts_ptr↑o
extern:000000000020B360 ; char *textdomain(const char *domainname)
extern:000000000020B360                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020B360                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020B368 ; void endutxent(void)
extern:000000000020B368                 extrn endutxent:near    ; CODE XREF: _endutxent↑j
extern:000000000020B368                                         ; DATA XREF: .got:endutxent_ptr↑o
extern:000000000020B370 ; int fclose(FILE *stream)
extern:000000000020B370                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020B370                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020B378 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020B378                 extrn bindtextdomain:near
extern:000000000020B378                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020B378                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020B380 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020B380                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020B380                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020B388 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020B388                 extrn __ctype_get_mb_cur_max:near
extern:000000000020B388                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020B388                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020B390 ; size_t strlen(const char *s)
extern:000000000020B390                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020B390                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020B398                 extrn __stack_chk_fail:near
extern:000000000020B398                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020B398                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020B3A0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020B3A0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020B3A0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020B3A8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020B3A8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020B3A8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020B3B0 ; char *strchr(const char *s, int c)
extern:000000000020B3B0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020B3B0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020B3B8 ; const char *gai_strerror(int ecode)
extern:000000000020B3B8                 extrn gai_strerror:near ; CODE XREF: _gai_strerror↑j
extern:000000000020B3B8                                         ; DATA XREF: .got:gai_strerror_ptr↑o
extern:000000000020B3C0 ; char *strrchr(const char *s, int c)
extern:000000000020B3C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020B3C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020B3C8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020B3C8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020B3C8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020B3D0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020B3D0                 extrn __assert_fail:near
extern:000000000020B3D0                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020B3D0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020B3D8 ; void *memset(void *s, int c, size_t n)
extern:000000000020B3D8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020B3D8                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020B3E0 ; char *strncat(char *dest, const char *src, size_t n)
extern:000000000020B3E0                 extrn strncat:near      ; CODE XREF: _strncat↑j
extern:000000000020B3E0                                         ; DATA XREF: .got:strncat_ptr↑o
extern:000000000020B3E8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020B3E8                 extrn __libc_start_main:near
extern:000000000020B3E8                                         ; CODE XREF: start+24↑p
extern:000000000020B3E8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020B3F0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020B3F0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020B3F0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020B3F8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020B3F8                 extrn fputs_unlocked:near
extern:000000000020B3F8                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020B3F8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020B400 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020B400                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020B400                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020B408 ; void setutxent(void)
extern:000000000020B408                 extrn setutxent:near    ; CODE XREF: _setutxent↑j
extern:000000000020B408                                         ; DATA XREF: .got:setutxent_ptr↑o
extern:000000000020B410 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020B410                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020B410                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020B418 ; int kill(__pid_t pid, int sig)
extern:000000000020B418                 extrn kill:near         ; CODE XREF: _kill↑j
extern:000000000020B418                                         ; DATA XREF: .got:kill_ptr↑o
extern:000000000020B420 ; time_t time(time_t *timer)
extern:000000000020B420                 extrn time:near         ; CODE XREF: _time↑j
extern:000000000020B420                                         ; DATA XREF: .got:time_ptr↑o
extern:000000000020B428 ; int fileno(FILE *stream)
extern:000000000020B428                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020B428                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020B430 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020B430                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020B430                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020B438 ; void *malloc(size_t size)
extern:000000000020B438                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020B438                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020B440 ; int fflush(FILE *stream)
extern:000000000020B440                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020B440                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020B448 ; char *nl_langinfo(nl_item item)
extern:000000000020B448                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020B448                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020B450 ; int _freading(FILE *fp)
extern:000000000020B450                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020B450                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020B458 ; char *ttyname(int fd)
extern:000000000020B458                 extrn ttyname:near      ; CODE XREF: _ttyname↑j
extern:000000000020B458                                         ; DATA XREF: .got:ttyname_ptr↑o
extern:000000000020B460 ; void *realloc(void *ptr, size_t size)
extern:000000000020B460                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020B460                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020B468 ; char *setlocale(int category, const char *locale)
extern:000000000020B468                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020B468                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020B470                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020B470                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020B478 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
extern:000000000020B478                 extrn strftime:near     ; CODE XREF: _strftime↑j
extern:000000000020B478                                         ; DATA XREF: .got:strftime_ptr↑o
extern:000000000020B480 ; struct utmpx *getutxent(void)
extern:000000000020B480                 extrn getutxent:near    ; CODE XREF: _getutxent↑j
extern:000000000020B480                                         ; DATA XREF: .got:getutxent_ptr↑o
extern:000000000020B488 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020B488                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020B488                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020B490 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020B490                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020B490                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020B498 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020B498                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020B498                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020B4A0 ; void __noreturn exit(int status)
extern:000000000020B4A0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020B4A0                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020B4A8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020B4A8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020B4A8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020B4B0                 extrn __fprintf_chk:near
extern:000000000020B4B0                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020B4B0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020B4B8 ; int getaddrinfo(const char *name, const char *service, const struct addrinfo *req, struct addrinfo **pai)
extern:000000000020B4B8                 extrn getaddrinfo:near  ; CODE XREF: _getaddrinfo↑j
extern:000000000020B4B8                                         ; DATA XREF: .got:getaddrinfo_ptr↑o
extern:000000000020B4C0 ; char *strdup(const char *s)
extern:000000000020B4C0                 extrn strdup:near       ; CODE XREF: _strdup↑j
extern:000000000020B4C0                                         ; DATA XREF: .got:strdup_ptr↑o
extern:000000000020B4C8 ; int mbsinit(const mbstate_t *ps)
extern:000000000020B4C8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020B4C8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020B4D0 ; int iswprint(wint_t wc)
extern:000000000020B4D0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020B4D0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020B4D8 ; int __fastcall __cxa_finalize(void *)
extern:000000000020B4D8                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020B4D8                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020B4D8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020B4E0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020B4E0                 extrn __ctype_b_loc:near
extern:000000000020B4E0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020B4E0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020B4E8 ; void freeaddrinfo(struct addrinfo *ai)
extern:000000000020B4E8                 extrn freeaddrinfo:near ; CODE XREF: _freeaddrinfo↑j
extern:000000000020B4E8                                         ; DATA XREF: .got:freeaddrinfo_ptr↑o
extern:000000000020B4F0                 extrn __sprintf_chk:near
extern:000000000020B4F0                                         ; CODE XREF: ___sprintf_chk↑j
extern:000000000020B4F0                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:000000000020B4F8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020B4F8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020B500                 extrn __gmon_start__:near ; weak
extern:000000000020B500                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020B500                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020B508                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020B508                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020B508
extern:000000000020B508
extern:000000000020B508                 end start
